void *kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(void *this)
{
  *this = off_26C2110A0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(void **this)
{
  *this = off_26C2110A0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *kaldi::quasar::ComputeEngineBufferItf::GetShapeString@<X0>(kaldi::quasar::ComputeEngineBufferItf *this@<X0>, void *a2@<X8>)
{
  int v4 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)this + 144))(this);
  if (v4)
  {
    int v5 = v4;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[ ", 2);
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)this + 152))(this, 0);
    std::ostream::operator<<();
    if (v5 >= 2)
    {
      uint64_t v6 = 1;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)this + 152))(this, v6);
        std::ostream::operator<<();
        uint64_t v6 = (v6 + 1);
      }
      while (v5 != v6);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ]", 2);
    std::stringbuf::str();
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x210559500](&v10);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "[]");
  }
}

void sub_20CEB3A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::ComputeEngineBufferItf::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void kaldi::quasar::ComputeEngineItf::CreateConcatMove(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1] - *a2;
  if (v7 == 1)
  {
    uint64_t v8 = *v6;
    *uint64_t v6 = 0;
    *a4 = v8;
  }
  else if (v7)
  {
    __p = 0;
    v24 = 0;
    v25 = 0;
    std::vector<kaldi::quasar::ComputeEngineBufferItf *>::reserve(&__p, v7);
    v11 = *a2;
    v12 = a2[1];
    if (*a2 != v12)
    {
      v13 = v24;
      do
      {
        uint64_t v14 = *v11;
        if (v13 >= v25)
        {
          uint64_t v15 = (v13 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v16 = (v25 - (unsigned char *)__p) >> 2;
          if (v16 <= v15 + 1) {
            unint64_t v16 = v15 + 1;
          }
          if ((unint64_t)(v25 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v25, v17);
          }
          else {
            v18 = 0;
          }
          v19 = &v18[8 * v15];
          *(void *)v19 = v14;
          v13 = v19 + 8;
          v21 = (char *)__p;
          v20 = v24;
          if (v24 != __p)
          {
            do
            {
              uint64_t v22 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v19 - 1) = v22;
              v19 -= 8;
            }
            while (v20 != v21);
            v20 = (char *)__p;
          }
          __p = v19;
          v24 = v13;
          v25 = &v18[8 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(void *)v13 = v14;
          v13 += 8;
        }
        v24 = v13;
        ++v11;
      }
      while (v11 != v12);
    }
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 88))(a1, &__p, a3);
    if (__p)
    {
      v24 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *a4 = 0;
  }
}

void sub_20CEB3C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<kaldi::quasar::ComputeEngineBufferItf *>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    char v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void **kaldi::quasar::ComputeEngineItf::CreateSplitMove@<X0>(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t *a3@<X8>)
{
  result = *a2;
  if (!*a2) {
    goto LABEL_5;
  }
  result = (void **)(*((uint64_t (**)(void **))*result + 18))(result);
  if (!result) {
    goto LABEL_5;
  }
  result = (void **)(*((uint64_t (**)(void **, void))**a2 + 19))(*a2, 0);
  if (result == 1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v13[4] = a3 + 2;
    unint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), 1uLL);
    v13[0] = v7;
    v13[1] = v7;
    v13[3] = &v7[v8];
    char v9 = *a2;
    *a2 = 0;
    *unint64_t v7 = v9;
    v13[2] = v7 + 1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a3, v13);
    uint64_t v10 = a3[1];
    result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v13);
    a3[1] = v10;
    return result;
  }
  if (result)
  {
    v11 = *a2;
    v12 = *(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 96);
    return (void **)v12(a1, v11);
  }
  else
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_20CEB3E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
}

void kaldi::quasar::ComputeEngineItf::RunBatch(uint64_t a1, long long **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  char v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      kaldi::quasar::ComputeEngineItf::CreateConcatMove(a1, (uint64_t **)v9 + 3, 0, &p_p);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v11 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      p_data = (void **)&p_p->__r_.__value_.__l.__data_;
      p_p = 0;
      v33 = p_data;
      unint64_t v13 = v35;
      if (v35 >= v36)
      {
        uint64_t v17 = (uint64_t)(v35 - v34) >> 5;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v36 - v34;
        if ((uint64_t)(v36 - v34) >> 4 > v18) {
          unint64_t v18 = v19 >> 4;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        v41 = &v36;
        v21 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v36, v20);
        uint64_t v22 = &v21[4 * v17];
        v37 = v21;
        v38 = v22;
        v40 = &v21[4 * v23];
        long long v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v22[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v22 = v24;
        memset(&__p, 0, sizeof(__p));
        v25 = v33;
        v33 = 0;
        v22[3] = (uint64_t)v25;
        v39 = (char *)(v22 + 4);
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v34, &v37);
        unint64_t v16 = v35;
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v37);
      }
      else
      {
        long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v35 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v13 = v14;
        memset(&__p, 0, sizeof(__p));
        uint64_t v15 = v33;
        v33 = 0;
        *(void *)(v13 + 24) = v15;
        unint64_t v16 = v13 + 32;
      }
      unint64_t v35 = v16;
      v26 = v33;
      v33 = 0;
      if (v26) {
        (*((void (**)(void **))*v26 + 1))(v26);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v27 = (void **)&p_p->__r_.__value_.__l.__data_;
      p_p = 0;
      if (v27) {
        (*((void (**)(void **))*v27 + 1))(v27);
      }
      v9 += 3;
    }
    while (v9 != v10);
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)a1 + 112))(a1, &v34, a3, a4, &v37);
  uint64_t v28 = *a5;
  std::string::size_type v29 = a5[1];
  while (v29 != v28)
  {
    v29 -= 24;
    __p.__r_.__value_.__r.__words[0] = v29;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  a5[1] = v28;
  v30 = (void ***)v37;
  v31 = (void ***)v38;
  if (v37 != v38)
  {
    do
    {
      kaldi::quasar::ComputeEngineItf::CreateSplitMove(a1, v30, (uint64_t *)&__p);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100](a5, (uint64_t)&__p);
      p_p = &__p;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      ++v30;
    }
    while (v30 != v31);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v37 = &v34;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
}

void sub_20CEB411C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  a9 = (void **)&a17;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)&a14;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    result = std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v16);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20CEB42F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(kaldi::quasar::ComputeEngineConfigItf *this)
{
  *(void *)this = off_26C211158;
  v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *kaldi::quasar::ComputeEngineConfigItf::CreateComputeEngineAllowingFallback@<X0>(kaldi::quasar::ComputeEngineConfigItf *this@<X0>, uint64_t a2@<X8>)
{
  result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)this + 24))(&v4);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = v4;
  return result;
}

uint64_t kaldi::quasar::ComputeEngineConfigItf::ComputeEngineUpgradeLikelyExists(kaldi::quasar::ComputeEngineConfigItf *this)
{
  return 0;
}

void kaldi::quasar::ComputeEngineBufferItf::CopyFromImpl(kaldi::quasar::ComputeEngineBufferItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "CopyFromImpl", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 42);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "CopyFromImpl not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::ComputeEngineBufferItf::GetWritableDataFloat(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetWritableDataFloat", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 53);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetWritableDataFloat not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetDataFloat(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetDataFloat", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 54);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetDataFloat not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetDataInt32(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetDataInt32", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 55);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetDataInt32 not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

uint64_t std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

float non_variance_term_negative_log_likelihood_asm(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5)
{
  float32x4_t v5 = 0uLL;
  float32x4_t v6 = 0uLL;
  uint64_t v7 = a5 - 24;
  if (v7 >= 0)
  {
    float32x4_t v8 = *a2;
    a2 += 6;
    float32x4_t v9 = v8;
    float32x4_t v10 = a2[-5];
    float32x4_t v11 = *a1;
    a1 += 6;
    float32x4_t v12 = v11;
    float32x4_t v13 = *a3;
    a3 += 6;
    float32x4_t v14 = vrecpeq_f32(v9);
    float32x4_t v15 = vrecpeq_f32(v10);
    float32x4_t v16 = a2[-4];
    float32x4_t v17 = a2[-3];
    float32x4_t v18 = a2[-2];
    float32x4_t v19 = a2[-1];
    float32x4_t v20 = a1[-2];
    float32x4_t v21 = a1[-1];
    float32x4_t v22 = a3[-2];
    float32x4_t v23 = a3[-1];
    float32x4_t v24 = vsubq_f32(v13, v12);
    float32x4_t v25 = vsubq_f32(a3[-5], a1[-5]);
    float32x4_t v26 = *a4;
    a4 += 6;
    float32x4_t v27 = vrecpeq_f32(v16);
    float32x4_t v28 = vrecpeq_f32(v17);
    float32x4_t v29 = vmulq_f32(v14, vrecpsq_f32(v9, v14));
    float32x4_t v30 = vmulq_f32(v15, vrecpsq_f32(v10, v15));
    float32x4_t v31 = vrecpsq_f32(v16, v27);
    float32x4_t v32 = vrecpsq_f32(v17, v28);
    float32x4_t v33 = vrecpsq_f32(v9, v29);
    float32x4_t v34 = vrecpsq_f32(v10, v30);
    float32x4_t v35 = vsubq_f32(a3[-4], a1[-4]);
    float32x4_t v36 = vsubq_f32(a3[-3], a1[-3]);
    float32x4_t v37 = a4[-4];
    float32x4_t v38 = a4[-3];
    float32x4_t v39 = vmulq_f32(vmulq_f32(v24, v24), v26);
    float32x4_t v40 = vmulq_f32(vmulq_f32(v25, v25), a4[-5]);
    for (v7 -= 24; v7 >= 0; v7 -= 24)
    {
      float32x4_t v41 = *a2;
      a2 += 6;
      float32x4_t v42 = v41;
      float32x4_t v43 = a2[-5];
      float32x4_t v44 = vrecpeq_f32(v18);
      float32x4_t v45 = vrecpeq_f32(v19);
      float32x4_t v46 = *a1;
      a1 += 6;
      float32x4_t v47 = v46;
      float32x4_t v48 = vmulq_f32(v27, v31);
      float32x4_t v49 = vmulq_f32(v28, v32);
      float32x4_t v50 = vsubq_f32(v22, v20);
      float32x4_t v51 = vsubq_f32(v23, v21);
      float32x4_t v52 = a4[-2];
      float32x4_t v53 = a4[-1];
      float32x4_t v54 = vrecpsq_f32(v16, v48);
      float32x4_t v55 = vrecpsq_f32(v17, v49);
      float32x4_t v16 = a2[-4];
      float32x4_t v17 = a2[-3];
      float32x4_t v56 = vmlaq_f32(v5, v39, vmulq_f32(v29, v33));
      float32x4_t v57 = vmlaq_f32(v6, v40, vmulq_f32(v30, v34));
      float32x4_t v58 = *a3;
      a3 += 6;
      float32x4_t v59 = vrecpeq_f32(v42);
      float32x4_t v60 = vrecpeq_f32(v43);
      float32x4_t v61 = vmulq_f32(v44, vrecpsq_f32(v18, v44));
      float32x4_t v62 = vmulq_f32(v45, vrecpsq_f32(v19, v45));
      float32x4_t v63 = vsubq_f32(v58, v47);
      float32x4_t v64 = vsubq_f32(a3[-5], a1[-5]);
      float32x4_t v65 = *a4;
      a4 += 6;
      float32x4_t v66 = vrecpsq_f32(v18, v61);
      float32x4_t v67 = vrecpsq_f32(v19, v62);
      float32x4_t v18 = a2[-2];
      float32x4_t v19 = a2[-1];
      float32x4_t v68 = vmlaq_f32(v56, vmulq_f32(vmulq_f32(v35, v35), v37), vmulq_f32(v48, v54));
      float32x4_t v69 = vmlaq_f32(v57, vmulq_f32(vmulq_f32(v36, v36), v38), vmulq_f32(v49, v55));
      float32x4_t v70 = vmulq_f32(vmulq_f32(v50, v50), v52);
      float32x4_t v71 = vmulq_f32(vmulq_f32(v51, v51), v53);
      float32x4_t v20 = a1[-2];
      float32x4_t v21 = a1[-1];
      float32x4_t v27 = vrecpeq_f32(v16);
      float32x4_t v28 = vrecpeq_f32(v17);
      float32x4_t v29 = vmulq_f32(v59, vrecpsq_f32(v42, v59));
      float32x4_t v30 = vmulq_f32(v60, vrecpsq_f32(v43, v60));
      float32x4_t v35 = vsubq_f32(a3[-4], a1[-4]);
      float32x4_t v36 = vsubq_f32(a3[-3], a1[-3]);
      float32x4_t v37 = a4[-4];
      float32x4_t v38 = a4[-3];
      float32x4_t v31 = vrecpsq_f32(v16, v27);
      float32x4_t v32 = vrecpsq_f32(v17, v28);
      float32x4_t v33 = vrecpsq_f32(v42, v29);
      float32x4_t v34 = vrecpsq_f32(v43, v30);
      float32x4_t v5 = vmlaq_f32(v68, v70, vmulq_f32(v61, v66));
      float32x4_t v6 = vmlaq_f32(v69, v71, vmulq_f32(v62, v67));
      float32x4_t v22 = a3[-2];
      float32x4_t v23 = a3[-1];
      float32x4_t v39 = vmulq_f32(vmulq_f32(v63, v63), v65);
      float32x4_t v40 = vmulq_f32(vmulq_f32(v64, v64), a4[-5]);
    }
    float32x4_t v72 = vrecpeq_f32(v18);
    float32x4_t v73 = vrecpeq_f32(v19);
    float32x4_t v74 = vmulq_f32(v27, v31);
    float32x4_t v75 = vmulq_f32(v28, v32);
    float32x4_t v76 = vsubq_f32(v22, v20);
    float32x4_t v77 = vsubq_f32(v23, v21);
    float32x4_t v78 = vmulq_f32(v72, vrecpsq_f32(v18, v72));
    float32x4_t v79 = vmulq_f32(v73, vrecpsq_f32(v19, v73));
    float32x4_t v5 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v5, v39, vmulq_f32(v29, v33)), vmulq_f32(vmulq_f32(v35, v35), v37), vmulq_f32(v74, vrecpsq_f32(v16, v74))), vmulq_f32(vmulq_f32(v76, v76), a4[-2]), vmulq_f32(v78, vrecpsq_f32(v18, v78)));
    float32x4_t v6 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v6, v40, vmulq_f32(v30, v34)), vmulq_f32(vmulq_f32(v36, v36), v38), vmulq_f32(v75, vrecpsq_f32(v17, v75))), vmulq_f32(vmulq_f32(v77, v77), a4[-1]), vmulq_f32(v79, vrecpsq_f32(v19, v79)));
  }
  for (uint64_t i = v7 + 16; i >= 0; i -= 8)
  {
    float32x4_t v81 = *a2;
    a2 += 2;
    float32x4_t v82 = v81;
    float32x4_t v83 = a2[-1];
    float32x4_t v84 = *a1;
    a1 += 2;
    float32x4_t v85 = v84;
    float32x4_t v86 = *a3;
    a3 += 2;
    float32x4_t v87 = vrecpeq_f32(v82);
    float32x4_t v88 = vrecpeq_f32(v83);
    float32x4_t v89 = vsubq_f32(v86, v85);
    float32x4_t v90 = vsubq_f32(a3[-1], a1[-1]);
    float32x4_t v91 = *a4;
    a4 += 2;
    float32x4_t v92 = vmulq_f32(v87, vrecpsq_f32(v82, v87));
    float32x4_t v93 = vmulq_f32(v88, vrecpsq_f32(v83, v88));
    float32x4_t v5 = vmlaq_f32(v5, vmulq_f32(vmulq_f32(v89, v89), v91), vmulq_f32(v92, vrecpsq_f32(v82, v92)));
    float32x4_t v6 = vmlaq_f32(v6, vmulq_f32(vmulq_f32(v90, v90), a4[-1]), vmulq_f32(v93, vrecpsq_f32(v83, v93)));
  }
  float32x4_t v94 = vaddq_f32(v5, v6);
  uint64_t v95 = i + 4;
  if (v95 >= 0)
  {
    float32x4_t v96 = *a4++;
    float32x4_t v97 = v96;
    float32x4_t v98 = *a2++;
    float32x4_t v99 = v98;
    float32x4_t v100 = *a1++;
    float32x4_t v101 = v100;
    float32x4_t v102 = *a3++;
    v95 -= 4;
    float32x4_t v103 = vsubq_f32(v102, v101);
    float32x4_t v94 = vmlaq_f32(v94, vmulq_f32(v103, v103), vdivq_f32(v97, v99));
  }
  float32x2_t v104 = (float32x2_t)vpaddq_f32(v94, v94).u64[0];
  uint64_t v105 = v95 + 2;
  if (v105 >= 0)
  {
    float32x2_t v106 = *(float32x2_t *)a4->f32;
    a4 = (float32x4_t *)((char *)a4 + 8);
    float32x2_t v107 = v106;
    float32x2_t v108 = *(float32x2_t *)a2->f32;
    a2 = (float32x4_t *)((char *)a2 + 8);
    float32x2_t v109 = v108;
    float32x2_t v110 = *(float32x2_t *)a1->f32;
    a1 = (float32x4_t *)((char *)a1 + 8);
    float32x2_t v111 = v110;
    float32x2_t v112 = *(float32x2_t *)a3->f32;
    a3 = (float32x4_t *)((char *)a3 + 8);
    v105 -= 2;
    float32x2_t v113 = vsub_f32(v112, v111);
    float32x2_t v104 = vmla_f32(v104, vmul_f32(v113, v113), vdiv_f32(v107, v109));
  }
  float result = vaddv_f32(v104);
  if (v105 + 1 >= 0) {
    return vmlas_n_f32(result, (float)(a3->f32[0] - a1->f32[0]) * (float)(a3->f32[0] - a1->f32[0]), a4->f32[0] / a2->f32[0]);
  }
  return result;
}

uint64_t InferenceEngine::SoundStormIOProcessor::SoundStormIOProcessor(uint64_t a1, unsigned __int8 *a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v51, (uint64_t)a2);
  InferenceEngine::BaseIOProcessor::BaseIOProcessor(a1, (uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
  *(void *)a1 = off_26C206940;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v49, (uint64_t)a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v49[0];
  v49[0] = v4;
  float32x4_t v5 = *(uint64_t **)(a1 + 32);
  *(void *)(a1 + 32) = v50;
  float32x4_t v50 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
  float32x4_t v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "inference_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v6, &v47);
  uint64_t v7 = (int *)v47;
  if (v47 == v48)
  {
    int v8 = 0;
  }
  else
  {
    int v8 = 0;
    do
    {
      int v9 = *v7++;
      v8 += v9;
    }
    while (v7 != (int *)v48);
  }
  float32x4_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "loop");
  LODWORD(__p) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v10, (int *)&__p);
  if (v8 != __p) {
    __assert_rtn("SoundStormIOProcessor", "SoundStormIOProcessor.cpp", 22, "std::reduce(inference_schedule.begin(), inference_schedule.end()) == model_parameters[\"loop\"].get<int>()");
  }
  float32x4_t v11 = (int *)operator new(4uLL);
  int *v11 = 0;
  float32x4_t v12 = v11 + 1;
  float32x4_t v45 = v11 + 1;
  float32x4_t v46 = (char *)(v11 + 1);
  std::string __p = v11;
  float32x4_t v13 = v47;
  if (v48 - (unsigned char *)v47 != 4)
  {
    unint64_t v14 = 0;
    do
    {
      float32x4_t v15 = (int *)__p;
      int v16 = v13[v14] + *((_DWORD *)__p + v14);
      if (v12 >= (int *)v46)
      {
        uint64_t v17 = ((char *)v12 - (unsigned char *)__p) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v46 - (unsigned char *)__p;
        if ((v46 - (unsigned char *)__p) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          float32x4_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v46, v20);
          float32x4_t v15 = (int *)__p;
          float32x4_t v12 = v45;
        }
        else
        {
          float32x4_t v21 = 0;
        }
        float32x4_t v22 = (int *)&v21[4 * v17];
        *float32x4_t v22 = v16;
        float32x4_t v23 = v22 + 1;
        while (v12 != v15)
        {
          int v24 = *--v12;
          *--float32x4_t v22 = v24;
        }
        std::string __p = v22;
        float32x4_t v45 = v23;
        float32x4_t v46 = &v21[4 * v20];
        if (v15) {
          operator delete(v15);
        }
        float32x4_t v12 = v23;
      }
      else
      {
        *v12++ = v16;
      }
      float32x4_t v45 = v12;
      ++v14;
      float32x4_t v13 = v47;
    }
    while (((v48 - (unsigned char *)v47) >> 2) - 1 > v14);
    float32x4_t v11 = (int *)__p;
  }
  float32x4_t v43 = 0;
  v42[0] = 2;
  v38[0] = v11;
  float32x4_t v53 = v12;
  float32x4_t v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((int **)v38, &v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  float32x4_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  unsigned __int8 v26 = *(unsigned char *)v25;
  *(unsigned char *)float32x4_t v25 = v42[0];
  v42[0] = v26;
  float32x4_t v27 = (uint64_t *)v25[1];
  v25[1] = (uint64_t)v43;
  float32x4_t v43 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v43, v42[0]);
  std::string::basic_string[abi:ne180100]<0>(v38, "prompt_attention");
  LOBYTE(v53) = 0;
  BOOL v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)v38, (unsigned __int8 *)&v53);
  v40[0] = 4;
  unint64_t v41 = v28;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
  float32x4_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "prompt_attention");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
  unsigned __int8 v30 = *(unsigned char *)v29;
  *(unsigned char *)float32x4_t v29 = v40[0];
  v40[0] = v30;
  float32x4_t v31 = (uint64_t *)v29[1];
  v29[1] = v41;
  unint64_t v41 = (unint64_t)v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v41, v40[0]);
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "num_vqs");
  LODWORD(v53) = 8;
  v36[0] = 5;
  float32x4_t v37 = (uint64_t *)(int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)v38, (unsigned int *)&v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  float32x4_t v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_vqs");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  unsigned __int8 v33 = *(unsigned char *)v32;
  *(unsigned char *)float32x4_t v32 = v36[0];
  v36[0] = v33;
  float32x4_t v34 = (uint64_t *)v32[1];
  v32[1] = (uint64_t)v37;
  float32x4_t v37 = v34;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (__p)
  {
    float32x4_t v45 = (int *)__p;
    operator delete(__p);
  }
  if (v47)
  {
    float32x4_t v48 = v47;
    operator delete(v47);
  }
  return a1;
}

void sub_20CEB5004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v26);
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(v25);
  _Unwind_Resume(a1);
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    float32x4_t v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *float32x4_t v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    float32x4_t v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    float32x4_t v11 = std::string::insert(&v13, 0, "cannot use operator[] with a string argument with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(305, (uint64_t)__p, exception);
  }
  float32x4_t v6 = (uint64_t **)*((void *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  uint64_t v7 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, &v13);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v7 + 7;
}

void sub_20CEB523C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>@<D0>(char *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<int>,0>(a1, (uint64_t)a2);
}

void sub_20CEB52E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(char *a1, const void **a2, unsigned __int8 *a3)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    int v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    float32x4_t v10 = std::string::insert(&v12, 0, "cannot use value() with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v13, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v13);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v12);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v13, (unsigned __int8 **)&v12))
  {
    int v5 = *a3;
  }
  else
  {
    float32x4_t v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v13);
    v12.__r_.__value_.__s.__data_[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v6, &v12);
    int v5 = v12.__r_.__value_.__s.__data_[0];
  }
  return v5 != 0;
}

void sub_20CEB5420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(char *a1, const void **a2, unsigned int *a3)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    int v8 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v8);
    int v9 = std::string::insert(&v11, 0, "cannot use value() with ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    long long v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v12, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v12);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v11);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v12, (unsigned __int8 **)&v11))
  {
    return *a3;
  }
  float32x4_t v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v12);
  LODWORD(v11.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v6, (int *)&v11);
  return LODWORD(v11.__r_.__value_.__l.__data_);
}

void sub_20CEB5598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::SoundStormIOProcessor::~SoundStormIOProcessor(uint64_t **this)
{
  *this = (uint64_t *)off_26C206940;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(this + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 4, *((unsigned __int8 *)this + 24));
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(this);
}

void InferenceEngine::SoundStormIOProcessor::build_vq_target(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, InferenceEngine::DataTensor **a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v22, "pred_semantic");
  int v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v22);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, &__p.__r_.__value_.__l.__data_);
  unint64_t v9 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  *a4 = 0;
  a4[1] = 0;
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "vq_tokens");
    long long v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (!v10) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    long long v12 = (InferenceEngine::DataTensor *)*((void *)v10 + 5);
    std::string v11 = (atomic_ullong *)*((void *)v10 + 6);
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
    *a4 = v12;
    a4[1] = (InferenceEngine::DataTensor *)v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::size_type v13 = (unsigned __int8 *)(a1 + 24);
    std::string::size_type v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_vqs");
    LODWORD(v19) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v14, (int *)&v19);
    unint64_t v15 = (int)v19;
    int v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "vq_mask_id");
    LODWORD(v19) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v16, (int *)&v19);
    float v21 = (float)(int)v19;
    std::vector<float>::vector(v22, v15, &v21);
    std::vector<std::vector<float>>::vector(&__p, v9, (uint64_t)v22);
    if (v22[0])
    {
      v22[1] = v22[0];
      operator delete(v22[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v22, "vq_tokens");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&__p, &v19);
    long long v12 = v19;
    std::string v11 = v20;
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    *a4 = v12;
    a4[1] = (InferenceEngine::DataTensor *)v11;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    InferenceEngine::DataTensor::unsqueeze(v12, 0);
    v22[0] = &__p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  }
  kaldi::quasar::Vocab::OOvWord(v12, &__p);
  v22[0] = &__p;
  uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)v22);
  if (v11) {
    atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = (std::__shared_weak_count *)*((void *)v17 + 6);
  *((void *)v17 + 5) = v12;
  *((void *)v17 + 6) = v11;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20CEB58A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::string __p = &a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void InferenceEngine::DataTensor::build_from_2d_array<float>(uint64_t **a1@<X1>, void *a2@<X8>)
{
  int v5 = *a1;
  int v4 = a1[1];
  uint64_t v7 = **a1;
  uint64_t v6 = (*a1)[1];
  int v8 = operator new(0x10uLL);
  long long v12 = v8 + 2;
  std::string::size_type v13 = v8 + 2;
  *int v8 = 0xAAAAAAAAAAAAAAABLL * (v4 - v5);
  v8[1] = (v6 - v7) >> 2;
  std::string v11 = v8;
  InferenceEngine::DataUtils::get_type_string<float>(__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::VectorOps::flatten_2d_to_1d<float>(a1, __p);
  memcpy(*(void **)(*a2 + 88), __p[0], *(void *)(*a2 + 80));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11)
  {
    long long v12 = v11;
    operator delete(v11);
  }
}

void sub_20CEB5A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  uint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::SoundStormIOProcessor::build_q_token_mask(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, kaldi::quasar::Vocab **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v28, "pred_semantic");
  int v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v28);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)&__p);
  unint64_t v9 = *((void *)__p + 1);
  unsigned __int8 v30 = __p;
  operator delete(__p);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  char v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v10, &__p);
  long long v12 = __p;
  std::string v11 = v30;
  if (v30 == __p) {
    goto LABEL_17;
  }
  unint64_t v13 = 0;
  std::string::size_type v14 = 0;
  do
  {
    if (v12[v13] == a3)
    {
      LODWORD(v24) = 0;
      std::vector<float>::vector(v26, v9, &v24);
      std::vector<std::vector<float>>::vector(&v28, 1uLL, (uint64_t)v26);
      if (v26[0])
      {
        v26[1] = v26[0];
        operator delete(v26[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v26, "q_token_mask");
      InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v28, &v24);
      unint64_t v15 = v24;
      int v16 = v25;
      int v24 = 0;
      float32x4_t v25 = 0;
      *a4 = v15;
      a4[1] = (kaldi::quasar::Vocab *)v16;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      v26[0] = &v28;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
      long long v12 = __p;
      std::string v11 = v30;
      std::string::size_type v14 = v16;
    }
    ++v13;
  }
  while (v13 < (v11 - (unsigned char *)v12) >> 2);
  uint64_t v17 = *a4;
  if (!*a4)
  {
LABEL_17:
    std::string::basic_string[abi:ne180100]<0>(&v28, "q_token_mask");
    unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v28);
    if (!v18) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v17 = (kaldi::quasar::Vocab *)*((void *)v18 + 5);
    uint64_t v19 = (atomic_ullong *)*((void *)v18 + 6);
    if (v19) {
      atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
    }
    unint64_t v20 = (std::__shared_weak_count *)a4[1];
    *a4 = v17;
    a4[1] = (kaldi::quasar::Vocab *)v19;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  kaldi::quasar::Vocab::OOvWord(v17, &v28);
  v26[0] = &v28;
  float v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v28, (uint64_t)&std::piecewise_construct, (long long **)v26);
  float32x4_t v22 = a4[1];
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v22 + 1, 1uLL, memory_order_relaxed);
  }
  char v23 = (std::__shared_weak_count *)*((void *)v21 + 6);
  *((void *)v21 + 5) = v17;
  *((void *)v21 + 6) = v22;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    unsigned __int8 v30 = __p;
    operator delete(__p);
  }
}

void sub_20CEB5D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  char v27 = *(std::__shared_weak_count **)(v25 + 8);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::SoundStormIOProcessor::build_layer_q(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v7, &v27);
  if ((unint64_t)(v28 - v27) < 5)
  {
LABEL_8:
    std::string v11 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = (v28 - v27) >> 2;
    if (v9 <= 2) {
      unint64_t v9 = 2;
    }
    unint64_t v10 = v9 - 1;
    while (*(_DWORD *)&v27[4 * v8] > a3 || *(_DWORD *)&v27[4 * v8 + 4] <= a3)
    {
      if (v10 == ++v8) {
        goto LABEL_8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "layer_q");
    unint64_t v20 = (float *)operator new(4uLL);
    std::string __p = v20;
    float *v20 = (float)(v8 + 1) + -1.0;
    char v23 = v20 + 1;
    int v24 = v20 + 1;
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v26);
    std::string v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    int v16 = (kaldi::quasar::Vocab *)v26;
    long long v26 = 0uLL;
    *(_OWORD *)a4 = __PAIR128__((unint64_t)v11, (unint64_t)v16);
    if (__p)
    {
      char v23 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if (v16) {
        goto LABEL_17;
      }
    }
    else if (v16)
    {
      goto LABEL_17;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "layer_q");
  unint64_t v13 = v27;
  long long v12 = v28;
  std::string::size_type v14 = (float *)operator new(4uLL);
  std::string __p = v14;
  *std::string::size_type v14 = (float)(unint64_t)((v12 - v13) >> 2) + -1.0;
  char v23 = v14 + 1;
  int v24 = v14 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v26);
  long long v15 = v26;
  long long v26 = 0uLL;
  float v21 = (kaldi::quasar::Vocab *)v15;
  *(_OWORD *)a4 = v15;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  if (__p)
  {
    char v23 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  int v16 = v21;
LABEL_17:
  kaldi::quasar::Vocab::OOvWord(v16, &v25);
  std::string __p = &v25;
  uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&v25, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  uint64_t v18 = a4[1];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)v17 + 6);
  *((void *)v17 + 5) = v16;
  *((void *)v17 + 6) = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v27)
  {
    std::string v28 = v27;
    operator delete(v27);
  }
}

void sub_20CEB6024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  float32x4_t v22 = *(void **)(v20 - 72);
  if (v22)
  {
    *(void *)(v20 - 64) = v22;
    operator delete(v22);
  }
  char v23 = *(std::__shared_weak_count **)(v19 + 8);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::build_from_1d_array<float>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v5 = *(const void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = operator new(8uLL);
  unint64_t v9 = v6;
  *uint64_t v6 = (v4 - (uint64_t)v5) >> 2;
  unint64_t v10 = v6 + 1;
  std::string v11 = v6 + 1;
  InferenceEngine::DataUtils::get_type_string<float>(&__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v8 < 0) {
    operator delete(__p);
  }
  memcpy(*(void **)(*a2 + 88), *(const void **)a1, *(void *)(*a2 + 80));
  if (v9)
  {
    unint64_t v10 = v9;
    operator delete(v9);
  }
}

void sub_20CEB6148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::SoundStormIOProcessor::build_k_tensor(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, kaldi::quasar::Vocab **a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v35, "layer_q");
  char v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v35);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_1d_array<float>(*((InferenceEngine::DataTensor **)v8 + 5), &__p);
  float v9 = *(float *)__p;
  float32x4_t v37 = __p;
  operator delete(__p);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "pred_data");
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v35);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v10 + 5), 0, (char **)&__p);
  unint64_t v11 = *((void *)__p + 1);
  float32x4_t v37 = __p;
  operator delete(__p);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  long long v12 = (unsigned __int8 *)(a1 + 24);
  unint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v13, &__p);
  std::string::basic_string[abi:ne180100]<0>(&v35, "q_token_mask");
  std::string::size_type v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v35);
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v15 = (int)v9;
  uint64_t v17 = (InferenceEngine::DataTensor *)*((void *)v14 + 5);
  int v16 = (std::__shared_weak_count *)*((void *)v14 + 6);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  int v18 = *((_DWORD *)__p + v15);
  uint64_t v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v12, "inference_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v19, &v35);
  int v20 = a3 - v18;
  float v21 = (void *)v35.__r_.__value_.__r.__words[0];
  float v22 = ((float)v20 + 1.0) / (float)*(int *)(v35.__r_.__value_.__r.__words[0] + 4 * v15);
  double v23 = cos(v22 * 3.14159265 * 0.5);
  v35.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
  operator delete(v21);
  float v24 = InferenceEngine::DataTensor::accumulate_sum(v17);
  InferenceEngine::DataTensor::get_shape(v17, 0, &v35.__r_.__value_.__l.__data_);
  unint64_t v25 = *(void *)v35.__r_.__value_.__l.__data_;
  v35.__r_.__value_.__l.__size_ = v35.__r_.__value_.__r.__words[0];
  operator delete(v35.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v35, "k_tensor");
  long long v26 = (float *)operator new(4uLL);
  float v27 = v23;
  float32x4_t v32 = v26;
  *long long v26 = (float)(int)(v11 - (int)v24 / v25 - (int)(float)((float)v11 * v27));
  unsigned __int8 v33 = v26 + 1;
  float32x4_t v34 = v26 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v32, a4);
  if (v32)
  {
    unsigned __int8 v33 = v32;
    operator delete(v32);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(*a4, &v35);
  float32x4_t v32 = &v35;
  std::string v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v35, (uint64_t)&std::piecewise_construct, (long long **)&v32);
  unsigned __int8 v30 = *a4;
  float32x4_t v29 = a4[1];
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 1, 1uLL, memory_order_relaxed);
  }
  float32x4_t v31 = (std::__shared_weak_count *)*((void *)v28 + 6);
  *((void *)v28 + 5) = v30;
  *((void *)v28 + 6) = v29;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (__p)
  {
    float32x4_t v37 = __p;
    operator delete(__p);
  }
}

void sub_20CEB64B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  float v22 = *(std::__shared_weak_count **)(v19 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *InferenceEngine::DataTensor::get_1d_array<float>@<X0>(InferenceEngine::DataTensor *this@<X0>, void **a2@<X8>)
{
  uint64_t v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    int v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5) {
        goto LABEL_20;
      }
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702) {
        goto LABEL_20;
      }
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C248])) {
      InferenceEngine::DataTensor::get_1d_array<float>();
    }
    goto LABEL_22;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910) {
      goto LABEL_21;
    }
    if (**(_DWORD **)v4 == 909209702) {
      goto LABEL_22;
    }
    uint64_t v6 = *((void *)this + 5);
  }
  if (v6 != 5) {
    goto LABEL_20;
  }
  uint64_t v4 = *(char **)v4;
LABEL_11:
  int v7 = *(_DWORD *)v4;
  int v8 = v4[4];
  if (v7 != 863268457 || v8 != 50) {
LABEL_20:
  }
    InferenceEngine::DataTensor::get_1d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C258])) {
    InferenceEngine::DataTensor::get_1d_array<float>();
  }
LABEL_22:
  unint64_t v10 = (const void *)*((void *)this + 11);
  int size = InferenceEngine::DataTensor::get_size(this);
  std::vector<float>::vector(a2, size);
  long long v12 = *a2;
  return memcpy(v12, v10, 4 * size);
}

void InferenceEngine::SoundStormIOProcessor::build_pred_data(void *a1@<X1>, InferenceEngine::DataTensor **a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v30, "pred_semantic");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v6 = (InferenceEngine::DataTensor *)*((void *)v4 + 5);
  int v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "vq_tokens");
  int v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v9 = (InferenceEngine::DataTensor *)*((void *)v7 + 5);
  int v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "q_token_mask");
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  long long v12 = (InferenceEngine::DataTensor *)*((void *)v10 + 5);
  unint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  InferenceEngine::DataTensor::get_shape(v6, 0, &v30);
  if (v30)
  {
    float32x4_t v31 = v30;
    operator delete(v30);
  }
  InferenceEngine::DataTensor::unsqueeze(v6, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v27);
  float32x4_t v31 = 0;
  uint64_t v32 = 0;
  unsigned __int8 v30 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v30, (uint64_t)*v27, (uint64_t)v27[1], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v27[1] - (unsigned char *)*v27) >> 3));
  float v24 = (void **)&v27;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v24);
  InferenceEngine::DataTensor::get_3d_array<float>(v9, &v24);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  float v27 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v27, (uint64_t)*v24, (uint64_t)v24[1], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v24[1] - (unsigned char *)*v24) >> 3));
  v23[0] = (uint64_t *)&v24;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  InferenceEngine::DataTensor::squeeze(v6, 2);
  InferenceEngine::DataTensor::unsqueeze(v12, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v12, v23);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  float v24 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v24, *v23[0], v23[0][1], 0xAAAAAAAAAAAAAAABLL * ((v23[0][1] - *v23[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  InferenceEngine::DataTensor::squeeze(v12, 2);
  uint64_t v21 = 0;
  __n128 v20 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v20, (uint64_t)v30, (uint64_t)v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3));
  memset(v19, 0, sizeof(v19));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v19, (uint64_t)v24, v25, 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v24) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v20, v19, 1, (uint64_t *)&v22);
  memset(v18, 0, sizeof(v18));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v18, (uint64_t)v27, v28, 0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v27) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v22, v18, 1, (uint64_t *)v23);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v23, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::unsqueeze(*a2, 0);
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  int v15 = *a2;
  std::string::size_type v14 = a2[1];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
  }
  int v16 = (std::__shared_weak_count *)*((void *)v13 + 6);
  *((void *)v13 + 5) = v15;
  *((void *)v13 + 6) = v14;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v23[0] = (uint64_t *)&v24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  float v24 = (void **)&v27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
  float v27 = (void **)&v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20CEB6B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t *a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  float32x4_t v37 = *(std::__shared_weak_count **)(v34 + 8);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::string __p = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a28 = &a31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a31 = v35 - 144;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  *(void *)(v35 - 144) = v35 - 120;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

void sub_20CEB6CA8()
{
  if (*(char *)(v0 - 97) < 0) {
    operator delete(*(void **)(v0 - 120));
  }
  JUMPOUT(0x20CEB6C88);
}

void sub_20CEB6CC0()
{
  if (*(char *)(v0 - 97) < 0) {
    operator delete(*(void **)(v0 - 120));
  }
  JUMPOUT(0x20CEB6C94);
}

void sub_20CEB6CD8()
{
  if (*(char *)(v0 - 97) < 0) {
    operator delete(*(void **)(v0 - 120));
  }
  JUMPOUT(0x20CEB6CA0);
}

void InferenceEngine::DataTensor::get_3d_array<float>(InferenceEngine::DataTensor *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    int v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5) {
        goto LABEL_20;
      }
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702) {
        goto LABEL_20;
      }
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C248])) {
      InferenceEngine::DataTensor::get_3d_array<float>();
    }
    goto LABEL_22;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910) {
      goto LABEL_21;
    }
    if (**(_DWORD **)v4 == 909209702) {
      goto LABEL_22;
    }
    uint64_t v6 = *((void *)this + 5);
  }
  if (v6 != 5) {
    goto LABEL_20;
  }
  uint64_t v4 = *(char **)v4;
LABEL_11:
  int v7 = *(_DWORD *)v4;
  int v8 = v4[4];
  if (v7 != 863268457 || v8 != 50) {
LABEL_20:
  }
    InferenceEngine::DataTensor::get_3d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C258])) {
    InferenceEngine::DataTensor::get_3d_array<float>();
  }
LABEL_22:
  uint64_t v10 = *((void *)this + 11);
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)__p);
  InferenceEngine::DataUtils::convert_data_to_3d_array<float>(v10, (unint64_t **)__p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20CEB6E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 *InferenceEngine::VectorOps::concatenate_vectors_2d<float>@<X0>(__n128 *result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v5 = result;
  if (a3 == 1)
  {
    unint64_t v10 = result->n128_u64[0];
    unint64_t v11 = result->n128_u64[1];
    if (v11 - result->n128_u64[0] != a2[1] - *a2) {
      InferenceEngine::VectorOps::concatenate_vectors_2d<float>();
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (v11 != v10)
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      do
      {
        uint64_t v14 = v10 + v12;
        unint64_t v15 = a4[1];
        if (v15 >= a4[2])
        {
          uint64_t v16 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a4, v14);
        }
        else
        {
          std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a4, v14);
          uint64_t v16 = v15 + 24;
        }
        a4[1] = v16;
        float result = (__n128 *)std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(*a4 + v12, *(void *)(*a4 + v12 + 8), *(char **)(*a2 + v12), *(char **)(*a2 + v12 + 8), (uint64_t)(*(void *)(*a2 + v12 + 8) - *(void *)(*a2 + v12)) >> 2);
        ++v13;
        unint64_t v10 = v5->n128_u64[0];
        v12 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5->n128_u64[1] - v5->n128_u64[0]) >> 3) > v13);
    }
  }
  else
  {
    if (a3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      InferenceEngine::StringFormatter::StringFormatter(&v18, "dimension can only be 0 or 1 for concatenate_vectors_2d");
      MEMORY[0x210558D40](exception, &v18);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v7 = result->n128_u64[0];
    uint64_t v8 = *a2;
    if (*(void *)(result->n128_u64[0] + 8) - *(void *)result->n128_u64[0] != *(void *)(*a2 + 8) - *(void *)*a2) {
      InferenceEngine::VectorOps::concatenate_vectors_2d<float>();
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (a4 == (uint64_t *)result)
    {
      float v9 = 0;
    }
    else
    {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)a4, v7, result->n128_i64[1], 0xAAAAAAAAAAAAAAABLL * ((int64_t)(result->n128_u64[1] - v7) >> 3));
      float v9 = (__n128 *)a4[1];
      uint64_t v8 = *a2;
    }
    return std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(a4, v9, v8, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - v8) >> 3));
  }
  return result;
}

void sub_20CEB703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void InferenceEngine::SoundStormIOProcessor::build_pred_lens(void *a1@<X1>, kaldi::quasar::Vocab **a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&p_p, "pred_data");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&p_p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v4 + 5), 0, &__p.__r_.__value_.__l.__data_);
  unint64_t v5 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0) {
    operator delete(p_p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_lens");
  uint64_t v6 = (float *)operator new(4uLL);
  p_p = v6;
  *uint64_t v6 = (float)v5;
  uint64_t v12 = v6 + 1;
  unint64_t v13 = v6 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, a2);
  if (p_p)
  {
    uint64_t v12 = p_p;
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  float v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)v7 + 6);
  *((void *)v7 + 5) = v9;
  *((void *)v7 + 6) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20CEB71E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  double v23 = *(std::__shared_weak_count **)(v21 + 8);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::SoundStormIOProcessor::build_prompt_data(void *a1@<X1>, InferenceEngine::DataTensor **a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v22, "prompt_semantic");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v22);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v6 = (InferenceEngine::DataTensor *)*((void *)v4 + 5);
  unint64_t v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "prompt_vq");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v22);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v9 = (InferenceEngine::DataTensor *)*((void *)v7 + 5);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  InferenceEngine::DataTensor::unsqueeze(v6, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v19);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  __n128 v22 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v22, (uint64_t)*v19, (uint64_t)v19[1], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v19[1] - (unsigned char *)*v19) >> 3));
  v18[0] = (uint64_t *)&v19;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  InferenceEngine::DataTensor::get_3d_array<float>(v9, v18);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v19, *v18[0], v18[0][1], 0xAAAAAAAAAAAAAAABLL * ((v18[0][1] - *v18[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  InferenceEngine::DataTensor::squeeze(v6, 2);
  uint64_t v17 = 0;
  __n128 v16 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v16, (uint64_t)v22, v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 3));
  memset(v15, 0, sizeof(v15));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v15, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v16, v15, 1, (uint64_t *)v18);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prompt_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v18, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::unsqueeze(*a2, 0);
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  uint64_t v12 = *a2;
  unint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 6);
  *((void *)v10 + 5) = v12;
  *((void *)v10 + 6) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v18[0] = (uint64_t *)&v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  uint64_t v19 = &v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20CEB7550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v26 + 8);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::string __p = &a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a21 = &a24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a24 = v27 - 88;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void sub_20CEB7618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a18;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  JUMPOUT(0x20CEB75E8);
}

void sub_20CEB7630()
{
}

void sub_20CEB7638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  a18 = (void **)&a21;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  JUMPOUT(0x20CEB75F8);
}

void sub_20CEB7650()
{
}

void sub_20CEB765C()
{
}

void sub_20CEB7664()
{
  if (*(char *)(v0 - 65) < 0) {
    operator delete(*(void **)(v0 - 88));
  }
  JUMPOUT(0x20CEB7604);
}

void sub_20CEB767C()
{
  if (*(char *)(v0 - 65) < 0) {
    operator delete(*(void **)(v0 - 88));
  }
  JUMPOUT(0x20CEB7610);
}

void InferenceEngine::SoundStormIOProcessor::build_prompt_lens(void *a1@<X1>, kaldi::quasar::Vocab **a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&p_p, "prompt_data");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&p_p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v4 + 5), 0, &__p.__r_.__value_.__l.__data_);
  unint64_t v5 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0) {
    operator delete(p_p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "prompt_lens");
  uint64_t v6 = (float *)operator new(4uLL);
  p_p = v6;
  *uint64_t v6 = (float)v5;
  uint64_t v12 = v6 + 1;
  unint64_t v13 = v6 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, a2);
  if (p_p)
  {
    uint64_t v12 = p_p;
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  float v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)v7 + 6);
  *((void *)v7 + 5) = v9;
  *((void *)v7 + 6) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20CEB77E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v21 + 8);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::SoundStormIOProcessor::update_vq_target(uint64_t a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "q_token_mask");
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v5 + 6);
  float32x4_t v38 = (kaldi::quasar::Vocab *)*((void *)v5 + 5);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "layer_q");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v9 = (InferenceEngine::DataTensor *)*((void *)v7 + 5);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_code");
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v12 = (InferenceEngine::DataTensor *)*((void *)v10 + 5);
  unint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_b");
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v13) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v14 = (InferenceEngine::DataTensor *)*((void *)v13 + 5);
  unint64_t v15 = (std::__shared_weak_count *)*((void *)v13 + 6);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_t");
  __n128 v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v16) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::string v18 = (InferenceEngine::DataTensor *)*((void *)v16 + 5);
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v16 + 6);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float32x4_t v37 = v17;
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  InferenceEngine::DataTensor::get_1d_array<int>(v12, &__p);
  InferenceEngine::DataTensor::get_1d_array<int>(v14, &v43);
  InferenceEngine::DataTensor::get_1d_array<int>(v18, &v42);
  int64_t v19 = v43.__end_ - v43.__begin_;
  if (v19 != v42.__end_ - v42.__begin_)
  {
    uint64_t v32 = "top_k_b_index_vector.size() == top_k_t_index_vector.size()";
    int v33 = 177;
    goto LABEL_67;
  }
  if (v19 != __p.__end_ - __p.__begin_)
  {
    uint64_t v32 = "top_k_b_index_vector.size() == top_k_pred_code_vector.size()";
    int v33 = 178;
LABEL_67:
    __assert_rtn("update_vq_target", "SoundStormIOProcessor.cpp", v33, v32);
  }
  float32x4_t v36 = v6;
  InferenceEngine::DataTensor::get_1d_array<float>(v9, v41);
  uint64_t v34 = v15;
  uint64_t v35 = v11;
  float v20 = *(float *)v41[0];
  v41[1] = v41[0];
  operator delete(v41[0]);
  InferenceEngine::DataTensor::get_2d_array<float>(v38, v41);
  if (__p.__end_ != __p.__begin_)
  {
    uint64_t v22 = 0;
    if ((unint64_t)(__p.__end_ - __p.__begin_) <= 1) {
      int64_t v23 = 1;
    }
    else {
      int64_t v23 = __p.__end_ - __p.__begin_;
    }
    uint64_t v24 = v41[0];
    do
    {
      int v25 = v43.__begin_[v22];
      int v26 = v42.__begin_[v22];
      if (*(float *)(v24[3 * v25] + 4 * v26) != 0.0)
      {
        LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v21);
        BOOL v21 = os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR);
        if (v21)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v25;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v26;
          _os_log_error_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_ERROR, "Duplicate value in index_t found in the outputs! q_mask_vector[%d][%d] is already predicted!", (uint8_t *)&buf, 0xEu);
        }
      }
      uint64_t v24 = v41[0];
      *(_DWORD *)(*((void *)v41[0] + 3 * v25) + 4 * v26) = 1065353216;
      *(float *)(*(void *)(*(void *)(*a3 + 24 * v25) + 24 * v26) + 4 * (int)v20) = (float)__p.__begin_[v22++];
    }
    while (v23 != v22);
  }
  kaldi::quasar::Vocab::OOvWord(v38, &buf);
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)v41, &p_buf);
  uint64_t v28 = (kaldi::quasar::Vocab *)p_buf;
  uint64_t v29 = v40;
  p_std::string buf = 0;
  float32x4_t v40 = 0;
  if (v36)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(v28, &buf);
  p_std::string buf = &buf;
  unsigned __int8 v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&p_buf);
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float32x4_t v31 = (std::__shared_weak_count *)*((void *)v30 + 6);
  *((void *)v30 + 5) = v28;
  *((void *)v30 + 6) = v29;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v42.__begin_)
  {
    v42.__end_ = v42.__begin_;
    operator delete(v42.__begin_);
  }
  if (v43.__begin_)
  {
    v43.__end_ = v43.__begin_;
    operator delete(v43.__begin_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_20CEB7D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v35 - 121) < 0) {
    operator delete(*(void **)(v35 - 144));
  }
  *(void *)(v35 - 144) = &a20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

void *InferenceEngine::DataTensor::get_1d_array<int>@<X0>(InferenceEngine::DataTensor *this@<X0>, std::vector<int> *a2@<X8>)
{
  uint64_t v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    int v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5) {
        goto LABEL_20;
      }
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702) {
        goto LABEL_20;
      }
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C258], MEMORY[0x263F8C248])) {
      InferenceEngine::DataTensor::get_1d_array<float>();
    }
    goto LABEL_22;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910) {
      goto LABEL_21;
    }
    if (**(_DWORD **)v4 == 909209702) {
      goto LABEL_22;
    }
    uint64_t v6 = *((void *)this + 5);
  }
  if (v6 != 5) {
    goto LABEL_20;
  }
  uint64_t v4 = *(char **)v4;
LABEL_11:
  int v7 = *(_DWORD *)v4;
  int v8 = v4[4];
  if (v7 != 863268457 || v8 != 50) {
LABEL_20:
  }
    InferenceEngine::DataTensor::get_1d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C258], MEMORY[0x263F8C258])) {
    InferenceEngine::DataTensor::get_1d_array<float>();
  }
LABEL_22:
  unint64_t v10 = (const void *)*((void *)this + 11);
  int size = InferenceEngine::DataTensor::get_size(this);
  std::vector<int>::vector(a2, size);
  std::vector<int>::pointer begin = a2->__begin_;
  return memcpy(begin, v10, 4 * size);
}

void InferenceEngine::DataTensor::get_2d_array<float>(InferenceEngine::DataTensor *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    int v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5) {
        goto LABEL_20;
      }
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702) {
        goto LABEL_20;
      }
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C248])) {
      InferenceEngine::DataTensor::get_2d_array<float>();
    }
    goto LABEL_22;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910) {
      goto LABEL_21;
    }
    if (**(_DWORD **)v4 == 909209702) {
      goto LABEL_22;
    }
    uint64_t v6 = *((void *)this + 5);
  }
  if (v6 != 5) {
    goto LABEL_20;
  }
  uint64_t v4 = *(char **)v4;
LABEL_11:
  int v7 = *(_DWORD *)v4;
  int v8 = v4[4];
  if (v7 != 863268457 || v8 != 50) {
LABEL_20:
  }
    InferenceEngine::DataTensor::get_2d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C258])) {
    InferenceEngine::DataTensor::get_2d_array<float>();
  }
LABEL_22:
  uint64_t v10 = *((void *)this + 11);
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)__p);
  InferenceEngine::DataUtils::convert_data_to_2d_array<float>(v10, (uint64_t)__p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20CEB81B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::SoundStormIOProcessor::process_inputs(unsigned __int8 *a1, void *a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(buf, "pred_semantic");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v8 = (InferenceEngine::DataTensor *)*((void *)v6 + 5);
  int v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(*(void **)buf);
  }
  InferenceEngine::DataTensor::get_shape(v8, 0, (char **)buf);
  uint64_t v9 = **(void **)buf;
  *(void *)&buf[8] = *(void *)buf;
  operator delete(*(void **)buf);
  if (v9 != 1) {
    __assert_rtn("process_inputs", "SoundStormIOProcessor.cpp", 205, "B == 1");
  }
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 16))(&v49, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 24))(&v47, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 32))(&v45, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 48))(&v43, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 64))(&v41, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 40))(&v39, a1, a2, a3);
  InferenceEngine::DataTensor::get_1d_array<float>(v39, (void **)buf);
  float v10 = **(float **)buf;
  *(void *)&buf[8] = *(void *)buf;
  operator delete(*(void **)buf);
  if (v10 >= 1.0)
  {
    InferenceEngine::DataTensor::get_1d_array<float>(v45, (void **)buf);
    float v14 = **(float **)buf;
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
    unint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1 + 24, "prompt_attention");
    buf[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v15, buf);
    if (buf[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, "prompt_k_");
      std::to_string(&v37, (int)v14);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __n128 v16 = &v37;
      }
      else {
        __n128 v16 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v37.__r_.__value_.__l.__size_;
      }
      std::string v18 = std::string::append(&v38, (const std::string::value_type *)v16, size);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      std::string::size_type v52 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string buf = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_v_");
      std::to_string(&__p, (int)v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v22 = std::string::append(&v37, (const std::string::value_type *)p_p, v21);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
      if (!v24) {
        goto LABEL_73;
      }
      std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_k");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      int v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (long long **)&__p);
      uint64_t v27 = *((void *)v24 + 5);
      uint64_t v26 = *((void *)v24 + 6);
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = (std::__shared_weak_count *)*((void *)v25 + 6);
      *((void *)v25 + 5) = v27;
      *((void *)v25 + 6) = v26;
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      uint64_t v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v38);
      if (!v29) {
LABEL_73:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_v");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      unsigned __int8 v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (long long **)&__p);
      uint64_t v32 = *((void *)v29 + 5);
      uint64_t v31 = *((void *)v29 + 6);
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      int v33 = (std::__shared_weak_count *)*((void *)v30 + 6);
      *((void *)v30 + 5) = v32;
      *((void *)v30 + 6) = v31;
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52) < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 56))(buf, a1, a2, a3);
      (*(void (**)(std::string *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 72))(&v38, a1, a2, a3);
      if (v38.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
      }
      unsigned __int8 v30 = *(unsigned __int8 **)&buf[8];
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v30);
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Prepare SoundStorm inputs finished for loop %d", buf, 8u);
    }
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = InferenceEngine::Diagnostics_GetLogObject(v11);
    uint64_t v13 = 1;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Skip loop %d", buf, 8u);
    }
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v13;
}

void sub_20CEB8824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36)
{
  char v39 = *(std::__shared_weak_count **)(v37 - 88);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  float32x4_t v40 = *(std::__shared_weak_count **)(v37 - 112);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::SoundStormIOProcessor::process_outputs(uint64_t a1, void *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "vq_tokens");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v8 = (InferenceEngine::DataTensor *)*((void *)v6 + 5);
  int v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pred_code");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  long long v19 = (InferenceEngine::DataTensor *)*((void *)v9 + 5);
  float v20 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::SoundStormIOProcessor::check_outputs<int>(a1, &v19, a3);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v8, __p);
  (*(void (**)(uint64_t, void *, void **))(*(void *)a1 + 80))(a1, a2, __p);
  kaldi::quasar::Vocab::OOvWord(v8, &buf);
  InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)__p, &p_buf);
  uint64_t v12 = (kaldi::quasar::Vocab *)p_buf;
  unint64_t v11 = v18;
  p_std::string buf = 0;
  std::string v18 = 0;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(v12, &buf);
  p_std::string buf = &buf;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&p_buf);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
  *((void *)v13 + 5) = v12;
  *((void *)v13 + 6) = v11;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v13);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
    _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Process SoundStorm outputs finished for loop %d", (uint8_t *)&buf, 8u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 0;
}

void sub_20CEB8C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void **__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::string __p = &a13;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

void sub_20CEB8CE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CEB8CE0);
}

void InferenceEngine::SoundStormIOProcessor::check_outputs<int>(uint64_t a1, InferenceEngine::DataTensor **a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  uint64_t v6 = (unsigned __int8 *)(a1 + 24);
  int v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "vq_mask_id");
  v15[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v7, v15);
  int v8 = (InferenceEngine *)InferenceEngine::DataTensor::contain_value<int>(v5, (float)v15[0]);
  int v9 = (int)v8;
  if ((int)v8 >= 1)
  {
    LogObject = InferenceEngine::Diagnostics_GetLogObject(v8);
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6, "vq_mask_id");
      v15[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v13, v15);
      int v14 = v15[0];
      v15[0] = 67109632;
      v15[1] = v9;
      __int16 v16 = 1024;
      int v17 = v14;
      __int16 v18 = 1024;
      int v19 = a3;
      _os_log_error_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_ERROR, "Found %d appearances of invalid value %d in loop %d", (uint8_t *)v15, 0x14u);
    }
  }
  unint64_t v11 = (InferenceEngine *)InferenceEngine::DataTensor::contain_nan<int>(*a2);
  if ((int)v11 >= 1)
  {
    uint64_t v12 = InferenceEngine::Diagnostics_GetLogObject(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      InferenceEngine::SoundStormIOProcessor::check_outputs<int>(v9, a3, v12);
    }
  }
}

void InferenceEngine::DataTensor::build_from_3d_array<float>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  int v5 = (void **)*a1;
  uint64_t v4 = a1[1];
  int v7 = *(uint64_t **)*a1;
  uint64_t v6 = *(void *)(*a1 + 8);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  float v10 = operator new(0x18uLL);
  int v14 = v10 + 3;
  unint64_t v15 = v10 + 3;
  *float v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3);
  v10[1] = 0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 3);
  v10[2] = (v8 - v9) >> 2;
  uint64_t v13 = v10;
  InferenceEngine::DataUtils::get_type_string<float>(__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::VectorOps::flatten_3d_to_1d<float>(a1, __p);
  memcpy(*(void **)(*a2 + 88), __p[0], *(void *)(*a2 + 80));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13)
  {
    int v14 = v13;
    operator delete(v13);
  }
}

void sub_20CEB8F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  int v19 = *(std::__shared_weak_count **)(v17 + 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  switch(*(unsigned char *)result)
  {
    case 1:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::object or m_value.object != nullptr";
      int v2 = 1220;
      break;
    case 2:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::array or m_value.array != nullptr";
      int v2 = 1221;
      break;
    case 3:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::string or m_value.string != nullptr";
      int v2 = 1222;
      break;
    case 8:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      int v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    uint64_t v4 = (uint64_t)(*a1 + 1);
    int v5 = (void *)**a1;
    if (v5 != (void *)v4)
    {
      unint64_t v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          unint64_t v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(unsigned char *)unint64_t v6 = *((unsigned char *)v5 + 56);
          *(void *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((unsigned char *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        unint64_t v25 = v6;
        int v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            int v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            int v5 = v8;
          }
          while (!v9);
        }
        int v5 = v8;
      }
      while (v8 != (void *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v22, **a1, (*a1)[1], &v24);
  }
  for (unint64_t i = v25; v24 != v25; unint64_t i = v25)
  {
    char v12 = *(unsigned char *)(i - 16);
    uint64_t v11 = i - 16;
    LOBYTE(v22) = v12;
    long long v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(unsigned char *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      uint64_t v13 = v23;
      int v14 = v23 + 1;
      unint64_t v15 = (void *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        unint64_t v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            unint64_t v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(unsigned char *)unint64_t v16 = *((unsigned char *)v15 + 56);
            *(void *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((unsigned char *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          unint64_t v25 = v16;
          uint64_t v17 = (void *)v15[1];
          if (v17)
          {
            do
            {
              __int16 v18 = v17;
              uint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              __int16 v18 = (void *)v15[2];
              BOOL v9 = *v18 == (void)v15;
              unint64_t v15 = v18;
            }
            while (!v9);
          }
          unint64_t v15 = v18;
        }
        while (v18 != v14);
        uint64_t v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      uint64_t *v13 = (uint64_t)(v13 + 1);
      v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      char v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      goto LABEL_41;
    case 2:
      int v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      uint64_t v20 = (void *)*v19;
      break;
    case 7:
      int v19 = *a1;
      std::string::size_type v21 = (void *)**a1;
      if (!v21) {
        goto LABEL_42;
      }
      v19[1] = (uint64_t)v21;
      uint64_t v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  int v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  char v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20CEB9460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 16;
    uint64_t v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      unsigned int v6 = *v5;
      v5 -= 16;
      uint64_t result = (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      BOOL v7 = v4 == v3;
      uint64_t v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 16;
    do
    {
      *(unsigned char *)(v7 - 16) = *(unsigned char *)v9;
      uint64_t v10 = v7 - 16;
      *(void *)(v10 + 8) = *(void *)(v9 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
      *(unsigned char *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      uint64_t v7 = *((void *)&v17 + 1) - 16;
      *((void *)&v17 + 1) -= 16;
      BOOL v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)i);
    uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i + 8, *i);
    unint64_t i = (unsigned __int8 *)(*(void *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2 - 16);
      uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    unint64_t v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        unint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        *(unsigned char *)unint64_t v7 = *(unsigned char *)v5;
        *(void *)(v7 + 8) = *(void *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(unsigned char *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v15[3] = &v10[16 * v12];
  *(unsigned char *)uint64_t v11 = *(unsigned char *)a2;
  *(void *)(v11 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  int v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_20CEB9944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 16;
    uint64_t v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      unsigned int v7 = *v6;
      v6 -= 16;
      uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      BOOL v8 = v5 == a2;
      uint64_t v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((void *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a2 + 32), *(unsigned __int8 *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)(v4 - 16);
      unsigned int v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        unsigned int v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        BOOL v9 = v6 == (void)v2;
        uint64_t v6 = (uint64_t)v7;
      }
      while (!v9);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(unsigned char *)a1)
  {
    case 1:
      uint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(const void ****)(a2 + 8));
      goto LABEL_8;
    case 2:
      uint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(void *)(a2 + 8));
      goto LABEL_8;
    case 4:
      uint64_t v4 = (std::string *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      uint64_t v4 = *(std::string **)(a2 + 8);
      goto LABEL_8;
    case 8:
      uint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(void *)(a2 + 8));
LABEL_8:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(const void ***a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](v2, a1);
  return v2;
}

void sub_20CEB9C40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_20CEB9C94(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      unsigned int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = (const void ***)v7;
          unsigned int v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20CEB9E24(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_20CEB9E9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(*(void *)a1, (uint64_t)__p + 32);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_20CEB9F5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20CEB9FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v4, v6);
      v6 += 16;
      uint64_t v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_20CEBA088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3 - 16;
    unsigned int v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      int v8 = *v7;
      v7 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v6 + 8), v8);
      BOOL v9 = v6 == a5;
      uint64_t v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  uint64_t v2 = (std::string *)operator new(0x18uLL);
  uint64_t v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return v3;
}

void sub_20CEBA19C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_20CEBA1FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<signed char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20CEBA270(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v12, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  size_t v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_20CEBA3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(void *)this = off_26C211368;
  *((_DWORD *)this + 2) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)this + 1, a3);
  return this;
}

void sub_20CEBA460(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_26C211368;
  MEMORY[0x210558DD0](&this[2]);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)off_26C211368;
  MEMORY[0x210558DD0](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x2105595E0);
}

void nlohmann::detail::type_error::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  long long v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = off_26C211270;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_20CEBA634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return off_264105490[v1];
  }
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 2);
  v6[2] = **a2;
  *((void *)v6 + 6) = v8;
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *((void *)v6 + 8) = 0;
  *((unsigned char *)v6 + 56) = 0;
  uint64_t v9 = (uint64_t)v6 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6 + 56);
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

double nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<int>,0>(char *a1, uint64_t a2)
{
  if (*a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    int v6 = std::string::insert(&v8, 0, "type must be array, but is ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  return nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<int>>((unsigned __int8 *)a1, a2);
}

void sub_20CEBA890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<int>>(unsigned __int8 *a1, uint64_t a2)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<int>::size_type v4 = *a1;
  if (*a1)
  {
    if (v4 == 1)
    {
      std::vector<int>::size_type v4 = *(void *)(*((void *)a1 + 1) + 16);
    }
    else if (v4 == 2)
    {
      std::vector<int>::size_type v4 = (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4;
    }
    else
    {
      std::vector<int>::size_type v4 = 1;
    }
  }
  std::vector<int>::reserve(&v13, v4);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(v12);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v11);
  for (unint64_t i = v13.__end_;
        !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(v12, v11);
        unint64_t i = v8 + 1)
  {
    int v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v12);
    std::vector<int>::value_type __x = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v6, &__x);
    v7.__i_ = i;
    std::__wrap_iter<int *>::iterator_type v8 = std::vector<int>::insert(&v13, v7, &__x).__i_;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v12);
  }
  long long v9 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v9;
    operator delete(v9);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v13.__begin_;
  *(std::vector<int> *)a2 = v13;
  return result;
}

void sub_20CEBAA18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(void *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(unsigned __int8 **a1)
{
  double result = *a1;
  if (!result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
  }
  int v3 = *result;
  if (v3 == 1)
  {
    int v6 = a1[1];
    if (v6 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
    }
    return v6 + 56;
  }
  else if (v3 == 2)
  {
    uint64_t v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    double result = a1[2];
    if (result == v5) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
    }
  }
  else
  {
    if (!*result)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)v8, exception);
    }
    if (a1[4])
    {
      std::vector<int>::size_type v4 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)v8, v4);
    }
  }
  return result;
}

void sub_20CEBAC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(unsigned __int8 **result)
{
  if (!*result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++();
  }
  int v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    uint64_t v2 = result[1];
    int v3 = (unsigned __int8 *)*((void *)v2 + 1);
    if (v3)
    {
      do
      {
        std::vector<int>::size_type v4 = v3;
        int v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        std::vector<int>::size_type v4 = (unsigned __int8 *)*((void *)v2 + 2);
        BOOL v5 = *(void *)v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[4];
  }
  return result;
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create(212, (uint64_t)v8, exception);
  }
  if (!v2) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==();
  }
  int v3 = *v2;
  if (v3 == 2)
  {
    std::vector<int>::size_type v4 = a1[2];
    BOOL v5 = a2[2];
  }
  else if (v3 == 1)
  {
    std::vector<int>::size_type v4 = a1[1];
    BOOL v5 = a2[1];
  }
  else
  {
    std::vector<int>::size_type v4 = a1[4];
    BOOL v5 = a2[4];
  }
  return v4 == v5;
}

void sub_20CEBADB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::detail::invalid_iterator::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "invalid_iterator");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    std::vector<int>::const_iterator v7 = (const std::string::value_type *)a2;
  }
  else {
    std::vector<int>::const_iterator v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  long long v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = off_26C211310;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_20CEBAEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::value_type *__x)
{
  unint64_t i = (int *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  std::string::size_type v8 = value;
  if (end >= value)
  {
    std::vector<int>::pointer begin = this->__begin_;
    unint64_t v15 = end - this->__begin_ + 1;
    if (v15 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)v8 - (char *)begin;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
    if (v18) {
      uint64_t v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    __v.__first_ = v19;
    __v.__begin_ = &v19[v16];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v19[v18];
    std::__split_buffer<int>::push_back(&__v, __x);
    unint64_t i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const int *>::iterator_type v10 = __position.__i_ + 1;
    uint64_t v11 = end - 1;
    std::string v12 = (int *)end;
    while (v11 < end)
    {
      int v13 = *v11++;
      *v12++ = v13;
    }
    this->__end_ = v12;
    if (end != v10) {
      memmove((void *)&end[-(end - v10)], __position.__i_, (char *)end - (char *)v10);
    }
    *unint64_t i = *__x;
  }
  return (std::vector<int>::iterator)i;
}

void sub_20CEBB0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<int>::push_back(std::__split_buffer<int> *this, std::__split_buffer<int>::value_type *__x)
{
  std::__split_buffer<int>::pointer end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    std::__split_buffer<int>::pointer begin = this->__begin_;
    uint64_t v6 = (char *)begin - (char *)this->__first_;
    if (begin <= this->__first_)
    {
      if (end == this->__first_) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = ((char *)end - (char *)this->__first_) >> 1;
      }
      uint64_t v17 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this->__end_cap_.__value_, v16);
      uint64_t v19 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
      std::__split_buffer<int>::pointer v20 = this->__begin_;
      std::__split_buffer<int>::pointer end = v19;
      uint64_t v21 = (char *)this->__end_ - (char *)v20;
      if (v21)
      {
        std::__split_buffer<int>::pointer end = (int *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFFCLL));
        uint64_t v22 = 4 * (v21 >> 2);
        long long v23 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
        do
        {
          int v24 = *v20++;
          *v23++ = v24;
          v22 -= 4;
        }
        while (v22);
      }
      std::__split_buffer<int>::pointer first = this->__first_;
      this->__first_ = v17;
      this->__begin_ = v19;
      this->__end_ = end;
      this->__end_cap_.__value_ = &v17[v18];
      if (first)
      {
        operator delete(first);
        std::__split_buffer<int>::pointer end = this->__end_;
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      int v13 = &begin[-v12];
      int64_t v14 = (char *)end - (char *)begin;
      if (end != begin)
      {
        memmove(&begin[-v12], begin, (char *)end - (char *)begin);
        std::__split_buffer<int>::pointer end = this->__begin_;
      }
      unint64_t v15 = &end[v11];
      std::__split_buffer<int>::pointer end = (int *)((char *)v13 + v14);
      this->__begin_ = v15;
    }
  }
  const int *end = *__x;
  this->__end_ = end + 1;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(unsigned __int8 **result)
{
  int v1 = *result;
  if (!*result) {
    __assert_rtn("set_begin", "iter_impl.hpp", 174, "m_object != nullptr");
  }
  int v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else
    {
      result[4] = 0;
    }
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

void *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(void *result, uint64_t a2)
{
  unsigned __int8 *result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0x8000000000000000;
  if (!a2) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  return result;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(unsigned __int8 **result)
{
  int v1 = *result;
  if (!*result) {
    __assert_rtn("set_end", "iter_impl.hpp", 211, "m_object != nullptr");
  }
  int v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((void *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((void *)v1 + 1) + 8);
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

unsigned char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(unsigned char *result, int *a2)
{
  int v2 = result;
  switch(*result)
  {
    case 4:
      int v3 = result[8];
      break;
    case 5:
    case 6:
      int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      int v3 = (int)*((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      BOOL v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v8, v5);
      uint64_t v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_20CEBB448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(int **a1, int **a2)
{
  std::vector<int>::size_type v4 = operator new(0x18uLL);
  BOOL v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  *std::vector<int>::size_type v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_20CEBB510(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(void *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,int const*,int const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20CEBB58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,int const*,int const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)(v4 + 8) = 0;
      uint64_t v7 = *v6++;
      *(unsigned char *)uint64_t v4 = 5;
      *(void *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      uint64_t v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, unsigned __int8 **a3@<X8>)
{
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(a3, a1);
  uint64_t result = (uint64_t)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(a3);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t result = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(void *)(a1 + 8), a2);
    a3[1] = (unsigned __int8 *)result;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  char v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    unint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *unint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_20CEBB84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *InferenceEngine::DataUtils::get_type_string<float>@<X0>(void *a1@<X8>)
{
  if (std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C248]))
  {
    int v2 = "fp32";
  }
  else
  {
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C258])) {
      InferenceEngine::DataUtils::get_type_string<float>();
    }
    int v2 = "int32";
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

void *InferenceEngine::VectorOps::flatten_2d_to_1d<float>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  int64_t v4 = *(void *)(*a1 + 8) - *(void *)*a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) * (v4 >> 2);
  int v11 = 0;
  uint64_t result = std::vector<float>::vector(a2, v5, &v11);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      uint64_t result = memcpy((void *)(*a2 + v8), *(const void **)(v7 + v9), v4);
      ++v10;
      uint64_t v7 = *a1;
      v9 += 24;
      v8 += 4 * (v4 >> 2);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) > v10);
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x80uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string,std::vector<unsigned long> &,std::allocator<InferenceEngine::DataTensor>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_20CEBBA14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string,std::vector<unsigned long> &,std::allocator<InferenceEngine::DataTensor>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26C2190A8;
  InferenceEngine::DataTensor::DataTensor(a1 + 3);
  return a1;
}

void sub_20CEBBA70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::DataTensor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2190A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::DataTensor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2190A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = operator new(0x38uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *uint64_t v17 = 0;
  v17[1] = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  v17[5] = 0;
  v17[6] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_20CEBBDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void InferenceEngine::DataUtils::convert_data_to_3d_array<float>(uint64_t a1@<X0>, unint64_t **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 24) {
    InferenceEngine::DataUtils::convert_data_to_3d_array<float>();
  }
  unint64_t v7 = *v4;
  unint64_t v8 = v4[1];
  unint64_t v9 = v4[2];
  int v16 = 0;
  std::vector<float>::vector(__p, v9, &v16);
  std::vector<std::vector<float>>::vector(v18, v8, (uint64_t)__p);
  std::vector<std::vector<std::vector<float>>>::vector(a3, v7, v18);
  long long v19 = (void **)v18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v10 = *a2;
  unint64_t v11 = **a2;
  if (v11)
  {
    for (unint64_t i = 0; i < v11; ++i)
    {
      unint64_t v13 = v10[1];
      if (v13)
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        do
        {
          memcpy(*(void **)(*(void *)(*a3 + 24 * i) + v14), (const void *)(a1 + 4 * v10[2] * v15++ + 4 * v13 * i * v10[2]), 4 * v10[2]);
          unint64_t v10 = *a2;
          unint64_t v13 = (*a2)[1];
          v14 += 24;
        }
        while (v15 < v13);
        unint64_t v11 = *v10;
      }
    }
  }
}

void sub_20CEBBF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::vector<float>>>::vector(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    unint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *unint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v6, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_20CEBC024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20CEBC0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_20CEBC16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint8x8_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    uint8x8_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      long long v19 = *(void **)(v17 - 24);
      v17 -= 24;
      uint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_20CEBC334(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20CEBC33C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 *std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 24 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v9, v21, a4, *(void **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::vector<float>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v18);
      }
      else {
        long long v19 = 0;
      }
      unint64_t v23 = v19;
      unint64_t v24 = &v19[24 * v15];
      size_t v25 = v24;
      uint64_t v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<float>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<float>*>>(&v23, a3, a5);
      unint64_t v5 = (__n128 *)std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_20CEBC4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

__n128 *std::vector<std::vector<float>>::__move_range(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (__n128 *)((char *)a2 + v6 - a4);
  uint64_t v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    uint64_t v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *uint64_t v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      uint64_t v8 = (__n128 *)((char *)v8 + 24);
      uint64_t v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<float> *,std::vector<float> *,std::vector<float> *,0>(a2, v7, v6);
}

void *std::__split_buffer<std::vector<float>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<float>*>>(void *result, uint64_t a2, uint64_t a3)
{
  int v3 = result;
  unint64_t v4 = (void *)result[2];
  if (a3)
  {
    uint64_t v6 = &v4[3 * a3];
    uint64_t v7 = 24 * a3;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      v4 += 3;
      a2 += 24;
      v7 -= 24;
    }
    while (v7);
    unint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_20CEBC5F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<float> *,std::vector<float> *,std::vector<float> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      std::vector<float>::__move_assign(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void InferenceEngine::DataUtils::convert_data_to_2d_array<float>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *(unint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    InferenceEngine::DataUtils::convert_data_to_2d_array<float>();
  }
  unint64_t v8 = *v4;
  unint64_t v7 = v4[1];
  int v12 = 0;
  std::vector<float>::vector(__p, v7, &v12);
  std::vector<std::vector<float>>::vector(a3, v8, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v9 = *(unint64_t **)a2;
  if (**(void **)a2)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      memcpy(*(void **)(*a3 + v10), (const void *)(a1 + 4 * v9[1] * v11++), 4 * v9[1]);
      uint64_t v9 = *(unint64_t **)a2;
      v10 += 24;
    }
    while (v11 < **(void **)a2);
  }
}

void sub_20CEBC8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(char *result, unsigned char *a2)
{
  uint64_t v2 = result;
  if (*result != 4)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v4 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
    std::string::basic_string[abi:ne180100]<0>(&v7, v4);
    unint64_t v5 = std::string::insert(&v7, 0, "type must be BOOLean, but is ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v8, exception);
  }
  *a2 = result[8];
  return result;
}

void sub_20CEBC9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t InferenceEngine::DataTensor::contain_value<int>(InferenceEngine::DataTensor *a1, float a2)
{
  InferenceEngine::DataTensor::get_1d_array<int>(a1, &v7);
  if (v7.__begin_ == v7.__end_)
  {
    uint64_t v3 = 0;
    if (!v7.__begin_) {
      return v3;
    }
    goto LABEL_8;
  }
  LODWORD(v3) = 0;
  std::vector<int>::pointer begin = v7.__begin_;
  do
  {
    int v5 = *begin++;
    if ((float)v5 == a2) {
      uint64_t v3 = (v3 + 1);
    }
    else {
      uint64_t v3 = v3;
    }
  }
  while (begin != v7.__end_);
  if (v7.__begin_)
  {
LABEL_8:
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
  return v3;
}

uint64_t InferenceEngine::DataTensor::contain_nan<int>(InferenceEngine::DataTensor *a1)
{
  InferenceEngine::DataTensor::get_1d_array<int>(a1, &__p);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return 0;
}

void InferenceEngine::VectorOps::flatten_3d_to_1d<float>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  memset(v8, 0, sizeof(v8));
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      InferenceEngine::VectorOps::flatten_2d_to_1d<float>((void *)(v3 + v5), __p);
      std::vector<std::vector<float>>::push_back[abi:ne180100](v8, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v6;
      uint64_t v3 = *a1;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v6);
  }
  InferenceEngine::VectorOps::flatten_2d_to_1d<float>(v8, a2);
  __p[0] = v8;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_20CEBCB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  std::vector<int> __p = &a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  std::vector<int> v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    long long v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *std::vector<int> v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)std::vector<int> v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20CEBCCE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void InferenceEngine::DataTensor::get_1d_array<float>()
{
  __assert_rtn("get_1d_array", "DataTensor.hpp", 331, "typeid(T) == typeid(float)");
}

{
  __assert_rtn("get_1d_array", "DataTensor.hpp", 335, "typeid(T) == typeid(int32_t)");
}

{
  __assert_rtn("get_1d_array", "DataTensor.hpp", 337, "0");
}

void InferenceEngine::DataTensor::get_3d_array<float>()
{
  __assert_rtn("get_3d_array", "DataTensor.hpp", 299, "typeid(T) == typeid(float)");
}

{
  __assert_rtn("get_3d_array", "DataTensor.hpp", 303, "typeid(T) == typeid(int32_t)");
}

{
  __assert_rtn("get_3d_array", "DataTensor.hpp", 305, "0");
}

void InferenceEngine::VectorOps::concatenate_vectors_2d<float>()
{
  __assert_rtn("concatenate_vectors_2d", "VectorOps.h", 102, "matrix1[0].size() == matrix2[0].size()");
}

{
  __assert_rtn("concatenate_vectors_2d", "VectorOps.h", 104, "matrix1.size() == matrix2.size()");
}

void InferenceEngine::DataTensor::get_2d_array<float>()
{
  __assert_rtn("get_2d_array", "DataTensor.hpp", 315, "typeid(T) == typeid(float)");
}

{
  __assert_rtn("get_2d_array", "DataTensor.hpp", 319, "typeid(T) == typeid(int32_t)");
}

{
  __assert_rtn("get_2d_array", "DataTensor.hpp", 321, "0");
}

void InferenceEngine::SoundStormIOProcessor::check_outputs<int>(int a1, int a2, os_log_t log)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 1024;
  int v5 = a2;
  _os_log_error_impl(&dword_20CD80000, log, OS_LOG_TYPE_ERROR, "Found %d appearances of nan in loop %d", (uint8_t *)v3, 0xEu);
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*()
{
  __assert_rtn("operator*", "iter_impl.hpp", 242, "m_object != nullptr");
}

{
  __assert_rtn("operator*", "iter_impl.hpp", 248, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator*", "iter_impl.hpp", 254, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++()
{
  __assert_rtn("operator++", "iter_impl.hpp", 324, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==()
{
  __assert_rtn("operator==", "iter_impl.hpp", 405, "m_object != nullptr");
}

void InferenceEngine::DataUtils::get_type_string<float>()
{
}

void InferenceEngine::DataUtils::convert_data_to_3d_array<float>()
{
  __assert_rtn("convert_data_to_3d_array", "DataTensor.hpp", 149, "shape.size() == 3");
}

void InferenceEngine::DataUtils::convert_data_to_2d_array<float>()
{
  __assert_rtn("convert_data_to_2d_array", "DataTensor.hpp", 137, "shape.size() == 2");
}

uint64_t InferenceEngine::Mil2BnnsMilIO::Mil2BnnsMilIO(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t a5, int a6)
{
  long long v8 = (void *)InferenceEngine::MilIO::MilIO(a1, a2, a3, a4, a5);
  *long long v8 = off_26C206848;
  v8[17] = 0;
  v8[18] = 0;
  if (a6)
  {
    unint64_t v9 = (char *)operator new(0xC8uLL);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)unint64_t v9 = off_26C2170B8;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(void *)(a1 + 136) = v9 + 24;
    *(void *)(a1 + 144) = v9;
    free(*(void **)(a1 + 88));
    *(void *)(a1 + 88) = 0;
  }
  return a1;
}

void sub_20CEBD184(_Unwind_Exception *a1)
{
  InferenceEngine::MilIO::~MilIO(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilIO::~MilIO(void **this)
{
  *this = off_26C206B58;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  InferenceEngine::DataTensor::~DataTensor((InferenceEngine::DataTensor *)this);
}

{
  uint64_t vars8;

  *this = off_26C206B58;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  InferenceEngine::DataTensor::~DataTensor((InferenceEngine::DataTensor *)this);
  JUMPOUT(0x2105595E0);
}

void *InferenceEngine::Mil2BnnsMilIO::set_framework_specific_buffer(InferenceEngine::Mil2BnnsMilIO *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 32);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 55) != 4)
    {
      uint64_t v3 = (char *)this + 32;
      if (*((unsigned char *)this + 55) != 5) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    int v5 = 65552;
    if (*v2 != 842231910)
    {
      if (*v2 != 909209702) {
        goto LABEL_19;
      }
      goto LABEL_23;
    }
LABEL_22:
    int v5 = 65568;
    goto LABEL_23;
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4 == 4)
  {
    int v5 = 65552;
    if (**(_DWORD **)v2 == 842231910) {
      goto LABEL_22;
    }
    if (**(_DWORD **)v2 == 909209702) {
      goto LABEL_23;
    }
    uint64_t v4 = *((void *)this + 5);
  }
  if (v4 != 5) {
    goto LABEL_19;
  }
  uint64_t v3 = *(char **)v2;
LABEL_11:
  int v6 = *(_DWORD *)v3;
  int v7 = v3[4];
  if (v6 != 863268457 || v7 != 50)
  {
LABEL_19:
    unint64_t v9 = (char *)this + 32;
    exception = __cxa_allocate_exception(0x10uLL);
    if (*((char *)this + 55) < 0) {
      unint64_t v9 = *(const char **)v9;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v17, "dtype %s not supported", v9);
    MEMORY[0x210558D40](exception, &v17);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  int v5 = 131104;
LABEL_23:
  int v11 = 163841;
  *(_DWORD *)(*((void *)this + 17) + 144) = v5;
  uint64_t result = (void *)InferenceEngine::DataTensor::get_rank(this);
  if (result == (void *)5)
  {
    int v11 = 360449;
  }
  else
  {
    uint64_t result = (void *)InferenceEngine::DataTensor::get_rank(this);
    if (result == (void *)4)
    {
      int v11 = 294913;
    }
    else
    {
      uint64_t result = (void *)InferenceEngine::DataTensor::get_rank(this);
      if (result == (void *)3)
      {
        int v11 = 229377;
      }
      else
      {
        uint64_t result = (void *)InferenceEngine::DataTensor::get_rank(this);
        if (result != (void *)2)
        {
          uint64_t result = (void *)InferenceEngine::DataTensor::get_rank(this);
          if (result != (void *)1)
          {
            unint64_t v16 = __cxa_allocate_exception(0x10uLL);
            InferenceEngine::StringFormatter::StringFormatter(&v17, "shape rank %ld not supported", (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
            MEMORY[0x210558D40](v16, &v17);
            __cxa_throw(v16, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          int v11 = 98305;
        }
      }
    }
  }
  uint64_t v13 = *((void *)this + 17);
  *(_DWORD *)(v13 + 4) = v11;
  *(void *)(v13 + 136) = *((void *)this + 11);
  unint64_t v14 = (unsigned char *)*((void *)this + 7);
  uint64_t v15 = (unsigned char *)*((void *)this + 8);
  if (v15 != v14)
  {
    return memmove((void *)(v13 + 8), v14, v15 - v14);
  }
  return result;
}

void sub_20CEBD490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer(InferenceEngine::Mil2BnnsMilIO *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 17);
  int v3 = v2[36];
  if (v3 == 65552)
  {
    long long v8 = (void *)((char *)this + 32);
    int v9 = *((char *)this + 55);
    if (v9 < 0)
    {
      if (*((void *)this + 5) != 4) {
        goto LABEL_23;
      }
      long long v8 = (void *)*v8;
    }
    else if (v9 != 4)
    {
      goto LABEL_23;
    }
    if (*(_DWORD *)v8 == 909209702) {
      goto LABEL_27;
    }
LABEL_23:
    InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer();
  }
  if (v3 == 131104)
  {
    int v6 = (char *)this + 32;
    int v7 = *((char *)this + 55);
    if (v7 < 0)
    {
      if (*((void *)this + 5) != 5) {
        goto LABEL_19;
      }
      int v6 = *(char **)v6;
    }
    else if (v7 != 5)
    {
      goto LABEL_19;
    }
    int v10 = *(_DWORD *)v6;
    int v11 = v6[4];
    if (v10 == 863268457 && v11 == 50) {
      goto LABEL_27;
    }
LABEL_19:
    InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer();
  }
  if (v3 != 65568)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string v17 = (char *)this + 32;
    if (*((char *)this + 55) < 0) {
      std::string v17 = *(const char **)v17;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v37, "dtype %s not supported", v17);
    MEMORY[0x210558D40](exception, &v37);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v4 = (void *)((char *)this + 32);
  int v5 = *((char *)this + 55);
  if (v5 < 0)
  {
    if (*((void *)this + 5) != 4) {
      goto LABEL_45;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 4)
  {
LABEL_45:
    InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer();
  }
  if (*(_DWORD *)v4 != 842231910) {
    goto LABEL_45;
  }
LABEL_27:
  HIDWORD(v13) = v2[1] - 32769;
  LODWORD(v13) = HIDWORD(v13);
  switch((v13 >> 16))
  {
    case 0u:
      long long v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v19, 0, 0, 0);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v19);
      unint64_t v14 = v19;
      if (!v19) {
        goto LABEL_44;
      }
      uint64_t v20 = v19;
      goto LABEL_43;
    case 1u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 4), 1uLL);
      int v22 = 0;
      unint64_t v23 = 0;
      uint64_t v24 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v22, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v22);
      uint64_t v15 = v22;
      if (!v22) {
        goto LABEL_41;
      }
      unint64_t v23 = v22;
      goto LABEL_40;
    case 2u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 6), 2uLL);
      size_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v25, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v25);
      uint64_t v15 = v25;
      if (!v25) {
        goto LABEL_41;
      }
      uint64_t v26 = v25;
      goto LABEL_40;
    case 3u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 8), 3uLL);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v28, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v28);
      uint64_t v15 = v28;
      if (!v28) {
        goto LABEL_41;
      }
      uint64_t v29 = v28;
      goto LABEL_40;
    case 4u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 10), 4uLL);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v31, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v31);
      uint64_t v15 = v31;
      if (!v31) {
        goto LABEL_41;
      }
      uint64_t v32 = v31;
      goto LABEL_40;
    case 5u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 12), 5uLL);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v34, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v34);
      uint64_t v15 = v34;
      if (!v34) {
        goto LABEL_41;
      }
      uint64_t v35 = v34;
LABEL_40:
      operator delete(v15);
LABEL_41:
      unint64_t v14 = (void *)v37.__r_.__value_.__r.__words[0];
      if (v37.__r_.__value_.__r.__words[0])
      {
        v37.__r_.__value_.__l.__size_ = v37.__r_.__value_.__r.__words[0];
LABEL_43:
        operator delete(v14);
      }
LABEL_44:
      *((void *)this + 11) = *(void *)(*((void *)this + 17) + 136);
      return;
    default:
      unint64_t v18 = __cxa_allocate_exception(0x10uLL);
      InferenceEngine::StringFormatter::StringFormatter(&v37, "layout %ld not supported", *(unsigned int *)(*((void *)this + 17) + 4));
      MEMORY[0x210558D40](v18, &v37);
      __cxa_throw(v18, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
}

void sub_20CEBD8F0(_Unwind_Exception *a1)
{
  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

uint64_t InferenceEngine::Mil2BnnsMilInferenceModel::Mil2BnnsMilInferenceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = InferenceEngine::MilInferenceModel::MilInferenceModel(a1, a2);
  *(void *)uint64_t v3 = off_26C206B00;
  uint64_t v4 = (void **)(v3 + 336);
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(void *)(v3 + 352) = 0;
  BNNSGraphCompileOptionsMakeDefault();
  std::string::basic_string[abi:ne180100]<0>(&__p, "mil2bnns_model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)(a1 + 32), (const void **)&__p.__r_.__value_.__l.__data_, &v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "mil2bnns_downcast_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)(a1 + 32), (const void **)&buf.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "mil2bnns_mmap_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)(a1 + 32), (const void **)v32, &buf);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*v4);
  }
  *(std::string *)uint64_t v4 = buf;
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if ((*((unsigned char *)&v35.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_ == 7
      && *(_DWORD *)v35.__r_.__value_.__l.__data_ == 1702257015
      && *(_DWORD *)(v35.__r_.__value_.__r.__words[0] + 3) == 1852732005)
    {
      goto LABEL_40;
    }
    if (v35.__r_.__value_.__l.__size_ == 10)
    {
      if (*(void *)v35.__r_.__value_.__l.__data_ == 0x6F7473646E756F73
        && *(_WORD *)(v35.__r_.__value_.__r.__words[0] + 8) == 28018)
      {
        goto LABEL_40;
      }
      std::string::size_type size = v35.__r_.__value_.__l.__size_;
    }
    if (size != 7) {
      goto LABEL_41;
    }
    int v9 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v35.__r_.__value_.__r.__words[2]) != 7)
    {
      if (HIBYTE(v35.__r_.__value_.__r.__words[2]) != 10) {
        goto LABEL_41;
      }
      if (v35.__r_.__value_.__r.__words[0] != 0x6F7473646E756F73 || LOWORD(v35.__r_.__value_.__r.__words[1]) != 28018) {
        goto LABEL_41;
      }
LABEL_40:
      BNNSGraphCompileOptionsSetPredefinedOptimizations();
      goto LABEL_41;
    }
    if (LODWORD(v35.__r_.__value_.__l.__data_) == 1702257015
      && *(_DWORD *)((char *)v35.__r_.__value_.__r.__words + 3) == 1852732005)
    {
      goto LABEL_40;
    }
    int v9 = &v35;
  }
  int data = (int)v9->__r_.__value_.__l.__data_;
  int v12 = *(_DWORD *)((char *)v9->__r_.__value_.__r.__words + 3);
  if (data == 1601401972 && v12 == 1886154335) {
    goto LABEL_40;
  }
LABEL_41:
  std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
  }
  if (v14)
  {
    if ((_get_cpu_capabilities() & 0x78000000) == 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      InferenceEngine::StringFormatter::StringFormatter(&buf, "BNNS downcast type not supported '%s'", (const char *)p_p);
      MEMORY[0x210558D40](exception, &buf);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 909209702) {
        goto LABEL_74;
      }
      if (__p.__r_.__value_.__l.__size_ == 19)
      {
        if (*(void *)__p.__r_.__value_.__l.__data_ == 0x73706F5F36317066
          && *(void *)(__p.__r_.__value_.__r.__words[0] + 8) == 0x63615F323370665FLL
          && *(void *)(__p.__r_.__value_.__r.__words[0] + 11) == 0x6D756363615F3233)
        {
          goto LABEL_74;
        }
        std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
      }
      if (v17 != 4) {
        goto LABEL_75;
      }
      uint64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 4)
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 19) {
          goto LABEL_75;
        }
        BOOL v15 = __p.__r_.__value_.__r.__words[0] == 0x73706F5F36317066
           && __p.__r_.__value_.__l.__size_ == 0x63615F323370665FLL;
        if (!v15 || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 3) != 0x6D756363615F3233) {
          goto LABEL_75;
        }
LABEL_74:
        BNNSGraphCompileOptionsSetDownconvertMode();
        goto LABEL_75;
      }
      if (LODWORD(__p.__r_.__value_.__l.__data_) == 909209702) {
        goto LABEL_74;
      }
      uint64_t v20 = &__p;
    }
    if (LODWORD(v20->__r_.__value_.__l.__data_) != 909207138 || (_get_cpu_capabilities() & 0x78000000uLL) < 0x10000001) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_75:
  if (*(char *)(a1 + 359) < 0)
  {
    if (!*(void *)(a1 + 344)) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (*(unsigned char *)(a1 + 359)) {
LABEL_79:
  }
    BNNSGraphCompileOptionsSetOutputPath();
LABEL_80:
  uint64_t v21 = (const char *)(a1 + 64);
  *(void *)(a1 + 224) = BNNSGraphCompileFromFile_v2();
  *(void *)(a1 + 232) = v22;
  BNNSGraphCompileOptionsDestroy();
  if (!*(void *)(a1 + 224))
  {
    uint64_t v28 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 87) < 0) {
      uint64_t v21 = *(const char **)v21;
    }
    InferenceEngine::StringFormatter::StringFormatter(&buf, "failed to compile mil2bnns model from: '%s'", v21);
    MEMORY[0x210558D40](v28, &buf);
    __cxa_throw(v28, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v23 = BNNSGraphContextMake();
  *(void *)(a1 + 256) = v23;
  *(void *)(a1 + 264) = v24;
  if (!v23)
  {
    uint64_t v29 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 87) < 0) {
      uint64_t v21 = *(const char **)v21;
    }
    InferenceEngine::StringFormatter::StringFormatter(&buf, "failed to create context: '%s'", v21);
    MEMORY[0x210558D40](v29, &buf);
    __cxa_throw(v29, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(unsigned char *)(a1 + 136))
  {
    WorkspaceSize_int v2 = (InferenceEngine *)BNNSGraphContextSetArgumentType();
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  else
  {
    WorkspaceSize_int v2 = (InferenceEngine *)BNNSGraphContextGetWorkspaceSize_v2();
    *(void *)(a1 + 240) = WorkspaceSize_v2;
    if (WorkspaceSize_v2) {
      WorkspaceSize_int v2 = (InferenceEngine *)malloc_type_valloc((size_t)WorkspaceSize_v2, 0x3F0997A8uLL);
    }
    *(void *)(a1 + 248) = WorkspaceSize_v2;
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject(WorkspaceSize_v2);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 87) < 0) {
      uint64_t v21 = *(const char **)v21;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Load model from %s", (uint8_t *)&buf, 0xCu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_20CEBE0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0) {
        operator delete(a16);
      }
      if (a27 < 0) {
        operator delete(a22);
      }
      if (*(char *)(v33 + 359) < 0) {
        operator delete(*v36);
      }
      std::string v38 = *(void **)(v33 + 312);
      if (v38)
      {
        *(void *)(v33 + 320) = v38;
        operator delete(v38);
      }
      a22 = (void *)(v33 + 288);
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      InferenceEngine::MilInferenceModel::~MilInferenceModel((InferenceEngine::MilInferenceModel *)v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(char *__s@<X2>, char *a2@<X0>, const void **a3@<X1>, std::string *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>(a2, a3, (uint64_t)__p, a4);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20CEBE218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::Mil2BnnsMilInferenceModel::~Mil2BnnsMilInferenceModel(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  *(void *)this = off_26C206B00;
  BNNSGraphContextDestroy_v2();
  int v2 = (void *)*((void *)this + 31);
  if (v2) {
    free(v2);
  }
  if (*((char *)this + 359) < 0) {
    uint64_t v3 = *((void *)this + 43);
  }
  else {
    uint64_t v3 = *((unsigned __int8 *)this + 359);
  }
  uint64_t v4 = (void *)*((void *)this + 28);
  if (v3) {
    munmap(v4, *((void *)this + 29));
  }
  else {
    free(v4);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  int v5 = (void *)*((void *)this + 39);
  if (v5)
  {
    *((void *)this + 40) = v5;
    operator delete(v5);
  }
  int v6 = (void **)((char *)this + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  InferenceEngine::MilInferenceModel::~MilInferenceModel(this);
}

double InferenceEngine::Mil2BnnsMilInferenceModel::build_io@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilIO,std::allocator<InferenceEngine::Mil2BnnsMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,void>(a2, a3, a4, a5, (unsigned __int8 *)(a1 + 136), v8);
  double result = v8[0];
  *a6 = *(_OWORD *)v8;
  return result;
}

void InferenceEngine::Mil2BnnsMilInferenceModel::prepare(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  InferenceEngine::MilInferenceModel::prepare(this);
  uint64_t v2 = *((void *)this + 26) + *((void *)this + 21);
  *((void *)this + 34) = v2;
  *((void *)this + 35) = malloc_type_malloc(16 * v2, 0x10A20408DAD38D9uLL);
  for (unint64_t i = (void *)*((void *)this + 20); i; unint64_t i = (void *)*i)
  {
    uint64_t v4 = (const void *)i[5];
    if (v4)
    {
      if (v5)
      {
        int v6 = (std::__shared_weak_count *)i[6];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      }
    }
    else
    {
      int v5 = 0;
    }
    int v6 = 0;
LABEL_8:
    InferenceEngine::MilIO::get_io_name(v5, &__p);
    int ArgumentPosition = BNNSGraphGetArgumentPosition();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((_DWORD *)v5 + 32) = ArgumentPosition;
    if (*((unsigned char *)this + 136)) {
      uint64_t v8 = *((void *)v5 + 17);
    }
    else {
      uint64_t v8 = *((void *)v5 + 11);
    }
    data_std::string::size_type size = InferenceEngine::DataTensor::get_data_size(v5);
    int v10 = (void *)(*((void *)this + 35) + 16 * *((int *)v5 + 32));
    *int v10 = v8;
    v10[1] = data_size;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  for (j = (void *)*((void *)this + 25); j; j = (void *)*j)
  {
    int v12 = (const void *)j[5];
    if (v12)
    {
      if (v13)
      {
        std::string::size_type v14 = (std::__shared_weak_count *)j[6];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    std::string::size_type v14 = 0;
LABEL_23:
    InferenceEngine::MilIO::get_io_name(v13, &__p);
    int v15 = BNNSGraphGetArgumentPosition();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((_DWORD *)v13 + 32) = v15;
    if (*((unsigned char *)this + 136)) {
      uint64_t v16 = *((void *)v13 + 17);
    }
    else {
      uint64_t v16 = *((void *)v13 + 11);
    }
    uint64_t v17 = InferenceEngine::DataTensor::get_data_size(v13);
    unint64_t v18 = (void *)(*((void *)this + 35) + 16 * *((int *)v13 + 32));
    void *v18 = v16;
    v18[1] = v17;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  unint64_t v19 = *((void *)this + 26) + *((void *)this + 21);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::vector<std::vector<unsigned long long>>::resize((uint64_t *)this + 36, v19);
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = (char **)((char *)this + 312);
    uint64_t v22 = (void *)((char *)this + 328);
    uint64_t v23 = (char *)*((void *)this + 40);
    do
    {
      if ((unint64_t)v23 >= *v22)
      {
        uint64_t v24 = (v23 - *v21) >> 4;
        if ((unint64_t)(v24 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = *v22 - (void)*v21;
        uint64_t v26 = v25 >> 3;
        if (v25 >> 3 <= (unint64_t)(v24 + 1)) {
          uint64_t v26 = v24 + 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)this + 328, v27);
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[16 * v24];
        *(_OWORD *)uint64_t v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        uint64_t v31 = (char *)*((void *)this + 39);
        uint64_t v30 = (char *)*((void *)this + 40);
        uint64_t v32 = v29;
        if (v30 != v31)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
            v32 -= 16;
            v30 -= 16;
          }
          while (v30 != v31);
          uint64_t v30 = *v21;
        }
        uint64_t v23 = v29 + 16;
        *((void *)this + 39) = v32;
        *((void *)this + 40) = v29 + 16;
        *((void *)this + 41) = &v28[16 * v27];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v23 += 16;
      }
      *((void *)this + 40) = v23;
      ++v20;
    }
    while (v20 != v19);
  }
}

void sub_20CEBE6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned long long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void InferenceEngine::Mil2BnnsMilInferenceModel::clean(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  free(*((void **)this + 35));
  *((void *)this + 40) = *((void *)this + 39);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 36);
  if (*((unsigned char *)this + 136))
  {
    for (unint64_t i = (uint64_t **)*((void *)this + 25); i; unint64_t i = (uint64_t **)*i)
    {
      unint64_t v4 = (std::__shared_weak_count *)i[6];
      if (v4)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        v3[11] = 0;
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      else
      {
        v3[11] = 0;
      }
    }
  }
  InferenceEngine::MilInferenceModel::clean(this);
}

void InferenceEngine::Mil2BnnsMilInferenceModel::set_input(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  unint64_t v18 = *(kaldi::quasar::Vocab **)a2;
  unint64_t v19 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::MilInferenceModel::set_input(a1, &v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (*(unsigned char *)(a1 + 136))
  {
    kaldi::quasar::Vocab::OOvWord(*(kaldi::quasar::Vocab **)a2, &__p);
    *(void *)&long long v15 = &__p;
    BOOL v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 144, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v15);
    unint64_t v6 = (const void *)*((void *)v5 + 5);
    if (v6)
    {
      if (v7)
      {
        uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 6);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v8 = 0;
LABEL_12:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = v7[32];
    InferenceEngine::DataTensor::get_shape((InferenceEngine::DataTensor *)v7, 0, &__p.__r_.__value_.__l.__data_);
    uint64_t v16 = 0;
    long long v15 = 0uLL;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>((char *)&v15, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
    uint64_t v10 = *(void *)(a1 + 288);
    uint64_t v11 = v10 + 24 * (int)v9;
    int v12 = *(void **)v11;
    if (*(void *)v11)
    {
      *(void *)(v10 + 24 * (int)v9 + 8) = v12;
      operator delete(v12);
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
    }
    *(_OWORD *)uint64_t v11 = v15;
    *(void *)(v10 + 24 * v9 + 16) = v16;
    uint64_t v13 = *(void *)(*(void *)(a1 + 288) + 24 * v9);
    std::string::size_type v14 = (uint64_t *)(*(void *)(a1 + 312) + 16 * v9);
    *std::string::size_type v14 = (*(void *)(*(void *)(a1 + 288) + 24 * v9 + 8) - v13) >> 3;
    v14[1] = v13;
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_20CEBEA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::Mil2BnnsMilInferenceModel::execute(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  InferenceEngine::MilInferenceModel::get_all_input_names(this, (uint64_t)&v13);
  std::string::size_type size = v13.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v13.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)i, *(void *)(i + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)i;
      v12.__r_.__value_.__r.__words[2] = *(void *)(i + 16);
      *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v4;
    }
    if (((*(uint64_t (**)(InferenceEngine::Mil2BnnsMilInferenceModel *, std::string *))(*(void *)this + 24))(this, &v12) & 1) == 0)__assert_rtn("execute", "Mil2BnnsInferenceModule.cpp", 247, "has_input(input_name)"); {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    }
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (*((unsigned char *)this + 136))
  {
    int v5 = BNNSGraphContextSetDynamicShapes_v2();
    if (v5 < 0)
    {
      int v10 = v5;
      exception = __cxa_allocate_exception(0x10uLL);
      InferenceEngine::StringFormatter::StringFormatter(&v13, "Set dynamic shape for execution failed with return code %d", v10);
      MEMORY[0x210558D40](exception, &v13);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
  }
  unsigned int v6 = 2;
  do
  {
    uint64_t result = BNNSGraphContextExecute_v2();
    if (v6 < 2) {
      break;
    }
    --v6;
  }
  while (result);
  if (result)
  {
    int v8 = result;
    uint64_t v9 = __cxa_allocate_exception(0x10uLL);
    InferenceEngine::StringFormatter::StringFormatter(&v13, "BNNS execution failed with return code %d", v8);
    MEMORY[0x210558D40](v9, &v13);
    __cxa_throw(v9, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  return result;
}

void sub_20CEBECE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void InferenceEngine::Mil2BnnsMilIO::~Mil2BnnsMilIO(InferenceEngine::Mil2BnnsMilIO *this)
{
  *(void *)this = off_26C206848;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = off_26C206B58;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  InferenceEngine::DataTensor::~DataTensor(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C206848;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = off_26C206B58;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  InferenceEngine::DataTensor::~DataTensor(this);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<BNNSNDArrayDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2170B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BNNSNDArrayDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2170B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    int v10 = std::string::insert(&v12, 0, "cannot use value() with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v13, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v13);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v12);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v13, (unsigned __int8 **)&v12))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
    }
  }
  else
  {
    uint64_t v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v7, a4);
  }
}

void sub_20CEBF0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a1, a2);
}

void sub_20CEBF134(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, std::string *this)
{
  if (*(unsigned char *)a1 != 3)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v7 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v10, v7);
    int v8 = std::string::insert(&v10, 0, "type must be string, but is ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
    long long v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v11, exception);
  }
  long long v4 = *(const std::string **)(a1 + 8);
  return std::string::operator=(this, v4);
}

void sub_20CEBF230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilIO,std::allocator<InferenceEngine::Mil2BnnsMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, long long *a3@<X3>, uint64_t a4@<X4>, unsigned __int8 *a5@<X5>, void *a6@<X8>)
{
  std::string::size_type v12 = operator new(0xB0uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,std::allocator<InferenceEngine::Mil2BnnsMilIO>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_20CEBF308(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,std::allocator<InferenceEngine::Mil2BnnsMilIO>,0>(void *a1, long long *a2, long long *a3, long long *a4, uint64_t a5, unsigned __int8 *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26C219118;
  InferenceEngine::Mil2BnnsMilIO::Mil2BnnsMilIO((uint64_t)(a1 + 3), a2, a3, a4, a5, *a6);
  return a1;
}

void sub_20CEBF368(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::vector<std::vector<unsigned long long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      std::string::size_type v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      std::string::size_type v12 = 0;
    }
    long long v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_20CEBF56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

char *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20CEBF72C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer()
{
  __assert_rtn("read_framework_specific_buffer", "Mil2BnnsInferenceModule.cpp", 66, "dtype_ == \"fp32\"");
}

{
  __assert_rtn("read_framework_specific_buffer", "Mil2BnnsInferenceModule.cpp", 68, "dtype_ == \"fp16\"");
}

{
  __assert_rtn("read_framework_specific_buffer", "Mil2BnnsInferenceModule.cpp", 70, "dtype_ == \"int32\"");
}

double InferenceEngine::BaseInferenceController::BaseInferenceController(void *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = InferenceEngine::MLInferenceModel::MLInferenceModel(a1, a2, a3);
  *uint64_t v3 = off_26C2069A8;
  double result = 0.0;
  *(_OWORD *)(v3 + 3) = 0u;
  *(_OWORD *)(v3 + 5) = 0u;
  *((_DWORD *)v3 + 14) = 1065353216;
  v3[8] = 0;
  v3[9] = 0;
  return result;
}

void InferenceEngine::BaseInferenceController::~BaseInferenceController(InferenceEngine::BaseInferenceController *this)
{
  *(void *)this = off_26C2069A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table((uint64_t)this + 24);
  InferenceEngine::MLInferenceModel::~MLInferenceModel(this);
}

void InferenceEngine::BaseInferenceController::set_io_processor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void InferenceEngine::BaseInferenceController::set_input(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  kaldi::quasar::Vocab::OOvWord(*(kaldi::quasar::Vocab **)a2, &__p);
  p_p = &__p;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  uint64_t v6 = *(kaldi::quasar::Vocab **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 6);
  *((void *)v4 + 5) = v6;
  *((void *)v4 + 6) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20CEBF948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::BaseInferenceController::set_input(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 24, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v8);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 6);
  *((void *)v4 + 5) = v6;
  *((void *)v4 + 6) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

uint64_t InferenceEngine::BaseInferenceController::clean(InferenceEngine::BaseInferenceController *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::clear((uint64_t)this + 24);
  return InferenceEngine::MLInferenceModel::clean(this);
}

unsigned __int8 *InferenceEngine::BaseInferenceController::get_output@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a2;
  double result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 24, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v6);
  uint64_t v5 = *((void *)result + 6);
  *a3 = *((void *)result + 5);
  a3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void InferenceEngine::BaseInferenceController::execute(InferenceEngine::MilInferenceModel **this)
{
  uint64_t v2 = 0;
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)(this + 3);
  float v4 = 0.0;
  while (1)
  {
    InferenceEngine::MLInferenceModel::get_model_parameters(this, (uint64_t)buf);
    uint64_t v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(buf, "loop");
    LODWORD(v31.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v5, (int *)&v31);
    int data = (int)v31.__r_.__value_.__l.__data_;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v34, buf[0]);
    if ((int)v2 >= data) {
      break;
    }
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v9 = this[8];
    if (!v9
      || !(**(unsigned int (***)(InferenceEngine::MilInferenceModel *, char *, uint64_t))v9)(v9, v3, v2))
    {
      InferenceEngine::MLInferenceModel::get_all_input_names(this, (uint64_t)buf);
      unint64_t v10 = *(long long **)buf;
      unint64_t v11 = *(long long **)v34;
      while (v10 != v11)
      {
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v10, *((void *)v10 + 1));
        }
        else
        {
          long long v12 = *v10;
          v31.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
        }
        v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
        if (!*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)&v31, (uint64_t)&std::piecewise_construct, (long long **)&v30)+ 5))
        {
          exception = __cxa_allocate_exception(0x10uLL);
          uint64_t v26 = &v31;
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v26 = (std::string *)v31.__r_.__value_.__r.__words[0];
          }
          InferenceEngine::StringFormatter::StringFormatter(&v30, "Model input %s is not set correctly!", (const char *)v26);
          MEMORY[0x210558D40](exception, &v30);
          __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
        long long v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)&v31, (uint64_t)&std::piecewise_construct, (long long **)&v30);
        long long v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
        uint64_t v28 = *((void *)v13 + 5);
        uint64_t v29 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        InferenceEngine::MLInferenceModel::set_input((uint64_t)this, &v28);
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        unint64_t v10 = (long long *)((char *)v10 + 24);
      }
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      InferenceEngine::MLInferenceModel::execute((InferenceEngine::MLInferenceModel *)this);
      InferenceEngine::MLInferenceModel::get_all_output_names(this, (uint64_t)buf);
      uint64_t v16 = *(long long **)buf;
      long long v15 = *(long long **)v34;
      while (v16 != v15)
      {
        if (*((char *)v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v16, *((void *)v16 + 1));
        }
        else
        {
          long long v17 = *v16;
          v31.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v27, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
        }
        else {
          std::string v27 = v31;
        }
        InferenceEngine::MLInferenceModel::get_output((uint64_t)this);
        uint64_t v32 = &v31;
        unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)&v31, (uint64_t)&std::piecewise_construct, (long long **)&v32);
        long long v19 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v20 = (std::__shared_weak_count *)*((void *)v18 + 6);
        *(_OWORD *)(v18 + 40) = v19;
        if (v20)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          if (v30.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v30.__r_.__value_.__l.__size_);
          }
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        uint64_t v16 = (long long *)((char *)v16 + 24);
      }
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      InferenceEngine::MLInferenceModel::reset((InferenceEngine::MLInferenceModel *)this);
      uint64_t v7 = this[8];
      if (v7)
      {
        uint64_t v7 = (InferenceEngine *)(*(uint64_t (**)(InferenceEngine *, char *, uint64_t))(*(void *)v7 + 8))(v7, v3, v2);
        if (v7) {
          break;
        }
      }
      LogObject = InferenceEngine::Diagnostics_GetLogObject(v7);
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&buf[4] = v2;
        _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Loop %d has completed!", buf, 8u);
      }
      float v4 = v4 + (float)((std::chrono::steady_clock::now().__d_.__rep_ - v8.__d_.__rep_) / 1000);
    }
    uint64_t v2 = (v2 + 1);
  }
  int v22 = InferenceEngine::Diagnostics_GetLogObject(v7);
  BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
  if (v23)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v22, OS_LOG_TYPE_INFO, "Inference completed!", buf, 2u);
  }
  int v24 = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)&buf[4] = v2;
    *(_WORD *)uint64_t v34 = 2048;
    *(double *)&v34[2] = v4;
    __int16 v35 = 2048;
    double v36 = (float)(v4 / (float)(int)v2) / 1000.0;
    _os_log_impl(&dword_20CD80000, v24, OS_LOG_TYPE_INFO, "%i steps, total_time_microseconds: %.3f us, average time per step: %.6f ms", buf, 0x1Cu);
  }
}

void sub_20CEBFF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t *a38)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  std::chrono::steady_clock::time_point v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (std::string::size_type i = *v14; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  BOOL v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *BOOL v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20CEC0314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  std::chrono::steady_clock::time_point v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *std::chrono::steady_clock::time_point v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20CEC03B4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t InferenceEngine::S1NARDecoderIOProcessor::S1NARDecoderIOProcessor(uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, a2);
  InferenceEngine::BaseIOProcessor::BaseIOProcessor(a1, (uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  *(void *)a1 = off_26C2069F8;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  char v4 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v7[0];
  v7[0] = v4;
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  *(void *)(a1 + 32) = v8;
  std::chrono::steady_clock::time_point v8 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
  return a1;
}

void sub_20CEC0518(_Unwind_Exception *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v2);
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::S1NARDecoderIOProcessor::~S1NARDecoderIOProcessor(uint64_t **this)
{
  *this = (uint64_t *)off_26C2069F8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(this + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 4, *((unsigned __int8 *)this + 24));
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(this);
}

uint64_t InferenceEngine::S1NARDecoderIOProcessor::process_inputs(uint64_t a1, void *a2, int a3)
{
  v80.__r_.__value_.__l.__size_ = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v71, "enc_output");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v71);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::chrono::steady_clock::time_point v8 = (InferenceEngine::DataTensor *)*((void *)v6 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::get_shape(v8, 0, &v71.__r_.__value_.__l.__data_);
  uint64_t v9 = *(void *)v71.__r_.__value_.__l.__data_;
  v71.__r_.__value_.__l.__size_ = v71.__r_.__value_.__r.__words[0];
  operator delete(v71.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::get_shape(v8, 0, &v71.__r_.__value_.__l.__data_);
  unint64_t v10 = *(void *)(v71.__r_.__value_.__r.__words[0] + 8);
  v71.__r_.__value_.__l.__size_ = v71.__r_.__value_.__r.__words[0];
  operator delete(v71.__r_.__value_.__l.__data_);
  if (v9 != 1) {
    __assert_rtn("process_inputs", "S1NARDecoderIOProcessor.cpp", 31, "B == 1");
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v71, "semantic");
    long long v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v71);
    if (!v11) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unint64_t v13 = (InferenceEngine::DataTensor *)*((void *)v11 + 5);
    uint8x8_t v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v71, "semantic_inf_mask");
    long long v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v71);
    if (!v14) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unint64_t v16 = (InferenceEngine::DataTensor *)*((void *)v14 + 5);
    long long v15 = (std::__shared_weak_count *)*((void *)v14 + 6);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    float v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "vq_mask_id");
    LODWORD(p_p) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v17, (int *)&p_p);
    *(float *)&float32x4_t v61 = (float)(int)p_p;
    std::vector<float>::vector(&__p, v10, &v61);
    std::vector<std::vector<float>>::vector(&v71, 1uLL, (uint64_t)&__p);
    if (__p)
    {
      float32x4_t v68 = __p;
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "semantic");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v71, &p_p);
    unint64_t v13 = (InferenceEngine::DataTensor *)p_p;
    uint8x8_t v12 = v65;
    p_p = 0;
    float32x4_t v65 = 0;
    if (SHIBYTE(v69) < 0) {
      operator delete(__p);
    }
    LODWORD(v61) = 0;
    std::vector<float>::vector(&p_p, v10, &v61);
    std::vector<std::vector<float>>::vector(&__p, 1uLL, (uint64_t)&p_p);
    if (p_p)
    {
      float32x4_t v65 = (std::__shared_weak_count *)p_p;
      operator delete(p_p);
    }
    std::string::basic_string[abi:ne180100]<0>(&p_p, "semantic_inf_mask");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&__p, &v61);
    unint64_t v16 = (InferenceEngine::DataTensor *)v61;
    long long v15 = v62;
    float32x4_t v61 = 0;
    float32x4_t v62 = 0;
    if (SHIBYTE(v66) < 0) {
      operator delete(p_p);
    }
    p_p = &__p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    std::string __p = &v71;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  float v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "loop");
  LODWORD(v71.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v18, (int *)&v71);
  float v19 = ((float)a3 + 1.0) / (float)SLODWORD(v71.__r_.__value_.__l.__data_);
  double v20 = cos(v19 * 3.14159265 * 0.5);
  InferenceEngine::DataTensor::unsqueeze(v13, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v13, &v71);
  float32x4_t v68 = 0;
  uint64_t v69 = 0;
  std::string __p = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&__p, *(void *)v71.__r_.__value_.__l.__data_, *(void *)(v71.__r_.__value_.__r.__words[0] + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v71.__r_.__value_.__r.__words[0] + 8) - *(void *)v71.__r_.__value_.__l.__data_) >> 3));
  p_p = &v71;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  InferenceEngine::DataTensor::squeeze(v13, 2);
  InferenceEngine::DataTensor::unsqueeze(v16, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v16, &v71);
  float32x4_t v65 = 0;
  uint64_t v66 = 0;
  p_p = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&p_p, *(void *)v71.__r_.__value_.__l.__data_, *(void *)(v71.__r_.__value_.__r.__words[0] + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v71.__r_.__value_.__r.__words[0] + 8) - *(void *)v71.__r_.__value_.__l.__data_) >> 3));
  float32x4_t v61 = &v71;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  InferenceEngine::DataTensor::squeeze(v16, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v8, &v71);
  float32x4_t v62 = 0;
  uint64_t v63 = 0;
  float32x4_t v61 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v61, *(void *)v71.__r_.__value_.__l.__data_, *(void *)(v71.__r_.__value_.__r.__words[0] + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v71.__r_.__value_.__r.__words[0] + 8) - *(void *)v71.__r_.__value_.__l.__data_) >> 3));
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  float v21 = InferenceEngine::DataTensor::accumulate_sum(v16);
  float v22 = v20;
  float v23 = (float)v10;
  int v24 = v10 - (int)v21 - (int)(float)((float)v10 * v22);
  if (v24 <= 0)
  {
    kaldi::quasar::Vocab::OOvWord(v13, &buf);
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    std::string::size_type v44 = buf.__r_.__value_.__r.__words[2];
    memset(&buf, 0, sizeof(buf));
    v71.__r_.__value_.__r.__words[2] = v44;
    float32x4_t v72 = v13;
    float32x4_t v73 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    kaldi::quasar::Vocab::OOvWord(v16, &v60);
    std::string v74 = v60;
    memset(&v60, 0, sizeof(v60));
    float32x4_t v75 = v16;
    float32x4_t v76 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    kaldi::quasar::Vocab::OOvWord(v8, &v59);
    std::string v77 = v59;
    memset(&v59, 0, sizeof(v59));
    float32x4_t v78 = v8;
    v79[0] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(a2, &v71, &v80);
    for (uint64_t i = 0; i != -15; i -= 5)
    {
      uint64_t v46 = (void **)((char *)&v71.__r_.__value_.__l.__data_ + i * 8);
      uint64_t v47 = (std::__shared_weak_count *)v79[i];
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      if (*((char *)v46 + 103) < 0) {
        operator delete(v46[10]);
      }
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v47);
    uint64_t v43 = 1;
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      LODWORD(v71.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v71.__r_.__value_.__r.__words[0]) = a3;
      _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Skip loop %d", (uint8_t *)&v71, 8u);
    }
  }
  else
  {
    uint64_t v57 = 0;
    __n128 v56 = 0uLL;
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v56, (uint64_t)__p, (uint64_t)v68, 0xAAAAAAAAAAAAAAABLL * ((v68 - (unsigned char *)__p) >> 3));
    memset(v55, 0, sizeof(v55));
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v55, (uint64_t)p_p, (uint64_t)v65, 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (unsigned char *)p_p) >> 3));
    InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v56, v55, 1, (uint64_t *)&v58);
    memset(v54, 0, sizeof(v54));
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v54, (uint64_t)v61, (uint64_t)v62, 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v61) >> 3));
    InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v58, v54, 1, (uint64_t *)&v71);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    std::string::basic_string[abi:ne180100]<0>(&buf, "input_data");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v71, &v59);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)v59.__r_.__value_.__l.__data_, 0);
    std::string::basic_string[abi:ne180100]<0>(&buf, "input_data_lens");
    uint64_t v25 = (float *)operator new(4uLL);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    float *v25 = v23;
    v60.__r_.__value_.__l.__size_ = (std::string::size_type)(v25 + 1);
    v60.__r_.__value_.__r.__words[2] = (std::string::size_type)(v25 + 1);
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v60, &v52);
    if (v60.__r_.__value_.__r.__words[0])
    {
      v60.__r_.__value_.__l.__size_ = v60.__r_.__value_.__r.__words[0];
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "k_tensor");
    uint64_t v26 = (float *)operator new(4uLL);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    *uint64_t v26 = (float)v24;
    v60.__r_.__value_.__l.__size_ = (std::string::size_type)(v26 + 1);
    v60.__r_.__value_.__r.__words[2] = (std::string::size_type)(v26 + 1);
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v60, &v50);
    if (v60.__r_.__value_.__r.__words[0])
    {
      v60.__r_.__value_.__l.__size_ = v60.__r_.__value_.__r.__words[0];
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v59.__r_.__value_.__l.__data_, &buf);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    std::string v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&v60);
    long long v28 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    if (v59.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v59.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = (std::__shared_weak_count *)*((void *)v27 + 6);
    *(_OWORD *)(v27 + 40) = v28;
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::Vocab::OOvWord(v52, &buf);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    std::string v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&v60);
    uint64_t v32 = v52;
    std::string v31 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v33 = (std::__shared_weak_count *)*((void *)v30 + 6);
    *((void *)v30 + 5) = v32;
    *((void *)v30 + 6) = v31;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::Vocab::OOvWord(v50, &buf);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    uint64_t v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&v60);
    double v36 = v50;
    __int16 v35 = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = (std::__shared_weak_count *)*((void *)v34 + 6);
    *((void *)v34 + 5) = v36;
    *((void *)v34 + 6) = v35;
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::Vocab::OOvWord(v16, &buf);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    std::string v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&v60);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v39 = (std::__shared_weak_count *)*((void *)v38 + 6);
    *((void *)v38 + 5) = v16;
    *((void *)v38 + 6) = v15;
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::Vocab::OOvWord(v13, &buf);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    float32x4_t v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&v60);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = (std::__shared_weak_count *)*((void *)v40 + 6);
    *((void *)v40 + 5) = v13;
    *((void *)v40 + 6) = v12;
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::vector<int> v42 = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v40);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
      _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_INFO, "Prepare S1NARDecoder inputs finished for loop %d", (uint8_t *)&buf, 8u);
    }
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    if (v59.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59.__r_.__value_.__l.__size_);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    uint64_t v43 = 0;
  }
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v43;
}

void sub_20CEC1064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  *(void *)(v61 - 240) = &a37;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 240));
  *(void *)(v61 - 240) = &a40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 240));
  *(void *)(v61 - 240) = &a46;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 240));
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t InferenceEngine::S1NARDecoderIOProcessor::process_outputs(uint64_t a1, void *a2, int a3)
{
  v63.__r_.__value_.__l.__size_ = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&buf, "semantic");
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v5 + 6);
  uint64_t v47 = (kaldi::quasar::Vocab *)*((void *)v5 + 5);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "semantic_inf_mask");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = (InferenceEngine::DataTensor *)*((void *)v7 + 5);
  std::chrono::steady_clock::time_point v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v46 = v8;
  std::string::basic_string[abi:ne180100]<0>(&buf, "enc_output");
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  long long v11 = (kaldi::quasar::Vocab *)*((void *)v10 + 5);
  uint8x8_t v12 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "pred_code");
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v13) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  long long v15 = (InferenceEngine::DataTensor *)*((void *)v13 + 5);
  long long v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "index_b");
  unint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  std::string::size_type v44 = v11;
  if (!v16) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v17 = (InferenceEngine::DataTensor *)*((void *)v16 + 5);
  float v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "index_t");
  float v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v19) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v21 = (InferenceEngine::DataTensor *)*((void *)v19 + 5);
  double v20 = (std::__shared_weak_count *)*((void *)v19 + 6);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float32x4_t v45 = v20;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::get_1d_array<int>(v15, &v55);
  InferenceEngine::DataTensor::get_1d_array<int>(v17, &v54);
  InferenceEngine::DataTensor::get_1d_array<int>(v21, &v53);
  InferenceEngine::DataTensor::get_2d_array<float>(v9, v52);
  InferenceEngine::DataTensor::get_2d_array<float>(v47, v51);
  unint64_t v23 = v54.__end_ - v54.__begin_;
  if (v23 != v53.__end_ - v53.__begin_)
  {
    float32x4_t v40 = "top_k_b_index_vector.size() == top_k_t_index_vector.size()";
    int v41 = 103;
    goto LABEL_93;
  }
  if (v23 != v55.__end_ - v55.__begin_)
  {
    float32x4_t v40 = "top_k_b_index_vector.size() == top_k_pred_code_vector.size()";
    int v41 = 104;
LABEL_93:
    __assert_rtn("process_outputs", "S1NARDecoderIOProcessor.cpp", v41, v40);
  }
  int v24 = v9;
  int v42 = a3;
  uint64_t v25 = v6;
  uint64_t v43 = v12;
  if (v55.__end_ != v55.__begin_)
  {
    uint64_t v26 = 0;
    if (v23 <= 1) {
      int64_t v27 = 1;
    }
    else {
      int64_t v27 = v54.__end_ - v54.__begin_;
    }
    long long v28 = v52[0];
    do
    {
      int v29 = v54.__begin_[v26];
      int v30 = v53.__begin_[v26];
      if (*(float *)(v28[3 * v29] + 4 * v30) != 0.0)
      {
        LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v22);
        BOOL v22 = os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR);
        if (v22)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v29;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v30;
          _os_log_error_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_ERROR, "Duplicate value in index_t found in the outputs! inf_mask_vector[%d][%d] is already predicted!", (uint8_t *)&buf, 0xEu);
        }
      }
      long long v28 = v52[0];
      *(_DWORD *)(v52[0][3 * v29] + 4 * v30) = 1065353216;
      *(float *)(v51[0][3 * v29] + 4 * v30) = (float)v55.__begin_[v26++];
    }
    while (v27 != v26);
  }
  kaldi::quasar::Vocab::OOvWord(v47, &buf);
  InferenceEngine::DataTensor::build_from_2d_array<float>(v51, &v50);
  long long v32 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = 0uLL;
  if (v25)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    if (v50.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v50.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(v24, &buf);
  InferenceEngine::DataTensor::build_from_2d_array<float>(v52, &v50);
  long long v33 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = 0uLL;
  if (v46)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    if (v50.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v50.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v32, &v50);
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
  std::string::size_type v34 = v50.__r_.__value_.__r.__words[2];
  memset(&v50, 0, sizeof(v50));
  buf.__r_.__value_.__r.__words[2] = v34;
  long long v57 = v32;
  if (*((void *)&v32 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v33, &v49);
  std::string v58 = v49;
  memset(&v49, 0, sizeof(v49));
  long long v59 = v33;
  if (*((void *)&v33 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::Vocab::OOvWord(v44, &__p);
  std::string v60 = __p;
  memset(&__p, 0, sizeof(__p));
  uint64_t v61 = v44;
  v62[0] = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(a2, &buf, &v63);
  for (uint64_t i = 0; i != -15; i -= 5)
  {
    double v36 = (void **)((char *)&buf.__r_.__value_.__l.__data_ + i * 8);
    uint64_t v37 = (std::__shared_weak_count *)v62[i];
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    if (*((char *)v36 + 103) < 0) {
      operator delete(v36[10]);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  std::string v38 = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v42;
    _os_log_impl(&dword_20CD80000, v38, OS_LOG_TYPE_INFO, "Process S1NARDecoder outputs finished for loop %d", (uint8_t *)&buf, 8u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v53.__begin_)
  {
    v53.__end_ = v53.__begin_;
    operator delete(v53.__begin_);
  }
  if (v54.__begin_)
  {
    v54.__end_ = v54.__begin_;
    operator delete(v54.__begin_);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
  }
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  return 0;
}

void sub_20CEC1B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  *(void *)(v55 - 224) = &a37;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 224));
  *(void *)(v55 - 224) = &a40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 224));
  if (__p)
  {
    a44 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(void *a1, std::string *a2, std::string *a3)
{
  char v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    std::chrono::steady_clock::time_point v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,std::shared_ptr<InferenceEngine::DataTensor> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<InferenceEngine::DataTensor>,(void *)0>((uint64_t)v12, v4);
        unint64_t v10 = (void *)*v8;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique(a1, (uint64_t)v8);
        char v4 = (std::string *)((char *)v4 + 40);
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        std::chrono::steady_clock::time_point v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const&>((uint64_t)a1, (unsigned __int8 *)v4, (long long *)v4);
    char v4 = (std::string *)((char *)v4 + 40);
  }
}

void sub_20CEC1EC0(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_20CEC1EDC(_Unwind_Exception *a1)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  char v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

uint64_t std::pair<std::string &,std::shared_ptr<InferenceEngine::DataTensor> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<InferenceEngine::DataTensor>,(void *)0>(uint64_t a1, const std::string *a2)
{
  std::string::operator=(*(std::string **)a1, a2);
  char v4 = *(std::string::pointer **)(a1 + 8);
  std::string::pointer data = a2[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a2[1].__r_.__value_.__l.__size_;
  if (size) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *char v4 = data;
  v4[1] = (std::string::pointer)size;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    unint64_t v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == a2)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3)) {
            return i;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4) {
              v12 %= v4;
            }
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *unint64_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    unint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *BOOL v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20CEC2438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  double result = std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20CEC24B0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t InferenceEngine::GreedyDecoderIOProcessor::GreedyDecoderIOProcessor(uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, a2);
  InferenceEngine::BaseIOProcessor::BaseIOProcessor(a1, (uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  *(void *)a1 = off_26C206A18;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  char v4 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v7[0];
  v7[0] = v4;
  std::string::size_type v5 = *(uint64_t **)(a1 + 32);
  *(void *)(a1 + 32) = v8;
  unint64_t v8 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
  return a1;
}

void sub_20CEC2624(_Unwind_Exception *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v2);
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::GreedyDecoderIOProcessor::~GreedyDecoderIOProcessor(uint64_t **this)
{
  *this = (uint64_t *)off_26C206A18;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(this + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 4, *((unsigned __int8 *)this + 24));
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(this);
}

uint64_t InferenceEngine::GreedyDecoderIOProcessor::process_inputs(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "input_ids");
    std::string::size_type v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "bos_token_id");
    LODWORD(v18) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v5, (int *)&v18);
    LODWORD(a1) = v18;
    unint64_t v6 = (float *)operator new(4uLL);
    unint64_t v20 = v6;
    *unint64_t v6 = (float)(int)a1;
    size_t v21 = v6 + 1;
    BOOL v22 = v6 + 1;
    float v13 = 0;
    float v14 = 0;
    p_p = 0;
    BOOL v18 = &p_p;
    char v19 = 0;
    p_p = (std::string *)operator new(0x18uLL);
    float v13 = (uint64_t *)p_p;
    float v14 = (uint64_t *)&p_p[1];
    float v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)&v14, (uint64_t)&v20, (uint64_t)&v23, p_p);
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&p_p, &v16);
    unint64_t v8 = v16;
    uint64_t v7 = v17;
    float v16 = 0;
    float v17 = 0;
    BOOL v18 = &p_p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
    if (v20)
    {
      size_t v21 = v20;
      operator delete(v20);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::Vocab::OOvWord(v8, &__p);
    p_p = &__p;
    unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
    *((void *)v9 + 5) = v8;
    *((void *)v9 + 6) = v7;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  return 0;
}

void sub_20CEC2868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

BOOL InferenceEngine::GreedyDecoderIOProcessor::process_outputs(uint64_t a1, void *a2)
{
  v41.__r_.__value_.__l.__size_ = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "input_ids");
  char v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v6 = (InferenceEngine::DataTensor *)*((void *)v4 + 5);
  std::string::size_type v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "encoder_hidden_states");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v9 = (kaldi::quasar::Vocab *)*((void *)v7 + 5);
  unint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_id");
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v12 = (InferenceEngine::DataTensor *)*((void *)v10 + 5);
  uint8x8_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::get_2d_array<int>(v12, &v30);
  int v13 = **v30;
  memset(&__p, 0, sizeof(__p));
  float v14 = (float *)operator new(4uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  *float v14 = (float)v13;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v14 + 1);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v14 + 1);
  long long v33 = 0;
  std::string::size_type v34 = 0;
  long long v32 = 0;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  v29.__r_.__value_.__s.__data_[8] = 0;
  long long v32 = (float **)operator new(0x18uLL);
  long long v33 = v32;
  std::string::size_type v34 = v32 + 3;
  long long v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)&v34, (uint64_t)&__p, (uint64_t)v37, v32);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  InferenceEngine::DataTensor::get_2d_array<float>(v6, &v30);
  kaldi::quasar::Vocab::OOvWord(v6, &__p);
  uint64_t v28 = 0;
  __n128 v27 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v27, (uint64_t)v30, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v30) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v26, (uint64_t)v32, (uint64_t)v33, 0xAAAAAAAAAAAAAAABLL * ((float **)v33 - v32));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v27, v26, 1, (uint64_t *)&v29);
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v29, &v25);
  long long v15 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = 0uLL;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (v25.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25.__r_.__value_.__l.__size_);
    }
  }
  __int16 v35 = &v29;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  __int16 v35 = (std::string *)v26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  __int16 v35 = (std::string *)&v27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v15, &v29);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
  std::string::size_type v16 = v29.__r_.__value_.__r.__words[2];
  memset(&v29, 0, sizeof(v29));
  __p.__r_.__value_.__r.__words[2] = v16;
  v37[0] = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::Vocab::OOvWord(v9, &v25);
  v37[1] = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  std::string::size_type v17 = v25.__r_.__value_.__r.__words[2];
  memset(&v25, 0, sizeof(v25));
  std::string::size_type v38 = v17;
  char v39 = v9;
  v40[0] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(a2, &__p, &v41);
  for (uint64_t i = 0; i != -10; i -= 5)
  {
    char v19 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + i * 8);
    unint64_t v20 = (std::__shared_weak_count *)v40[i];
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (*((char *)v19 + 63) < 0) {
      operator delete(v19[5]);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  float v21 = **v32;
  BOOL v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "eos_token_id");
  LODWORD(v29.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v22, (int *)&v29);
  int data = (int)v29.__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  return v21 == (float)data;
}

void sub_20CEC2D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  for (uint64_t i = 40; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(v42 + i);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  a35 = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  _Unwind_Resume(a1);
}

void sub_20CEC2ED0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CEC2EB0);
}

void sub_20CEC2EE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CEC2EBCLL);
}

void sub_20CEC2F00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CEC2EC8);
}

void InferenceEngine::DataTensor::get_2d_array<int>(InferenceEngine::DataTensor *this@<X0>, void *a2@<X8>)
{
  char v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    int v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5) {
        goto LABEL_20;
      }
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702) {
        goto LABEL_20;
      }
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C258], MEMORY[0x263F8C248])) {
      InferenceEngine::DataTensor::get_2d_array<float>();
    }
    goto LABEL_22;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910) {
      goto LABEL_21;
    }
    if (**(_DWORD **)v4 == 909209702) {
      goto LABEL_22;
    }
    uint64_t v6 = *((void *)this + 5);
  }
  if (v6 != 5) {
    goto LABEL_20;
  }
  char v4 = *(char **)v4;
LABEL_11:
  int v7 = *(_DWORD *)v4;
  int v8 = v4[4];
  if (v7 != 863268457 || v8 != 50) {
LABEL_20:
  }
    InferenceEngine::DataTensor::get_2d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C258], MEMORY[0x263F8C258])) {
    InferenceEngine::DataTensor::get_2d_array<float>();
  }
LABEL_22:
  uint64_t v10 = *((void *)this + 11);
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)__p);
  InferenceEngine::DataUtils::convert_data_to_2d_array<int>(v10, (uint64_t)__p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20CEC306C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint8x8_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *char v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      char v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_20CEC3128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void InferenceEngine::DataUtils::convert_data_to_2d_array<int>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v4 = *(unint64_t **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 16) {
    InferenceEngine::DataUtils::convert_data_to_2d_array<float>();
  }
  unint64_t v8 = *v4;
  std::vector<int>::size_type v7 = v4[1];
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v13, v7, &__x);
  std::vector<std::vector<int>>::vector(a3, v8, (uint64_t)&v13);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
  char v9 = *(unint64_t **)a2;
  if (**(void **)a2)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      memcpy(*(void **)(*a3 + v10), (const void *)(a1 + 4 * v9[1] * v11++), 4 * v9[1]);
      char v9 = *(unint64_t **)a2;
      v10 += 24;
    }
    while (v11 < **(void **)a2);
  }
}

void sub_20CEC320C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::DataTensor::DataTensor(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  *(void *)a1 = off_26C2067F8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v8;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  if (a1 + 56 == a4) {
    goto LABEL_17;
  }
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 56), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  char v9 = *(void **)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64) - (void)v9;
  if (!v10) {
    goto LABEL_17;
  }
  unint64_t v11 = v10 >> 3;
  uint64_t v12 = v11 <= 1 ? 1 : v11;
  if (*v9 != -1)
  {
    uint64_t v13 = 1;
    do
    {
      unint64_t v14 = v13;
      if (v12 == v13) {
        break;
      }
      uint64_t v15 = v9[v13++];
    }
    while (v15 != -1);
    if (v14 >= v11)
    {
LABEL_17:
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
      InferenceEngine::DataTensor::allocate_memory(a1, (uint64_t)__p);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_20CEC338C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(exception_object);
}

void *InferenceEngine::DataTensor::allocate_memory(uint64_t a1, uint64_t a2)
{
  InferenceEngine::DataTensor::init_data_size(a1);
  if (*(unsigned char *)(a1 + 96))
  {
    if (*(char *)(a2 + 23) >= 0) {
      char v4 = (const char *)a2;
    }
    else {
      char v4 = *(const char **)a2;
    }
    int v5 = open(v4, 0);
    if (v5 < 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      int v10 = *(char *)(a2 + 23);
      unint64_t v11 = *(const char **)a2;
      uint64_t v12 = __error();
      if (v10 >= 0) {
        uint64_t v13 = (const char *)a2;
      }
      else {
        uint64_t v13 = v11;
      }
      InferenceEngine::StringFormatter::StringFormatter(&v18, "MemoryMap unable to open '%s': error %d\n", v13, *v12);
      MEMORY[0x210558D40](exception, &v18);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    int v6 = v5;
    long long v7 = mmap(0, *(void *)(a1 + 80), 1, 1, v5, 0);
    *(void *)(a1 + 88) = v7;
    if (v7 == (void *)-1)
    {
      unint64_t v14 = __cxa_allocate_exception(0x10uLL);
      int v15 = *__error();
      std::string::size_type v16 = __error();
      std::string::size_type v17 = strerror(*v16);
      InferenceEngine::StringFormatter::StringFormatter(&v18, "MemoryMap unable to mmap, error %d/%s", v15, v17);
      MEMORY[0x210558D40](v14, &v18);
      __cxa_throw(v14, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    return (void *)close(v6);
  }
  else
  {
    free(*(void **)(a1 + 88));
    double result = malloc_type_valloc(*(void *)(a1 + 80), 0xD897BAE6uLL);
    *(void *)(a1 + 88) = result;
  }
  return result;
}

void sub_20CEC3594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::DataTensor::DataTensor(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = off_26C2067F8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 1;
  if (a1 + 56 == a4) {
    goto LABEL_17;
  }
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 56), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  unint64_t v11 = *(void **)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64) - (void)v11;
  if (!v12) {
    goto LABEL_17;
  }
  unint64_t v13 = v12 >> 3;
  uint64_t v14 = v13 <= 1 ? 1 : v13;
  if (*v11 != -1)
  {
    uint64_t v15 = 1;
    do
    {
      unint64_t v16 = v15;
      if (v14 == v15) {
        break;
      }
      uint64_t v17 = v11[v15++];
    }
    while (v17 != -1);
    if (v16 >= v13) {
LABEL_17:
    }
      InferenceEngine::DataTensor::allocate_memory(a1, a5);
  }
  return a1;
}

void sub_20CEC3714(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::DataTensor::init_data_size(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 56);
  uint64_t v2 = *(void *)(this + 64) - (void)v1;
  if (v2)
  {
    unint64_t v3 = v2 >> 3;
    if (v3 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v3;
    }
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = *v1++;
      v5 *= v6;
      --v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v5 = 1;
  }
  long long v7 = (const char *)(this + 32);
  if (*(char *)(this + 55) < 0)
  {
    uint64_t v9 = *(void *)(this + 40);
    if (v9 == 4)
    {
      if (**(_DWORD **)v7 == 842231910) {
        goto LABEL_24;
      }
      if (**(_DWORD **)v7 == 909209702)
      {
LABEL_27:
        uint64_t v13 = 2;
        goto LABEL_28;
      }
      uint64_t v9 = *(void *)(this + 40);
    }
    if (v9 != 5) {
      goto LABEL_29;
    }
    long long v8 = *(const char **)v7;
    goto LABEL_19;
  }
  if (*(unsigned char *)(this + 55) != 4)
  {
    long long v8 = (const char *)(this + 32);
    if (*(unsigned char *)(this + 55) != 5) {
      goto LABEL_29;
    }
LABEL_19:
    int v10 = *(_DWORD *)v8;
    int v11 = *((unsigned __int8 *)v8 + 4);
    if (v10 != 863268457 || v11 != 50)
    {
LABEL_29:
      uint64_t v14 = this;
      exception = __cxa_allocate_exception(0x10uLL);
      if (*(char *)(v14 + 55) < 0) {
        long long v7 = *(const char **)v7;
      }
      InferenceEngine::StringFormatter::StringFormatter(&v16, "DataTensor type not supported: '%s'", v7);
      MEMORY[0x210558D40](exception, &v16);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    goto LABEL_24;
  }
  if (*(_DWORD *)v7 != 842231910)
  {
    if (*(_DWORD *)v7 != 909209702) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
LABEL_24:
  uint64_t v13 = 4;
LABEL_28:
  *(void *)(this + 80) = v13 * v5;
  return this;
}

void sub_20CEC38F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void InferenceEngine::DataTensor::~DataTensor(InferenceEngine::DataTensor *this)
{
  *(void *)this = off_26C2067F8;
  int v2 = *((unsigned __int8 *)this + 96);
  unint64_t v3 = (void *)*((void *)this + 11);
  if (v2) {
    munmap(v3, *((void *)this + 10));
  }
  else {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  InferenceEngine::DataTensor::~DataTensor(this);
  JUMPOUT(0x2105595E0);
}

uint64_t InferenceEngine::DataTensor::get_data_size(InferenceEngine::DataTensor *this)
{
  return *((void *)this + 10);
}

uint64_t InferenceEngine::DataTensor::get_rank(InferenceEngine::DataTensor *this)
{
  return (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3;
}

void InferenceEngine::DataTensor::set_rank(InferenceEngine::DataTensor *this, unint64_t a2)
{
  if (!a2) {
    InferenceEngine::DataTensor::set_rank();
  }
  int v2 = a2;
  uint64_t v12 = 1;
  std::vector<unsigned long>::vector(&__p, a2, &v12);
  uint64_t v5 = *((void *)this + 7);
  uint64_t v4 = *((void *)this + 8);
  uint64_t v6 = (char *)this + 56;
  unint64_t v7 = (unint64_t)(v4 - v5) >> 3;
  if ((int)v7 - 1 >= 0)
  {
    long long v8 = __p;
    uint64_t v9 = (uint64_t *)(v5 + 8 * (v7 - 1));
    int v10 = v2 - 1;
    do
    {
      if (v10 < 0) {
        __assert_rtn("set_rank", "DataTensor.cpp", 100, "new_shape_dim >= 0");
      }
      uint64_t v11 = *v9--;
      v8[v10] = v11;
      LODWORD(v7) = v7 - 1;
      --v10;
    }
    while ((int)v7 > 0);
  }
  if (v6 != (char *)&__p) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v6, (char *)__p, (uint64_t)v14, (v14 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_20CEC3AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::get_shape(InferenceEngine::DataTensor *this@<X0>, int a2@<W1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *((void *)this + 7);
  uint64_t v4 = *((void *)this + 8);
  if (v4 != v5)
  {
    long long v8 = 0;
    unint64_t v9 = 0;
    int v10 = a3 + 2;
    do
    {
      if (!a2 || *(void *)(v5 + 8 * v9) != 1)
      {
        if ((unint64_t)v8 >= *v10)
        {
          uint64_t v12 = *a3;
          uint64_t v13 = (v8 - *a3) >> 3;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = *v10 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v16);
            uint64_t v12 = *a3;
            long long v8 = a3[1];
          }
          else
          {
            uint64_t v17 = 0;
          }
          char v18 = &v17[8 * v13];
          *(void *)char v18 = *(void *)(v5 + 8 * v9);
          uint64_t v11 = v18 + 8;
          while (v8 != v12)
          {
            uint64_t v19 = *((void *)v8 - 1);
            v8 -= 8;
            *((void *)v18 - 1) = v19;
            v18 -= 8;
          }
          *a3 = v18;
          a3[1] = v11;
          a3[2] = &v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(void *)long long v8 = *(void *)(v5 + 8 * v9);
          uint64_t v11 = v8 + 8;
        }
        a3[1] = v11;
        long long v8 = v11;
        uint64_t v5 = *((void *)this + 7);
        uint64_t v4 = *((void *)this + 8);
      }
      ++v9;
    }
    while (v9 < (v4 - v5) >> 3);
  }
}

void sub_20CEC3C54(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__int16 InferenceEngine::DataTensor::cast_data_to_target_tensor@<H0>(uint64_t a1@<X0>, uint64_t *a2@<X1>)
{
  InferenceEngine::DataTensor::valid_shape((uint64_t *)(a1 + 56), (void *)(*a2 + 56), 0, 0);
  uint64_t v5 = (const void **)(a1 + 32);
  uint64_t v6 = *a2;
  unint64_t v7 = (unsigned __int8 **)(*a2 + 32);
  int v8 = *(unsigned __int8 *)(a1 + 55);
  uint64_t v9 = *(void *)(a1 + 40);
  if ((v8 & 0x80u) == 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 40);
  }
  int v11 = *(unsigned __int8 *)(v6 + 55);
  uint64_t v12 = *(void *)(v6 + 40);
  if ((v11 & 0x80u) == 0) {
    uint64_t v13 = *(unsigned __int8 *)(v6 + 55);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 40);
  }
  if (v10 != v13) {
    goto LABEL_17;
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v14 = (unsigned __int8 **)(*a2 + 32);
  }
  else {
    unint64_t v14 = (unsigned __int8 **)*v7;
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v5, v14, *(void *)(a1 + 40))) {
      goto LABEL_22;
    }
LABEL_27:
    char v18 = *(void **)(v6 + 88);
    size_t v20 = *(void *)(a1 + 80);
    uint64_t v19 = *(const void **)(a1 + 88);
    memcpy(v18, v19, v20);
    return LOWORD(_S0);
  }
  if (!*(unsigned char *)(a1 + 55)) {
    goto LABEL_27;
  }
  uint64_t v15 = (unsigned __int8 *)(a1 + 32);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 55);
  while (*v15 == *(unsigned __int8 *)v14)
  {
    ++v15;
    unint64_t v14 = (unsigned __int8 **)((char *)v14 + 1);
    if (!--v16) {
      goto LABEL_27;
    }
  }
LABEL_17:
  if ((v8 & 0x80) == 0)
  {
    if (v8 != 4)
    {
      uint64_t v17 = (unsigned __int8 *)(a1 + 32);
      if (v8 != 5) {
        goto LABEL_76;
      }
      goto LABEL_35;
    }
    if (*(_DWORD *)v5 != 909209702) {
      goto LABEL_31;
    }
    goto LABEL_55;
  }
LABEL_22:
  if (v9 == 4)
  {
    if (*(_DWORD *)*v5 != 909209702)
    {
      if ((v8 & 0x80) != 0)
      {
        if (*(_DWORD *)*v5 != 842231910) {
          goto LABEL_76;
        }
        goto LABEL_66;
      }
      if (v8 != 4) {
        goto LABEL_76;
      }
LABEL_31:
      if (*(_DWORD *)v5 != 842231910) {
        goto LABEL_76;
      }
LABEL_66:
      if ((v11 & 0x80) != 0)
      {
        if (v12 != 4) {
          goto LABEL_91;
        }
        unint64_t v7 = (unsigned __int8 **)*v7;
      }
      else if (v11 != 4)
      {
        goto LABEL_91;
      }
      if (*(_DWORD *)v7 == 909209702)
      {
        unint64_t v43 = *(void *)(a1 + 80);
        if (v43 >= 4)
        {
          unint64_t v44 = v43 >> 2;
          float32x4_t v45 = *(float **)(a1 + 88);
          uint64_t v46 = *(_WORD **)(v6 + 88);
          do
          {
            float v47 = *v45++;
            _S0 = v47;
            __asm { FCVT            H0, S0 }
            *v46++ = LOWORD(_S0);
            --v44;
          }
          while (v44);
        }
        return LOWORD(_S0);
      }
LABEL_91:
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v61 = a1;
      float32x4_t v62 = exception;
      if (*(char *)(v61 + 55) < 0) {
        uint64_t v5 = (const void **)*v5;
      }
      std::string v63 = (const char *)(*a2 + 32);
      if (*(char *)(*a2 + 55) < 0) {
        std::string v63 = *(const char **)v63;
      }
      InferenceEngine::StringFormatter::StringFormatter(&v65, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v63);
      MEMORY[0x210558D40](v62, &v65);
      __cxa_throw(v62, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
LABEL_55:
    if ((v11 & 0x80) != 0)
    {
      if (v12 != 4) {
        goto LABEL_86;
      }
      unint64_t v7 = (unsigned __int8 **)*v7;
    }
    else if (v11 != 4)
    {
      goto LABEL_86;
    }
    if (*(_DWORD *)v7 == 842231910)
    {
      unint64_t v37 = *(void *)(a1 + 80);
      if (v37 >= 2)
      {
        unint64_t v38 = v37 >> 1;
        char v39 = *(__int16 **)(a1 + 88);
        float32x4_t v40 = *(float **)(v6 + 88);
        do
        {
          __int16 v41 = *v39++;
          _H0 = v41;
          __asm { FCVT            S0, H0 }
          *v40++ = _S0;
          --v38;
        }
        while (v38);
      }
      return LOWORD(_S0);
    }
LABEL_86:
    __n128 v56 = __cxa_allocate_exception(0x10uLL);
    uint64_t v57 = a1;
    std::string v58 = v56;
    if (*(char *)(v57 + 55) < 0) {
      uint64_t v5 = (const void **)*v5;
    }
    long long v59 = (const char *)(*a2 + 32);
    if (*(char *)(*a2 + 55) < 0) {
      long long v59 = *(const char **)v59;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v65, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v59);
    MEMORY[0x210558D40](v58, &v65);
    __cxa_throw(v58, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v9 != 5) {
    goto LABEL_76;
  }
  uint64_t v17 = (unsigned __int8 *)*v5;
LABEL_35:
  int v21 = *(_DWORD *)v17;
  int v22 = v17[4];
  if (v21 != 863268457 || v22 != 50)
  {
LABEL_76:
    float32x4_t v48 = __cxa_allocate_exception(0x10uLL);
    uint64_t v49 = a1;
    std::string v50 = v48;
    if (*(char *)(v49 + 55) < 0) {
      uint64_t v5 = (const void **)*v5;
    }
    float32x4_t v51 = (const char *)(*a2 + 32);
    if (*(char *)(*a2 + 55) < 0) {
      float32x4_t v51 = *(const char **)v51;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v65, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v51);
    MEMORY[0x210558D40](v50, &v65);
    __cxa_throw(v50, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if ((v11 & 0x80) != 0)
  {
    if (v12 != 4) {
      goto LABEL_81;
    }
    unint64_t v7 = (unsigned __int8 **)*v7;
  }
  else if (v11 != 4)
  {
LABEL_81:
    std::string::size_type v52 = __cxa_allocate_exception(0x10uLL);
    uint64_t v53 = a1;
    std::vector<int> v54 = v52;
    if (*(char *)(v53 + 55) < 0) {
      uint64_t v5 = (const void **)*v5;
    }
    uint64_t v55 = (const char *)(*a2 + 32);
    if (*(char *)(*a2 + 55) < 0) {
      uint64_t v55 = *(const char **)v55;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v65, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v55);
    MEMORY[0x210558D40](v54, &v65);
    __cxa_throw(v54, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(_DWORD *)v7 == 842231910)
  {
    unint64_t v32 = *(void *)(a1 + 80);
    if (v32 >= 4)
    {
      unint64_t v33 = v32 >> 2;
      std::string::size_type v34 = *(int **)(a1 + 88);
      __int16 v35 = *(float **)(v6 + 88);
      do
      {
        int v36 = *v34++;
        _S0 = (float)v36;
        *v35++ = (float)v36;
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    if (*(_DWORD *)v7 != 909209702) {
      goto LABEL_81;
    }
    unint64_t v24 = *(void *)(a1 + 80);
    if (v24 >= 4)
    {
      unint64_t v25 = v24 >> 2;
      uint64_t v26 = *(int **)(a1 + 88);
      __n128 v27 = *(_WORD **)(v6 + 88);
      do
      {
        int v28 = *v26++;
        _S0 = (float)v28;
        __asm { FCVT            H0, S0 }
        *v27++ = LOWORD(_S0);
        --v25;
      }
      while (v25);
    }
  }
  return LOWORD(_S0);
}

void sub_20CEC41A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *InferenceEngine::DataTensor::valid_shape(uint64_t *result, void *a2, int a3, char a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  uint64_t v6 = v5 - *result;
  if (v6 >> 3 != (uint64_t)(a2[1] - *a2) >> 3) {
    InferenceEngine::DataTensor::valid_shape();
  }
  if (v5 != v4)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    int v12 = ((unint64_t)v6 >> 3) - 1;
    do
    {
      uint64_t v13 = *(InferenceEngine::DataUtils **)(v4 + 8 * v11);
      if (a3)
      {
        double result = (uint64_t *)InferenceEngine::DataUtils::compare_shape(v13, *(void *)(*a2 + 8 * v12), a4);
        if ((result & 1) == 0)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          uint64_t v15 = a2;
          uint64_t v16 = exception;
          InferenceEngine::StringFormatter::StringFormatter(&v20, "Shape mismatch! src_shape[%d]=%d, dst_shape[%d]=%d", v11, *(void *)(*v10 + 8 * v11), v12, *(void *)(*v15 + 8 * v12));
          MEMORY[0x210558D40](v16, &v20);
          __cxa_throw(v16, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
      }
      else
      {
        double result = (uint64_t *)InferenceEngine::DataUtils::compare_shape(v13, *(void *)(*a2 + 8 * v11), a4);
        if ((result & 1) == 0)
        {
          uint64_t v17 = __cxa_allocate_exception(0x10uLL);
          char v18 = a2;
          uint64_t v19 = v17;
          InferenceEngine::StringFormatter::StringFormatter(&v20, "Shape mismatch! src_shape[%d]=%d, dst_shape[%d]=%d", v11, *(void *)(*v10 + 8 * v11), v11, *(void *)(*v18 + 8 * v11));
          MEMORY[0x210558D40](v19, &v20);
          __cxa_throw(v19, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
      }
      ++v11;
      uint64_t v4 = *v10;
      --v12;
    }
    while (v11 < (v10[1] - *v10) >> 3);
  }
  return result;
}

void sub_20CEC4398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (v20) {
    __cxa_free_exception(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::DataTensor::get_size(InferenceEngine::DataTensor *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 7);
  uint64_t v2 = *((void *)this + 8) - (void)v1;
  if (!v2) {
    return 1;
  }
  unint64_t v3 = v2 >> 3;
  if (v3 <= 1) {
    unint64_t v3 = 1;
  }
  uint64_t result = 1;
  do
  {
    uint64_t v5 = *v1++;
    result *= v5;
    --v3;
  }
  while (v3);
  return result;
}

void InferenceEngine::DataTensor::resize(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (char *)(a1 + 56);
  if (v3 != (char *)a2) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v3, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  InferenceEngine::DataTensor::allocate_memory(a1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20CEC447C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL InferenceEngine::DataUtils::compare_shape(InferenceEngine::DataUtils *this, int a2, char a3)
{
  if (a3)
  {
    BOOL v4 = this == -1 || a2 == -1;
    return this == a2 || v4;
  }
  else
  {
    if ((this & 0x80000000) != 0) {
      InferenceEngine::DataUtils::compare_shape();
    }
    if (a2 < 0) {
      InferenceEngine::DataUtils::compare_shape();
    }
    return this == a2;
  }
}

uint64_t InferenceEngine::DataTensor::set_shape(InferenceEngine::DataTensor *this, uint64_t a2)
{
  unint64_t v3 = (char *)this + 56;
  if (v3 != (char *)a2) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v3, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return InferenceEngine::DataTensor::init_data_size((uint64_t)this);
}

void InferenceEngine::DataTensor::reshape(InferenceEngine::DataTensor *a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v4 = *((void *)a1 + 8) - (void)v3;
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = 1;
    do
    {
      uint64_t v8 = *v3++;
      v7 *= v8;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v7 = 1;
  }
  uint64_t v9 = *(uint64_t **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v12 = v10 - (void)v9;
  if ((uint64_t *)v10 == v9)
  {
    uint64_t v14 = 1;
  }
  else
  {
    if ((unint64_t)(v12 >> 3) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v12 >> 3;
    }
    uint64_t v14 = 1;
    uint64_t v15 = v9;
    do
    {
      uint64_t v16 = *v15++;
      v14 *= v16;
      --v13;
    }
    while (v13);
  }
  if (v7 != v14) {
    InferenceEngine::DataTensor::reshape();
  }
  std::string __p = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v9, v10, v12 >> 3);
  InferenceEngine::DataTensor::set_shape(a1, (uint64_t)&__p);
  if (__p)
  {
    char v18 = __p;
    operator delete(__p);
  }
}

void sub_20CEC4608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::unsqueeze(InferenceEngine::DataTensor *this, int a2)
{
  if ((a2 & 0x80000000) == 0 && *((void *)this + 8) == *((void *)this + 7)) {
    InferenceEngine::DataTensor::unsqueeze();
  }
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)&v8);
  uint64_t v7 = 1;
  std::vector<unsigned long>::insert((uint64_t)&v8, (char *)v8 + 8 * a2, &v7);
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  std::string __p = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v8, (uint64_t)v9, (v9 - (unsigned char *)v8) >> 3);
  InferenceEngine::DataTensor::set_shape(this, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v5 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
}

void sub_20CEC46D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::insert(uint64_t a1, char *__src, void *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    std::string __p = v19;
    int v22 = &v19[8 * v16];
    uint64_t v23 = v22;
    unint64_t v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long>::push_back(&__p, a3);
    uint64_t v4 = std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v10 = __src + 8;
    unint64_t v11 = v6 - 8;
    uint64_t v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)uint64_t v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(void *)uint64_t v4 = *a3;
  }
  return v4;
}

void sub_20CEC487C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::squeeze(InferenceEngine::DataTensor *this, int a2)
{
  if ((a2 >= 0) >= (unint64_t)((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3)) {
    InferenceEngine::DataTensor::squeeze();
  }
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)&v10);
  if (a2 >= (unint64_t)((v11 - (unsigned char *)v10) >> 3)) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  if (*((void *)v10 + a2) != 1) {
    __assert_rtn("squeeze", "DataTensor.cpp", 236, "get_shape().at(dimension) == 1");
  }
  unint64_t v11 = (char *)v10;
  operator delete(v10);
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)&v10);
  uint64_t v4 = v10;
  unint64_t v5 = (char *)v10 + 8 * a2;
  int64_t v6 = v11 - (v5 + 8);
  if (v11 != v5 + 8)
  {
    memmove(v5, v5 + 8, v11 - (v5 + 8));
    uint64_t v4 = v10;
  }
  unint64_t v11 = &v5[v6];
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v4, (uint64_t)&v5[v6], (&v5[v6] - (unsigned char *)v4) >> 3);
  InferenceEngine::DataTensor::set_shape(this, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    unint64_t v11 = (char *)v10;
    operator delete(v10);
  }
}

void sub_20CEC49EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

float InferenceEngine::DataTensor::accumulate_sum(InferenceEngine::DataTensor *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 7);
  uint64_t v2 = *((void *)this + 8) - (void)v1;
  if (v2)
  {
    unint64_t v3 = v2 >> 3;
    if (v3 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v3;
    }
    int v5 = 1;
    do
    {
      uint64_t v6 = *v1++;
      v5 *= v6;
      --v4;
    }
    while (v4);
  }
  else
  {
    int v5 = 1;
  }
  return cblas_sasum(v5, *((const float **)this + 11), 1);
}

uint64_t InferenceEngine::MilIO::MilIO(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v7 = (void *)InferenceEngine::DataTensor::DataTensor(a1, a2, a4, a5);
  *uint64_t v7 = off_26C206B58;
  unint64_t v8 = (std::string *)(v7 + 13);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    v8->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_20CEC4ADC(_Unwind_Exception *a1)
{
  InferenceEngine::DataTensor::~DataTensor(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilIO::get_io_name(InferenceEngine::MilIO *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((void *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 15);
  }
}

void sub_20CEC4CB4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x210559500](v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20CEC4D54(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    int v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      char v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      unint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] = v4 + 8;
}

void InferenceEngine::DataTensor::set_rank()
{
}

void InferenceEngine::DataTensor::valid_shape()
{
  __assert_rtn("valid_shape", "DataTensor.cpp", 194, "src_shape.size() == dst_shape.size()");
}

void InferenceEngine::DataUtils::compare_shape()
{
  __assert_rtn("compare_shape", "DataTensor.cpp", 298, "src_dim >= 0");
}

{
  __assert_rtn("compare_shape", "DataTensor.cpp", 299, "dst_dim >= 0");
}

void InferenceEngine::DataTensor::reshape()
{
  __assert_rtn("reshape", "DataTensor.cpp", 217, "get_size() == DataUtils::get_size(new_shape)");
}

void InferenceEngine::DataTensor::unsqueeze()
{
  __assert_rtn("unsqueeze", "DataTensor.cpp", 225, "0 <= dimension <= get_rank()");
}

void InferenceEngine::DataTensor::squeeze()
{
  __assert_rtn("squeeze", "DataTensor.cpp", 235, "0 <= dimension < get_rank()");
}

uint64_t InferenceEngine::P2ASoundStormIOProcessor::P2ASoundStormIOProcessor(uint64_t a1, char *a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v19, (uint64_t)a2);
  InferenceEngine::SoundStormIOProcessor::SoundStormIOProcessor(a1, v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  *(void *)a1 = off_26C206A38;
  std::string::basic_string[abi:ne180100]<0>(__p, "p2a");
  unsigned __int8 v14 = 0;
  BOOL v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, &v14);
  v17[0] = 4;
  unint64_t v18 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  int v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "p2a");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  unsigned __int8 v6 = *(unsigned char *)v5;
  *(unsigned char *)int v5 = v17[0];
  v17[0] = v6;
  uint64_t v7 = (uint64_t *)v5[1];
  v5[1] = v18;
  unint64_t v18 = (unint64_t)v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v18, v17[0]);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "prompt_attention");
  unsigned __int8 v14 = 0;
  v12[0] = 4;
  uint64_t v13 = (uint64_t *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, &v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  BOOL v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "prompt_attention");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  unsigned __int8 v9 = *(unsigned char *)v8;
  *(unsigned char *)BOOL v8 = v12[0];
  v12[0] = v9;
  uint64_t v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v13;
  uint64_t v13 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_20CEC51A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  InferenceEngine::SoundStormIOProcessor::~SoundStormIOProcessor(v18);
  _Unwind_Resume(a1);
}

void sub_20CEC51F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  JUMPOUT(0x20CEC51F0);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_vq_target(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, InferenceEngine::DataTensor **a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v22, "pred_enc_output");
  BOOL v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v22);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, &__p.__r_.__value_.__l.__data_);
  unint64_t v9 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  *a4 = 0;
  a4[1] = 0;
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "target");
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (!v10) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v12 = (InferenceEngine::DataTensor *)*((void *)v10 + 5);
    uint64_t v11 = (atomic_ullong *)*((void *)v10 + 6);
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
    *a4 = v12;
    a4[1] = (InferenceEngine::DataTensor *)v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v13 = (unsigned __int8 *)(a1 + 24);
    unsigned __int8 v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_vqs");
    LODWORD(v19) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v14, (int *)&v19);
    unint64_t v15 = (int)v19;
    char v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "vq_mask_id");
    LODWORD(v19) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v16, (int *)&v19);
    float v21 = (float)(int)v19;
    std::vector<float>::vector(v22, v15, &v21);
    std::vector<std::vector<float>>::vector(&__p, v9, (uint64_t)v22);
    if (v22[0])
    {
      v22[1] = v22[0];
      operator delete(v22[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v22, "target");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&__p, &v19);
    uint64_t v12 = v19;
    uint64_t v11 = v20;
    uint64_t v19 = 0;
    char v20 = 0;
    *a4 = v12;
    a4[1] = (InferenceEngine::DataTensor *)v11;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    InferenceEngine::DataTensor::unsqueeze(v12, 0);
    v22[0] = &__p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  }
  kaldi::quasar::Vocab::OOvWord(v12, &__p);
  v22[0] = &__p;
  uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)v22);
  if (v11) {
    atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = (std::__shared_weak_count *)*((void *)v17 + 6);
  *((void *)v17 + 5) = v12;
  *((void *)v17 + 6) = v11;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20CEC544C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::string __p = &a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_q_token_mask(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, kaldi::quasar::Vocab **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v28, "pred_enc_output");
  BOOL v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v28);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)&__p);
  unint64_t v9 = *((void *)__p + 1);
  int v30 = __p;
  operator delete(__p);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v10, &__p);
  uint64_t v12 = __p;
  uint64_t v11 = v30;
  if (v30 == __p) {
    goto LABEL_17;
  }
  unint64_t v13 = 0;
  unsigned __int8 v14 = 0;
  do
  {
    if (v12[v13] == a3)
    {
      LODWORD(v24) = 0;
      std::vector<float>::vector(v26, v9, &v24);
      std::vector<std::vector<float>>::vector(&v28, 1uLL, (uint64_t)v26);
      if (v26[0])
      {
        v26[1] = v26[0];
        operator delete(v26[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v26, "q_token_mask");
      InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v28, &v24);
      unint64_t v15 = v24;
      char v16 = v25;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      *a4 = v15;
      a4[1] = (kaldi::quasar::Vocab *)v16;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      v26[0] = &v28;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
      uint64_t v12 = __p;
      uint64_t v11 = v30;
      unsigned __int8 v14 = v16;
    }
    ++v13;
  }
  while (v13 < (v11 - (unsigned char *)v12) >> 2);
  uint64_t v17 = *a4;
  if (!*a4)
  {
LABEL_17:
    std::string::basic_string[abi:ne180100]<0>(&v28, "q_token_mask");
    unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v28);
    if (!v18) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v17 = (kaldi::quasar::Vocab *)*((void *)v18 + 5);
    uint64_t v19 = (atomic_ullong *)*((void *)v18 + 6);
    if (v19) {
      atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
    }
    char v20 = (std::__shared_weak_count *)a4[1];
    *a4 = v17;
    a4[1] = (kaldi::quasar::Vocab *)v19;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  kaldi::quasar::Vocab::OOvWord(v17, &v28);
  v26[0] = &v28;
  float v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v28, (uint64_t)&std::piecewise_construct, (long long **)v26);
  uint64_t v22 = a4[1];
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v22 + 1, 1uLL, memory_order_relaxed);
  }
  char v23 = (std::__shared_weak_count *)*((void *)v21 + 6);
  *((void *)v21 + 5) = v17;
  *((void *)v21 + 6) = v22;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    int v30 = __p;
    operator delete(__p);
  }
}

void sub_20CEC579C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  char v27 = *(std::__shared_weak_count **)(v25 + 8);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_pred_data(void *a1@<X1>, InferenceEngine::DataTensor **a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v30, "pred_enc_output");
  BOOL v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unsigned __int8 v6 = (InferenceEngine::DataTensor *)*((void *)v4 + 5);
  int v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "target");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v9 = (InferenceEngine::DataTensor *)*((void *)v7 + 5);
  BOOL v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "q_token_mask");
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v12 = (InferenceEngine::DataTensor *)*((void *)v10 + 5);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  InferenceEngine::DataTensor::get_shape(v6, 0, &v30);
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v27);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v30 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v30, (uint64_t)*v27, (uint64_t)v27[1], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v27[1] - (unsigned char *)*v27) >> 3));
  uint64_t v24 = (void **)&v27;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v24);
  InferenceEngine::DataTensor::get_3d_array<float>(v9, &v24);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v27 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v27, (uint64_t)*v24, (uint64_t)v24[1], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v24[1] - (unsigned char *)*v24) >> 3));
  v23[0] = (uint64_t *)&v24;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  InferenceEngine::DataTensor::unsqueeze(v12, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v12, v23);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v24, *v23[0], v23[0][1], 0xAAAAAAAAAAAAAAABLL * ((v23[0][1] - *v23[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  InferenceEngine::DataTensor::squeeze(v12, 2);
  uint64_t v21 = 0;
  __n128 v20 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v20, (uint64_t)v24, v25, 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v24) >> 3));
  memset(v19, 0, sizeof(v19));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v19, (uint64_t)v30, (uint64_t)v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v20, v19, 1, (uint64_t *)&v22);
  memset(v18, 0, sizeof(v18));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v18, (uint64_t)v27, v28, 0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v27) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v22, v18, 1, (uint64_t *)v23);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v23, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::unsqueeze(*a2, 0);
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  unint64_t v15 = *a2;
  unsigned __int8 v14 = a2[1];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
  }
  char v16 = (std::__shared_weak_count *)*((void *)v13 + 6);
  *((void *)v13 + 5) = v15;
  *((void *)v13 + 6) = v14;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v23[0] = (uint64_t *)&v24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  uint64_t v24 = (void **)&v27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
  char v27 = (void **)&v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20CEC5C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t *a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v37 = *(std::__shared_weak_count **)(v34 + 8);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::string __p = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a28 = &a31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a31 = v35 - 144;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  *(void *)(v35 - 144) = v35 - 120;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

void sub_20CEC5D94()
{
}

void sub_20CEC5DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  a10 = (void **)&a25;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  JUMPOUT(0x20CEC5D48);
}

void sub_20CEC5DB8()
{
}

void sub_20CEC5DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,char a28)
{
  a25 = (void **)&a28;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a25);
  JUMPOUT(0x20CEC5D58);
}

void sub_20CEC5DDC()
{
}

void sub_20CEC5DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  a28 = (void **)(v28 - 144);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a28);
  JUMPOUT(0x20CEC5D68);
}

void sub_20CEC5DFC()
{
}

void sub_20CEC5E08()
{
}

void sub_20CEC5E10()
{
}

void sub_20CEC5E18()
{
  if (*(char *)(v0 - 97) < 0) {
    operator delete(*(void **)(v0 - 120));
  }
  JUMPOUT(0x20CEC5D74);
}

void sub_20CEC5E30()
{
  if (*(char *)(v0 - 97) < 0) {
    operator delete(*(void **)(v0 - 120));
  }
  JUMPOUT(0x20CEC5D80);
}

void sub_20CEC5E48()
{
  if (*(char *)(v0 - 97) < 0) {
    operator delete(*(void **)(v0 - 120));
  }
  JUMPOUT(0x20CEC5D8CLL);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_prompt_data(void *a1@<X1>, InferenceEngine::DataTensor **a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v22, "prompt_enc_output");
  BOOL v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v22);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unsigned __int8 v6 = (InferenceEngine::DataTensor *)*((void *)v4 + 5);
  int v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "prompt_target");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v22);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v9 = (InferenceEngine::DataTensor *)*((void *)v7 + 5);
  BOOL v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  InferenceEngine::DataTensor::get_shape(v6, 0, &v22);
  if (v22)
  {
    char v23 = v22;
    operator delete(v22);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v19);
  char v23 = 0;
  uint64_t v24 = 0;
  __n128 v22 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v22, (uint64_t)*v19, (uint64_t)v19[1], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v19[1] - (unsigned char *)*v19) >> 3));
  v18[0] = (uint64_t *)&v19;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  InferenceEngine::DataTensor::get_3d_array<float>(v9, v18);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v19, *v18[0], v18[0][1], 0xAAAAAAAAAAAAAAABLL * ((v18[0][1] - *v18[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v17 = 0;
  __n128 v16 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v16, (uint64_t)v22, (uint64_t)v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3));
  memset(v15, 0, sizeof(v15));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v15, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v16, v15, 1, (uint64_t *)v18);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prompt_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v18, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::unsqueeze(*a2, 0);
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 6);
  *((void *)v10 + 5) = v12;
  *((void *)v10 + 6) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v18[0] = (uint64_t *)&v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  uint64_t v19 = (void **)&v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20CEC615C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v26 + 8);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::string __p = &a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a21 = &a24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a24 = v27 - 88;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void sub_20CEC6218()
{
}

void sub_20CEC6220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a18;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  JUMPOUT(0x20CEC61E8);
}

void sub_20CEC6238()
{
}

void sub_20CEC6240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  a18 = (void **)&a21;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  JUMPOUT(0x20CEC61F8);
}

void sub_20CEC6258()
{
}

void sub_20CEC6264()
{
}

void sub_20CEC626C()
{
  if (*(char *)(v0 - 65) < 0) {
    operator delete(*(void **)(v0 - 88));
  }
  JUMPOUT(0x20CEC6204);
}

void sub_20CEC6284()
{
  if (*(char *)(v0 - 65) < 0) {
    operator delete(*(void **)(v0 - 88));
  }
  JUMPOUT(0x20CEC6210);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_multinomial_factor(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, kaldi::quasar::Vocab **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&p_p, "layer_q");
  BOOL v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&p_p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_1d_array<float>(*((InferenceEngine::DataTensor **)v8 + 5), (void **)&__p.__r_.__value_.__l.__data_);
  int v9 = (int)*(float *)__p.__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(p_p);
    if (v9) {
      goto LABEL_8;
    }
  }
  else if (v9)
  {
    goto LABEL_8;
  }
  uint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "inference_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v10, &__p);
  int v11 = *(_DWORD *)__p.__r_.__value_.__l.__data_ - 1;
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 == a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "multinomial_factor");
    uint64_t v12 = operator new(4uLL);
    p_p = v12;
    _DWORD *v12 = 0;
    uint64_t v21 = v12 + 1;
    __n128 v22 = v12 + 1;
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, &v18);
    goto LABEL_9;
  }
LABEL_8:
  std::string::basic_string[abi:ne180100]<0>(&__p, "multinomial_factor");
  unint64_t v13 = operator new(4uLL);
  p_p = v13;
  _DWORD *v13 = 1065353216;
  uint64_t v21 = v13 + 1;
  __n128 v22 = v13 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, &v18);
LABEL_9:
  unint64_t v15 = v18;
  unsigned __int8 v14 = v19;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  *a4 = v15;
  a4[1] = (kaldi::quasar::Vocab *)v14;
  if (p_p)
  {
    uint64_t v21 = p_p;
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(v15, &__p);
  p_p = &__p;
  __n128 v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  if (v14) {
    atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v16 + 6);
  *((void *)v16 + 5) = v15;
  *((void *)v16 + 6) = v14;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20CEC6484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::P2ASoundStormIOProcessor::process_inputs(unsigned __int8 *a1, void *a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(buf, "pred_enc_output");
  unsigned __int8 v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  BOOL v8 = (InferenceEngine::DataTensor *)*((void *)v6 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(*(void **)buf);
  }
  InferenceEngine::DataTensor::get_shape(v8, 0, (char **)buf);
  uint64_t v9 = **(void **)buf;
  *(void *)&uint8_t buf[8] = *(void *)buf;
  operator delete(*(void **)buf);
  if (v9 != 1) {
    __assert_rtn("process_inputs", "P2ASoundStormIOProcessor.cpp", 119, "B == 1");
  }
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 16))(&v51, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 24))(&v49, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 32))(&v47, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 48))(&v45, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 64))(&v43, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 40))(&v41, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 88))(&v39, a1, a2, a3);
  InferenceEngine::DataTensor::get_1d_array<float>(v41, (void **)buf);
  float v10 = **(float **)buf;
  *(void *)&uint8_t buf[8] = *(void *)buf;
  operator delete(*(void **)buf);
  if (v10 >= 1.0)
  {
    InferenceEngine::DataTensor::get_1d_array<float>(v47, (void **)buf);
    float v14 = **(float **)buf;
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
    unint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1 + 24, "prompt_attention");
    buf[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v15, buf);
    if (buf[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, "prompt_k_");
      std::to_string(&v37, (int)v14);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __n128 v16 = &v37;
      }
      else {
        __n128 v16 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v37.__r_.__value_.__l.__size_;
      }
      unint64_t v18 = std::string::append(&v38, (const std::string::value_type *)v16, size);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string buf = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_v_");
      std::to_string(&__p, (int)v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
      }
      __n128 v22 = std::string::append(&v37, (const std::string::value_type *)p_p, v21);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
      if (!v24) {
        goto LABEL_75;
      }
      std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_k");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (long long **)&__p);
      uint64_t v27 = *((void *)v24 + 5);
      uint64_t v26 = *((void *)v24 + 6);
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = (std::__shared_weak_count *)*((void *)v25 + 6);
      *((void *)v25 + 5) = v27;
      *((void *)v25 + 6) = v26;
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      uint64_t v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v38);
      if (!v29) {
LABEL_75:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_v");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      int v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (long long **)&__p);
      uint64_t v32 = *((void *)v29 + 5);
      uint64_t v31 = *((void *)v29 + 6);
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v33 = (std::__shared_weak_count *)*((void *)v30 + 6);
      *((void *)v30 + 5) = v32;
      *((void *)v30 + 6) = v31;
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54) < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 56))(buf, a1, a2, a3);
      (*(void (**)(std::string *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 72))(&v38, a1, a2, a3);
      if (v38.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
      }
      int v30 = *(unsigned __int8 **)&buf[8];
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v30);
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Prepare P2ASoundStorm inputs finished for loop %d", buf, 8u);
    }
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = InferenceEngine::Diagnostics_GetLogObject(v11);
    uint64_t v13 = 1;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Skip loop %d", buf, 8u);
    }
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v13;
}

void sub_20CEC6BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36)
{
  uint64_t v39 = *(std::__shared_weak_count **)(v37 - 88);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  float32x4_t v40 = *(std::__shared_weak_count **)(v37 - 128);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  __int16 v41 = *(std::__shared_weak_count **)(v37 - 112);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::P2ASoundStormIOProcessor::process_outputs(uint64_t a1, void *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "target");
  unsigned __int8 v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  BOOL v8 = (InferenceEngine::DataTensor *)*((void *)v6 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pred_code");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  long long v19 = (InferenceEngine::DataTensor *)*((void *)v9 + 5);
  uint64_t v20 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::SoundStormIOProcessor::check_outputs<int>(a1, &v19, a3);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v8, __p);
  (*(void (**)(uint64_t, void *, void **))(*(void *)a1 + 80))(a1, a2, __p);
  std::string::basic_string[abi:ne180100]<0>(&buf, "target");
  InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)__p, &p_buf);
  uint64_t v12 = (kaldi::quasar::Vocab *)p_buf;
  int v11 = v18;
  p_std::string buf = 0;
  unint64_t v18 = 0;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(v12, &buf);
  p_std::string buf = &buf;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&p_buf);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
  *((void *)v13 + 5) = v12;
  *((void *)v13 + 6) = v11;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v13);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
    _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Process SoundStorm outputs finished for loop %d", (uint8_t *)&buf, 8u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 0;
}

void sub_20CEC6FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void **__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::string __p = &a13;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

void sub_20CEC707C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CEC7074);
}

uint64_t InferenceEngine::BaseIOProcessor::BaseIOProcessor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C206878;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v8[0];
  v8[0] = v5;
  unsigned __int8 v6 = *(uint64_t **)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  uint64_t v9 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
  return a1;
}

void sub_20CEC715C(_Unwind_Exception *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::BaseIOProcessor::~BaseIOProcessor(uint64_t **this)
{
  *this = (uint64_t *)off_26C206878;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(this + 1));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 2, *((unsigned __int8 *)this + 8));
}

uint64_t InferenceEngine::EspressoMilIO::EspressoMilIO(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t a5)
{
  unsigned __int8 v6 = (void *)InferenceEngine::MilIO::MilIO(a1, a2, a3, a4, a5);
  *unsigned __int8 v6 = off_26C206818;
  InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>((uint64_t)(v6 + 16), *(void *)(a1 + 88), (void *)(a1 + 56), 65568);
  return a1;
}

void sub_20CEC7218(_Unwind_Exception *a1)
{
  InferenceEngine::MilIO::~MilIO(v1);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*a3 == a3[1]) {
    uint64_t result = espresso_buffer_set_rank();
  }
  else {
    uint64_t result = espresso_buffer_pack_tensor_shape();
  }
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 160) = a4;
  return result;
}

void InferenceEngine::EspressoMilIO::~EspressoMilIO(void **this)
{
  InferenceEngine::MilIO::~MilIO(this);
  JUMPOUT(0x2105595E0);
}

uint64_t InferenceEngine::EspressoMilInferenceModel::EspressoMilInferenceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)InferenceEngine::MilInferenceModel::MilInferenceModel(a1, a2) = off_26C206AA8;
  *(void *)(a1 + 248) = espresso_create_context();
  *(void *)(a1 + 240) = espresso_create_plan();
  if (*(char *)(a1 + 87) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
  }
  else {
    std::string v17 = *(std::string *)(a1 + 64);
  }
  if (*(char *)(a1 + 135) < 0)
  {
    if (!*(void *)(a1 + 120)) {
      goto LABEL_16;
    }
  }
  else if (!*(unsigned char *)(a1 + 135))
  {
    goto LABEL_16;
  }
  std::operator+<char>();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v17, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_16:
  int v5 = espresso_plan_add_network();
  unsigned __int8 v6 = (InferenceEngine *)std::string::basic_string[abi:ne180100]<0>(v15, "Unable to load network.");
  if (v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v11 = v16;
    uint64_t v12 = (void **)v15[0];
    status_string = (const char *)espresso_get_status_string();
    float v14 = v15;
    if (v11 < 0) {
      float v14 = v12;
    }
    InferenceEngine::StringFormatter::StringFormatter(&__p, "%s Error: %d, %s", (const char *)v14, v5, status_string);
    MEMORY[0x210558D40](exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject(v6);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = &v17;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Load model from %s", (uint8_t *)&__p, 0xCu);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_20CEC7558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      if (a17 < 0) {
        operator delete(a12);
      }
      if (a23 < 0) {
        operator delete(a18);
      }
      InferenceEngine::MilInferenceModel::~MilInferenceModel(v30);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

void InferenceEngine::EspressoMilInferenceModel::~EspressoMilInferenceModel(InferenceEngine::EspressoMilInferenceModel *this)
{
  *(void *)this = off_26C206AA8;
  int v2 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy linear plan");
  if (v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v5 = v17;
    unsigned __int8 v6 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    BOOL v8 = __p;
    if (v5 < 0) {
      BOOL v8 = v6;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v18, "%s Error: %d, %s", (const char *)v8, v2, status_string);
    MEMORY[0x210558D40](exception, &v18);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v3 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v14, "Unable to destroy context");
  if (v3)
  {
    uint64_t v9 = __cxa_allocate_exception(0x10uLL);
    int v10 = v15;
    int v11 = (void **)v14[0];
    uint64_t v12 = (const char *)espresso_get_status_string();
    uint64_t v13 = v14;
    if (v10 < 0) {
      uint64_t v13 = v11;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v18, "%s Error: %d, %s", (const char *)v13, v3, v12);
    MEMORY[0x210558D40](v9, &v18);
    __cxa_throw(v9, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  InferenceEngine::MilInferenceModel::~MilInferenceModel(this);
}

void sub_20CEC7790(void *a1)
{
  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

double InferenceEngine::EspressoMilInferenceModel::build_io@<D0>(long long *a1@<X1>, long long *a2@<X2>, long long *a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  std::allocate_shared[abi:ne180100]<InferenceEngine::EspressoMilIO,std::allocator<InferenceEngine::EspressoMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>(a1, a2, a3, a4, v7);
  double result = v7[0];
  *a5 = *(_OWORD *)v7;
  return result;
}

void InferenceEngine::EspressoMilInferenceModel::prepare(InferenceEngine::EspressoMilInferenceModel *this)
{
  InferenceEngine::MilInferenceModel::prepare(this);
  int v2 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to build plan.");
  if (v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v24 = v34;
    uint64_t v25 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    uint64_t v27 = __p;
    if (v24 < 0) {
      uint64_t v27 = v25;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v35, "%s Error: %d, %s", (const char *)v27, v2, status_string);
    MEMORY[0x210558D40](exception, &v35);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    while (1)
    {
      uint64_t v4 = (const void *)v3[5];
      if (!v4) {
        break;
      }
      if (!v5) {
        goto LABEL_10;
      }
      unsigned __int8 v6 = (std::__shared_weak_count *)v3[6];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_11:
      InferenceEngine::MilIO::get_io_name(v5, &v32);
      int v7 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(v30, "Unable to bind input buffer");
      if (v7)
      {
        uint64_t v13 = __cxa_allocate_exception(0x10uLL);
        int v14 = v31;
        char v15 = (void **)v30[0];
        char v16 = (const char *)espresso_get_status_string();
        char v17 = v30;
        if (v14 < 0) {
          char v17 = v15;
        }
        InferenceEngine::StringFormatter::StringFormatter(&v35, "%s Error: %d, %s", (const char *)v17, v7, v16);
        MEMORY[0x210558D40](v13, &v35);
        __cxa_throw(v13, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v32.__r_.__value_.__l.__data_);
        if (!v6) {
          goto LABEL_17;
        }
LABEL_16:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        goto LABEL_17;
      }
      if (v6) {
        goto LABEL_16;
      }
LABEL_17:
      uint64_t v3 = (void *)*v3;
      if (!v3) {
        goto LABEL_21;
      }
    }
    int v5 = 0;
LABEL_10:
    unsigned __int8 v6 = 0;
    goto LABEL_11;
  }
LABEL_21:
  BOOL v8 = (void *)*((void *)this + 25);
  if (v8)
  {
    while (1)
    {
      uint64_t v9 = (const void *)v8[5];
      if (!v9) {
        break;
      }
      if (!v10) {
        goto LABEL_27;
      }
      int v11 = (std::__shared_weak_count *)v8[6];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_28:
      InferenceEngine::MilIO::get_io_name(v10, &v32);
      int v12 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(v28, "Unable to bind output buffer");
      if (v12)
      {
        std::string v18 = __cxa_allocate_exception(0x10uLL);
        int v19 = v29;
        uint64_t v20 = (void **)v28[0];
        std::string::size_type v21 = (const char *)espresso_get_status_string();
        char v22 = v28;
        if (v19 < 0) {
          char v22 = v20;
        }
        InferenceEngine::StringFormatter::StringFormatter(&v35, "%s Error: %d, %s", (const char *)v22, v12, v21);
        MEMORY[0x210558D40](v18, &v35);
        __cxa_throw(v18, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v32.__r_.__value_.__l.__data_);
        if (!v11) {
          goto LABEL_34;
        }
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        goto LABEL_34;
      }
      if (v11) {
        goto LABEL_33;
      }
LABEL_34:
      BOOL v8 = (void *)*v8;
      if (!v8) {
        return;
      }
    }
    int v10 = 0;
LABEL_27:
    int v11 = 0;
    goto LABEL_28;
  }
}

void sub_20CEC7C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 81) < 0)
  {
    operator delete(*(void **)(v37 - 104));
    if ((v36 & 1) == 0)
    {
LABEL_6:
      if (a35 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void InferenceEngine::EspressoMilInferenceModel::clean(InferenceEngine::EspressoMilInferenceModel *this)
{
  int v2 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(__p, "unable to clean the plan");
  if (v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v4 = v9;
    int v5 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int v7 = __p;
    if (v4 < 0) {
      int v7 = v5;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v10, "%s Error: %d, %s", (const char *)v7, v2, status_string);
    MEMORY[0x210558D40](exception, &v10);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::MilInferenceModel::clean(this);
}

void sub_20CEC7E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void InferenceEngine::EspressoMilInferenceModel::execute(InferenceEngine::EspressoMilInferenceModel *this)
{
  int v1 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute model.");
  if (v1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v3 = v8;
    int v4 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    unsigned __int8 v6 = __p;
    if (v3 < 0) {
      unsigned __int8 v6 = v4;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v9, "%s Error: %d, %s", (const char *)v6, v1, status_string);
    MEMORY[0x210558D40](exception, &v9);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20CEC7F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::EspressoMilIO,std::allocator<InferenceEngine::EspressoMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, long long *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  std::string v10 = operator new(0x140uLL);
  double result = std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::EspressoMilIO>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_20CEC7FE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::EspressoMilIO>,0>(void *a1, long long *a2, long long *a3, long long *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26C2190E0;
  InferenceEngine::EspressoMilIO::EspressoMilIO((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_20CEC803C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2190E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2190E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

char *InferenceEngine::SoundStormUtils::build_layer_group_mask@<X0>(char *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)result;
  if (*((void *)result + 1) != *(void *)result)
  {
    int v5 = result;
    unint64_t v6 = 0;
    int64_t v7 = (int)a2;
    uint64_t v8 = a2;
    do
    {
      unint64_t v9 = *(int *)(v4 + 4 * v6);
      if ((uint64_t)v6 >= v7)
      {
        int v11 = (char *)a3[1];
        if (v8 == v6)
        {
          int v13 = 0x40000000;
          double result = std::vector<float>::insert((uint64_t)a3, v11, v9, (char *)&v13);
        }
        else
        {
          int v12 = 1077936128;
          double result = std::vector<float>::insert((uint64_t)a3, v11, v9, (char *)&v12);
        }
      }
      else
      {
        std::string v10 = (char *)a3[1];
        int v14 = 1065353216;
        double result = std::vector<float>::insert((uint64_t)a3, v10, v9, (char *)&v14);
      }
      ++v6;
      uint64_t v4 = *(void *)v5;
    }
    while (v6 < (uint64_t)(*((void *)v5 + 1) - *(void *)v5) >> 2);
  }
  return result;
}

void sub_20CEC81C4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::insert(uint64_t a1, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = __src;
  if (a3)
  {
    int v5 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v8 = a1 + 16;
    uint64_t v9 = v10;
    int v11 = *(char **)(v8 - 8);
    if (a3 <= (v10 - (uint64_t)v11) >> 2)
    {
      uint64_t v18 = v11 - __src;
      if (a3 <= (v11 - __src) >> 2)
      {
        std::string::size_type v21 = *(char **)(v8 - 8);
        uint64_t v20 = a3;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = v18 >> 2;
        std::string::size_type v21 = &v11[4 * (a3 - (v18 >> 2))];
        do
        {
          *(_DWORD *)&v11[v19] = *(_DWORD *)a4;
          v19 += 4;
        }
        while (4 * a3 - 4 * v20 != v19);
        *(void *)(a1 + 8) = v21;
        if (v11 == __src) {
          return v4;
        }
      }
      char v22 = &__src[4 * a3];
      long long v23 = &v21[-4 * a3];
      int v24 = v21;
      if (v23 < v11)
      {
        int v24 = v21;
        do
        {
          int v25 = *(_DWORD *)v23;
          v23 += 4;
          *(_DWORD *)int v24 = v25;
          v24 += 4;
        }
        while (v23 < v11);
      }
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-4 * ((v21 - v22) >> 2)], __src, v21 - v22);
      }
      if (v4 <= v5)
      {
        if (*(void *)(a1 + 8) <= (unint64_t)v5) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = a3;
        }
        v5 += 4 * v26;
      }
      uint64_t v27 = v4;
      do
      {
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v5;
        v27 += 4;
        --v20;
      }
      while (v20);
    }
    else
    {
      int v12 = *(unsigned char **)a1;
      unint64_t v13 = a3 + ((uint64_t)&v11[-*(void *)a1] >> 2);
      if (v13 >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (__src - v12) >> 2;
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 1 > v13) {
        unint64_t v13 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      uint64_t v36 = v8;
      if (v16) {
        char v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v16);
      }
      else {
        char v17 = 0;
      }
      uint64_t v28 = &v17[4 * v14];
      std::string __p = v17;
      unint64_t v33 = v28;
      std::string v35 = &v17[4 * v16];
      uint64_t v29 = 4 * a3;
      int v30 = &v28[4 * a3];
      do
      {
        *(_DWORD *)uint64_t v28 = *(_DWORD *)v5;
        v28 += 4;
        v29 -= 4;
      }
      while (v29);
      char v34 = v30;
      uint64_t v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
      if (v34 != v33) {
        v34 += (v33 - v34 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v4;
}

void sub_20CEC83D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::P2ASoundStormLayerGroupIOProcessor::P2ASoundStormLayerGroupIOProcessor(uint64_t a1, char *a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)a2);
  InferenceEngine::P2ASoundStormIOProcessor::P2ASoundStormIOProcessor(a1, v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  *(void *)a1 = off_26C1EDCD8;
  std::string::basic_string[abi:ne180100]<0>(v17, "layer_groups");
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<int>,0>(a2, (const void **)v17, (uint64_t)&__p, &v19);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  v12[0] = 2;
  v17[0] = v19;
  std::string __p = v20;
  unint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((int **)v17, (int **)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "layer_groups");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  unsigned __int8 v5 = *(unsigned char *)v4;
  *(unsigned char *)uint64_t v4 = v12[0];
  v12[0] = v5;
  unint64_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v13;
  unint64_t v13 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  int64_t v7 = (int *)v19;
  if (v19 == v20)
  {
    int v8 = 0;
  }
  else
  {
    int v8 = 0;
    do
    {
      int v9 = *v7++;
      v8 += v9;
    }
    while (v7 != v20);
  }
  uint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_vqs");
  LODWORD(v17[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v10, (int *)v17);
  if (v8 != LODWORD(v17[0])) {
    __assert_rtn("P2ASoundStormLayerGroupIOProcessor", "P2ASoundStormLayerGroupIOProcessor.cpp", 43, "std::accumulate(layer_groups.begin(), layer_groups.end(), 0) == model_parameters_[\"num_vqs\"].get<int>()");
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  return a1;
}

void sub_20CEC85F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  InferenceEngine::SoundStormIOProcessor::~SoundStormIOProcessor(v22);
  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<int>,0>@<D0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    int v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    long long v14 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v14, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v14);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v13, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v13);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v14, (unsigned __int8 **)&v13))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  else
  {
    int v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v14);
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v8, a4);
  }
  return result;
}

void sub_20CEC8790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::build_q_token_mask(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, kaldi::quasar::Vocab **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  int64_t v7 = (unsigned __int8 *)(a1 + 24);
  int v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v8, &v32);
  std::string::basic_string[abi:ne180100]<0>(v29, "pred_enc_output");
  int v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v29);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v9 + 5), 0, &__p.__r_.__value_.__l.__data_);
  unint64_t v10 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  long long v12 = v32;
  int v11 = v33;
  if (v33 == v32) {
    goto LABEL_19;
  }
  unint64_t v13 = 0;
  long long v14 = 0;
  do
  {
    if (v12[v13] == a3)
    {
      std::string::size_type v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7, "layer_groups");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v15, v29);
      unint64_t v16 = *((int *)v29[0] + v13);
      int v26 = 0;
      std::vector<float>::vector(&v27, v10, &v26);
      std::vector<std::vector<float>>::vector(&__p, v16, (uint64_t)&v27);
      if (v27)
      {
        uint64_t v28 = (std::__shared_weak_count *)v27;
        operator delete(v27);
      }
      if (v29[0])
      {
        v29[1] = v29[0];
        operator delete(v29[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v29, "q_token_mask");
      InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&__p, &v27);
      char v17 = (kaldi::quasar::Vocab *)v27;
      char v18 = v28;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      *a4 = v17;
      a4[1] = (kaldi::quasar::Vocab *)v18;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
      v29[0] = &__p;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
      long long v12 = v32;
      int v11 = v33;
      long long v14 = v18;
    }
    ++v13;
  }
  while (v13 < (v11 - (unsigned char *)v12) >> 2);
  uint64_t v19 = *a4;
  if (!*a4)
  {
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(&__p, "q_token_mask");
    uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (!v20) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v19 = (kaldi::quasar::Vocab *)*((void *)v20 + 5);
    std::string::size_type v21 = (atomic_ullong *)*((void *)v20 + 6);
    if (v21) {
      atomic_fetch_add_explicit(v21 + 1, 1uLL, memory_order_relaxed);
    }
    char v22 = (std::__shared_weak_count *)a4[1];
    *a4 = v19;
    a4[1] = (kaldi::quasar::Vocab *)v21;
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  kaldi::quasar::Vocab::OOvWord(v19, &__p);
  v29[0] = &__p;
  long long v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)v29);
  int v24 = a4[1];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
  }
  int v25 = (std::__shared_weak_count *)*((void *)v23 + 6);
  *((void *)v23 + 5) = v19;
  *((void *)v23 + 6) = v24;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v32)
  {
    unint64_t v33 = v32;
    operator delete(v32);
  }
}

void sub_20CEC8ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v27 + 8);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::build_l2_tensor(void *a1@<X1>, kaldi::quasar::Vocab **a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "q_token_mask");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v6 = (InferenceEngine::DataTensor *)*((void *)v4 + 5);
  unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "l2_tensor");
  InferenceEngine::DataTensor::get_shape(v6, 0, (char **)v13);
  unint64_t v7 = *(void *)v13[0];
  std::string::size_type v15 = 0;
  unint64_t v16 = 0;
  p_p = 0;
  int v8 = (float *)operator new(4uLL);
  p_p = v8;
  *int v8 = (float)v7;
  std::string::size_type v15 = v8 + 1;
  unint64_t v16 = v8 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, a2);
  if (p_p)
  {
    std::string::size_type v15 = p_p;
    operator delete(p_p);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  int v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  int v11 = *a2;
  unint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)v9 + 6);
  *((void *)v9 + 5) = v11;
  *((void *)v9 + 6) = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20CEC8D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  int v24 = *(std::__shared_weak_count **)(v22 + 8);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::build_layer_mask(uint64_t a1@<X0>, void *a2@<X1>, kaldi::quasar::Vocab **a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v17, "layer_q");
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v17);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_1d_array<float>(*((InferenceEngine::DataTensor **)v6 + 5), &__p);
  float v7 = *(float *)__p;
  uint64_t v19 = __p;
  operator delete(__p);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  int v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "layer_groups");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v8, v16);
  InferenceEngine::SoundStormUtils::build_layer_group_mask((char *)v16, (int)v7, &__p);
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v17, "layer_mask");
  uint64_t v22 = 0;
  long long v23 = 0;
  uint64_t v24 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, __p, (uint64_t)v19, (v19 - (unsigned char *)__p) >> 2);
  unint64_t v13 = 0;
  long long v14 = 0;
  std::string::size_type v15 = 0;
  uint64_t v20 = &v13;
  char v21 = 0;
  unint64_t v13 = (std::string *)operator new(0x18uLL);
  long long v14 = (uint64_t *)v13;
  std::string::size_type v15 = (uint64_t *)&v13[1];
  long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)&v15, (uint64_t)&v22, (uint64_t)&v25, v13);
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v13, a3);
  uint64_t v20 = &v13;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (v22)
  {
    long long v23 = v22;
    operator delete(v22);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(*a3, &v17);
  unint64_t v13 = &v17;
  int v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v17, (uint64_t)&std::piecewise_construct, (long long **)&v13);
  int v11 = *a3;
  unint64_t v10 = a3[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)v9 + 6);
  *((void *)v9 + 5) = v11;
  *((void *)v9 + 6) = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
}

void sub_20CEC8FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  int v26 = *(std::__shared_weak_count **)(v24 + 8);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::build_pred_data(void *a1@<X1>, InferenceEngine::DataTensor **a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v31, "pred_enc_output");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v31);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v6 = (InferenceEngine::DataTensor *)*((void *)v4 + 5);
  unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v31);
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "target");
  float v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v31);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v9 = (InferenceEngine::DataTensor *)*((void *)v7 + 5);
  int v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v31);
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "q_token_mask");
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v31);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v31);
  }
  InferenceEngine::DataTensor::get_shape(v6, 0, &v31);
  unint64_t v12 = *((void *)v31 + 1);
  std::string v32 = v31;
  operator delete(v31);
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v28);
  std::string v32 = 0;
  uint64_t v33 = 0;
  char v31 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v31, (uint64_t)*v28, (uint64_t)v28[1], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v28[1] - (unsigned char *)*v28) >> 3));
  v27[0] = (uint64_t *)&v28;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  InferenceEngine::DataTensor::get_3d_array<float>(v9, v27);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v28, *v27[0], v27[0][1], 0xAAAAAAAAAAAAAAABLL * ((v27[0][1] - *v27[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v26 = 0;
  __n128 v25 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v25, (uint64_t)v31, (uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3));
  memset(v24, 0, sizeof(v24));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v24, (uint64_t)v28, v29, 0xAAAAAAAAAAAAAAABLL * ((v29 - (uint64_t)v28) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v25, v24, 1, (uint64_t *)v27);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v27, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::unsqueeze(*a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_lens");
  unint64_t v13 = (float *)operator new(4uLL);
  p_p = v13;
  float *v13 = (float)v12;
  uint64_t v19 = v13 + 1;
  uint64_t v20 = v13 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, &v21);
  if (p_p)
  {
    uint64_t v19 = p_p;
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  long long v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  unint64_t v16 = *a2;
  std::string::size_type v15 = a2[1];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
  }
  std::string v17 = (std::__shared_weak_count *)*((void *)v14 + 6);
  *((void *)v14 + 5) = v16;
  *((void *)v14 + 6) = v15;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v27[0] = (uint64_t *)&v28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  uint64_t v28 = (void **)&v31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20CEC9470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::string v35 = *(std::__shared_weak_count **)(v32 + 8);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::string __p = &a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = &a29;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a29 = v33 - 112;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(a1);
}

void sub_20CEC957C()
{
}

void sub_20CEC9584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  a14 = (void **)&a23;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a14);
  JUMPOUT(0x20CEC9540);
}

void sub_20CEC959C()
{
}

void sub_20CEC95A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,char a26)
{
  a23 = (void **)&a26;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a23);
  JUMPOUT(0x20CEC9550);
}

void sub_20CEC95BC()
{
}

void sub_20CEC95C8()
{
}

void sub_20CEC95D0()
{
}

void sub_20CEC95D8()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x20CEC955CLL);
}

void sub_20CEC95F0()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x20CEC9568);
}

void sub_20CEC9608()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x20CEC9574);
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::update_vq_target(uint64_t a1, void *a2, void **a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v61, "q_token_mask");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v61);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
  uint64_t v51 = (kaldi::quasar::Vocab *)*((void *)v4 + 5);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "layer_q");
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v61);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v7 = (InferenceEngine::DataTensor *)*((void *)v6 + 5);
  int v8 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "layer_mask");
  int v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v61);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v10 = (InferenceEngine::DataTensor *)*((void *)v9 + 5);
  int v11 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "target");
  unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v61);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "pred_code");
  long long v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v61);
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v16 = (InferenceEngine::DataTensor *)*((void *)v14 + 5);
  std::string::size_type v15 = (std::__shared_weak_count *)*((void *)v14 + 6);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v50 = v15;
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "index_b");
  std::string v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v61);
  if (!v17) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v19 = (InferenceEngine::DataTensor *)*((void *)v17 + 5);
  char v18 = (std::__shared_weak_count *)*((void *)v17 + 6);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v49 = v18;
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "index_t");
  uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v61);
  if (!v20) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v22 = (InferenceEngine::DataTensor *)*((void *)v20 + 5);
  uint64_t v21 = (std::__shared_weak_count *)*((void *)v20 + 6);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float32x4_t v48 = v21;
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  InferenceEngine::DataTensor::get_2d_array<float>(v51, v61);
  InferenceEngine::DataTensor::get_2d_array<float>(v10, &__p);
  long long v59 = 0;
  uint64_t v60 = 0;
  std::string v58 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v58, *(const void **)__p.__begin_, *((void *)__p.__begin_ + 1), (uint64_t)(*((void *)__p.__begin_ + 1) - *(void *)__p.__begin_) >> 2);
  v56.__begin_ = (std::vector<int>::pointer)&__p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  InferenceEngine::DataTensor::get_1d_array<float>(v7, (void **)&__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  long long v23 = v58;
  if (v58 == v59)
  {
    uint64_t v24 = (float *)v58;
  }
  else
  {
    uint64_t v24 = (float *)v58;
    while (*v24 != 2.0)
    {
      if (++v24 == v59)
      {
        uint64_t v24 = v59;
        break;
      }
    }
  }
  InferenceEngine::DataTensor::get_1d_array<int>(v16, &__p);
  InferenceEngine::DataTensor::get_1d_array<int>(v19, &v56);
  _1d = (InferenceEngine *)InferenceEngine::DataTensor::get_1d_array<int>(v22, &v55);
  uint64_t v26 = (char *)v24 - v23;
  std::vector<int>::pointer begin = v56.__begin_;
  std::vector<int>::pointer end = v56.__end_;
  if (v56.__begin_ != v56.__end_)
  {
    std::vector<int>::pointer v29 = v56.__begin_;
    do
      *v29++ += (unint64_t)v26 >> 2;
    while (v29 != end);
  }
  unint64_t v30 = end - begin;
  if (v30 != v55.__end_ - v55.__begin_)
  {
    uint64_t v43 = "top_k_b_index_vector.size() == top_k_t_index_vector.size()";
    int v44 = 131;
    goto LABEL_94;
  }
  if (v30 != __p.__end_ - __p.__begin_)
  {
    uint64_t v43 = "top_k_b_index_vector.size() == top_k_pred_code_vector.size()";
    int v44 = 132;
LABEL_94:
    __assert_rtn("update_vq_target", "P2ASoundStormLayerGroupIOProcessor.cpp", v44, v43);
  }
  uint64_t v45 = (uint64_t)a2;
  uint64_t v46 = v13;
  float v47 = v11;
  if (__p.__end_ != __p.__begin_)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v26 >> 2;
    if (v30 <= 1) {
      uint64_t v33 = 1;
    }
    else {
      uint64_t v33 = v30;
    }
    char v34 = v61[0];
    do
    {
      int v35 = v56.__begin_[v31];
      int v36 = v55.__begin_[v31];
      uint64_t v37 = v35 - v32;
      if (*(float *)(v34[3 * v37] + 4 * v36) != 0.0)
      {
        LogObject = InferenceEngine::Diagnostics_GetLogObject(_1d);
        _1d = (InferenceEngine *)os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR);
        if (_1d)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v35;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v36;
          _os_log_error_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_ERROR, "Duplicate value in index_t found in the outputs! q_mask_vector[%d][%d] is already predicted!", (uint8_t *)&buf, 0xEu);
        }
      }
      char v34 = v61[0];
      *(_DWORD *)(v61[0][3 * v37] + 4 * v36) = 1065353216;
      *(float *)(*(void *)(**a3 + 24 * v36) + 4 * v35) = (float)__p.__begin_[v31++];
    }
    while (v33 != v31);
  }
  kaldi::quasar::Vocab::OOvWord(v51, &buf);
  InferenceEngine::DataTensor::build_from_2d_array<float>(v61, &p_buf);
  float32x4_t v40 = (kaldi::quasar::Vocab *)p_buf;
  uint64_t v39 = v54;
  p_std::string buf = 0;
  std::string::size_type v54 = 0;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(v40, &buf);
  p_std::string buf = &buf;
  __int16 v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v45, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&p_buf);
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v42 = (std::__shared_weak_count *)*((void *)v41 + 6);
  *((void *)v41 + 5) = v40;
  *((void *)v41 + 6) = v39;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v58)
  {
    long long v59 = (float *)v58;
    operator delete(v58);
  }
  std::string v58 = v61;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
}

void sub_20CEC9CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (*(char *)(v34 - 105) < 0) {
    operator delete(*(void **)(v34 - 128));
  }
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  a32 = (void *)(v34 - 160);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::P2ASoundStormLayerGroupIOProcessor::process_inputs(unsigned __int8 *a1, void *a2, uint64_t a3)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(buf, "pred_enc_output");
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v8 = (InferenceEngine::DataTensor *)*((void *)v6 + 5);
  float v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(*(void **)buf);
  }
  InferenceEngine::DataTensor::get_shape(v8, 0, (char **)buf);
  uint64_t v9 = **(void **)buf;
  *(void *)&uint8_t buf[8] = *(void *)buf;
  operator delete(*(void **)buf);
  if (v9 != 1) {
    __assert_rtn("process_inputs", "P2ASoundStormLayerGroupIOProcessor.cpp", 156, "B == 1");
  }
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 16))(&v55, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 24))(&v53, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 96))(&v51, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 32))(&v49, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 48))(&v47, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 64))(&v45, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 40))(&v43, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 88))(&v41, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 104))(&v39, a1, a2, a3);
  InferenceEngine::DataTensor::get_1d_array<float>(v43, (void **)buf);
  float v10 = **(float **)buf;
  *(void *)&uint8_t buf[8] = *(void *)buf;
  operator delete(*(void **)buf);
  if (v10 >= 1.0)
  {
    InferenceEngine::DataTensor::get_1d_array<float>(v49, (void **)buf);
    float v14 = **(float **)buf;
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
    std::string::size_type v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1 + 24, "prompt_attention");
    buf[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v15, buf);
    if (buf[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, "prompt_k_");
      std::to_string(&v37, (int)v14);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v16 = &v37;
      }
      else {
        unint64_t v16 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v37.__r_.__value_.__l.__size_;
      }
      char v18 = std::string::append(&v38, (const std::string::value_type *)v16, size);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      std::string::size_type v58 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string buf = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_v_");
      std::to_string(&__p, (int)v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v22 = std::string::append(&v37, (const std::string::value_type *)p_p, v21);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
      if (!v24) {
        goto LABEL_79;
      }
      std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_k");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      __n128 v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (long long **)&__p);
      uint64_t v27 = *((void *)v24 + 5);
      uint64_t v26 = *((void *)v24 + 6);
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = (std::__shared_weak_count *)*((void *)v25 + 6);
      *((void *)v25 + 5) = v27;
      *((void *)v25 + 6) = v26;
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      std::vector<int>::pointer v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v38);
      if (!v29) {
LABEL_79:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_v");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      unint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (long long **)&__p);
      uint64_t v32 = *((void *)v29 + 5);
      uint64_t v31 = *((void *)v29 + 6);
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v33 = (std::__shared_weak_count *)*((void *)v30 + 6);
      *((void *)v30 + 5) = v32;
      *((void *)v30 + 6) = v31;
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58) < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 56))(buf, a1, a2, a3);
      (*(void (**)(std::string *__return_ptr, unsigned __int8 *, void *, uint64_t))(*(void *)a1 + 72))(&v38, a1, a2, a3);
      if (v38.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
      }
      unint64_t v30 = *(unsigned __int8 **)&buf[8];
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v30);
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Prepare P2ASoundStormLayerGroup inputs finished for loop %d", buf, 8u);
    }
    uint64_t v13 = 0;
  }
  else
  {
    unint64_t v12 = InferenceEngine::Diagnostics_GetLogObject(v11);
    uint64_t v13 = 1;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Skip loop %d", buf, 8u);
    }
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v13;
}

void sub_20CECA5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,std::__shared_weak_count *a38)
{
  uint64_t v41 = *(std::__shared_weak_count **)(v39 - 88);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v39 - 144);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  uint64_t v43 = *(std::__shared_weak_count **)(v39 - 128);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  int v44 = *(std::__shared_weak_count **)(v39 - 112);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::P2ASoundStormLayerGroupIOProcessor::process_outputs(uint64_t a1, void *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "target");
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v8 = (InferenceEngine::DataTensor *)*((void *)v6 + 5);
  float v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pred_code");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  long long v19 = (InferenceEngine::DataTensor *)*((void *)v9 + 5);
  uint64_t v20 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::SoundStormIOProcessor::check_outputs<int>(a1, &v19, a3);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v8, __p);
  (*(void (**)(uint64_t, void *, void **))(*(void *)a1 + 80))(a1, a2, __p);
  std::string::basic_string[abi:ne180100]<0>(&buf, "target");
  InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)__p, &p_buf);
  unint64_t v12 = (kaldi::quasar::Vocab *)p_buf;
  int v11 = v18;
  p_std::string buf = 0;
  char v18 = 0;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(v12, &buf);
  p_std::string buf = &buf;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&p_buf);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
  *((void *)v13 + 5) = v12;
  *((void *)v13 + 6) = v11;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v13);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
    _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Process P2ASoundStorm outputs finished for loop %d", (uint8_t *)&buf, 8u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 0;
}

void sub_20CECAA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void **__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::string __p = &a13;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

void sub_20CECAAE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CECAAD8);
}

uint64_t InferenceEngine::MilInferenceModel::MilInferenceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(void *)a1 = off_26C2068E8;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v4 = (char *)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 48);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  int v8 = (void **)(a1 + 64);
  uint64_t v9 = (void **)(a1 + 88);
  *(_OWORD *)(a1 + 112) = 0u;
  float v10 = (void **)(a1 + 112);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v25 = *(std::string *)a2;
  }
  boost::filesystem::path::parent_path((boost::filesystem::path *)&v25, v5, v6, v7, &v24);
  InferenceEngine::Utils::read_json_from_file((char *)&v25, (uint64_t)v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  char v11 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v22[0];
  v22[0] = v11;
  unint64_t v12 = *(uint64_t **)(a1 + 40);
  *(void *)(a1 + 40) = v23;
  long long v23 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  std::string::basic_string[abi:ne180100]<0>(&v26, "model_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v4, (const void **)&v26.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v26, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string v26 = v24;
  }
  boost::filesystem::path::append_v3(&v26, &v20);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)int v8 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 80) = *((void *)&v26.__r_.__value_.__l + 2);
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, "model_parameters");
  v20.__r_.__value_.__s.__data_[0] = 0;
  v20.__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v4, (const void **)&v26.__r_.__value_.__l.__data_, (unsigned __int8 *)&v20, (uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  char v13 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v18[0];
  v18[0] = v13;
  float v14 = *(uint64_t **)(a1 + 56);
  *(void *)(a1 + 56) = v19;
  long long v19 = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20.__r_.__value_.__l.__size_, v20.__r_.__value_.__s.__data_[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "model_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v4, (const void **)&v20.__r_.__value_.__l.__data_, &v26);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 104) = *((void *)&v26.__r_.__value_.__l + 2);
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "model_function");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("main", v4, (const void **)&v20.__r_.__value_.__l.__data_, &v26);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)float v10 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 128) = *((void *)&v26.__r_.__value_.__l + 2);
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, "model_dynamic_shape");
  v20.__r_.__value_.__s.__data_[0] = 0;
  BOOL v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v4, (const void **)&v26.__r_.__value_.__l.__data_, (unsigned __int8 *)&v20);
  *(unsigned char *)(a1 + 136) = v15;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v15);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 135) < 0) {
      float v10 = (void **)*v10;
    }
    LODWORD(v26.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Load model with %s function", (uint8_t *)&v26, 0xCu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_20CECAFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table(v43);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table(v42);
  if (v39[135] < 0) {
    operator delete(*v45);
  }
  if (v39[111] < 0) {
    operator delete(*v44);
  }
  if (v39[87] < 0) {
    operator delete(*v46);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v41);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v40);
  if (v39[31] < 0) {
    operator delete(*a10);
  }
  _Unwind_Resume(a1);
}

void sub_20CECB0DC()
{
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>@<X0>(char *a1@<X0>, const void **a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    float v10 = std::string::insert(&v12, 0, "cannot use value() with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v13, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v13);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v12);
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v13, (unsigned __int8 **)&v12))a3 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v13); {
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a4, (uint64_t)a3);
  }
}

void sub_20CECB1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::MilInferenceModel::~MilInferenceModel(InferenceEngine::MilInferenceModel *this)
{
  *(void *)this = off_26C2068E8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table((uint64_t)this + 144);
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this + 48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 7, *((unsigned __int8 *)this + 48));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this + 32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 5, *((unsigned __int8 *)this + 32));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void *InferenceEngine::MilInferenceModel::build_io@<X0>(void *a1@<X8>)
{
  return std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>(a1);
}

void InferenceEngine::MilInferenceModel::add_model_ios(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, v3);
      std::string::basic_string[abi:ne180100]<0>(&__p, "name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v23, (const void **)&__p.__r_.__value_.__l.__data_, &v22);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v20, "io_name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v23, (const void **)&v20.__r_.__value_.__l.__data_, &__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(v18, "io_dtype");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v23, (const void **)v18, &v20);
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "shape");
      BOOL v15 = 0;
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      v7.n128_f64[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<unsigned long>,0>(v23, (const void **)buf, (uint64_t)&v15, v18);
      if (v15)
      {
        unint64_t v16 = (std::__shared_weak_count *)v15;
        operator delete(v15);
      }
      if (v28 < 0) {
        operator delete(*(void **)buf);
      }
      (*(void (**)(void **__return_ptr, uint64_t, std::string *, std::string *, std::string *, void **, __n128))(*(void *)a1 + 64))(&v15, a1, &v22, &__p, &v20, v18, v7);
      *(void *)std::string buf = &v22;
      int v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)&v22, (uint64_t)&std::piecewise_construct, (long long **)buf);
      float v10 = v15;
      uint64_t v9 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v11 = (std::__shared_weak_count *)*((void *)v8 + 6);
      *((void *)v8 + 5) = v10;
      *((void *)v8 + 6) = v9;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v8);
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
      {
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v13 = &v22;
        }
        else {
          long long v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&buf[4] = v13;
        __int16 v26 = 2080;
        uint64_t v27 = p_p;
        _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Added IO: %s -> %s", buf, 0x16u);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v18[0])
      {
        v18[1] = v18[0];
        operator delete(v18[0]);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
      v3 += 16;
    }
    while (v3 != v4);
  }
}

void sub_20CECB638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::__shared_weak_count *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t *a38)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a38);
  _Unwind_Resume(a1);
}

void sub_20CECB708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    JUMPOUT(0x20CECB6F4);
  }
  JUMPOUT(0x20CECB6F8);
}

void sub_20CECB71C()
{
}

void sub_20CECB724()
{
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<unsigned long>,0>@<D0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    float v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    long long v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    long long v14 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v14, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v14);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v13, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v13);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v14, (unsigned __int8 **)&v13))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  }
  else
  {
    int v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v14);
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<unsigned long>,std::vector<unsigned long>,0>((char *)v8, a4);
  }
  return result;
}

void sub_20CECB858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::MilInferenceModel::prepare(InferenceEngine::MilInferenceModel *this)
{
  int v2 = (char *)this + 32;
  std::string::basic_string[abi:ne180100]<0>(__p, "model_inputs");
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v2, (const void **)__p, (uint64_t *)v4, v8);
  v3[0] = v4;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](v3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "model_outputs");
  memset(v3, 0, sizeof(v3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v2, (const void **)v4, (uint64_t *)v3, __p);
  uint64_t v9 = v3;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  InferenceEngine::MilInferenceModel::add_model_ios((uint64_t)this, v8, (uint64_t)this + 144);
  InferenceEngine::MilInferenceModel::add_model_ios((uint64_t)this, (uint64_t *)__p, (uint64_t)this + 184);
  v4[0] = __p;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
  __p[0] = v8;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_20CECB9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  *(void *)(v25 - 40) = v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  a19 = (void *)(v25 - 64);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>@<X0>(char *a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    float v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    long long v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    long long v14 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v14, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v14);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v13, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v13);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v14, (unsigned __int8 **)&v13))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(a4, *a3, a3[1], (a3[1] - *a3) >> 4);
  }
  else
  {
    int v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v14);
    return (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v8, a4);
  }
}

void sub_20CECBB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::MilInferenceModel::clean(InferenceEngine::MilInferenceModel *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::clear((uint64_t)this + 144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::clear((uint64_t)this + 184);
}

void InferenceEngine::MilInferenceModel::get_all_input_names(InferenceEngine::MilInferenceModel *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_inputs");
  memset(&v22, 0, sizeof(v22));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((char *)this + 32, (const void **)&__p.__first_, (uint64_t *)&v22, &v23);
  v18[0] = &v22;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  if (SHIBYTE(__p.__end_) < 0) {
    operator delete(__p.__first_);
  }
  uint64_t v4 = v23;
  for (uint64_t i = v24; v4 != i; v4 += 16)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, v4);
    std::string::basic_string[abi:ne180100]<0>(v18, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v20, (const void **)v18, &v22);
    unint64_t v6 = *(void *)(a2 + 8);
    unint64_t v7 = *(void *)(a2 + 16);
    if (v6 >= v7)
    {
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a2) >> 3);
      unint64_t v10 = v9 + 1;
      if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)a2) >> 3);
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v10;
      }
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v12) {
        std::string v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v12);
      }
      else {
        std::string v13 = 0;
      }
      long long v14 = v13 + v9;
      __p.__first_ = v13;
      __p.__begin_ = v14;
      __p.__end_cap_.__value_ = &v13[v12];
      long long v15 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      v14->__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      memset(&v22, 0, sizeof(v22));
      __p.__end_ = v14 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__p);
      uint64_t v16 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__p);
      int v17 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
      *(void *)(a2 + 8) = v16;
      if (v17 < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      *(void *)(v6 + 16) = *((void *)&v22.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v6 = v8;
      memset(&v22, 0, sizeof(v22));
      *(void *)(a2 + 8) = v6 + 24;
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v23;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_20CECBE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilInferenceModel::get_all_output_names(InferenceEngine::MilInferenceModel *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_outputs");
  memset(&v22, 0, sizeof(v22));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((char *)this + 32, (const void **)&__p.__first_, (uint64_t *)&v22, &v23);
  v18[0] = &v22;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  if (SHIBYTE(__p.__end_) < 0) {
    operator delete(__p.__first_);
  }
  uint64_t v4 = v23;
  for (uint64_t i = v24; v4 != i; v4 += 16)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, v4);
    std::string::basic_string[abi:ne180100]<0>(v18, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v20, (const void **)v18, &v22);
    unint64_t v6 = *(void *)(a2 + 8);
    unint64_t v7 = *(void *)(a2 + 16);
    if (v6 >= v7)
    {
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a2) >> 3);
      unint64_t v10 = v9 + 1;
      if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)a2) >> 3);
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v10;
      }
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v12) {
        std::string v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v12);
      }
      else {
        std::string v13 = 0;
      }
      long long v14 = v13 + v9;
      __p.__first_ = v13;
      __p.__begin_ = v14;
      __p.__end_cap_.__value_ = &v13[v12];
      long long v15 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      v14->__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      memset(&v22, 0, sizeof(v22));
      __p.__end_ = v14 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__p);
      uint64_t v16 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__p);
      int v17 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
      *(void *)(a2 + 8) = v16;
      if (v17 < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      *(void *)(v6 + 16) = *((void *)&v22.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v6 = v8;
      memset(&v22, 0, sizeof(v22));
      *(void *)(a2 + 8) = v6 + 24;
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v23;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_20CECC118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::MilInferenceModel::get_model_parameters@<X0>(InferenceEngine::MilInferenceModel *this@<X0>, uint64_t a2@<X8>)
{
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)this + 48);
}

void InferenceEngine::MilInferenceModel::set_input(uint64_t a1, kaldi::quasar::Vocab **a2)
{
  uint64_t v4 = (void *)(a1 + 144);
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v4, (unsigned __int8 *)&__p);
  if (!v5) {
    __assert_rtn("set_input", "MilInferenceBaseModule.cpp", 122, "input_buffers_.find(data_tensor->get_name()) != input_buffers_.end()");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v5);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_DEBUG)) {
    InferenceEngine::MilInferenceModel::set_input(a2, LogObject);
  }
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v4, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v8 = *a2;
  unint64_t rank = InferenceEngine::DataTensor::get_rank(*((InferenceEngine::DataTensor **)v7 + 5));
  InferenceEngine::DataTensor::set_rank(v8, rank);
  if (*(unsigned char *)(a1 + 136))
  {
    InferenceEngine::DataTensor::get_shape(*a2, 0, &__p.__r_.__value_.__l.__data_);
    InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v7 + 5), 0, (char **)&p_p);
    InferenceEngine::DataTensor::valid_shape((uint64_t *)&__p, &p_p, 0, 1);
    if (p_p)
    {
      int v17 = p_p;
      operator delete(p_p);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v10 = *((void *)v7 + 5);
    InferenceEngine::DataTensor::get_shape(*a2, 0, (char **)v15);
    InferenceEngine::DataTensor::resize(v10, (uint64_t)v15);
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
    (*(void (**)(void))(**((void **)v7 + 5) + 16))(*((void *)v7 + 5));
  }
  else
  {
    InferenceEngine::DataTensor::get_shape(*a2, 0, &__p.__r_.__value_.__l.__data_);
    InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v7 + 5), 0, (char **)&p_p);
    InferenceEngine::DataTensor::valid_shape((uint64_t *)&__p, &p_p, 0, 0);
    if (p_p)
    {
      int v17 = p_p;
      operator delete(p_p);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v11 = *a2;
  unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 6);
  uint64_t v13 = *((void *)v7 + 5);
  long long v14 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::DataTensor::cast_data_to_target_tensor((uint64_t)v11, &v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_20CECC410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL InferenceEngine::MilInferenceModel::has_input(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 144), a2) != 0;
}

void InferenceEngine::MilInferenceModel::get_output(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1 + 184;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(a1 + 184), a2))InferenceEngine::MilInferenceModel::get_output(); {
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  }
  unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v14);
  long long v8 = v7;
  if (*(unsigned char *)(a1 + 136)) {
    (*(void (**)(void))(**((void **)v7 + 5) + 24))(*((void *)v7 + 5));
  }
  kaldi::quasar::Vocab::BosWord(*((kaldi::quasar::Vocab **)v8 + 5), &v14);
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long>,void>(a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *((void *)v8 + 5);
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  unint64_t v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::DataTensor::cast_data_to_target_tensor(v9, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20CECC5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::string v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::MilInferenceModel::get_output_io(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1 + 184;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(a1 + 184), a2))InferenceEngine::MilInferenceModel::get_output_io(); {
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  }
  unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v15);
  long long v8 = v7;
  if (*(unsigned char *)(a1 + 136)) {
    (*(void (**)(void))(**((void **)v7 + 5) + 24))(*((void *)v7 + 5));
  }
  InferenceEngine::MilIO::get_io_name(*((InferenceEngine::MilIO **)v8 + 5), &v15);
  kaldi::quasar::Vocab::BosWord(*((kaldi::quasar::Vocab **)v8 + 5), &v14);
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string,std::string,std::vector<unsigned long>,void>(a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *((void *)v8 + 5);
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  unint64_t v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::DataTensor::cast_data_to_target_tensor(v9, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20CECC770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 + 8);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x98uLL);
  double result = std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::MilIO>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_20CECC8A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::MilIO>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26C219310;
  InferenceEngine::MilIO::MilIO(a1 + 3);
  return a1;
}

void sub_20CECC8FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::MilIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::MilIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::MilIO>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<unsigned long>,std::vector<unsigned long>,0>@<D0>(char *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>(a1, (uint64_t)a2);
}

void sub_20CECCA34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>(char *a1, uint64_t a2)
{
  if (*a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    uint64_t v6 = std::string::insert(&v8, 0, "type must be array, but is ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  return nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>>((unsigned __int8 *)a1, a2);
}

void sub_20CECCB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>>(unsigned __int8 *a1, uint64_t a2)
{
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  unint64_t v4 = *a1;
  if (*a1)
  {
    if (v4 == 1)
    {
      unint64_t v4 = *(void *)(*((void *)a1 + 1) + 16);
    }
    else if (v4 == 2)
    {
      unint64_t v4 = (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4;
    }
    else
    {
      unint64_t v4 = 1;
    }
  }
  std::vector<unsigned long>::reserve((void **)&v12, v4);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(v11);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v10, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v10);
  for (uint64_t i = (char *)*((void *)&v12 + 1);
        !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(v11, v10);
        uint64_t i = v7 + 8)
  {
    uint64_t v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v11);
    unint64_t v14 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v6, &v14);
    long long v7 = std::vector<unsigned long>::insert((uint64_t)&v12, i, &v14);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v11);
  }
  std::string v8 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v8;
    operator delete(v8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(void *)(a2 + 16) = v13;
  return result;
}

void sub_20CECCCB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(void *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    std::string::size_type v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    long long v12 = v7;
    if (v11 != *a1)
    {
      long long v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

unsigned char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(unsigned char *result, unint64_t *a2)
{
  int v2 = result;
  switch(*result)
  {
    case 4:
      unint64_t v3 = result[8];
      break;
    case 5:
    case 6:
      unint64_t v3 = *((void *)result + 1);
      break;
    case 7:
      unint64_t v3 = (unint64_t)*((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      int64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v8, v5);
      uint64_t v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_20CECCE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(a1, (uint64_t)a2);
}

void sub_20CECCF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t result, uint64_t a2)
{
  int v2 = (char *)result;
  if (*(unsigned char *)result != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    long long v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    std::string::size_type v10 = std::string::insert(&v12, 0, "type must be array, but is ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v13, exception);
  }
  unint64_t v3 = *(uint64_t **)(result + 8);
  if (v3 != (uint64_t *)a2)
  {
    uint64_t v4 = v3[1];
    unint64_t v5 = (v4 - *v3) >> 4;
    uint64_t v7 = *v3;
    return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__assign_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(a2, v7, v4, v5);
  }
  return result;
}

void sub_20CECD044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__assign_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)a1);
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (*(void *)(a1 + 8) - v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 16 * v14;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v17, a2, v15, v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v18, a2, a3, v9);
  return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](a1, v16);
}

void sub_20CECD1C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20CECD1CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v10, v5);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    unsigned __int8 v7 = *(unsigned char *)a4;
    *(unsigned char *)a4 = v10[0];
    v10[0] = v7;
    uint64_t v8 = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v11;
    uint64_t v11 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    v5 += 16;
    a4 += 16;
  }
  while (v5 != v6);
  return v6;
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long>,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x80uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string,std::vector<unsigned long> &,std::allocator<InferenceEngine::DataTensor>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_20CECD328(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string,std::string,std::vector<unsigned long>,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x98uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::MilIO>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_20CECD3A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilInferenceModel::set_input(kaldi::quasar::Vocab **a1, NSObject *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  kaldi::quasar::Vocab::OOvWord(*a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)std::string buf = 136315138;
  uint64_t v6 = p_p;
  _os_log_debug_impl(&dword_20CD80000, a2, OS_LOG_TYPE_DEBUG, "Set input: %s", buf, 0xCu);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void InferenceEngine::MilInferenceModel::get_output()
{
  __assert_rtn("get_output", "MilInferenceBaseModule.cpp", 144, "output_buffers_.find(key) != output_buffers_.end()");
}

void InferenceEngine::MilInferenceModel::get_output_io()
{
  __assert_rtn("get_output_io", "MilInferenceBaseModule.cpp", 156, "output_buffers_.find(key) != output_buffers_.end()");
}

void *InferenceEngine::MLInferenceModel::MLInferenceModel(void *a1, char *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *a1 = off_26C206898;
  a1[1] = 0;
  uint64_t v6 = (void (****)(void))(a1 + 1);
  a1[2] = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v20.__pn_, a2);
  std::__fs::filesystem::__status(&v20, 0);
  if (SHIBYTE(v20.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__pn_.__r_.__value_.__l.__data_);
  }
  if (!v19 || v19 == 255)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (a2[23] >= 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = *(const char **)a2;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v20.__pn_, "Model config %s doesn't exist!", v16);
    MEMORY[0x210558D40](exception, &v20);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  int v7 = *(char *)(a3 + 23);
  if (v7 < 0)
  {
    if (*(void *)(a3 + 8) != 8) {
      goto LABEL_27;
    }
    uint64_t v9 = *(void **)a3;
    uint64_t v8 = **(void ***)a3;
  }
  else
  {
    if (v7 != 8) {
      goto LABEL_27;
    }
    uint64_t v8 = *(void **)a3;
    uint64_t v9 = (void *)a3;
  }
  if (v8 == (void *)0x6F73736572707365)
  {
    std::allocate_shared[abi:ne180100]<InferenceEngine::EspressoMilInferenceModel,std::allocator<InferenceEngine::EspressoMilInferenceModel>,std::string const&,void>(&v20);
    goto LABEL_14;
  }
  if (*v9 != 0x736E6E62326C696DLL)
  {
LABEL_27:
    char v17 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a3 + 23) >= 0) {
      char v18 = (const char *)a3;
    }
    else {
      char v18 = *(const char **)a3;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v20.__pn_, "Unsupported inference type %s! Inference type can be either %s or %s.", v18, "espresso", "mil2bnns");
    MEMORY[0x210558D40](v17, &v20);
    __cxa_throw(v17, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilInferenceModel,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,std::string const&,void>(&v20);
LABEL_14:
  long long v10 = *(_OWORD *)&v20.__pn_.__r_.__value_.__l.__data_;
  *(_OWORD *)&v20.__pn_.__r_.__value_.__l.__data_ = 0uLL;
  std::string::size_type size = (std::__shared_weak_count *)a1[2];
  *(_OWORD *)(a1 + 1) = v10;
  if (size)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
    std::string::size_type size = (std::__shared_weak_count *)v20.__pn_.__r_.__value_.__l.__size_;
    if (v20.__pn_.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20.__pn_.__r_.__value_.__l.__size_);
    }
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)size);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (a2[23] >= 0) {
      std::string::size_type v13 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v13 = *(void *)a2;
    }
    LODWORD(v20.__pn_.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v20.__pn_.__r_.__value_.__r.__words + 4) = v13;
    _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Model has been created from %s", (uint8_t *)&v20, 0xCu);
  }
  (***v6)();
  return a1;
}

void sub_20CECD7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__fs::filesystem::path v20 = *(std::__shared_weak_count **)(v18 + 16);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::MLInferenceModel::~MLInferenceModel(InferenceEngine::MLInferenceModel *this)
{
  *(void *)this = off_26C206898;
  (*(void (**)(void))(**((void **)this + 1) + 8))(*((void *)this + 1));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void InferenceEngine::MLInferenceModel::set_input(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20CECD95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::MLInferenceModel::has_input(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

void InferenceEngine::MLInferenceModel::set_input(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20CECDA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::MLInferenceModel::execute(InferenceEngine::MLInferenceModel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 48))();
}

uint64_t InferenceEngine::MLInferenceModel::reset(InferenceEngine::MLInferenceModel *this)
{
  (*(void (**)(void))(**((void **)this + 1) + 8))(*((void *)this + 1));
  uint64_t v2 = (uint64_t (*)(void))***((void ***)this + 1);
  return v2();
}

uint64_t InferenceEngine::MLInferenceModel::get_output(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

void InferenceEngine::MLInferenceModel::get_all_input_names(InferenceEngine::MilInferenceModel **this@<X0>, uint64_t a2@<X8>)
{
}

void InferenceEngine::MLInferenceModel::get_all_output_names(InferenceEngine::MilInferenceModel **this@<X0>, uint64_t a2@<X8>)
{
}

uint64_t InferenceEngine::MLInferenceModel::get_model_parameters@<X0>(InferenceEngine::MilInferenceModel **this@<X0>, uint64_t a2@<X8>)
{
  return InferenceEngine::MilInferenceModel::get_model_parameters(this[1], a2);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(uint64_t a1, const std::string::value_type *a2)
{
  std::string::size_type v13 = a2;
  if (*(unsigned char *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    int v7 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v10, v7);
    uint64_t v8 = std::string::insert(&v10, 0, "cannot use operator[] with a string argument with ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
    long long v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(305, (uint64_t)&v11, exception);
  }
  uint64_t v3 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(*(void *)(a1 + 8), &v13);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 + 8 == v3) {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>();
  }
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(v4, &v13)+ 56;
}

void sub_20CECDC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t InferenceEngine::DataUtils::read_vector_from_file<float>@<X0>(void *a1@<X8>)
{
  v6[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v4);
  std::istream::tellg();
  if ((v3 & 3) != 0) {
    __assert_rtn("read_vector_from_file", "DataTensor.hpp", 217, "filesize%sizeof(T) == 0");
  }
  std::vector<float>::vector(a1, v3 >> 2);
  std::istream::seekg();
  std::istream::read();
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v4 + *(void *)(v4[0] - 24)), *(_DWORD *)&v5[*(void *)(v4[0] - 24) + 16] | 4);
  }
  v4[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](v5);
  std::istream::~istream();
  return MEMORY[0x210559500](v6);
}

void sub_20CECDE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void InferenceEngine::DataTensor::build_from_1d_array<int>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = *(const void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = operator new(8uLL);
  long long v9 = v6;
  *uint64_t v6 = (v4 - (uint64_t)v5) >> 2;
  std::string v10 = v6 + 1;
  long long v11 = v6 + 1;
  InferenceEngine::DataUtils::get_type_string<int>(&__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v8 < 0) {
    operator delete(__p);
  }
  memcpy(*(void **)(*a2 + 88), *(const void **)a1, *(void *)(*a2 + 80));
  if (v9)
  {
    std::string v10 = v9;
    operator delete(v9);
  }
}

void sub_20CECDF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[16 * v10];
    uint64_t v18 = &v14[16 * v13];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, a2);
    char v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_20CECE03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::EspressoMilInferenceModel,std::allocator<InferenceEngine::EspressoMilInferenceModel>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x118uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::EspressoMilInferenceModel>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_20CECE0A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::EspressoMilInferenceModel>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26C2192A0;
  InferenceEngine::EspressoMilInferenceModel::EspressoMilInferenceModel(a1 + 3);
  return a1;
}

void sub_20CECE100(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2192A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2192A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilInferenceModel,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x180uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_20CECE1DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26C2192D8;
  InferenceEngine::Mil2BnnsMilInferenceModel::Mil2BnnsMilInferenceModel(a1 + 3);
  return a1;
}

void sub_20CECE238(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2192D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2192D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = std::string::compare((const std::string *)(v3 + 32), *a2);
    unint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      unint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), *a2) >= 1) {
    return v2;
  }
  return v5;
}

void *InferenceEngine::DataUtils::get_type_string<int>@<X0>(void *a1@<X8>)
{
  if (std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C258], MEMORY[0x263F8C248]))
  {
    uint64_t v2 = "fp32";
  }
  else
  {
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C258], MEMORY[0x263F8C258])) {
      InferenceEngine::DataUtils::get_type_string<float>();
    }
    uint64_t v2 = "int32";
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

uint64_t std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<InferenceEngine::DataTensor>>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<InferenceEngine::DataTensor>>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<InferenceEngine::DataTensor>>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<InferenceEngine::DataTensor>>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>()
{
  __assert_rtn("operator[]", "json.hpp", 3713, "m_value.object->find(key) != m_value.object->end()");
}

uint64_t InferenceEngine::GreedyDecoderKVCachingIOProcessor::GreedyDecoderKVCachingIOProcessor(uint64_t a1, unsigned __int8 *a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, (uint64_t)a2);
  InferenceEngine::GreedyDecoderIOProcessor::GreedyDecoderIOProcessor(a1, (uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  *(void *)a1 = off_26C1EDCB8;
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "num_hidden_layers");
  int v25 = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v4, &v25);
  v21[0] = 5;
  int v22 = (uint64_t *)v25;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  uint64_t v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_hidden_layers");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  unsigned __int8 v6 = *(unsigned char *)v5;
  *(unsigned char *)uint64_t v5 = v21[0];
  v21[0] = v6;
  uint64_t v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v22;
  int v22 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  uint64_t v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "num_attention_heads");
  int v25 = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v8, &v25);
  v19[0] = 5;
  std::__fs::filesystem::path v20 = (uint64_t *)v25;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  long long v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_attention_heads");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  unsigned __int8 v10 = *(unsigned char *)v9;
  *(unsigned char *)long long v9 = v19[0];
  v19[0] = v10;
  uint64_t v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v20;
  std::__fs::filesystem::path v20 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "attention_head_size");
  int v25 = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v12, &v25);
  v17[0] = 5;
  uint64_t v18 = (uint64_t *)v25;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  char v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "attention_head_size");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  unsigned __int8 v14 = *(unsigned char *)v13;
  *(unsigned char *)char v13 = v17[0];
  v17[0] = v14;
  long long v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v18;
  uint64_t v18 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
  return a1;
}

void sub_20CECE7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  InferenceEngine::GreedyDecoderIOProcessor::~GreedyDecoderIOProcessor(v2);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::GreedyDecoderKVCachingIOProcessor::process_inputs(uint64_t a1, uint64_t a2, int a3)
{
  InferenceEngine::GreedyDecoderIOProcessor::process_inputs(a1, a2, a3);
  if (!a3)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    unsigned __int8 v6 = (unsigned __int8 *)(a1 + 24);
    uint64_t v31 = 0;
    uint64_t v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6, "num_hidden_layers");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v7, (int *)&__p);
    uint64_t data_low = SLODWORD(__p.__r_.__value_.__l.__data_);
    long long v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6, "num_attention_heads");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v9, (int *)&__p);
    uint64_t v10 = SLODWORD(__p.__r_.__value_.__l.__data_);
    uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6, "attention_head_size");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v11, (int *)&__p);
    uint64_t v12 = SLODWORD(__p.__r_.__value_.__l.__data_);
    char v13 = operator new(0x28uLL);
    uint64_t v27 = v13 + 5;
    char v28 = v13 + 5;
    void *v13 = data_low;
    v13[1] = 1;
    v13[2] = v10;
    v13[3] = 0;
    v13[4] = v12;
    __int16 v26 = v13;
    std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_key_input");
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v29, &p_p);
    long long v15 = (InferenceEngine::DataTensor *)p_p;
    unsigned __int8 v14 = v25;
    p_p = 0;
    int v25 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    InferenceEngine::DataTensor::reshape(v15, (uint64_t)&v26);
    std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_values_input");
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v29, &p_p);
    char v17 = (InferenceEngine::DataTensor *)p_p;
    uint64_t v16 = v25;
    p_p = 0;
    int v25 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    InferenceEngine::DataTensor::reshape(v17, (uint64_t)&v26);
    kaldi::quasar::Vocab::OOvWord(v15, &__p);
    p_p = &__p;
    uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = (std::__shared_weak_count *)*((void *)v18 + 6);
    *((void *)v18 + 5) = v15;
    *((void *)v18 + 6) = v14;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::Vocab::OOvWord(v17, &__p);
    p_p = &__p;
    std::__fs::filesystem::path v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = (std::__shared_weak_count *)*((void *)v20 + 6);
    *((void *)v20 + 5) = v17;
    *((void *)v20 + 6) = v16;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
    if (v29)
    {
      unint64_t v30 = v29;
      operator delete(v29);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  return 0;
}

void sub_20CECEAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20)
  {
    operator delete(a20);
    if (!v22)
    {
LABEL_7:
      if (!v21) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (!v22)
  {
    goto LABEL_7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (!v21) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  goto LABEL_9;
}

BOOL InferenceEngine::GreedyDecoderKVCachingIOProcessor::process_outputs(uint64_t a1, void *a2, int a3)
{
  v96.__r_.__value_.__l.__size_ = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "input_ids");
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v7 = (kaldi::quasar::Vocab *)*((void *)v5 + 5);
  unsigned __int8 v6 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v53 = v6;
  std::string::basic_string[abi:ne180100]<0>(&__p, "encoder_hidden_states");
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v10 = (kaldi::quasar::Vocab *)*((void *)v8 + 5);
  long long v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v52 = v9;
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_id");
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v11) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  char v13 = (InferenceEngine::DataTensor *)*((void *)v11 + 5);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v47 = v12;
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_key_input");
  unsigned __int8 v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  uint64_t v49 = v7;
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  long long v15 = (kaldi::quasar::Vocab *)*((void *)v14 + 5);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v14 + 6);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v51 = v16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_values_input");
  char v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v17) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v18 = (kaldi::quasar::Vocab *)*((void *)v17 + 5);
  uint64_t v19 = (std::__shared_weak_count *)*((void *)v17 + 6);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string v50 = v19;
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_key_output");
  std::__fs::filesystem::path v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v20) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v20 + 5), 0, (char **)v76);
  InferenceEngine::DataTensor::resize((uint64_t)v15, (uint64_t)v76);
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_values_output");
  uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v21) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v21 + 5), 0, (char **)v75);
  InferenceEngine::DataTensor::resize((uint64_t)v18, (uint64_t)v75);
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_key_output");
  int v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v22) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v23 = *((void *)v22 + 5);
  float32x4_t v73 = v15;
  std::string v74 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::DataTensor::cast_data_to_target_tensor(v23, (uint64_t *)&v73);
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_values_output");
  uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v24) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v25 = *((void *)v24 + 5);
  std::string v71 = v18;
  float32x4_t v72 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::DataTensor::cast_data_to_target_tensor(v25, (uint64_t *)&v71);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "cross_past_key_input");
  __int16 v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v26) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v27 = (std::__shared_weak_count *)*((void *)v26 + 6);
  uint64_t v46 = (kaldi::quasar::Vocab *)*((void *)v26 + 5);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "cross_past_values_input");
  char v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v28) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v29 = (kaldi::quasar::Vocab *)*((void *)v28 + 5);
  unint64_t v30 = (std::__shared_weak_count *)*((void *)v28 + 6);
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v69 = v49;
  float32x4_t v70 = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::DataTensor::cast_data_to_target_tensor((uint64_t)v13, (uint64_t *)&v69);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  InferenceEngine::DataTensor::get_2d_array<int>(v13, &v64);
  int v31 = **v64;
  memset(&__p, 0, sizeof(__p));
  uint64_t v32 = (float *)operator new(4uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
  *uint64_t v32 = (float)v31;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v32 + 1);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v32 + 1);
  float32x4_t v67 = 0;
  float32x4_t v68 = 0;
  uint64_t v66 = 0;
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
  v63.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v66 = (float **)operator new(0x18uLL);
  float32x4_t v67 = v66;
  float32x4_t v68 = v66 + 3;
  float32x4_t v67 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)&v68, (uint64_t)&__p, (uint64_t)v78, v66);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "accumulated_ids");
    uint64_t v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (!v33) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    int v35 = (InferenceEngine::DataTensor *)*((void *)v33 + 5);
    std::string::size_type size = (std::__shared_weak_count *)*((void *)v33 + 6);
    if (size) {
      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "accumulated_ids");
    int v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "bos_token_id");
    LODWORD(v58.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v36, (int *)&v58);
    *(float *)&v57.__r_.__value_.__l.__data_ = (float)SLODWORD(v58.__r_.__value_.__l.__data_);
    std::vector<float>::vector(&v63, 1uLL, &v57);
    std::vector<std::vector<float>>::vector(&v64, 1uLL, (uint64_t)&v63);
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v64, &v59);
    std::string::size_type size = (std::__shared_weak_count *)v59.__r_.__value_.__l.__size_;
    int v35 = (InferenceEngine::DataTensor *)v59.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = 0uLL;
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    if (v63.__r_.__value_.__r.__words[0])
    {
      v63.__r_.__value_.__l.__size_ = v63.__r_.__value_.__r.__words[0];
      operator delete(v63.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::get_2d_array<float>(v35, &v64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "accumulated_ids");
  uint64_t v62 = 0;
  __n128 v61 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v61, (uint64_t)v64, v65, 0xAAAAAAAAAAAAAAABLL * ((v65 - (uint64_t)v64) >> 3));
  memset(v60, 0, sizeof(v60));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v60, (uint64_t)v66, (uint64_t)v67, 0xAAAAAAAAAAAAAAABLL * ((float **)v67 - v66));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v61, v60, 1, (uint64_t *)&v63);
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v63, &v59);
  long long v37 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = 0uLL;
  if (size)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
    if (v59.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59.__r_.__value_.__l.__size_);
    }
  }
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(v49, &v63);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
  std::string::size_type v38 = v63.__r_.__value_.__r.__words[2];
  memset(&v63, 0, sizeof(v63));
  __p.__r_.__value_.__r.__words[2] = v38;
  v78[0] = v49;
  v78[1] = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::Vocab::OOvWord(v10, &v59);
  std::string v79 = v59;
  memset(&v59, 0, sizeof(v59));
  std::string v80 = v10;
  float32x4_t v81 = v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::Vocab::OOvWord(v15, &v58);
  std::string v82 = v58;
  memset(&v58, 0, sizeof(v58));
  float32x4_t v83 = v15;
  float32x4_t v84 = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::Vocab::OOvWord(v18, &v57);
  std::string v85 = v57;
  memset(&v57, 0, sizeof(v57));
  float32x4_t v86 = v18;
  float32x4_t v87 = v50;
  if (v50) {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::Vocab::OOvWord(v46, &v56);
  std::string v88 = v56;
  memset(&v56, 0, sizeof(v56));
  float32x4_t v89 = v46;
  float32x4_t v90 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::Vocab::OOvWord(v29, &v55);
  std::string v91 = v55;
  memset(&v55, 0, sizeof(v55));
  float32x4_t v92 = v29;
  float32x4_t v93 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v37, &v54);
  std::string v94 = v54;
  memset(&v54, 0, sizeof(v54));
  long long v95 = v37;
  if (*((void *)&v37 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(a2, &__p, &v96);
  uint64_t v39 = 35;
  do
  {
    float32x4_t v40 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v39 * 8);
    uint64_t v41 = (std::__shared_weak_count *)v76[v39 + 2];
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (*((char *)v40 - 17) < 0) {
      operator delete(*(v40 - 5));
    }
    v39 -= 5;
  }
  while (v39 * 8);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  float v42 = **v66;
  uint64_t v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "eos_token_id");
  LODWORD(v63.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v43, (int *)&v63);
  int data = (int)v63.__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  return v42 == (float)data;
}

void sub_20CECF618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  a63 = &a48;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::Utils::read_json_from_file@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  v13[20] = *MEMORY[0x263EF8340];
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)a1);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (a1[23] >= 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = *(char **)a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_20CD80000, LogObject, OS_LOG_TYPE_INFO, "Read json from %s", buf, 0xCu);
  }
  std::ifstream::basic_ifstream((uint64_t *)buf);
  if (!v12[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (a1[23] >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(const char **)a1;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v9, "Can't open file from %s", v8);
    MEMORY[0x210558D40](exception, &v9);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  v10[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(buf, (uint64_t)v10, 1, a2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v10);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)((char *)&v12[2] + *(void *)(*(void *)buf - 24)) | 4);
  }
  *(void *)std::string buf = *MEMORY[0x263F8C2A8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](v12);
  std::istream::~istream();
  return MEMORY[0x210559500](v13);
}

void sub_20CECFC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  v11[18] = *(void **)MEMORY[0x263EF8340];
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  v8[0] = a1;
  v8[1] = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v8, (uint64_t)v9, a3, (uint64_t)v10);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v10, 1, a4);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v11);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v9);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v8);
}

void sub_20CECFDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(v16 + 40));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&a15);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&a11);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v15);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  v15[80] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 3);
  *((void *)v5 + 3) = 0;
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_26C2194D0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_26C211338;
  v7[1].__shared_owners_ = (uint64_t)a1;
  uint64_t v12 = v7 + 1;
  char v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = (const std::ios_base *)((char *)a1 + *(void *)(v4 - 24));
  std::ios_base::fmtflags fmtflags = v8[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v8);
    uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v14);
    v8[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v15, (uint64_t)&v12, (char)fmtflags, 0);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v15, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v15);
  return a1;
}

void sub_20CED0018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, char a12)
{
  std::locale::~locale(&a11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  *(void *)&long long v8 = a1;
  *((void *)&v8 + 1) = a2;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parser(a5, &v8, (uint64_t)v9, a4);
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v9);
}

void sub_20CED0164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parse(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v33, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v34, a3, (uint64_t)v33, *(unsigned char *)(a1 + 176));
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v33);
    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    if (a2)
    {
      int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(a1 + 40);
      *(_DWORD *)(a1 + 32) = v6;
      if (v6 != 15)
      {
        uint64_t v7 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &v32);
        long long v28 = *(_OWORD *)(a1 + 64);
        uint64_t v29 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(v25, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v7, (uint64_t)&v32, (uint64_t)&v30);
        v30.__vftable = (std::exception_vtbl *)off_26C211368;
        MEMORY[0x210558DD0](v31);
        std::exception::~exception(&v30);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v39)
    {
      v23[0] = 9;
      long long v8 = (uint64_t **)&v24;
      uint64_t v24 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      unsigned __int8 v9 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v23[0];
      v23[0] = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v24;
      uint64_t v24 = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      int v11 = v23[0];
    }
    else
    {
      if (*(unsigned char *)a3 != 9)
      {
LABEL_27:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v34);
        return;
      }
      v21[0] = 0;
      long long v8 = (uint64_t **)&v22;
      uint64_t v22 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      unsigned __int8 v17 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v21[0];
      v21[0] = v17;
      uint64_t v18 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v22;
      uint64_t v22 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      int v11 = v21[0];
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v8, v11);
    goto LABEL_27;
  }
  char v12 = *(unsigned char *)(a1 + 176);
  uint64_t v34 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v37 = 0;
  char v38 = v12;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  if (a2)
  {
    int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(a1 + 40);
    *(_DWORD *)(a1 + 32) = v13;
    if (v13 != 15)
    {
      uint64_t v14 = *(void *)(a1 + 64);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &v32);
      long long v28 = *(_OWORD *)(a1 + 64);
      uint64_t v29 = *(void *)(a1 + 80);
      std::string::basic_string[abi:ne180100]<0>(v25, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
      nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v14, (uint64_t)&v32, (uint64_t)&v30);
      v30.__vftable = (std::exception_vtbl *)off_26C211368;
      MEMORY[0x210558DD0](v31);
      std::exception::~exception(&v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v37)
  {
    v19[0] = 9;
    std::__fs::filesystem::path v20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    unsigned __int8 v15 = *(unsigned char *)a3;
    *(unsigned char *)a3 = v19[0];
    v19[0] = v15;
    uint64_t v16 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + 8) = v20;
    std::__fs::filesystem::path v20 = v16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  }
  if ((void)v35)
  {
    *((void *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
}

void sub_20CED058C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::exception a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  nlohmann::detail::exception::~exception(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  int v44 = *(void **)(v42 - 200);
  if (v44)
  {
    *(void *)(v42 - 192) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

unsigned char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(unsigned char *a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = operator new(0x18uLL);
      _DWORD v3[2] = 0;
      v3[1] = 0;
      *uint64_t v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      uint64_t v3 = operator new(0x18uLL);
      v3[1] = 0;
      _DWORD v3[2] = 0;
      *uint64_t v3 = 0;
      goto LABEL_8;
    case 3:
      uint64_t v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(&byte_20D5A22AE);
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      uint64_t v3 = operator new(0x20uLL);
      v3[1] = 0;
      _DWORD v3[2] = 0;
      *uint64_t v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(void *)a1 = v3;
      break;
    default:
      *(void *)a1 = 0;
      break;
  }
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_20CED079C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parser(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  uint64_t v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(_DWORD *)(v7 + 56) = -1;
  *(unsigned char *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = &byte_20D5A22AE;
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 144) = 0;
  *(_DWORD *)(a1 + 168) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_decimal_point();
  *(unsigned char *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v8);
  return a1;
}

void sub_20CED08C0(_Unwind_Exception *a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer(v2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_decimal_point()
{
  uint64_t v0 = localeconv();
  if (!v0) {
    __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
  }
  if (v0->decimal_point) {
    return *v0->decimal_point;
  }
  else {
    return 46;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(uint64_t a1)
{
  if (!*(void *)(a1 + 24)
    && !nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::skip_bom((unsigned __int8 **)a1))
  {
    unsigned __int8 v9 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_21;
  }
  while (2)
  {
    while (1)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
      int v2 = *(_DWORD *)(a1 + 16);
      if (v2 > 31) {
        break;
      }
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        if ((v2 + 1) < 2) {
          return 15;
        }
        goto LABEL_40;
      }
    }
    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8;
        }
        if (v2 == 93) {
          return 10;
        }
        if (v2 != 102) {
          goto LABEL_40;
        }
        qmemcpy(v11, "false", 5);
        uint64_t v5 = v11;
        uint64_t v6 = a1;
        unint64_t v7 = 5;
        uint64_t v8 = 2;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          int v10 = 1819047278;
          uint64_t v5 = &v10;
          uint64_t v6 = a1;
          unint64_t v7 = 4;
          uint64_t v8 = 3;
        }
        else
        {
          if (v2 != 116) {
            goto LABEL_40;
          }
          int v12 = 1702195828;
          uint64_t v5 = &v12;
          uint64_t v6 = a1;
          unint64_t v7 = 4;
          uint64_t v8 = 1;
        }
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 == 123) {
        return 9;
      }
      if (v2 == 125) {
        return 11;
      }
LABEL_40:
      unsigned __int8 v9 = "invalid literal";
LABEL_21:
      *(void *)(a1 + 96) = v9;
      return 14;
    }
    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string(a1);
        break;
      case ',':
        uint64_t result = 13;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number(a1);
        break;
      case ':':
        uint64_t result = 12;
        break;
      default:
        goto LABEL_40;
    }
    return result;
  }
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::skip_bom(unsigned __int8 **a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(unsigned __int8 **a1)
{
  *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), vdupq_n_s64(1uLL));
  if (*((unsigned char *)a1 + 20))
  {
    *((unsigned char *)a1 + 20) = 0;
    int v2 = *((_DWORD *)a1 + 4);
  }
  else
  {
    uint64_t v3 = *a1;
    if (*a1 == a1[1])
    {
      int v2 = -1;
    }
    else
    {
      int v2 = *v3;
      *a1 = v3 + 1;
    }
    *((_DWORD *)a1 + 4) = v2;
  }
  if (v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a1[7];
  unint64_t v4 = (unint64_t)a1[8];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = a1 + 6;
    unint64_t v8 = (unint64_t)a1[6];
    unsigned __int8 v9 = &v5[-v8];
    uint64_t v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      uint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      int v13 = (unsigned __int8 *)operator new(v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[v12];
    v9[(void)v13] = v2;
    uint64_t v6 = (uint64_t)&v9[(void)v13 + 1];
    if (v5 == (unsigned __int8 *)v8)
    {
      int v13 = &v9[(void)v13];
    }
    else
    {
      unsigned __int8 v15 = &v5[~v8];
      do
      {
        unsigned __int8 v16 = *--v5;
        (v15--)[(void)v13] = v16;
      }
      while (v5 != (unsigned __int8 *)v8);
      uint64_t v5 = *v7;
    }
    a1[6] = v13;
    a1[7] = (unsigned __int8 *)v6;
    a1[8] = v14;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = v2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[7] = (unsigned __int8 *)v6;
  uint64_t result = *((unsigned int *)a1 + 4);
  if (result == 10)
  {
    uint64_t v18 = (uint64_t)(a1[5] + 1);
    a1[4] = 0;
    a1[5] = (unsigned __int8 *)v18;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (*a2 != *(unsigned __int8 *)(a1 + 16)) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal();
  }
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    unint64_t v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }
    *(void *)(a1 + 96) = "invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(a1);
  if (*(_DWORD *)(a1 + 16) != 34) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string();
  }
  while (2)
  {
    while (2)
    {
      int v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
         + 1;
      uint64_t result = 4;
      unint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          unint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          unint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          unint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          unint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          unint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          unint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          unint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          unint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          unint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          unint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          unint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          unint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          unint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          unint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          unint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          unint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          unint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          unint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          unint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          unint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          unint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          unint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          unint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          unint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          unint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          unint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          unint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          unint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          unint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          unint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          unint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          unint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
          unint64_t v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&long long v14 = 0xBF00000080;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 2;
          goto LABEL_19;
        case 225:
          long long v8 = xmmword_20D6092F0;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          long long v8 = xmmword_20D6092E0;
          goto LABEL_7;
        case 238:
          long long v8 = xmmword_20D6092D0;
LABEL_7:
          long long v14 = v8;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 4;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_20D60939C;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_20D6093B4;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_20D6093CC;
LABEL_18:
          long long v14 = *v9;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14; {
          continue;
          }
        default:
          unint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint(a1);
        if (codepoint == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            unint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000) {
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string();
          }
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          unint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        unsigned int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint(a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        unint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 96) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number(uint64_t a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(a1);
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      int v4 = 5;
    }
    else
    {
      if (v2 != 45) {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
      }
      uint64_t v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        long long v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v4 = 6;
    }
    int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }
    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(unsigned char *)(a1 + 128));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
       - 48 > 9)
    {
      long long v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    int v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(unsigned char *)(a1 + 16));
    int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    if ((v7 - 48) < 0xA)
    {
      long long v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      long long v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(unsigned char *)(a1 + 16));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      long long v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      long long v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(void *)(a1 + 96) = v14;
    return 14;
  }
  uint64_t v3 = (std::string *)(a1 + 72);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 72);
  while (1)
  {
    int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
  }
  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    int v21 = (const char **)(a1 + 72);
    uint64_t v22 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v22 = *v21;
    }
    uint64_t v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      int v21 = *(const char ***)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v21 + v24) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 104) = v23;
      return 6;
    }
  }
  else
  {
    unsigned __int8 v17 = (const char **)(a1 + 72);
    uint64_t v18 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v18 = *v17;
    }
    unint64_t v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unsigned __int8 v17 = *(const char ***)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v17 + v20) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 112) = v19;
      return 5;
    }
  }
LABEL_14:
  int v9 = (const char **)(a1 + 72);
  int v10 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    int v10 = *v9;
  }
  *(double *)(a1 + 120) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 95) < 0)
  {
    int v9 = *(const char ***)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 95);
  }
  if (__endptr != (char *)v9 + v11) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
  }
  return 7;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(uint64_t result)
{
  uint64_t v1 = (void *)(result + 32);
  uint64_t v2 = *(void *)(result + 32);
  *(unsigned char *)(result + 20) = 1;
  --*(void *)(result + 24);
  if (v2 || (v1 = (void *)(result + 40), (uint64_t v2 = *(void *)(result + 40)) != 0)) {
    void *v1 = v2 - 1;
  }
  if (*(_DWORD *)(result + 16) != -1)
  {
    uint64_t v3 = *(void *)(result + 56);
    if (*(void *)(result + 48) == v3) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget();
    }
    *(void *)(result + 56) = v3 - 1;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    **(unsigned char **)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 95) = 0;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 48);
  *(void *)(a1 + 56) = v2;
  int v3 = *(_DWORD *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 64);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    int v9 = operator new(v8);
    *int v9 = v3;
    int v5 = v9 + 1;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v9 + 1;
    *(void *)(a1 + 64) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *uint64_t v2 = v3;
    int v5 = v2 + 1;
  }
  *(void *)(a1 + 56) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 16) != 117) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint();
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  long long v8 = xmmword_20D609300;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    int v5 = *(_DWORD *)(a1 + 16);
    int v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5) {
          return 0xFFFFFFFFLL;
        }
        int v6 = v5 - 87;
      }
      else
      {
        int v6 = v5 - 55;
      }
    }
    uint64_t v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint();
  }
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range(std::string *a1, _DWORD *a2, unint64_t a3)
{
  if (a3 > 6 || ((1 << a3) & 0x54) == 0) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range();
  }
  int v6 = a1 + 3;
  std::string::push_back(a1 + 3, a1->__r_.__value_.__s.__data_[16]);
  uint64_t v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    int v8 = a1->__r_.__value_.__r.__words[2];
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid string: ill-formed UTF-8 byte";
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v4 = (long long *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v37.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v37.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 3:
        v37.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v37, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v37.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 6:
        v37.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v37.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v37, 0);
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v39);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v33);
        uint64_t v29 = std::string::insert(&v33, 0, "number overflow parsing '");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        int v31 = std::string::append(&__p, "'");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        std::string::size_type v36 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v35 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v35, (nlohmann::detail::exception *)&v37);
        uint64_t v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v39, (uint64_t)&v37);
        nlohmann::detail::exception::~exception(&v37);
        if (SHIBYTE(v36) < 0) {
          operator delete(v35[0]);
        }
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v37.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v40, &v37);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56; {
        int v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
          int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          }
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v37.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v40, &v37);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        uint64_t v9 = v41;
        if (!v41)
        {
LABEL_43:
          uint64_t v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if ((*(void *)&v40[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)))
          {
            int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v39);
              *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
              std::string::size_type v36 = *(void *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v33, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xAu, (uint64_t)&v33, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
              uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v39, (uint64_t)&v37);
              goto LABEL_61;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2)) {
              goto LABEL_56;
            }
            uint64_t v11 = v41;
            if (!v41)
            {
              int v24 = 383;
              goto LABEL_63;
            }
LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v41 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }
          break;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v25 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v39);
            *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
            std::string::size_type v36 = *(void *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v33, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xBu, (uint64_t)&v33, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
            uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v25, (uint64_t)&v39, (uint64_t)&v37);
            goto LABEL_61;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2)) {
            goto LABEL_56;
          }
          uint64_t v11 = v41;
          if (!v41)
          {
            int v24 = 439;
LABEL_63:
            __assert_rtn("sax_parse_internal", "parser.hpp", v24, "not states.empty()");
          }
          goto LABEL_30;
        }
        int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v26 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v39);
          *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
          std::string::size_type v36 = *(void *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v33, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 4u, (uint64_t)&v33, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
          uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v39, (uint64_t)&v37);
          goto LABEL_61;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        uint64_t v27 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xCu, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v39, (uint64_t)&v37);
LABEL_61:
        uint64_t v17 = v23;
        nlohmann::detail::exception::~exception(&v37);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
LABEL_44:
        if (v40) {
          operator delete(v40);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v19, (uint64_t)&v39, (uint64_t)&v37);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0x10u, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v21, (uint64_t)&v39, (uint64_t)&v37);
LABEL_49:
        uint64_t v17 = v20;
        v37.__vftable = (std::exception_vtbl *)off_26C211368;
        MEMORY[0x210558DD0](&v38);
        std::exception::~exception(&v37);
        goto LABEL_50;
    }
  }
}

void sub_20CED263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::exception a29)
{
  nlohmann::detail::exception::~exception(&a29);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  int v31 = *(void **)(v29 - 72);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  if (*(unsigned char *)(a1 + 128))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        int v6 = (void *)nlohmann::detail::parse_error::parse_error((uint64_t)exception, a4);
        break;
      case 1:
        int v8 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::invalid_iterator::invalid_iterator((uint64_t)v8, a4);
        break;
      case 2:
        uint64_t v9 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::type_error::type_error((uint64_t)v9, a4);
        break;
      case 3:
        int v10 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::out_of_range::out_of_range((uint64_t)v10, a4);
        break;
      case 4:
        uint64_t v11 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::other_error::other_error((uint64_t)v11, a4);
        break;
      default:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error();
    }
    __cxa_throw(v6, (struct type_info *)v7, (void (*)(void *))nlohmann::detail::exception::~exception);
  }
  return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 48);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v7 = 0;
      *(void *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_20CED2A00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, nlohmann::detail::exception *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v24, "parse_error");
  nlohmann::detail::exception::name(a1, &v26);
  uint64_t v8 = std::string::append(&v26, "parse error");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::parse_error::position_string((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v28, ": ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = *(char *)(a3 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)a3;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a3 + 8);
  }
  uint64_t v19 = std::string::append(&v29, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v31 = v19->__r_.__value_.__r.__words[2];
  long long v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  uint64_t v21 = *a2;
  if (v31 >= 0) {
    uint64_t v22 = (const char *)&v30;
  }
  else {
    uint64_t v22 = (const char *)v30;
  }
  nlohmann::detail::exception::exception(a4, a1, v22);
  *(void *)a4 = off_26C2112C0;
  *((void *)a4 + 4) = v21;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
}

void sub_20CED2C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a4, "syntax error ");
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>();
    long long v9 = std::string::append(&v38, " ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v40 = v9->__r_.__value_.__r.__words[2];
    long long v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v12 = HIBYTE(v40);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a4, "- ");
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a1 + 136));
    int v14 = std::string::append(&v36, "; last read: '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    long long v20 = std::string::append(&v38, "'");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v40 = v20->__r_.__value_.__r.__words[2];
    long long v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v23 = HIBYTE(v40);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      int v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2) {
      return;
    }
    goto LABEL_50;
  }
  char v25 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(v13);
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  std::string v26 = std::string::insert(&v38, 0, "unexpected ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v40 = v26->__r_.__value_.__r.__words[2];
  long long v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v28 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v28 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v29 = HIBYTE(v40);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_46;
  }
  int v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  long long v30 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(a2);
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  int64_t v31 = std::string::insert(&v38, 0, "; expected ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t v40 = v31->__r_.__value_.__r.__words[2];
  long long v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v33 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v33 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v34 = HIBYTE(v40);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_20CED2FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v4 = (std::exception_vtbl *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v38.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v38);
          goto LABEL_17;
        }
        uint64_t v29 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v40);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v34);
        long long v30 = std::string::insert(&v34, 0, "number overflow parsing '");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        long long v32 = std::string::append(&__p, "'");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v37 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v36, (nlohmann::detail::exception *)&v38);
        uint64_t v18 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        nlohmann::detail::exception::~exception(&v38);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_56:
          uint64_t v18 = 0;
          goto LABEL_37;
        }
        int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 != 11)
        {
          if (v7 != 4) {
            goto LABEL_51;
          }
          int v16 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
          v38.__vftable = v4;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (const void **)&v4->~exception, (uint64_t)&std::piecewise_construct, (long long **)&v38)+ 7);
          int v17 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        uint64_t v8 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v18 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if ((*(void *)&v41[((unint64_t)(v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v8 - 1)))
          {
            int v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
            *(_DWORD *)(a1 + 32) = v9;
            if (v9 == 13) {
              goto LABEL_31;
            }
            if (v9 != 10)
            {
              uint64_t v23 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v40);
              *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
              std::string::size_type v37 = *(void *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v34, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xAu, (uint64_t)&v34, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
              uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_55;
            }
            a2[2] -= 8;
            uint64_t v10 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            uint64_t v8 = v10 - 1;
            uint64_t v42 = v8;
            if (!v8) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v40);
            *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
            std::string::size_type v37 = *(void *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v34, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xBu, (uint64_t)&v34, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
            uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_55;
          }
          a2[2] -= 8;
          uint64_t v10 = v42;
          if (!v42)
          {
            int v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_51:
          uint64_t v27 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v40);
          *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
          std::string::size_type v37 = *(void *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v34, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 4u, (uint64_t)&v34, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
          uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_55;
        }
        unsigned int v13 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
        v38.__vftable = v4;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (const void **)&v4->~exception, (uint64_t)&std::piecewise_construct, (long long **)&v38)+ 7);
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_31:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          goto LABEL_32;
        }
LABEL_54:
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xCu, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_55:
        uint64_t v18 = v24;
        nlohmann::detail::exception::~exception(&v38);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v18;
      case 0xE:
        uint64_t v20 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v20, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v22 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0x10u, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v18 = v21;
        v38.__vftable = (std::exception_vtbl *)off_26C211368;
        MEMORY[0x210558DD0](&v39);
        std::exception::~exception(&v38);
        goto LABEL_43;
    }
  }
}

void sub_20CED38DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::exception a29)
{
  nlohmann::detail::exception::~exception(&a29);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  long long v31 = *(void **)(v29 - 88);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 40) = 1;
  if (*(unsigned char *)(a1 + 41))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        int v6 = (void *)nlohmann::detail::parse_error::parse_error((uint64_t)exception, a4);
        break;
      case 1:
        uint64_t v8 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::invalid_iterator::invalid_iterator((uint64_t)v8, a4);
        break;
      case 2:
        int v9 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::type_error::type_error((uint64_t)v9, a4);
        break;
      case 3:
        uint64_t v10 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::out_of_range::out_of_range((uint64_t)v10, a4);
        break;
      case 4:
        int v11 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::other_error::other_error((uint64_t)v11, a4);
        break;
      default:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error();
    }
    __cxa_throw(v6, (struct type_info *)v7, (void (*)(void *))nlohmann::detail::exception::~exception);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1 + 96, a3);
  *(unsigned char *)(a1 + 136) = 9;
  *(unsigned char *)(a1 + 128) = a4;
  *(void *)(a1 + 144) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  char v8 = 1;
  std::vector<BOOL>::push_back(v6, &v8);
  return a1;
}

void sub_20CED3C84(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v4);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v6);
  char v8 = *(void **)(v1 + 56);
  if (v8) {
    operator delete(v8);
  }
  if (*v2) {
    operator delete(*v2);
  }
  int v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  int v4 = (char **)(a1 + 1);
  char v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 1;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  uint64_t v6 = v5;
  int v7 = (void *)a1[2];
  unint64_t v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 - (void)*v4;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v13);
    }
    else {
      int v14 = 0;
    }
    int v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)int v15 = v6;
    int v9 = v15 + 8;
    uint64_t v18 = (char *)a1[1];
    int v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *int v7 = v5;
    int v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    uint64_t v20 = (char *)*(v9 - 1);
    if (v20)
    {
      unint64_t v21 = *v20;
      if (v21 > 2) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = qword_20D609D50[v21];
      }
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        int v25 = std::string::insert(&v27, 0, "excessive object size: ");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v29 = v25->__r_.__value_.__r.__words[2];
        long long v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_20CED3ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    uint64_t v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3);
    char v5 = *(unsigned char *)v4;
    *(unsigned char *)uint64_t v4 = v20[0];
    v20[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + 8) = v21;
    unint64_t v21 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
  }
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 != v7 - 8)
  {
    uint64_t v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      if (*v10 - 1 <= 1)
      {
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v17, (uint64_t)v10);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(&v17);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v16, *(void *)(a1[2] - 8));
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v16);
        if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v17, v16))
        {
          while (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v17) != 9)
          {
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(&v17);
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v16, *(void *)(a1[2] - 8));
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v16);
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v17, v16))
            {
              return 1;
            }
          }
          uint64_t v11 = *(unsigned __int8 **)(a1[2] - 8);
          unint64_t v13 = v17;
          long long v14 = v18;
          long long v15 = v19;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v11, &v13, v16);
        }
      }
    }
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(void *a1, long long *a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v12, (uint64_t)a2);
  char v11 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 7), &v11);
  if (v11 && *(void *)(a1[2] - 8))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)(a1 + 17));
    uint64_t v4 = *(uint64_t ***)(*(void *)(a1[2] - 8) + 8);
    long long v14 = a2;
    char v5 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)a2, (uint64_t)&std::piecewise_construct, &v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    char v6 = *((unsigned char *)v5 + 56);
    v5 += 7;
    *(unsigned char *)char v5 = v9[0];
    v9[0] = v6;
    uint64_t v7 = (uint64_t *)v5[1];
    v5[1] = (uint64_t)v10;
    uint64_t v10 = v7;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
    a1[10] = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  return 1;
}

void sub_20CED41FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = (char **)(a1 + 1);
  char v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 2;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  uint64_t v6 = v5;
  uint64_t v7 = (void *)a1[2];
  unint64_t v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 - (void)*v4;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)long long v15 = v6;
    uint64_t v9 = v15 + 8;
    long long v18 = (char *)a1[1];
    int v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v7 = v5;
    uint64_t v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    uint64_t v20 = (char *)*(v9 - 1);
    if (v20)
    {
      unint64_t v21 = *v20;
      if (v21 > 2) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = qword_20D609D50[v21];
      }
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        int v25 = std::string::insert(&v27, 0, "excessive array size: ");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v29 = v25->__r_.__value_.__r.__words[2];
        long long v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_20CED4418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v12, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    char v5 = *(unsigned char *)v4;
    *(unsigned char *)uint64_t v4 = v12[0];
    v12[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + 8) = v13;
    unint64_t v13 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
    char v3 = 0;
  }
  else
  {
    char v3 = 1;
  }
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 == v7 - 8) {
    char v3 = 1;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v10 = *(void *)(v7 - 16);
    if (*(unsigned char *)v10 == 2) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](*(void *)(v10 + 8), *(void *)(*(void *)(v10 + 8) + 8) - 16);
    }
  }
  return 1;
}

void nlohmann::detail::out_of_range::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_of_range");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = off_26C2112E8;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_20CED4698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(uint64_t a1, int a2, char a3)
{
  int v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    int v6 = *a2;
    v30[0] = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v31, v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        char v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      std::string::size_type v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          long long v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              char v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              int v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          uint64_t v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_20CED4A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = off_26C2151B0;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2105595E0);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  }
  int v3 = *result;
  if (v3 == 2)
  {
    char v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    uint64_t result = a1[2];
    if (result == v5) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    }
    return v4 + 56;
  }
  else if (a1[4])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot get value");
    nlohmann::detail::invalid_iterator::create(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_20CED4BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  if (*a2 != a1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create(202, (uint64_t)&v25, exception);
  }
  int v6 = (unsigned __int8 **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(a3, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v6);
  int v7 = *a1;
  if ((v7 - 3) < 6)
  {
    if (a2[4])
    {
      unint64_t v19 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v25, "iterator out of range");
      nlohmann::detail::invalid_iterator::create(205, (uint64_t)&v25, v19);
    }
    if (v7 == 8)
    {
      int v9 = (void **)(a1 + 8);
      std::string::size_type v8 = (void **)*((void *)a1 + 1);
      uint64_t v14 = *v8;
      if (*v8)
      {
        v8[1] = v14;
        long long v10 = v14;
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 != 3)
      {
LABEL_15:
        *a1 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
        return;
      }
      int v9 = (void **)(a1 + 8);
      std::string::size_type v8 = (void **)*((void *)a1 + 1);
      if (*((char *)v8 + 23) < 0)
      {
        long long v10 = *v8;
LABEL_13:
        operator delete(v10);
        std::string::size_type v8 = (void **)*v9;
      }
    }
    operator delete(v8);
    *int v9 = 0;
    goto LABEL_15;
  }
  if (v7 == 1)
  {
    char v15 = (uint64_t **)*((void *)a1 + 1);
    int v16 = (uint64_t *)a2[1];
    uint64_t v17 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(v15, v16);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)(v16 + 4));
    operator delete(v16);
    a3[1] = v17;
  }
  else
  {
    if (v7 != 2)
    {
      uint64_t v20 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      char v21 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:ne180100]<0>(&v24, v21);
      int v22 = std::string::insert(&v24, 0, "cannot use erase() with ");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      std::string::size_type v26 = v22->__r_.__value_.__r.__words[2];
      long long v25 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(307, (uint64_t)&v25, v20);
    }
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = (uint64_t)a2[2];
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v25, v12 + 16, *(void *)(v11 + 8), v12);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](v11, v13);
    a3[2] = v12;
  }
}

void sub_20CED4E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    v10[0] = *(unsigned char *)v5;
    uint64_t v11 = *(uint64_t **)(v5 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
    *(unsigned char *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    unsigned __int8 v7 = *(unsigned char *)a4;
    *(unsigned char *)a4 = v10[0];
    v10[0] = v7;
    std::string::size_type v8 = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v11;
    uint64_t v11 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    a4 += 16;
    v5 += 16;
  }
  while (v5 != v6);
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  unsigned __int8 v7 = *v6;
  if (!*v6)
  {
    std::string::size_type v8 = v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unsigned __int8 v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20CED512C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v30[0] = 7;
    long long v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      std::string::size_type v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          long long v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              char v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          std::string v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          std::string v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_20CED54A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = (uint64_t *)*a2;
    v30[0] = 4;
    long long v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      std::string::size_type v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          long long v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              char v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          std::string v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          std::string v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_20CED57B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    v29[0] = 0;
    char v30 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        long long v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        char v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        uint64_t v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        char v14 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v27[0];
        v27[0] = v14;
        unsigned __int8 v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + 8) = v28;
        long long v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1;
        goto LABEL_21;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(unsigned char *)unint64_t v10 = v29[0];
            *(void *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            char v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if ((v18 >> v17))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29[0];
              std::string::size_type v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              char v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              uint64_t v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              char v20 = *(unsigned char *)v19;
              *(unsigned char *)uint64_t v19 = v25[0];
              v25[0] = v20;
              unsigned __int8 v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + 8) = v26;
              std::string::size_type v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          long long v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }
        else
        {
          long long v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_20CED5AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v30[0] = 5;
    long long v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              char v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_20CED5DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v29, a2);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        long long v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        char v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        uint64_t v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        char v14 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v27[0];
        v27[0] = v14;
        unsigned __int8 v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + 8) = v28;
        long long v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1;
        goto LABEL_21;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(unsigned char *)unint64_t v10 = v29[0];
            *(void *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            char v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if ((v18 >> v17))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29[0];
              std::string::size_type v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              char v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              uint64_t v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              char v20 = *(unsigned char *)v19;
              *(unsigned char *)uint64_t v19 = v25[0];
              v25[0] = v20;
              unsigned __int8 v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + 8) = v26;
              std::string::size_type v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          long long v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }
        else
        {
          long long v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_20CED60B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v30[0] = 6;
    long long v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              char v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_20CED63BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parse_error::parse_error(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C211368;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x210558DB0](a1 + 16, a2 + 16);
  *(void *)a1 = off_26C2112C0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t nlohmann::detail::out_of_range::out_of_range(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C211368;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x210558DB0](a1 + 16, a2 + 16);
  *(void *)a1 = off_26C2112E8;
  return a1;
}

uint64_t nlohmann::detail::invalid_iterator::invalid_iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C211368;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x210558DB0](a1 + 16, a2 + 16);
  *(void *)a1 = off_26C211310;
  return a1;
}

uint64_t nlohmann::detail::type_error::type_error(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C211368;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x210558DB0](a1 + 16, a2 + 16);
  *(void *)a1 = off_26C211270;
  return a1;
}

uint64_t nlohmann::detail::other_error::other_error(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C211368;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x210558DB0](a1 + 16, a2 + 16);
  *(void *)a1 = off_26C211298;
  return a1;
}

void nlohmann::detail::parse_error::~parse_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_26C211368;
  MEMORY[0x210558DD0](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x2105595E0);
}

void nlohmann::detail::parse_error::position_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v12, *(void *)(a1 + 16) + 1);
  uint64_t v4 = std::string::insert(&v12, 0, " at line ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v13, ", column ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(void *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_20CED6790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 25) < 0) {
    operator delete(*(void **)(v26 - 48));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

const char *nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(unsigned int a1)
{
  if (a1 > 0x10) {
    return "unknown token";
  }
  else {
    return off_2641054E0[a1];
  }
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((void *)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  LOBYTE(v26) = 1;
  uint64_t v4 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26);
  unint64_t v5 = a1[3];
  uint64_t v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      std::string v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v12);
    }
    else {
      std::string v13 = 0;
    }
    std::string v14 = (uint64_t *)&v13[8 * v9];
    unsigned __int8 v15 = &v13[8 * v12];
    *std::string v14 = v4;
    long long v7 = v14 + 1;
    uint64_t v17 = (char *)a1[1];
    uint64_t v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--std::string v14 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    long long v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_20D609D50[v19];
    }
    if (v20 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v25, a2);
      long long v23 = std::string::insert(&v25, 0, "excessive object size: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v27 = v23->__r_.__value_.__r.__words[2];
      long long v26 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v26, exception);
    }
  }
  return 1;
}

void sub_20CED6A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  LOBYTE(v26) = 2;
  uint64_t v4 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26);
  unint64_t v5 = a1[3];
  uint64_t v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      std::string v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v12);
    }
    else {
      std::string v13 = 0;
    }
    std::string v14 = (uint64_t *)&v13[8 * v9];
    unsigned __int8 v15 = &v13[8 * v12];
    *std::string v14 = v4;
    long long v7 = v14 + 1;
    uint64_t v17 = (char *)a1[1];
    uint64_t v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--std::string v14 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    long long v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_20D609D50[v19];
    }
    if (v20 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v25, a2);
      long long v23 = std::string::insert(&v25, 0, "excessive array size: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v27 = v23->__r_.__value_.__r.__words[2];
      long long v26 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v26, exception);
    }
  }
  return 1;
}

void sub_20CED6C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    int v9 = *a2;
    v20[0] = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v21, v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    uint64_t v10 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    unsigned __int8 v11 = *(unsigned char *)v10;
    *(unsigned char *)uint64_t v10 = v20[0];
    v20[0] = v11;
    unint64_t v12 = *(uint64_t **)(v10 + 8);
    *(void *)(v10 + 8) = v21;
    unsigned __int8 v21 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(v6, a2);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>((uint64_t)v6, a2);
        uint64_t v8 = v7 + 16;
      }
      v6[1] = v8;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      int v14 = *a2;
      v18[0] = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v19, v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      uint64_t v15 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      unsigned __int8 v16 = *(unsigned char *)v15;
      *(unsigned char *)uint64_t v15 = v18[0];
      v18[0] = v16;
      uint64_t v17 = *(uint64_t **)(v15 + 8);
      *(void *)(v15 + 8) = v19;
      unint64_t v19 = v17;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  uint64_t v3 = *(unsigned char **)(a1 + 8);
  *uint64_t v3 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v3 + 8, v4);
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  *(void *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_20CED6E7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned __int8 v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unsigned __int8 v16 = v11;
  uint64_t v17 = &v10[16 * v9];
  int v12 = *a2;
  char *v11 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v11 + 8, v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  v16 += 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_20CED6F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 7;
    int v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    uint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    int v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 7;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 7;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 7;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_20CED7204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 4;
    int v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    uint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    int v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 4;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 4;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 4;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_20CED74A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  if (a1[1] == v2)
  {
    v17[0] = 0;
    uint64_t v18 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    uint64_t v8 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    unsigned __int8 v9 = *(unsigned char *)v8;
    *(unsigned char *)uint64_t v8 = v17[0];
    v17[0] = v9;
    uint64_t v10 = *(uint64_t **)(v8 + 8);
    *(void *)(v8 + 8) = v18;
    uint64_t v18 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
    return *a1;
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 **)(v2 - 8);
    int v4 = *v3;
    if (v4 == 2)
    {
      unint64_t v5 = (uint64_t *)*((void *)v3 + 1);
      unint64_t v6 = v5[1];
      if (v6 >= v5[2])
      {
        uint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(v5);
      }
      else
      {
        *(unsigned char *)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        uint64_t v7 = v6 + 16;
      }
      v5[1] = v7;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v4 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      v15[0] = 0;
      uint64_t v16 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      uint64_t v12 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      unsigned __int8 v13 = *(unsigned char *)v12;
      *(unsigned char *)uint64_t v12 = v15[0];
      v15[0] = v13;
      uint64_t v14 = *(uint64_t **)(v12 + 8);
      *(void *)(v12 + 8) = v16;
      uint64_t v16 = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2] - v2;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  v13[4] = a1 + 2;
  uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v5, v7);
  uint64_t v9 = (uint64_t)&v8[16 * v3];
  v13[0] = v8;
  v13[1] = v9;
  v13[3] = &v8[16 * v10];
  *(unsigned char *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  v13[2] = v9 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v13);
  return v11;
}

void sub_20CED7710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 5;
    int v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    unsigned __int8 v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    int v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    unint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 5;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 5;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 5;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_20CED79B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v15, a2);
    uint64_t v7 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    unsigned __int8 v8 = *(unsigned char *)v7;
    *(unsigned char *)uint64_t v7 = v15[0];
    v15[0] = v8;
    unint64_t v9 = *(uint64_t **)(v7 + 8);
    *(void *)(v7 + 8) = v16;
    uint64_t v16 = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(uint64_t ***)(v3 - 8);
    int v5 = *(unsigned __int8 *)v4;
    if (v5 == 2)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(v4[1], a2);
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v13, a2);
      uint64_t v10 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      unsigned __int8 v11 = *(unsigned char *)v10;
      *(unsigned char *)uint64_t v10 = v13[0];
      v13[0] = v11;
      uint64_t v12 = *(uint64_t **)(v10 + 8);
      *(void *)(v10 + 8) = v14;
      uint64_t v14 = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[16 * v9];
    uint64_t v18 = &v13[16 * v12];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v16, a2);
    unsigned __int8 v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_20CED7BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 6;
    int v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    uint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    int v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      unint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 6;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 6;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 6;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_20CED7EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  v8[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(a4, a1, (uint64_t)v8, a3);
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v8);
}

void sub_20CED7F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v33, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v34, a3, (uint64_t)v33, *(unsigned char *)(a1 + 176));
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v33);
    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    if (a2)
    {
      int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((nlohmann::detail::input_stream_adapter *)(a1 + 40));
      *(_DWORD *)(a1 + 32) = v6;
      if (v6 != 15)
      {
        uint64_t v7 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &v32);
        long long v28 = *(_OWORD *)(a1 + 64);
        uint64_t v29 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(v25, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v7, (uint64_t)&v32, (uint64_t)&v30);
        v30.__vftable = (std::exception_vtbl *)off_26C211368;
        MEMORY[0x210558DD0](v31);
        std::exception::~exception(&v30);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v39)
    {
      v23[0] = 9;
      uint64_t v8 = (uint64_t **)&v24;
      uint64_t v24 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      unsigned __int8 v9 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v23[0];
      v23[0] = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v24;
      uint64_t v24 = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      int v11 = v23[0];
    }
    else
    {
      if (*(unsigned char *)a3 != 9)
      {
LABEL_27:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v34);
        return;
      }
      v21[0] = 0;
      uint64_t v8 = (uint64_t **)&v22;
      uint64_t v22 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      unsigned __int8 v17 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v21[0];
      v21[0] = v17;
      uint64_t v18 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v22;
      uint64_t v22 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      int v11 = v21[0];
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v8, v11);
    goto LABEL_27;
  }
  char v12 = *(unsigned char *)(a1 + 176);
  uint64_t v34 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v37 = 0;
  char v38 = v12;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  if (a2)
  {
    int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((nlohmann::detail::input_stream_adapter *)(a1 + 40));
    *(_DWORD *)(a1 + 32) = v13;
    if (v13 != 15)
    {
      uint64_t v14 = *(void *)(a1 + 64);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &v32);
      long long v28 = *(_OWORD *)(a1 + 64);
      uint64_t v29 = *(void *)(a1 + 80);
      std::string::basic_string[abi:ne180100]<0>(v25, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
      nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v14, (uint64_t)&v32, (uint64_t)&v30);
      v30.__vftable = (std::exception_vtbl *)off_26C211368;
      MEMORY[0x210558DD0](v31);
      std::exception::~exception(&v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v37)
  {
    v19[0] = 9;
    unint64_t v20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    unsigned __int8 v15 = *(unsigned char *)a3;
    *(unsigned char *)a3 = v19[0];
    v19[0] = v15;
    uint64_t v16 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + 8) = v20;
    unint64_t v20 = v16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  }
  if ((void)v35)
  {
    *((void *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
}

void sub_20CED836C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::exception a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  nlohmann::detail::exception::~exception(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  int v44 = *(void **)(v42 - 200);
  if (v44)
  {
    *(void *)(v42 - 192) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)a2;
  uint64_t v8 = (nlohmann::detail::input_stream_adapter *)(v7 + 40);
  *(_DWORD *)(v7 + 32) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(v7 + 56) = -1;
  *(unsigned char *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = &byte_20D5A22AE;
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 144) = 0;
  *(_DWORD *)(v7 + 168) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_decimal_point();
  *((unsigned char *)v8 + 136) = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v8);
  return a1;
}

void sub_20CED8504(_Unwind_Exception *a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(nlohmann::detail::input_stream_adapter *this)
{
  if (!*((void *)this + 3)
    && !nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(this))
  {
    unsigned __int8 v9 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_21;
  }
  while (2)
  {
    while (1)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      int v2 = *((_DWORD *)this + 4);
      if (v2 > 31) {
        break;
      }
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        if ((v2 + 1) < 2) {
          return 15;
        }
        goto LABEL_40;
      }
    }
    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8;
        }
        if (v2 == 93) {
          return 10;
        }
        if (v2 != 102) {
          goto LABEL_40;
        }
        qmemcpy(v11, "false", 5);
        unint64_t v5 = v11;
        int v6 = this;
        unint64_t v7 = 5;
        uint64_t v8 = 2;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          int v10 = 1819047278;
          unint64_t v5 = &v10;
          int v6 = this;
          unint64_t v7 = 4;
          uint64_t v8 = 3;
        }
        else
        {
          if (v2 != 116) {
            goto LABEL_40;
          }
          int v12 = 1702195828;
          unint64_t v5 = &v12;
          int v6 = this;
          unint64_t v7 = 4;
          uint64_t v8 = 1;
        }
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 == 123) {
        return 9;
      }
      if (v2 == 125) {
        return 11;
      }
LABEL_40:
      unsigned __int8 v9 = "invalid literal";
LABEL_21:
      *((void *)this + 12) = v9;
      return 14;
    }
    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string((uint64_t)this);
        break;
      case ',':
        uint64_t result = 13;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number((uint64_t)this);
        break;
      case ':':
        uint64_t result = 12;
        break;
      default:
        goto LABEL_40;
    }
    return result;
  }
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(nlohmann::detail::input_stream_adapter *a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(nlohmann::detail::input_stream_adapter *this)
{
  *(int64x2_t *)((char *)this + 24) = vaddq_s64(*(int64x2_t *)((char *)this + 24), vdupq_n_s64(1uLL));
  if (*((unsigned char *)this + 20))
  {
    *((unsigned char *)this + 20) = 0;
    int character = *((_DWORD *)this + 4);
  }
  else
  {
    int character = nlohmann::detail::input_stream_adapter::get_character(this);
    *((_DWORD *)this + 4) = character;
  }
  if (character == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (unsigned char *)*((void *)this + 7);
  unint64_t v3 = *((void *)this + 8);
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = *((void *)this + 6);
    unint64_t v7 = &v4[-v6];
    uint64_t v8 = (uint64_t)&v4[-v6 + 1];
    if (v8 < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v3 - v6;
    if (2 * v9 > v8) {
      uint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      int v11 = operator new(v10);
    }
    else {
      int v11 = 0;
    }
    int v12 = &v11[v10];
    v7[(void)v11] = character;
    uint64_t v5 = (uint64_t)&v7[(void)v11 + 1];
    if (v4 == (unsigned char *)v6)
    {
      int v11 = &v7[(void)v11];
    }
    else
    {
      int v13 = &v4[~v6];
      do
      {
        char v14 = *--v4;
        (v13--)[(void)v11] = v14;
      }
      while (v4 != (unsigned char *)v6);
      uint64_t v4 = (unsigned char *)*((void *)this + 6);
    }
    *((void *)this + 6) = v11;
    *((void *)this + 7) = v5;
    *((void *)this + 8) = v12;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v4 = character;
    uint64_t v5 = (uint64_t)(v4 + 1);
  }
  *((void *)this + 7) = v5;
  uint64_t result = *((unsigned int *)this + 4);
  if (result == 10)
  {
    uint64_t v16 = *((void *)this + 5) + 1;
    *((void *)this + 4) = 0;
    *((void *)this + 5) = v16;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(nlohmann::detail::input_stream_adapter *this, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (*a2 != *((unsigned __int8 *)this + 16)) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal();
  }
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    unint64_t v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }
    *((void *)this + 12) = "invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(a1);
  if (*(_DWORD *)(a1 + 16) != 34) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string();
  }
  while (2)
  {
    while (2)
    {
      int v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
         + 1;
      uint64_t result = 4;
      uint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          uint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          uint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          uint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          uint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          uint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          uint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          uint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          uint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          uint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          uint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          uint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          uint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          uint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          uint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          uint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          uint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          uint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          uint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          uint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          uint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          uint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          uint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          uint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          uint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          uint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          uint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          uint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          uint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          uint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          uint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          uint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          uint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
          uint64_t v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&long long v14 = 0xBF00000080;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 2;
          goto LABEL_19;
        case 225:
          long long v8 = xmmword_20D6092F0;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          long long v8 = xmmword_20D6092E0;
          goto LABEL_7;
        case 238:
          long long v8 = xmmword_20D6092D0;
LABEL_7:
          long long v14 = v8;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 4;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_20D60939C;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_20D6093B4;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_20D6093CC;
LABEL_18:
          long long v14 = *v9;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14; {
          continue;
          }
        default:
          uint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((nlohmann::detail::input_stream_adapter *)a1);
        if (codepoint == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            uint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000) {
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string();
          }
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1) != 117)
        {
LABEL_86:
          uint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        unsigned int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((nlohmann::detail::input_stream_adapter *)a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        uint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 96) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number(uint64_t a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(a1);
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      int v4 = 5;
    }
    else
    {
      if (v2 != 45) {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
      }
      unint64_t v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        long long v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v4 = 6;
    }
    int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }
    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(unsigned char *)(a1 + 128));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
       - 48 > 9)
    {
      long long v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    int v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(unsigned char *)(a1 + 16));
    int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    if ((v7 - 48) < 0xA)
    {
      long long v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      long long v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(unsigned char *)(a1 + 16));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      long long v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      long long v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(void *)(a1 + 96) = v14;
    return 14;
  }
  unint64_t v3 = (std::string *)(a1 + 72);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 72);
  while (1)
  {
    int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
  }
  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    unsigned __int8 v21 = (const char **)(a1 + 72);
    uint64_t v22 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v22 = *v21;
    }
    uint64_t v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unsigned __int8 v21 = *(const char ***)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v21 + v24) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 104) = v23;
      return 6;
    }
  }
  else
  {
    unsigned __int8 v17 = (const char **)(a1 + 72);
    uint64_t v18 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v18 = *v17;
    }
    unint64_t v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unsigned __int8 v17 = *(const char ***)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v17 + v20) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 112) = v19;
      return 5;
    }
  }
LABEL_14:
  int v9 = (const char **)(a1 + 72);
  int v10 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    int v10 = *v9;
  }
  *(double *)(a1 + 120) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 95) < 0)
  {
    int v9 = *(const char ***)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 95);
  }
  if (__endptr != (char *)v9 + v11) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
  }
  return 7;
}

uint64_t nlohmann::detail::input_stream_adapter::get_character(nlohmann::detail::input_stream_adapter *this)
{
  int v2 = (void *)*((void *)this + 1);
  unint64_t v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v2 + 80))(v2);
    if (result == -1)
    {
      int v5 = (std::ios_base *)(*(void *)this + *(void *)(**(void **)this - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 2);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v2[3] = v3 + 1;
    return *v3;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint(nlohmann::detail::input_stream_adapter *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 4) != 117) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint();
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  long long v8 = xmmword_20D609300;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
    int v5 = *((_DWORD *)this + 4);
    int v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5) {
          return 0xFFFFFFFFLL;
        }
        int v6 = v5 - 87;
      }
      else
      {
        int v6 = v5 - 55;
      }
    }
    uint64_t v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint();
  }
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(std::string *a1, _DWORD *a2, unint64_t a3)
{
  if (a3 > 6 || ((1 << a3) & 0x54) == 0) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range();
  }
  int v6 = a1 + 3;
  std::string::push_back(a1 + 3, a1->__r_.__value_.__s.__data_[16]);
  int v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    int v8 = a1->__r_.__value_.__r.__words[2];
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid string: ill-formed UTF-8 byte";
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = this[6];
  if (v2)
  {
    this[7] = v2;
    operator delete(v2);
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)this);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v4 = (long long *)(a1 + 112);
  int v5 = (nlohmann::detail::input_stream_adapter *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v37.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v37.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 3:
        v37.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v37, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v37.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 6:
        v37.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v37.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v37, 0);
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v39);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v33);
        uint64_t v29 = std::string::insert(&v33, 0, "number overflow parsing '");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        long long v31 = std::string::append(&__p, "'");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        std::string::size_type v36 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v35 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v35, (nlohmann::detail::exception *)&v37);
        uint64_t v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v39, (uint64_t)&v37);
        nlohmann::detail::exception::~exception(&v37);
        if (SHIBYTE(v36) < 0) {
          operator delete(v35[0]);
        }
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v37.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v40, &v37);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56; {
        int v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
          int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          }
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v37.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v40, &v37);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        uint64_t v9 = v41;
        if (!v41)
        {
LABEL_43:
          uint64_t v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if ((*(void *)&v40[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)))
          {
            int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v39);
              *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
              std::string::size_type v36 = *(void *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v33, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xAu, (uint64_t)&v33, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
              uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v39, (uint64_t)&v37);
              goto LABEL_61;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2)) {
              goto LABEL_56;
            }
            uint64_t v11 = v41;
            if (!v41)
            {
              int v24 = 383;
              goto LABEL_63;
            }
LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v41 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }
          break;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v25 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v39);
            *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
            std::string::size_type v36 = *(void *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v33, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xBu, (uint64_t)&v33, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
            uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v25, (uint64_t)&v39, (uint64_t)&v37);
            goto LABEL_61;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2)) {
            goto LABEL_56;
          }
          uint64_t v11 = v41;
          if (!v41)
          {
            int v24 = 439;
LABEL_63:
            __assert_rtn("sax_parse_internal", "parser.hpp", v24, "not states.empty()");
          }
          goto LABEL_30;
        }
        int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v26 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v39);
          *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
          std::string::size_type v36 = *(void *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v33, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 4u, (uint64_t)&v33, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
          uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v39, (uint64_t)&v37);
          goto LABEL_61;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        uint64_t v27 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xCu, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v39, (uint64_t)&v37);
LABEL_61:
        uint64_t v17 = v23;
        nlohmann::detail::exception::~exception(&v37);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
LABEL_44:
        if (v40) {
          operator delete(v40);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v19, (uint64_t)&v39, (uint64_t)&v37);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0x10u, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v21, (uint64_t)&v39, (uint64_t)&v37);
LABEL_49:
        uint64_t v17 = v20;
        v37.__vftable = (std::exception_vtbl *)off_26C211368;
        MEMORY[0x210558DD0](&v38);
        std::exception::~exception(&v37);
        goto LABEL_50;
    }
  }
}

void sub_20CEDA0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::exception a29)
{
  nlohmann::detail::exception::~exception(&a29);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  long long v31 = *(void **)(v29 - 72);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v4 = (std::exception_vtbl *)(a1 + 112);
  int v5 = (nlohmann::detail::input_stream_adapter *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v38.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v38);
          goto LABEL_17;
        }
        uint64_t v29 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v40);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v34);
        long long v30 = std::string::insert(&v34, 0, "number overflow parsing '");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        long long v32 = std::string::append(&__p, "'");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v37 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string::size_type v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v36, (nlohmann::detail::exception *)&v38);
        uint64_t v18 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        nlohmann::detail::exception::~exception(&v38);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_56:
          uint64_t v18 = 0;
          goto LABEL_37;
        }
        int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 != 11)
        {
          if (v7 != 4) {
            goto LABEL_51;
          }
          int v16 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
          v38.__vftable = v4;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (const void **)&v4->~exception, (uint64_t)&std::piecewise_construct, (long long **)&v38)+ 7);
          int v17 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        uint64_t v8 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v18 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if ((*(void *)&v41[((unint64_t)(v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v8 - 1)))
          {
            int v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v9;
            if (v9 == 13) {
              goto LABEL_31;
            }
            if (v9 != 10)
            {
              uint64_t v23 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v40);
              *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
              std::string::size_type v37 = *(void *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v34, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xAu, (uint64_t)&v34, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
              uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_55;
            }
            a2[2] -= 8;
            uint64_t v10 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            uint64_t v8 = v10 - 1;
            uint64_t v42 = v8;
            if (!v8) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v40);
            *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
            std::string::size_type v37 = *(void *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v34, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xBu, (uint64_t)&v34, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
            uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_55;
          }
          a2[2] -= 8;
          uint64_t v10 = v42;
          if (!v42)
          {
            int v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_51:
          uint64_t v27 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v40);
          *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
          std::string::size_type v37 = *(void *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v34, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 4u, (uint64_t)&v34, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
          uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_55;
        }
        int v13 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
        v38.__vftable = v4;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (const void **)&v4->~exception, (uint64_t)&std::piecewise_construct, (long long **)&v38)+ 7);
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_31:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_32;
        }
LABEL_54:
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v40);
        *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xCu, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_55:
        uint64_t v18 = v24;
        nlohmann::detail::exception::~exception(&v38);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v18;
      case 0xE:
        uint64_t v20 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v40);
        *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v20, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v22 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v40);
        *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0x10u, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v18 = v21;
        v38.__vftable = (std::exception_vtbl *)off_26C211368;
        MEMORY[0x210558DD0](&v39);
        std::exception::~exception(&v38);
        goto LABEL_43;
    }
  }
}

void sub_20CEDAA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::exception a29)
{
  nlohmann::detail::exception::~exception(&a29);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  long long v31 = *(void **)(v29 - 88);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void nlohmann::detail::input_stream_adapter::~input_stream_adapter(nlohmann::detail::input_stream_adapter *this)
{
  if (*(void *)this) {
    std::ios_base::clear((std::ios_base *)(*(void *)this + *(void *)(**(void **)this - 24)), *(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32) & 2);
  }
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void ***a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(*(unsigned char *)a2)
  {
    case 0:
      int v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 1:
      uint64_t v12 = (uint64_t)**a1;
      if (!*(void *)(*(void *)(a2 + 8) + 16))
      {
        uint64_t v45 = *(uint64_t (**)(void))(v12 + 8);
        goto LABEL_52;
      }
      if (a3)
      {
        (*(void (**)(void))(v12 + 8))();
        unsigned int v13 = a6 + a5;
        int v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v15 = (unint64_t)a1[77];
          if (v15 >= v13) {
            goto LABEL_7;
          }
        }
        else
        {
          unint64_t v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            int v16 = *(void **)(a2 + 8);
            int v17 = (void *)*v16;
            if (v16[2] == 1)
            {
              uint64_t v18 = (void *)*v16;
            }
            else
            {
              unint64_t v67 = 0;
              do
              {
                float32x4_t v68 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  float32x4_t v68 = (void ***)*v14;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v68, (a6 + a5));
                ((void (*)(void))***a1)();
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                uint64_t v69 = (void *)v17[1];
                if (v69)
                {
                  do
                  {
                    uint64_t v18 = v69;
                    uint64_t v69 = (void *)*v69;
                  }
                  while (v69);
                }
                else
                {
                  do
                  {
                    uint64_t v18 = (void *)v17[2];
                    BOOL v51 = *v18 == (void)v17;
                    int v17 = v18;
                  }
                  while (!v51);
                }
                ++v67;
                int v16 = *(void **)(a2 + 8);
                int v17 = v18;
              }
              while (v67 < v16[2] - 1);
            }
            float32x4_t v70 = v16 + 1;
            if (v18 == v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            std::string v71 = (void *)v18[1];
            if (v71)
            {
              do
              {
                float32x4_t v72 = v71;
                std::string v71 = (void *)*v71;
              }
              while (v71);
            }
            else
            {
              std::string v74 = v18;
              do
              {
                float32x4_t v72 = (void *)v74[2];
                BOOL v51 = *v72 == (void)v74;
                std::string v74 = v72;
              }
              while (!v51);
            }
            if (v72 != v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            float32x4_t v75 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              float32x4_t v75 = (void ***)*v14;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v75, (a6 + a5));
            ((void (*)(void))***a1)();
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            uint64_t v66 = (void (*)(void))(**a1)[1];
            goto LABEL_121;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*(void (**)(void))v12)();
      uint64_t v46 = *(void *)(a2 + 8);
      uint64_t v47 = *(void **)v46;
      if (*(void *)(v46 + 16) != 1)
      {
        unint64_t v48 = 0;
        do
        {
          ((void (*)(void, uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
          ((void (*)(void))***a1)();
          uint64_t v49 = (void *)v47[1];
          std::string v50 = v47;
          if (v49)
          {
            do
            {
              uint64_t v47 = v49;
              uint64_t v49 = (void *)*v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              uint64_t v47 = (void *)v50[2];
              BOOL v51 = *v47 == (void)v50;
              std::string v50 = v47;
            }
            while (!v51);
          }
          ++v48;
          uint64_t v46 = *(void *)(a2 + 8);
        }
        while (v48 < *(void *)(v46 + 16) - 1);
      }
      std::string::size_type v52 = (void *)(v46 + 8);
      if (v47 == v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      uint64_t v53 = (void *)v47[1];
      if (v53)
      {
        do
        {
          std::string v54 = v53;
          uint64_t v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        float32x4_t v73 = v47;
        do
        {
          std::string v54 = (void *)v73[2];
          BOOL v51 = *v54 == (void)v73;
          float32x4_t v73 = v54;
        }
        while (!v51);
      }
      if (v54 != v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      ((void (*)(void, uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
LABEL_122:
      int v11 = (uint64_t (*)(void))***a1;
LABEL_123:
      return v11();
    case 2:
      uint64_t v19 = (void (**)(void))**a1;
      if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
      {
        if (!a3)
        {
          (*v19)();
          std::string v55 = *(uint64_t **)(a2 + 8);
          uint64_t v57 = *v55;
          uint64_t v56 = v55[1];
          if (v57 == v56 - 16)
          {
            uint64_t v58 = v57;
          }
          else
          {
            uint64_t v58 = v57;
            do
            {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
              ((void (*)(void))***a1)();
              v58 += 16;
              std::string v59 = *(uint64_t **)(a2 + 8);
              uint64_t v56 = v59[1];
            }
            while (v58 != v56 - 16);
            uint64_t v57 = *v59;
          }
          if (v57 == v56) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
          goto LABEL_108;
        }
        v19[1]();
        unsigned int v20 = a6 + a5;
        uint64_t v21 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v22 = (unint64_t)a1[77];
          if (v22 >= v20) {
            goto LABEL_13;
          }
        }
        else
        {
          unint64_t v22 = *((unsigned __int8 *)a1 + 631);
          if (v20 <= v22)
          {
LABEL_13:
            uint64_t v23 = *(uint64_t **)(a2 + 8);
            uint64_t v25 = *v23;
            uint64_t v24 = v23[1];
            if (v25 != v24 - 16)
            {
              do
              {
                uint64_t v26 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  uint64_t v26 = (void ***)*v21;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v26, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v25, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v25 += 16;
                uint64_t v27 = *(uint64_t **)(a2 + 8);
                uint64_t v24 = v27[1];
              }
              while (v25 != v24 - 16);
              uint64_t v25 = *v27;
            }
            if (v25 == v24) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            uint64_t v28 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              uint64_t v28 = (void ***)*v21;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v28, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            if (*((char *)a1 + 631) < 0) {
              uint64_t v21 = (void *)*v21;
            }
            ((void (*)(void, void *, void))(**a1)[1])(*a1, v21, a6);
LABEL_108:
            int v11 = (uint64_t (*)(void))***a1;
            goto LABEL_123;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v22, 32);
        goto LABEL_13;
      }
      uint64_t v45 = (uint64_t (*)(void))v19[1];
LABEL_52:
      return v45();
    case 3:
      ((void (*)(void))***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      int v11 = (uint64_t (*)(void))***a1;
      goto LABEL_123;
    case 4:
      int v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 5:
      unint64_t v29 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>((uint64_t (****)(void))a1, v29);
    case 6:
      unint64_t v31 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>((uint64_t (****)(void))a1, v31);
    case 7:
      double v32 = *(double *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, v32);
    case 8:
      long long v33 = (void (*)(void))(**a1)[1];
      if (a3)
      {
        v33();
        uint64_t v34 = (a6 + a5);
        long long v35 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v36 = (unint64_t)a1[77];
          if (v36 >= v34)
          {
            std::string::size_type v37 = (uint64_t (***)(void))*a1;
            goto LABEL_73;
          }
        }
        else
        {
          unint64_t v36 = *((unsigned __int8 *)a1 + 631);
          if (v34 <= v36)
          {
            std::string::size_type v37 = (uint64_t (***)(void))*a1;
            std::exception v38 = a1 + 76;
            goto LABEL_74;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v36, 32);
        std::string::size_type v37 = (uint64_t (***)(void))*a1;
        std::exception v38 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_74:
          ((void (*)(uint64_t (***)(void), void ***, uint64_t))(*v37)[1])(v37, v38, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          uint64_t v60 = *(unsigned __int8 ***)(a2 + 8);
          uint64_t v62 = *v60;
          __n128 v61 = v60[1];
          if (v62 != v61)
          {
            if (v62 != v61 - 1)
            {
              do
              {
                unsigned int v63 = *v62++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v63);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v62 != (unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v62);
          }
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          uint64_t v64 = a1 + 76;
          if (*((char *)a1 + 631) < 0) {
            uint64_t v64 = (void ***)*v35;
          }
          ((void (*)(void, void ***, uint64_t))(**a1)[1])(*a1, v64, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          uint64_t v65 = *(void *)(a2 + 8);
          if (*(unsigned char *)(v65 + 25)) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v65 + 24));
          }
          else {
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          }
          ((void (*)(void, uint64_t))***a1)(*a1, 10);
          uint64_t v66 = (void (*)(void))(**a1)[1];
LABEL_121:
          v66();
          goto LABEL_122;
        }
LABEL_73:
        std::exception v38 = (void ***)*v35;
        goto LABEL_74;
      }
      v33();
      uint64_t v39 = *(unsigned __int8 ***)(a2 + 8);
      uint64_t v41 = *v39;
      std::string v40 = v39[1];
      if (v41 != v40)
      {
        while (v41 != v40 - 1)
        {
          unsigned int v42 = *v41++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v42);
          ((void (*)(void, uint64_t))***a1)(*a1, 44);
          std::string v40 = *(unsigned __int8 **)(*(void *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v41);
      }
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      uint64_t v43 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v43 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v43 + 24));
        int v44 = (uint64_t (*)(void))***a1;
        return v44();
      }
      int v11 = (uint64_t (*)(void))(**a1)[1];
LABEL_83:
      return v11();
    case 9:
      int v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2194D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2194D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character()
{
  return std::ostream::put();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters()
{
  return std::ostream::write();
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  int v7 = localeconv();
  *(void *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep) {
    LOBYTE(thousands_sep) = *thousands_sep;
  }
  *(unsigned char *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point) {
    LOBYTE(decimal_point) = *decimal_point;
  }
  *(_OWORD *)(a1 + 90) = 0u;
  *(unsigned char *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(unsigned char *)(a1 + 602) = a3;
  uint64_t v10 = (int8x16_t *)operator new(0x208uLL);
  *(void *)(a1 + 608) = v10;
  *(void *)(a1 + 624) = 0x8000000000000208;
  int8x16_t v11 = vdupq_n_s8(a3);
  *(void *)(a1 + 616) = 512;
  *uint64_t v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  void v10[4] = v11;
  void v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  char v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_20CEDBEB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  char v46 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (!v4) {
    return result;
  }
  int v7 = (void *)result;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v47[0] = 0;
  uint64_t v12 = result + 90;
  do
  {
    if (v3) {
      unsigned int v13 = (uint64_t *)*a2;
    }
    else {
      unsigned int v13 = a2;
    }
    int v14 = *((unsigned __int8 *)v13 + v8);
    uint64_t result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v46, v47, v14);
    if (result == 1)
    {
      int v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          char v45 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v38, v8);
          uint64_t v28 = std::string::insert(&v38, 0, "invalid UTF-8 byte at index ");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v39.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          long long v30 = std::string::append(&v39, ": 0x");
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (v45 >= 0) {
            double v32 = __str;
          }
          else {
            double v32 = *(char **)__str;
          }
          if (v45 >= 0) {
            std::string::size_type v33 = v45;
          }
          else {
            std::string::size_type v33 = v44;
          }
          uint64_t v34 = std::string::append(&v40, v32, v33);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          std::string::size_type v42 = v34->__r_.__value_.__r.__words[2];
          long long v41 = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create(316, (uint64_t)&v41, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      uint64_t v17 = v9 != 0;
      if (v16 == 1)
      {
        uint64_t v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)uint64_t v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)uint64_t v18 = -16401;
          *(unsigned char *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
          uint64_t v10 = 0;
        }
      }
      uint64_t v9 = 0;
      v8 -= v17;
      char v46 = 0;
      uint64_t v11 = v10;
    }
    else if (result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v19 = a2;
        }
        else {
          uint64_t v19 = (uint64_t *)*a2;
        }
        *(unsigned char *)(v12 + v11++) = *((unsigned char *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v47[0])
      {
        case 8u:
          __int16 v15 = 25180;
          goto LABEL_43;
        case 9u:
          __int16 v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          __int16 v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          __int16 v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          __int16 v15 = 29276;
          goto LABEL_43;
        default:
          if (v47[0] == 34)
          {
            __int16 v15 = 8796;
            goto LABEL_43;
          }
          if (v47[0] == 92)
          {
            __int16 v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v47[0] > 0x7E) {
            int v20 = a3;
          }
          else {
            int v20 = 0;
          }
          if (v47[0] < 0x20 || v20)
          {
            uint64_t v24 = (char *)(v12 + v11);
            if (HIWORD(v47[0]))
            {
              uint64_t result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v47[0] >> 10) - 10304), v47[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              uint64_t result = snprintf(v24, 7uLL, "\\u%04x", v47[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0) {
              uint64_t v21 = a2;
            }
            else {
              uint64_t v21 = (uint64_t *)*a2;
            }
            *(unsigned char *)(v12 + v11++) = *((unsigned char *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            uint64_t v9 = 0;
            uint64_t v10 = v11;
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v11);
            uint64_t v11 = 0;
            uint64_t v10 = 0;
            uint64_t v9 = 0;
          }
          break;
      }
    }
    ++v8;
    int v22 = *((char *)a2 + 23);
    unsigned int v3 = v22 >> 31;
    unint64_t v23 = a2[1];
    if (v22 >= 0) {
      unint64_t v23 = *((unsigned __int8 *)a2 + 23);
    }
  }
  while (v8 < v23);
  if (v46)
  {
    int v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 2:
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 0:
        char v45 = 3;
        *(_DWORD *)__str = 0;
        unint64_t v36 = (uint64_t *)*a2;
        if (v22 >= 0) {
          unint64_t v36 = a2;
        }
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v36 + v23 - 1));
        std::string::size_type v37 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create(316, (uint64_t)&v41, v37);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_20CEDC474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v41 - 97) < 0) {
        operator delete(*(void **)(v41 - 120));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return (***(uint64_t (****)(void, uint64_t))a1)(*(void *)a1, 48);
  }
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)(a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      uint64_t v5 = a1 + 17;
      unsigned int v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v5 = a1 + 16 + v3;
  if (a2 < 0xA)
  {
LABEL_10:
    *(unsigned char *)(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
  }
  *(_WORD *)(v5 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1 + 2;
    if ((v2 & 0x8000000000000000) != 0)
    {
      *uint64_t v3 = 45;
      unint64_t v2 = -(uint64_t)v2;
      if (v2 >= 0xA)
      {
        int v7 = 4;
        unint64_t v11 = v2;
        while (1)
        {
          if (v11 <= 0x63)
          {
            v7 -= 2;
            goto LABEL_26;
          }
          if (v11 <= 0x3E7) {
            break;
          }
          if (v11 >> 4 < 0x271) {
            goto LABEL_26;
          }
          v7 += 4;
          BOOL v10 = v11 >= 0x186A0;
          v11 /= 0x2710uLL;
          if (!v10)
          {
            v7 -= 3;
            goto LABEL_26;
          }
        }
        --v7;
      }
      else
      {
        int v7 = 1;
      }
LABEL_26:
      unsigned int v8 = v7 + 1;
    }
    else
    {
      if (v2 < 0xA)
      {
        uint64_t v4 = (char *)a1 + 17;
        goto LABEL_35;
      }
      unsigned int v8 = 4;
      unint64_t v9 = v2;
      while (1)
      {
        if (v9 <= 0x63)
        {
          v8 -= 2;
          goto LABEL_27;
        }
        if (v9 <= 0x3E7) {
          break;
        }
        if (v9 >> 4 < 0x271) {
          goto LABEL_27;
        }
        v8 += 4;
        BOOL v10 = v9 >= 0x186A0;
        v9 /= 0x2710uLL;
        if (!v10)
        {
          v8 -= 3;
          goto LABEL_27;
        }
      }
      --v8;
    }
LABEL_27:
    if (v8 >= 0x3F) {
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
    }
    uint64_t v4 = &v3[v8];
    if (v2 < 0x64)
    {
      unint64_t v12 = v2;
    }
    else
    {
      do
      {
        unint64_t v12 = v2 / 0x64;
        *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
        v4 -= 2;
        unint64_t v13 = v2 >> 4;
        v2 /= 0x64uLL;
      }
      while (v13 > 0x270);
    }
    if (v12 >= 0xA)
    {
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v12];
LABEL_36:
      int v14 = (**a1)[1];
      return v14();
    }
    LOBYTE(v2) = v12;
LABEL_35:
    *(v4 - 1) = v2 + 48;
    goto LABEL_36;
  }
  uint64_t v5 = ***a1;
  return v5();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    if (a2 >= 0xA)
    {
      unsigned int v6 = 4;
      unint64_t v7 = a2;
      while (1)
      {
        if (v7 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_15;
        }
        if (v7 <= 0x3E7) {
          break;
        }
        if (v7 >> 4 < 0x271) {
          goto LABEL_15;
        }
        unint64_t v8 = v7 >> 5;
        v7 /= 0x2710uLL;
        v6 += 4;
        if (v8 <= 0xC34)
        {
          v6 -= 3;
          goto LABEL_15;
        }
      }
      --v6;
LABEL_15:
      if (v6 >= 0x3F) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
      }
      uint64_t v3 = (uint64_t)a1 + v6 + 16;
      if (a2 < 0x64)
      {
        unint64_t v9 = a2;
      }
      else
      {
        do
        {
          unint64_t v9 = v2 / 0x64;
          *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v2 % 0x64];
          v3 -= 2;
          unint64_t v10 = v2 >> 4;
          v2 /= 0x64uLL;
        }
        while (v10 > 0x270);
      }
      if (v9 >= 0xA)
      {
        *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v9];
LABEL_24:
        unint64_t v11 = (**a1)[1];
        return v11();
      }
      LOBYTE(v2) = v9;
    }
    else
    {
      uint64_t v3 = (uint64_t)a1 + 17;
    }
    *(unsigned char *)(v3 - 1) = v2 + 48;
    goto LABEL_24;
  }
  uint64_t v4 = ***a1;
  return v4();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    unsigned int v6 = "null";
    uint64_t v3 = 4;
  }
  else
  {
    uint64_t v3 = nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    uint64_t v5 = *(void *)a1;
    unsigned int v6 = a1 + 16;
  }
  return v4(v5, v6, v3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char *a1, unsigned int *a2, int a3)
{
  unsigned int v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1) {
    unsigned int v4 = a3 & 0x3F | (*a2 << 6);
  }
  else {
    unsigned int v4 = (0xFFu >> v3) & a3;
  }
  *a2 = v4;
  unint64_t v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190) {
    __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
  }
  uint64_t v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::to_chars<double>();
  }
  unsigned int v3 = a1;
  if ((*(void *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    unsigned int v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)unsigned int v3 = 11824;
    uint64_t result = v3 + 3;
    _DWORD v3[2] = 48;
  }
  else
  {
    unint64_t v5 = a2 - (void)v3;
    if (a2 - (uint64_t)v3 <= 16) {
      nlohmann::detail::to_chars<double>();
    }
    uint64_t v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 <= 0x15) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 == 22) {
      nlohmann::detail::to_chars<double>();
    }
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  if (a4 <= 0.0) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  if ((a4 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  if (a5 <= 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  int v5 = (int)a2;
  uint64_t v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((unsigned char *)this + v7) = 46;
    uint64_t result = (char *)this + v7 + 2;
    *((unsigned char *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      size_t v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if (a2 == 1)
    {
      uint64_t v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((unsigned char *)this + 1) = 46;
      uint64_t v11 = v5 + 1;
    }
    unint64_t v12 = (char *)this + v11;
    char *v12 = 101;
    if ((int)v7 <= -999) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1001) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1) {
      char v13 = 43;
    }
    else {
      char v13 = 45;
    }
    if ((int)v7 - 1 >= 0) {
      unsigned int v14 = v7 - 1;
    }
    else {
      unsigned int v14 = 1 - v7;
    }
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        void v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        unsigned __int8 v17 = (unsigned __int16)v14 % 0x64u;
        void v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        uint64_t v16 = 2;
        return &v12[v16 + 3];
      }
      void v12[2] = v14 / 0xAu + 48;
      char v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      void v12[2] = 48;
      char v15 = v14 + 48;
    }
    void v12[3] = v15;
    uint64_t v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  unint64_t v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  *unint64_t v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  if (a2 <= 0.0) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  uint64_t v4 = *(void *)&a2 >> 52;
  uint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  uint64_t v6 = 2 * v5;
  uint64_t v7 = *(void *)&a2 >> 53;
  uint64_t v8 = 4 * v5;
  int v9 = (*(void *)&a2 >> 52) - 1077;
  uint64_t v10 = 0x10000000000000;
  if ((*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v8 = 2 * v5;
    int v9 = (*(void *)&a2 >> 52) - 1076;
    uint64_t v10 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  BOOL v11 = v7 == 0;
  if (v7) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = 2 * v5;
  }
  if (v11) {
    int v9 = (*(void *)&a2 >> 52) - 1076;
  }
  else {
    uint64_t v5 = v10;
  }
  uint64_t v3 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    unint64_t v13 = (*(void *)&a2 >> 52) - 1076;
  }
  else
  {
    uint64_t v12 = 2 * v3;
    int v9 = -1075;
    unint64_t v13 = 4294966221;
  }
  if (v4)
  {
    unint64_t v14 = (*(void *)&a2 >> 52) - 1075;
  }
  else
  {
    uint64_t v6 = 2 * v3;
    unint64_t v14 = 4294966222;
  }
  if (v4) {
    uint64_t v15 = v5;
  }
  else {
    uint64_t v15 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  }
  uint64_t v24 = v12 - 1;
  int v25 = v9;
  uint64_t v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  int v18 = v17;
  unint64_t v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  int v21 = v20;
  uint64_t result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v23;
  *(void *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(void *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if (a10 != a5) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  if (a10 != a7) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  uint64_t cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  int v15 = v14;
  uint64_t v27 = cached_power_for_binary_exponent;
  int v28 = v16;
  unint64_t v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  uint64_t v19 = v18;
  unint64_t v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  unsigned int v22 = v21;
  unint64_t v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result) {
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  }
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    uint64_t v5 = "delta >= 0";
    int v6 = 162;
    goto LABEL_6;
  }
  uint64_t v3 = *a1;
  unint64_t result = *a1 << v2;
  if (result >> v2 != v3)
  {
    uint64_t v5 = "((x.f << delta) >> delta) == x.f";
    int v6 = 163;
LABEL_6:
    __assert_rtn("normalize_to", "to_chars.hpp", v6, v5);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  if ((int)this <= -1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if ((int)this >= 1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  int v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61) {
    ++v1;
  }
  if (v1 <= -315) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  unsigned int v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  uint64_t v3 = (void *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  int v4 = v3[1] + this;
  if (v4 <= -125) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if (v4 >= -95) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  return *v3;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  unint64_t v44 = a9;
  uint64_t v45 = a10;
  if ((int)a10 <= -61) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  if ((int)a10 >= -31) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  uint64_t v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  int v15 = -(int)v45;
  unint64_t v16 = v44 >> -(char)v45;
  if (!v16) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v17 = v14;
  unint64_t v18 = 1 << v15;
  uint64_t v19 = (1 << v15) - 1;
  unint64_t v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          unsigned int v23 = v16 >> 5;
          unsigned int v24 = v16 >> 4;
          if (v16 <= 9) {
            int v25 = 1;
          }
          else {
            int v25 = 10;
          }
          if (v16 <= 9) {
            int v26 = 1;
          }
          else {
            int v26 = 2;
          }
          if (v16 <= 0x63) {
            int v27 = v26;
          }
          else {
            int v27 = 3;
          }
          if (v16 <= 0x63) {
            int v28 = v25;
          }
          else {
            int v28 = 100;
          }
          if (v16 <= 0x3E7) {
            int v29 = v27;
          }
          else {
            int v29 = 4;
          }
          if (v16 <= 0x3E7) {
            int v30 = v28;
          }
          else {
            int v30 = 1000;
          }
          if (v24 <= 0x270) {
            int v31 = v29;
          }
          else {
            int v31 = 5;
          }
          if (v24 <= 0x270) {
            int v32 = v30;
          }
          else {
            int v32 = 10000;
          }
          if (v23 <= 0xC34) {
            int v22 = v31;
          }
          else {
            int v22 = 6;
          }
          if (v23 > 0xC34) {
            unsigned int v21 = 100000;
          }
          else {
            unsigned int v21 = v32;
          }
        }
        else
        {
          unsigned int v21 = 1000000;
          int v22 = 7;
        }
      }
      else
      {
        unsigned int v21 = 10000000;
        int v22 = 8;
      }
    }
    else
    {
      unsigned int v21 = 100000000;
      int v22 = 9;
    }
  }
  else
  {
    unsigned int v21 = 1000000000;
    int v22 = 10;
  }
  unsigned int v33 = v22 + 1;
  do
  {
    unsigned int v34 = v16 / v21;
    if (v16 / v21 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v16 = v16 % v21;
    uint64_t v35 = (int)*a2;
    *a2 = v35 + 1;
    *(unsigned char *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      unint64_t v18 = (unint64_t)v21 << v15;
      int v40 = (char *)*a2;
      uint64_t v41 = a1;
      unint64_t v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  int v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v37 = (10 * v20) >> v15;
    if (v37 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    uint64_t v38 = (int)*a2;
    *a2 = v38 + 1;
    *(unsigned char *)(a1 + v38) = v37 + 48;
    uint64_t v39 = 5 * v13;
    unint64_t v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  int v40 = (char *)*a2;
  uint64_t v41 = a1;
  unint64_t v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    unint64_t v4 = "x.e == y.e";
    int v5 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v5, v4);
  }
  BOOL v2 = *(void *)a1 >= *(void *)a2;
  uint64_t result = *(void *)a1 - *(void *)a2;
  if (!v2)
  {
    unint64_t v4 = "x.f >= y.f";
    int v5 = 67;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((int)a2 <= 0) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a3 > a4) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a4 < a5) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (!a6) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a5 < a3 && a4 - a5 >= a6)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = -(uint64_t)a5;
    unint64_t v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3) {
        break;
      }
      int v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48) {
        nlohmann::detail::dtoa_impl::grisu2_round();
      }
      *(unsigned char *)(this + v6) = v9 - 1;
      if (v8 >= a3) {
        break;
      }
      unint64_t v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal()
{
  __assert_rtn("scan_literal", "lexer.hpp", 1222, "char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string()
{
  __assert_rtn("scan_string", "lexer.hpp", 370, "0x00 <= codepoint and codepoint <= 0x10FFFF");
}

{
  __assert_rtn("scan_string", "lexer.hpp", 250, "current == '\\\"'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number()
{
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1208, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1175, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1191, "endptr == token_buffer.data() + token_buffer.size()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget()
{
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint()
{
  __assert_rtn("get_codepoint", "lexer.hpp", 188, "0x0000 <= codepoint and codepoint <= 0xFFFF");
}

{
  __assert_rtn("get_codepoint", "lexer.hpp", 162, "current == 'u'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range()
{
  __assert_rtn("next_byte_in_range", "lexer.hpp", 209, "ranges.size() == 2 or ranges.size() == 4 or ranges.size() == 6");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error()
{
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error()
{
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object()
{
}

{
  __assert_rtn("end_object", "json_sax.hpp", 451, "not keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array()
{
}

{
  __assert_rtn("end_array", "json_sax.hpp", 503, "not keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->()
{
  __assert_rtn("operator->", "iter_impl.hpp", 279, "m_object != nullptr");
}

{
  __assert_rtn("operator->", "iter_impl.hpp", 285, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator->", "iter_impl.hpp", 291, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

{
  __assert_rtn("handle_value", "json_sax.hpp", 321, "object_element");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
}

{
  __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
}

{
  __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1064, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 980, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
}

{
  __assert_rtn("compute_boundaries", "to_chars.hpp", 185, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 827, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
}

void InferenceEngine::StringFormatter::append(std::string *this, const char *a2, va_list a3)
{
  __s = 0;
  vasprintf(&__s, a2, a3);
  std::string::append(this, __s);
  free(__s);
}

std::string *InferenceEngine::StringFormatter::StringFormatter(std::string *this, const char *a2, ...)
{
  va_start(va, a2);
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  InferenceEngine::StringFormatter::append(this, a2, va);
  return this;
}

void sub_20CEDE2B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::Diagnostics_GetLogObject(InferenceEngine *this)
{
  if (InferenceEngine::Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&InferenceEngine::Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global);
  }
  return InferenceEngine::Diagnostics_GetLogObject(void)::__profile_log_default;
}

os_log_t ___ZN15InferenceEngine24Diagnostics_GetLogObjectEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.siri.tts.inferenceEngine", "default");
  InferenceEngine::Diagnostics_GetLogObject(void)::__profile_log_default = (uint64_t)result;
  return result;
}

BOOL _pcre2_xclass_8(int a1, unsigned char *a2)
{
  if (a1 <= 0xFF)
  {
    if ((*a2 & 4) == 0)
    {
      uint64_t v2 = *a2 & 1;
      if ((*a2 & 2) != 0) {
        return (a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7)) & 1;
      }
      return v2;
    }
    if (*a2 & 2) != 0 && ((a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7))) {
      return !(*a2 & 1);
    }
  }
  if ((*a2 & 2) != 0) {
    uint64_t v3 = a2 + 33;
  }
  else {
    uint64_t v3 = a2 + 1;
  }
  int v4 = a1 + 127;
  if (a1 >= 0) {
    int v4 = a1;
  }
  uint64_t v5 = (uint64_t)v4 >> 7;
  unsigned int v6 = a1 - (v4 & 0xFFFFFF80);
  unsigned int v7 = a1 - 8232;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v8 = *v3;
        if (v8 != 1) {
          break;
        }
        int v9 = v3 + 2;
        unsigned int v10 = v3[1];
        if (v10 >= 0xC0)
        {
          if ((v10 & 0x20) != 0)
          {
            int v13 = *v9 & 0x3F;
            if ((v10 & 0x10) != 0)
            {
              if ((v10 & 8) != 0)
              {
                int v30 = v3[3] & 0x3F;
                int v31 = v3[4] & 0x3F;
                int v32 = v3[5] & 0x3F;
                if ((v10 & 4) != 0)
                {
                  unsigned int v10 = ((v10 & 1) << 30) | (v13 << 24) | (v30 << 18) | (v31 << 12) | (v32 << 6) | v3[6] & 0x3F;
                  int v9 = v3 + 7;
                }
                else
                {
                  unsigned int v10 = ((v10 & 3) << 24) | (v13 << 18) | (v30 << 12) | (v31 << 6) | v32;
                  int v9 = v3 + 6;
                }
              }
              else
              {
                unsigned int v10 = ((v10 & 7) << 18) | (v13 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
                int v9 = v3 + 5;
              }
            }
            else
            {
              unsigned int v10 = ((v10 & 0xF) << 12) | (v13 << 6) | v3[3] & 0x3F;
              int v9 = v3 + 4;
            }
          }
          else
          {
            int v9 = v3 + 3;
            unsigned int v10 = v3[2] & 0x3F | ((v10 & 0x1F) << 6);
          }
        }
        uint64_t v3 = v9;
        if (v10 == a1) {
          return !(*a2 & 1);
        }
      }
      if (v8 != 2) {
        break;
      }
      BOOL v11 = v3 + 2;
      unsigned int v12 = v3[1];
      if (v12 >= 0xC0)
      {
        if ((v12 & 0x20) != 0)
        {
          int v14 = *v11 & 0x3F;
          if ((v12 & 0x10) != 0)
          {
            if ((v12 & 8) != 0)
            {
              int v33 = v3[3] & 0x3F;
              int v34 = v3[4] & 0x3F;
              int v35 = v3[5] & 0x3F;
              if ((v12 & 4) != 0)
              {
                unsigned int v12 = ((v12 & 1) << 30) | (v14 << 24) | (v33 << 18) | (v34 << 12) | (v35 << 6) | v3[6] & 0x3F;
                BOOL v11 = v3 + 7;
              }
              else
              {
                unsigned int v12 = ((v12 & 3) << 24) | (v14 << 18) | (v33 << 12) | (v34 << 6) | v35;
                BOOL v11 = v3 + 6;
              }
            }
            else
            {
              unsigned int v12 = ((v12 & 7) << 18) | (v14 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
              BOOL v11 = v3 + 5;
            }
          }
          else
          {
            unsigned int v12 = ((v12 & 0xF) << 12) | (v14 << 6) | v3[3] & 0x3F;
            BOOL v11 = v3 + 4;
          }
        }
        else
        {
          BOOL v11 = v3 + 3;
          unsigned int v12 = v3[2] & 0x3F | ((v12 & 0x1F) << 6);
        }
      }
      uint64_t v3 = v11 + 1;
      unsigned int v36 = *v11;
      if (v36 >= 0xC0)
      {
        if ((v36 & 0x20) != 0)
        {
          int v37 = *v3 & 0x3F;
          if ((v36 & 0x10) != 0)
          {
            if ((v36 & 8) != 0)
            {
              int v38 = v11[2] & 0x3F;
              int v39 = v11[3] & 0x3F;
              int v40 = v11[4] & 0x3F;
              if ((v36 & 4) != 0)
              {
                unsigned int v36 = ((v36 & 1) << 30) | (v37 << 24) | (v38 << 18) | (v39 << 12) | (v40 << 6) | v11[5] & 0x3F;
                uint64_t v3 = v11 + 6;
              }
              else
              {
                unsigned int v36 = ((v36 & 3) << 24) | (v37 << 18) | (v38 << 12) | (v39 << 6) | v40;
                uint64_t v3 = v11 + 5;
              }
            }
            else
            {
              unsigned int v36 = ((v36 & 7) << 18) | (v37 << 12) | ((v11[2] & 0x3F) << 6) | v11[3] & 0x3F;
              uint64_t v3 = v11 + 4;
            }
          }
          else
          {
            unsigned int v36 = ((v36 & 0xF) << 12) | (v37 << 6) | v11[2] & 0x3F;
            uint64_t v3 = v11 + 3;
          }
        }
        else
        {
          uint64_t v3 = v11 + 2;
          unsigned int v36 = v11[1] & 0x3F | ((v36 & 0x1F) << 6);
        }
      }
      if (v12 <= a1 && v36 >= a1) {
        return !(*a2 & 1);
      }
    }
    if (!*v3) {
      return *a2 & 1;
    }
    uint64_t v2 = 0;
    switch(v3[1])
    {
      case 0u:
        goto LABEL_116;
      case 1u:
        unsigned int v15 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1];
        BOOL v16 = v15 > 9;
        int v17 = (1 << v15) & 0x320;
        if (!v16 && v17 != 0) {
          goto LABEL_116;
        }
        goto LABEL_68;
      case 2u:
        int v19 = v8 == 3;
        int v20 = v3[2];
        int v21 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]];
        goto LABEL_47;
      case 3u:
        int v19 = v8 == 3;
        BOOL v22 = v3[2] == _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1];
        goto LABEL_48;
      case 4u:
        int v19 = v8 == 3;
        int v21 = v3[2];
        int v20 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]];
LABEL_47:
        BOOL v22 = v21 == v20;
        goto LABEL_48;
      case 5u:
        if ((v8 == 3) == ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v6
                                                                                        + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                                    + 1]] & 0xFFFFFFFD) == 1))
          return !(*a2 & 1);
        goto LABEL_117;
      case 6u:
      case 7u:
        if (a1 < 0x2000)
        {
          if (a1 > 132)
          {
            if (a1 > 5759)
            {
              if (a1 == 5760 || a1 == 6158) {
                goto LABEL_116;
              }
            }
            else if (a1 == 133 || a1 == 160)
            {
              goto LABEL_116;
            }
          }
          else if (a1 <= 0x20 && ((1 << a1) & 0x100003E00) != 0)
          {
            goto LABEL_116;
          }
        }
        else if ((a1 - 0x2000) < 0xB {
               || v7 <= 0x37 && ((1 << v7) & 0x80000000000083) != 0
        }
               || a1 == 12288)
        {
LABEL_116:
          if (v8 == 3) {
            return !(*a2 & 1);
          }
          goto LABEL_117;
        }
        int v19 = v8 == 3;
        BOOL v22 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]] == 6;
LABEL_48:
        int v23 = !v22;
        if (v19 != v23) {
          return !(*a2 & 1);
        }
LABEL_117:
        v3 += 3;
        break;
      case 8u:
        if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]] | 2) == 3)
          goto LABEL_116;
        BOOL v24 = v8 == 3;
        BOOL v25 = a1 == 95;
        goto LABEL_91;
      case 0xAu:
        if (a1 > 0x9F)
        {
          if (((a1 & 0xFFFFF800) == 55296) != (v8 == 3)) {
            return !(*a2 & 1);
          }
        }
        else
        {
          if ((a1 - 36) <= 0x3C && ((1 << (a1 - 36)) & 0x1000000010000001) != 0) {
            goto LABEL_116;
          }
LABEL_68:
          if (v8 != 3) {
            return !(*a2 & 1);
          }
        }
        goto LABEL_117;
      case 0xBu:
        int v26 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]];
        if (v26 == 6) {
          goto LABEL_68;
        }
        if (v26) {
          goto LABEL_116;
        }
        if (_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1] == 1
          && a1 != 1564
          && a1 != 6158)
        {
          goto LABEL_90;
        }
        goto LABEL_68;
      case 0xCu:
        uint64_t v27 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1];
        if ((v27 - 27) < 2) {
          goto LABEL_68;
        }
        if (_pcre2_ucp_gentype_8[v27]) {
          goto LABEL_116;
        }
        if (a1 == 1564 || v27 != 1) {
          goto LABEL_68;
        }
LABEL_90:
        BOOL v24 = v8 == 3;
        BOOL v25 = (a1 - 8298) < 0xFFFFFFFC;
LABEL_91:
        if (((v25 ^ v24) & 1) == 0) {
          return !(*a2 & 1);
        }
        goto LABEL_117;
      case 0xDu:
        int v28 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]];
        if (v28 == 4) {
          goto LABEL_116;
        }
        BOOL v25 = v8 == 3;
        BOOL v24 = a1 < 0x80 && v28 == 5;
        goto LABEL_91;
      default:
        return v2;
    }
  }
}

uint64_t pcre2_get_error_message_8(int a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294967248;
  }
  int v3 = a1 - 100;
  if (a1 < 100)
  {
    if ((a1 & 0x80000000) == 0)
    {
      int v4 = &byte_20D60B7D5;
      int v3 = 1;
      goto LABEL_8;
    }
    int v3 = -a1;
    int v4 = "no error";
  }
  else
  {
    int v4 = "no error";
  }
  if (v3 < 1)
  {
    LOBYTE(v6) = *v4;
    if (!*v4)
    {
      uint64_t result = 0;
LABEL_22:
      *(unsigned char *)(a2 + result) = 0;
      return result;
    }
LABEL_15:
    uint64_t v9 = 0;
    uint64_t v10 = a3 - 1;
    BOOL v11 = v4 + 1;
    while (v10 != v9)
    {
      *(unsigned char *)(a2 + v9) = v6;
      uint64_t result = v9 + 1;
      int v6 = v11[v9++];
      if (!v6) {
        goto LABEL_22;
      }
    }
    *(unsigned char *)(a2 + v10) = 0;
    return 4294967248;
  }
  while (1)
  {
LABEL_8:
    while (*v4++)
      ;
    LOBYTE(v6) = *v4;
    if (!*v4) {
      return 4294967267;
    }
    if (v3-- < 2) {
      goto LABEL_15;
    }
  }
}

char *_pcre2_memmove8(char *result, char *a2, uint64_t a3)
{
  if (result <= a2)
  {
    if (a3)
    {
      uint64_t v4 = a3;
      do
      {
        char v5 = *a2++;
        *result++ = v5;
        --v4;
      }
      while (v4);
    }
    result -= a3;
  }
  else if (a3)
  {
    uint64_t v3 = a3 - 1;
    do
    {
      result[v3] = a2[v3];
      --v3;
    }
    while (v3 != -1);
  }
  return result;
}

uint64_t _pcre2_strcmp_8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  do
  {
    unsigned int v2 = *a1;
    unsigned int v3 = *a2;
    if (!(v2 | v3)) {
      return 0;
    }
    ++a1;
    ++a2;
  }
  while (v2 == v3);
  if (v2 > v3) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t _pcre2_strncmp_8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  while (1)
  {
    unsigned int v3 = *a1;
    unsigned int v4 = *a2;
    if (v3 != v4) {
      break;
    }
    ++a2;
    ++a1;
    if (!--a3) {
      return 0;
    }
  }
  if (v3 > v4) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t _pcre2_strlen_8(unsigned char *a1)
{
  if (!*a1) {
    return 0;
  }
  uint64_t v1 = 0;
  unsigned int v2 = a1 + 1;
  do
    uint64_t result = v1 + 1;
  while (v2[v1++]);
  return result;
}

uint64_t _pcre2_valid_utf_8(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  if (!a2) {
    return 0;
  }
  for (uint64_t i = a1; ; ++i)
  {
    unint64_t v4 = a2 - 1;
    if ((char)*i < 0) {
      break;
    }
    --a2;
LABEL_15:
    if (!a2) {
      return 0;
    }
  }
  unsigned int v5 = *i;
  if (v5 <= 0xBF)
  {
    *a3 = i - a1;
    return 4294967274;
  }
  else if (v5 >= 0xFE)
  {
    *a3 = i - a1;
    return 4294967273;
  }
  else
  {
    unint64_t v6 = _pcre2_utf8_table4[*i & 0x3F];
    a2 = v4 - v6;
    if (v4 < v6 && (*a3 = i - a1, unint64_t v7 = ~v4 + v6, v7 < 5))
    {
      return (-3 - v7);
    }
    else
    {
      int v9 = i + 1;
      unsigned int v8 = i[1];
      if ((v8 & 0xC0) == 0x80)
      {
        switch((int)v6)
        {
          case 1:
            if ((v5 & 0x3E) != 0) {
              goto LABEL_14;
            }
            *a3 = v9 + ~a1;
            uint64_t v16 = 4294967279;
            break;
          case 2:
            char v10 = i[2];
            i += 2;
            if ((v10 & 0xC0) != 0x80)
            {
              int v15 = i - a1;
              goto LABEL_54;
            }
            if (v5 == 224 && (v8 & 0x20) == 0)
            {
              *a3 = (int)i - (int)a1 - 2;
              uint64_t v16 = 4294967278;
            }
            else
            {
              if (v5 != 237 || v8 < 0xA0) {
                goto LABEL_15;
              }
              *a3 = (int)i - (int)a1 - 2;
              uint64_t v16 = 4294967280;
            }
            break;
          case 3:
            if ((i[2] & 0xC0) != 0x80)
            {
              int v17 = i - a1;
              goto LABEL_56;
            }
            char v11 = i[3];
            i += 3;
            if ((v11 & 0xC0) != 0x80)
            {
              int v18 = i - a1;
              goto LABEL_61;
            }
            if (v5 == 240 && (v8 & 0x30) == 0)
            {
              *a3 = (int)i - (int)a1 - 3;
              uint64_t v16 = 4294967277;
            }
            else
            {
              if (v5 <= 0xF4 && (v5 != 244 || v8 < 0x90)) {
                goto LABEL_15;
              }
              *a3 = (int)i - (int)a1 - 3;
              uint64_t v16 = 4294967281;
            }
            break;
          case 4:
            int v13 = i + 2;
            if ((i[2] & 0xC0) != 0x80) {
              goto LABEL_50;
            }
            int v14 = i + 3;
            if ((i[3] & 0xC0) != 0x80) {
              goto LABEL_60;
            }
            int v9 = i + 4;
            if ((i[4] & 0xC0) != 0x80)
            {
              int v19 = v9 - a1;
              goto LABEL_64;
            }
            uint64_t v16 = 4294967283;
            if (v5 != 248 || (v8 & 0x38) != 0) {
              goto LABEL_52;
            }
            *a3 = v9 - (int)a1 - 4;
            uint64_t v16 = 4294967276;
            break;
          case 5:
            int v13 = i + 2;
            if ((i[2] & 0xC0) == 0x80)
            {
              int v14 = i + 3;
              if ((i[3] & 0xC0) == 0x80)
              {
                if ((i[4] & 0xC0) == 0x80)
                {
                  int v9 = i + 5;
                  if ((i[5] & 0xC0) == 0x80)
                  {
                    uint64_t v16 = 4294967282;
                    if (v5 != 252 || (v8 & 0x3C) != 0) {
                      goto LABEL_52;
                    }
                    *a3 = v9 - (int)a1 - 5;
                    uint64_t v16 = 4294967275;
                  }
                  else
                  {
                    *a3 = (int)i - (int)a1;
                    uint64_t v16 = 4294967284;
                  }
                }
                else
                {
                  int v19 = i + 4 - a1;
LABEL_64:
                  *a3 = v19 - 4;
                  uint64_t v16 = 4294967285;
                }
              }
              else
              {
LABEL_60:
                int v18 = v14 - a1;
LABEL_61:
                *a3 = v18 - 3;
                uint64_t v16 = 4294967286;
              }
            }
            else
            {
LABEL_50:
              int v15 = v13 - a1;
LABEL_54:
              int v17 = v15 - 2;
LABEL_56:
              *a3 = v17;
              uint64_t v16 = 4294967287;
            }
            break;
          default:
            if (v6 < 4)
            {
LABEL_14:
              ++i;
              goto LABEL_15;
            }
            uint64_t v16 = 4294967282;
LABEL_52:
            *a3 = (v9 - a1 - v6);
            break;
        }
      }
      else
      {
        *a3 = v9 + ~a1;
        return 4294967288;
      }
    }
  }
  return v16;
}

uint64_t pcre2_substring_nametable_scan_8(uint64_t a1, unsigned __int8 *a2, void *a3, unsigned __int8 **a4)
{
  unsigned __int16 v6 = 0;
  unsigned int v7 = *(unsigned __int16 *)(a1 + 134);
  uint64_t v8 = *(unsigned __int16 *)(a1 + 132);
  uint64_t v28 = a1 + 136;
  uint64_t v9 = a1 - v8 + 138;
  int v25 = *(unsigned __int16 *)(a1 + 132);
  while (1)
  {
    if ((unsigned __int16)v7 <= v6) {
      return 4294967247;
    }
    unsigned int v29 = v7;
    unsigned int v10 = ((unsigned __int16)v7 + v6) >> 1;
    uint64_t v11 = v10 * v8;
    unsigned int v12 = (unsigned __int8 *)(a1 + (v11 + 136));
    int v13 = _pcre2_strcmp_8(a2, v12 + 2);
    if (!v13) {
      break;
    }
    if (v13 > 0) {
      unsigned __int16 v6 = v10 + 1;
    }
    unsigned int v7 = v29;
    if (v13 <= 0) {
      unsigned int v7 = v10;
    }
  }
  uint64_t v14 = 0;
  unint64_t v15 = v28 + (*(unsigned __int16 *)(a1 + 134) - 1) * (uint64_t)v25;
  do
  {
    uint64_t v16 = v11;
    uint64_t v17 = v14;
    if (v11 + 136 < 137) {
      break;
    }
    int v18 = _pcre2_strcmp_8(a2, (unsigned __int8 *)(v9 + v11));
    v11 -= v8;
    uint64_t v14 = v17 + v8;
  }
  while (!v18);
  uint64_t v27 = v28 + v16;
  int v19 = v12;
  do
  {
    int v20 = v19;
    uint64_t v21 = v17;
    if ((unint64_t)v19 >= v15) {
      break;
    }
    v19 += v8;
    v17 += v8;
  }
  while (!_pcre2_strcmp_8(a2, &v20[v8 + 2]));
  if (a3)
  {
    *a3 = v27;
    *a4 = v20;
    return v8;
  }
  else if (v21)
  {
    return 4294967246;
  }
  else
  {
    return __rev16(*(unsigned __int16 *)v12);
  }
}

uint64_t pcre2_substring_length_bynumber_8(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 76);
  if (result == -2)
  {
    if (a2) {
      return 4294967294;
    }
    LODWORD(result) = 0;
  }
  else if ((result & 0x80000000) != 0)
  {
    return result;
  }
  if (*(unsigned char *)(a1 + 72) == 1)
  {
    if (*(unsigned __int16 *)(a1 + 74) > a2)
    {
      if ((int)result - 1 < a2) {
        return 4294967241;
      }
      goto LABEL_15;
    }
    return 4294967242;
  }
  if (*(unsigned __int16 *)(*(void *)(a1 + 24) + 128) < a2) {
    return 4294967247;
  }
  if (*(unsigned __int16 *)(a1 + 74) <= a2) {
    return 4294967242;
  }
  if (*(void *)(a1 + 16 * a2 + 80) == -1) {
    return 4294967241;
  }
LABEL_15:
  uint64_t result = 0;
  if (a3)
  {
    uint64_t v5 = a1 + 80;
    unint64_t v6 = *(void *)(v5 + 8 * ((2 * a2) | 1));
    unint64_t v7 = *(void *)(v5 + 16 * a2);
    BOOL v8 = v6 >= v7;
    unint64_t v9 = v6 - v7;
    if (!v8) {
      unint64_t v9 = 0;
    }
    *a3 = v9;
  }
  return result;
}

void *pcre2_match_data_create_8(unsigned int a1, long long *a2)
{
  if (a1 <= 1) {
    int v2 = 1;
  }
  else {
    int v2 = a1;
  }
  uint64_t result = _pcre2_memctl_malloc_8(8 * (2 * v2) + 80, a2);
  if (result)
  {
    *((_WORD *)result + 37) = v2;
    *((unsigned char *)result + 73) = 0;
  }
  return result;
}

void *pcre2_match_data_create_from_pattern_8(uint64_t a1, long long *a2)
{
  if (!a2) {
    a2 = (long long *)a1;
  }
  uint64_t v2 = *(unsigned __int16 *)(a1 + 128) + 1;
  uint64_t result = _pcre2_memctl_malloc_8(16 * v2 + 80, a2);
  if (result)
  {
    *((_WORD *)result + 37) = v2;
    *((unsigned char *)result + 73) = 0;
  }
  return result;
}

uint64_t pcre2_match_data_free_8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 73)) {
      (*(void (**)(void, void))(result + 8))(*(void *)(result + 32), *(void *)(result + 16));
    }
    unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    uint64_t v2 = *(void *)(v1 + 16);
    return v3(v1, v2);
  }
  return result;
}

uint64_t pcre2_get_mark_8(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t pcre2_get_ovector_pointer_8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pcre2_get_ovector_count_8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 74);
}

uint64_t sljit_free_exec(void *a1)
{
  pthread_mutex_lock(&allocator_lock);
  uint64_t v2 = a1 - 2;
  uint64_t v3 = *(a1 - 2);
  uint64_t v4 = allocated_size - v3;
  allocated_size -= v3;
  uint64_t v5 = (void *)((char *)a1 - *(a1 - 1) - 16);
  if (*v5)
  {
    *(a1 - 2) = 0;
    a1[1] = 0;
    a1[2] = v3;
    uint64_t v6 = free_blocks;
    *a1 = free_blocks;
    if (v6) {
      *(void *)(v6 + 24) = v2;
    }
    free_blocks = (uint64_t)(a1 - 2);
  }
  else
  {
    v3 += v5[4];
    v5[4] = v3;
    *(void *)((char *)v5 + v3 + 8) = v3;
    uint64_t v2 = v5;
  }
  unint64_t v7 = (void *)((char *)v2 + v3);
  if (!*(void *)((char *)v2 + v3))
  {
    v3 += v7[4];
    v2[4] = v3;
    uint64_t v9 = v7[2];
    if (v9) {
      *(void *)(v9 + 24) = v7[3];
    }
    uint64_t v10 = v7[3];
    if (v10) {
      uint64_t v11 = (uint64_t *)(v10 + 16);
    }
    else {
      uint64_t v11 = &free_blocks;
    }
    uint64_t *v11 = v9;
    unint64_t v7 = (void *)((char *)v2 + v3);
    *(void *)((char *)v2 + v3 + 8) = v3;
  }
  if (!v2[1] && *v7 == 1 && total_size - v3 > (unint64_t)(3 * v4) >> 1)
  {
    total_size -= v3;
    uint64_t v12 = v2[2];
    if (v12) {
      *(void *)(v12 + 24) = v2[3];
    }
    uint64_t v13 = v2[3];
    if (v13) {
      uint64_t v14 = (uint64_t *)(v13 + 16);
    }
    else {
      uint64_t v14 = &free_blocks;
    }
    *uint64_t v14 = v12;
    munmap(v2, v3 + 16);
  }
  return pthread_mutex_unlock(&allocator_lock);
}

uint64_t pcre2_jit_match_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v7) {
    return 4294967251;
  }
  unsigned int v10 = *(unsigned __int16 *)(a6 + 74);
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v11 = (a5 & 0x20) != 0 ? 2 : (a5 >> 4) & 1;
  uint64_t v12 = *(uint64_t (**)(long long *))(v7 + 8 * v11);
  if (!v12) {
    return 4294967251;
  }
  *((void *)&v24 + 1) = a2 + a4;
  *(void *)&long long v25 = a2;
  *((void *)&v25 + 1) = a2 + a3;
  *(void *)&long long v26 = a6;
  *((void *)&v26 + 1) = a2;
  DWORD2(v28) = a5;
  if (!a7)
  {
    *((void *)&v27[0] + 1) = 0;
    *(void *)&v27[1] = 0;
    *((void *)&v27[1] + 1) = -1;
    unsigned int v19 = *(_DWORD *)(a1 + 104);
    if (v19 >= 0x989680) {
      unsigned int v19 = 10000000;
    }
    LODWORD(v28) = v19;
    if (*(_DWORD *)(v7 + 72) >= v10) {
      int v17 = v10;
    }
    else {
      int v17 = *(_DWORD *)(v7 + 72);
    }
    DWORD1(v28) = 2 * v17;
    goto LABEL_23;
  }
  *(_OWORD *)((char *)v27 + 8) = *(_OWORD *)(a7 + 40);
  *((void *)&v27[1] + 1) = *(void *)(a7 + 72);
  unsigned int v14 = *(_DWORD *)(a7 + 84);
  if (v14 >= *(_DWORD *)(a1 + 104)) {
    unsigned int v14 = *(_DWORD *)(a1 + 104);
  }
  LODWORD(v28) = v14;
  uint64_t v16 = *(uint64_t (**)(uint64_t))(a7 + 24);
  uint64_t v15 = *(void *)(a7 + 32);
  if (v16)
  {
    uint64_t v15 = v16(v15);
    uint64_t v12 = *(uint64_t (**)(long long *))(v7 + 8 * v11);
  }
  if (*(_DWORD *)(v7 + 72) >= v10) {
    int v17 = v10;
  }
  else {
    int v17 = *(_DWORD *)(v7 + 72);
  }
  DWORD1(v28) = 2 * v17;
  if (!v15)
  {
LABEL_23:
    LODWORD(result) = jit_machine_stack_exec();
    goto LABEL_24;
  }
  *(void *)&long long v24 = *(void *)(v15 + 24);
  LODWORD(result) = v12(&v24);
LABEL_24:
  if ((int)result <= v17) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 0;
  }
  if (result != -2 && (int)result <= -1) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = a2;
  }
  *(void *)(a6 + 24) = a1;
  *(void *)(a6 + 32) = v21;
  *(_DWORD *)(a6 + 76) = result;
  uint64_t v22 = *(void *)&v27[0];
  uint64_t v23 = *((void *)&v26 + 1) - a2;
  *(void *)(a6 + 56) = 0;
  *(void *)(a6 + 64) = v23;
  *(void *)(a6 + 40) = v22;
  *(void *)(a6 + 48) = 0;
  *(unsigned char *)(a6 + 72) = 2;
  return result;
}

uint64_t jit_machine_stack_exec()
{
  uint64_t v0 = (void *)MEMORY[0x270FA5388]();
  uint64_t v5 = *MEMORY[0x263EF8340];
  _DWORD v3[2] = v4;
  v3[3] = v4;
  v3[0] = &v5;
  v3[1] = &v5;
  *uint64_t v0 = v3;
  return v1();
}

uint64_t _pcre2_jit_free_8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v5 = *(void **)(a1 + 8 * i);
    if (v5) {
      sljit_free_exec(v5);
    }
    uint64_t v6 = *(void **)(a1 + 8 * i + 24);
    if (v6)
    {
      do
      {
        uint64_t v7 = (void *)*v6;
        (*(void (**)(void))(a2 + 8))();
        uint64_t v6 = v7;
      }
      while (v7);
    }
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  return v9(a1, v8);
}

uint64_t pcre2_jit_free_unused_memory_8()
{
  pthread_mutex_lock(&allocator_lock);
  uint64_t v0 = free_blocks;
  while (v0)
  {
    uint64_t v1 = (void *)v0;
    uint64_t v0 = *(void *)(v0 + 16);
    if (!v1[1])
    {
      uint64_t v2 = v1[4];
      if (*(void *)((char *)v1 + v2) == 1)
      {
        total_size -= v2;
        if (v0) {
          *(void *)(v0 + 24) = v1[3];
        }
        uint64_t v3 = v1[3];
        if (v3) {
          uint64_t v4 = (uint64_t *)(v3 + 16);
        }
        else {
          uint64_t v4 = &free_blocks;
        }
        *uint64_t v4 = v0;
        munmap(v1, v2 + 16);
      }
    }
  }
  return pthread_mutex_unlock(&allocator_lock);
}

void *pcre2_jit_stack_create_8(unint64_t a1, unint64_t a2, long long *a3)
{
  uint64_t v3 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v6 = _pcre2_memctl_malloc_8(0x20uLL, a3);
      uint64_t v3 = v6;
      if (v6)
      {
        if (a1 >= a2) {
          unint64_t v7 = a2;
        }
        else {
          unint64_t v7 = a1;
        }
        unint64_t v8 = (a2 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
        unint64_t v9 = (v7 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
        if (v9 - 1 < v8)
        {
          uint64_t v10 = ((uint64_t (*)(uint64_t, void))*v6)(32, v6[2]);
          if (v10)
          {
            uint64_t v11 = (void *)v10;
            uint64_t v12 = get_page_alignment_sljit_page_align;
            if (!get_page_alignment_sljit_page_align)
            {
              uint64_t v13 = sysconf(29);
              uint64_t v12 = v13 - 1;
              if (v13 < 0) {
                uint64_t v12 = 4095;
              }
              get_page_alignment_sljit_page_align = v12;
            }
            size_t v14 = (v12 + v8) & ~v12;
            uint64_t v15 = (char *)mmap(0, v14, 3, 4098, -1, 0);
            if (v15 != (char *)-1)
            {
              _DWORD v11[2] = &v15[v14 - v9];
              void v11[3] = v15;
              void *v11 = &v15[v14];
              v11[1] = &v15[v14];
              v3[3] = v11;
              return v3;
            }
            ((void (*)(void *, void))v3[1])(v11, v3[2]);
          }
        }
        v3[3] = 0;
        ((void (*)(void *, void))v3[1])(v3, v3[2]);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t pcre2_jit_stack_assign_8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(void *)(result + 24) = a2;
    *(void *)(result + 32) = a3;
  }
  return result;
}

uint64_t pcre2_jit_stack_free_8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 24);
    munmap(*(void **)(v2 + 24), *(void *)(v2 + 8) - *(void *)(v2 + 24));
    (*(void (**)(uint64_t, void))(v1 + 8))(v2, *(void *)(v1 + 16));
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    uint64_t v3 = *(void *)(v1 + 16);
    return v4(v1, v3);
  }
  return result;
}

uint64_t _pcre2_jit_get_size_8(void *a1)
{
  return a1[7] + a1[6] + a1[8];
}

uint64_t _pcre2_auto_possessify_8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v23 = 1000;
  unsigned int v2 = *a1;
  if (v2 <= 0xA7)
  {
    uint64_t v5 = a1;
    unsigned int v6 = *(_DWORD *)(a2 + 204);
    int v22 = v6 & 0x80000;
    uint64_t v7 = (v6 >> 19) & 1;
    uint64_t v8 = (v6 >> 17) & 1;
    while ((v2 - 33) > 0x40u)
    {
      if (v2 - 110 < 2)
      {
        uint64_t v10 = 33;
        goto LABEL_14;
      }
      if (v2 == 112)
      {
        uint64_t v10 = __rev16(*(unsigned __int16 *)(v5 + 1));
LABEL_14:
        unsigned __int8 v11 = v5[v10];
        if ((v11 - 98) <= 7u)
        {
          chr_property_list = get_chr_property_list(v5, v7, v8, *(void *)(a2 + 16), (uint64_t)&v24);
          BOOL v25 = (v11 & 1) == 0;
          if (compare_opcodes(chr_property_list, v7, v8, a2, &v24, chr_property_list, &v23))
          {
            if ((v11 - 98) <= 7u) {
              v5[v10] = 0x6D6D6C6C6B6B6A6AuLL >> (8 * (v11 - 98));
            }
          }
        }
LABEL_35:
        LOBYTE(v2) = *v5;
      }
      uint64_t result = v2;
      switch((char)v2)
      {
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '^':
        case '_':
          int v16 = v5[1];
          goto LABEL_42;
        case '[':
        case '\\':
        case ']':
        case 'a':
          int v16 = v5[3];
LABEL_42:
          uint64_t v17 = 2 * ((v16 - 15) < 2);
          goto LABEL_43;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
          goto LABEL_51;
        case 'p':
          unsigned int v20 = *(unsigned __int16 *)(v5 + 1);
          goto LABEL_49;
        case 'w':
          unsigned int v20 = *(unsigned __int16 *)(v5 + 5);
LABEL_49:
          uint64_t v17 = __rev16(v20);
          goto LABEL_43;
        default:
          if (v2 - 153 <= 8 && ((1 << (v2 + 103)) & 0x155) != 0)
          {
            uint64_t v17 = v5[1];
LABEL_43:
            int v18 = _pcre2_OP_lengths_8;
            goto LABEL_44;
          }
          if (!(_BYTE)v2) {
            return result;
          }
LABEL_51:
          uint64_t v17 = _pcre2_OP_lengths_8[v2];
          unsigned int v19 = &v5[v17];
          if (v22)
          {
            if ((v2 - 29) <= 0x37u)
            {
              unsigned int v21 = *(v19 - 1);
              if (v21 >= 0xC0)
              {
                LOBYTE(v2) = v21 & 0x3F;
                int v18 = _pcre2_utf8_table4;
LABEL_44:
                unsigned int v19 = &v5[v17 + v18[v2]];
              }
            }
          }
          unsigned int v2 = *v19;
          uint64_t v5 = v19;
          if (v2 >= 0xA8) {
            return 0xFFFFFFFFLL;
          }
          break;
      }
    }
    if (v2 <= 0x54u)
    {
      if (v2 <= 0x47u)
      {
        if (v2 >= 0x2Eu) {
          int v13 = -46;
        }
        else {
          int v13 = -33;
        }
        if (v2 <= 0x3Au) {
          int v9 = v13;
        }
        else {
          int v9 = 197;
        }
      }
      else
      {
        int v9 = 184;
      }
    }
    else
    {
      int v9 = 171;
    }
    if ((v2 + v9 + 33) >= 0x29u)
    {
      BOOL v25 = ((v9 + v2) & 0xF9) == 0;
    }
    else
    {
      size_t v14 = get_chr_property_list(v5, v7, v8, *(void *)(a2 + 16), (uint64_t)&v24);
      BOOL v25 = ((v9 + v2) & 0xF9) == 0;
      if (v14 && compare_opcodes(v14, v7, v8, a2, &v24, v14, &v23))
      {
        switch((_BYTE)v2 + (_BYTE)v9)
        {
          case 0:
            unsigned __int8 v15 = *v5 + 9;
            goto LABEL_34;
          case 1:
          case 2:
            unsigned __int8 v15 = *v5 + 8;
            goto LABEL_34;
          case 3:
          case 4:
            unsigned __int8 v15 = *v5 + 7;
            goto LABEL_34;
          case 5:
          case 6:
            unsigned __int8 v15 = *v5 + 6;
            goto LABEL_34;
          case 7:
            unsigned __int8 v15 = *v5 + 5;
LABEL_34:
            *uint64_t v5 = v15;
            break;
          default:
            goto LABEL_35;
        }
      }
    }
    goto LABEL_35;
  }
  return 0xFFFFFFFFLL;
}

unsigned __int8 *get_chr_property_list(unsigned __int8 *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8 = *a1;
  uint64_t result = a1 + 1;
  unsigned int v7 = v8;
  *(void *)a5 = v8;
  if (v8 - 33 <= 0x40)
  {
    if (v7 >= 0x2E) {
      int v9 = 46;
    }
    else {
      int v9 = 33;
    }
    if (v7 <= 0x3A) {
      int v10 = v9;
    }
    else {
      int v10 = 59;
    }
    if (v7 <= 0x47) {
      int v11 = v10;
    }
    else {
      int v11 = 72;
    }
    if (v7 <= 0x54) {
      int v12 = v11;
    }
    else {
      int v12 = 85;
    }
    BOOL v13 = (v7 - v12 + 33) > 0x2Du
       || ((1 << (v7 - v12 + 33)) & 0x238000000000) == 0;
    size_t v14 = a1 + 3;
    if (!v13) {
      uint64_t result = v14;
    }
    if ((v7 - v12 - 2) > 8u) {
      int v15 = 1;
    }
    else {
      int v15 = dword_20D60BA9C[(char)(v7 - v12 - 2)];
    }
    *(_DWORD *)(a5 + 4) = v15;
    if (v12 <= 58)
    {
      if (v12 == 33)
      {
        int v16 = 29;
LABEL_38:
        *(_DWORD *)a5 = v16;
LABEL_39:
        int v22 = result + 1;
        unsigned int v21 = *result;
        if (a2 && v21 >= 0xC0)
        {
          if ((v21 & 0x20) != 0)
          {
            int v25 = *v22 & 0x3F;
            if ((v21 & 0x10) != 0)
            {
              if ((v21 & 8) != 0)
              {
                int v36 = result[2] & 0x3F;
                int v37 = result[3] & 0x3F;
                int v38 = result[4] & 0x3F;
                if ((v21 & 4) != 0)
                {
                  unsigned int v21 = ((v21 & 1) << 30) | (v25 << 24) | (v36 << 18) | (v37 << 12) | (v38 << 6) | result[5] & 0x3F;
                  int v22 = result + 6;
                }
                else
                {
                  unsigned int v21 = ((v21 & 3) << 24) | (v25 << 18) | (v36 << 12) | (v37 << 6) | v38;
                  int v22 = result + 5;
                }
              }
              else
              {
                unsigned int v21 = ((v21 & 7) << 18) | (v25 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
                int v22 = result + 4;
              }
            }
            else
            {
              unsigned int v21 = ((v21 & 0xF) << 12) | (v25 << 6) | result[2] & 0x3F;
              int v22 = result + 3;
            }
          }
          else
          {
            int v22 = result + 2;
            unsigned int v21 = result[1] & 0x3F | ((v21 & 0x1F) << 6);
          }
        }
        *(_DWORD *)(a5 + 8) = v21;
        *(_DWORD *)(a5 + 12) = -1;
        return v22;
      }
LABEL_30:
      int v18 = 29;
LABEL_32:
      *(_DWORD *)a5 = v18;
      unsigned int v19 = *result;
      if (a2 && v19 >= 0xC0)
      {
        if ((v19 & 0x20) != 0)
        {
          int v24 = result[1] & 0x3F;
          if ((v19 & 0x10) != 0)
          {
            if ((v19 & 8) != 0)
            {
              int v33 = result[2] & 0x3F;
              int v34 = result[3] & 0x3F;
              int v35 = result[4] & 0x3F;
              if ((v19 & 4) != 0)
              {
                unsigned int v19 = ((v19 & 1) << 30) | (v24 << 24) | (v33 << 18) | (v34 << 12) | (v35 << 6) | result[5] & 0x3F;
                result += 6;
              }
              else
              {
                unsigned int v19 = ((v19 & 3) << 24) | (v24 << 18) | (v33 << 12) | (v34 << 6) | v35;
                result += 5;
              }
            }
            else
            {
              unsigned int v19 = ((v19 & 7) << 18) | (v24 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
              result += 4;
            }
          }
          else
          {
            unsigned int v19 = ((v19 & 0xF) << 12) | (v24 << 6) | result[2] & 0x3F;
            result += 3;
          }
        }
        else
        {
          unsigned __int8 v20 = result[1];
          result += 2;
          unsigned int v19 = v20 & 0x3F | ((v19 & 0x1F) << 6);
        }
      }
      else
      {
        ++result;
      }
      *(_DWORD *)(a5 + 8) = v19;
      if (v19 >= 0x80 && (a3 | a2 || v19 > 0xFF)) {
        unsigned int v39 = *(_DWORD *)&_pcre2_ucd_records_8[12
      }
                                             * _pcre2_ucd_stage2_8[v19 & 0x7F | (_pcre2_ucd_stage1_8[v19 >> 7] << 7)]
                                             + 4]
            + v19;
      else {
        unsigned int v39 = *(unsigned __int8 *)(a4 + v19);
      }
      *(_DWORD *)(a5 + 12) = v39;
      if (v19 == v39) {
        *(_DWORD *)(a5 + 12) = -1;
      }
      else {
        *(_DWORD *)(a5 + 16) = -1;
      }
      return result;
    }
    if (v12 != 85)
    {
      if (v12 != 72)
      {
        int v16 = 31;
        goto LABEL_38;
      }
      int v18 = 31;
      goto LABEL_32;
    }
    unsigned int v17 = *result++;
    unsigned int v7 = v17;
    *(_DWORD *)a5 = v17;
  }
  int v18 = 31;
  switch(v7)
  {
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
      return result;
    case 0xEu:
    case 0x1Bu:
    case 0x1Cu:
      return 0;
    case 0xFu:
    case 0x10u:
      int v26 = *result;
      if (v26 != 9)
      {
        *(_DWORD *)(a5 + 8) = v26;
        *(_DWORD *)(a5 + 12) = result[1];
        result += 2;
        return result;
      }
      uint64_t v27 = 0;
      long long v28 = (char *)&_pcre2_ucd_caseless_sets_8 + 4 * result[1];
      int v23 = result + 2;
      do
      {
        if (v27 == 24)
        {
          *(_DWORD *)(a5 + 8) = result[2];
          *(_DWORD *)(a5 + 12) = result[3];
          return v23;
        }
        int v29 = *(_DWORD *)&v28[v27];
        *(_DWORD *)(a5 + v27 + 8) = v29;
        v27 += 4;
      }
      while (v29 != -1);
      if (v7 == 16) {
        int v30 = 29;
      }
      else {
        int v30 = 31;
      }
      *(_DWORD *)a5 = v30;
      return v23;
    case 0x1Du:
    case 0x1Fu:
      goto LABEL_39;
    case 0x1Eu:
      goto LABEL_30;
    case 0x20u:
      goto LABEL_32;
    default:
      if (v7 - 110 >= 2)
      {
        if (v7 != 112) {
          return 0;
        }
        int v23 = &result[__rev16(*(unsigned __int16 *)result) - 1];
      }
      else
      {
        int v23 = result + 32;
      }
      unsigned int v31 = *v23 - 98;
      if (v31 > 0xB) {
        goto LABEL_71;
      }
      int v32 = 1 << v31;
      if ((v32 & 0x533) != 0)
      {
        *(_DWORD *)(a5 + 4) = 1;
LABEL_64:
        ++v23;
        goto LABEL_71;
      }
      if ((v32 & 0x20C) != 0) {
        goto LABEL_64;
      }
      *(_DWORD *)(a5 + 4) = __rev16(*(unsigned __int16 *)(v23 + 1)) == 0;
      v23 += 5;
LABEL_71:
      *(_DWORD *)(a5 + 8) = v23 - result;
      return v23;
  }
}

uint64_t compare_opcodes(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, unsigned __int8 *a6, _DWORD *a7)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  int v7 = (*a7)--;
  if (v7 < 2) {
    return 0;
  }
  int v83 = 0;
  std::string v82 = a5 + 2;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_5:
        while (1)
        {
          int v16 = *a1;
          if (v16 != 118) {
            break;
          }
          a1 += 6;
        }
        if (v16 != 119) {
          break;
        }
        a1 += __rev16(*(unsigned __int16 *)(a1 + 5));
      }
      while (v16 == 120)
      {
        a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
        int v16 = *a1;
      }
      if ((v16 - 121) > 0x1E) {
        break;
      }
      int v17 = 1 << (v16 - 121);
      if ((v17 & 0xA800) != 0)
      {
        int v22 = &a1[__rev16(*(unsigned __int16 *)(a1 + 1))];
        a1 += _pcre2_OP_lengths_8[v16];
        int v83 = 1;
        if (*v22 == 120)
        {
          do
          {
            uint64_t result = compare_opcodes(a1, a2, a3, a4, a5, a6, a7);
            if (!result) {
              return result;
            }
            a1 = v22 + 3;
            v22 += __rev16(*(unsigned __int16 *)(v22 + 1));
          }
          while (*v22 == 120);
          int v83 = 1;
        }
      }
      else if ((v17 & 9) != 0)
      {
        if (!a5[1]) {
          return 0;
        }
        uint64_t result = 0;
        switch(a1[-__rev16(*(unsigned __int16 *)(a1 + 1))])
        {
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x84u:
            return v83 ^ 1u;
          case 0x82u:
          case 0x83u:
            return result;
          case 0x85u:
            if ((*a5 - 29) < 2) {
              goto LABEL_158;
            }
            return 0;
          case 0x88u:
          case 0x89u:
          case 0x8Du:
          case 0x8Eu:
            if (*(_DWORD *)(a4 + 292)) {
              return 0;
            }
            goto LABEL_158;
          default:
LABEL_158:
            a1 += _pcre2_OP_lengths_8[v16];
            break;
        }
      }
      else
      {
        if ((v17 & 0x60000000) == 0) {
          break;
        }
        float32x4_t v78 = a1 + 1;
        if (a1[1] - 132 > 4 || ((1 << (a1[1] + 124)) & 0x15) == 0) {
          return 0;
        }
        do
          v78 += __rev16(*(unsigned __int16 *)(v78 + 1));
        while (*v78 == 120);
        uint64_t result = compare_opcodes(v78 + 3, a2, a3, a4, a5, a6, a7);
        if (!result) {
          return result;
        }
        a1 += _pcre2_OP_lengths_8[v16];
      }
    }
    if (!v16) {
      return a5[1] != 0;
    }
    uint64_t result = (uint64_t)get_chr_property_list(a1, a2, a3, *(void *)(a4 + 16), (uint64_t)&v84);
    if (!result) {
      return result;
    }
    a1 = (unsigned __int8 *)result;
    int v19 = *a5;
    if (*a5 == 29)
    {
      unsigned __int8 v20 = &v84;
      unsigned int v21 = v82;
LABEL_26:
      int v23 = *v21;
      if (v20 == &v84) {
        uint64_t v24 = result;
      }
      else {
        uint64_t v24 = (uint64_t)a6;
      }
      uint64_t v25 = v24 + 2;
      int v26 = v20 + 3;
      while (2)
      {
        uint64_t result = 0;
        int v27 = *v20;
        if (*v20 <= 109)
        {
          switch(v27)
          {
            case 6:
              if (v23 > 0xFF || (*(unsigned char *)(*(void *)(a4 + 32) + v23) & 8) == 0) {
                return 0;
              }
              goto LABEL_148;
            case 7:
              if (v23 <= 0xFF && (*(unsigned char *)(*(void *)(a4 + 32) + v23) & 8) != 0) {
                return 0;
              }
              goto LABEL_148;
            case 8:
              if (v23 > 0xFF || (*(unsigned char *)(*(void *)(a4 + 32) + v23) & 1) == 0) {
                return 0;
              }
              goto LABEL_148;
            case 9:
              if v23 <= 0xFF && (*(unsigned char *)(*(void *)(a4 + 32) + v23)) {
                return 0;
              }
              goto LABEL_148;
            case 10:
              if (v23 > 0xFF || (*(unsigned char *)(*(void *)(a4 + 32) + v23) & 0x10) == 0) {
                return 0;
              }
              goto LABEL_148;
            case 11:
              if (v23 <= 0xFE && (*(unsigned char *)(*(void *)(a4 + 32) + v23) & 0x10) != 0) {
                return 0;
              }
              goto LABEL_148;
            case 15:
            case 16:
              int v30 = v27 == 15;
              int v31 = v20[3];
              LODWORD(v18) = _pcre2_ucd_stage2_8[v23
                                               - (v18 & 0xFFFFFF80)
                                               + (_pcre2_ucd_stage1_8[v23 / 128] << 7)];
              switch(v20[2])
              {
                case 1:
                  int v38 = _pcre2_ucd_records_8[12 * v18 + 1];
                  if (v38 == 5 || v38 == 9) {
                    goto LABEL_118;
                  }
                  BOOL v40 = v38 == 8;
                  goto LABEL_143;
                case 2:
                  BOOL v41 = v27 == 15;
                  BOOL v42 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] == v31;
                  goto LABEL_113;
                case 3:
                  BOOL v41 = v27 == 15;
                  int v43 = _pcre2_ucd_records_8[12 * v18 + 1];
                  goto LABEL_111;
                case 4:
                  BOOL v41 = v27 == 15;
                  int v43 = _pcre2_ucd_records_8[12 * v18];
LABEL_111:
                  BOOL v42 = v31 == v43;
                  goto LABEL_113;
                case 5:
                  BOOL v41 = v27 == 15;
                  BOOL v42 = (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] & 0xFFFFFFFD) == 1;
                  goto LABEL_113;
                case 6:
                case 7:
                  if (v23 < 0x2000)
                  {
                    if (v23 > 132)
                    {
                      if (v23 > 5759)
                      {
                        if (v23 == 5760 || v23 == 6158) {
                          goto LABEL_147;
                        }
                      }
                      else if (v23 == 133 || v23 == 160)
                      {
                        goto LABEL_147;
                      }
                    }
                    else if (v23 <= 0x20 && ((1 << v23) & 0x100003E00) != 0)
                    {
                      goto LABEL_147;
                    }
                  }
                  else if ((v23 - 0x2000) < 0xB {
                         || (v23 - 8232) <= 0x37
                  }
                         && ((1 << (v23 - 40)) & 0x80000000000083) != 0
                         || v23 == 12288)
                  {
                    goto LABEL_147;
                  }
                  BOOL v41 = v27 == 15;
                  BOOL v42 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] == 6;
LABEL_113:
                  int v44 = !v42;
                  int v30 = v41 ^ v44;
                  goto LABEL_147;
                case 8:
                  if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] | 2) == 3)
                  {
LABEL_118:
                    int v45 = 1;
                  }
                  else
                  {
                    BOOL v40 = v23 == 95;
LABEL_143:
                    int v45 = v40;
                  }
                  int v30 = v45 == v30;
                  goto LABEL_147;
                case 9:
                  int v18 = (int *)((char *)&_pcre2_ucd_caseless_sets_8
                              + 4 * _pcre2_ucd_records_8[12 * v18 + 3]);
                  break;
                default:
                  return 0;
              }
              while (1)
              {
                int v46 = *v18;
                if (*v18 > v23) {
                  break;
                }
                ++v18;
                if (v46 == v23) {
                  goto LABEL_147;
                }
              }
              int v30 = v27 != 15;
LABEL_147:
              if (v30) {
                goto LABEL_148;
              }
              return 0;
            case 17:
            case 21:
            case 23:
            case 25:
              uint64_t result = 0;
              if ((v23 - 10) >= 4 && (v23 - 8232) >= 2 && v23 != 133) {
                goto LABEL_148;
              }
              return result;
            case 18:
              uint64_t result = 0;
              if (v23 < 0x2000)
              {
                if (v23 <= 159)
                {
                  if (v23 != 9 && v23 != 32) {
                    return result;
                  }
                }
                else if (v23 != 160 && v23 != 5760 && v23 != 6158)
                {
                  return result;
                }
              }
              else if (v23 > 8238)
              {
                if (v23 != 8239 && v23 != 8287 && v23 != 12288) {
                  return result;
                }
              }
              else if ((v23 - 0x2000) >= 0xB)
              {
                return result;
              }
              goto LABEL_148;
            case 19:
              uint64_t result = 0;
              if (v23 < 0x2000)
              {
                if (v23 <= 159)
                {
                  if (v23 == 9 || v23 == 32) {
                    return result;
                  }
                }
                else if (v23 == 160 || v23 == 5760 || v23 == 6158)
                {
                  return result;
                }
              }
              else if (v23 > 8238)
              {
                if (v23 == 8239 || v23 == 8287 || v23 == 12288) {
                  return result;
                }
              }
              else if ((v23 - 0x2000) < 0xB)
              {
                return result;
              }
              break;
            case 20:
              if ((v23 - 10) >= 4 && (v23 - 8232) >= 2 && v23 != 133) {
                return 0;
              }
              goto LABEL_148;
            case 24:
              goto LABEL_148;
            case 29:
              int v32 = v20[2];
              int v33 = v26;
              while (v23 != v32)
              {
                int v34 = *v33++;
                int v32 = v34;
                if (v34 == -1) {
                  goto LABEL_148;
                }
              }
              return 0;
            case 31:
              int v35 = v20[2];
              int v36 = v26;
              while (v23 != v35)
              {
                int v37 = *v36++;
                int v35 = v37;
                if (v37 == -1) {
                  return 0;
                }
              }
              if (v23 == -1) {
                return 0;
              }
              goto LABEL_148;
            default:
              return result;
          }
          goto LABEL_148;
        }
        switch(v27)
        {
          case 'n':
            if (v23 <= 0xFF) {
              goto LABEL_89;
            }
            break;
          case 'o':
            if (v23 > 0xFF) {
              return 0;
            }
LABEL_89:
            if ((*(unsigned __int8 *)(v24 - v20[2] + ((unint64_t)v23 >> 3)) >> (v23 & 7))) {
              return 0;
            }
            break;
          case 'p':
            uint64_t v80 = v25;
            uint64_t v81 = v24;
            long long v28 = v26;
            BOOL v29 = _pcre2_xclass_8(v23, (unsigned char *)(v25 - v20[2]));
            int v26 = v28;
            uint64_t v25 = v80;
            uint64_t v24 = v81;
            if (v29) {
              return 0;
            }
            break;
          default:
            return result;
        }
LABEL_148:
        int v47 = v21[1];
        ++v21;
        int v23 = v47;
        if (v47 == -1) {
          goto LABEL_233;
        }
        continue;
      }
    }
    unsigned int v21 = (int *)&v86;
    unsigned __int8 v20 = a5;
    if (v84 == 29) {
      goto LABEL_26;
    }
    if (v19 == 110 || v84 == 110 || !a2 && (v19 == 111 || v84 == 111)) {
      break;
    }
    if ((v19 - 15) > 1)
    {
      uint64_t result = 0;
      unsigned int v61 = v19 - 6;
      if (v61 > 0x10 || (v84 - 6) > 0x14) {
        return result;
      }
      if (!autoposstab[21 * v61 + v84 - 6]) {
        return 0;
      }
    }
    else if (v84 != 24)
    {
      if ((v84 - 15) > 1) {
        return 0;
      }
      int v48 = propposstab[11 * *v82 + v86];
      switch(propposstab[11 * *v82 + v86])
      {
        case 1u:
          uint64_t result = 0;
          if (v19 != 16 || v84 != 16) {
            return result;
          }
          break;
        case 2u:
          if ((v19 == v84) == (a5[3] == v87)) {
            return 0;
          }
          break;
        case 3u:
          if (v19 == v84) {
            return 0;
          }
          break;
        case 4u:
          if (v84 != 16) {
            return 0;
          }
          int v75 = v19 == 16;
          unsigned int v76 = a5[3];
          uint64_t v77 = v87;
          goto LABEL_269;
        case 5u:
          if (v19 != 16) {
            return 0;
          }
          int v75 = v84 == 16;
          unsigned int v76 = v87;
          uint64_t v77 = a5[3];
LABEL_269:
          if (catposstab[30 * v76 + v77] != v75) {
            return 0;
          }
          break;
        case 6u:
        case 7u:
        case 8u:
          if (v84 != 16) {
            return 0;
          }
          uint64_t v49 = (unsigned __int8 *)&posspropstab + 4 * (v48 - 6);
          unsigned int v50 = v87;
          if (v87 == *v49 || v87 == v49[1]) {
            goto LABEL_247;
          }
          uint64_t result = 0;
          if (v19 != 16) {
            return result;
          }
          int v51 = v49[2];
          goto LABEL_240;
        case 9u:
        case 0xAu:
        case 0xBu:
          if (v19 != 16) {
            return 0;
          }
          float32x4_t v70 = (unsigned __int8 *)&posspropstab + 4 * (v48 - 9);
          unsigned int v50 = a5[3];
          if (v50 == *v70 || v50 == v70[1]) {
            goto LABEL_256;
          }
          uint64_t result = 0;
          if (v84 != 16) {
            return result;
          }
          int v51 = v70[2];
LABEL_240:
          if (v50 == v51) {
            return result;
          }
          break;
        case 0xCu:
        case 0xDu:
        case 0xEu:
          if (v84 != 16) {
            return 0;
          }
          std::string v71 = (unsigned __int8 *)&posspropstab + 4 * (v48 - 12);
          LODWORD(v72) = v87;
          if (catposstab[30 * *v71 + v87] && catposstab[30 * v71[1] + v87])
          {
            uint64_t result = 0;
            if (v19 != 16) {
              return result;
            }
            int v73 = v71[3];
            goto LABEL_254;
          }
LABEL_247:
          if (v19 == 16) {
            return 0;
          }
          break;
        case 0xFu:
        case 0x10u:
        case 0x11u:
          if (v19 != 16) {
            return 0;
          }
          std::string v74 = (unsigned __int8 *)&posspropstab + 4 * (v48 - 15);
          uint64_t v72 = a5[3];
          if (catposstab[30 * *v74 + v72] && catposstab[30 * v74[1] + v72])
          {
            uint64_t result = 0;
            if (v84 != 16) {
              return result;
            }
            int v73 = v74[3];
LABEL_254:
            if (v72 == v73) {
              return result;
            }
          }
          else
          {
LABEL_256:
            if (v84 == 16) {
              return 0;
            }
          }
          break;
        default:
          return 0;
      }
    }
LABEL_233:
    if (!v85) {
      return 1;
    }
  }
  uint64_t result = 0;
  if (a2) {
    BOOL v52 = 0;
  }
  else {
    BOOL v52 = v19 == 111;
  }
  BOOL v53 = v52 || v19 == 110;
  int v54 = v53;
  if (v53) {
    std::string v55 = a5;
  }
  else {
    std::string v55 = &v84;
  }
  if (v53) {
    uint64_t v56 = a6;
  }
  else {
    uint64_t v56 = a1;
  }
  if (v53) {
    int v57 = v84;
  }
  else {
    int v57 = *a5;
  }
  if (v53) {
    uint64_t v58 = &v84;
  }
  else {
    uint64_t v58 = a5;
  }
  std::string v59 = &v56[-v55[2]];
  switch(v57)
  {
    case 6:
      LODWORD(result) = 1;
      goto LABEL_196;
    case 7:
LABEL_196:
      uint64_t v60 = *(void *)(a4 + 24) + 64;
      goto LABEL_224;
    case 8:
      LODWORD(result) = 1;
      goto LABEL_221;
    case 9:
LABEL_221:
      uint64_t v60 = *(void *)(a4 + 24);
      goto LABEL_224;
    case 10:
      LODWORD(result) = 1;
      goto LABEL_223;
    case 11:
LABEL_223:
      uint64_t v60 = *(void *)(a4 + 24) + 160;
LABEL_224:
      if (!result) {
        goto LABEL_230;
      }
      uint64_t v68 = 0;
      while ((v59[v68] & ~*(unsigned __int8 *)(v60 + v68)) == 0)
      {
        if (++v68 == 32) {
          goto LABEL_233;
        }
      }
      return 0;
    default:
      if ((v57 - 110) < 2)
      {
        if (v58 == &v84) {
          uint64_t v62 = a1;
        }
        else {
          uint64_t v62 = a6;
        }
        if (v54) {
          unsigned int v63 = &v84;
        }
        else {
          unsigned int v63 = a5;
        }
        uint64_t v60 = (uint64_t)&v62[-v63[2]];
        goto LABEL_230;
      }
      if (v57 != 112) {
        return result;
      }
      if (v58 == &v84) {
        uint64_t v64 = a1;
      }
      else {
        uint64_t v64 = a6;
      }
      if (v54) {
        uint64_t v65 = &v84;
      }
      else {
        uint64_t v65 = a5;
      }
      uint64_t v66 = &v64[-v65[2]];
      unsigned __int8 v67 = v66[2];
      if ((v67 & 4) != 0) {
        return 0;
      }
      if ((v66[2] & 2) == 0)
      {
        if (!v85) {
          return (v67 & 1) == 0;
        }
        goto LABEL_5;
      }
      uint64_t v60 = (uint64_t)(v66 + 3);
LABEL_230:
      uint64_t v69 = 0;
      while ((*(unsigned char *)(v60 + v69) & v59[v69]) == 0)
      {
        if (++v69 == 32) {
          goto LABEL_233;
        }
      }
      return 0;
  }
}

unsigned __int8 *_pcre2_find_bracket_8(unsigned __int8 *result, int a2, int a3)
{
  while (2)
  {
    uint64_t v3 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        int v4 = result[1];
        goto LABEL_10;
      case '[':
      case '\\':
      case ']':
      case 'a':
        int v4 = result[3];
LABEL_10:
        uint64_t v6 = 2 * ((v4 - 15) < 2);
        goto LABEL_11;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_19;
      case 'p':
        unsigned int v7 = *(unsigned __int16 *)(result + 1);
        goto LABEL_17;
      case 'w':
        unsigned int v7 = *(unsigned __int16 *)(result + 5);
LABEL_17:
        result += __rev16(v7);
        continue;
      default:
        char v5 = v3 - 125;
        if ((v3 - 125) > 0x24) {
          goto LABEL_18;
        }
        if (((1 << v5) & 0x1550000000) != 0)
        {
          uint64_t v6 = result[1];
LABEL_11:
          result += v6 + _pcre2_OP_lengths_8[v3];
          continue;
        }
        if (((1 << v5) & 0x31800) != 0)
        {
          if (a3 == bswap32(*(unsigned __int16 *)(result + 3)) >> 16) {
            return result;
          }
          result += _pcre2_OP_lengths_8[v3];
          continue;
        }
        if (v3 == 125)
        {
          if (a3 < 0) {
            return result;
          }
          result += 3;
          continue;
        }
LABEL_18:
        if (*result)
        {
LABEL_19:
          result += _pcre2_OP_lengths_8[v3];
          if (a2 && (v3 - 29) <= 0x37)
          {
            unsigned int v8 = *(result - 1);
            if (v8 >= 0xC0) {
              result += _pcre2_utf8_table4[v8 & 0x3F];
            }
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t pcre2_substitute_8(uint64_t a1, unsigned char *a2, unint64_t a3, size_t a4, int a5, uint64_t a6, long long *a7, unsigned __int8 *a8, unint64_t a9, char *a10, unint64_t *a11)
{
  uint64_t v187 = *MEMORY[0x263EF8340];
  int v11 = *(_DWORD *)(a1 + 88);
  unint64_t v12 = *a11;
  *a11 = -1;
  if ((a5 & 0x30) != 0) {
    return 4294967262;
  }
  size_t v14 = (void *)a6;
  int v15 = a2;
  if (a6)
  {
    size_t __n = a4;
    uint64_t v170 = a1;
    v159 = a7;
    unint64_t v167 = a3;
    if ((a5 & 0x10000) == 0)
    {
      int v16 = 0;
      goto LABEL_20;
    }
    if (a7) {
      int v18 = a7;
    }
    else {
      int v18 = (long long *)a1;
    }
    int v19 = *(unsigned __int16 *)(a1 + 128);
    unsigned int v20 = *(unsigned __int16 *)(a6 + 74);
    unsigned int v21 = pcre2_match_data_create_8(v20, v18);
    if (v21)
    {
      int v16 = v21;
      if (v19 + 1 < v20) {
        unsigned int v22 = v19 + 1;
      }
      else {
        unsigned int v22 = v20;
      }
      memcpy(v21, v14, 16 * v22 + 80);
      size_t v14 = v16;
      int v15 = a2;
      goto LABEL_20;
    }
    return 4294967248;
  }
  if ((a5 & 0x10000) != 0) {
    return 4294967245;
  }
  size_t __n = a4;
  unint64_t v167 = a3;
  v159 = a7;
  if (a7) {
    int v17 = a7;
  }
  else {
    int v17 = (long long *)a1;
  }
  uint64_t v170 = a1;
  size_t v14 = pcre2_match_data_create_from_pattern_8(a1, v17);
  int v16 = v14;
  if (!v14) {
    return 4294967248;
  }
LABEL_20:
  unint64_t v23 = a9;
  uint64_t v182 = 0;
  long long v179 = 0u;
  size_t v180 = 0;
  v178[0] = 0;
  uint64_t ovector_pointer_8 = pcre2_get_ovector_pointer_8((uint64_t)v14);
  unsigned int ovector_count_8 = pcre2_get_ovector_count_8((uint64_t)v14);
  v178[1] = v15;
  *(void *)&long long v179 = a10;
  v157 = (uint64_t *)ovector_pointer_8;
  uint64_t v181 = ovector_pointer_8;
  if (v167 == -1) {
    unint64_t v167 = _pcre2_strlen_8(v15);
  }
  uint64_t v152 = (uint64_t)v16;
  int v156 = v11 & 0x80000;
  if (a9 == -1) {
    unint64_t v23 = _pcre2_strlen_8(a8);
  }
  v183 = 0;
  uint64_t v25 = v15;
  uint64_t v162 = (uint64_t)v14;
  if ((a5 & 0x40000000) == 0)
  {
    if (v156)
    {
      unsigned int valid = _pcre2_valid_utf_8(a8, v23, v14 + 8);
      if (valid)
      {
        unsigned int v153 = valid;
        v14[6] = 0;
        goto LABEL_367;
      }
    }
  }
  unint64_t v27 = __n;
  if (v167 < __n)
  {
    v14[6] = 0;
    int v28 = -33;
    goto LABEL_366;
  }
  if ((a5 & 0x20000) != 0)
  {
    v144 = a11;
    unint64_t v30 = v12;
    int v31 = 0;
    unint64_t v29 = 0;
    size_t v161 = 0;
  }
  else
  {
    unint64_t v168 = v12 - __n;
    if (v12 >= __n)
    {
      v144 = a11;
      unint64_t v145 = v12;
      memcpy(a10, v15, __n);
      unint64_t v27 = __n;
      int v31 = 0;
      unint64_t v29 = 0;
      size_t v161 = __n;
      goto LABEL_38;
    }
    if ((a5 & 0x1000) == 0) {
      goto LABEL_365;
    }
    v144 = a11;
    size_t v161 = 0;
    unint64_t v29 = __n - v12;
    unint64_t v30 = v12;
    int v31 = 1;
  }
  unint64_t v145 = v30;
  unint64_t v168 = v30;
LABEL_38:
  int v32 = 0;
  int v169 = 0;
  int v166 = 0;
  int v33 = 0;
  size_t v148 = v23;
  unint64_t v34 = (unint64_t)&a8[v23];
  uint64_t v35 = a5 & 0x39F00;
  int v160 = v11 & 0xA0000;
  int v155 = 0;
  int v36 = v11 & 0x80000;
  BOOL v37 = (a5 & 0x10000) == 0;
  unsigned int v153 = -48;
  uint64_t v154 = -1;
  uint64_t v163 = -1;
  uint64_t v164 = -1;
  while (1)
  {
    memset(v186, 0, sizeof(v186));
    unint64_t v38 = v27;
    unsigned int __na = v35;
    if (!v37) {
      break;
    }
    int matched = pcre2_match_8();
    uint64_t v35 = __na;
    unint64_t v27 = v38;
    if (matched < 0) {
      goto LABEL_49;
    }
LABEL_41:
    unint64_t v41 = *v157;
    unint64_t v40 = v157[1];
    int v28 = -60;
    if (v40 < *v157) {
      goto LABEL_366;
    }
    size_t v42 = v41 - v27;
    if (v41 < v27) {
      goto LABEL_366;
    }
    if (v163 != v41 || v154 != v40)
    {
      if (v155 == 0x7FFFFFFF)
      {
        int v28 = -61;
        goto LABEL_366;
      }
      if (matched) {
        int v45 = matched;
      }
      else {
        int v45 = ovector_count_8;
      }
      if ((a5 & 0x20000) == 0)
      {
        if (v31 || v168 >= v42)
        {
          if (v31)
          {
            v29 += v42;
            goto LABEL_83;
          }
          int v150 = v45;
          memcpy(&a10[v161], &v25[v27], v42);
          uint64_t v35 = __na;
          unint64_t v27 = v38;
          v161 += v42;
          int v45 = v150;
          v168 -= v42;
        }
        else
        {
          if ((v35 & 0x1000) == 0) {
            goto LABEL_365;
          }
          unint64_t v29 = v42 - v168;
LABEL_83:
          int v31 = 1;
        }
      }
      ++v155;
      *((void *)&v179 + 1) = v161;
      LODWORD(v182) = v45;
      int v46 = a8;
      v183 = a8;
      if ((v35 & 0x8000) == 0)
      {
        text_std::vector<int>::pointer end = v45;
        unsigned int v47 = 0;
        if ((v35 & 0x800) != 0) {
          int v48 = -55;
        }
        else {
          int v48 = -49;
        }
        if ((v35 & 0x400) != 0) {
          int v49 = 9;
        }
        else {
          int v49 = 16;
        }
        int v146 = v49;
        int v147 = v48;
        while (2)
        {
          unsigned int v177 = 0;
          if ((unint64_t)v46 >= v34)
          {
            if (!v47) {
              goto LABEL_325;
            }
            unint64_t v34 = *((void *)&v186[v47 / 2 - 1] + 1);
            v47 -= 2;
            BOOL v52 = *(unsigned __int8 **)&v186[v47 / 2];
LABEL_102:
            v183 = v52;
            goto LABEL_181;
          }
          int v50 = *v46;
          if (v33)
          {
            BOOL v51 = v50 != 92 || (unint64_t)v46 >= v34 - 1;
            if (!v51 && v46[1] == 69)
            {
              int v33 = 0;
              BOOL v52 = v46 + 2;
              goto LABEL_102;
            }
LABEL_124:
            BOOL v53 = v46;
LABEL_125:
            v183 = v53 + 1;
            unsigned int v64 = *v53;
            unsigned int v177 = v64;
            if (v36 && v64 >= 0xC0)
            {
              if ((v64 & 0x20) == 0)
              {
                v183 = v53 + 2;
                unsigned int v177 = v53[1] & 0x3F | ((v64 & 0x1F) << 6);
                if (!v32) {
                  goto LABEL_129;
                }
LABEL_149:
                if (v160)
                {
                  int v72 = _pcre2_ucd_stage2_8[v177
                                          - (v53 & 0xFFFFFF80)
                                          + (_pcre2_ucd_stage1_8[(int)v177 / 128] << 7)];
                  uint64_t v73 = _pcre2_ucd_records_8[12 * v72 + 1];
                  int v65 = v169;
                  if (_pcre2_ucp_gentype_8[v73] == 1)
                  {
                    int v74 = v32 <= 0 ? 5 : 9;
                    int v65 = v169;
                    if (v74 != v73)
                    {
                      unsigned int v75 = *(_DWORD *)&_pcre2_ucd_records_8[12 * v72 + 4] + v177;
                      goto LABEL_160;
                    }
                  }
                }
                else
                {
                  uint64_t v76 = *(void *)(v170 + 24);
                  uint64_t v77 = 128;
                  if (v32 > 0) {
                    uint64_t v77 = 96;
                  }
                  int v65 = v169;
                  if (((*(unsigned __int8 *)(v76 + v77 + ((unint64_t)v177 >> 3) + 512) >> (v177 & 7)) & 1) == 0)
                  {
                    unsigned int v75 = *(unsigned __int8 *)(v76 + v177 + 256);
LABEL_160:
                    unsigned int v177 = v75;
                    int v65 = v169;
                  }
                }
LABEL_161:
                if (v36)
                {
                  unsigned int v78 = _pcre2_ord2utf_8(v177, (uint64_t)__src);
                  uint64_t v35 = __na;
                  unint64_t v27 = v38;
                }
                else
                {
                  __src[0] = v177;
                  unsigned int v78 = 1;
                }
                uint64_t v79 = v78;
                if (v31)
                {
                  v29 += v78;
                  int v31 = 1;
                  int v32 = v65;
                  uint64_t v25 = a2;
                }
                else
                {
                  unint64_t v80 = v168 - v78;
                  if (v168 >= v78)
                  {
                    memcpy(&a10[v161], __src, v78);
                    uint64_t v35 = __na;
                    int v31 = 0;
                    v161 += v79;
                    int v36 = v156;
                    unint64_t v168 = v80;
                  }
                  else
                  {
                    if ((v35 & 0x1000) == 0) {
                      goto LABEL_365;
                    }
                    unint64_t v29 = v78 - v168;
                    int v31 = 1;
                  }
                  int v32 = v65;
                  uint64_t v25 = a2;
                  unint64_t v27 = v38;
                }
LABEL_181:
                int v46 = v183;
                continue;
              }
              int v66 = v53[1] & 0x3F;
              if ((v64 & 0x10) == 0)
              {
                unsigned int v177 = ((v64 & 0xF) << 12) | (v66 << 6) | v53[2] & 0x3F;
                unsigned __int8 v67 = v53 + 3;
                goto LABEL_147;
              }
              if ((v64 & 8) == 0)
              {
                unsigned int v177 = ((v64 & 7) << 18) | (v66 << 12) | ((v53[2] & 0x3F) << 6) | v53[3] & 0x3F;
                unsigned __int8 v67 = v53 + 4;
                goto LABEL_147;
              }
              int v68 = v53[2] & 0x3F;
              int v69 = v53[3] & 0x3F;
              int v70 = v53[4] & 0x3F;
              if ((v64 & 4) == 0)
              {
                unsigned int v177 = ((v64 & 3) << 24) | (v66 << 18) | (v68 << 12) | (v69 << 6) | v70;
                v183 = v53 + 5;
                if (v32) {
                  goto LABEL_149;
                }
LABEL_129:
                int v65 = 0;
                goto LABEL_161;
              }
              unsigned int v177 = ((v64 & 1) << 30) | (v66 << 24) | (v68 << 18) | (v69 << 12) | (v70 << 6) | v53[5] & 0x3F;
              unsigned __int8 v67 = v53 + 6;
LABEL_147:
              v183 = v67;
            }
            if (v32) {
              goto LABEL_149;
            }
            goto LABEL_129;
          }
          break;
        }
        if (v50 == 36)
        {
          unint64_t v176 = 0;
          BOOL v53 = v46 + 1;
          v183 = v46 + 1;
          if ((unint64_t)(v46 + 1) >= v34) {
            goto LABEL_178;
          }
          int v54 = *v53;
          if (v54 == 36) {
            goto LABEL_125;
          }
          unsigned int v55 = *v53;
          if (v54 == 123)
          {
            BOOL v53 = v46 + 2;
            v183 = v46 + 2;
            if ((unint64_t)(v46 + 2) >= v34) {
              goto LABEL_178;
            }
            unsigned int v55 = *v53;
          }
          if (v55 == 42)
          {
            v183 = ++v53;
            if ((unint64_t)v53 >= v34) {
              goto LABEL_178;
            }
            unsigned int v60 = *v53;
          }
          else
          {
            signed int v56 = v55 - 48;
            if (v55 - 48 <= 9)
            {
              int v57 = v53 + 1;
              v183 = v53 + 1;
              if ((unint64_t)(v53 + 1) >= v34)
              {
                unsigned int v60 = v55;
              }
              else
              {
                unint64_t v58 = ~(unint64_t)v53 + v34;
                std::string v59 = v53 + 2;
                while (1)
                {
                  unsigned int v60 = *v57;
                  if (v60 - 58 < 0xFFFFFFF6) {
                    goto LABEL_193;
                  }
                  signed int v56 = v60 + 10 * v56 - 48;
                  if (v56 > *(unsigned __int16 *)(v170 + 128)) {
                    break;
                  }
                  v183 = ++v57;
                  ++v59;
                  if (!--v58)
                  {
                    int v57 = (unsigned __int8 *)v34;
                    goto LABEL_193;
                  }
                }
                if ((v35 & 0x800) == 0)
                {
                  int v62 = 16;
                  int v95 = -49;
                  goto LABEL_217;
                }
                do
                {
                  int v57 = v59;
                  v183 = v59;
                  if ((unint64_t)v59 >= v34) {
                    break;
                  }
                  ++v59;
                }
                while (*v57 - 48 < 0xA);
              }
LABEL_193:
              if (v54 == 123)
              {
                if ((v35 & 0x200) != 0 && v55 != 42 && v60 == 58 && (unint64_t)v57 < v34 - 2)
                {
                  v183 = v57 + 1;
                  int v87 = v57[1];
                  if (v87 != 45 && v87 != 43)
                  {
                    int v62 = 16;
                    int v95 = -59;
                    goto LABEL_217;
                  }
                  v141 = v57 + 2;
                  v183 = v57 + 2;
                  int v138 = v87;
                  text_std::vector<int>::pointer end = find_text_end(v170, &v183, v34, v87 == 45);
                  if (text_end) {
                    goto LABEL_201;
                  }
                  float32x4_t v90 = v183;
                  int v88 = v138;
                  if (v138 == 43)
                  {
                    if (*v183 == 58)
                    {
                      v137 = v183 + 1;
                      v140 = v183++;
                      text_std::vector<int>::pointer end = find_text_end(v170, &v183, v34, 1);
                      if (!text_end)
                      {
                        text_std::vector<int>::pointer end = 0;
                        int v88 = 43;
                        int v57 = v183;
                        float32x4_t v92 = v183;
                        float32x4_t v90 = v140;
                        float32x4_t v89 = v141;
                        std::string v91 = v137;
                        goto LABEL_211;
                      }
LABEL_201:
                      int v62 = 16;
LABEL_214:
                      unint64_t v27 = v38;
LABEL_215:
                      uint64_t v35 = __na;
                      goto LABEL_179;
                    }
                    text_std::vector<int>::pointer end = 0;
                    std::string v91 = 0;
                    float32x4_t v92 = 0;
                    int v88 = 43;
                  }
                  else
                  {
                    text_std::vector<int>::pointer end = 0;
                    std::string v91 = 0;
                    float32x4_t v92 = 0;
                  }
                  int v57 = v183;
                  float32x4_t v89 = v141;
                }
                else
                {
                  if ((unint64_t)v57 >= v34 || *v57 != 125)
                  {
                    int v62 = 16;
                    int v95 = -58;
LABEL_217:
                    text_std::vector<int>::pointer end = v95;
                    goto LABEL_179;
                  }
                  int v88 = 0;
                  float32x4_t v89 = 0;
                  float32x4_t v90 = 0;
                  std::string v91 = 0;
                  float32x4_t v92 = 0;
                }
LABEL_211:
                v183 = v57 + 1;
              }
              else
              {
                int v88 = 0;
                float32x4_t v89 = 0;
                float32x4_t v90 = 0;
                std::string v91 = 0;
                float32x4_t v92 = 0;
              }
              if (v55 == 42)
              {
                if (_pcre2_strcmp_8((unsigned __int8 *)v185, "MARK"))
                {
                  int v62 = 11;
                  goto LABEL_214;
                }
                mark_8 = (unsigned __int8 *)pcre2_get_mark_8(v162);
                if (mark_8)
                {
                  size_t v97 = -1;
                  unint64_t v27 = v38;
                  uint64_t v35 = __na;
                  while (mark_8[++v97])
                    ;
                  if (v31 || v168 >= v97)
                  {
                    if (!v31)
                    {
                      memcpy(&a10[v161], mark_8, v97);
                      uint64_t v35 = __na;
                      unint64_t v27 = v38;
                      v161 += v97;
                      v168 -= v97;
                      goto LABEL_311;
                    }
                    v29 += v97;
                  }
                  else
                  {
                    if ((__na & 0x1000) == 0)
                    {
                      int v31 = 0;
                      int v62 = 3;
                      goto LABEL_179;
                    }
                    unint64_t v29 = v97 - v168;
                  }
                  int v31 = 1;
                }
                else
                {
                  unint64_t v27 = v38;
                  uint64_t v35 = __na;
                }
              }
              else
              {
                int v93 = v88;
                v139 = v90;
                v142 = v89;
                v135 = v92;
                v136 = v91;
                if (v56 < 0)
                {
                  v174 = 0;
                  v175 = 0;
                  unsigned int v94 = pcre2_substring_nametable_scan_8(v170, (unsigned __int8 *)v185, &v175, (unsigned __int8 **)&v174);
                  uint64_t v35 = __na;
                  if ((__na & 0x800) != 0 && v94 == -49)
                  {
                    signed int v56 = *(unsigned __int16 *)(v170 + 128) + 1;
                  }
                  else
                  {
                    text_std::vector<int>::pointer end = v94;
                    if ((v94 & 0x80000000) != 0)
                    {
                      int v62 = 16;
                      unint64_t v27 = v38;
                      goto LABEL_179;
                    }
                    if (v175 <= v174)
                    {
                      float32x4_t v99 = v175;
                      do
                      {
                        unsigned int v100 = __rev16(*v99);
                        if (v100 < ovector_count_8)
                        {
                          if (v56 < 0) {
                            signed int v56 = v100;
                          }
                          if (v157[2 * v100] != -1)
                          {
                            signed int v56 = v100;
                            goto LABEL_257;
                          }
                        }
                        float32x4_t v99 = (unsigned __int16 *)((char *)v99 + v94);
                      }
                      while (v99 <= v174);
                      if ((v56 & 0x80000000) == 0) {
                        goto LABEL_257;
                      }
                    }
                    signed int v56 = __rev16(*v175);
                  }
                }
LABEL_257:
                int v101 = pcre2_substring_length_bynumber_8(v162, v56, &v176);
                unint64_t v27 = v38;
                text_std::vector<int>::pointer end = v101;
                if (v101 < 0)
                {
                  int v103 = v101;
                  if (v101 == -49) {
                    int v103 = v147;
                  }
                  text_std::vector<int>::pointer end = v103;
                  if (v103 != -55)
                  {
                    int v62 = 16;
                    goto LABEL_215;
                  }
                  text_std::vector<int>::pointer end = -55;
                  if (!v93)
                  {
                    int v62 = v146;
                    goto LABEL_215;
                  }
                }
                if (v93)
                {
                  if (v93 != 45 || (v135 = v139, v136 = v142, text_end))
                  {
                    uint64_t v35 = __na;
                    if (v47 > 0x13) {
                      goto LABEL_178;
                    }
                    *(void *)&v186[v47 / 2] = v183;
                    *((void *)&v186[v47 / 2] + 1) = v34;
                    v47 += 2;
                    float32x4_t v102 = v142;
                    if (text_end)
                    {
                      float32x4_t v102 = v136;
                      unint64_t v34 = (unint64_t)v135;
                    }
                    else
                    {
                      unint64_t v34 = (unint64_t)v139;
                    }
                    v183 = v102;
                    int v62 = 9;
LABEL_179:
                    int v33 = 0;
                    goto LABEL_180;
                  }
                }
                uint64_t v104 = v157[2 * v56];
                uint64_t v105 = v157[(2 * v56) | 1u];
                uint64_t v35 = __na;
                if (v104 < v105)
                {
                  unint64_t v143 = (unint64_t)&v25[v105];
                  float32x2_t v106 = &v25[v104];
                  while (1)
                  {
                    unsigned int v107 = *v106;
                    unsigned int v177 = v107;
                    if (v36 && v107 >= 0xC0)
                    {
                      if ((v107 & 0x20) != 0)
                      {
                        int v111 = v106[1] & 0x3F;
                        if ((v107 & 0x10) != 0)
                        {
                          if ((v107 & 8) != 0)
                          {
                            int v116 = v106[2] & 0x3F;
                            int v117 = v106[3] & 0x3F;
                            int v118 = v106[4] & 0x3F;
                            if ((v107 & 4) != 0)
                            {
                              unsigned int v107 = ((v107 & 1) << 30) | (v111 << 24) | (v116 << 18) | (v117 << 12) | (v118 << 6) | v106[5] & 0x3F;
                              unsigned int v177 = v107;
                              v106 += 6;
                            }
                            else
                            {
                              v106 += 5;
                              unsigned int v107 = ((v107 & 3) << 24) | (v111 << 18) | (v116 << 12) | (v117 << 6) | v118;
                              unsigned int v177 = v107;
                            }
                          }
                          else
                          {
                            unsigned int v107 = ((v107 & 7) << 18) | (v111 << 12) | ((v106[2] & 0x3F) << 6) | v106[3] & 0x3F;
                            unsigned int v177 = v107;
                            v106 += 4;
                          }
                        }
                        else
                        {
                          unsigned int v107 = ((v107 & 0xF) << 12) | (v111 << 6) | v106[2] & 0x3F;
                          unsigned int v177 = v107;
                          v106 += 3;
                        }
                      }
                      else
                      {
                        unsigned __int8 v108 = v106[1];
                        v106 += 2;
                        unsigned int v177 = v108 & 0x3F | ((v107 & 0x1F) << 6);
                        unsigned int v107 = v177;
                      }
                    }
                    else
                    {
                      ++v106;
                    }
                    if (v32) {
                      break;
                    }
LABEL_294:
                    if (v36)
                    {
                      unsigned int v114 = _pcre2_ord2utf_8(v107, (uint64_t)__src);
                      uint64_t v35 = __na;
                      unint64_t v27 = v38;
                    }
                    else
                    {
                      __src[0] = v107;
                      unsigned int v114 = 1;
                    }
                    uint64_t v115 = v114;
                    if (v31)
                    {
                      v29 += v114;
                      int v31 = 1;
                    }
                    else
                    {
                      if (v168 >= v114)
                      {
                        v168 -= v114;
                        memcpy(&a10[v161], __src, v114);
                        uint64_t v35 = __na;
                        unint64_t v27 = v38;
                        int v31 = 0;
                        v161 += v115;
                      }
                      else
                      {
                        if ((v35 & 0x1000) == 0)
                        {
                          int v31 = 0;
                          int v62 = 3;
                          uint64_t v25 = a2;
                          goto LABEL_179;
                        }
                        unint64_t v29 = v114 - v168;
                        int v31 = 1;
                      }
                      uint64_t v25 = a2;
                    }
                    if ((unint64_t)v106 >= v143) {
                      goto LABEL_311;
                    }
                  }
                  if (v160)
                  {
                    uint64_t v109 = _pcre2_ucd_records_8[12
                                              * _pcre2_ucd_stage2_8[v107 & 0x7F | (_pcre2_ucd_stage1_8[v107 >> 7] << 7)]
                                              + 1];
                    if (_pcre2_ucp_gentype_8[v109] == 1)
                    {
                      int v110 = v32 <= 0 ? 5 : 9;
                      if (v110 != v109)
                      {
                        v107 += *(_DWORD *)&_pcre2_ucd_records_8[12
                                                               * _pcre2_ucd_stage2_8[v107 & 0x7F | (_pcre2_ucd_stage1_8[v107 >> 7] << 7)]
                                                               + 4];
                        goto LABEL_292;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v112 = *(void *)(v170 + 24);
                    uint64_t v113 = 128;
                    if (v32 > 0) {
                      uint64_t v113 = 96;
                    }
                    if (((*(unsigned __int8 *)(v112 + v113 + ((unint64_t)v107 >> 3) + 512) >> (v107 & 7)) & 1) == 0)
                    {
                      unsigned int v107 = *(unsigned __int8 *)(v112 + v107 + 256);
LABEL_292:
                      unsigned int v177 = v107;
                    }
                  }
                  int v32 = v169;
                  goto LABEL_294;
                }
              }
LABEL_311:
              int v33 = 0;
              goto LABEL_181;
            }
            unsigned int v60 = v55;
          }
          uint64_t v81 = *(void *)(v170 + 24) + 832;
          if ((*(unsigned char *)(v81 + v60) & 0x10) == 0) {
            goto LABEL_178;
          }
          uint64_t v82 = 0;
          int v83 = v53 + 1;
          do
          {
            uint64_t v84 = v82;
            *((unsigned char *)v185 + v82) = v60;
            if (v82 == 32) {
              goto LABEL_178;
            }
            int v85 = &v83[v82];
            v183 = &v83[v84];
            if ((unint64_t)&v83[v84] >= v34) {
              goto LABEL_187;
            }
            unsigned int v60 = *v85;
            char v86 = *(unsigned char *)(v81 + *v85);
            uint64_t v82 = v84 + 1;
          }
          while ((v86 & 0x10) != 0);
          if (v84 == -1)
          {
LABEL_178:
            int v62 = 11;
            goto LABEL_179;
          }
LABEL_187:
          *((unsigned char *)v185 + v84 + 1) = 0;
          int v57 = &v53[v84 + 1];
          signed int v56 = -1;
          goto LABEL_193;
        }
        if ((v35 & 0x200) == 0 || v50 != 92) {
          goto LABEL_124;
        }
        v185[0] = 0;
        if ((unint64_t)v46 < v34 - 1)
        {
          unsigned int v61 = v46[1];
          if (v61 > 0x6B)
          {
            if (v61 == 108)
            {
              int v169 = 0;
              int v33 = 0;
              v183 = v46 + 2;
              int v62 = 9;
              int v32 = -1;
              goto LABEL_180;
            }
            if (v61 == 117)
            {
              int v169 = 0;
              int v33 = 0;
              v183 = v46 + 2;
              int v62 = 9;
              int v32 = 1;
              goto LABEL_180;
            }
          }
          else
          {
            if (v61 == 76)
            {
              int v33 = 0;
              v183 = v46 + 2;
              int v62 = 9;
              int v32 = -1;
              int v63 = -1;
              goto LABEL_174;
            }
            if (v61 == 85)
            {
              int v33 = 0;
              v183 = v46 + 2;
              int v62 = 9;
              int v32 = 1;
              int v63 = 1;
LABEL_174:
              int v169 = v63;
              goto LABEL_180;
            }
          }
        }
        v183 = v46 + 1;
        int v71 = _pcre2_check_escape_8(&v183, v34, (int *)&v177, v185, *(_DWORD *)(v170 + 88), *(_DWORD *)(v170 + 92), 0, 0);
        text_std::vector<int>::pointer end = v71;
        if (v185[0])
        {
          int v33 = 0;
          int v62 = 28;
          unint64_t v27 = v38;
          uint64_t v35 = __na;
        }
        else
        {
          uint64_t v35 = __na;
          if (!v71)
          {
            text_std::vector<int>::pointer end = 0;
            unint64_t v27 = v38;
            if (v32) {
              goto LABEL_149;
            }
            goto LABEL_129;
          }
          if (v71 == 25)
          {
            int v32 = 0;
            int v169 = 0;
            int v33 = 0;
            int v62 = 9;
            unint64_t v27 = v38;
          }
          else
          {
            unint64_t v27 = v38;
            if (v71 == 26)
            {
              int v62 = 9;
              int v33 = 1;
              text_std::vector<int>::pointer end = 26;
            }
            else
            {
              int v33 = 0;
              int v62 = 28;
            }
          }
        }
LABEL_180:
        if (v62 != 9)
        {
          int v133 = v62 - 2;
          int v28 = text_end;
          switch(v133)
          {
            case 0:
              goto LABEL_366;
            case 1:
              goto LABEL_367;
            case 2:
              goto LABEL_348;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
              return 4294967248;
            case 9:
              int v134 = -35;
              goto LABEL_377;
            default:
              int v134 = text_end;
              if (text_end == 16) {
                goto LABEL_377;
              }
              if (text_end != 28) {
                return 4294967248;
              }
              int v134 = -57;
LABEL_377:
              size_t *v144 = v183 - a8;
              unsigned int v153 = v134;
              break;
          }
          goto LABEL_367;
        }
        goto LABEL_181;
      }
      if (v31 || v168 >= v148)
      {
        if (v31)
        {
          v29 += v148;
          goto LABEL_320;
        }
        memcpy(&a10[v161], a8, v148);
        uint64_t v35 = __na;
        unint64_t v27 = v38;
        v161 += v148;
        v168 -= v148;
LABEL_325:
        if (v159 && !v31)
        {
          v119 = (uint64_t (*)(void *, void, unint64_t, uint64_t))*((void *)v159 + 7);
          if (v119)
          {
            HIDWORD(v182) = v155;
            size_t v180 = v161;
            int v120 = v119(v178, *((void *)v159 + 8), v27, v35);
            if (v120)
            {
              int v121 = v120;
              v161 -= v180 - *((void *)&v179 + 1);
              unint64_t v122 = v180 - *((void *)&v179 + 1) + v168;
              LODWORD(v35) = __na;
              if ((a5 & 0x20000) != 0)
              {
                v168 += v180 - *((void *)&v179 + 1);
                int v31 = 0;
                unint64_t v27 = v38;
              }
              else
              {
                size_t v123 = v157[1] - *v157;
                unint64_t v124 = v122 - v123;
                if (v122 >= v123)
                {
                  uint64_t v125 = v157[1] - *v157;
                  memcpy(&a10[v161], &a2[*v157], v123);
                  LODWORD(v35) = __na;
                  int v31 = 0;
                  v161 += v125;
                  int v36 = v156;
                  unint64_t v168 = v124;
                  uint64_t v25 = a2;
                  unint64_t v27 = v38;
                }
                else
                {
                  uint64_t v25 = a2;
                  if ((__na & 0x1000) == 0) {
                    goto LABEL_365;
                  }
                  unint64_t v27 = v38;
                  v168 += v180 - *((void *)&v179 + 1);
                  unint64_t v29 = v123 - v122;
                  int v31 = 1;
                }
              }
              if (v121 >= 0) {
                uint64_t v35 = v35;
              }
              else {
                uint64_t v35 = v35 & 0xFFFFFEFF;
              }
            }
            else
            {
              int v31 = 0;
              unint64_t v27 = v38;
              uint64_t v35 = __na;
            }
          }
          else
          {
            int v31 = 0;
          }
        }
      }
      else
      {
        if ((v35 & 0x1000) == 0) {
          goto LABEL_365;
        }
        unint64_t v29 = v148 - v168;
LABEL_320:
        int v31 = 1;
      }
      unint64_t v43 = v157[1];
      uint64_t v163 = *v157;
      if (*v157 <= v27 && *v157 == v43) {
        int v127 = -2147483640;
      }
      else {
        int v127 = 0;
      }
      int v166 = v127;
      uint64_t v154 = v157[1];
      goto LABEL_347;
    }
    int v28 = -65;
    if (v163 != v154) {
      goto LABEL_366;
    }
    unint64_t v43 = v27;
    int v166 = -2147483640;
    uint64_t v163 = v154;
    if (v164 == v27) {
      goto LABEL_366;
    }
LABEL_347:
    uint64_t v164 = v27;
    unint64_t v27 = v43;
    BOOL v37 = 1;
    if ((v35 & 0x100) == 0) {
      goto LABEL_348;
    }
  }
  int matched = *(_DWORD *)(v162 + 76);
  if ((matched & 0x80000000) == 0) {
    goto LABEL_41;
  }
LABEL_49:
  int v28 = matched;
  if (matched != -1) {
    goto LABEL_366;
  }
  if (v166 && v27 < v167)
  {
    unint64_t v43 = v27 + 1;
    if (v25[v27] == 13
      && *(unsigned __int16 *)(v170 + 122) - 3 <= 0xFFFFFFFD
      && v43 < v167
      && v25[v43] == 10)
    {
      unint64_t v43 = v27 + 2;
    }
    else if ((*(unsigned char *)(v170 + 90) & 8) != 0 && v43 < v167)
    {
      while ((v25[v43] & 0xC0) == 0x80)
      {
        if (v167 == ++v43)
        {
          unint64_t v43 = v167;
          break;
        }
      }
    }
    if ((a5 & 0x20000) != 0)
    {
      int v166 = 0;
    }
    else
    {
      unint64_t v44 = v43 - v27;
      if (v31 || v168 >= v44)
      {
        if (v31)
        {
          int v166 = 0;
          v29 += v44;
          goto LABEL_79;
        }
        memcpy(&a10[v161], &v25[v27], v43 - v27);
        uint64_t v35 = __na;
        int v166 = 0;
        v161 += v44;
        v168 -= v44;
      }
      else
      {
        if ((v35 & 0x1000) == 0) {
          goto LABEL_365;
        }
        int v166 = 0;
        unint64_t v29 = v44 - v168;
LABEL_79:
        int v31 = 1;
      }
    }
    unint64_t v27 = v164;
    goto LABEL_347;
  }
LABEL_348:
  if ((a5 & 0x20000) != 0)
  {
    size_t v129 = v161;
    goto LABEL_354;
  }
  unint64_t v128 = v167 - v27;
  if (v31 || v168 >= v128)
  {
    if (v31)
    {
      v29 += v128;
LABEL_362:
      __src[0] = 0;
      goto LABEL_363;
    }
    __int16 v132 = v35;
    memcpy(&a10[v161], &v25[v27], v167 - v27);
    LOWORD(v35) = v132;
    size_t v129 = v128 + v161;
    v168 -= v128;
LABEL_354:
    __src[0] = 0;
    if (!v31 && !v168)
    {
      unint64_t v130 = v145;
      if ((v35 & 0x1000) == 0) {
        goto LABEL_365;
      }
      uint64_t v131 = 1;
      goto LABEL_364;
    }
    if (!v31)
    {
      a10[v129] = __src[0];
      size_t *v144 = v129;
      int v28 = v155;
      goto LABEL_366;
    }
LABEL_363:
    uint64_t v131 = v29 + 1;
    unint64_t v130 = v145;
LABEL_364:
    size_t *v144 = v131 + v130;
    goto LABEL_365;
  }
  if ((v35 & 0x1000) != 0)
  {
    unint64_t v29 = v128 - v168;
    goto LABEL_362;
  }
LABEL_365:
  int v28 = -48;
LABEL_366:
  unsigned int v153 = v28;
LABEL_367:
  if (v152)
  {
    pcre2_match_data_free_8(v152);
    return v153;
  }
  else
  {
    uint64_t result = v153;
    *(_DWORD *)(v162 + 76) = v153;
  }
  return result;
}

uint64_t find_text_end(uint64_t a1, unsigned __int8 **a2, unint64_t a3, int a4)
{
  char v5 = *a2;
  uint64_t v24 = v5;
  if ((unint64_t)v5 < a3)
  {
    BOOL v9 = 0;
    int v10 = 0;
    unint64_t v11 = a3 - 1;
    while (1)
    {
      int v12 = *v5;
      if (v9) {
        break;
      }
      if (v12 != 125)
      {
        if (!a4 && v12 == 58 && v10 == 0)
        {
LABEL_42:
          uint64_t result = 0;
          goto LABEL_41;
        }
        if (v12 != 92)
        {
          if (v12 == 36 && (unint64_t)v5 < v11)
          {
            BOOL v9 = 0;
            if (v5[1] == 123)
            {
              ++v5;
              ++v10;
            }
          }
          else
          {
            BOOL v9 = 0;
          }
          goto LABEL_39;
        }
        uint64_t v23 = 0;
        if ((unint64_t)v5 < v11)
        {
          unsigned int v17 = v5[1] - 76;
          BOOL v18 = v17 > 0x29;
          uint64_t v19 = (1 << v17) & 0x20100000201;
          if (!v18 && v19 != 0)
          {
            BOOL v9 = 0;
            ++v5;
            goto LABEL_39;
          }
        }
        uint64_t v24 = v5 + 1;
        int v21 = _pcre2_check_escape_8(&v24, a3, (int *)&v23, (int *)&v23 + 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), 0, 0);
        char v5 = v24 - 1;
        uint64_t result = HIDWORD(v23);
        if (HIDWORD(v23)) {
          goto LABEL_41;
        }
        BOOL v9 = 0;
        if (!v21 || v21 == 25) {
          goto LABEL_39;
        }
        if (v21 != 26)
        {
          uint64_t result = 4294967239;
          goto LABEL_41;
        }
        goto LABEL_9;
      }
      if (!v10) {
        goto LABEL_42;
      }
      BOOL v9 = 0;
      --v10;
LABEL_39:
      uint64_t v24 = ++v5;
      if ((unint64_t)v5 >= a3) {
        goto LABEL_40;
      }
    }
    if (v12 == 92 && (unint64_t)v5 < v11)
    {
      int v14 = v5[1];
      BOOL v15 = v14 == 69;
      BOOL v9 = v14 != 69;
      if (v15) {
        ++v5;
      }
      goto LABEL_39;
    }
LABEL_9:
    BOOL v9 = 1;
    goto LABEL_39;
  }
LABEL_40:
  uint64_t result = 4294967238;
LABEL_41:
  *a2 = v5;
  return result;
}

uint64_t _pcre2_script_run_8(unsigned __int8 *a1, unint64_t a2, int a3)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if ((unint64_t)a1 >= a2) {
    return 1;
  }
  int v4 = a1 + 1;
  unsigned int v3 = *a1;
  if (a3 && v3 >= 0xC0)
  {
    if ((v3 & 0x20) != 0)
    {
      int v5 = *v4 & 0x3F;
      if ((v3 & 0x10) != 0)
      {
        if ((v3 & 8) != 0)
        {
          int v6 = a1[2] & 0x3F;
          int v7 = a1[3] & 0x3F;
          int v8 = a1[4] & 0x3F;
          if ((v3 & 4) != 0)
          {
            unsigned int v3 = ((v3 & 1) << 30) | (v5 << 24) | (v6 << 18) | (v7 << 12) | (v8 << 6) | a1[5] & 0x3F;
            int v4 = a1 + 6;
          }
          else
          {
            unsigned int v3 = ((v3 & 3) << 24) | (v5 << 18) | (v6 << 12) | (v7 << 6) | v8;
            int v4 = a1 + 5;
          }
        }
        else
        {
          unsigned int v3 = ((v3 & 7) << 18) | (v5 << 12) | ((a1[2] & 0x3F) << 6) | a1[3] & 0x3F;
          int v4 = a1 + 4;
        }
      }
      else
      {
        unsigned int v3 = ((v3 & 0xF) << 12) | (v5 << 6) | a1[2] & 0x3F;
        int v4 = a1 + 3;
      }
    }
    else
    {
      int v4 = a1 + 2;
      unsigned int v3 = a1[1] & 0x3F | ((v3 & 0x1F) << 6);
    }
  }
  uint64_t result = 1;
  if ((unint64_t)v4 < a2)
  {
    int v10 = 0;
    int v11 = 0;
    uint64_t v12 = 4294867297;
    while (1)
    {
      BOOL v13 = v4;
      uint64_t v14 = _pcre2_ucd_stage2_8[v3 & 0x7F | (_pcre2_ucd_stage1_8[v3 >> 7] << 7)];
      uint64_t result = *(unsigned __int16 *)&_pcre2_ucd_records_8[12 * v14 + 8];
      if (result == 10)
      {
        uint64_t v16 = v12;
      }
      else
      {
        if (result == 28)
        {
          uint64_t v16 = v12;
          unsigned int v17 = v10;
          goto LABEL_38;
        }
        if (!*(_WORD *)&_pcre2_ucd_records_8[12 * v14 + 8]) {
          return result;
        }
        uint64_t v15 = (__int16)result;
        uint64_t v16 = (__int16)result;
        if ((int)v16 < 1)
        {
          unsigned int v17 = (char *)&_pcre2_ucd_script_sets_8 - v15;
          uint64_t v16 = 4294867302;
          switch(v12)
          {
            case 0xFFFE7961:
              goto LABEL_23;
            case 0xFFFE7962:
              uint64_t result = 0;
              while (2)
              {
                unsigned int v23 = *v17;
                if (v23 > 0x1A)
                {
                  unsigned int v24 = result | 2;
                  if (v23 == 30) {
                    LODWORD(result) = result | 4;
                  }
                  if (v23 == 27) {
                    uint64_t result = v24;
                  }
                  else {
                    uint64_t result = result;
                  }
                  goto LABEL_58;
                }
                if (v23 == 4)
                {
                  uint64_t result = result | 1;
                  goto LABEL_58;
                }
                if (v23 == 24)
                {
                  uint64_t result = result | 8;
LABEL_58:
                  ++v17;
                  continue;
                }
                break;
              }
              if (*v17) {
                goto LABEL_58;
              }
              switch(result)
              {
                case 1:
LABEL_128:
                  uint64_t v16 = 4294867300;
                  break;
                case 6:
LABEL_122:
                  uint64_t v16 = 4294867299;
                  break;
                case 0:
                  return result;
                default:
LABEL_121:
                  uint64_t v16 = 4294867298;
                  break;
              }
              break;
            case 0xFFFE7963:
              while (2)
              {
                int v28 = *v17;
                if (!*v17) {
                  return 0;
                }
                if (v28 != 27 && v28 != 30)
                {
                  ++v17;
                  continue;
                }
                break;
              }
              goto LABEL_122;
            case 0xFFFE7964:
              while (2)
              {
                if (!*v17) {
                  return 0;
                }
                if (*v17 != 4)
                {
                  ++v17;
                  continue;
                }
                break;
              }
              goto LABEL_128;
            case 0xFFFE7965:
              while (2)
              {
                if (!*v17) {
                  return 0;
                }
                if (*v17 != 24)
                {
                  ++v17;
                  continue;
                }
                break;
              }
LABEL_96:
              uint64_t v16 = 4294867301;
              break;
            case 0xFFFE7966:
              int v39 = *v10;
              if (!*v10) {
                return 0;
              }
              uint64_t result = 0;
              unint64_t v40 = (char *)&_pcre2_ucd_script_sets_8 - v15 + 1;
              int v41 = *((unsigned __int8 *)&_pcre2_ucd_script_sets_8 - v15);
              size_t v42 = v10;
              do
              {
                unint64_t v43 = (unsigned __int8 *)v40;
                int v44 = v41;
                if (v41)
                {
                  while (v39 != v44)
                  {
                    int v45 = *v43++;
                    int v44 = v45;
                    if (!v45) {
                      goto LABEL_114;
                    }
                  }
                  v47[(int)result] = v39;
                  uint64_t result = (result + 1);
                }
LABEL_114:
                int v46 = *++v42;
                int v39 = v46;
              }
              while (v46);
              if (result == 1)
              {
                uint64_t v16 = v47[0];
                break;
              }
              if (!result) {
                return result;
              }
              unsigned int v17 = v47;
              v47[(int)result] = 0;
              uint64_t v16 = 4294867302;
              goto LABEL_23;
            default:
              do
              {
                int v26 = *v17++;
                int v25 = v26;
                if (v26) {
                  BOOL v27 = v12 == v25;
                }
                else {
                  BOOL v27 = 1;
                }
              }
              while (!v27);
              uint64_t v16 = v12;
              unsigned int v17 = v10;
              if (!v25) {
                return 0;
              }
              goto LABEL_23;
          }
        }
        else
        {
          switch(v12)
          {
            case 0xFFFE7961:
            case 0xFFFE7962:
              switch((int)v16)
              {
                case 23:
                  goto LABEL_121;
                case 24:
                  goto LABEL_96;
                case 25:
                case 26:
                case 28:
                case 29:
                  break;
                case 27:
                case 30:
                  goto LABEL_122;
                default:
                  if (v16 == 4) {
                    goto LABEL_128;
                  }
                  break;
              }
              unsigned int v17 = v10;
              if (v12 == -99998) {
                return 0;
              }
              goto LABEL_23;
            case 0xFFFE7963:
              BOOL v33 = v15 > 0x1E || ((1 << v15) & 0x48800000) == 0;
              uint64_t v16 = 4294867299;
              unsigned int v17 = v10;
              if (!v33) {
                goto LABEL_23;
              }
              return 0;
            case 0xFFFE7964:
              if (v16 != 23 && (unsigned __int16)v16 != 4) {
                return 0;
              }
              goto LABEL_128;
            case 0xFFFE7965:
              if ((unsigned __int16)(v15 - 25) >= 0xFFFEu) {
                goto LABEL_96;
              }
              return 0;
            case 0xFFFE7966:
              uint64_t v35 = v10;
              do
              {
                int v37 = *v35++;
                int v36 = v37;
                if (v37) {
                  BOOL v38 = v36 == v16;
                }
                else {
                  BOOL v38 = 1;
                }
              }
              while (!v38);
              if (!v36) {
                return 0;
              }
              switch((int)v16)
              {
                case 23:
                  goto LABEL_121;
                case 24:
                  goto LABEL_96;
                case 25:
                case 26:
                case 28:
                case 29:
                  goto LABEL_22;
                case 27:
                case 30:
                  goto LABEL_122;
                default:
                  if (v16 == 4) {
                    goto LABEL_128;
                  }
                  break;
              }
              break;
            default:
              unsigned int v17 = v10;
              BOOL v27 = v12 == v16;
              uint64_t v16 = v12;
              if (!v27) {
                return 0;
              }
              goto LABEL_23;
          }
        }
      }
LABEL_22:
      unsigned int v17 = v10;
LABEL_23:
      if (_pcre2_ucd_records_8[12 * v14 + 1] == 13)
      {
        if (v3 <= 0x39)
        {
          int v18 = 1;
          if (!v11) {
            goto LABEL_37;
          }
        }
        else
        {
          int v18 = 65;
          int v19 = 1;
          do
          {
            int v20 = v18 + v19;
            if (v18 + v19 < 0 != __OFADD__(v18, v19)) {
              ++v20;
            }
            int v21 = v20 >> 1;
            if (v3 <= _pcre2_ucd_digit_sets_8[v21]) {
              int v18 = v21;
            }
            else {
              int v19 = v21;
            }
          }
          while (v18 > v19 + 1);
          if (!v11)
          {
LABEL_37:
            int v11 = v18;
            goto LABEL_38;
          }
        }
        if (v18 != v11) {
          return 0;
        }
      }
LABEL_38:
      if ((unint64_t)v13 >= a2) {
        return 1;
      }
      int v4 = v13 + 1;
      unsigned int v3 = *v13;
      uint64_t v12 = v16;
      int v10 = v17;
      if (a3)
      {
        uint64_t v12 = v16;
        int v10 = v17;
        if (v3 >= 0xC0)
        {
          if ((v3 & 0x20) != 0)
          {
            int v22 = *v4 & 0x3F;
            if ((v3 & 0x10) != 0)
            {
              if ((v3 & 8) != 0)
              {
                int v30 = v13[2] & 0x3F;
                int v31 = v13[3] & 0x3F;
                int v32 = v13[4] & 0x3F;
                if ((v3 & 4) != 0)
                {
                  unsigned int v3 = ((v3 & 1) << 30) | (v22 << 24) | (v30 << 18) | (v31 << 12) | (v32 << 6) | v13[5] & 0x3F;
                  int v4 = v13 + 6;
                }
                else
                {
                  unsigned int v3 = ((v3 & 3) << 24) | (v22 << 18) | (v30 << 12) | (v31 << 6) | v32;
                  int v4 = v13 + 5;
                }
              }
              else
              {
                unsigned int v3 = ((v3 & 7) << 18) | (v22 << 12) | ((v13[2] & 0x3F) << 6) | v13[3] & 0x3F;
                int v4 = v13 + 4;
              }
            }
            else
            {
              unsigned int v3 = ((v3 & 0xF) << 12) | (v22 << 6) | v13[2] & 0x3F;
              int v4 = v13 + 3;
            }
            uint64_t v12 = v16;
            int v10 = v17;
          }
          else
          {
            int v4 = v13 + 2;
            uint64_t v12 = v16;
            int v10 = v17;
            unsigned int v3 = v13[1] & 0x3F | ((v3 & 0x1F) << 6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t pcre2_match_8()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unsigned int v8 = v7;
  uint64_t v10 = v9;
  int v11 = v1;
  uint64_t v12 = (uint32x2_t *)v0;
  uint64_t v184 = *MEMORY[0x263EF8340];
  long long v181 = 0u;
  long long v182 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v178 = 0u;
  long long v176 = 0u;
  memset(v177, 0, sizeof(v177));
  long long v174 = 0u;
  long long v175 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v163 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v159 = 0u;
  memset(v183, 0, sizeof(v183));
  long long v162 = (unint64_t)v183;
  if (v2 == -1)
  {
    uint64_t v13 = _pcre2_strlen_8(v1);
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v13 = v2;
    uint64_t v14 = 0;
  }
  if ((v8 & 0x1FFF9FC0) != 0) {
    return 4294967262;
  }
  uint64_t v15 = 4294967245;
  if (!v12 || !v11 || !v6) {
    return v15;
  }
  if (v13 < (unint64_t)v10) {
    return 4294967263;
  }
  if (v12[10].i32[0] != 1346589253) {
    return 4294967265;
  }
  unsigned __int32 v17 = v12[12].u32[0];
  if ((v17 & 7) != 1) {
    return 4294967264;
  }
  BOOL v19 = (v8 & 0xBFFFBFC0) == 0 && *(void *)&v12[4] != 0;
  __int32 v20 = v12[11].i32[0];
  int v21 = (v8 >> 4) & 1;
  if ((v8 & 0x20) != 0) {
    int v21 = 2;
  }
  LOWORD(v167) = v21;
  if (v21)
  {
    if (((v20 | v8) & 0x20000000) != 0) {
      return 4294967262;
    }
  }
  if (v4 && *(void *)(v4 + 72) != -1 && (v20 & 0x800000) == 0) {
    return 4294967240;
  }
  uint64_t v142 = v10;
  uint64_t v152 = &v11[v10];
  int v22 = (v17 >> 14) & 0xC;
  int v153 = v20 & 0x80000;
  uint64_t v135 = v14;
  __int32 v157 = v20;
  if (*(unsigned char *)(v6 + 73))
  {
    (*(void (**)(void, void))(v6 + 8))(*(void *)(v6 + 32), *(void *)(v6 + 16));
    __int32 v20 = v157;
    *(unsigned char *)(v6 + 73) &= ~1u;
  }
  unsigned int v140 = v22 | v8;
  *(void *)(v6 + 64) = 0;
  unint64_t v143 = (uint64_t *)(v6 + 64);
  *(void *)(v6 + 32) = 0;
  if (!v19)
  {
    int v23 = 0;
    unint64_t v24 = (unint64_t)&v11[v10];
    goto LABEL_42;
  }
  if (v153 && !(v8 & 0x40000000 | v20 & 0x4000000))
  {
    uint64_t v27 = v10;
    if (v13 > v10 && (*v152 & 0xC0) == 0x80) {
      goto LABEL_67;
    }
    int v33 = v12[15].u16[2];
    if (v12[15].i16[2])
    {
      unint64_t v34 = (void *)(v6 + 64);
      if (v10 < 1)
      {
        unint64_t v24 = (unint64_t)&v11[v10];
      }
      else
      {
        uint64_t v35 = &v11[v10];
LABEL_60:
        unint64_t v36 = (unint64_t)(v35 - 1);
        while (1)
        {
          unint64_t v24 = v36;
          if (v36 <= (unint64_t)v11) {
            break;
          }
          --v36;
          if ((*(unsigned char *)v24 & 0xC0) != 0x80)
          {
            uint64_t v35 = (char *)v24;
            if (--v33) {
              goto LABEL_60;
            }
            break;
          }
        }
      }
    }
    else
    {
      unint64_t v24 = (unint64_t)&v11[v10];
      unint64_t v34 = (void *)(v6 + 64);
    }
    uint64_t valid = _pcre2_valid_utf_8((unsigned __int8 *)v24, v13 - (v24 - (void)v11), v34);
    *(_DWORD *)(v6 + 76) = valid;
    if (valid)
    {
      size_t v129 = v34;
      uint64_t v15 = valid;
      *v129 += v24 - (void)v11;
      return v15;
    }
    int v23 = 1;
  }
  else
  {
    int v23 = 0;
    unint64_t v24 = (unint64_t)&v11[v10];
  }
  uint64_t matched = pcre2_jit_match_8((uint64_t)v12, (uint64_t)v11, v13, v10, v140, v6, v4);
  __int32 v20 = v157;
  if (matched == -45)
  {
LABEL_42:
    LODWORD(v15) = 0;
    int v147 = &v11[v13];
    *(void *)&long long v169 = v11;
    if (!v153 || v23) {
      goto LABEL_92;
    }
    if ((v8 & 0x40000000) != 0 && (v20 & 0x4000000) == 0)
    {
      LODWORD(v15) = 0;
      goto LABEL_92;
    }
    uint64_t v27 = v10;
    if ((v20 & 0x4000000) != 0)
    {
      int v28 = (void *)(v6 + 64);
      if (v24 < (unint64_t)v147)
      {
        int v29 = *(unsigned char *)v24 & 0xC0;
        if (v29 == 128)
        {
          int v30 = &v11[v13];
          int v31 = &v11[v13 + ~v24];
          while (v31)
          {
            char v32 = *(unsigned char *)++v24;
            --v31;
            if ((v32 & 0xC0) != 0x80) {
              goto LABEL_53;
            }
          }
          *(void *)&long long v169 = &v11[v13];
          unint64_t v24 = (unint64_t)&v11[v13];
LABEL_80:
          uint64_t v15 = _pcre2_valid_utf_8(v30, &v11[v13] - v30, v28);
          *(_DWORD *)(v6 + 76) = v15;
          if (v15)
          {
            unint64_t v40 = (uint64_t *)(v6 + 64);
            while (1)
            {
              uint64_t v41 = v169;
              uint64_t v42 = *v40;
              uint64_t v43 = v169 - (void)v11 + *v40;
              uint64_t *v40 = v43;
              if ((v157 & 0x4000000) == 0 || (int)v15 > 0) {
                return v15;
              }
              int v44 = &v11[v43];
              if ((unint64_t)&v11[v43] >= v24) {
                break;
              }
              int v45 = (char *)(v42 + v41 + 1);
              while ((unint64_t)v45 < v24)
              {
                char v46 = *v45++;
                if ((v46 & 0xC0) != 0x80)
                {
                  unsigned int v47 = &v11[v43];
                  uint64_t v48 = (unsigned __int8 *)(v45 - 1);
                  goto LABEL_90;
                }
              }
              unsigned int v47 = &v11[v43];
              uint64_t v48 = (unsigned __int8 *)v24;
LABEL_90:
              *(void *)&long long v169 = v48;
              uint64_t v49 = _pcre2_valid_utf_8(v48, &v11[v13] - v48, v143);
              unint64_t v40 = (uint64_t *)(v6 + 64);
              uint64_t v15 = v49;
              *(_DWORD *)(v6 + 76) = v49;
              if (!v49)
              {
                int v44 = v47;
                unint64_t v50 = (unint64_t)&v11[v13];
                goto LABEL_93;
              }
            }
            LODWORD(v15) = 2;
            unint64_t v50 = (unint64_t)&v11[v13];
            goto LABEL_93;
          }
LABEL_92:
          unint64_t v50 = (unint64_t)&v11[v13];
          int v44 = &v11[v13];
LABEL_93:
          BOOL v51 = &_pcre2_default_match_context_8;
          if (v4) {
            uint64_t v52 = v4;
          }
          else {
            uint64_t v52 = (uint64_t)v12;
          }
          if (v4) {
            BOOL v51 = (long long *)v4;
          }
          long long v159 = *(_OWORD *)v52;
          *(void *)&long long v160 = *(void *)(v52 + 16);
          __int32 v53 = v12[11].i32[0];
          unsigned __int32 v54 = v12[12].u32[0];
          uint64_t v55 = *((void *)v51 + 9);
          if (v55 == -1) {
            signed int v56 = (char *)v50;
          }
          else {
            signed int v56 = &v11[v55];
          }
          unint64_t v150 = (unint64_t)v56;
          LODWORD(v177[0]) = 2;
          *(void *)&long long v178 = v11;
          *((void *)&v178 + 1) = v44 - v11;
          DWORD2(v182) = 0;
          uint64_t v57 = *((void *)v51 + 5);
          *(void *)&long long v176 = *((void *)v51 + 6);
          *((void *)&v176 + 1) = v57;
          *((void *)&v175 + 1) = v177;
          *(void *)&long long v166 = v10;
          *((void *)&v169 + 1) = v44;
          unsigned __int32 v134 = v54;
          LODWORD(v57) = (v12[15].u16[2] | v54 & 0x2000) != 0;
          LODWORD(v164) = (v54 >> 12) & 1;
          DWORD1(v164) = v57;
          *((void *)&v171 + 1) = 0;
          *(void *)&long long v172 = 0;
          WORD2(v167) = v12[16].i16[3];
          WORD3(v167) = v12[16].i16[2];
          *((void *)&v167 + 1) = v12 + 17;
          *(void *)&long long v168 = (char *)v12 + WORD3(v167) * (unint64_t)WORD2(v167) + 136;
          *((void *)&v168 + 1) = v11;
          WORD1(v167) = v12[15].i16[0];
          __int32 v155 = v53;
          LODWORD(v174) = v53;
          *((void *)&v174 + 1) = 0;
          switch(v12[15].i16[1])
          {
            case 1:
              LODWORD(v175) = 1;
              char v58 = 13;
              goto LABEL_105;
            case 2:
              LODWORD(v175) = 1;
              char v58 = 10;
LABEL_105:
              BYTE4(v175) = v58;
              goto LABEL_111;
            case 3:
              LODWORD(v175) = 2;
              WORD2(v175) = 2573;
              goto LABEL_111;
            case 4:
              int v59 = 1;
              goto LABEL_109;
            case 5:
              int v59 = 2;
LABEL_109:
              HIDWORD(v174) = v59;
              goto LABEL_111;
            case 6:
              LODWORD(v175) = 1;
              BYTE4(v175) = 0;
LABEL_111:
              unint64_t v60 = v12[16].u16[0];
              size_t v61 = 16 * v60;
              unint64_t v62 = 16 * v60 + 128;
              LODWORD(v63) = *((_DWORD *)v51 + 20);
              unsigned int v64 = v12[12].u32[1];
              if (v63 >= v64) {
                unint64_t v63 = v64;
              }
              else {
                unint64_t v63 = v63;
              }
              *((void *)&v162 + 1) = v63;
              *(uint32x2_t *)&long long v163 = vmin_u32(*(uint32x2_t *)((char *)v51 + 84), v12[13]);
              if (v60 > 0x78)
              {
                *((void *)&v160 + 1) = 10 * v62;
                if (v63 < (10 * v62) >> 10)
                {
                  if (v62 > v63 << 10) {
                    return 4294967233;
                  }
                  *((void *)&v160 + 1) = (v63 << 10) / v62 * v62;
                }
                int v65 = (unsigned __int8 *)v44;
                size_t v148 = (unsigned __int8 *)(16 * v60 + 128);
                uint64_t v66 = ((uint64_t (*)(void))v159)();
                *(void *)&long long v161 = v66;
                if (!v66) {
                  return 4294967248;
                }
                uint64_t v67 = *((void *)&v160 + 1);
                size_t v61 = 16 * v12[16].u16[0];
              }
              else
              {
                int v65 = (unsigned __int8 *)v44;
                uint64_t v66 = v162;
                size_t v148 = (unsigned __int8 *)(16 * v60 + 128);
                uint64_t v67 = 0x5000 / v62 * v62;
                *((void *)&v160 + 1) = v67;
                *(void *)&long long v161 = v162;
              }
              *((void *)&v161 + 1) = v66 + v67;
              memset((void *)(v66 + 128), 255, v61);
              uint64_t v68 = mapped_global_table;
              if (v12[3]) {
                uint64_t v68 = (uint64_t)v12[3];
              }
              uint64_t v69 = v68 + 256;
              *((void *)&v164 + 1) = v68;
              *(void *)&long long v165 = v68 + 256;
              *((void *)&v165 + 1) = v68 + 832;
              __int32 v70 = v12[12].i32[0];
              unint64_t v144 = v70 & 0x10;
              char v145 = v70;
              if ((v70 & 0x10) != 0)
              {
                __int32 v71 = v12[14].i32[0];
                int v72 = v65;
                unsigned __int32 v73 = v157;
                int __c = v71;
                if ((v70 & 0x20) != 0)
                {
                  uint64_t v151 = 0;
                  int v141 = *(unsigned __int8 *)(v69 + v71);
                  if (v71 >= 0x80u && (v157 & 0x20000) != 0 && !v153)
                  {
                    uint64_t v151 = 0;
                    int v141 = (*(_DWORD *)&_pcre2_ucd_records_8[12
                                                                            * _pcre2_ucd_stage2_8[v71 & 0x7F | (_pcre2_ucd_stage1_8[v71 >> 7] << 7)]
                                                                            + 4]
                                           + v71);
                  }
                }
                else
                {
                  uint64_t v151 = 0;
                  int v141 = v12[14].i32[0];
                }
              }
              else
              {
                int __c = 0;
                int v141 = 0;
                int v74 = (v134 >> 9) & 1;
                if ((v70 & 0x40) == 0) {
                  int v74 = 1;
                }
                if (v74) {
                  unsigned int v75 = 0;
                }
                else {
                  unsigned int v75 = v12 + 5;
                }
                uint64_t v151 = (uint64_t)v75;
                int v72 = v65;
                unsigned __int32 v73 = v157;
              }
              int v133 = v152 - 1;
              int v146 = (v73 >> 19) & 1;
              int v154 = v155 | v8;
              if ((v70 & 0x80) != 0)
              {
                __int32 v76 = v12[14].i32[1];
                if ((v70 & 0x100) != 0)
                {
                  LOBYTE(v69) = *(unsigned char *)(v69 + v12[14].i32[1]);
                  if (v12[14].i32[1] >= 0x80u && (v73 & 0x20000) != 0 && !v153) {
                    LODWORD(v69) = *(_DWORD *)&_pcre2_ucd_records_8[12
                  }
                                                                  * _pcre2_ucd_stage2_8[v12[14].i32[1] & 0x7F | (_pcre2_ucd_stage1_8[v12[14].i32[1] >> 7] << 7)]
                                                                  + 4]
                                 + v12[14].i32[1];
                }
                else
                {
                  LODWORD(v69) = v12[14].i32[1];
                }
              }
              else
              {
                LOBYTE(v76) = 0;
                LOBYTE(v69) = 0;
              }
              BOOL v78 = (v70 & 0x10) != 0 || v151 != 0;
              BOOL v136 = v78;
              unint64_t v132 = v144 >> 4;
              int v130 = v76;
              int v131 = v69;
              break;
            default:
              return 4294967252;
          }
          while (1)
          {
LABEL_148:
            int v137 = 0;
            BOOL v138 = 0;
            uint64_t v156 = 0;
            unint64_t v158 = 0;
            HIDWORD(v163) = 0;
            int v149 = v15 | v140;
            uint64_t v15 = v151;
            while (1)
            {
              if (v12[11].i8[2]) {
                goto LABEL_260;
              }
              if ((v155 & 0x100) == 0)
              {
                uint64_t v79 = v72;
                goto LABEL_176;
              }
              if (v153)
              {
                uint64_t v79 = (unsigned __int8 *)v24;
                if (v24 >= (unint64_t)v72) {
                  goto LABEL_176;
                }
LABEL_154:
                if (HIDWORD(v174))
                {
                  if ((unint64_t)v79 < *((void *)&v169 + 1))
                  {
                    unint64_t v80 = v72;
                    int is_newline_8 = _pcre2_is_newline_8(v79, SHIDWORD(v174), *((uint64_t *)&v169 + 1), (int *)&v175, v146);
                    int v72 = v80;
                    if (is_newline_8) {
                      goto LABEL_176;
                    }
                  }
                }
                else if ((unint64_t)v79 <= *((void *)&v169 + 1) - (unint64_t)v175 {
                       && *v79 == BYTE4(v175)
                }
                       && (v175 == 1 || v79[1] == BYTE5(v175)))
                {
                  goto LABEL_176;
                }
                ++v79;
                while (v79 < v72)
                {
                  char v82 = *v79++;
                  if ((v82 & 0xC0) != 0x80)
                  {
                    --v79;
                    goto LABEL_154;
                  }
                }
              }
              else
              {
                uint64_t v79 = (unsigned __int8 *)v24;
                if (v24 < (unint64_t)v72)
                {
                  do
                  {
                    if (HIDWORD(v174))
                    {
                      if ((unint64_t)v79 < *((void *)&v169 + 1))
                      {
                        int v83 = v72;
                        int v84 = _pcre2_is_newline_8(v79, SHIDWORD(v174), *((uint64_t *)&v169 + 1), (int *)&v175, v146);
                        int v72 = v83;
                        if (v84) {
                          break;
                        }
                      }
                    }
                    else if ((unint64_t)v79 <= *((void *)&v169 + 1) - (unint64_t)v175 {
                           && *v79 == BYTE4(v175)
                    }
                           && (v175 == 1 || v79[1] == BYTE5(v175)))
                    {
                      break;
                    }
                    ++v79;
                  }
                  while (v79 < v72);
                }
              }
LABEL_176:
              if (v154 < 0)
              {
                if (!v136) {
                  goto LABEL_238;
                }
                if (v24 >= (unint64_t)v79) {
                  goto LABEL_329;
                }
                unint64_t v89 = *(unsigned __int8 *)v24;
                if (v144)
                {
                  BOOL v91 = v89 != __c && v89 != v141;
                  if (!v91 || v15 == 0)
                  {
                    if (v91) {
                      goto LABEL_329;
                    }
                    goto LABEL_238;
                  }
                }
                else if (!v15)
                {
                  goto LABEL_330;
                }
                if (((*(unsigned __int8 *)(v15 + (v89 >> 3)) >> (v89 & 7)) & 1) == 0)
                {
LABEL_329:
                  uint64_t v15 = 0;
                  goto LABEL_330;
                }
LABEL_238:
                unint64_t v50 = (unint64_t)&v11[v13];
                int v95 = (unsigned __int16)v167;
                int v72 = (unsigned __int8 *)*((void *)&v169 + 1);
                int v87 = (unsigned __int8 *)v24;
                goto LABEL_239;
              }
              if (!v144)
              {
                if ((v134 & 0x200) != 0)
                {
                  if (v24 > *((void *)&v168 + 1) + v142)
                  {
                    if (v153)
                    {
                      if (v24 >= (unint64_t)v79) {
                        goto LABEL_313;
                      }
LABEL_203:
                      if (HIDWORD(v174))
                      {
                        if (v24 > *((void *)&v168 + 1)
                          && _pcre2_was_newline_8((unsigned char *)v24, SHIDWORD(v174), *((unint64_t *)&v168 + 1), (int *)&v175, v146))
                        {
                          goto LABEL_313;
                        }
LABEL_211:
                        ++v24;
                        while (v24 < (unint64_t)v79)
                        {
                          char v93 = *(unsigned char *)v24++;
                          if ((v93 & 0xC0) != 0x80)
                          {
                            --v24;
                            goto LABEL_203;
                          }
                        }
                      }
                      else if (v24 < *((void *)&v168 + 1) + (unint64_t)v175 {
                             || *(unsigned __int8 *)(v24 - v175) != BYTE4(v175)
                      }
                             || v175 != 1 && *(unsigned __int8 *)(v24 - v175 + 1) != BYTE5(v175))
                      {
                        goto LABEL_211;
                      }
                    }
                    else
                    {
                      while (v24 < (unint64_t)v79)
                      {
                        if (HIDWORD(v174))
                        {
                          if (v24 > *((void *)&v168 + 1)
                            && _pcre2_was_newline_8((unsigned char *)v24, SHIDWORD(v174), *((unint64_t *)&v168 + 1), (int *)&v175, v146))
                          {
                            break;
                          }
                        }
                        else if (v24 >= *((void *)&v168 + 1) + (unint64_t)v175 {
                               && *(unsigned __int8 *)(v24 - v175) == BYTE4(v175)
                        }
                               && (v175 == 1 || *(unsigned __int8 *)(v24 - v175 + 1) == BYTE5(v175)))
                        {
                          break;
                        }
                        ++v24;
                      }
                    }
LABEL_313:
                    if (*(unsigned char *)(v24 - 1) == 13)
                    {
                      BOOL v118 = (HIDWORD(v174) - 1) > 1 || v24 >= (unint64_t)v79;
                      if (!v118 && *(unsigned char *)v24 == 10) {
                        ++v24;
                      }
                    }
                  }
                  goto LABEL_238;
                }
                if (!v15) {
                  goto LABEL_238;
                }
                do
                {
                  int v87 = (unsigned __int8 *)v24;
                  if (v24 >= (unint64_t)v79) {
                    break;
                  }
                  ++v24;
                }
                while (((*(unsigned __int8 *)(v15 + ((unint64_t)*v87 >> 3)) >> (*v87 & 7)) & 1) == 0);
                int v95 = (unsigned __int16)v167;
                int v72 = (unsigned __int8 *)*((void *)&v169 + 1);
                if ((_WORD)v167) {
                  BOOL v96 = 0;
                }
                else {
                  BOOL v96 = (unint64_t)v87 >= *((void *)&v169 + 1);
                }
                if (v96)
                {
LABEL_328:
                  uint64_t v15 = 0;
                  unint64_t v24 = (unint64_t)v87;
LABEL_330:
                  int v72 = v79;
                  goto LABEL_331;
                }
                unint64_t v50 = (unint64_t)&v11[v13];
LABEL_239:
                char v88 = v145;
                goto LABEL_258;
              }
              size_t v85 = (size_t)&v79[-v24];
              if (__c != v141)
              {
                if (v137)
                {
                  unint64_t v94 = 0;
                  goto LABEL_227;
                }
                size_t v97 = memchr((void *)v24, __c, (size_t)&v79[-v24]);
                unint64_t v94 = (unint64_t)v97;
                if (v97)
                {
                  int v137 = 0;
                  size_t v85 = (size_t)v97 - v24;
                }
                else
                {
LABEL_227:
                  int v137 = 1;
                }
                if (v138)
                {
                  unint64_t v98 = 0;
                  BOOL v99 = 1;
                }
                else
                {
                  unint64_t v98 = (unint64_t)memchr((void *)v24, v141, v85);
                  BOOL v99 = (v94 | v98) == 0;
                }
                char v88 = v145;
                BOOL v138 = v99;
                if (v94)
                {
                  if (v94 < v98 || v98 == 0) {
                    int v87 = (unsigned __int8 *)v94;
                  }
                  else {
                    int v87 = (unsigned __int8 *)v98;
                  }
                }
                else if (v98)
                {
                  int v87 = (unsigned __int8 *)v98;
                }
                else
                {
                  int v87 = v79;
                }
                goto LABEL_255;
              }
              char v86 = (unsigned __int8 *)memchr((void *)v24, __c, (size_t)&v79[-v24]);
              int v87 = v86 ? v86 : v79;
              char v88 = v145;
LABEL_255:
              int v95 = (unsigned __int16)v167;
              int v72 = (unsigned __int8 *)*((void *)&v169 + 1);
              if (!(_WORD)v167 && (unint64_t)v87 >= *((void *)&v169 + 1)) {
                goto LABEL_328;
              }
              unint64_t v50 = (unint64_t)&v11[v13];
LABEL_258:
              if (v95) {
                goto LABEL_259;
              }
              unint64_t v110 = v72 - v87;
              if (v72 - v87 < v12[15].u16[3]) {
                goto LABEL_327;
              }
              if ((v88 & 0x80) == 0
                || (int v111 = &v87[v132], &v87[v132] <= v133)
                || (v154 >= 0 ? (BOOL v112 = v110 >= 0x4C4B40) : (BOOL v112 = 1),
                    v112 ? (int v113 = 0) : (int v113 = 1),
                    v110 >> 3 >= 0x271 && !v113))
              {
LABEL_259:
                unint64_t v24 = (unint64_t)v87;
                goto LABEL_260;
              }
              size_t v114 = v72 - v111;
              uint64_t v115 = v72;
              int v116 = (unsigned __int8 *)memchr(&v87[v132], v130, v72 - v111);
              if (v130 == v131)
              {
                if (!v116) {
                  int v116 = v115;
                }
                int v72 = v115;
              }
              else
              {
                int v72 = v115;
                if (!v116)
                {
                  int v116 = (unsigned __int8 *)memchr(v111, v131, v114);
                  int v72 = v115;
                  if (!v116) {
                    int v116 = v115;
                  }
                }
              }
              if (v116 >= v72) {
                break;
              }
              unint64_t v24 = (unint64_t)v87;
              int v133 = v116;
              unint64_t v50 = (unint64_t)&v11[v13];
LABEL_260:
              if (v24 > v150) {
                goto LABEL_326;
              }
              int v101 = v72;
              *(void *)&long long v179 = v24 - (void)v11;
              DWORD2(v182) |= 1u;
              *((void *)&v170 + 1) = v24;
              *(void *)&long long v171 = v24;
              DWORD2(v163) = 0;
              *((void *)&v166 + 1) = 0;
              HIDWORD(v173) = v149;
              DWORD1(v174) = 0;
              uint64_t v102 = match((unsigned __int8 *)v24, (unsigned __int8 *)v168, (void *)(v6 + 80), *(unsigned __int16 *)(v6 + 74), v12[16].u16[0], v148, (uint64_t)&v159);
              BOOL v103 = HIDWORD(v163) != 0;
              uint64_t v104 = v156;
              BOOL v105 = v156 == 0;
              BOOL v106 = !v103 || !v105;
              if (v103 && v105) {
                uint64_t v104 = *((void *)&v170 + 1);
              }
              unint64_t v107 = v158;
              if (!v106) {
                unint64_t v107 = v24;
              }
              uint64_t v156 = v104;
              unint64_t v158 = v107;
              uint64_t v15 = 0;
              int v72 = v101;
              switch(v102)
              {
                case 0xFFFFFC1B:
                  goto LABEL_332;
                case 0xFFFFFC1C:
                case 0xFFFFFC1F:
                  goto LABEL_269;
                case 0xFFFFFC1D:
                  int v87 = (unsigned __int8 *)v173;
                  if ((unint64_t)v173 > v24) {
                    goto LABEL_276;
                  }
                  goto LABEL_269;
                case 0xFFFFFC1E:
                  DWORD2(v174) = DWORD1(v174);
                  int v87 = (unsigned __int8 *)v24;
                  goto LABEL_276;
                default:
                  uint64_t v15 = v102;
                  int v72 = v101;
                  if (v102) {
                    goto LABEL_332;
                  }
LABEL_269:
                  DWORD2(v174) = 0;
                  int v87 = (unsigned __int8 *)(v24 + 1);
                  if (!v153 || v87 >= v72) {
                    goto LABEL_276;
                  }
                  unsigned __int8 v108 = &v72[~v24];
                  break;
              }
              while ((*v87 & 0xC0) == 0x80)
              {
                ++v87;
                if (!--v108)
                {
                  int v87 = v72;
                  break;
                }
              }
LABEL_276:
              uint64_t v15 = v151;
              if ((v155 & 0x100) != 0)
              {
                if (HIDWORD(v174))
                {
                  if (v24 < *((void *)&v169 + 1))
                  {
                    int v109 = _pcre2_is_newline_8((unsigned __int8 *)v24, SHIDWORD(v174), *((uint64_t *)&v169 + 1), (int *)&v175, v146);
                    int v72 = v101;
                    if (v109) {
                      goto LABEL_326;
                    }
                  }
                }
                else if (v24 <= *((void *)&v169 + 1) - (unint64_t)v175 {
                       && *(unsigned __int8 *)v24 == BYTE4(v175)
                }
                       && (v175 == 1 || *(unsigned __int8 *)(v24 + 1) == BYTE5(v175)))
                {
LABEL_326:
                  uint64_t v15 = 0;
                  goto LABEL_332;
                }
              }
              if (v154 < 0 || v87 > v72)
              {
LABEL_327:
                uint64_t v15 = 0;
                unint64_t v24 = (unint64_t)v87;
                goto LABEL_332;
              }
              if (v87 > v152
                && *(v87 - 1) == 13
                && v87 < v72
                && *v87 == 10
                && (v12[12].i8[1] & 8) == 0
                && ((HIDWORD(v174) - 1) < 2 || v175 == 2))
              {
                ++v87;
              }
              *((void *)&v171 + 1) = 0;
              unint64_t v24 = (unint64_t)v87;
            }
            uint64_t v15 = 0;
            unint64_t v24 = (unint64_t)v87;
LABEL_331:
            unint64_t v50 = (unint64_t)&v11[v13];
LABEL_332:
            if (!v153 || v72 == (unsigned __int8 *)v50 || v15 && v15 != -2)
            {
LABEL_346:
              if ((void)v161 != (void)v162)
              {
                size_t v123 = v72;
                (*((void (**)(void, void))&v159 + 1))(v161, v160);
                int v72 = v123;
              }
              *(void *)(v6 + 24) = v12;
              *(void *)(v6 + 40) = *((void *)&v171 + 1);
              *(unsigned char *)(v6 + 72) = 0;
              if (v15 != 1)
              {
                *(void *)(v6 + 40) = v172;
                if (v15 == -2 || !v15)
                {
                  if (v158)
                  {
                    *(void *)(v6 + 32) = v11;
                    *(void *)(v6 + 80) = v158 - (void)v11;
                    *(void *)(v6 + 88) = v72 - v11;
                    *(void *)(v6 + 56) = v72 - v11;
                    *(void *)(v6 + 64) = v158 - (void)v11;
                    *(void *)(v6 + 48) = v156 - (void)v11;
                    uint64_t v15 = 4294967294;
                  }
                  else
                  {
                    uint64_t v15 = 0xFFFFFFFFLL;
                  }
                }
                *(_DWORD *)(v6 + 76) = v15;
                return v15;
              }
              if ((SDWORD2(v166) & 0x80000000) == 0) {
                int v124 = DWORD2(v166);
              }
              else {
                int v124 = DWORD2(v166) + 1;
              }
              int v125 = v124 >> 1;
              if (SDWORD2(v166) < 2 * *(unsigned __int16 *)(v6 + 74)) {
                uint64_t v15 = (v125 + 1);
              }
              else {
                uint64_t v15 = 0;
              }
              *(_DWORD *)(v6 + 76) = v15;
              *(void *)(v6 + 64) = v24 - (void)v11;
              uint64_t v126 = v170;
              if ((unint64_t)v171 > (unint64_t)v170) {
                uint64_t v126 = v171;
              }
              *(void *)(v6 + 48) = *((void *)&v170 + 1) - (void)v11;
              *(void *)(v6 + 56) = v126 - (void)v11;
              if ((v8 & 0x4000) == 0)
              {
                *(void *)(v6 + 32) = v11;
                return v15;
              }
              int v127 = (void *)(*(uint64_t (**)(uint64_t, void))v6)(v135 + v13, *(void *)(v6 + 16));
              *(void *)(v6 + 32) = v127;
              if (v127)
              {
                memcpy(v127, v11, v135 + v13);
                *(unsigned char *)(v6 + 73) |= 1u;
                return *(unsigned int *)(v6 + 76);
              }
              return 4294967248;
            }
            while (2)
            {
              v119 = v72;
              while (1)
              {
                unint64_t v24 = (unint64_t)(v119 + 1);
                if ((unint64_t)(v119 + 1) >= v50)
                {
                  uint64_t v15 = 0;
                  goto LABEL_346;
                }
                ++v119;
                if ((*(unsigned char *)v24 & 0xC0) != 0x80)
                {
                  int v120 = v72;
                  *(void *)&long long v169 = v24;
                  int v121 = _pcre2_valid_utf_8((unsigned __int8 *)v24, (unint64_t)&v11[v13 - v24], v143);
                  if (!v121)
                  {
                    *((void *)&v169 + 1) = v50;
                    LODWORD(v15) = 1;
                    int v72 = (unsigned __int8 *)v50;
                    goto LABEL_148;
                  }
                  int v72 = v120;
                  v119 = v120;
                  if (v121 < 0) {
                    break;
                  }
                }
              }
              uint64_t v122 = *v143;
              int v72 = (unsigned __int8 *)(v24 + *v143);
              *((void *)&v169 + 1) = v72;
              if (v122 <= 0) {
                continue;
              }
              break;
            }
            LODWORD(v15) = 3;
          }
        }
LABEL_53:
        *(void *)&long long v169 = v24;
        int v30 = (unsigned __int8 *)v24;
        if (v29 == 128) {
          goto LABEL_80;
        }
LABEL_71:
        int v37 = v12[15].u16[2];
        if (v12[15].i16[2] && v24 > (unint64_t)v11)
        {
          unint64_t v38 = v24;
          do
          {
            int v39 = (unsigned __int8 *)(v38 - 1);
            do
            {
              int v30 = v39;
              *(void *)&long long v169 = v39;
              if (v39 <= v11) {
                goto LABEL_80;
              }
              --v39;
            }
            while ((*v30 & 0xC0) == 0x80);
            unint64_t v38 = (unint64_t)v30;
            --v37;
          }
          while (v37);
        }
        else
        {
          int v30 = (unsigned __int8 *)v24;
        }
        goto LABEL_80;
      }
LABEL_70:
      *(void *)&long long v169 = v24;
      goto LABEL_71;
    }
    int v28 = (void *)(v6 + 64);
    if (v24 >= (unint64_t)v147 || (*(unsigned char *)v24 & 0xC0) != 0x80) {
      goto LABEL_70;
    }
LABEL_67:
    if (v27) {
      return 4294967260;
    }
    else {
      return 4294967274;
    }
  }
  uint64_t v15 = matched;
  if ((v8 & 0x4000) != 0 && (matched & 0x80000000) == 0)
  {
    int v26 = (void *)(*(uint64_t (**)(uint64_t, void))v6)(v135 + v13, *(void *)(v6 + 16));
    *(void *)(v6 + 32) = v26;
    if (!v26) {
      return 4294967248;
    }
    memcpy(v26, v11, v135 + v13);
    *(unsigned char *)(v6 + 73) |= 1u;
  }
  return v15;
}

uint64_t match(unsigned __int8 *a1, unsigned __int8 *a2, void *a3, unsigned int a4, int a5, unsigned __int8 *a6, uint64_t a7)
{
  uint64_t v7 = a7;
  unsigned int v8 = a6;
  unsigned int v11 = 0;
  v1343 = 0;
  v1339 = 0;
  unsigned int i = 0;
  LODWORD(v12) = 0;
  v1355[0] = 0;
  unsigned int v13 = *(_DWORD *)(a7 + 240);
  uint64_t v14 = v13 & 0x80000;
  int v1347 = (v13 >> 19) & 1;
  size_t __n = (size_t)(a6 - 80);
  uint64_t v15 = *(void *)(a7 + 32);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 104) = 0xFFFFFFFFLL;
  *(void *)(v15 + 80) = a1;
  *(void *)(v15 + 88) = a1;
  *(void *)(v15 + 96) = 0;
  v1348 = (unint64_t *)(a7 + 184);
  *(_OWORD *)(v15 + 112) = xmmword_20D60CCA0;
  uint64_t v16 = (unint64_t *)(a7 + 168);
  v1350 = (_WORD *)(a7 + 128);
  v1345 = (int *)(a7 + 84);
  v1346 = (_DWORD *)(a7 + 76);
  v1340 = (int *)(a7 + 256);
  uint64_t v1341 = -(uint64_t)a6;
  int v1344 = v13 & 0xA0000;
  v1349 = (unint64_t *)(a7 + 168);
LABEL_2:
  *(_DWORD *)(v15 + 52) = v12;
  *(void *)uint64_t v15 = a2;
  *(void *)(v15 + 32) = v8;
  if (v12)
  {
    *(void *)(v15 + 112) = v15 - *(void *)(v7 + 32);
    if ((v12 & 0xFFFF0000) == 0x40000) {
      *(_DWORD *)(v15 + 104) = (unsigned __int16)v12;
    }
  }
  unsigned int v17 = *(_DWORD *)(v7 + 72);
  *(_DWORD *)(v7 + 72) = v17 + 1;
  if (v17 >= *(_DWORD *)(v7 + 64)) {
    return 4294967249;
  }
  if (v11 >= *(_DWORD *)(v7 + 68)) {
    return 4294967243;
  }
  uint64_t v12 = i;
LABEL_8:
  unsigned int v18 = *a2;
  *(unsigned char *)(v15 + 73) = v18;
  uint64_t v19 = 4294967252;
  uint64_t v20 = 0;
  switch(v18)
  {
    case 0u:
    case 0xA3u:
      if (*(_DWORD *)(v15 + 104) != -1)
      {
        int v65 = (void *)v15;
        do
        {
          uint64_t v66 = v65[14];
          if (v66 == -1) {
            return 4294967252;
          }
          uint64_t v67 = *(void *)(v7 + 32) + v66;
          int v65 = (void *)(v67 + v1341);
        }
        while (*(unsigned __int16 *)(v67 + 54) << 16 != 0x40000);
        v1343 = (unsigned __int8 *)v67;
        v65[10] = *(void *)(v15 + 80);
        v65[12] = *(void *)(v15 + 96);
        *v65 += 3;
        uint64_t v15 = v67 + v1341;
        goto LABEL_2500;
      }
      v290 = *(unsigned __int8 **)(v15 + 80);
      v291 = *(unsigned __int8 **)(v15 + 88);
      if (v290 == v291)
      {
        int v464 = *(_DWORD *)(v7 + 236);
        if ((v464 & 4) != 0
          || (v464 & 8) != 0 && v290 == (unsigned __int8 *)(*(void *)(v7 + 152) + *(void *)(v7 + 112)))
        {
          uint64_t v20 = 0;
          goto LABEL_2502;
        }
      }
      if ((unint64_t)v290 < *v16 && ((*(_DWORD *)(v7 + 240) | *(_DWORD *)(v7 + 236)) & 0x20000000) != 0)
      {
        uint64_t v20 = 0;
        uint64_t v19 = 0;
        if (!v18) {
          goto LABEL_2502;
        }
      }
      else
      {
        *(void *)(v7 + 176) = v290;
        *(void *)(v7 + 120) = *(void *)(v15 + 120);
        *(void *)(v7 + 200) = *(void *)(v15 + 96);
        if ((unint64_t)v290 > *(void *)(v7 + 192)) {
          *(void *)(v7 + 192) = v290;
        }
        uint64_t v1324 = *(void *)(v7 + 152);
        *a3 = &v291[-v1324];
        a3[1] = &v290[-v1324];
        if (a5 + 1 < a4) {
          unsigned int v1325 = a5 + 1;
        }
        else {
          unsigned int v1325 = a4;
        }
        int v1326 = 2 * v1325;
        unsigned int v1327 = 2 * v1325 - 2;
        memcpy(a3 + 2, (const void *)(v15 + 128), 8 * v1327);
        unint64_t v1328 = (v1326 - 1);
        if (*(void *)(v15 + 120) + 2 <= v1328)
        {
          do
          {
            a3[v1328] = -1;
            unint64_t v1328 = v1327;
            BOOL v105 = *(void *)(v15 + 120) + 2 > (unint64_t)v1327;
            uint64_t v19 = 1;
            --v1327;
          }
          while (!v105);
        }
        else
        {
          return 1;
        }
      }
      return v19;
    case 1u:
      int v127 = *(unsigned __int8 **)(v15 + 80);
      unint64_t v128 = *(unsigned __int8 **)(v7 + 152);
      goto LABEL_204;
    case 2u:
      int v127 = *(unsigned __int8 **)(v15 + 80);
      unint64_t v128 = (unsigned __int8 *)(*(void *)(v7 + 152) + *(void *)(v7 + 112));
LABEL_204:
      if (v127 == v128) {
        goto LABEL_2439;
      }
      goto LABEL_1995;
    case 3u:
      *(void *)(v15 + 88) = *(void *)(v15 + 80);
      goto LABEL_2439;
    case 4u:
    case 5u:
      unint64_t v68 = *(void *)(v15 + 80);
      if (v68 == *(void *)(v7 + 160)) {
        goto LABEL_605;
      }
      if (!v14)
      {
        uint64_t v69 = (unsigned __int8 *)(v68 - 1);
        unsigned int v70 = *(unsigned __int8 *)(v68 - 1);
        goto LABEL_600;
      }
      uint64_t v69 = *(unsigned __int8 **)(v15 + 80);
      do
      {
        unsigned int v71 = *--v69;
        unsigned int v70 = v71;
      }
      while ((v71 & 0xC0) == 0x80);
      if (v70 < 0xC0) {
        goto LABEL_600;
      }
      int v72 = v69[1] & 0x3F;
      if ((v70 & 0x20) == 0)
      {
        unsigned int v70 = v69[1] & 0x3F | ((v70 & 0x1F) << 6);
        goto LABEL_600;
      }
      if ((v70 & 0x10) != 0)
      {
        if ((v70 & 8) != 0)
        {
          int v805 = v69[2] & 0x3F;
          int v806 = v69[3] & 0x3F;
          int v807 = v69[4] & 0x3F;
          if ((v70 & 4) == 0)
          {
            unsigned int v70 = ((v70 & 3) << 24) | (v72 << 18) | (v805 << 12) | (v806 << 6) | v807;
            goto LABEL_600;
          }
          int v510 = ((v70 & 1) << 30) | (v72 << 24) | (v805 << 18) | (v806 << 12) | (v807 << 6);
          unsigned __int8 v511 = v69[5];
        }
        else
        {
          int v510 = ((v70 & 7) << 18) | (v72 << 12) | ((v69[2] & 0x3F) << 6);
          unsigned __int8 v511 = v69[3];
        }
      }
      else
      {
        int v510 = ((v70 & 0xF) << 12) | (v72 << 6);
        unsigned __int8 v511 = v69[2];
      }
      unsigned int v70 = v510 & 0xFFFFFFC0 | v511 & 0x3F;
LABEL_600:
      if ((unint64_t)v69 < *v1348) {
        unint64_t *v1348 = (unint64_t)v69;
      }
      if ((*(unsigned char *)(v7 + 242) & 2) != 0)
      {
        int v293 = v70 == 95
            || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                        * _pcre2_ucd_stage2_8[v70 & 0x7F | (_pcre2_ucd_stage1_8[v70 >> 7] << 7)]
                                                        + 1]] & 0xFFFFFFFD) == 1;
      }
      else if (v70 > 0xFF)
      {
LABEL_605:
        int v293 = 0;
      }
      else
      {
        int v293 = (*(unsigned __int8 *)(*(void *)(v7 + 104) + v70) >> 4) & 1;
      }
      v452 = (unsigned char *)*v16;
      if (v68 >= *v16)
      {
        unsigned int v458 = (unsigned __int16)*v1350;
        if (*v1350)
        {
          if (v68 <= *v1348)
          {
            int v459 = *v1345;
            if (!*v1345) {
              goto LABEL_977;
            }
          }
          _DWORD *v1346 = 1;
          if (v458 > 1) {
            return 4294967294;
          }
        }
LABEL_976:
        int v459 = 0;
        goto LABEL_977;
      }
      v453 = (unsigned char *)(v68 + 1);
      if (v14)
      {
        v454 = (unsigned char *)(v68 + 1);
        if (v453 < v452)
        {
          v455 = &v452[~v68];
          v454 = (unsigned char *)(v68 + 1);
          while ((*v454 & 0xC0) == 0x80)
          {
            ++v454;
            if (!--v455)
            {
              v454 = (unsigned char *)*v16;
              break;
            }
          }
        }
        unsigned int v456 = *(unsigned __int8 *)v68;
        if (v456 < 0xC0) {
          goto LABEL_971;
        }
        int v457 = *v453 & 0x3F;
        if ((v456 & 0x20) != 0)
        {
          if ((v456 & 0x10) != 0)
          {
            if ((v456 & 8) != 0)
            {
              int v847 = *(unsigned char *)(v68 + 2) & 0x3F;
              int v848 = *(unsigned char *)(v68 + 3) & 0x3F;
              int v849 = *(unsigned char *)(v68 + 4) & 0x3F;
              if ((v456 & 4) == 0)
              {
                unsigned int v456 = ((v456 & 3) << 24) | (v457 << 18) | (v847 << 12) | (v848 << 6) | v849;
                goto LABEL_971;
              }
              int v536 = ((v456 & 1) << 30) | (v457 << 24) | (v847 << 18) | (v848 << 12) | (v849 << 6);
              unsigned __int8 v537 = *(unsigned char *)(v68 + 5);
            }
            else
            {
              int v536 = ((v456 & 7) << 18) | (v457 << 12) | ((*(unsigned char *)(v68 + 2) & 0x3F) << 6);
              unsigned __int8 v537 = *(unsigned char *)(v68 + 3);
            }
          }
          else
          {
            int v536 = ((v456 & 0xF) << 12) | (v457 << 6);
            unsigned __int8 v537 = *(unsigned char *)(v68 + 2);
          }
          unsigned int v456 = v536 & 0xFFFFFFC0 | v537 & 0x3F;
          goto LABEL_971;
        }
        unsigned int v456 = v457 & 0xFFFFF83F | ((v456 & 0x1F) << 6);
      }
      else
      {
        unsigned int v456 = *(unsigned __int8 *)v68;
        v454 = (unsigned char *)(v68 + 1);
      }
LABEL_971:
      if ((unint64_t)v454 > *(void *)(v7 + 192)) {
        *(void *)(v7 + 192) = v454;
      }
      if ((*(unsigned char *)(v7 + 242) & 2) == 0)
      {
        if (v456 <= 0xFF)
        {
          int v459 = (*(unsigned __int8 *)(*(void *)(v7 + 104) + v456) >> 4) & 1;
          goto LABEL_977;
        }
        goto LABEL_976;
      }
      int v459 = v456 == 95
          || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                      * _pcre2_ucd_stage2_8[v456 & 0x7F | (_pcre2_ucd_stage1_8[v456 >> 7] << 7)]
                                                      + 1]] & 0xFFFFFFFD) == 1;
LABEL_977:
      *(void *)uint64_t v15 = a2 + 1;
      if (*a2 == 5)
      {
        if (v459 != v293) {
          goto LABEL_2500;
        }
      }
      else if (v459 == v293)
      {
        goto LABEL_2500;
      }
      goto LABEL_1995;
    case 6u:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      unsigned int v130 = *v129;
      if (v14 && v130 >= 0xC0)
      {
        if ((v130 & 0x20) != 0)
        {
          int v514 = v129[1] & 0x3F;
          if ((v130 & 0x10) != 0)
          {
            if ((v130 & 8) != 0)
            {
              int v811 = v129[2] & 0x3F;
              int v812 = v129[3] & 0x3F;
              int v813 = v129[4] & 0x3F;
              if ((v130 & 4) != 0)
              {
                unsigned int v130 = ((v130 & 1) << 30) | (v514 << 24) | (v811 << 18) | (v812 << 12) | (v813 << 6) | v129[5] & 0x3F;
                v515 = v129 + 6;
              }
              else
              {
                unsigned int v130 = ((v130 & 3) << 24) | (v514 << 18) | (v811 << 12) | (v812 << 6) | v813;
                v515 = v129 + 5;
              }
            }
            else
            {
              unsigned int v130 = ((v130 & 7) << 18) | (v514 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
              v515 = v129 + 4;
            }
          }
          else
          {
            unsigned int v130 = ((v130 & 0xF) << 12) | (v514 << 6) | v129[2] & 0x3F;
            v515 = v129 + 3;
          }
          *(void *)(v15 + 80) = v515;
        }
        else
        {
          *(void *)(v15 + 80) = v129 + 2;
          unsigned int v130 = v129[1] & 0x3F | ((v130 & 0x1F) << 6);
        }
        if (v130 > 0xFF) {
          goto LABEL_2439;
        }
      }
      if ((*(unsigned char *)(*(void *)(v7 + 104) + v130) & 8) == 0) {
        goto LABEL_2439;
      }
      goto LABEL_1192;
    case 7u:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      unsigned int v131 = *v129;
      if (!v14 || v131 < 0xC0) {
        goto LABEL_2340;
      }
      if ((v131 & 0x20) != 0)
      {
        int v516 = v129[1] & 0x3F;
        if ((v131 & 0x10) != 0)
        {
          if ((v131 & 8) != 0)
          {
            int v814 = v129[2] & 0x3F;
            int v815 = v129[3] & 0x3F;
            int v816 = v129[4] & 0x3F;
            if ((v131 & 4) != 0)
            {
              unsigned int v131 = ((v131 & 1) << 30) | (v516 << 24) | (v814 << 18) | (v815 << 12) | (v816 << 6) | v129[5] & 0x3F;
              v517 = v129 + 6;
            }
            else
            {
              unsigned int v131 = ((v131 & 3) << 24) | (v516 << 18) | (v814 << 12) | (v815 << 6) | v816;
              v517 = v129 + 5;
            }
          }
          else
          {
            unsigned int v131 = ((v131 & 7) << 18) | (v516 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
            v517 = v129 + 4;
          }
        }
        else
        {
          unsigned int v131 = ((v131 & 0xF) << 12) | (v516 << 6) | v129[2] & 0x3F;
          v517 = v129 + 3;
        }
        *(void *)(v15 + 80) = v517;
      }
      else
      {
        *(void *)(v15 + 80) = v129 + 2;
        unsigned int v131 = v129[1] & 0x3F | ((v131 & 0x1F) << 6);
      }
      if (v131 <= 0xFF)
      {
LABEL_2340:
        if ((*(unsigned char *)(*(void *)(v7 + 104) + v131) & 8) != 0) {
          goto LABEL_2439;
        }
      }
      goto LABEL_1192;
    case 8u:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      unsigned int v132 = *v129;
      if (v14 && v132 >= 0xC0)
      {
        if ((v132 & 0x20) != 0)
        {
          int v518 = v129[1] & 0x3F;
          if ((v132 & 0x10) != 0)
          {
            if ((v132 & 8) != 0)
            {
              int v817 = v129[2] & 0x3F;
              int v818 = v129[3] & 0x3F;
              int v819 = v129[4] & 0x3F;
              if ((v132 & 4) != 0)
              {
                unsigned int v132 = ((v132 & 1) << 30) | (v518 << 24) | (v817 << 18) | (v818 << 12) | (v819 << 6) | v129[5] & 0x3F;
                v519 = v129 + 6;
              }
              else
              {
                unsigned int v132 = ((v132 & 3) << 24) | (v518 << 18) | (v817 << 12) | (v818 << 6) | v819;
                v519 = v129 + 5;
              }
            }
            else
            {
              unsigned int v132 = ((v132 & 7) << 18) | (v518 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
              v519 = v129 + 4;
            }
          }
          else
          {
            unsigned int v132 = ((v132 & 0xF) << 12) | (v518 << 6) | v129[2] & 0x3F;
            v519 = v129 + 3;
          }
          *(void *)(v15 + 80) = v519;
        }
        else
        {
          *(void *)(v15 + 80) = v129 + 2;
          unsigned int v132 = v129[1] & 0x3F | ((v132 & 0x1F) << 6);
        }
        if (v132 > 0xFF) {
          goto LABEL_2439;
        }
      }
      if ((*(unsigned char *)(*(void *)(v7 + 104) + v132) & 1) == 0) {
        goto LABEL_2439;
      }
      goto LABEL_1192;
    case 9u:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      unsigned int v133 = *v129;
      if (!v14 || v133 < 0xC0) {
        goto LABEL_2350;
      }
      if ((v133 & 0x20) != 0)
      {
        int v520 = v129[1] & 0x3F;
        if ((v133 & 0x10) != 0)
        {
          if ((v133 & 8) != 0)
          {
            int v820 = v129[2] & 0x3F;
            int v821 = v129[3] & 0x3F;
            int v822 = v129[4] & 0x3F;
            if ((v133 & 4) != 0)
            {
              unsigned int v133 = ((v133 & 1) << 30) | (v520 << 24) | (v820 << 18) | (v821 << 12) | (v822 << 6) | v129[5] & 0x3F;
              v521 = v129 + 6;
            }
            else
            {
              unsigned int v133 = ((v133 & 3) << 24) | (v520 << 18) | (v820 << 12) | (v821 << 6) | v822;
              v521 = v129 + 5;
            }
          }
          else
          {
            unsigned int v133 = ((v133 & 7) << 18) | (v520 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
            v521 = v129 + 4;
          }
        }
        else
        {
          unsigned int v133 = ((v133 & 0xF) << 12) | (v520 << 6) | v129[2] & 0x3F;
          v521 = v129 + 3;
        }
        *(void *)(v15 + 80) = v521;
      }
      else
      {
        *(void *)(v15 + 80) = v129 + 2;
        unsigned int v133 = v129[1] & 0x3F | ((v133 & 0x1F) << 6);
      }
      if (v133 <= 0xFF)
      {
LABEL_2350:
        if (*(unsigned char *)(*(void *)(v7 + 104) + v133)) {
          goto LABEL_2439;
        }
      }
      goto LABEL_1192;
    case 0xAu:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      unsigned int v134 = *v129;
      if (v14 && v134 >= 0xC0)
      {
        if ((v134 & 0x20) != 0)
        {
          int v522 = v129[1] & 0x3F;
          if ((v134 & 0x10) != 0)
          {
            if ((v134 & 8) != 0)
            {
              int v823 = v129[2] & 0x3F;
              int v824 = v129[3] & 0x3F;
              int v825 = v129[4] & 0x3F;
              if ((v134 & 4) != 0)
              {
                unsigned int v134 = ((v134 & 1) << 30) | (v522 << 24) | (v823 << 18) | (v824 << 12) | (v825 << 6) | v129[5] & 0x3F;
                v523 = v129 + 6;
              }
              else
              {
                unsigned int v134 = ((v134 & 3) << 24) | (v522 << 18) | (v823 << 12) | (v824 << 6) | v825;
                v523 = v129 + 5;
              }
            }
            else
            {
              unsigned int v134 = ((v134 & 7) << 18) | (v522 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
              v523 = v129 + 4;
            }
          }
          else
          {
            unsigned int v134 = ((v134 & 0xF) << 12) | (v522 << 6) | v129[2] & 0x3F;
            v523 = v129 + 3;
          }
          *(void *)(v15 + 80) = v523;
        }
        else
        {
          *(void *)(v15 + 80) = v129 + 2;
          unsigned int v134 = v129[1] & 0x3F | ((v134 & 0x1F) << 6);
        }
        if (v134 > 0xFF) {
          goto LABEL_2439;
        }
      }
      if ((*(unsigned char *)(*(void *)(v7 + 104) + v134) & 0x10) == 0) {
        goto LABEL_2439;
      }
      goto LABEL_1192;
    case 0xBu:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      unsigned int v135 = *v129;
      if (!v14 || v135 < 0xC0) {
        goto LABEL_2360;
      }
      if ((v135 & 0x20) != 0)
      {
        int v524 = v129[1] & 0x3F;
        if ((v135 & 0x10) != 0)
        {
          if ((v135 & 8) != 0)
          {
            int v826 = v129[2] & 0x3F;
            int v827 = v129[3] & 0x3F;
            int v828 = v129[4] & 0x3F;
            if ((v135 & 4) != 0)
            {
              unsigned int v135 = ((v135 & 1) << 30) | (v524 << 24) | (v826 << 18) | (v827 << 12) | (v828 << 6) | v129[5] & 0x3F;
              v525 = v129 + 6;
            }
            else
            {
              unsigned int v135 = ((v135 & 3) << 24) | (v524 << 18) | (v826 << 12) | (v827 << 6) | v828;
              v525 = v129 + 5;
            }
          }
          else
          {
            unsigned int v135 = ((v135 & 7) << 18) | (v524 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
            v525 = v129 + 4;
          }
        }
        else
        {
          unsigned int v135 = ((v135 & 0xF) << 12) | (v524 << 6) | v129[2] & 0x3F;
          v525 = v129 + 3;
        }
        *(void *)(v15 + 80) = v525;
      }
      else
      {
        *(void *)(v15 + 80) = v129 + 2;
        unsigned int v135 = v129[1] & 0x3F | ((v135 & 0x1F) << 6);
      }
      if (v135 <= 0xFF)
      {
LABEL_2360:
        if ((*(unsigned char *)(*(void *)(v7 + 104) + v135) & 0x10) != 0) {
          goto LABEL_2439;
        }
      }
      goto LABEL_1192;
    case 0xCu:
      int v136 = *(_DWORD *)(v7 + 252);
      int v137 = *(unsigned __int8 **)(v15 + 80);
      unint64_t v138 = *(void *)(v7 + 168);
      if (v136)
      {
        if ((unint64_t)v137 < v138)
        {
          if (_pcre2_is_newline_8(v137, v136, v138, v1340, v1347))
          {
            uint64_t v20 = 0;
LABEL_241:
            uint64_t v16 = v1349;
            goto LABEL_2502;
          }
          uint64_t v16 = v1349;
          unint64_t v138 = *v1349;
        }
      }
      else
      {
        uint64_t v439 = *v1340;
        if ((unint64_t)v137 <= v138 - v439
          && *v137 == *(unsigned __int8 *)(v7 + 260)
          && (v439 == 1 || v137[1] == *(unsigned __int8 *)(v7 + 261)))
        {
          goto LABEL_1192;
        }
      }
      unsigned int v540 = (unsigned __int16)*v1350;
      if (*v1350)
      {
        v541 = *(unsigned __int8 **)(v15 + 80);
        if (v541 == (unsigned __int8 *)(v138 - 1)
          && !*(_DWORD *)(v7 + 252)
          && *v1340 == 2
          && *v541 == *(unsigned __int8 *)(v7 + 260))
        {
          _DWORD *v1346 = 1;
          if (v540 > 1) {
            return 4294967294;
          }
        }
      }
LABEL_1181:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 < v138)
      {
        v542 = v129 + 1;
        *(void *)(v15 + 80) = v129 + 1;
        if (v14 && (unint64_t)v542 < v138)
        {
          unint64_t v543 = v138 - (void)v542;
          v544 = v129 + 2;
          do
          {
            if ((*(v544 - 1) & 0xC0) != 0x80) {
              break;
            }
            *(void *)(v15 + 80) = v544++;
            --v543;
          }
          while (v543);
        }
LABEL_1187:
        uint64_t v228 = *(void *)v15 + 1;
        goto LABEL_2499;
      }
LABEL_1188:
      unsigned int v64 = (unsigned __int16)*v1350;
      if (!*v1350) {
        goto LABEL_1192;
      }
      if ((unint64_t)v129 <= *v1348) {
        goto LABEL_1190;
      }
      goto LABEL_1191;
    case 0xDu:
      unint64_t v138 = *v16;
      goto LABEL_1181;
    case 0xEu:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      v139 = v129 + 1;
      goto LABEL_245;
    case 0xFu:
    case 0x10u:
      unsigned __int32 v73 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v73 >= *v16) {
        goto LABEL_171;
      }
      *(void *)(v15 + 80) = v73 + 1;
      unsigned int v74 = *v73;
      if (v14 && v74 >= 0xC0)
      {
        if ((v74 & 0x20) != 0)
        {
          int v469 = v73[1] & 0x3F;
          if ((v74 & 0x10) != 0)
          {
            if ((v74 & 8) != 0)
            {
              int v785 = v73[2] & 0x3F;
              int v786 = v73[3] & 0x3F;
              int v787 = v73[4] & 0x3F;
              if ((v74 & 4) != 0)
              {
                unsigned int v74 = ((v74 & 1) << 30) | (v469 << 24) | (v785 << 18) | (v786 << 12) | (v787 << 6) | v73[5] & 0x3F;
                v470 = v73 + 6;
              }
              else
              {
                unsigned int v74 = ((v74 & 3) << 24) | (v469 << 18) | (v785 << 12) | (v786 << 6) | v787;
                v470 = v73 + 5;
              }
            }
            else
            {
              unsigned int v74 = ((v74 & 7) << 18) | (v469 << 12) | ((v73[2] & 0x3F) << 6) | v73[3] & 0x3F;
              v470 = v73 + 4;
            }
          }
          else
          {
            unsigned int v74 = ((v74 & 0xF) << 12) | (v469 << 6) | v73[2] & 0x3F;
            v470 = v73 + 3;
          }
          *(void *)(v15 + 80) = v470;
        }
        else
        {
          *(void *)(v15 + 80) = v73 + 2;
          unsigned int v74 = v73[1] & 0x3F | ((v74 & 0x1F) << 6);
        }
      }
      int v850 = _pcre2_ucd_stage2_8[v74 & 0x7F | (_pcre2_ucd_stage1_8[v74 >> 7] << 7)];
      switch(a2[1])
      {
        case 0u:
          goto LABEL_1987;
        case 1u:
          unsigned int v852 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v74 & 0x7F | (_pcre2_ucd_stage1_8[v74 >> 7] << 7)] + 1];
          BOOL v105 = v852 > 9;
          int v853 = (1 << v852) & 0x320;
          if (!v105 && v853 != 0) {
            goto LABEL_1987;
          }
          if (v18 == 15) {
            goto LABEL_2501;
          }
          goto LABEL_1192;
        case 2u:
          int v855 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                         * _pcre2_ucd_stage2_8[v74 & 0x7F | (_pcre2_ucd_stage1_8[v74 >> 7] << 7)]
                                                         + 1]];
          int v856 = a2[2];
          goto LABEL_1953;
        case 3u:
          int v855 = a2[2];
          int v856 = _pcre2_ucd_records_8[12 * v850 + 1];
LABEL_1953:
          BOOL v857 = v855 == v856;
          goto LABEL_1955;
        case 4u:
          BOOL v857 = a2[2] == _pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[v74 & 0x7F | (_pcre2_ucd_stage1_8[v74 >> 7] << 7)]];
LABEL_1955:
          BOOL v858 = v857;
          BOOL v859 = v18 == 16;
          goto LABEL_1959;
        case 5u:
          BOOL v861 = (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                          * _pcre2_ucd_stage2_8[v74 & 0x7F | (_pcre2_ucd_stage1_8[v74 >> 7] << 7)]
                                                          + 1]] & 0xFFFFFFFD) == 1;
          goto LABEL_1965;
        case 6u:
        case 7u:
          if ((int)v74 < 0x2000)
          {
            if ((int)v74 > 132)
            {
              if ((int)v74 > 5759)
              {
                if (v74 != 5760 && v74 != 6158) {
                  goto LABEL_2463;
                }
              }
              else if (v74 != 133 && v74 != 160)
              {
                goto LABEL_2463;
              }
            }
            else
            {
              BOOL v105 = v74 > 0x20;
              uint64_t v865 = (1 << v74) & 0x100003E00;
              if (v105 || v865 == 0)
              {
LABEL_2463:
                BOOL v858 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v850 + 1]] != 6;
                BOOL v859 = v18 == 15;
LABEL_1959:
                BOOL v860 = v859;
LABEL_1969:
                if ((v860 ^ v858)) {
                  goto LABEL_1192;
                }
LABEL_2501:
                uint64_t v228 = (uint64_t)(a2 + 3);
                goto LABEL_2499;
              }
            }
          }
          else if (v74 - 0x2000 >= 0xB)
          {
            BOOL v851 = v74 - 8232 > 0x37 || ((1 << (v74 - 40)) & 0x80000000000083) == 0;
            if (v851 && v74 != 12288) {
              goto LABEL_2463;
            }
          }
LABEL_1987:
          if (v18 != 15) {
            goto LABEL_2501;
          }
          break;
        case 8u:
          if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                        * _pcre2_ucd_stage2_8[v74 & 0x7F | (_pcre2_ucd_stage1_8[v74 >> 7] << 7)]
                                                        + 1]] | 2) == 3)
            goto LABEL_1987;
          BOOL v861 = v74 == 95;
LABEL_1965:
          BOOL v858 = v861;
          BOOL v860 = v18 != 15;
          goto LABEL_1969;
        case 9u:
          v862 = &_pcre2_ucd_caseless_sets_8[a2[2]];
          while (1)
          {
            unsigned int v863 = *v862;
            if (v74 < *v862) {
              break;
            }
            ++v862;
            if (v74 == v863)
            {
              if (v18 == 16) {
                goto LABEL_2501;
              }
LABEL_1141:
              uint64_t v20 = 0;
              goto LABEL_2502;
            }
          }
          if (v18 == 16) {
            goto LABEL_1141;
          }
          goto LABEL_2501;
        case 0xAu:
          if (v74 - 36 > 0x3C || ((1 << (v74 - 36)) & 0x1000000010000001) == 0)
          {
            BOOL v973 = v74 >> 13 > 6 || (v74 - 160) >> 5 < 0x6BB;
            if (((v18 != 15) ^ v973)) {
              goto LABEL_1141;
            }
          }
          else if (v18 == 15)
          {
            goto LABEL_1141;
          }
          goto LABEL_2501;
        default:
          return 4294967252;
      }
      goto LABEL_1192;
    case 0x11u:
      unsigned int v140 = *(unsigned __int8 **)(v15 + 80);
      unint64_t v141 = *v16;
      if ((unint64_t)v140 < *v16)
      {
        uint64_t v142 = v140 + 1;
        *(void *)(v15 + 80) = v140 + 1;
        int v143 = *v140;
        if (v14 && v143 >= 0xC0)
        {
          if ((v143 & 0x20) != 0)
          {
            int v526 = *v142 & 0x3F;
            if ((v143 & 0x10) != 0)
            {
              if ((v143 & 8) != 0)
              {
                int v829 = v140[2] & 0x3F;
                int v830 = v140[3] & 0x3F;
                int v831 = v140[4] & 0x3F;
                if ((v143 & 4) != 0)
                {
                  int v143 = ((v143 & 1) << 30) | (v526 << 24) | (v829 << 18) | (v830 << 12) | (v831 << 6) | v140[5] & 0x3F;
                  uint64_t v142 = v140 + 6;
                }
                else
                {
                  int v143 = ((v143 & 3) << 24) | (v526 << 18) | (v829 << 12) | (v830 << 6) | v831;
                  uint64_t v142 = v140 + 5;
                }
              }
              else
              {
                int v143 = ((v143 & 7) << 18) | (v526 << 12) | ((v140[2] & 0x3F) << 6) | v140[3] & 0x3F;
                uint64_t v142 = v140 + 4;
              }
            }
            else
            {
              int v143 = ((v143 & 0xF) << 12) | (v526 << 6) | v140[2] & 0x3F;
              uint64_t v142 = v140 + 3;
            }
            *(void *)(v15 + 80) = v142;
          }
          else
          {
            uint64_t v142 = v140 + 2;
            *(void *)(v15 + 80) = v140 + 2;
            int v143 = v140[1] & 0x3F | ((v143 & 0x1F) << 6);
          }
        }
        uint64_t v20 = 0;
        if (v143 <= 12)
        {
          if ((v143 - 11) >= 2)
          {
            if (v143 != 10) {
              goto LABEL_2502;
            }
            goto LABEL_2439;
          }
        }
        else if ((v143 - 8232) >= 2 && v143 != 133)
        {
          if (v143 != 13) {
            goto LABEL_2502;
          }
          if ((unint64_t)v142 < v141)
          {
            if (*v142 == 10)
            {
              v139 = v142 + 1;
LABEL_245:
              *(void *)(v15 + 80) = v139;
            }
            goto LABEL_2439;
          }
          unsigned int v307 = (unsigned __int16)*v1350;
          if (!*v1350) {
            goto LABEL_2439;
          }
          if ((unint64_t)v142 > *v1348)
          {
LABEL_638:
            _DWORD *v1346 = 1;
            if (v307 > 1) {
              return 4294967294;
            }
            goto LABEL_2439;
          }
LABEL_637:
          if (*v1345) {
            goto LABEL_638;
          }
LABEL_2439:
          uint64_t v228 = (uint64_t)(a2 + 1);
          goto LABEL_2499;
        }
        if (*(_WORD *)(v7 + 130) != 2) {
          goto LABEL_2439;
        }
        goto LABEL_1192;
      }
      unsigned int v64 = (unsigned __int16)*v1350;
      if (!*v1350) {
        goto LABEL_1192;
      }
      if ((unint64_t)v140 > *v1348) {
        goto LABEL_1191;
      }
      goto LABEL_1190;
    case 0x12u:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      int v144 = *v129;
      if (v14 && v144 >= 0xC0)
      {
        if ((v144 & 0x20) != 0)
        {
          int v527 = v129[1] & 0x3F;
          if ((v144 & 0x10) != 0)
          {
            if ((v144 & 8) != 0)
            {
              int v832 = v129[2] & 0x3F;
              int v833 = v129[3] & 0x3F;
              int v834 = v129[4] & 0x3F;
              if ((v144 & 4) != 0)
              {
                int v144 = ((v144 & 1) << 30) | (v527 << 24) | (v832 << 18) | (v833 << 12) | (v834 << 6) | v129[5] & 0x3F;
                v528 = v129 + 6;
              }
              else
              {
                int v144 = ((v144 & 3) << 24) | (v527 << 18) | (v832 << 12) | (v833 << 6) | v834;
                v528 = v129 + 5;
              }
            }
            else
            {
              int v144 = ((v144 & 7) << 18) | (v527 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
              v528 = v129 + 4;
            }
          }
          else
          {
            int v144 = ((v144 & 0xF) << 12) | (v527 << 6) | v129[2] & 0x3F;
            v528 = v129 + 3;
          }
          *(void *)(v15 + 80) = v528;
        }
        else
        {
          *(void *)(v15 + 80) = v129 + 2;
          int v144 = v129[1] & 0x3F | ((v144 & 0x1F) << 6);
        }
      }
      uint64_t v20 = 0;
      if (v144 < 0x2000)
      {
        if (v144 <= 159)
        {
          if (v144 == 9 || v144 == 32) {
            goto LABEL_2502;
          }
        }
        else if (v144 == 160 || v144 == 5760 || v144 == 6158)
        {
          goto LABEL_2502;
        }
      }
      else if (v144 > 8238)
      {
        BOOL v985 = v144 == 8239 || v144 == 8287;
        if (v985 || v144 == 12288) {
          goto LABEL_2502;
        }
      }
      else if ((v144 - 0x2000) < 0xB)
      {
        goto LABEL_2502;
      }
      goto LABEL_2439;
    case 0x13u:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      int v145 = *v129;
      if (v14 && v145 >= 0xC0)
      {
        if ((v145 & 0x20) != 0)
        {
          int v529 = v129[1] & 0x3F;
          if ((v145 & 0x10) != 0)
          {
            if ((v145 & 8) != 0)
            {
              int v835 = v129[2] & 0x3F;
              int v836 = v129[3] & 0x3F;
              int v837 = v129[4] & 0x3F;
              if ((v145 & 4) != 0)
              {
                int v145 = ((v145 & 1) << 30) | (v529 << 24) | (v835 << 18) | (v836 << 12) | (v837 << 6) | v129[5] & 0x3F;
                v530 = v129 + 6;
              }
              else
              {
                int v145 = ((v145 & 3) << 24) | (v529 << 18) | (v835 << 12) | (v836 << 6) | v837;
                v530 = v129 + 5;
              }
            }
            else
            {
              int v145 = ((v145 & 7) << 18) | (v529 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
              v530 = v129 + 4;
            }
          }
          else
          {
            int v145 = ((v145 & 0xF) << 12) | (v529 << 6) | v129[2] & 0x3F;
            v530 = v129 + 3;
          }
          *(void *)(v15 + 80) = v530;
        }
        else
        {
          *(void *)(v15 + 80) = v129 + 2;
          int v145 = v129[1] & 0x3F | ((v145 & 0x1F) << 6);
        }
      }
      uint64_t v20 = 0;
      if (v145 < 0x2000)
      {
        if (v145 <= 159)
        {
          if (v145 != 9 && v145 != 32) {
            goto LABEL_2502;
          }
          goto LABEL_2439;
        }
        BOOL v986 = v145 == 160 || v145 == 5760;
        int v987 = 6158;
      }
      else
      {
        if (v145 <= 8238)
        {
          if ((v145 - 0x2000) >= 0xB) {
            goto LABEL_2502;
          }
          goto LABEL_2439;
        }
        if (v145 == 8239) {
          goto LABEL_2439;
        }
        BOOL v986 = v145 == 12288;
        int v987 = 8287;
      }
      if (v986 || v145 == v987) {
        goto LABEL_2439;
      }
LABEL_2502:
      while (2)
      {
        while (2)
        {
          v1003 = *(unsigned __int8 **)(v15 + 80);
          if ((unint64_t)v1003 > *(void *)(v7 + 192)) {
            *(void *)(v7 + 192) = v1003;
          }
          if (!*(_DWORD *)(v15 + 48)) {
            return v20;
          }
          v15 -= *(void *)(v15 + 32);
          *(_DWORD *)(*(void *)(v7 + 264) + 104) |= 2u;
          unsigned int v1004 = *(unsigned __int8 *)(v15 + 72);
          uint64_t v19 = 4294967252;
          if (v1004 > 0x63)
          {
            switch(*(unsigned char *)(v15 + 72))
            {
              case 0xC8:
                if (v20) {
                  continue;
                }
                unsigned int v1005 = *(_DWORD *)(v15 + 56);
                unsigned int v1006 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1005 + 1;
                if (v1005 >= v1006) {
                  continue;
                }
                v1007 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1007 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1130 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1007 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1130 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1007 + 1;
                  unsigned int v1008 = *v1007;
                  if (v1008 < 0xC0) {
                    goto LABEL_3024;
                  }
                  if ((v1008 & 0x20) != 0)
                  {
                    int v1146 = v1007[1] & 0x3F;
                    if ((v1008 & 0x10) != 0)
                    {
                      if ((v1008 & 8) != 0)
                      {
                        int v1179 = v1007[2] & 0x3F;
                        int v1180 = v1007[3] & 0x3F;
                        int v1181 = v1007[4] & 0x3F;
                        if ((v1008 & 4) != 0)
                        {
                          unsigned int v1008 = ((v1008 & 1) << 30) | (v1146 << 24) | (v1179 << 18) | (v1180 << 12) | (v1181 << 6) | v1007[5] & 0x3F;
                          v1147 = v1007 + 6;
                        }
                        else
                        {
                          unsigned int v1008 = ((v1008 & 3) << 24) | (v1146 << 18) | (v1179 << 12) | (v1180 << 6) | v1181;
                          v1147 = v1007 + 5;
                        }
                      }
                      else
                      {
                        unsigned int v1008 = ((v1008 & 7) << 18) | (v1146 << 12) | ((v1007[2] & 0x3F) << 6) | v1007[3] & 0x3F;
                        v1147 = v1007 + 4;
                      }
                    }
                    else
                    {
                      unsigned int v1008 = ((v1008 & 0xF) << 12) | (v1146 << 6) | v1007[2] & 0x3F;
                      v1147 = v1007 + 3;
                    }
                    *(void *)(v15 + 80) = v1147;
                  }
                  else
                  {
                    *(void *)(v15 + 80) = v1007 + 2;
                    unsigned int v1008 = v1007[1] & 0x3F | ((v1008 & 0x1F) << 6);
                  }
                  if (v1008 < 0x100)
                  {
LABEL_3024:
                    uint64_t v20 = 0;
                    if ((*(unsigned __int8 *)(*(void *)(v15 + 16) + ((unint64_t)v1008 >> 3)) >> (v1008 & 7)))
                    {
LABEL_3391:
                      v1336 = a3;
                      unsigned int i = v12;
                      LODWORD(v12) = 0;
                      a2 = *(unsigned __int8 **)v15;
                      char v1302 = -56;
                      goto LABEL_3333;
                    }
                  }
                  else
                  {
                    uint64_t v20 = 0;
                    if (*(unsigned char *)(v15 + 73) != 110) {
                      goto LABEL_3391;
                    }
                  }
                }
                continue;
              case 0xC9:
                if (v20) {
                  continue;
                }
                v1046 = *(unsigned __int8 **)(v15 + 80);
                *(void *)(v15 + 80) = v1046 - 1;
                if ((unint64_t)v1046 <= *(void *)(v15 + 8)) {
                  continue;
                }
                unsigned int i = v12;
                v1336 = a3;
                if ((*(v1046 - 1) & 0xC0) == 0x80)
                {
                  v1296 = v1046 - 2;
                  do
                  {
                    *(void *)(v15 + 80) = v1296;
                    char v1297 = *v1296--;
                  }
                  while ((v1297 & 0xC0) == 0x80);
                }
                goto LABEL_3355;
              case 0xCA:
                if (v20) {
                  continue;
                }
                unsigned int v1047 = *(_DWORD *)(v15 + 56);
                unsigned int v1048 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1047 + 1;
                if (v1047 >= v1048) {
                  continue;
                }
                v1332 = v8;
                v1049 = *(unsigned __int8 **)(v15 + 80);
                unint64_t v1050 = *v16;
                v1051 = *(unsigned __int8 **)(v15 + 24);
                if ((unint64_t)v1049 <= *v16 - (unint64_t)v1051
                  && (int v1052 = memcmp(*(const void **)(v15 + 80), *(const void **)(v15 + 16), *(void *)(v15 + 24)),
                      uint64_t v16 = v1349,
                      !v1052)
                  || ((v1051 = *(unsigned __int8 **)(v15 + 40)) != 0
                    ? (BOOL v1053 = (unint64_t)v1049 > v1050 - (unint64_t)v1051)
                    : (BOOL v1053 = 1),
                      !v1053
                   && (v1054 = memcmp(v1049, (const void *)(v15 + 74), *(void *)(v15 + 40)), uint64_t v16 = v1349, !v1054)))
                {
                  v1336 = a3;
                  unsigned int i = v12;
                  *(void *)(v15 + 80) = &v1051[(void)v1049];
LABEL_3383:
                  LODWORD(v12) = 0;
                  a2 = *(unsigned __int8 **)v15;
                  char v1302 = -54;
                  unsigned int v8 = v1332;
                  goto LABEL_3333;
                }
                uint64_t v20 = 0;
                BOOL v259 = (unint64_t)v1049 >= v1050;
                unsigned int v8 = v1332;
                if (v259)
                {
                  uint64_t v20 = 0;
                  unsigned int v1055 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1049 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1055 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                continue;
              case 0xCB:
                if (v20) {
                  continue;
                }
                v1336 = a3;
                uint64_t v1331 = v7;
                v1249 = (unsigned __int8 *)(*(void *)(v15 + 80) - 1);
                do
                {
                  *(void *)(v15 + 80) = v1249;
                  char v1250 = *v1249--;
                }
                while ((v1250 & 0xC0) == 0x80);
                v339 = *(unsigned __int8 **)(v15 + 8);
                v340 = v1249 + 1;
                goto LABEL_3255;
              case 0xCC:
                if (v20) {
                  continue;
                }
                unsigned int v1056 = *(_DWORD *)(v15 + 56);
                unsigned int v1057 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1056 + 1;
                if (v1056 >= v1057) {
                  continue;
                }
                v1058 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1058 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1131 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1058 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1131 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1058 + 1;
                  unsigned int v1059 = *v1058;
                  if (v1059 >= 0xC0)
                  {
                    if ((v1059 & 0x20) != 0)
                    {
                      int v1148 = v1058[1] & 0x3F;
                      if ((v1059 & 0x10) != 0)
                      {
                        if ((v1059 & 8) != 0)
                        {
                          int v1182 = v1058[2] & 0x3F;
                          int v1183 = v1058[3] & 0x3F;
                          int v1184 = v1058[4] & 0x3F;
                          if ((v1059 & 4) != 0)
                          {
                            unsigned int v1059 = ((v1059 & 1) << 30) | (v1148 << 24) | (v1182 << 18) | (v1183 << 12) | (v1184 << 6) | v1058[5] & 0x3F;
                            v1149 = v1058 + 6;
                          }
                          else
                          {
                            unsigned int v1059 = ((v1059 & 3) << 24) | (v1148 << 18) | (v1182 << 12) | (v1183 << 6) | v1184;
                            v1149 = v1058 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1059 = ((v1059 & 7) << 18) | (v1148 << 12) | ((v1058[2] & 0x3F) << 6) | v1058[3] & 0x3F;
                          v1149 = v1058 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1059 = ((v1059 & 0xF) << 12) | (v1148 << 6) | v1058[2] & 0x3F;
                        v1149 = v1058 + 3;
                      }
                      *(void *)(v15 + 80) = v1149;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1058 + 2;
                      unsigned int v1059 = v1058[1] & 0x3F | ((v1059 & 0x1F) << 6);
                    }
                  }
                  uint64_t v20 = 0;
                  if (*(_DWORD *)(v15 + 64) != v1059)
                  {
                    uint64_t v20 = 0;
                    if (*(_DWORD *)(v15 + 68) != v1059)
                    {
                      v1336 = a3;
                      unsigned int i = v12;
                      LODWORD(v12) = 0;
                      a2 = *(unsigned __int8 **)v15;
                      goto LABEL_3448;
                    }
                  }
                }
                continue;
              case 0xCD:
                if (v20) {
                  continue;
                }
                v1251 = (unsigned __int8 *)(*(void *)(v15 + 80) - 1);
                do
                {
                  *(void *)(v15 + 80) = v1251;
                  char v1252 = *v1251--;
                }
                while ((v1252 & 0xC0) == 0x80);
                v274 = *(unsigned __int8 **)(v15 + 8);
                v275 = v1251 + 1;
                goto LABEL_3259;
              case 0xCE:
                if (v20) {
                  continue;
                }
                unsigned int v1060 = *(_DWORD *)(v15 + 56);
                unsigned int v1061 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1060 + 1;
                if (v1060 >= v1061) {
                  continue;
                }
                v1062 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1062 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1132 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1062 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1132 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1062 + 1;
                  unsigned int v1063 = *v1062;
                  if (v1063 >= 0xC0)
                  {
                    if ((v1063 & 0x20) != 0)
                    {
                      int v1150 = v1062[1] & 0x3F;
                      if ((v1063 & 0x10) != 0)
                      {
                        if ((v1063 & 8) != 0)
                        {
                          int v1185 = v1062[2] & 0x3F;
                          int v1186 = v1062[3] & 0x3F;
                          int v1187 = v1062[4] & 0x3F;
                          if ((v1063 & 4) != 0)
                          {
                            unsigned int v1063 = ((v1063 & 1) << 30) | (v1150 << 24) | (v1185 << 18) | (v1186 << 12) | (v1187 << 6) | v1062[5] & 0x3F;
                            v1151 = v1062 + 6;
                          }
                          else
                          {
                            unsigned int v1063 = ((v1063 & 3) << 24) | (v1150 << 18) | (v1185 << 12) | (v1186 << 6) | v1187;
                            v1151 = v1062 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1063 = ((v1063 & 7) << 18) | (v1150 << 12) | ((v1062[2] & 0x3F) << 6) | v1062[3] & 0x3F;
                          v1151 = v1062 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1063 = ((v1063 & 0xF) << 12) | (v1150 << 6) | v1062[2] & 0x3F;
                        v1151 = v1062 + 3;
                      }
                      *(void *)(v15 + 80) = v1151;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1062 + 2;
                      unsigned int v1063 = v1062[1] & 0x3F | ((v1063 & 0x1F) << 6);
                    }
                  }
                  uint64_t v20 = 0;
                  if (*(_DWORD *)(v15 + 64) != v1063)
                  {
                    v1336 = a3;
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    goto LABEL_3392;
                  }
                }
                continue;
              case 0xCF:
                if (v20) {
                  continue;
                }
                v1253 = (unsigned __int8 *)(*(void *)(v15 + 80) - 1);
                do
                {
                  *(void *)(v15 + 80) = v1253;
                  char v1254 = *v1253--;
                }
                while ((v1254 & 0xC0) == 0x80);
                v257 = *(unsigned __int8 **)(v15 + 8);
                v258 = v1253 + 1;
                goto LABEL_3263;
              case 0xD0:
                if (v20) {
                  continue;
                }
                unsigned int v1064 = *(_DWORD *)(v15 + 56);
                unsigned int v1065 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1064 + 1;
                if (v1064 >= v1065) {
                  continue;
                }
                v1066 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1066 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1133 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1066 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1133 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1066 + 1;
                  if (v14)
                  {
                    unsigned int v1067 = *v1066;
                    if (v1067 >= 0xC0)
                    {
                      if ((v1067 & 0x20) != 0)
                      {
                        uint64_t v1152 = 4;
                        uint64_t v1153 = 5;
                        if ((v1067 & 4) != 0) {
                          uint64_t v1153 = 6;
                        }
                        if ((v1067 & 8) != 0) {
                          uint64_t v1152 = v1153;
                        }
                        if ((v1067 & 0x10) != 0) {
                          uint64_t v1068 = v1152;
                        }
                        else {
                          uint64_t v1068 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v1068 = 2;
                      }
                      *(void *)(v15 + 80) = &v1066[v1068];
                    }
                  }
                  uint64_t v20 = 0;
                  if (*(_DWORD *)(v15 + 64) != 15)
                  {
                    v1336 = a3;
                    int v178 = v12;
LABEL_3390:
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = -48;
                    unsigned int i = v178;
                    goto LABEL_3333;
                  }
                }
                continue;
              case 0xD1:
                if (v20) {
                  continue;
                }
                unsigned int v1069 = *(_DWORD *)(v15 + 56);
                unsigned int v1070 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1069 + 1;
                if (v1069 >= v1070) {
                  continue;
                }
                v1071 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1071 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1134 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1071 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1134 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1071 + 1;
                  unsigned int v1072 = *v1071;
                  if (v14 && v1072 >= 0xC0)
                  {
                    if ((v1072 & 0x20) != 0)
                    {
                      int v1154 = v1071[1] & 0x3F;
                      if ((v1072 & 0x10) != 0)
                      {
                        if ((v1072 & 8) != 0)
                        {
                          int v1188 = v1071[2] & 0x3F;
                          int v1189 = v1071[3] & 0x3F;
                          int v1190 = v1071[4] & 0x3F;
                          if ((v1072 & 4) != 0)
                          {
                            unsigned int v1072 = ((v1072 & 1) << 30) | (v1154 << 24) | (v1188 << 18) | (v1189 << 12) | (v1190 << 6) | v1071[5] & 0x3F;
                            v1155 = v1071 + 6;
                          }
                          else
                          {
                            unsigned int v1072 = ((v1072 & 3) << 24) | (v1154 << 18) | (v1188 << 12) | (v1189 << 6) | v1190;
                            v1155 = v1071 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1072 = ((v1072 & 7) << 18) | (v1154 << 12) | ((v1071[2] & 0x3F) << 6) | v1071[3] & 0x3F;
                          v1155 = v1071 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1072 = ((v1072 & 0xF) << 12) | (v1154 << 6) | v1071[2] & 0x3F;
                        v1155 = v1071 + 3;
                      }
                      *(void *)(v15 + 80) = v1155;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1071 + 2;
                      unsigned int v1072 = v1071[1] & 0x3F | ((v1072 & 0x1F) << 6);
                    }
                  }
                  unsigned int v1221 = _pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[v1072 & 0x7F | (_pcre2_ucd_stage1_8[v1072 >> 7] << 7)]
                                             + 1];
                  BOOL v105 = v1221 > 9;
                  int v1222 = (1 << v1221) & 0x320;
                  uint64_t v20 = 0;
                  if (v105 || v1222 == 0)
                  {
                    if (*(_DWORD *)(v15 + 64) == 15)
                    {
LABEL_3393:
                      v1336 = a3;
LABEL_3394:
                      unsigned int i = v12;
                      LODWORD(v12) = 0;
                      a2 = *(unsigned __int8 **)v15;
                      char v1302 = -47;
                      goto LABEL_3333;
                    }
                  }
                  else if (*(_DWORD *)(v15 + 64) != 15)
                  {
                    goto LABEL_3393;
                  }
                }
                continue;
              case 0xD2:
                if (v20) {
                  continue;
                }
                unsigned int v1073 = *(_DWORD *)(v15 + 56);
                unsigned int v1074 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1073 + 1;
                if (v1073 >= v1074) {
                  continue;
                }
                v1075 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1075 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1135 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1075 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1135 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1075 + 1;
                  unsigned int v1076 = *v1075;
                  if (v14 && v1076 >= 0xC0)
                  {
                    if ((v1076 & 0x20) != 0)
                    {
                      int v1156 = v1075[1] & 0x3F;
                      if ((v1076 & 0x10) != 0)
                      {
                        if ((v1076 & 8) != 0)
                        {
                          int v1191 = v1075[2] & 0x3F;
                          int v1192 = v1075[3] & 0x3F;
                          int v1193 = v1075[4] & 0x3F;
                          if ((v1076 & 4) != 0)
                          {
                            unsigned int v1076 = ((v1076 & 1) << 30) | (v1156 << 24) | (v1191 << 18) | (v1192 << 12) | (v1193 << 6) | v1075[5] & 0x3F;
                            v1157 = v1075 + 6;
                          }
                          else
                          {
                            unsigned int v1076 = ((v1076 & 3) << 24) | (v1156 << 18) | (v1191 << 12) | (v1192 << 6) | v1193;
                            v1157 = v1075 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1076 = ((v1076 & 7) << 18) | (v1156 << 12) | ((v1075[2] & 0x3F) << 6) | v1075[3] & 0x3F;
                          v1157 = v1075 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1076 = ((v1076 & 0xF) << 12) | (v1156 << 6) | v1075[2] & 0x3F;
                        v1157 = v1075 + 3;
                      }
                      *(void *)(v15 + 80) = v1157;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1075 + 2;
                      unsigned int v1076 = v1075[1] & 0x3F | ((v1076 & 0x1F) << 6);
                    }
                  }
                  uint64_t v20 = 0;
                  if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                * _pcre2_ucd_stage2_8[v1076 & 0x7F | (_pcre2_ucd_stage1_8[v1076 >> 7] << 7)]
                                                                + 1]] != *(_DWORD *)(v15 + 68)) == (*(_DWORD *)(v15 + 64) == 15))
                  {
                    v1336 = a3;
LABEL_3395:
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = -46;
                    goto LABEL_3333;
                  }
                }
                continue;
              case 0xD3:
                if (v20) {
                  continue;
                }
                unsigned int v1077 = *(_DWORD *)(v15 + 56);
                unsigned int v1078 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1077 + 1;
                if (v1077 >= v1078) {
                  continue;
                }
                v1079 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1079 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1136 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1079 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1136 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1079 + 1;
                  unsigned int v1080 = *v1079;
                  if (v14 && v1080 >= 0xC0)
                  {
                    if ((v1080 & 0x20) != 0)
                    {
                      int v1158 = v1079[1] & 0x3F;
                      if ((v1080 & 0x10) != 0)
                      {
                        if ((v1080 & 8) != 0)
                        {
                          int v1194 = v1079[2] & 0x3F;
                          int v1195 = v1079[3] & 0x3F;
                          int v1196 = v1079[4] & 0x3F;
                          if ((v1080 & 4) != 0)
                          {
                            unsigned int v1080 = ((v1080 & 1) << 30) | (v1158 << 24) | (v1194 << 18) | (v1195 << 12) | (v1196 << 6) | v1079[5] & 0x3F;
                            v1159 = v1079 + 6;
                          }
                          else
                          {
                            unsigned int v1080 = ((v1080 & 3) << 24) | (v1158 << 18) | (v1194 << 12) | (v1195 << 6) | v1196;
                            v1159 = v1079 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1080 = ((v1080 & 7) << 18) | (v1158 << 12) | ((v1079[2] & 0x3F) << 6) | v1079[3] & 0x3F;
                          v1159 = v1079 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1080 = ((v1080 & 0xF) << 12) | (v1158 << 6) | v1079[2] & 0x3F;
                        v1159 = v1079 + 3;
                      }
                      *(void *)(v15 + 80) = v1159;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1079 + 2;
                      unsigned int v1080 = v1079[1] & 0x3F | ((v1080 & 0x1F) << 6);
                    }
                  }
                  uint64_t v20 = 0;
                  if ((*(_DWORD *)(v15 + 68) != _pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v1080 & 0x7F | (_pcre2_ucd_stage1_8[v1080 >> 7] << 7)]
                                                                    + 1]) == (*(_DWORD *)(v15 + 64) == 15))
                  {
                    v1336 = a3;
LABEL_3396:
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = -45;
                    goto LABEL_3333;
                  }
                }
                continue;
              case 0xD4:
                if (v20) {
                  continue;
                }
                unsigned int v1081 = *(_DWORD *)(v15 + 56);
                unsigned int v1082 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1081 + 1;
                if (v1081 >= v1082) {
                  continue;
                }
                v1083 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1083 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1137 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1083 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1137 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1083 + 1;
                  unsigned int v1084 = *v1083;
                  if (v14 && v1084 >= 0xC0)
                  {
                    if ((v1084 & 0x20) != 0)
                    {
                      int v1160 = v1083[1] & 0x3F;
                      if ((v1084 & 0x10) != 0)
                      {
                        if ((v1084 & 8) != 0)
                        {
                          int v1197 = v1083[2] & 0x3F;
                          int v1198 = v1083[3] & 0x3F;
                          int v1199 = v1083[4] & 0x3F;
                          if ((v1084 & 4) != 0)
                          {
                            unsigned int v1084 = ((v1084 & 1) << 30) | (v1160 << 24) | (v1197 << 18) | (v1198 << 12) | (v1199 << 6) | v1083[5] & 0x3F;
                            v1161 = v1083 + 6;
                          }
                          else
                          {
                            unsigned int v1084 = ((v1084 & 3) << 24) | (v1160 << 18) | (v1197 << 12) | (v1198 << 6) | v1199;
                            v1161 = v1083 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1084 = ((v1084 & 7) << 18) | (v1160 << 12) | ((v1083[2] & 0x3F) << 6) | v1083[3] & 0x3F;
                          v1161 = v1083 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1084 = ((v1084 & 0xF) << 12) | (v1160 << 6) | v1083[2] & 0x3F;
                        v1161 = v1083 + 3;
                      }
                      *(void *)(v15 + 80) = v1161;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1083 + 2;
                      unsigned int v1084 = v1083[1] & 0x3F | ((v1084 & 0x1F) << 6);
                    }
                  }
                  uint64_t v20 = 0;
                  if ((*(_DWORD *)(v15 + 68) != _pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v1084 & 0x7F | (_pcre2_ucd_stage1_8[v1084 >> 7] << 7)]]) == (*(_DWORD *)(v15 + 64) == 15))
                  {
                    v1336 = a3;
LABEL_3397:
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = -44;
                    goto LABEL_3333;
                  }
                }
                continue;
              case 0xD5:
                if (v20) {
                  continue;
                }
                unsigned int v1085 = *(_DWORD *)(v15 + 56);
                unsigned int v1086 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1085 + 1;
                if (v1085 >= v1086) {
                  continue;
                }
                v1087 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1087 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1138 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1087 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1138 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1087 + 1;
                  unsigned int v1088 = *v1087;
                  if (v14 && v1088 >= 0xC0)
                  {
                    if ((v1088 & 0x20) != 0)
                    {
                      int v1162 = v1087[1] & 0x3F;
                      if ((v1088 & 0x10) != 0)
                      {
                        if ((v1088 & 8) != 0)
                        {
                          int v1200 = v1087[2] & 0x3F;
                          int v1201 = v1087[3] & 0x3F;
                          int v1202 = v1087[4] & 0x3F;
                          if ((v1088 & 4) != 0)
                          {
                            unsigned int v1088 = ((v1088 & 1) << 30) | (v1162 << 24) | (v1200 << 18) | (v1201 << 12) | (v1202 << 6) | v1087[5] & 0x3F;
                            v1163 = v1087 + 6;
                          }
                          else
                          {
                            unsigned int v1088 = ((v1088 & 3) << 24) | (v1162 << 18) | (v1200 << 12) | (v1201 << 6) | v1202;
                            v1163 = v1087 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1088 = ((v1088 & 7) << 18) | (v1162 << 12) | ((v1087[2] & 0x3F) << 6) | v1087[3] & 0x3F;
                          v1163 = v1087 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1088 = ((v1088 & 0xF) << 12) | (v1162 << 6) | v1087[2] & 0x3F;
                        v1163 = v1087 + 3;
                      }
                      *(void *)(v15 + 80) = v1163;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1087 + 2;
                      unsigned int v1088 = v1087[1] & 0x3F | ((v1088 & 0x1F) << 6);
                    }
                  }
                  uint64_t v20 = 0;
                  if (((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                 * _pcre2_ucd_stage2_8[v1088 & 0x7F | (_pcre2_ucd_stage1_8[v1088 >> 7] << 7)]
                                                                 + 1]] & 0xFFFFFFFD) != 1) == (*(_DWORD *)(v15 + 64) == 15))
                  {
                    v1336 = a3;
LABEL_3398:
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = -43;
                    goto LABEL_3333;
                  }
                }
                continue;
              case 0xD6:
                if (v20) {
                  continue;
                }
                unsigned int v1089 = *(_DWORD *)(v15 + 56);
                unsigned int v1090 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1089 + 1;
                if (v1089 >= v1090) {
                  continue;
                }
                v1091 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1091 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1139 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1091 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1139 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1091 + 1;
                  int v1092 = *v1091;
                  if (v14 && v1092 >= 0xC0)
                  {
                    if ((v1092 & 0x20) != 0)
                    {
                      int v1164 = v1091[1] & 0x3F;
                      if ((v1092 & 0x10) != 0)
                      {
                        if ((v1092 & 8) != 0)
                        {
                          int v1203 = v1091[2] & 0x3F;
                          int v1204 = v1091[3] & 0x3F;
                          int v1205 = v1091[4] & 0x3F;
                          if ((v1092 & 4) != 0)
                          {
                            int v1092 = ((v1092 & 1) << 30) | (v1164 << 24) | (v1203 << 18) | (v1204 << 12) | (v1205 << 6) | v1091[5] & 0x3F;
                            v1165 = v1091 + 6;
                          }
                          else
                          {
                            int v1092 = ((v1092 & 3) << 24) | (v1164 << 18) | (v1203 << 12) | (v1204 << 6) | v1205;
                            v1165 = v1091 + 5;
                          }
                        }
                        else
                        {
                          int v1092 = ((v1092 & 7) << 18) | (v1164 << 12) | ((v1091[2] & 0x3F) << 6) | v1091[3] & 0x3F;
                          v1165 = v1091 + 4;
                        }
                      }
                      else
                      {
                        int v1092 = ((v1092 & 0xF) << 12) | (v1164 << 6) | v1091[2] & 0x3F;
                        v1165 = v1091 + 3;
                      }
                      *(void *)(v15 + 80) = v1165;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1091 + 2;
                      int v1092 = v1091[1] & 0x3F | ((v1092 & 0x1F) << 6);
                    }
                  }
                  if (v1092 < 0x2000)
                  {
                    if (v1092 > 132)
                    {
                      if (v1092 > 5759)
                      {
                        if (v1092 != 5760 && v1092 != 6158)
                        {
LABEL_3082:
                          uint64_t v20 = 0;
                          if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                        * _pcre2_ucd_stage2_8[v1092 & 0x7F | (_pcre2_ucd_stage1_8[v1092 >> 7] << 7)]
                                                                        + 1]] != 6) == (*(_DWORD *)(v15 + 64) == 15))
                            goto LABEL_3399;
                          continue;
                        }
                      }
                      else if (v1092 != 133 && v1092 != 160)
                      {
                        goto LABEL_3082;
                      }
                    }
                    else if (v1092 > 0x20 || ((1 << v1092) & 0x100003E00) == 0)
                    {
                      goto LABEL_3082;
                    }
                  }
                  else if ((v1092 - 0x2000) >= 0xB)
                  {
                    BOOL v1224 = (v1092 - 8232) > 0x37
                         || ((1 << (v1092 - 40)) & 0x80000000000083) == 0;
                    if (v1224 && v1092 != 12288) {
                      goto LABEL_3082;
                    }
                  }
                  uint64_t v20 = 0;
                  if (*(_DWORD *)(v15 + 64) != 15)
                  {
LABEL_3399:
                    v1336 = a3;
LABEL_3400:
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = -42;
                    goto LABEL_3333;
                  }
                }
                continue;
              case 0xD7:
                if (v20) {
                  continue;
                }
                unsigned int v1093 = *(_DWORD *)(v15 + 56);
                unsigned int v1094 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1093 + 1;
                if (v1093 >= v1094) {
                  continue;
                }
                v1095 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1095 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1140 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1095 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1140 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1095 + 1;
                  unsigned int v1096 = *v1095;
                  if (v14 && v1096 >= 0xC0)
                  {
                    if ((v1096 & 0x20) != 0)
                    {
                      int v1166 = v1095[1] & 0x3F;
                      if ((v1096 & 0x10) != 0)
                      {
                        if ((v1096 & 8) != 0)
                        {
                          int v1206 = v1095[2] & 0x3F;
                          int v1207 = v1095[3] & 0x3F;
                          int v1208 = v1095[4] & 0x3F;
                          if ((v1096 & 4) != 0)
                          {
                            unsigned int v1096 = ((v1096 & 1) << 30) | (v1166 << 24) | (v1206 << 18) | (v1207 << 12) | (v1208 << 6) | v1095[5] & 0x3F;
                            v1167 = v1095 + 6;
                          }
                          else
                          {
                            unsigned int v1096 = ((v1096 & 3) << 24) | (v1166 << 18) | (v1206 << 12) | (v1207 << 6) | v1208;
                            v1167 = v1095 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1096 = ((v1096 & 7) << 18) | (v1166 << 12) | ((v1095[2] & 0x3F) << 6) | v1095[3] & 0x3F;
                          v1167 = v1095 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1096 = ((v1096 & 0xF) << 12) | (v1166 << 6) | v1095[2] & 0x3F;
                        v1167 = v1095 + 3;
                      }
                      *(void *)(v15 + 80) = v1167;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1095 + 2;
                      unsigned int v1096 = v1095[1] & 0x3F | ((v1096 & 0x1F) << 6);
                    }
                  }
                  uint64_t v20 = 0;
                  BOOL v1228 = v1096 == 95
                       || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                   * _pcre2_ucd_stage2_8[v1096 & 0x7F | (_pcre2_ucd_stage1_8[v1096 >> 7] << 7)]
                                                                   + 1]] & 0xFFFFFFFD) == 1;
                  if ((((*(_DWORD *)(v15 + 64) != 15) ^ v1228) & 1) == 0)
                  {
                    v1336 = a3;
LABEL_3401:
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = -41;
                    goto LABEL_3333;
                  }
                }
                continue;
              case 0xD8:
                if (v20) {
                  continue;
                }
                unsigned int v1097 = *(_DWORD *)(v15 + 56);
                unsigned int v1098 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1097 + 1;
                if (v1097 >= v1098) {
                  continue;
                }
                v1099 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1099 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1141 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1099 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1141 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1099 + 1;
                  unsigned int v1100 = *v1099;
                  if (v14 && v1100 >= 0xC0)
                  {
                    if ((v1100 & 0x20) != 0)
                    {
                      int v1168 = v1099[1] & 0x3F;
                      if ((v1100 & 0x10) != 0)
                      {
                        if ((v1100 & 8) != 0)
                        {
                          int v1209 = v1099[2] & 0x3F;
                          int v1210 = v1099[3] & 0x3F;
                          int v1211 = v1099[4] & 0x3F;
                          if ((v1100 & 4) != 0)
                          {
                            unsigned int v1100 = ((v1100 & 1) << 30) | (v1168 << 24) | (v1209 << 18) | (v1210 << 12) | (v1211 << 6) | v1099[5] & 0x3F;
                            v1169 = v1099 + 6;
                          }
                          else
                          {
                            unsigned int v1100 = ((v1100 & 3) << 24) | (v1168 << 18) | (v1209 << 12) | (v1210 << 6) | v1211;
                            v1169 = v1099 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1100 = ((v1100 & 7) << 18) | (v1168 << 12) | ((v1099[2] & 0x3F) << 6) | v1099[3] & 0x3F;
                          v1169 = v1099 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1100 = ((v1100 & 0xF) << 12) | (v1168 << 6) | v1099[2] & 0x3F;
                        v1169 = v1099 + 3;
                      }
                      *(void *)(v15 + 80) = v1169;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1099 + 2;
                      unsigned int v1100 = v1099[1] & 0x3F | ((v1100 & 0x1F) << 6);
                    }
                  }
                  v1229 = &_pcre2_ucd_caseless_sets_8[*(unsigned int *)(v15 + 68)];
                  do
                  {
                    unsigned int v1230 = *v1229;
                    if (v1100 < *v1229)
                    {
                      uint64_t v20 = 0;
                      if (*(_DWORD *)(v15 + 64) == 15) {
                        goto LABEL_3402;
                      }
                      goto LABEL_2502;
                    }
                    ++v1229;
                  }
                  while (v1100 != v1230);
                  uint64_t v20 = 0;
                  if (*(_DWORD *)(v15 + 64) != 15)
                  {
LABEL_3402:
                    v1336 = a3;
LABEL_3403:
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = -40;
                    goto LABEL_3333;
                  }
                }
                continue;
              case 0xD9:
                if (v20) {
                  continue;
                }
                unsigned int v1101 = *(_DWORD *)(v15 + 56);
                unsigned int v1102 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1101 + 1;
                if (v1101 >= v1102) {
                  continue;
                }
                v1103 = *(unsigned __int8 **)(v15 + 80);
                if ((unint64_t)v1103 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1142 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1103 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1142 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  *(void *)(v15 + 80) = v1103 + 1;
                  unsigned int v1104 = *v1103;
                  if (v14 && v1104 >= 0xC0)
                  {
                    if ((v1104 & 0x20) != 0)
                    {
                      int v1170 = v1103[1] & 0x3F;
                      if ((v1104 & 0x10) != 0)
                      {
                        if ((v1104 & 8) != 0)
                        {
                          int v1212 = v1103[2] & 0x3F;
                          int v1213 = v1103[3] & 0x3F;
                          int v1214 = v1103[4] & 0x3F;
                          if ((v1104 & 4) != 0)
                          {
                            unsigned int v1104 = ((v1104 & 1) << 30) | (v1170 << 24) | (v1212 << 18) | (v1213 << 12) | (v1214 << 6) | v1103[5] & 0x3F;
                            v1171 = v1103 + 6;
                          }
                          else
                          {
                            unsigned int v1104 = ((v1104 & 3) << 24) | (v1170 << 18) | (v1212 << 12) | (v1213 << 6) | v1214;
                            v1171 = v1103 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1104 = ((v1104 & 7) << 18) | (v1170 << 12) | ((v1103[2] & 0x3F) << 6) | v1103[3] & 0x3F;
                          v1171 = v1103 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1104 = ((v1104 & 0xF) << 12) | (v1170 << 6) | v1103[2] & 0x3F;
                        v1171 = v1103 + 3;
                      }
                      *(void *)(v15 + 80) = v1171;
                    }
                    else
                    {
                      *(void *)(v15 + 80) = v1103 + 2;
                      unsigned int v1104 = v1103[1] & 0x3F | ((v1104 & 0x1F) << 6);
                    }
                  }
                  uint64_t v20 = 0;
                  if (v1104 - 36 > 0x3C || ((1 << (v1104 - 36)) & 0x1000000010000001) == 0)
                  {
                    BOOL v1233 = v1104 >> 13 > 6 || (v1104 - 160) >> 5 < 0x6BB;
                    if (((v1233 ^ (*(_DWORD *)(v15 + 64) != 15)) & 1) == 0)
                    {
LABEL_3404:
                      v1336 = a3;
LABEL_3405:
                      unsigned int i = v12;
                      LODWORD(v12) = 0;
                      a2 = *(unsigned __int8 **)v15;
                      char v1302 = -39;
                      goto LABEL_3333;
                    }
                  }
                  else if (*(_DWORD *)(v15 + 64) != 15)
                  {
                    goto LABEL_3404;
                  }
                }
                continue;
              case 0xDA:
                if (v20) {
                  continue;
                }
                unsigned int v1105 = *(_DWORD *)(v15 + 56);
                unsigned int v1106 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1105 + 1;
                if (v1105 >= v1106) {
                  continue;
                }
                v1107 = *(unsigned __int8 **)(v15 + 80);
                unint64_t v1108 = *v16;
                if ((unint64_t)v1107 < v1108)
                {
                  v1299 = v1107 + 1;
                  *(void *)(v15 + 80) = v1107 + 1;
                  unsigned int v1300 = *v1107;
                  if (v14 && v1300 >= 0xC0)
                  {
                    if ((v1300 & 0x20) != 0)
                    {
                      int v1312 = *v1299 & 0x3F;
                      if ((v1300 & 0x10) != 0)
                      {
                        if ((v1300 & 8) != 0)
                        {
                          int v1317 = v1107[2] & 0x3F;
                          int v1318 = v1107[3] & 0x3F;
                          int v1319 = v1107[4] & 0x3F;
                          if ((v1300 & 4) != 0)
                          {
                            unsigned int v1300 = ((v1300 & 1) << 30) | (v1312 << 24) | (v1317 << 18) | (v1318 << 12) | (v1319 << 6) | v1107[5] & 0x3F;
                            v1299 = v1107 + 6;
                          }
                          else
                          {
                            unsigned int v1300 = ((v1300 & 3) << 24) | (v1312 << 18) | (v1317 << 12) | (v1318 << 6) | v1319;
                            v1299 = v1107 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1300 = ((v1300 & 7) << 18) | (v1312 << 12) | ((v1107[2] & 0x3F) << 6) | v1107[3] & 0x3F;
                          v1299 = v1107 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1300 = ((v1300 & 0xF) << 12) | (v1312 << 6) | v1107[2] & 0x3F;
                        v1299 = v1107 + 3;
                      }
                      *(void *)(v15 + 80) = v1299;
                    }
                    else
                    {
                      v1299 = v1107 + 2;
                      *(void *)(v15 + 80) = v1107 + 2;
                      unsigned int v1300 = v1107[1] & 0x3F | ((v1300 & 0x1F) << 6);
                    }
                  }
                  v1321 = _pcre2_extuni_8(v1300, v1299, *(void *)(v7 + 152), v1108, v1347, 0);
                  *(void *)(v15 + 80) = v1321;
                  v1336 = a3;
                  unsigned int i = v12;
                  if ((unint64_t)v1321 >= *(void *)(v7 + 168))
                  {
                    unsigned int v1322 = (unsigned __int16)*v1350;
                    if (*v1350)
                    {
                      if ((unint64_t)v1321 > *v1348 || *v1345)
                      {
                        _DWORD *v1346 = 1;
                        if (v1322 > 1) {
                          return 4294967294;
                        }
                      }
                    }
                  }
LABEL_3492:
                  LODWORD(v12) = 0;
                  a2 = *(unsigned __int8 **)v15;
                  char v1302 = -38;
                  goto LABEL_3333;
                }
                uint64_t v20 = 0;
                unsigned int v1109 = (unsigned __int16)*v1350;
                uint64_t v16 = v1349;
                if (*v1350)
                {
                  if ((unint64_t)v1107 > *v1348 || (uint64_t v20 = 0, *v1345))
                  {
                    uint64_t v20 = 0;
                    _DWORD *v1346 = 1;
                    if (v1109 > 1) {
                      return 4294967294;
                    }
                  }
                }
                continue;
              case 0xDB:
                if (v20) {
                  continue;
                }
                unsigned int v1110 = *(_DWORD *)(v15 + 56);
                unsigned int v1111 = *(_DWORD *)(v15 + 60);
                *(_DWORD *)(v15 + 56) = v1110 + 1;
                if (v1110 >= v1111) {
                  continue;
                }
                v1112 = *(unsigned __int8 **)(v15 + 80);
                uint64_t v1113 = *v16;
                if ((unint64_t)v1112 >= *v16)
                {
                  uint64_t v20 = 0;
                  unsigned int v1143 = (unsigned __int16)*v1350;
                  if (*v1350)
                  {
                    if ((unint64_t)v1112 > *v1348 || (uint64_t v20 = 0, *v1345))
                    {
                      uint64_t v20 = 0;
                      _DWORD *v1346 = 1;
                      if (v1143 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                }
                else
                {
                  if (*(_DWORD *)(v15 + 64) == 12)
                  {
                    int v1114 = *(_DWORD *)(v7 + 252);
                    if (v1114)
                    {
                      int is_newline_8 = _pcre2_is_newline_8(*(unsigned __int8 **)(v15 + 80), v1114, v1113, v1340, v1347);
                      uint64_t v16 = v1349;
                      int v1116 = is_newline_8;
                      uint64_t v20 = 0;
                      if (v1116) {
                        continue;
                      }
                      v1112 = *(unsigned __int8 **)(v15 + 80);
                    }
                    else
                    {
                      uint64_t v1175 = *v1340;
                      if ((unint64_t)v1112 <= v1113 - v1175 && *v1112 == *(unsigned __int8 *)(v7 + 260))
                      {
                        uint64_t v20 = 0;
                        if (v1175 == 1) {
                          continue;
                        }
                        uint64_t v20 = 0;
                        if (v1112[1] == *(unsigned __int8 *)(v7 + 261)) {
                          continue;
                        }
                      }
                    }
                  }
                  v1176 = v1112 + 1;
                  *(void *)(v15 + 80) = v1112 + 1;
                  int v1177 = *v1112;
                  if (v1177 >= 0xC0)
                  {
                    if ((v1177 & 0x20) != 0)
                    {
                      int v1178 = *v1176 & 0x3F;
                      if ((v1177 & 0x10) != 0)
                      {
                        if ((v1177 & 8) != 0)
                        {
                          int v1218 = v1112[2] & 0x3F;
                          int v1219 = v1112[3] & 0x3F;
                          int v1220 = v1112[4] & 0x3F;
                          if ((v1177 & 4) != 0)
                          {
                            int v1177 = ((v1177 & 1) << 30) | (v1178 << 24) | (v1218 << 18) | (v1219 << 12) | (v1220 << 6) | v1112[5] & 0x3F;
                            v1176 = v1112 + 6;
                          }
                          else
                          {
                            int v1177 = ((v1177 & 3) << 24) | (v1178 << 18) | (v1218 << 12) | (v1219 << 6) | v1220;
                            v1176 = v1112 + 5;
                          }
                        }
                        else
                        {
                          int v1177 = ((v1177 & 7) << 18) | (v1178 << 12) | ((v1112[2] & 0x3F) << 6) | v1112[3] & 0x3F;
                          v1176 = v1112 + 4;
                        }
                      }
                      else
                      {
                        int v1177 = ((v1177 & 0xF) << 12) | (v1178 << 6) | v1112[2] & 0x3F;
                        v1176 = v1112 + 3;
                      }
                      *(void *)(v15 + 80) = v1176;
                    }
                    else
                    {
                      v1176 = v1112 + 2;
                      *(void *)(v15 + 80) = v1112 + 2;
                      int v1177 = v1112[1] & 0x3F | ((v1177 & 0x1F) << 6);
                    }
                  }
                  uint64_t v19 = 4294967252;
                  switch(*(_DWORD *)(v15 + 64))
                  {
                    case 6:
                      if (v1177 > 0xFF) {
                        goto LABEL_3460;
                      }
                      uint64_t v20 = 0;
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v1177) & 8) == 0) {
                        goto LABEL_3460;
                      }
                      continue;
                    case 7:
                      uint64_t v20 = 0;
                      if (v1177 <= 0xFF)
                      {
                        uint64_t v20 = 0;
                        if ((*(unsigned char *)(*(void *)(v7 + 104) + v1177) & 8) != 0) {
                          goto LABEL_3460;
                        }
                      }
                      continue;
                    case 8:
                      if (v1177 > 0xFF) {
                        goto LABEL_3460;
                      }
                      uint64_t v20 = 0;
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v1177) & 1) == 0) {
                        goto LABEL_3460;
                      }
                      continue;
                    case 9:
                      uint64_t v20 = 0;
                      if (v1177 <= 0xFF)
                      {
                        uint64_t v20 = 0;
                        if (*(unsigned char *)(*(void *)(v7 + 104) + v1177)) {
                          goto LABEL_3460;
                        }
                      }
                      continue;
                    case 0xA:
                      if (v1177 > 0xFF) {
                        goto LABEL_3460;
                      }
                      uint64_t v20 = 0;
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v1177) & 0x10) == 0) {
                        goto LABEL_3460;
                      }
                      continue;
                    case 0xB:
                      uint64_t v20 = 0;
                      if (v1177 <= 0xFF)
                      {
                        uint64_t v20 = 0;
                        if ((*(unsigned char *)(*(void *)(v7 + 104) + v1177) & 0x10) != 0) {
                          goto LABEL_3460;
                        }
                      }
                      continue;
                    case 0xC:
                      unsigned int v1320 = (unsigned __int16)*v1350;
                      if (*v1350)
                      {
                        if ((unint64_t)v1176 >= *v16
                          && !*(_DWORD *)(v7 + 252)
                          && *v1340 == 2
                          && v1177 == *(unsigned __int8 *)(v7 + 260))
                        {
                          _DWORD *v1346 = 1;
                          if (v1320 > 1) {
                            return 4294967294;
                          }
                        }
                      }
                      goto LABEL_3460;
                    case 0xD:
                    case 0xE:
                      goto LABEL_3460;
                    case 0x11:
                      uint64_t v20 = 0;
                      if (v1177 > 132)
                      {
                        if ((v1177 - 8232) >= 2 && v1177 != 133) {
                          continue;
                        }
LABEL_3178:
                        uint64_t v20 = 0;
                        if (*(_WORD *)(v7 + 130) != 2) {
                          goto LABEL_3460;
                        }
                        continue;
                      }
                      if ((v1177 - 11) < 2) {
                        goto LABEL_3178;
                      }
                      if (v1177 == 10) {
                        goto LABEL_3460;
                      }
                      if (v1177 == 13)
                      {
                        if ((unint64_t)v1176 < *v16 && *v1176 == 10) {
                          *(void *)(v15 + 80) = v1176 + 1;
                        }
                        goto LABEL_3460;
                      }
                      break;
                    case 0x12:
                      uint64_t v20 = 0;
                      if (v1177 < 0x2000)
                      {
                        if (v1177 <= 159)
                        {
                          if (v1177 != 9 && v1177 != 32) {
                            goto LABEL_3460;
                          }
                        }
                        else if (v1177 != 160 && v1177 != 5760 && v1177 != 6158)
                        {
                          goto LABEL_3460;
                        }
                      }
                      else if (v1177 > 8238)
                      {
                        BOOL v1242 = v1177 == 8239 || v1177 == 8287;
                        if (!v1242 && v1177 != 12288) {
                          goto LABEL_3460;
                        }
                      }
                      else if ((v1177 - 0x2000) >= 0xB)
                      {
                        goto LABEL_3460;
                      }
                      continue;
                    case 0x13:
                      uint64_t v20 = 0;
                      if (v1177 < 0x2000)
                      {
                        if (v1177 <= 159)
                        {
                          if (v1177 == 9 || v1177 == 32) {
                            goto LABEL_3460;
                          }
                        }
                        else if (v1177 == 160 || v1177 == 5760 || v1177 == 6158)
                        {
                          goto LABEL_3460;
                        }
                      }
                      else if (v1177 > 8238)
                      {
                        BOOL v1241 = v1177 == 8239 || v1177 == 8287;
                        if (v1241 || v1177 == 12288) {
                          goto LABEL_3460;
                        }
                      }
                      else if ((v1177 - 0x2000) < 0xB)
                      {
                        goto LABEL_3460;
                      }
                      continue;
                    case 0x14:
                      uint64_t v20 = 0;
                      BOOL v1235 = (v1177 - 10) >= 4 && (v1177 - 8232) >= 2;
                      if (v1235 && v1177 != 133) {
                        goto LABEL_3460;
                      }
                      continue;
                    case 0x15:
                      if ((v1177 - 10) < 4 || (v1177 - 8232) < 2) {
                        goto LABEL_3460;
                      }
                      uint64_t v20 = 0;
                      if (v1177 == 133) {
                        goto LABEL_3460;
                      }
                      continue;
                    default:
                      return v19;
                  }
                }
                continue;
              case 0xDC:
                if (v20) {
                  continue;
                }
                v1255 = *(unsigned __int8 **)(v15 + 80);
                v622 = v1255 - 1;
                *(void *)(v15 + 80) = v1255 - 1;
                unsigned int v1256 = *(v1255 - 1);
                if (!v14) {
                  goto LABEL_3313;
                }
                if ((v1256 & 0xC0) == 0x80)
                {
                  v1257 = v1255 - 2;
                  do
                  {
                    *(void *)(v15 + 80) = v1257;
                    unsigned int v1258 = *v1257--;
                    unsigned int v1256 = v1258;
                  }
                  while ((v1258 & 0xC0) == 0x80);
                  v622 = v1257 + 1;
                }
                if (v1256 < 0xC0) {
                  goto LABEL_3313;
                }
                int v1259 = v622[1] & 0x3F;
                if ((v1256 & 0x20) == 0)
                {
                  unsigned int v1256 = v622[1] & 0x3F | ((v1256 & 0x1F) << 6);
                  goto LABEL_3313;
                }
                if ((v1256 & 0x10) != 0)
                {
                  if ((v1256 & 8) != 0)
                  {
                    int v1269 = v622[2] & 0x3F;
                    int v1270 = v622[3] & 0x3F;
                    int v1271 = v622[4] & 0x3F;
                    if ((v1256 & 4) == 0)
                    {
                      unsigned int v1256 = ((v1256 & 3) << 24) | (v1259 << 18) | (v1269 << 12) | (v1270 << 6) | v1271;
                      goto LABEL_3313;
                    }
                    int v1267 = ((v1256 & 1) << 30) | (v1259 << 24) | (v1269 << 18) | (v1270 << 12) | (v1271 << 6);
                    unsigned __int8 v1268 = v622[5];
                  }
                  else
                  {
                    int v1267 = ((v1256 & 7) << 18) | (v1259 << 12) | ((v622[2] & 0x3F) << 6);
                    unsigned __int8 v1268 = v622[3];
                  }
                }
                else
                {
                  int v1267 = ((v1256 & 0xF) << 12) | (v1259 << 6);
                  unsigned __int8 v1268 = v622[2];
                }
                unsigned int v1256 = v1267 & 0xFFFFFFC0 | v1268 & 0x3F;
LABEL_3313:
                v739 = *(unsigned __int8 **)(v15 + 8);
                if (v622 <= v739) {
                  goto LABEL_2497;
                }
                unsigned __int8 v1272 = _pcre2_ucd_records_8[12
                                           * _pcre2_ucd_stage2_8[v1256 & 0x7F | (_pcre2_ucd_stage1_8[v1256 >> 7] << 7)]
                                           + 2];
                v1273 = v622;
                break;
              case 0xDD:
                if (v20) {
                  continue;
                }
                v995 = (unsigned __int8 *)(*(void *)(v15 + 80) - 1);
                do
                {
                  *(void *)(v15 + 80) = v995;
                  int v1261 = *v995--;
                  int v1260 = v1261;
                }
                while ((v1261 & 0xC0) == 0x80);
                if (*(_DWORD *)(v15 + 64) == 17
                  && (v1260 == 10 ? (BOOL v1262 = (unint64_t)(v995 + 1) > *(void *)(v15 + 8)) : (BOOL v1262 = 0),
                      v1262 && *v995 == 13))
                {
                  *(void *)(v15 + 80) = v995;
                }
                else
                {
                  ++v995;
                }
                goto LABEL_3290;
              case 0xDE:
                if (v20) {
                  continue;
                }
                v1263 = *(unsigned __int8 **)(v15 + 80);
                v737 = v1263 - 1;
                *(void *)(v15 + 80) = v1263 - 1;
                if (v14 && (*v737 & 0xC0) == 0x80)
                {
                  v1264 = v1263 - 2;
                  do
                  {
                    *(void *)(v15 + 80) = v1264;
                    char v1265 = *v1264--;
                  }
                  while ((v1265 & 0xC0) == 0x80);
                  v737 = v1264 + 1;
                }
                goto LABEL_1667;
              default:
                if (v1004 == 100)
                {
                  if (!v20)
                  {
                    unsigned int v1117 = *(_DWORD *)(v15 + 56);
                    unsigned int v1118 = *(_DWORD *)(v15 + 60);
                    *(_DWORD *)(v15 + 56) = v1117 + 1;
                    if (v1117 < v1118)
                    {
                      v1119 = *(unsigned __int8 **)(v15 + 80);
                      if ((unint64_t)v1119 >= *v16)
                      {
                        uint64_t v20 = 0;
                        unsigned int v1144 = (unsigned __int16)*v1350;
                        if (*v1350)
                        {
                          if ((unint64_t)v1119 > *v1348 || (uint64_t v20 = 0, *v1345))
                          {
                            uint64_t v20 = 0;
                            _DWORD *v1346 = 1;
                            if (v1144 > 1) {
                              return 4294967294;
                            }
                          }
                        }
                      }
                      else
                      {
                        *(void *)(v15 + 80) = v1119 + 1;
                        unsigned int v1120 = *v1119;
                        if (v14 && v1120 >= 0xC0)
                        {
                          if ((v1120 & 0x20) != 0)
                          {
                            int v1172 = v1119[1] & 0x3F;
                            if ((v1120 & 0x10) != 0)
                            {
                              if ((v1120 & 8) != 0)
                              {
                                int v1215 = v1119[2] & 0x3F;
                                int v1216 = v1119[3] & 0x3F;
                                int v1217 = v1119[4] & 0x3F;
                                if ((v1120 & 4) != 0)
                                {
                                  unsigned int v1120 = ((v1120 & 1) << 30) | (v1172 << 24) | (v1215 << 18) | (v1216 << 12) | (v1217 << 6) | v1119[5] & 0x3F;
                                  v1173 = v1119 + 6;
                                }
                                else
                                {
                                  unsigned int v1120 = ((v1120 & 3) << 24) | (v1172 << 18) | (v1215 << 12) | (v1216 << 6) | v1217;
                                  v1173 = v1119 + 5;
                                }
                              }
                              else
                              {
                                unsigned int v1120 = ((v1120 & 7) << 18) | (v1172 << 12) | ((v1119[2] & 0x3F) << 6) | v1119[3] & 0x3F;
                                v1173 = v1119 + 4;
                              }
                            }
                            else
                            {
                              unsigned int v1120 = ((v1120 & 0xF) << 12) | (v1172 << 6) | v1119[2] & 0x3F;
                              v1173 = v1119 + 3;
                            }
                            *(void *)(v15 + 80) = v1173;
                          }
                          else
                          {
                            *(void *)(v15 + 80) = v1119 + 2;
                            unsigned int v1120 = v1119[1] & 0x3F | ((v1120 & 0x1F) << 6);
                          }
                        }
                        BOOL v1234 = _pcre2_xclass_8(v1120, *(unsigned char **)(v15 + 16));
                        uint64_t v20 = 0;
                        uint64_t v16 = v1349;
                        if (v1234)
                        {
                          v1336 = a3;
                          unsigned int i = v12;
                          goto LABEL_3406;
                        }
                      }
                    }
                  }
                }
                else
                {
                  if (v1004 != 101) {
                    return v19;
                  }
                  if (!v20)
                  {
                    v1009 = *(unsigned __int8 **)(v15 + 80);
                    *(void *)(v15 + 80) = v1009 - 1;
                    if ((unint64_t)v1009 > *(void *)(v15 + 8))
                    {
                      unsigned int i = v12;
                      v1336 = a3;
                      if (v14 && (*(v1009 - 1) & 0xC0) == 0x80)
                      {
                        v1292 = v1009 - 2;
                        do
                        {
                          *(void *)(v15 + 80) = v1292;
                          char v1293 = *v1292--;
                        }
                        while ((v1293 & 0xC0) == 0x80);
                      }
                      goto LABEL_3348;
                    }
                  }
                }
                continue;
            }
            while (2)
            {
              if (v14)
              {
                do
                {
                  unsigned int v1275 = *--v1273;
                  unsigned int v1274 = v1275;
                }
                while ((v1275 & 0xC0) == 0x80);
                if (v1274 >= 0xC0)
                {
                  int v1276 = v1273[1] & 0x3F;
                  if ((v1274 & 0x20) == 0)
                  {
                    unsigned int v1274 = v1273[1] & 0x3F | ((v1274 & 0x1F) << 6);
                    goto LABEL_3321;
                  }
                  if ((v1274 & 0x10) == 0)
                  {
                    int v1278 = ((v1274 & 0xF) << 12) | (v1276 << 6);
                    unsigned __int8 v1279 = v1273[2];
                    goto LABEL_3331;
                  }
                  if ((v1274 & 8) == 0)
                  {
                    int v1278 = ((v1274 & 7) << 18) | (v1276 << 12) | ((v1273[2] & 0x3F) << 6);
                    unsigned __int8 v1279 = v1273[3];
                    goto LABEL_3331;
                  }
                  int v1280 = v1273[2] & 0x3F;
                  int v1281 = v1273[3] & 0x3F;
                  int v1282 = v1273[4] & 0x3F;
                  if ((v1274 & 4) != 0)
                  {
                    int v1278 = ((v1274 & 1) << 30) | (v1276 << 24) | (v1280 << 18) | (v1281 << 12) | (v1282 << 6);
                    unsigned __int8 v1279 = v1273[5];
LABEL_3331:
                    unsigned int v1274 = v1278 & 0xFFFFFFC0 | v1279 & 0x3F;
                  }
                  else
                  {
                    unsigned int v1274 = ((v1274 & 3) << 24) | (v1276 << 18) | (v1280 << 12) | (v1281 << 6) | v1282;
                  }
                }
              }
              else
              {
                v1273 = v622 - 1;
                unsigned int v1274 = *(v622 - 1);
              }
LABEL_3321:
              int v1277 = _pcre2_ucd_records_8[12
                                         * _pcre2_ucd_stage2_8[v1274 & 0x7F | (_pcre2_ucd_stage1_8[v1274 >> 7] << 7)]
                                         + 2];
              if (((_pcre2_ucp_gbtable_8[v1277] >> v1272) & 1) == 0) {
                goto LABEL_2497;
              }
              *(void *)(v15 + 80) = v1273;
              unsigned __int8 v1272 = v1277;
              v622 = v1273;
              if (v1273 <= v739)
              {
                v622 = v1273;
                goto LABEL_2497;
              }
              continue;
            }
          }
          break;
        }
        switch(*(unsigned char *)(v15 + 72))
        {
          case 1:
            if (v20) {
              continue;
            }
            a2 = *(unsigned __int8 **)(v15 + 8);
            *(void *)uint64_t v15 = a2;
            goto LABEL_3230;
          case 2:
            if (v20 == -993)
            {
              v1010 = *(unsigned __int8 **)v15;
              uint64_t v1011 = __rev16(*(unsigned __int16 *)(*(void *)v15 + 1));
              v1123 = (unsigned __int8 *)(*(void *)v15 + v1011);
              if (*(void *)(v7 + 216) >= (unint64_t)v1123) {
                continue;
              }
              if (*v1010 != 120)
              {
                uint64_t v20 = 4294966303;
                if (*v1123 != 120) {
                  continue;
                }
              }
            }
            else
            {
              if (v20) {
                continue;
              }
              v1010 = *(unsigned __int8 **)v15;
              uint64_t v1011 = __rev16(*(unsigned __int16 *)(*(void *)v15 + 1));
            }
            uint64_t v20 = 0;
            a2 = &v1010[v1011];
            *(void *)uint64_t v15 = &v1010[v1011];
            if (v1010[v1011] == 120)
            {
              v1336 = a3;
              unsigned int i = v12;
              LODWORD(v12) = *(_DWORD *)(v15 + 56);
LABEL_3385:
              a2 += _pcre2_OP_lengths_8[*a2];
              char v1302 = 2;
              goto LABEL_3333;
            }
            continue;
          case 3:
            if (v20 == -993 || !v20)
            {
              uint64_t v20 = 0;
              v1121 = *(unsigned __int8 **)v15;
              uint64_t v1122 = __rev16(*(unsigned __int16 *)(*(void *)v15 + 1));
              a2 = (unsigned __int8 *)(*(void *)v15 + v1122);
              *(void *)uint64_t v15 = a2;
              if (v1121[v1122] == 120)
              {
                v1336 = a3;
                unsigned int i = v12;
                LODWORD(v12) = *(_DWORD *)(v15 + 56);
                uint64_t v1291 = 0x78u;
LABEL_3357:
                a2 += _pcre2_OP_lengths_8[v1291];
                char v1302 = 3;
                goto LABEL_3333;
              }
            }
            else if (v20 == -999)
            {
              memcpy((void *)(v15 + 128), v1339 + 16, 8 * v1339[15]);
              *(void *)(v15 + 120) = v1339[15];
              *(void *)(v15 + 96) = v1339[12];
              v1266 = *(unsigned __int8 **)v15;
              do
              {
                v1266 += __rev16(*(unsigned __int16 *)(v1266 + 1));
                *(void *)uint64_t v15 = v1266;
              }
              while (*v1266 == 120);
              unint64_t v110 = v1266 + 3;
              goto LABEL_3299;
            }
            continue;
          case 4:
            if ((int)v20 <= -994)
            {
              if (v20 == -999) {
                goto LABEL_1141;
              }
              if ((v20 + 997) < 3)
              {
                a2 = *(unsigned __int8 **)v15;
                do
                {
                  a2 += __rev16(*(unsigned __int16 *)(a2 + 1));
                  *(void *)uint64_t v15 = a2;
                }
                while (*a2 == 120);
                goto LABEL_2501;
              }
              continue;
            }
            if (v20 == 1) {
              goto LABEL_1141;
            }
            if (v20 != -993 && v20) {
              continue;
            }
            a2 = (unsigned __int8 *)(*(void *)v15 + __rev16(*(unsigned __int16 *)(*(void *)v15 + 1)));
            *(void *)uint64_t v15 = a2;
            if (*a2 != 120) {
              goto LABEL_2501;
            }
            v1336 = a3;
            unsigned int i = v12;
            LODWORD(v12) = *(_DWORD *)(v15 + 56);
            uint64_t v1316 = 0x78u;
LABEL_3377:
            a2 += _pcre2_OP_lengths_8[v1316];
            char v1302 = 4;
LABEL_3333:
            *(unsigned char *)(v15 + 72) = v1302;
            if ((unint64_t)&v8[v15] < *(void *)(v7 + 40))
            {
              v1283 = &v8[v15];
              goto LABEL_3342;
            }
            unint64_t v1284 = *(void *)(v7 + 24);
            unint64_t v1285 = 2 * v1284;
            unint64_t v1286 = *(void *)(v7 + 56);
            if (v1286 < (2 * v1284) >> 10)
            {
              unint64_t v1285 = (v1286 << 10) / (unint64_t)v8 * (void)v8;
              if (v1284 >= v1285) {
                return 4294967233;
              }
            }
            v1287 = (char *)(*(uint64_t (**)(unint64_t, void))v7)(v1285, *(void *)(v7 + 16));
            if (!v1287) {
              return 4294967248;
            }
            v1288 = v1287;
            unsigned int v1335 = v13;
            v1289 = v8;
            memcpy(v1287, *(const void **)(v7 + 32), *(void *)(v7 + 24));
            uint64_t v1290 = *(void *)(v7 + 32);
            if (v1290 != *(void *)(v7 + 48)) {
              (*(void (**)(void, void))(v7 + 8))(*(void *)(v7 + 32), *(void *)(v7 + 16));
            }
            *(void *)(v7 + 32) = v1288;
            *(void *)(v7 + 40) = &v1288[v1285];
            uint64_t v15 = (uint64_t)&v1288[v15 - v1290];
            unsigned int v8 = v1289;
            v1283 = &v1289[v15];
            *(void *)(v7 + 24) = v1285;
            unsigned int v13 = v1335;
LABEL_3342:
            memcpy(v1283 + 80, (const void *)(v15 + 80), __n);
            unsigned int v11 = *(_DWORD *)(v15 + 48) + 1;
            *((_DWORD *)v1283 + 12) = v11;
            v1343 = v1283;
            uint64_t v15 = (uint64_t)v1283;
            uint64_t v16 = v1349;
            a3 = v1336;
            break;
          case 5:
            if ((int)v20 > -994)
            {
              if (v20 == -993 || !v20)
              {
                v1243 = *(unsigned __int8 **)(v15 + 8);
                uint64_t v1244 = __rev16(*(unsigned __int16 *)(v1243 + 1));
                BOOL v112 = &v1243[v1244];
                *(void *)(v15 + 8) = &v1243[v1244];
                if (v1243[v1244] != 120)
                {
LABEL_3226:
                  if (*(_DWORD *)(v15 + 56)) {
                    goto LABEL_3294;
                  }
                  goto LABEL_3227;
                }
                v1336 = a3;
                unsigned int i = v12;
                unsigned int v1310 = **(unsigned __int8 **)v15;
                unsigned int v1311 = 0x78u;
LABEL_3477:
                LODWORD(v12) = v1310 | 0x30000;
                a2 = &v112[_pcre2_OP_lengths_8[v1311]];
                char v1302 = 5;
                goto LABEL_3333;
              }
              if (v20 == 1) {
                goto LABEL_3293;
              }
            }
            else
            {
              if ((v20 + 997) < 3) {
                goto LABEL_3226;
              }
              if (v20 == -999)
              {
                memcpy((void *)(v15 + 128), v1339 + 16, 8 * v1339[15]);
                uint64_t v16 = v1349;
                *(void *)(v15 + 120) = v1339[15];
LABEL_3293:
                if (!*(_DWORD *)(v15 + 56))
                {
LABEL_3294:
                  int64_t v111 = *(void *)(v15 + 24);
                  BOOL v112 = *(unsigned __int8 **)v15;
                  goto LABEL_2495;
                }
LABEL_3227:
                BOOL v112 = *(unsigned __int8 **)v15;
                do
                {
                  v112 += __rev16(*(unsigned __int16 *)(v112 + 1));
                  *(void *)uint64_t v15 = v112;
                  int v113 = *v112;
                }
                while (v113 == 120);
LABEL_3229:
                int64_t v111 = _pcre2_OP_lengths_8[v113];
LABEL_2495:
                a2 = &v112[v111];
                *(void *)uint64_t v15 = &v112[v111];
                if (*(unsigned __int8 *)(v15 + 73) == 143)
                {
                  v1336 = a3;
                  unsigned int i = v12;
                  LODWORD(v12) = 131215;
                  char v1302 = 35;
                  goto LABEL_3333;
                }
LABEL_2500:
                a2 = *(unsigned __int8 **)v15;
                goto LABEL_8;
              }
            }
            continue;
          case 6:
            if (v20) {
              continue;
            }
            uint64_t v228 = *(void *)v15 - __rev16(*(unsigned __int16 *)(*(void *)v15 + 1));
            goto LABEL_2499;
          case 7:
            if (v20) {
              continue;
            }
            v230 = *(unsigned __int8 **)v15;
            goto LABEL_3304;
          case 8:
            switch(v20)
            {
              case 0xFFFFFC1F:
                v1124 = *(unsigned __int8 **)v15;
                uint64_t v1125 = __rev16(*(unsigned __int16 *)(*(void *)v15 + 1));
                v1126 = (unsigned __int8 *)(*(void *)v15 + v1125);
                if (*(void *)(v7 + 216) >= (unint64_t)v1126) {
                  continue;
                }
                if (*v1124 != 120)
                {
                  uint64_t v20 = 4294966303;
                  if (*v1126 != 120) {
                    continue;
                  }
                }
                goto LABEL_2789;
              case 0:
                v1124 = *(unsigned __int8 **)v15;
                uint64_t v1125 = __rev16(*(unsigned __int16 *)(*(void *)v15 + 1));
LABEL_2789:
                v1127 = &v1124[v1125];
                *(void *)uint64_t v15 = &v1124[v1125];
                if (v1124[v1125] == 120)
                {
                  v1336 = a3;
                  unsigned int i = v12;
LABEL_3436:
                  *(void *)(v15 + 8) = *(void *)(v15 + 80);
                  LODWORD(v12) = *(_DWORD *)(v15 + 56);
                  a2 = &v1127[_pcre2_OP_lengths_8[*v1127]];
                  char v1302 = 8;
                  goto LABEL_3333;
                }
                if (*(_DWORD *)(v15 + 60) || (uint64_t v20 = 0, *(_DWORD *)(v15 + 64)))
                {
                  v230 = &v1124[v1125];
                  goto LABEL_3304;
                }
                continue;
              case 0xFFFFFC1A:
                *(_DWORD *)(v15 + 60) = 1;
                if (*(void *)(v15 + 80) != *(void *)(v15 + 8))
                {
                  v1336 = a3;
                  unsigned int i = v12;
                  v1127 = *(unsigned __int8 **)(v15 + 16);
                  *(void *)uint64_t v15 = v1127;
                  goto LABEL_3436;
                }
                v230 = *(unsigned __int8 **)v15;
                do
                {
                  v230 += __rev16(*(unsigned __int16 *)(v230 + 1));
                  *(void *)uint64_t v15 = v230;
                }
                while (*v230 == 120);
LABEL_3304:
                uint64_t v228 = (uint64_t)(v230 + 3);
LABEL_2499:
                *(void *)uint64_t v15 = v228;
                goto LABEL_2500;
            }
            continue;
          case 9:
            if (v20) {
              continue;
            }
            v230 = *(unsigned __int8 **)(v15 + 8);
            do
            {
              v230 += __rev16(*(unsigned __int16 *)(v230 + 1));
              *(void *)(v15 + 8) = v230;
            }
            while (*v230 == 120);
            goto LABEL_3304;
          case 0xA:
            if (!v20) {
              goto LABEL_1187;
            }
            continue;
          case 0xB:
            v1012 = *(unsigned __int8 **)(v15 + 8);
            v1013 = &v1012[__rev16(*(unsigned __int16 *)(v1012 + 1))];
            if ((v20 + 997) >= 5)
            {
              if (v20) {
                continue;
              }
            }
            else
            {
              if (*(_DWORD *)(v7 + 232) != (*(_DWORD *)(v15 + 56) ^ 0x40000)) {
                continue;
              }
              BOOL v53 = v20 == -993;
              uint64_t v20 = 0;
              if (!v53) {
                continue;
              }
              uint64_t v20 = 0;
              if (*(void *)(v7 + 216) >= (unint64_t)v1013) {
                continue;
              }
              if (*v1012 != 120)
              {
                uint64_t v20 = 0;
                if (*v1013 != 120) {
                  continue;
                }
              }
            }
            uint64_t v20 = 0;
            *(void *)(v15 + 8) = v1013;
            if (*v1013 == 120)
            {
              v1336 = a3;
              unsigned int i = v12;
              LODWORD(v12) = *(_DWORD *)(v15 + 56);
              uint64_t v1298 = 0x78u;
LABEL_3425:
              a2 = &v1013[_pcre2_OP_lengths_8[v1298]];
              char v1302 = 11;
              goto LABEL_3333;
            }
            continue;
          case 0xC:
            if (v20 == -994)
            {
              int v1014 = _pcre2_strcmp_8((unsigned __int8 *)(*(void *)v15 + 2), *(unsigned __int8 **)(v7 + 224));
              uint64_t v16 = v1349;
              int v1015 = v1014;
              uint64_t v20 = 4294966302;
              if (!v1015)
              {
                *(void *)(v7 + 224) = *(void *)(v15 + 80);
                uint64_t v20 = 4294966301;
              }
            }
            continue;
          case 0xD:
            if (!v20)
            {
              *(_DWORD *)(v7 + 232) = *(_DWORD *)(v15 + 104);
              uint64_t v20 = 4294966299;
            }
            continue;
          case 0xE:
          case 0xF:
            if (!v20)
            {
              *(_DWORD *)(v7 + 232) = *(_DWORD *)(v15 + 104);
              uint64_t v20 = 4294966300;
            }
            continue;
          case 0x10:
            if (!v20)
            {
              *(void *)(v7 + 224) = *(void *)(v15 + 80);
              *(_DWORD *)(v7 + 232) = *(_DWORD *)(v15 + 104);
              uint64_t v20 = 4294966301;
            }
            continue;
          case 0x11:
            if (!v20)
            {
              *(void *)(v7 + 224) = *(void *)v15 + 2;
              *(_DWORD *)(v7 + 232) = *(_DWORD *)(v15 + 104);
              uint64_t v20 = 4294966302;
            }
            continue;
          case 0x12:
          case 0x13:
            if (!v20)
            {
              *(void *)(v7 + 216) = *(void *)v15;
              *(_DWORD *)(v7 + 232) = *(_DWORD *)(v15 + 104);
              uint64_t v20 = 4294966303;
            }
            continue;
          case 0x14:
            if (v20) {
              continue;
            }
            unsigned int v1016 = *(_DWORD *)(v15 + 56);
            unsigned int v1017 = *(_DWORD *)(v15 + 60);
            *(_DWORD *)(v15 + 56) = v1016 + 1;
            if (v1016 >= v1017) {
              continue;
            }
            int matched = match_ref(*(void *)(v15 + 40), *(_DWORD *)(v15 + 64), v15, v7, &v1353);
            if (!matched)
            {
              v1336 = a3;
              unsigned int i = v12;
              *(void *)(v15 + 80) += v1353;
              goto LABEL_3365;
            }
            if (matched <= 0)
            {
              v1019 = *(unsigned __int8 **)(v15 + 80);
              uint64_t v16 = v1349;
            }
            else
            {
              uint64_t v16 = v1349;
              v1019 = (unsigned __int8 *)*v1349;
              *(void *)(v15 + 80) = *v1349;
            }
            uint64_t v20 = 0;
            if ((unint64_t)v1019 >= *v16)
            {
              uint64_t v20 = 0;
              unsigned int v1145 = (unsigned __int16)*v1350;
              if (*v1350)
              {
                if ((unint64_t)v1019 > *v1348 || (uint64_t v20 = 0, *v1345))
                {
                  uint64_t v20 = 0;
                  _DWORD *v1346 = 1;
                  if (v1145 > 1) {
                    return 4294967294;
                  }
                }
              }
            }
            continue;
          case 0x15:
            if (v20) {
              continue;
            }
            v548 = (unsigned __int8 *)(*(void *)(v15 + 80) - *(void *)(v15 + 24));
            *(void *)(v15 + 80) = v548;
            goto LABEL_3234;
          case 0x16:
            if (v20) {
              continue;
            }
            v1020 = *(unsigned __int8 **)(v15 + 8);
            if (*(unsigned __int8 **)(v15 + 80) == v1020) {
              continue;
            }
            *(void *)(v15 + 80) = v1020;
            unsigned int v1294 = *(_DWORD *)(v15 + 56);
            int v1295 = *(_DWORD *)(v15 + 60) - 1;
            *(_DWORD *)(v15 + 60) = v1295;
            v1336 = a3;
            for (unsigned int i = v12; v1294 < *(_DWORD *)(v15 + 60); ++v1294)
            {
              v1354 = 0;
              match_ref(*(void *)(v15 + 40), *(_DWORD *)(v15 + 64), v15, v7, &v1354);
              *(void *)(v15 + 80) += v1354;
            }
            goto LABEL_3351;
          case 0x17:
            if (v20) {
              continue;
            }
            unsigned int v1021 = *(_DWORD *)(v15 + 56);
            unsigned int v1022 = *(_DWORD *)(v15 + 60);
            *(_DWORD *)(v15 + 56) = v1021 + 1;
            if (v1021 >= v1022) {
              continue;
            }
            v1023 = *(unsigned __int8 **)(v15 + 80);
            if ((unint64_t)v1023 >= *v16) {
              goto LABEL_2793;
            }
            uint64_t v20 = 0;
            *(void *)(v15 + 80) = v1023 + 1;
            if (((*(unsigned __int8 *)(*(void *)(v15 + 16) + ((unint64_t)*v1023 >> 3)) >> (*v1023 & 7)) & 1) == 0) {
              continue;
            }
            v1336 = a3;
            unsigned int i = v12;
            unint64_t v80 = *(unsigned __int8 **)v15;
            goto LABEL_3386;
          case 0x18:
            if (v20) {
              continue;
            }
            v465 = (unsigned __int8 *)(*(void *)(v15 + 80) - 1);
            *(void *)(v15 + 80) = v465;
            v316 = *(unsigned __int8 **)(v15 + 8);
            goto LABEL_3236;
          case 0x19:
            if (v20) {
              continue;
            }
            unsigned int v1024 = *(_DWORD *)(v15 + 56);
            unsigned int v1025 = *(_DWORD *)(v15 + 60);
            *(_DWORD *)(v15 + 56) = v1024 + 1;
            if (v1024 >= v1025) {
              continue;
            }
            v1026 = *(unsigned __int8 **)(v15 + 80);
            if ((unint64_t)v1026 >= *v16) {
              goto LABEL_2798;
            }
            int v1027 = *v1026;
            if (*(_DWORD *)(v15 + 64) != v1027)
            {
              uint64_t v20 = 0;
              if (*(_DWORD *)(v15 + 68) != v1027) {
                continue;
              }
            }
            v1336 = a3;
            unsigned int i = v12;
            LODWORD(v12) = 0;
            *(void *)(v15 + 80) = v1026 + 1;
            a2 = *(unsigned __int8 **)v15;
            goto LABEL_3375;
          case 0x1A:
            uint64_t v55 = (unsigned __int8 *)(*(void *)(v15 + 80) - 1);
            *(void *)(v15 + 80) = v55;
            if (v20) {
              continue;
            }
            unsigned __int32 v54 = *(unsigned __int8 **)(v15 + 8);
            goto LABEL_3238;
          case 0x1B:
            if (v20) {
              continue;
            }
            unsigned int v1028 = *(_DWORD *)(v15 + 56);
            unsigned int v1029 = *(_DWORD *)(v15 + 60);
            *(_DWORD *)(v15 + 56) = v1028 + 1;
            if (v1028 >= v1029) {
              continue;
            }
            v1023 = *(unsigned __int8 **)(v15 + 80);
            if ((unint64_t)v1023 >= *v16) {
              goto LABEL_2793;
            }
            uint64_t v20 = 0;
            int v1030 = *(_DWORD *)(v15 + 64);
            *(void *)(v15 + 80) = v1023 + 1;
            if (v1030 != *v1023) {
              continue;
            }
            v1336 = a3;
            unsigned int i = v12;
            LODWORD(v12) = 0;
            a2 = *(unsigned __int8 **)v15;
            goto LABEL_3388;
          case 0x1C:
            uint64_t v42 = (unsigned __int8 *)(*(void *)(v15 + 80) - 1);
            *(void *)(v15 + 80) = v42;
            if (v20) {
              continue;
            }
            uint64_t v41 = *(unsigned __int8 **)(v15 + 8);
            goto LABEL_3240;
          case 0x1D:
            if (v20) {
              continue;
            }
            unsigned int v1031 = *(_DWORD *)(v15 + 56);
            unsigned int v1032 = *(_DWORD *)(v15 + 60);
            *(_DWORD *)(v15 + 56) = v1031 + 1;
            if (v1031 >= v1032) {
              continue;
            }
            v1026 = *(unsigned __int8 **)(v15 + 80);
            if ((unint64_t)v1026 >= *v16) {
              goto LABEL_2798;
            }
            uint64_t v20 = 0;
            int v1033 = *v1026;
            if (*(_DWORD *)(v15 + 64) == v1033) {
              continue;
            }
            uint64_t v20 = 0;
            if (*(_DWORD *)(v15 + 68) == v1033) {
              continue;
            }
            v1336 = a3;
            unsigned int i = v12;
            *(void *)(v15 + 80) = v1026 + 1;
            a2 = *(unsigned __int8 **)v15;
            goto LABEL_3447;
          case 0x1E:
            if (v20) {
              continue;
            }
            v275 = (unsigned __int8 *)(*(void *)(v15 + 80) - 1);
            *(void *)(v15 + 80) = v275;
            v274 = *(unsigned __int8 **)(v15 + 8);
            goto LABEL_3242;
          case 0x1F:
            if (v20) {
              continue;
            }
            unsigned int v1034 = *(_DWORD *)(v15 + 56);
            unsigned int v1035 = *(_DWORD *)(v15 + 60);
            *(_DWORD *)(v15 + 56) = v1034 + 1;
            if (v1034 >= v1035) {
              continue;
            }
            v1023 = *(unsigned __int8 **)(v15 + 80);
            if ((unint64_t)v1023 >= *v16)
            {
LABEL_2793:
              uint64_t v20 = 0;
              unsigned int v1128 = (unsigned __int16)*v1350;
              if (*v1350)
              {
                if ((unint64_t)v1023 > *v1348 || (uint64_t v20 = 0, *v1345))
                {
                  uint64_t v20 = 0;
                  _DWORD *v1346 = 1;
                  if (v1128 > 1) {
                    return 4294967294;
                  }
                }
              }
            }
            else
            {
              uint64_t v20 = 0;
              int v1036 = *(_DWORD *)(v15 + 64);
              *(void *)(v15 + 80) = v1023 + 1;
              if (v1036 != *v1023)
              {
                v1336 = a3;
                unsigned int i = v12;
                a2 = *(unsigned __int8 **)v15;
                goto LABEL_3389;
              }
            }
            continue;
          case 0x20:
            if (v20) {
              continue;
            }
            v258 = (unsigned __int8 *)(*(void *)(v15 + 80) - 1);
            *(void *)(v15 + 80) = v258;
            v257 = *(unsigned __int8 **)(v15 + 8);
            goto LABEL_3244;
          case 0x21:
            if (v20) {
              continue;
            }
            unsigned int v1037 = *(_DWORD *)(v15 + 56);
            unsigned int v1038 = *(_DWORD *)(v15 + 60);
            *(_DWORD *)(v15 + 56) = v1037 + 1;
            if (v1037 >= v1038) {
              continue;
            }
            v1026 = *(unsigned __int8 **)(v15 + 80);
            uint64_t v1039 = *v16;
            if ((unint64_t)v1026 >= *v16)
            {
LABEL_2798:
              uint64_t v20 = 0;
              unsigned int v1129 = (unsigned __int16)*v1350;
              if (*v1350)
              {
                if ((unint64_t)v1026 > *v1348 || (uint64_t v20 = 0, *v1345))
                {
                  uint64_t v20 = 0;
                  _DWORD *v1346 = 1;
                  if (v1129 > 1) {
                    return 4294967294;
                  }
                }
              }
              continue;
            }
            int v1040 = *(_DWORD *)(v15 + 64);
            if (v1040 != 12) {
              goto LABEL_2625;
            }
            int v1041 = *(_DWORD *)(v7 + 252);
            if (v1041)
            {
              int v1042 = _pcre2_is_newline_8(*(unsigned __int8 **)(v15 + 80), v1041, v1039, v1340, v1347);
              uint64_t v16 = v1349;
              int v1043 = v1042;
              uint64_t v20 = 0;
              if (v1043) {
                continue;
              }
              int v1040 = *(_DWORD *)(v15 + 64);
              v1026 = *(unsigned __int8 **)(v15 + 80);
LABEL_2625:
              *(void *)(v15 + 80) = v1026 + 1;
              uint64_t v19 = 4294967252;
              int v1044 = v1040 - 6;
              uint64_t v1045 = *v1026;
              switch(v1044)
              {
                case 0:
                  uint64_t v20 = 0;
                  if ((*(unsigned char *)(*(void *)(v7 + 104) + v1045) & 8) == 0) {
                    goto LABEL_3498;
                  }
                  continue;
                case 1:
                  uint64_t v20 = 0;
                  if ((*(unsigned char *)(*(void *)(v7 + 104) + v1045) & 8) != 0) {
                    goto LABEL_3498;
                  }
                  continue;
                case 2:
                  uint64_t v20 = 0;
                  if ((*(unsigned char *)(*(void *)(v7 + 104) + v1045) & 1) == 0) {
                    goto LABEL_3498;
                  }
                  continue;
                case 3:
                  uint64_t v20 = 0;
                  if (*(unsigned char *)(*(void *)(v7 + 104) + v1045)) {
                    goto LABEL_3498;
                  }
                  continue;
                case 4:
                  uint64_t v20 = 0;
                  if ((*(unsigned char *)(*(void *)(v7 + 104) + v1045) & 0x10) == 0) {
                    goto LABEL_3498;
                  }
                  continue;
                case 5:
                  uint64_t v20 = 0;
                  if ((*(unsigned char *)(*(void *)(v7 + 104) + v1045) & 0x10) != 0) {
                    goto LABEL_3498;
                  }
                  continue;
                case 6:
                  v1313 = v1026 + 1;
                  goto LABEL_3452;
                case 7:
                case 8:
                  goto LABEL_3498;
                case 11:
                  uint64_t v20 = 0;
                  if (*v1026 <= 0xCu)
                  {
                    if ((v1045 - 11) >= 2)
                    {
                      if (v1045 == 10) {
                        goto LABEL_3498;
                      }
                      continue;
                    }
LABEL_3191:
                    uint64_t v20 = 0;
                    if (*(_WORD *)(v7 + 130) != 2) {
                      goto LABEL_3498;
                    }
                    continue;
                  }
                  if (v1045 == 133) {
                    goto LABEL_3191;
                  }
                  if (v1045 == 13)
                  {
                    if ((unint64_t)(v1026 + 1) < *v16 && v1026[1] == 10) {
                      *(void *)(v15 + 80) = v1026 + 2;
                    }
                    goto LABEL_3498;
                  }
                  break;
                case 12:
                  uint64_t v20 = 0;
                  if (v1045 != 9 && v1045 != 32 && v1045 != 160) {
                    goto LABEL_3498;
                  }
                  continue;
                case 13:
                  if (v1045 == 9) {
                    goto LABEL_3498;
                  }
                  if (v1045 == 32) {
                    goto LABEL_3498;
                  }
                  uint64_t v20 = 0;
                  if (v1045 == 160) {
                    goto LABEL_3498;
                  }
                  continue;
                case 14:
                  uint64_t v20 = 0;
                  if ((v1045 - 10) >= 4 && v1045 != 133) {
                    goto LABEL_3498;
                  }
                  continue;
                case 15:
                  if ((v1045 - 10) < 4) {
                    goto LABEL_3498;
                  }
                  uint64_t v20 = 0;
                  if (v1045 == 133) {
                    goto LABEL_3498;
                  }
                  continue;
                default:
                  return v19;
              }
            }
            else
            {
              uint64_t v1174 = *v1340;
              if ((unint64_t)v1026 > v1039 - v1174
                || *v1026 != *(unsigned __int8 *)(v7 + 260)
                || (uint64_t v20 = 0, v1174 != 1) && (uint64_t v20 = 0, v1026[1] != *(unsigned __int8 *)(v7 + 261)))
              {
                v1313 = v1026 + 1;
                *(void *)(v15 + 80) = v1026 + 1;
                LODWORD(v1045) = *v1026;
LABEL_3452:
                unsigned int v1314 = (unsigned __int16)*v1350;
                if (*v1350)
                {
                  if ((unint64_t)v1313 >= *v16
                    && !*(_DWORD *)(v7 + 252)
                    && *v1340 == 2
                    && v1045 == *(unsigned __int8 *)(v7 + 260))
                  {
                    _DWORD *v1346 = 1;
                    if (v1314 > 1) {
                      return 4294967294;
                    }
                  }
                }
                goto LABEL_3498;
              }
            }
            continue;
          case 0x22:
            if (v20) {
              continue;
            }
            v1246 = *(unsigned __int8 **)(v15 + 80);
            v971 = v1246 - 1;
            *(void *)(v15 + 80) = v1246 - 1;
            if (*(_DWORD *)(v15 + 64) == 17 && (unint64_t)v971 > *(void *)(v15 + 8) && *v971 == 10)
            {
              int v1248 = *(v1246 - 2);
              v1247 = v1246 - 2;
              if (v1248 == 13)
              {
                *(void *)(v15 + 80) = v1247;
                v971 = v1247;
              }
            }
            goto LABEL_3251;
          case 0x23:
            continue;
          case 0x24:
            if (!v20)
            {
              *(_DWORD *)(v7 + 232) = *(_DWORD *)(v15 + 104);
              uint64_t v20 = 4294966299;
            }
            continue;
          default:
            return v19;
        }
        goto LABEL_2;
      }
    case 0x14u:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      unsigned int v146 = *v129;
      if (v14 && v146 >= 0xC0)
      {
        if ((v146 & 0x20) != 0)
        {
          int v531 = v129[1] & 0x3F;
          if ((v146 & 0x10) != 0)
          {
            if ((v146 & 8) != 0)
            {
              int v838 = v129[2] & 0x3F;
              int v839 = v129[3] & 0x3F;
              int v840 = v129[4] & 0x3F;
              if ((v146 & 4) != 0)
              {
                unsigned int v146 = ((v146 & 1) << 30) | (v531 << 24) | (v838 << 18) | (v839 << 12) | (v840 << 6) | v129[5] & 0x3F;
                v532 = v129 + 6;
              }
              else
              {
                unsigned int v146 = ((v146 & 3) << 24) | (v531 << 18) | (v838 << 12) | (v839 << 6) | v840;
                v532 = v129 + 5;
              }
            }
            else
            {
              unsigned int v146 = ((v146 & 7) << 18) | (v531 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
              v532 = v129 + 4;
            }
          }
          else
          {
            unsigned int v146 = ((v146 & 0xF) << 12) | (v531 << 6) | v129[2] & 0x3F;
            v532 = v129 + 3;
          }
          *(void *)(v15 + 80) = v532;
        }
        else
        {
          *(void *)(v15 + 80) = v129 + 2;
          unsigned int v146 = v129[1] & 0x3F | ((v146 & 0x1F) << 6);
        }
      }
      uint64_t v20 = 0;
      BOOL v989 = v146 - 10 >= 4 && v146 - 8232 >= 2;
      if (v989 && v146 != 133) {
        goto LABEL_2439;
      }
      goto LABEL_2502;
    case 0x15u:
      size_t v129 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v129 >= *v16) {
        goto LABEL_1188;
      }
      *(void *)(v15 + 80) = v129 + 1;
      unsigned int v147 = *v129;
      if (v14 && v147 >= 0xC0)
      {
        if ((v147 & 0x20) != 0)
        {
          int v533 = v129[1] & 0x3F;
          if ((v147 & 0x10) != 0)
          {
            if ((v147 & 8) != 0)
            {
              int v841 = v129[2] & 0x3F;
              int v842 = v129[3] & 0x3F;
              int v843 = v129[4] & 0x3F;
              if ((v147 & 4) != 0)
              {
                unsigned int v147 = ((v147 & 1) << 30) | (v533 << 24) | (v841 << 18) | (v842 << 12) | (v843 << 6) | v129[5] & 0x3F;
                v534 = v129 + 6;
              }
              else
              {
                unsigned int v147 = ((v147 & 3) << 24) | (v533 << 18) | (v841 << 12) | (v842 << 6) | v843;
                v534 = v129 + 5;
              }
            }
            else
            {
              unsigned int v147 = ((v147 & 7) << 18) | (v533 << 12) | ((v129[2] & 0x3F) << 6) | v129[3] & 0x3F;
              v534 = v129 + 4;
            }
          }
          else
          {
            unsigned int v147 = ((v147 & 0xF) << 12) | (v533 << 6) | v129[2] & 0x3F;
            v534 = v129 + 3;
          }
          *(void *)(v15 + 80) = v534;
        }
        else
        {
          *(void *)(v15 + 80) = v129 + 2;
          unsigned int v147 = v129[1] & 0x3F | ((v147 & 0x1F) << 6);
        }
      }
      BOOL v990 = v147 - 10 >= 4 && v147 - 8232 >= 2;
      if (!v990 || v147 == 133) {
        goto LABEL_2439;
      }
      goto LABEL_1192;
    case 0x16u:
      size_t v148 = *(unsigned __int8 **)(v15 + 80);
      unint64_t v149 = *v16;
      if ((unint64_t)v148 < v149)
      {
        unint64_t v150 = v148 + 1;
        *(void *)(v15 + 80) = v148 + 1;
        unsigned int v151 = *v148;
        if (v14 && v151 >= 0xC0)
        {
          if ((v151 & 0x20) != 0)
          {
            int v535 = *v150 & 0x3F;
            if ((v151 & 0x10) != 0)
            {
              if ((v151 & 8) != 0)
              {
                int v844 = v148[2] & 0x3F;
                int v845 = v148[3] & 0x3F;
                int v846 = v148[4] & 0x3F;
                if ((v151 & 4) != 0)
                {
                  unsigned int v151 = ((v151 & 1) << 30) | (v535 << 24) | (v844 << 18) | (v845 << 12) | (v846 << 6) | v148[5] & 0x3F;
                  unint64_t v150 = v148 + 6;
                }
                else
                {
                  unsigned int v151 = ((v151 & 3) << 24) | (v535 << 18) | (v844 << 12) | (v845 << 6) | v846;
                  unint64_t v150 = v148 + 5;
                }
              }
              else
              {
                unsigned int v151 = ((v151 & 7) << 18) | (v535 << 12) | ((v148[2] & 0x3F) << 6) | v148[3] & 0x3F;
                unint64_t v150 = v148 + 4;
              }
            }
            else
            {
              unsigned int v151 = ((v151 & 0xF) << 12) | (v535 << 6) | v148[2] & 0x3F;
              unint64_t v150 = v148 + 3;
            }
            *(void *)(v15 + 80) = v150;
          }
          else
          {
            unint64_t v150 = v148 + 2;
            *(void *)(v15 + 80) = v148 + 2;
            unsigned int v151 = v148[1] & 0x3F | ((v151 & 0x1F) << 6);
          }
        }
        v991 = _pcre2_extuni_8(v151, v150, *(void *)(v7 + 152), v149, v1347, 0);
        *(void *)(v15 + 80) = v991;
        if ((unint64_t)v991 >= *(void *)(v7 + 168))
        {
          unsigned int v992 = (unsigned __int16)*v1350;
          if (*v1350)
          {
            if ((unint64_t)v991 > *v1348 || *v1345)
            {
              _DWORD *v1346 = 1;
              if (v992 > 1) {
                return 4294967294;
              }
            }
          }
        }
        unint64_t v110 = (unsigned __int8 *)(*(void *)v15 + 1);
LABEL_3299:
        *(void *)uint64_t v15 = v110;
        goto LABEL_3300;
      }
      unsigned int v306 = (unsigned __int16)*v1350;
      if (*v1350)
      {
        uint64_t v16 = v1349;
        if ((unint64_t)v148 <= *v1348 && !*v1345) {
          goto LABEL_1141;
        }
        _DWORD *v1346 = 1;
        if (v306 <= 1) {
          goto LABEL_1141;
        }
        return 4294967294;
      }
      goto LABEL_953;
    case 0x17u:
      goto LABEL_278;
    case 0x18u:
      goto LABEL_286;
    case 0x19u:
      if ((*(unsigned char *)(v7 + 236) & 2) != 0) {
        goto LABEL_1995;
      }
      if ((*(unsigned char *)(v7 + 240) & 0x10) != 0)
      {
LABEL_286:
        if (*(void *)(v15 + 80) < *v16) {
          goto LABEL_1995;
        }
        int v158 = (unsigned __int16)*v1350;
        if (*v1350)
        {
          _DWORD *v1346 = 1;
          if (v158 != 1) {
            return 4294967294;
          }
        }
        goto LABEL_2439;
      }
LABEL_278:
      uint64_t v152 = *(unsigned __int8 **)(v15 + 80);
      uint64_t v153 = *v16;
      if ((unint64_t)v152 >= *v16) {
        goto LABEL_283;
      }
      int v154 = *(_DWORD *)(v7 + 252);
      if (v154)
      {
        int v155 = _pcre2_is_newline_8(v152, v154, v153, v1340, v1347);
        uint64_t v16 = v1349;
        if (v155)
        {
          uint64_t v152 = *(unsigned __int8 **)(v15 + 80);
          uint64_t v153 = *v1349;
          uint64_t v156 = *v1340;
          goto LABEL_282;
        }
      }
      else
      {
        uint64_t v156 = *v1340;
        if ((unint64_t)v152 <= v153 - v156
          && *v152 == *(unsigned __int8 *)(v7 + 260)
          && (v156 == 1 || v152[1] == *(unsigned __int8 *)(v7 + 261)))
        {
LABEL_282:
          if (v152 == (unsigned __int8 *)(v153 - v156))
          {
LABEL_283:
            int v157 = (unsigned __int16)*v1350;
            if (*v1350)
            {
              _DWORD *v1346 = 1;
              if (v157 != 1) {
                return 4294967294;
              }
            }
            goto LABEL_1187;
          }
        }
      }
LABEL_1102:
      unsigned int v500 = (unsigned __int16)*v1350;
      if (!*v1350) {
        goto LABEL_1995;
      }
      v501 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)(v501 + 1) < *v16
        || *(_DWORD *)(v7 + 252)
        || *v1340 != 2
        || *v501 != *(unsigned __int8 *)(v7 + 260))
      {
        goto LABEL_1995;
      }
LABEL_1994:
      _DWORD *v1346 = 1;
      if (v500 > 1) {
        return 4294967294;
      }
      goto LABEL_1995;
    case 0x1Au:
      long long v159 = *(unsigned __int8 **)(v15 + 80);
      uint64_t v160 = *v16;
      if ((unint64_t)v159 >= *v16)
      {
        if ((*(unsigned char *)(v7 + 236) & 2) != 0) {
          goto LABEL_1995;
        }
        unsigned int v307 = (unsigned __int16)*v1350;
        if (!*v1350) {
          goto LABEL_2439;
        }
        if ((unint64_t)v159 > *v1348) {
          goto LABEL_638;
        }
        goto LABEL_637;
      }
      int v161 = *(_DWORD *)(v7 + 252);
      if (v161)
      {
        int v162 = _pcre2_is_newline_8(v159, v161, v160, v1340, v1347);
        uint64_t v16 = v1349;
        if (v162)
        {
          a2 = *(unsigned __int8 **)v15;
          goto LABEL_2439;
        }
      }
      else
      {
        uint64_t v499 = *v1340;
        if ((unint64_t)v159 <= v160 - v499
          && *v159 == *(unsigned __int8 *)(v7 + 260)
          && (v499 == 1 || v159[1] == *(unsigned __int8 *)(v7 + 261)))
        {
          goto LABEL_2439;
        }
      }
      goto LABEL_1102;
    case 0x1Bu:
      if (*(void *)(v15 + 80) == *(void *)(v7 + 152) && (*(unsigned char *)(v7 + 236) & 1) == 0) {
        goto LABEL_2439;
      }
      goto LABEL_1995;
    case 0x1Cu:
      long long v163 = *(unsigned __int8 **)(v15 + 80);
      unint64_t v164 = *(void *)(v7 + 152);
      if ((*(unsigned char *)(v7 + 236) & 1) != 0 && v163 == (unsigned __int8 *)v164) {
        goto LABEL_1995;
      }
      if (v163 == (unsigned __int8 *)v164) {
        goto LABEL_2439;
      }
      if (v163 == (unsigned __int8 *)*v16 && (*(unsigned char *)(v7 + 242) & 0x20) == 0) {
        goto LABEL_1995;
      }
      int v165 = *(_DWORD *)(v7 + 252);
      if (!v165)
      {
        uint64_t v546 = *v1340;
        if ((unint64_t)v163 < v164 + v546
          || v163[-v546] != *(unsigned __int8 *)(v7 + 260)
          || v546 != 1 && v163[-v546 + 1] != *(unsigned __int8 *)(v7 + 261))
        {
          goto LABEL_1995;
        }
        goto LABEL_2439;
      }
      if ((unint64_t)v163 <= v164) {
        goto LABEL_1995;
      }
      uint64_t v20 = _pcre2_was_newline_8(v163, v165, v164, v1340, v1347);
      if (!v20) {
        goto LABEL_170;
      }
      a2 = *(unsigned __int8 **)v15;
      uint64_t v16 = v1349;
      goto LABEL_2439;
    case 0x1Du:
      if (v14)
      {
        unint64_t v166 = 1;
        *(void *)(v15 + 24) = 1;
        *(void *)uint64_t v15 = a2 + 1;
        unsigned int v167 = a2[1];
        if (v167 >= 0xC0)
        {
          unint64_t v166 = 3;
          uint64_t v168 = 4;
          uint64_t v169 = 5;
          if ((v167 & 4) != 0) {
            uint64_t v169 = 6;
          }
          if ((v167 & 8) != 0) {
            uint64_t v168 = v169;
          }
          if ((v167 & 0x10) != 0) {
            unint64_t v166 = v168;
          }
          if ((v167 & 0x20) == 0) {
            unint64_t v166 = 2;
          }
          *(void *)(v15 + 24) = v166;
        }
        long long v170 = *(unsigned __int8 **)(v15 + 80);
        if (v166 <= *v16 - (unint64_t)v170)
        {
          v471 = v170 + 1;
          v472 = a2 + 2;
          v473 = (unsigned __int8 *)(v166 - 1);
          while (1)
          {
            *(void *)uint64_t v15 = v472;
            int v474 = *(v472 - 1);
            *(void *)(v15 + 80) = v471;
            if (v474 != *(v471 - 1)) {
              goto LABEL_1192;
            }
            *(void *)(v15 + 24) = v473;
            ++v471;
            ++v472;
            if (--v473 == (unsigned __int8 *)-1) {
              goto LABEL_2500;
            }
          }
        }
        if ((unint64_t)v170 < *v16) {
          goto LABEL_1192;
        }
        goto LABEL_1065;
      }
      long long v170 = *(unsigned __int8 **)(v15 + 80);
      if ((uint64_t)(*v16 - (void)v170) <= 0)
      {
LABEL_1065:
        unsigned int v489 = (unsigned __int16)*v1350;
        if (*v1350 && ((unint64_t)v170 > *v1348 || *v1345))
        {
          _DWORD *v1346 = 1;
          if (v489 > 1) {
            return 4294967294;
          }
        }
        goto LABEL_1192;
      }
      int v308 = a2[1];
      *(void *)(v15 + 80) = v170 + 1;
      if (v308 != *v170) {
        goto LABEL_1192;
      }
      goto LABEL_1876;
    case 0x1Eu:
      long long v170 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v170 >= *v16) {
        goto LABEL_1065;
      }
      if (v14)
      {
        uint64_t v171 = 1;
        *(void *)(v15 + 24) = 1;
        *(void *)uint64_t v15 = a2 + 1;
        unsigned int v172 = a2[1];
        if (v172 >= 0xC0)
        {
          int v173 = a2[2] & 0x3F;
          if ((v172 & 0x20) != 0)
          {
            if ((v172 & 0x10) != 0)
            {
              if ((v172 & 8) != 0)
              {
                int v974 = a2[3] & 0x3F;
                int v975 = a2[4] & 0x3F;
                int v976 = a2[5] & 0x3F;
                if ((v172 & 4) != 0)
                {
                  unsigned int v172 = ((v172 & 1) << 30) | (v173 << 24) | (v974 << 18) | (v975 << 12) | (v976 << 6) | a2[6] & 0x3F;
                  uint64_t v171 = 6;
                }
                else
                {
                  unsigned int v172 = ((v172 & 3) << 24) | (v173 << 18) | (v974 << 12) | (v975 << 6) | v976;
                  uint64_t v171 = 5;
                }
              }
              else
              {
                unsigned int v172 = ((v172 & 7) << 18) | (v173 << 12) | ((a2[3] & 0x3F) << 6) | a2[4] & 0x3F;
                uint64_t v171 = 4;
              }
            }
            else
            {
              unsigned int v172 = ((v172 & 0xF) << 12) | (v173 << 6) | a2[3] & 0x3F;
              uint64_t v171 = 3;
            }
          }
          else
          {
            uint64_t v171 = 2;
            unsigned int v172 = a2[2] & 0x3F | ((v172 & 0x1F) << 6);
          }
          *(void *)(v15 + 24) = v171;
        }
        if (v172 > 0x7F)
        {
          *(void *)(v15 + 80) = v170 + 1;
          unsigned int v996 = *v170;
          if (v996 >= 0xC0)
          {
            if ((v996 & 0x20) != 0)
            {
              int v997 = v170[1] & 0x3F;
              if ((v996 & 0x10) != 0)
              {
                if ((v996 & 8) != 0)
                {
                  int v999 = v170[2] & 0x3F;
                  int v1000 = v170[3] & 0x3F;
                  int v1001 = v170[4] & 0x3F;
                  if ((v996 & 4) != 0)
                  {
                    unsigned int v996 = ((v996 & 1) << 30) | (v997 << 24) | (v999 << 18) | (v1000 << 12) | (v1001 << 6) | v170[5] & 0x3F;
                    v998 = v170 + 6;
                  }
                  else
                  {
                    unsigned int v996 = ((v996 & 3) << 24) | (v997 << 18) | (v999 << 12) | (v1000 << 6) | v1001;
                    v998 = v170 + 5;
                  }
                }
                else
                {
                  unsigned int v996 = ((v996 & 7) << 18) | (v997 << 12) | ((v170[2] & 0x3F) << 6) | v170[3] & 0x3F;
                  v998 = v170 + 4;
                }
              }
              else
              {
                unsigned int v996 = ((v996 & 0xF) << 12) | (v997 << 6) | v170[2] & 0x3F;
                v998 = v170 + 3;
              }
              *(void *)(v15 + 80) = v998;
            }
            else
            {
              *(void *)(v15 + 80) = v170 + 2;
              unsigned int v996 = v170[1] & 0x3F | ((v996 & 0x1F) << 6);
            }
          }
          *(void *)uint64_t v15 = &a2[v171 + 1];
          if (v996 == v172
            || v996 == *(_DWORD *)&_pcre2_ucd_records_8[12
                                                      * _pcre2_ucd_stage2_8[v172 & 0x7F | (_pcre2_ucd_stage1_8[v172 >> 7] << 7)]
                                                      + 4]
                     + v172)
          {
            goto LABEL_2500;
          }
        }
        else if (*(unsigned __int8 *)(*(void *)(v7 + 88) + v172) == *(unsigned __int8 *)(*(void *)(v7 + 88) + *v170))
        {
          *(void *)uint64_t v15 = a2 + 2;
          *(void *)(v15 + 80) = v170 + 1;
          goto LABEL_2500;
        }
        goto LABEL_1192;
      }
      if ((v13 & 0x20000) != 0)
      {
        int v477 = *v170;
        int v538 = a2[1];
        if ((char)a2[1] < 0)
        {
          if (v477 == v538)
          {
LABEL_1875:
            *(void *)(v15 + 80) = v170 + 1;
            goto LABEL_1876;
          }
          int v476 = *(_DWORD *)&_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v538 & 0x7F | 0x80] + 4] + v538;
        }
        else
        {
          uint64_t v539 = *(void *)(v7 + 88);
          int v476 = *(unsigned __int8 *)(v539 + a2[1]);
          int v477 = *(unsigned __int8 *)(v539 + *v170);
        }
      }
      else
      {
        uint64_t v475 = *(void *)(v7 + 88);
        int v476 = *(unsigned __int8 *)(v475 + a2[1]);
        int v477 = *(unsigned __int8 *)(v475 + *v170);
      }
      if (v476 != v477) {
        goto LABEL_1192;
      }
      goto LABEL_1875;
    case 0x1Fu:
    case 0x20u:
      unsigned __int32 v73 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v73 < *v16)
      {
        if (v14)
        {
          *(void *)uint64_t v15 = a2 + 2;
          unsigned int v75 = a2[1];
          if (v75 >= 0xC0)
          {
            if ((v75 & 0x20) != 0)
            {
              int v512 = a2[2] & 0x3F;
              if ((v75 & 0x10) != 0)
              {
                if ((v75 & 8) != 0)
                {
                  int v808 = a2[3] & 0x3F;
                  int v809 = a2[4] & 0x3F;
                  int v810 = a2[5] & 0x3F;
                  if ((v75 & 4) != 0)
                  {
                    unsigned int v75 = ((v75 & 1) << 30) | (v512 << 24) | (v808 << 18) | (v809 << 12) | (v810 << 6) | a2[6] & 0x3F;
                    v513 = a2 + 7;
                  }
                  else
                  {
                    unsigned int v75 = ((v75 & 3) << 24) | (v512 << 18) | (v808 << 12) | (v809 << 6) | v810;
                    v513 = a2 + 6;
                  }
                }
                else
                {
                  unsigned int v75 = ((v75 & 7) << 18) | (v512 << 12) | ((a2[3] & 0x3F) << 6) | a2[4] & 0x3F;
                  v513 = a2 + 5;
                }
              }
              else
              {
                unsigned int v75 = ((v75 & 0xF) << 12) | (v512 << 6) | a2[3] & 0x3F;
                v513 = a2 + 4;
              }
              *(void *)uint64_t v15 = v513;
            }
            else
            {
              *(void *)uint64_t v15 = a2 + 3;
              unsigned int v75 = a2[2] & 0x3F | ((v75 & 0x1F) << 6);
            }
          }
          *(void *)(v15 + 80) = v73 + 1;
          unsigned int v977 = *v73;
          if (v977 >= 0xC0)
          {
            if ((v977 & 0x20) != 0)
            {
              int v978 = v73[1] & 0x3F;
              if ((v977 & 0x10) != 0)
              {
                if ((v977 & 8) != 0)
                {
                  int v980 = v73[2] & 0x3F;
                  int v981 = v73[3] & 0x3F;
                  int v982 = v73[4] & 0x3F;
                  if ((v977 & 4) != 0)
                  {
                    unsigned int v977 = ((v977 & 1) << 30) | (v978 << 24) | (v980 << 18) | (v981 << 12) | (v982 << 6) | v73[5] & 0x3F;
                    v979 = v73 + 6;
                  }
                  else
                  {
                    unsigned int v977 = ((v977 & 3) << 24) | (v978 << 18) | (v980 << 12) | (v981 << 6) | v982;
                    v979 = v73 + 5;
                  }
                }
                else
                {
                  unsigned int v977 = ((v977 & 7) << 18) | (v978 << 12) | ((v73[2] & 0x3F) << 6) | v73[3] & 0x3F;
                  v979 = v73 + 4;
                }
              }
              else
              {
                unsigned int v977 = ((v977 & 0xF) << 12) | (v978 << 6) | v73[2] & 0x3F;
                v979 = v73 + 3;
              }
              *(void *)(v15 + 80) = v979;
            }
            else
            {
              *(void *)(v15 + 80) = v73 + 2;
              unsigned int v977 = v73[1] & 0x3F | ((v977 & 0x1F) << 6);
            }
          }
          if (v75 != v977)
          {
            if (v18 != 32) {
              goto LABEL_2500;
            }
            int v993 = v75 < 0x80
                 ? *(unsigned __int8 *)(*(void *)(v7 + 96) + v75)
                 : *(_DWORD *)&_pcre2_ucd_records_8[12
                                                  * _pcre2_ucd_stage2_8[v75 & 0x7F | (_pcre2_ucd_stage1_8[v75 >> 7] << 7)]
                                                  + 4]
                 + v75;
            if (v993 != v977) {
              goto LABEL_2500;
            }
          }
          goto LABEL_1192;
        }
        if ((v13 & 0x20000) != 0)
        {
          *(void *)(v15 + 80) = v73 + 1;
          int v478 = *v73;
          unsigned int v479 = a2[1];
          *(void *)uint64_t v15 = a2 + 2;
          if (v479 != v478)
          {
            if (v18 != 32) {
              goto LABEL_2500;
            }
            int v480 = (v479 & 0x80) != 0
                 ? *(_DWORD *)&_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v479 & 0x7F | 0x80] + 4] + v479
                 : *(unsigned __int8 *)(*(void *)(v7 + 96) + v479);
            if (v480 != v478) {
              goto LABEL_2500;
            }
          }
          goto LABEL_1192;
        }
        uint64_t v304 = a2[1];
        *(void *)(v15 + 80) = v73 + 1;
        int v305 = *v73;
        if (v304 == v305 || v18 == 32 && *(unsigned __int8 *)(*(void *)(v7 + 96) + v304) == v305) {
          goto LABEL_1192;
        }
LABEL_1876:
        uint64_t v228 = (uint64_t)(a2 + 2);
        goto LABEL_2499;
      }
LABEL_171:
      unsigned int v64 = (unsigned __int16)*v1350;
      if (!*v1350) {
        goto LABEL_1192;
      }
      if ((unint64_t)v73 > *v1348) {
        goto LABEL_1191;
      }
      goto LABEL_1190;
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
      int v21 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      if (v18 >= 0x2E) {
        int v22 = -46;
      }
      else {
        int v22 = -33;
      }
      unsigned int v23 = v22 + *a2;
      unsigned int v24 = rep_min[v23];
      *(_DWORD *)(v15 + 56) = v24;
      unsigned int v25 = rep_max[v23];
      *(_DWORD *)(v15 + 60) = v25;
      int v26 = rep_typ[v23];
      goto LABEL_13;
    case 0x27u:
    case 0x34u:
      unsigned int v24 = 0;
      *(_DWORD *)(v15 + 56) = 0;
      unsigned int v25 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v15 + 60) = v25;
      int v21 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      int v26 = 1;
      goto LABEL_13;
    case 0x28u:
    case 0x35u:
      unsigned int v24 = 0;
      unsigned int v1352 = 0;
      *(_DWORD *)(v15 + 56) = 0;
      unsigned int v25 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v15 + 60) = v25;
      int v21 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      goto LABEL_14;
    case 0x29u:
    case 0x36u:
      unsigned int v1352 = v12;
      unsigned int v25 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v15 + 56) = v25;
      *(_DWORD *)(v15 + 60) = v25;
      int v21 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      unsigned int v24 = v25;
      goto LABEL_14;
    case 0x2Au:
    case 0x37u:
      unsigned int v24 = 0;
      *(void *)(v15 + 56) = 0xFFFFFFFF00000000;
      int v21 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      unsigned int v1352 = 2;
      goto LABEL_106;
    case 0x2Bu:
    case 0x38u:
      *(void *)(v15 + 56) = 0xFFFFFFFF00000001;
      int v21 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      unsigned int v1352 = 2;
      unsigned int v24 = 1;
LABEL_106:
      unsigned int v25 = -1;
      goto LABEL_14;
    case 0x2Cu:
    case 0x39u:
      unsigned int v24 = 0;
      *(void *)(v15 + 56) = 0x100000000;
      int v21 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      unsigned int v1352 = 2;
      unsigned int v25 = 1;
      goto LABEL_14;
    case 0x2Du:
    case 0x3Au:
      unsigned int v24 = 0;
      *(_DWORD *)(v15 + 56) = 0;
      unsigned int v25 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v15 + 60) = v25;
      int v21 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      int v26 = 2;
LABEL_13:
      unsigned int v1352 = v26;
LABEL_14:
      if (v14)
      {
        *(void *)(v15 + 16) = v21;
        *(void *)(v15 + 24) = 1;
        unsigned int v27 = *v21;
        if (v27 >= 0xC0)
        {
          int v28 = v21[1] & 0x3F;
          if ((v27 & 0x20) != 0)
          {
            if ((v27 & 0x10) != 0)
            {
              if ((v27 & 8) != 0)
              {
                int v232 = v21[2] & 0x3F;
                int v233 = v21[3] & 0x3F;
                int v234 = v21[4] & 0x3F;
                if ((v27 & 4) != 0)
                {
                  unsigned int v29 = ((v27 & 1) << 30) | (v28 << 24) | (v232 << 18) | (v233 << 12) | (v234 << 6) | v21[5] & 0x3F;
                  uint64_t v30 = 6;
                }
                else
                {
                  unsigned int v29 = ((v27 & 3) << 24) | (v28 << 18) | (v232 << 12) | (v233 << 6) | v234;
                  uint64_t v30 = 5;
                }
              }
              else
              {
                unsigned int v29 = ((v27 & 7) << 18) | (v28 << 12) | ((v21[2] & 0x3F) << 6) | v21[3] & 0x3F;
                uint64_t v30 = 4;
              }
            }
            else
            {
              unsigned int v29 = ((v27 & 0xF) << 12) | (v28 << 6) | v21[2] & 0x3F;
              uint64_t v30 = 3;
            }
          }
          else
          {
            unsigned int v29 = v21[1] & 0x3F | ((v27 & 0x1F) << 6);
            uint64_t v30 = 2;
          }
          *(void *)(v15 + 24) = v30;
          *(void *)uint64_t v15 = &v21[v30];
          v1336 = a3;
          uint64_t v1331 = v7;
          v1332 = v8;
          unsigned int v1333 = v13;
          unsigned int v1330 = v14;
          if (v18 >= 0x2E
            && (int v327 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                                      * _pcre2_ucd_stage2_8[v29 & 0x7F | (_pcre2_ucd_stage1_8[v29 >> 7] << 7)]
                                                      + 4]) != 0)
          {
            size_t v328 = _pcre2_ord2utf_8(v327 + v29, v15 + 74);
            *(void *)(v15 + 40) = v328;
            unsigned int v24 = *(_DWORD *)(v15 + 56);
            if (!v24) {
              goto LABEL_710;
            }
          }
          else
          {
            size_t v328 = 0;
            *(void *)(v15 + 40) = 0;
            if (!v24)
            {
LABEL_710:
              unsigned int v338 = *(_DWORD *)(v15 + 60);
              if (v338 != v24)
              {
                unsigned int v13 = v1333;
                if (!v1352)
                {
                  unsigned int i = 0;
                  uint64_t v7 = v1331;
                  uint64_t v14 = v1330;
                  goto LABEL_3383;
                }
                v339 = *(unsigned __int8 **)(v15 + 80);
                *(void *)(v15 + 8) = v339;
                v340 = v339;
                BOOL v259 = v338 >= v24;
                unsigned int v341 = v338 - v24;
                if (v341 != 0 && v259)
                {
                  size_t v342 = *(void *)(v15 + 24);
                  unint64_t v343 = *v1349 - v342;
                  unint64_t v1329 = *v1349;
                  unint64_t v344 = *v1349 - v328;
                  v340 = v339;
                  while (1)
                  {
                    if ((unint64_t)v340 > v343
                      || (int v345 = memcmp(v340, *(const void **)(v15 + 16), v342), v346 = v342, v345))
                    {
                      if (!v328) {
                        break;
                      }
                      if ((unint64_t)v340 > v344) {
                        break;
                      }
                      int v347 = memcmp(v340, (const void *)(v15 + 74), v328);
                      size_t v346 = v328;
                      if (v347) {
                        break;
                      }
                    }
                    v340 += v346;
                    *(void *)(v15 + 80) = v340;
                    if (!--v341) {
                      goto LABEL_734;
                    }
                  }
                  if ((unint64_t)v340 >= v1329)
                  {
                    unsigned int v348 = (unsigned __int16)*v1350;
                    if (*v1350)
                    {
                      if ((unint64_t)v340 > *v1348 || *v1345)
                      {
                        _DWORD *v1346 = 1;
                        if (v348 > 1) {
                          return 4294967294;
                        }
                      }
                    }
                  }
                }
LABEL_734:
                uint64_t v12 = v1352;
                if (v1352 != 2)
                {
                  unsigned int v8 = v1332;
                  uint64_t v14 = v1330;
                  uint64_t v16 = v1349;
LABEL_3255:
                  if (v340 > v339)
                  {
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = -53;
                    uint64_t v7 = v1331;
                    goto LABEL_3333;
                  }
                  uint64_t v7 = v1331;
                  a3 = v1336;
                  goto LABEL_2500;
                }
                a3 = v1336;
                uint64_t v7 = v1331;
                unsigned int v8 = v1332;
                uint64_t v14 = v1330;
                goto LABEL_3300;
              }
              a3 = v1336;
              uint64_t v7 = v1331;
              unsigned int v8 = v1332;
              unsigned int v13 = v1333;
              uint64_t v14 = v1330;
              uint64_t v16 = v1349;
LABEL_712:
              uint64_t v12 = v1352;
              goto LABEL_2500;
            }
          }
          unint64_t v329 = *v1349;
          size_t v330 = *(void *)(v15 + 24);
          unint64_t v331 = *v1349 - v330;
          v332 = *(unsigned __int8 **)(v15 + 80);
          unint64_t v333 = *v1349 - v328;
          int v334 = 1;
          while (1)
          {
            if ((unint64_t)v332 > v331
              || (int v335 = memcmp(v332, *(const void **)(v15 + 16), v330), v336 = v330, v335))
            {
              if (!v328) {
                break;
              }
              if ((unint64_t)v332 > v333) {
                break;
              }
              int v337 = memcmp(v332, (const void *)(v15 + 74), v328);
              size_t v336 = v328;
              if (v337) {
                break;
              }
            }
            v332 += v336;
            *(void *)(v15 + 80) = v332;
            if (++v334 > v24) {
              goto LABEL_710;
            }
          }
          if ((unint64_t)v332 < v329)
          {
            uint64_t v20 = 0;
            a3 = v1336;
            uint64_t v7 = v1331;
            unsigned int v8 = v1332;
            unsigned int v13 = v1333;
            uint64_t v14 = v1330;
            uint64_t v16 = v1349;
            uint64_t v12 = v1352;
            goto LABEL_2502;
          }
          unsigned int v64 = (unsigned __int16)*v1350;
          a3 = v1336;
          uint64_t v7 = v1331;
          unsigned int v8 = v1332;
          unsigned int v13 = v1333;
          uint64_t v14 = v1330;
          uint64_t v16 = v1349;
          uint64_t v12 = v1352;
          if (!*v1350) {
            goto LABEL_1192;
          }
          if ((unint64_t)v332 > *v1348)
          {
LABEL_1191:
            _DWORD *v1346 = 1;
            if (v64 > 1) {
              return 4294967294;
            }
            goto LABEL_1192;
          }
LABEL_1190:
          if (!*v1345) {
            goto LABEL_1192;
          }
          goto LABEL_1191;
        }
        a2 = v21 + 1;
        *(void *)uint64_t v15 = v21 + 1;
      }
      else
      {
        a2 = v21 + 1;
        *(void *)uint64_t v15 = v21 + 1;
        unsigned int v27 = *v21;
      }
      *(_DWORD *)(v15 + 64) = v27;
      if (v18 > 0x2D)
      {
        if (v1344 == 0x20000 && v27 >= 0x80) {
          unsigned int v36 = *(_DWORD *)&_pcre2_ucd_records_8[12
        }
                                               * _pcre2_ucd_stage2_8[v27 & 0x7F | (_pcre2_ucd_stage1_8[v27 >> 7] << 7)]
                                               + 4]
              + v27;
        else {
          unsigned int v36 = *(unsigned __int8 *)(*(void *)(v7 + 96) + v27);
        }
        *(_DWORD *)(v15 + 68) = v36;
        if (!v24)
        {
LABEL_55:
          if (v25 != v24)
          {
            if (!v1352)
            {
              v1336 = a3;
              unsigned int i = 0;
              LODWORD(v12) = 0;
LABEL_3375:
              char v1302 = 25;
              goto LABEL_3333;
            }
            unsigned __int32 v54 = *(unsigned __int8 **)(v15 + 80);
            *(void *)(v15 + 8) = v54;
            uint64_t v55 = v54;
            BOOL v259 = v25 >= v24;
            unsigned int v56 = v25 - v24;
            uint64_t v12 = v1352;
            if (v56 == 0 || !v259) {
              goto LABEL_656;
            }
            unint64_t v57 = *v16;
            uint64_t v55 = v54;
            while ((unint64_t)v55 < v57)
            {
              int v58 = *v55;
              if (v27 == v58 || v36 == v58)
              {
                *(void *)(v15 + 80) = ++v55;
                if (--v56) {
                  continue;
                }
              }
              goto LABEL_656;
            }
            if ((unsigned int v311 = (unsigned __int16)*v1350, !*v1350)
              || (unint64_t)v55 <= *v1348 && !*v1345
              || (_DWORD *v1346 = 1, v311 <= 1))
            {
LABEL_656:
              if (v1352 != 2)
              {
LABEL_3238:
                if (v55 != v54)
                {
                  v1336 = a3;
                  unsigned int i = v12;
                  LODWORD(v12) = 0;
                  a2 = *(unsigned __int8 **)v15;
                  char v1302 = 26;
                  goto LABEL_3333;
                }
              }
              goto LABEL_2500;
            }
            return 4294967294;
          }
          goto LABEL_712;
        }
        uint64_t v48 = 0;
        unint64_t v49 = *v16;
        unint64_t v50 = *(unsigned __int8 **)(v15 + 80);
        while (1)
        {
          BOOL v51 = &v50[v48];
          if ((unint64_t)&v50[v48] >= v49) {
            break;
          }
          int v52 = *v51;
          BOOL v53 = v27 == v52 || v36 == v52;
          if (!v53) {
            goto LABEL_68;
          }
          *(void *)(v15 + 80) = &v50[++v48];
          if ((int)v48 + 1 > v24) {
            goto LABEL_55;
          }
        }
        unsigned int v64 = (unsigned __int16)*v1350;
        uint64_t v12 = v1352;
        if (!*v1350) {
          goto LABEL_1192;
        }
LABEL_585:
        if ((unint64_t)v51 > *v1348) {
          goto LABEL_1191;
        }
        goto LABEL_1190;
      }
      if (!v24)
      {
LABEL_35:
        if (v25 != v24)
        {
          if (!v1352)
          {
            v1336 = a3;
            unsigned int i = 0;
            LODWORD(v12) = 0;
LABEL_3388:
            char v1302 = 27;
            goto LABEL_3333;
          }
          uint64_t v41 = *(unsigned __int8 **)(v15 + 80);
          *(void *)(v15 + 8) = v41;
          uint64_t v42 = v41;
          BOOL v259 = v25 >= v24;
          unsigned int v43 = v25 - v24;
          uint64_t v12 = v1352;
          if (v43 == 0 || !v259) {
            goto LABEL_650;
          }
          unint64_t v44 = *v16;
          uint64_t v42 = v41;
          while ((unint64_t)v42 < v44)
          {
            if (v27 == *v42)
            {
              *(void *)(v15 + 80) = ++v42;
              if (--v43) {
                continue;
              }
            }
            goto LABEL_650;
          }
          if ((unsigned int v310 = (unsigned __int16)*v1350, !*v1350)
            || (unint64_t)v42 <= *v1348 && !*v1345
            || (_DWORD *v1346 = 1, v310 <= 1))
          {
LABEL_650:
            if (v1352 != 2)
            {
LABEL_3240:
              if (v42 > v41)
              {
                v1336 = a3;
                unsigned int i = v12;
                LODWORD(v12) = 0;
                a2 = *(unsigned __int8 **)v15;
                char v1302 = 28;
                goto LABEL_3333;
              }
            }
            goto LABEL_2500;
          }
          return 4294967294;
        }
        goto LABEL_712;
      }
      uint64_t v37 = 0;
      unint64_t v38 = *v16;
      int v39 = *(unsigned __int8 **)(v15 + 80);
      while (1)
      {
        unint64_t v40 = &v39[v37];
        if ((unint64_t)&v39[v37] >= v38) {
          break;
        }
        *(void *)(v15 + 80) = v40 + 1;
        if (v27 != *v40)
        {
LABEL_68:
          uint64_t v20 = 0;
          uint64_t v12 = v1352;
          goto LABEL_2502;
        }
        if ((int)++v37 + 1 > v24) {
          goto LABEL_35;
        }
      }
      unsigned int v64 = (unsigned __int16)*v1350;
      uint64_t v12 = v1352;
      if (!*v1350) {
        goto LABEL_1192;
      }
      goto LABEL_582;
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
      int v31 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      if (v18 <= 0x47) {
        int v32 = -59;
      }
      else {
        int v32 = -72;
      }
      unsigned int v33 = v32 + *a2;
      unsigned int v34 = rep_min[v33];
      *(_DWORD *)(v15 + 56) = v34;
      unsigned int v35 = rep_max[v33];
      *(_DWORD *)(v15 + 60) = v35;
      uint64_t v12 = rep_typ[v33];
      goto LABEL_117;
    case 0x41u:
    case 0x4Eu:
      unsigned int v34 = 0;
      *(_DWORD *)(v15 + 56) = 0;
      unsigned int v35 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v15 + 60) = v35;
      int v31 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      uint64_t v12 = 1;
      goto LABEL_117;
    case 0x42u:
    case 0x4Fu:
      unsigned int v34 = 0;
      uint64_t v12 = 0;
      *(_DWORD *)(v15 + 56) = 0;
      unsigned int v35 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v15 + 60) = v35;
      int v31 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      goto LABEL_117;
    case 0x43u:
    case 0x50u:
      unsigned int v35 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v15 + 56) = v35;
      *(_DWORD *)(v15 + 60) = v35;
      int v31 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      unsigned int v34 = v35;
      goto LABEL_117;
    case 0x44u:
    case 0x51u:
      unsigned int v34 = 0;
      *(void *)(v15 + 56) = 0xFFFFFFFF00000000;
      int v31 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      uint64_t v12 = 2;
      goto LABEL_114;
    case 0x45u:
    case 0x52u:
      *(void *)(v15 + 56) = 0xFFFFFFFF00000001;
      int v31 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      uint64_t v12 = 2;
      unsigned int v34 = 1;
LABEL_114:
      unsigned int v35 = -1;
      goto LABEL_117;
    case 0x46u:
    case 0x53u:
      unsigned int v34 = 0;
      *(void *)(v15 + 56) = 0x100000000;
      int v31 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      uint64_t v12 = 2;
      unsigned int v35 = 1;
      goto LABEL_117;
    case 0x47u:
    case 0x54u:
      unsigned int v34 = 0;
      *(_DWORD *)(v15 + 56) = 0;
      unsigned int v35 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v15 + 60) = v35;
      int v31 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      uint64_t v12 = 2;
LABEL_117:
      a2 = v31 + 1;
      *(void *)uint64_t v15 = v31 + 1;
      unsigned int v76 = *v31;
      *(_DWORD *)(v15 + 64) = v76;
      if (v14 && v76 >= 0xC0)
      {
        if ((v76 & 0x20) != 0)
        {
          int v78 = *a2 & 0x3F;
          if ((v76 & 0x10) != 0)
          {
            if ((v76 & 8) != 0)
            {
              int v114 = v31[2] & 0x3F;
              int v115 = v31[3] & 0x3F;
              int v116 = v31[4] & 0x3F;
              if ((v76 & 4) != 0)
              {
                unsigned int v76 = ((v76 & 1) << 30) | (v78 << 24) | (v114 << 18) | (v115 << 12) | (v116 << 6) | v31[5] & 0x3F;
                *(_DWORD *)(v15 + 64) = v76;
                a2 = v31 + 6;
              }
              else
              {
                a2 = v31 + 5;
                unsigned int v76 = ((v76 & 3) << 24) | (v78 << 18) | (v114 << 12) | (v115 << 6) | v116;
                *(_DWORD *)(v15 + 64) = v76;
              }
            }
            else
            {
              unsigned int v76 = ((v76 & 7) << 18) | (v78 << 12) | ((v31[2] & 0x3F) << 6) | v31[3] & 0x3F;
              *(_DWORD *)(v15 + 64) = v76;
              a2 = v31 + 4;
            }
          }
          else
          {
            unsigned int v76 = ((v76 & 0xF) << 12) | (v78 << 6) | v31[2] & 0x3F;
            *(_DWORD *)(v15 + 64) = v76;
            a2 = v31 + 3;
          }
          *(void *)uint64_t v15 = a2;
        }
        else
        {
          a2 = v31 + 2;
          *(void *)uint64_t v15 = v31 + 2;
          int v77 = v31[1] & 0x3F | ((v76 & 0x1F) << 6);
          *(_DWORD *)(v15 + 64) = v77;
          unsigned int v76 = v77;
        }
      }
      if (v18 < 0x48)
      {
        if (v14)
        {
          if (v34)
          {
            unint64_t v236 = *v16;
            v237 = *(unsigned __int8 **)(v15 + 80);
            int v238 = 1;
            while ((unint64_t)v237 < v236)
            {
              *(void *)(v15 + 80) = v237 + 1;
              unsigned int v239 = *v237;
              if (v239 < 0xC0)
              {
                ++v237;
              }
              else if ((v239 & 0x20) != 0)
              {
                int v241 = v237[1] & 0x3F;
                if ((v239 & 0x10) != 0)
                {
                  if ((v239 & 8) != 0)
                  {
                    int v242 = v237[2] & 0x3F;
                    int v243 = v237[3] & 0x3F;
                    int v244 = v237[4] & 0x3F;
                    if ((v239 & 4) != 0)
                    {
                      unsigned int v239 = ((v239 & 1) << 30) | (v241 << 24) | (v242 << 18) | (v243 << 12) | (v244 << 6) | v237[5] & 0x3F;
                      v237 += 6;
                    }
                    else
                    {
                      unsigned int v239 = ((v239 & 3) << 24) | (v241 << 18) | (v242 << 12) | (v243 << 6) | v244;
                      v237 += 5;
                    }
                  }
                  else
                  {
                    unsigned int v239 = ((v239 & 7) << 18) | (v241 << 12) | ((v237[2] & 0x3F) << 6) | v237[3] & 0x3F;
                    v237 += 4;
                  }
                }
                else
                {
                  unsigned int v239 = ((v239 & 0xF) << 12) | (v241 << 6) | v237[2] & 0x3F;
                  v237 += 3;
                }
                *(void *)(v15 + 80) = v237;
              }
              else
              {
                *(void *)(v15 + 80) = v237 + 2;
                int v240 = v237[1] & 0x3F | ((v239 & 0x1F) << 6);
                v237 += 2;
                unsigned int v239 = v240;
              }
              if (v76 == v239) {
                goto LABEL_1192;
              }
              if (++v238 > v34) {
                goto LABEL_508;
              }
            }
            unsigned int v64 = (unsigned __int16)*v1350;
            if (!*v1350) {
              goto LABEL_1192;
            }
            if ((unint64_t)v237 > *v1348) {
              goto LABEL_1191;
            }
            goto LABEL_1190;
          }
        }
        else if (v34)
        {
          uint64_t v254 = 0;
          unint64_t v255 = *v16;
          v256 = *(unsigned __int8 **)(v15 + 80);
          while (1)
          {
            BOOL v51 = &v256[v254];
            if ((unint64_t)&v256[v254] >= v255) {
              break;
            }
            *(void *)(v15 + 80) = v51 + 1;
            if (v76 == *v51) {
              goto LABEL_1192;
            }
            if ((int)++v254 + 1 > v34) {
              goto LABEL_508;
            }
          }
          unsigned int v64 = (unsigned __int16)*v1350;
          if (!*v1350) {
            goto LABEL_1192;
          }
          goto LABEL_585;
        }
LABEL_508:
        if (v35 == v34) {
          goto LABEL_2500;
        }
        if (v12)
        {
          v257 = *(unsigned __int8 **)(v15 + 80);
          *(void *)(v15 + 8) = v257;
          v258 = v257;
          BOOL v259 = v35 >= v34;
          unsigned int v260 = v35 - v34;
          if (v14)
          {
            if (v260 == 0 || !v259) {
              goto LABEL_988;
            }
            unint64_t v261 = *v16;
            v258 = v257;
            while ((unint64_t)v258 < v261)
            {
              unsigned int v262 = *v258;
              if (v262 < 0xC0)
              {
                uint64_t v264 = 1;
              }
              else
              {
                int v263 = v258[1] & 0x3F;
                if ((v262 & 0x20) != 0)
                {
                  if ((v262 & 0x10) != 0)
                  {
                    if ((v262 & 8) != 0)
                    {
                      int v265 = v258[2] & 0x3F;
                      int v266 = v258[3] & 0x3F;
                      int v267 = v258[4] & 0x3F;
                      if ((v262 & 4) != 0)
                      {
                        unsigned int v262 = ((v262 & 1) << 30) | (v263 << 24) | (v265 << 18) | (v266 << 12) | (v267 << 6) | v258[5] & 0x3F;
                        uint64_t v264 = 6;
                      }
                      else
                      {
                        unsigned int v262 = ((v262 & 3) << 24) | (v263 << 18) | (v265 << 12) | (v266 << 6) | v267;
                        uint64_t v264 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v262 = ((v262 & 7) << 18) | (v263 << 12) | ((v258[2] & 0x3F) << 6) | v258[3] & 0x3F;
                      uint64_t v264 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v262 = ((v262 & 0xF) << 12) | (v263 << 6) | v258[2] & 0x3F;
                    uint64_t v264 = 3;
                  }
                }
                else
                {
                  uint64_t v264 = 2;
                  unsigned int v262 = v258[1] & 0x3F | ((v262 & 0x1F) << 6);
                }
              }
              if (v76 != v262)
              {
                v258 += v264;
                *(void *)(v15 + 80) = v258;
                if (--v260) {
                  continue;
                }
              }
              goto LABEL_988;
            }
            if ((unsigned int v460 = (unsigned __int16)*v1350, !*v1350)
              || (unint64_t)v258 <= *v1348 && !*v1345
              || (_DWORD *v1346 = 1, v460 <= 1))
            {
LABEL_988:
              if (v12 != 2)
              {
LABEL_3263:
                if (v258 > v257)
                {
                  v1336 = a3;
                  unsigned int i = v12;
                  LODWORD(v12) = 0;
                  a2 = *(unsigned __int8 **)v15;
                  char v1302 = -49;
                  goto LABEL_3333;
                }
              }
              goto LABEL_2500;
            }
          }
          else
          {
            if (v260 == 0 || !v259) {
              goto LABEL_1000;
            }
            unint64_t v286 = *v16;
            v258 = v257;
            while ((unint64_t)v258 < v286)
            {
              if (v76 != *v258)
              {
                *(void *)(v15 + 80) = ++v258;
                if (--v260) {
                  continue;
                }
              }
              goto LABEL_1000;
            }
            if ((unsigned int v462 = (unsigned __int16)*v1350, !*v1350)
              || (unint64_t)v258 <= *v1348 && !*v1345
              || (_DWORD *v1346 = 1, v462 <= 1))
            {
LABEL_1000:
              if (v12 != 2)
              {
LABEL_3244:
                if (v258 != v257)
                {
                  v1336 = a3;
                  unsigned int i = v12;
                  LODWORD(v12) = 0;
                  a2 = *(unsigned __int8 **)v15;
                  char v1302 = 32;
                  goto LABEL_3333;
                }
              }
              goto LABEL_2500;
            }
          }
          return 4294967294;
        }
        v1336 = a3;
        unsigned int i = 0;
        if (v14)
        {
LABEL_3392:
          char v1302 = -50;
          goto LABEL_3333;
        }
LABEL_3389:
        LODWORD(v12) = 0;
        char v1302 = 31;
        goto LABEL_3333;
      }
      if (v1344 && v76 >= 0x80) {
        unsigned int v235 = *(_DWORD *)&_pcre2_ucd_records_8[12
      }
                                              * _pcre2_ucd_stage2_8[v76 & 0x7F | (_pcre2_ucd_stage1_8[v76 >> 7] << 7)]
                                              + 4]
             + v76;
      else {
        unsigned int v235 = *(unsigned __int8 *)(*(void *)(v7 + 96) + v76);
      }
      *(_DWORD *)(v15 + 68) = v235;
      if (v14)
      {
        if (v34)
        {
          unint64_t v245 = *v16;
          unint64_t v40 = *(unsigned __int8 **)(v15 + 80);
          int v246 = 1;
          while ((unint64_t)v40 < v245)
          {
            *(void *)(v15 + 80) = v40 + 1;
            unsigned int v247 = *v40;
            if (v247 < 0xC0)
            {
              ++v40;
            }
            else if ((v247 & 0x20) != 0)
            {
              int v249 = v40[1] & 0x3F;
              if ((v247 & 0x10) != 0)
              {
                if ((v247 & 8) != 0)
                {
                  int v250 = v40[2] & 0x3F;
                  int v251 = v40[3] & 0x3F;
                  int v252 = v40[4] & 0x3F;
                  if ((v247 & 4) != 0)
                  {
                    unsigned int v247 = ((v247 & 1) << 30) | (v249 << 24) | (v250 << 18) | (v251 << 12) | (v252 << 6) | v40[5] & 0x3F;
                    v40 += 6;
                  }
                  else
                  {
                    unsigned int v247 = ((v247 & 3) << 24) | (v249 << 18) | (v250 << 12) | (v251 << 6) | v252;
                    v40 += 5;
                  }
                }
                else
                {
                  unsigned int v247 = ((v247 & 7) << 18) | (v249 << 12) | ((v40[2] & 0x3F) << 6) | v40[3] & 0x3F;
                  v40 += 4;
                }
              }
              else
              {
                unsigned int v247 = ((v247 & 0xF) << 12) | (v249 << 6) | v40[2] & 0x3F;
                v40 += 3;
              }
              *(void *)(v15 + 80) = v40;
            }
            else
            {
              *(void *)(v15 + 80) = v40 + 2;
              int v248 = v40[1] & 0x3F | ((v247 & 0x1F) << 6);
              v40 += 2;
              unsigned int v247 = v248;
            }
            if (v76 == v247 || v235 == v247) {
              goto LABEL_1192;
            }
            if (++v246 > v34) {
              goto LABEL_537;
            }
          }
          unsigned int v64 = (unsigned __int16)*v1350;
          if (!*v1350) {
            goto LABEL_1192;
          }
LABEL_582:
          if ((unint64_t)v40 > *v1348) {
            goto LABEL_1191;
          }
          goto LABEL_1190;
        }
      }
      else if (v34)
      {
        uint64_t v268 = 0;
        unint64_t v269 = *v16;
        v270 = *(unsigned __int8 **)(v15 + 80);
        while (1)
        {
          v271 = &v270[v268];
          if ((unint64_t)&v270[v268] >= v269) {
            break;
          }
          int v272 = *v271;
          if (v76 == v272 || v235 == v272) {
            goto LABEL_1192;
          }
          *(void *)(v15 + 80) = &v270[++v268];
          if ((int)v268 + 1 > v34) {
            goto LABEL_537;
          }
        }
        unsigned int v64 = (unsigned __int16)*v1350;
        if (!*v1350) {
          goto LABEL_1192;
        }
        if ((unint64_t)v271 > *v1348) {
          goto LABEL_1191;
        }
        goto LABEL_1190;
      }
LABEL_537:
      if (v35 == v34) {
        goto LABEL_2500;
      }
      if (v12)
      {
        v274 = *(unsigned __int8 **)(v15 + 80);
        *(void *)(v15 + 8) = v274;
        v275 = v274;
        BOOL v276 = v35 >= v34;
        unsigned int v277 = v35 - v34;
        if (v14)
        {
          if (v277 == 0 || !v276) {
            goto LABEL_994;
          }
          unint64_t v278 = *v16;
          v275 = v274;
          while ((unint64_t)v275 < v278)
          {
            unsigned int v279 = *v275;
            if (v279 < 0xC0)
            {
              uint64_t v281 = 1;
            }
            else
            {
              int v280 = v275[1] & 0x3F;
              if ((v279 & 0x20) != 0)
              {
                if ((v279 & 0x10) != 0)
                {
                  if ((v279 & 8) != 0)
                  {
                    int v282 = v275[2] & 0x3F;
                    int v283 = v275[3] & 0x3F;
                    int v284 = v275[4] & 0x3F;
                    if ((v279 & 4) != 0)
                    {
                      unsigned int v279 = ((v279 & 1) << 30) | (v280 << 24) | (v282 << 18) | (v283 << 12) | (v284 << 6) | v275[5] & 0x3F;
                      uint64_t v281 = 6;
                    }
                    else
                    {
                      unsigned int v279 = ((v279 & 3) << 24) | (v280 << 18) | (v282 << 12) | (v283 << 6) | v284;
                      uint64_t v281 = 5;
                    }
                  }
                  else
                  {
                    unsigned int v279 = ((v279 & 7) << 18) | (v280 << 12) | ((v275[2] & 0x3F) << 6) | v275[3] & 0x3F;
                    uint64_t v281 = 4;
                  }
                }
                else
                {
                  unsigned int v279 = ((v279 & 0xF) << 12) | (v280 << 6) | v275[2] & 0x3F;
                  uint64_t v281 = 3;
                }
              }
              else
              {
                uint64_t v281 = 2;
                unsigned int v279 = v275[1] & 0x3F | ((v279 & 0x1F) << 6);
              }
            }
            if (v76 != v279 && v235 != v279)
            {
              v275 += v281;
              *(void *)(v15 + 80) = v275;
              if (--v277) {
                continue;
              }
            }
            goto LABEL_994;
          }
          if ((unsigned int v461 = (unsigned __int16)*v1350, !*v1350)
            || (unint64_t)v275 <= *v1348 && !*v1345
            || (_DWORD *v1346 = 1, v461 <= 1))
          {
LABEL_994:
            if (v12 != 2)
            {
LABEL_3259:
              if (v275 > v274)
              {
                v1336 = a3;
                unsigned int i = v12;
                LODWORD(v12) = 0;
                a2 = *(unsigned __int8 **)v15;
                char v1302 = -51;
                goto LABEL_3333;
              }
            }
            goto LABEL_2500;
          }
        }
        else
        {
          if (v277 == 0 || !v276) {
            goto LABEL_1006;
          }
          unint64_t v287 = *v16;
          v275 = v274;
          while ((unint64_t)v275 < v287)
          {
            int v288 = *v275;
            if (v76 != v288 && v235 != v288)
            {
              *(void *)(v15 + 80) = ++v275;
              if (--v277) {
                continue;
              }
            }
            goto LABEL_1006;
          }
          if ((unsigned int v463 = (unsigned __int16)*v1350, !*v1350)
            || (unint64_t)v275 <= *v1348 && !*v1345
            || (_DWORD *v1346 = 1, v463 <= 1))
          {
LABEL_1006:
            if (v12 != 2)
            {
LABEL_3242:
              if (v275 != v274)
              {
                v1336 = a3;
                unsigned int i = v12;
                LODWORD(v12) = 0;
                a2 = *(unsigned __int8 **)v15;
                char v1302 = 30;
                goto LABEL_3333;
              }
            }
            goto LABEL_2500;
          }
        }
        return 4294967294;
      }
      v1336 = a3;
      unsigned int i = 0;
      if (!v14)
      {
LABEL_3447:
        LODWORD(v12) = 0;
        char v1302 = 29;
        goto LABEL_3333;
      }
LABEL_3448:
      char v1302 = -52;
      goto LABEL_3333;
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Au:
      int v45 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      unsigned int v46 = *a2 - 85;
      unsigned int v47 = rep_min[v46];
      *(_DWORD *)(v15 + 56) = v47;
      *(_DWORD *)(v15 + 60) = rep_max[v46];
      uint64_t v12 = rep_typ[v46];
      goto LABEL_334;
    case 0x5Bu:
    case 0x5Cu:
      unsigned int v47 = 0;
      *(_DWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 60) = __rev16(*(unsigned __int16 *)(a2 + 1));
      uint64_t v12 = *a2 != 92;
      goto LABEL_326;
    case 0x5Du:
      unsigned int v47 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v15 + 56) = v47;
      *(_DWORD *)(v15 + 60) = v47;
LABEL_326:
      int v45 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      goto LABEL_334;
    case 0x5Eu:
      unsigned int v47 = 0;
      unint64_t v174 = 0xFFFFFFFF00000000;
      goto LABEL_331;
    case 0x5Fu:
      *(void *)(v15 + 56) = 0xFFFFFFFF00000001;
      long long v175 = (unsigned int *)(v15 + 56);
      *(void *)uint64_t v15 = a2 + 2;
      int v176 = a2[1];
      *(_DWORD *)(v15 + 64) = v176;
      unsigned int v177 = (int *)(v15 + 64);
      if ((v176 - 15) <= 1)
      {
        *(void *)uint64_t v15 = a2 + 3;
        int v178 = a2[2];
        *(void *)uint64_t v15 = a2 + 4;
        uint64_t v179 = a2[3];
        *(_DWORD *)(v15 + 68) = v179;
        uint64_t v12 = 2;
        unsigned int v47 = 1;
        goto LABEL_336;
      }
      uint64_t v12 = 2;
      unsigned int v47 = 1;
      goto LABEL_375;
    case 0x60u:
      unsigned int v47 = 0;
      unint64_t v174 = 0x100000000;
LABEL_331:
      *(void *)(v15 + 56) = v174;
      int v45 = a2 + 1;
      goto LABEL_333;
    case 0x61u:
      unsigned int v47 = 0;
      *(_DWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 60) = __rev16(*(unsigned __int16 *)(a2 + 1));
      int v45 = a2 + 3;
LABEL_333:
      *(void *)uint64_t v15 = v45;
      uint64_t v12 = 2;
LABEL_334:
      *(void *)uint64_t v15 = v45 + 1;
      int v176 = *v45;
      *(_DWORD *)(v15 + 64) = v176;
      unsigned int v177 = (int *)(v15 + 64);
      if ((v176 - 15) < 2)
      {
        *(void *)uint64_t v15 = v45 + 2;
        int v178 = v45[1];
        *(void *)uint64_t v15 = v45 + 3;
        uint64_t v179 = v45[2];
        *(_DWORD *)(v15 + 68) = v179;
        if (!v47) {
          goto LABEL_1366;
        }
LABEL_336:
        int v180 = v176;
        switch(v178)
        {
          case 0:
            if (v176 == 15) {
              goto LABEL_1141;
            }
            unint64_t v349 = *v16;
            v350 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v351 = 1;
            while ((unint64_t)v350 < v349)
            {
              v352 = v350 + 1;
              *(void *)(v15 + 80) = v350 + 1;
              if (v14)
              {
                unsigned int v353 = *v350;
                if (v353 >= 0xC0)
                {
                  uint64_t v354 = 2;
                  uint64_t v355 = 3;
                  uint64_t v356 = 4;
                  uint64_t v357 = 5;
                  if ((v353 & 4) != 0) {
                    uint64_t v357 = 6;
                  }
                  if ((v353 & 8) != 0) {
                    uint64_t v356 = v357;
                  }
                  if ((v353 & 0x10) != 0) {
                    uint64_t v355 = v356;
                  }
                  if ((v353 & 0x20) != 0) {
                    uint64_t v354 = v355;
                  }
                  v352 = &v350[v354];
                  *(void *)(v15 + 80) = v352;
                }
              }
              ++v351;
              v350 = v352;
              if (v351 > v47) {
                goto LABEL_1366;
              }
            }
            goto LABEL_1089;
          case 1:
            unint64_t v358 = *v16;
            v359 = *(unsigned __int8 **)(v15 + 80);
            int v360 = 1;
            while (2)
            {
              if ((unint64_t)v359 < v358)
              {
                *(void *)(v15 + 80) = v359 + 1;
                unsigned int v361 = *v359;
                if (!v14 || v361 < 0xC0)
                {
                  ++v359;
                  goto LABEL_769;
                }
                if ((v361 & 0x20) == 0)
                {
                  *(void *)(v15 + 80) = v359 + 2;
                  int v362 = v359[1] & 0x3F | ((v361 & 0x1F) << 6);
                  v359 += 2;
                  unsigned int v361 = v362;
                  goto LABEL_769;
                }
                int v363 = v359[1] & 0x3F;
                if ((v361 & 0x10) != 0)
                {
                  if ((v361 & 8) != 0)
                  {
                    int v364 = v359[2] & 0x3F;
                    int v365 = v359[3] & 0x3F;
                    int v366 = v359[4] & 0x3F;
                    if ((v361 & 4) != 0)
                    {
                      unsigned int v361 = ((v361 & 1) << 30) | (v363 << 24) | (v364 << 18) | (v365 << 12) | (v366 << 6) | v359[5] & 0x3F;
                      v359 += 6;
                    }
                    else
                    {
                      unsigned int v361 = ((v361 & 3) << 24) | (v363 << 18) | (v364 << 12) | (v365 << 6) | v366;
                      v359 += 5;
                    }
                    *(void *)(v15 + 80) = v359;
                    uint64_t v16 = v1349;
LABEL_769:
                    unsigned int v367 = _pcre2_ucd_records_8[12
                                              * _pcre2_ucd_stage2_8[v361 & 0x7F | (_pcre2_ucd_stage1_8[v361 >> 7] << 7)]
                                              + 1];
                    BOOL v105 = v367 > 9;
                    int v368 = (1 << v367) & 0x320;
                    if (v105 || v368 == 0)
                    {
                      if (v176 != 15) {
                        goto LABEL_1141;
                      }
                      int v180 = 15;
                    }
                    else if (v180 == 15)
                    {
                      goto LABEL_1141;
                    }
                    if (++v360 > v47) {
                      goto LABEL_1366;
                    }
                    continue;
                  }
                  unsigned int v361 = ((v361 & 7) << 18) | (v363 << 12) | ((v359[2] & 0x3F) << 6) | v359[3] & 0x3F;
                  v359 += 4;
                }
                else
                {
                  unsigned int v361 = ((v361 & 0xF) << 12) | (v363 << 6) | v359[2] & 0x3F;
                  v359 += 3;
                }
                *(void *)(v15 + 80) = v359;
                goto LABEL_769;
              }
              break;
            }
            unsigned int v413 = (unsigned __int16)*v1350;
            if (!*v1350) {
              goto LABEL_1141;
            }
            if ((unint64_t)v359 > *v1348) {
              goto LABEL_1140;
            }
            goto LABEL_1139;
          case 2:
            unint64_t v370 = *v16;
            v371 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v372 = 1;
            while (2)
            {
              if ((unint64_t)v371 < v370)
              {
                *(void *)(v15 + 80) = v371 + 1;
                unsigned int v373 = *v371;
                if (v14 && v373 >= 0xC0)
                {
                  if ((v373 & 0x20) != 0)
                  {
                    int v375 = v371[1] & 0x3F;
                    if ((v373 & 0x10) != 0)
                    {
                      if ((v373 & 8) != 0)
                      {
                        int v376 = v371[2] & 0x3F;
                        int v377 = v371[3] & 0x3F;
                        int v378 = v371[4] & 0x3F;
                        if ((v373 & 4) != 0)
                        {
                          unsigned int v373 = ((v373 & 1) << 30) | (v375 << 24) | (v376 << 18) | (v377 << 12) | (v378 << 6) | v371[5] & 0x3F;
                          v371 += 6;
                        }
                        else
                        {
                          unsigned int v373 = ((v373 & 3) << 24) | (v375 << 18) | (v376 << 12) | (v377 << 6) | v378;
                          v371 += 5;
                        }
                      }
                      else
                      {
                        unsigned int v373 = ((v373 & 7) << 18) | (v375 << 12) | ((v371[2] & 0x3F) << 6) | v371[3] & 0x3F;
                        v371 += 4;
                      }
                    }
                    else
                    {
                      unsigned int v373 = ((v373 & 0xF) << 12) | (v375 << 6) | v371[2] & 0x3F;
                      v371 += 3;
                    }
                    *(void *)(v15 + 80) = v371;
                  }
                  else
                  {
                    *(void *)(v15 + 80) = v371 + 2;
                    int v374 = v371[1] & 0x3F | ((v373 & 0x1F) << 6);
                    v371 += 2;
                    unsigned int v373 = v374;
                  }
                }
                else
                {
                  ++v371;
                }
                if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                              * _pcre2_ucd_stage2_8[v373 & 0x7F | (_pcre2_ucd_stage1_8[v373 >> 7] << 7)]
                                                              + 1]] != v179) == (v176 == 15))
                {
                  ++v372;
                  uint64_t v16 = v1349;
                  if (v372 > v47) {
                    goto LABEL_1366;
                  }
                  continue;
                }
LABEL_953:
                uint64_t v20 = 0;
                uint64_t v16 = v1349;
                goto LABEL_2502;
              }
              break;
            }
            unsigned int v413 = (unsigned __int16)*v1350;
            if (!*v1350) {
              goto LABEL_1141;
            }
            if ((unint64_t)v371 <= *v1348) {
              goto LABEL_1139;
            }
            goto LABEL_1140;
          case 3:
            unint64_t v379 = *v16;
            long long v182 = *(unsigned __int8 **)(v15 + 80);
            int v380 = 1;
            while (2)
            {
              if ((unint64_t)v182 >= v379) {
                goto LABEL_879;
              }
              *(void *)(v15 + 80) = v182 + 1;
              unsigned int v381 = *v182;
              if (!v14 || v381 < 0xC0)
              {
                ++v182;
                goto LABEL_813;
              }
              if ((v381 & 0x20) == 0)
              {
                *(void *)(v15 + 80) = v182 + 2;
                int v382 = v182[1] & 0x3F | ((v381 & 0x1F) << 6);
                v182 += 2;
                unsigned int v381 = v382;
                goto LABEL_813;
              }
              int v383 = v182[1] & 0x3F;
              if ((v381 & 0x10) != 0)
              {
                if ((v381 & 8) != 0)
                {
                  int v384 = v182[2] & 0x3F;
                  int v385 = v182[3] & 0x3F;
                  int v386 = v182[4] & 0x3F;
                  if ((v381 & 4) != 0)
                  {
                    unsigned int v381 = ((v381 & 1) << 30) | (v383 << 24) | (v384 << 18) | (v385 << 12) | (v386 << 6) | v182[5] & 0x3F;
                    v182 += 6;
                  }
                  else
                  {
                    unsigned int v381 = ((v381 & 3) << 24) | (v383 << 18) | (v384 << 12) | (v385 << 6) | v386;
                    v182 += 5;
                  }
                  *(void *)(v15 + 80) = v182;
                  uint64_t v16 = v1349;
LABEL_813:
                  if ((v179 != _pcre2_ucd_records_8[12
                                                   * _pcre2_ucd_stage2_8[v381 & 0x7F | (_pcre2_ucd_stage1_8[v381 >> 7] << 7)]
                                                   + 1]) != (v176 == 15))
                    goto LABEL_1141;
                  if (++v380 > v47) {
                    goto LABEL_1366;
                  }
                  continue;
                }
                unsigned int v381 = ((v381 & 7) << 18) | (v383 << 12) | ((v182[2] & 0x3F) << 6) | v182[3] & 0x3F;
                v182 += 4;
              }
              else
              {
                unsigned int v381 = ((v381 & 0xF) << 12) | (v383 << 6) | v182[2] & 0x3F;
                v182 += 3;
              }
              break;
            }
            *(void *)(v15 + 80) = v182;
            goto LABEL_813;
          case 4:
            unint64_t v387 = *v16;
            long long v182 = *(unsigned __int8 **)(v15 + 80);
            int v388 = 1;
            while (2)
            {
              if ((unint64_t)v182 >= v387) {
                goto LABEL_879;
              }
              *(void *)(v15 + 80) = v182 + 1;
              unsigned int v389 = *v182;
              if (!v14 || v389 < 0xC0)
              {
                ++v182;
                goto LABEL_832;
              }
              if ((v389 & 0x20) == 0)
              {
                *(void *)(v15 + 80) = v182 + 2;
                int v390 = v182[1] & 0x3F | ((v389 & 0x1F) << 6);
                v182 += 2;
                unsigned int v389 = v390;
                goto LABEL_832;
              }
              int v391 = v182[1] & 0x3F;
              if ((v389 & 0x10) != 0)
              {
                if ((v389 & 8) != 0)
                {
                  int v392 = v182[2] & 0x3F;
                  int v393 = v182[3] & 0x3F;
                  int v394 = v182[4] & 0x3F;
                  if ((v389 & 4) != 0)
                  {
                    unsigned int v389 = ((v389 & 1) << 30) | (v391 << 24) | (v392 << 18) | (v393 << 12) | (v394 << 6) | v182[5] & 0x3F;
                    v182 += 6;
                  }
                  else
                  {
                    unsigned int v389 = ((v389 & 3) << 24) | (v391 << 18) | (v392 << 12) | (v393 << 6) | v394;
                    v182 += 5;
                  }
                  *(void *)(v15 + 80) = v182;
                  uint64_t v16 = v1349;
LABEL_832:
                  if ((v179 != _pcre2_ucd_records_8[12
                                                   * _pcre2_ucd_stage2_8[v389 & 0x7F | (_pcre2_ucd_stage1_8[v389 >> 7] << 7)]]) != (v176 == 15))
                    goto LABEL_1141;
                  if (++v388 > v47) {
                    goto LABEL_1366;
                  }
                  continue;
                }
                unsigned int v389 = ((v389 & 7) << 18) | (v391 << 12) | ((v182[2] & 0x3F) << 6) | v182[3] & 0x3F;
                v182 += 4;
              }
              else
              {
                unsigned int v389 = ((v389 & 0xF) << 12) | (v391 << 6) | v182[2] & 0x3F;
                v182 += 3;
              }
              break;
            }
            *(void *)(v15 + 80) = v182;
            goto LABEL_832;
          case 5:
            unint64_t v395 = *v16;
            long long v182 = *(unsigned __int8 **)(v15 + 80);
            int v396 = 1;
            while (2)
            {
              if ((unint64_t)v182 >= v395) {
                goto LABEL_879;
              }
              *(void *)(v15 + 80) = v182 + 1;
              unsigned int v397 = *v182;
              if (!v14 || v397 < 0xC0)
              {
                ++v182;
                goto LABEL_851;
              }
              if ((v397 & 0x20) == 0)
              {
                *(void *)(v15 + 80) = v182 + 2;
                int v398 = v182[1] & 0x3F | ((v397 & 0x1F) << 6);
                v182 += 2;
                unsigned int v397 = v398;
                goto LABEL_851;
              }
              int v399 = v182[1] & 0x3F;
              if ((v397 & 0x10) != 0)
              {
                if ((v397 & 8) != 0)
                {
                  int v400 = v182[2] & 0x3F;
                  int v401 = v182[3] & 0x3F;
                  int v402 = v182[4] & 0x3F;
                  if ((v397 & 4) != 0)
                  {
                    unsigned int v397 = ((v397 & 1) << 30) | (v399 << 24) | (v400 << 18) | (v401 << 12) | (v402 << 6) | v182[5] & 0x3F;
                    v182 += 6;
                  }
                  else
                  {
                    unsigned int v397 = ((v397 & 3) << 24) | (v399 << 18) | (v400 << 12) | (v401 << 6) | v402;
                    v182 += 5;
                  }
                  *(void *)(v15 + 80) = v182;
                  uint64_t v16 = v1349;
LABEL_851:
                  if (((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                 * _pcre2_ucd_stage2_8[v397 & 0x7F | (_pcre2_ucd_stage1_8[v397 >> 7] << 7)]
                                                                 + 1]] & 0xFFFFFFFD) != 1) != (v176 == 15))
                    goto LABEL_1141;
                  if (++v396 > v47) {
                    goto LABEL_1366;
                  }
                  continue;
                }
                unsigned int v397 = ((v397 & 7) << 18) | (v399 << 12) | ((v182[2] & 0x3F) << 6) | v182[3] & 0x3F;
                v182 += 4;
              }
              else
              {
                unsigned int v397 = ((v397 & 0xF) << 12) | (v399 << 6) | v182[2] & 0x3F;
                v182 += 3;
              }
              break;
            }
            *(void *)(v15 + 80) = v182;
            goto LABEL_851;
          case 6:
          case 7:
            unint64_t v181 = *v16;
            long long v182 = *(unsigned __int8 **)(v15 + 80);
            int v183 = 1;
            while (2)
            {
              if ((unint64_t)v182 >= v181) {
                goto LABEL_879;
              }
              *(void *)(v15 + 80) = v182 + 1;
              int v184 = *v182;
              if (!v14 || v184 < 0xC0)
              {
                ++v182;
                goto LABEL_353;
              }
              if ((v184 & 0x20) == 0)
              {
                *(void *)(v15 + 80) = v182 + 2;
                int v185 = v182[1] & 0x3F | ((v184 & 0x1F) << 6);
                v182 += 2;
                int v184 = v185;
                goto LABEL_353;
              }
              int v186 = v182[1] & 0x3F;
              if ((v184 & 0x10) != 0)
              {
                if ((v184 & 8) != 0)
                {
                  int v187 = v182[2] & 0x3F;
                  int v188 = v182[3] & 0x3F;
                  int v189 = v182[4] & 0x3F;
                  if ((v184 & 4) != 0)
                  {
                    int v184 = ((v184 & 1) << 30) | (v186 << 24) | (v187 << 18) | (v188 << 12) | (v189 << 6) | v182[5] & 0x3F;
                    v182 += 6;
                  }
                  else
                  {
                    int v184 = ((v184 & 3) << 24) | (v186 << 18) | (v187 << 12) | (v188 << 6) | v189;
                    v182 += 5;
                  }
                  *(void *)(v15 + 80) = v182;
                  uint64_t v16 = v1349;
LABEL_353:
                  if (v184 < 0x2000)
                  {
                    if (v184 > 132)
                    {
                      if (v184 > 5759)
                      {
                        if (v184 != 5760 && v184 != 6158) {
                          goto LABEL_371;
                        }
                      }
                      else if (v184 != 133 && v184 != 160)
                      {
                        goto LABEL_371;
                      }
                    }
                    else if (v184 > 0x20 || ((1 << v184) & 0x100003E00) == 0)
                    {
                      goto LABEL_371;
                    }
                  }
                  else if ((v184 - 0x2000) >= 0xB {
                         && ((v184 - 8232) > 0x37
                  }
                          || ((1 << (v184 - 40)) & 0x80000000000083) == 0)
                         && v184 != 12288)
                  {
LABEL_371:
                    if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                  * _pcre2_ucd_stage2_8[v184 & 0x7F | (_pcre2_ucd_stage1_8[v184 >> 7] << 7)]
                                                                  + 1]] != 6) != (v176 == 15))
                      goto LABEL_1141;
                    goto LABEL_363;
                  }
                  if (v176 == 15) {
                    goto LABEL_1141;
                  }
LABEL_363:
                  if (++v183 > v47) {
                    goto LABEL_1366;
                  }
                  continue;
                }
                int v184 = ((v184 & 7) << 18) | (v186 << 12) | ((v182[2] & 0x3F) << 6) | v182[3] & 0x3F;
                v182 += 4;
              }
              else
              {
                int v184 = ((v184 & 0xF) << 12) | (v186 << 6) | v182[2] & 0x3F;
                v182 += 3;
              }
              break;
            }
            *(void *)(v15 + 80) = v182;
            goto LABEL_353;
          case 8:
            unint64_t v403 = *v16;
            long long v182 = *(unsigned __int8 **)(v15 + 80);
            int v404 = 1;
            while (2)
            {
              if ((unint64_t)v182 < v403)
              {
                *(void *)(v15 + 80) = v182 + 1;
                unsigned int v405 = *v182;
                if (!v14 || v405 < 0xC0)
                {
                  ++v182;
                  goto LABEL_870;
                }
                if ((v405 & 0x20) == 0)
                {
                  *(void *)(v15 + 80) = v182 + 2;
                  int v406 = v182[1] & 0x3F | ((v405 & 0x1F) << 6);
                  v182 += 2;
                  unsigned int v405 = v406;
                  goto LABEL_870;
                }
                int v407 = v182[1] & 0x3F;
                if ((v405 & 0x10) != 0)
                {
                  if ((v405 & 8) != 0)
                  {
                    int v408 = v182[2] & 0x3F;
                    int v409 = v182[3] & 0x3F;
                    int v410 = v182[4] & 0x3F;
                    if ((v405 & 4) != 0)
                    {
                      unsigned int v405 = ((v405 & 1) << 30) | (v407 << 24) | (v408 << 18) | (v409 << 12) | (v410 << 6) | v182[5] & 0x3F;
                      v182 += 6;
                    }
                    else
                    {
                      unsigned int v405 = ((v405 & 3) << 24) | (v407 << 18) | (v408 << 12) | (v409 << 6) | v410;
                      v182 += 5;
                    }
                    *(void *)(v15 + 80) = v182;
                    uint64_t v16 = v1349;
LABEL_870:
                    BOOL v412 = v405 == 95
                        || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v405 & 0x7F | (_pcre2_ucd_stage1_8[v405 >> 7] << 7)]
                                                                    + 1]] & 0xFFFFFFFD) == 1;
                    if (((v176 != 15) ^ v412)) {
                      goto LABEL_1141;
                    }
                    if (++v404 > v47) {
                      goto LABEL_1366;
                    }
                    continue;
                  }
                  unsigned int v405 = ((v405 & 7) << 18) | (v407 << 12) | ((v182[2] & 0x3F) << 6) | v182[3] & 0x3F;
                  v182 += 4;
                }
                else
                {
                  unsigned int v405 = ((v405 & 0xF) << 12) | (v407 << 6) | v182[2] & 0x3F;
                  v182 += 3;
                }
                *(void *)(v15 + 80) = v182;
                goto LABEL_870;
              }
              break;
            }
LABEL_879:
            unsigned int v413 = (unsigned __int16)*v1350;
            if (!*v1350) {
              goto LABEL_1141;
            }
            if ((unint64_t)v182 > *v1348) {
              goto LABEL_1140;
            }
            goto LABEL_1139;
          case 9:
            unint64_t v414 = *v16;
            v350 = *(unsigned __int8 **)(v15 + 80);
            v415 = &_pcre2_ucd_caseless_sets_8[v179];
            for (unsigned int j = 1; j <= v47; ++j)
            {
              if ((unint64_t)v350 >= v414)
              {
LABEL_1089:
                unsigned int v413 = (unsigned __int16)*v1350;
                if (!*v1350) {
                  goto LABEL_1141;
                }
                if ((unint64_t)v350 <= *v1348)
                {
LABEL_1139:
                  if (!*v1345) {
                    goto LABEL_1141;
                  }
                }
LABEL_1140:
                _DWORD *v1346 = 1;
                if (v413 <= 1) {
                  goto LABEL_1141;
                }
                return 4294967294;
              }
              *(void *)(v15 + 80) = v350 + 1;
              unsigned int v417 = *v350;
              if (v14 && v417 >= 0xC0)
              {
                if ((v417 & 0x20) != 0)
                {
                  int v419 = v350[1] & 0x3F;
                  if ((v417 & 0x10) != 0)
                  {
                    if ((v417 & 8) != 0)
                    {
                      int v420 = v350[2] & 0x3F;
                      int v421 = v350[3] & 0x3F;
                      int v422 = v350[4] & 0x3F;
                      if ((v417 & 4) != 0)
                      {
                        unsigned int v417 = ((v417 & 1) << 30) | (v419 << 24) | (v420 << 18) | (v421 << 12) | (v422 << 6) | v350[5] & 0x3F;
                        v350 += 6;
                      }
                      else
                      {
                        unsigned int v417 = ((v417 & 3) << 24) | (v419 << 18) | (v420 << 12) | (v421 << 6) | v422;
                        v350 += 5;
                      }
                    }
                    else
                    {
                      unsigned int v417 = ((v417 & 7) << 18) | (v419 << 12) | ((v350[2] & 0x3F) << 6) | v350[3] & 0x3F;
                      v350 += 4;
                    }
                  }
                  else
                  {
                    unsigned int v417 = ((v417 & 0xF) << 12) | (v419 << 6) | v350[2] & 0x3F;
                    v350 += 3;
                  }
                  *(void *)(v15 + 80) = v350;
                }
                else
                {
                  *(void *)(v15 + 80) = v350 + 2;
                  int v418 = v350[1] & 0x3F | ((v417 & 0x1F) << 6);
                  v350 += 2;
                  unsigned int v417 = v418;
                }
              }
              else
              {
                ++v350;
              }
              v423 = v415;
              do
              {
                unsigned int v424 = *v423;
                if (v417 < *v423)
                {
                  if (v176 == 15)
                  {
                    int v180 = 15;
                    goto LABEL_904;
                  }
                  goto LABEL_1995;
                }
                ++v423;
              }
              while (v417 != v424);
              if (v180 == 15) {
                goto LABEL_1995;
              }
LABEL_904:
              ;
            }
LABEL_1366:
            unsigned int v620 = *(_DWORD *)(v15 + 56);
            unsigned int v619 = *(_DWORD *)(v15 + 60);
            unsigned int v621 = v619 - v620;
            if (v619 == v620) {
              goto LABEL_2500;
            }
            if (!v12)
            {
              if ((v178 & 0x80000000) == 0)
              {
                v1336 = a3;
                LODWORD(v12) = 0;
                switch(v178)
                {
                  case 0:
                    goto LABEL_3390;
                  case 1:
                    goto LABEL_3394;
                  case 2:
                    goto LABEL_3395;
                  case 3:
                    goto LABEL_3396;
                  case 4:
                    goto LABEL_3397;
                  case 5:
                    goto LABEL_3398;
                  case 6:
                  case 7:
                    goto LABEL_3400;
                  case 8:
                    goto LABEL_3401;
                  case 9:
                    goto LABEL_3403;
                  case 10:
                    goto LABEL_3405;
                  default:
                    return 4294967252;
                }
              }
              if (*v177 == 22)
              {
                v1336 = a3;
                unsigned int i = 0;
                goto LABEL_3492;
              }
              LODWORD(v12) = 0;
              if (v14)
              {
LABEL_3460:
                v1336 = a3;
                unsigned int i = v12;
                LODWORD(v12) = 0;
                a2 = *(unsigned __int8 **)v15;
                char v1302 = -37;
                goto LABEL_3333;
              }
LABEL_3498:
              v1336 = a3;
              unsigned int i = v12;
              LODWORD(v12) = 0;
              a2 = *(unsigned __int8 **)v15;
              char v1302 = 33;
              goto LABEL_3333;
            }
            v622 = *(unsigned __int8 **)(v15 + 80);
            *(void *)(v15 + 8) = v622;
            if ((v178 & 0x80000000) == 0)
            {
              switch(v178)
              {
                case 0:
                  BOOL v259 = v619 >= v620;
                  unsigned int v656 = v619 - v620;
                  if (v656 == 0 || !v259) {
                    goto LABEL_1665;
                  }
                  unint64_t v657 = *v16;
                  while ((unint64_t)v622 < v657)
                  {
                    uint64_t v658 = 1;
                    if (v14)
                    {
                      unsigned int v659 = *v622;
                      uint64_t v660 = 2;
                      uint64_t v661 = 3;
                      uint64_t v662 = 4;
                      uint64_t v663 = 5;
                      if ((v659 & 4) != 0) {
                        uint64_t v663 = 6;
                      }
                      if ((v659 & 8) != 0) {
                        uint64_t v662 = v663;
                      }
                      if ((v659 & 0x10) != 0) {
                        uint64_t v661 = v662;
                      }
                      if ((v659 & 0x20) != 0) {
                        uint64_t v660 = v661;
                      }
                      if (v659 >= 0xC0) {
                        uint64_t v658 = v660;
                      }
                    }
                    if (*v177 != 15)
                    {
                      v622 += v658;
                      *(void *)(v15 + 80) = v622;
                      if (--v656) {
                        continue;
                      }
                    }
                    goto LABEL_1665;
                  }
                  goto LABEL_1661;
                case 1:
                  BOOL v259 = v619 >= v620;
                  unsigned int v664 = v619 - v620;
                  if (v664 == 0 || !v259) {
                    goto LABEL_1665;
                  }
                  unint64_t v665 = *v16;
                  while ((unint64_t)v622 < v665)
                  {
                    unsigned int v666 = *v622;
                    if (v14 && v666 >= 0xC0)
                    {
                      int v667 = v622[1] & 0x3F;
                      if ((v666 & 0x20) != 0)
                      {
                        if ((v666 & 0x10) != 0)
                        {
                          if ((v666 & 8) != 0)
                          {
                            int v671 = v622[2] & 0x3F;
                            int v672 = v622[3] & 0x3F;
                            int v673 = v622[4] & 0x3F;
                            if ((v666 & 4) != 0)
                            {
                              unsigned int v666 = ((v666 & 1) << 30) | (v667 << 24) | (v671 << 18) | (v672 << 12) | (v673 << 6) | v622[5] & 0x3F;
                              uint64_t v668 = 6;
                            }
                            else
                            {
                              unsigned int v666 = ((v666 & 3) << 24) | (v667 << 18) | (v671 << 12) | (v672 << 6) | v673;
                              uint64_t v668 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v666 = ((v666 & 7) << 18) | (v667 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v668 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v666 = ((v666 & 0xF) << 12) | (v667 << 6) | v622[2] & 0x3F;
                          uint64_t v668 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v668 = 2;
                        unsigned int v666 = v622[1] & 0x3F | ((v666 & 0x1F) << 6);
                      }
                    }
                    else
                    {
                      uint64_t v668 = 1;
                    }
                    unsigned int v669 = _pcre2_ucd_records_8[12
                                              * _pcre2_ucd_stage2_8[v666 & 0x7F | (_pcre2_ucd_stage1_8[v666 >> 7] << 7)]
                                              + 1];
                    if (v669 > 9 || ((1 << v669) & 0x320) == 0)
                    {
                      if (*v177 != 15) {
                        goto LABEL_1665;
                      }
                    }
                    else if (*v177 == 15)
                    {
                      goto LABEL_1665;
                    }
                    v622 += v668;
                    *(void *)(v15 + 80) = v622;
                    if (!--v664) {
                      goto LABEL_1665;
                    }
                  }
                  goto LABEL_1661;
                case 2:
                  BOOL v259 = v619 >= v620;
                  unsigned int v674 = v619 - v620;
                  if (v674 == 0 || !v259) {
                    goto LABEL_1665;
                  }
                  unint64_t v675 = *v16;
                  while ((unint64_t)v622 < v675)
                  {
                    unsigned int v676 = *v622;
                    uint64_t v677 = 1;
                    if (v14 && v676 >= 0xC0)
                    {
                      int v678 = v622[1] & 0x3F;
                      if ((v676 & 0x20) != 0)
                      {
                        if ((v676 & 0x10) != 0)
                        {
                          if ((v676 & 8) != 0)
                          {
                            int v679 = v622[2] & 0x3F;
                            int v680 = v622[3] & 0x3F;
                            int v681 = v622[4] & 0x3F;
                            if ((v676 & 4) != 0)
                            {
                              unsigned int v676 = ((v676 & 1) << 30) | (v678 << 24) | (v679 << 18) | (v680 << 12) | (v681 << 6) | v622[5] & 0x3F;
                              uint64_t v677 = 6;
                            }
                            else
                            {
                              unsigned int v676 = ((v676 & 3) << 24) | (v678 << 18) | (v679 << 12) | (v680 << 6) | v681;
                              uint64_t v677 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v676 = ((v676 & 7) << 18) | (v678 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v677 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v676 = ((v676 & 0xF) << 12) | (v678 << 6) | v622[2] & 0x3F;
                          uint64_t v677 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v677 = 2;
                        unsigned int v676 = v622[1] & 0x3F | ((v676 & 0x1F) << 6);
                      }
                    }
                    if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                  * _pcre2_ucd_stage2_8[v676 & 0x7F | (_pcre2_ucd_stage1_8[v676 >> 7] << 7)]
                                                                  + 1]] != *(_DWORD *)(v15 + 68)) == (*(_DWORD *)(v15 + 64) == 15))
                    {
                      v622 += v677;
                      *(void *)(v15 + 80) = v622;
                      if (--v674) {
                        continue;
                      }
                    }
                    goto LABEL_1665;
                  }
                  goto LABEL_1661;
                case 3:
                  BOOL v259 = v619 >= v620;
                  unsigned int v682 = v619 - v620;
                  if (v682 == 0 || !v259) {
                    goto LABEL_1665;
                  }
                  unint64_t v683 = *v16;
                  while ((unint64_t)v622 < v683)
                  {
                    unsigned int v684 = *v622;
                    uint64_t v685 = 1;
                    if (v14 && v684 >= 0xC0)
                    {
                      int v686 = v622[1] & 0x3F;
                      if ((v684 & 0x20) != 0)
                      {
                        if ((v684 & 0x10) != 0)
                        {
                          if ((v684 & 8) != 0)
                          {
                            int v687 = v622[2] & 0x3F;
                            int v688 = v622[3] & 0x3F;
                            int v689 = v622[4] & 0x3F;
                            if ((v684 & 4) != 0)
                            {
                              unsigned int v684 = ((v684 & 1) << 30) | (v686 << 24) | (v687 << 18) | (v688 << 12) | (v689 << 6) | v622[5] & 0x3F;
                              uint64_t v685 = 6;
                            }
                            else
                            {
                              unsigned int v684 = ((v684 & 3) << 24) | (v686 << 18) | (v687 << 12) | (v688 << 6) | v689;
                              uint64_t v685 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v684 = ((v684 & 7) << 18) | (v686 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v685 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v684 = ((v684 & 0xF) << 12) | (v686 << 6) | v622[2] & 0x3F;
                          uint64_t v685 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v685 = 2;
                        unsigned int v684 = v622[1] & 0x3F | ((v684 & 0x1F) << 6);
                      }
                    }
                    if ((*(_DWORD *)(v15 + 68) != _pcre2_ucd_records_8[12
                                                                      * _pcre2_ucd_stage2_8[v684 & 0x7F | (_pcre2_ucd_stage1_8[v684 >> 7] << 7)]
                                                                      + 1]) == (*(_DWORD *)(v15 + 64) == 15))
                    {
                      v622 += v685;
                      *(void *)(v15 + 80) = v622;
                      if (--v682) {
                        continue;
                      }
                    }
                    goto LABEL_1665;
                  }
                  goto LABEL_1661;
                case 4:
                  BOOL v259 = v619 >= v620;
                  unsigned int v690 = v619 - v620;
                  if (v690 == 0 || !v259) {
                    goto LABEL_1665;
                  }
                  unint64_t v691 = *v16;
                  while ((unint64_t)v622 < v691)
                  {
                    unsigned int v692 = *v622;
                    uint64_t v693 = 1;
                    if (v14 && v692 >= 0xC0)
                    {
                      int v694 = v622[1] & 0x3F;
                      if ((v692 & 0x20) != 0)
                      {
                        if ((v692 & 0x10) != 0)
                        {
                          if ((v692 & 8) != 0)
                          {
                            int v695 = v622[2] & 0x3F;
                            int v696 = v622[3] & 0x3F;
                            int v697 = v622[4] & 0x3F;
                            if ((v692 & 4) != 0)
                            {
                              unsigned int v692 = ((v692 & 1) << 30) | (v694 << 24) | (v695 << 18) | (v696 << 12) | (v697 << 6) | v622[5] & 0x3F;
                              uint64_t v693 = 6;
                            }
                            else
                            {
                              unsigned int v692 = ((v692 & 3) << 24) | (v694 << 18) | (v695 << 12) | (v696 << 6) | v697;
                              uint64_t v693 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v692 = ((v692 & 7) << 18) | (v694 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v693 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v692 = ((v692 & 0xF) << 12) | (v694 << 6) | v622[2] & 0x3F;
                          uint64_t v693 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v693 = 2;
                        unsigned int v692 = v622[1] & 0x3F | ((v692 & 0x1F) << 6);
                      }
                    }
                    if ((*(_DWORD *)(v15 + 68) != _pcre2_ucd_records_8[12
                                                                      * _pcre2_ucd_stage2_8[v692 & 0x7F | (_pcre2_ucd_stage1_8[v692 >> 7] << 7)]]) == (*(_DWORD *)(v15 + 64) == 15))
                    {
                      v622 += v693;
                      *(void *)(v15 + 80) = v622;
                      if (--v690) {
                        continue;
                      }
                    }
                    goto LABEL_1665;
                  }
                  goto LABEL_1661;
                case 5:
                  BOOL v259 = v619 >= v620;
                  unsigned int v698 = v619 - v620;
                  if (v698 == 0 || !v259) {
                    goto LABEL_1665;
                  }
                  unint64_t v699 = *v16;
                  while ((unint64_t)v622 < v699)
                  {
                    unsigned int v700 = *v622;
                    uint64_t v701 = 1;
                    if (v14 && v700 >= 0xC0)
                    {
                      int v702 = v622[1] & 0x3F;
                      if ((v700 & 0x20) != 0)
                      {
                        if ((v700 & 0x10) != 0)
                        {
                          if ((v700 & 8) != 0)
                          {
                            int v703 = v622[2] & 0x3F;
                            int v704 = v622[3] & 0x3F;
                            int v705 = v622[4] & 0x3F;
                            if ((v700 & 4) != 0)
                            {
                              unsigned int v700 = ((v700 & 1) << 30) | (v702 << 24) | (v703 << 18) | (v704 << 12) | (v705 << 6) | v622[5] & 0x3F;
                              uint64_t v701 = 6;
                            }
                            else
                            {
                              unsigned int v700 = ((v700 & 3) << 24) | (v702 << 18) | (v703 << 12) | (v704 << 6) | v705;
                              uint64_t v701 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v700 = ((v700 & 7) << 18) | (v702 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v701 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v700 = ((v700 & 0xF) << 12) | (v702 << 6) | v622[2] & 0x3F;
                          uint64_t v701 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v701 = 2;
                        unsigned int v700 = v622[1] & 0x3F | ((v700 & 0x1F) << 6);
                      }
                    }
                    if (((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                   * _pcre2_ucd_stage2_8[v700 & 0x7F | (_pcre2_ucd_stage1_8[v700 >> 7] << 7)]
                                                                   + 1]] & 0xFFFFFFFD) != 1) == (*v177 == 15))
                    {
                      v622 += v701;
                      *(void *)(v15 + 80) = v622;
                      if (--v698) {
                        continue;
                      }
                    }
                    goto LABEL_1665;
                  }
                  goto LABEL_1661;
                case 6:
                case 7:
                  BOOL v259 = v619 >= v620;
                  unsigned int v623 = v619 - v620;
                  if (v623 == 0 || !v259) {
                    goto LABEL_1665;
                  }
                  unint64_t v624 = *v16;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v624) {
                      goto LABEL_1661;
                    }
                    int v625 = *v622;
                    uint64_t v626 = 1;
                    if (v14 && v625 >= 0xC0)
                    {
                      int v627 = v622[1] & 0x3F;
                      if ((v625 & 0x20) != 0)
                      {
                        if ((v625 & 0x10) != 0)
                        {
                          if ((v625 & 8) != 0)
                          {
                            int v628 = v622[2] & 0x3F;
                            int v629 = v622[3] & 0x3F;
                            int v630 = v622[4] & 0x3F;
                            if ((v625 & 4) != 0)
                            {
                              int v625 = ((v625 & 1) << 30) | (v627 << 24) | (v628 << 18) | (v629 << 12) | (v630 << 6) | v622[5] & 0x3F;
                              uint64_t v626 = 6;
                            }
                            else
                            {
                              int v625 = ((v625 & 3) << 24) | (v627 << 18) | (v628 << 12) | (v629 << 6) | v630;
                              uint64_t v626 = 5;
                            }
                          }
                          else
                          {
                            int v625 = ((v625 & 7) << 18) | (v627 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v626 = 4;
                          }
                        }
                        else
                        {
                          int v625 = ((v625 & 0xF) << 12) | (v627 << 6) | v622[2] & 0x3F;
                          uint64_t v626 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v626 = 2;
                        int v625 = v622[1] & 0x3F | ((v625 & 0x1F) << 6);
                      }
                    }
                    if (v625 < 0x2000)
                    {
                      if (v625 > 132)
                      {
                        if (v625 > 5759)
                        {
                          if (v625 != 5760 && v625 != 6158) {
                            goto LABEL_1403;
                          }
                        }
                        else if (v625 != 133 && v625 != 160)
                        {
                          goto LABEL_1403;
                        }
                      }
                      else if (v625 > 0x20 || ((1 << v625) & 0x100003E00) == 0)
                      {
                        goto LABEL_1403;
                      }
                    }
                    else if ((v625 - 0x2000) >= 0xB {
                           && ((v625 - 8232) > 0x37
                    }
                            || ((1 << (v625 - 40)) & 0x80000000000083) == 0)
                           && v625 != 12288)
                    {
LABEL_1403:
                      if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v625 & 0x7F | (_pcre2_ucd_stage1_8[v625 >> 7] << 7)]
                                                                    + 1]] != 6) != (*v177 == 15))
                      {
LABEL_1665:
                        if (v12 != 2)
                        {
                          v737 = *(unsigned __int8 **)(v15 + 80);
LABEL_1667:
                          if ((unint64_t)v737 > *(void *)(v15 + 8))
                          {
                            v1336 = a3;
                            unsigned int i = v12;
                            LODWORD(v12) = 0;
                            a2 = *(unsigned __int8 **)v15;
                            char v1302 = -34;
                            goto LABEL_3333;
                          }
                        }
                        goto LABEL_2500;
                      }
LABEL_1395:
                      v622 += v626;
                      *(void *)(v15 + 80) = v622;
                      if (!--v623) {
                        goto LABEL_1665;
                      }
                      continue;
                    }
                    break;
                  }
                  if (*v177 == 15) {
                    goto LABEL_1665;
                  }
                  goto LABEL_1395;
                case 8:
                  BOOL v259 = v619 >= v620;
                  unsigned int v706 = v619 - v620;
                  if (v706 == 0 || !v259) {
                    goto LABEL_1665;
                  }
                  unint64_t v707 = *v16;
                  while ((unint64_t)v622 < v707)
                  {
                    unsigned int v708 = *v622;
                    uint64_t v709 = 1;
                    if (v14 && v708 >= 0xC0)
                    {
                      int v710 = v622[1] & 0x3F;
                      if ((v708 & 0x20) != 0)
                      {
                        if ((v708 & 0x10) != 0)
                        {
                          if ((v708 & 8) != 0)
                          {
                            int v711 = v622[2] & 0x3F;
                            int v712 = v622[3] & 0x3F;
                            int v713 = v622[4] & 0x3F;
                            if ((v708 & 4) != 0)
                            {
                              unsigned int v708 = ((v708 & 1) << 30) | (v710 << 24) | (v711 << 18) | (v712 << 12) | (v713 << 6) | v622[5] & 0x3F;
                              uint64_t v709 = 6;
                            }
                            else
                            {
                              unsigned int v708 = ((v708 & 3) << 24) | (v710 << 18) | (v711 << 12) | (v712 << 6) | v713;
                              uint64_t v709 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v708 = ((v708 & 7) << 18) | (v710 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v709 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v708 = ((v708 & 0xF) << 12) | (v710 << 6) | v622[2] & 0x3F;
                          uint64_t v709 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v709 = 2;
                        unsigned int v708 = v622[1] & 0x3F | ((v708 & 0x1F) << 6);
                      }
                    }
                    BOOL v715 = v708 == 95
                        || (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v708 & 0x7F | (_pcre2_ucd_stage1_8[v708 >> 7] << 7)]
                                                                    + 1]] & 0xFFFFFFFD) == 1;
                    if ((((*v177 != 15) ^ v715) & 1) == 0)
                    {
                      v622 += v709;
                      *(void *)(v15 + 80) = v622;
                      if (--v706) {
                        continue;
                      }
                    }
                    goto LABEL_1665;
                  }
                  goto LABEL_1661;
                case 9:
                  if (v619 <= v620) {
                    goto LABEL_1665;
                  }
                  unint64_t v716 = *v16;
LABEL_1611:
                  if ((unint64_t)v622 >= v716)
                  {
LABEL_1661:
                    unsigned int v736 = (unsigned __int16)*v1350;
                    if (!*v1350 || (unint64_t)v622 <= *v1348 && !*v1345) {
                      goto LABEL_1665;
                    }
                    _DWORD *v1346 = 1;
                    if (v736 <= 1) {
                      goto LABEL_1665;
                    }
                    return 4294967294;
                  }
                  unsigned int v717 = *v622;
                  uint64_t v718 = 1;
                  if (v14 && v717 >= 0xC0)
                  {
                    int v719 = v622[1] & 0x3F;
                    if ((v717 & 0x20) != 0)
                    {
                      if ((v717 & 0x10) != 0)
                      {
                        if ((v717 & 8) != 0)
                        {
                          int v720 = v622[2] & 0x3F;
                          int v721 = v622[3] & 0x3F;
                          int v722 = v622[4] & 0x3F;
                          if ((v717 & 4) != 0)
                          {
                            unsigned int v717 = ((v717 & 1) << 30) | (v719 << 24) | (v720 << 18) | (v721 << 12) | (v722 << 6) | v622[5] & 0x3F;
                            uint64_t v718 = 6;
                          }
                          else
                          {
                            unsigned int v717 = ((v717 & 3) << 24) | (v719 << 18) | (v720 << 12) | (v721 << 6) | v722;
                            uint64_t v718 = 5;
                          }
                        }
                        else
                        {
                          unsigned int v717 = ((v717 & 7) << 18) | (v719 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                          uint64_t v718 = 4;
                        }
                      }
                      else
                      {
                        unsigned int v717 = ((v717 & 0xF) << 12) | (v719 << 6) | v622[2] & 0x3F;
                        uint64_t v718 = 3;
                      }
                    }
                    else
                    {
                      uint64_t v718 = 2;
                      unsigned int v717 = v622[1] & 0x3F | ((v717 & 0x1F) << 6);
                    }
                  }
                  v723 = &_pcre2_ucd_caseless_sets_8[*(unsigned int *)(v15 + 68)];
                  while (1)
                  {
                    unsigned int v724 = *v723;
                    if (v717 < *v723) {
                      break;
                    }
                    ++v723;
                    if (v717 == v724)
                    {
                      if (*v177 == 15) {
                        goto LABEL_1665;
                      }
LABEL_1629:
                      v622 += v718;
                      *(void *)(v15 + 80) = v622;
                      if (++v620 == v619) {
                        goto LABEL_1665;
                      }
                      goto LABEL_1611;
                    }
                  }
                  if (*v177 == 15) {
                    goto LABEL_1629;
                  }
                  goto LABEL_1665;
                case 10:
                  BOOL v259 = v619 >= v620;
                  unsigned int v725 = v619 - v620;
                  if (v725 == 0 || !v259) {
                    goto LABEL_1665;
                  }
                  unint64_t v726 = *v16;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v726) {
                      goto LABEL_1661;
                    }
                    unsigned int v727 = *v622;
                    uint64_t v728 = 1;
                    if (v14 && v727 >= 0xC0)
                    {
                      int v729 = v622[1] & 0x3F;
                      if ((v727 & 0x20) != 0)
                      {
                        if ((v727 & 0x10) != 0)
                        {
                          if ((v727 & 8) != 0)
                          {
                            int v730 = v622[2] & 0x3F;
                            int v731 = v622[3] & 0x3F;
                            int v732 = v622[4] & 0x3F;
                            if ((v727 & 4) != 0)
                            {
                              unsigned int v727 = ((v727 & 1) << 30) | (v729 << 24) | (v730 << 18) | (v731 << 12) | (v732 << 6) | v622[5] & 0x3F;
                              uint64_t v728 = 6;
                            }
                            else
                            {
                              unsigned int v727 = ((v727 & 3) << 24) | (v729 << 18) | (v730 << 12) | (v731 << 6) | v732;
                              uint64_t v728 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v727 = ((v727 & 7) << 18) | (v729 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v728 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v727 = ((v727 & 0xF) << 12) | (v729 << 6) | v622[2] & 0x3F;
                          uint64_t v728 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v728 = 2;
                        unsigned int v727 = v622[1] & 0x3F | ((v727 & 0x1F) << 6);
                      }
                    }
                    if (v727 - 36 > 0x3C || ((1 << (v727 - 36)) & 0x1000000010000001) == 0)
                    {
                      BOOL v735 = v727 >> 13 > 6 || (v727 - 160) >> 5 < 0x6BB;
                      if ((v735 ^ (*v177 != 15))) {
                        goto LABEL_1665;
                      }
                    }
                    else if (*v177 == 15)
                    {
                      goto LABEL_1665;
                    }
                    v622 += v728;
                    *(void *)(v15 + 80) = v622;
                    if (!--v725) {
                      goto LABEL_1665;
                    }
                    continue;
                  }
                default:
                  return 4294967252;
              }
            }
            int v631 = *v177;
            if (*v177 == 22)
            {
              if (v619 > v620)
              {
                unint64_t v632 = *v16;
                while ((unint64_t)v622 < v632)
                {
                  v633 = v622 + 1;
                  *(void *)(v15 + 80) = v622 + 1;
                  unsigned int v634 = *v622;
                  if (v14 && v634 >= 0xC0)
                  {
                    if ((v634 & 0x20) != 0)
                    {
                      int v635 = *v633 & 0x3F;
                      if ((v634 & 0x10) != 0)
                      {
                        if ((v634 & 8) != 0)
                        {
                          int v636 = v622[2] & 0x3F;
                          int v637 = v622[3] & 0x3F;
                          int v638 = v622[4] & 0x3F;
                          if ((v634 & 4) != 0)
                          {
                            unsigned int v634 = ((v634 & 1) << 30) | (v635 << 24) | (v636 << 18) | (v637 << 12) | (v638 << 6) | v622[5] & 0x3F;
                            v633 = v622 + 6;
                          }
                          else
                          {
                            unsigned int v634 = ((v634 & 3) << 24) | (v635 << 18) | (v636 << 12) | (v637 << 6) | v638;
                            v633 = v622 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v634 = ((v634 & 7) << 18) | (v635 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                          v633 = v622 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v634 = ((v634 & 0xF) << 12) | (v635 << 6) | v622[2] & 0x3F;
                        v633 = v622 + 3;
                      }
                      *(void *)(v15 + 80) = v633;
                    }
                    else
                    {
                      v633 = v622 + 2;
                      *(void *)(v15 + 80) = v622 + 2;
                      unsigned int v634 = v622[1] & 0x3F | ((v634 & 0x1F) << 6);
                    }
                  }
                  v622 = _pcre2_extuni_8(v634, v633, *(void *)(v7 + 152), v632, v1347, 0);
                  *(void *)(v15 + 80) = v622;
                  unint64_t v632 = *(void *)(v7 + 168);
                  if ((unint64_t)v622 >= v632)
                  {
                    unsigned int v639 = (unsigned __int16)*v1350;
                    if (*v1350)
                    {
                      if ((unint64_t)v622 > *v1348 || *v1345)
                      {
                        _DWORD *v1346 = 1;
                        if (v639 > 1) {
                          return 4294967294;
                        }
                      }
                    }
                  }
                  if (++v620 >= *(_DWORD *)(v15 + 60)) {
                    goto LABEL_1673;
                  }
                }
                unsigned int v738 = (unsigned __int16)*v1350;
                if (*v1350 && ((unint64_t)v622 > *v1348 || *v1345))
                {
                  _DWORD *v1346 = 1;
                  if (v738 > 1) {
                    return 4294967294;
                  }
                }
              }
LABEL_1673:
              if (v12 != 2)
              {
                v739 = *(unsigned __int8 **)(v15 + 8);
                uint64_t v16 = v1349;
LABEL_2497:
                if (v622 > v739)
                {
                  v1336 = a3;
                  unsigned int i = v12;
                  LODWORD(v12) = 0;
                  a2 = *(unsigned __int8 **)v15;
                  char v1302 = -36;
                  goto LABEL_3333;
                }
                goto LABEL_2500;
              }
              goto LABEL_3300;
            }
            unsigned int v1334 = v13;
            uint64_t v19 = 4294967252;
            if (v14)
            {
              switch(v631)
              {
                case 6:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  BOOL v259 = v619 >= v620;
                  unsigned int v868 = v619 - v620;
                  if (v868 == 0 || !v259) {
                    goto LABEL_2468;
                  }
                  unint64_t v869 = *v1349;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v869) {
                      goto LABEL_2182;
                    }
                    unsigned int v870 = *v622;
                    if (v870 < 0xC0)
                    {
                      uint64_t v872 = 1;
                    }
                    else
                    {
                      int v871 = v622[1] & 0x3F;
                      if ((v870 & 0x20) != 0)
                      {
                        if ((v870 & 0x10) != 0)
                        {
                          if ((v870 & 8) != 0)
                          {
                            int v873 = v622[2] & 0x3F;
                            int v874 = v622[3] & 0x3F;
                            int v875 = v622[4] & 0x3F;
                            if ((v870 & 4) != 0)
                            {
                              unsigned int v870 = ((v870 & 1) << 30) | (v871 << 24) | (v873 << 18) | (v874 << 12) | (v875 << 6) | v622[5] & 0x3F;
                              uint64_t v872 = 6;
                            }
                            else
                            {
                              unsigned int v870 = ((v870 & 3) << 24) | (v871 << 18) | (v873 << 12) | (v874 << 6) | v875;
                              uint64_t v872 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v870 = ((v870 & 7) << 18) | (v871 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v872 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v870 = ((v870 & 0xF) << 12) | (v871 << 6) | v622[2] & 0x3F;
                          uint64_t v872 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v872 = 2;
                        unsigned int v870 = v622[1] & 0x3F | ((v870 & 0x1F) << 6);
                      }
                      if (v870 > 0xFF) {
                        goto LABEL_2023;
                      }
                    }
                    if ((*(unsigned char *)(*(void *)(v7 + 104) + v870) & 8) != 0) {
                      goto LABEL_2468;
                    }
LABEL_2023:
                    v622 += v872;
                    *(void *)(v15 + 80) = v622;
                    if (!--v868) {
                      goto LABEL_2468;
                    }
                    continue;
                  }
                case 7:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  BOOL v259 = v619 >= v620;
                  unsigned int v876 = v619 - v620;
                  if (v876 == 0 || !v259) {
                    goto LABEL_2468;
                  }
                  unint64_t v877 = *v1349;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v877) {
                      goto LABEL_2182;
                    }
                    unsigned int v878 = *v622;
                    if (v878 < 0xC0)
                    {
                      uint64_t v880 = 1;
                      goto LABEL_2041;
                    }
                    int v879 = v622[1] & 0x3F;
                    if ((v878 & 0x20) != 0)
                    {
                      if ((v878 & 0x10) != 0)
                      {
                        if ((v878 & 8) != 0)
                        {
                          int v881 = v622[2] & 0x3F;
                          int v882 = v622[3] & 0x3F;
                          int v883 = v622[4] & 0x3F;
                          if ((v878 & 4) != 0)
                          {
                            unsigned int v878 = ((v878 & 1) << 30) | (v879 << 24) | (v881 << 18) | (v882 << 12) | (v883 << 6) | v622[5] & 0x3F;
                            uint64_t v880 = 6;
                          }
                          else
                          {
                            unsigned int v878 = ((v878 & 3) << 24) | (v879 << 18) | (v881 << 12) | (v882 << 6) | v883;
                            uint64_t v880 = 5;
                          }
                        }
                        else
                        {
                          unsigned int v878 = ((v878 & 7) << 18) | (v879 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                          uint64_t v880 = 4;
                        }
                      }
                      else
                      {
                        unsigned int v878 = ((v878 & 0xF) << 12) | (v879 << 6) | v622[2] & 0x3F;
                        uint64_t v880 = 3;
                      }
                    }
                    else
                    {
                      uint64_t v880 = 2;
                      unsigned int v878 = v622[1] & 0x3F | ((v878 & 0x1F) << 6);
                    }
                    if (v878 <= 0xFF)
                    {
LABEL_2041:
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v878) & 8) == 0) {
                        goto LABEL_2468;
                      }
                      v622 += v880;
                      *(void *)(v15 + 80) = v622;
                      if (!--v876) {
                        goto LABEL_2468;
                      }
                      continue;
                    }
                    goto LABEL_2468;
                  }
                case 8:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  BOOL v259 = v619 >= v620;
                  unsigned int v884 = v619 - v620;
                  if (v884 == 0 || !v259) {
                    goto LABEL_2468;
                  }
                  unint64_t v885 = *v1349;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v885) {
                      goto LABEL_2182;
                    }
                    unsigned int v886 = *v622;
                    if (v886 < 0xC0)
                    {
                      uint64_t v888 = 1;
                    }
                    else
                    {
                      int v887 = v622[1] & 0x3F;
                      if ((v886 & 0x20) != 0)
                      {
                        if ((v886 & 0x10) != 0)
                        {
                          if ((v886 & 8) != 0)
                          {
                            int v889 = v622[2] & 0x3F;
                            int v890 = v622[3] & 0x3F;
                            int v891 = v622[4] & 0x3F;
                            if ((v886 & 4) != 0)
                            {
                              unsigned int v886 = ((v886 & 1) << 30) | (v887 << 24) | (v889 << 18) | (v890 << 12) | (v891 << 6) | v622[5] & 0x3F;
                              uint64_t v888 = 6;
                            }
                            else
                            {
                              unsigned int v886 = ((v886 & 3) << 24) | (v887 << 18) | (v889 << 12) | (v890 << 6) | v891;
                              uint64_t v888 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v886 = ((v886 & 7) << 18) | (v887 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v888 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v886 = ((v886 & 0xF) << 12) | (v887 << 6) | v622[2] & 0x3F;
                          uint64_t v888 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v888 = 2;
                        unsigned int v886 = v622[1] & 0x3F | ((v886 & 0x1F) << 6);
                      }
                      if (v886 > 0xFF) {
                        goto LABEL_2061;
                      }
                    }
                    if (*(unsigned char *)(*(void *)(v7 + 104) + v886)) {
                      goto LABEL_2468;
                    }
LABEL_2061:
                    v622 += v888;
                    *(void *)(v15 + 80) = v622;
                    if (!--v884) {
                      goto LABEL_2468;
                    }
                    continue;
                  }
                case 9:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  BOOL v259 = v619 >= v620;
                  unsigned int v892 = v619 - v620;
                  if (v892 == 0 || !v259) {
                    goto LABEL_2468;
                  }
                  unint64_t v893 = *v1349;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v893) {
                      goto LABEL_2182;
                    }
                    unsigned int v894 = *v622;
                    if (v894 < 0xC0)
                    {
                      uint64_t v896 = 1;
                      goto LABEL_2079;
                    }
                    int v895 = v622[1] & 0x3F;
                    if ((v894 & 0x20) != 0)
                    {
                      if ((v894 & 0x10) != 0)
                      {
                        if ((v894 & 8) != 0)
                        {
                          int v897 = v622[2] & 0x3F;
                          int v898 = v622[3] & 0x3F;
                          int v899 = v622[4] & 0x3F;
                          if ((v894 & 4) != 0)
                          {
                            unsigned int v894 = ((v894 & 1) << 30) | (v895 << 24) | (v897 << 18) | (v898 << 12) | (v899 << 6) | v622[5] & 0x3F;
                            uint64_t v896 = 6;
                          }
                          else
                          {
                            unsigned int v894 = ((v894 & 3) << 24) | (v895 << 18) | (v897 << 12) | (v898 << 6) | v899;
                            uint64_t v896 = 5;
                          }
                        }
                        else
                        {
                          unsigned int v894 = ((v894 & 7) << 18) | (v895 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                          uint64_t v896 = 4;
                        }
                      }
                      else
                      {
                        unsigned int v894 = ((v894 & 0xF) << 12) | (v895 << 6) | v622[2] & 0x3F;
                        uint64_t v896 = 3;
                      }
                    }
                    else
                    {
                      uint64_t v896 = 2;
                      unsigned int v894 = v622[1] & 0x3F | ((v894 & 0x1F) << 6);
                    }
                    if (v894 <= 0xFF)
                    {
LABEL_2079:
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v894) & 1) == 0) {
                        goto LABEL_2468;
                      }
                      v622 += v896;
                      *(void *)(v15 + 80) = v622;
                      if (!--v892) {
                        goto LABEL_2468;
                      }
                      continue;
                    }
                    goto LABEL_2468;
                  }
                case 10:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  BOOL v259 = v619 >= v620;
                  unsigned int v900 = v619 - v620;
                  if (v900 == 0 || !v259) {
                    goto LABEL_2468;
                  }
                  unint64_t v901 = *v1349;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v901) {
                      goto LABEL_2182;
                    }
                    unsigned int v902 = *v622;
                    if (v902 < 0xC0)
                    {
                      uint64_t v904 = 1;
                    }
                    else
                    {
                      int v903 = v622[1] & 0x3F;
                      if ((v902 & 0x20) != 0)
                      {
                        if ((v902 & 0x10) != 0)
                        {
                          if ((v902 & 8) != 0)
                          {
                            int v905 = v622[2] & 0x3F;
                            int v906 = v622[3] & 0x3F;
                            int v907 = v622[4] & 0x3F;
                            if ((v902 & 4) != 0)
                            {
                              unsigned int v902 = ((v902 & 1) << 30) | (v903 << 24) | (v905 << 18) | (v906 << 12) | (v907 << 6) | v622[5] & 0x3F;
                              uint64_t v904 = 6;
                            }
                            else
                            {
                              unsigned int v902 = ((v902 & 3) << 24) | (v903 << 18) | (v905 << 12) | (v906 << 6) | v907;
                              uint64_t v904 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v902 = ((v902 & 7) << 18) | (v903 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v904 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v902 = ((v902 & 0xF) << 12) | (v903 << 6) | v622[2] & 0x3F;
                          uint64_t v904 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v904 = 2;
                        unsigned int v902 = v622[1] & 0x3F | ((v902 & 0x1F) << 6);
                      }
                      if (v902 > 0xFF) {
                        goto LABEL_2099;
                      }
                    }
                    if ((*(unsigned char *)(*(void *)(v7 + 104) + v902) & 0x10) != 0) {
                      goto LABEL_2468;
                    }
LABEL_2099:
                    v622 += v904;
                    *(void *)(v15 + 80) = v622;
                    if (!--v900) {
                      goto LABEL_2468;
                    }
                    continue;
                  }
                case 11:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  BOOL v259 = v619 >= v620;
                  unsigned int v908 = v619 - v620;
                  if (v908 == 0 || !v259) {
                    goto LABEL_2468;
                  }
                  unint64_t v909 = *v1349;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v909) {
                      goto LABEL_2182;
                    }
                    unsigned int v910 = *v622;
                    if (v910 < 0xC0)
                    {
                      uint64_t v912 = 1;
                      goto LABEL_2117;
                    }
                    int v911 = v622[1] & 0x3F;
                    if ((v910 & 0x20) != 0)
                    {
                      if ((v910 & 0x10) != 0)
                      {
                        if ((v910 & 8) != 0)
                        {
                          int v913 = v622[2] & 0x3F;
                          int v914 = v622[3] & 0x3F;
                          int v915 = v622[4] & 0x3F;
                          if ((v910 & 4) != 0)
                          {
                            unsigned int v910 = ((v910 & 1) << 30) | (v911 << 24) | (v913 << 18) | (v914 << 12) | (v915 << 6) | v622[5] & 0x3F;
                            uint64_t v912 = 6;
                          }
                          else
                          {
                            unsigned int v910 = ((v910 & 3) << 24) | (v911 << 18) | (v913 << 12) | (v914 << 6) | v915;
                            uint64_t v912 = 5;
                          }
                        }
                        else
                        {
                          unsigned int v910 = ((v910 & 7) << 18) | (v911 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                          uint64_t v912 = 4;
                        }
                      }
                      else
                      {
                        unsigned int v910 = ((v910 & 0xF) << 12) | (v911 << 6) | v622[2] & 0x3F;
                        uint64_t v912 = 3;
                      }
                    }
                    else
                    {
                      uint64_t v912 = 2;
                      unsigned int v910 = v622[1] & 0x3F | ((v910 & 0x1F) << 6);
                    }
                    if (v910 <= 0xFF)
                    {
LABEL_2117:
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v910) & 0x10) == 0) {
                        goto LABEL_2468;
                      }
                      v622 += v912;
                      *(void *)(v15 + 80) = v622;
                      if (!--v908) {
                        goto LABEL_2468;
                      }
                      continue;
                    }
                    goto LABEL_2468;
                  }
                case 12:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  if (v619 <= v620) {
                    goto LABEL_2468;
                  }
                  unint64_t v916 = *v1349;
                  while ((unint64_t)v622 < v916)
                  {
                    int v917 = *(_DWORD *)(v7 + 252);
                    if (v917)
                    {
                      if (_pcre2_is_newline_8(v622, v917, v916, v1340, v1347)) {
                        goto LABEL_2468;
                      }
                      v622 = *(unsigned __int8 **)(v15 + 80);
                      unint64_t v916 = *v1349;
                    }
                    else
                    {
                      uint64_t v918 = *v1340;
                      if ((unint64_t)v622 <= v916 - v918
                        && *v622 == *(unsigned __int8 *)(v7 + 260)
                        && (v918 == 1 || v622[1] == *(unsigned __int8 *)(v7 + 261)))
                      {
                        goto LABEL_2468;
                      }
                    }
                    unsigned int v919 = (unsigned __int16)*v1350;
                    v920 = v622 + 1;
                    if (*v1350)
                    {
                      if ((unint64_t)v920 >= v916
                        && !*(_DWORD *)(v7 + 252)
                        && *v1340 == 2
                        && *v622 == *(unsigned __int8 *)(v7 + 260))
                      {
                        _DWORD *v1346 = 1;
                        if (v919 > 1) {
                          return 4294967294;
                        }
                      }
                    }
                    do
                    {
                      v622 = v920;
                      *(void *)(v15 + 80) = v920;
                      if ((unint64_t)v920 >= v916) {
                        break;
                      }
                      ++v920;
                    }
                    while ((*v622 & 0xC0) == 0x80);
                    if (++v620 >= *(_DWORD *)(v15 + 60)) {
                      goto LABEL_2468;
                    }
                  }
                  goto LABEL_2182;
                case 13:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  if (v619 == -1)
                  {
                    unint64_t v994 = *v16;
                    *(void *)(v15 + 80) = *v16;
                    unsigned int v935 = (unsigned __int16)*v1350;
                    if (!*v1350) {
                      goto LABEL_2468;
                    }
                    if (v994 > *v1348)
                    {
LABEL_2185:
                      _DWORD *v1346 = 1;
                      if (v935 > 1) {
                        return 4294967294;
                      }
                      goto LABEL_2468;
                    }
                  }
                  else
                  {
                    if (v619 <= v620) {
                      goto LABEL_2468;
                    }
                    unint64_t v921 = *v1349;
                    while ((unint64_t)v622 < v921)
                    {
                      v922 = v622 + 1;
                      do
                      {
                        v622 = v922;
                        *(void *)(v15 + 80) = v922;
                        if ((unint64_t)v922 >= v921) {
                          break;
                        }
                        ++v922;
                      }
                      while ((*v622 & 0xC0) == 0x80);
                      if (++v620 == v619) {
                        goto LABEL_2468;
                      }
                    }
LABEL_2182:
                    unsigned int v935 = (unsigned __int16)*v1350;
                    if (!*v1350) {
                      goto LABEL_2468;
                    }
                    if ((unint64_t)v622 > *v1348) {
                      goto LABEL_2185;
                    }
                  }
                  if (*v1345) {
                    goto LABEL_2185;
                  }
                  goto LABEL_2468;
                case 14:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  v923 = (unsigned __int8 *)*v16;
                  if (v621 <= *v16 - v622)
                  {
                    *(void *)(v15 + 80) = &v622[v621];
                  }
                  else
                  {
                    *(void *)(v15 + 80) = v923;
                    unsigned int v924 = (unsigned __int16)*v1350;
                    if (*v1350 && ((unint64_t)v923 > *v1348 || *v1345))
                    {
                      _DWORD *v1346 = 1;
                      if (v924 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                  goto LABEL_2468;
                case 17:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  BOOL v259 = v619 >= v620;
                  unsigned int v925 = v619 - v620;
                  if (v925 == 0 || !v259) {
                    goto LABEL_2468;
                  }
                  unint64_t v926 = *v1349;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v926) {
                      goto LABEL_2182;
                    }
                    unsigned int v927 = *v622;
                    if (v927 < 0xC0)
                    {
                      uint64_t v930 = 1;
                      uint64_t v929 = v7;
                    }
                    else
                    {
                      int v928 = v622[1] & 0x3F;
                      uint64_t v929 = v7;
                      if ((v927 & 0x20) != 0)
                      {
                        if ((v927 & 0x10) != 0)
                        {
                          if ((v927 & 8) != 0)
                          {
                            int v932 = v622[2] & 0x3F;
                            int v933 = v622[3] & 0x3F;
                            int v934 = v622[4] & 0x3F;
                            if ((v927 & 4) != 0)
                            {
                              unsigned int v927 = ((v927 & 1) << 30) | (v928 << 24) | (v932 << 18) | (v933 << 12) | (v934 << 6) | v622[5] & 0x3F;
                              uint64_t v930 = 6;
                            }
                            else
                            {
                              unsigned int v927 = ((v927 & 3) << 24) | (v928 << 18) | (v932 << 12) | (v933 << 6) | v934;
                              uint64_t v930 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v927 = ((v927 & 7) << 18) | (v928 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v930 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v927 = ((v927 & 0xF) << 12) | (v928 << 6) | v622[2] & 0x3F;
                          uint64_t v930 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v930 = 2;
                        unsigned int v927 = v622[1] & 0x3F | ((v927 & 0x1F) << 6);
                      }
                    }
                    if (v927 == 10) {
                      break;
                    }
                    if (v927 == 13)
                    {
                      v931 = v622 + 1;
                      *(void *)(v15 + 80) = v622 + 1;
                      if ((unint64_t)(v622 + 1) >= v926) {
                        goto LABEL_2468;
                      }
                      if (*v931 != 10)
                      {
LABEL_2173:
                        v622 = v931;
                        if (!--v925) {
                          goto LABEL_2468;
                        }
                        continue;
                      }
                      uint64_t v930 = 2;
                    }
                    else if (*(_WORD *)(v929 + 130) == 2 || v927 - 11 >= 2 && v927 - 8232 >= 2 && v927 != 133)
                    {
LABEL_2468:
                      v970 = v641;
                      if (v12 != 2)
                      {
                        v995 = *(unsigned __int8 **)(v15 + 80);
                        uint64_t v7 = v642;
                        unsigned int v13 = v1334;
                        uint64_t v14 = v640;
                        uint64_t v16 = v1349;
                        a3 = v970;
LABEL_3290:
                        if ((unint64_t)v995 > *(void *)(v15 + 8))
                        {
                          v1336 = a3;
                          unsigned int i = v12;
                          LODWORD(v12) = 0;
                          a2 = *(unsigned __int8 **)v15;
                          char v1302 = -35;
                          goto LABEL_3333;
                        }
                        goto LABEL_2500;
                      }
LABEL_2469:
                      uint64_t v7 = v642;
                      unsigned int v13 = v1334;
                      uint64_t v14 = v640;
                      uint64_t v16 = v1349;
                      a3 = v970;
                      goto LABEL_2500;
                    }
                    break;
                  }
                  v931 = &v622[v930];
                  *(void *)(v15 + 80) = &v622[v930];
                  goto LABEL_2173;
                case 18:
                case 19:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  BOOL v259 = v619 >= v620;
                  unsigned int v643 = v619 - v620;
                  if (v643 == 0 || !v259) {
                    goto LABEL_2468;
                  }
                  unint64_t v644 = *v1349;
                  int v645 = v631 == 18;
                  while (2)
                  {
                    if ((unint64_t)v622 >= v644) {
                      goto LABEL_2182;
                    }
                    int v646 = *v622;
                    if (v646 < 0xC0)
                    {
                      uint64_t v648 = 1;
                    }
                    else
                    {
                      int v647 = v622[1] & 0x3F;
                      if ((v646 & 0x20) != 0)
                      {
                        if ((v646 & 0x10) != 0)
                        {
                          if ((v646 & 8) != 0)
                          {
                            int v649 = v622[2] & 0x3F;
                            int v650 = v622[3] & 0x3F;
                            int v651 = v622[4] & 0x3F;
                            if ((v646 & 4) != 0)
                            {
                              int v646 = ((v646 & 1) << 30) | (v647 << 24) | (v649 << 18) | (v650 << 12) | (v651 << 6) | v622[5] & 0x3F;
                              uint64_t v648 = 6;
                            }
                            else
                            {
                              int v646 = ((v646 & 3) << 24) | (v647 << 18) | (v649 << 12) | (v650 << 6) | v651;
                              uint64_t v648 = 5;
                            }
                          }
                          else
                          {
                            int v646 = ((v646 & 7) << 18) | (v647 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v648 = 4;
                          }
                        }
                        else
                        {
                          int v646 = ((v646 & 0xF) << 12) | (v647 << 6) | v622[2] & 0x3F;
                          uint64_t v648 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v648 = 2;
                        int v646 = v622[1] & 0x3F | ((v646 & 0x1F) << 6);
                      }
                    }
                    int v652 = 1;
                    if (v646 < 0x2000)
                    {
                      if (v646 <= 159)
                      {
                        if (v646 != 9 && v646 != 32) {
                          goto LABEL_1462;
                        }
                      }
                      else if (v646 != 160 && v646 != 5760 && v646 != 6158)
                      {
                        goto LABEL_1462;
                      }
                    }
                    else
                    {
                      if (v646 <= 8238)
                      {
                        if ((v646 - 0x2000) < 0xB) {
                          goto LABEL_1448;
                        }
LABEL_1462:
                        int v652 = 0;
                        goto LABEL_1448;
                      }
                      if (v646 != 8239 && v646 != 8287 && v646 != 12288) {
                        goto LABEL_1462;
                      }
                    }
LABEL_1448:
                    if (v652 == v645) {
                      goto LABEL_2468;
                    }
                    v622 += v648;
                    *(void *)(v15 + 80) = v622;
                    if (!--v643) {
                      goto LABEL_2468;
                    }
                    continue;
                  }
                case 20:
                case 21:
                  uint64_t v640 = v14;
                  v641 = a3;
                  uint64_t v642 = v7;
                  BOOL v259 = v619 >= v620;
                  unsigned int v788 = v619 - v620;
                  if (v788 == 0 || !v259) {
                    goto LABEL_2468;
                  }
                  unint64_t v789 = *v1349;
                  int v790 = v631 == 20;
                  while ((unint64_t)v622 < v789)
                  {
                    unsigned int v791 = *v622;
                    if (v791 < 0xC0)
                    {
                      uint64_t v793 = 1;
                    }
                    else
                    {
                      int v792 = v622[1] & 0x3F;
                      if ((v791 & 0x20) != 0)
                      {
                        if ((v791 & 0x10) != 0)
                        {
                          if ((v791 & 8) != 0)
                          {
                            int v794 = v622[2] & 0x3F;
                            int v795 = v622[3] & 0x3F;
                            int v796 = v622[4] & 0x3F;
                            if ((v791 & 4) != 0)
                            {
                              unsigned int v791 = ((v791 & 1) << 30) | (v792 << 24) | (v794 << 18) | (v795 << 12) | (v796 << 6) | v622[5] & 0x3F;
                              uint64_t v793 = 6;
                            }
                            else
                            {
                              unsigned int v791 = ((v791 & 3) << 24) | (v792 << 18) | (v794 << 12) | (v795 << 6) | v796;
                              uint64_t v793 = 5;
                            }
                          }
                          else
                          {
                            unsigned int v791 = ((v791 & 7) << 18) | (v792 << 12) | ((v622[2] & 0x3F) << 6) | v622[3] & 0x3F;
                            uint64_t v793 = 4;
                          }
                        }
                        else
                        {
                          unsigned int v791 = ((v791 & 0xF) << 12) | (v792 << 6) | v622[2] & 0x3F;
                          uint64_t v793 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v793 = 2;
                        unsigned int v791 = v622[1] & 0x3F | ((v791 & 0x1F) << 6);
                      }
                    }
                    unsigned int v797 = v791 - 10;
                    BOOL v798 = v791 == 133;
                    unsigned int v799 = v791 - 8232;
                    int v801 = v797 < 4 || v799 < 2 || v798;
                    if (v801 != v790)
                    {
                      v622 += v793;
                      *(void *)(v15 + 80) = v622;
                      if (--v788) {
                        continue;
                      }
                    }
                    goto LABEL_2468;
                  }
                  goto LABEL_2182;
                default:
                  return v19;
              }
            }
            break;
          case 10:
            unint64_t v425 = *v16;
            v426 = *(unsigned __int8 **)(v15 + 80);
            int v427 = 1;
            while ((unint64_t)v426 < v425)
            {
              *(void *)(v15 + 80) = v426 + 1;
              unsigned int v428 = *v426;
              if (v14 && v428 >= 0xC0)
              {
                if ((v428 & 0x20) != 0)
                {
                  int v430 = v426[1] & 0x3F;
                  if ((v428 & 0x10) != 0)
                  {
                    if ((v428 & 8) != 0)
                    {
                      int v431 = v426[2] & 0x3F;
                      int v432 = v426[3] & 0x3F;
                      int v433 = v426[4] & 0x3F;
                      if ((v428 & 4) != 0)
                      {
                        unsigned int v428 = ((v428 & 1) << 30) | (v430 << 24) | (v431 << 18) | (v432 << 12) | (v433 << 6) | v426[5] & 0x3F;
                        v426 += 6;
                      }
                      else
                      {
                        unsigned int v428 = ((v428 & 3) << 24) | (v430 << 18) | (v431 << 12) | (v432 << 6) | v433;
                        v426 += 5;
                      }
                    }
                    else
                    {
                      unsigned int v428 = ((v428 & 7) << 18) | (v430 << 12) | ((v426[2] & 0x3F) << 6) | v426[3] & 0x3F;
                      v426 += 4;
                    }
                  }
                  else
                  {
                    unsigned int v428 = ((v428 & 0xF) << 12) | (v430 << 6) | v426[2] & 0x3F;
                    v426 += 3;
                  }
                  *(void *)(v15 + 80) = v426;
                }
                else
                {
                  *(void *)(v15 + 80) = v426 + 2;
                  int v429 = v426[1] & 0x3F | ((v428 & 0x1F) << 6);
                  v426 += 2;
                  unsigned int v428 = v429;
                }
              }
              else
              {
                ++v426;
              }
              if (v428 - 36 > 0x3C || ((1 << (v428 - 36)) & 0x1000000010000001) == 0)
              {
                BOOL v436 = v428 >> 13 > 6 || (v428 - 160) >> 5 < 0x6BB;
                if ((v436 ^ (v176 != 15))) {
                  goto LABEL_1995;
                }
              }
              else if (v176 == 15)
              {
                goto LABEL_1995;
              }
              if (++v427 > v47) {
                goto LABEL_1366;
              }
            }
LABEL_1701:
            unsigned int v500 = (unsigned __int16)*v1350;
            if (!*v1350) {
              goto LABEL_1995;
            }
            if ((unint64_t)v426 > *v1348) {
              goto LABEL_1994;
            }
            goto LABEL_1993;
          default:
            return 4294967252;
        }
        switch(v631)
        {
          case 6:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v936 = v619 - v620;
            if (v936 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v937 = *v1349;
            while ((unint64_t)v622 < v937)
            {
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v622) & 8) == 0)
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v936) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
            goto LABEL_2297;
          case 7:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v938 = v619 - v620;
            if (v938 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v939 = *v1349;
            while ((unint64_t)v622 < v939)
            {
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v622) & 8) != 0)
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v938) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
            goto LABEL_2297;
          case 8:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v940 = v619 - v620;
            if (v940 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v941 = *v1349;
            while ((unint64_t)v622 < v941)
            {
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v622) & 1) == 0)
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v940) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
            goto LABEL_2297;
          case 9:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v942 = v619 - v620;
            if (v942 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v943 = *v1349;
            while ((unint64_t)v622 < v943)
            {
              if (*(unsigned char *)(*(void *)(v7 + 104) + *v622))
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v942) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
            goto LABEL_2297;
          case 10:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v944 = v619 - v620;
            if (v944 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v945 = *v1349;
            while ((unint64_t)v622 < v945)
            {
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v622) & 0x10) == 0)
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v944) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
            goto LABEL_2297;
          case 11:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v946 = v619 - v620;
            if (v946 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v947 = *v1349;
            while ((unint64_t)v622 < v947)
            {
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v622) & 0x10) != 0)
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v946) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
            goto LABEL_2297;
          case 12:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            if (v619 <= v620) {
              goto LABEL_2303;
            }
            while (2)
            {
              uint64_t v948 = *v1349;
              if ((unint64_t)v622 >= *v1349) {
                goto LABEL_2297;
              }
              int v949 = *(_DWORD *)(v7 + 252);
              if (v949)
              {
                if (_pcre2_is_newline_8(v622, v949, v948, v1340, v1347)) {
                  goto LABEL_2303;
                }
                v622 = *(unsigned __int8 **)(v15 + 80);
LABEL_2238:
                unsigned int v951 = (unsigned __int16)*v1350;
                if (!*v1350
                  || (unint64_t)(v622 + 1) < *v1349
                  || *(_DWORD *)(v7 + 252)
                  || *v1340 != 2
                  || *v622 != *(unsigned __int8 *)(v7 + 260)
                  || (_DWORD *v1346 = 1, v951 <= 1))
                {
                  *(void *)(v15 + 80) = ++v622;
                  if (++v620 >= *(_DWORD *)(v15 + 60)) {
                    goto LABEL_2303;
                  }
                  continue;
                }
                return 4294967294;
              }
              break;
            }
            uint64_t v950 = *v1340;
            if ((unint64_t)v622 > v948 - v950
              || *v622 != *(unsigned __int8 *)(v7 + 260)
              || v950 != 1 && v622[1] != *(unsigned __int8 *)(v7 + 261))
            {
              goto LABEL_2238;
            }
            goto LABEL_2303;
          case 13:
          case 14:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            v654 = (unsigned __int8 *)*v16;
            if (v621 <= *v16 - v622)
            {
              *(void *)(v15 + 80) = &v622[v621];
            }
            else
            {
              *(void *)(v15 + 80) = v654;
              unsigned int v655 = (unsigned __int16)*v1350;
              if (*v1350 && ((unint64_t)v654 > *v1348 || *v1345))
              {
                _DWORD *v1346 = 1;
                if (v655 > 1) {
                  return 4294967294;
                }
              }
            }
            goto LABEL_2303;
          case 17:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v952 = v619 - v620;
            if (v952 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v953 = *v1349;
            while (2)
            {
              if ((unint64_t)v622 >= v953) {
                goto LABEL_2297;
              }
              int v954 = *v622;
              if (v954 == 10)
              {
                uint64_t v956 = 1;
              }
              else if (v954 == 13)
              {
                v955 = v622 + 1;
                *(void *)(v15 + 80) = v622 + 1;
                if ((unint64_t)(v622 + 1) >= v953) {
                  goto LABEL_2303;
                }
                if (*v955 != 10)
                {
LABEL_2260:
                  v622 = v955;
                  if (!--v952) {
                    goto LABEL_2303;
                  }
                  continue;
                }
                uint64_t v956 = 2;
              }
              else if (*(_WORD *)(v7 + 130) == 2 || (uint64_t v956 = 1, (v954 - 11) >= 2) && v954 != 133)
              {
LABEL_2303:
                v970 = v653;
                if (v12 != 2)
                {
                  v971 = *(unsigned __int8 **)(v15 + 80);
                  uint64_t v7 = v642;
                  unsigned int v13 = v1334;
                  uint64_t v14 = v640;
                  uint64_t v16 = v1349;
                  a3 = v970;
LABEL_3251:
                  if (v971 != *(unsigned __int8 **)(v15 + 8))
                  {
                    v1336 = a3;
                    unsigned int i = v12;
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = 34;
                    goto LABEL_3333;
                  }
                  goto LABEL_2500;
                }
                goto LABEL_2469;
              }
              break;
            }
            v955 = &v622[v956];
            *(void *)(v15 + 80) = v955;
            goto LABEL_2260;
          case 18:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v957 = v619 - v620;
            if (v957 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v958 = *v1349;
            while ((unint64_t)v622 < v958)
            {
              int v959 = *v622;
              if (v959 != 9 && v959 != 32 && v959 != 160)
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v957) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
            goto LABEL_2297;
          case 19:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v960 = v619 - v620;
            if (v960 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v961 = *v1349;
            while ((unint64_t)v622 < v961)
            {
              int v962 = *v622;
              if (v962 == 9 || v962 == 160 || v962 == 32)
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v960) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
            goto LABEL_2297;
          case 20:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v963 = v619 - v620;
            if (v963 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v964 = *v1349;
            while ((unint64_t)v622 < v964)
            {
              int v965 = *v622;
              if ((v965 - 10) >= 4 && v965 != 133)
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v963) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
            goto LABEL_2297;
          case 21:
            uint64_t v640 = v14;
            v653 = a3;
            uint64_t v642 = v7;
            BOOL v259 = v619 >= v620;
            unsigned int v966 = v619 - v620;
            if (v966 == 0 || !v259) {
              goto LABEL_2303;
            }
            unint64_t v967 = *v1349;
            while ((unint64_t)v622 < v967)
            {
              int v968 = *v622;
              if ((v968 - 10) < 4 || v968 == 133)
              {
                *(void *)(v15 + 80) = ++v622;
                if (--v966) {
                  continue;
                }
              }
              goto LABEL_2303;
            }
LABEL_2297:
            unsigned int v969 = (unsigned __int16)*v1350;
            if (*v1350 && ((unint64_t)v622 > *v1348 || *v1345))
            {
              _DWORD *v1346 = 1;
              if (v969 > 1) {
                return 4294967294;
              }
            }
            goto LABEL_2303;
          default:
            return v19;
        }
      }
      if (!v47)
      {
LABEL_1365:
        int v178 = -1;
        goto LABEL_1366;
      }
      long long v175 = (unsigned int *)(v15 + 56);
LABEL_375:
      if (v176 == 22)
      {
        uint64_t v190 = v12;
        v191 = v8;
        v192 = *(unsigned __int8 **)(v15 + 80);
        unint64_t v193 = *v16;
        int v194 = 1;
        while ((unint64_t)v192 < v193)
        {
          v195 = v192 + 1;
          *(void *)(v15 + 80) = v192 + 1;
          unsigned int v196 = *v192;
          if (v14 && v196 >= 0xC0)
          {
            if ((v196 & 0x20) != 0)
            {
              int v197 = *v195 & 0x3F;
              if ((v196 & 0x10) != 0)
              {
                if ((v196 & 8) != 0)
                {
                  int v198 = v192[2] & 0x3F;
                  int v199 = v192[3] & 0x3F;
                  int v200 = v192[4] & 0x3F;
                  if ((v196 & 4) != 0)
                  {
                    unsigned int v196 = ((v196 & 1) << 30) | (v197 << 24) | (v198 << 18) | (v199 << 12) | (v200 << 6) | v192[5] & 0x3F;
                    v195 = v192 + 6;
                  }
                  else
                  {
                    unsigned int v196 = ((v196 & 3) << 24) | (v197 << 18) | (v198 << 12) | (v199 << 6) | v200;
                    v195 = v192 + 5;
                  }
                }
                else
                {
                  unsigned int v196 = ((v196 & 7) << 18) | (v197 << 12) | ((v192[2] & 0x3F) << 6) | v192[3] & 0x3F;
                  v195 = v192 + 4;
                }
              }
              else
              {
                unsigned int v196 = ((v196 & 0xF) << 12) | (v197 << 6) | v192[2] & 0x3F;
                v195 = v192 + 3;
              }
              *(void *)(v15 + 80) = v195;
            }
            else
            {
              v195 = v192 + 2;
              *(void *)(v15 + 80) = v192 + 2;
              unsigned int v196 = v192[1] & 0x3F | ((v196 & 0x1F) << 6);
            }
          }
          v192 = _pcre2_extuni_8(v196, v195, *(void *)(v7 + 152), v193, v1347, 0);
          *(void *)(v15 + 80) = v192;
          unint64_t v193 = *(void *)(v7 + 168);
          if ((unint64_t)v192 >= v193)
          {
            unsigned int v201 = (unsigned __int16)*v1350;
            if (*v1350)
            {
              if ((unint64_t)v192 > *v1348 || *v1345)
              {
                _DWORD *v1346 = 1;
                if (v201 > 1) {
                  return 4294967294;
                }
              }
            }
          }
          if (++v194 > *v175)
          {
            int v178 = -1;
            unsigned int v8 = v191;
            uint64_t v16 = v1349;
LABEL_397:
            uint64_t v12 = v190;
            goto LABEL_1366;
          }
        }
        unsigned int v231 = (unsigned __int16)*v1350;
        if (*v1350)
        {
          uint64_t v16 = v1349;
          unsigned int v8 = v191;
          if ((unint64_t)v192 > *v1348 || *v1345)
          {
            _DWORD *v1346 = 1;
            if (v231 > 1) {
              return 4294967294;
            }
            uint64_t v12 = v190;
            goto LABEL_1995;
          }
LABEL_2005:
          uint64_t v20 = 0;
          uint64_t v12 = v190;
          goto LABEL_2502;
        }
LABEL_1355:
        uint64_t v20 = 0;
        unsigned int v8 = v191;
        uint64_t v16 = v1349;
        uint64_t v12 = v190;
        goto LABEL_2502;
      }
      uint64_t v19 = 4294967252;
      if (v14)
      {
        switch(v176)
        {
          case 6:
            unint64_t v202 = *v16;
            v203 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v204 = 1;
            while ((unint64_t)v203 < v202)
            {
              *(void *)(v15 + 80) = v203 + 1;
              unsigned int v205 = *v203;
              if (v205 < 0xC0)
              {
                ++v203;
              }
              else if ((v205 & 0x20) != 0)
              {
                int v207 = v203[1] & 0x3F;
                if ((v205 & 0x10) != 0)
                {
                  if ((v205 & 8) != 0)
                  {
                    int v208 = v203[2] & 0x3F;
                    int v209 = v203[3] & 0x3F;
                    int v210 = v203[4] & 0x3F;
                    if ((v205 & 4) != 0)
                    {
                      unsigned int v205 = ((v205 & 1) << 30) | (v207 << 24) | (v208 << 18) | (v209 << 12) | (v210 << 6) | v203[5] & 0x3F;
                      v203 += 6;
                    }
                    else
                    {
                      unsigned int v205 = ((v205 & 3) << 24) | (v207 << 18) | (v208 << 12) | (v209 << 6) | v210;
                      v203 += 5;
                    }
                  }
                  else
                  {
                    unsigned int v205 = ((v205 & 7) << 18) | (v207 << 12) | ((v203[2] & 0x3F) << 6) | v203[3] & 0x3F;
                    v203 += 4;
                  }
                }
                else
                {
                  unsigned int v205 = ((v205 & 0xF) << 12) | (v207 << 6) | v203[2] & 0x3F;
                  v203 += 3;
                }
                *(void *)(v15 + 80) = v203;
              }
              else
              {
                *(void *)(v15 + 80) = v203 + 2;
                int v206 = v203[1] & 0x3F | ((v205 & 0x1F) << 6);
                v203 += 2;
                unsigned int v205 = v206;
              }
              if (v205 <= 0x7F && (*(unsigned char *)(*(void *)(v7 + 104) + v205) & 8) != 0) {
                goto LABEL_1995;
              }
              ++v204;
              int v178 = -1;
              if (v204 > v47) {
                goto LABEL_1366;
              }
            }
LABEL_1810:
            unsigned int v500 = (unsigned __int16)*v1350;
            if (!*v1350) {
              goto LABEL_1995;
            }
            if ((unint64_t)v203 > *v1348) {
              goto LABEL_1994;
            }
            goto LABEL_1993;
          case 7:
            uint64_t v590 = 0;
            unint64_t v591 = *v16;
            v592 = *(unsigned __int8 **)(v15 + 80);
            while (1)
            {
              v214 = &v592[v590];
              if ((unint64_t)&v592[v590] >= v591) {
                break;
              }
              int v593 = (char)*v214;
              if (v593 < 0 || (*(unsigned char *)(*(void *)(v7 + 104) + v593) & 8) == 0) {
                goto LABEL_1995;
              }
              *(void *)(v15 + 80) = &v592[++v590];
              int v178 = -1;
              if ((int)v590 + 1 > v47) {
                goto LABEL_1366;
              }
            }
LABEL_1253:
            unsigned int v500 = (unsigned __int16)*v1350;
            if (!*v1350) {
              goto LABEL_1995;
            }
            if ((unint64_t)v214 > *v1348) {
              goto LABEL_1994;
            }
            goto LABEL_1993;
          case 8:
            unint64_t v594 = *v16;
            v595 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v596 = 1;
            while ((unint64_t)v595 < v594)
            {
              if ((char)*v595 & 0x80000000) == 0 && (*(unsigned char *)(*(void *)(v7 + 104) + *v595)) {
                goto LABEL_1995;
              }
              v597 = v595 + 1;
              do
              {
                v595 = v597;
                *(void *)(v15 + 80) = v597;
                if ((unint64_t)v597 >= v594) {
                  break;
                }
                ++v597;
              }
              while ((*v595 & 0xC0) == 0x80);
              ++v596;
              int v178 = -1;
              if (v596 > v47) {
                goto LABEL_1366;
              }
            }
LABEL_1845:
            unsigned int v500 = (unsigned __int16)*v1350;
            if (!*v1350) {
              goto LABEL_1995;
            }
            if ((unint64_t)v595 > *v1348) {
              goto LABEL_1994;
            }
            goto LABEL_1993;
          case 9:
            uint64_t v598 = 0;
            unint64_t v599 = *v16;
            v600 = *(unsigned __int8 **)(v15 + 80);
            while (1)
            {
              v214 = &v600[v598];
              if ((unint64_t)&v600[v598] >= v599) {
                goto LABEL_1253;
              }
              int v601 = (char)*v214;
              if (v601 < 0 || (*(unsigned char *)(*(void *)(v7 + 104) + v601) & 1) == 0) {
                goto LABEL_1995;
              }
              *(void *)(v15 + 80) = &v600[++v598];
              int v178 = -1;
              if ((int)v598 + 1 > v47) {
                goto LABEL_1366;
              }
            }
          case 10:
            unint64_t v602 = *v16;
            v595 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v603 = 1;
            while ((unint64_t)v595 < v602)
            {
              if (((char)*v595 & 0x80000000) == 0 && (*(unsigned char *)(*(void *)(v7 + 104) + *v595) & 0x10) != 0) {
                goto LABEL_1995;
              }
              v604 = v595 + 1;
              do
              {
                v595 = v604;
                *(void *)(v15 + 80) = v604;
                if ((unint64_t)v604 >= v602) {
                  break;
                }
                ++v604;
              }
              while ((*v595 & 0xC0) == 0x80);
              ++v603;
              int v178 = -1;
              if (v603 > v47) {
                goto LABEL_1366;
              }
            }
            goto LABEL_1845;
          case 11:
            uint64_t v605 = 0;
            unint64_t v606 = *v16;
            v607 = *(unsigned __int8 **)(v15 + 80);
            while (1)
            {
              v214 = &v607[v605];
              if ((unint64_t)&v607[v605] >= v606) {
                goto LABEL_1253;
              }
              int v608 = (char)*v214;
              if (v608 < 0 || (*(unsigned char *)(*(void *)(v7 + 104) + v608) & 0x10) == 0) {
                goto LABEL_1995;
              }
              *(void *)(v15 + 80) = &v607[++v605];
              int v178 = -1;
              if ((int)v605 + 1 > v47) {
                goto LABEL_1366;
              }
            }
          case 12:
            uint64_t v190 = v12;
            v191 = v8;
            v609 = *(unsigned __int8 **)(v15 + 80);
            unint64_t v610 = *v16;
            unsigned int v611 = 1;
            while (2)
            {
              if ((unint64_t)v609 >= v610)
              {
                unsigned int v867 = (unsigned __int16)*v1350;
                if (*v1350 && ((unint64_t)v609 > *v1348 || *v1345))
                {
                  _DWORD *v1346 = 1;
                  if (v867 > 1) {
                    return 4294967294;
                  }
                  unsigned int v8 = v191;
                  goto LABEL_2005;
                }
              }
              else
              {
                int v612 = *(_DWORD *)(v7 + 252);
                if (v612)
                {
                  if (_pcre2_is_newline_8(v609, v612, v610, v1340, v1347)) {
                    goto LABEL_1355;
                  }
                  v609 = *(unsigned __int8 **)(v15 + 80);
                  uint64_t v16 = v1349;
                  unint64_t v610 = *v1349;
LABEL_1345:
                  unsigned int v614 = (unsigned __int16)*v1350;
                  v615 = v609 + 1;
                  if (!*v1350
                    || (unint64_t)v615 < v610
                    || *(_DWORD *)(v7 + 252)
                    || *v1340 != 2
                    || *v609 != *(unsigned __int8 *)(v7 + 260)
                    || (_DWORD *v1346 = 1, v614 <= 1))
                  {
                    do
                    {
                      v609 = v615;
                      *(void *)(v15 + 80) = v615;
                      if ((unint64_t)v615 >= v610) {
                        break;
                      }
                      ++v615;
                    }
                    while ((*v609 & 0xC0) == 0x80);
                    ++v611;
                    int v178 = -1;
                    if (v611 > *v175)
                    {
                      unsigned int v8 = v191;
                      goto LABEL_397;
                    }
                    continue;
                  }
                  return 4294967294;
                }
                uint64_t v613 = *v1340;
                if ((unint64_t)v609 > v610 - v613
                  || *v609 != *(unsigned __int8 *)(v7 + 260)
                  || v613 != 1 && v609[1] != *(unsigned __int8 *)(v7 + 261))
                {
                  goto LABEL_1345;
                }
              }
              break;
            }
            uint64_t v20 = 0;
            unsigned int v8 = v191;
            uint64_t v12 = v190;
            goto LABEL_2502;
          case 13:
            unint64_t v616 = *v16;
            v203 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v617 = 1;
            while ((unint64_t)v203 < v616)
            {
              v618 = v203 + 1;
              do
              {
                v203 = v618;
                *(void *)(v15 + 80) = v618;
                if ((unint64_t)v618 >= v616) {
                  break;
                }
                ++v618;
              }
              while ((*v203 & 0xC0) == 0x80);
              ++v617;
              int v178 = -1;
              if (v617 > v47) {
                goto LABEL_1366;
              }
            }
            goto LABEL_1810;
          case 14:
            v214 = *(unsigned __int8 **)(v15 + 80);
            if ((unint64_t)v214 <= *v16 - v47) {
              goto LABEL_1364;
            }
            goto LABEL_1995;
          case 17:
            unint64_t v740 = *v16;
            v426 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v741 = 1;
            while (2)
            {
              if ((unint64_t)v426 >= v740) {
                goto LABEL_1701;
              }
              v742 = v426 + 1;
              *(void *)(v15 + 80) = v426 + 1;
              int v743 = *v426;
              if (v743 >= 0xC0)
              {
                if ((v743 & 0x20) != 0)
                {
                  int v744 = *v742 & 0x3F;
                  if ((v743 & 0x10) != 0)
                  {
                    if ((v743 & 8) != 0)
                    {
                      int v745 = v426[2] & 0x3F;
                      int v746 = v426[3] & 0x3F;
                      int v747 = v426[4] & 0x3F;
                      if ((v743 & 4) != 0)
                      {
                        int v743 = ((v743 & 1) << 30) | (v744 << 24) | (v745 << 18) | (v746 << 12) | (v747 << 6) | v426[5] & 0x3F;
                        v742 = v426 + 6;
                      }
                      else
                      {
                        int v743 = ((v743 & 3) << 24) | (v744 << 18) | (v745 << 12) | (v746 << 6) | v747;
                        v742 = v426 + 5;
                      }
                    }
                    else
                    {
                      int v743 = ((v743 & 7) << 18) | (v744 << 12) | ((v426[2] & 0x3F) << 6) | v426[3] & 0x3F;
                      v742 = v426 + 4;
                    }
                  }
                  else
                  {
                    int v743 = ((v743 & 0xF) << 12) | (v744 << 6) | v426[2] & 0x3F;
                    v742 = v426 + 3;
                  }
                  *(void *)(v15 + 80) = v742;
                }
                else
                {
                  v742 = v426 + 2;
                  *(void *)(v15 + 80) = v426 + 2;
                  int v743 = v426[1] & 0x3F | ((v743 & 0x1F) << 6);
                }
              }
              if (v743 <= 12)
              {
                if ((v743 - 11) >= 2)
                {
                  if (v743 != 10) {
                    goto LABEL_3237;
                  }
                  goto LABEL_1697;
                }
              }
              else if ((v743 - 8232) >= 2 && v743 != 133)
              {
                if (v743 != 13) {
                  goto LABEL_3237;
                }
                if ((unint64_t)v742 < v740 && *v742 == 10) {
                  *(void *)(v15 + 80) = ++v742;
                }
                goto LABEL_1697;
              }
              if (*(_WORD *)(v7 + 130) == 2) {
                goto LABEL_1995;
              }
LABEL_1697:
              ++v741;
              int v178 = -1;
              v426 = v742;
              if (v741 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
          case 18:
            unint64_t v748 = *v16;
            v749 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v750 = 1;
            while (2)
            {
              if ((unint64_t)v749 < v748)
              {
                *(void *)(v15 + 80) = v749 + 1;
                int v751 = *v749;
                if (v751 < 0xC0)
                {
                  ++v749;
                }
                else if ((v751 & 0x20) != 0)
                {
                  int v753 = v749[1] & 0x3F;
                  if ((v751 & 0x10) != 0)
                  {
                    if ((v751 & 8) != 0)
                    {
                      int v754 = v749[2] & 0x3F;
                      int v755 = v749[3] & 0x3F;
                      int v756 = v749[4] & 0x3F;
                      if ((v751 & 4) != 0)
                      {
                        int v751 = ((v751 & 1) << 30) | (v753 << 24) | (v754 << 18) | (v755 << 12) | (v756 << 6) | v749[5] & 0x3F;
                        v749 += 6;
                      }
                      else
                      {
                        int v751 = ((v751 & 3) << 24) | (v753 << 18) | (v754 << 12) | (v755 << 6) | v756;
                        v749 += 5;
                      }
                    }
                    else
                    {
                      int v751 = ((v751 & 7) << 18) | (v753 << 12) | ((v749[2] & 0x3F) << 6) | v749[3] & 0x3F;
                      v749 += 4;
                    }
                  }
                  else
                  {
                    int v751 = ((v751 & 0xF) << 12) | (v753 << 6) | v749[2] & 0x3F;
                    v749 += 3;
                  }
                  *(void *)(v15 + 80) = v749;
                }
                else
                {
                  *(void *)(v15 + 80) = v749 + 2;
                  int v752 = v749[1] & 0x3F | ((v751 & 0x1F) << 6);
                  v749 += 2;
                  int v751 = v752;
                }
                if (v751 < 0x2000)
                {
                  if (v751 <= 159)
                  {
                    if (v751 == 9 || v751 == 32) {
                      goto LABEL_1192;
                    }
                  }
                  else if (v751 == 160 || v751 == 5760 || v751 == 6158)
                  {
                    goto LABEL_1192;
                  }
                }
                else if (v751 > 8238)
                {
                  if (v751 == 8239 || v751 == 8287 || v751 == 12288) {
                    goto LABEL_1192;
                  }
                }
                else if ((v751 - 0x2000) < 0xB)
                {
                  goto LABEL_1192;
                }
                ++v750;
                int v178 = -1;
                if (v750 > v47) {
                  goto LABEL_1366;
                }
                continue;
              }
              break;
            }
            unsigned int v1002 = (unsigned __int16)*v1350;
            if (!*v1350) {
              goto LABEL_1995;
            }
            if ((unint64_t)v749 > *v1348 || *v1345)
            {
              _DWORD *v1346 = 1;
              if (v1002 > 1) {
                return 4294967294;
              }
            }
            goto LABEL_169;
          case 19:
            unint64_t v757 = *v16;
            v758 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v759 = 1;
            while (2)
            {
              if ((unint64_t)v758 >= v757)
              {
                unsigned int v500 = (unsigned __int16)*v1350;
                if (!*v1350) {
                  goto LABEL_1995;
                }
                if ((unint64_t)v758 <= *v1348)
                {
LABEL_1993:
                  if (!*v1345) {
                    goto LABEL_1995;
                  }
                }
                goto LABEL_1994;
              }
              *(void *)(v15 + 80) = v758 + 1;
              int v760 = *v758;
              if (v760 < 0xC0)
              {
                ++v758;
              }
              else if ((v760 & 0x20) != 0)
              {
                int v762 = v758[1] & 0x3F;
                if ((v760 & 0x10) != 0)
                {
                  if ((v760 & 8) != 0)
                  {
                    int v763 = v758[2] & 0x3F;
                    int v764 = v758[3] & 0x3F;
                    int v765 = v758[4] & 0x3F;
                    if ((v760 & 4) != 0)
                    {
                      int v760 = ((v760 & 1) << 30) | (v762 << 24) | (v763 << 18) | (v764 << 12) | (v765 << 6) | v758[5] & 0x3F;
                      v758 += 6;
                    }
                    else
                    {
                      int v760 = ((v760 & 3) << 24) | (v762 << 18) | (v763 << 12) | (v764 << 6) | v765;
                      v758 += 5;
                    }
                  }
                  else
                  {
                    int v760 = ((v760 & 7) << 18) | (v762 << 12) | ((v758[2] & 0x3F) << 6) | v758[3] & 0x3F;
                    v758 += 4;
                  }
                }
                else
                {
                  int v760 = ((v760 & 0xF) << 12) | (v762 << 6) | v758[2] & 0x3F;
                  v758 += 3;
                }
                *(void *)(v15 + 80) = v758;
              }
              else
              {
                *(void *)(v15 + 80) = v758 + 2;
                int v761 = v758[1] & 0x3F | ((v760 & 0x1F) << 6);
                v758 += 2;
                int v760 = v761;
              }
              if (v760 < 0x2000)
              {
                if (v760 <= 159)
                {
                  if (v760 != 9 && v760 != 32) {
                    goto LABEL_1192;
                  }
                  goto LABEL_1752;
                }
                if (v760 == 160 || v760 == 5760) {
                  goto LABEL_1752;
                }
                int v766 = 6158;
              }
              else
              {
                if (v760 <= 8238)
                {
                  if ((v760 - 0x2000) >= 0xB) {
                    goto LABEL_1192;
                  }
LABEL_1752:
                  ++v759;
                  int v178 = -1;
                  if (v759 > v47) {
                    goto LABEL_1366;
                  }
                  continue;
                }
                if (v760 == 8239 || v760 == 12288) {
                  goto LABEL_1752;
                }
                int v766 = 8287;
              }
              break;
            }
            if (v760 != v766) {
              goto LABEL_1192;
            }
            goto LABEL_1752;
          case 20:
            unint64_t v767 = *v16;
            v203 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v768 = 1;
            while (2)
            {
              if ((unint64_t)v203 >= v767) {
                goto LABEL_1810;
              }
              *(void *)(v15 + 80) = v203 + 1;
              unsigned int v769 = *v203;
              if (v769 < 0xC0)
              {
                ++v203;
              }
              else if ((v769 & 0x20) != 0)
              {
                int v771 = v203[1] & 0x3F;
                if ((v769 & 0x10) != 0)
                {
                  if ((v769 & 8) != 0)
                  {
                    int v772 = v203[2] & 0x3F;
                    int v773 = v203[3] & 0x3F;
                    int v774 = v203[4] & 0x3F;
                    if ((v769 & 4) != 0)
                    {
                      unsigned int v769 = ((v769 & 1) << 30) | (v771 << 24) | (v772 << 18) | (v773 << 12) | (v774 << 6) | v203[5] & 0x3F;
                      v203 += 6;
                    }
                    else
                    {
                      unsigned int v769 = ((v769 & 3) << 24) | (v771 << 18) | (v772 << 12) | (v773 << 6) | v774;
                      v203 += 5;
                    }
                  }
                  else
                  {
                    unsigned int v769 = ((v769 & 7) << 18) | (v771 << 12) | ((v203[2] & 0x3F) << 6) | v203[3] & 0x3F;
                    v203 += 4;
                  }
                }
                else
                {
                  unsigned int v769 = ((v769 & 0xF) << 12) | (v771 << 6) | v203[2] & 0x3F;
                  v203 += 3;
                }
                *(void *)(v15 + 80) = v203;
              }
              else
              {
                *(void *)(v15 + 80) = v203 + 2;
                int v770 = v203[1] & 0x3F | ((v769 & 0x1F) << 6);
                v203 += 2;
                unsigned int v769 = v770;
              }
              BOOL v775 = v769 - 10 >= 4 && v769 - 8232 >= 2;
              if (v775 && v769 != 133)
              {
                ++v768;
                int v178 = -1;
                if (v768 > v47) {
                  goto LABEL_1366;
                }
                continue;
              }
              goto LABEL_1192;
            }
          case 21:
            unint64_t v776 = *v16;
            v203 = *(unsigned __int8 **)(v15 + 80);
            unsigned int v777 = 1;
            while (2)
            {
              if ((unint64_t)v203 >= v776) {
                goto LABEL_1810;
              }
              *(void *)(v15 + 80) = v203 + 1;
              unsigned int v778 = *v203;
              if (v778 < 0xC0)
              {
                ++v203;
              }
              else if ((v778 & 0x20) != 0)
              {
                int v780 = v203[1] & 0x3F;
                if ((v778 & 0x10) != 0)
                {
                  if ((v778 & 8) != 0)
                  {
                    int v781 = v203[2] & 0x3F;
                    int v782 = v203[3] & 0x3F;
                    int v783 = v203[4] & 0x3F;
                    if ((v778 & 4) != 0)
                    {
                      unsigned int v778 = ((v778 & 1) << 30) | (v780 << 24) | (v781 << 18) | (v782 << 12) | (v783 << 6) | v203[5] & 0x3F;
                      v203 += 6;
                    }
                    else
                    {
                      unsigned int v778 = ((v778 & 3) << 24) | (v780 << 18) | (v781 << 12) | (v782 << 6) | v783;
                      v203 += 5;
                    }
                  }
                  else
                  {
                    unsigned int v778 = ((v778 & 7) << 18) | (v780 << 12) | ((v203[2] & 0x3F) << 6) | v203[3] & 0x3F;
                    v203 += 4;
                  }
                }
                else
                {
                  unsigned int v778 = ((v778 & 0xF) << 12) | (v780 << 6) | v203[2] & 0x3F;
                  v203 += 3;
                }
                *(void *)(v15 + 80) = v203;
              }
              else
              {
                *(void *)(v15 + 80) = v203 + 2;
                int v779 = v203[1] & 0x3F | ((v778 & 0x1F) << 6);
                v203 += 2;
                unsigned int v778 = v779;
              }
              BOOL v784 = v778 - 10 >= 4 && v778 - 8232 >= 2;
              if (!v784 || v778 == 133)
              {
                ++v777;
                int v178 = -1;
                if (v777 > v47) {
                  goto LABEL_1366;
                }
                continue;
              }
              goto LABEL_1192;
            }
          default:
            return v19;
        }
      }
      switch(v176)
      {
        case 6:
          uint64_t v211 = 0;
          unint64_t v212 = *v16;
          v213 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v213[v211];
            if ((unint64_t)&v213[v211] >= v212) {
              goto LABEL_1253;
            }
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v214) & 8) == 0)
            {
              *(void *)(v15 + 80) = &v213[++v211];
              int v178 = -1;
              if ((int)v211 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1995;
          }
        case 7:
          uint64_t v549 = 0;
          unint64_t v550 = *v16;
          v551 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v551[v549];
            if ((unint64_t)&v551[v549] >= v550) {
              goto LABEL_1253;
            }
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v214) & 8) != 0)
            {
              *(void *)(v15 + 80) = &v551[++v549];
              int v178 = -1;
              if ((int)v549 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1995;
          }
        case 8:
          uint64_t v552 = 0;
          unint64_t v553 = *v16;
          v554 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v554[v552];
            if ((unint64_t)&v554[v552] >= v553) {
              goto LABEL_1253;
            }
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v214) & 1) == 0)
            {
              *(void *)(v15 + 80) = &v554[++v552];
              int v178 = -1;
              if ((int)v552 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1995;
          }
        case 9:
          uint64_t v555 = 0;
          unint64_t v556 = *v16;
          v557 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v557[v555];
            if ((unint64_t)&v557[v555] >= v556) {
              goto LABEL_1253;
            }
            if (*(unsigned char *)(*(void *)(v7 + 104) + *v214))
            {
              *(void *)(v15 + 80) = &v557[++v555];
              int v178 = -1;
              if ((int)v555 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1995;
          }
        case 10:
          uint64_t v558 = 0;
          unint64_t v559 = *v16;
          v560 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v560[v558];
            if ((unint64_t)&v560[v558] >= v559) {
              goto LABEL_1253;
            }
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v214) & 0x10) == 0)
            {
              *(void *)(v15 + 80) = &v560[++v558];
              int v178 = -1;
              if ((int)v558 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1995;
          }
        case 11:
          uint64_t v561 = 0;
          unint64_t v562 = *v16;
          v563 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v563[v561];
            if ((unint64_t)&v563[v561] >= v562) {
              goto LABEL_1253;
            }
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v214) & 0x10) != 0)
            {
              *(void *)(v15 + 80) = &v563[++v561];
              int v178 = -1;
              if ((int)v561 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1995;
          }
        case 12:
          v564 = *(unsigned __int8 **)(v15 + 80);
          unsigned int v565 = 1;
          while (2)
          {
            uint64_t v566 = *v16;
            if ((unint64_t)v564 < *v16)
            {
              int v567 = *(_DWORD *)(v7 + 252);
              if (v567)
              {
                if (_pcre2_is_newline_8(v564, v567, v566, v1340, v1347))
                {
LABEL_169:
                  uint64_t v20 = 0;
LABEL_170:
                  uint64_t v16 = v1349;
                  goto LABEL_2502;
                }
                v564 = *(unsigned __int8 **)(v15 + 80);
                uint64_t v16 = v1349;
              }
              else
              {
                uint64_t v568 = *v1340;
                if ((unint64_t)v564 <= v566 - v568
                  && *v564 == *(unsigned __int8 *)(v7 + 260)
                  && (v568 == 1 || v564[1] == *(unsigned __int8 *)(v7 + 261)))
                {
                  goto LABEL_1995;
                }
              }
              unsigned int v569 = (unsigned __int16)*v1350;
              if (!*v1350
                || (unint64_t)(v564 + 1) < *v16
                || *(_DWORD *)(v7 + 252)
                || *v1340 != 2
                || *v564 != *(unsigned __int8 *)(v7 + 260)
                || (_DWORD *v1346 = 1, v569 <= 1))
              {
                *(void *)(v15 + 80) = ++v564;
                ++v565;
                int v178 = -1;
                if (v565 > *(_DWORD *)(v15 + 56)) {
                  goto LABEL_1366;
                }
                continue;
              }
              return 4294967294;
            }
            break;
          }
          unsigned int v500 = (unsigned __int16)*v1350;
          if (!*v1350) {
            goto LABEL_1995;
          }
          if ((unint64_t)v564 <= *v1348) {
            goto LABEL_1993;
          }
          goto LABEL_1994;
        case 13:
          v214 = *(unsigned __int8 **)(v15 + 80);
          if ((unint64_t)v214 > *v16 - v47) {
            goto LABEL_1253;
          }
LABEL_1364:
          *(void *)(v15 + 80) = &v214[v47];
          goto LABEL_1365;
        case 17:
          unint64_t v570 = *v16;
          v426 = *(unsigned __int8 **)(v15 + 80);
          unsigned int v571 = 1;
          while (2)
          {
            if ((unint64_t)v426 >= v570) {
              goto LABEL_1701;
            }
            v572 = v426 + 1;
            *(void *)(v15 + 80) = v426 + 1;
            unsigned int v573 = *v426;
            if (v573 > 0xC)
            {
              if (v573 != 133)
              {
                if (v573 != 13) {
                  goto LABEL_1995;
                }
                if ((unint64_t)v572 < v570 && *v572 == 10)
                {
                  v572 = v426 + 2;
                  *(void *)(v15 + 80) = v426 + 2;
                }
LABEL_1268:
                ++v571;
                int v178 = -1;
                v426 = v572;
                if (v571 > v47) {
                  goto LABEL_1366;
                }
                continue;
              }
            }
            else if (v573 - 11 >= 2)
            {
              if (v573 != 10) {
                goto LABEL_3237;
              }
              goto LABEL_1268;
            }
            break;
          }
          if (*(_WORD *)(v7 + 130) == 2) {
            goto LABEL_1995;
          }
          goto LABEL_1268;
        case 18:
          uint64_t v574 = 0;
          unint64_t v575 = *v16;
          v576 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v576[v574];
            if ((unint64_t)&v576[v574] >= v575) {
              goto LABEL_1253;
            }
            *(void *)(v15 + 80) = v214 + 1;
            int v577 = *v214;
            if (v577 != 9 && v577 != 32 && v577 != 160)
            {
              ++v574;
              int v178 = -1;
              if ((int)v574 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1192;
          }
        case 19:
          uint64_t v578 = 0;
          unint64_t v579 = *v16;
          v580 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v580[v578];
            if ((unint64_t)&v580[v578] >= v579) {
              goto LABEL_1253;
            }
            *(void *)(v15 + 80) = v214 + 1;
            int v581 = *v214;
            if (v581 == 9 || v581 == 160 || v581 == 32)
            {
              ++v578;
              int v178 = -1;
              if ((int)v578 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1192;
          }
        case 20:
          uint64_t v582 = 0;
          unint64_t v583 = *v16;
          v584 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v584[v582];
            if ((unint64_t)&v584[v582] >= v583) {
              goto LABEL_1253;
            }
            *(void *)(v15 + 80) = v214 + 1;
            int v585 = *v214;
            if ((v585 - 10) >= 4 && v585 != 133)
            {
              ++v582;
              int v178 = -1;
              if ((int)v582 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1192;
          }
        case 21:
          uint64_t v586 = 0;
          unint64_t v587 = *v16;
          v588 = *(unsigned __int8 **)(v15 + 80);
          while (2)
          {
            v214 = &v588[v586];
            if ((unint64_t)&v588[v586] >= v587) {
              goto LABEL_1253;
            }
            *(void *)(v15 + 80) = v214 + 1;
            int v589 = *v214;
            if ((v589 - 10) < 4 || v589 == 133)
            {
              ++v586;
              int v178 = -1;
              if ((int)v586 + 1 > v47) {
                goto LABEL_1366;
              }
              continue;
            }
            goto LABEL_1192;
          }
        default:
          return v19;
      }
    case 0x6Eu:
    case 0x6Fu:
      uint64_t v79 = a2 + 1;
      *(void *)(v15 + 16) = a2 + 1;
      unint64_t v80 = a2 + 33;
      *(void *)uint64_t v15 = a2 + 33;
      unsigned int v81 = a2[33] - 98;
      if (v81 > 0xB)
      {
        *(void *)(v15 + 56) = 0x100000001;
        unsigned int v84 = 1;
        unsigned int v83 = 1;
        if (v14)
        {
LABEL_130:
          unint64_t v85 = *v16;
          char v86 = *(unsigned __int8 **)(v15 + 80);
          unsigned int v87 = 1;
          while ((unint64_t)v86 < v85)
          {
            char v88 = v86 + 1;
            *(void *)(v15 + 80) = v86 + 1;
            unsigned int v89 = *v86;
            if (v89 < 0xC0) {
              goto LABEL_146;
            }
            if ((v89 & 0x20) != 0)
            {
              int v90 = *v88 & 0x3F;
              if ((v89 & 0x10) != 0)
              {
                if ((v89 & 8) != 0)
                {
                  int v91 = v86[2] & 0x3F;
                  int v92 = v86[3] & 0x3F;
                  int v93 = v86[4] & 0x3F;
                  if ((v89 & 4) != 0)
                  {
                    unsigned int v89 = ((v89 & 1) << 30) | (v90 << 24) | (v91 << 18) | (v92 << 12) | (v93 << 6) | v86[5] & 0x3F;
                    char v88 = v86 + 6;
                  }
                  else
                  {
                    unsigned int v89 = ((v89 & 3) << 24) | (v90 << 18) | (v91 << 12) | (v92 << 6) | v93;
                    char v88 = v86 + 5;
                  }
                }
                else
                {
                  unsigned int v89 = ((v89 & 7) << 18) | (v90 << 12) | ((v86[2] & 0x3F) << 6) | v86[3] & 0x3F;
                  char v88 = v86 + 4;
                }
              }
              else
              {
                unsigned int v89 = ((v89 & 0xF) << 12) | (v90 << 6) | v86[2] & 0x3F;
                char v88 = v86 + 3;
              }
              *(void *)(v15 + 80) = v88;
            }
            else
            {
              char v88 = v86 + 2;
              *(void *)(v15 + 80) = v86 + 2;
              unsigned int v89 = v86[1] & 0x3F | ((v89 & 0x1F) << 6);
            }
            if (v89 < 0x100)
            {
LABEL_146:
              if (((v79[(unint64_t)v89 >> 3] >> (v89 & 7)) & 1) == 0) {
                goto LABEL_1192;
              }
            }
            else if (v18 == 110)
            {
              goto LABEL_1192;
            }
            ++v87;
            char v86 = v88;
            if (v87 > v83) {
              goto LABEL_667;
            }
          }
          goto LABEL_691;
        }
        goto LABEL_663;
      }
      if (((1 << v81) & 0x73F) != 0)
      {
        unint64_t v80 = a2 + 34;
        *(void *)uint64_t v15 = a2 + 34;
        unsigned int v82 = a2[33] - 98;
        unsigned int v83 = rep_min[v82];
        *(_DWORD *)(v15 + 56) = v83;
        unsigned int v84 = rep_max[v82];
        *(_DWORD *)(v15 + 60) = v84;
        uint64_t v12 = rep_typ[v82];
        if (v14) {
          goto LABEL_129;
        }
      }
      else
      {
        unsigned int v83 = __rev16(*((unsigned __int16 *)a2 + 17));
        *(_DWORD *)(v15 + 56) = v83;
        unsigned int v312 = __rev16(*((unsigned __int16 *)a2 + 18));
        if (v312) {
          unsigned int v84 = v312;
        }
        else {
          unsigned int v84 = -1;
        }
        *(_DWORD *)(v15 + 60) = v84;
        uint64_t v12 = rep_typ[a2[33] - 98];
        unint64_t v80 = a2 + 38;
        *(void *)uint64_t v15 = a2 + 38;
        if (v14)
        {
LABEL_129:
          if (v83) {
            goto LABEL_130;
          }
          goto LABEL_667;
        }
      }
      if (v83)
      {
LABEL_663:
        uint64_t v313 = 0;
        unint64_t v314 = *v16;
        v315 = *(unsigned __int8 **)(v15 + 80);
        while (1)
        {
          char v86 = &v315[v313];
          if ((unint64_t)&v315[v313] >= v314) {
            break;
          }
          *(void *)(v15 + 80) = v86 + 1;
          if (((v79[(unint64_t)*v86 >> 3] >> (*v86 & 7)) & 1) == 0) {
            goto LABEL_1192;
          }
          if ((int)++v313 + 1 > v83) {
            goto LABEL_667;
          }
        }
LABEL_691:
        unsigned int v64 = (unsigned __int16)*v1350;
        if (!*v1350) {
          goto LABEL_1192;
        }
        if ((unint64_t)v86 > *v1348) {
          goto LABEL_1191;
        }
        goto LABEL_1190;
      }
LABEL_667:
      if (v84 == v83) {
        goto LABEL_2500;
      }
      if (!v12)
      {
        v1336 = a3;
        unsigned int i = 0;
        if (v14)
        {
          char v1302 = -56;
        }
        else
        {
LABEL_3386:
          LODWORD(v12) = 0;
          char v1302 = 23;
        }
        a2 = v80;
        goto LABEL_3333;
      }
      v316 = *(unsigned __int8 **)(v15 + 80);
      *(void *)(v15 + 8) = v316;
      if (!v14)
      {
        v465 = v316;
        BOOL v259 = v84 >= v83;
        unsigned int v466 = v84 - v83;
        if (v466 != 0 && v259)
        {
          unint64_t v467 = *v16;
          v465 = v316;
          while ((unint64_t)v465 < v467)
          {
            if ((v79[(unint64_t)*v465 >> 3] >> (*v465 & 7)))
            {
              *(void *)(v15 + 80) = ++v465;
              if (--v466) {
                continue;
              }
            }
            goto LABEL_1887;
          }
          unsigned int v803 = (unsigned __int16)*v1350;
          if (*v1350 && ((unint64_t)v465 > *v1348 || *v1345))
          {
            _DWORD *v1346 = 1;
            if (v803 > 1) {
              return 4294967294;
            }
          }
        }
LABEL_1887:
        if (v12 == 2) {
          goto LABEL_2500;
        }
LABEL_3236:
        v1336 = a3;
        unsigned int i = v12;
        if (v465 >= v316)
        {
          LODWORD(v12) = 0;
          a2 = *(unsigned __int8 **)v15;
          char v1302 = 24;
          goto LABEL_3333;
        }
        goto LABEL_3237;
      }
      BOOL v259 = v84 >= v83;
      unsigned int v317 = v84 - v83;
      if (v317 == 0 || !v259) {
        goto LABEL_1881;
      }
      unint64_t v318 = *v16;
      while ((unint64_t)v316 < v318)
      {
        unsigned int v319 = *v316;
        if (v319 < 0xC0)
        {
          uint64_t v321 = 1;
LABEL_688:
          if (((v79[(unint64_t)v319 >> 3] >> (v319 & 7)) & 1) == 0) {
            goto LABEL_1881;
          }
          goto LABEL_689;
        }
        int v320 = v316[1] & 0x3F;
        if ((v319 & 0x20) != 0)
        {
          if ((v319 & 0x10) != 0)
          {
            if ((v319 & 8) != 0)
            {
              int v322 = v316[2] & 0x3F;
              int v323 = v316[3] & 0x3F;
              int v324 = v316[4] & 0x3F;
              if ((v319 & 4) != 0)
              {
                unsigned int v319 = ((v319 & 1) << 30) | (v320 << 24) | (v322 << 18) | (v323 << 12) | (v324 << 6) | v316[5] & 0x3F;
                uint64_t v321 = 6;
              }
              else
              {
                unsigned int v319 = ((v319 & 3) << 24) | (v320 << 18) | (v322 << 12) | (v323 << 6) | v324;
                uint64_t v321 = 5;
              }
            }
            else
            {
              unsigned int v319 = ((v319 & 7) << 18) | (v320 << 12) | ((v316[2] & 0x3F) << 6) | v316[3] & 0x3F;
              uint64_t v321 = 4;
            }
          }
          else
          {
            unsigned int v319 = ((v319 & 0xF) << 12) | (v320 << 6) | v316[2] & 0x3F;
            uint64_t v321 = 3;
          }
        }
        else
        {
          uint64_t v321 = 2;
          unsigned int v319 = v316[1] & 0x3F | ((v319 & 0x1F) << 6);
        }
        if (v319 < 0x100) {
          goto LABEL_688;
        }
        if (v18 == 110) {
          goto LABEL_1881;
        }
LABEL_689:
        v316 += v321;
        *(void *)(v15 + 80) = v316;
        if (!--v317) {
          goto LABEL_1881;
        }
      }
      unsigned int v802 = (unsigned __int16)*v1350;
      if (!*v1350 || (unint64_t)v316 <= *v1348 && !*v1345 || (_DWORD *v1346 = 1, v802 <= 1))
      {
LABEL_1881:
        if (v12 != 2)
        {
          v1336 = a3;
          unsigned int i = v12;
LABEL_3355:
          LODWORD(v12) = 0;
          a2 = *(unsigned __int8 **)v15;
          char v1302 = -55;
          goto LABEL_3333;
        }
        goto LABEL_2500;
      }
      return 4294967294;
    case 0x70u:
      *(void *)(v15 + 16) = a2 + 3;
      v215 = &a2[__rev16(*(unsigned __int16 *)(a2 + 1))];
      *(void *)uint64_t v15 = v215;
      unsigned int v216 = *v215 - 98;
      if (v216 > 0xB)
      {
        *(void *)(v15 + 56) = 0x100000001;
      }
      else
      {
        if (((1 << v216) & 0x73F) != 0)
        {
          *(void *)uint64_t v15 = v215 + 1;
          unsigned int v217 = *v215 - 98;
          unsigned int v218 = rep_min[v217];
          *(_DWORD *)(v15 + 56) = v218;
          unsigned int v219 = rep_max[v217];
          *(_DWORD *)(v15 + 60) = v219;
          uint64_t v12 = rep_typ[v217];
        }
        else
        {
          unsigned int v218 = __rev16(*(unsigned __int16 *)(v215 + 1));
          *(_DWORD *)(v15 + 56) = v218;
          unsigned int v219 = __rev16(*(unsigned __int16 *)(v215 + 3));
          if (!v219) {
            unsigned int v219 = -1;
          }
          *(_DWORD *)(v15 + 60) = v219;
          uint64_t v12 = rep_typ[*v215 - 98];
          *(void *)uint64_t v15 = v215 + 5;
        }
        if (!v218)
        {
          unsigned int v488 = 0;
LABEL_1071:
          if (v488 == v219) {
            goto LABEL_2500;
          }
          if (v12)
          {
            v490 = *(unsigned __int8 **)(v15 + 80);
            *(void *)(v15 + 8) = v490;
            while (1)
            {
              if (v488 >= *(_DWORD *)(v15 + 60)) {
                goto LABEL_1893;
              }
              if ((unint64_t)v490 >= *v16) {
                break;
              }
              unsigned int v491 = *v490;
              uint64_t v492 = 1;
              if (v14 && v491 >= 0xC0)
              {
                int v493 = v490[1] & 0x3F;
                if ((v491 & 0x20) != 0)
                {
                  if ((v491 & 0x10) != 0)
                  {
                    if ((v491 & 8) != 0)
                    {
                      int v494 = v490[2] & 0x3F;
                      int v495 = v490[3] & 0x3F;
                      int v496 = v490[4] & 0x3F;
                      if ((v491 & 4) != 0)
                      {
                        unsigned int v491 = ((v491 & 1) << 30) | (v493 << 24) | (v494 << 18) | (v495 << 12) | (v496 << 6) | v490[5] & 0x3F;
                        uint64_t v492 = 6;
                      }
                      else
                      {
                        unsigned int v491 = ((v491 & 3) << 24) | (v493 << 18) | (v494 << 12) | (v495 << 6) | v496;
                        uint64_t v492 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v491 = ((v491 & 7) << 18) | (v493 << 12) | ((v490[2] & 0x3F) << 6) | v490[3] & 0x3F;
                      uint64_t v492 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v491 = ((v491 & 0xF) << 12) | (v493 << 6) | v490[2] & 0x3F;
                    uint64_t v492 = 3;
                  }
                }
                else
                {
                  uint64_t v492 = 2;
                  unsigned int v491 = v490[1] & 0x3F | ((v491 & 0x1F) << 6);
                }
              }
              BOOL v497 = _pcre2_xclass_8(v491, *(unsigned char **)(v15 + 16));
              uint64_t v16 = v1349;
              if (!v497) {
                goto LABEL_1893;
              }
              v490 = (unsigned __int8 *)(*(void *)(v15 + 80) + v492);
              *(void *)(v15 + 80) = v490;
              ++v488;
            }
            unsigned int v804 = (unsigned __int16)*v1350;
            if (*v1350 && ((unint64_t)v490 > *v1348 || *v1345))
            {
              _DWORD *v1346 = 1;
              if (v804 > 1) {
                return 4294967294;
              }
            }
LABEL_1893:
            if (v12 == 2) {
              goto LABEL_2500;
            }
            v1336 = a3;
            unsigned int i = v12;
LABEL_3348:
            LODWORD(v12) = 0;
            a2 = *(unsigned __int8 **)v15;
            char v1302 = 101;
            goto LABEL_3333;
          }
          v1336 = a3;
          unsigned int i = 0;
LABEL_3406:
          LODWORD(v12) = 0;
          a2 = *(unsigned __int8 **)v15;
          char v1302 = 100;
          goto LABEL_3333;
        }
      }
      unsigned int v481 = 1;
      do
      {
        long long v170 = *(unsigned __int8 **)(v15 + 80);
        if ((unint64_t)v170 >= *v16) {
          goto LABEL_1065;
        }
        *(void *)(v15 + 80) = v170 + 1;
        unsigned int v482 = *v170;
        if (v14 && v482 >= 0xC0)
        {
          if ((v482 & 0x20) != 0)
          {
            int v483 = v170[1] & 0x3F;
            if ((v482 & 0x10) != 0)
            {
              if ((v482 & 8) != 0)
              {
                int v485 = v170[2] & 0x3F;
                int v486 = v170[3] & 0x3F;
                int v487 = v170[4] & 0x3F;
                if ((v482 & 4) != 0)
                {
                  unsigned int v482 = ((v482 & 1) << 30) | (v483 << 24) | (v485 << 18) | (v486 << 12) | (v487 << 6) | v170[5] & 0x3F;
                  v484 = v170 + 6;
                }
                else
                {
                  unsigned int v482 = ((v482 & 3) << 24) | (v483 << 18) | (v485 << 12) | (v486 << 6) | v487;
                  v484 = v170 + 5;
                }
              }
              else
              {
                unsigned int v482 = ((v482 & 7) << 18) | (v483 << 12) | ((v170[2] & 0x3F) << 6) | v170[3] & 0x3F;
                v484 = v170 + 4;
              }
            }
            else
            {
              unsigned int v482 = ((v482 & 0xF) << 12) | (v483 << 6) | v170[2] & 0x3F;
              v484 = v170 + 3;
            }
            *(void *)(v15 + 80) = v484;
          }
          else
          {
            *(void *)(v15 + 80) = v170 + 2;
            unsigned int v482 = v170[1] & 0x3F | ((v482 & 0x1F) << 6);
          }
        }
        uint64_t v20 = _pcre2_xclass_8(v482, *(unsigned char **)(v15 + 16));
        if (!v20) {
          goto LABEL_241;
        }
        ++v481;
        unsigned int v488 = *(_DWORD *)(v15 + 56);
        uint64_t v16 = v1349;
      }
      while (v481 <= v488);
      unsigned int v219 = *(_DWORD *)(v15 + 60);
      goto LABEL_1071;
    case 0x71u:
    case 0x72u:
      BOOL v94 = v18 == 114;
      *(_DWORD *)(v15 + 64) = v94;
      *(void *)(v15 + 40) = ((a2[1] << 9) | (2 * a2[2])) - 2;
      int v95 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      goto LABEL_160;
    case 0x73u:
    case 0x74u:
      BOOL v94 = v18 == 116;
      *(_DWORD *)(v15 + 64) = v94;
      unsigned int v96 = __rev16(*(unsigned __int16 *)(a2 + 3));
      uint64_t v97 = *(void *)(v7 + 136);
      int v98 = a2[1];
      int v99 = a2[2];
      uint64_t v100 = *(unsigned __int16 *)(v7 + 134);
      int v95 = a2 + 5;
      *(void *)uint64_t v15 = a2 + 5;
      if (!v96) {
        goto LABEL_160;
      }
      unsigned int v101 = v99 | (v98 << 8);
      uint64_t v102 = *(unsigned __int8 **)(v15 + 120);
      BOOL v103 = (unsigned __int8 *)(v97 + v101 * (unint64_t)v100 + 1);
      while (2)
      {
        uint64_t v104 = (unsigned __int8 *)(((*(v103 - 1) << 9) | (2 * *v103)) - 2);
        *(void *)(v15 + 40) = v104;
        if (v104 >= v102)
        {
          if (v96 < 2) {
            goto LABEL_160;
          }
        }
        else
        {
          BOOL v105 = *(void *)(v15 + 8 * (void)v104 + 128) == -1 && v96 > 1;
          if (!v105)
          {
LABEL_160:
            int v106 = *v95;
            if ((v106 - 98) >= 6)
            {
              if ((v106 - 104) >= 2)
              {
                int v325 = match_ref(*(void *)(v15 + 40), v94, v15, v7, v1355);
                if (v325)
                {
                  uint64_t v16 = v1349;
                  if (v325 < 1)
                  {
                    v326 = *(unsigned __int8 **)(v15 + 80);
                    if ((unint64_t)v326 < *v1349) {
                      goto LABEL_1995;
                    }
                  }
                  else
                  {
                    v326 = (unsigned __int8 *)*v1349;
                    *(void *)(v15 + 80) = *v1349;
                  }
                  unsigned int v545 = (unsigned __int16)*v1350;
                  if (!*v1350 || (unint64_t)v326 <= *v1348 && !*v1345) {
                    goto LABEL_1995;
                  }
                  _DWORD *v1346 = 1;
                  if (v545 <= 1) {
                    goto LABEL_1995;
                  }
                  return 4294967294;
                }
                *(void *)(v15 + 80) += v1355[0];
LABEL_3300:
                uint64_t v16 = v1349;
                goto LABEL_2500;
              }
              unsigned int v108 = __rev16(*(unsigned __int16 *)(v95 + 1));
              *(_DWORD *)(v15 + 56) = v108;
              unsigned int v109 = __rev16(*(unsigned __int16 *)(v95 + 3));
              *(_DWORD *)(v15 + 60) = v109;
              unsigned int v118 = *v95;
              int v117 = v95 + 5;
              uint64_t v12 = rep_typ[v118 - 98];
              if (!v109) {
                unsigned int v109 = -1;
              }
              *(_DWORD *)(v15 + 60) = v109;
              *(void *)uint64_t v15 = v117;
            }
            else
            {
              *(void *)uint64_t v15 = v95 + 1;
              unsigned int v107 = *v95 - 98;
              unsigned int v108 = rep_min[v107];
              *(_DWORD *)(v15 + 56) = v108;
              unsigned int v109 = rep_max[v107];
              *(_DWORD *)(v15 + 60) = v109;
              uint64_t v12 = rep_typ[v107];
            }
            unint64_t v119 = *(void *)(v15 + 40);
            if (v119 >= *(void *)(v15 + 120)
              || (int v120 = (unsigned __int8 **)(v15 + 8 * v119), v121 = v120[16], v121 == (unsigned __int8 *)-1))
            {
              if (!v108 || (*(unsigned char *)(v7 + 241) & 2) != 0) {
                goto LABEL_2500;
              }
            }
            else
            {
              if (v121 == v120[17]) {
                goto LABEL_2500;
              }
              if (!v108)
              {
                unsigned int v122 = 0;
                goto LABEL_193;
              }
            }
            unsigned int v123 = 1;
            while (1)
            {
              v1354 = 0;
              int v124 = match_ref(*(void *)(v15 + 40), *(_DWORD *)(v15 + 64), v15, v7, &v1354);
              if (v124) {
                break;
              }
              *(void *)(v15 + 80) += v1354;
              ++v123;
              unsigned int v122 = *(_DWORD *)(v15 + 56);
              if (v123 > v122)
              {
                unsigned int v109 = *(_DWORD *)(v15 + 60);
                uint64_t v16 = v1349;
LABEL_193:
                if (v122 == v109) {
                  goto LABEL_2500;
                }
                if (v12)
                {
                  *(void *)(v15 + 8) = *(void *)(v15 + 80);
                  *(void *)(v15 + 24) = *(void *)(v15 + 8 * *(void *)(v15 + 40) + 136)
                                        - *(void *)(v15 + 8 * *(void *)(v15 + 40) + 128);
                  if (v122 < v109)
                  {
                    int v125 = 1;
                    while (1)
                    {
                      v1354 = 0;
                      int v126 = match_ref(*(void *)(v15 + 40), *(_DWORD *)(v15 + 64), v15, v7, &v1354);
                      if (v126) {
                        break;
                      }
                      if (v1354 != *(unsigned __int8 **)(v15 + 24)) {
                        int v125 = 0;
                      }
                      *(void *)(v15 + 80) += v1354;
                      if (++v122 >= *(_DWORD *)(v15 + 60)) {
                        goto LABEL_1208;
                      }
                    }
                    if (v126 >= 1)
                    {
                      unsigned int v547 = (unsigned __int16)*v1350;
                      if (*v1350)
                      {
                        if (*v1349 > *v1348)
                        {
                          _DWORD *v1346 = 1;
                          if (v547 >= 2) {
                            return 4294967294;
                          }
                        }
                      }
                    }
LABEL_1208:
                    uint64_t v16 = v1349;
                    if (!v125)
                    {
                      v1336 = a3;
                      unsigned int i = v12;
                      *(_DWORD *)(v15 + 60) = v122;
LABEL_3351:
                      LODWORD(v12) = 0;
                      a2 = *(unsigned __int8 **)v15;
                      char v1302 = 22;
                      goto LABEL_3333;
                    }
                  }
                  v548 = *(unsigned __int8 **)(v15 + 80);
LABEL_3234:
                  v1336 = a3;
                  unsigned int i = v12;
                  if ((unint64_t)v548 >= *(void *)(v15 + 8))
                  {
                    LODWORD(v12) = 0;
                    a2 = *(unsigned __int8 **)v15;
                    char v1302 = 21;
                    goto LABEL_3333;
                  }
LABEL_3237:
                  uint64_t v20 = 0;
                  goto LABEL_2502;
                }
                v1336 = a3;
                unsigned int i = 0;
LABEL_3365:
                LODWORD(v12) = 0;
                v1353 = 0;
                a2 = *(unsigned __int8 **)v15;
                char v1302 = 20;
                goto LABEL_3333;
              }
            }
            if (v124 < 1)
            {
              v294 = *(unsigned __int8 **)(v15 + 80);
              uint64_t v16 = v1349;
              if ((unint64_t)v294 < *v1349) {
                goto LABEL_1192;
              }
            }
            else
            {
              uint64_t v16 = v1349;
              v294 = (unsigned __int8 *)*v1349;
              *(void *)(v15 + 80) = *v1349;
            }
            unsigned int v498 = (unsigned __int16)*v1350;
            if (*v1350 && ((unint64_t)v294 > *v1348 || *v1345))
            {
              _DWORD *v1346 = 1;
              if (v498 >= 2) {
                return 4294967294;
              }
            }
LABEL_1192:
            uint64_t v20 = 0;
            goto LABEL_2502;
          }
        }
        v103 += v100;
        --v96;
        continue;
      }
    case 0x75u:
      uint64_t v1304 = __rev16(*(unsigned __int16 *)(a2 + 1));
      v1013 = (unsigned __int8 *)(*(void *)(v7 + 144) + v1304);
      unsigned int i = v12;
      if (v1304) {
        LODWORD(v1304) = __rev16(*(unsigned __int16 *)(v1013 + 3));
      }
      v1336 = a3;
      LODWORD(v12) = v1304 | 0x40000;
      if (*(_DWORD *)(v15 + 104) == -1) {
        goto LABEL_3424;
      }
      v1305 = (unsigned __int8 **)v15;
      do
      {
        v1306 = v1305[14];
        if (v1306 == (unsigned __int8 *)-1) {
          goto LABEL_3424;
        }
        v1307 = &v1306[*(void *)(v7 + 32)];
        v1305 = (unsigned __int8 **)&v1307[v1341];
      }
      while (*((_DWORD *)v1307 + 13) != v12);
      if (*(unsigned __int8 **)(v15 + 80) == v1305[10]) {
        return 4294967244;
      }
LABEL_3424:
      *(void *)(v15 + 8) = v1013;
      *(_DWORD *)(v15 + 56) = v12;
      uint64_t v1298 = *v1013;
      goto LABEL_3425;
    case 0x76u:
    case 0x77u:
      uint64_t v20 = do_callout(v15, (void *)v7, (uint64_t *)v1355);
      if ((int)v20 > 0) {
        goto LABEL_169;
      }
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_170;
      }
      unint64_t v110 = &v1355[0][*(void *)v15];
      goto LABEL_3299;
    case 0x78u:
      do
      {
        a2 += __rev16(*(unsigned __int16 *)(a2 + 1));
        *(void *)uint64_t v15 = a2;
      }
      while (*a2 == 120);
      goto LABEL_2500;
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
      unint64_t v60 = 0;
      size_t v61 = &a2[-__rev16(*(unsigned __int16 *)(a2 + 1))];
      int v62 = *v61;
      if (v62 == 134 || v62 == 138) {
        goto LABEL_596;
      }
      unint64_t v63 = (unsigned __int8 *)(*(void *)(v7 + 32) + *(void *)(v15 + 112));
      unint64_t v60 = &v63[v1341];
      *(void *)(v15 + 112) = *(void *)&v63[v1341 + 112];
      v1343 = v63;
      if (*((unsigned __int16 *)v63 + 27) << 16 == 196608)
      {
        memcpy(v60 + 128, (const void *)(v15 + 128), 8 * *(void *)(v15 + 120));
        uint64_t v16 = v1349;
        *((void *)v60 + 15) = *(void *)(v15 + 120);
        *((void *)v60 + 12) = *(void *)(v15 + 96);
        *(void *)(v15 + 32) = v15 - (void)v60;
        uint64_t v20 = 1;
        goto LABEL_2502;
      }
      int v62 = *v61;
LABEL_596:
      uint64_t v20 = 1;
      switch(v62)
      {
        case 126:
        case 128:
          v295 = *(unsigned __int8 **)(v15 + 80);
          if ((unint64_t)v295 > *(void *)(v7 + 192)) {
            *(void *)(v7 + 192) = v295;
          }
          *(void *)(v15 + 80) = *((void *)v60 + 10);
          goto LABEL_613;
        case 127:
        case 129:
          goto LABEL_2502;
        case 130:
        case 131:
          v297 = *(unsigned __int8 **)(v15 + 80);
          if ((unint64_t)v297 > *(void *)(v7 + 192)) {
            *(void *)(v7 + 192) = v297;
          }
          *(void *)(v15 + 80) = *((void *)v60 + 10);
          goto LABEL_1020;
        case 132:
LABEL_613:
          *(void *)(v15 + 32) = v15 - (void)v60;
          for (k = *(void *)v60; ; *(void *)unint64_t v60 = k)
          {
            k += __rev16(*(unsigned __int16 *)(k + 1));
            if (*(unsigned char *)k != 120) {
              break;
            }
          }
          goto LABEL_1020;
        case 133:
          uint64_t v20 = _pcre2_script_run_8(*((unsigned __int8 **)v60 + 10), *(void *)(v15 + 80), v1347);
          uint64_t v16 = v1349;
          if (v20) {
            goto LABEL_1020;
          }
          goto LABEL_2502;
        case 136:
        case 137:
        case 141:
        case 142:
          unsigned int v292 = *(unsigned __int16 *)(v61 + 3);
          if (*(_DWORD *)(v15 + 104) == bswap32(v292) >> 16)
          {
            memcpy((void *)(v15 + 128), &v1343[v1341 + 128], 8 * *(void *)&v1343[v1341 + 120]);
            uint64_t v16 = v1349;
            *(void *)(v15 + 120) = *(void *)&v1343[v1341 + 120];
            *(void *)(v15 + 104) = *(void *)&v1343[v1341 + 104];
            v230 = *(unsigned __int8 **)&v1343[v1341];
          }
          else
          {
            unsigned int v298 = __rev16(v292);
            unint64_t v299 = 2 * v298 - 2;
            *(_DWORD *)(v15 + 108) = v298;
            uint64_t v300 = *(void *)(v7 + 152);
            v301 = (unsigned __int8 *)(*((void *)v60 + 10) - v300);
            v302 = (unsigned __int8 **)(v15 + 8 * v299);
            v303 = (unsigned __int8 *)(*(void *)(v15 + 80) - v300);
            v302[16] = v301;
            v302[17] = v303;
            if (*(void *)(v15 + 120) <= v299) {
              *(void *)(v15 + 120) = v299 + 2;
            }
LABEL_1020:
            v230 = *(unsigned __int8 **)v15;
            if (**(unsigned char **)v15 == 124)
            {
              memcpy(v60 + 80, (const void *)(v15 + 80), __n);
              uint64_t v16 = v1349;
              uint64_t v20 = 4294966298;
              goto LABEL_2502;
            }
            int v468 = *(unsigned __int8 *)(v15 + 73);
            if (v468 != 121 && (!v60 || *(void *)(v15 + 80) != *((void *)v60 + 10)))
            {
              v1336 = a3;
              unsigned int i = v12;
              LODWORD(v12) = 0;
              v1303 = v230 + 3;
              if (v468 == 123) {
                char v1302 = 6;
              }
              else {
                char v1302 = 7;
              }
              if (v468 == 123) {
                a2 = v1303;
              }
              else {
                a2 = v61;
              }
              goto LABEL_3333;
            }
          }
          break;
        default:
          goto LABEL_1020;
      }
      goto LABEL_3304;
    case 0x7Du:
      uint64_t v220 = __rev16(*(unsigned __int16 *)(a2 + 1));
      if (v14)
      {
        if (v220)
        {
          unint64_t v221 = *(void *)(v7 + 160);
          v222 = *(unsigned __int8 **)(v15 + 80);
          while ((unint64_t)v222 > v221)
          {
            LODWORD(v220) = v220 - 1;
            v223 = v222 - 1;
            do
            {
              *(void *)(v15 + 80) = v223;
              char v224 = *v223--;
            }
            while ((v224 & 0xC0) == 0x80);
            v222 = v223 + 1;
            if (!v220) {
              goto LABEL_1109;
            }
          }
LABEL_1995:
          uint64_t v20 = 0;
          goto LABEL_2502;
        }
        v222 = *(unsigned __int8 **)(v15 + 80);
      }
      else
      {
        v309 = *(unsigned __int8 **)(v15 + 80);
        if ((uint64_t)&v309[-*(void *)(v7 + 152)] < v220) {
          goto LABEL_1995;
        }
        v222 = &v309[-v220];
        *(void *)(v15 + 80) = v222;
      }
LABEL_1109:
      if ((unint64_t)v222 < *v1348) {
        unint64_t *v1348 = (unint64_t)v222;
      }
      goto LABEL_2501;
    case 0x7Eu:
    case 0x80u:
    case 0x82u:
    case 0x83u:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = v18 | 0x20000;
      *(_DWORD *)(v15 + 56) = v18 | 0x20000;
      uint64_t v1291 = *a2;
      goto LABEL_3357;
    case 0x7Fu:
    case 0x81u:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = v18 | 0x20000;
      *(_DWORD *)(v15 + 56) = v18 | 0x20000;
      uint64_t v1316 = *a2;
      goto LABEL_3377;
    case 0x84u:
    case 0x85u:
    case 0x8Bu:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = v18 | 0x20000;
      goto LABEL_3380;
    case 0x86u:
      if (!*(_DWORD *)(v7 + 80) && *(_DWORD *)(v15 + 48))
      {
LABEL_3230:
        uint64_t v1245 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(void *)(v15 + 8) = &a2[v1245];
        LODWORD(v1245) = a2[v1245];
        a2 += _pcre2_OP_lengths_8[*a2];
        if (v1245 == 120)
        {
          v1336 = a3;
          unsigned int i = v12;
          LODWORD(v12) = 0;
          char v1302 = 1;
          goto LABEL_3333;
        }
        *(void *)uint64_t v15 = a2;
        goto LABEL_2500;
      }
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      *(_DWORD *)(v15 + 56) = 0;
      goto LABEL_3385;
    case 0x87u:
    case 0x8Cu:
      *(_DWORD *)(v15 + 64) = 0;
      unsigned int v1301 = 0x20000;
      goto LABEL_3434;
    case 0x88u:
    case 0x8Du:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = (bswap32(*(unsigned __int16 *)(a2 + 3)) >> 16) | 0x10000;
LABEL_3380:
      *(_DWORD *)(v15 + 56) = v12;
      goto LABEL_3385;
    case 0x89u:
    case 0x8Eu:
      *(_DWORD *)(v15 + 64) = 0;
      goto LABEL_3433;
    case 0x8Au:
    case 0x8Fu:
      int64_t v111 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(void *)(v15 + 24) = v111;
      if (a2[v111] != 120)
      {
        v111 -= 3;
        *(void *)(v15 + 24) = v111;
      }
      BOOL v112 = a2 + 3;
      *(void *)uint64_t v15 = a2 + 3;
      int v113 = a2[3];
      if ((v113 & 0xFE) != 0x76) {
        goto LABEL_938;
      }
      uint64_t v20 = do_callout(v15, (void *)v7, (uint64_t *)v1355);
      if ((int)v20 > 0) {
        goto LABEL_169;
      }
      uint64_t v16 = v1349;
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_2502;
      }
      v437 = v1355[0];
      BOOL v112 = &v1355[0][*(void *)v15];
      *(void *)uint64_t v15 = v112;
      int64_t v111 = *(void *)(v15 + 24) - (void)v437;
      *(void *)(v15 + 24) = v111;
      int v113 = *v112;
LABEL_938:
      if (v113 <= 161)
      {
        switch(v113)
        {
          case 144:
            unint64_t v438 = ((v112[1] << 9) | (2 * v112[2])) - 2;
            if (v438 >= *(void *)(v15 + 120) || *(void *)(v15 + 8 * v438 + 128) == -1) {
              goto LABEL_2495;
            }
            int v113 = 0x90u;
            goto LABEL_3229;
          case 145:
            if (!(v112[4] | (v112[3] << 8))) {
              goto LABEL_2495;
            }
            int v502 = (v112[3] << 8) + v112[4] + 1;
            v503 = (unsigned __int8 *)(*(void *)(v7 + 136)
                                     + *(unsigned __int16 *)(v7 + 134)
                                     * (unint64_t)__rev16(*(unsigned __int16 *)(v112 + 1))
                                     + 1);
            break;
          case 146:
            int v505 = *(_DWORD *)(v15 + 104);
            if (v505 != -1)
            {
              unsigned int v506 = __rev16(*(unsigned __int16 *)(v112 + 1));
              int v113 = 0x92u;
              if (v506 == 0xFFFF || v506 == v505) {
                goto LABEL_3229;
              }
            }
            goto LABEL_2495;
          case 147:
            int v507 = *(_DWORD *)(v15 + 104);
            if (v507 == -1 || !(v112[4] | (v112[3] << 8))) {
              goto LABEL_2495;
            }
            int v508 = (v112[3] << 8) + v112[4] + 1;
            unint64_t v509 = *(void *)(v7 + 136)
                 + *(unsigned __int16 *)(v7 + 134) * (unint64_t)__rev16(*(unsigned __int16 *)(v112 + 1))
                 + 1;
            while (v507 != bswap32(*(unsigned __int16 *)(v509 - 1)) >> 16)
            {
              v509 += *(unsigned __int16 *)(v7 + 134);
              if (--v508 <= 1) {
                goto LABEL_2495;
              }
            }
            int v113 = 0x93u;
            goto LABEL_3229;
          case 148:
            goto LABEL_2495;
          case 149:
            goto LABEL_3229;
          default:
            if (v113 != 126 && v113 != 128) {
              goto LABEL_3475;
            }
            v1336 = a3;
            int v1315 = 1;
            goto LABEL_3476;
        }
        while (1)
        {
          unint64_t v504 = ((*(v503 - 1) << 9) | (2 * *v503)) - 2;
          if (v504 < *(void *)(v15 + 120) && *(void *)(v15 + 8 * v504 + 128) != -1) {
            break;
          }
          v503 += *(unsigned __int16 *)(v7 + 134);
          if (--v502 <= 1) {
            goto LABEL_2495;
          }
        }
        int v113 = 0x91u;
        goto LABEL_3229;
      }
      if (v113 == 162) {
        goto LABEL_2495;
      }
LABEL_3475:
      v1336 = a3;
      int v1315 = 0;
LABEL_3476:
      unsigned int i = v12;
      *(_DWORD *)(v15 + 56) = v1315;
      *(void *)(v15 + 8) = v112;
      unsigned int v1310 = *v112;
      unsigned int v1311 = v1310;
      goto LABEL_3477;
    case 0x96u:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      *(void *)(v15 + 8) = ++a2;
      char v1302 = 9;
      goto LABEL_3333;
    case 0x97u:
      v1336 = a3;
      unsigned int i = v12;
      v1308 = a2 + 1;
      *(void *)(v15 + 8) = a2 + 1;
      do
      {
        v1308 += __rev16(*(unsigned __int16 *)(v1308 + 1));
        *(void *)(v15 + 8) = v1308;
      }
      while (*v1308 == 120);
      LODWORD(v12) = 0;
      a2 = v1308 + 3;
      char v1302 = 10;
      goto LABEL_3333;
    case 0x98u:
      *(_DWORD *)(v15 + 64) = 1;
      v1127 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      int v1309 = a2[1];
      if (v1309 == 137 || v1309 == 142)
      {
        ++a2;
LABEL_3433:
        unsigned int v1301 = (bswap32(*(unsigned __int16 *)(a2 + 3)) >> 16) | 0x10000;
LABEL_3434:
        v1127 = a2;
      }
      else
      {
        unsigned int v1301 = 0x20000;
      }
      v1336 = a3;
      unsigned int i = v12;
      *(_DWORD *)(v15 + 56) = v1301;
      *(_DWORD *)(v15 + 60) = 0;
      *(void *)(v15 + 16) = v1127;
      goto LABEL_3436;
    case 0x99u:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      *(void *)(v7 + 208) = a2 + 2;
      *(void *)(v15 + 96) = a2 + 2;
      a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
      char v1302 = 12;
      goto LABEL_3333;
    case 0x9Au:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      a2 += _pcre2_OP_lengths_8[*a2];
      char v1302 = 14;
      goto LABEL_3333;
    case 0x9Bu:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      *(void *)(v7 + 208) = a2 + 2;
      *(void *)(v15 + 96) = a2 + 2;
      a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
      char v1302 = 15;
      goto LABEL_3333;
    case 0x9Cu:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      a2 += _pcre2_OP_lengths_8[*a2];
      char v1302 = 16;
      goto LABEL_3333;
    case 0x9Du:
      unsigned int v225 = *(_DWORD *)(v7 + 248);
      unsigned int v226 = *(_DWORD *)(v7 + 244) + 1;
      *(_DWORD *)(v7 + 244) = v226;
      uint64_t v227 = _pcre2_OP_lengths_8[*a2];
      if (v226 > v225)
      {
        v1336 = a3;
        unsigned int i = v12;
        LODWORD(v12) = 0;
        a2 += v227 + a2[1];
        char v1302 = 17;
        goto LABEL_3333;
      }
      uint64_t v228 = (uint64_t)&a2[a2[1] + v227];
      goto LABEL_2499;
    case 0x9Eu:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      a2 += _pcre2_OP_lengths_8[*a2];
      char v1302 = 18;
      goto LABEL_3333;
    case 0x9Fu:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      *(void *)(v7 + 208) = a2 + 2;
      *(void *)(v15 + 96) = a2 + 2;
      a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
      char v1302 = 19;
      goto LABEL_3333;
    case 0xA0u:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      a2 += _pcre2_OP_lengths_8[*a2];
      char v1302 = 13;
      goto LABEL_3333;
    case 0xA1u:
      v1336 = a3;
      unsigned int i = v12;
      LODWORD(v12) = 0;
      *(void *)(v7 + 208) = a2 + 2;
      *(void *)(v15 + 96) = a2 + 2;
      a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
      char v1302 = 36;
      goto LABEL_3333;
    case 0xA2u:
      goto LABEL_2502;
    case 0xA4u:
      v229 = *(unsigned __int8 **)(v15 + 80);
      if ((unint64_t)v229 > *(void *)(v7 + 192)) {
        *(void *)(v7 + 192) = v229;
      }
      uint64_t v20 = 4294966297;
      v1339 = (void *)v15;
      goto LABEL_2502;
    case 0xA5u:
      if (*(_DWORD *)(v15 + 104) != -1) {
        goto LABEL_444;
      }
      unsigned int v440 = *(unsigned __int16 *)(a2 + 1);
      unsigned int v441 = __rev16(v440);
      unsigned int v442 = (bswap32(v440) >> 16) | 0x10000;
      v443 = (unsigned __int8 **)v15;
      do
      {
        v444 = v443[14];
        if (v444 == (unsigned __int8 *)-1) {
          return 4294967252;
        }
        v445 = &v444[*(void *)(v7 + 32)];
        v443 = (unsigned __int8 **)&v445[v1341];
      }
      while (*((_DWORD *)v445 + 13) != v442);
      v1343 = v445;
      unint64_t v446 = 2 * v441 - 2;
      *(_DWORD *)(v15 + 108) = v441;
      v447 = v443[10];
      uint64_t v448 = *(void *)(v7 + 152);
      v449 = &v447[-v448];
      v450 = (unsigned __int8 **)(v15 + 8 * v446);
      v451 = (unsigned __int8 *)(*(void *)(v15 + 80) - v448);
      v450[16] = v449;
      v450[17] = v451;
      if (*(void *)(v15 + 120) <= v446) {
        *(void *)(v15 + 120) = v446 + 2;
      }
LABEL_444:
      uint64_t v228 = (uint64_t)&a2[_pcre2_OP_lengths_8[*a2]];
      goto LABEL_2499;
    case 0xA6u:
      v230 = a2 + 1;
      *(void *)uint64_t v15 = a2 + 1;
      do
      {
        v230 += __rev16(*(unsigned __int16 *)(v230 + 1));
        *(void *)uint64_t v15 = v230;
      }
      while (*v230 == 120);
      goto LABEL_3304;
    default:
      return v19;
  }
}

uint64_t match_ref(unint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  if (*(void *)(a3 + 120) <= a1 || (uint64_t v6 = a3 + 8 * a1, v7 = *(void *)(v6 + 128), v7 == -1))
  {
    if ((*(unsigned char *)(a4 + 241) & 2) != 0)
    {
      unsigned int v33 = 0;
LABEL_59:
      uint64_t result = 0;
      *a5 = v33;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = *(void *)(a3 + 80);
  uint64_t v9 = *(void *)(a4 + 152);
  uint64_t v10 = (unsigned __int8 *)(v9 + v7);
  uint64_t v11 = *(void *)(v6 + 136);
  unint64_t v12 = v11 - v7;
  if (a2)
  {
    int v13 = *(_DWORD *)(a4 + 240);
    if ((v13 & 0xA0000) != 0)
    {
      if (v7 < v11)
      {
        unint64_t v14 = v9 + v11;
        unint64_t v15 = *(void *)(a4 + 168);
        uint64_t v16 = *(unsigned __int8 **)(a3 + 80);
        while ((unint64_t)v16 < v15)
        {
          unsigned int v17 = *v16;
          if ((v13 & 0x80000) != 0)
          {
            if (v17 < 0xC0)
            {
              ++v16;
            }
            else if ((v17 & 0x20) != 0)
            {
              int v24 = v16[1] & 0x3F;
              if ((v17 & 0x10) != 0)
              {
                if ((v17 & 8) != 0)
                {
                  int v26 = v16[2] & 0x3F;
                  int v27 = v16[3] & 0x3F;
                  int v28 = v16[4] & 0x3F;
                  if ((v17 & 4) != 0)
                  {
                    unsigned int v17 = ((v17 & 1) << 30) | (v24 << 24) | (v26 << 18) | (v27 << 12) | (v28 << 6) | v16[5] & 0x3F;
                    v16 += 6;
                  }
                  else
                  {
                    unsigned int v17 = ((v17 & 3) << 24) | (v24 << 18) | (v26 << 12) | (v27 << 6) | v28;
                    v16 += 5;
                  }
                }
                else
                {
                  unsigned int v17 = ((v17 & 7) << 18) | (v24 << 12) | ((v16[2] & 0x3F) << 6) | v16[3] & 0x3F;
                  v16 += 4;
                }
              }
              else
              {
                unsigned int v17 = ((v17 & 0xF) << 12) | (v24 << 6) | v16[2] & 0x3F;
                v16 += 3;
              }
            }
            else
            {
              unsigned __int8 v20 = v16[1];
              v16 += 2;
              unsigned int v17 = v20 & 0x3F | ((v17 & 0x1F) << 6);
            }
            unsigned int v18 = *v10;
            if (v18 < 0xC0)
            {
              ++v10;
            }
            else if ((v18 & 0x20) != 0)
            {
              int v25 = v10[1] & 0x3F;
              if ((v18 & 0x10) != 0)
              {
                if ((v18 & 8) != 0)
                {
                  int v29 = v10[2] & 0x3F;
                  int v30 = v10[3] & 0x3F;
                  int v31 = v10[4] & 0x3F;
                  if ((v18 & 4) != 0)
                  {
                    unsigned int v18 = ((v18 & 1) << 30) | (v25 << 24) | (v29 << 18) | (v30 << 12) | (v31 << 6) | v10[5] & 0x3F;
                    v10 += 6;
                  }
                  else
                  {
                    unsigned int v18 = ((v18 & 3) << 24) | (v25 << 18) | (v29 << 12) | (v30 << 6) | v31;
                    v10 += 5;
                  }
                }
                else
                {
                  unsigned int v18 = ((v18 & 7) << 18) | (v25 << 12) | ((v10[2] & 0x3F) << 6) | v10[3] & 0x3F;
                  v10 += 4;
                }
              }
              else
              {
                unsigned int v18 = ((v18 & 0xF) << 12) | (v25 << 6) | v10[2] & 0x3F;
                v10 += 3;
              }
            }
            else
            {
              unsigned __int8 v21 = v10[1];
              v10 += 2;
              unsigned int v18 = v21 & 0x3F | ((v18 & 0x1F) << 6);
            }
          }
          else
          {
            unsigned int v19 = *v10++;
            unsigned int v18 = v19;
            ++v16;
          }
          if (v17 != v18
            && v17 != *(_DWORD *)&_pcre2_ucd_records_8[12
                                                     * _pcre2_ucd_stage2_8[v18 & 0x7F | (_pcre2_ucd_stage1_8[v18 >> 7] << 7)]
                                                     + 4]
                    + v18)
          {
            int v22 = &_pcre2_ucd_caseless_sets_8[_pcre2_ucd_records_8[12
                                                                 * _pcre2_ucd_stage2_8[v18 & 0x7F | (_pcre2_ucd_stage1_8[v18 >> 7] << 7)]
                                                                 + 3]];
            do
            {
              unsigned int v23 = *v22;
              if (v17 < *v22) {
                return 0xFFFFFFFFLL;
              }
              ++v22;
            }
            while (v17 != v23);
          }
          if ((unint64_t)v10 >= v14) {
            goto LABEL_58;
          }
        }
        return 1;
      }
    }
    else if (v12)
    {
      uint64_t v16 = (unsigned __int8 *)(v8 + v12);
      uint64_t v37 = v7 - v11;
      unint64_t v38 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v38 < *(void *)(a4 + 168))
      {
        if (*(unsigned __int8 *)(*(void *)(a4 + 88) + *v10) != *(unsigned __int8 *)(*(void *)(a4 + 88) + *v38)) {
          return 0xFFFFFFFFLL;
        }
        ++v10;
        ++v38;
        BOOL v36 = __CFADD__(v37++, 1);
        if (v36) {
          goto LABEL_58;
        }
      }
      return 1;
    }
    goto LABEL_57;
  }
  if (*(_WORD *)(a4 + 128))
  {
    if (v12)
    {
      uint64_t v16 = (unsigned __int8 *)(v8 + v12);
      uint64_t v34 = v7 - v11;
      unsigned int v35 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v35 < *(void *)(a4 + 168))
      {
        if (*v10 != *v35) {
          return 0xFFFFFFFFLL;
        }
        ++v35;
        ++v10;
        BOOL v36 = __CFADD__(v34++, 1);
        if (v36) {
          goto LABEL_58;
        }
      }
      return 1;
    }
LABEL_57:
    uint64_t v16 = *(unsigned __int8 **)(a3 + 80);
LABEL_58:
    unsigned int v33 = &v16[-v8];
    goto LABEL_59;
  }
  if (*(void *)(a4 + 168) - v8 >= v12)
  {
    if (!memcmp(v10, *(const void **)(a3 + 80), v11 - v7))
    {
      uint64_t v16 = (unsigned __int8 *)(v8 + v12);
      goto LABEL_58;
    }
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t do_callout(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *(unsigned char **)a1;
  if (**(unsigned char **)a1 == 118) {
    uint64_t v5 = 6;
  }
  else {
    uint64_t v5 = __rev16(*(unsigned __int16 *)(v4 + 5));
  }
  *a3 = v5;
  uint64_t v6 = (uint64_t (*)(uint64_t, void))a2[35];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = a2[33];
  int v8 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v7 + 8) = (*(_DWORD *)(a1 + 120) >> 1) + 1;
  *(_DWORD *)(v7 + 12) = v8;
  uint64_t v9 = a2[26];
  *(void *)(v7 + 16) = a1 + 112;
  *(void *)(v7 + 24) = v9;
  *(void *)(v7 + 56) = *(void *)(a1 + 80) - a2[19];
  *(void *)(v7 + 64) = __rev16(*(unsigned __int16 *)(v4 + 1));
  *(void *)(v7 + 72) = __rev16(*(unsigned __int16 *)(v4 + 3));
  if (*v4 == 118)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *(_DWORD *)(v7 + 4) = v4[5];
    *(void *)(v7 + 80) = 0;
  }
  else
  {
    *(_DWORD *)(v7 + 4) = 0;
    *(void *)(v7 + 80) = __rev16(*(unsigned __int16 *)(v4 + 7));
    uint64_t v10 = v4 + 10;
    uint64_t v11 = *a3 - 11;
  }
  *(void *)(v7 + 88) = v11;
  *(void *)(v7 + 96) = v10;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v14 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = -1;
  *(void *)(a1 + 120) = -1;
  uint64_t result = v6(v7, a2[34]);
  *(void *)(a1 + 112) = v13;
  *(void *)(a1 + 120) = v14;
  *(_DWORD *)(v7 + 104) = 0;
  return result;
}

uint64_t _pcre2_study_8(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v28 = 0;
  unsigned int v2 = *(_DWORD *)(a1 + 88);
  uint64_t v3 = (unsigned __int8 *)(a1 + *(unsigned __int16 *)(a1 + 134) * (unint64_t)*(unsigned __int16 *)(a1 + 132) + 136);
  int v4 = *(_DWORD *)(a1 + 96);
  if ((v4 & 0x210) != 0) {
    goto LABEL_2;
  }
  v29[0] = 0;
  int started = set_start_bits(a1, v3, (v2 >> 19) & 1, (v2 >> 17) & 1, v29);
  if (started != 1)
  {
    if (started != 3)
    {
      int v4 = *(_DWORD *)(a1 + 96);
      goto LABEL_2;
    }
    return 1;
  }
  int v8 = 0;
  uint64_t v9 = (unsigned char *)(a1 + 40);
  uint64_t v10 = 0xFFFFFFFFLL;
  unsigned int v11 = -8;
  int v12 = -1;
  do
  {
    uint64_t v13 = v10;
    v11 += 8;
    int v14 = *v9;
    if (!*v9) {
      goto LABEL_46;
    }
    if ((v14 & (v14 - 1)) != 0) {
      goto LABEL_54;
    }
    int v15 = v8 | 6;
    int v16 = v8 | 7;
    if (v14 != 128) {
      int v16 = v11;
    }
    if (v14 != 64) {
      int v15 = v16;
    }
    int v17 = v8 | 4;
    int v18 = v8 | 5;
    if (v14 != 32) {
      int v18 = v11;
    }
    if (v14 != 16) {
      int v17 = v18;
    }
    if (*v9 <= 0x3Fu) {
      int v15 = v17;
    }
    int v19 = v8 | 1;
    int v20 = v8 | 2;
    int v21 = v8 | 3;
    if (v14 != 8) {
      int v21 = v11;
    }
    if (v14 != 4) {
      int v20 = v21;
    }
    if (v14 != 2) {
      int v19 = v20;
    }
    uint64_t v10 = *v9 <= 0xFu ? v19 : v15;
    if ((v2 & 0x80000) != 0 && v10 > 0x7F)
    {
LABEL_54:
      int v24 = *(_DWORD *)(a1 + 96);
LABEL_55:
      int v25 = 64;
      goto LABEL_56;
    }
    if (v12 < 0)
    {
      int v12 = v10;
LABEL_46:
      uint64_t v10 = v13;
      goto LABEL_47;
    }
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_54;
    }
    int v22 = *(unsigned __int8 *)(*(void *)(a1 + 24) + v10 + 256);
    if ((v2 & 0xA0000) != 0)
    {
      int v23 = v10 - 128;
      if (v10 < 0x80) {
        int v23 = v10;
      }
      if (_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v10 > 0x7F] + v23] + 3]) {
        goto LABEL_54;
      }
      if (v10 >= 0x80) {
        int v22 = *(_DWORD *)&_pcre2_ucd_records_8[12
      }
                                             * _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v10 > 0x7F]
                                                                 + v23]
                                             + 4]
            + v10;
    }
    if (v22 != v12) {
      goto LABEL_54;
    }
LABEL_47:
    ++v9;
    v8 += 8;
  }
  while (v11 < 0xF8);
  int v24 = *(_DWORD *)(a1 + 96);
  if (v12 < 0) {
    goto LABEL_55;
  }
  if ((v24 & 0x80) != 0)
  {
    int v27 = *(_DWORD *)(a1 + 116);
    if (v27 == v12 || (v10 & 0x80000000) == 0 && v27 == v10) {
      goto LABEL_55;
    }
  }
  *(_DWORD *)(a1 + 112) = v12;
  if ((int)v10 < 0) {
    int v25 = 16;
  }
  else {
    int v25 = 48;
  }
LABEL_56:
  int v4 = v24 | v25;
  *(_DWORD *)(a1 + 96) = v4;
LABEL_2:
  if ((v4 & 0x802000) != 0) {
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 130) > 0x80u) {
    return 0;
  }
  v29[0] = 0;
  int minlength = find_minlength(a1, (char *)v3, v3, (v2 >> 19) & 1, 0, &v28, v29);
  switch(minlength)
  {
    case -1:
      return 0;
    case -2:
      return 2;
    case -3:
      return 3;
  }
  if (minlength >= 0xFFFF) {
    __int16 v26 = -1;
  }
  else {
    __int16 v26 = minlength;
  }
  *(_WORD *)(a1 + 126) = v26;
  return 0;
}

uint64_t set_start_bits(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a3) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = 32;
  }
  int v6 = (*a5)++;
  if (v6 > 999) {
    return 4;
  }
  unsigned int v11 = a2;
  unsigned __int32 v73 = (_DWORD *)(a1 + 65);
  unsigned __int8 v13 = *a2;
  uint64_t v14 = a1 + 40;
  uint64_t v15 = 1;
LABEL_7:
  unsigned int v16 = v13 - 136;
  BOOL v17 = v16 > 6;
  int v18 = (1 << v16) & 0x63;
  if (v17 || v18 == 0) {
    int v20 = v11 + 3;
  }
  else {
    int v20 = v11 + 5;
  }
  while (2)
  {
    int v21 = *v20;
    uint64_t result = 3;
    int v22 = 0;
    uint64_t v23 = 2;
    switch(*v20)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x12u:
      case 0x14u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Cu:
      case 0x1Fu:
      case 0x20u:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x54u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x7Du:
      case 0x8Au:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Cu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
      case 0xA0u:
      case 0xA1u:
      case 0xA2u:
      case 0xA3u:
      case 0xA4u:
      case 0xA5u:
        return 0;
      case 4u:
      case 5u:
      case 0x57u:
      case 0x58u:
      case 0x5Fu:
        ++v20;
        continue;
      case 6u:
        uint64_t v58 = 0;
        uint64_t v59 = *(void *)(a1 + 24);
        do
        {
          *(unsigned char *)(v14 + v58) |= ~*(unsigned char *)(v59 + (v58 + 576));
          ++v58;
        }
        while (v5 != v58);
        goto LABEL_118;
      case 7u:
        uint64_t v60 = a1;
        int v61 = 64;
        goto LABEL_121;
      case 8u:
        uint64_t v62 = 0;
        uint64_t v63 = *(void *)(a1 + 24);
        do
        {
          *(unsigned char *)(v14 + v62) |= ~*(unsigned char *)(v63 + (v62 + 512));
          ++v62;
        }
        while (v5 != v62);
        goto LABEL_118;
      case 9u:
        uint64_t v60 = a1;
        int v61 = 0;
        goto LABEL_121;
      case 0xAu:
        uint64_t v64 = 0;
        uint64_t v65 = *(void *)(a1 + 24);
        do
        {
          *(unsigned char *)(v14 + v64) |= ~*(unsigned char *)(v65 + (v64 + 672));
          ++v64;
        }
        while (v5 != v64);
LABEL_118:
        if (a3) {
          *(void *)(a1 + 64) = -1;
        }
        goto LABEL_140;
      case 0xBu:
        uint64_t v60 = a1;
        int v61 = 160;
LABEL_121:
        set_type_bits(v60, v61, v5);
        goto LABEL_140;
      case 0x10u:
        if (v20[1] == 9)
        {
          uint64_t v66 = v20[2];
          unsigned int v67 = _pcre2_ucd_caseless_sets_8[v66];
          if (v67 == -1)
          {
LABEL_140:
            uint64_t v23 = v15;
            goto LABEL_141;
          }
          unint64_t v68 = &_pcre2_ucd_caseless_sets_8[v66 + 1];
          while (!a3)
          {
            if (v67 < 0x100) {
              goto LABEL_129;
            }
            *(unsigned char *)(a1 + 71) |= 0x80u;
LABEL_130:
            unsigned int v69 = *v68++;
            unsigned int v67 = v69;
            if (v69 == -1) {
              goto LABEL_140;
            }
          }
          _pcre2_ord2utf_8(v67, (uint64_t)v74);
          unsigned int v67 = v74[0];
LABEL_129:
          *(unsigned char *)(a1 + (v67 >> 3) + 40) |= 1 << (v67 & 7);
          goto LABEL_130;
        }
        return 0;
      case 0x11u:
      case 0x15u:
        *(unsigned char *)(a1 + 41) |= 0x3Cu;
        if (a3)
        {
          *(unsigned char *)(a1 + 64) |= 4u;
          char v57 = *(unsigned char *)(a1 + 68) | 4;
          goto LABEL_134;
        }
        *(unsigned char *)(a1 + 56) |= 0x20u;
        goto LABEL_140;
      case 0x13u:
        *(unsigned char *)(a1 + 41) |= 2u;
        *(unsigned char *)(a1 + 44) |= 1u;
        if (a3)
        {
          *(unsigned char *)(a1 + 64) |= 4u;
          char v57 = *(unsigned char *)(a1 + 68) | 0xE;
LABEL_134:
          *(unsigned char *)(a1 + 68) = v57;
        }
        else
        {
          *(unsigned char *)(a1 + 60) |= 1u;
        }
        goto LABEL_140;
      case 0x1Bu:
        uint64_t v27 = 1;
        goto LABEL_61;
      case 0x1Du:
      case 0x23u:
      case 0x24u:
      case 0x2Bu:
        goto LABEL_136;
      case 0x1Eu:
      case 0x30u:
      case 0x31u:
      case 0x38u:
        goto LABEL_138;
      case 0x21u:
      case 0x22u:
      case 0x25u:
      case 0x26u:
      case 0x2Au:
      case 0x2Cu:
        int v24 = v20 + 1;
        goto LABEL_23;
      case 0x27u:
      case 0x28u:
      case 0x2Du:
        int v24 = v20 + 3;
LABEL_23:
        int v20 = set_table_bit(a1, v24, 0, a3, a4);
        continue;
      case 0x29u:
        v20 += 2;
LABEL_136:
        unsigned int v70 = v20 + 1;
        uint64_t v71 = a1;
        int v72 = 0;
        goto LABEL_139;
      case 0x2Eu:
      case 0x2Fu:
      case 0x32u:
      case 0x33u:
      case 0x37u:
      case 0x39u:
        int v25 = v20 + 1;
        goto LABEL_25;
      case 0x34u:
      case 0x35u:
      case 0x3Au:
        int v25 = v20 + 3;
LABEL_25:
        int v20 = set_table_bit(a1, v25, 1, a3, a4);
        continue;
      case 0x36u:
        v20 += 2;
LABEL_138:
        unsigned int v70 = v20 + 1;
        uint64_t v71 = a1;
        int v72 = 1;
LABEL_139:
        set_table_bit(v71, v70, v72, a3, a4);
        goto LABEL_140;
      case 0x55u:
      case 0x56u:
      case 0x59u:
      case 0x5Au:
      case 0x5Eu:
      case 0x60u:
        goto LABEL_27;
      case 0x5Bu:
      case 0x5Cu:
      case 0x61u:
        v20 += 2;
LABEL_27:
        uint64_t result = 0;
        switch(v20[1])
        {
          case 6u:
            uint64_t v42 = 0;
            uint64_t v43 = *(void *)(a1 + 24);
            do
            {
              *(unsigned char *)(v14 + v42) |= ~*(unsigned char *)(v43 + (v42 + 576));
              ++v42;
            }
            while (v5 != v42);
            goto LABEL_75;
          case 7u:
            uint64_t v44 = a1;
            int v45 = 64;
            goto LABEL_78;
          case 8u:
            uint64_t v46 = 0;
            uint64_t v47 = *(void *)(a1 + 24);
            do
            {
              *(unsigned char *)(v14 + v46) |= ~*(unsigned char *)(v47 + (v46 + 512));
              ++v46;
            }
            while (v5 != v46);
            goto LABEL_75;
          case 9u:
            uint64_t v44 = a1;
            int v45 = 0;
            goto LABEL_78;
          case 0xAu:
            uint64_t v48 = 0;
            uint64_t v49 = *(void *)(a1 + 24);
            do
            {
              *(unsigned char *)(v14 + v48) |= ~*(unsigned char *)(v49 + (v48 + 672));
              ++v48;
            }
            while (v5 != v48);
LABEL_75:
            if (a3) {
              *(void *)(a1 + 64) = -1;
            }
            break;
          case 0xBu:
            uint64_t v44 = a1;
            int v45 = 160;
LABEL_78:
            set_type_bits(v44, v45, v5);
            break;
          case 0x11u:
          case 0x15u:
            *(unsigned char *)(a1 + 41) |= 0x3Cu;
            if (a3)
            {
              *(unsigned char *)(a1 + 64) |= 4u;
              char v26 = *(unsigned char *)(a1 + 68) | 4;
              goto LABEL_81;
            }
            *(unsigned char *)(a1 + 56) |= 0x20u;
            break;
          case 0x13u:
            *(unsigned char *)(a1 + 41) |= 2u;
            *(unsigned char *)(a1 + 44) |= 1u;
            if (a3)
            {
              *(unsigned char *)(a1 + 64) |= 4u;
              char v26 = *(unsigned char *)(a1 + 68) | 0xE;
LABEL_81:
              *(unsigned char *)(a1 + 68) = v26;
            }
            else
            {
              *(unsigned char *)(a1 + 60) |= 1u;
            }
            break;
          default:
            return result;
        }
        v20 += 2;
        continue;
      case 0x5Du:
        goto LABEL_33;
      case 0x6Eu:
        goto LABEL_58;
      case 0x6Fu:
        goto LABEL_54;
      case 0x70u:
        uint64_t result = 0;
        unsigned __int8 v28 = v20[3];
        if ((v28 & 4) != 0 || (v28 & 3) == 1) {
          return result;
        }
        if ((v20[3] & 2) != 0) {
          int v22 = v20 + 4;
        }
        else {
          int v22 = 0;
        }
        if (!a3 || (v20[3] & 1) != 0)
        {
LABEL_54:
          if (a3)
          {
            *(unsigned char *)(a1 + 64) |= 0xF0u;
            *unsigned __int32 v73 = -1;
            *(_DWORD *)((char *)v73 + 3) = -1;
            int v21 = *v20;
          }
          if (v21 != 112)
          {
LABEL_58:
            int v22 = v20 + 1;
            unint64_t v40 = v20 + 33;
            goto LABEL_85;
          }
          uint64_t v30 = __rev16(*(unsigned __int16 *)(v20 + 1));
        }
        else
        {
          int v29 = &v20[16 * (v28 & 2) + 4];
          uint64_t v30 = __rev16(*(unsigned __int16 *)(v20 + 1));
          while (1)
          {
            while (1)
            {
              int v31 = v29 + 1;
              int v32 = *v29;
              if (v32 != 1) {
                break;
              }
              unint64_t v38 = *v31;
              do
                char v39 = *++v31;
              while ((v39 & 0xC0) == 0x80);
              *(unsigned char *)(a1 + (v38 >> 3) + 40) |= 1 << (v38 & 7);
              int v29 = v31;
            }
            if (v32 != 2) {
              break;
            }
            unsigned int v34 = *++v29;
            unsigned int v33 = v34;
            do
            {
              unsigned int v36 = *++v29;
              unsigned int v35 = v36;
            }
            while ((v36 & 0xC0) == 0x80);
            do
              char v37 = *++v29;
            while ((v37 & 0xC0) == 0x80);
            if (v33 <= v35)
            {
              do
              {
                *(unsigned char *)(a1 + (v33 >> 3) + 40) |= 1 << (v33 & 7);
                ++v33;
              }
              while (v35 >= v33);
            }
          }
          if (*v29) {
            return 3;
          }
        }
        unint64_t v40 = &v20[v30];
        if (!v22) {
          goto LABEL_94;
        }
LABEL_85:
        uint64_t v50 = 0;
        if (a3)
        {
          do
          {
            *(unsigned char *)(v14 + v50) |= v22[v50];
            ++v50;
          }
          while (v50 != 16);
          unsigned int v51 = 128;
          do
          {
            if ((v22[(unint64_t)v51 >> 3] >> (v51 & 7)))
            {
              *(unsigned char *)(a1 + 64) |= 1 << (v51 >> 6);
              v51 |= 0x3Fu;
            }
          }
          while (v51++ < 0xFF);
        }
        else
        {
          do
          {
            *(unsigned char *)(v14 + v50) |= v22[v50];
            ++v50;
          }
          while (v50 != 32);
        }
LABEL_94:
        unsigned int v53 = *v40 - 98;
        if (v53 > 0xB) {
          goto LABEL_140;
        }
        int v54 = 1 << v53;
        if ((v54 & 0x533) != 0)
        {
          int v20 = v40 + 1;
        }
        else
        {
          if ((v54 & 0x8C0) == 0) {
            goto LABEL_140;
          }
          BOOL v55 = __rev16(*(unsigned __int16 *)(v40 + 1)) == 0;
          uint64_t v56 = 5;
          if (!v55) {
            uint64_t v56 = 0;
          }
          int v20 = &v40[v56];
          if (!v55) {
            goto LABEL_140;
          }
        }
        continue;
      case 0x76u:
        uint64_t v27 = 6;
        goto LABEL_61;
      case 0x77u:
        uint64_t v27 = __rev16(*(unsigned __int16 *)(v20 + 5));
LABEL_61:
        v20 += v27;
        continue;
      case 0x78u:
        goto LABEL_141;
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
        return 2;
      case 0x7Eu:
      case 0x82u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
        uint64_t result = set_start_bits(a1, v20, a3, a4, a5);
        if (result == 2)
        {
          do
            v20 += __rev16(*(unsigned __int16 *)(v20 + 1));
          while (*v20 == 120);
LABEL_33:
          v20 += 3;
          continue;
        }
        uint64_t v23 = v15;
        if (result != 1) {
          return result;
        }
LABEL_141:
        v11 += __rev16(*(unsigned __int16 *)(v11 + 1));
        unsigned __int8 v13 = 120;
        uint64_t v15 = v23;
        uint64_t result = v23;
        if (*v11 != 120) {
          return result;
        }
        goto LABEL_7;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x83u:
        do
          v20 += __rev16(*(unsigned __int16 *)(v20 + 1));
        while (*v20 == 120);
        goto LABEL_33;
      case 0x96u:
      case 0x97u:
      case 0x98u:
        uint64_t result = set_start_bits(a1, ++v20, a3, a4, a5);
        if (result <= 4 && ((1 << result) & 0x19) != 0) {
          return result;
        }
        do
          v20 += __rev16(*(unsigned __int16 *)(v20 + 1));
        while (*v20 == 120);
        goto LABEL_33;
      case 0xA6u:
        uint64_t v41 = v20 + 1;
        do
          v41 += __rev16(*(unsigned __int16 *)(v41 + 1));
        while (*v41 == 120);
        int v20 = v41 + 3;
        continue;
      default:
        return result;
    }
  }
}

uint64_t find_minlength(uint64_t a1, char *a2, unsigned __int8 *a3, int a4, void *a5, _DWORD *a6, int *a7)
{
  char v7 = *a2;
  if ((*a2 + 117) >= 5u)
  {
    int v9 = *(_DWORD *)(a1 + 96);
    uint64_t v10 = a2[1];
    uint64_t v11 = a2[2];
    int v12 = (*a6)++;
    if (v12 > 1000) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v14 = a7;
    int v84 = 0;
    int v85 = v9;
    int v15 = 0;
    int v78 = 0;
    uint64_t v16 = 0;
    BOOL v27 = (v7 & 0xFE) == 136;
    uint64_t v17 = 3;
    if (v27) {
      uint64_t v17 = 5;
    }
    int v18 = (unsigned __int8 *)&a2[v17];
    int v19 = (unsigned __int8 *)&a2[v11 | (v10 << 8)];
    uint64_t v77 = a1 + 136;
    unint64_t v80 = a7 + 1;
    int v87 = 0;
    int v88 = -1;
    int v83 = -1;
    int v79 = -1;
    int v91 = a4;
    uint64_t v90 = a1;
    while (1)
    {
      if (v15 <= 65534) {
        uint64_t v20 = v15;
      }
      else {
        uint64_t v20 = 0xFFFFLL;
      }
      if (v15 <= 65534) {
        int v21 = v18;
      }
      else {
        int v21 = v19;
      }
      uint64_t v22 = *v21;
      uint64_t v23 = v16;
      uint64_t v8 = 0xFFFFFFFFLL;
      switch(*v21)
      {
        case 0u:
        case 0x78u:
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Cu:
          uint64_t v8 = v88;
          if (v88 < 0 || !v87 && (int)v20 < v88) {
            uint64_t v8 = v20;
          }
          BOOL v27 = v22 != 120 || v8 == 0;
          if (!v27)
          {
            int v87 = 0;
            int v88 = v8;
            int v15 = 0;
            int v19 = &v21[__rev16(*(unsigned __int16 *)(v21 + 1))];
            goto LABEL_45;
          }
          return v8;
        case 1u:
        case 2u:
        case 4u:
        case 5u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x76u:
        case 0x7Du:
        case 0x90u:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x94u:
        case 0x95u:
          goto LABEL_20;
        case 3u:
        case 0x9Au:
        case 0x9Cu:
        case 0x9Eu:
        case 0xA0u:
        case 0xA2u:
        case 0xA5u:
          uint64_t v25 = _pcre2_OP_lengths_8[v22];
          goto LABEL_26;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          goto LABEL_104;
        case 0xEu:
          if (!a4) {
            goto LABEL_104;
          }
          return v8;
        case 0xFu:
        case 0x10u:
          v21 += 2;
LABEL_104:
          int v15 = v20 + 1;
          int v18 = v21 + 1;
          continue;
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x23u:
        case 0x24u:
        case 0x2Bu:
        case 0x30u:
        case 0x31u:
        case 0x38u:
        case 0x3Du:
        case 0x3Eu:
        case 0x45u:
        case 0x4Au:
        case 0x4Bu:
        case 0x52u:
          int v15 = v20 + 1;
          int v18 = v21 + 2;
          if (!a4) {
            continue;
          }
          unsigned int v26 = v21[1];
          goto LABEL_23;
        case 0x21u:
        case 0x22u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Au:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x37u:
        case 0x39u:
        case 0x3Au:
        case 0x3Bu:
        case 0x3Cu:
        case 0x3Fu:
        case 0x40u:
        case 0x41u:
        case 0x42u:
        case 0x44u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x51u:
        case 0x53u:
        case 0x54u:
          int v18 = &v21[_pcre2_OP_lengths_8[v22]];
          int v15 = v20;
          if (!a4) {
            continue;
          }
          unsigned int v24 = *(v18 - 1);
          int v15 = v20;
          if (v24 < 0xC0) {
            continue;
          }
          v18 += _pcre2_utf8_table4[v24 & 0x3F];
          goto LABEL_53;
        case 0x29u:
        case 0x36u:
        case 0x43u:
        case 0x50u:
          int v15 = v20 + (bswap32(*(unsigned __int16 *)(v21 + 1)) >> 16);
          int v18 = v21 + 4;
          if (!a4) {
            continue;
          }
          unsigned int v26 = v21[3];
LABEL_23:
          if (v26 >= 0xC0) {
            v18 += _pcre2_utf8_table4[v26 & 0x3F];
          }
          continue;
        case 0x55u:
        case 0x56u:
        case 0x59u:
        case 0x5Au:
        case 0x5Eu:
        case 0x60u:
          int v28 = v21[1];
          goto LABEL_51;
        case 0x57u:
        case 0x58u:
        case 0x5Fu:
          int v15 = v20 + 1;
          BOOL v35 = v21[1] - 15 >= 2;
          uint64_t v36 = 2;
          uint64_t v37 = 4;
          goto LABEL_106;
        case 0x5Bu:
        case 0x5Cu:
        case 0x61u:
          int v28 = v21[3];
LABEL_51:
          uint64_t v30 = &v21[2 * ((v28 - 15) < 2)];
          uint64_t v29 = _pcre2_OP_lengths_8[v22];
          goto LABEL_52;
        case 0x5Du:
          int v15 = v20 + (bswap32(*(unsigned __int16 *)(v21 + 1)) >> 16);
          BOOL v35 = v21[3] - 15 >= 2;
          uint64_t v36 = 4;
          uint64_t v37 = 6;
LABEL_106:
          if (!v35) {
            uint64_t v36 = v37;
          }
          int v18 = &v21[v36];
          uint64_t v16 = v23;
          continue;
        case 0x6Eu:
        case 0x6Fu:
        case 0x70u:
          if (v22 == 112) {
            uint64_t v38 = __rev16(*(unsigned __int16 *)(v21 + 1));
          }
          else {
            uint64_t v38 = 33;
          }
          int v18 = &v21[v38];
          unsigned int v63 = *v18 - 98;
          if (v63 > 0xB)
          {
            int v15 = v20 + 1;
          }
          else
          {
            int v64 = 1 << v63;
            if ((v64 & 0x533) == 0)
            {
              if ((v64 & 0x20C) == 0)
              {
                int v15 = v20 + (bswap32(*(unsigned __int16 *)(v18 + 1)) >> 16);
                v18 += 5;
                continue;
              }
              LODWORD(v20) = v20 + 1;
            }
            ++v18;
LABEL_53:
            int v15 = v20;
          }
          continue;
        case 0x71u:
        case 0x72u:
          int v39 = v21[1];
          int v40 = v21[2];
          int v41 = v40 | (v39 << 8);
          if (v41 <= *v14)
          {
            LODWORD(v42) = v14[v41];
            if ((v42 & 0x80000000) == 0) {
              goto LABEL_143;
            }
          }
          if ((*(unsigned char *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v42) = 0;
            goto LABEL_140;
          }
          bracket_8 = _pcre2_find_bracket_8(a3, a4, v21[2] | (v21[1] << 8));
          if (!bracket_8) {
            return 4294967294;
          }
          uint64_t v44 = bracket_8;
          int v45 = bracket_8;
          do
            v45 += __rev16(*(unsigned __int16 *)(v45 + 1));
          while (*v45 == 120);
          a4 = v91;
          if ((v85 & 0x200000) != 0)
          {
            uint64_t v46 = _pcre2_find_bracket_8(v45, v91, v41);
            a4 = v91;
            if (v46)
            {
              LODWORD(v42) = 0;
LABEL_126:
              a1 = v90;
              goto LABEL_140;
            }
          }
          if (v21 > v44 && v21 < v45)
          {
            LODWORD(v42) = 0;
            int v87 = 1;
            goto LABEL_126;
          }
          a1 = v90;
          if (a5)
          {
            uint64_t v71 = a5;
            while ((unsigned __int8 *)v71[1] != v44)
            {
              uint64_t v71 = (void *)*v71;
              if (!v71) {
                goto LABEL_139;
              }
            }
            LODWORD(v42) = 0;
            int v87 = 1;
          }
          else
          {
LABEL_139:
            uint64_t minlength = find_minlength(v90);
            a4 = v91;
            uint64_t v42 = minlength;
            a1 = v90;
            uint64_t v8 = v42;
            if ((v42 & 0x80000000) != 0) {
              return v8;
            }
          }
LABEL_140:
          v14[v41] = v42;
          uint64_t v73 = *v14;
          if ((int)v73 + 1 < v41)
          {
            memset(&v80[v73], 255, 4 * ((v39 << 8) + v40 - v73 - 2) + 4);
            a1 = v90;
            a4 = v91;
          }
          *uint64_t v14 = v41;
LABEL_143:
          uint64_t v61 = 3;
LABEL_144:
          int v18 = &v21[v61];
          unsigned int v74 = 1;
          unsigned int v75 = *v18 - 98;
          if (v75 <= 0xB)
          {
            if (((1 << v75) & 0x533) != 0)
            {
              unsigned int v74 = 0;
              ++v18;
            }
            else if (((1 << v75) & 0x20C) != 0)
            {
              ++v18;
              unsigned int v74 = 1;
            }
            else
            {
              unsigned int v74 = __rev16(*(unsigned __int16 *)(v18 + 1));
              v18 += 5;
            }
          }
          if ((int)v42 < 1 || (int v15 = 0xFFFF, v16 = v23, 0x7FFFFFFF / v42 >= v74))
          {
            int v76 = v74 * v42;
            if (0xFFFF - (int)v20 >= v76) {
              int v15 = v76 + v20;
            }
            else {
              int v15 = 0xFFFF;
            }
            uint64_t v16 = v23;
          }
          break;
        case 0x73u:
        case 0x74u:
          if ((v85 & 0x200000) != 0 || (*(unsigned char *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v42) = 0;
            goto LABEL_102;
          }
          signed int v47 = __rev16(*(unsigned __int16 *)(v21 + 3));
          if (!v47)
          {
            LODWORD(v42) = 0x7FFFFFFF;
            goto LABEL_102;
          }
          uint64_t v48 = (unsigned __int8 *)(v77
                                  + *(unsigned __int16 *)(a1 + 132)
                                  * (unint64_t)__rev16(*(unsigned __int16 *)(v21 + 1)));
          uint64_t v49 = *v14;
          LODWORD(v42) = 0x7FFFFFFF;
          while (2)
          {
            uint64_t v50 = v14;
            int v51 = *v48;
            uint64_t v52 = v48[1] | (v51 << 8);
            if ((int)v52 <= (int)v49)
            {
              LODWORD(v8) = v50[v52];
              if ((v8 & 0x80000000) == 0)
              {
                uint64_t v52 = v49;
                uint64_t v14 = v50;
                goto LABEL_87;
              }
            }
            int v81 = v48[1];
            signed int v82 = v47;
            unsigned int v53 = _pcre2_find_bracket_8(a3, a4, v52);
            if (!v53) {
              return 4294967294;
            }
            int v54 = v53;
            int v55 = v51 << 8;
            uint64_t v56 = v53;
            do
              v56 += __rev16(*(unsigned __int16 *)(v56 + 1));
            while (*v56 == 120);
            uint64_t v14 = v50;
            a4 = v91;
            a1 = v90;
            if (v21 > v54 && v21 < v56) {
              goto LABEL_78;
            }
            if (a5)
            {
              char v57 = a5;
              while ((unsigned __int8 *)v57[1] != v54)
              {
                char v57 = (void *)*v57;
                if (!v57) {
                  goto LABEL_83;
                }
              }
LABEL_78:
              LODWORD(v8) = 0;
              int v87 = 1;
            }
            else
            {
LABEL_83:
              int v58 = v55;
              uint64_t v59 = find_minlength(v90);
              int v55 = v58;
              a4 = v91;
              uint64_t v8 = v59;
              a1 = v90;
              if ((v8 & 0x80000000) != 0) {
                return v8;
              }
            }
            v14[v52] = v8;
            uint64_t v60 = *v14;
            if ((int)v60 + 1 < (int)v52)
            {
              memset(&v80[v60], 255, 4 * (v55 + v81 - v60 - 2) + 4);
              a1 = v90;
              a4 = v91;
            }
            *uint64_t v14 = v52;
            signed int v47 = v82;
LABEL_87:
            if ((int)v8 < (int)v42) {
              LODWORD(v42) = v8;
            }
            if ((int)v42 >= 1)
            {
              v48 += *(unsigned __int16 *)(a1 + 132);
              uint64_t v61 = 5;
              uint64_t v49 = v52;
              if (v47-- <= 1) {
                goto LABEL_144;
              }
              continue;
            }
            break;
          }
LABEL_102:
          uint64_t v61 = 5;
          goto LABEL_144;
        case 0x75u:
          uint64_t v65 = &a3[__rev16(*(unsigned __int16 *)(v21 + 1))];
          unsigned int v66 = __rev16(*(unsigned __int16 *)(v65 + 3));
          unint64_t v67 = (unint64_t)v65;
          if (v66 == v79)
          {
            LODWORD(v20) = v78 + v20;
            goto LABEL_133;
          }
          do
            v67 += __rev16(*(unsigned __int16 *)(v67 + 1));
          while (*(unsigned char *)v67 == 120);
          if (v21 > v65 && (unint64_t)v21 < v67) {
            goto LABEL_114;
          }
          if (a5)
          {
            unsigned int v69 = a5;
            while ((unsigned __int8 *)v69[1] != v65)
            {
              unsigned int v69 = (void *)*v69;
              if (!v69) {
                goto LABEL_131;
              }
            }
LABEL_114:
            int v87 = 1;
          }
          else
          {
LABEL_131:
            uint64_t v70 = find_minlength(a1);
            if ((v70 & 0x80000000) != 0) {
              return v70;
            }
            int v78 = v70;
            int v79 = v66;
            LODWORD(v20) = v70 + v20;
            a4 = v91;
            a1 = v90;
          }
LABEL_133:
          uint64_t v16 = 0;
          int v18 = &v21[(v23 + 3)];
          int v15 = v20;
          continue;
        case 0x77u:
          uint64_t v25 = __rev16(*(unsigned __int16 *)(v21 + 5));
          goto LABEL_26;
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
          do
          {
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
            LODWORD(v22) = *v21;
          }
          while (v22 == 120);
LABEL_20:
          uint64_t v25 = _pcre2_OP_lengths_8[v22];
LABEL_26:
          int v18 = &v21[v25];
          goto LABEL_53;
        case 0x84u:
        case 0x85u:
        case 0x87u:
        case 0x8Bu:
        case 0x8Cu:
          goto LABEL_118;
        case 0x86u:
          int v18 = v21 + 3;
          if (v21[3] == 117)
          {
            uint64_t v16 = 3;
            int v15 = v20;
            if (v21[6] == 121) {
              continue;
            }
          }
          goto LABEL_118;
        case 0x88u:
        case 0x89u:
        case 0x8Du:
        case 0x8Eu:
          unsigned int v31 = __rev16(*(unsigned __int16 *)(v21 + 3));
          if ((v85 & 0x200000) != 0 || v31 != v83)
          {
            uint64_t v32 = find_minlength(v90);
            a4 = v91;
            uint64_t v33 = v32;
            a1 = v90;
            int v83 = v31;
            int v84 = v33;
            uint64_t v8 = v33;
            if ((v33 & 0x80000000) != 0) {
              return v8;
            }
          }
          do
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
          while (*v21 == 120);
          int v15 = v84 + v20;
LABEL_45:
          int v18 = v21 + 3;
          uint64_t v16 = v23;
          continue;
        case 0x8Au:
        case 0x8Fu:
          unsigned int v34 = &v21[__rev16(*(unsigned __int16 *)(v21 + 1))];
          if (*v34 != 120) {
            goto LABEL_48;
          }
LABEL_118:
          uint64_t v68 = find_minlength(a1);
          uint64_t v8 = v68;
          if ((v68 & 0x80000000) != 0) {
            return v8;
          }
          do
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
          while (*v21 == 120);
          int v15 = v68 + v20;
          int v18 = v21 + 3;
          uint64_t v16 = v23;
          a4 = v91;
          a1 = v90;
          continue;
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0xA6u:
          unsigned int v34 = &v21[_pcre2_OP_lengths_8[v22]];
          do
            v34 += __rev16(*(unsigned __int16 *)(v34 + 1));
          while (*v34 == 120);
LABEL_48:
          int v18 = v34 + 3;
          goto LABEL_53;
        case 0x99u:
        case 0x9Bu:
        case 0x9Du:
        case 0x9Fu:
        case 0xA1u:
          uint64_t v29 = _pcre2_OP_lengths_8[v22];
          uint64_t v30 = &v21[v21[1]];
LABEL_52:
          int v18 = &v30[v29];
          goto LABEL_53;
        case 0xA3u:
        case 0xA4u:
          return v8;
        default:
          return 4294967293;
      }
    }
  }
  return 0;
}

unsigned __int8 *set_table_bit(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5)
{
  char v7 = a2 + 1;
  unint64_t v6 = *a2;
  *(unsigned char *)(a1 + (v6 >> 3) + 40) |= 1 << (v6 & 7);
  if (a4 && v6 >= 0xC0)
  {
    if ((v6 & 0x20) != 0)
    {
      if ((v6 & 0x10) != 0)
      {
        if ((v6 & 8) != 0)
        {
          int v8 = a2[1] & 0x3F;
          int v9 = a2[2] & 0x3F;
          int v10 = a2[3] & 0x3F;
          int v11 = a2[4] & 0x3F;
          if ((v6 & 4) != 0)
          {
            LODWORD(v6) = ((v6 & 1) << 30) | (v8 << 24) | (v9 << 18) | (v10 << 12) | (v11 << 6) | a2[5] & 0x3F;
            char v7 = a2 + 6;
          }
          else
          {
            LODWORD(v6) = ((v6 & 3) << 24) | (v8 << 18) | (v9 << 12) | (v10 << 6) | v11;
            char v7 = a2 + 5;
          }
        }
        else
        {
          LODWORD(v6) = ((v6 & 7) << 18) | ((a2[1] & 0x3F) << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
          char v7 = a2 + 4;
        }
      }
      else
      {
        LODWORD(v6) = ((v6 & 0xF) << 12) | ((a2[1] & 0x3F) << 6) | a2[2] & 0x3F;
        char v7 = a2 + 3;
      }
    }
    else
    {
      char v7 = a2 + 2;
      LODWORD(v6) = a2[1] & 0x3F | ((v6 & 0x1F) << 6);
    }
  }
  if (a3)
  {
    if (!(a5 | a4))
    {
      unint64_t v13 = *(unsigned __int8 *)(*(void *)(a1 + 24) + v6 + 256);
      goto LABEL_17;
    }
    unsigned int v12 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                         * _pcre2_ucd_stage2_8[v6 & 0x7F | (_pcre2_ucd_stage1_8[v6 >> 7] << 7)]
                                         + 4]
        + v6;
    if (a4)
    {
      _pcre2_ord2utf_8(v12, (uint64_t)v15);
      unint64_t v13 = v15[0];
LABEL_17:
      *(unsigned char *)(a1 + (v13 >> 3) + 40) |= 1 << (v13 & 7);
      return v7;
    }
    if (v12 <= 0xFF) {
      *(unsigned char *)(a1 + (v12 >> 3) + 40) |= 1 << (v12 & 7);
    }
  }
  return v7;
}

uint64_t set_type_bits(uint64_t result, int a2, int a3)
{
  uint64_t v3 = result;
  if (!a3) {
    goto LABEL_5;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(result + 24);
  do
  {
    *(unsigned char *)(result + 40 + v4) |= *(unsigned char *)(v5 + (a2 + 512 + v4));
    ++v4;
  }
  while (a3 != v4);
  if (a3 != 32)
  {
LABEL_5:
    for (unsigned int i = 128; i != 256; ++i)
    {
      if ((*(unsigned __int8 *)((i >> 3) + *(void *)(v3 + 24) + 512) >> (i & 7)))
      {
        uint64_t result = _pcre2_ord2utf_8(i, (uint64_t)v7);
        *(unsigned char *)(v3 + ((unint64_t)v7[0] >> 3) + 40) |= 1 << (v7[0] & 7);
      }
    }
  }
  return result;
}

uint64_t pcre2_serialize_encode_8(size_t **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, long long *a5)
{
  if (a5) {
    unint64_t v6 = a5;
  }
  else {
    unint64_t v6 = &_pcre2_default_compile_context_8;
  }
  uint64_t result = 4294967245;
  if (a1 && a3 && a4)
  {
    if ((int)a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = a2;
      uint64_t v13 = 1104;
      uint64_t v14 = a2;
      int v15 = a1;
      do
      {
        uint64_t v16 = *v15;
        if (!*v15) {
          return 4294967245;
        }
        if (*((_DWORD *)v16 + 20) != 1346589253) {
          return 4294967265;
        }
        if (v11)
        {
          if (v11 != (const void *)v16[3]) {
            return 4294967266;
          }
        }
        else
        {
          int v11 = (const void *)v16[3];
        }
        v13 += v16[9];
        ++v15;
        --v14;
      }
      while (v14);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void))v6)(v13 + 24, *((void *)v6 + 2));
      if (v17)
      {
        uint64_t v18 = v17;
        long long v19 = *v6;
        *(void *)(v17 + 16) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v17 = v19;
        *(void *)(v17 + 24) = 0x24000A50523253;
        uint64_t v20 = v17 + 24;
        *(_DWORD *)(v17 + 32) = 526337;
        *(_DWORD *)(v17 + 36) = a2;
        memcpy((void *)(v17 + 40), v11, 0x440uLL);
        int v21 = (void *)(v18 + 1128);
        do
        {
          uint64_t v22 = *a1++;
          memcpy(v21, v22, v22[9]);
          void *v21 = 0;
          v21[1] = 0;
          v21[3] = 0;
          v21[4] = 0;
          v21[2] = 0;
          int v21 = (void *)((char *)v21 + v22[9]);
          --v12;
        }
        while (v12);
        *a3 = v20;
        *a4 = v13;
        return a2;
      }
      else
      {
        return 4294967248;
      }
    }
  }
  return result;
}

uint64_t pcre2_serialize_encode_mm_8(size_t **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, long long *a5)
{
  if (a5) {
    unint64_t v6 = a5;
  }
  else {
    unint64_t v6 = &_pcre2_default_compile_context_8;
  }
  uint64_t result = 4294967245;
  if (a1 && a3 && a4)
  {
    if ((int)a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = a2;
      uint64_t v13 = 1112;
      uint64_t v14 = a2;
      int v15 = a1;
      do
      {
        uint64_t v16 = *v15;
        if (!*v15) {
          return 4294967245;
        }
        if (*((_DWORD *)v16 + 20) != 1346589253) {
          return 4294967265;
        }
        if (v11)
        {
          if (v11 != (const void *)v16[3]) {
            return 4294967266;
          }
        }
        else
        {
          int v11 = (const void *)v16[3];
        }
        v13 += v16[9];
        ++v15;
        --v14;
      }
      while (v14);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void))v6)(v13 + 24, *((void *)v6 + 2));
      if (v17)
      {
        uint64_t v18 = v17;
        long long v19 = *v6;
        *(void *)(v17 + 16) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v17 = v19;
        *(void *)(v17 + 24) = 0x24000A50523253;
        uint64_t v20 = v17 + 24;
        *(_DWORD *)(v17 + 32) = 526337;
        *(_DWORD *)(v17 + 36) = a2;
        memcpy((void *)(v17 + 40), v11, 0x440uLL);
        *(void *)(v18 + 1128) = a2;
        int v21 = (void *)(v18 + 1136);
        do
        {
          uint64_t v22 = *a1++;
          memcpy(v21, v22, v22[9]);
          void *v21 = 0;
          v21[1] = 0;
          v21[3] = 0;
          v21[4] = 0;
          v21[2] = 0;
          *((_DWORD *)v21 + 24) |= 0x40000u;
          int v21 = (void *)((char *)v21 + v22[9]);
          --v12;
        }
        while (v12);
        *a3 = v20;
        *a4 = v13;
        return a2;
      }
      else
      {
        return 4294967248;
      }
    }
  }
  return result;
}

uint64_t pcre2_serialize_decode_8(uint64_t a1, int a2, _DWORD *a3, long long *a4)
{
  if (a4) {
    uint64_t v4 = a4;
  }
  else {
    uint64_t v4 = &_pcre2_default_compile_context_8;
  }
  uint64_t v5 = 4294967245;
  if (a1 && a3)
  {
    if (a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      int v7 = a3[3];
      if (v7 < 1) {
        return 4294967234;
      }
      if (*a3 == 1347564115)
      {
        if (a3[1] == 2359306)
        {
          if (v7 >= a2) {
            uint64_t v5 = a2;
          }
          else {
            uint64_t v5 = v7;
          }
          int v10 = (void *)(*(uint64_t (**)(uint64_t, void))v4)(1096, *((void *)v4 + 2));
          if (!v10) {
            return 4294967248;
          }
          int v11 = v10;
          memcpy(v10, a3 + 4, 0x440uLL);
          uint64_t v12 = 0;
          v11[136] = v5;
          uint64_t v13 = a3 + 276;
          while (1)
          {
            unint64_t v14 = *((void *)v13 + 9);
            if (v14 < 0x89) {
              break;
            }
            int v15 = _pcre2_memctl_malloc_8(*((void *)v13 + 9), a4);
            if (!v15)
            {
              (*((void (**)(void *, void))v4 + 1))(v11, *((void *)v4 + 2));
              if (!v12) {
                return 4294967248;
              }
              for (uint64_t i = 0; i != v12; ++i)
              {
                (*((void (**)(void, void))v4 + 1))(*(void *)(a1 + 8 * i), *((void *)v4 + 2));
                *(void *)(a1 + 8 * i) = 0;
                uint64_t v5 = 4294967248;
              }
              return v5;
            }
            uint64_t v16 = v15;
            memcpy(v15 + 5, v13 + 10, v14 - 40);
            if (*((_DWORD *)v16 + 20) != 1346589253
              || *((unsigned __int16 *)v16 + 66) > 0x23u
              || *((unsigned __int16 *)v16 + 67) >= 0x2711u)
            {
              (*((void (**)(void *, void))v4 + 1))(v16, *((void *)v4 + 2));
              return 4294967234;
            }
            v16[3] = v11;
            v16[4] = 0;
            *((_DWORD *)v16 + 24) |= 0x40000u;
            *(void *)(a1 + 8 * v12) = v16;
            uint64_t v13 = (_DWORD *)((char *)v13 + v14);
            if (v5 == ++v12) {
              return v5;
            }
          }
          return 4294967234;
        }
        return 4294967264;
      }
      else
      {
        return 4294967265;
      }
    }
  }
  return v5;
}

uint64_t pcre2_serialize_decode_mm_8(void *a1, int a2, _DWORD *a3)
{
  if (!a3) {
    return 4294967245;
  }
  if (a2 < 1) {
    return 4294967267;
  }
  int v3 = a3[3];
  if (v3 < 1) {
    return 4294967234;
  }
  if (*a3 != 1347564115) {
    return 4294967265;
  }
  if (a3[1] != 2359306) {
    return 4294967264;
  }
  if (v3 >= a2) {
    uint64_t result = a2;
  }
  else {
    uint64_t result = v3;
  }
  mapped_global_table = (uint64_t)(a3 + 4);
  unint64_t v6 = a3 + 278;
  uint64_t v7 = result;
  do
  {
    *a1++ = v6;
    unint64_t v6 = (_DWORD *)((char *)v6 + *((void *)v6 + 9));
    --v7;
  }
  while (v7);
  return result;
}

uint64_t pcre2_serialize_get_number_of_codes_8(_DWORD *a1)
{
  if (!a1) {
    return 4294967245;
  }
  if (*a1 != 1347564115) {
    return 4294967265;
  }
  if (a1[1] == 2359306) {
    return a1[3];
  }
  return 4294967264;
}

uint64_t pcre2_serialize_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result - 16))(result - 24, *(void *)(result - 8));
  }
  return result;
}

unsigned __int8 *_pcre2_extuni_8(int a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, int a5, _DWORD *a6)
{
  if ((unint64_t)a2 >= a4) {
    return a2;
  }
  if (a1 >= 0) {
    int v6 = a1;
  }
  else {
    int v6 = a1 + 127;
  }
  unsigned int v7 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[a1 - (v6 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v6 >> 7] << 7)] + 2];
  while (1)
  {
    unsigned int v8 = *a2;
    if (a5 && v8 >= 0xC0)
    {
      int v9 = a2[1] & 0x3F;
      if ((v8 & 0x20) != 0)
      {
        if ((v8 & 0x10) != 0)
        {
          if ((v8 & 8) != 0)
          {
            int v26 = a2[2] & 0x3F;
            int v27 = a2[3] & 0x3F;
            int v28 = a2[4] & 0x3F;
            if ((v8 & 4) != 0)
            {
              unsigned int v8 = ((v8 & 1) << 30) | (v9 << 24) | (v26 << 18) | (v27 << 12) | (v28 << 6) | a2[5] & 0x3F;
              uint64_t v10 = 6;
            }
            else
            {
              unsigned int v8 = ((v8 & 3) << 24) | (v9 << 18) | (v26 << 12) | (v27 << 6) | v28;
              uint64_t v10 = 5;
            }
          }
          else
          {
            unsigned int v8 = ((v8 & 7) << 18) | (v9 << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
            uint64_t v10 = 4;
          }
        }
        else
        {
          unsigned int v8 = ((v8 & 0xF) << 12) | (v9 << 6) | a2[2] & 0x3F;
          uint64_t v10 = 3;
        }
      }
      else
      {
        unsigned int v8 = a2[1] & 0x3F | ((v8 & 0x1F) << 6);
        uint64_t v10 = 2;
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    unsigned int v11 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v8 & 0x7F | (_pcre2_ucd_stage1_8[v8 >> 7] << 7)] + 2];
    if (((_pcre2_ucp_gbtable_8[v7] >> v11) & 1) == 0) {
      return a2;
    }
    if (v7 == 11 && v11 == 11)
    {
      if (a5)
      {
        uint64_t v12 = a2;
        do
          char v13 = *--v12;
        while ((v13 & 0xC0) == 0x80);
      }
      else
      {
        uint64_t v12 = a2 - 1;
      }
      if ((unint64_t)v12 > a3) {
        break;
      }
    }
LABEL_40:
    if ((v11 == 13 || v11 == 3) && v7 == 14) {
      unsigned int v7 = 14;
    }
    else {
      unsigned int v7 = v11;
    }
    if (a6) {
      ++*a6;
    }
    a2 += v10;
    if ((unint64_t)a2 >= a4) {
      return a2;
    }
  }
  char v14 = 0;
  do
  {
    if (a5)
    {
      do
      {
        unsigned int v16 = *--v12;
        unsigned int v15 = v16;
      }
      while ((v16 & 0xC0) == 0x80);
      if (v15 >= 0xC0)
      {
        int v17 = v12[1] & 0x3F;
        if ((v15 & 0x20) != 0)
        {
          if ((v15 & 0x10) != 0)
          {
            if ((v15 & 8) != 0)
            {
              int v21 = v12[2] & 0x3F;
              int v22 = v12[3] & 0x3F;
              int v23 = v12[4] & 0x3F;
              if ((v15 & 4) == 0)
              {
                unsigned int v15 = ((v15 & 3) << 24) | (v17 << 18) | (v21 << 12) | (v22 << 6) | v23;
                goto LABEL_37;
              }
              int v19 = ((v15 & 1) << 30) | (v17 << 24) | (v21 << 18) | (v22 << 12) | (v23 << 6);
              unsigned __int8 v20 = v12[5];
            }
            else
            {
              int v19 = ((v15 & 7) << 18) | (v17 << 12) | ((v12[2] & 0x3F) << 6);
              unsigned __int8 v20 = v12[3];
            }
          }
          else
          {
            int v19 = ((v15 & 0xF) << 12) | (v17 << 6);
            unsigned __int8 v20 = v12[2];
          }
          unsigned int v15 = v19 & 0xFFFFFFC0 | v20 & 0x3F;
          goto LABEL_37;
        }
        unsigned int v15 = v12[1] & 0x3F | ((v15 & 0x1F) << 6);
      }
    }
    else
    {
      unsigned int v18 = *--v12;
      unsigned int v15 = v18;
    }
LABEL_37:
    if (_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v15 & 0x7F | (_pcre2_ucd_stage1_8[v15 >> 7] << 7)] + 2] != 11) {
      break;
    }
    ++v14;
  }
  while ((unint64_t)v12 > a3);
  if ((v14 & 1) == 0) {
    goto LABEL_40;
  }
  return a2;
}

uint64_t _pcre2_ord2utf_8(unsigned int a1, uint64_t a2)
{
  uint64_t v2 = 0;
  while (_pcre2_utf8_table1[v2] < (signed int)a1)
  {
    if (++v2 == 6)
    {
      LODWORD(v2) = 6;
      break;
    }
  }
  int v3 = (unsigned char *)(a2 + v2);
  if ((int)v2 >= 1)
  {
    unsigned int v4 = v2 + 1;
    do
    {
      *v3-- = a1 & 0x3F | 0x80;
      a1 >>= 6;
      --v4;
    }
    while (v4 > 1);
  }
  *int v3 = _pcre2_utf8_table2[4 * v2] | a1;
  return (v2 + 1);
}

void *pcre2_code_copy_8(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (void *)(*(uint64_t (**)(void, void))a1)(*(void *)(a1 + 72), *(void *)(a1 + 16));
  int v3 = v2;
  if (v2)
  {
    memcpy(v2, (const void *)a1, *(void *)(a1 + 72));
    void v3[4] = 0;
    if ((*(unsigned char *)(a1 + 98) & 4) != 0) {
      ++*(void *)(*(void *)(a1 + 24) + 1088);
    }
  }
  return v3;
}

uint64_t pcre2_code_free_8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 32);
    if (v2) {
      _pcre2_jit_free_8(v2, v1);
    }
    if ((*(unsigned char *)(v1 + 98) & 4) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 24);
      uint64_t v4 = *(void *)(v3 + 1088);
      if (v4)
      {
        uint64_t v5 = v4 - 1;
        *(void *)(v3 + 1088) = v5;
        if (!v5) {
          (*(void (**)(void))(v1 + 8))();
        }
      }
    }
    unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    uint64_t v6 = *(void *)(v1 + 16);
    return v7(v1, v6);
  }
  return result;
}

uint64_t _pcre2_check_escape_8(unsigned __int8 **a1, unint64_t a2, int *a3, int *a4, unsigned int a5, char a6, int a7, uint64_t a8)
{
  int v9 = *a1;
  if ((unint64_t)*a1 >= a2)
  {
    uint64_t result = 0;
    int v16 = 101;
    goto LABEL_7;
  }
  char v14 = v9 + 1;
  int v13 = *v9;
  uint64_t v70 = v9 + 1;
  if ((a5 & 0x80000) != 0 && v13 >= 0xC0)
  {
    if ((v13 & 0x20) != 0)
    {
      int v17 = *v14 & 0x3F;
      if ((v13 & 0x10) != 0)
      {
        if ((v13 & 8) != 0)
        {
          int v18 = v9[2] & 0x3F;
          int v19 = v9[3] & 0x3F;
          int v20 = v9[4] & 0x3F;
          if ((v13 & 4) != 0)
          {
            int v13 = ((v13 & 1) << 30) | (v17 << 24) | (v18 << 18) | (v19 << 12) | (v20 << 6) | v9[5] & 0x3F;
            char v14 = v9 + 6;
          }
          else
          {
            int v13 = ((v13 & 3) << 24) | (v17 << 18) | (v18 << 12) | (v19 << 6) | v20;
            char v14 = v9 + 5;
          }
        }
        else
        {
          int v13 = ((v13 & 7) << 18) | (v17 << 12) | ((v9[2] & 0x3F) << 6) | v9[3] & 0x3F;
          char v14 = v9 + 4;
        }
      }
      else
      {
        int v13 = ((v13 & 0xF) << 12) | (v17 << 6) | v9[2] & 0x3F;
        char v14 = v9 + 3;
      }
      uint64_t v70 = v14;
    }
    else
    {
      char v14 = v9 + 2;
      uint64_t v70 = v9 + 2;
      int v13 = v9[1] & 0x3F | ((v13 & 0x1F) << 6);
    }
  }
  *a4 = 0;
  if ((v13 - 123) < 0xFFFFFFB5) {
    goto LABEL_17;
  }
  int v21 = escapes[v13 - 48];
  if (escapes[v13 - 48])
  {
    if (v21 >= 1)
    {
      if (v13 == 114)
      {
        uint64_t result = 0;
        if ((a6 & 0x10) != 0) {
          int v13 = 10;
        }
        else {
          int v13 = 13;
        }
      }
      else
      {
        uint64_t result = 0;
        int v13 = escapes[v13 - 48];
      }
      goto LABEL_18;
    }
    uint64_t result = -v21;
    if (a8)
    {
      if (v13 > 87)
      {
        if (v13 != 112 && v13 != 88) {
          goto LABEL_18;
        }
LABEL_65:
        *(_DWORD *)(a8 + 208) |= 0x100000u;
        goto LABEL_18;
      }
      if (v13 != 78)
      {
        if (v13 != 80) {
          goto LABEL_18;
        }
        goto LABEL_65;
      }
    }
    else if (v13 != 78)
    {
      goto LABEL_18;
    }
    if ((unint64_t)v14 >= a2 || *v14 != 123)
    {
LABEL_115:
      uint64_t result = 12;
      int v13 = 78;
      goto LABEL_18;
    }
    unsigned int v69 = v14 + 1;
    if ((uint64_t)(a2 - (void)(v14 + 1)) < 2 || v14[1] != 85 || (int v29 = v14[2], v14 += 2, v29 != 43))
    {
      if (read_repeat_counts(&v69, a2, 0, 0, a4) || *a4) {
        goto LABEL_115;
      }
      int v30 = 137;
      goto LABEL_114;
    }
    if ((a5 & 0x80000) == 0)
    {
      int v30 = 193;
LABEL_114:
      *a4 = v30;
      goto LABEL_115;
    }
LABEL_135:
    signed int v47 = v14 + 1;
    uint64_t v70 = v14 + 1;
    if ((unint64_t)(v14 + 1) >= a2 || *v47 == 125)
    {
      uint64_t result = 0;
      int v35 = 178;
      goto LABEL_91;
    }
    int v13 = 0;
    unint64_t v58 = a2 - (void)v47;
    do
    {
      uint64_t v59 = *v47;
      int v60 = xdigitab[v59];
      if (v60 == 255) {
        goto LABEL_190;
      }
      if (v13 || v59 != 48)
      {
        int v13 = v60 | (16 * v13);
        BOOL v62 = (a5 & 0x80000) == 0 && v13 > 0xFF;
        if (((v13 > 0x10FFFF) & (a5 >> 19)) != 0 || v62)
        {
          unint64_t v67 = v47 + 1;
          uint64_t v70 = v67;
          if ((unint64_t)v67 < a2)
          {
            while (xdigitab[*v67] != 255)
            {
              if ((unint64_t)++v67 >= a2) {
                goto LABEL_232;
              }
            }
          }
          goto LABEL_233;
        }
      }
      else
      {
        int v13 = 0;
      }
      ++v47;
      --v58;
    }
    while (v58);
    signed int v47 = (unsigned __int8 *)a2;
LABEL_190:
    if ((unint64_t)v47 >= a2)
    {
      unsigned int v63 = v47;
    }
    else
    {
      unsigned int v63 = v47 + 1;
      uint64_t v70 = v47 + 1;
      if (*v47 == 125)
      {
        uint64_t result = 0;
        if ((a6 & 1) == 0 && (a5 & 0x80000) != 0 && v13 >> 11 >= 0x1B && v13 >> 13 <= 6)
        {
          uint64_t result = 0;
          uint64_t v70 = v47;
          goto LABEL_197;
        }
        goto LABEL_18;
      }
    }
    uint64_t result = 0;
    uint64_t v70 = v63 - 1;
    int v35 = 167;
    goto LABEL_91;
  }
  int v68 = 0;
  BOOL v22 = (a6 & 0x20 | a5 & 2) != 0;
  if (!a8)
  {
    if ((v13 - 99) <= 0x15 && ((1 << (v13 - 99)) & 0x201001) != 0)
    {
      BOOL v22 = 0;
      goto LABEL_31;
    }
    uint64_t result = 0;
    int v16 = 103;
LABEL_7:
    *a4 = v16;
    return result;
  }
LABEL_31:
  if (v13 <= 84)
  {
    switch(v13)
    {
      case '0':
        goto LABEL_35;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (a7) {
          goto LABEL_34;
        }
        unsigned int v31 = v14 - 1;
        uint64_t v70 = v14 - 1;
        *a4 = 0;
        if ((unint64_t)(v14 - 1) >= a2) {
          goto LABEL_17;
        }
        unsigned int v32 = *v31;
        if (v32 - 48 > 9) {
          goto LABEL_17;
        }
        unsigned int v33 = 0;
        break;
      case 'F':
      case 'L':
        goto LABEL_78;
      default:
        goto LABEL_116;
    }
    while ((unint64_t)v31 < a2)
    {
      int v34 = *v31;
      if ((v34 - 48) > 9) {
        break;
      }
      ++v31;
      unsigned int v33 = v34 + 10 * v33 - 48;
      if (v33 >= 0xCCCCCCC)
      {
        uint64_t result = 0;
        *a4 = 161;
        uint64_t v70 = v31;
        goto LABEL_18;
      }
    }
    uint64_t v70 = v31;
    if (v33 >= 0xA)
    {
      if (v32 <= 0x37 && (signed int)v33 > *(_DWORD *)(a8 + 212))
      {
        uint64_t v70 = v14;
LABEL_34:
        if (v13 <= 0x37)
        {
LABEL_35:
          uint64_t v24 = 0;
          v13 -= 48;
          uint64_t v25 = v14;
          while ((unint64_t)&v14[v24] < a2)
          {
            int v26 = v14[v24];
            if ((v26 & 0xF8) != 0x30)
            {
              uint64_t v25 = &v14[v24];
              break;
            }
            ++v25;
            int v13 = v26 + 8 * v13 - 48;
            if (++v24 == 2)
            {
              uint64_t v25 = v14 + 2;
              break;
            }
          }
          uint64_t result = 0;
          uint64_t v70 = v25;
          if ((a5 & 0x80000) == 0 && v13 >= 0x100)
          {
            uint64_t result = 0;
            int v35 = 151;
            goto LABEL_91;
          }
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      if (v33 >= 0x10000)
      {
        uint64_t result = 0;
        int v35 = 161;
        goto LABEL_91;
      }
    }
    uint64_t result = -v33;
    goto LABEL_18;
  }
  if (v13 <= 107)
  {
    if (v13 == 85)
    {
      uint64_t result = 0;
      if (!v22) {
        *a4 = 137;
      }
      int v13 = 85;
      goto LABEL_18;
    }
    if (v13 == 99)
    {
      if ((unint64_t)v14 >= a2)
      {
        uint64_t result = 0;
        *a4 = 102;
        int v13 = 99;
        goto LABEL_18;
      }
      int v39 = *v14;
      if ((v39 - 97) >= 0x1A) {
        int v13 = *v14;
      }
      else {
        int v13 = v39 - 32;
      }
      if ((v13 - 127) <= 0xFFFFFFA0)
      {
        uint64_t result = 0;
        int v35 = 168;
        goto LABEL_91;
      }
      uint64_t result = 0;
      v13 ^= 0x40u;
      uint64_t v38 = v14 + 1;
      goto LABEL_140;
    }
    if (v13 != 103)
    {
LABEL_116:
      uint64_t result = 0;
      *a4 = 103;
      *a1 = v14 - 1;
      return result;
    }
    if (a7) {
      goto LABEL_77;
    }
    if ((unint64_t)v14 < a2)
    {
      int v45 = *v14;
      uint64_t result = 27;
      int v13 = 103;
      if (v45 == 39 || v45 == 60) {
        goto LABEL_18;
      }
      if (v45 == 123)
      {
        unsigned int v69 = v14 + 1;
        if (!read_number(&v69, a2, *(_DWORD *)(a8 + 212), 0xFFFFu, 161, &v68, a4))
        {
          if (*a4) {
            uint64_t result = 0;
          }
          else {
            uint64_t result = 28;
          }
          goto LABEL_218;
        }
        if ((unint64_t)v69 < a2 && *v69 == 125)
        {
          uint64_t v70 = v69 + 1;
LABEL_173:
          if (v68 > 0)
          {
            uint64_t result = -v68;
            goto LABEL_218;
          }
          uint64_t result = 0;
          int v66 = 115;
LABEL_217:
          *a4 = v66;
          goto LABEL_218;
        }
      }
      else
      {
        if (read_number(&v70, a2, *(_DWORD *)(a8 + 212), 0xFFFFu, 161, &v68, a4)) {
          goto LABEL_173;
        }
        if (*a4)
        {
LABEL_77:
          uint64_t result = 0;
LABEL_218:
          int v13 = 103;
          goto LABEL_18;
        }
      }
    }
    uint64_t result = 0;
    int v66 = 157;
    goto LABEL_217;
  }
  if (v13 > 116)
  {
    if (v13 != 117)
    {
      if (v13 == 120)
      {
        if (!v22)
        {
          if ((unint64_t)v14 >= a2) {
            goto LABEL_154;
          }
          uint64_t v46 = *v14;
          if (v46 == 123) {
            goto LABEL_135;
          }
          int v13 = xdigitab[v46];
          if (v13 == 255)
          {
LABEL_154:
            int v13 = 0;
          }
          else
          {
            uint64_t v70 = v14 + 1;
            if ((unint64_t)(v14 + 1) < a2)
            {
              int v53 = xdigitab[v14[1]];
              if (v53 != 255)
              {
                uint64_t result = 0;
                uint64_t v70 = v14 + 2;
                int v13 = v53 | (16 * v13);
                goto LABEL_18;
              }
            }
          }
LABEL_17:
          uint64_t result = 0;
          goto LABEL_18;
        }
        if ((uint64_t)(a2 - (void)v14) < 2
          || (int v36 = xdigitab[*v14], v36 == 255)
          || (int v37 = xdigitab[v14[1]], v37 == 255))
        {
          uint64_t result = 0;
          int v13 = 120;
          goto LABEL_18;
        }
        uint64_t result = 0;
        int v13 = v37 | (16 * v36);
        uint64_t v38 = v14 + 2;
LABEL_140:
        uint64_t v70 = v38;
        goto LABEL_18;
      }
      goto LABEL_116;
    }
    if (v22)
    {
      if ((unint64_t)v14 < a2)
      {
        uint64_t v40 = *v14;
        if ((a6 & 0x20) != 0 && v40 == 123)
        {
          if ((unint64_t)(v14 + 1) < a2)
          {
            uint64_t v41 = 0;
            unsigned int v42 = 0;
            while (1)
            {
              uint64_t v43 = &v14[v41];
              int v44 = xdigitab[v14[v41 + 1]];
              if (v44 == 255) {
                break;
              }
              if (v42 >> 28)
              {
                *a4 = 177;
                int v64 = &v14[v41 + 1];
                uint64_t v70 = v64;
                goto LABEL_200;
              }
              uint64_t result = 0;
              unsigned int v42 = v44 | (16 * v42);
              ++v41;
              int v13 = 117;
              if (~(unint64_t)v14 + a2 == v41) {
                goto LABEL_18;
              }
            }
            int v64 = v14;
LABEL_200:
            if (v43 != v64 && v43[1] == 125)
            {
              uint64_t v52 = &v14[v41 + 2];
LABEL_203:
              uint64_t v70 = v52;
              if ((a5 & 0x80000) != 0)
              {
                if (v42 < 0x110000)
                {
                  uint64_t result = 0;
                  if ((a6 & 1) != 0 || (v42 & 0xFFFFF800) != 0xD800) {
                    goto LABEL_235;
                  }
                  uint64_t result = 0;
                  int v65 = 173;
                  goto LABEL_223;
                }
              }
              else if (v42 < 0x100)
              {
                uint64_t result = 0;
                goto LABEL_235;
              }
              uint64_t result = 0;
              int v65 = 177;
LABEL_223:
              *a4 = v65;
LABEL_235:
              int v13 = v42;
              goto LABEL_18;
            }
          }
        }
        else if ((uint64_t)(a2 - (void)v14) >= 4)
        {
          int v48 = xdigitab[v40];
          if (v48 != 255)
          {
            int v49 = xdigitab[v14[1]];
            if (v49 != 255)
            {
              int v50 = xdigitab[v14[2]];
              if (v50 != 255)
              {
                int v51 = xdigitab[v14[3]];
                if (v51 != 255)
                {
                  unsigned int v42 = v51 | (16 * ((16 * v49) | (v48 << 8) | v50));
                  uint64_t v52 = v14 + 4;
                  goto LABEL_203;
                }
              }
            }
          }
        }
      }
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = 0;
      *a4 = 137;
    }
    int v13 = 117;
    goto LABEL_18;
  }
  if (v13 == 108)
  {
LABEL_78:
    uint64_t result = 0;
    int v35 = 137;
    goto LABEL_91;
  }
  if (v13 != 111) {
    goto LABEL_116;
  }
  if ((unint64_t)v14 >= a2 || (int v27 = *v14, ++v14, v70 = v14, v27 != 123))
  {
    uint64_t result = 0;
    uint64_t v70 = v14 - 1;
    int v28 = 155;
    goto LABEL_118;
  }
  if ((unint64_t)v14 >= a2 || *v14 == 125)
  {
    uint64_t result = 0;
    int v28 = 178;
LABEL_118:
    *a4 = v28;
    int v13 = 111;
    goto LABEL_18;
  }
  int v13 = 0;
  if ((a5 & 0x80000) != 0) {
    unsigned int v54 = 1114111;
  }
  else {
    unsigned int v54 = 255;
  }
  unint64_t v55 = a2 - (void)v14;
  while (1)
  {
    int v56 = *v14;
    if ((v56 & 0xF8) != 0x30) {
      goto LABEL_166;
    }
    if (v13 || v56 != 48) {
      break;
    }
    int v13 = 0;
LABEL_164:
    ++v14;
    if (!--v55)
    {
      char v14 = (unsigned __int8 *)a2;
LABEL_166:
      if ((unint64_t)v14 >= a2)
      {
        char v57 = v14;
      }
      else
      {
        char v57 = v14 + 1;
        uint64_t v70 = v14 + 1;
        if (*v14 == 125)
        {
          uint64_t result = 0;
          if ((a5 & 0x80000) != 0 && (a6 & 1) == 0 && (v13 & 0xFFFFF800) == 0xD800)
          {
            uint64_t result = 0;
            uint64_t v70 = v14;
LABEL_197:
            int v35 = 173;
            goto LABEL_91;
          }
          goto LABEL_18;
        }
      }
      uint64_t result = 0;
      uint64_t v70 = v57 - 1;
      int v35 = 164;
      goto LABEL_91;
    }
  }
  int v13 = v56 + 8 * v13 - 48;
  if (v13 <= v54) {
    goto LABEL_164;
  }
  unint64_t v67 = v14 + 1;
  uint64_t v70 = v14 + 1;
  if ((unint64_t)(v14 + 1) >= a2) {
    goto LABEL_233;
  }
  do
  {
    if ((*v67 & 0xF8) != 0x30) {
      goto LABEL_233;
    }
    ++v67;
  }
  while ((unint64_t)v67 < a2);
LABEL_232:
  unint64_t v67 = (unsigned __int8 *)a2;
LABEL_233:
  uint64_t result = 0;
  uint64_t v70 = v67;
  int v35 = 134;
LABEL_91:
  *a4 = v35;
LABEL_18:
  *a1 = v70;
  *a3 = v13;
  return result;
}

uint64_t read_repeat_counts(unsigned __int8 **a1, unint64_t a2, unsigned int *a3, unsigned int *a4, int *a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *a1;
  *a5 = 0;
  if ((unint64_t)v6 < a2)
  {
    if (*v6 - 48 <= 9)
    {
      unsigned int v7 = 0;
      unsigned int v8 = v6 + 1;
      while (1)
      {
        int v9 = v8 - 1;
        if ((unint64_t)(v8 - 1) >= a2) {
          return 0;
        }
        int v10 = *v9;
        if ((v10 - 48) > 9) {
          break;
        }
        unsigned int v7 = v10 + 10 * v7 - 48;
        ++v8;
        if (v7 >= 0x10000)
        {
          uint64_t v5 = 0;
          *a5 = 105;
          --v8;
LABEL_21:
          *a1 = v8;
          return v5;
        }
      }
      unsigned int v11 = v7;
      if (v10 == 125)
      {
LABEL_16:
        unsigned int v8 = v9 + 1;
        if (a3) {
          *a3 = v7;
        }
        if (a4) {
          *a4 = v11;
        }
        uint64_t v5 = 1;
        goto LABEL_21;
      }
      if (v10 == 44 && (unint64_t)v8 < a2)
      {
        int v13 = *v8;
        if (v13 == 125)
        {
          unsigned int v11 = 0x10000;
LABEL_15:
          int v9 = v8;
          goto LABEL_16;
        }
        if ((v13 - 48) <= 9)
        {
          unsigned int v11 = 0;
          while ((unint64_t)v8 < a2)
          {
            int v14 = *v8;
            if ((v14 - 48) > 9) {
              goto LABEL_29;
            }
            ++v8;
            unsigned int v11 = v14 + 10 * v11 - 48;
            if (v11 >= 0x10000)
            {
              uint64_t v5 = 0;
              int v15 = 105;
LABEL_33:
              *a5 = v15;
              goto LABEL_21;
            }
          }
          unsigned int v8 = (unsigned __int8 *)a2;
LABEL_29:
          if ((unint64_t)v8 < a2 && *v8 == 125)
          {
            if (v11 >= v7) {
              goto LABEL_15;
            }
            uint64_t v5 = 0;
            int v15 = 104;
            goto LABEL_33;
          }
        }
      }
    }
    return 0;
  }
  return v5;
}

uint64_t read_number(unsigned __int8 **a1, unint64_t a2, int a3, unsigned int a4, int a5, int *a6, int *a7)
{
  BOOL v7 = 0;
  unsigned int v8 = *a1;
  *a7 = 0;
  if (a3 < 0 || (unint64_t)v8 >= a2)
  {
    BOOL v14 = 0;
  }
  else
  {
    int v9 = *v8;
    unsigned int v10 = a4 - a3;
    if (v9 != 43) {
      unsigned int v10 = a4;
    }
    BOOL v11 = v9 == 43;
    if (v9 == 43) {
      uint64_t v12 = v8 + 1;
    }
    else {
      uint64_t v12 = v8;
    }
    BOOL v13 = v9 == 45;
    if (v9 == 45)
    {
      BOOL v7 = 1;
    }
    else
    {
      a4 = v10;
      BOOL v7 = v9 == 43;
    }
    BOOL v14 = !v13 && v11;
    if (v13) {
      ++v8;
    }
    else {
      unsigned int v8 = v12;
    }
  }
  if ((unint64_t)v8 < a2 && *v8 - 48 <= 9)
  {
    int v15 = 0;
    while ((unint64_t)v8 < a2)
    {
      int v16 = *v8;
      if ((v16 - 48) > 9) {
        break;
      }
      ++v8;
      int v15 = v16 + 10 * v15 - 48;
      if (v15 > a4)
      {
        uint64_t v17 = 0;
        *a7 = a5;
        goto LABEL_38;
      }
    }
    char v18 = !v7;
    if (a3 < 0) {
      char v18 = 1;
    }
    if (v18) {
      goto LABEL_37;
    }
    if (v15)
    {
      if (v14)
      {
        v15 += a3;
LABEL_37:
        uint64_t v17 = 1;
        goto LABEL_38;
      }
      if (v15 <= a3)
      {
        int v15 = a3 - v15 + 1;
        goto LABEL_37;
      }
      uint64_t v17 = 0;
      int v19 = 115;
    }
    else
    {
      uint64_t v17 = 0;
      int v19 = 126;
    }
    *a7 = v19;
LABEL_38:
    *a6 = v15;
    *a1 = v8;
    return v17;
  }
  return 0;
}

uint64_t pcre2_compile_8()
{
  uint64_t v0 = (unsigned __int8 *)MEMORY[0x270FA5388]();
  uint64_t v6 = 0;
  v136[128] = *MEMORY[0x263EF8340];
  unint64_t v115 = 1;
  int v116 = 0;
  v132[0] = 0;
  int v117 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  if (!v3) {
    return v6;
  }
  BOOL v7 = v4;
  if (!v4) {
    return v6;
  }
  unsigned int v8 = v3;
  int v9 = v0;
  *uint64_t v3 = 100;
  *uint64_t v4 = 0;
  if (!v0)
  {
    uint64_t v6 = 0;
    int v14 = 116;
    goto LABEL_14;
  }
  unsigned int v10 = v2;
  if (v5) {
    BOOL v11 = v5;
  }
  else {
    BOOL v11 = &_pcre2_default_compile_context_8;
  }
  if ((v2 & 0x18000000) != 0 || (unsigned int v12 = *((_DWORD *)v11 + 16), v12 >= 0x40))
  {
    uint64_t v6 = 0;
    int v14 = 117;
    goto LABEL_14;
  }
  unint64_t v13 = v1;
  if ((v2 & 0x2000000) != 0 && v12 & 0xFFFFFFF3 | v2 & 0x1976FEF3)
  {
    uint64_t v6 = 0;
    int v14 = 192;
LABEL_14:
    *unsigned int v8 = v14;
    return v6;
  }
  if (v1 == -1) {
    unint64_t v13 = _pcre2_strlen_8(v0);
  }
  if (v13 > *((void *)v11 + 6))
  {
    uint64_t v6 = 0;
    int v14 = 188;
    goto LABEL_14;
  }
  long long v130 = 0u;
  long long v131 = 0u;
  int v16 = (v10 >> 7) & 0x80000 | v10;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v122 = 0u;
  memset(v123, 0, sizeof(v123));
  long long v120 = 0u;
  long long v121 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  if (*((void *)v11 + 5)) {
    uint64_t v17 = (char *)*((void *)v11 + 5);
  }
  else {
    uint64_t v17 = (char *)&_pcre2_default_tables_8;
  }
  *(void *)&long long v119 = v17 + 256;
  *((void *)&v119 + 1) = v17 + 512;
  uint64_t v100 = v17;
  *(void *)&long long v118 = v11;
  *((void *)&v118 + 1) = v17;
  *(void *)&long long v128 = v136;
  *(void *)((char *)&v131 + 4) = 0;
  *(void *)&long long v125 = &v134;
  HIDWORD(v125) = (v10 >> 7) & 0x80000 | v10;
  DWORD2(v125) = 20;
  *(void *)&long long v127 = v135;
  v123[11] = 0;
  *(void *)&long long v126 = 0;
  DWORD2(v126) = 0;
  long long v122 = (unint64_t)&v9[v13];
  long long v124 = 0uLL;
  *(void *)((char *)&v130 + 4) = 0;
  *(void *)&long long v121 = v133;
  *((void *)&v121 + 1) = v9;
  *(void *)&long long v120 = v17 + 832;
  *((void *)&v120 + 1) = v133;
  v123[0] = 6000;
  *((void *)&v128 + 1) = 0;
  *(void *)&long long v18 = -1;
  *((void *)&v18 + 1) = -1;
  *(_OWORD *)&v123[1] = v18;
  *(_OWORD *)&v123[3] = v18;
  *(_OWORD *)&v123[5] = v18;
  *(_OWORD *)&v123[7] = v18;
  *(_OWORD *)&v123[9] = v18;
  int64_t v111 = v11;
  if ((v10 & 0x2000000) != 0 || (unint64_t v19 = v13 - 2, v13 < 2))
  {
    int v24 = 0;
    LODWORD(v39) = 0;
    int v22 = 0;
    int v21 = 0;
    int v101 = -1;
    int v102 = -1;
    int v103 = -1;
LABEL_63:
    uint64_t v40 = &v9[v39];
    unsigned int v41 = HIDWORD(v125);
    if ((HIDWORD(v125) & 0x80000) != 0)
    {
      if ((v10 & 0x1000) != 0)
      {
        uint64_t v6 = 0;
        LODWORD(recurse) = 174;
        goto LABEL_78;
      }
      unsigned int v42 = HIDWORD(v125);
      if ((v10 & 0x40000000) == 0)
      {
        int v97 = v24;
        int v105 = v21;
        int v108 = v22;
        LODWORD(recurse) = _pcre2_valid_utf_8(v9, v13, v7);
        int v112 = (int)recurse;
        if (recurse)
        {
          uint64_t v6 = 0;
          int v44 = v111;
          goto LABEL_102;
        }
        unsigned int v42 = HIDWORD(v125);
        unsigned int v41 = HIDWORD(v125);
        int v24 = v97;
        int v21 = v105;
        int v22 = v108;
      }
    }
    else
    {
      unsigned int v42 = HIDWORD(v125);
    }
    if ((~v42 & 0x20800) == 0)
    {
      uint64_t v6 = 0;
      LODWORD(recurse) = 175;
LABEL_78:
      int v112 = (int)recurse;
      goto LABEL_79;
    }
    if (!v21) {
      LOWORD(v21) = *((_WORD *)v111 + 28);
    }
    if (!v22) {
      int v22 = *((unsigned __int16 *)v111 + 29);
    }
    LODWORD(v129) = 0;
    uint64_t v45 = v39;
    int v99 = v16;
    unsigned int v95 = v41;
    switch(v22)
    {
      case 1:
        DWORD1(v129) = 1;
        char v46 = 13;
        goto LABEL_82;
      case 2:
        DWORD1(v129) = 1;
        char v46 = 10;
LABEL_82:
        LOBYTE(v130) = v46;
        break;
      case 3:
        DWORD1(v129) = 2;
        LOWORD(v130) = 2573;
        break;
      case 4:
        int v47 = 1;
        goto LABEL_86;
      case 5:
        int v47 = 2;
LABEL_86:
        LODWORD(v129) = v47;
        break;
      case 6:
        DWORD1(v129) = 1;
        LOBYTE(v130) = 0;
        break;
      default:
        uint64_t v6 = 0;
        LODWORD(recurse) = 156;
        goto LABEL_78;
    }
    int v48 = v24;
    __int16 v106 = v21;
    __int16 v109 = v22;
    unint64_t v49 = v13 - v45;
    if ((v111[4] & 0xC) != 0) {
      v49 += 4;
    }
    if ((v10 & 4) != 0) {
      unint64_t v50 = 5 * v49 + 5;
    }
    else {
      unint64_t v50 = v49;
    }
    unsigned int v98 = v42;
    if (v50 <= 0x3FF)
    {
      uint64_t v51 = v127;
      unsigned int v52 = v42;
    }
    else
    {
      uint64_t v51 = (*(uint64_t (**)(unint64_t, void))v111)(4 * v50 + 4, *((void *)v111 + 2));
      if (!v51)
      {
        uint64_t v6 = 0;
        *unsigned int v8 = 121;
        int v44 = v111;
        goto LABEL_103;
      }
      *(void *)&long long v127 = v51;
      unsigned int v52 = HIDWORD(v125);
    }
    *((void *)&v127 + 1) = v51 + 4 * v50 + 4;
    LODWORD(recurse) = parse_regex(v40, v52, v132, &v118);
    int v112 = (int)recurse;
    if (recurse) {
      goto LABEL_98;
    }
    int v53 = DWORD1(v126);
    if (DWORD1(v126) <= 0xFF)
    {
      unsigned int v54 = (void *)v128;
    }
    else
    {
      unsigned int v54 = (void *)(*(uint64_t (**)(uint64_t, void))v111)(4 * (DWORD1(v126) + 1), *((void *)v111 + 2));
      *(void *)&long long v128 = v54;
      if (!v54)
      {
        uint64_t v6 = 0;
        LODWORD(recurse) = 121;
        int v112 = 121;
        v123[11] = 0;
        goto LABEL_99;
      }
      int v53 = DWORD1(v126);
    }
    bzero(v54, 4 * (v53 + 1));
    if (v132[0])
    {
      LODWORD(recurse) = check_lookbehinds((unsigned int *)v127, 0, 0, (uint64_t)&v118);
      int v112 = (int)recurse;
      if (recurse) {
        goto LABEL_98;
      }
    }
    v123[11] = v13;
    int v116 = (unsigned int *)v127;
    int v117 = v133;
    v133[0] = -122;
    compile_regex(HIDWORD(v125), &v117, &v116, &v112, 0, (unsigned int *)&v113 + 1, (int *)&v114 + 1, (unsigned int *)&v113, (int *)&v114, 0, (uint64_t)&v118, &v115);
    LODWORD(recurse) = v112;
    if (v112)
    {
LABEL_98:
      uint64_t v6 = 0;
LABEL_99:
      int v44 = v111;
LABEL_100:
      uint64_t v40 = &v9[v123[11]];
      goto LABEL_101;
    }
    if (v115 > 0x10000)
    {
      uint64_t v6 = 0;
      LODWORD(recurse) = 120;
      int v112 = 120;
      goto LABEL_99;
    }
    unint64_t v55 = v115 + WORD1(v124) * (unint64_t)(unsigned __int16)v124 + 136;
    uint64_t v56 = (*(uint64_t (**)(unint64_t, void))v111)(v55, *((void *)v111 + 2));
    uint64_t v6 = v56;
    if (!v56)
    {
      LODWORD(recurse) = 121;
      int v112 = 121;
      int v44 = v111;
      goto LABEL_100;
    }
    *(void *)(v56 + 128) = 0;
    uint64_t v57 = *((void *)v111 + 2);
    *(_OWORD *)uint64_t v56 = *v111;
    *(void *)(v56 + 16) = v57;
    *(void *)(v56 + 24) = v100;
    *(void *)(v56 + 32) = 0;
    *(_OWORD *)(v56 + 40) = 0u;
    *(_OWORD *)(v56 + 56) = 0u;
    *(void *)(v56 + 72) = v55;
    *(_DWORD *)(v56 + 80) = 1346589253;
    *(_DWORD *)(v56 + 84) = v99;
    unsigned int v58 = HIDWORD(v125);
    *(_DWORD *)(v6 + 88) = HIDWORD(v125);
    *(_DWORD *)(v6 + 92) = *((_DWORD *)v111 + 16);
    *(_DWORD *)(v6 + 96) = v48 | v126 | 1;
    *(_DWORD *)(v6 + 100) = v102;
    *(_DWORD *)(v6 + 104) = v101;
    *(_DWORD *)(v6 + 108) = v103;
    *(void *)(v6 + 112) = 0;
    *(_WORD *)(v6 + 120) = v106;
    *(_WORD *)(v6 + 122) = v109;
    *(void *)(v6 + 124) = 0;
    unsigned int v59 = WORD1(v124);
    *(_WORD *)(v6 + 132) = WORD1(v124);
    uint64_t v60 = (unsigned __int16)v124;
    *(_WORD *)(v6 + 134) = v124;
    DWORD1(v124) = 0;
    DWORD2(v126) = 0;
    *((void *)&v122 + 1) = v6 + 136;
    unint64_t v110 = (unsigned __int8 *)(v6 + 136 + v60 * (unint64_t)v59);
    *(void *)&long long v121 = v110;
    *((void *)&v130 + 1) = 0;
    LODWORD(v131) = 0;
    *((void *)&v124 + 1) = 0;
    if (v60)
    {
      unsigned int v61 = 0;
      uint64_t v62 = v125;
      do
      {
        add_name_to_table((uint64_t)&v118, *(void **)v62, *(unsigned __int16 *)(v62 + 12), *(_DWORD *)(v62 + 8), v61++);
        v62 += 16;
      }
      while (v61 < (unsigned __int16)v124);
      unsigned int v58 = *(_DWORD *)(v6 + 88);
    }
    int v116 = (unsigned int *)v127;
    int v117 = v110;
    *unint64_t v110 = -122;
    if ((compile_regex(v58, &v117, &v116, &v112, 0, (unsigned int *)&v113 + 1, (int *)&v114 + 1, (unsigned int *)&v113, (int *)&v114, 0, (uint64_t)&v118, 0) & 0x80000000) != 0)*(_DWORD *)(v6 + 96) |= 0x2000u; {
    *(_WORD *)(v6 + 128) = WORD2(v126);
    }
    *(_WORD *)(v6 + 130) = WORD4(v128);
    *(_WORD *)(v6 + 124) = WORD2(v130);
    if (HIDWORD(v130))
    {
      LODWORD(v113) = 0;
      LODWORD(v114) = -1;
      *(_DWORD *)(v6 + 96) |= 0x800000u;
    }
    int v65 = v117;
    *int v117 = 0;
    int v117 = v65 + 1;
    unint64_t v66 = v65 + 1 - v110;
    BOOL v67 = v66 > v115;
    unint64_t v68 = v66 - v115;
    if (v67)
    {
      LODWORD(recurse) = 123;
LABEL_135:
      int v112 = (int)recurse;
LABEL_162:
      int v44 = v111;
      goto LABEL_100;
    }
    *(void *)(v6 + 72) += v68;
    LODWORD(recurse) = v112;
    if (!v112)
    {
      if (DWORD1(v131))
      {
        int v69 = (v95 >> 19) & 1;
        recurse = find_recurse(v110, v69);
        if (recurse)
        {
          uint64_t v70 = recurse;
          unsigned int v71 = 0;
          int v72 = 8;
          while (1)
          {
            int v73 = __rev16(*(unsigned __int16 *)(v70 + 1));
            if (v73)
            {
              unsigned int v74 = v110;
              if (!v71) {
                goto LABEL_151;
              }
              unsigned int v75 = v71;
              unsigned int v74 = v110;
              int v76 = v72;
              while (1)
              {
                uint64_t v77 = &v132[4 * v76 + 1];
                int v78 = v77[2];
                if (v73 == v78) {
                  break;
                }
                if (v73 > v78) {
                  unsigned int v74 = *(unsigned __int8 **)v77;
                }
                int v76 = ((_BYTE)v76 + 1) & 7;
                if (!--v75) {
                  goto LABEL_151;
                }
              }
              uint64_t v79 = *(void *)v77;
              if (!*(void *)v77)
              {
LABEL_151:
                bracket_8 = _pcre2_find_bracket_8(v74, v69, v73);
                if (!bracket_8)
                {
                  LODWORD(recurse) = 153;
                  int v112 = 153;
                  break;
                }
                LODWORD(v79) = bracket_8;
                if (v72 >= 1) {
                  --v72;
                }
                else {
                  int v72 = 7;
                }
                int v81 = &v132[4 * v72 + 1];
                v81[2] = v73;
                *(void *)int v81 = bracket_8;
                if (v71 < 8) {
                  ++v71;
                }
              }
            }
            else
            {
              LODWORD(v79) = v110;
            }
            *(_WORD *)(v70 + 1) = bswap32(v79 - v110) >> 16;
            uint64_t v70 = find_recurse(v70 + 3, v69);
            if (!v70)
            {
              LODWORD(recurse) = v112;
              break;
            }
          }
        }
      }
    }
    if (recurse) {
      goto LABEL_162;
    }
    int v82 = *(_DWORD *)(v6 + 88);
    if ((v82 & 0x4000) == 0)
    {
      if (_pcre2_auto_possessify_8(v110, (uint64_t)&v118))
      {
        LODWORD(recurse) = 180;
        goto LABEL_135;
      }
      int v82 = *(_DWORD *)(v6 + 88);
    }
    if ((v82 & 0x80000000) == 0 && is_anchored(v110, 0, (uint64_t)&v118, 0, 0))
    {
      v82 |= 0x80000000;
      *(_DWORD *)(v6 + 88) = v82;
    }
    if ((v82 & 0x10000) != 0)
    {
LABEL_211:
      int v44 = v111;
      goto LABEL_103;
    }
    int v83 = v95 & 0x80000;
    int v84 = v98 & 0x20000;
    int v85 = HIDWORD(v114);
    if (v114 < 0)
    {
      unsigned int firstassertedcu = find_firstassertedcu(v110, (int *)&v114 + 1, 0);
      HIDWORD(v113) = firstassertedcu;
      int v85 = HIDWORD(v114);
      if (v114 < 0)
      {
        if ((*(_DWORD *)(v6 + 88) & 0x80000000) != 0
          || !is_startline(v110, 0, (uint64_t)&v118, 0, 0))
        {
          int v88 = 0;
          goto LABEL_190;
        }
        int v88 = 0;
        int v89 = *(_DWORD *)(v6 + 96) | 0x200;
        goto LABEL_188;
      }
    }
    else
    {
      unsigned int firstassertedcu = HIDWORD(v113);
    }
    *(_DWORD *)(v6 + 112) = firstassertedcu;
    int v87 = *(_DWORD *)(v6 + 96);
    *(_DWORD *)(v6 + 96) = v87 | 0x10;
    if ((v85 & 1) == 0)
    {
LABEL_179:
      int v88 = 1;
LABEL_190:
      LOBYTE(v64) = v114;
      if ((v114 & 0x80000000) != 0) {
        goto LABEL_204;
      }
      int v90 = *(_DWORD *)(v6 + 88);
      if (v85 < 0 || (v90 & 0x80000) == 0 || (firstassertedcu & 0x80) == 0 || (v113 & 0x80) == 0) {
        ++v88;
      }
      if ((v114 & 2) == 0 && v90 < 0) {
        goto LABEL_204;
      }
      uint64_t v91 = v113;
      *(_DWORD *)(v6 + 116) = v113;
      int v92 = *(_DWORD *)(v6 + 96);
      *(_DWORD *)(v6 + 96) = v92 | 0x80;
      if ((v64 & 1) == 0) {
        goto LABEL_204;
      }
      if (v91 >= 0x80 && (v84 | v83 || v91 > 0xFE))
      {
        if (v83
          || !v84
          || !*(_DWORD *)&_pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[(int)(v91
                                                                       - (v64 & 0xFFFFFF80)
                                                                       + (_pcre2_ucd_stage1_8[(int)v91 / 128] << 7))]
                                             + 4])
        {
          goto LABEL_204;
        }
      }
      else if (v91 == *(unsigned __int8 *)(v119 + v91))
      {
LABEL_204:
        if (_pcre2_study_8(v6))
        {
          LODWORD(recurse) = 131;
          goto LABEL_135;
        }
        if (((v88 == 0) & (*(unsigned __int8 *)(v6 + 96) >> 6)) != 0) {
          unsigned int v93 = 1;
        }
        else {
          unsigned int v93 = v88;
        }
        if (v93 > *(unsigned __int16 *)(v6 + 126)) {
          *(_WORD *)(v6 + 126) = v93;
        }
        goto LABEL_211;
      }
      *(_DWORD *)(v6 + 96) = v92 | 0x180;
      goto LABEL_204;
    }
    if (firstassertedcu >= 0x80 && (v84 | v83 || firstassertedcu > 0xFE))
    {
      int v88 = 1;
      if (v83
        || !v84
        || !*(_DWORD *)&_pcre2_ucd_records_8[12
                                           * _pcre2_ucd_stage2_8[firstassertedcu
                                                               - (v63 & 0xFFFFFF80)
                                                               + (_pcre2_ucd_stage1_8[(int)firstassertedcu / 128] << 7)]
                                           + 4])
      {
        goto LABEL_190;
      }
      int v89 = v87 | 0x30;
    }
    else
    {
      if (firstassertedcu == *(unsigned __int8 *)(v119 + firstassertedcu)) {
        goto LABEL_179;
      }
      int v89 = v87 | 0x30;
      int v88 = 1;
    }
LABEL_188:
    *(_DWORD *)(v6 + 96) = v89;
    goto LABEL_190;
  }
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  unsigned int v23 = 0;
  int v24 = 0;
  uint64_t v25 = v9 + 2;
  int v102 = -1;
  int v103 = -1;
  int v101 = -1;
  while (2)
  {
    if (v9[v20] != 40 || v9[v23 + 1] != 42)
    {
      LODWORD(v39) = v23;
      goto LABEL_63;
    }
    unsigned int v94 = v23;
    int v96 = v24;
    int v104 = v21;
    int v107 = v22;
    uint64_t v26 = 0;
    unint64_t v27 = v19 - v23;
    int v28 = &v25[v23];
    while (1)
    {
      unint64_t v29 = LOWORD((&pso_list)[v26 + 1]);
      if (v27 >= v29
        && !_pcre2_strncmp_8(v28, (unsigned __int8 *)(&pso_list)[v26], LOWORD((&pso_list)[v26 + 1])))
      {
        break;
      }
      v26 += 2;
      if (v26 == 42)
      {
        LODWORD(v39) = v94;
        int v24 = v96;
        int v16 = (v10 >> 7) & 0x80000 | v10;
        int v21 = v104;
        int v22 = v107;
        goto LABEL_63;
      }
    }
    uint64_t v39 = v94 + v29 + 2;
    int v30 = *((unsigned __int16 *)&pso_list + 4 * v26 + 5);
    int v21 = v104;
    int v22 = v107;
    int v24 = v96;
    switch(*((_WORD *)&pso_list + 4 * v26 + 5))
    {
      case 0:
        HIDWORD(v125) |= *((_DWORD *)&pso_list + 2 * v26 + 3);
        goto LABEL_58;
      case 1:
        int v24 = *((_DWORD *)&pso_list + 2 * v26 + 3) | v96;
        goto LABEL_58;
      case 2:
        int v22 = *((_DWORD *)&pso_list + 2 * v26 + 3);
        int v24 = v96 | 0x8000;
        goto LABEL_58;
      case 3:
        int v21 = *((_DWORD *)&pso_list + 2 * v26 + 3);
        int v24 = v96 | 0x4000;
LABEL_58:
        int v16 = (v10 >> 7) & 0x80000 | v10;
        goto LABEL_59;
      case 4:
      case 5:
      case 6:
        unsigned int v31 = v9[v39];
        uint64_t v25 = v9 + 2;
        if (v31 - 48 > 9)
        {
          uint64_t v6 = 0;
          uint64_t v40 = &v9[v39];
          LODWORD(recurse) = 160;
          goto LABEL_78;
        }
        unsigned int v32 = 0;
        LODWORD(v39) = v94 + v29 + 3;
        int v16 = (v10 >> 7) & 0x80000 | v10;
        unint64_t v19 = v13 - 2;
        do
        {
          if (v31 > 0x39 || v32 > 0x19999998) {
            goto LABEL_121;
          }
          unsigned int v32 = v31 + 10 * v32 - 48;
          unsigned int v31 = v9[v39];
          LODWORD(v39) = v39 + 1;
        }
        while (v31 > 0x2F);
        if (v31 == 41)
        {
          int v34 = v102;
          int v33 = v103;
          if (v30 == 4) {
            unsigned int v35 = v32;
          }
          else {
            unsigned int v35 = v102;
          }
          if (v30 == 4) {
            unsigned int v36 = v103;
          }
          else {
            unsigned int v36 = v32;
          }
          BOOL v37 = v30 == 5;
          if (v30 != 5) {
            int v34 = v35;
          }
          int v38 = v101;
          if (v37) {
            int v38 = v32;
          }
          int v101 = v38;
          int v102 = v34;
          if (!v37) {
            int v33 = v36;
          }
          int v103 = v33;
LABEL_60:
          uint64_t v20 = v39;
          unsigned int v23 = v39;
          if (v13 - v39 <= 1) {
            goto LABEL_63;
          }
          continue;
        }
LABEL_121:
        uint64_t v6 = 0;
        LODWORD(recurse) = 160;
        int v112 = 160;
        uint64_t v40 = &v9[v39];
LABEL_79:
        int v44 = v111;
LABEL_101:
        *BOOL v7 = v40 - v9;
LABEL_102:
        *unsigned int v8 = (int)recurse;
        pcre2_code_free_8(v6);
        uint64_t v6 = 0;
LABEL_103:
        if ((unsigned char *)v127 != v135) {
          (*((void (**)(void, void))v44 + 1))(v127, *((void *)v44 + 2));
        }
        if (DWORD2(v125) >= 0x15) {
          (*((void (**)(void, void))v44 + 1))(v125, *((void *)v44 + 2));
        }
        if ((void *)v128 != v136) {
          (*((void (**)(void, void))v44 + 1))(v128, *((void *)v44 + 2));
        }
        return v6;
      default:
        int v24 = v96;
        int v16 = (v10 >> 7) & 0x80000 | v10;
        int v21 = v104;
        int v22 = v107;
LABEL_59:
        unint64_t v19 = v13 - 2;
        uint64_t v25 = v9 + 2;
        goto LABEL_60;
    }
  }
}

uint64_t parse_regex(unsigned __int8 *a1, unsigned int a2, _DWORD *a3, void *a4)
{
  uint64_t v4 = (uint64_t)a4;
  uint64_t v5 = a1;
  v366[0] = a1;
  unsigned int v364 = 0;
  uint64_t v362 = 0;
  int v363 = 0;
  uint64_t v6 = (int *)a4[28];
  unint64_t v354 = a4[29];
  int v7 = *(_DWORD *)(*a4 + 64);
  int v352 = (a2 >> 2) & 1;
  int v353 = a2 & 0x80000;
  unsigned int v361 = 0;
  unsigned int v8 = (unsigned __int8 *)a4[8];
  int v9 = -2146893824;
  if ((v7 & 8) == 0)
  {
    if ((v7 & 4) == 0) {
      goto LABEL_5;
    }
    int v9 = -2145910779;
  }
  *uint64_t v6 = v9;
  v6[1] = -2145779712;
  v6 += 2;
LABEL_5:
  int v365 = 0;
  if ((a2 & 0x2000000) != 0)
  {
    if (v8 <= a1) {
      goto LABEL_801;
    }
    int v307 = a2 & 4;
    while (1)
    {
      if ((unint64_t)v6 >= v354) {
        goto LABEL_810;
      }
      int v308 = v5 + 1;
      v366[0] = v5 + 1;
      unsigned int v309 = *v5;
      int v365 = v309;
      if (!v353 || v309 < 0xC0) {
        goto LABEL_788;
      }
      if ((v309 & 0x20) == 0) {
        break;
      }
      int v310 = *v308 & 0x3F;
      if ((v309 & 0x10) != 0)
      {
        if ((v309 & 8) != 0)
        {
          int v311 = v5[2] & 0x3F;
          int v312 = v5[3] & 0x3F;
          int v313 = v5[4] & 0x3F;
          if ((v309 & 4) != 0)
          {
            unsigned int v309 = ((v309 & 1) << 30) | (v310 << 24) | (v311 << 18) | (v312 << 12) | (v313 << 6) | v5[5] & 0x3F;
            int v365 = v309;
            int v308 = v5 + 6;
          }
          else
          {
            int v308 = v5 + 5;
            unsigned int v309 = ((v309 & 3) << 24) | (v310 << 18) | (v311 << 12) | (v312 << 6) | v313;
            int v365 = v309;
          }
        }
        else
        {
          unsigned int v309 = ((v309 & 7) << 18) | (v310 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
          int v365 = v309;
          int v308 = v5 + 4;
        }
      }
      else
      {
        unsigned int v309 = ((v309 & 0xF) << 12) | (v310 << 6) | v5[2] & 0x3F;
        int v365 = v309;
        int v308 = v5 + 3;
      }
      v366[0] = v308;
      if (v307)
      {
LABEL_798:
        uint64_t v6 = manage_callouts((int)v5, &v363, v352, v6, v4);
        unsigned int v309 = v365;
        uint64_t v5 = v366[0];
        goto LABEL_799;
      }
LABEL_789:
      uint64_t v5 = v308;
LABEL_799:
      *v6++ = v309;
      if (v5 >= v8)
      {
        LOWORD(v15) = 0;
        goto LABEL_802;
      }
    }
    int v308 = v5 + 2;
    v366[0] = v5 + 2;
    int v365 = v5[1] & 0x3F | ((v309 & 0x1F) << 6);
    unsigned int v309 = v365;
LABEL_788:
    if (v307) {
      goto LABEL_798;
    }
    goto LABEL_789;
  }
  if (v8 <= a1)
  {
LABEL_801:
    LOWORD(v15) = 0;
    goto LABEL_802;
  }
  char v348 = v7;
  int v347 = 0;
  unint64_t v349 = 0;
  v350 = 0;
  BOOL v10 = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v351 = 0;
  uint64_t v16 = 0;
  unint64_t v343 = 0;
  int v344 = (a2 >> 19) & 1;
  unint64_t v341 = *(void *)(v4 + 40) + 12 * (*(void *)(v4 + 80) / 0xCuLL);
  uint64_t v17 = (a2 >> 17) & 0x80 | a2;
  int v345 = v8 - 1;
  size_t v346 = (int *)(v4 + 260);
  while (2)
  {
    uint64_t v359 = 0;
    uint64_t v360 = 0;
    unint64_t v358 = 0;
    uint64_t v357 = 0;
    if ((unint64_t)v6 >= v354) {
      goto LABEL_810;
    }
    uint64_t v18 = *(void *)v4;
    if (*(_DWORD *)(*(void *)v4 + 60) < (unsigned __int16)v15)
    {
      int v320 = 119;
      goto LABEL_811;
    }
    unint64_t v19 = v5 + 1;
    v366[0] = v5 + 1;
    unsigned int v20 = *v5;
    int v365 = v20;
    if (!v353 || v20 < 0xC0) {
      goto LABEL_14;
    }
    if ((v20 & 0x20) == 0)
    {
      unint64_t v19 = v5 + 2;
      v366[0] = v5 + 2;
      int v365 = v5[1] & 0x3F | ((v20 & 0x1F) << 6);
      unsigned int v20 = v365;
LABEL_14:
      if (v12) {
        goto LABEL_15;
      }
      goto LABEL_38;
    }
    int v22 = *v19 & 0x3F;
    if ((v20 & 0x10) != 0)
    {
      if ((v20 & 8) != 0)
      {
        int v29 = v5[2] & 0x3F;
        int v30 = v5[3] & 0x3F;
        int v31 = v5[4] & 0x3F;
        if ((v20 & 4) != 0)
        {
          unsigned int v20 = ((v20 & 1) << 30) | (v22 << 24) | (v29 << 18) | (v30 << 12) | (v31 << 6) | v5[5] & 0x3F;
          int v365 = v20;
          unint64_t v19 = v5 + 6;
        }
        else
        {
          unint64_t v19 = v5 + 5;
          unsigned int v20 = ((v20 & 3) << 24) | (v22 << 18) | (v29 << 12) | (v30 << 6) | v31;
          int v365 = v20;
        }
      }
      else
      {
        unsigned int v20 = ((v20 & 7) << 18) | (v22 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
        int v365 = v20;
        unint64_t v19 = v5 + 4;
      }
    }
    else
    {
      unsigned int v20 = ((v20 & 0xF) << 12) | (v22 << 6) | v5[2] & 0x3F;
      int v365 = v20;
      unint64_t v19 = v5 + 3;
    }
    v366[0] = v19;
    if (v12)
    {
LABEL_15:
      if (v20 != 92 || v19 >= v8 || *v19 != 69)
      {
        if ((int)v13 < 1)
        {
          if (v11)
          {
            *uint64_t v6 = v20;
          }
          else
          {
            if ((int)v14 <= 0)
            {
              int v23 = (int)v5;
              uint64_t v24 = v11;
              uint64_t v25 = v15;
              uint64_t v26 = v17;
              int v27 = v14;
              uint64_t v14 = v13;
              int v28 = manage_callouts(v23, &v363, v352, v6, v4);
              uint64_t v13 = v14;
              LODWORD(v14) = v27;
              uint64_t v17 = v26;
              uint64_t v15 = v25;
              uint64_t v11 = v24;
              uint64_t v6 = v28;
              unsigned int v20 = v365;
            }
            uint64_t v14 = (v14 - 1);
            *uint64_t v6 = v20;
            BOOL v10 = 1;
          }
          uint64_t v16 = 0;
          ++v6;
          int v12 = 1;
          goto LABEL_30;
        }
        unint64_t v318 = v19 - 1;
        goto LABEL_819;
      }
      int v12 = 0;
      goto LABEL_19;
    }
LABEL_38:
    if (!v11)
    {
LABEL_51:
      if (v20 != 92) {
        goto LABEL_57;
      }
      if (v19 >= v8 || (int v32 = *v19, v32 != 81) && v32 != 69)
      {
        unsigned int v20 = 92;
        goto LABEL_57;
      }
      int v12 = v32 == 81;
LABEL_19:
      int v21 = v19 + 1;
      goto LABEL_20;
    }
    if ((~v17 & 0x400080) != 0) {
      goto LABEL_47;
    }
    if (v20 < 0x100)
    {
      if (v20 == 35) {
        goto LABEL_57;
      }
      if (v20 != 133 && (*(unsigned char *)(*(void *)(v4 + 32) + v20) & 1) == 0)
      {
LABEL_47:
        if (v20 == 41)
        {
          if ((uint64_t)&v19[~(unint64_t)v350] >= 256)
          {
            v366[0] = v19 - 1;
            int v320 = 176;
            goto LABEL_811;
          }
          *(_DWORD *)unint64_t v349 = ((unint64_t)((char *)v6 - v349) >> 2) - 1;
          if (v351)
          {
            int v12 = 0;
            uint64_t v11 = 0;
            *v6++ = v351;
            int v351 = 0;
          }
          else
          {
            int v351 = 0;
            int v12 = 0;
            uint64_t v11 = 0;
          }
        }
        else
        {
          if (v20 != 92) {
            goto LABEL_102;
          }
          if ((v17 & 0x400000) == 0)
          {
            unsigned int v20 = 92;
LABEL_102:
            int v12 = 0;
            *v6++ = v20;
            uint64_t v11 = 1;
            goto LABEL_30;
          }
          uint64_t v55 = v16;
          BOOL v56 = v10;
          uint64_t v57 = v14;
          uint64_t v58 = v13;
          uint64_t v59 = v15;
          uint64_t v60 = v17;
          int v61 = _pcre2_check_escape_8(v366, (unint64_t)v8, &v365, (int *)&v362 + 1, v17, *(_DWORD *)(v18 + 64), 0, v4);
          if (HIDWORD(v362)) {
            goto LABEL_812;
          }
          uint64_t v15 = v59;
          if (v61 == 26)
          {
            int v12 = 1;
            uint64_t v11 = 1;
            uint64_t v17 = v60;
            uint64_t v13 = v58;
            uint64_t v14 = v57;
            BOOL v10 = v56;
            uint64_t v16 = v55;
          }
          else
          {
            uint64_t v17 = v60;
            uint64_t v13 = v58;
            BOOL v10 = v56;
            uint64_t v16 = v55;
            if (v61 != 25)
            {
              if (v61)
              {
                int v320 = 140;
                goto LABEL_811;
              }
              unsigned int v20 = v365;
              uint64_t v14 = v57;
              goto LABEL_102;
            }
            int v12 = 0;
            uint64_t v11 = 1;
            uint64_t v14 = v57;
          }
        }
        goto LABEL_30;
      }
      goto LABEL_51;
    }
    if ((v20 | 1) != 0x200F && (v20 | 1) != 0x2029) {
      goto LABEL_47;
    }
LABEL_57:
    if ((v17 & 0x80) == 0)
    {
      if ((int)v20 <= 62)
      {
        if (v20 - 42 < 2) {
          goto LABEL_81;
        }
        goto LABEL_60;
      }
LABEL_75:
      if (v20 == 63) {
        goto LABEL_81;
      }
      if (v20 == 123)
      {
        unint64_t v358 = v19;
        unsigned int v328 = v14;
        unsigned int v332 = v11;
        uint64_t v34 = v15;
        unint64_t v35 = (unint64_t)v8;
        BOOL v36 = v10;
        uint64_t v37 = v17;
        uint64_t v38 = v4;
        uint64_t v39 = v8;
        int v40 = v13;
        int v41 = v16;
        int v42 = read_repeat_counts(&v358, v35, 0, 0, (int *)&v362 + 1);
        LODWORD(v16) = v41;
        LODWORD(v10) = v36;
        LODWORD(v13) = v40;
        unsigned int v8 = v39;
        uint64_t v4 = v38;
        uint64_t v17 = v37;
        uint64_t v15 = v34;
        uint64_t v14 = v328;
        uint64_t v11 = v332;
        if (v42) {
          goto LABEL_81;
        }
      }
      goto LABEL_78;
    }
    if (v20 <= 0xFF)
    {
      int v12 = 0;
      if (v20 == 133 || (*(unsigned char *)(*(void *)(v4 + 32) + v20) & 1) != 0) {
        goto LABEL_30;
      }
    }
    int v12 = 0;
    if ((v20 | 1) == 0x200F || (v20 | 1) == 0x2029) {
      goto LABEL_30;
    }
    if ((int)v20 > 41)
    {
      if (v20 - 42 < 2) {
        goto LABEL_81;
      }
      goto LABEL_75;
    }
    if (v20 == 35)
    {
      if (v19 >= v8) {
        goto LABEL_407;
      }
      while (1)
      {
        int v73 = *(_DWORD *)(v4 + 256);
        unint64_t v74 = *(void *)(v4 + 64);
        if (v73)
        {
          if ((unint64_t)v19 < v74)
          {
            uint64_t v75 = v16;
            BOOL v76 = v10;
            uint64_t v77 = v14;
            uint64_t v78 = v13;
            uint64_t v79 = v11;
            uint64_t v80 = v17;
            uint64_t v81 = v15;
            int is_newline_8 = _pcre2_is_newline_8(v19, v73, v74, v346, v344);
            unint64_t v19 = v366[0];
            if (is_newline_8)
            {
              uint64_t v83 = *v346;
              uint64_t v15 = v81;
              uint64_t v17 = v80;
              uint64_t v11 = v79;
              uint64_t v13 = v78;
              uint64_t v14 = v77;
              BOOL v10 = v76;
              uint64_t v16 = v75;
              goto LABEL_539;
            }
            uint64_t v15 = v81;
            uint64_t v17 = v80;
            uint64_t v11 = v79;
            uint64_t v13 = v78;
            uint64_t v14 = v77;
            BOOL v10 = v76;
            uint64_t v16 = v75;
          }
        }
        else
        {
          uint64_t v83 = *v346;
          if ((unint64_t)v19 <= v74 - v83 && *v19 == *(unsigned __int8 *)(v4 + 272))
          {
            if (v83 == 1)
            {
              uint64_t v83 = 1;
LABEL_539:
              int v12 = 0;
              int v21 = &v19[v83];
LABEL_20:
              v366[0] = v21;
              goto LABEL_30;
            }
            if (v19[1] == *(unsigned __int8 *)(v4 + 273)) {
              goto LABEL_539;
            }
          }
        }
        int v84 = v19 + 1;
        v366[0] = v19 + 1;
        if (v353 && v84 < v8)
        {
          int64_t v85 = v345 - v19;
          do
          {
            if ((*v84 & 0xC0) != 0x80) {
              goto LABEL_158;
            }
            v366[0] = ++v84;
            --v85;
          }
          while (v85);
          int v84 = v8;
        }
LABEL_158:
        unint64_t v19 = v84;
        if (v84 >= v8) {
          goto LABEL_407;
        }
      }
    }
LABEL_60:
    if (v20 == 40 && v8 - v19 >= 2 && *v19 == 63 && v19[1] == 35)
    {
      int v21 = v19 + 1;
      while (1)
      {
        v366[0] = v21;
        if (v21 >= v8) {
          break;
        }
        int v33 = *v21++;
        if (v33 == 41)
        {
          int v12 = 0;
          goto LABEL_20;
        }
      }
      int v320 = 118;
      goto LABEL_811;
    }
LABEL_78:
    uint64_t v43 = (v14 - 1);
    if ((int)v14 <= 0)
    {
      int v44 = (int)v5;
      unint64_t v333 = v8;
      BOOL v45 = v10;
      uint64_t v46 = v11;
      uint64_t v47 = v15;
      uint64_t v48 = v17;
      int v49 = v13;
      int v50 = v16;
      uint64_t v51 = manage_callouts(v44, &v363, v352, v6, v4);
      LODWORD(v16) = v50;
      LODWORD(v10) = v45;
      unsigned int v8 = v333;
      LODWORD(v13) = v49;
      uint64_t v17 = v48;
      uint64_t v15 = v47;
      uint64_t v11 = v46;
      uint64_t v6 = v51;
    }
    uint64_t v14 = v43;
LABEL_81:
    if ((int)v13 >= 1)
    {
      if (v365 == 40 && v8 - v366[0] >= 3)
      {
        int v52 = *v366[0];
        if (v52 == 63)
        {
          unsigned int v53 = v366[0][1];
          if (v53 > 0x3C)
          {
            if (v53 != 61 && (v53 != 67 || v13 != 2)) {
              goto LABEL_818;
            }
          }
          else if (v53 != 33)
          {
            if (v53 != 60) {
              goto LABEL_818;
            }
            int v54 = v366[0][2];
            if (v54 != 33 && v54 != 61) {
              goto LABEL_818;
            }
          }
        }
        else if (v52 != 42 || (*(unsigned char *)(*(void *)(v4 + 32) + v366[0][1]) & 4) == 0)
        {
          goto LABEL_818;
        }
        goto LABEL_106;
      }
LABEL_818:
      unint64_t v318 = v366[0] - 1;
LABEL_819:
      v366[0] = v318;
      int v320 = 128;
      goto LABEL_811;
    }
LABEL_106:
    int v62 = v365;
    if (v16)
    {
      if (v365 <= 62)
      {
        uint64_t v63 = 2150891520;
        switch(v365)
        {
          case '$':
            goto LABEL_111;
          case '(':
            goto LABEL_160;
          case ')':
            goto LABEL_170;
          case '*':
            goto LABEL_239;
          case '+':
            goto LABEL_114;
          case '.':
            goto LABEL_180;
          default:
            goto LABEL_229;
        }
      }
      if (v365 <= 93)
      {
        if (v365 == 63)
        {
LABEL_114:
          uint64_t v13 = 0;
          int v12 = 0;
          BOOL v10 = 0;
          if (v365 == 63) {
            int v65 = 0x20000;
          }
          else {
            int v65 = 0x10000;
          }
          int v66 = v65 + v16;
          uint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          if (v16 == -2143485952) {
            uint64_t v67 = 0x3FFFFFFFFFFFFFFDLL;
          }
          v6[v67] = v66;
          uint64_t v16 = 0;
          goto LABEL_30;
        }
        goto LABEL_122;
      }
      goto LABEL_131;
    }
    if (v365 > 62)
    {
      if (v365 <= 93)
      {
        if (v365 != 63)
        {
LABEL_122:
          if (v365 != 91)
          {
            if (v365 != 92) {
              goto LABEL_229;
            }
            unsigned int v323 = v15;
            unint64_t v68 = v366[0];
            unint64_t v358 = v366[0];
            unsigned int v335 = v17;
            unsigned int v69 = _pcre2_check_escape_8(v366, (unint64_t)v8, &v365, (int *)&v362 + 1, v17, *(_DWORD *)(*(void *)v4 + 64), 0, v4);
            if (!HIDWORD(v362))
            {
              unsigned int v70 = v69;
              uint64_t v15 = v323;
              uint64_t v17 = v335;
              goto LABEL_440;
            }
            while (1)
            {
              uint64_t v15 = v323;
              if ((v348 & 2) == 0) {
                goto LABEL_812;
              }
              v366[0] = v68;
              if (v68 >= v8)
              {
                unsigned int v70 = 0;
                int v365 = 92;
                uint64_t v17 = v335;
              }
              else
              {
                unsigned int v70 = 0;
                v366[0] = v68 + 1;
                unsigned int v71 = *v68;
                int v365 = v71;
                uint64_t v17 = v335;
                if (v353 && v71 >= 0xC0)
                {
                  if ((v71 & 0x20) == 0)
                  {
                    unsigned int v70 = 0;
                    v366[0] = v68 + 2;
                    int v365 = v68[1] & 0x3F | ((v71 & 0x1F) << 6);
                    goto LABEL_440;
                  }
                  int v182 = v68[1] & 0x3F;
                  if ((v71 & 0x10) != 0)
                  {
                    if ((v71 & 8) != 0)
                    {
                      int v201 = v68[2] & 0x3F;
                      int v202 = v68[3] & 0x3F;
                      int v203 = v68[4] & 0x3F;
                      unsigned int v70 = 0;
                      if ((v71 & 4) == 0)
                      {
                        int v365 = ((v71 & 3) << 24) | (v182 << 18) | (v201 << 12) | (v202 << 6) | v203;
                        v366[0] = v68 + 5;
                        goto LABEL_440;
                      }
                      int v365 = ((v71 & 1) << 30) | (v182 << 24) | (v201 << 18) | (v202 << 12) | (v203 << 6) | v68[5] & 0x3F;
                      int v183 = v68 + 6;
                    }
                    else
                    {
                      unsigned int v70 = 0;
                      int v365 = ((v71 & 7) << 18) | (v182 << 12) | ((v68[2] & 0x3F) << 6) | v68[3] & 0x3F;
                      int v183 = v68 + 4;
                    }
                  }
                  else
                  {
                    unsigned int v70 = 0;
                    int v365 = ((v71 & 0xF) << 12) | (v182 << 6) | v68[2] & 0x3F;
                    int v183 = v68 + 3;
                  }
                  v366[0] = v183;
                }
              }
LABEL_440:
              if (!v70)
              {
                uint64_t v16 = 0;
                uint64_t v13 = 0;
                int v12 = 0;
                int v204 = v365;
LABEL_446:
                *v6++ = v204;
                BOOL v10 = 1;
                goto LABEL_30;
              }
              if ((v70 & 0x80000000) != 0)
              {
                unsigned int v205 = &v366[0][~*(void *)(v4 + 56)];
                *uint64_t v6 = -v70 | 0x80030000;
                if (v70 >= 0xFFFFFFF7)
                {
                  uint64_t v206 = v4 + 8 * -v70;
                  uint64_t v208 = *(void *)(v206 + 88);
                  int v207 = (unsigned __int8 **)(v206 + 88);
                  uint64_t v16 = 0;
                  uint64_t v13 = 0;
                  int v12 = 0;
                  if (v208 == -1) {
                    *int v207 = v205;
                  }
                  BOOL v10 = 1;
                  ++v6;
                  goto LABEL_30;
                }
                uint64_t v16 = 0;
                uint64_t v13 = 0;
                int v12 = 0;
                *(void *)(v6 + 1) = __ROR8__(v205, 32);
                goto LABEL_451;
              }
              switch(v70)
              {
                case 6u:
                case 7u:
                case 8u:
                case 9u:
                case 0xAu:
                case 0xBu:
                  if ((v17 & 0x20000) == 0) {
                    goto LABEL_444;
                  }
                  if (v70 - 7 > 4) {
                    int v209 = -2145910769;
                  }
                  else {
                    int v209 = dword_20D60D364[v70 - 7];
                  }
                  uint64_t v16 = 0;
                  *uint64_t v6 = v209;
                  BOOL v10 = 1;
                  if (v70 > 0xB) {
                    goto LABEL_579;
                  }
                  int v217 = 1 << v70;
                  if (((1 << v70) & 0xC0) != 0)
                  {
                    uint64_t v16 = 0;
                    uint64_t v13 = 0;
                    int v12 = 0;
                    int v218 = 196621;
                  }
                  else if ((v217 & 0x300) != 0)
                  {
                    uint64_t v16 = 0;
                    uint64_t v13 = 0;
                    int v12 = 0;
                    int v218 = 393216;
                  }
                  else
                  {
                    if ((v217 & 0xC00) == 0)
                    {
LABEL_579:
                      ++v6;
                      uint64_t v13 = 0;
                      int v12 = 0;
                      goto LABEL_30;
                    }
                    uint64_t v16 = 0;
                    uint64_t v13 = 0;
                    int v12 = 0;
                    int v218 = 0x80000;
                  }
                  v6[1] = v218;
                  v6 += 2;
                  goto LABEL_30;
                case 0xCu:
                case 0x11u:
                case 0x12u:
                case 0x13u:
                case 0x14u:
                case 0x15u:
                case 0x16u:
LABEL_444:
                  uint64_t v16 = 0;
                  uint64_t v13 = 0;
                  int v12 = 0;
                  int v62 = v70 - 2145910784;
                  goto LABEL_230;
                case 0xEu:
                  if ((v17 & 0x100000) == 0)
                  {
                    uint64_t v16 = 0;
                    uint64_t v13 = 0;
                    int v12 = 0;
                    int v204 = -2145910770;
                    goto LABEL_446;
                  }
                  int v219 = 183;
                  goto LABEL_668;
                case 0xFu:
                case 0x10u:
                  LODWORD(v355) = 0;
                  int v356 = 0;
                  if (!get_ucp((unint64_t *)v366, &v355, (_WORD *)&v356 + 1, &v356, (_DWORD *)&v362 + 1, v4))continue; {
                  uint64_t v16 = 0;
                  }
                  uint64_t v13 = 0;
                  int v12 = 0;
                  if (v70 == 15) {
                    int v210 = 16;
                  }
                  else {
                    int v210 = 15;
                  }
                  if (v355) {
                    unsigned int v211 = v210;
                  }
                  else {
                    unsigned int v211 = v70;
                  }
                  int v212 = (unsigned __int16)v356 | (HIWORD(v356) << 16);
                  *uint64_t v6 = v211 - 2145910784;
                  v6[1] = v212;
                  v6 += 2;
                  goto LABEL_464;
                case 0x1Bu:
                case 0x1Cu:
                  if (v366[0] >= v8 || (int v213 = *v366[0], v213 != 39) && v213 != 60 && v213 != 123)
                  {
                    if (v70 == 27) {
                      int v219 = 157;
                    }
                    else {
                      int v219 = 169;
                    }
                    goto LABEL_668;
                  }
                  if (v213 == 39) {
                    int v214 = 39;
                  }
                  else {
                    int v214 = 125;
                  }
                  if (v213 == 60) {
                    int v215 = 62;
                  }
                  else {
                    int v215 = v214;
                  }
                  BOOL v216 = v213 == 39 || v213 == 60;
                  if (v70 != 27 || !v216) {
                    goto LABEL_682;
                  }
                  uint64_t v355 = v366[0] + 1;
                  if (read_number(&v355, (unint64_t)v8, *(_DWORD *)(v4 + 212), 0xFFFFu, 161, (int *)&v362, (int *)&v362 + 1))
                  {
                    unsigned int v95 = v355;
                    if (v355 < v8 && v215 == *v355)
                    {
                      int v94 = v362;
                      uint64_t v15 = v323;
                      uint64_t v17 = v335;
                      goto LABEL_169;
                    }
                    int v219 = 157;
LABEL_668:
                    HIDWORD(v362) = v219;
                  }
                  else if (!HIDWORD(v362))
                  {
LABEL_682:
                    if (read_name(v366, (unint64_t)v8, v344, v215, &v357, &v361, &v364, (int *)&v362 + 1, v4))
                    {
                      uint64_t v16 = 0;
                      uint64_t v13 = 0;
                      int v12 = 0;
                      if (v215 == 125 || v70 == 28) {
                        int v282 = -2147221504;
                      }
                      else {
                        int v282 = -2145320960;
                      }
                      *uint64_t v6 = v282;
                      v6[1] = v364;
                      *((void *)v6 + 1) = __ROR8__(v357, 32);
                      v6 += 4;
LABEL_464:
                      BOOL v10 = 1;
                      uint64_t v15 = v323;
                      uint64_t v17 = v335;
                      goto LABEL_30;
                    }
                  }
                  break;
                default:
                  uint64_t v16 = 0;
                  uint64_t v13 = 0;
                  int v12 = 0;
                  BOOL v10 = 0;
                  int v64 = v70 - 2145910784;
                  goto LABEL_226;
              }
            }
          }
          int v101 = v366[0];
          if (v8 - v366[0] >= 6)
          {
            uint64_t v102 = v14;
            uint64_t v103 = v17;
            uint64_t v104 = v15;
            if (!_pcre2_strncmp_8(v366[0], "[:<:]]", 6)
              || !_pcre2_strncmp_8(v366[0], "[:>:]]", 6))
            {
              *uint64_t v6 = -2145910779;
              int v178 = v6 + 2;
              uint64_t v179 = v366[0];
              if (v366[0][2] == 60)
              {
                v6[1] = -2145189888;
              }
              else
              {
                v6[1] = -2145058816;
                *a3 = 1;
                int v178 = v6 + 4;
                *((void *)v6 + 1) = 0;
              }
              uint64_t v15 = v104;
              uint64_t v17 = v103;
              uint64_t v14 = v102;
              if ((v17 & 0x20000) != 0)
              {
                int v180 = v178 + 2;
                v178[1] = 0x80000;
                int v181 = -2145910768;
              }
              else
              {
                int v180 = v178 + 1;
                int v181 = -2145910773;
              }
              uint64_t v16 = 0;
              uint64_t v13 = 0;
              int v12 = 0;
              *int v178 = v181;
              *int v180 = -2145845248;
              uint64_t v6 = v180 + 1;
              v366[0] = v179 + 6;
              goto LABEL_231;
            }
            int v101 = v366[0];
            uint64_t v15 = v104;
            uint64_t v17 = v103;
            uint64_t v14 = v102;
          }
          if (v101 < v8)
          {
            unsigned int v105 = *v101;
            if (v105 <= 0x3D && ((1 << v105) & 0x2400400000000000) != 0)
            {
              uint64_t v106 = v11;
              uint64_t v107 = v17;
              uint64_t v108 = v15;
              int v109 = check_posix_syntax(v101, (uint64_t)v8, &v358);
              int v101 = v366[0];
              if (v109)
              {
                --v366[0];
                if (*v101 == 58) {
                  int v320 = 112;
                }
                else {
                  int v320 = 113;
                }
LABEL_811:
                HIDWORD(v362) = v320;
LABEL_812:
                *(void *)(v4 + 168) = &v366[0][-*(void *)(v4 + 56)];
                return HIDWORD(v362);
              }
              uint64_t v15 = v108;
              uint64_t v17 = v107;
              uint64_t v11 = v106;
            }
          }
          if (v101 < v8)
          {
            int v110 = 0;
            while (1)
            {
              v366[0] = v101 + 1;
              unsigned int v111 = *v101;
              if (v353 && v111 >= 0xC0)
              {
                if ((v111 & 0x20) != 0)
                {
                  int v113 = v101[1] & 0x3F;
                  if ((v111 & 0x10) != 0)
                  {
                    if ((v111 & 8) != 0)
                    {
                      int v114 = v101[2] & 0x3F;
                      int v115 = v101[3] & 0x3F;
                      int v116 = v101[4] & 0x3F;
                      if ((v111 & 4) != 0)
                      {
                        unsigned int v111 = ((v111 & 1) << 30) | (v113 << 24) | (v114 << 18) | (v115 << 12) | (v116 << 6) | v101[5] & 0x3F;
                        v101 += 6;
                      }
                      else
                      {
                        unsigned int v111 = ((v111 & 3) << 24) | (v113 << 18) | (v114 << 12) | (v115 << 6) | v116;
                        v101 += 5;
                      }
                    }
                    else
                    {
                      unsigned int v111 = ((v111 & 7) << 18) | (v113 << 12) | ((v101[2] & 0x3F) << 6) | v101[3] & 0x3F;
                      v101 += 4;
                    }
                  }
                  else
                  {
                    unsigned int v111 = ((v111 & 0xF) << 12) | (v113 << 6) | v101[2] & 0x3F;
                    v101 += 3;
                  }
                  v366[0] = v101;
                }
                else
                {
                  v366[0] = v101 + 2;
                  int v112 = v101[1] & 0x3F | ((v111 & 0x1F) << 6);
                  v101 += 2;
                  unsigned int v111 = v112;
                }
              }
              else
              {
                ++v101;
              }
              if (v111 == 92)
              {
                int v365 = 92;
                if (v101 < v8 && *v101 == 69)
                {
                  v366[0] = ++v101;
                  unsigned int v111 = 92;
                }
                else
                {
                  if (v8 - v101 < 3) {
                    goto LABEL_255;
                  }
                  uint64_t v118 = v14;
                  uint64_t v119 = v17;
                  uint64_t v120 = v15;
                  if (_pcre2_strncmp_8(v101, "Q\\E", 3))
                  {
                    unsigned int v111 = v365;
                    uint64_t v15 = v120;
                    uint64_t v17 = v119;
                    uint64_t v14 = v118;
                    goto LABEL_253;
                  }
                  int v101 = v366[0] + 3;
                  v366[0] += 3;
                  unsigned int v111 = 92;
                  uint64_t v15 = v120;
                  uint64_t v17 = v119;
                  uint64_t v14 = v118;
                }
              }
              else if ((v17 & 0x1000000) == 0 || (v111 != 32 ? (BOOL v117 = v111 == 9) : (BOOL v117 = 1), !v117))
              {
                int v365 = v111;
                if (v110 || v111 != 94) {
                  goto LABEL_253;
                }
                int v110 = 1;
              }
              if (v101 >= v8) {
                goto LABEL_252;
              }
            }
          }
          int v110 = 0;
          unsigned int v111 = 91;
LABEL_252:
          int v365 = v111;
LABEL_253:
          if (v111 != 93 || (*(unsigned char *)(v4 + 204) & 1) == 0)
          {
LABEL_255:
            unsigned int v125 = 0;
            int v126 = 0;
            if (v110) {
              int v127 = -2146566144;
            }
            else {
              int v127 = -2146828288;
            }
            *uint64_t v6 = v127;
            long long v128 = v6 + 1;
            unsigned int v337 = v17;
            while (!v126)
            {
              if ((v17 & 0x1000000) != 0 && (v365 == 9 || v365 == 32))
              {
                int v126 = 0;
                goto LABEL_333;
              }
              if (v365 == 91)
              {
                if (v8 - v366[0] >= 3)
                {
                  uint64_t v129 = v14;
                  unsigned int v130 = *v366[0];
                  BOOL v299 = v130 > 0x3D;
                  uint64_t v131 = (1 << v130) & 0x2400400000000000;
                  if (!v299 && v131 != 0)
                  {
                    uint64_t v133 = v15;
                    if (check_posix_syntax(v366[0], (uint64_t)v8, &v358))
                    {
                      if (v125 == 1) {
                        goto LABEL_829;
                      }
                      uint64_t v134 = v366[0];
                      if (*v366[0] != 58)
                      {
                        int v319 = 113;
                        goto LABEL_826;
                      }
                      unsigned int v135 = ++v366[0];
                      int v136 = v134[1];
                      if (v136 == 94)
                      {
                        unsigned int v135 = v134 + 2;
                        v366[0] = v134 + 2;
                      }
                      int v137 = v358;
                      int v138 = check_posix_name(v135, (int)v358 - (int)v135);
                      if (v138 < 0)
                      {
                        int v320 = 130;
                        goto LABEL_811;
                      }
                      v366[0] = v137 + 2;
                      if (v137 + 2 < v345 && v137[2] == 45 && v137[3] != 93)
                      {
LABEL_829:
                        int v320 = 150;
                        goto LABEL_811;
                      }
                      uint64_t v15 = v133;
                      uint64_t v17 = v337;
                      uint64_t v14 = v129;
                      if ((v337 & 0x20000) == 0) {
                        goto LABEL_320;
                      }
                      if ((0xBFFFAFFuLL >> (2 * v138)))
                      {
                        unsigned int v125 = 0;
                        int v126 = 0;
                        int v151 = posix_substitutes[(2 * v138) | 1];
                        int v152 = posix_substitutes[2 * v138];
                        if (v136 == 94) {
                          int v153 = -2145910769;
                        }
                        else {
                          int v153 = -2145910768;
                        }
                        *long long v128 = v153;
                        v128[1] = v151 | (v152 << 16);
                      }
                      else
                      {
                        if (((0xAAA2280uLL >> ((2 * v138) | 1u)) & 1) == 0)
                        {
                          unsigned int v125 = 0;
                          int v126 = 0;
                          if (v136 == 94) {
                            int v139 = -2145910766;
                          }
                          else {
                            int v139 = -2145910765;
                          }
                          *v128++ = v139;
                          goto LABEL_333;
                        }
LABEL_320:
                        unsigned int v125 = 0;
                        int v126 = 0;
                        if (v136 == 94) {
                          int v149 = -2145583104;
                        }
                        else {
                          int v149 = -2145648640;
                        }
                        *long long v128 = v149;
                        v128[1] = v138;
                      }
                      v128 += 2;
                      goto LABEL_333;
                    }
                    int v140 = 0;
                    int v141 = 3;
                    uint64_t v15 = v133;
                    uint64_t v17 = v337;
                    goto LABEL_291;
                  }
                  goto LABEL_290;
                }
LABEL_289:
                uint64_t v129 = v14;
LABEL_290:
                int v140 = 0;
                int v141 = 3;
                goto LABEL_291;
              }
              if (v365 == 45 && v125 >= 2)
              {
                int v126 = 0;
                if (v125 == 3) {
                  int v148 = -2145452032;
                }
                else {
                  int v148 = -2145517568;
                }
                *v128++ = v148;
                unsigned int v125 = 1;
                goto LABEL_333;
              }
              uint64_t v129 = v14;
              if (v365 != 92) {
                goto LABEL_290;
              }
              unsigned int v324 = v15;
              int v145 = v366[0];
              unint64_t v358 = v366[0];
              int v146 = _pcre2_check_escape_8(v366, (unint64_t)v8, &v365, (int *)&v362 + 1, v17, *(_DWORD *)(*(void *)v4 + 64), 1, v4);
              if (!HIDWORD(v362))
              {
                int v150 = v146;
                if (v146 > 16)
                {
                  uint64_t v15 = v324;
                  uint64_t v17 = v337;
                  uint64_t v14 = v129;
                  int v126 = 0;
                  switch(v146)
                  {
                    case 17:
                    case 22:
                      goto LABEL_839;
                    case 25:
                      goto LABEL_333;
                    case 26:
                      int v126 = 1;
                      goto LABEL_333;
                    default:
                      goto LABEL_355;
                  }
                }
                uint64_t v15 = v324;
                uint64_t v17 = v337;
                if (v146)
                {
                  if (v146 != 5)
                  {
                    uint64_t v14 = v129;
                    if (v146 == 4)
                    {
LABEL_839:
                      int v319 = 107;
                      goto LABEL_826;
                    }
LABEL_355:
                    if (v125 == 1) {
                      goto LABEL_829;
                    }
                    switch(v146)
                    {
                      case 6:
                      case 7:
                      case 8:
                      case 9:
                      case 10:
                      case 11:
                        if ((v17 & 0x20000) == 0) {
                          goto LABEL_358;
                        }
                        if ((v146 - 7) > 4) {
                          int v167 = -2145910769;
                        }
                        else {
                          int v167 = dword_20D60D364[v146 - 7];
                        }
                        *long long v128 = v167;
                        long long v163 = v128 + 1;
                        if (v146 > 0xB) {
                          goto LABEL_385;
                        }
                        int v172 = 1 << v146;
                        if (((1 << v146) & 0xC0) != 0)
                        {
                          long long v163 = v128 + 2;
                          int v173 = 196621;
                        }
                        else
                        {
                          if ((v172 & 0x300) == 0)
                          {
                            uint64_t v15 = v324;
                            uint64_t v17 = v337;
                            uint64_t v14 = v129;
                            if ((v172 & 0xC00) != 0)
                            {
                              long long v163 = v128 + 2;
                              v128[1] = 0x80000;
                            }
                            goto LABEL_386;
                          }
                          long long v163 = v128 + 2;
                          int v173 = 393216;
                        }
                        v128[1] = v173;
LABEL_385:
                        uint64_t v15 = v324;
                        uint64_t v17 = v337;
                        uint64_t v14 = v129;
LABEL_386:
                        if (v366[0] < v345 && *v366[0] == 45 && v366[0][1] != 93) {
                          goto LABEL_829;
                        }
                        unsigned int v125 = 0;
                        int v126 = 0;
                        long long v128 = v163;
                        break;
                      case 12:
                        int v320 = 171;
                        goto LABEL_811;
                      case 15:
                      case 16:
                        LODWORD(v355) = 0;
                        int v356 = 0;
                        if (!get_ucp((unint64_t *)v366, &v355, (_WORD *)&v356 + 1, &v356, (_DWORD *)&v362 + 1, v4))goto LABEL_812; {
                        if (v150 == 15)
                        }
                          int v168 = 16;
                        else {
                          int v168 = 15;
                        }
                        if (v355) {
                          int v169 = v168;
                        }
                        else {
                          int v169 = v150;
                        }
                        int v170 = v169 - 2145910784;
                        int v171 = (unsigned __int16)v356 | (HIWORD(v356) << 16);
                        long long v163 = v128 + 2;
                        *long long v128 = v170;
                        v128[1] = v171;
                        uint64_t v15 = v324;
                        uint64_t v17 = v337;
                        uint64_t v14 = v129;
                        goto LABEL_386;
                      case 18:
                      case 19:
                      case 20:
                      case 21:
LABEL_358:
                        *long long v128 = v146 - 2145910784;
                        long long v163 = v128 + 1;
                        goto LABEL_386;
                      default:
                        goto LABEL_839;
                    }
                    goto LABEL_333;
                  }
                  int v365 = 8;
                }
                goto LABEL_375;
              }
              if ((v348 & 2) == 0) {
                goto LABEL_812;
              }
              v366[0] = v145;
              uint64_t v15 = v324;
              uint64_t v17 = v337;
              if (v145 >= v8)
              {
                int v365 = 92;
                int v140 = 1;
                int v141 = 2;
              }
              else
              {
                v366[0] = v145 + 1;
                unsigned int v147 = *v145;
                int v365 = v147;
                int v140 = 1;
                int v141 = 2;
                if (!v353 || v147 < 0xC0) {
                  goto LABEL_291;
                }
                if ((v147 & 0x20) != 0)
                {
                  int v161 = v145[1] & 0x3F;
                  if ((v147 & 0x10) == 0)
                  {
                    int v365 = ((v147 & 0xF) << 12) | (v161 << 6) | v145[2] & 0x3F;
                    int v162 = v145 + 3;
                    goto LABEL_374;
                  }
                  if ((v147 & 8) == 0)
                  {
                    int v365 = ((v147 & 7) << 18) | (v161 << 12) | ((v145[2] & 0x3F) << 6) | v145[3] & 0x3F;
                    int v162 = v145 + 4;
                    goto LABEL_374;
                  }
                  int v164 = v145[2] & 0x3F;
                  int v165 = v145[3] & 0x3F;
                  int v166 = v145[4] & 0x3F;
                  if ((v147 & 4) != 0)
                  {
                    int v365 = ((v147 & 1) << 30) | (v161 << 24) | (v164 << 18) | (v165 << 12) | (v166 << 6) | v145[5] & 0x3F;
                    int v162 = v145 + 6;
LABEL_374:
                    v366[0] = v162;
                  }
                  else
                  {
                    int v365 = ((v147 & 3) << 24) | (v161 << 18) | (v164 << 12) | (v165 << 6) | v166;
                    v366[0] = v145 + 5;
                  }
LABEL_375:
                  int v140 = 1;
                  int v141 = 2;
                  goto LABEL_291;
                }
                v366[0] = v145 + 2;
                int v365 = v145[1] & 0x3F | ((v147 & 0x1F) << 6);
                int v140 = 1;
              }
LABEL_291:
              int v142 = v365;
              if (v125 != 1)
              {
                *v128++ = v365;
                unsigned int v125 = v141;
                goto LABEL_295;
              }
              unsigned int v143 = *(v128 - 2);
              if (v365 == v143)
              {
                unsigned int v125 = 0;
                --v128;
LABEL_295:
                uint64_t v14 = v129;
                goto LABEL_333;
              }
              if (v143 > v365)
              {
                int v319 = 108;
                goto LABEL_826;
              }
              if (v140)
              {
                uint64_t v14 = v129;
                if (*(v128 - 1) == -2145452032)
                {
                  *(v128 - 1) = -2145517568;
                  int v142 = v365;
                }
              }
              else
              {
                uint64_t v14 = v129;
              }
              unsigned int v125 = 0;
              *v128++ = v142;
LABEL_333:
              int v154 = v366[0];
              if (v366[0] >= v8)
              {
                int v320 = 106;
                goto LABEL_811;
              }
              ++v366[0];
              unsigned int v155 = *v154;
              int v365 = v155;
              if (v353 && v155 >= 0xC0)
              {
                if ((v155 & 0x20) != 0)
                {
                  int v156 = v154[1] & 0x3F;
                  if ((v155 & 0x10) != 0)
                  {
                    if ((v155 & 8) != 0)
                    {
                      int v158 = v154[2] & 0x3F;
                      int v159 = v154[3] & 0x3F;
                      int v160 = v154[4] & 0x3F;
                      if ((v155 & 4) != 0)
                      {
                        unsigned int v155 = ((v155 & 1) << 30) | (v156 << 24) | (v158 << 18) | (v159 << 12) | (v160 << 6) | v154[5] & 0x3F;
                        int v365 = v155;
                        int v157 = v154 + 6;
                      }
                      else
                      {
                        int v157 = v154 + 5;
                        unsigned int v155 = ((v155 & 3) << 24) | (v156 << 18) | (v158 << 12) | (v159 << 6) | v160;
                        int v365 = v155;
                      }
                    }
                    else
                    {
                      unsigned int v155 = ((v155 & 7) << 18) | (v156 << 12) | ((v154[2] & 0x3F) << 6) | v154[3] & 0x3F;
                      int v365 = v155;
                      int v157 = v154 + 4;
                    }
                  }
                  else
                  {
                    unsigned int v155 = ((v155 & 0xF) << 12) | (v156 << 6) | v154[2] & 0x3F;
                    int v365 = v155;
                    int v157 = v154 + 3;
                  }
                  v366[0] = v157;
                }
                else
                {
                  v366[0] = v154 + 2;
                  int v365 = v154[1] & 0x3F | ((v155 & 0x1F) << 6);
                  unsigned int v155 = v365;
                }
              }
              if (!v126 && v155 == 93)
              {
                if (v125 == 1) {
                  *(v128 - 1) = 45;
                }
                uint64_t v16 = 0;
                uint64_t v13 = 0;
                int v12 = 0;
                *long long v128 = -2146631680;
                uint64_t v6 = v128 + 1;
                BOOL v10 = 1;
                goto LABEL_30;
              }
            }
            if (v365 == 92 && v366[0] < v8 && *v366[0] == 69)
            {
              int v126 = 0;
              ++v366[0];
              goto LABEL_333;
            }
            goto LABEL_289;
          }
          uint64_t v16 = 0;
          uint64_t v13 = 0;
          int v12 = 0;
          if (v110) {
            int v62 = -2146697216;
          }
          else {
            int v62 = -2146762752;
          }
LABEL_230:
          *v6++ = v62;
LABEL_231:
          BOOL v10 = 1;
          goto LABEL_30;
        }
        uint64_t v63 = 2151284736;
        goto LABEL_239;
      }
LABEL_131:
      if (v365 == 94)
      {
        uint64_t v16 = 0;
        uint64_t v13 = 0;
        int v12 = 0;
        BOOL v10 = 0;
        int v64 = -2146893824;
        goto LABEL_226;
      }
      if (v365 != 123)
      {
        if (v365 != 124)
        {
LABEL_229:
          uint64_t v16 = 0;
          uint64_t v13 = 0;
          int v12 = 0;
          goto LABEL_230;
        }
        if (v347 && *v347 == (unsigned __int16)v15 && (v347[3] & 1) != 0)
        {
          unsigned int v72 = *(_DWORD *)(v4 + 212);
          if (v72 > v347[2]) {
            v347[2] = v72;
          }
          *(_DWORD *)(v4 + 212) = v347[1];
        }
        uint64_t v16 = 0;
        uint64_t v13 = 0;
        int v12 = 0;
        BOOL v10 = 0;
        int v64 = -2147418112;
LABEL_226:
        *v6++ = v64;
        goto LABEL_30;
      }
      BOOL v121 = v10;
      unsigned int v336 = v17;
      uint64_t v122 = v15;
      if (!read_repeat_counts(v366, (unint64_t)v8, (unsigned int *)&v360 + 1, (unsigned int *)&v360, (int *)&v362 + 1))
      {
        int v12 = HIDWORD(v362);
        if (HIDWORD(v362)) {
          goto LABEL_812;
        }
        uint64_t v15 = v122;
        uint64_t v16 = 0;
        uint64_t v13 = 0;
        *v6++ = 123;
        BOOL v10 = 1;
        uint64_t v17 = v336;
        goto LABEL_30;
      }
      uint64_t v63 = 2151481344;
      uint64_t v15 = v122;
      uint64_t v17 = v336;
      LODWORD(v10) = v121;
LABEL_239:
      if (v10)
      {
        unsigned int v123 = v6 - 1;
        if (*(v6 - 1) == -2144731136)
        {
          while (v123 >= v343)
          {
            v123[1] = *v123;
            --v123;
          }
          *unint64_t v343 = -2145779712;
          v6[1] = -2145845248;
          v6 += 2;
        }
        *uint64_t v6 = v63;
        uint64_t v13 = 0;
        int v12 = 0;
        BOOL v10 = 0;
        if (v365 == 123)
        {
          int v124 = v360;
          v6[1] = HIDWORD(v360);
          v6[2] = v124;
          v6 += 3;
        }
        else
        {
          ++v6;
        }
        uint64_t v16 = v63;
        goto LABEL_30;
      }
      int v319 = 109;
LABEL_826:
      HIDWORD(v362) = v319;
      --v366[0];
      goto LABEL_812;
    }
    uint64_t v63 = 2150891520;
    switch(v365)
    {
      case '$':
LABEL_111:
        uint64_t v16 = 0;
        uint64_t v13 = 0;
        int v12 = 0;
        BOOL v10 = 0;
        int v64 = -2146041856;
        goto LABEL_226;
      case '(':
LABEL_160:
        char v86 = v366[0];
        if (v366[0] >= v8) {
          goto LABEL_809;
        }
        int v87 = *v366[0];
        if (v87 == 42)
        {
          if (v8 - v366[0] < 2) {
            goto LABEL_392;
          }
          uint64_t v174 = v366[0][1];
          int v365 = v174;
          if (v174 == 41) {
            goto LABEL_392;
          }
          int v329 = v13;
          unsigned int v334 = v11;
          unsigned int v338 = v17;
          unsigned int v325 = v15;
          char v184 = *(unsigned char *)(*(void *)(v4 + 32) + v174);
          int v185 = read_name(v366, (unint64_t)v8, v344, 0, &v357, &v361, &v364, (int *)&v362 + 1, v4);
          if ((v184 & 4) == 0)
          {
            uint64_t v11 = v334;
            if (!v185) {
              goto LABEL_812;
            }
            unsigned int v330 = v14;
            if (v366[0] >= v8) {
              goto LABEL_816;
            }
            int v186 = *v366[0];
            if (v186 != 41 && v186 != 58) {
              goto LABEL_816;
            }
            uint64_t v187 = v364;
            int v188 = v361;
            unint64_t v189 = -2;
            uint64_t v190 = &dword_20D60D10C;
            v191 = (unsigned __int8 *)&verbnames;
            while (1)
            {
              int v192 = *(v190 - 1);
              if (v187 == v192)
              {
                int v193 = _pcre2_strncmp_8(v188, v191, v187);
                uint64_t v17 = v338;
                uint64_t v15 = v325;
                if (!v193) {
                  break;
                }
              }
              v190 += 3;
              v191 += (v192 + 1);
              if (++v189 == 7) {
                goto LABEL_816;
              }
            }
            unsigned int v229 = v189 + 2;
            LODWORD(v362) = v189 + 2;
            v230 = v366[0];
            unsigned int v231 = v366[0] + 1;
            BOOL v232 = *v366[0] != 58 || v231 >= v8;
            if (!v232 && *v231 == 41)
            {
              ++v366[0];
              ++v230;
            }
            if (v229 <= 1 && *v230 != 58)
            {
              int v320 = 166;
              goto LABEL_811;
            }
            BOOL v10 = v189 == 0;
            v366[0] = v230 + 1;
            if (*v230 == 58)
            {
              int v233 = *v190 + ((v229 > 1) << 16);
              if (v189 < 3) {
                int v233 = -2144796672;
              }
              int v234 = v351;
              if (v189 < 3) {
                int v234 = *v190;
              }
              int v351 = v234;
              unint64_t v349 = (char *)(v6 + 1);
              v350 = v230 + 1;
              unint64_t v343 = v6;
              *uint64_t v6 = v233;
              v6 += 2;
              uint64_t v11 = 1;
            }
            else
            {
              unint64_t v343 = v6;
              *v6++ = *v190;
            }
            uint64_t v14 = v330;
LABEL_406:
            uint64_t v16 = 0;
            uint64_t v13 = 0;
LABEL_407:
            int v12 = 0;
            goto LABEL_30;
          }
          if (!v185) {
            goto LABEL_812;
          }
          if (v366[0] >= v8 || *v366[0] != 58)
          {
LABEL_828:
            int v320 = 195;
            goto LABEL_811;
          }
          uint64_t v194 = 0;
          uint64_t v195 = v364;
          unsigned int v196 = v361;
          int v197 = &dword_20D60D058;
          int v198 = (unsigned __int8 *)&alasnames;
          while (1)
          {
            int v199 = *(v197 - 1);
            if (v195 == v199)
            {
              int v200 = _pcre2_strncmp_8(v196, v198, v195);
              LODWORD(v15) = v325;
              if (!v200) {
                break;
              }
            }
            v198 += (v199 + 1);
            ++v194;
            v197 += 2;
            if (v194 == 17) {
              goto LABEL_828;
            }
          }
          LODWORD(v362) = v194;
          int v235 = *v197;
          if (v329 >= 1 && (((0xB000uLL >> v194) | (0x1430CuLL >> v194)) & 1) != 0)
          {
            if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(vdupq_n_s32(v194), (int32x4_t)xmmword_20D60CD50), (int8x16_t)xmmword_20D60CD60)) & 0xF) != 0)int v320 = 198; {
            else
            }
              int v320 = 128;
            goto LABEL_811;
          }
          if (v235 <= -2145058817)
          {
            if (v235 <= -2145189889)
            {
              if (v235 == -2147352576)
              {
                int v88 = v366[0];
                LODWORD(v15) = v325;
                uint64_t v17 = v338;
                uint64_t v11 = v334;
LABEL_715:
                uint64_t v16 = 0;
                uint64_t v13 = 0;
                int v12 = 0;
                BOOL v10 = 0;
                *v6++ = -2147352576;
                uint64_t v15 = (v15 + 1);
                int v21 = v88 + 1;
                goto LABEL_20;
              }
              LODWORD(v15) = v325;
              if (v235 != -2145255424) {
                goto LABEL_864;
              }
LABEL_645:
              *uint64_t v6 = -2145255424;
              uint64_t v15 = (v15 + 1);
              ++v366[0];
              if (v194 == 16 || v194 == 14)
              {
                v6[1] = -2147352576;
                if (v347)
                {
                  v347 += 6;
                  if ((unint64_t)v347 >= v341) {
                    goto LABEL_842;
                  }
                }
                else
                {
                  int v347 = *(unsigned __int16 **)(v4 + 40);
                }
                BOOL v10 = 0;
                v6 += 2;
                *int v347 = v15;
                v347[3] = 4;
                uint64_t v17 = v338;
                *((_DWORD *)v347 + 2) = v338 & 0x10424E8;
              }
              else
              {
                BOOL v10 = 0;
                ++v6;
                uint64_t v17 = v338;
              }
              uint64_t v11 = v334;
              goto LABEL_406;
            }
            if (v235 == -2145189888)
            {
              int v88 = v366[0];
              LODWORD(v15) = v325;
              LODWORD(v13) = v329;
              uint64_t v17 = v338;
              uint64_t v11 = v334;
LABEL_717:
              int v285 = -2145189888;
            }
            else
            {
              LODWORD(v15) = v325;
              if (v235 != -2145124352) {
                goto LABEL_864;
              }
              int v88 = v366[0];
              uint64_t v17 = v338;
              LODWORD(v13) = v329;
              uint64_t v11 = v334;
LABEL_697:
              int v285 = -2145124352;
            }
          }
          else
          {
            if (v235 <= -2144927745)
            {
              if (v235 != -2145058816 && v235 != -2144993280)
              {
LABEL_864:
                int v320 = 189;
                goto LABEL_811;
              }
LABEL_692:
              *uint64_t v6 = v235;
              int v88 = v366[0] - 1;
              uint64_t v17 = v338;
              LODWORD(v13) = v329;
              uint64_t v11 = v334;
LABEL_693:
              *a3 = 1;
              uint64_t v283 = (uint64_t)&v88[-*(void *)(v4 + 56) - 2];
              uint64_t v357 = (unsigned __int8 *)v283;
              v6[1] = HIDWORD(v283);
              v6[2] = v283;
              v6 += 3;
              int v284 = v88 + 2;
              goto LABEL_719;
            }
            if (v235 != -2144927744)
            {
              if (v235 != -2144862208)
              {
                if (v235 != -1879113728) {
                  goto LABEL_864;
                }
                goto LABEL_645;
              }
              goto LABEL_692;
            }
            int v88 = v366[0];
            uint64_t v17 = v338;
            LODWORD(v13) = v329;
            uint64_t v11 = v334;
LABEL_713:
            int v285 = -2144927744;
          }
          *v6++ = v285;
          int v284 = v88 + 1;
LABEL_719:
          v366[0] = v284;
          uint64_t v15 = (v15 + 1);
          if ((int)v13 < 1) {
            goto LABEL_392;
          }
          if (v347)
          {
            v291 = v347 + 6;
            if ((unint64_t)(v347 + 6) >= v341)
            {
LABEL_842:
              int v320 = 184;
              goto LABEL_811;
            }
          }
          else
          {
            v291 = *(unsigned __int16 **)(v4 + 40);
          }
          uint64_t v16 = 0;
          uint64_t v13 = 0;
          int v12 = 0;
          BOOL v10 = 0;
          unsigned __int16 *v291 = v15;
          v291[3] = 2;
          int v347 = v291;
          *((_DWORD *)v291 + 2) = v17 & 0x10424E8;
          goto LABEL_30;
        }
        if (v87 != 63)
        {
          uint64_t v15 = (v15 + 1);
          if ((v17 & 0x2000) != 0)
          {
            BOOL v10 = 0;
            unsigned int v177 = -2145779712;
          }
          else
          {
            unsigned int v175 = *(_DWORD *)(v4 + 212);
            if (v175 >= 0xFFFF) {
              goto LABEL_835;
            }
            BOOL v10 = 0;
            unsigned int v176 = v175 + 1;
            *(_DWORD *)(v4 + 212) = v176;
            unsigned int v177 = v176 | 0x80080000;
          }
          *v6++ = v177;
          goto LABEL_406;
        }
        int v88 = ++v366[0];
        if (v86 + 1 >= v8) {
          goto LABEL_809;
        }
        unsigned __int8 v89 = *v88;
        int v90 = -1;
        switch(*v88)
        {
          case '!':
            goto LABEL_697;
          case '&':
            goto LABEL_533;
          case '\'':
            goto LABEL_562;
          case '(':
            v366[0] = v86 + 2;
            if (v86 + 2 >= v8) {
              goto LABEL_809;
            }
            uint64_t v15 = (v15 + 1);
            int v220 = v86[2];
            if (v220 == 63 || v220 == 42)
            {
              uint64_t v16 = 0;
              int v12 = 0;
              BOOL v10 = 0;
              *v6++ = -2146500608;
              v366[0] = v86 + 1;
              uint64_t v13 = 2;
              goto LABEL_30;
            }
            unsigned int v340 = v17;
            unsigned int v327 = v15;
            if (read_number(v366, (unint64_t)v8, *(_DWORD *)(v4 + 212), 0xFFFFu, 161, (int *)&v362, (int *)&v362 + 1))
            {
              if ((int)v362 <= 0)
              {
                int v322 = 115;
                goto LABEL_862;
              }
              *uint64_t v6 = -2146304000;
              v270 = v366[0];
              v271 = &v366[0][-*(void *)(v4 + 56) - 2];
              uint64_t v357 = v271;
              v6[1] = HIDWORD(v271);
              v6[2] = (int)v271;
              void v6[3] = v362;
              goto LABEL_757;
            }
            if (HIDWORD(v362)) {
              goto LABEL_812;
            }
            unint64_t v286 = v366[0];
            if (v8 - v366[0] >= 10)
            {
              int v287 = _pcre2_strncmp_8(v366[0], "VERSION", 7);
              unint64_t v286 = v366[0];
              if (!v287 && v366[0][7] != 41)
              {
                v366[0] += 7;
                int v296 = v286[7];
                if (v296 == 62)
                {
                  int v296 = v286[8];
                  v366[0] = v286 + 8;
                  int v297 = 1;
                  uint64_t v298 = 8;
                }
                else
                {
                  int v297 = 0;
                  uint64_t v298 = 7;
                }
                if (v296 != 61) {
                  goto LABEL_861;
                }
                v301 = &v286[v298 + 1];
                v366[0] = v301;
                if (*v301 - 48 > 9) {
                  goto LABEL_861;
                }
                HIDWORD(v362) = 0;
                if (v301 >= v8) {
                  goto LABEL_812;
                }
                unsigned int v302 = 0;
                v303 = &v286[v298 + 2];
                while (1)
                {
                  v270 = v303 - 1;
                  if (v303 - 1 >= v8)
                  {
                    v366[0] = v303 - 1;
LABEL_861:
                    int v322 = 179;
                    goto LABEL_862;
                  }
                  int v304 = *v270;
                  if ((v304 - 48) > 9) {
                    break;
                  }
                  unsigned int v302 = v304 + 10 * v302 - 48;
                  ++v303;
                  if (v302 >= 0x3E9)
                  {
                    HIDWORD(v362) = 179;
                    v366[0] = v303 - 1;
                    goto LABEL_812;
                  }
                }
                v366[0] = v303 - 1;
                if (*(v303 - 1) == 46)
                {
                  v366[0] = v303;
                  if (v303 >= v8) {
                    goto LABEL_861;
                  }
                  if (*v303 - 48 > 9) {
                    goto LABEL_861;
                  }
                  v270 = v303 + 1;
                  v366[0] = v303 + 1;
                  if (v303 + 1 >= v8) {
                    goto LABEL_861;
                  }
                  int v305 = 10 * *v303;
                  if (*v270 - 48 > 9)
                  {
                    int v306 = v305 - 480;
                  }
                  else
                  {
                    v270 = v303 + 2;
                    v366[0] = v303 + 2;
                    int v306 = v305 + v303[1] - 528;
                  }
                  if (v270 >= v8 || *v270 != 41) {
                    goto LABEL_861;
                  }
                }
                else
                {
                  int v306 = 0;
                }
                *uint64_t v6 = -2146107392;
                v6[1] = v297;
                v6[2] = v302;
                void v6[3] = v306;
LABEL_757:
                v6 += 4;
LABEL_758:
                if (v270 < v8 && *v270 == 41)
                {
                  uint64_t v16 = 0;
                  uint64_t v13 = 0;
                  int v12 = 0;
                  BOOL v10 = 0;
                  v366[0] = v270 + 1;
                  uint64_t v15 = v327;
                  uint64_t v17 = v340;
                  uint64_t v11 = v11;
                  goto LABEL_30;
                }
                int v322 = 124;
LABEL_862:
                HIDWORD(v362) = v322;
                goto LABEL_812;
              }
            }
            int v288 = *v286;
            if (v288 == 82 && v8 - v286 >= 2)
            {
              if (v286[1] == 38)
              {
                v366[0] = v286 + 1;
                if (!read_name(v366, (unint64_t)v8, v344, 0x29u, &v357, &v361, &v364, (int *)&v362 + 1, v4))goto LABEL_812; {
                int v289 = -2146238464;
                }
                goto LABEL_755;
              }
LABEL_733:
              v366[0] = v286 - 1;
              if (!read_name(v366, (unint64_t)v8, v344, 0x29u, &v357, &v361, &v364, (int *)&v362 + 1, v4))goto LABEL_812; {
              uint64_t v293 = v364;
              }
              v294 = v361;
              if (v364 == 6)
              {
                if (!_pcre2_strncmp_8(v361, "DEFINE", 6))
                {
                  *uint64_t v6 = -2146435072;
                  v270 = --v366[0];
                  *(void *)(v6 + 1) = __ROR8__(v357, 32);
                  v6 += 3;
                  goto LABEL_758;
                }
              }
              else if ((int)v364 < 2)
              {
                LODWORD(v295) = 1;
LABEL_748:
                LODWORD(v362) = v295;
                BOOL v299 = *v294 != 82 || (int)v295 < (int)v293;
                if (v299) {
                  int v300 = -458752;
                }
                else {
                  int v300 = -262144;
                }
                int v289 = v300 - 2145910784;
LABEL_755:
                *uint64_t v6 = v289;
                v270 = --v366[0];
LABEL_756:
                v6[1] = v364;
                *((void *)v6 + 1) = __ROR8__(v357, 32);
                goto LABEL_757;
              }
              uint64_t v295 = 1;
              do
              {
                if (v294[v295] - 48 > 9) {
                  goto LABEL_748;
                }
                ++v295;
              }
              while (v293 != v295);
              LODWORD(v295) = v293;
              goto LABEL_748;
            }
            if (v288 == 60)
            {
              unsigned __int8 v292 = 62;
            }
            else
            {
              if (v288 != 39) {
                goto LABEL_733;
              }
              unsigned __int8 v292 = 39;
            }
            if (!read_name(v366, (unint64_t)v8, v344, v292, &v357, &v361, &v364, (int *)&v362 + 1, v4))goto LABEL_812; {
            *uint64_t v6 = -2146369536;
            }
            v270 = v366[0];
            goto LABEL_756;
          case '*':
            goto LABEL_713;
          case '+':
            if (v8 - v88 >= 2 && v86[2] - 48 < 0xA) {
              goto LABEL_508;
            }
            int v320 = 129;
            goto LABEL_811;
          case '-':
            if (v8 - v88 < 2 || v86[2] - 48 >= 0xA) {
              goto LABEL_509;
            }
LABEL_508:
            int v90 = *(_DWORD *)(v4 + 212);
LABEL_165:
            uint64_t v91 = v17;
            uint64_t v92 = v11;
            uint64_t v93 = v15;
            if (!read_number(v366, (unint64_t)v8, v90, 0xFFFFu, 161, (int *)&v362, (int *)&v362 + 1))goto LABEL_812; {
            int v94 = v362;
            }
            if ((v362 & 0x80000000) != 0)
            {
              int v319 = 115;
              goto LABEL_826;
            }
            uint64_t v15 = v93;
            uint64_t v11 = v92;
            unsigned int v95 = v366[0];
            uint64_t v17 = v91;
            if (v366[0] >= v8 || *v366[0] != 41) {
              goto LABEL_809;
            }
LABEL_169:
            uint64_t v16 = 0;
            uint64_t v13 = 0;
            int v12 = 0;
            *uint64_t v6 = v94 | 0x80200000;
            uint64_t v357 = &v95[-*(void *)(v4 + 56)];
            int v96 = (int)v357;
            v366[0] = v95 + 1;
            v6[1] = HIDWORD(v357);
            v6[2] = v96;
LABEL_451:
            v6 += 3;
            goto LABEL_231;
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            goto LABEL_165;
          case '<':
            if (v8 - v88 < 2) {
              goto LABEL_561;
            }
            unsigned int v222 = v86[2];
            unsigned __int8 v89 = 62;
            if (v222 > 0x3D || ((1 << v222) & 0x2000040200000000) == 0) {
              goto LABEL_562;
            }
            if (v222 == 33) {
              int v223 = -2144993280;
            }
            else {
              int v223 = -2144862208;
            }
            if (v222 == 61) {
              int v224 = -2145058816;
            }
            else {
              int v224 = v223;
            }
            *uint64_t v6 = v224;
            goto LABEL_693;
          case '=':
            goto LABEL_717;
          case '>':
            goto LABEL_715;
          case 'C':
            int v88 = v86 + 2;
            v366[0] = v86 + 2;
            if (v86 + 2 >= v8) {
              goto LABEL_809;
            }
            if (v363 && (v17 & 4) != 0 && v363 == v6 - 4)
            {
              if (*(v6 - 1) == 255) {
                unsigned int v225 = v363;
              }
              else {
                unsigned int v225 = v6;
              }
            }
            else
            {
              unsigned int v225 = v6;
            }
            int v363 = v225;
            int v254 = *v88;
            if (v254 == 41 || (v254 - 48) < 0xA)
            {
              int v258 = 0;
              *unsigned int v225 = -2147090432;
              while (v88 < v8 && *v88 - 48 <= 9)
              {
                v366[0] = v88 + 1;
                int v259 = *v88 + 10 * v258;
                int v258 = v259 - 48;
                ++v88;
                if (v259 > 303)
                {
                  int v320 = 138;
                  goto LABEL_811;
                }
              }
              uint64_t v6 = v225 + 4;
              v225[3] = v258;
              goto LABEL_709;
            }
            int v255 = 96;
            uint64_t v256 = 0;
            while (v255 != v254)
            {
              v257 = &_pcre2_callout_start_delims_8[v256++];
              int v255 = v257[1];
              if (!v255) {
                goto LABEL_838;
              }
            }
            LODWORD(v362) = v256;
            int v278 = _pcre2_callout_end_delims_8[v256];
            if (!v278)
            {
LABEL_838:
              int v320 = 182;
              goto LABEL_811;
            }
            *unsigned int v225 = -2147024896;
            unsigned int v279 = v86 + 3;
            v366[0] = v86 + 3;
            int v280 = v86 + 2;
            while (2)
            {
              if (v279 < v8)
              {
                if (v278 != *v279 || (unsigned int v279 = v280 + 2, v366[0] = v280 + 2, v280 + 2 < v8) && v278 == *v279)
                {
                  int v280 = v279++;
                  v366[0] = v279;
                  continue;
                }
                if ((unint64_t)(v279 - v88) >> 32)
                {
                  int v320 = 172;
                  goto LABEL_811;
                }
                v225[3] = v279 - v88;
                v290 = &v88[-*(void *)(v4 + 56)];
                uint64_t v357 = v290;
                uint64_t v6 = v225 + 6;
                v225[4] = HIDWORD(v290);
                v225[5] = (int)v290;
                int v88 = v280 + 2;
LABEL_709:
                if (v88 >= v8 || *v88 != 41)
                {
                  int v320 = 139;
                  goto LABEL_811;
                }
                uint64_t v16 = 0;
                int v12 = 0;
                BOOL v10 = 0;
                v366[0] = v88 + 1;
                *(void *)(v225 + 1) = (v88 + 1 - *(_DWORD *)(v4 + 56));
                uint64_t v14 = 1;
                uint64_t v13 = (v13 - 1);
                goto LABEL_30;
              }
              break;
            }
            int v321 = 181;
            goto LABEL_848;
          case 'P':
            v366[0] = v86 + 2;
            if (v86 + 2 >= v8) {
              goto LABEL_809;
            }
            int v226 = v86[2];
            if (v226 != 60)
            {
              if (v226 == 61)
              {
                uint64_t v272 = v17;
                uint64_t v273 = v15;
                if (!read_name(v366, (unint64_t)v8, v344, 0x29u, &v357, &v361, &v364, (int *)&v362 + 1, v4))goto LABEL_812; {
                uint64_t v15 = v273;
                }
                uint64_t v16 = 0;
                uint64_t v13 = 0;
                int v12 = 0;
                *uint64_t v6 = -2147221504;
                v6[1] = v364;
                *((void *)v6 + 1) = __ROR8__(v357, 32);
                v6 += 4;
                BOOL v10 = 1;
                uint64_t v17 = v272;
              }
              else
              {
                if (v226 != 62)
                {
                  int v320 = 141;
                  goto LABEL_811;
                }
LABEL_533:
                uint64_t v227 = v17;
                uint64_t v228 = v15;
                if (!read_name(v366, (unint64_t)v8, v344, 0x29u, &v357, &v361, &v364, (int *)&v362 + 1, v4))goto LABEL_812; {
                uint64_t v15 = v228;
                }
                uint64_t v16 = 0;
                uint64_t v13 = 0;
                int v12 = 0;
                *uint64_t v6 = -2145320960;
                v6[1] = v364;
                *((void *)v6 + 1) = __ROR8__(v357, 32);
                v6 += 4;
                BOOL v10 = 1;
                uint64_t v17 = v227;
              }
              goto LABEL_30;
            }
LABEL_561:
            unsigned __int8 v89 = 62;
LABEL_562:
            unsigned int v339 = v17;
            int v326 = v15;
            int v236 = read_name(v366, (unint64_t)v8, v344, v89, &v357, &v361, &v364, (int *)&v362 + 1, v4);
            int v237 = v326;
            if (!v236) {
              goto LABEL_812;
            }
            unsigned int v238 = *(_DWORD *)(v4 + 212);
            if (v238 >= 0xFFFF)
            {
LABEL_835:
              int v320 = 197;
              goto LABEL_811;
            }
            unsigned int v239 = v238 + 1;
            *(_DWORD *)(v4 + 212) = v239;
            *v6++ = v239 | 0x80080000;
            unsigned int v240 = *(unsigned __int16 *)(v4 + 176);
            uint64_t v17 = v339;
            if (v240 >> 4 >= 0x271)
            {
              int v320 = 149;
              goto LABEL_811;
            }
            uint64_t v241 = v364;
            if (v364 + 3 > *(unsigned __int16 *)(v4 + 178)) {
              *(_WORD *)(v4 + 178) = v364 + 3;
            }
            if (!v240)
            {
              unsigned int v248 = 0;
              unsigned int v243 = 0;
              __int16 v242 = 0;
LABEL_581:
              uint64_t v15 = (v237 + 1);
              LODWORD(v362) = v243;
              if ((int)v243 >= (int)v248)
              {
                uint64_t v252 = *(unsigned int *)(v4 + 200);
                if (v252 <= v248)
                {
                  uint64_t v274 = v14;
                  uint64_t v275 = v15;
                  BOOL v276 = (void *)(**(uint64_t (***)(uint64_t, void))v4)(32 * v252, *(void *)(*(void *)v4 + 16));
                  if (!v276)
                  {
                    int v320 = 121;
                    goto LABEL_811;
                  }
                  v253 = v276;
                  memcpy(v276, *(const void **)(v4 + 192), 16 * *(unsigned int *)(v4 + 200));
                  if (*(_DWORD *)(v4 + 200) >= 0x15u) {
                    (*(void (**)(void, void))(*(void *)v4 + 8))(*(void *)(v4 + 192), *(void *)(*(void *)v4 + 16));
                  }
                  *(void *)(v4 + 192) = v253;
                  *(_DWORD *)(v4 + 200) = 2 * v252;
                  unsigned int v248 = *(unsigned __int16 *)(v4 + 176);
                  uint64_t v15 = v275;
                  uint64_t v17 = v339;
                  uint64_t v14 = v274;
                }
                else
                {
                  v253 = *(void **)(v4 + 192);
                }
                uint64_t v16 = 0;
                uint64_t v13 = 0;
                int v12 = 0;
                BOOL v10 = 0;
                uint64_t v277 = (uint64_t)v253 + 16 * v248;
                *(void *)uint64_t v277 = v361;
                *(_WORD *)(v277 + 12) = v241;
                *(_DWORD *)(v277 + 8) = *(_DWORD *)(v4 + 212);
                *(_WORD *)(v277 + 14) = v242;
                *(_WORD *)(v4 + 176) = v248 + 1;
              }
              else
              {
                uint64_t v16 = 0;
                uint64_t v13 = 0;
                int v12 = 0;
                BOOL v10 = 0;
              }
              goto LABEL_30;
            }
            unsigned int v331 = v14;
            __int16 v242 = 0;
            unsigned int v243 = 0;
            int v244 = v361;
            uint64_t v245 = *(void *)(v4 + 192) + 8;
            while (v241 == *(unsigned __int16 *)(v245 + 4))
            {
              int v246 = _pcre2_strncmp_8(v244, *(unsigned __int8 **)(v245 - 8), v241);
              uint64_t v17 = v339;
              int v237 = v326;
              int v247 = *(_DWORD *)(v4 + 212);
              if (v246) {
                goto LABEL_575;
              }
              if (*(_DWORD *)v245 == v247)
              {
                unsigned int v248 = *(unsigned __int16 *)(v4 + 176);
LABEL_577:
                uint64_t v14 = v331;
                goto LABEL_581;
              }
              if ((v339 & 0x40) == 0)
              {
                int v320 = 143;
                goto LABEL_811;
              }
              __int16 v242 = 1;
              *(_WORD *)(v245 + 6) = 1;
              *(_DWORD *)(v4 + 296) = 1;
LABEL_576:
              v245 += 16;
              ++v243;
              unsigned int v248 = *(unsigned __int16 *)(v4 + 176);
              if (v243 >= v248) {
                goto LABEL_577;
              }
            }
            int v247 = *(_DWORD *)(v4 + 212);
LABEL_575:
            if (*(_DWORD *)v245 == v247)
            {
              int v320 = 165;
              goto LABEL_811;
            }
            goto LABEL_576;
          case 'R':
            LODWORD(v362) = 0;
            unsigned int v95 = v86 + 2;
            v366[0] = v86 + 2;
            if (v86 + 2 >= v8 || *v95 != 41)
            {
              int v320 = 158;
              goto LABEL_811;
            }
            int v94 = 0;
            goto LABEL_169;
          default:
LABEL_509:
            if (v347)
            {
              unint64_t v221 = v347 + 6;
              if ((unint64_t)(v347 + 6) >= v341) {
                goto LABEL_842;
              }
            }
            else
            {
              unint64_t v221 = *(unsigned __int16 **)(v4 + 40);
            }
            *unint64_t v221 = v15 + 1;
            v221[3] = 0;
            *((_DWORD *)v221 + 2) = v17 & 0x10424E8;
            if (*v88 == 124)
            {
              uint64_t v16 = 0;
              uint64_t v13 = 0;
              int v12 = 0;
              BOOL v10 = 0;
              unsigned __int16 v249 = *(_WORD *)(v4 + 212);
              v221[1] = v249;
              v221[2] = v249;
              int v347 = v221;
              v221[3] = 1;
              *(_DWORD *)(v4 + 208) |= 0x200000u;
              *v6++ = -2145779712;
              v366[0] = v86 + 2;
              uint64_t v15 = (v15 + 1);
              goto LABEL_30;
            }
            *(_DWORD *)(v221 + 1) = 0;
            uint64_t v359 = 0;
            if (*v88 == 94)
            {
              int v250 = 0;
              int v251 = v17 & 0xFEFFDB57;
              int v88 = v86 + 2;
              v366[0] = v86 + 2;
            }
            else
            {
              int v250 = 1;
              int v251 = v17;
            }
            if (v88 >= v8) {
              goto LABEL_809;
            }
            unsigned int v260 = (int *)&v359 + 1;
            break;
        }
        do
        {
          int v261 = *v88;
          char v262 = 1;
          if (v261 == 41 || v261 == 58) {
            goto LABEL_636;
          }
          int v263 = v88 + 1;
          v366[0] = v88 + 1;
          unsigned int v264 = *v88;
          if (v264 <= 0x6C)
          {
            if (*v88 <= 0x54u)
            {
              if (v264 != 45)
              {
                if (v264 != 74) {
                  goto LABEL_846;
                }
                *v260 |= 0x40u;
                *(_DWORD *)(v4 + 208) |= 0x400u;
                goto LABEL_633;
              }
              if (!v250)
              {
                int v321 = 194;
                goto LABEL_848;
              }
              int v250 = 0;
              unsigned int v260 = (int *)&v359;
              goto LABEL_633;
            }
            if (v264 == 85)
            {
              int v265 = *v260 | 0x40000;
            }
            else
            {
              if (v264 != 105) {
                goto LABEL_846;
              }
              int v265 = *v260 | 8;
            }
LABEL_632:
            *unsigned int v260 = v265;
            goto LABEL_633;
          }
          if (*v88 <= 0x72u)
          {
            if (v264 == 109)
            {
              int v265 = *v260 | 0x400;
            }
            else
            {
              if (v264 != 110) {
                goto LABEL_846;
              }
              int v265 = *v260 | 0x2000;
            }
            goto LABEL_632;
          }
          if (v264 == 115)
          {
            int v265 = *v260 | 0x20;
            goto LABEL_632;
          }
          if (v264 != 120)
          {
LABEL_846:
            int v321 = 111;
LABEL_848:
            HIDWORD(v362) = v321;
            v366[0] = v88;
            goto LABEL_812;
          }
          int v266 = *v260;
          *v260 |= 0x80u;
          if (v263 < v8 && *v263 == 120)
          {
            *unsigned int v260 = v266 | 0x1000080;
            v88 += 2;
            v366[0] = v88;
            continue;
          }
LABEL_633:
          int v88 = v263;
        }
        while (v88 < v8);
        char v262 = 0;
LABEL_636:
        int v267 = v359;
        if ((HIDWORD(v359) & 0x1000080) != 0x80 && (v359 & 0x80) == 0)
        {
          if ((v262 & 1) == 0) {
            goto LABEL_809;
          }
        }
        else
        {
          int v267 = v359 | 0x1000000;
          LODWORD(v359) = v359 | 0x1000000;
          if ((v262 & 1) == 0) {
            goto LABEL_809;
          }
        }
        uint64_t v269 = (HIDWORD(v359) | v251) & ~v267;
        v366[0] = v88 + 1;
        if (*v88 == 41)
        {
          if ((unint64_t)v221 > *(void *)(v4 + 40) && *(v221 - 6) == (unsigned __int16)v15) {
            v221 -= 6;
          }
          else {
            *unint64_t v221 = v15;
          }
        }
        else
        {
          *v6++ = -2145779712;
          uint64_t v15 = (v15 + 1);
        }
        int v347 = v221;
        if (v269 == v17)
        {
LABEL_392:
          uint64_t v16 = 0;
          uint64_t v13 = 0;
          int v12 = 0;
          BOOL v10 = 0;
          goto LABEL_30;
        }
        uint64_t v16 = 0;
        uint64_t v13 = 0;
        int v12 = 0;
        BOOL v10 = 0;
        *uint64_t v6 = -2145714176;
        v6[1] = v269;
        v6 += 2;
        uint64_t v17 = v269;
LABEL_30:
        uint64_t v5 = v366[0];
        if (v366[0] < v8) {
          continue;
        }
        LOBYTE(v7) = v348;
        if (v11)
        {
LABEL_816:
          int v320 = 160;
          goto LABEL_811;
        }
LABEL_802:
        __int16 v314 = v15;
        v315 = manage_callouts((int)v5, &v363, v352, v6, v4);
        if ((v7 & 8) != 0)
        {
          int v316 = -2146041856;
LABEL_806:
          _DWORD *v315 = -2145845248;
          v315[1] = v316;
          v315 += 2;
        }
        else if ((v7 & 4) != 0)
        {
          int v316 = -2145910779;
          goto LABEL_806;
        }
        if ((unint64_t)v315 >= v354)
        {
LABEL_810:
          int v320 = 163;
          goto LABEL_811;
        }
        _DWORD *v315 = 0x80000000;
        if (v314)
        {
LABEL_809:
          int v320 = 114;
          goto LABEL_811;
        }
        return 0;
      case ')':
LABEL_170:
        int v97 = v347;
        if (v347 && *v347 == (unsigned __int16)v15)
        {
          int v98 = *((_DWORD *)v347 + 2);
          unsigned __int16 v99 = v347[3];
          if (v99)
          {
            unsigned int v100 = v347[2];
            if (*(_DWORD *)(v4 + 212) < v100) {
              *(_DWORD *)(v4 + 212) = v100;
            }
          }
          BOOL v10 = (v99 & 2) == 0;
          if ((v99 & 4) != 0) {
            *v6++ = -2145845248;
          }
          uint64_t v17 = v98 | v17 & 0xFEFBDB17;
          if (v347 == *(unsigned __int16 **)(v4 + 40)) {
            int v97 = 0;
          }
          else {
            int v97 = v347 - 6;
          }
        }
        else
        {
          BOOL v10 = 1;
        }
        if ((_WORD)v15)
        {
          int v347 = v97;
          uint64_t v16 = 0;
          uint64_t v13 = 0;
          int v12 = 0;
          uint64_t v15 = (v15 - 1);
          *v6++ = -2145845248;
          goto LABEL_30;
        }
        int v319 = 122;
        goto LABEL_826;
      case '*':
        goto LABEL_239;
      case '+':
        uint64_t v63 = 2151088128;
        goto LABEL_239;
      case '.':
LABEL_180:
        uint64_t v16 = 0;
        uint64_t v13 = 0;
        int v12 = 0;
        int v62 = -2145976320;
        goto LABEL_230;
      default:
        goto LABEL_229;
    }
  }
}

uint64_t check_lookbehinds(unsigned int *a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = a1;
  *(void *)(a4 + 168) = -1;
  unsigned int v5 = *a1;
  if (*a1 == 0x80000000) {
    return v4;
  }
  int v9 = 0;
  while ((v5 & 0x80000000) == 0)
  {
LABEL_19:
    unsigned int v11 = a1[1];
    ++a1;
    unsigned int v5 = v11;
    uint64_t v14 = a1;
    if (v11 == 0x80000000) {
      return 0;
    }
  }
  switch(((v5 & 0xFFFF0000) + 2147418112) >> 16)
  {
    case 0u:
    case 2u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x15u:
    case 0x16u:
    case 0x1Du:
    case 0x1Eu:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Du:
    case 0x2Fu:
    case 0x31u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
      goto LABEL_19;
    case 1u:
    case 7u:
    case 0xEu:
    case 0x19u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x26u:
      goto LABEL_6;
    case 3u:
    case 5u:
    case 0x20u:
      a1 += 3;
      goto LABEL_19;
    case 4u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
      ++a1;
      goto LABEL_19;
    case 6u:
      a1 += 5;
      goto LABEL_19;
    case 0xFu:
      a1 += 2;
      goto LABEL_6;
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
      a1 += 3;
LABEL_6:
      ++v9;
      goto LABEL_19;
    case 0x17u:
      unsigned int v10 = v5 + 2145910769 < 2;
      goto LABEL_8;
    case 0x18u:
      if (v9 > 0)
      {
        --v9;
        goto LABEL_19;
      }
      if (!a2) {
        return 0;
      }
      uint64_t v4 = 0;
      *a2 = a1;
      return v4;
    case 0x1Fu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
      a1 += 2;
      goto LABEL_19;
    case 0x24u:
    case 0x25u:
    case 0x27u:
      if (!set_lookbehind_lengths(&v14, (int *)&v13 + 1, &v13, a3, a4)) {
        return HIDWORD(v13);
      }
      a1 = v14;
      goto LABEL_19;
    case 0x28u:
    case 0x2Cu:
    case 0x2Eu:
    case 0x30u:
    case 0x32u:
      unsigned int v10 = a1[1] + 1;
LABEL_8:
      a1 += v10;
      goto LABEL_19;
    default:
      return 170;
  }
}

uint64_t compile_regex(unsigned int a1, unsigned __int8 **a2, unsigned int **a3, int *a4, unsigned int a5, unsigned int *a6, int *a7, unsigned int *a8, int *a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v13 = (void *)a11;
  uint64_t v422 = *MEMORY[0x263EF8340];
  uint64_t v360 = *a2;
  uint64_t v14 = *a3;
  uint64_t v15 = *(unsigned int (**)(void, void))(*(void *)a11 + 24);
  if (v15 && v15(*(unsigned __int16 *)(a11 + 180), *(void *)(*(void *)a11 + 32)))
  {
    uint64_t result = 0;
    int v17 = 133;
LABEL_4:
    *a4 = v17;
    return result;
  }
  uint64_t v18 = a12;
  uint64_t v409 = 0;
  uint64_t v410 = 0;
  uint64_t v407 = a10;
  int v408 = (char *)v360;
  unint64_t v19 = a5 + 6;
  int v20 = *v360;
  if ((v20 - 128) < 2) {
    goto LABEL_8;
  }
  if (v20 == 136)
  {
    unsigned int v21 = 0;
    int v357 = 0;
    int v339 = __rev16(*(unsigned __int16 *)(v360 + 3));
    LOWORD(v410) = v339;
    uint64_t v409 = *(void *)(a11 + 184);
    WORD1(v410) = *(_WORD *)(a11 + 182);
    *(void *)(a11 + 184) = &v409;
  }
  else
  {
    if (v20 == 131)
    {
LABEL_8:
      int v339 = 0;
      unsigned int v21 = *((unsigned __int16 *)v14 - 2);
      v14 += 2;
      int v357 = 1;
      goto LABEL_11;
    }
    unsigned int v21 = 0;
    int v357 = 0;
    int v339 = 0;
  }
LABEL_11:
  unsigned int v340 = 0;
  unsigned int v341 = 0;
  *(_WORD *)(v360 + 1) = 0;
  int v22 = &v360[a5 + 3];
  int v23 = &v416;
  if (!a12) {
    int v23 = 0;
  }
  unsigned int v364 = v23;
  int v342 = -2;
  LODWORD(result) = 1;
  uint64_t v24 = (char *)v360;
  int v25 = -2;
  uint64_t v343 = a5;
  while (2)
  {
    int v26 = v357;
    if (!v21) {
      int v26 = 0;
    }
    unsigned int v346 = result;
    if (v26 == 1)
    {
      *int v22 = 125;
      v22[1] = BYTE1(v21);
      v22[2] = v21;
      v22 += 3;
      v19 += 3;
    }
    unsigned int v392 = 0;
    unsigned int v398 = 0;
    unint64_t v370 = 0;
    unint64_t v363 = 0;
    int v27 = 0;
    BOOL v361 = 0;
    int v376 = 0;
    int v28 = 0;
    int v365 = 0;
    uint64_t v416 = 0;
    unsigned int v417 = v14;
    unint64_t v414 = 0;
    v415 = 0;
    uint64_t v29 = v13[3];
    unsigned int v349 = a1;
    int v350 = (a1 >> 18) & 1;
    int v358 = (a1 >> 3) & 1;
    BOOL v359 = (a1 & 0x40000) == 0;
    int v356 = a1 & 0xA0000;
    uint64_t v362 = v29;
    uint64_t v347 = v29 + 64;
    uint64_t v348 = v29 + 160;
    int v30 = -1;
    int v377 = -2;
    unsigned int v375 = a1;
    int v31 = -2;
    int v368 = -2;
    int v373 = -2;
    i8 = (char *)v22;
    __dst = v22;
    int v378 = (char *)v22;
    int v345 = v25;
    int v344 = v24;
LABEL_19:
    uint64_t v412 = 0;
    uint64_t v413 = 0;
    LODWORD(v33) = *v14;
    unsigned int v34 = *v14 & 0xFFFF0000;
    if (v18)
    {
      unint64_t v35 = v13[5] + v13[10];
      if ((unint64_t)i8 > v35 - 100)
      {
        if ((unint64_t)i8 >= v35) {
          int v331 = 152;
        }
        else {
          int v331 = 186;
        }
        goto LABEL_818;
      }
      if (i8 < v378) {
        i8 = v378;
      }
      unsigned int v36 = v34 + 2143354879;
      if (v34 + 2143354879 > 0xFFF4FFFE)
      {
        int v378 = i8;
      }
      else
      {
        if (2147483627 - v19 < i8 - (char *)__dst) {
          goto LABEL_814;
        }
        v19 += i8 - (char *)__dst;
        i8 = (char *)__dst;
        int v378 = (char *)__dst;
        if (v19 > 0x10000) {
          goto LABEL_814;
        }
      }
    }
    else
    {
      unsigned int v36 = v34 + 2143354879;
    }
    unsigned int v379 = *v14 & 0xFFFF0000;
    int v385 = v31;
    if (v376) {
      BOOL v37 = 1;
    }
    else {
      BOOL v37 = v28 == 0;
    }
    if (v37) {
      int v38 = v30;
    }
    else {
      int v38 = 1;
    }
    if (v36 < 0xFFF4FFFF) {
      int v27 = i8;
    }
    unint64_t v403 = v27;
    unint64_t v406 = v19;
    if (v36 < 0xFFF4FFFF) {
      int v30 = v38;
    }
    int v391 = v30;
    uint64_t v39 = 0;
    int v40 = 0;
    int v41 = 0;
    unsigned int v42 = 0;
    uint64_t v43 = (unsigned __int16)*v14;
    int v44 = 0x10000;
    unsigned int v45 = 138;
    int v46 = 1;
    char v47 = 1;
    switch(WORD1(v33) ^ 0x8000)
    {
      case 0:
      case 1:
      case 0x19:
        if (v30 < 0) {
          uint64_t result = 0xFFFFFFFFLL;
        }
        else {
          uint64_t result = v346;
        }
        uint64_t v18 = a12;
        unint64_t v19 = v406;
        if (a12)
        {
          unsigned int v21 = *v14;
          uint64_t v13 = (void *)a11;
          __int16 v320 = (__int16)v360;
          int v25 = v345;
          uint64_t v24 = v344;
          if ((*v14 & 0xFFFF0000) == 0x80010000)
          {
            int v22 = &(*a2)[v343 + 3];
            unint64_t v19 = v406 + 3;
LABEL_813:
            unsigned int v21 = (unsigned __int16)v21;
            ++v14;
            a1 = v349;
            continue;
          }
        }
        else
        {
          int v321 = v344;
          uint64_t v13 = (void *)a11;
          __int16 v320 = (__int16)v360;
          int v322 = v345;
          if (*v344 == 120)
          {
            int v323 = v342;
            if (v342 != v377 || v340 != v392)
            {
              unsigned int v324 = v341;
              if (v342 >= 0 && v345 < 0) {
                unsigned int v324 = v340;
              }
              unsigned int v341 = v324;
              if (v342 >= 0 && v345 < 0) {
                int v322 = v342;
              }
              int v323 = -1;
            }
            int v342 = v323;
            BOOL v326 = v323 < 0 && v377 >= 0;
            BOOL v327 = v326 && v385 < 0;
            if (v327) {
              int v328 = v377;
            }
            else {
              int v328 = v385;
            }
            if (((v328 ^ v322) & 0xFFFFFFFD) != 0)
            {
              int v25 = -1;
            }
            else
            {
              BOOL v37 = !v327;
              unsigned int v329 = v392;
              if (v37) {
                unsigned int v329 = v398;
              }
              int v330 = v328 | v322;
              if (v341 == v329) {
                int v25 = v330;
              }
              else {
                int v25 = -1;
              }
            }
          }
          else
          {
            unsigned int v340 = v392;
            unsigned int v341 = v398;
            int v342 = v377;
            int v25 = v385;
          }
          if (*((unsigned __int16 *)v14 + 1) << 16 == -2147418112)
          {
            char *i8 = 120;
            i8[1] = (unsigned __int16)((_WORD)i8 - (_WORD)v344) >> 8;
            i8[2] = (_BYTE)i8 - (_BYTE)v344;
            int v408 = i8;
            int v22 = (unsigned __int8 *)(i8 + 3);
            LOWORD(v21) = *(_WORD *)v14;
            uint64_t v24 = i8;
            goto LABEL_813;
          }
          unsigned int v332 = i8 - v344;
          do
          {
            uint64_t v333 = __rev16(*(unsigned __int16 *)(v321 + 1));
            *(_WORD *)(v321 + 1) = bswap32(v332) >> 16;
            v321 -= v333;
            unsigned int v332 = v333;
          }
          while (v333);
        }
        char *i8 = 121;
        i8[1] = (unsigned __int16)((_WORD)i8 - v320) >> 8;
        i8[2] = (_BYTE)i8 - v320;
        if (v339 >= 1) {
          v13[23] = *(void *)v13[23];
        }
        *a2 = (unsigned __int8 *)(i8 + 3);
        *a3 = v14;
        *a6 = v340;
        *a7 = v342;
        *a8 = v341;
        *a9 = v25;
        if (!a12) {
          return result;
        }
        if (2147483627 - *a12 >= v406)
        {
          *a12 += v406;
          return result;
        }
        uint64_t result = 0;
        int v17 = 120;
        goto LABEL_4;
      case 2:
        uint64_t v39 = 0;
        int v41 = 0;
        char v47 = 0;
        unsigned int v45 = 132;
        goto LABEL_202;
      case 3:
        if (v43 > 9)
        {
          unsigned int v216 = v14[2];
          int v215 = v14 + 2;
          unint64_t v113 = v216 | ((unint64_t)*(v215 - 1) << 32);
          unsigned int v417 = v215;
          uint64_t v72 = a11;
        }
        else
        {
          uint64_t v72 = a11;
          unint64_t v113 = *(void *)(a11 + 8 * v43 + 88);
        }
        if (v43 > *(_DWORD *)(v72 + 212)) {
          goto LABEL_825;
        }
        unint64_t v363 = v113;
        goto LABEL_414;
      case 4:
      case 0x21:
        unsigned int v71 = v14[3];
        unsigned int v70 = v14 + 3;
        uint64_t v72 = a11;
        uint64_t v73 = *(void *)(a11 + 192);
        uint64_t v74 = *(v70 - 2);
        unint64_t v75 = v71 | ((unint64_t)*(v70 - 1) << 32);
        unsigned int v417 = v70;
        if (!*(_WORD *)(a11 + 176)) {
          goto LABEL_823;
        }
        int v76 = 0;
        LODWORD(v43) = 0;
        unsigned int v77 = 0;
        unint64_t v363 = v75;
        uint64_t v78 = (unsigned __int8 *)(*(void *)(a11 + 56) + v75);
        uint64_t v79 = (unsigned __int16 *)(v73 + 14);
        do
        {
          if (v74 == *(v79 - 1) && !_pcre2_strncmp_8(v78, *(unsigned __int8 **)(v79 - 7), v74))
          {
            LODWORD(v43) = *(_DWORD *)(v79 - 3);
            if (v379 == -2145320960) {
              goto LABEL_197;
            }
            int v76 = *v79;
            int v80 = 1 << v43;
            if (v43 >= 0x20) {
              int v80 = 1;
            }
            unsigned int v81 = *(_DWORD *)(a11 + 248);
            *(_DWORD *)(a11 + 252) |= v80;
            if (v43 > v81) {
              *(_DWORD *)(a11 + 248) = v43;
            }
          }
          v79 += 8;
          ++v77;
        }
        while (v77 < *(unsigned __int16 *)(a11 + 176));
        unint64_t v75 = v363;
        if (!v43)
        {
LABEL_823:
          *a4 = 115;
          *(void *)(a11 + 168) = v75;
          return 0;
        }
        if (v76)
        {
          LODWORD(v418[0]) = 0;
          unsigned int v411 = 0;
          uint64_t v18 = a12;
          int v27 = v403;
          unint64_t v19 = v406;
          if (!a12 && !find_dupname_details(v78, v74, &v411, (int *)v418, a4, a11)) {
            return 0;
          }
          int v28 = 0;
          int v82 = v377;
          if (v377 == -2) {
            int v82 = -1;
          }
          int v377 = v82;
          if ((v375 & 8) != 0) {
            char v83 = 116;
          }
          else {
            char v83 = 115;
          }
          char *i8 = v83;
          i8[1] = BYTE1(v411);
          i8[2] = v411;
          i8[3] = BYTE1(v418[0]);
          i8[4] = v418[0];
          i8 += 5;
        }
        else
        {
LABEL_414:
          uint64_t v18 = a12;
          unint64_t v19 = v406;
          int v217 = v377;
          BOOL v218 = v377 == -2;
          if (v377 == -2) {
            int v217 = -1;
          }
          int v377 = v217;
          int v219 = v373;
          if (v218) {
            int v219 = -1;
          }
          int v373 = v219;
          if ((v375 & 8) != 0) {
            char v220 = 114;
          }
          else {
            char v220 = 113;
          }
          char *i8 = v220;
          i8[1] = BYTE1(v43);
          i8[2] = v43;
          int v221 = 1 << v43;
          if (v43 >= 0x20) {
            int v221 = 1;
          }
          unsigned int v222 = *(_DWORD *)(v72 + 248);
          i8 += 3;
          *(_DWORD *)(v72 + 252) |= v221;
          int v27 = v403;
          int v28 = 0;
          if (v43 > v222) {
            *(_DWORD *)(v72 + 248) = v43;
          }
        }
        goto LABEL_510;
      case 5:
        LODWORD(v33) = v14[1];
        unsigned int v417 = v14 + 1;
        uint64_t v87 = a11;
        unsigned int v88 = a1;
        goto LABEL_161;
      case 6:
        int v28 = 0;
        char *i8 = 118;
        i8[1] = BYTE1(v417[1]);
        i8[2] = v417[1];
        i8[3] = BYTE1(v417[2]);
        i8[4] = v417[2];
        i8[5] = v417[3];
        v417 += 3;
        i8 += 6;
        goto LABEL_433;
      case 7:
        unsigned int v115 = v14[3];
        uint64_t v18 = a12;
        if (a12)
        {
          int v28 = 0;
          unint64_t v19 = v406 + v115 + 9;
          unsigned int v417 = v14 + 5;
          goto LABEL_233;
        }
        char *i8 = 119;
        i8[1] = BYTE1(v417[1]);
        i8[2] = v417[1];
        i8[3] = BYTE1(v417[2]);
        i8[4] = v417[2];
        uint64_t v233 = v417[5];
        unint64_t v234 = v233 | ((unint64_t)v417[4] << 32);
        v417 += 5;
        unint64_t v19 = v406;
        unint64_t v363 = v234;
        int v235 = (unsigned __int8 *)(*(void *)(a11 + 56) + v234);
        int v236 = *v235;
        int v237 = i8 + 10;
        i8[9] = v236;
        if (v236 == 123) {
          int v236 = 125;
        }
        __int16 v238 = v233 + 1;
        i8[7] = HIBYTE(v238);
        i8[8] = v238;
        unsigned int v239 = v115 - 1;
        if (v115 - 1 < 2)
        {
          int v27 = v403;
        }
        else
        {
          unsigned int v240 = v235 + 1;
          int v27 = v403;
          do
          {
            int v241 = *v240;
            if (v241 == v236 && v240[1] == v236)
            {
              unsigned char *v237 = v236;
              v240 += 2;
              unsigned int v239 = v115 - 2;
            }
            else
            {
              ++v240;
              unsigned char *v237 = v241;
            }
            unsigned int v115 = v239;
            ++v237;
            --v239;
          }
          while (v239 > 1);
        }
        int v28 = 0;
        unsigned char *v237 = 0;
        int v288 = v237 + 1;
        i8[5] = (unsigned __int16)((_WORD)v288 - (_WORD)i8) >> 8;
        i8[6] = (_BYTE)v288 - (_BYTE)i8;
        int v63 = v392;
        unsigned int v64 = v398;
        int v31 = v385;
        i8 = v288;
        goto LABEL_555;
      case 8:
        int v41 = 0;
        char v47 = 0;
        *(_WORD *)(i8 + 3) = bswap32(v33) >> 16;
        *(_DWORD *)(a11 + 216) = v43;
        unsigned int v45 = 136;
        uint64_t v39 = 2;
        goto LABEL_202;
      case 9:
        if ((v375 & 0x400) != 0)
        {
          int v28 = 0;
          int v223 = v377;
          BOOL v224 = v377 == -2;
          if (v377 == -2) {
            int v223 = -1;
          }
          int v377 = v223;
          int v91 = v373;
          if (v224) {
            int v91 = -1;
          }
          int v373 = v91;
          LOBYTE(v91) = 28;
        }
        else
        {
          int v28 = 0;
          LOBYTE(v91) = 27;
        }
        goto LABEL_432;
      case 0xA:
      case 0xE:
        unsigned int v84 = *v14 & 0xFFFF0000;
        int v85 = v34 == -2146566144;
        char v86 = v14 + 1;
        unint64_t v33 = v14[1];
        uint64_t v87 = a11;
        if ((v33 & 0x80000000) != 0) {
          goto LABEL_274;
        }
        unsigned int v36 = v14[2];
        if (v36 == -2146631680)
        {
          unsigned int v417 = v14 + 2;
          unsigned int v88 = a1;
          if (v34 == -2146828288)
          {
LABEL_161:
            int v114 = v358;
LABEL_235:
            int v141 = 0;
            if (v356)
            {
              unint64_t v19 = v406;
              if ((v375 & 8) != 0)
              {
                int v142 = _pcre2_ucd_records_8[12
                                          * _pcre2_ucd_stage2_8[(int)(v33
                                                                    - (v36 & 0xFFFFFF80)
                                                                    + (_pcre2_ucd_stage1_8[(int)v33 / 128] << 7))]
                                          + 3];
                uint64_t v18 = a12;
                if (v142)
                {
                  *(_WORD *)i8 = 2320;
                  i8[2] = v142;
                  i8 += 3;
                  int v143 = v377;
                  BOOL v144 = v377 == -2;
                  if (v377 == -2) {
                    int v143 = -1;
                  }
                  int v377 = v143;
                  int v145 = v373;
                  if (v144) {
                    int v145 = -1;
                  }
                  int v373 = v145;
                  int v28 = 1;
LABEL_233:
                  int v63 = v392;
                  unsigned int v64 = v398;
                  int v31 = v385;
                  goto LABEL_435;
                }
                int v141 = 0;
                if ((v88 & 0x80000) != 0)
                {
LABEL_385:
                  unsigned int v206 = _pcre2_ord2utf_8(v33, (uint64_t)__src);
                  goto LABEL_388;
                }
              }
              else
              {
                uint64_t v18 = a12;
                if ((v88 & 0x80000) != 0) {
                  goto LABEL_385;
                }
              }
            }
            else
            {
              uint64_t v18 = a12;
              unint64_t v19 = v406;
              if ((v88 & 0x80000) != 0) {
                goto LABEL_385;
              }
            }
LABEL_387:
            __src[0] = v33;
            unsigned int v206 = 1;
LABEL_388:
            if ((v375 & 8) != 0) {
              char v207 = 30;
            }
            else {
              char v207 = 29;
            }
            char *i8 = v207;
            uint64_t v208 = i8 + 1;
            memcpy(v208, __src, v206);
            int v209 = __src[0];
            if (__src[0] == 13 || __src[0] == 10) {
              *(_DWORD *)(v87 + 208) |= 0x800u;
            }
            i8 = &v208[v206];
            BOOL v211 = v206 == 1 || v114 == 0;
            if (v377 == -2)
            {
              if (v211)
              {
                if (v206 == 1)
                {
                  int v373 = -1;
                  int v63 = v209;
                  unsigned int v213 = v398;
                  unsigned int v64 = v398;
                  int v377 = v114;
                  int v212 = v385;
                  int v31 = v385;
                }
                else
                {
                  unsigned int v64 = *(i8 - 1);
                  int v31 = *(_DWORD *)(v87 + 280);
                  int v373 = -1;
                  int v63 = v209;
                  int v377 = v114;
LABEL_403:
                  int v212 = v385;
                  unsigned int v213 = v398;
                }
              }
              else
              {
                int v377 = -1;
                unsigned int v213 = v398;
                unsigned int v64 = v398;
                int v31 = -1;
                int v373 = -1;
                int v212 = v385;
                int v63 = v392;
              }
            }
            else
            {
              if (v211)
              {
                unsigned int v64 = *(i8 - 1);
                int v31 = *(_DWORD *)(v87 + 280) | v114;
                int v63 = v392;
                HIDWORD(v370) = v392;
                int v373 = v377;
                goto LABEL_403;
              }
              unsigned int v213 = v398;
              unsigned int v64 = v398;
              int v63 = v392;
              HIDWORD(v370) = v392;
              int v212 = v385;
              int v31 = v385;
              int v373 = v377;
            }
            unsigned int v259 = v375;
            if (v141) {
              unsigned int v259 = v375 & 0xFFFFFFF7;
            }
            unsigned int v375 = v259;
            if (v141) {
              int v114 = 0;
            }
            int v358 = v114;
            int v28 = 1;
            LODWORD(v370) = v213;
            int v368 = v212;
          }
          else
          {
            int v257 = v377;
            if (v377 == -2) {
              int v257 = -1;
            }
            int v377 = v257;
            if (!v356
              || (v375 & 8) == 0
              || (unsigned __int8 v258 = _pcre2_ucd_records_8[12
                                            * _pcre2_ucd_stage2_8[v33 & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8 + ((v33 >> 6) & 0x3FFFFFE)) << 7)]
                                            + 3]) == 0)
            {
              if ((v375 & 8) != 0) {
                char v266 = 32;
              }
              else {
                char v266 = 31;
              }
              char *i8 = v266;
              int v267 = i8 + 1;
              int v27 = v403;
              unint64_t v19 = v406;
              if ((a1 & 0x80000) != 0 && v33 >= 0x80)
              {
                unsigned int v268 = _pcre2_ord2utf_8(v33, (uint64_t)v267);
              }
              else
              {
                *int v267 = v33;
                unsigned int v268 = 1;
              }
              uint64_t v18 = a12;
              int v28 = 1;
              int v63 = v392;
              unsigned int v64 = v398;
              unint64_t v370 = __PAIR64__(v392, v398);
              int v31 = v385;
              int v368 = v385;
              int v373 = v377;
              i8 = &v267[v268];
              goto LABEL_555;
            }
            *(_WORD *)i8 = 2319;
            i8[2] = v258;
            i8 += 3;
            int v28 = 1;
            int v63 = v392;
            unsigned int v64 = v398;
            unint64_t v370 = __PAIR64__(v392, v398);
            int v31 = v385;
            int v368 = v385;
            int v90 = v377;
LABEL_102:
            int v373 = v90;
LABEL_434:
            uint64_t v18 = a12;
            unint64_t v19 = v406;
          }
LABEL_435:
          int v27 = v403;
          goto LABEL_555;
        }
        if (v34 == -2146828288
          && (v36 & 0x80000000) == 0
          && v14[3] == -2146631680
          && !_pcre2_ucd_records_8[12
                                 * _pcre2_ucd_stage2_8[v14[1] & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8
                                                                                            + (((unint64_t)v14[1] >> 6) & 0x3FFFFFE)) << 7)]
                                 + 3])
        {
          int v303 = v356 && v33 >= 0x80
               ? *(_DWORD *)&_pcre2_ucd_records_8[12
                                                * _pcre2_ucd_stage2_8[v14[1] & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8 + (((unint64_t)v14[1] >> 6) & 0x3FFFFFE)) << 7)]
                                                + 4]
               + v14[1]
               : *(unsigned __int8 *)(*(void *)(a11 + 16) + v33);
          if (v33 != v303 && v36 == v303)
          {
            unsigned int v417 = v14 + 3;
            int v114 = v358;
            if ((v375 & 8) == 0) {
              int v114 = 1;
            }
            int v141 = ((v375 & 8) >> 3) ^ 1;
            v375 |= 8u;
            uint64_t v18 = a12;
            unint64_t v19 = v406;
            if ((a1 & 0x80000) != 0) {
              goto LABEL_385;
            }
            goto LABEL_387;
          }
        }
LABEL_274:
        int v151 = (int8x16_t *)(i8 + 4);
        unint64_t v414 = (int8x16_t *)(i8 + 4);
        int8x16_t v420 = 0u;
        int8x16_t v421 = 0u;
        unsigned int v152 = *v86;
        if (*v86 == -2146631680)
        {
          int v153 = 0;
          unsigned int v417 = v14 + 1;
          int v154 = v377;
          if (v377 == -2) {
            int v154 = -1;
          }
          int v377 = v154;
          uint64_t v18 = a12;
          int v27 = v403;
          unint64_t v19 = v406;
LABEL_605:
          if (v153 == v85) {
            char v264 = 110;
          }
          else {
            char v264 = 111;
          }
          char *i8 = v264;
          if (!v18)
          {
            if (v84 == -2146566144)
            {
              int8x16_t v420 = vmvnq_s8(v420);
              int8x16_t v421 = vmvnq_s8(v421);
            }
            int8x16_t v265 = v421;
            *(int8x16_t *)(i8 + 1) = v420;
            *(int8x16_t *)(i8 + 17) = v265;
          }
          i8 += 33;
          goto LABEL_613;
        }
        BOOL v369 = v34 == -2146566144;
        uint64_t v155 = 0;
        int v374 = 0;
        int v153 = 0;
        int v156 = 0;
        int v157 = 0;
        unsigned int v371 = v375 & 0xFFFFFFF7;
        int v158 = i8 + 4;
        uint64_t v18 = a12;
        do
        {
          int v159 = v14;
          uint64_t v160 = v155;
          uint64_t v14 = v86;
          if (v152 == -2147155968)
          {
            unsigned int v152 = v159[2];
            uint64_t v14 = v159 + 2;
LABEL_298:
            if (v152 == 13 || v152 == 10) {
              *(_DWORD *)(a11 + 208) |= 0x800u;
            }
            int v169 = v14[1] | 0x10000;
            if (v169 == -2145452032)
            {
              int v169 = v14 + 8;
              unsigned int v170 = v14[2];
              if (v170 == -2147155968)
              {
                unsigned int v171 = v14[3];
                v14 += 3;
                unsigned int v170 = v171;
              }
              else
              {
                v14 += 2;
              }
              if (v170 == 13 || v170 == 10)
              {
                int v169 = *(_DWORD *)(a11 + 208) | 0x800;
                *(_DWORD *)(a11 + 208) = v169;
              }
              uint64_t v172 = a11;
              *(_DWORD *)(a11 + 264) = v152;
              *(_DWORD *)(a11 + 268) = v170;
              int v173 = v375;
            }
            else
            {
              uint64_t v172 = a11;
              *(_DWORD *)(a11 + 264) = v152;
              *(_DWORD *)(a11 + 268) = v152;
              int v173 = v375;
              unsigned int v170 = v152;
            }
            uint64_t v155 = add_to_class_internal((uint64_t)&v420, (unsigned char **)&v414, v173, v172, v152, v170, v169)
                 + v155;
            goto LABEL_346;
          }
          if (v152 == -2145583104 || v152 == -2145648640)
          {
            int v153 = v152 == -2145583104;
            int v163 = v159[2];
            int v161 = v159 + 2;
            int v162 = v163;
            if (((v163 < 3) & (v375 >> 3)) != 0) {
              int v162 = 0;
            }
            if ((v375 & 0x20000) != 0)
            {
              if ((v162 - 8) <= 2)
              {
                if (v152 == -2145583104) {
                  char v164 = 4;
                }
                else {
                  char v164 = 3;
                }
                unint64_t v414 = (int8x16_t *)(v158 + 1);
                *int v158 = v164;
                if (v162 == 9) {
                  char v165 = 12;
                }
                else {
                  char v165 = 13;
                }
                if (v162 == 8) {
                  char v165 = 11;
                }
                int v166 = (char *)v414;
                unint64_t v414 = (int8x16_t *)((char *)v414 + 1);
                *int v166 = v165;
                int v167 = v414;
                unint64_t v414 = (int8x16_t *)((char *)v414 + 1);
                v167->i8[0] = 0;
LABEL_295:
                int v156 = 1;
                goto LABEL_345;
              }
              BOOL v174 = (a1 & 0x80000) != 0 && v152 == -2145583104;
              v374 |= v174;
            }
            uint64_t v175 = 3 * v162;
            unsigned int v176 = (_OWORD *)(v362 + posix_class_maps[v175]);
            long long v177 = v176[1];
            v418[0] = *v176;
            v418[1] = v177;
            uint64_t v178 = (int)v175 + 1;
            uint64_t v179 = (int)v175 + 2;
            if ((0x2DB6DB6FB6BuLL >> v178))
            {
              uint64_t v180 = posix_class_maps[v178];
              if ((0x2DB6DB6FB6BuLL >> v179))
              {
                uint64_t v189 = 0;
                uint64_t v190 = v362 + v180;
                do
                {
                  v418[v189] = vorrq_s8((int8x16_t)v418[v189], *(int8x16_t *)(v190 + v189 * 16));
                  ++v189;
                }
                while (v189 != 2);
              }
              else
              {
                uint64_t v181 = 0;
                uint64_t v182 = v362 + v180;
                do
                {
                  v418[v181] = vbicq_s8((int8x16_t)v418[v181], *(int8x16_t *)(v182 + v181 * 16));
                  ++v181;
                }
                while (v181 != 2);
              }
            }
            int v191 = posix_class_maps[v179];
            if ((0x12492490494uLL >> v179)) {
              int v191 = -v191;
            }
            if (v191 == 1)
            {
              char v192 = -61;
              int v193 = (char *)v418 + 1;
LABEL_337:
              *v193 &= v192;
            }
            else if (v191 == 2)
            {
              char v192 = 127;
              int v193 = (char *)v418 + 11;
              goto LABEL_337;
            }
            if (v152 == -2145583104)
            {
              for (uint64_t i = 0; i != 2; ++i)
                *(int8x16_t *)((char *)&v420 + i * 16) = vornq_s8(*(int8x16_t *)((char *)&v420 + i * 16), (int8x16_t)v418[i]);
            }
            else
            {
              for (uint64_t j = 0; j != 2; ++j)
                *(int8x16_t *)((char *)&v420 + j * 16) = vorrq_s8(*(int8x16_t *)((char *)&v420 + j * 16), (int8x16_t)v418[j]);
            }
            uint64_t v160 = 1;
LABEL_345:
            uint64_t v14 = v161;
            uint64_t v155 = v160;
            goto LABEL_346;
          }
          if ((v152 & 0x80000000) == 0) {
            goto LABEL_298;
          }
          if ((v152 & 0xFFFF0000) != 0x80180000)
          {
LABEL_824:
            int v331 = 189;
            goto LABEL_818;
          }
          uint64_t v155 = (v155 + 1);
          switch((__int16)v152)
          {
            case 6:
              for (uint64_t k = 0; k != 32; ++k)
              {
                v420.i8[k] |= ~*(unsigned char *)(v347 + k);
                int v153 = 1;
              }
              break;
            case 7:
              for (uint64_t m = 0; m != 32; ++m)
                v420.i8[m] |= *(unsigned char *)(v347 + m);
              break;
            case 8:
              for (uint64_t n = 0; n != 32; ++n)
              {
                v420.i8[n] |= ~*(unsigned char *)(v362 + n);
                int v153 = 1;
              }
              break;
            case 9:
              for (iuint64_t i = 0; ii != 32; ++ii)
                v420.i8[ii] |= *(unsigned char *)(v362 + ii);
              break;
            case 10:
              for (juint64_t j = 0; jj != 32; ++jj)
              {
                v420.i8[jj] |= ~*(unsigned char *)(v348 + jj);
                int v153 = 1;
              }
              break;
            case 11:
              for (kuint64_t k = 0; kk != 32; ++kk)
                v420.i8[kk] |= *(unsigned char *)(v348 + kk);
              break;
            case 15:
            case 16:
              unsigned int v184 = v159[2];
              int v161 = v159 + 2;
              __int8 v183 = v184;
              unsigned int v185 = HIWORD(v184);
              if ((unsigned __int16)v152 == 16) {
                char v186 = 3;
              }
              else {
                char v186 = 4;
              }
              unint64_t v414 = (int8x16_t *)(v158 + 1);
              *int v158 = v186;
              uint64_t v187 = v414;
              unint64_t v414 = (int8x16_t *)((char *)v414 + 1);
              v187->i8[0] = v185;
              int v188 = v414;
              unint64_t v414 = (int8x16_t *)((char *)v414 + 1);
              v188->i8[0] = v183;
              goto LABEL_295;
            case 18:
              int v202 = (int *)&_pcre2_hspace_list_8;
              goto LABEL_374;
            case 19:
              int v203 = (unsigned int *)&_pcre2_hspace_list_8;
              goto LABEL_376;
            case 20:
              int v202 = (int *)&_pcre2_vspace_list_8;
LABEL_374:
              add_not_list_to_class((uint64_t)&v420, (unsigned char **)&v414, v371, a11, v202);
              break;
            case 21:
              int v203 = (unsigned int *)&_pcre2_vspace_list_8;
LABEL_376:
              add_list_to_class((uint64_t)&v420, (unsigned char **)&v414, v371, a11, v203);
              break;
            default:
              break;
          }
LABEL_346:
          int v158 = (char *)v414;
          if (v414 > v151) {
            int v157 = 1;
          }
          if (a12 && v414 > v151)
          {
            v406 += (char *)v414 - (char *)v151;
            unint64_t v414 = (int8x16_t *)(i8 + 4);
            int v157 = 1;
            int v158 = i8 + 4;
          }
          char v86 = v14 + 1;
          unsigned int v152 = v14[1];
        }
        while (v152 != -2146631680);
        unsigned int v417 = v14 + 1;
        int v204 = v377;
        if (v377 == -2) {
          int v204 = -1;
        }
        int v377 = v204;
        if (!v157)
        {
          int v27 = v403;
          unint64_t v19 = v406;
          unsigned int v84 = v379;
LABEL_604:
          int v85 = v369;
          goto LABEL_605;
        }
        int v205 = v156;
        int v27 = v403;
        unsigned int v84 = v379;
        if ((v375 & 0x20000) == 0 && !v205 && v153)
        {
          unint64_t v19 = v406;
          goto LABEL_604;
        }
        unint64_t v19 = v406;
        if (v374)
        {
          unint64_t v414 = (int8x16_t *)(v158 + 1);
          *int v158 = 2;
          if ((a1 & 0x80000) == 0)
          {
            int v158 = (char *)v414;
            goto LABEL_713;
          }
LABEL_712:
          unsigned int v299 = _pcre2_ord2utf_8(0x100u, (uint64_t)v414);
          unint64_t v414 = (int8x16_t *)((char *)v414 + v299);
          int v300 = _pcre2_ord2utf_8(0x10FFFFu, (uint64_t)v414);
          int v158 = &v414->i8[v300];
        }
        else if ((v375 & 0x20000) == 0 && (a1 & 0x80000) != 0 && v153 && v379 != -2146566144)
        {
          unint64_t v414 = (int8x16_t *)(v158 + 1);
          *int v158 = 2;
          goto LABEL_712;
        }
LABEL_713:
        char v301 = v379 == -2146566144;
        unint64_t v414 = (int8x16_t *)(v158 + 1);
        *int v158 = 0;
        char *i8 = 112;
        if (v205) {
          char v301 = (v379 == -2146566144) | 4;
        }
        i8[3] = v301;
        if ((int)v155 < 1)
        {
          i8 = (char *)v414;
        }
        else
        {
          i8[3] = v301 | 2;
          _pcre2_memmove8(i8 + 36, i8 + 4, (char *)v414 - (char *)v151);
          if (v379 == -2146566144 && !v205)
          {
            int8x16_t v420 = vmvnq_s8(v420);
            int8x16_t v421 = vmvnq_s8(v421);
          }
          int8x16_t v302 = v421;
          *int v151 = v420;
          *(int8x16_t *)(i8 + 20) = v302;
          i8 = v414[2].i8;
        }
        *(_WORD *)(v403 + 1) = bswap32(i8 - v403) >> 16;
LABEL_613:
        int v28 = 1;
        int v63 = v392;
        unsigned int v64 = v398;
        unint64_t v370 = __PAIR64__(v392, v398);
        int v31 = v385;
        int v368 = v385;
        int v373 = v377;
LABEL_555:
        uint64_t v14 = ++v417;
        unsigned int v392 = v63;
        unsigned int v398 = v64;
        uint64_t v13 = (void *)a11;
        int v30 = v391;
        goto LABEL_19;
      case 0xB:
      case 0xC:
        if (v34 == -2146697216) {
          char v89 = 13;
        }
        else {
          char v89 = -94;
        }
        *i8++ = v89;
        int v90 = v377;
        if (v377 == -2) {
          int v90 = -1;
        }
        int v28 = 1;
        int v63 = v392;
        unsigned int v64 = v398;
        HIDWORD(v370) = v392;
        int v31 = v385;
        int v377 = v90;
        goto LABEL_102;
      case 0xF:
        goto LABEL_493;
      case 0x10:
        int v46 = 0;
        int v40 = 0;
        int v41 = 0;
        unsigned int v117 = v14[2];
        int v116 = v14 + 2;
        unint64_t v363 = v117 | ((unint64_t)*(v116 - 1) << 32);
        unsigned int v417 = v116;
        i8[3] = -89;
        goto LABEL_492;
      case 0x11:
      case 0x13:
      case 0x14:
        uint64_t v48 = *(void *)(a11 + 192);
        unsigned int v51 = v14[3];
        int v50 = v14 + 3;
        uint64_t v49 = v51;
        uint64_t v53 = *(v50 - 2);
        uint64_t v52 = *(v50 - 1);
        unsigned int v417 = v50;
        uint64_t v54 = *(void *)(a11 + 56);
        unint64_t v363 = v51 | ((unint64_t)v52 << 32);
        uint64_t v55 = (unsigned __int8 *)(v54 + v363);
        unsigned __int16 v56 = *(_WORD *)(a11 + 176);
        if (!v56)
        {
          unsigned int v57 = 0;
          goto LABEL_252;
        }
        unsigned int v57 = 0;
        uint64_t v58 = v48 + 8;
        while (2)
        {
          if (v53 != *(unsigned __int16 *)(v58 + 4)) {
            goto LABEL_45;
          }
          if (_pcre2_strncmp_8(v55, *(unsigned __int8 **)(v58 - 8), v53))
          {
            unsigned __int16 v56 = *(_WORD *)(a11 + 176);
LABEL_45:
            ++v57;
            v58 += 16;
            if (v57 >= v56) {
              goto LABEL_252;
            }
            continue;
          }
          break;
        }
        if (!*(_WORD *)(v58 + 6))
        {
          if (v379 == -2146238464) {
            char v261 = -110;
          }
          else {
            char v261 = -112;
          }
          i8[3] = v261;
          i8[4] = BYTE1(*(_DWORD *)v58);
          i8[5] = *(_DWORD *)v58;
          if (*(_DWORD *)v58 > *(_DWORD *)(a11 + 248)) {
            *(_DWORD *)(a11 + 248) = *(_DWORD *)v58;
          }
          goto LABEL_268;
        }
        unsigned __int16 v56 = *(_WORD *)(a11 + 176);
LABEL_252:
        if (v57 < v56)
        {
          if (v379 == -2146238464) {
            char v147 = -110;
          }
          else {
            char v147 = -112;
          }
          i8[3] = v147;
          LODWORD(v418[0]) = 0;
          unsigned int v411 = 0;
          if (a12 || find_dupname_details(v55, v53, &v411, (int *)v418, a4, a11))
          {
            ++i8[3];
            *((_WORD *)i8 + 2) = bswap32((unsigned __int16)v411) >> 16;
            *((_WORD *)i8 + 3) = bswap32(LOWORD(v418[0])) >> 16;
            uint64_t v39 = 5;
            goto LABEL_269;
          }
          return 0;
        }
        if (v379 != -2146172928) {
          goto LABEL_828;
        }
        if ((int)v53 < 2) {
          goto LABEL_266;
        }
        unsigned int v148 = 0;
        uint64_t v149 = (v52 << 32) + v49 + 1;
        uint64_t v150 = v53 - 1;
        do
        {
          unsigned int v148 = 10 * v148 + *(unsigned __int8 *)(v54 + v149) - 48;
          if (v148 >= 0x10000)
          {
            *a4 = 161;
LABEL_822:
            *(void *)(a11 + 168) = v149;
            return 0;
          }
          ++v149;
          --v150;
        }
        while (v150);
        if (v148 > *(_DWORD *)(a11 + 212))
        {
LABEL_828:
          *a4 = 115;
          uint64_t v149 = v363;
          goto LABEL_822;
        }
        if (!v148) {
LABEL_266:
        }
          LOWORD(v148) = -1;
        i8[3] = -110;
        i8[4] = BYTE1(v148);
        i8[5] = v148;
LABEL_268:
        uint64_t v39 = 3;
LABEL_269:
        int v40 = 0;
        int v41 = 0;
        unsigned int v45 = 138;
        int v46 = 1;
        char v47 = 1;
LABEL_493:
        ++*(_WORD *)(a11 + 180);
        char *i8 = v45;
        uint64_t v416 = 0;
        ++v417;
        v415 = i8;
        int v242 = *(_DWORD *)(a11 + 280);
        int v243 = compile_regex(v375, &v415, &v417, a4, v39, &v413, &v412, (char *)&v413 + 4, (char *)&v412 + 4, &v407, a11, v364);
        if (!v243) {
          return 0;
        }
        --*(_WORD *)(a11 + 180);
        if (v243 > 0) {
          int v28 = v46 & v40;
        }
        else {
          int v28 = 0;
        }
        int v365 = v243;
        if (v41)
        {
          --*(_WORD *)(a11 + 182);
          goto LABEL_507;
        }
        char v244 = v47 ^ 1;
        if (a12) {
          char v244 = 1;
        }
        if (v244)
        {
LABEL_507:
          uint64_t v18 = a12;
          int v27 = v403;
          if (!a12) {
            goto LABEL_516;
          }
LABEL_508:
          if (2147483627 - v406 >= v416 - 6)
          {
            unint64_t v19 = v416 - 6 + v406;
            *(_DWORD *)(i8 + 1) = 7930624;
            i8[5] = 3;
            i8 += 6;
LABEL_510:
            int v63 = v392;
            unsigned int v64 = v398;
            int v31 = v385;
            goto LABEL_555;
          }
LABEL_814:
          int v331 = 120;
          goto LABEL_818;
        }
        int v245 = 1;
        int v246 = i8;
        int v27 = v403;
        do
        {
          v246 += __rev16(*(unsigned __int16 *)(v246 + 1));
          --v245;
        }
        while (*v246 != 121);
        uint64_t v18 = a12;
        if (i8[3] != 167)
        {
          if (-v245 >= 2)
          {
            *(void *)(a11 + 168) = v363;
            int v331 = 127;
            goto LABEL_818;
          }
          if (v245) {
            int v28 = v243 > 0;
          }
          else {
            uint64_t v412 = -1;
          }
          unsigned int v45 = 138;
          if (!a12)
          {
LABEL_516:
            i8 = v415;
            if (v45 < 0x84)
            {
              BOOL v361 = 0;
              BOOL v252 = (v45 == 126 || v45 == 130) && v412 >= 0;
              if (v252 && (int)v412 >= 0) {
                unsigned int v64 = HIDWORD(v413);
              }
              else {
                unsigned int v64 = v398;
              }
              if (v252 && (int)v412 >= 0) {
                int v31 = HIDWORD(v412);
              }
              else {
                int v31 = v385;
              }
              int v63 = v392;
              unint64_t v370 = __PAIR64__(v392, v398);
              int v368 = v385;
              int v373 = v377;
            }
            else
            {
              if (v377 != -2 || v412 == -2)
              {
                int v249 = HIDWORD(v412);
                if ((v412 & 0x80000000) != 0 || (v412 & 0x8000000000000000) == 0)
                {
                  BOOL v361 = 0;
                }
                else
                {
                  BOOL v361 = 0;
                  HIDWORD(v413) = v413;
                  int v249 = v412 | v242;
                  HIDWORD(v412) = v412 | v242;
                }
                unsigned int v247 = v392;
                int v63 = v392;
                int v373 = v377;
              }
              else
              {
                unsigned int v247 = v392;
                if ((int)v412 < 0) {
                  int v63 = v392;
                }
                else {
                  int v63 = v413;
                }
                if ((int)v412 < 0) {
                  int v248 = -1;
                }
                else {
                  int v248 = v412;
                }
                int v377 = v248;
                BOOL v361 = (int)v412 >= 0;
                int v373 = -1;
                int v249 = HIDWORD(v412);
              }
              if (v249 < 0) {
                unsigned int v64 = v398;
              }
              else {
                unsigned int v64 = HIDWORD(v413);
              }
              if (v249 < 0) {
                int v31 = v385;
              }
              else {
                int v31 = v249;
              }
              unint64_t v370 = __PAIR64__(v247, v398);
              int v368 = v385;
            }
            goto LABEL_554;
          }
          goto LABEL_508;
        }
        if (!v245)
        {
          i8[3] = -108;
          i8 = v415;
          int v63 = v392;
          unsigned int v64 = v398;
          int v31 = v385;
LABEL_554:
          unint64_t v19 = v406;
          goto LABEL_555;
        }
        *(void *)(a11 + 168) = v363;
        int v331 = 154;
LABEL_818:
        *a4 = v331;
        return 0;
      case 0x12:
        unsigned int v120 = v14[3];
        uint64_t v119 = v14 + 3;
        unsigned int v118 = v120;
        unint64_t v121 = *(v119 - 1) | ((unint64_t)*(v119 - 2) << 32);
        unsigned int v417 = v119;
        if (v120 <= *(_DWORD *)(a11 + 212))
        {
          if (v118 > *(_DWORD *)(a11 + 248)) {
            *(_DWORD *)(a11 + 248) = v118;
          }
          int v40 = 0;
          int v41 = 0;
          unint64_t v363 = v121 - 2;
          i8[3] = -112;
          i8[4] = BYTE1(v118);
          i8[5] = v118;
          uint64_t v39 = 3;
          goto LABEL_493;
        }
        *a4 = 115;
        *(void *)(a11 + 168) = v121;
        return 0;
      case 0x15:
        unsigned int v122 = v14[2];
        if (v14[1])
        {
          if (v122 < 0xA || v122 == 10 && v14[3] <= 0x24)
          {
            char v123 = -107;
            goto LABEL_491;
          }
        }
        else if (v122 == 10)
        {
          if (v14[3] == 36) {
            char v123 = -107;
          }
          else {
            char v123 = -108;
          }
LABEL_491:
          int v40 = 0;
          int v41 = 0;
          i8[3] = v123;
          v417 += 3;
LABEL_492:
          uint64_t v39 = 1;
          goto LABEL_493;
        }
        char v123 = -108;
        goto LABEL_491;
      case 0x16:
        int v28 = 0;
        if ((v375 & 0x400) != 0) {
          LOBYTE(v91) = 26;
        }
        else {
          LOBYTE(v91) = 25;
        }
        goto LABEL_432;
      case 0x17:
        int v124 = v377;
        if (v377 == -2) {
          int v124 = -1;
        }
        if ((v375 & 0x20) != 0) {
          char v125 = 13;
        }
        else {
          char v125 = 12;
        }
        *i8++ = v125;
        int v28 = 1;
        int v63 = v392;
        unsigned int v64 = v398;
        unint64_t v370 = __PAIR64__(v392, v398);
        int v31 = v385;
        int v368 = v385;
        goto LABEL_200;
      case 0x18:
        int v28 = (v43 - 6) < 0x11;
        int v126 = v377;
        if ((v28 & (v377 == -2)) != 0) {
          int v126 = -1;
        }
        int v377 = v126;
        if ((v43 - 15) <= 1)
        {
          unsigned int v128 = v14[1];
          char v127 = v128;
          unsigned int v417 = v14 + 1;
          unsigned int v129 = HIWORD(v128);
          unint64_t v19 = v406;
          if (v43 != 16 || v129)
          {
            if (v43 == 16) {
              char v260 = 16;
            }
            else {
              char v260 = 15;
            }
            char *i8 = v260;
            i8[1] = v129;
            i8[2] = v127;
            i8 += 3;
          }
          else
          {
            *i8++ = 13;
          }
          int v63 = v392;
          unsigned int v64 = v398;
          unint64_t v370 = __PAIR64__(v392, v398);
          int v31 = v385;
          int v368 = v385;
          int v373 = v377;
          uint64_t v18 = a12;
          goto LABEL_435;
        }
        if (v43 == 14) {
          *(_DWORD *)(a11 + 208) |= 0x400000u;
        }
        int v27 = v403;
        unint64_t v19 = v406;
        if (((v33 & 0xFFFE) == 4 || v43 == 1) && !*(_DWORD *)(a11 + 276)) {
          *(_DWORD *)(a11 + 276) = 1;
        }
        if (v43 == 14 && (a1 & 0x80000) == 0) {
          char v226 = 13;
        }
        else {
          char v226 = v33;
        }
        *i8++ = v226;
        int v63 = v392;
        unsigned int v64 = v398;
        unint64_t v370 = __PAIR64__(v392, v398);
        int v31 = v385;
        int v368 = v385;
        int v373 = v126;
        uint64_t v18 = a12;
        goto LABEL_555;
      case 0x1A:
        uint64_t v39 = 0;
        int v41 = 0;
        char v47 = 0;
        unsigned int v45 = 134;
        goto LABEL_202;
      case 0x1B:
        int v28 = 0;
        unsigned int v349 = v14[1];
        int v350 = (v349 >> 18) & 1;
        unsigned int v417 = v14 + 1;
        int v358 = (v349 >> 3) & 1;
        BOOL v359 = (v349 & 0x40000) == 0;
        unsigned int v375 = v349;
        goto LABEL_433;
      case 0x20:
        unsigned int v131 = v14[2];
        unsigned int v130 = v14 + 2;
        unint64_t v113 = v131 | ((unint64_t)*(v130 - 1) << 32);
        unsigned int v417 = v130;
        uint64_t v72 = a11;
        if (v43 > *(_DWORD *)(a11 + 212))
        {
LABEL_825:
          *(void *)(v72 + 168) = v113;
          int v331 = 115;
          goto LABEL_818;
        }
        unint64_t v363 = v113;
LABEL_197:
        BOOL v361 = 0;
        int v28 = 0;
        char *i8 = 117;
        i8[1] = BYTE1(v43);
        i8[2] = v43;
        i8 += 3;
        int v124 = v377;
        if (v377 == -2) {
          int v124 = -1;
        }
        *(_DWORD *)(v72 + 292) = 1;
        int v63 = v392;
        unsigned int v64 = v398;
        HIDWORD(v370) = v392;
        int v31 = v385;
LABEL_200:
        int v377 = v124;
        int v373 = v124;
        goto LABEL_434;
      case 0x22:
        uint64_t v39 = 0;
        int v41 = 0;
        char v47 = 0;
        unsigned int v45 = 133;
LABEL_202:
        int v40 = 1;
        goto LABEL_493;
      case 0x23:
        int v46 = 0;
        uint64_t v39 = 0;
        char v47 = 0;
        ++*(_WORD *)(a11 + 182);
        unsigned int v45 = 126;
        goto LABEL_249;
      case 0x24:
        if (v14[1] != -2145845248 || v14[2] + 2143354879 > 0xFFF4FFFE)
        {
          int v46 = 0;
          uint64_t v39 = 0;
          char v47 = 0;
          ++*(_WORD *)(a11 + 182);
          unsigned int v45 = 127;
LABEL_249:
          int v40 = 1;
          int v41 = 1;
          goto LABEL_493;
        }
        int v28 = 0;
        *i8++ = -94;
        ++v417;
LABEL_433:
        int v63 = v392;
        unsigned int v64 = v398;
        int v31 = v385;
        goto LABEL_434;
      case 0x25:
        int v46 = 0;
        uint64_t v39 = 0;
        char v47 = 0;
        ++*(_WORD *)(a11 + 182);
        unsigned int v45 = 128;
        goto LABEL_249;
      case 0x26:
        int v46 = 0;
        uint64_t v39 = 0;
        char v47 = 0;
        ++*(_WORD *)(a11 + 182);
        unsigned int v45 = 129;
        goto LABEL_249;
      case 0x27:
        int v46 = 0;
        uint64_t v39 = 0;
        char v47 = 0;
        ++*(_WORD *)(a11 + 182);
        unsigned int v45 = 130;
        goto LABEL_249;
      case 0x28:
        int v46 = 0;
        uint64_t v39 = 0;
        char v47 = 0;
        ++*(_WORD *)(a11 + 182);
        unsigned int v45 = 131;
        goto LABEL_249;
      case 0x29:
      case 0x2D:
        goto LABEL_221;
      case 0x2A:
        *(_DWORD *)(a11 + 284) = 1;
        unsigned int v132 = *(uint64_t **)(a11 + 184);
        if (v132)
        {
          uint64_t v18 = a12;
          int v27 = v403;
          unint64_t v19 = v406;
          do
          {
            if (*((unsigned __int16 *)v132 + 5) < *(unsigned __int16 *)(a11 + 182)) {
              break;
            }
            if (a12)
            {
              v19 += 3;
            }
            else
            {
              char *i8 = -91;
              i8[1] = *((unsigned char *)v132 + 9);
              i8[2] = *((unsigned char *)v132 + 8);
              i8 += 3;
            }
            unsigned int v132 = (uint64_t *)*v132;
          }
          while (v132);
        }
        else
        {
          uint64_t v18 = a12;
          int v27 = v403;
          unint64_t v19 = v406;
        }
        int v28 = 0;
        if (*(_WORD *)(a11 + 182)) {
          char v253 = -92;
        }
        else {
          char v253 = -93;
        }
        *i8++ = v253;
        int v254 = v377;
        if (v377 == -2) {
          int v254 = -1;
        }
        int v377 = v254;
        int v376 = 1;
        goto LABEL_510;
      case 0x2B:
      case 0x2C:
        goto LABEL_104;
      case 0x2E:
      case 0x30:
        *(_DWORD *)(a11 + 288) = 1;
LABEL_104:
        int v28 = 0;
        int v91 = verbops[(v33 + 2144796672) >> 16];
        goto LABEL_432;
      case 0x2F:
      case 0x31:
        *(_DWORD *)(a11 + 288) = 1;
        goto LABEL_221;
      case 0x32:
        int v28 = 0;
        *(_DWORD *)(a11 + 208) |= 0x1000u;
        LOBYTE(v91) = -98;
LABEL_432:
        *i8++ = v91;
        goto LABEL_433;
      case 0x33:
        *(_DWORD *)(a11 + 208) |= 0x1000u;
LABEL_221:
        uint64_t v133 = i8 + 1;
        char *i8 = verbops[(v33 + 2144796672) >> 16];
        uint64_t v134 = i8 + 2;
        int v136 = v417[1];
        int v135 = v136;
        ++v417;
        v415 = v133;
        if (v136 < 1)
        {
          char v137 = 0;
          uint64_t v18 = a12;
          unint64_t v19 = v406;
        }
        else
        {
          char v137 = 0;
          uint64_t v18 = a12;
          unint64_t v19 = v406;
          do
          {
            unsigned int v138 = v417[1];
            ++v417;
            if ((a1 & 0x80000) != 0)
            {
              unsigned int v139 = _pcre2_ord2utf_8(v138, (uint64_t)__src);
            }
            else
            {
              __src[0] = v138;
              unsigned int v139 = 1;
            }
            uint64_t v140 = v139;
            if (a12)
            {
              v19 += v139;
            }
            else
            {
              memcpy(v134, __src, v139);
              v134 += v140;
              v137 += v140;
            }
            --v135;
          }
          while (v135);
          uint64_t v133 = v415;
        }
        int v28 = 0;
        *uint64_t v133 = v137;
        *uint64_t v134 = 0;
        i8 = v134 + 1;
        goto LABEL_233;
      case 0x34:
      case 0x35:
      case 0x36:
        goto LABEL_50;
      case 0x37:
      case 0x38:
      case 0x39:
        unsigned int v42 = 1;
        goto LABEL_50;
      case 0x3A:
      case 0x3B:
      case 0x3C:
        unsigned int v42 = 0;
        int v44 = 1;
        goto LABEL_50;
      case 0x3D:
      case 0x3E:
      case 0x3F:
        int v60 = v14[2];
        uint64_t v59 = v14 + 2;
        int v44 = v60;
        unsigned int v42 = *(v59 - 1);
        unsigned int v417 = v59;
LABEL_50:
        if (v28) {
          BOOL v61 = v42 == 0;
        }
        else {
          BOOL v61 = 1;
        }
        int v28 = !v61;
        BOOL v62 = v44 != v42;
        if (v42) {
          int v63 = v392;
        }
        else {
          int v63 = HIDWORD(v370);
        }
        if (v42) {
          unsigned int v64 = v398;
        }
        else {
          unsigned int v64 = v370;
        }
        int v65 = v377;
        if (!v42) {
          int v65 = v373;
        }
        int v377 = v65;
        if (v42) {
          int v31 = v385;
        }
        else {
          int v31 = v368;
        }
        unsigned int v66 = (v34 + 2144010240) >> 16;
        if (v66 > 0xA) {
          goto LABEL_106;
        }
        int v67 = 1;
        if (((1 << v66) & 0x249) != 0)
        {
          int v69 = 0;
          char v68 = 0;
        }
        else if (((1 << v66) & 0x492) != 0)
        {
          int v67 = 0;
          char v68 = 1;
          int v69 = v359;
        }
        else
        {
LABEL_106:
          int v67 = 0;
          char v68 = 1;
          int v69 = v350;
        }
        uint64_t v92 = v403;
        v415 = v403;
        uint64_t v93 = *v403;
        uint64_t v94 = (v93 - 117);
        if (v94 > 0x2D) {
          goto LABEL_134;
        }
        if (((1 << (v93 - 117)) & 0x2BFE00) != 0)
        {
          if (v44 == 1 && v42 == 1) {
            char v96 = v67;
          }
          else {
            char v96 = 1;
          }
          if (v96)
          {
            int v97 = i8 - v403;
            if (v93 != 138) {
              goto LABEL_120;
            }
            if (v403[3] != 148 || v403[__rev16(*(unsigned __int16 *)(v403 + 1))] == 120)
            {
              LODWORD(v93) = 138;
              goto LABEL_120;
            }
          }
          goto LABEL_148;
        }
        if (v93 == 117)
        {
          if (v44 == 1 && v42 == 1) {
            int v228 = v67;
          }
          else {
            int v228 = 1;
          }
          if (v228 == 1)
          {
            uint64_t v18 = a12;
            if (v42)
            {
              if (v42 == 1 && v44 == 0x10000)
              {
                int v382 = v69;
                char v395 = v68;
                BOOL v387 = v44 != v42;
                int v229 = v28;
                unsigned int v42 = 1;
              }
              else
              {
                int v293 = v42 - (v44 == v42);
                if (a12)
                {
                  if (v293 > 715827882) {
                    goto LABEL_814;
                  }
                  unint64_t v294 = 3 * v293;
                  if (2147483627 - v406 < v294) {
                    goto LABEL_814;
                  }
                  v406 += v294;
                }
                else if (v293 >= 1)
                {
                  do
                  {
                    __int16 v304 = *(_WORD *)v92;
                    i8[2] = v92[2];
                    *(_WORD *)i8 = v304;
                    uint64_t v92 = i8;
                    i8 += 3;
                    --v293;
                  }
                  while (v293);
                  uint64_t v92 = i8 - 3;
                }
                int v305 = v44 - v42;
                if (v44 == v42) {
                  goto LABEL_156;
                }
                int v382 = v69;
                char v395 = v68;
                BOOL v387 = v44 != v42;
                int v229 = v28;
                unsigned int v42 = 0;
                if (v44 == 0x10000) {
                  int v44 = 0x10000;
                }
                else {
                  int v44 = v305;
                }
              }
            }
            else
            {
              int v382 = v69;
              char v395 = v68;
              BOOL v387 = v44 != v42;
              int v229 = v28;
            }
            _pcre2_memmove8(v92 + 3, v92, 3);
            LODWORD(v93) = 134;
            *(_WORD *)uint64_t v92 = 134;
            v92[2] = 6;
            *((_WORD *)v92 + 3) = 121;
            v92[8] = 6;
            i8 += 6;
            unint64_t v403 = v92;
            int v97 = i8 - v92;
            int v365 = -1;
            uint64_t v416 = 9;
            int v28 = v229;
            BOOL v62 = v387;
            char v68 = v395;
            int v69 = v382;
LABEL_120:
            BOOL v98 = v44 != 0x10000 || v93 >= 0x84;
            if (v98) {
              unsigned int v99 = v44;
            }
            else {
              unsigned int v99 = v42 + 1;
            }
            uint64_t v100 = v42 - 1;
            int v334 = v97;
            if (v42 != 1)
            {
              if (!v42)
              {
                int v380 = v69;
                char v393 = v68;
                BOOL v386 = v62;
                int v335 = v28;
                uint64_t v18 = a12;
                if (v99 < 2 || v99 == 0x10000)
                {
                  int v101 = v403;
                  int v399 = (unsigned __int8 *)(v403 + 1);
                  _pcre2_memmove8(v403 + 1, v403, v97);
                  ++i8;
                  if (!v99)
                  {
                    *unint64_t v403 = -90;
                    unint64_t v19 = v406;
                    int v28 = v335;
                    BOOL v62 = v386;
                    uint64_t v103 = v403 + 1;
                    goto LABEL_151;
                  }
                  uint64_t v102 = 0;
                  int v69 = v380;
                  *unint64_t v403 = v380 - 106;
                }
                else
                {
                  int v399 = (unsigned __int8 *)(v403 + 4);
                  _pcre2_memmove8(v403 + 4, v403, v97);
                  i8 += 4;
                  int v69 = v380;
                  *unint64_t v403 = v380 - 106;
                  uint64_t v102 = v403 + 2;
                  *(_WORD *)(v403 + 1) = 134;
                  v403[3] = 0;
                  int v101 = 0;
                }
                char v68 = v393;
                if (v99 == 0x10000)
                {
                  uint64_t v102 = v101;
                  int v112 = i8;
                  int v28 = v335;
                  BOOL v62 = v386;
                  uint64_t v103 = v399;
LABEL_627:
                  uint64_t v269 = v112 - 3;
                  v270 = &v112[-__rev16(*((unsigned __int16 *)v112 - 1)) - 3];
                  int v271 = *v270;
                  char v272 = v67 ^ 1;
                  if (v271 != 132) {
                    char v272 = 1;
                  }
                  if ((v272 & 1) == 0)
                  {
                    int v271 = 134;
                    char *v270 = -122;
                    goto LABEL_633;
                  }
                  if ((v271 & 0xFE) != 0x84)
                  {
LABEL_633:
                    if (!a12)
                    {
                      if (v365 < 0)
                      {
                        LOBYTE(v271) = v271 + 5;
                        goto LABEL_692;
                      }
                      if (v271 == 138)
                      {
                        if (v270[__rev16(*(unsigned __int16 *)(v270 + 1))] == 120)
                        {
                          LOBYTE(v271) = -118;
                          goto LABEL_693;
                        }
                        LOBYTE(v271) = -113;
LABEL_692:
                        char *v270 = v271;
                      }
                    }
LABEL_693:
                    if (v67)
                    {
                      if (v271 == 143 || v271 == 138)
                      {
                        __int16 v405 = (_WORD)v112 - (_WORD)v270;
                        int v295 = v28;
                        BOOL v296 = v62;
                        int v297 = v103;
                        _pcre2_memmove8(v270 + 3, v270, (int)v112 - (int)v270);
                        uint64_t v103 = v297;
                        BOOL v62 = v296;
                        int v28 = v295;
                        if (*v270 == 138) {
                          char v298 = -121;
                        }
                        else {
                          char v298 = -116;
                        }
                        char *v270 = v298;
                        v112[3] = 124;
                        v112[4] = (unsigned __int16)(v405 + 3) >> 8;
                        v112[5] = v405 + 3;
                        i8 = v112 + 6;
                        v270[1] = (unsigned __int16)(v405 + 3) >> 8;
                        v270[2] = v405 + 3;
                      }
                      else
                      {
                        char *v270 = v271 + 1;
                        *uint64_t v269 = 124;
                        i8 = v112;
                      }
                      uint64_t v18 = a12;
                      if (v102) {
                        *uint64_t v102 = -104;
                      }
                      BOOL v98 = v42 >= 2;
                      unint64_t v19 = v406;
                      if (!v98) {
                        goto LABEL_151;
                      }
LABEL_757:
                      unsigned int v309 = v415;
                      uint64_t v310 = *v415;
                      if (v310 > 0x5C)
                      {
                        if ((v310 - 110) < 2)
                        {
                          unsigned int v309 = v415 + 33;
LABEL_772:
                          v415 = v309;
                          goto LABEL_773;
                        }
                        if (v310 == 112)
                        {
                          uint64_t v313 = __rev16(*(unsigned __int16 *)(v415 + 1));
                        }
                        else
                        {
                          if (v310 != 93)
                          {
LABEL_773:
                            int v314 = i8 - v309;
                            if ((int)i8 - (int)v309 >= 1)
                            {
                              unint64_t v315 = *v309;
                              if (v315 <= 0x75 && (int v316 = opcode_possessify[v315]) != 0)
                              {
                                char *v309 = v316;
                              }
                              else
                              {
                                int v317 = v28;
                                BOOL v318 = v62;
                                int v319 = v103;
                                _pcre2_memmove8(v309 + 3, v309, (i8 - v309));
                                uint64_t v103 = v319;
                                BOOL v62 = v318;
                                int v28 = v317;
                                char *v309 = -124;
                                i8[3] = 121;
                                i8[4] = (unsigned __int16)(v314 + 3) >> 8;
                                i8[5] = v314 + 3;
                                i8 += 6;
                                *(_WORD *)(v415 + 1) = bswap32(v314 + 3) >> 16;
                              }
                            }
                            uint64_t v18 = a12;
                            goto LABEL_151;
                          }
                          uint64_t v313 = 2 * (v415[3] - 15 < 2) + 4;
                        }
                      }
                      else
                      {
                        if ((v310 - 29) > 0x33
                          || ((1 << (v310 - 29)) & 0x800400200100FLL) == 0)
                        {
                          goto LABEL_773;
                        }
                        unsigned int v309 = &v415[_pcre2_OP_lengths_8[v310]];
                        v415 = v309;
                        if ((a1 & 0x80000) == 0) {
                          goto LABEL_773;
                        }
                        unsigned int v312 = *(v309 - 1);
                        if (v312 < 0xC0) {
                          goto LABEL_773;
                        }
                        uint64_t v313 = _pcre2_utf8_table4[v312 & 0x3F];
                      }
                      v309 += v313;
                      goto LABEL_772;
                    }
                    *uint64_t v269 = v69 + 122;
                    i8 = v112;
                    goto LABEL_149;
                  }
                  *uint64_t v269 = v69 + 122;
                  uint64_t v92 = (char *)v103;
                  uint64_t v18 = a12;
                  goto LABEL_673;
                }
                unsigned int v256 = v99 - 1;
                int v28 = v335;
                BOOL v62 = v386;
                uint64_t v103 = v399;
LABEL_624:
                if (v256 == 0x10000)
                {
                  uint64_t v102 = v101;
                  goto LABEL_626;
                }
                if (v18 && v256)
                {
                  uint64_t v273 = (v416 + 7) * v256;
                  unint64_t v274 = v273 - 6;
                  if (v273 > 0x7FFFFFFF || 2147483627 - v406 < v274) {
                    goto LABEL_814;
                  }
                  unint64_t v19 = v406 + v274;
                }
                else
                {
                  unsigned int v276 = v256 - 1;
                  unint64_t v19 = v406;
                  if ((int)(v256 - 1) >= 0)
                  {
                    char v397 = v68;
                    BOOL v389 = v62;
                    int v337 = v28;
                    uint64_t v277 = (v69 - 106);
                    char *i8 = v69 - 106;
                    int v278 = i8 + 1;
                    int v401 = v103;
                    if (v256 != 1)
                    {
                      int v404 = v63;
                      __int16 v279 = (_WORD)i8 + 2;
                      do
                      {
                        __int16 v280 = v279 - (_WORD)v102;
                        if (!v102) {
                          __int16 v280 = 0;
                        }
                        uint64_t v281 = v277;
                        v278[1] = HIBYTE(v280);
                        uint64_t v102 = v278 + 1;
                        *int v278 = -122;
                        v278[2] = v280;
                        memcpy(v278 + 3, v103, v334);
                        uint64_t v277 = v281;
                        uint64_t v103 = v401;
                        v278 += v334 + 4;
                        *(v278 - 1) = v281;
                        v279 += v334 + 4;
                        --v276;
                      }
                      while (v276);
                      uint64_t v102 = &v278[-v334 - 3];
                      uint64_t v18 = a12;
                      unint64_t v19 = v406;
                      int v63 = v404;
                    }
                    memcpy(v278, v103, v334);
                    uint64_t v103 = v401;
                    i8 = &v278[v334];
                    int v28 = v337;
                    BOOL v62 = v389;
                    char v68 = v397;
                  }
                }
                if (v102)
                {
                  int v282 = i8 + 1;
                  do
                  {
                    char v283 = v282 - (_BYTE)v102;
                    int v284 = &i8[-(v282 - (int)v102)];
                    uint64_t v285 = __rev16(*(unsigned __int16 *)(v284 + 1));
                    char *i8 = 121;
                    unsigned int v286 = (v282 - v102) >> 8;
                    i8[1] = (unsigned __int16)(v282 - (_WORD)v102) >> 8;
                    i8[2] = v282 - (_BYTE)v102;
                    if (v285) {
                      BOOL v287 = v102 == 0;
                    }
                    else {
                      BOOL v287 = 1;
                    }
                    v102 -= v285;
                    i8 += 3;
                    v284[1] = v286;
                    v284[2] = v283;
                    v282 += 3;
                  }
                  while (!v287);
                }
                int v112 = i8;
                uint64_t v92 = (char *)v103;
LABEL_756:
                uint64_t v103 = v92;
                i8 = v112;
                if ((v68 & 1) == 0) {
                  goto LABEL_757;
                }
LABEL_151:
                *(_DWORD *)(a11 + 280) |= 2 * v62;
                int v27 = (char *)v103;
                goto LABEL_555;
              }
              if (a12)
              {
                unint64_t v146 = v416 * v100;
                if (v416 * v100 > 0x7FFFFFFF || 2147483627 - v406 < v146) {
                  goto LABEL_814;
                }
                v406 += v146;
              }
              else
              {
                int v383 = v69;
                char v396 = v68;
                BOOL v388 = v62;
                int v336 = v28;
                if (v361 && v31 < 0)
                {
                  unsigned int v64 = v63;
                  int v31 = v377;
                }
                size_t v255 = v97;
                do
                {
                  memcpy(i8, v403, v255);
                  i8 += v255;
                  LODWORD(v100) = v100 - 1;
                }
                while (v100);
                int v28 = v336;
                BOOL v62 = v388;
                char v68 = v396;
                int v69 = v383;
              }
            }
            uint64_t v102 = 0;
            uint64_t v103 = v403;
            if (v99 == 0x10000)
            {
LABEL_626:
              int v112 = i8;
              goto LABEL_627;
            }
            unsigned int v256 = v99 - v42;
            int v101 = 0;
            uint64_t v18 = a12;
            goto LABEL_624;
          }
        }
        else if (v94 != 45)
        {
LABEL_134:
          if ((v93 - 110) < 7)
          {
            if (v44)
            {
              uint64_t v18 = a12;
              if (v44 == 1 && v42 == 1)
              {
                uint64_t v103 = v403;
LABEL_150:
                unint64_t v19 = v406;
                goto LABEL_151;
              }
              if (v42 || v44 != 0x10000)
              {
                int v112 = i8 + 1;
                if (v42 == 1 && v44 == 0x10000)
                {
                  char v214 = v69 + 100;
                }
                else
                {
                  if (v44 != 1 || v42)
                  {
                    char *i8 = v69 + 104;
                    i8[1] = BYTE1(v42);
                    i8[2] = v42;
                    if (v44 == 0x10000) {
                      __int16 v289 = 0;
                    }
                    else {
                      __int16 v289 = v44;
                    }
                    i8[3] = HIBYTE(v289);
                    i8[4] = v289;
                    int v112 = i8 + 5;
                    goto LABEL_673;
                  }
                  char v214 = v69 + 102;
                }
                char *i8 = v214;
LABEL_673:
                unint64_t v19 = v406;
                goto LABEL_756;
              }
              *i8++ = v69 + 98;
LABEL_156:
              int v112 = i8;
              goto LABEL_673;
            }
            goto LABEL_147;
          }
          if ((v93 - 29) > 3)
          {
            if (v93 >= 0x17)
            {
              int v331 = 110;
              goto LABEL_818;
            }
            if (v44 == 1 && v42 == 1) {
              goto LABEL_148;
            }
            char v394 = v68;
            size_t v109 = 0;
            if ((v93 - 15) > 1)
            {
              char v110 = -1;
              int v111 = -1;
            }
            else
            {
              int v111 = v403[1];
              char v110 = v403[2];
            }
            LOBYTE(v104) = 52;
            if (!v44) {
              goto LABEL_147;
            }
          }
          else
          {
            if (v44 == 1 && v42 == 1) {
              goto LABEL_148;
            }
            int v104 = chartypeoffset[v93 - 29];
            unsigned int v105 = *(i8 - 1);
            char v394 = v68;
            if ((a1 & 0x80000) != 0 && (v105 & 0xC0) == 0x80)
            {
              int v400 = chartypeoffset[v93 - 29];
              char v381 = v69;
              int v106 = v28;
              uint64_t v107 = 0;
              do
                int v108 = i8[--v107] & 0xC0;
              while (v108 == 128);
              size_t v109 = -(int)v107;
              __memcpy_chk();
              char v110 = -1;
              int v111 = -1;
              int v28 = v106;
              BOOL v62 = v44 != v42;
              LOBYTE(v69) = v381;
              LOBYTE(v104) = v400;
              if (!v44)
              {
LABEL_147:
                i8 = v403;
                goto LABEL_148;
              }
            }
            else
            {
              __src[0] = *(i8 - 1);
              char v110 = -1;
              int v111 = -1;
              size_t v109 = 1;
              if (v42 >= 2 && v93 <= 0x1E)
              {
                int v31 = *(_DWORD *)(a11 + 280) | v358;
                char v110 = -1;
                size_t v109 = 1;
                unsigned int v64 = v105;
              }
              if (!v44) {
                goto LABEL_147;
              }
            }
          }
          char v230 = v104 + v69;
          if (!v42)
          {
            if (v44 == 1)
            {
              char v232 = v230 + 37;
              uint64_t v92 = v403;
              unint64_t v19 = v406;
              goto LABEL_682;
            }
            unint64_t v19 = v406;
            if (v44 != 0x10000)
            {
              char v292 = v230 + 39;
              uint64_t v92 = v403;
              *unint64_t v403 = v292;
              v403[1] = BYTE1(v44);
              v403[2] = v44;
              char v262 = v403 + 3;
              goto LABEL_751;
            }
            char v232 = v230 + 33;
LABEL_579:
            uint64_t v92 = v403;
LABEL_682:
            *uint64_t v92 = v232;
            char v262 = v92 + 1;
LABEL_751:
            if (v109)
            {
              int v307 = v28;
              BOOL v308 = v62;
              memcpy(v262, __src, v109);
              BOOL v62 = v308;
              int v28 = v307;
              int v112 = &v262[v109];
            }
            else
            {
              *char v262 = v93;
              int v112 = v262 + 1;
              if ((v111 & 0x80000000) == 0)
              {
                v262[1] = v111;
                int v112 = v262 + 3;
                v262[2] = v110;
              }
            }
            uint64_t v18 = a12;
            char v68 = v394;
            goto LABEL_756;
          }
          if (v42 == 1)
          {
            __int16 v231 = v44 - 1;
            if (v44 == 1)
            {
              uint64_t v103 = v403;
              goto LABEL_149;
            }
            unint64_t v19 = v406;
            if (v44 == 0x10000)
            {
              char v232 = v230 + 35;
              goto LABEL_579;
            }
            char *i8 = v230 + 39;
            i8[1] = HIBYTE(v231);
            i8[2] = v231;
            goto LABEL_749;
          }
          *unint64_t v403 = v104 + 41;
          v403[1] = BYTE1(v42);
          v403[2] = v42;
          char v262 = v403 + 3;
          unsigned int v263 = v44 - v42;
          if (v44 == v42)
          {
            unint64_t v19 = v406;
          }
          else
          {
            unint64_t v19 = v406;
            if (v109)
            {
              int v338 = v28;
              size_t v290 = v109;
              size_t v402 = v109;
              BOOL v291 = v62;
              char v384 = v110;
              int v390 = v111;
              memcpy(v403 + 3, __src, v290);
              int v111 = v390;
              char v110 = v384;
              BOOL v62 = v291;
              size_t v109 = v402;
              int v28 = v338;
              i8 = &v262[v402];
            }
            else
            {
              v403[3] = v93;
              if (v111 < 0)
              {
                i8 = v403 + 4;
              }
              else
              {
                v403[4] = v111;
                i8 = v403 + 6;
                v403[5] = v110;
              }
            }
            if (v44 == 0x10000)
            {
              char v306 = v230 + 33;
            }
            else
            {
              if (v263 != 1)
              {
                char *i8 = v230 + 39;
                i8[1] = BYTE1(v263);
                i8[2] = v263;
LABEL_749:
                char v262 = i8 + 3;
                goto LABEL_750;
              }
              char v306 = v230 + 37;
            }
            char *i8 = v306;
            char v262 = i8 + 1;
          }
LABEL_750:
          uint64_t v92 = v403;
          goto LABEL_751;
        }
LABEL_148:
        uint64_t v103 = v403;
LABEL_149:
        uint64_t v18 = a12;
        goto LABEL_150;
      default:
        uint64_t v87 = a11;
        unsigned int v88 = a1;
        int v114 = v358;
        if ((v34 & 0x80000000) == 0) {
          goto LABEL_235;
        }
        goto LABEL_824;
    }
  }
}

void add_name_to_table(uint64_t a1, void *__src, size_t __n, unsigned int a4, int a5)
{
  int v6 = __n;
  int v9 = *(char **)(a1 + 72);
  size_t v10 = __n;
  if (a5)
  {
    int v11 = a5;
    uint64_t v12 = __n + 2;
    do
    {
      int v13 = memcmp(__src, v9 + 2, v10);
      if (v13)
      {
        if (v13 < 0) {
          goto LABEL_9;
        }
      }
      else if (v9[v12])
      {
LABEL_9:
        _pcre2_memmove8(&v9[*(unsigned __int16 *)(a1 + 178)], v9, v11 * *(unsigned __int16 *)(a1 + 178));
        break;
      }
      v9 += *(unsigned __int16 *)(a1 + 178);
      --v11;
    }
    while (v11);
  }
  *(_WORD *)int v9 = bswap32(a4) >> 16;
  uint64_t v14 = v9 + 2;
  memcpy(v14, __src, v10);
  size_t v15 = *(unsigned __int16 *)(a1 + 178) - v6 - 2;
  bzero(&v14[v10], v15);
}

unsigned __int8 *find_recurse(unsigned __int8 *result, int a2)
{
  while (2)
  {
    uint64_t v2 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        int v3 = result[1];
        goto LABEL_9;
      case '[':
      case '\\':
      case ']':
      case 'a':
        int v3 = result[3];
LABEL_9:
        uint64_t v5 = 2 * ((v3 - 15) < 2);
        goto LABEL_10;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'v':
        goto LABEL_15;
      case 'p':
        unsigned int v6 = *(unsigned __int16 *)(result + 1);
        goto LABEL_13;
      case 'u':
        return result;
      case 'w':
        unsigned int v6 = *(unsigned __int16 *)(result + 5);
LABEL_13:
        result += __rev16(v6);
        continue;
      default:
        if ((v2 - 153) <= 8 && ((1 << (v2 + 103)) & 0x155) != 0)
        {
          uint64_t v5 = result[1];
LABEL_10:
          result += v5 + _pcre2_OP_lengths_8[v2];
          continue;
        }
        if (*result)
        {
LABEL_15:
          result += _pcre2_OP_lengths_8[v2];
          if (a2 && (v2 - 29) <= 0x37)
          {
            unsigned int v7 = *(result - 1);
            if (v7 >= 0xC0) {
              result += _pcre2_utf8_table4[v7 & 0x3F];
            }
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t is_anchored(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = a1;
  uint64_t v10 = (a4 + 1);
  for (uint64_t i = *a1; ; uint64_t i = 0x78u)
  {
    significant_code = first_significant_code(&v9[_pcre2_OP_lengths_8[i]], 0);
    uint64_t result = 0;
    unsigned int v14 = *significant_code;
    if (v14 > 0x5D)
    {
      switch(*significant_code)
      {
        case 0x7Eu:
        case 0x82u:
          uint64_t v18 = significant_code;
          uint64_t v17 = a2;
          uint64_t v19 = a3;
          uint64_t v20 = a4;
          uint64_t v21 = 1;
          goto LABEL_17;
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x83u:
        case 0x85u:
          return result;
        case 0x84u:
          uint64_t v18 = significant_code;
          uint64_t v17 = a2;
          uint64_t v19 = a3;
          uint64_t v20 = v10;
          goto LABEL_16;
        case 0x86u:
        case 0x87u:
        case 0x8Bu:
        case 0x8Cu:
          goto LABEL_14;
        case 0x88u:
        case 0x89u:
        case 0x8Du:
        case 0x8Eu:
          unsigned int v15 = __rev16(*(unsigned __int16 *)(significant_code + 3));
          if (v15 >= 0x20) {
            int v16 = 1;
          }
          else {
            int v16 = 1 << v15;
          }
          uint64_t v17 = v16 | a2;
          uint64_t v18 = significant_code;
          goto LABEL_15;
        case 0x8Au:
        case 0x8Fu:
          if (significant_code[__rev16(*(unsigned __int16 *)(significant_code + 1))] != 120) {
            return 0;
          }
LABEL_14:
          uint64_t v18 = significant_code;
          uint64_t v17 = a2;
LABEL_15:
          uint64_t v19 = a3;
          uint64_t v20 = a4;
LABEL_16:
          uint64_t v21 = a5;
LABEL_17:
          uint64_t result = is_anchored(v18, v17, v19, v20, v21);
          if (result) {
            goto LABEL_18;
          }
          return result;
        default:
          if (v14 == 94) {
            goto LABEL_21;
          }
          return result;
      }
    }
    if (v14 - 1 >= 2) {
      break;
    }
LABEL_18:
    v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
    if (*v9 != 120) {
      return 1;
    }
  }
  if (v14 - 85 >= 2)
  {
    if (v14 != 27) {
      return result;
    }
    goto LABEL_18;
  }
LABEL_21:
  if (significant_code[1] == 13)
  {
    uint64_t result = 0;
    if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0) {
      return result;
    }
    if (!(*(_DWORD *)(a3 + 288) | a5) && (*(unsigned char *)(a3 + 205) & 0x80) == 0) {
      goto LABEL_18;
    }
  }
  return 0;
}

uint64_t find_firstassertedcu(unsigned char *a1, int *a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = 0;
  int v7 = -1;
  *a2 = -1;
  for (char i = *a1 + 120; ; char i = -16)
  {
    uint64_t v9 = i > 6u ? 0 : qword_20D60D378[i];
    significant_code = first_significant_code(&v5[v9 + 3], 1);
    unsigned int v11 = *significant_code;
    if (v11 > 0x35) {
      break;
    }
    if (*significant_code > 0x28u)
    {
      if (v11 - 48 >= 2)
      {
        if (v11 == 41)
        {
          significant_code += 2;
          if (!a3) {
            return 0;
          }
        }
        else
        {
          if (v11 != 43) {
            return 0;
          }
LABEL_26:
          if (!a3) {
            return 0;
          }
        }
        uint64_t v16 = significant_code[1];
        if (v7 < 0)
        {
          int v7 = 0;
LABEL_42:
          uint64_t v6 = v16;
          goto LABEL_43;
        }
        goto LABEL_39;
      }
    }
    else
    {
      if (v11 - 35 < 2 || v11 == 29) {
        goto LABEL_26;
      }
      if (v11 != 30) {
        return 0;
      }
    }
LABEL_36:
    if (!a3 || (char)significant_code[1] < 0) {
      return 0;
    }
    uint64_t v16 = significant_code[1];
    if (v7 < 0)
    {
      int v7 = 1;
      goto LABEL_42;
    }
LABEL_39:
    if (v6 != v16) {
      return 0;
    }
LABEL_43:
    v5 += __rev16(*(unsigned __int16 *)(v5 + 1));
    if (*v5 != 120)
    {
      *a2 = v7;
      return v6;
    }
  }
  if (v11 - 126 > 0x10 || ((1 << (v11 - 126)) & 0x18FD1) == 0)
  {
    if (v11 == 54)
    {
      significant_code += 2;
    }
    else if (v11 != 56)
    {
      return 0;
    }
    goto LABEL_36;
  }
  uint64_t firstassertedcu = find_firstassertedcu();
  if (v7 < 0)
  {
    uint64_t v6 = firstassertedcu;
    int v7 = 0;
    goto LABEL_43;
  }
  if (v6 == firstassertedcu && v7 == 0) {
    goto LABEL_43;
  }
  return 0;
}

uint64_t is_startline(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  uint64_t v10 = (a4 + 1);
  uint64_t v11 = *a1;
  while (2)
  {
    significant_code = first_significant_code(&v9[_pcre2_OP_lengths_8[v11]], 0);
    int v13 = *significant_code;
    if (v13 != 138) {
      goto LABEL_16;
    }
    unsigned int v15 = significant_code + 3;
    int v14 = significant_code[3];
    if (v14 == 119)
    {
      uint64_t v16 = __rev16(*((unsigned __int16 *)significant_code + 4));
      goto LABEL_7;
    }
    if (v14 == 118)
    {
      uint64_t v16 = 6;
LABEL_7:
      v15 += v16;
      int v14 = *v15;
    }
    unsigned int v17 = v14 - 144;
    BOOL v18 = v17 > 0x12;
    int v19 = (1 << v17) & 0x4003F;
    if (!v18 && v19 != 0) {
      return 0;
    }
    uint64_t result = is_startline(v15, a2, a3, a4, 1);
    if (!result) {
      return result;
    }
    do
      v15 += __rev16(*(unsigned __int16 *)(v15 + 1));
    while (*v15 == 120);
    significant_code = first_significant_code(v15 + 3, 0);
    int v13 = *significant_code;
LABEL_16:
    switch(v13)
    {
      case 126:
      case 130:
        uint64_t v22 = a2;
        uint64_t v25 = a3;
        uint64_t v26 = a4;
        uint64_t v27 = 1;
        goto LABEL_24;
      case 127:
      case 128:
      case 129:
      case 131:
      case 133:
      case 138:
        goto LABEL_36;
      case 132:
        uint64_t v22 = a2;
        uint64_t v25 = a3;
        uint64_t v26 = v10;
        goto LABEL_23;
      case 134:
      case 135:
      case 139:
      case 140:
        uint64_t v22 = a2;
        goto LABEL_22;
      case 136:
      case 137:
      case 141:
      case 142:
        unsigned int v23 = __rev16(*(unsigned __int16 *)(significant_code + 3));
        if (v23 >= 0x20) {
          int v24 = 1;
        }
        else {
          int v24 = 1 << v23;
        }
        uint64_t v22 = v24 | a2;
LABEL_22:
        uint64_t v25 = a3;
        uint64_t v26 = a4;
LABEL_23:
        uint64_t v27 = a5;
LABEL_24:
        uint64_t result = is_startline(significant_code, v22, v25, v26, v27);
        if (result) {
          goto LABEL_25;
        }
        return result;
      default:
        if ((v13 - 85) < 2 || v13 == 94)
        {
          if (significant_code[1] != 12) {
            return 0;
          }
          uint64_t result = 0;
          if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0) {
            return result;
          }
          if (*(_DWORD *)(a3 + 288) | a5 || (*(unsigned char *)(a3 + 205) & 0x80) != 0) {
            return 0;
          }
        }
        else
        {
LABEL_36:
          if ((v13 - 29) < 0xFFFFFFFE) {
            return 0;
          }
        }
LABEL_25:
        v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
        uint64_t v11 = 0x78u;
        if (*v9 == 120) {
          continue;
        }
        uint64_t result = 1;
        break;
    }
    return result;
  }
}

_DWORD *manage_callouts(int a1, void *a2, int a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5 = (_DWORD *)*a2;
  if (*a2) {
    v5[2] = a1 - *(_DWORD *)(a5 + 56) - v5[1];
  }
  if (a3)
  {
    if (v5) {
      BOOL v6 = v5 == a4 - 4;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6 && v5[3] == 255)
    {
      int v7 = a4;
      a4 = v5;
    }
    else
    {
      int v7 = a4 + 4;
      *a4 = -2147090432;
      *((void *)a4 + 1) = 0xFF00000000;
    }
    unsigned int v8 = a4;
    a4[1] = a1 - *(_DWORD *)(a5 + 56);
    a4 = v7;
  }
  else
  {
    unsigned int v8 = 0;
  }
  *a2 = v8;
  return a4;
}

uint64_t get_ucp(unint64_t *a1, _DWORD *a2, _WORD *a3, _WORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v7 = (unsigned char *)*a1;
  unsigned int v8 = (unsigned char *)*a1;
  unint64_t v9 = *(void *)(a6 + 64);
  if (*a1 >= v9) {
    goto LABEL_14;
  }
  unsigned int v13 = *v8++;
  uint64_t v12 = v13;
  *a2 = 0;
  if (v13 == 123)
  {
    if ((unint64_t)v8 < v9)
    {
      if (*v8 == 94)
      {
        *a2 = 1;
        unsigned int v8 = v7 + 2;
      }
      if ((unint64_t)v8 < v9)
      {
        unint64_t v14 = 0;
        while (1)
        {
          unsigned int v15 = &v8[v14];
          unint64_t v16 = (unint64_t)&v8[v14 + 1];
          int v17 = v8[v14];
          if (!v8[v14])
          {
LABEL_12:
            unsigned int v8 = v15 + 1;
            goto LABEL_14;
          }
          if (v17 == 125) {
            break;
          }
          v25[v14] = v17;
          if (v14 <= 0x1D)
          {
            ++v14;
            if (v16 < v9) {
              continue;
            }
          }
          goto LABEL_12;
        }
        v8 += v14 + 1;
        goto LABEL_17;
      }
    }
LABEL_14:
    uint64_t v18 = 0;
    *a5 = 146;
    *a1 = (unint64_t)v8;
    return v18;
  }
  if ((*(unsigned char *)(*(void *)(a6 + 32) + v12) & 2) == 0) {
    goto LABEL_14;
  }
  v25[0] = v12;
  unint64_t v14 = 1;
LABEL_17:
  v25[v14] = 0;
  *a1 = (unint64_t)v8;
  unint64_t v20 = 201;
  unint64_t v21 = 0;
  while (1)
  {
    unint64_t v22 = (v20 + v21) >> 1;
    int v23 = _pcre2_strcmp_8(v25, (unsigned __int8 *)&_pcre2_utt_names_8[_pcre2_utt_8[3 * v22]]);
    if (!v23) {
      break;
    }
    if (v23 <= 0) {
      unint64_t v20 = (v20 + v21) >> 1;
    }
    else {
      unint64_t v21 = v22 + 1;
    }
    if (v21 >= v20)
    {
      uint64_t v18 = 0;
      *a5 = 147;
      return v18;
    }
  }
  int v24 = (char *)&_pcre2_utt_8[3 * v22];
  *a3 = *((_WORD *)v24 + 1);
  *a4 = *((_WORD *)v24 + 2);
  return 1;
}

uint64_t read_name(unsigned __int8 **a1, unint64_t a2, int a3, unsigned __int8 a4, void *a5, void *a6, _DWORD *a7, int *a8, uint64_t a9)
{
  unint64_t v9 = *a1;
  uint64_t v11 = *a1 + 1;
  int v10 = **a1;
  if ((unint64_t)v11 >= a2)
  {
    uint64_t v14 = 0;
    if (v10 == 42) {
      int v15 = 160;
    }
    else {
      int v15 = 162;
    }
    goto LABEL_36;
  }
  *a6 = v11;
  *a5 = &v11[-*(void *)(a9 + 56)];
  if (!a3 || v10 == 42)
  {
    if (v10 != 42 && *v11 - 48 <= 9) {
      goto LABEL_35;
    }
    uint64_t v16 = 1;
    while ((*(unsigned char *)(*(void *)(a9 + 32) + v9[v16]) & 0x10) != 0)
    {
      if (a2 - (void)v9 == ++v16)
      {
        uint64_t v16 = a2 - (void)v9;
        goto LABEL_16;
      }
    }
    goto LABEL_16;
  }
  unsigned int v12 = *v11;
  if (v12 >= 0xC0)
  {
    int v13 = v9[2] & 0x3F;
    if ((v12 & 0x20) == 0)
    {
      unsigned int v12 = v9[2] & 0x3F | ((v12 & 0x1F) << 6);
      goto LABEL_34;
    }
    if ((v12 & 0x10) != 0)
    {
      if ((v12 & 8) != 0)
      {
        int v19 = v9[3] & 0x3F;
        int v20 = v9[4] & 0x3F;
        int v21 = v9[5] & 0x3F;
        if ((v12 & 4) == 0)
        {
          unsigned int v12 = ((v12 & 3) << 24) | (v13 << 18) | (v19 << 12) | (v20 << 6) | v21;
          goto LABEL_34;
        }
        int v17 = ((v12 & 1) << 30) | (v13 << 24) | (v19 << 18) | (v20 << 12) | (v21 << 6);
        char v18 = v9[6];
      }
      else
      {
        int v17 = ((v12 & 7) << 18) | (v13 << 12) | ((v9[3] & 0x3F) << 6);
        char v18 = v9[4];
      }
    }
    else
    {
      int v17 = ((v12 & 0xF) << 12) | (v13 << 6);
      char v18 = v9[3];
    }
    unsigned int v12 = v17 & 0xFFFFFFC0 | v18 & 0x3F;
  }
LABEL_34:
  int v22 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v12 & 0x7F | (_pcre2_ucd_stage1_8[v12 >> 7] << 7)] + 1];
  if (v22 == 13)
  {
LABEL_35:
    uint64_t v14 = 0;
    int v15 = 144;
    goto LABEL_36;
  }
  uint64_t v16 = 1;
  while (2)
  {
    if (v22 == 13 || v12 == 95 || _pcre2_ucp_gentype_8[v22] == 1)
    {
      do
      {
        if ((unint64_t)&v9[++v16] >= a2) {
          goto LABEL_16;
        }
        unsigned int v12 = v9[v16];
      }
      while ((v12 & 0xC0) == 0x80);
      if (v12 >= 0xC0)
      {
        int v24 = v9[v16 + 1] & 0x3F;
        if ((v12 & 0x20) != 0)
        {
          if ((v12 & 0x10) != 0)
          {
            if ((v12 & 8) != 0)
            {
              int v27 = v9[v16 + 2] & 0x3F;
              int v28 = v9[v16 + 3] & 0x3F;
              int v29 = v9[v16 + 4] & 0x3F;
              if ((v12 & 4) == 0)
              {
                unsigned int v12 = ((v12 & 3) << 24) | (v24 << 18) | (v27 << 12) | (v28 << 6) | v29;
                goto LABEL_55;
              }
              int v25 = ((v12 & 1) << 30) | (v24 << 24) | (v27 << 18) | (v28 << 12) | (v29 << 6);
              char v26 = v9[v16 + 5];
            }
            else
            {
              int v25 = ((v12 & 7) << 18) | (v24 << 12) | ((v9[v16 + 2] & 0x3F) << 6);
              char v26 = v9[v16 + 3];
            }
          }
          else
          {
            int v25 = ((v12 & 0xF) << 12) | (v24 << 6);
            char v26 = v9[v16 + 2];
          }
          unsigned int v12 = v25 & 0xFFFFFFC0 | v26 & 0x3F;
          goto LABEL_55;
        }
        unsigned int v12 = v9[v16 + 1] & 0x3F | ((v12 & 0x1F) << 6);
      }
LABEL_55:
      int v22 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v12 & 0x7F | (_pcre2_ucd_stage1_8[v12 >> 7] << 7)] + 1];
      continue;
    }
    break;
  }
LABEL_16:
  uint64_t v11 = &v9[v16];
  if (v16 >= 34)
  {
    uint64_t v14 = 0;
    int v15 = 148;
LABEL_36:
    *a8 = v15;
    goto LABEL_37;
  }
  *a7 = v16 - 1;
  if (v10 != 42)
  {
    if (v16 == 1)
    {
      uint64_t v14 = 0;
      int v15 = 162;
      goto LABEL_36;
    }
    if ((unint64_t)v11 >= a2 || *v11 != a4)
    {
      uint64_t v14 = 0;
      int v15 = 142;
      goto LABEL_36;
    }
    ++v11;
  }
  uint64_t v14 = 1;
LABEL_37:
  *a1 = v11;
  return v14;
}

uint64_t check_posix_syntax(unsigned __int8 *a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v4 = a1 + 1;
  int v3 = *a1;
  if (a2 - (uint64_t)(a1 + 1) < 2) {
    return 0;
  }
  while (1)
  {
    int v5 = a1[1];
    if (v5 == 91) {
      break;
    }
    if (v5 != 92)
    {
      if (v5 == 93) {
        return 0;
      }
      goto LABEL_10;
    }
    if ((a1[2] & 0xFE) != 0x5C) {
      goto LABEL_10;
    }
    uint64_t v4 = a1 + 2;
LABEL_12:
    a1 = v4++;
    if (a2 - (uint64_t)v4 <= 1) {
      return 0;
    }
  }
  if (a1[2] == v3) {
    return 0;
  }
LABEL_10:
  if (v5 != v3 || a1[2] != 93) {
    goto LABEL_12;
  }
  *a3 = v4;
  return 1;
}

uint64_t check_posix_name(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  BOOL v6 = "alpha";
  while (1)
  {
    uint64_t v7 = posix_name_lengths[v4];
    if (v7 == a2 && !_pcre2_strncmp_8(a1, v6, v5)) {
      break;
    }
    v6 += v7 + 1;
    if (++v4 == 14) {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t set_lookbehind_lengths(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  int v10 = *a1;
  uint64_t v11 = *a1 + 2;
  unint64_t v12 = *v11 | ((unint64_t)(*a1)[1] << 32);
  while (1)
  {
    *a1 = v11 + 1;
    int branchlength = get_branchlength(a1, a2, a3, a4, a5);
    if (branchlength < 0) {
      break;
    }
    if (branchlength > *(_DWORD *)(a5 + 276)) {
      *(_DWORD *)(a5 + 276) = branchlength;
    }
    *v10 |= branchlength;
    uint64_t v11 = *a1;
    int v10 = *a1;
    if (**a1 != -2147418112) {
      return 1;
    }
  }
  if (!*a2) {
    *a2 = 125;
  }
  uint64_t result = 0;
  if (*(void *)(a5 + 168) == -1) {
    *(void *)(a5 + 168) = v12;
  }
  return result;
}

uint64_t get_branchlength(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  BOOL v6 = a1;
  uint64_t v7 = *a1;
  unsigned __int16 v56 = v7;
  int v8 = (*a3)++;
  if (v8 > 2000)
  {
    int v9 = 135;
    goto LABEL_86;
  }
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  while (2)
  {
    uint64_t v53 = 0;
    unsigned int v15 = *v7;
    if ((*v7 & 0x80000000) == 0)
    {
LABEL_5:
      int grouplength = 1;
      goto LABEL_6;
    }
    unsigned int v17 = v15 & 0xFFFF0000;
    int v18 = 0;
    int grouplength = 0;
    switch(((v15 & 0xFFFF0000) + 2147418112) >> 16)
    {
      case 0u:
      case 0x18u:
        goto LABEL_92;
      case 1u:
      case 0x19u:
      case 0x21u:
        goto LABEL_40;
      case 2u:
        if ((*(unsigned char *)(a5 + 205) & 2) != 0 || (*(unsigned char *)(a5 + 210) & 0x20) != 0) {
          goto LABEL_95;
        }
        uint64_t v30 = (unsigned __int16)*v7;
        if ((unsigned __int16)*v7 > 9u) {
          goto LABEL_56;
        }
        unint64_t v31 = *(void *)(a5 + 8 * v30 + 88);
        goto LABEL_57;
      case 3u:
        if ((*(unsigned char *)(a5 + 205) & 2) == 0) {
          goto LABEL_29;
        }
        goto LABEL_95;
      case 4u:
        goto LABEL_53;
      case 5u:
        int grouplength = 0;
        int v20 = v7 + 3;
        goto LABEL_12;
      case 6u:
        int grouplength = 0;
        int v20 = v7 + 5;
        goto LABEL_12;
      case 7u:
        int v18 = (unsigned __int16)*v7;
        goto LABEL_40;
      case 8u:
      case 0x15u:
      case 0x2Bu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_6;
      case 9u:
      case 0xDu:
        int grouplength = 1;
        unsigned __int16 v56 = parsed_skip(v7, 1);
        if (v56) {
          goto LABEL_6;
        }
        goto LABEL_93;
      case 0xBu:
      case 0x16u:
        goto LABEL_5;
      case 0xEu:
        int v18 = 0;
LABEL_40:
        int v19 = v7 + 1;
        goto LABEL_41;
      case 0xFu:
        char v26 = parsed_skip(v7 + 1, 2);
        goto LABEL_44;
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
        int v18 = 0;
        int v19 = v7 + 4;
LABEL_41:
        unsigned __int16 v56 = v19;
        int grouplength = get_grouplength(&v56, 1, (uint64_t)a2, (uint64_t)a3, v18, a4, a5);
        if (grouplength < 0) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_6;
      case 0x17u:
        int v40 = (unsigned __int16)*v7;
        if (v40 == 17 || v40 == 22) {
          return 0xFFFFFFFFLL;
        }
        if ((v40 - 6) > 0x10) {
          goto LABEL_17;
        }
        if (v40 == 14 && (*(_DWORD *)(a5 + 204) & 0x80000) != 0)
        {
          int v9 = 136;
          goto LABEL_86;
        }
        if ((v40 - 15) <= 1) {
LABEL_53:
        }
          unsigned __int16 v56 = v7 + 1;
        goto LABEL_5;
      case 0x1Au:
        int grouplength = 0;
        int v20 = v7 + 1;
        goto LABEL_12;
      case 0x1Fu:
        LODWORD(v30) = (unsigned __int16)*v7;
LABEL_56:
        unsigned int v43 = v7[2];
        unsigned int v42 = v7 + 2;
        unint64_t v31 = v43 | ((unint64_t)*(v42 - 1) << 32);
        unsigned __int16 v56 = v42;
        goto LABEL_57;
      case 0x20u:
LABEL_29:
        uint64_t v51 = a4;
        uint64_t v52 = v6;
        unsigned int v33 = v7[3];
        int v32 = v7 + 3;
        uint64_t v34 = *(void *)(a5 + 192);
        uint64_t v35 = *(v32 - 2);
        unint64_t v31 = v33 | ((unint64_t)*(v32 - 1) << 32);
        unsigned __int16 v56 = v32;
        unsigned __int16 v36 = *(_WORD *)(a5 + 176);
        if (!v36) {
          goto LABEL_89;
        }
        unsigned int v37 = 0;
        int v38 = (unsigned __int8 *)(*(void *)(a5 + 56) + v31);
        uint64_t v39 = (unsigned __int16 *)(v34 + 14);
        while (2)
        {
          if (v35 != *(v39 - 1)) {
            goto LABEL_34;
          }
          if (_pcre2_strncmp_8(v38, *(unsigned __int8 **)(v39 - 7), v35))
          {
            unsigned __int16 v36 = *(_WORD *)(a5 + 176);
LABEL_34:
            ++v37;
            v39 += 8;
            if (v37 >= v36) {
              goto LABEL_89;
            }
            continue;
          }
          break;
        }
        LODWORD(v30) = *(_DWORD *)(v39 - 3);
        if (!v30)
        {
LABEL_89:
          *a2 = 115;
          *(void *)(a5 + 168) = v31;
          return 0xFFFFFFFFLL;
        }
        if (v17 == -2145320960)
        {
          a4 = v51;
          BOOL v6 = v52;
        }
        else
        {
          int v49 = *v39;
          a4 = v51;
          BOOL v6 = v52;
          if (v49 || (*(unsigned char *)(a5 + 210) & 0x20) != 0) {
            goto LABEL_95;
          }
        }
LABEL_57:
        if (v30 > *(_DWORD *)(a5 + 212))
        {
          *(void *)(a5 + 168) = v31;
          int v9 = 115;
          goto LABEL_86;
        }
        if (!v30) {
          goto LABEL_95;
        }
        int v44 = *(unsigned int **)(a5 + 224);
        unsigned int v45 = *v44;
        if (*v44 != 0x80000000)
        {
          do
          {
            if ((v45 & 0xFFFF0000) == 0x80050000)
            {
              ++v44;
            }
            else if (v45 == (v30 | 0x80080000))
            {
              break;
            }
            unsigned int v46 = v44[1];
            ++v44;
            unsigned int v45 = v46;
          }
          while (v46 != 0x80000000);
        }
        uint64_t v53 = v44;
        char v47 = parsed_skip(v44 + 1, 2);
        if (!v47)
        {
LABEL_93:
          int v9 = 190;
          goto LABEL_86;
        }
        if (v56 > v44 && v56 < v47) {
          goto LABEL_95;
        }
        if (!a4)
        {
LABEL_71:
          uint64_t v54 = a4;
          uint64_t v55 = v44;
          uint64_t v53 = v44 + 1;
          int grouplength = get_grouplength(&v53, 0, (uint64_t)a2, (uint64_t)a3, v30, (uint64_t)&v54, a5);
          if (grouplength < 0)
          {
            if (!*a2) {
              goto LABEL_95;
            }
            return 0xFFFFFFFFLL;
          }
LABEL_6:
          if ((int)(v13 ^ 0x7FFFFFFF) < grouplength) {
            goto LABEL_85;
          }
          uint64_t v13 = (grouplength + v13);
          if ((int)v13 >= 0x10000) {
            goto LABEL_85;
          }
          uint64_t v7 = ++v56;
          unsigned int v14 = grouplength;
          continue;
        }
        uint64_t v48 = (void *)a4;
        while ((unsigned int *)v48[1] != v44)
        {
          uint64_t v48 = (void *)*v48;
          if (!v48) {
            goto LABEL_71;
          }
        }
LABEL_95:
        int v9 = 125;
LABEL_86:
        *a2 = v9;
        return 0xFFFFFFFFLL;
      case 0x22u:
      case 0x23u:
      case 0x26u:
        int v21 = check_lookbehinds(v7 + 1, &v56, a4, a5, 0);
        *a2 = v21;
        if (v21) {
          return 0xFFFFFFFFLL;
        }
        HIDWORD(v23) = v56[1];
        LODWORD(v23) = HIDWORD(v23) + 2144075776;
        unsigned int v22 = v23 >> 16;
        BOOL v24 = v22 >= 9;
        unsigned int v25 = v22 - 9;
        if (v24)
        {
          if (v25 >= 3)
          {
LABEL_17:
            int grouplength = 0;
          }
          else
          {
            int grouplength = 0;
            int v20 = v56 + 3;
LABEL_12:
            unsigned __int16 v56 = v20;
          }
        }
        else
        {
          int grouplength = 0;
          ++v56;
        }
        goto LABEL_6;
      case 0x24u:
      case 0x25u:
      case 0x27u:
        if (!set_lookbehind_lengths(&v56, a2, a3, a4, a5)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_17;
      case 0x28u:
      case 0x2Cu:
      case 0x2Eu:
      case 0x30u:
      case 0x32u:
        int grouplength = 0;
        int v20 = &v7[v7[1] + 1];
        goto LABEL_12;
      case 0x29u:
      case 0x2Au:
        uint64_t v7 = parsed_skip(v7, 0);
        if (!v7) {
          goto LABEL_93;
        }
LABEL_92:
        *BOOL v6 = v7;
        return v13;
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
        unsigned int v27 = v7[2];
        char v26 = v7 + 2;
        int v28 = *(v26 - 1);
        if (v28 != v27) {
          goto LABEL_95;
        }
        unsigned int v29 = v28 - 1;
        if (v28 == 1)
        {
LABEL_44:
          int grouplength = 0;
        }
        else if (v28)
        {
          if (v14 && 0x7FFFFFFF / v14 < v29)
          {
LABEL_85:
            int v9 = 187;
            goto LABEL_86;
          }
          int grouplength = v29 * v14;
        }
        else
        {
          int grouplength = 0;
          LODWORD(v13) = v13 - v14;
        }
        unsigned __int16 v56 = v26;
        goto LABEL_6;
      default:
        goto LABEL_95;
    }
  }
}

unsigned int *parsed_skip(unsigned int *a1, int a2)
{
  int v2 = 0;
  while (2)
  {
    unint64_t v3 = *a1;
    uint64_t v4 = 0;
    switch(WORD1(v3) ^ 0x8000)
    {
      case 0:
        return v4;
      case 1:
        uint64_t v4 = a1;
        if (v2 | a2) {
          goto LABEL_5;
        }
        return v4;
      case 2:
      case 8:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x1A:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
        ++v2;
        goto LABEL_5;
      case 3:
        a1 += 2 * ((*a1 & 0xFFFE) > 9);
        goto LABEL_5;
      case 0xD:
        uint64_t v4 = a1;
        if (a2 == 1) {
          return v4;
        }
        goto LABEL_5;
      case 0x18:
        BOOL v6 = a1 + 1;
        if ((unsigned __int16)*a1 - 15 > 1) {
          BOOL v6 = a1;
        }
        if ((unsigned __int16)*a1 - 27 >= 2) {
          a1 = v6;
        }
        else {
          a1 += 3;
        }
        goto LABEL_5;
      case 0x19:
        if (!v2) {
          return a1;
        }
        --v2;
LABEL_5:
        uint64_t v5 = (v3 >> 16) & 0x7FFF;
        if (v5 <= 0x3F)
        {
          a1 += meta_extra_lengths[v5];
LABEL_7:
          ++a1;
          continue;
        }
        return 0;
      case 0x29:
      case 0x2D:
      case 0x2F:
      case 0x31:
      case 0x33:
        a1 += a1[1];
        goto LABEL_5;
      default:
        if ((v3 & 0x80000000) != 0) {
          goto LABEL_5;
        }
        goto LABEL_7;
    }
  }
}

uint64_t get_grouplength(unsigned int **a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  if (a5 < 1 || (*(unsigned char *)(a7 + 210) & 0x20) != 0) {
    goto LABEL_5;
  }
  LODWORD(v13) = *(_DWORD *)(*(void *)(a7 + 240) + 4 * a5);
  if ((v13 & 0x40000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if ((v13 & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t branchlength = get_branchlength(a1, a3, a4, a6, a7);
    if ((branchlength & 0x80000000) == 0)
    {
      int v15 = -1;
      do
      {
        uint64_t v13 = branchlength;
        if (v15 != -1 && v15 != branchlength) {
          break;
        }
        if (**a1 == -2145845248)
        {
          if (a5 >= 1) {
            *(_DWORD *)(*(void *)(a7 + 240) + 4 * a5) |= branchlength | 0x80000000;
          }
          return v13;
        }
        ++*a1;
        uint64_t branchlength = get_branchlength(a1, a3, a4, a6, a7);
        int v15 = v13;
      }
      while ((branchlength & 0x80000000) == 0);
    }
    if (a5 >= 1) {
      *(_DWORD *)(*(void *)(a7 + 240) + 4 * a5) |= 0x40000000u;
    }
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    *a1 = parsed_skip(*a1, 2);
  }
  return (unsigned __int16)v13;
}

uint64_t add_list_to_class(uint64_t result, unsigned char **a2, int a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v5 = *a5;
  if (*a5 != -1)
  {
    uint64_t v9 = result;
    do
    {
      unsigned int v10 = -1;
      do
      {
        uint64_t v11 = v10 + 2;
        ++v10;
      }
      while (v5 + v10 + 1 == a5[v11]);
      unint64_t v12 = &a5[v11];
      *(_DWORD *)(a4 + 264) = v5;
      *(_DWORD *)(a4 + 268) = a5[v10];
      uint64_t result = add_to_class_internal(v9, a2, a3, a4, *a5, a5[v10], *a5);
      unsigned int v5 = *v12;
      a5 = v12;
    }
    while (*v12 != -1);
  }
  return result;
}

uint64_t add_not_list_to_class(uint64_t a1, unsigned char **a2, int a3, uint64_t a4, int *a5)
{
  int v10 = *a5;
  if (!*a5
    || (*(_DWORD *)(a4 + 264) = 0,
        *(_DWORD *)(a4 + 268) = v10 - 1,
        uint64_t result = add_to_class_internal(a1, a2, a3, a4, 0, v10 - 1, v10),
        int v10 = *a5,
        *a5 != -1))
  {
    if ((a3 & 0x80000) != 0) {
      int v12 = 1114111;
    }
    else {
      int v12 = -1;
    }
    for (char i = a5 + 1; ; ++i)
    {
      int v14 = *i;
      unsigned int v15 = v10 + 1;
      if (*i != v10 + 1)
      {
        unsigned int v16 = v14 == -1 ? v12 : v14 - 1;
        *(_DWORD *)(a4 + 264) = v15;
        *(_DWORD *)(a4 + 268) = v16;
        uint64_t result = add_to_class_internal(a1, a2, a3, a4, v15, v16, v14 - 1);
        int v14 = *i;
        if (*i == -1) {
          break;
        }
      }
      int v10 = v14;
    }
  }
  return result;
}

uint64_t find_dupname_details(unsigned __int8 *a1, unsigned int a2, unsigned int *a3, int *a4, _DWORD *a5, uint64_t a6)
{
  int v12 = *(unsigned __int8 **)(a6 + 72);
  unsigned int v13 = *(unsigned __int16 *)(a6 + 176);
  if (*(_WORD *)(a6 + 176))
  {
    unsigned int v14 = 0;
    uint64_t v15 = a2 + 2;
    while (_pcre2_strncmp_8(a1, v12 + 2, a2) || v12[v15])
    {
      v12 += *(unsigned __int16 *)(a6 + 178);
      ++v14;
      unsigned int v13 = *(unsigned __int16 *)(a6 + 176);
      if (v14 >= v13) {
        goto LABEL_9;
      }
    }
    unsigned int v13 = *(unsigned __int16 *)(a6 + 176);
  }
  else
  {
    unsigned int v14 = 0;
  }
LABEL_9:
  if (v14 >= v13)
  {
    uint64_t result = 0;
    *a5 = 153;
    *(void *)(a6 + 168) = &a1[-*(void *)(a6 + 56)];
  }
  else
  {
    *a3 = v14;
    int v16 = 1;
    do
    {
      int v17 = v16;
      unsigned int v18 = __rev16(*(unsigned __int16 *)v12);
      int v19 = 1 << v18;
      if (v18 >= 0x20) {
        int v19 = 1;
      }
      unsigned int v20 = *(_DWORD *)(a6 + 248);
      *(_DWORD *)(a6 + 252) |= v19;
      if (v18 > v20) {
        *(_DWORD *)(a6 + 248) = v18;
      }
      if (v14 + v17 >= *(unsigned __int16 *)(a6 + 176)) {
        break;
      }
      v12 += *(unsigned __int16 *)(a6 + 178);
      if (_pcre2_strncmp_8(a1, v12 + 2, a2)) {
        break;
      }
      int v16 = v17 + 1;
    }
    while (!v12[a2 + 2]);
    *a4 = v17;
    return 1;
  }
  return result;
}

uint64_t add_to_class_internal@<X0>(uint64_t a1@<X0>, unsigned char **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, int a7@<W8>)
{
  unsigned int v7 = a6;
  unsigned int v8 = a5;
  LODWORD(v10) = a3;
  if (a6 >= 0xFF) {
    unsigned int v12 = 255;
  }
  else {
    unsigned int v12 = a6;
  }
  if ((a3 & 8) == 0) {
    goto LABEL_5;
  }
  if ((a3 & 0xA0000) != 0)
  {
    uint64_t v13 = 0;
    uint64_t v10 = a3 & 0xFFFFFFF7;
    unsigned int v14 = a5;
LABEL_8:
    unsigned int v36 = v14 - 1;
    unsigned int v40 = v14;
LABEL_9:
    unsigned int v37 = v7 + 1;
    while (v8 <= v7)
    {
      signed int v15 = v8;
      while (1)
      {
        a7 = _pcre2_ucd_stage2_8[v15 - (a7 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v15 / 128] << 7)];
        if (_pcre2_ucd_records_8[12 * a7 + 3])
        {
          unsigned int v8 = v15 + 1;
          int v16 = &_pcre2_ucd_caseless_sets_8[_pcre2_ucd_records_8[12 * a7 + 3]];
          int v17 = *v16;
          if (*v16 == -1)
          {
            int v18 = 0;
          }
          else
          {
            unsigned int v38 = v12;
            unsigned int v39 = v7;
            int v18 = 0;
            do
            {
              if (v17 == v15)
              {
                int v19 = 0;
                int v17 = v16[1];
              }
              else
              {
                int v19 = -1;
                do
                {
                  int v20 = v16[v19 + 2];
                  ++v19;
                }
                while (v17 + v19 + 1 == v20);
                v18 += add_to_class_internal(a1, a2, v10, a4);
                int v17 = v20;
              }
              v16 += (v19 + 1);
            }
            while (v17 != -1);
            unsigned int v12 = v38;
            unsigned int v7 = v39;
          }
          goto LABEL_37;
        }
        a7 = *(_DWORD *)&_pcre2_ucd_records_8[12 * a7 + 4];
        if (a7) {
          break;
        }
        if (++v15 > v7) {
          goto LABEL_45;
        }
      }
      unsigned int v21 = v15 + 1;
      int v22 = v15 + a7;
      do
      {
        unsigned int v23 = v22;
        unsigned int v8 = v21;
        if (v21 > v7) {
          break;
        }
        int v24 = _pcre2_ucd_stage2_8[v21 - (v22 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[(int)v21 / 128] << 7)];
        if (_pcre2_ucd_records_8[12
                                * _pcre2_ucd_stage2_8[v8 - (v22 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v22 >> 7] << 7)]
                                + 3])
          break;
        ++v22;
        int v25 = *(_DWORD *)&_pcre2_ucd_records_8[12 * v24 + 4];
        unsigned int v21 = v8 + 1;
      }
      while (v22 == v25 + v8);
      if ((v15 + a7) < *(_DWORD *)(a4 + 264) || v23 > *(_DWORD *)(a4 + 268))
      {
        if (v15 + a7 < v14 && v23 >= v36)
        {
          unsigned int v14 = v15 + a7;
          goto LABEL_8;
        }
        if (v23 <= v7 || v15 + a7 > v37)
        {
          int v18 = add_to_class_internal(a1, a2, v10, a4);
LABEL_37:
          uint64_t v13 = (v18 + v13);
          unsigned int v14 = v40;
          continue;
        }
        if (v23 >= 0xFF) {
          a7 = 255;
        }
        else {
          a7 = v23;
        }
        if (v23 > v12) {
          unsigned int v12 = a7;
        }
        unsigned int v7 = v23;
        goto LABEL_9;
      }
    }
LABEL_45:
    unsigned int v8 = v14;
  }
  else
  {
    if (v12 < a5)
    {
LABEL_5:
      uint64_t v13 = 0;
      goto LABEL_50;
    }
    uint64_t v26 = a5;
    uint64_t v27 = v12 + 1;
    do
    {
      unint64_t v28 = *(unsigned __int8 *)(*(void *)(a4 + 16) + v26);
      *(unsigned char *)(a1 + (v28 >> 3)) |= 1 << (v28 & 7);
      ++v26;
    }
    while (v27 != v26);
    uint64_t v13 = v27 - a5;
  }
LABEL_50:
  if (v7 > 0xFF && (v10 & 0x80000) == 0) {
    unsigned int v30 = 255;
  }
  else {
    unsigned int v30 = v7;
  }
  if (v8 <= *(_DWORD *)(a4 + 264) || v30 >= *(_DWORD *)(a4 + 268))
  {
    if (v8 <= v12)
    {
      unsigned int v31 = v8;
      do
      {
        *(unsigned char *)(a1 + ((unint64_t)v31 >> 3)) |= 1 << (v31 & 7);
        uint64_t v13 = (v13 + 1);
        ++v31;
      }
      while (v31 <= v12);
    }
    unsigned int v32 = v8 <= 0x100 ? 256 : v8;
    if (v30 >= v32)
    {
      unsigned int v33 = *a2;
      if ((v10 & 0x80000) != 0)
      {
        if (v32 < v7)
        {
          *unsigned int v33 = 2;
          uint64_t v34 = (uint64_t)&v33[_pcre2_ord2utf_8(v32, (uint64_t)(v33 + 1)) + 1];
LABEL_70:
          unsigned int v33 = (unsigned char *)(v34 + _pcre2_ord2utf_8(v7, v34));
          goto LABEL_71;
        }
        if (v32 == v7)
        {
          *unsigned int v33 = 1;
          uint64_t v34 = (uint64_t)(v33 + 1);
          goto LABEL_70;
        }
      }
LABEL_71:
      *a2 = v33;
    }
  }
  return v13;
}

unsigned __int8 *first_significant_code(unsigned __int8 *result, int a2)
{
  while (1)
  {
    uint64_t v2 = *result;
    switch(*result)
    {
      case 0x76u:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
        goto LABEL_10;
      case 0x77u:
        result += __rev16(*(unsigned __int16 *)(result + 5));
        continue;
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x82u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x96u:
      case 0x97u:
      case 0x98u:
      case 0x9Au:
      case 0x9Cu:
      case 0x9Eu:
      case 0xA0u:
      case 0xA2u:
      case 0xA3u:
      case 0xA4u:
      case 0xA5u:
        return result;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x83u:
        if (!a2) {
          return result;
        }
        do
        {
          result += __rev16(*(unsigned __int16 *)(result + 1));
          uint64_t v2 = *result;
        }
        while (v2 == 120);
LABEL_10:
        result += _pcre2_OP_lengths_8[v2];
        break;
      case 0x8Au:
      case 0x8Fu:
        if (result[3] != 148) {
          return result;
        }
        unsigned int v4 = __rev16(*(unsigned __int16 *)(result + 1));
        if (result[v4] != 121) {
          return result;
        }
        result += v4 + 3;
        break;
      case 0x99u:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Fu:
      case 0xA1u:
        result += result[1] + (unint64_t)_pcre2_OP_lengths_8[v2];
        continue;
      case 0xA6u:
        result += __rev16(*((unsigned __int16 *)result + 1)) + 4;
        continue;
      default:
        if ((v2 - 4) < 2 && a2 != 0) {
          goto LABEL_10;
        }
        return result;
    }
  }
}

uint64_t pcre2_pattern_info_8(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  if (!a3 && a2 < 0x1B) {
    return dword_20D60D3B0[a2];
  }
  if (!a1) {
    return 4294967245;
  }
  if (*(_DWORD *)(a1 + 80) != 1346589253) {
    return 4294967265;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 1) == 0) {
    return 4294967264;
  }
  switch(a2)
  {
    case 0u:
      int v6 = *(_DWORD *)(a1 + 88);
      goto LABEL_51;
    case 1u:
      int v6 = *(_DWORD *)(a1 + 84);
      goto LABEL_51;
    case 2u:
      int v6 = *(unsigned __int16 *)(a1 + 130);
      goto LABEL_51;
    case 3u:
      int v6 = *(unsigned __int16 *)(a1 + 120);
      goto LABEL_51;
    case 4u:
      int v6 = *(unsigned __int16 *)(a1 + 128);
      goto LABEL_51;
    case 5u:
      if ((v5 & 0x10) == 0) {
        goto LABEL_23;
      }
      int v6 = *(_DWORD *)(a1 + 112);
      goto LABEL_51;
    case 6u:
      if ((v5 & 0x10) != 0) {
        int v6 = 1;
      }
      else {
        int v6 = (v5 >> 8) & 2;
      }
      goto LABEL_51;
    case 7u:
      if ((v5 & 0x40) != 0) {
        uint64_t v7 = a1 + 40;
      }
      else {
        uint64_t v7 = 0;
      }
      goto LABEL_47;
    case 8u:
      int v6 = (v5 >> 11) & 1;
      goto LABEL_51;
    case 9u:
      int v6 = (v5 >> 10) & 1;
      goto LABEL_51;
    case 0xAu:
      size_8 = *(void **)(a1 + 32);
      if (size_8) {
        size_8 = (void *)_pcre2_jit_get_size_8(size_8);
      }
      *a3 = (uint64_t)size_8;
      goto LABEL_52;
    case 0xBu:
      if ((v5 & 0x80) != 0) {
        int v6 = *(_DWORD *)(a1 + 116);
      }
      else {
LABEL_23:
      }
        int v6 = 0;
      goto LABEL_51;
    case 0xCu:
      int v6 = (v5 >> 7) & 1;
      goto LABEL_51;
    case 0xDu:
      int v6 = (v5 >> 13) & 1;
      goto LABEL_51;
    case 0xEu:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 104);
      int v8 = *(_DWORD *)(a1 + 104);
      goto LABEL_44;
    case 0xFu:
      int v6 = *(unsigned __int16 *)(a1 + 124);
      goto LABEL_51;
    case 0x10u:
      int v6 = *(unsigned __int16 *)(a1 + 126);
      goto LABEL_51;
    case 0x11u:
      int v6 = *(unsigned __int16 *)(a1 + 134);
      goto LABEL_51;
    case 0x12u:
      int v6 = *(unsigned __int16 *)(a1 + 132);
      goto LABEL_51;
    case 0x13u:
      uint64_t v7 = a1 + 136;
      goto LABEL_47;
    case 0x14u:
      int v6 = *(unsigned __int16 *)(a1 + 122);
      goto LABEL_51;
    case 0x15u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 108);
      int v8 = *(_DWORD *)(a1 + 108);
      goto LABEL_44;
    case 0x16u:
      uint64_t v7 = *(void *)(a1 + 72);
      goto LABEL_47;
    case 0x17u:
      int v6 = (v5 >> 22) & 1;
      goto LABEL_51;
    case 0x18u:
      uint64_t v7 = 16 * *(unsigned __int16 *)(a1 + 128) + 128;
LABEL_47:
      *a3 = v7;
      goto LABEL_52;
    case 0x19u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 100);
      int v8 = *(_DWORD *)(a1 + 100);
LABEL_44:
      if (v8 != -1) {
        goto LABEL_52;
      }
      uint64_t result = 4294967241;
      break;
    case 0x1Au:
      int v6 = *(_DWORD *)(a1 + 92);
LABEL_51:
      *(_DWORD *)a3 = v6;
LABEL_52:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 4294967262;
      break;
  }
  return result;
}

uint64_t _pcre2_is_newline_8(unsigned __int8 *a1, int a2, uint64_t a3, int *a4, int a5)
{
  int v5 = *a1;
  if (a5 && v5 >= 0xC0)
  {
    int v6 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      int v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_13;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        int v9 = a1[2] & 0x3F;
        int v10 = a1[3] & 0x3F;
        int v11 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          int v5 = ((v5 & 3) << 24) | (v6 << 18) | (v9 << 12) | (v10 << 6) | v11;
          goto LABEL_13;
        }
        int v7 = ((v5 & 1) << 30) | (v6 << 24) | (v9 << 18) | (v10 << 12) | (v11 << 6);
        unsigned __int8 v8 = a1[5];
      }
      else
      {
        int v7 = ((v5 & 7) << 18) | (v6 << 12) | ((a1[2] & 0x3F) << 6);
        unsigned __int8 v8 = a1[3];
      }
    }
    else
    {
      int v7 = ((v5 & 0xF) << 12) | (v6 << 6);
      unsigned __int8 v8 = a1[2];
    }
    int v5 = v7 & 0xFFFFFFC0 | v8 & 0x3F;
  }
LABEL_13:
  if (a2 != 2)
  {
    uint64_t v12 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133) {
          return v12;
        }
        if (a5) {
          int v13 = 2;
        }
        else {
          int v13 = 1;
        }
      }
      else
      {
        int v13 = 3;
      }
LABEL_31:
      *a4 = v13;
      return 1;
    }
    if ((v5 - 10) >= 3)
    {
      if (v5 != 13) {
        return v12;
      }
      goto LABEL_23;
    }
LABEL_19:
    int v13 = 1;
    goto LABEL_31;
  }
  if (v5 == 10) {
    goto LABEL_19;
  }
  if (v5 == 13)
  {
LABEL_23:
    int v13 = 1;
    if (a3 - 1 > (unint64_t)a1)
    {
      if (a1[1] == 10) {
        int v13 = 2;
      }
      else {
        int v13 = 1;
      }
    }
    goto LABEL_31;
  }
  return 0;
}

uint64_t _pcre2_was_newline_8(unsigned char *a1, int a2, unint64_t a3, int *a4, int a5)
{
  if (!a5)
  {
    int v8 = *--a1;
    int v5 = v8;
    goto LABEL_15;
  }
  do
  {
    int v6 = *--a1;
    int v5 = v6;
  }
  while ((v6 & 0xC0) == 0x80);
  if (v5 >= 0xC0)
  {
    int v7 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      int v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_15;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        int v11 = a1[2] & 0x3F;
        int v12 = a1[3] & 0x3F;
        int v13 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          int v5 = ((v5 & 3) << 24) | (v7 << 18) | (v11 << 12) | (v12 << 6) | v13;
          goto LABEL_15;
        }
        int v9 = ((v5 & 1) << 30) | (v7 << 24) | (v11 << 18) | (v12 << 12) | (v13 << 6);
        char v10 = a1[5];
      }
      else
      {
        int v9 = ((v5 & 7) << 18) | (v7 << 12) | ((a1[2] & 0x3F) << 6);
        char v10 = a1[3];
      }
    }
    else
    {
      int v9 = ((v5 & 0xF) << 12) | (v7 << 6);
      char v10 = a1[2];
    }
    int v5 = v9 & 0xFFFFFFC0 | v10 & 0x3F;
  }
LABEL_15:
  if (a2 != 2)
  {
    uint64_t v14 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133) {
          return v14;
        }
        if (a5) {
          int v15 = 2;
        }
        else {
          int v15 = 1;
        }
      }
      else
      {
        int v15 = 3;
      }
LABEL_33:
      *a4 = v15;
      return 1;
    }
    if ((v5 - 11) >= 3)
    {
      if (v5 != 10) {
        return v14;
      }
      goto LABEL_25;
    }
LABEL_21:
    int v15 = 1;
    goto LABEL_33;
  }
  if (v5 == 13) {
    goto LABEL_21;
  }
  if (v5 == 10)
  {
LABEL_25:
    int v15 = 1;
    if ((unint64_t)a1 > a3)
    {
      if (*(a1 - 1) == 13) {
        int v15 = 2;
      }
      else {
        int v15 = 1;
      }
    }
    goto LABEL_33;
  }
  return 0;
}

void *_pcre2_memctl_malloc_8(size_t a1, long long *a2)
{
  if (a2)
  {
    uint64_t result = (void *)(*(uint64_t (**)(size_t, void))a2)(a1, *((void *)a2 + 2));
    if (result)
    {
      long long v4 = *a2;
      result[2] = *((void *)a2 + 2);
      *(_OWORD *)uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = malloc_type_malloc(a1, 0xB9CCD776uLL);
    if (result)
    {
      void *result = default_malloc;
      result[1] = default_free;
      result[2] = 0;
    }
  }
  return result;
}

void *default_malloc(size_t a1)
{
  return malloc_type_malloc(a1, 0xBCB589A9uLL);
}

void *(**pcre2_general_context_create_8(void *(*a1)(size_t a1), void (__cdecl *a2)(void *), void *(*a3)(size_t a1)))(size_t a1)
{
  if (a1)
  {
    int v5 = a1;
    uint64_t result = (void *(**)(size_t))((uint64_t (*)(uint64_t, void *(*)(size_t)))a1)(24, a3);
  }
  else
  {
    int v5 = default_malloc;
    uint64_t result = (void *(**)(size_t))((uint64_t (*)(uint64_t, void *(*)(size_t)))default_malloc)(24, a3);
  }
  if (result)
  {
    if (a2) {
      int v7 = a2;
    }
    else {
      int v7 = default_free;
    }
    void *result = v5;
    result[1] = (void *(*)(size_t))v7;
    result[2] = a3;
  }
  return result;
}

__n128 pcre2_compile_context_create_8(uint64_t a1)
{
  uint64_t v2 = _pcre2_memctl_malloc_8(0x48uLL, (long long *)a1);
  if (v2)
  {
    long long v4 = unk_26C21B118;
    *((_OWORD *)v2 + 2) = xmmword_26C21B108;
    *((_OWORD *)v2 + 3) = v4;
    v2[8] = qword_26C21B128;
    __n128 result = (__n128)unk_26C21B0F8;
    *(_OWORD *)uint64_t v2 = _pcre2_default_compile_context_8;
    *((__n128 *)v2 + 1) = result;
    if (a1)
    {
      __n128 result = *(__n128 *)a1;
      v2[2] = *(void *)(a1 + 16);
      *(__n128 *)uint64_t v2 = result;
    }
  }
  return result;
}

__n128 pcre2_match_context_create_8(uint64_t a1)
{
  uint64_t v2 = _pcre2_memctl_malloc_8(0x60uLL, (long long *)a1);
  if (v2)
  {
    long long v4 = unk_26C21B160;
    v2[2] = xmmword_26C21B150;
    v2[3] = v4;
    long long v5 = unk_26C21B180;
    v2[4] = xmmword_26C21B170;
    v2[5] = v5;
    result.n128_u64[0] = _pcre2_default_match_context_8;
    long long v6 = unk_26C21B140;
    *uint64_t v2 = _pcre2_default_match_context_8;
    v2[1] = v6;
    if (a1)
    {
      __n128 result = *(__n128 *)a1;
      *((void *)v2 + 2) = *(void *)(a1 + 16);
      *uint64_t v2 = result;
    }
  }
  return result;
}

uint64_t pcre2_general_context_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 8))(result, *(void *)(result + 16));
  }
  return result;
}

uint64_t pcre2_set_substitute_callout_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  return 0;
}

uint64_t brkhlp_ScanFilesForEnginesAndAddOns(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    ssftmap_Clear(*(void *)(a1 + 40));
  }
  uint64_t result = brkhlp_FindAllEnginesAndAddOns(a1, *(char **)(a2 + 16));
  if (*(void *)(a2 + 32) && (result & 0x80000000) == 0 && *(_WORD *)(a2 + 24))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t result = brkhlp_FindAllEnginesAndAddOns(a1, *(char **)(*(void *)(a2 + 32) + 8 * v6));
      if ((result & 0x80000000) != 0) {
        break;
      }
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 24));
  }
  return result;
}

uint64_t brkhlp_FindAllEnginesAndAddOns(uint64_t a1, char *a2)
{
  uint64_t v48 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  __s1 = 0;
  uint64_t v55 = 0;
  uint64_t v52 = 0;
  __s = 0;
  uint64_t v51 = 0;
  int v50 = 1;
  uint64_t FirstFile = brkhlp_FindFirstFile(v4, a2, "*.hdr", (const char **)&__s, (uint64_t *)&v55);
  if ((FirstFile & 0x80000000) != 0) {
    return FirstFile;
  }
  char v47 = 0;
  do
  {
    if (!v55)
    {
      uint64_t FirstFile = brkhlp_FindFirstFile(v4, a2, "*.dat", (const char **)&__s, (uint64_t *)&__s1);
      if ((FirstFile & 0x80000000) != 0) {
        return FirstFile;
      }
      if (!__s1) {
        goto LABEL_43;
      }
      while (1)
      {
        unsigned int v21 = __s;
        log_OutText(*(void *)(v4 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_FindHdrFileAndAddItem szFullPathName=%s", v18, v19, v20, (uint64_t)__s);
        int v22 = strrchr(v21, 47);
        if (v22) {
          unsigned int v23 = v22;
        }
        else {
          unsigned int v23 = v21 - 1;
        }
        int v24 = strlen(v21) + v21 - v23;
        int v25 = (char *)heap_Alloc(*(void *)(v4 + 8), (v24 - 4));
        if (!v25) {
          return 2169528330;
        }
        unint64_t v26 = (unint64_t)v25;
        strncpy(v25, v23 + 1, (v24 - 5))[v24 - 5] = 0;
        log_OutText(*(void *)(v4 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_FindHdrFileAndAddItem szSurrogateBrokerString=%s", v27, v28, v29, v26);
        unsigned int v30 = __s;
        uint64_t v31 = hdrpars_CreateSurrogateTagMap(*(void **)(v4 + 8), v26, (uint64_t)__s, &v52);
        if ((v31 & 0x80000000) != 0)
        {
          uint64_t NextFile = v31;
        }
        else
        {
          uint64_t NextFile = brkhlp_AddItemToClass((uint64_t)v30, v52, a1);
          if ((NextFile & 0x80000000) == 0) {
            log_OutText(*(void *)(v4 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_FindHdrFileAndAddItem AddedNewSurrogateBrokerString=%s", v32, v33, v34, v26);
          }
        }
        heap_Free(*(void **)(v4 + 8), v26);
        heap_Free(*(void **)(v4 + 8), (uint64_t)v30);
        if ((NextFile & 0x80000000) != 0) {
          break;
        }
        uint64_t NextFile = brkhlp_FindNextFile(__s1, a2, (const char **)&__s, *(void **)(v4 + 8), &v50);
        p_s1 = (uint64_t *)&__s1;
        if ((NextFile & 0x80000000) != 0 || !v50) {
          goto LABEL_42;
        }
        if (!__s1) {
          goto LABEL_43;
        }
      }
      unsigned int v36 = &__s1;
      goto LABEL_85;
    }
    unint64_t v6 = __s;
    unsigned int v7 = strlen(__s);
    if (v7 < 5 || strncmp(&__s[v7 - 4], ".hdr", 4uLL)) {
      goto LABEL_6;
    }
    uint64_t NextFile = hdrpars_ReadHeader(*(_WORD **)a1, *(void *)(a1 + 8), v6, 0, &v52, &v51);
    if ((NextFile & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(v4 + 32), (uint64_t)"BROKER", 276, "%s%s", v10, v11, v12, v13, "file");
      if ((NextFile & 0x1FFF) == 0xA) {
        goto LABEL_83;
      }
LABEL_6:
      heap_Free(*(void **)(v4 + 8), (uint64_t)v6);
      goto LABEL_7;
    }
    if (!v51)
    {
      uint64_t v17 = brkhlp_ExpandComponentPath(a1, v52);
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t NextFile = brkhlp_AddItemToClass((uint64_t)v6, v52, a1);
        goto LABEL_25;
      }
      uint64_t NextFile = v17;
LABEL_83:
      heap_Free(*(void **)(v4 + 8), (uint64_t)v6);
LABEL_84:
      unsigned int v36 = &v55;
LABEL_85:
      int v44 = *v36;
      goto LABEL_86;
    }
    int v49 = 0;
    if (vector_GetElemAt(v51, 0, &v49))
    {
      unsigned int v14 = 1;
      while (1)
      {
        if ((NextFile & 0x80000000) != 0) {
          goto LABEL_18;
        }
        uint64_t v15 = brkhlp_ExpandComponentPath(a1, *v49);
        if ((v15 & 0x80000000) != 0) {
          break;
        }
        uint64_t NextFile = brkhlp_AddItemToClass((uint64_t)v6, *v49, a1);
LABEL_19:
        if (!vector_GetElemAt(v51, v14++, &v49)) {
          goto LABEL_20;
        }
      }
      uint64_t NextFile = v15;
LABEL_18:
      ssftmap_ObjClose(*v49);
      goto LABEL_19;
    }
LABEL_20:
    vector_ObjClose(v51);
    uint64_t v51 = 0;
LABEL_25:
    heap_Free(*(void **)(v4 + 8), (uint64_t)v6);
    if ((NextFile & 0x80000000) != 0) {
      goto LABEL_84;
    }
LABEL_7:
    uint64_t NextFile = brkhlp_FindNextFile(v55, a2, (const char **)&__s, *(void **)(v4 + 8), &v50);
    p_s1 = (uint64_t *)&v55;
  }
  while ((NextFile & 0x80000000) == 0 && v50);
LABEL_42:
  osspi_FindClose(*p_s1);
  if ((NextFile & 0x80000000) != 0) {
    return NextFile;
  }
LABEL_43:
  char v47 = 0;
  uint64_t v48 = 0;
  if (!a2) {
    goto LABEL_69;
  }
  __s1 = 0;
  uint64_t v55 = 0;
  uint64_t FirstFile = brkhlp_ConcatenatePath((const char **)&v55, a2, "*", 0, *(void *)(v4 + 8));
  if ((FirstFile & 0x80000000) != 0) {
    return FirstFile;
  }
  uint64_t v35 = v55;
  LODWORD(NextFile) = osspi_FindOpen(*(void **)(v4 + 64), *(void **)(v4 + 8), (uint64_t)v55, 16, (uint64_t)&__s1, (uint64_t *)&v48);
  if ((NextFile & 0x80000000) == 0)
  {
    while ((NextFile & 0x80000000) == 0)
    {
      uint64_t NextFile = (uint64_t)__s1;
      if (strcmp(__s1, ".") && strcmp((const char *)NextFile, ".."))
      {
        int v38 = brkhlp_ConcatenatePath(&v47, a2, (const char *)NextFile, 0, *(void *)(v4 + 8));
        LODWORD(NextFile) = 0;
        if ((v38 & 0x80000000) == 0)
        {
LABEL_58:
          if (__s1) {
            heap_Free(*(void **)(v4 + 8), (uint64_t)__s1);
          }
          goto LABEL_60;
        }
        int v46 = v38;
        unsigned int v37 = v48;
        LODWORD(NextFile) = v46;
        if (!v48)
        {
LABEL_56:
          uint64_t v48 = 0;
          goto LABEL_58;
        }
LABEL_55:
        osspi_FindClose((uint64_t)v37);
        goto LABEL_56;
      }
      heap_Free(*(void **)(v4 + 8), NextFile);
      __s1 = 0;
      LODWORD(NextFile) = osspi_FindNext(v48, (uint64_t)&__s1);
      if ((NextFile & 0x1FFF) == 0x14)
      {
        uint64_t NextFile = 0;
        goto LABEL_63;
      }
    }
    unsigned int v37 = v48;
    if (!v48) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
LABEL_60:
  if ((NextFile & 0x1FFF) == 0x14) {
    uint64_t NextFile = 0;
  }
  else {
    uint64_t NextFile = NextFile;
  }
LABEL_63:
  if (v35) {
    heap_Free(*(void **)(v4 + 8), (uint64_t)v35);
  }
  if (!v47 && v48)
  {
    osspi_FindClose((uint64_t)v48);
    uint64_t v48 = 0;
  }
  if ((NextFile & 0x80000000) == 0)
  {
LABEL_69:
    if (v48)
    {
      while (1)
      {
        unsigned int v39 = v47;
        uint64_t NextFile = brkhlp_FindAllEnginesAndAddOns(a1, v47);
        heap_Free(*(void **)(v4 + 8), (uint64_t)v39);
        if ((NextFile & 0x80000000) != 0) {
          break;
        }
        unsigned int v40 = v48;
        int v41 = *(void **)(v4 + 8);
        uint64_t v55 = 0;
        char v47 = 0;
        unsigned int Next = osspi_FindNext(v48, (uint64_t)&v55);
        if ((Next & 0x80000000) != 0)
        {
          if ((Next & 0x1FFF) == 0x14) {
            uint64_t NextFile = 0;
          }
          else {
            uint64_t NextFile = Next;
          }
          break;
        }
        while (1)
        {
          unsigned int v43 = v55;
          if ((Next & 0x80000000) != 0 || strcmp(v55, ".") && strcmp(v43, "..")) {
            break;
          }
          heap_Free(v41, (uint64_t)v43);
          uint64_t v55 = 0;
          unsigned int Next = osspi_FindNext(v40, (uint64_t)&v55);
          if ((Next & 0x1FFF) == 0x14)
          {
            uint64_t NextFile = 0;
            goto LABEL_80;
          }
        }
        uint64_t NextFile = brkhlp_ConcatenatePath(&v47, a2, v43, 0, (uint64_t)v41);
        heap_Free(v41, (uint64_t)v55);
        if ((NextFile & 0x80000000) != 0) {
          break;
        }
        uint64_t NextFile = 0;
        if (!v48) {
          return NextFile;
        }
      }
LABEL_80:
      int v44 = (char *)v48;
LABEL_86:
      osspi_FindClose((uint64_t)v44);
    }
    else
    {
      return 0;
    }
  }
  return NextFile;
}

uint64_t brkhlp_FindFirstFile(uint64_t a1, char *a2, const char *a3, const char **a4, uint64_t *a5)
{
  uint64_t v5 = 0;
  *a5 = 0;
  if (a2 && a3)
  {
    unsigned int v14 = 0;
    uint64_t v15 = 0;
    uint64_t v10 = brkhlp_ConcatenatePath(&v15, a2, a3, 0, *(void *)(a1 + 8));
    if ((v10 & 0x80000000) != 0)
    {
      return v10;
    }
    else
    {
      uint64_t v11 = v15;
      Opeuint64_t n = osspi_FindOpen(*(void **)(a1 + 64), *(void **)(a1 + 8), (uint64_t)v15, 0, (uint64_t)&v14, a5);
      if ((Open & 0x80000000) != 0)
      {
        if ((Open & 0x1FFF) == 0x14) {
          uint64_t v5 = 0;
        }
        else {
          uint64_t v5 = Open;
        }
      }
      else
      {
        uint64_t v5 = brkhlp_ConcatenatePath(a4, a2, v14, 0, *(void *)(a1 + 8));
        if ((v5 & 0x80000000) != 0)
        {
          if (*a5) {
            osspi_FindClose(*a5);
          }
          *a5 = 0;
        }
        heap_Free(*(void **)(a1 + 8), (uint64_t)v14);
      }
      heap_Free(*(void **)(a1 + 8), (uint64_t)v11);
    }
  }
  return v5;
}

uint64_t brkhlp_ExpandComponentPath(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v13 = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = "COMPONENT";
  int v5 = brkhlp_SearchTag(a2, (uint64_t)"COMPONENT", &v18);
  if (v5 < 0
    && (uint64_t v4 = "COMMONCOMPONENT", v6 = brkhlp_SearchTag(a2, (uint64_t)"COMMONCOMPONENT", &v18), (v6 & 0x80000000) != 0)
    || (unsigned int v6 = brkhlp_SearchTag(a2, (uint64_t)"HDRFILE", &v17), (v6 & 0x80000000) != 0)
    || (unsigned int v6 = brkhlp_ConcatenatePath(&v13, v17, v18, 1, *(void *)(v3 + 8)), (v6 & 0x80000000) != 0))
  {
    unsigned int v9 = v6;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unsigned int v7 = v13;
    unsigned int v14 = v13;
    unsigned int v8 = ssftmap_Insert(a2, (uint64_t)"FULLPATHCOMPONENT", (uint64_t)&v14);
    if ((v8 & 0x80000000) == 0 || (unsigned int v9 = v8, (v8 & 0x1FFF) == 2)) {
      unsigned int v9 = ssftmap_Remove(a2, (uint64_t)v4);
    }
    heap_Free(*(void **)(v3 + 8), (uint64_t)v7);
    if (v5 < 0 && (v9 & 0x80000000) == 0)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      unsigned int v14 = "1";
      int v10 = ssftmap_Insert(a2, (uint64_t)"COMMON", (uint64_t)&v14);
      if ((v10 & 0x1FFF) == 2) {
        int v11 = 0;
      }
      else {
        int v11 = v10;
      }
      if (v10 < 0) {
        unsigned int v9 = v11;
      }
      else {
        unsigned int v9 = v10;
      }
    }
  }
  if (v9 == -2125438956) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t brkhlp_FindNextFile(void *a1, char *a2, const char **a3, void *a4, _DWORD *a5)
{
  uint64_t v12 = 0;
  *a3 = 0;
  *a5 = 0;
  unsigned int Next = osspi_FindNext(a1, (uint64_t)&v12);
  if ((Next & 0x80000000) != 0)
  {
    if ((Next & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return Next;
    }
  }
  else
  {
    uint64_t v10 = brkhlp_ConcatenatePath(a3, a2, v12, 0, (uint64_t)a4);
    heap_Free(a4, (uint64_t)v12);
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v10 = 0;
      *a5 = 1;
    }
  }
  return v10;
}

uint64_t brkhlp_ConcatenatePath(const char **a1, char *__s, const char *a3, int a4, uint64_t a5)
{
  uint64_t v5 = 2169528320;
  if (__s && a3)
  {
    unsigned int v11 = strlen(__s);
    int v12 = strlen(a3);
    uint64_t v13 = (char *)heap_Alloc(a5, v11 + v12 + 2);
    *a1 = v13;
    if (v13)
    {
      strcpy(v13, __s);
      if (a4)
      {
        uint64_t v14 = v11++;
        while (v14)
        {
          int v15 = (*a1)[--v14];
          --v11;
          if (v15 == 47) {
            goto LABEL_11;
          }
        }
        unsigned int v11 = 0;
LABEL_11:
        (*a1)[v11] = 0;
      }
      if (v12 && v11 && __s[v11 - 1] != 47) {
        *(_WORD *)&(*a1)[strlen(*a1)] = 47;
      }
      strcat((char *)*a1, a3);
      uint64_t v16 = strchr((char *)*a1 + 1, 46);
      if (v16)
      {
        uint64_t v17 = v16;
        while (1)
        {
          uint64_t v18 = v17 - 1;
          if (*(v17 - 1) != 47) {
            goto LABEL_31;
          }
          uint64_t v19 = v17 + 1;
          int v20 = v17[1];
          if (v20 == 46) {
            break;
          }
          if (v20 != 47) {
            goto LABEL_31;
          }
          size_t v21 = strlen(v17 + 2);
          memmove(v17, v17 + 2, v21 + 1);
          uint64_t v19 = v17;
LABEL_32:
          uint64_t v17 = strchr(v19, 46);
          if (!v17) {
            return 0;
          }
        }
        if (v17[2] == 47)
        {
          int v22 = (char *)*a1;
          if (v18 > *a1)
          {
            int v23 = 0;
            int v24 = v17 - 1;
            while (1)
            {
              int v26 = *--v24;
              int v25 = v26;
              if (v26 == 47) {
                break;
              }
              if (v25 != 46) {
                int v23 = 1;
              }
              uint64_t v18 = v24;
              if (v24 <= v22)
              {
                if (!v23) {
                  goto LABEL_32;
                }
                goto LABEL_35;
              }
            }
            int v22 = v18;
            if (!v23) {
              goto LABEL_32;
            }
LABEL_35:
            uint64_t v27 = v17 + 3;
            size_t v28 = strlen(v27);
            memmove(v22, v27, v28 + 1);
            uint64_t v19 = v22;
          }
          goto LABEL_32;
        }
LABEL_31:
        uint64_t v19 = v17 + 1;
        goto LABEL_32;
      }
      return 0;
    }
    else
    {
      return 2169528330;
    }
  }
  return v5;
}

uint64_t engbrk_AddSystemInfo(uint64_t a1, char *a2)
{
  uint64_t result = 2169528326;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = critsec_Enter(*(void **)(a1 + 24));
      if ((result & 0x80000000) == 0)
      {
        int v5 = brkhlp_ScanBufferForEnginesAndAddOns(*(void *)(a1 + 16), a1, a2);
        LODWORD(result) = critsec_Leave(*(void **)(a1 + 24));
        if (v5 > -1 && (int)result < 0) {
          return result;
        }
        else {
          return v5;
        }
      }
    }
  }
  return result;
}

uint64_t brkhlp_ScanBufferForEnginesAndAddOns(uint64_t a1, uint64_t a2, char *__s1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2169528326;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  strcpy(v22, "BINBROKER");
  if (!a2) {
    return v3;
  }
  char i = __s1;
  if (!__s1) {
    return v3;
  }
  if (strncmp(__s1, "<?xml", 5uLL))
  {
    unsigned int v7 = strpbrk(i, "\n\r");
    if (v7)
    {
      for (char i = v7; ; ++i)
      {
        int v8 = *i;
        if (v8 != 13 && v8 != 10) {
          break;
        }
      }
    }
  }
  uint64_t v3 = hdrpars_ReadHeader(*(_WORD **)a2, *(void *)(a2 + 8), 0, i, &v21, &v20);
  if ((v3 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"BROKER", 276, 0, v10, v11, v12, v13, v19);
    return v3;
  }
  if (!v20)
  {
    uint64_t v3 = brkhlp_AddItemToClass((uint64_t)v22, v21, a2);
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
    goto LABEL_24;
  }
  uint64_t v19 = 0;
  if (vector_GetElemAt(v20, 0, &v19))
  {
    unsigned int v14 = 1;
    do
    {
      if ((v3 & 0x80000000) != 0) {
        ssftmap_ObjClose(*v19);
      }
      else {
        uint64_t v3 = brkhlp_AddItemToClass((uint64_t)v22, *v19, a2);
      }
    }
    while (vector_GetElemAt(v20, v14++, &v19));
  }
  vector_ObjClose(v20);
  uint64_t v20 = 0;
  if ((v3 & 0x80000000) == 0)
  {
LABEL_24:
    uint64_t v3 = critsec_Enter(*(void **)(a2 + 56));
    if ((v3 & 0x80000000) == 0)
    {
      if (!ssftmap_GetSize(*(void *)(a2 + 40))) {
        LODWORD(v3) = -2125438710;
      }
      int v16 = critsec_Leave(*(void **)(a2 + 56));
      if ((int)v3 > -1 && v16 < 0) {
        return v16;
      }
      else {
        return v3;
      }
    }
  }
  return v3;
}

uint64_t engbrk_GetSystemInfo(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v3 = 2169528326;
  int v15 = 0;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    if ((ssftstring_ObjOpen(*(void **)(*(void *)(a1 + 16) + 8), &v15) & 0x80000000) == 0)
    {
      uint64_t v7 = critsec_Enter(*(void **)(a1 + 56));
      if ((v7 & 0x80000000) != 0)
      {
        uint64_t v3 = v7;
LABEL_22:
        ssftstring_ObjClose(v15);
        return v3;
      }
      int v8 = v15;
      int Size = ssftmap_GetSize(*(void *)(a1 + 40));
      ssftstring_Reserve((uint64_t)v8, 500 * Size);
      uint64_t v10 = v15;
      uint64_t v11 = *(void *)(a1 + 40);
      int v16 = 0;
      uint64_t v17 = 0;
      if (v11)
      {
        uint64_t v18 = 0;
        uint64_t v12 = ssftmap_IteratorOpen(v11, 0, 1, (uint64_t)&v16);
        uint64_t v3 = v12;
        if ((v12 & 0x80000000) == 0)
        {
          if ((ssftmap_IteratorNext(v16, &v17, &v18) & 0x80000000) == 0)
          {
            while (1)
            {
              uint64_t appended = ssftstring_AppendCStr((uint64_t)v10, "<?xml version=\"1.0\"?>\n<NUANCE>\n<VERSION>NUAN_1.0</VERSION>\n<HEADER>\n");
              if ((appended & 0x80000000) != 0) {
                break;
              }
              uint64_t appended = StoreTagInfo((uint64_t)v10, *v18);
              if ((appended & 0x80000000) != 0) {
                break;
              }
              uint64_t v3 = ssftstring_AppendCStr((uint64_t)v10, "</HEADER>\n</NUANCE>\n");
              if ((v3 & 0x80000000) != 0) {
                goto LABEL_20;
              }
              if ((ssftmap_IteratorNext(v16, &v17, &v18) & 0x80000000) != 0) {
                goto LABEL_13;
              }
            }
            uint64_t v3 = appended;
LABEL_20:
            ssftmap_IteratorClose((uint64_t)v16);
            goto LABEL_21;
          }
LABEL_13:
          ssftmap_IteratorClose((uint64_t)v16);
          goto LABEL_18;
        }
        if ((v12 & 0x1FFF) != 0x14)
        {
LABEL_21:
          critsec_Leave(*(void **)(a1 + 56));
          goto LABEL_22;
        }
      }
      uint64_t v3 = 0;
LABEL_18:
      *a3 = ssftstring_Size((uint64_t)v15) + 1;
      *a2 = ssftstring_CStrDetach((uint64_t)v15);
      goto LABEL_21;
    }
    return 2169528330;
  }
  return v3;
}

uint64_t engbrk_FreeSystemInfo(uint64_t a1, uint64_t a2)
{
  if (a2) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), a2);
  }
  return 0;
}

uint64_t StoreTagInfo(uint64_t a1, uint64_t a2)
{
  __s = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  if (!a2)
  {
    LODWORD(v3) = 0;
LABEL_29:
    if ((v3 & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return v3;
    }
  }
  uint64_t v3 = ssftmap_IteratorOpen(a2, 0, 1, (uint64_t)&v11);
  if ((v3 & 0x80000000) != 0) {
    goto LABEL_29;
  }
  if ((ssftmap_IteratorNext(v11, &__s, &v9) & 0x80000000) != 0) {
    goto LABEL_34;
  }
  while (1)
  {
    uint64_t appended = ssftstring_AppendCStr(a1, "<");
    if ((appended & 0x80000000) != 0 || (uint64_t appended = ssftstring_AppendCStr(a1, __s), (appended & 0x80000000) != 0))
    {
LABEL_33:
      uint64_t v3 = appended;
      goto LABEL_34;
    }
    uint64_t v5 = *(void *)(v9 + 8);
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    uint64_t v12 = 0;
    if (v5) {
      break;
    }
LABEL_18:
    uint64_t appended = ssftstring_AppendCStr(a1, ">");
    if ((appended & 0x80000000) != 0) {
      goto LABEL_33;
    }
    uint64_t appended = ssftstring_AppendCStr(a1, *(char **)v9);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_33;
    }
    if (ssftmap_GetSize(*(void *)(v9 + 16)))
    {
      uint64_t appended = ssftstring_AppendCStr(a1, "\n");
      if ((appended & 0x80000000) != 0) {
        goto LABEL_33;
      }
      uint64_t appended = StoreTagInfo(a1, *(void *)(v9 + 16));
      if ((appended & 0x80000000) != 0) {
        goto LABEL_33;
      }
    }
    uint64_t appended = ssftstring_AppendCStr(a1, "</");
    if ((appended & 0x80000000) != 0) {
      goto LABEL_33;
    }
    uint64_t appended = ssftstring_AppendCStr(a1, __s);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_33;
    }
    uint64_t v3 = ssftstring_AppendCStr(a1, ">\n");
    if ((v3 & 0x80000000) != 0 || (ssftmap_IteratorNext(v11, &__s, &v9) & 0x80000000) != 0) {
      goto LABEL_34;
    }
  }
  uint64_t v6 = ssftmap_IteratorOpen(v5, 0, 1, (uint64_t)&v14);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v3 = v6;
    if ((v6 & 0x1FFF) != 0x14) {
      goto LABEL_34;
    }
    goto LABEL_18;
  }
  do
  {
    if ((ssftmap_IteratorNext(v14, &v13, &v12) & 0x80000000) != 0)
    {
      ssftmap_IteratorClose((uint64_t)v14);
      goto LABEL_18;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, " ");
    if ((v7 & 0x80000000) != 0) {
      break;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, v13);
    if ((v7 & 0x80000000) != 0) {
      break;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, "=\"");
    if ((v7 & 0x80000000) != 0) {
      break;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, v12);
    if ((v7 & 0x80000000) != 0) {
      break;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, "\"");
  }
  while ((v7 & 0x80000000) == 0);
  uint64_t v3 = v7;
  ssftmap_IteratorClose((uint64_t)v14);
LABEL_34:
  ssftmap_IteratorClose((uint64_t)v11);
  return v3;
}

uint64_t brkhlp_SearchTag(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = 0;
  int ReadOnly = ssftmap_FindReadOnly(a1, a2, &v6);
  if ((ReadOnly & 0x80000000) == 0 && v6) {
    *a3 = *v6;
  }
  if (ReadOnly < 0) {
    return 2169528340;
  }
  else {
    return 0;
  }
}

uint64_t brkhlp_ElemCompareKeysBrokerString(char *a1, char *a2)
{
  if ((unint64_t)a1 | (unint64_t)a2) {
    LODWORD(v2) = -1;
  }
  else {
    LODWORD(v2) = 0;
  }
  if (a1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = v2;
  }
  if (a1 && a2) {
    return LH_stricmp(a1, a2);
  }
  else {
    return v2;
  }
}

uint64_t brkhlp_AddItemToClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0;
  int ReadOnly = ssftmap_FindReadOnly(a2, (uint64_t)"BROKERSTRING", &v12);
  if ((ReadOnly & 0x80000000) == 0 && v12)
  {
    uint64_t v10 = *v12;
    return brkhlp_AddNewAddOn(v10, a1, a2, a3, 0, v7, v8, v9);
  }
  if ((ReadOnly & 0x80000000) == 0)
  {
    uint64_t v10 = 0;
    return brkhlp_AddNewAddOn(v10, a1, a2, a3, 0, v7, v8, v9);
  }
  hdrpars_FreeHeader(a2);
  return 2169528340;
}

uint64_t brkhlp_AddNewAddOn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 2169528327;
  }
  uint64_t v9 = a3;
  uint64_t v11 = *(void *)(a4 + 16);
  v22[0] = a3;
  v22[1] = a1;
  v22[2] = a5;
  log_OutText(*(void *)(v11 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_AddNewAddOn: detect= %s", a6, a7, a8, a1);
  unsigned int v12 = critsec_Enter(*(void **)(a4 + 56));
  if ((v12 & 0x80000000) != 0)
  {
    unsigned int v20 = v12;
  }
  else
  {
    int v17 = ssftmap_Insert(*(void *)(a4 + 40), a1, (uint64_t)v22);
    if (v17 < 0) {
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"BROKER", 289, "%s%s", v13, v14, v15, v16, "file");
    }
    int v18 = critsec_Leave(*(void **)(a4 + 56));
    if (v18 >= 0 || v17 <= -1) {
      unsigned int v20 = v17;
    }
    else {
      unsigned int v20 = v18;
    }
    uint64_t v9 = v22[0];
    if (!v22[0]) {
      goto LABEL_16;
    }
  }
  hdrpars_FreeHeader(v9);
LABEL_16:
  if ((v20 & 0x1FFF) == 2) {
    return 0;
  }
  else {
    return v20;
  }
}

uint64_t engbrk_ClassOpen(_WORD *a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v5 = 2169528321;
  *(void *)unsigned int v39 = 0;
  if ((*a3 & 0xFFFE) == 2)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, v39);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(*(void *)v39 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassOpen: Begin", v11, v12, v13, v35);
      uint64_t v14 = (uint64_t *)heap_Calloc(*(void **)(*(void *)v39 + 8), 1, 72);
      if (v14)
      {
        uint64_t v15 = v14;
        *uint64_t v14 = (uint64_t)a1;
        v14[1] = a2;
        uint64_t v16 = *(void *)v39;
        v14[2] = *(void *)v39;
        int v17 = *(void **)(v16 + 8);
        uint64_t v18 = heap_Calloc(v17, 1, 48);
        if (!v18)
        {
LABEL_22:
          char v15[6] = 0;
          uint64_t v5 = 2169528330;
LABEL_32:
          engbrk_ClassClose(v15);
LABEL_33:
          log_OutText(*(void *)(*(void *)v39 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassOpen: End %x", v31, v32, v33, v5);
          return v5;
        }
        uint64_t v19 = v18;
        *(_WORD *)uint64_t v18 = *a3;
        *(void *)(v18 + 8) = 0;
        unsigned int v20 = (char *)*((void *)a3 + 2);
        if (v20)
        {
          uint64_t v21 = brkhlp_CloneString(v17, v20);
          *(void *)(v19 + 16) = v21;
          if (!v21) {
            goto LABEL_21;
          }
        }
        else
        {
          *(void *)(v18 + 16) = 0;
        }
        *(_WORD *)(v19 + 24) = 0;
        if (a3[12])
        {
          uint64_t v22 = heap_Calloc(v17, a3[12], 8);
          *(void *)(v19 + 32) = v22;
          if (!v22)
          {
LABEL_21:
            brkhlp_FreeProductInfo(v17, v19);
            goto LABEL_22;
          }
          if (a3[12])
          {
            uint64_t v23 = 0;
            do
            {
              *(void *)(*(void *)(v19 + 32) + 8 * v23) = brkhlp_CloneString(v17, *(char **)(*((void *)a3 + 4) + 8 * v23));
              if (!*(void *)(*(void *)(v19 + 32) + 8 * v23)) {
                goto LABEL_21;
              }
              ++*(_WORD *)(v19 + 24);
            }
            while (++v23 < (unint64_t)a3[12]);
          }
        }
        else
        {
          *(void *)(v19 + 32) = 0;
        }
        int v24 = (char *)*((void *)a3 + 5);
        if (v24)
        {
          int v25 = brkhlp_CloneString(v17, v24);
          *(void *)(v19 + 40) = v25;
          if (!v25) {
            goto LABEL_21;
          }
        }
        else
        {
          *(void *)(v19 + 40) = 0;
        }
        char v15[6] = v19;
        uint64_t v26 = critsec_ObjOpen(*(void *)(*(void *)v39 + 16), *(void **)(*(void *)v39 + 8), v15 + 3);
        if ((v26 & 0x80000000) != 0) {
          goto LABEL_31;
        }
        uint64_t v27 = *(void **)(*(void *)v39 + 8);
        long long v36 = BRK_ADDON_IELEM;
        long long v37 = *(_OWORD *)&off_26C1EE5D0;
        int v38 = off_26C1EE5E0;
        uint64_t v26 = ssftmap_ObjOpen(v27, 0, &v36, v15 + 5);
        if ((v26 & 0x80000000) != 0
          || (size_t v28 = *(void **)(*(void *)v39 + 8),
              long long v36 = BRK_INTF_IELEM,
              long long v37 = *(_OWORD *)&off_26C1EE620,
              int v38 = off_26C1EE630,
              uint64_t v26 = ssftmap_ObjOpen(v28, 0, &v36, v15 + 4),
              (v26 & 0x80000000) != 0)
          || (uint64_t v26 = critsec_ObjOpen(*(void *)(*(void *)v39 + 16), *(void **)(*(void *)v39 + 8), v15 + 7),
              (v26 & 0x80000000) != 0))
        {
LABEL_31:
          uint64_t v5 = v26;
          goto LABEL_32;
        }
        int v29 = *a3;
        if (v29 == 3)
        {
          uint64_t v30 = brkhlp_ScanBufferForEnginesAndAddOns(*(uint64_t *)v39, (uint64_t)v15, *((char **)a3 + 5));
        }
        else
        {
          if (v29 != 2) {
            goto LABEL_32;
          }
          uint64_t v30 = brkhlp_ScanFilesForEnginesAndAddOns((uint64_t)v15, (uint64_t)a3, 1);
        }
        uint64_t v5 = v30;
        if ((v30 & 0x80000000) == 0)
        {
          *a5 = v15;
          uint64_t v5 = brkhlp_InitializeONNX(*(uint64_t *)v39, v15 + 8);
          if ((v5 & 0x80000000) == 0) {
            goto LABEL_33;
          }
        }
        goto LABEL_32;
      }
      return 2169528330;
    }
  }
  return v5;
}

uint64_t brkhlp_InitializeONNX(uint64_t a1, void *a2)
{
  uint64_t v2 = 2169528327;
  uint64_t v9 = 0;
  *a2 = 0;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 64);
    if (v4)
    {
      if ((osspi_DynModOpen(v4, *(void **)(a1 + 8), (uint64_t)"libcs_onnxruntime.so.1.13.1", 0, (uint64_t *)&v9) & 0x80000000) != 0)
      {
        return 0;
      }
      else
      {
        uint64_t v6 = v9;
        *a2 = v9;
        int v7 = osspi_DynModObjLoad(v6, (uint64_t)"OrtGetApiBase", a1 + 72);
        if (v7 >= 0) {
          return v7;
        }
        else {
          return 2169528333;
        }
      }
    }
  }
  return v2;
}

uint64_t engbrk_ClassClose(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[8];
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 72);
    if (v4) {
      osspi_DynModObjUnload((void *)a1[8], v4);
    }
    osspi_DynModClose(v3);
  }
  uint64_t v5 = a1[4];
  if (v5)
  {
    int v6 = ssftmap_ObjClose(v5);
    a1[4] = 0;
    uint64_t v7 = v6 & (v6 >> 31);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[5];
  if (v8)
  {
    int v9 = ssftmap_ObjClose(v8);
    a1[5] = 0;
    if (v9 >= 0 || (int)v7 <= -1) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v9;
    }
  }
  uint64_t v11 = a1[3];
  if (v11)
  {
    int v12 = critsec_ObjClose(v11);
    a1[3] = 0;
    if (v12 >= 0 || (int)v7 <= -1) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v12;
    }
  }
  uint64_t v14 = a1[7];
  if (v14)
  {
    int v15 = critsec_ObjClose(v14);
    a1[7] = 0;
    if (v15 >= 0 || (int)v7 <= -1) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v15;
    }
  }
  uint64_t v17 = a1[6];
  if (v17)
  {
    brkhlp_FreeProductInfo(*(void **)(v2 + 8), v17);
    a1[6] = 0;
  }
  heap_Free(*(void **)(v2 + 8), (uint64_t)a1);
  return v7;
}

void *brkhlp_FreeProductInfo(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4) {
      heap_Free(result, v4);
    }
    uint64_t v5 = *(void *)(a2 + 32);
    if (v5)
    {
      if (*(_WORD *)(a2 + 24))
      {
        unint64_t v6 = 0;
        do
          heap_Free(v3, *(void *)(*(void *)(a2 + 32) + 8 * v6++));
        while (v6 < *(unsigned __int16 *)(a2 + 24));
        uint64_t v5 = *(void *)(a2 + 32);
      }
      heap_Free(v3, v5);
    }
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7) {
      heap_Free(v3, v7);
    }
    return heap_Free(v3, a2);
  }
  return result;
}

uint64_t engbrk_ClassUpdateEx(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2169528327;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassUpdate: Begin", a6, a7, a8, v16);
  uint64_t v14 = brkhlp_ScanFilesForEnginesAndAddOns(a1, *(void *)(a1 + 48), a2);
  if ((v14 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"BROKER", v14, "brk_ClassUpdate: Scan failed", v10, v11, v12, v13, v17);
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassUpdate: End %x", v11, v12, v13, v14);
  return v14;
}

uint64_t engbrk_ClassUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_ClassUpdateEx(a1, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t engbrk_ObjOpen(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  int v25 = 0;
  *a3 = 0;
  if (a2)
  {
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(v11 + 32);
    if (a1) {
      log_OutText(v12, (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjOpen  Object identifier=%s: Begin", a6, a7, a8, a1);
    }
    else {
      log_OutText(v12, (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjOpen  Object identifier=NULL: Begin", a6, a7, a8, v23);
    }
    uint64_t v17 = heap_Calloc(*(void **)(v11 + 8), 1, 32);
    uint64_t v18 = *(void *)(v11 + 32);
    if (v17)
    {
      *(void *)uint64_t v17 = a2;
      *(void *)(v17 + 8) = v18;
      *(_DWORD *)(v17 + 24) = 0;
      if ((paramc_ParamGetStr(*(void *)(v11 + 40), (uint64_t)"broker_mmap_clc_data", &v25) & 0x80000000) == 0
        && (!LH_stricmp(v25, "yes") || !LH_stricmp(v25, "true")))
      {
        *(_DWORD *)(v17 + 24) = 1;
      }
      *a3 = v17;
      log_OutText(*(void *)(v11 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjOpen : End", v19, v20, v21, v24);
      return 0;
    }
    else
    {
      log_OutPublic(v18, (uint64_t)"BROKER", 200, 0, v13, v14, v15, v16, v24);
      return 2169528330;
    }
  }
  return v8;
}

uint64_t engbrk_ObjClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2169528327;
  }
  uint64_t v9 = *(void *)(*(void *)a1 + 16);
  log_OutText(*(void *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjClose : Begin", a6, a7, a8, v18);
  uint64_t v10 = 0;
  if (*(void *)(*(void *)(*(void *)a1 + 16) + 24) == a1)
  {
    uint64_t v11 = critsec_Enter(*(void **)(*(void *)a1 + 24));
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    LODWORD(v10) = ssftmap_Clear(*(void *)(*(void *)a1 + 32));
    int v12 = critsec_Leave(*(void **)(*(void *)a1 + 24));
    if ((int)v10 > -1 && v12 < 0) {
      uint64_t v10 = v12;
    }
    else {
      uint64_t v10 = v10;
    }
  }
  heap_Free(*(void **)(v9 + 8), a1);
  log_OutText(*(void *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjClose : End", v14, v15, v16, v19);
  return v10;
}

uint64_t engbrk_SetLog(void *a1, uint64_t a2)
{
  if (!a1) {
    return 2169528327;
  }
  if (!a2) {
    a2 = *(void *)(*(void *)(*a1 + 16) + 32);
  }
  uint64_t v2 = 0;
  a1[1] = a2;
  return v2;
}

uint64_t engbrk_ObjGetClass(uint64_t *a1, void *a2)
{
  if (a1 && a2)
  {
    uint64_t result = 0;
    uint64_t v4 = *a1;
  }
  else
  {
    uint64_t result = 2169528327;
    if (!a2) {
      return result;
    }
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t engbrk_InterfaceQuery(uint64_t *a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_InterfaceQueryEx(a1, a2, a3, 0, a4, a5, a7, a8);
}

uint64_t engbrk_InterfaceQueryEx(uint64_t *a1, char *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v67 = 0;
  char v68 = 0;
  int v65 = 0;
  uint64_t v66 = 0;
  int v8 = -2125438956;
  uint64_t v9 = 2169528327;
  unsigned int v64 = 0;
  if (a1 && a2 && a6)
  {
    long long v16 = 0uLL;
    long long v62 = 0u;
    long long v63 = 0u;
    uint64_t v17 = *(void *)(*a1 + 16);
    if (a5)
    {
      uint64_t NullHandle = safeh_GetNullHandle();
      long long v16 = 0uLL;
      *a5 = NullHandle;
      a5[1] = v19;
    }
    *a6 = 0;
    long long v62 = v16;
    long long v63 = v16;
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceQuery BrokerString=%s : Begin", (uint64_t)a6, a7, a8, (uint64_t)a2);
    uint64_t v9 = critsec_Enter(*(void **)(*a1 + 24));
    if ((v9 & 0x80000000) == 0)
    {
      if ((ssftmap_FindReadOnly(*(void *)(*a1 + 32), (uint64_t)a2, &v64) & 0x80000000) == 0)
      {
        uint64_t v24 = v64;
        uint64_t v25 = v64[1];
        if (v25)
        {
LABEL_9:
          *a6 = v25;
          if (a5) {
            *(_OWORD *)a5 = *((_OWORD *)v24 + 1);
          }
          char v26 = 1;
          goto LABEL_22;
        }
        int v8 = -2125438963;
        if (!a4)
        {
          log_OutPublic(a1[1], (uint64_t)"BROKER", 259, "%s%s%s%x", v20, v21, v22, v23, "BrokerString");
          int v8 = -2125438963;
        }
        goto LABEL_21;
      }
      int ReadOnly = ssftmap_Insert(*(void *)(*a1 + 32), (uint64_t)a2, (uint64_t)&v62);
      if (ReadOnly < 0 || (int ReadOnly = ssftmap_FindReadOnly(*(void *)(*a1 + 32), (uint64_t)a2, &v64), ReadOnly < 0))
      {
        int v8 = ReadOnly;
        log_OutPublic(a1[1], (uint64_t)"BROKER", 200, "%s%s", v28, v29, v30, v31, "module");
        goto LABEL_21;
      }
      int v32 = brkhlp_SearchAddOn((uint64_t)a1, a2, &v68);
      if (v32 < 0)
      {
        if ((v32 & 0x1FFF) == 0xA)
        {
          int v8 = -2125438966;
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v33 = v68;
        uint64_t v34 = *v68;
        int v69 = 0;
        int v35 = ssftmap_FindReadOnly(v34, (uint64_t)"FULLPATHCOMPONENT", &v69);
        if ((v35 & 0x80000000) == 0 && v69)
        {
          uint64_t v67 = *v69;
          BOOL v40 = a4 == 0;
          goto LABEL_33;
        }
        BOOL v40 = a4 == 0;
        if (a4 || (v35 & 0x80000000) == 0)
        {
          if ((v35 & 0x80000000) == 0)
          {
LABEL_33:
            uint64_t v46 = *v33;
            int v69 = 0;
            int v47 = ssftmap_FindReadOnly(v46, (uint64_t)"GETINTERFACE", &v69);
            if (v47 < 0 || !v69)
            {
              if (v47 < 0)
              {
                if (v40) {
                  log_OutPublic(a1[1], (uint64_t)"BROKER", 262, "%s%s%s%x", v48, v21, v22, v23, "BrokerString");
                }
                goto LABEL_21;
              }
              uint64_t v49 = 0;
            }
            else
            {
              uint64_t v49 = *v69;
            }
            int v8 = 0;
            uint64_t v66 = v49;
LABEL_42:
            uint64_t v52 = v65;
            if ((v8 & 0x80000000) == 0 && !v65)
            {
              log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_InterfaceQuery : osspi_DynModOpen %s, %d", v21, v22, v23, v67);
              int v53 = osspi_DynModOpen(*(void **)(v17 + 64), *(void **)(v17 + 8), v67, 0, v64);
              int v8 = v53;
              if (!a4 && v53 < 0)
              {
                log_OutPublic(a1[1], (uint64_t)"BROKER", 263, "%s%s%s%x", v54, v21, v22, v23, "BrokerString");
                goto LABEL_21;
              }
              if (v53 < 0) {
                goto LABEL_21;
              }
              log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_InterfaceQuery : osspi_DynModObjLoad %s", v21, v22, v23, v66);
              int v55 = osspi_DynModObjLoad((void *)*v64, v66, (uint64_t)&v65);
              int v8 = v55;
              if (!a4 && v55 < 0)
              {
                log_OutPublic(a1[1], (uint64_t)"BROKER", 264, "%s%s%s%x", v56, v21, v22, v23, "BrokerString");
                goto LABEL_21;
              }
              uint64_t v52 = v65;
            }
            if (v8 < 0 || !v52 || (v57 = v52(a3, v64 + 1), int v8 = v57, a4) || (v57 & 0x80000000) == 0)
            {
              if ((v8 & 0x80000000) == 0)
              {
                uint64_t v24 = v64;
                uint64_t v25 = v64[1];
                uint64_t v59 = *(uint64_t (**)(void, void, uint64_t *))(v25 + 16);
                if (v59)
                {
                  int v60 = v59(*(void *)*a1, *(void *)(*a1 + 8), v64 + 2);
                  int v8 = v60;
                  if (!a4 && v60 < 0)
                  {
                    log_OutPublic(a1[1], (uint64_t)"BROKER", 266, "%s%s%s%x", v61, v21, v22, v23, "module");
                    goto LABEL_21;
                  }
                  if (v60 < 0) {
                    goto LABEL_21;
                  }
                  uint64_t v24 = v64;
                  uint64_t v25 = v64[1];
                }
                LODWORD(v9) = v8;
                goto LABEL_9;
              }
            }
            else
            {
              log_OutPublic(a1[1], (uint64_t)"BROKER", 265, "%s%s%s%x", v58, v21, v22, v23, "module");
            }
LABEL_21:
            log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_InterfaceQuery : BrokerString=%s: Module Not Found (%x)", v21, v22, v23, (uint64_t)a2);
            char v26 = 0;
            LODWORD(v9) = v8;
LABEL_22:
            int v41 = critsec_Leave(*(void **)(*a1 + 24));
            if ((v26 & (v41 < 0)) != 0) {
              uint64_t v9 = v41;
            }
            else {
              uint64_t v9 = v9;
            }
            log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceQuery BrokerString=%s : End", v42, v43, v44, (uint64_t)a2);
            return v9;
          }
        }
        else
        {
          log_OutPublic(a1[1], (uint64_t)"BROKER", 260, "%s%s%s%x", v36, v37, v38, v39, "BrokerString");
        }
      }
      int BuiltinInterface = brkhlp_GetBuiltinInterface(a2, &v65, &v67, &v66);
      int v8 = BuiltinInterface;
      if (!a4 && BuiltinInterface < 0)
      {
        log_OutPublic(a1[1], (uint64_t)"BROKER", 261, "%s%s%s%x", v51, v21, v22, v23, "BrokerString");
        goto LABEL_21;
      }
      goto LABEL_42;
    }
  }
  return v9;
}

uint64_t brkhlp_SearchAddOn(uint64_t a1, char *a2, void *a3)
{
  *a3 = 0;
  uint64_t result = 2169528333;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = critsec_Enter(*(void **)(*(void *)a1 + 56));
      if ((result & 0x80000000) == 0)
      {
        int v7 = brkhlp_InternalSearchAddOn(a1, a2, a3);
        LODWORD(result) = critsec_Leave(*(void **)(*(void *)a1 + 56));
        if (v7 > -1 && (int)result < 0) {
          return result;
        }
        else {
          return v7;
        }
      }
    }
  }
  return result;
}

uint64_t engbrk_InterfaceRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 2169528327;
  if (a1)
  {
    if (a2)
    {
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceRelease : Begin", a6, a7, a8, v13);
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceRelease : End", v10, v11, v12, v14);
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_TagQuery(void *a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_TagQueryEx(a1, a2, a3, 0, a4, a6, a7, a8);
}

uint64_t engbrk_TagQueryEx(void *a1, char *a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0;
  uint64_t v8 = 2169528327;
  if (a1 && a5 && a3 && a2 && *a1)
  {
    *a5 = 0;
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagQuery BrokerString=%s TagName=%s : Begin", a6, a7, a8, (uint64_t)a2);
    int v14 = brkhlp_SearchAddOn((uint64_t)a1, a2, &v22);
    if (v14 < 0)
    {
      if ((v14 & 0x1FFF) == 0xA)
      {
        uint64_t v8 = 2169528330;
        goto LABEL_16;
      }
      uint64_t v8 = 2169528333;
    }
    else
    {
      uint64_t v19 = brkhlp_SearchTag(*v22, a3, a5);
      if ((v19 & 0x80000000) == 0)
      {
        uint64_t v8 = 0;
LABEL_16:
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagQuery TagContents = %p \"%s\": End", v16, v17, v18, *a5);
        return v8;
      }
      uint64_t v8 = v19;
    }
    uint64_t v20 = a1[1];
    if (a4) {
      log_OutText(v20, (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_TagQuery : BrokerString=%s TagName=%s  Failure (%x)", v16, v17, v18, (uint64_t)a2);
    }
    else {
      log_OutPublic(v20, (uint64_t)"BROKER", 267, "%s%s%s%s%s%x", v15, v16, v17, v18, "Broker String");
    }
    goto LABEL_16;
  }
  return v8;
}

uint64_t engbrk_TagRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 2169528327;
  if (a1)
  {
    if (a2)
    {
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagRelease TagContents address = %p : Begin", a6, a7, a8, a2);
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagRelease : End", v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_ComponentTableIteratorOpen(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  if (a1 && a3 && a2 && *(void *)a1)
  {
    uint64_t v12 = *(void *)(*(void *)a1 + 16);
    log_OutText(*(void *)(v12 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorOpen Query=%s: Begin", a6, a7, a8, (uint64_t)a2);
    uint64_t v13 = (void *)heap_Calloc(*(void **)(v12 + 8), 1, 72);
    *(void *)a3 = v13;
    if (v13)
    {
      void *v13 = v12;
      *(void *)(*(void *)a3 + 8) = a1;
      uint64_t String = brkhlp_CreateString((char **)(*(void *)a3 + 16), a2, *(void *)(v12 + 8));
      if ((String & 0x80000000) == 0)
      {
        uint64_t v8 = critsec_Enter(*(void **)(*(void *)a1 + 56));
        uint64_t v22 = *(void **)a3;
        if ((v8 & 0x80000000) == 0)
        {
          int v23 = ssftmap_IteratorOpen(*(void *)(*(void *)a1 + 40), (uint64_t)a2, 0, (uint64_t)(v22 + 3));
          LODWORD(v8) = (v23 & 0x80001FFF) == 0x80000014 ? 0 : v23;
          int v24 = critsec_Leave(*(void **)(*(void *)a1 + 56));
          BOOL v25 = (int)v8 > -1 && v24 < 0;
          uint64_t v8 = v25 ? v24 : v8;
          uint64_t v22 = *(void **)a3;
          if ((v8 & 0x80000000) == 0) {
            goto LABEL_24;
          }
        }
        goto LABEL_22;
      }
      uint64_t v8 = String;
    }
    else
    {
      uint64_t v8 = 2169528330;
    }
    uint64_t v22 = *(void **)a3;
LABEL_22:
    if (v22)
    {
      engbrk_ComponentTableIteratorClose(v22, v14, v15, v16, v17, v18, v19, v20);
      uint64_t v22 = 0;
      *(void *)a3 = 0;
    }
LABEL_24:
    log_OutText(*(void *)(v12 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorOpen iterator address = %p: End", v18, v19, v20, (uint64_t)v22);
  }
  return v8;
}

uint64_t brkhlp_CreateString(char **a1, char *__s, uint64_t a3)
{
  uint64_t v3 = 2169528320;
  if (!a1) {
    return 2169528327;
  }
  *a1 = 0;
  if (__s)
  {
    int v7 = strlen(__s);
    uint64_t v8 = (char *)heap_Alloc(a3, (v7 + 1));
    *a1 = v8;
    if (v8)
    {
      strcpy(v8, __s);
      return 0;
    }
    else
    {
      return 2169528330;
    }
  }
  return v3;
}

uint64_t engbrk_ComponentTableIteratorClose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2169528327;
  }
  uint64_t v9 = *a1;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorClose iterator=%p: Begin", a6, a7, a8, (uint64_t)a1);
  uint64_t v10 = a1[2];
  if (v10)
  {
    heap_Free(*(void **)(v9 + 8), v10);
    a1[2] = 0;
  }
  uint64_t v11 = a1[3];
  if (v11) {
    ssftmap_IteratorClose(v11);
  }
  heap_Free(*(void **)(v9 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorClose: End", v12, v13, v14, v16);
  return 0;
}

uint64_t engbrk_ComponentTableIteratorNext(uint64_t a1, char **a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (!a1) {
    return 2169528327;
  }
  uint64_t v8 = a2;
  uint64_t v10 = *(void *)a1;
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  log_OutText(*(void *)(v10 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorNext iterator=%p: Begin", a6, a7, a8, a1);
  LODWORD(v11) = brkhlp_SizeOfNextBlock(*(char **)(a1 + 16));
  uint64_t v12 = ssftmap_IteratorNext(*(uint64_t **)(a1 + 24), &v37, &v36);
  if ((v12 & 0x80000000) != 0)
  {
LABEL_19:
    uint64_t v16 = v12;
  }
  else
  {
    unint64_t v11 = v11;
    uint64_t v16 = 2169528330;
    uint64_t v35 = v10;
    unint64_t v33 = v11;
    while (1)
    {
      if ((LH_strnicmp(*(void *)(a1 + 16), (uint64_t)v37, v11) & 0x80000000) != 0)
      {
        uint64_t v16 = 2169528343;
        goto LABEL_32;
      }
      uint64_t v17 = *(void **)(v10 + 8);
      uint64_t v18 = v37;
      uint64_t v19 = *(const char **)(a1 + 16);
      int v20 = strlen(v19);
      uint64_t v21 = heap_Alloc((uint64_t)v17, (v20 + 1));
      if (!v21) {
        goto LABEL_32;
      }
      uint64_t v22 = (char *)v21;
      int v23 = v8;
      if (!*v19) {
        break;
      }
      int v24 = (char *)v19;
      BOOL v25 = (char *)v18;
      while (1)
      {
        Blocuint64_t k = brkhlp_SizeOfNextBlock(v24);
        strncpy(v22, v24, Block);
        v22[Block] = 0;
        uint64_t v27 = strstr(v25, v22);
        if (!v27) {
          break;
        }
        BOOL v25 = &v27[Block];
        if (Block)
        {
          if (v22[Block - 1] != 47 && v25 - v18 != strlen(v18)) {
            break;
          }
        }
        v24 += (Block + 1);
        if (v24 - v19 >= strlen(v19)) {
          goto LABEL_21;
        }
      }
      heap_Free(v17, (uint64_t)v22);
      uint64_t v12 = ssftmap_IteratorNext(*(uint64_t **)(a1 + 24), &v37, &v36);
      uint64_t v8 = v23;
      uint64_t v10 = v35;
      uint64_t v16 = 2169528330;
      unint64_t v11 = v33;
      if ((v12 & 0x80000000) != 0) {
        goto LABEL_19;
      }
    }
LABEL_21:
    heap_Free(v17, (uint64_t)v22);
    uint64_t v8 = v23;
    if (v23) {
      *int v23 = (char *)v37;
    }
    uint64_t v10 = v35;
    if (a3)
    {
      *(void *)(a1 + 32) = v37;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      uint64_t v28 = brkhlp_SearchTag(*v36, (uint64_t)"NAME", (void *)(a1 + 40));
      if ((v28 & 0x80000000) == 0 || (uint64_t v16 = v28, v28 == -2125438956))
      {
        uint64_t v29 = brkhlp_SearchTag(*v36, (uint64_t)"LANGUAGE", (void *)(a1 + 56));
        if ((v29 & 0x80000000) == 0 || (uint64_t v16 = v29, v29 == -2125438956))
        {
          uint64_t v30 = brkhlp_SearchTag(*v36, (uint64_t)"VERSION", (void *)(a1 + 48));
          if ((v30 & 0x80000000) == 0 || (uint64_t v16 = v30, v30 == -2125438956))
          {
            uint64_t v16 = 0;
            *a3 = a1 + 32;
          }
        }
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
  }
LABEL_32:
  uint64_t v31 = &byte_20D5A22AE;
  if (v8 && *v8) {
    uint64_t v31 = *v8;
  }
  log_OutText(*(void *)(v10 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorNext szBrkString=%s: End", v13, v14, v15, (uint64_t)v31);
  return v16;
}

size_t brkhlp_SizeOfNextBlock(char *a1)
{
  uint64_t v2 = strchr(a1, 42);
  if (v2) {
    return v2 - a1;
  }
  else {
    return strlen(a1);
  }
}

uint64_t engbrk_DataReplace(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = 0;
  uint64_t v8 = 2169528327;
  if (a1 && a2 && a3)
  {
    uint64_t v11 = *(void *)(*a1 + 16);
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataReplace BrokerString=%s : Begin", a6, a7, a8, (uint64_t)a2);
    uint64_t v12 = brkhlp_SearchAddOn((uint64_t)a1, a2, &v31);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v24 = v12;
      log_OutPublic(a1[1], (uint64_t)"BROKER", 293, "%s%s", v13, v14, v15, v16, "brokerString");
      if ((v24 & 0x1FFF) == 0xA)
      {
        uint64_t v8 = 2169528330;
LABEL_16:
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataReplace : End", v25, v26, v27, v30);
        return v8;
      }
    }
    else
    {
      uint64_t v17 = *v31;
      int v32 = 0;
      int ReadOnly = ssftmap_FindReadOnly(v17, (uint64_t)"FULLPATHCOMPONENT", &v32);
      if ((ReadOnly & 0x80000000) == 0 && v32)
      {
        uint64_t v23 = *v32;
        goto LABEL_12;
      }
      if ((ReadOnly & 0x80000000) == 0)
      {
        uint64_t v23 = 0;
LABEL_12:
        uint64_t v8 = osspi_DataReplace(*(void **)(v11 + 64), *(void *)(v11 + 8), v23);
        if ((v8 & 0x80000000) != 0) {
          log_OutPublic(a1[1], (uint64_t)"BROKER", 295, "%s%s%s%x", v28, v25, v26, v27, "brokerString");
        }
        goto LABEL_16;
      }
      log_OutPublic(a1[1], (uint64_t)"BROKER", 294, "%s%s", v19, v20, v21, v22, "brokerString");
      uint64_t v24 = 2169528340;
    }
    uint64_t v8 = v24;
    goto LABEL_16;
  }
  return v8;
}

uint64_t engbrk_DataOpen(uint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_DataOpenEx(a1, a2, 0, a3, a5, a6, a7, a8);
}

uint64_t engbrk_DataOpenEx(uint64_t *a1, uint64_t a2, char a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = 2169528330;
  uint64_t v102 = 0;
  v103[0] = 0;
  uint64_t result = 2169528327;
  if (a1)
  {
    uint64_t v11 = (char *)a2;
    if (a2)
    {
      if (a4)
      {
        uint64_t v14 = *(void *)(*a1 + 16);
        *a4 = 0;
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataOpen : BrokerString=%s : Begin", a6, a7, a8, a2);
        int v97 = (uint64_t *)heap_Calloc(*(void **)(v14 + 8), 1, 48);
        if (!v97)
        {
          hlp_ReleaseUriFetcherInterface(v14, 0);
LABEL_118:
          log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataOpen : End %x", v23, v24, v25, v9);
          return v9;
        }
        int v15 = IsThisUrlOrRealPath(v11, 0);
        uint64_t v16 = strchr(v11, 58);
        uint64_t v17 = v16;
        LODWORD(v18) = -2125438976;
        if (v15 || !v16)
        {
          uint64_t v96 = 0;
        }
        else
        {
          int v19 = v15;
          unsigned int v20 = v16 - v11;
          if (v16 == v11)
          {
            uint64_t v96 = 0;
          }
          else
          {
            uint64_t v18 = critsec_Enter(*(void **)(*a1 + 24));
            if ((v18 & 0x80000000) != 0)
            {
              hlp_ReleaseUriFetcherInterface(v14, (uint64_t)v97);
              uint64_t v96 = 0;
              uint64_t v17 = 0;
              goto LABEL_113;
            }
            uint64_t v21 = (char *)heap_Alloc(*(void *)(v14 + 8), v20 + 1);
            if (!v21)
            {
              hlp_ReleaseUriFetcherInterface(v14, (uint64_t)v97);
              uint64_t v96 = 0;
              uint64_t v17 = 0;
              goto LABEL_104;
            }
            uint64_t v22 = strncpy(v21, v11, v20);
            v22[v20] = 0;
            uint64_t v96 = (uint64_t)v22;
            uint64_t v11 = v22;
          }
          int v15 = v19;
        }
        int v26 = v15;
        if (v15) {
          uint64_t v17 = 0;
        }
        uint64_t v27 = brkhlp_SearchAddOn((uint64_t)a1, v11, v103);
        uint64_t v31 = v27;
        if ((v27 & 0x80000000) == 0)
        {
          log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on broker string %s", v28, v29, v30, (uint64_t)v11);
          goto LABEL_19;
        }
        if ((v27 & 0x1FFF) == 0xA) {
          goto LABEL_23;
        }
        unsigned int v95 = v17;
        int v34 = strlen(v11);
        uint64_t v17 = (char *)heap_Alloc(*(void *)(v14 + 8), (v34 + 4));
        if (!v17) {
          goto LABEL_103;
        }
        if (engbrk_CreateSurrogateBrokerString(v11, (uint64_t)v17))
        {
          uint64_t v31 = brkhlp_SearchAddOn((uint64_t)a1, v17, v103);
          if ((v31 & 0x80000000) == 0) {
            log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on Surrogate broker string %s", v35, v36, v37, (uint64_t)v17);
          }
          if ((v31 & 0x1FFF) == 0xA) {
            goto LABEL_23;
          }
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_38;
          }
        }
        uint64_t v38 = strcpy(v17, v11);
        uint64_t v39 = strstr(v38, "mpthreeml");
        if (!v39) {
          goto LABEL_48;
        }
        strcpy(v39, "mpthreevadml");
        uint64_t v40 = brkhlp_SearchAddOn((uint64_t)a1, v17, v103);
        uint64_t v31 = v40;
        if ((v40 & 0x80000000) == 0)
        {
          log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on Surrogate broker string %s", v41, v42, v43, (uint64_t)v17);
LABEL_38:
          heap_Free(*(void **)(v14 + 8), (uint64_t)v17);
          uint64_t v17 = v95;
          goto LABEL_19;
        }
        if ((v40 & 0x1FFF) == 0xA) {
          goto LABEL_23;
        }
        if (engbrk_CreateSurrogateBrokerString(v17, (uint64_t)v17))
        {
          uint64_t v31 = brkhlp_SearchAddOn((uint64_t)a1, v17, v103);
          if ((v31 & 0x80000000) == 0) {
            log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on Surrogate broker string %s", v44, v45, v46, (uint64_t)v17);
          }
          if ((v31 & 0x1FFF) == 0xA) {
            goto LABEL_23;
          }
          heap_Free(*(void **)(v14 + 8), (uint64_t)v17);
          uint64_t v17 = v95;
          if ((v31 & 0x80000000) == 0)
          {
LABEL_19:
            if (*(void *)(v103[0] + 16))
            {
              if (v17)
              {
                uint64_t v9 = brkhlp_SearchClcArchive(a1[1], v103[0], v17 + 1, a3, (uint64_t)v97, (uint64_t)a1);
LABEL_23:
                uint64_t v17 = 0;
                goto LABEL_103;
              }
              uint64_t v9 = v31;
LABEL_103:
              hlp_ReleaseUriFetcherInterface(v14, (uint64_t)v97);
              if ((v18 & 0x80000000) != 0)
              {
LABEL_110:
                if ((v9 & 0x80000000) == 0)
                {
                  *a4 = v97;
LABEL_114:
                  if (v96) {
                    heap_Free(*(void **)(v14 + 8), v96);
                  }
                  if (v17) {
                    heap_Free(*(void **)(v14 + 8), (uint64_t)v17);
                  }
                  goto LABEL_118;
                }
                uint64_t v18 = v9;
LABEL_113:
                heap_Free(*(void **)(v14 + 8), (uint64_t)v97);
                uint64_t v9 = v18;
                goto LABEL_114;
              }
LABEL_104:
              int v90 = critsec_Leave(*(void **)(*a1 + 24));
              if ((int)v9 > -1 && v90 < 0) {
                uint64_t v9 = v90;
              }
              else {
                uint64_t v9 = v9;
              }
              goto LABEL_110;
            }
            uint64_t v32 = *(void *)v103[0];
            *(void *)&v99[0] = 0;
            if ((ssftmap_FindReadOnly(v32, (uint64_t)"FULLPATHCOMPONENT", v99) & 0x80000000) == 0)
            {
              if (*(void *)&v99[0])
              {
                unint64_t v33 = **(const char ***)&v99[0];
                if (**(void **)&v99[0])
                {
                  uint64_t v94 = v17;
                  uint64_t v17 = 0;
                  goto LABEL_57;
                }
              }
            }
LABEL_51:
            uint64_t v94 = v17;
            if (v26)
            {
              uint64_t v17 = 0;
              unint64_t v33 = v11;
              goto LABEL_58;
            }
            int v48 = strlen(v11);
            uint64_t v49 = heap_Alloc(*(void *)(v14 + 8), (v48 + 1));
            if (!v49) {
              goto LABEL_23;
            }
            unint64_t v33 = (const char *)v49;
            uint64_t v50 = 0;
            unsigned int v51 = 1;
            do
            {
              v33[v50] = __tolower(v11[v50]);
              uint64_t v50 = v51;
            }
            while (strlen(v11) >= v51++);
            uint64_t v17 = (char *)v33;
LABEL_57:
            if (!v26)
            {
LABEL_61:
              uint64_t v9 = osspi_DataOpenEx(*(void **)(v14 + 64), *(void **)(v14 + 8), v97[3], v97[4], v97[5], (uint64_t)v33, v97);
              if ((v9 & 0x80000000) != 0)
              {
                if (a3)
                {
                  log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : osspi_DataOpen failed: %s, %x", v54, v55, v56, (uint64_t)v33);
                }
                else
                {
                  int v70 = strcmp(v33, v11);
                  uint64_t v71 = a1[1];
                  if (v70) {
                    log_OutPublic(v71, (uint64_t)"BROKER", 275, "%s%s%s%s%s%x", v66, v67, v68, v69, "BrokerString");
                  }
                  else {
                    log_OutPublic(v71, (uint64_t)"BROKER", 275, "%s%s%s%x", v66, v67, v68, v69, "BrokerString");
                  }
                }
              }
              else
              {
                log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : osspi_DataOpen %s, %p", v54, v55, v56, (uint64_t)v33);
                if (v94)
                {
                  char v93 = a3;
                  int v57 = strstr(v11, "clc");
                  uint64_t v58 = strstr(v11, "clmnn");
                  uint64_t v92 = v103[0];
                  uint64_t v59 = v11;
                  int v60 = (uint64_t *)(v103[0] + 16);
                  uint64_t v61 = clcarchive_ObjOpen(*(_WORD **)*a1, *(void *)(*a1 + 8), v59, (uint64_t *)(v103[0] + 16));
                  uint64_t v9 = v61;
                  if ((v61 & 0x80000000) == 0)
                  {
                    unint64_t v62 = (unint64_t)v58 | (unint64_t)v57;
                    BOOL v63 = ((unint64_t)v58 | (unint64_t)v57) != 0;
                    if (v62 && *((_DWORD *)a1 + 6))
                    {
                      unsigned int v64 = 0;
                      BOOL v65 = (v61 & 0x1FFF) == 1;
                    }
                    else
                    {
                      uint64_t v72 = osspi_ClcDataOpen(*v97, *v60);
                      uint64_t v9 = v72;
                      unsigned int v64 = v72 >> 31;
                      BOOL v65 = (v72 & 0x1FFF) == 1;
                      if ((v72 & 0x1FFF) != 1 && (v72 & 0x80000000) != 0)
                      {
                        BOOL v65 = 0;
                        *int v60 = 0;
                      }
                    }
                    if (*((_DWORD *)a1 + 6)) {
                      BOOL v73 = v63;
                    }
                    else {
                      BOOL v73 = 0;
                    }
                    if ((v65 & v64 & 1) != 0 || v73)
                    {
                      uint64_t v100 = 0;
                      uint64_t v101 = 0;
                      memset(v99, 0, sizeof(v99));
                      clcarchive_GetMemoryStreamInterface(v99);
                      int v98 = 0;
                      uint64_t v77 = engbrk_DataMapEx(a1, (uint64_t)v97, 0, (unsigned int *)&v101, &v100, v74, v75, v76);
                      if ((v77 & 0x80000000) != 0)
                      {
                        uint64_t v9 = v77;
                      }
                      else
                      {
                        int v78 = clcarchive_Parse(*v60, v99, (uint64_t)&v100, &v98, 1);
                        int v84 = engbrk_DataUnmap(a1, (uint64_t)v97, v100, v79, v80, v81, v82, v83);
                        if (v78 > -1 && v84 < 0) {
                          int v78 = v84;
                        }
                        int v86 = osspi_DataClose(*v97);
                        *int v97 = 0;
                        if (v78 > -1 && v86 < 0) {
                          uint64_t v9 = v86;
                        }
                        else {
                          uint64_t v9 = v78;
                        }
                        if (v97[3] && v97[4])
                        {
                          objc_ReleaseObject(*(void *)(v14 + 48), (uint64_t)"URIFETCHER");
                          v97[3] = 0;
                          v97[4] = 0;
                        }
                      }
                    }
                    if ((v9 & 0x80000000) == 0)
                    {
                      uint64_t v9 = brkhlp_SearchClcArchive(a1[1], v92, v94 + 1, v93, (uint64_t)v97, (uint64_t)a1);
                      uint64_t v88 = v103[0];
                      uint64_t v89 = *(void *)(v103[0] + 16);
                      if (v89)
                      {
                        if (v9)
                        {
                          clcarchive_ObjClose(v89);
                          *(void *)(v88 + 16) = 0;
                          osspi_DataClose(*v97);
                          *int v97 = 0;
                          if (v97[3])
                          {
                            if (v97[4])
                            {
                              objc_ReleaseObject(*(void *)(v14 + 48), (uint64_t)"URIFETCHER");
                              v97[3] = 0;
                              v97[4] = 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_103;
            }
LABEL_58:
            if (UriGetUrlPrefixLength(v33, 0)
              && (objc_GetObject(*(void *)(v14 + 48), (uint64_t)"URIFETCHER", &v102) & 0x80000000) == 0)
            {
              uint64_t v53 = v102;
              v97[3] = *(void *)(v102 + 8);
              *((_OWORD *)v97 + 2) = *(_OWORD *)(v53 + 16);
            }
            goto LABEL_61;
          }
        }
        else
        {
LABEL_48:
          heap_Free(*(void **)(v14 + 8), (uint64_t)v17);
          uint64_t v17 = v95;
        }
        if (v17)
        {
          uint64_t v47 = brkhlp_RegisterAddon(v11, 0, 0, v103, *a1);
          if ((v47 & 0x80000000) != 0)
          {
            uint64_t v17 = 0;
            uint64_t v9 = v47;
            goto LABEL_103;
          }
        }
        goto LABEL_51;
      }
    }
  }
  return result;
}

uint64_t engbrk_CreateSurrogateBrokerString(char *__s, uint64_t a2)
{
  if (*__s)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      int v7 = __s[v4];
      BOOL v8 = (v7 - 48) >= 0xA && (v7 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (v8 && v7 != 45)
      {
        if (v7 == 95 || v7 == 47)
        {
          if (v7 == 95) {
            uint64_t v5 = v5;
          }
          else {
            uint64_t v5 = 1;
          }
          LOBYTE(v7) = 95;
        }
        else
        {
          uint64_t v5 = 1;
          LOBYTE(v7) = 45;
        }
      }
      *(unsigned char *)(a2 + v4) = v7;
      uint64_t v4 = v6;
    }
    while (strlen(__s) > v6++);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  *(unsigned char *)(a2 + v4) = 0;
  return v5;
}

uint64_t brkhlp_SearchClcArchive(uint64_t a1, uint64_t a2, char *__s, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a2 + 16);
  memset(v22, 0, sizeof(v22));
  if (strlen(__s) <= 0x7F) {
    engbrk_CreateSurrogateBrokerString(__s, (uint64_t)v22);
  }
  if (*(_DWORD *)(v12 + 16))
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    while (LH_stricmp((char *)v22, *(char **)(*(void *)(v12 + 8) + v17)))
    {
      ++v18;
      v17 += 40;
      if (v18 >= *(unsigned int *)(v12 + 16)) {
        goto LABEL_7;
      }
    }
    *(_DWORD *)(a5 + 16) = v18;
    *(void *)(a5 + 8) = v12;
    uint64_t v20 = critsec_Enter(*(void **)(*(void *)a6 + 24));
    if ((v20 & 0x80000000) == 0)
    {
      ++*(_DWORD *)(v12 + 120);
      return critsec_Leave(*(void **)(*(void *)a6 + 24));
    }
    return v20;
  }
  else
  {
LABEL_7:
    uint64_t v19 = 2169528333;
    if (a4) {
      log_OutText(a1, (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : SearchClcArchive failed: %s:%s", v14, v15, v16, *(void *)(a2 + 8));
    }
    else {
      log_OutPublic(a1, (uint64_t)"BROKER", 257, "%s%s%s%s", v13, v14, v15, v16, "archive");
    }
  }
  return v19;
}

uint64_t brkhlp_RegisterAddon(char *a1, char *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v20 = 0;
  *(void *)uint64_t v21 = 0;
  uint64_t v5 = 2169528326;
  if (a1)
  {
    if (a5)
    {
      uint64_t v7 = *(void *)(a5 + 16);
      if (v7)
      {
        uint64_t v12 = brkhlp_SearchAddOn(*(void *)(v7 + 24), a1, a4);
        if ((v12 & 0x80000000) == 0 && a3 && !*(void *)(*a4 + 16))
        {
          *(void *)(*a4 + 16) = a3;
          return v12;
        }
        if ((v12 & 0x1FFF) != 0xA)
        {
          uint64_t v13 = *(void **)(*(void *)(a5 + 16) + 8);
          v18[0] = BRK_HDRPARS_TAG_MAP_IELEM;
          v18[1] = *(_OWORD *)&off_26C1EE5F8;
          uint64_t v19 = off_26C1EE608;
          uint64_t v12 = ssftmap_ObjOpen(v13, 1, v18, (uint64_t *)v21);
          if ((v12 & 0x80000000) == 0)
          {
            uint64_t v12 = brkhlp_allocateAndStoreTagInMap(*(void **)(*(void *)(a5 + 16) + 8), *(uint64_t *)v21, a1, (uint64_t)"BROKER", &v20);
            if ((v12 & 0x80000000) == 0)
            {
              if (!a2
                || (uint64_t v12 = brkhlp_allocateAndStoreTagInMap(*(void **)(*(void *)(a5 + 16) + 8), *(uint64_t *)v21, a2, (uint64_t)"FULLPATHCOMPONENT", v18), (v12 & 0x80000000) == 0))
              {
                uint64_t v12 = brkhlp_AddNewAddOn(*v20, *v20, *(uint64_t *)v21, a5, a3, v14, v15, v16);
                if ((v12 & 0x80000000) == 0) {
                  return brkhlp_SearchAddOn(*(void *)(*(void *)(a5 + 16) + 24), a1, a4);
                }
              }
            }
          }
          return v12;
        }
        return 2169528330;
      }
    }
  }
  return v5;
}

uint64_t engbrk_DataMapEx(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  if (a2 && a1 && a4 && a5)
  {
    *a5 = 0;
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataMap : hData=%p Map Offset=%d Size=%d Data=%p : Begin", a6, a7, a8, a2);
    uint64_t v18 = *(void *)(a2 + 8);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 8);
      unsigned int v20 = *(_DWORD *)(a2 + 16);
      unsigned int v21 = *(_DWORD *)(v19 + 40 * v20 + 16);
      uint64_t v8 = 2169528324;
      if (v21 >= a3)
      {
        if (*a4)
        {
          unsigned int v22 = *(_DWORD *)(v19 + 40 * v20 + 16);
          unsigned int v21 = *a4;
        }
        else
        {
          *a4 = v21;
          unsigned int v20 = *(_DWORD *)(a2 + 16);
          unsigned int v22 = *(_DWORD *)(v19 + 40 * v20 + 16);
        }
        if (v21 + a3 > v22)
        {
          *a4 = v22 - a3;
          unsigned int v20 = *(_DWORD *)(a2 + 16);
        }
        uint64_t v23 = *(void *)(v19 + 40 * v20 + 8);
        if (v23)
        {
          uint64_t v8 = 0;
          *a5 = v23 + a3;
          goto LABEL_27;
        }
        uint64_t v24 = critsec_Enter(*(void **)(*a1 + 56));
        if ((v24 & 0x80000000) != 0)
        {
          uint64_t v8 = v24;
        }
        else
        {
          LODWORD(v8) = clcarchive_GetData(*(void *)(a2 + 8), *(_DWORD *)(a2 + 16), a3, *a4, a5);
          int v25 = critsec_Leave(*(void **)(*a1 + 56));
          if ((int)v8 > -1 && v25 < 0) {
            uint64_t v8 = v25;
          }
          else {
            uint64_t v8 = v8;
          }
          if ((v8 & 0x80000000) == 0) {
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      uint64_t v8 = osspi_DataMap(*(void *)a2, a3, a4, a5);
      if ((v8 & 0x80000000) == 0)
      {
LABEL_27:
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataMap : End (%x, %p, %u)", v15, v16, v17, v8);
        return v8;
      }
    }
    log_OutPublic(a1[1], (uint64_t)"BROKER", 287, "%s%p%s%u%s%u%s%x", v14, v15, v16, v17, "hData");
    goto LABEL_27;
  }
  return v8;
}

uint64_t engbrk_DataUnmap(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  if (a1 && a2 && a3)
  {
    uint64_t v12 = *(void *)(*a1 + 16);
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataUnmap : hData=%p pData=%p : Begin", a6, a7, a8, a2);
    uint64_t v8 = critsec_Enter(*(void **)(*a1 + 24));
    if ((v8 & 0x80000000) != 0) {
      goto LABEL_16;
    }
    uint64_t v17 = *(void *)(a2 + 8);
    if (v17)
    {
      if (!*(void *)(*(void *)(v17 + 8) + 40 * *(unsigned int *)(a2 + 16) + 8)) {
        heap_Free(*(void **)(v12 + 8), a3);
      }
    }
    else
    {
      LODWORD(v8) = osspi_DataUnmap(*(void *)a2, a3);
    }
    int v18 = critsec_Leave(*(void **)(*a1 + 24));
    BOOL v19 = (int)v8 > -1 && v18 < 0;
    uint64_t v8 = v19 ? v18 : v8;
    if ((v8 & 0x80000000) != 0) {
LABEL_16:
    }
      log_OutPublic(a1[1], (uint64_t)"BROKER", 296, "%s%p%s%x", v13, v14, v15, v16, "hData");
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataUnmap : End %x", v14, v15, v16, v8);
  }
  return v8;
}

uint64_t hlp_ReleaseUriFetcherInterface(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)(a2 + 24);
    if (*(void *)(a2 + 24))
    {
      if (*(void *)(a2 + 32))
      {
        uint64_t result = objc_ReleaseObject(*(void *)(result + 48), (uint64_t)"URIFETCHER");
        *uint64_t v2 = 0;
        v2[1] = 0;
      }
    }
  }
  return result;
}

uint64_t engbrk_DataClose(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  if (!a1 || !a2) {
    return v8;
  }
  uint64_t v11 = *(void *)(*a1 + 16);
  log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataClose : hData=%p : Begin", a6, a7, a8, (uint64_t)a2);
  if (!a2[1])
  {
    if (*a2)
    {
      uint64_t v8 = osspi_DataClose(*a2);
      *a2 = 0;
    }
    else
    {
      uint64_t v8 = 0;
    }
    goto LABEL_23;
  }
  uint64_t v16 = critsec_Enter(*(void **)(*a1 + 24));
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v20 = a2[1];
  int v21 = *(_DWORD *)(v20 + 120);
  if (v21)
  {
    int v22 = v21 - 1;
    *(_DWORD *)(v20 + 120) = v22;
    if (!v22)
    {
LABEL_12:
      uint64_t v34 = 0;
      if ((brkhlp_SearchAddOn((uint64_t)a1, *(char **)(v20 + 128), &v34) & 0x80001FFF) == 0x8000000A)
      {
LABEL_13:
        critsec_Leave(*(void **)(*a1 + 24));
        return 2169528330;
      }
      uint64_t v23 = v34;
      if (v34) {
        goto LABEL_16;
      }
      int v31 = strlen(*(const char **)(a2[1] + 128));
      uint64_t v32 = heap_Alloc(*(void *)(v11 + 8), (v31 + 1));
      if (!v32) {
        goto LABEL_13;
      }
      unint64_t v33 = (char *)v32;
      engbrk_CreateSurrogateBrokerString(*(char **)(a2[1] + 128), v32);
      if (!strcmp(*(const char **)(a2[1] + 128), v33))
      {
        heap_Free(*(void **)(v11 + 8), (uint64_t)v33);
      }
      else
      {
        brkhlp_SearchAddOn((uint64_t)a1, v33, &v34);
        uint64_t v23 = v34;
        heap_Free(*(void **)(v11 + 8), (uint64_t)v33);
        if (v23) {
LABEL_16:
        }
          *(void *)(v23 + 16) = 0;
      }
      uint64_t v24 = a2[1];
      if (*(void *)(v24 + 112))
      {
        osspi_DataClose(*(void *)(v24 + 112));
        uint64_t v25 = a2[3];
        uint64_t v24 = a2[1];
        *(void *)(v24 + 112) = 0;
        if (v25)
        {
          if (a2[4])
          {
            objc_ReleaseObject(*(void *)(v11 + 48), (uint64_t)"URIFETCHER");
            a2[3] = 0;
            a2[4] = 0;
            uint64_t v24 = a2[1];
          }
        }
      }
      clcarchive_ObjClose(v24);
      a2[1] = 0;
    }
  }
  else
  {
    log_OutText(a1[1], (uint64_t)"BROKER", 1, 0, (uint64_t)"brk_DataClose : RefCount is 0 before substruction. hData=%p", v17, v18, v19, (uint64_t)a2);
    uint64_t v20 = a2[1];
    if (!*(_DWORD *)(v20 + 120)) {
      goto LABEL_12;
    }
  }
  int v26 = critsec_Leave(*(void **)(*a1 + 24));
  uint64_t v8 = v26 & (v26 >> 31);
LABEL_23:
  if (a2[3] && a2[4])
  {
    objc_ReleaseObject(*(void *)(v11 + 48), (uint64_t)"URIFETCHER");
    a2[3] = 0;
    a2[4] = 0;
  }
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(a1[1], (uint64_t)"BROKER", 280, "%s%p%s%x", v12, v13, v14, v15, "hData");
  }
  heap_Free(*(void **)(v11 + 8), (uint64_t)a2);
  log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataClose : End %x", v27, v28, v29, v8);
  return v8;
}

uint64_t engbrk_DataMap(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12 = a4;
  uint64_t v10 = engbrk_DataMapEx(a1, a2, a3, &v12, a5, a6, a7, a8);
  if ((v10 & 0x80000000) == 0 && a4 > v12) {
    bzero((void *)(*a5 + v12), a4 - v12);
  }
  return v10;
}

uint64_t engbrk_DataFreeze(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  if (a1 && a2)
  {
    log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataFreeze : hData=%p : Begin", a6, a7, a8, a2);
    uint64_t v8 = 0;
    if (!*(void *)(a2 + 8))
    {
      uint64_t v14 = osspi_DataFreeze(*(void **)a2);
      uint64_t v8 = v14;
      if ((v14 & 0x80000000) != 0 && (v14 & 0x1FFF) != 1) {
        log_OutPublic(*(void *)(a1 + 8), (uint64_t)"BROKER", 297, "%s%p%s%x", v15, v11, v12, v13, "hData");
      }
    }
    log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataFreeze : End %x", v11, v12, v13, v8);
  }
  return v8;
}

uint64_t engbrk_TagIteratorOpen(uint64_t a1, char *a2, char *a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v8 = 2169528327;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (a1 && a2 && a3 && *a2 && a5 && *a3)
  {
    uint64_t v14 = *(void *)(*(void *)a1 + 16);
    *a5 = 0;
    log_OutText(*(void *)(v14 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorOpen BrokerString=%s Query=%s QueryMode=%d: Begin", a6, a7, a8, (uint64_t)a2);
    int v15 = brkhlp_SearchAddOn(a1, a2, &v39);
    if (v39) {
      BOOL v23 = v15 < 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23 && (v15 & 0x1FFF) == 13) {
      uint64_t v25 = 2169528333;
    }
    else {
      uint64_t v25 = v15;
    }
    if ((v25 & 0x80000000) != 0 || !v39)
    {
      if ((v25 & 0x80000000) != 0) {
        goto LABEL_39;
      }
      uint64_t v37 = v14;
      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v37 = v14;
      uint64_t v26 = *v39;
    }
    for (char i = a3; ; char i = v28 + 1)
    {
      uint64_t v28 = strchr(i, 47);
      if (!v28 && !strcmp(i, "*")) {
        break;
      }
      if (v38) {
        uint64_t v26 = *(void *)(v38 + 16);
      }
      if (!v26) {
        goto LABEL_38;
      }
      if (!v28)
      {
        if ((ssftmap_FindReadOnly(v26, (uint64_t)i, &v38) & 0x80000000) != 0)
        {
LABEL_38:
          uint64_t v25 = 2169528333;
          uint64_t v14 = v37;
          goto LABEL_39;
        }
        break;
      }
      if ((v28 - i) > 0x7FuLL)
      {
        uint64_t v30 = v26;
        uint64_t v29 = i;
      }
      else
      {
        __strncpy_chk();
        v40[v28 - i] = 0;
        uint64_t v29 = v40;
        uint64_t v30 = v26;
      }
      if ((ssftmap_FindReadOnly(v30, (uint64_t)v29, &v38) & 0x80000000) != 0) {
        goto LABEL_38;
      }
    }
    uint64_t v14 = v37;
    uint64_t v31 = heap_Calloc(*(void **)(v37 + 8), 1, 24);
    *a5 = v31;
    if (!v31)
    {
      uint64_t v25 = 2169528330;
LABEL_41:
      uint64_t v35 = *(void *)(v14 + 32);
      if (a4) {
        log_OutText(v35, (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_TagIteratorOpen : BrokerString=%s Query=%s  Failure (%x)", v20, v21, v22, (uint64_t)a2);
      }
      else {
        log_OutPublic(v35, (uint64_t)"BROKER", 282, "%s%s%s%s%s%x", v19, v20, v21, v22, "Broker String");
      }
      goto LABEL_44;
    }
    uint64_t v32 = v31;
    if (!strcmp(i, "*"))
    {
      if (v38) {
        uint64_t v26 = *(void *)(v38 + 16);
      }
      uint64_t String = ssftmap_IteratorOpen(v26, 0, 1, v32 + 16);
LABEL_50:
      uint64_t v25 = String;
      *(void *)*a5 = v37;
      if ((String & 0x80000000) == 0)
      {
LABEL_44:
        log_OutText(*(void *)(v14 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorOpen iterator address = %p: End", v20, v21, v22, *a5);
        return v25;
      }
      goto LABEL_39;
    }
    uint64_t v33 = ssftmap_IteratorOpen(v26, (uint64_t)i, 1, v32 + 16);
    if ((v33 & 0x80000000) == 0)
    {
      uint64_t String = brkhlp_CreateString((char **)(*a5 + 8), i, *(void *)(v37 + 8));
      goto LABEL_50;
    }
    uint64_t v25 = v33;
LABEL_39:
    if (*a5)
    {
      engbrk_TagIteratorClose((void *)*a5, v16, v17, v18, v19, v20, v21, v22);
      *a5 = 0;
    }
    goto LABEL_41;
  }
  return v8;
}

uint64_t engbrk_TagIteratorClose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2169528327;
  }
  uint64_t v9 = *a1;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorClose iterator=%p: Begin", a6, a7, a8, (uint64_t)a1);
  uint64_t v10 = a1[1];
  if (v10) {
    heap_Free(*(void **)(v9 + 8), v10);
  }
  uint64_t v11 = a1[2];
  if (v11) {
    ssftmap_IteratorClose(v11);
  }
  heap_Free(*(void **)(v9 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorClose: End", v12, v13, v14, v16);
  return 0;
}

uint64_t engbrk_DataGetSize(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 2169528327;
  if (a2 && a3 && a1 && a4)
  {
    *a3 = 0;
    *a4 = 0;
    log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataGetSize : hData=%p Get Size Valid=%d Size=%u : Begin", a6, a7, a8, a2);
    uint64_t v16 = *(void *)(a2 + 8);
    if (v16)
    {
      *a4 = *(_DWORD *)(*(void *)(v16 + 8) + 40 * *(unsigned int *)(a2 + 16) + 16);
      *a3 = 1;
    }
    log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataGetSize : End (%x, %d, %u)", v13, v14, v15, 0);
    return 0;
  }
  return result;
}

uint64_t engbrk_TagIteratorNext(uint64_t a1, char **a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0;
  uint64_t v8 = 2169528327;
  if (!a1 || !a2 || !a3) {
    return v8;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorNext iterator=%p: Begin", a6, a7, a8, a1);
  uint64_t v16 = ssftmap_IteratorNext(*(uint64_t **)(a1 + 16), a2, &v22);
  if ((v16 & 0x80000000) != 0) {
    goto LABEL_13;
  }
  uint64_t v17 = *(const char **)(a1 + 8);
  if (!v17 || !strcmp(v17, *a2))
  {
    uint64_t v18 = v22;
    if (v22[2]) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *v22;
    }
    *a3 = v19;
    if (a4) {
      *a4 = v18[1];
    }
LABEL_13:
    uint64_t v8 = v16;
    goto LABEL_14;
  }
  uint64_t v8 = 2169528343;
LABEL_14:
  uint64_t v20 = *a2;
  if (!*a2) {
    uint64_t v20 = &byte_20D5A22AE;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorNext Name=%s, Value=%s, Attrs=%p: End", v13, v14, v15, (uint64_t)v20);
  return v8;
}

uint64_t engbrk_ComponentPathQuery(void *a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  uint64_t v14 = 0;
  if (!a1) {
    return v8;
  }
  if (!a3) {
    return v8;
  }
  if (!a2) {
    return v8;
  }
  if (!*a1) {
    return v8;
  }
  log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentPathQuery BrokerString=%s : Begin", a6, a7, a8, (uint64_t)a2);
  uint64_t v8 = 2169528333;
  if ((brkhlp_SearchAddOn((uint64_t)a1, a2, &v14) & 0x80000000) != 0 || !v14) {
    return v8;
  }
  uint64_t v12 = *v14;
  return brkhlp_SearchTag(v12, (uint64_t)"FULLPATHCOMPONENT", a3);
}

uint64_t engbrk_ComponentPathRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 2169528327;
  if (a1)
  {
    if (a2)
    {
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentPathRelease address = %p : Begin", a6, a7, a8, a2);
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentPathRelease : End", v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_RegisterCupAddon(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v9 = 0;
  *a2 = 0;
  *a3 = 0;
  uint64_t result = 2169528326;
  if (a1)
  {
    if (a4)
    {
      uint64_t result = objc_GetAddRefCountedObject(*(void *)(*(void *)(a4 + 16) + 48), a1, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))ObjcLoadCupAddon, (void (*)(void, void, long long *))ObjcUnloadCupAddon, 0, &v9);
      if ((result & 0x80000000) == 0)
      {
        if (v9)
        {
          uint64_t v8 = *(void **)(v9 + 32);
          if (v8)
          {
            *a2 = *(void *)(*v8 + 16);
            *a3 = v8[3];
          }
        }
      }
    }
  }
  return result;
}

uint64_t ObjcLoadCupAddon(_WORD *a1, int a2, char *a3, uint64_t a4)
{
  BOOL v23 = 0;
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t v10 = v9;
  uint64_t inited = InitRsrcFunction(a1, a2, &v24);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v12 = 2169528330;
  uint64_t v13 = heap_Calloc(*(void **)(v24 + 8), 1, 32);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = strhelper_Strdup(*(void *)(v24 + 8), a3);
    *(void *)(v14 + 8) = v15;
    if (v15)
    {
      uint64_t v16 = heap_Calloc(*(void **)(v24 + 8), 1, 8);
      *(void *)(v14 + 24) = v16;
      if (v16)
      {
        uint64_t v17 = UriToBrokerString(*(void **)(v24 + 8), a3);
        *(void *)(v14 + 16) = v17;
        if (v17)
        {
          if ((objc_GetObject(*(void *)(v24 + 48), (uint64_t)"URIFETCHER", &v23) & 0x80000000) != 0)
          {
            uint64_t v18 = 0;
          }
          else
          {
            uint64_t v18 = v23[1];
            uint64_t NullHandle = v23[2];
            uint64_t v10 = v23[3];
          }
          uint64_t v19 = clcarchive_ObjOpen(a1, a2, *(const char **)(v14 + 16), &v22);
          if ((v19 & 0x80000000) == 0)
          {
            ++*(_DWORD *)(v22 + 120);
            uint64_t v19 = osspi_DataOpenEx(*(void **)(v24 + 64), *(void **)(v24 + 8), v18, NullHandle, v10, (uint64_t)a3, &v21);
            if ((v19 & 0x80000000) == 0)
            {
              uint64_t v19 = osspi_ClcDataOpen(v21, v22);
              if ((v19 & 0x80000000) == 0)
              {
                **(void **)(v14 + 24) = v21;
                uint64_t v19 = brkhlp_RegisterAddon(*(char **)(v14 + 16), a3, v22, (void *)v14, **(void **)(v24 + 24));
              }
            }
          }
          uint64_t v12 = v19;
          if (v18 && NullHandle) {
            objc_ReleaseObject(*(void *)(v24 + 48), (uint64_t)"URIFETCHER");
          }
          if ((v12 & 0x80000000) == 0)
          {
            *(void *)(a4 + 32) = v14;
            return v12;
          }
        }
        else
        {
          uint64_t v12 = 2169528338;
        }
      }
    }
    FreeAllCupAddonResources(v24, (void *)v14);
  }
  return v12;
}

uint64_t ObjcUnloadCupAddon(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v7);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v5 = *(void **)(a3 + 32);
    if (v5) {
      FreeAllCupAddonResources(v7, v5);
    }
  }
  return inited;
}

uint64_t engbrk_UnregisterCupAddon(uint64_t a1, uint64_t a2)
{
  if (a1) {
    objc_ReleaseObject(*(void *)(*(void *)(a2 + 16) + 48), a1);
  }
  return 0;
}

uint64_t engbrk_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 8;
  }
  uint64_t result = 0;
  *a2 = &IBroker;
  return result;
}

char *brkhlp_CloneString(void *a1, char *__s)
{
  if (!__s) {
    return 0;
  }
  int v4 = strlen(__s);
  uint64_t result = (char *)heap_Calloc(a1, 1, (v4 + 1));
  if (result) {
    return strcpy(result, __s);
  }
  return result;
}

uint64_t brkhlp_ElemCopyConstPtr(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t brkhlp_ElemCopyAddOn(long long *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = heap_Alloc(a2, 24);
  if (!v5) {
    return 2169528330;
  }
  uint64_t v6 = v5;
  uint64_t result = 0;
  long long v8 = *a1;
  *(void *)(v6 + 16) = *((void *)a1 + 2);
  *(_OWORD *)uint64_t v6 = v8;
  *(void *)a1 = 0;
  *((void *)a1 + 2) = 0;
  *a3 = v6;
  return result;
}

uint64_t *brkhlp_ElemFreeAddOn(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *result;
    if (v4) {
      hdrpars_FreeHeader(v4);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t brkhlp_ElemCopyLoadedIntf(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (_OWORD *)heap_Alloc(a2, 32);
  if (!v5) {
    return 2169528330;
  }
  uint64_t v6 = v5;
  long long v7 = *(_OWORD *)(a1 + 16);
  *uint64_t v5 = *(_OWORD *)a1;
  v5[1] = v7;
  *(void *)a1 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t result = 0;
  *(void *)(a1 + 16) = NullHandle;
  *(void *)(a1 + 24) = v10;
  *a3 = v6;
  return result;
}

uint64_t *brkhlp_ElemFreeLoadedIntf(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (result[2])
    {
      uint64_t v4 = *(void (**)(void))(result[1] + 24);
      if (v4) {
        v4();
      }
    }
    if (*v3) {
      osspi_DynModClose(*v3);
    }
    return heap_Free(a2, (uint64_t)v3);
  }
  return result;
}

uint64_t brkhlp_InternalSearchAddOn(uint64_t a1, char *a2, void *a3)
{
  uint64_t v5 = 2169528333;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v6 = ssftmap_IteratorOpen(*(void *)(*(void *)a1 + 40), (uint64_t)a2, 1, (uint64_t)&v12);
  uint64_t v7 = v6;
  if ((v6 & 0x80000000) != 0)
  {
    if ((v6 & 0x1FFF) == 0x14) {
      return 2169528333;
    }
    else {
      return v6;
    }
  }
  while ((ssftmap_IteratorNext(v12, &v11, &v10) & 0x80000000) == 0)
  {
    int v8 = LH_stricmp(a2, v11);
    if (!v8)
    {
      *a3 = v10;
      break;
    }
    if (v8 > 0) {
      break;
    }
  }
  ssftmap_IteratorClose((uint64_t)v12);
  if (*a3) {
    return v7;
  }
  return v5;
}

uint64_t brkhlp_allocateAndStoreTagInMap(void *a1, uint64_t a2, char *__s, uint64_t a4, void *a5)
{
  unsigned int v10 = strlen(__s);
  uint64_t v11 = heap_Calloc(a1, 1, v10 + 25);
  if (!v11) {
    return 2169528330;
  }
  uint64_t v12 = (void *)v11;
  uint64_t v13 = (char *)(v11 + 24);
  void *v12 = v13;
  strcpy(v13, __s);
  uint64_t result = ssftmap_Insert(a2, a4, (uint64_t)v12);
  if ((result & 0x80000000) == 0) {
    *a5 = v12;
  }
  return result;
}

uint64_t brkhlp_ElemCopyTag(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a1;
  return 0;
}

void *brkhlp_ElemFreeTag(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = result[1];
    if (v4) {
      ssftmap_ObjClose(v4);
    }
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5) {
      ssftmap_ObjClose(v5);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

void *FreeAllCupAddonResources(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = (uint64_t *)a2[3];
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (char *)a2[2];
    uint64_t v8 = **(void **)(a1 + 24);
    uint64_t v19 = 0;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v10 = *(void *)(v8 + 16);
      if (v10)
      {
        if ((critsec_Enter(*(void **)(v8 + 24)) & 0x80000000) == 0)
        {
          if ((brkhlp_InternalSearchAddOn(*(void *)(*(void *)(v8 + 16) + 24), v7, &v19) & 0x80000000) == 0)
          {
            uint64_t v11 = v19;
            uint64_t v12 = *(void *)(v19 + 16);
            if (v12)
            {
              if (v6)
              {
                osspi_ClcDataClose(v6, v12);
                uint64_t v12 = *(void *)(v11 + 16);
              }
              --*(_DWORD *)(v12 + 120);
              clcarchive_ObjClose(v12);
            }
          }
          if ((ssftmap_Remove(*(void *)(v8 + 40), (uint64_t)v7) & 0x80000000) == 0) {
            log_OutText(*(void *)(v10 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_RemoveAddOn: %s", v13, v14, v15, (uint64_t)v7);
          }
          critsec_Leave(*(void **)(v8 + 24));
        }
      }
    }
    if (v6) {
      osspi_DataClose(v6);
    }
    heap_Free(v4, a2[3]);
    uint64_t v4 = *(void **)(a1 + 8);
  }
  uint64_t v16 = a2[1];
  if (v16)
  {
    heap_Free(v4, v16);
    uint64_t v4 = *(void **)(a1 + 8);
  }
  uint64_t v17 = a2[2];
  if (v17)
  {
    heap_Free(v4, v17);
    uint64_t v4 = *(void **)(a1 + 8);
  }
  return heap_Free(v4, (uint64_t)a2);
}

uint64_t brkhlp_GetBuiltinInterface(char *__s1, void *a2, void *a3, void *a4)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  uint64_t v8 = "fe/fe_prmfx";
  BOOL v9 = &off_26C21DE18;
  while (strcmp(__s1, v8))
  {
    uint64_t v10 = *v9;
    v9 += 4;
    uint64_t v8 = v10;
    if (!v10) {
      return 2169528333;
    }
  }
  uint64_t v12 = (uint64_t)*(v9 - 3);
  uint64_t result = 0;
  if (v12)
  {
    *a2 = v12;
  }
  else
  {
    *a3 = *(v9 - 2);
    *a4 = *(v9 - 1);
  }
  return result;
}

uint64_t log_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = 2226135048;
  uint64_t v20 = 0;
  if (!a4) {
    return 2226135046;
  }
  if ((InitRsrcFunction(a1, a2, &v20) & 0x80000000) == 0)
  {
    *a4 = 0;
    uint64_t v8 = heap_Calloc(*(void **)(v20 + 8), 1, 224);
    if (v8)
    {
      uint64_t v9 = v8;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 192) = 0u;
      *(_OWORD *)(v8 + 208) = 0u;
      *(_OWORD *)(v8 + 160) = 0u;
      *(_OWORD *)(v8 + 176) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(void *)uint64_t v8 = a1;
      *(void *)(v8 + 8) = a2;
      *(void *)(v8 + 16) = v20;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v22 = 0;
      BOOL v23 = 0;
      bzero(v26, 0x400uLL);
      uint64_t v21 = 0;
      if ((InitRsrcFunction(*(_WORD **)v9, *(void *)(v9 + 8), &v25) & 0x80000000) != 0 || !*(void *)(v25 + 40))
      {
LABEL_49:
        log_ClassClose(v9);
      }
      else
      {
        if (brk_TagIteratorOpen(*(void *)(*(void *)(v9 + 16) + 24), "logging", "*", 1, &v21)) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v21 == 0;
        }
        if (!v10)
        {
          while ((brk_TagIteratorNext(v21, (uint64_t)&v23, (uint64_t)&v22) & 0x80000000) == 0)
          {
            uint64_t v12 = v22;
            uint64_t v11 = v23;
            if (v23) {
              BOOL v13 = v22 == 0;
            }
            else {
              BOOL v13 = 1;
            }
            if (v13 || !strcmp(v23, "BROKERSTRING")) {
              continue;
            }
            v26[0] = 0;
            if (!strcmp(v11, "LOG.DIAGNOSTIC"))
            {
              BOOL v23 = "logfile.enabled";
              goto LABEL_36;
            }
            if (!strcmp(v11, "LOG.DIAGNOSTIC.LEVEL"))
            {
              uint64_t v14 = "logfile.filter.level";
            }
            else if (!strcmp(v11, "LOG.DIAGNOSTIC.DIR"))
            {
              uint64_t v14 = "logfile.filename.1";
            }
            else
            {
              if (!strcmp(v11, "LOG.DIAGNOSTIC.FILEMAXSIZEMB"))
              {
                BOOL v23 = "logfile.max_size";
                __strcpy_chk();
                __strcat_chk();
LABEL_32:
                uint64_t v22 = v26;
                goto LABEL_36;
              }
              if (!strcmp(v11, "LOG.DIAGNOSTIC.FILEMIMETYPE"))
              {
                uint64_t v14 = "logfile.filemimetype";
              }
              else
              {
                if (!strcmp(v11, "LOG.DIAGNOSTIC.MODULES"))
                {
                  BOOL v23 = "logfile.filter.modules";
                  LH_MapModuleNamesToIds(v12, v26, 0x400u);
                  goto LABEL_32;
                }
                if (!strcmp(v11, "LOG.TSO"))
                {
                  uint64_t v14 = "logtso.enabled";
                }
                else if (!strcmp(v11, "LOG.TSO.LEVEL"))
                {
                  uint64_t v14 = "logtso.filter.level";
                }
                else
                {
                  if (strcmp(v11, "LOG.TSO.FILENAME")) {
                    goto LABEL_36;
                  }
                  uint64_t v14 = "logtso.filename";
                }
              }
            }
            BOOL v23 = v14;
LABEL_36:
            int Str = paramc_ParamGetStr(*(void *)(v25 + 40), (uint64_t)v23, &v24);
            uint64_t v16 = *(void *)(v25 + 40);
            if (Str < 0)
            {
              if ((paramc_ParamSetStr(v16, (uint64_t)v23, v22) & 0x80000000) != 0)
              {
                brk_TagIteratorClose(v21);
                uint64_t v4 = 2226135040;
                goto LABEL_49;
              }
            }
            else
            {
              paramc_ParamRelease(v16);
            }
          }
          brk_TagIteratorClose(v21);
        }
        uint64_t v17 = 0;
        uint64_t v18 = (uint64_t *)&LOG_SUBSCRIBER_ID;
        do
        {
          if (v17 != 40) {
            brk_InterfaceQueryEx(*(void *)(*(void *)(v9 + 16) + 24), *v18, 1, 1, v9 + v17 + 48, v9 + v17 + 40);
          }
          v17 += 40;
          ++v18;
        }
        while (v17 != 200);
        uint64_t v4 = 0;
        *a4 = v9;
      }
    }
    else
    {
      return 2226135050;
    }
  }
  return v4;
}

uint64_t log_ClassClose(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  for (uint64_t i = 40; i != 240; i += 40)
  {
    uint64_t v3 = *(void *)(a1 + i);
    if (v3)
    {
      uint64_t v4 = brk_InterfaceRelease(*(void *)(*(void *)(a1 + 16) + 24), v3);
      if ((v4 & 0x80000000) != 0) {
        return v4;
      }
      *(void *)(a1 + i) = 0;
    }
  }
  uint64_t v8 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v8);
  if ((inited & 0x80000000) != 0) {
    return 2226135048;
  }
  uint64_t v6 = inited;
  heap_Free(*(void **)(v8 + 8), a1);
  return v6;
}

uint64_t log_ObjOpen(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v3 = 2226135046;
    if (a2)
    {
      *a2 = 0;
      uint64_t v5 = (_OWORD *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 128);
      if (v5)
      {
        uint64_t v6 = (uint64_t)v5;
        uint64_t v7 = 0;
        v5[6] = 0u;
        v5[7] = 0u;
        v5[4] = 0u;
        v5[5] = 0u;
        v5[2] = 0u;
        v5[3] = 0u;
        *uint64_t v5 = 0u;
        v5[1] = 0u;
        *(void *)uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
        uint64_t v8 = (void *)(a1 + 56);
        do
        {
          uint64_t v9 = *(v8 - 2);
          *(void *)(v6 + v7 + 24) = v9;
          if (v9)
          {
            uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t))(v9 + 32))(*(v8 - 1), *v8, v6 + v7 + 16);
            if ((v10 & 0x80000000) != 0)
            {
              uint64_t v3 = v10;
              log_ObjClose(v6);
              return v3;
            }
          }
          v8 += 5;
          v7 += 16;
        }
        while (v7 != 80);
        uint64_t v11 = 0;
        *(_DWORD *)(v6 + 96) = 1;
        do
        {
          uint64_t v12 = *(void *)(v6 + v11 + 24);
          if (v12)
          {
            BOOL v13 = *(uint64_t (**)(void))(v12 + 80);
            if (v13)
            {
              unsigned int v14 = v13(*(void *)(v6 + v11 + 16));
              if (v14 > *(_DWORD *)(v6 + 96)) {
                *(_DWORD *)(v6 + 96) = v14;
              }
            }
          }
          v11 += 16;
        }
        while (v11 != 80);
        uint64_t v3 = 0;
        *a2 = v6;
      }
      else
      {
        return 2226135050;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    *a2 = 0;
  }
  return v3;
}

uint64_t log_ObjClose(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = (void **)result;
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v3 = v1[v2 + 3];
      if (v3)
      {
        uint64_t v4 = (uint64_t (*)(void))v3[5];
        if (v4)
        {
          if (v1[v2 + 2])
          {
            uint64_t result = v4();
            if ((result & 0x80000000) != 0) {
              break;
            }
          }
        }
      }
      v2 += 2;
      if (v2 == 10)
      {
        heap_Free(*v1, (uint64_t)v1);
        return 0;
      }
    }
  }
  return result;
}

uint64_t log_SubscriberAdd(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*(void *)(result + 112))
    {
      return 2226135040;
    }
    else
    {
      *(void *)(result + 104) = a2;
      *(void *)(result + 112) = a3;
      if (a3 && (uint64_t v4 = *(uint64_t (**)(uint64_t))(a3 + 80)) != 0 && (v5 = v4(a2), v5 > *(_DWORD *)(v3 + 96)))
      {
        unsigned int v6 = v5;
        uint64_t result = 0;
        *(_DWORD *)(v3 + 96) = v6;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t LH_ERROR_to_VERROR(int a1)
{
  uint64_t v1 = 0;
  while (LH_ERROR_to_VERROR_lh2v[v1] != a1)
  {
    v1 += 2;
    if (v1 == 22) {
      return 2703237376;
    }
  }
  if (v1 * 4) {
    return LH_ERROR_to_VERROR_lh2v[v1 + 1] | 0xA1202000;
  }
  else {
    return 0;
  }
}

uint64_t compstats_ObjOpen(_WORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v26 = 0;
  uint64_t result = 2285903879;
  if (!a3) {
    return result;
  }
  if (!a4) {
    return result;
  }
  uint64_t result = InitRsrcFunction(a1, a2, &v26);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v9 = heap_Calloc(*(void **)(v26 + 8), 1, 320);
  if (!v9)
  {
LABEL_13:
    log_OutPublic(*(void *)(v26 + 32), (uint64_t)"CompStats", 2688, 0, v10, v11, v12, v13, v25);
    return 2285903882;
  }
  unsigned int v14 = (void *)v9;
  *(_DWORD *)(v9 + 284) = a3;
  uint64_t v15 = 2 * a3;
  uint64_t v16 = heap_Calloc(*(void **)(v26 + 8), v15, 56);
  v14[36] = v16;
  if (!v16)
  {
    heap_Free(*(void **)(v26 + 8), (uint64_t)v14);
    goto LABEL_13;
  }
  *unsigned int v14 = a1;
  v14[1] = a2;
  v14[2] = v26;
  v14[38] = v16 + 56 * a3;
  if (v15)
  {
    uint64_t v17 = 0;
    __asm { FMOV            V1.2D, #1.0 }
    do
    {
      uint64_t v23 = v14[36];
      if (v23)
      {
        uint64_t v24 = v23 + v17;
        *(void *)(v24 + 48) = 0;
        *(_OWORD *)(v24 + 16) = 0uLL;
        *(_OWORD *)(v24 + 32) = 0uLL;
        *(_OWORD *)uint64_t v24 = 0uLL;
        *(_OWORD *)(v24 + 40) = _Q1;
        *(void *)(v24 + 32) = 0;
      }
      v17 += 56;
    }
    while (56 * v15 != v17);
  }
  *(void *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 61435;
  return compstats_Reset((uint64_t)v14);
}

uint64_t compstats_ClockInit(uint64_t a1)
{
  if (!a1) {
    return 2285903879;
  }
  uint64_t result = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 40) = _Q0;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t compstats_Reset(uint64_t a1)
{
  if (!a1) {
    return 2285903879;
  }
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  unint64_t v1 = *(unsigned int *)(a1 + 284);
  if (v1)
  {
    uint64_t v2 = 0;
    for (unint64_t i = 0; i < v1; ++i)
    {
      uint64_t v4 = *(void *)(a1 + 288);
      if (v4)
      {
        uint64_t v5 = v4 + v2;
        *(void *)(v5 + 32) = 0;
        *(_OWORD *)uint64_t v5 = 0uLL;
        *(_OWORD *)(v5 + 16) = 0uLL;
        unint64_t v1 = *(unsigned int *)(a1 + 284);
      }
      v2 += 56;
    }
  }
  return 0;
}

uint64_t compstats_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 61435, 320);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 16) + 8);
    heap_Free(v4, *(void *)(a1 + 288));
    heap_Free(v4, a1);
  }
  return v3;
}

uint64_t compstats_Start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    int v9 = a3;
    if (*(_DWORD *)(a1 + 284) <= a3)
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"CompStats", 2689, 0, a5, a6, a7, a8, v21);
    }
    else if (*(_DWORD *)(a1 + 24) < 0x40u)
    {
      uint64_t v11 = compstats_ClockXStart(*(void *)(a1 + 288) + 56 * a3, *(void *)(a1 + 16) + 384, a3, a4, a5, a6, a7, a8);
      if ((v11 & 0x80000000) != 0)
      {
        return v11;
      }
      else
      {
        unsigned int v18 = *(_DWORD *)(a1 + 24);
        if (v18 && (unsigned int v19 = *(_DWORD *)(a1 + 4 * (v18 - 1) + 28)) != 0)
        {
          uint64_t v8 = compstats_ClockXStop(*(void *)(a1 + 288) + 56 * v19, *(void *)(a1 + 16) + 384, v12, v13, v14, v15, v16, v17);
          unsigned int v18 = *(_DWORD *)(a1 + 24);
        }
        else
        {
          uint64_t v8 = 0;
        }
        *(_DWORD *)(a1 + 4 * v18 + 28) = v9;
        *(_DWORD *)(a1 + 24) = v18 + 1;
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"CompStats", 2690, 0, a5, a6, a7, a8, v21);
      return 2285903889;
    }
  }
  return v8;
}

uint64_t compstats_ClockXStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2693, 0, a5, a6, a7, a8, v12[0]);
      return 2285903889;
    }
    else
    {
      uint64_t v10 = *(void (***)(void, void *))a2;
      if (*(void *)a2)
      {
        memset(v12, 0, 12);
        (*v10)(*(void *)(a2 + 8), v12);
        uint64_t v8 = 0;
        *(_DWORD *)(a1 + 12) = v12[0];
        *(void *)(a1 + 4) = *(void *)((char *)v12 + 4);
      }
      else
      {
        return 0;
      }
    }
  }
  return v8;
}

uint64_t compstats_ClockXStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      memset(v14, 0, sizeof(v14));
      uint64_t v15 = 0;
      compstats_ClockXStart((uint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
      int32x2_t v10 = vsub_s32(*(int32x2_t *)((char *)v14 + 4), *(int32x2_t *)(a1 + 4));
      int v11 = *(_DWORD *)(a1 + 16);
      unsigned int v12 = HIDWORD(v14[0]) - *(_DWORD *)(a1 + 12);
      *(int32x2_t *)(a1 + 28) = vadd_s32(*(int32x2_t *)(a1 + 28), v10);
      *(_DWORD *)(a1 + 36) += v12;
      if (*(_DWORD *)(a1 + 20) + v11 < vadd_s32(vdup_lane_s32(v10, 1), v10).u32[0]) {
        *(int32x2_t *)(a1 + 16) = v10;
      }
      if (*(_DWORD *)(a1 + 24) < v12) {
        *(_DWORD *)(a1 + 24) = v12;
      }
      uint64_t v8 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)a1 = (*(_DWORD *)a1 + 1);
    }
    else
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2694, 0, a5, a6, a7, a8, v14[0]);
      return 2285903889;
    }
  }
  return v8;
}

uint64_t compstats_Stop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (!a1) {
    return v8;
  }
  if (*(_DWORD *)(a1 + 284) <= a3)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"CompStats", 2691, 0, a5, a6, a7, a8, v22);
    return v8;
  }
  int v10 = *(_DWORD *)(a1 + 24);
  if (!v10 || *(_DWORD *)(a1 + 4 * (v10 - 1) + 28) != a3)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"CompStats", 2692, 0, a5, a6, a7, a8, v22);
    return 2285903889;
  }
  uint64_t v8 = compstats_ClockXStop(*(void *)(a1 + 288) + 56 * a3, *(void *)(a1 + 16) + 384, a3, a4, a5, a6, a7, a8);
  int v17 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v17 - 1;
  if (v17 == 1) {
    return v8;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 4 * (v17 - 2) + 28);
  if (!v18) {
    return v8;
  }
  uint64_t v19 = *(void *)(a1 + 288) + 56 * v18;
  uint64_t v20 = *(void *)(a1 + 16) + 384;
  return compstats_ClockXStart(v19, v20, v11, v12, v13, v14, v15, v16);
}

uint64_t compstats_Notify(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 2285903879;
  }
  if (a3 != 8) {
    return 0;
  }
  if (!*(_DWORD *)(a1 + 296))
  {
    *(_DWORD *)(a1 + 296) = 1;
    memcpy(*(void **)(a1 + 304), *(const void **)(a1 + 288), 56 * *(unsigned int *)(a1 + 284));
    int v10 = *(_DWORD *)(a1 + 24);
    if (v10)
    {
      unsigned int v11 = v10 - 1;
      do
      {
        uint64_t v12 = *(void *)(a1 + 304);
        unsigned int v13 = *(_DWORD *)(a1 + 4 * v11 + 28);
        if (*(_DWORD *)(v12 + 56 * v13 + 12)) {
          compstats_ClockXStop(v12 + 56 * v13, *(void *)(a1 + 16) + 384, v4, v5, v6, v7, v8, v9);
        }
      }
      while ((unint64_t)v11--);
    }
    paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"audiooutputbufsamples", (unsigned int *)(a1 + 312));
  }
  return 0;
}

uint64_t compstats_ClockReset(uint64_t a1)
{
  if (!a1) {
    return 2285903879;
  }
  uint64_t result = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t compstats_Log(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v15 = 0;
  uint64_t result = 2285903879;
  if (a1 && a3)
  {
    if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pipeline", &v15) & 0x80000000) != 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v14 = v15;
    }
    if (*(_DWORD *)(a1 + 296))
    {
      compstats_LogReport(*(_DWORD *)(a1 + 284), *(_DWORD **)(a1 + 304), a3, a4, (uint64_t)" Latency", v14, *(unsigned int *)(a1 + 312), a5, 0, 0);
      uint64_t v14 = v15;
    }
    compstats_LogReport(*(_DWORD *)(a1 + 284), *(_DWORD **)(a1 + 288), a3, a4, 0, v14, *(unsigned int *)(a1 + 312), a5, a6, a7);
    return 0;
  }
  return result;
}

uint64_t compstats_LogReport(unsigned int a1, _DWORD *a2, uint64_t a3, char *a4, uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (a4) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = &byte_20D5A22AE;
  }
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"====================Compstats %s%s Report Start====================", (uint64_t)a6, a7, a8, (uint64_t)v16);
  if (a6 && *a6) {
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"Pipeline %s", v17, v18, v19, (uint64_t)a6);
  }
  if (a7) {
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"Audio output buffer samples %u", v17, v18, v19, a7);
  }
  int v20 = a9;
  int v21 = a10;
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"<CPU msec> / <real-time msec>, <%% CPU> / <%% real-time> (timer starts), <max CPU> / <max real-time>", v17, v18, v19, v53);
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v22, v23, v24, v54);
  int v28 = a2[8] + a2[7];
  if (a1 <= 1)
  {
    BOOL v39 = v28 == 0;
  }
  else
  {
    uint64_t v59 = v16;
    unsigned int v29 = 0;
    unsigned int v30 = 0;
    uint64_t v31 = a1 - 1;
    uint64_t v32 = a2 + 23;
    uint64_t v33 = v31;
    int v34 = a2[9];
    int v35 = a2[8] + a2[7];
    do
    {
      v35 -= *(v32 - 2) + *(v32 - 1);
      v34 -= *v32;
      if (v30 <= *(v32 - 4) + *(v32 - 5)) {
        unsigned int v30 = *(v32 - 4) + *(v32 - 5);
      }
      if (v29 <= *(v32 - 3)) {
        unsigned int v29 = *(v32 - 3);
      }
      v32 += 14;
      --v33;
    }
    while (v33);
    BOOL v58 = v28 == 0;
    uint64_t v36 = a2 + 26;
    uint64_t v37 = (char **)(a8 + 8);
    do
    {
      if (a8)
      {
        uint64_t v38 = *v37;
        if (!*v37) {
          uint64_t v38 = &byte_20D5A22AE;
        }
      }
      else
      {
        uint64_t v38 = &byte_20D5A22AE;
      }
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.1f / %7.1f, %6.1f%% / %6.1f%% (%4u), %7.1f / %7.1f", v25, v26, v27, (uint64_t)v38);
      v36 += 14;
      ++v37;
      --v31;
    }
    while (v31);
    uint64_t v16 = v59;
    int v20 = a9;
    int v21 = a10;
    BOOL v39 = v58;
  }
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.1f / %7.1f, %6.1f%% / %6.1f%% (%4u)", v25, v26, v27, (uint64_t)"Other");
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v40, v41, v42, v55);
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.1f / %7.1f  %6s    %6s   %4s   %7.1f / %7.1f", v43, v44, v45, (uint64_t)"TOTAL");
  if (v21 | v20)
  {
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v46, v47, v48, v56);
    if (v20) {
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7u", v49, v50, v51, (uint64_t)"Input text length (bytes)");
    }
    if (v21)
    {
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7u", v49, v50, v51, (uint64_t)"Output duration (msec)");
      if (!v39) {
        log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.2f / %7.2f", v49, v50, v51, (uint64_t)"Real-time rate");
      }
    }
    if (v20) {
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.2f / %7.2f", v49, v50, v51, (uint64_t)"Msec per byte of input");
    }
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v49, v50, v51, v57);
  }
  return log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"====================Compstats %s%s Report End====================", v46, v47, v48, (uint64_t)v16);
}

uint64_t compstats_ClockStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2693, 0, a5, a6, a7, a8, v10);
      return 2285903889;
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t compstats_ClockStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      return 0;
    }
    else
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2694, 0, a5, a6, a7, a8, v10);
      return 2285903889;
    }
  }
  return v8;
}

uint64_t critsec_cb_ClassOpen(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 2168463367;
  if (a3)
  {
    unsigned int v11 = (void *)heap_Calloc(a1, 1, 32);
    *(void *)a5 = v11;
    if (v11)
    {
      uint64_t v5 = 0;
      void *v11 = a1;
      *(void *)(*(void *)a5 + 8) = a2;
      *(void *)(*(void *)a5 + 16) = a3;
      *(void *)(*(void *)a5 + 24) = a4;
    }
    else
    {
      return 2168463370;
    }
  }
  return v5;
}

uint64_t critsec_cb_ClassClose(uint64_t *a1)
{
  uint64_t result = 2168463367;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(void **)*a1, *a1);
      uint64_t result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t critsec_ObjOpen(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = 2168463367;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = (void *)heap_Calloc(a2, 1, 24);
    *a3 = (uint64_t)v7;
    if (v7)
    {
      *uint64_t v7 = a1;
      *(void *)(*a3 + 8) = a2;
      uint64_t v8 = **(uint64_t (***)(void, void, uint64_t))(a1 + 16);
      if (v8)
      {
        uint64_t v3 = v8(*(void *)(a1 + 24), *(void *)(a1 + 8), *a3 + 16);
        if ((v3 & 0x80000000) != 0)
        {
          heap_Free(a2, *a3);
          *a3 = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2168463370;
    }
  }
  return v3;
}

uint64_t critsec_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2168463367;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 8);
  if (v2)
  {
    uint64_t v3 = v2(*(void *)(a1 + 16));
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  heap_Free(*(void **)(a1 + 8), a1);
  return v3;
}

uint64_t critsec_Enter(void *a1)
{
  if (!a1) {
    return 2168463367;
  }
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 16);
  if (v1) {
    return v1(a1[2]);
  }
  else {
    return 0;
  }
}

uint64_t critsec_Leave(void *a1)
{
  if (!a1) {
    return 2168463367;
  }
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 24);
  if (v1) {
    return v1(a1[2]);
  }
  else {
    return 0;
  }
}

uint64_t brk_ClassOpen(_WORD *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v14);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v13 = v14;
    memcpy((void *)(v14 + 80), a3, 0x130uLL);
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 96))(a1, a2, a4, a5, a6);
  }
  return result;
}

uint64_t brk_ClassClose(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 104))();
  }
  return result;
}

uint64_t brk_ClassUpdate(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 352))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ObjOpen(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 120))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ObjClose(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 128))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ObjGetClass(uint64_t a1, void *a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 136))();
  }
  if (a2) {
    *a2 = 0;
  }
  return 2169528327;
}

uint64_t brk_InterfaceQuery(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 264))();
}

uint64_t brk_InterfaceQueryEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 && a2 && a6) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 272))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_InterfaceRelease(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 280))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_TagQueryEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 && a5 && a3 && a2 && *(void *)a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 160))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_TagRelease(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 168))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ComponentTableIteratorOpen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a3 && a2 && *(void *)a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 240))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ComponentTableIteratorNext(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ComponentTableIteratorClose(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataOpen(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 296))();
}

uint64_t brk_DataOpenEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2 && a4) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 304))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataClose(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 312))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a1 && a5) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 320))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataMapEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a1 && a4 && a5) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 328))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataUnmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 336))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataMapDeRefCnt(_WORD *a1, int a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v11);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(a3, a4, &v10);
    if ((result & 0x80000000) == 0)
    {
      ObjcForThisApunint64_t i = getObjcForThisApi(v11, v10);
      return objc_ReleaseObject(ObjcForThisApi, a5);
    }
  }
  return result;
}

uint64_t getObjcForThisApi(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  __s1 = 0;
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"clcpppipelinemode", &__s1) & 0x80000000) != 0
    || !__s1
    || !*__s1
    || !strcmp(__s1, "internal"))
  {
    uint64_t v3 = a2;
  }
  return *(void *)(v3 + 48);
}

uint64_t brk_DataMapRefCnt(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, int a6, int a7, void *a8)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v24);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(a3, a4, &v23);
    if ((result & 0x80000000) == 0)
    {
      v19[0] = a1;
      v19[1] = a2;
      v19[2] = a3;
      uint64_t v19[3] = a4;
      int v20 = a6;
      int v21 = a7;
      ObjcForThisApunint64_t i = getObjcForThisApi(v24, v23);
      uint64_t result = objc_GetAddRefCountedObject(ObjcForThisApi, a5, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))brkDataMap_ObjcLoad, (void (*)(void, void, long long *))brkDataMap_ObjcClose, (uint64_t)v19, &v22);
      if ((result & 0x80000000) != 0) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *(void *)(v22 + 32);
      }
      *a8 = v18;
    }
  }
  return result;
}

uint64_t brkDataMap_ObjcLoad(_WORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v17);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)(a5 + 16), *(void *)(a5 + 24), &v18);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v9 = 2169528327;
  uint64_t v10 = v17;
  uint64_t v11 = heap_Calloc(*(void **)(v17 + 8), 1, 272);
  *(void *)(a4 + 32) = v11;
  if (!v11) {
    return 2169528330;
  }
  if (a3)
  {
    uint64_t v12 = *(void *)(v10 + 24);
    if (v12)
    {
      uint64_t inited = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v12 + 16) + 304))(*(void *)(v10 + 24), a3, 1, v11 + 256);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t v13 = *(void *)(v10 + 24);
        uint64_t v14 = *(void *)(a4 + 32);
        if (v13)
        {
          uint64_t v15 = *(void *)(v14 + 256);
          if (v15) {
            uint64_t v9 = (*(uint64_t (**)(void, uint64_t, void, void, uint64_t))(*(void *)(*(void *)v13 + 16)
          }
                                                                                     + 320))(*(void *)(v10 + 24), v15, *(unsigned int *)(a5 + 32), *(unsigned int *)(a5 + 36), v14 + 264);
        }
        __strcpy_chk();
        return v9;
      }
      return inited;
    }
  }
  return v9;
}

uint64_t brkDataMap_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v13 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v13);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v5 = 2169528327;
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(v13 + 24);
  if (v7) {
    BOOL v8 = *(void *)(v6 + 256) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8 && *(void *)(v6 + 264) != 0)
  {
    uint64_t inited = (*(uint64_t (**)(void))(*(void *)(*(void *)v7 + 16) + 336))();
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v10 = *(void *)(v13 + 24);
      if (v10) {
        BOOL v11 = *(void *)(v6 + 256) == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(*(void *)v10 + 16) + 312))();
        if ((v5 & 0x80000000) == 0) {
          heap_Free(*(void **)(v13 + 8), v6);
        }
      }
      return v5;
    }
    return inited;
  }
  return v5;
}

uint64_t brk_DataFreeze(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 344))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_TagIteratorOpen(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4, void *a5)
{
  if (!a1 || !a2 || !a3 || !*a2 || !a5 || !*a3) {
    return 2169528327;
  }
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  *a5 = 0;
  return (*(uint64_t (**)(void))(v5 + 200))();
}

uint64_t brk_TagIteratorNext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_TagIteratorClose(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_RegisterCupAddon(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2 && (uint64_t v4 = *a1) != 0 && (v5 = *(void *)(v4 + 16)) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 368))(a2, a3, a4, v4);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_UnregisterCupAddon(uint64_t *a1, uint64_t a2)
{
  if (a1 && a2 && (v2 = *a1) != 0 && (uint64_t v3 = *(void *)(v2 + 16)) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 376))(a2, v2);
  }
  else {
    return 2169528327;
  }
}

uint64_t filespi_fopen(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a2 && a5)
  {
    if (**(void **)(a1 + 16))
    {
      BOOL v11 = (void *)heap_Calloc(a2, 1, 24);
      *a5 = (uint64_t)v11;
      if (v11)
      {
        void *v11 = a1;
        *(void *)(*a5 + 8) = a2;
        uint64_t v5 = (**(uint64_t (***)(void, void, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(void *)(a1 + 24), *(void *)(a1 + 8), a3, a4, *a5 + 16);
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(a2, *a5);
          *a5 = 0;
        }
      }
      else
      {
        return 2153783306;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return v5;
}

uint64_t filespi_fclose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 8))(*(void *)(a1 + 16));
  if ((v2 & 0x80000000) == 0) {
    heap_Free(*(void **)(a1 + 8), a1);
  }
  return v2;
}

uint64_t filespi_fread(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result = 2153783303;
  if (a3 && a2 && a1 && a4)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)a4 + 16) + 16);
    if (v6) {
      return v6(a1);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t filespi_GetFileSize(void *a1)
{
  if (a1 && (unint64_t v1 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 32)) != 0) {
    return v1(a1[2]);
  }
  else {
    return 2153783296;
  }
}

uint64_t filespi_fwrite(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result = 2153783303;
  if (a3 && a2 && a1 && a4)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)a4 + 16) + 48);
    if (v6) {
      return v6(a1);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t filespi_fflush(void *a1)
{
  uint64_t result = 2153783297;
  if (!a1) {
    return 2153783303;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 56);
  if (v3) {
    return v3(a1[2]);
  }
  return result;
}

uint64_t heap_cb_Open(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 2159026183;
  if (a1)
  {
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, 1, 16);
    *(void *)a3 = v7;
    if (v7)
    {
      uint64_t v3 = 0;
      *uint64_t v7 = a1;
      *(void *)(*(void *)a3 + 8) = a2;
    }
    else
    {
      return 2159026186;
    }
  }
  return v3;
}

uint64_t heap_cb_Close(void *a1)
{
  if (!a1) {
    return 2159026183;
  }
  (*(void (**)(void, void *))(*a1 + 24))(a1[1], a1);
  return 0;
}

uint64_t heap_Alloc(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (**(uint64_t (***)(void))a1)(*(void *)(a1 + 8));
  }
  else {
    return 0;
  }
}

uint64_t heap_Calloc(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return (*(uint64_t (**)(void))(*a1 + 8))(a1[1]);
  }
  else {
    return 0;
  }
}

uint64_t heap_Realloc(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !a3) {
    return 0;
  }
  uint64_t v3 = *a1;
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(v3 + 16))(a1[1]);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t))v3)(a1[1], a3);
  }
}

void *heap_Free(void *result, uint64_t a2)
{
  if (result)
  {
    if (a2) {
      return (void *)(*(uint64_t (**)(void))(*result + 24))(result[1]);
    }
  }
  return result;
}

uint64_t heap_SetLog(void *a1)
{
  uint64_t result = 2159026177;
  if (!a1) {
    return 2159026183;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*a1 + 32);
  if (v3) {
    return v3(a1[1]);
  }
  return result;
}

uint64_t thread_cb_ClassOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 2153783303;
  if (a3 && a4)
  {
    uint64_t v13 = (void *)heap_Alloc(a1, 40);
    *(void *)a6 = v13;
    if (v13)
    {
      uint64_t v6 = 0;
      void *v13 = a1;
      *(void *)(*(void *)a6 + 8) = a2;
      *(void *)(*(void *)a6 + 16) = a3;
      *(void *)(*(void *)a6 + 24) = a4;
      *(void *)(*(void *)a6 + 32) = a5;
    }
    else
    {
      return 2153783306;
    }
  }
  return v6;
}

uint64_t thread_cb_ClassClose(uint64_t *a1)
{
  uint64_t result = 2153783303;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(void **)*a1, *a1);
      uint64_t result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t thread_ObjOpen(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = 2153783303;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = (void *)heap_Alloc((uint64_t)a2, 24);
    *a3 = (uint64_t)v7;
    if (v7)
    {
      *uint64_t v7 = a1;
      *(void *)(*a3 + 8) = a2;
      BOOL v8 = **(uint64_t (***)(void, void, uint64_t))(a1 + 16);
      if (v8)
      {
        uint64_t v3 = v8(*(void *)(a1 + 32), *(void *)(a1 + 8), *a3 + 16);
        if ((v3 & 0x80000000) != 0)
        {
          heap_Free(a2, *a3);
          *a3 = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2153783306;
    }
  }
  return v3;
}

uint64_t thread_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 8);
  if (v2)
  {
    uint64_t v3 = v2(*(void *)(a1 + 16));
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  heap_Free(*(void **)(a1 + 8), a1);
  return v3;
}

uint64_t thread_Start(void *a1)
{
  uint64_t result = 2153783304;
  if (!a1) {
    return 2153783314;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 16);
  if (v3) {
    return v3(a1[2]);
  }
  return result;
}

uint64_t thread_Join(void *a1)
{
  uint64_t result = 2153783304;
  if (!a1) {
    return 2153783314;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 24);
  if (v3) {
    return v3(a1[2]);
  }
  return result;
}

uint64_t semaphore_ObjectOpen(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a2 && a5)
  {
    BOOL v11 = (void *)heap_Alloc((uint64_t)a2, 24);
    *a5 = (uint64_t)v11;
    if (v11)
    {
      void *v11 = a1;
      *(void *)(*a5 + 8) = a2;
      uint64_t v12 = **(uint64_t (***)(void, void, uint64_t, uint64_t, uint64_t))(a1 + 24);
      if (v12)
      {
        uint64_t v5 = v12(*(void *)(a1 + 32), *(void *)(a1 + 8), a3, a4, *a5 + 16);
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(a2, *a5);
          *a5 = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2153783306;
    }
  }
  return v5;
}

uint64_t semaphore_ObjectClose(uint64_t a1)
{
  uint64_t v1 = 2153783303;
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 24) + 8);
    if (v3)
    {
      uint64_t v1 = v3(*(void *)(a1 + 16));
      if ((v1 & 0x80000000) == 0) {
        heap_Free(*(void **)(a1 + 8), a1);
      }
    }
    else
    {
      return 2153783304;
    }
  }
  return v1;
}

uint64_t semaphore_Acquire(void *a1)
{
  uint64_t result = 2153783303;
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 24) + 16);
    if (v3) {
      return v3(a1[2]);
    }
    else {
      return 2153783304;
    }
  }
  return result;
}

uint64_t semaphore_Release(void *a1)
{
  uint64_t result = 2153783303;
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 24) + 24);
    if (v3) {
      return v3(a1[2]);
    }
    else {
      return 2153783304;
    }
  }
  return result;
}

double MD5Init(uint64_t a1)
{
  double result = -3.59869635e230;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = xmmword_20D6263F0;
  return result;
}

void *MD5Update(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v6 = ((unint64_t)*(unsigned int *)(a1 + 16) >> 3) & 0x3F;
  *(void *)(a1 + 16) += __PAIR64__(a3 >> 29, 8 * (int)a3);
  unint64_t v7 = 64 - v6;
  if (64 - v6 <= a3)
  {
    memcpy((void *)(a1 + 24 + v6), __src, 64 - v6);
    MD5Transform((_DWORD *)a1, (const char *)(a1 + 24));
    for (unint64_t i = v6 ^ 0x7F; i < a3; unint64_t i = v9 + 127)
    {
      unint64_t v9 = v7;
      MD5Transform((_DWORD *)a1, &__src[v7]);
      v7 += 64;
    }
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v7 = 0;
  }
  return memcpy((void *)(a1 + v6 + 24), &__src[v7], a3 - v7);
}

int8x16_t MD5Transform(_DWORD *a1, const char *a2)
{
  int8x16x4_t v96 = vld4q_s8(a2);
  int v2 = a1[1];
  int v4 = a1[2];
  int v3 = a1[3];
  uint16x8_t v5 = vmovl_u8(*(uint8x8_t *)v96.val[0].i8);
  int8x16_t v6 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v5.i8);
  uint16x8_t v7 = vmovl_high_u8((uint8x16_t)v96.val[0]);
  uint16x8_t v8 = vmovl_high_u8((uint8x16_t)v96.val[1]);
  uint16x8_t v9 = vmovl_u8(*(uint8x8_t *)v96.val[1].i8);
  int8x16_t v10 = vorrq_s8((int8x16_t)vshll_high_n_u16(v8, 8uLL), (int8x16_t)vmovl_high_u16(v7));
  int8x16_t v11 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v8.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v7.i8));
  int8x16_t v12 = vorrq_s8((int8x16_t)vshll_high_n_u16(v9, 8uLL), (int8x16_t)vmovl_high_u16(v5));
  int8x16_t v13 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v9.i8, 8uLL), v6);
  _Q3 = vmovl_u8(*(uint8x8_t *)v96.val[2].i8);
  _Q4 = vmovl_high_u8((uint8x16_t)v96.val[2]);
  __asm { SHLL2           V5.4S, V4.8H, #0x10 }
  int8x16_t v21 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q4.i8, 0x10uLL);
  __asm { SHLL2           V4.4S, V3.8H, #0x10 }
  int8x16_t v23 = vorrq_s8(v13, (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL));
  int8x16_t v24 = vorrq_s8(v12, _Q4);
  int8x16_t v25 = vorrq_s8(v10, _Q5);
  uint16x8_t v26 = vmovl_high_u8((uint8x16_t)v96.val[3]);
  uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v96.val[3].i8);
  int8x16_t v28 = vorrq_s8(v23, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8), 0x18uLL));
  HIDWORD(v29) = *a1 + (v4 & v2) + (v3 & ~v2) + v28.i32[0] - 680876936;
  LODWORD(v29) = HIDWORD(v29);
  int v30 = (v29 >> 25) + v2;
  HIDWORD(v29) = v3 + v28.i32[1] + (v4 & ~v30) + (v30 & v2) - 389564586;
  LODWORD(v29) = HIDWORD(v29);
  int v31 = (v29 >> 20) + v30;
  HIDWORD(v29) = v4 + v28.i32[2] + (v2 & ~v31) + (v31 & v30) + 606105819;
  LODWORD(v29) = HIDWORD(v29);
  int8x16_t v32 = vorrq_s8(v24, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v27), 0x18uLL));
  int v33 = (v29 >> 15) + v31;
  HIDWORD(v29) = v2 + v28.i32[3] + (v30 & ~v33) + (v33 & v31) - 1044525330;
  LODWORD(v29) = HIDWORD(v29);
  int v34 = (v29 >> 10) + v33;
  HIDWORD(v29) = v32.i32[0] + v30 + (v31 & ~v34) + (v34 & v33) - 176418897;
  LODWORD(v29) = HIDWORD(v29);
  int v35 = (v29 >> 25) + v34;
  HIDWORD(v29) = v32.i32[1] + v31 + (v33 & ~v35) + (v35 & v34) + 1200080426;
  LODWORD(v29) = HIDWORD(v29);
  int v36 = (v29 >> 20) + v35;
  HIDWORD(v29) = v32.i32[2] + v33 + (v34 & ~v36) + (v36 & v35) - 1473231341;
  LODWORD(v29) = HIDWORD(v29);
  int8x16_t v37 = vorrq_s8(vorrq_s8(v11, v21), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8), 0x18uLL));
  int v38 = (v29 >> 15) + v36;
  HIDWORD(v29) = v32.i32[3] + v34 + (v35 & ~v38) + (v38 & v36) - 45705983;
  LODWORD(v29) = HIDWORD(v29);
  int v39 = (v29 >> 10) + v38;
  HIDWORD(v29) = v37.i32[0] + v35 + (v36 & ~v39) + (v39 & v38) + 1770035416;
  LODWORD(v29) = HIDWORD(v29);
  int v40 = (v29 >> 25) + v39;
  HIDWORD(v29) = v37.i32[1] + v36 + (v38 & ~v40) + (v40 & v39) - 1958414417;
  LODWORD(v29) = HIDWORD(v29);
  int v41 = (v29 >> 20) + v40;
  HIDWORD(v29) = v37.i32[2] + v38 + (v39 & ~v41) + (v41 & v40) - 42063;
  LODWORD(v29) = HIDWORD(v29);
  int8x16_t result = vorrq_s8(v25, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v26), 0x18uLL));
  int v43 = (v29 >> 15) + v41;
  HIDWORD(v29) = v37.i32[3] + v39 + (v40 & ~v43) + (v43 & v41) - 1990404162;
  LODWORD(v29) = HIDWORD(v29);
  int v44 = (v29 >> 10) + v43;
  HIDWORD(v29) = result.i32[0] + v40 + (v41 & ~v44) + (v44 & v43) + 1804603682;
  LODWORD(v29) = HIDWORD(v29);
  int v45 = (v29 >> 25) + v44;
  HIDWORD(v29) = result.i32[1] + v41 + (v43 & ~v45) + (v45 & v44) - 40341101;
  LODWORD(v29) = HIDWORD(v29);
  int v46 = (v29 >> 20) + v45;
  HIDWORD(v29) = result.i32[2] + v43 + (v44 & ~v46) + (v46 & v45) - 1502002290;
  LODWORD(v29) = HIDWORD(v29);
  int v47 = (v29 >> 15) + v46;
  HIDWORD(v29) = result.i32[3] + v44 + (v45 & ~v47) + (v47 & v46) + 1236535329;
  LODWORD(v29) = HIDWORD(v29);
  int v48 = (v29 >> 10) + v47;
  HIDWORD(v29) = v28.i32[1] + v45 + (v47 & ~v46) - 165796510 + (v48 & v46);
  LODWORD(v29) = HIDWORD(v29);
  int v49 = (v29 >> 27) + v48;
  HIDWORD(v29) = v32.i32[2] + v46 + (v48 & ~v47) - 1069501632 + (v49 & v47);
  LODWORD(v29) = HIDWORD(v29);
  int v50 = (v29 >> 23) + v49;
  HIDWORD(v29) = v37.i32[3] + v47 + (v49 & ~v48) + 643717713 + (v50 & v48);
  LODWORD(v29) = HIDWORD(v29);
  int v51 = (v29 >> 18) + v50;
  HIDWORD(v29) = v28.i32[0] + v48 + (v50 & ~v49) - 373897302 + (v51 & v49);
  LODWORD(v29) = HIDWORD(v29);
  int v52 = (v29 >> 12) + v51;
  HIDWORD(v29) = v32.i32[1] + v49 + (v51 & ~v50) - 701558691 + (v52 & v50);
  LODWORD(v29) = HIDWORD(v29);
  int v53 = (v29 >> 27) + v52;
  HIDWORD(v29) = v37.i32[2] + v50 + (v52 & ~v51) + 38016083 + (v53 & v51);
  LODWORD(v29) = HIDWORD(v29);
  int v54 = (v29 >> 23) + v53;
  HIDWORD(v29) = result.i32[3] + v51 + (v53 & ~v52) - 660478335 + (v54 & v52);
  LODWORD(v29) = HIDWORD(v29);
  int v55 = (v29 >> 18) + v54;
  HIDWORD(v29) = v32.i32[0] + v52 + (v54 & ~v53) - 405537848 + (v55 & v53);
  LODWORD(v29) = HIDWORD(v29);
  int v56 = (v29 >> 12) + v55;
  HIDWORD(v29) = v37.i32[1] + v53 + (v55 & ~v54) + 568446438 + (v56 & v54);
  LODWORD(v29) = HIDWORD(v29);
  int v57 = (v29 >> 27) + v56;
  HIDWORD(v29) = result.i32[2] + v54 + (v56 & ~v55) - 1019803690 + (v57 & v55);
  LODWORD(v29) = HIDWORD(v29);
  int v58 = (v29 >> 23) + v57;
  HIDWORD(v29) = v28.i32[3] + v55 + (v57 & ~v56) - 187363961 + (v58 & v56);
  LODWORD(v29) = HIDWORD(v29);
  int v59 = (v29 >> 18) + v58;
  HIDWORD(v29) = v37.i32[0] + v56 + (v58 & ~v57) + 1163531501 + (v59 & v57);
  LODWORD(v29) = HIDWORD(v29);
  int v60 = (v29 >> 12) + v59;
  HIDWORD(v29) = result.i32[1] + v57 + (v59 & ~v58) - 1444681467 + (v60 & v58);
  LODWORD(v29) = HIDWORD(v29);
  int v61 = (v29 >> 27) + v60;
  HIDWORD(v29) = v28.i32[2] + v58 + (v60 & ~v59) - 51403784 + (v61 & v59);
  LODWORD(v29) = HIDWORD(v29);
  int v62 = (v29 >> 23) + v61;
  HIDWORD(v29) = v32.i32[3] + v59 + (v61 & ~v60) + 1735328473 + (v62 & v60);
  LODWORD(v29) = HIDWORD(v29);
  int v63 = (v29 >> 18) + v62;
  HIDWORD(v29) = result.i32[0] + v60 + (v62 & ~v61) - 1926607734 + (v63 & v61);
  LODWORD(v29) = HIDWORD(v29);
  int v64 = (v29 >> 12) + v63;
  HIDWORD(v29) = v32.i32[1] + v61 - 378558 + (v64 ^ v63 ^ v62);
  LODWORD(v29) = HIDWORD(v29);
  int v65 = (v29 >> 28) + v64;
  HIDWORD(v29) = v37.i32[0] + v62 - 2022574463 + (v64 ^ v63 ^ v65);
  LODWORD(v29) = HIDWORD(v29);
  int v66 = (v29 >> 21) + v65;
  HIDWORD(v29) = v37.i32[3] + v63 + 1839030562 + (v65 ^ v64 ^ v66);
  LODWORD(v29) = HIDWORD(v29);
  int v67 = (v29 >> 16) + v66;
  HIDWORD(v29) = result.i32[2] + v64 - 35309556 + (v66 ^ v65 ^ v67);
  LODWORD(v29) = HIDWORD(v29);
  int v68 = (v29 >> 9) + v67;
  HIDWORD(v29) = v28.i32[1] + v65 - 1530992060 + (v67 ^ v66 ^ v68);
  LODWORD(v29) = HIDWORD(v29);
  int v69 = (v29 >> 28) + v68;
  HIDWORD(v29) = v32.i32[0] + v66 + 1272893353 + (v68 ^ v67 ^ v69);
  LODWORD(v29) = HIDWORD(v29);
  int v70 = (v29 >> 21) + v69;
  HIDWORD(v29) = v32.i32[3] + v67 - 155497632 + (v69 ^ v68 ^ v70);
  LODWORD(v29) = HIDWORD(v29);
  int v71 = (v29 >> 16) + v70;
  HIDWORD(v29) = v37.i32[2] + v68 - 1094730640 + (v70 ^ v69 ^ v71);
  LODWORD(v29) = HIDWORD(v29);
  int v72 = (v29 >> 9) + v71;
  HIDWORD(v29) = result.i32[1] + v69 + 681279174 + (v71 ^ v70 ^ v72);
  LODWORD(v29) = HIDWORD(v29);
  int v73 = (v29 >> 28) + v72;
  HIDWORD(v29) = v28.i32[0] + v70 - 358537222 + (v72 ^ v71 ^ v73);
  LODWORD(v29) = HIDWORD(v29);
  int v74 = (v29 >> 21) + v73;
  HIDWORD(v29) = v28.i32[3] + v71 - 722521979 + (v73 ^ v72 ^ v74);
  LODWORD(v29) = HIDWORD(v29);
  int v75 = (v29 >> 16) + v74;
  HIDWORD(v29) = v32.i32[2] + v72 + 76029189 + (v74 ^ v73 ^ v75);
  LODWORD(v29) = HIDWORD(v29);
  int v76 = (v29 >> 9) + v75;
  HIDWORD(v29) = v37.i32[1] + v73 - 640364487 + (v75 ^ v74 ^ v76);
  LODWORD(v29) = HIDWORD(v29);
  int v77 = (v29 >> 28) + v76;
  HIDWORD(v29) = result.i32[0] + v74 - 421815835 + (v76 ^ v75 ^ v77);
  LODWORD(v29) = HIDWORD(v29);
  int v78 = (v29 >> 21) + v77;
  HIDWORD(v29) = result.i32[3] + v75 + 530742520 + (v77 ^ v76 ^ v78);
  LODWORD(v29) = HIDWORD(v29);
  int v79 = (v29 >> 16) + v78;
  HIDWORD(v29) = v28.i32[2] + v76 - 995338651 + (v78 ^ v77 ^ v79);
  LODWORD(v29) = HIDWORD(v29);
  int v80 = (v29 >> 9) + v79;
  HIDWORD(v29) = v28.i32[0] + v77 - 198630844 + ((v80 | ~v78) ^ v79);
  LODWORD(v29) = HIDWORD(v29);
  int v81 = (v29 >> 26) + v80;
  HIDWORD(v29) = v32.i32[3] + v78 + 1126891415 + ((v81 | ~v79) ^ v80);
  LODWORD(v29) = HIDWORD(v29);
  int v82 = (v29 >> 22) + v81;
  HIDWORD(v29) = result.i32[2] + v79 - 1416354905 + ((v82 | ~v80) ^ v81);
  LODWORD(v29) = HIDWORD(v29);
  int v83 = (v29 >> 17) + v82;
  HIDWORD(v29) = v32.i32[1] + v80 - 57434055 + ((v83 | ~v81) ^ v82);
  LODWORD(v29) = HIDWORD(v29);
  int v84 = (v29 >> 11) + v83;
  HIDWORD(v29) = result.i32[0] + v81 + 1700485571 + ((v84 | ~v82) ^ v83);
  LODWORD(v29) = HIDWORD(v29);
  int v85 = (v29 >> 26) + v84;
  HIDWORD(v29) = v28.i32[3] + v82 - 1894986606 + ((v85 | ~v83) ^ v84);
  LODWORD(v29) = HIDWORD(v29);
  int v86 = (v29 >> 22) + v85;
  HIDWORD(v29) = v37.i32[2] + v83 - 1051523 + ((v86 | ~v84) ^ v85);
  LODWORD(v29) = HIDWORD(v29);
  int v87 = (v29 >> 17) + v86;
  HIDWORD(v29) = v28.i32[1] + v84 - 2054922799 + ((v87 | ~v85) ^ v86);
  LODWORD(v29) = HIDWORD(v29);
  int v88 = (v29 >> 11) + v87;
  HIDWORD(v29) = v37.i32[0] + v85 + 1873313359 + ((v88 | ~v86) ^ v87);
  LODWORD(v29) = HIDWORD(v29);
  int v89 = (v29 >> 26) + v88;
  HIDWORD(v29) = result.i32[3] + v86 - 30611744 + ((v89 | ~v87) ^ v88);
  LODWORD(v29) = HIDWORD(v29);
  int v90 = (v29 >> 22) + v89;
  HIDWORD(v29) = v32.i32[2] + v87 - 1560198380 + ((v90 | ~v88) ^ v89);
  LODWORD(v29) = HIDWORD(v29);
  int v91 = (v29 >> 17) + v90;
  HIDWORD(v29) = result.i32[1] + v88 + 1309151649 + ((v91 | ~v89) ^ v90);
  LODWORD(v29) = HIDWORD(v29);
  int v92 = (v29 >> 11) + v91;
  HIDWORD(v29) = v32.i32[0] + v89 - 145523070 + ((v92 | ~v90) ^ v91);
  LODWORD(v29) = HIDWORD(v29);
  int v93 = (v29 >> 26) + v92;
  HIDWORD(v29) = v37.i32[3] + v90 - 1120210379 + ((v93 | ~v91) ^ v92);
  LODWORD(v29) = HIDWORD(v29);
  int v94 = (v29 >> 22) + v93;
  HIDWORD(v29) = v28.i32[2] + v91 + 718787259 + ((v94 | ~v92) ^ v93);
  LODWORD(v29) = HIDWORD(v29);
  int v95 = (v29 >> 17) + v94;
  HIDWORD(v29) = v37.i32[1] + v92 - 343485551 + ((v95 | ~v93) ^ v94);
  LODWORD(v29) = HIDWORD(v29);
  *a1 += v93;
  a1[1] = v95 + v2 + (v29 >> 11);
  a1[2] = v95 + v4;
  a1[3] = v94 + v3;
  return result;
}

double MD5Final(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  do
  {
    *(_DWORD *)&v10[v4] = *(_DWORD *)(a2 + v4 + 16);
    v4 += 4;
  }
  while (v4 != 8);
  unint64_t v5 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 3) & 0x3F;
  uint64_t v6 = 120;
  if (v5 < 0x38) {
    uint64_t v6 = 56;
  }
  MD5Update(a2, PADDING, v6 - v5);
  MD5Update(a2, v10, 8uLL);
  for (uint64_t i = 0; i != 16; i += 4)
  {
    uint64_t v8 = a1 + i;
    *(_WORD *)uint64_t v8 = *(_DWORD *)(a2 + i);
    *(unsigned char *)(v8 + 2) = *(_WORD *)(a2 + i + 2);
    *(unsigned char *)(v8 + 3) = *(unsigned char *)(a2 + i + 3);
  }
  *(void *)(a2 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t cache_ClassOpen(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 2153783303;
  if (a5 && !*a5)
  {
    uint64_t v11 = (void *)heap_Calloc(a1, 1, 32);
    if (v11)
    {
      uint64_t v5 = 0;
      _DWORD v11[2] = a3;
      void v11[3] = a4;
      void *v11 = a1;
      v11[1] = a2;
    }
    else
    {
      uint64_t v5 = 2153783306;
    }
    *a5 = v11;
  }
  return v5;
}

uint64_t cache_ClassClose(void **a1)
{
  if (!a1) {
    return 2153783303;
  }
  heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t cache_ObjOpen(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a5 && !*a5)
  {
    uint64_t v11 = *(void **)a1;
    uint64_t v12 = heap_Calloc(*(void **)a1, 1, 72);
    uint64_t v13 = v12;
    if (v12)
    {
      *(void *)uint64_t v12 = a1;
      *(void *)(v12 + 8) = v11;
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(a1 + 16);
      uint64_t v14 = (uint64_t *)(v12 + 16);
      uint64_t v15 = critsec_ObjOpen(*(void *)(a1 + 8), v11, (uint64_t *)(v12 + 16));
      if ((v15 & 0x80000000) == 0)
      {
        uint64_t v16 = v15;
        if (!a2 || !a3 || !a4) {
          goto LABEL_28;
        }
        uint64_t v17 = (_DWORD *)heap_Calloc(v11, 56, 1);
        *(void *)(v13 + 64) = v17;
        if (v17)
        {
          uint64_t v18 = v17;
          v17[10] = a2;
          v17[11] = a3;
          if (a4 >= a3) {
            unsigned int v19 = a3;
          }
          else {
            unsigned int v19 = a4;
          }
          v17[12] = v19;
          if (a2 <= 1)
          {
            a2 = 2;
            v17[10] = 2;
          }
          uint64_t v20 = heap_Alloc((uint64_t)v11, a2 * (unint64_t)a3);
          *((void *)v18 + 4) = v20;
          if (v20)
          {
            uint64_t v21 = heap_Alloc((uint64_t)v11, 40 * v18[10]);
            *((void *)v18 + 3) = v21;
            if (v21)
            {
              uint64_t v22 = (void *)(v21 + 40);
              *(void *)uint64_t v21 = 0;
              *(void *)(v21 + 8) = v21 + 40;
              *(_DWORD *)(v21 + 16) = -1;
              uint64_t v23 = *((void *)v18 + 4);
              *(void *)(v21 + 24) = v23;
              *(void *)(v21 + 32) = 0;
              int v24 = v18[11];
              uint64_t v25 = (v18[10] - 1);
              if (v25 < 2)
              {
                int v30 = (void *)v21;
              }
              else
              {
                uint64_t v26 = v25 - 1;
                unsigned int v27 = v18[11];
                do
                {
                  int8x16_t v28 = v22;
                  unint64_t v29 = v22 - 5;
                  v22 += 5;
                  *int8x16_t v28 = v29;
                  v28[1] = v22;
                  *((_DWORD *)v28 + 4) = -1;
                  v28[3] = v23 + v27;
                  v28[4] = 0;
                  v27 += v24;
                  --v26;
                }
                while (v26);
                int v30 = v22 - 5;
              }
              uint64_t v16 = 0;
              *uint64_t v22 = v30;
              v30[6] = 0;
              *((_DWORD *)v30 + 14) = -1;
              unsigned __int8 v30[8] = v23 + (v24 * v25);
              v30[9] = 0;
              *((void *)v18 + 1) = v21;
              *((void *)v18 + 2) = v21 + 40 * v25;
              goto LABEL_28;
            }
            heap_Free(v11, *((void *)v18 + 4));
          }
        }
      }
      if (*v14) {
        critsec_ObjClose(*v14);
      }
      uint64_t v31 = *(void *)(v13 + 64);
      if (v31) {
        heap_Free(v11, v31);
      }
      heap_Free(v11, v13);
      uint64_t v13 = 0;
    }
    uint64_t v16 = 2153783306;
LABEL_28:
    *a5 = v13;
    return v16;
  }
  return v5;
}

uint64_t cache_ObjClose(void *a1)
{
  if (!a1) {
    return 2153783303;
  }
  critsec_Enter((void *)a1[2]);
  int v2 = (void *)a1[1];
  uint64_t v3 = a1[8];
  if (v3)
  {
    uint64_t v4 = *(void **)v3;
    heap_Free((void *)a1[1], *(void *)(v3 + 32));
    heap_Free(v2, *(void *)(v3 + 24));
    if (v4)
    {
      do
      {
        heap_Free(v2, v4[1]);
        uint64_t v5 = (void *)*v4;
        heap_Free(v2, (uint64_t)v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *(_DWORD *)(v3 + 48) = 0;
    uint64_t v6 = a1[8];
  }
  else
  {
    uint64_t v6 = 0;
  }
  heap_Free(v2, v6);
  a1[8] = 0;
  critsec_Leave((void *)a1[2]);
  uint64_t v8 = critsec_ObjClose(a1[2]);
  heap_Free(v2, (uint64_t)a1);
  return v8;
}

uint64_t cache_ObjSetLog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 2153783303;
  }
  if (a3)
  {
    BOOL v6 = log_GetLogLevel(a3) > 0x63;
    *(_DWORD *)(a1 + 56) = v6;
    *(_DWORD *)(a1 + 60) = v6;
  }
  uint64_t result = 0;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  return result;
}

uint64_t cache_datastream_Open(int8x16_t *a1, uint64_t a2, char *a3, unsigned char *a4, uint64_t *a5)
{
  uint64_t v5 = 2153783306;
  uint64_t v6 = 2153783303;
  if (a1 && a5)
  {
    uint64_t v12 = a1[3].i64[0];
    uint64_t v13 = *(void *)(v12 + 24);
    uint64_t v14 = *(uint64_t **)(v12 + 64);
    uint64_t v15 = heap_Calloc(*(void **)(v12 + 8), 1, 56);
    uint64_t v16 = v15;
    if (!v15)
    {
LABEL_26:
      *a5 = v16;
      return v5;
    }
    int8x16_t v17 = a1[3];
    *(int8x16_t *)uint64_t v15 = vextq_s8(v17, v17, 8uLL);
    uint64_t v18 = *(void *)(v17.i64[0] + 8);
    *(_OWORD *)(v15 + 24) = 0u;
    *(void *)(v15 + 16) = v18;
    *(_OWORD *)(v15 + 40) = 0u;
    critsec_Enter(*(void **)(v17.i64[0] + 16));
    if (!v14)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned char *, uint64_t))v13)(a1[2].i64[1], a2, a3, a4, v16 + 24);
      goto LABEL_23;
    }
    if (!a3 || !a4) {
      goto LABEL_23;
    }
    if (*a4 == 114 && !strchr(a3, 46))
    {
      uint64_t FileInfoDesc = GetFileInfoDesc(v14, *(void **)(v16 + 16), a3);
      *(void *)(v16 + 48) = FileInfoDesc;
      uint64_t v6 = 2153783306;
      if (!FileInfoDesc) {
        goto LABEL_23;
      }
      *(_DWORD *)(FileInfoDesc + 40) = 1;
      if (*(_DWORD *)(FileInfoDesc + 20))
      {
LABEL_11:
        uint64_t v6 = 0;
        uint64_t v20 = *(void *)(FileInfoDesc + 24);
        uint64_t v21 = *(void *)(FileInfoDesc + 32);
        *(void *)(v16 + 24) = v20;
        *(void *)(v16 + 40) = v21;
        if (!v20) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))v13)(a1[2].i64[1], a2, a3, "rb", v16 + 24);
    }
    else
    {
      uint64_t FileInfoDesc = GetFileInfoDesc(v14, *(void **)(v16 + 16), a3);
      *(void *)(v16 + 48) = FileInfoDesc;
      uint64_t v6 = 2153783306;
      if (!FileInfoDesc) {
        goto LABEL_23;
      }
      *(_DWORD *)(FileInfoDesc + 40) = 0;
      if (*(_DWORD *)(FileInfoDesc + 20)) {
        goto LABEL_11;
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned char *, uint64_t))v13)(a1[2].i64[1], a2, a3, a4, v16 + 24);
    }
    uint64_t v6 = v22;
    if ((v22 & 0x80000000) != 0)
    {
      uint64_t v23 = *(void *)(v16 + 40);
    }
    else
    {
      uint64_t v23 = (*(unsigned int (**)(void))(v13 + 32))(*(void *)(v16 + 24));
      *(void *)(v16 + 40) = v23;
    }
    uint64_t v24 = *(void *)(v16 + 24);
    uint64_t FileInfoDesc = *(void *)(v16 + 48);
    *(void *)(FileInfoDesc + 24) = v24;
    *(void *)(FileInfoDesc + 32) = v23;
    if (v24) {
LABEL_22:
    }
      ++*(_DWORD *)(FileInfoDesc + 20);
LABEL_23:
    critsec_Leave(*(void **)(*(void *)(v16 + 8) + 16));
    if (!*(void *)(v16 + 24))
    {
      heap_Free(*(void **)(v16 + 16), v16);
      uint64_t v16 = 0;
    }
    uint64_t v5 = v6;
    goto LABEL_26;
  }
  return v6;
}

uint64_t GetFileInfoDesc(uint64_t *a1, void *a2, char *__s2)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = 0;
    while (strcmp(*(const char **)(v6 + 8), __s2))
    {
      ++v7;
      uint64_t v6 = *(void *)v6;
      if (!v6) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    int v7 = 0;
LABEL_7:
    uint64_t v8 = (void *)heap_Alloc((uint64_t)a2, 48);
    uint64_t v6 = (uint64_t)v8;
    if (v8)
    {
      *uint64_t v8 = *a1;
      int v9 = strlen(__s2);
      int8x16_t v10 = (char *)heap_Alloc((uint64_t)a2, (v9 + 1));
      *(void *)(v6 + 8) = v10;
      if (v10)
      {
        strcpy(v10, __s2);
        *(_DWORD *)(v6 + 16) = v7;
        *(void *)(v6 + 28) = 0;
        *(void *)(v6 + 20) = 0;
        *(_DWORD *)(v6 + 36) = 0;
        *a1 = v6;
      }
      else
      {
        heap_Free(a2, v6);
        return 0;
      }
    }
  }
  return v6;
}

uint64_t cache_datastream_Close(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  critsec_Enter(*(void **)(*(void *)(a1 + 8) + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 24);
  if (*(void *)(v2 + 64)
    && (uint64_t v4 = *(void *)(a1 + 48), v5 = *(_DWORD *)(v4 + 20) - 1, (*(_DWORD *)(v4 + 20) = v5) != 0))
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v3 + 8))(*(void *)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }
  critsec_Leave(*(void **)(*(void *)(a1 + 8) + 16));
  heap_Free(*(void **)(a1 + 16), a1);
  return v6;
}

uint64_t cache_datastream_Read(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    critsec_Enter(*(void **)(a4[1] + 16));
    uint64_t v8 = a4[1];
    uint64_t v9 = *(void *)(v8 + 24);
    uint64_t v10 = *(void *)(v8 + 64);
    if (v10)
    {
      uint64_t v11 = a3 * a2;
      if (*(_DWORD *)(v10 + 48) < v11 || (uint64_t v12 = a4[6], *(_DWORD *)(v12 + 40) != 1))
      {
        if (((*(uint64_t (**)(void, void, void, uint64_t))(v9 + 24))(a4[3], *((unsigned int *)a4 + 8), 0, 1) & 0x80000000) != 0)uint64_t v16 = 0; {
        else
        }
          uint64_t v16 = (*(unsigned int (**)(void *, uint64_t, uint64_t, void))(v9 + 16))(a1, 1, v11, a4[3]);
        uint64_t v21 = a4[4] + v11;
LABEL_19:
        a4[4] = v21;
        goto LABEL_20;
      }
      uint64_t v13 = *(uint64_t **)(v10 + 16);
      if (*((_DWORD *)v13 + 4) != -1)
      {
        int v14 = 0;
        int v15 = *(_DWORD *)(v12 + 16);
        uint64_t v16 = v11;
        while (1)
        {
          if (*((_DWORD *)v13 + 4) == v15)
          {
            unint64_t v17 = a4[4];
            unint64_t v18 = v13[4];
            BOOL v19 = v17 >= v18;
            unint64_t v20 = v17 - v18;
            if (v19 && v20 + v11 <= *(unsigned int *)(v10 + 44)) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
          --v14;
          if (!v13) {
            goto LABEL_12;
          }
        }
        memcpy(a1, (const void *)(v13[3] + v20), v11);
        if (v14)
        {
          uint64_t v23 = (uint64_t *)*v13;
          if (*v13)
          {
            v23[1] = v13[1];
            *(void *)v13[1] = v23;
            uint64_t v24 = *(void *)(v10 + 16);
          }
          else
          {
            uint64_t v24 = *(void *)(v10 + 16);
            uint64_t v25 = *(void **)(*(void *)(v10 + 8) + 8);
            *(void *)(v10 + 8) = v25;
            void *v25 = 0;
          }
          *(void *)(v24 + 8) = v13;
          uint64_t *v13 = v24;
          v13[1] = 0;
          *(void *)(v10 + 16) = v13;
        }
        uint64_t v21 = a4[4] + v11;
        goto LABEL_19;
      }
LABEL_12:
      uint64_t v16 = AddCacheData(a4, v11, a1);
    }
    else
    {
      uint64_t v16 = (*(unsigned int (**)(void *, uint64_t, uint64_t, void))(v9 + 16))(a1, a2, a3, a4[3]);
    }
LABEL_20:
    critsec_Leave(*(void **)(a4[1] + 16));
    return v16;
  }
  return 0;
}

uint64_t cache_datastream_Seek(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 2153783303;
  if (a1)
  {
    critsec_Enter(*(void **)(a1[1] + 16));
    uint64_t v9 = a1[1];
    uint64_t v10 = *(void *)(v9 + 24);
    if (!*(void *)(v9 + 64))
    {
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(v10 + 24))(a1[3], a2, a3, a4);
LABEL_17:
      uint64_t v4 = v11;
      goto LABEL_18;
    }
    if (*(_DWORD *)(a1[6] + 40)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(v10 + 24))(a1[3], a2, a3, a4);
    }
    switch(a3)
    {
      case 2:
        uint64_t v12 = a1[5];
        break;
      case 1:
        if (a4 == 1)
        {
          uint64_t v12 = a1[4] + a2;
        }
        else
        {
          if (a4 != -1) {
            goto LABEL_18;
          }
          uint64_t v12 = a1[4] - a2;
        }
        break;
      case 0:
        a1[4] = a2;
        goto LABEL_17;
      default:
LABEL_18:
        critsec_Leave(*(void **)(a1[1] + 16));
        return v4;
    }
    a1[4] = v12;
    goto LABEL_17;
  }
  return v4;
}

uint64_t cache_datastream_GetSize(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  critsec_Enter(*(void **)(*(void *)(a1 + 8) + 16));
  uint64_t v2 = (*(unsigned int (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 32))(*(void *)(a1 + 24));
  critsec_Leave(*(void **)(*(void *)(a1 + 8) + 16));
  return v2;
}

uint64_t cache_datastream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  critsec_Enter(*(void **)(*(void *)(a4 + 8) + 16));
  uint64_t v8 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a4 + 8) + 24) + 48))(a1, a2, a3, *(void *)(a4 + 24));
  critsec_Leave(*(void **)(*(void *)(a4 + 8) + 16));
  return v8;
}

uint64_t cache_datastream_DataOpen(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = 2153783303;
  if (a1 && a4)
  {
    uint64_t v9 = a1[3].i64[0];
    uint64_t v10 = *(void *)(v9 + 24);
    uint64_t v11 = (int8x16_t *)heap_Calloc(*(void **)(v9 + 8), 1, 32);
    uint64_t v12 = (uint64_t)v11;
    if (v11)
    {
      int8x16_t v13 = a1[3];
      int8x16_t *v11 = vextq_s8(v13, v13, 8uLL);
      v11[1].i64[1] = *(void *)(v13.i64[0] + 8);
      v11[1].i64[0] = 0;
      int v14 = v11 + 1;
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int8x16_t *))(v10 + 80))(a1[2].i64[1], a2, a3, v11 + 1);
      if (!v14->i64[0])
      {
        heap_Free(*(void **)(a1[3].i64[0] + 8), v12);
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v4 = 2153783306;
    }
    *a4 = v12;
  }
  return v4;
}

uint64_t cache_datastream_DataClose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 96))(*(void *)(a1 + 16));
  heap_Free(*(void **)(a1 + 24), a1);
  return v2;
}

uint64_t cache_datastream_DataMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a3 && a4) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 104))(*(void *)(a1 + 16));
  }
  else {
    return 2153783303;
  }
}

uint64_t cache_datastream_DataUnmap(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 112))(*(void *)(a1 + 16));
  }
  else {
    return 2153783303;
  }
}

uint64_t cache_datastream_DataFreeze(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 120))(*(void *)(a1 + 16));
  }
  else {
    return 2153783303;
  }
}

uint64_t cache_datastream_DynModOpen(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a5)
  {
    uint64_t v11 = a1[3].i64[0];
    uint64_t v12 = *(void *)(v11 + 24);
    int8x16_t v13 = (int8x16_t *)heap_Calloc(*(void **)(v11 + 8), 1, 32);
    uint64_t v14 = (uint64_t)v13;
    if (v13)
    {
      int8x16_t v15 = a1[3];
      int8x16_t *v13 = vextq_s8(v15, v15, 8uLL);
      v13[1].i64[1] = *(void *)(v15.i64[0] + 8);
      v13[1].i64[0] = 0;
      uint64_t v16 = v13 + 1;
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int8x16_t *))(v12 + 176))(a1[2].i64[1], a2, a3, a4, v13 + 1);
      if (!v16->i64[0])
      {
        heap_Free(*(void **)(a1[3].i64[0] + 8), v14);
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v5 = 2153783306;
    }
    *a5 = v14;
  }
  return v5;
}

uint64_t cache_datastream_DynModClose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 184))(*(void *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  heap_Free(*(void **)(a1 + 24), a1);
  return v2;
}

uint64_t cache_datastream_DynModObjLoad(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 192))(*(void *)(a1 + 16));
  }
  else {
    return 2153783303;
  }
}

uint64_t cache_datastream_DynModObjUnload()
{
  return 0;
}

uint64_t AddCacheData(void *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 64);
  if (!v5) {
    return a2;
  }
  uint64_t v8 = *(void *)(v4 + 24);
  int v9 = *(_DWORD *)(a1[6] + 16);
  uint64_t v10 = *(void *)(v5 + 8);
  uint64_t v11 = *(void **)(v10 + 8);
  *(void *)(v5 + 8) = v11;
  void *v11 = 0;
  *(_DWORD *)(v10 + 16) = v9;
  int8x16_t v13 = a1 + 3;
  uint64_t v12 = a1[3];
  *(void *)(v10 + 32) = v13[1];
  if (((*(uint64_t (**)(uint64_t))(v8 + 24))(v12) & 0x80000000) != 0
    || (*(unsigned int (**)(void, uint64_t, void, void))(v8 + 16))(*(void *)(v10 + 24), 1, *(unsigned int *)(v5 + 44), a1[3]) < a2)
  {
    return 0;
  }
  uint64_t v14 = a2;
  memcpy(a3, *(const void **)(v10 + 24), a2);
  a1[4] += a2;
  uint64_t v15 = *(void *)(v5 + 16);
  *(void *)(v15 + 8) = v10;
  *(void *)uint64_t v10 = v15;
  *(void *)(v10 + 8) = 0;
  *(void *)(v5 + 16) = v10;
  return v14;
}

uint64_t osspi_cb_cache_ClassOpen(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = 2153783303;
  if (a4 && a6)
  {
    int8x16_t v13 = (uint64_t *)heap_Calloc(a1, 1, 96);
    *a6 = v13;
    if (!v13) {
      return 2153783306;
    }
    uint64_t *v13 = (uint64_t)a1;
    (*a6)[1] = a2;
    (*a6)[10] = 0;
    (*a6)[11] = 0;
    (*a6)[2] = heap_Calloc(a1, 1, 224);
    uint64_t v14 = *a6;
    uint64_t v15 = (void *)(*a6)[2];
    if (v15)
    {
      *uint64_t v15 = cache_datastream_Open;
      *(void *)((*a6)[2] + 8) = cache_datastream_Close;
      *(void *)((*a6)[2] + 16) = cache_datastream_Read;
      *(void *)((*a6)[2] + 24) = cache_datastream_Seek;
      *(void *)((*a6)[2] + 32) = cache_datastream_GetSize;
      *(void *)((*a6)[2] + 48) = cache_datastream_Write;
      if (*(void *)(a4 + 80))
      {
        *(void *)((*a6)[2] + 80) = cache_datastream_DataOpen;
        *(void *)((*a6)[2] + 96) = cache_datastream_DataClose;
        *(void *)((*a6)[2] + 104) = cache_datastream_DataMap;
        *(void *)((*a6)[2] + 112) = cache_datastream_DataUnmap;
        *(void *)((*a6)[2] + 120) = cache_datastream_DataFreeze;
      }
      if (*(void *)(a4 + 176))
      {
        *(void *)((*a6)[2] + 176) = cache_datastream_DynModOpen;
        *(void *)((*a6)[2] + 184) = cache_datastream_DynModClose;
        *(void *)((*a6)[2] + 192) = cache_datastream_DynModObjLoad;
        *(void *)((*a6)[2] + 200) = cache_datastream_DynModObjUnload;
      }
      (*a6)[4] = a4;
      (*a6)[5] = a5;
      uint64_t v16 = cache_ClassOpen(a1, a3, a4, a5, &v22);
      if ((v16 & 0x80000000) != 0)
      {
        uint64_t v6 = v16;
      }
      else
      {
        uint64_t v17 = v22;
        (*a6)[7] = v22;
        uint64_t v6 = cache_ObjOpen(v17, 0x10u, 0x200u, 0x100u, &v21);
        if ((v6 & 0x80000000) == 0)
        {
          (*a6)[6] = v21;
          (*a6)[3] = (uint64_t)*a6;
          return v6;
        }
      }
      uint64_t v14 = *a6;
      if (!*a6) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 2153783306;
    }
    unint64_t v18 = (void *)v14[6];
    if (v18)
    {
      cache_ObjClose(v18);
      uint64_t v14 = *a6;
    }
    BOOL v19 = (void **)v14[7];
    if (v19)
    {
      cache_ClassClose(v19);
      uint64_t v14 = *a6;
    }
    if (v14[2])
    {
      heap_Free(a1, v14[2]);
      uint64_t v14 = *a6;
    }
    heap_Free(a1, (uint64_t)v14);
    *a6 = 0;
  }
  return v6;
}

uint64_t osspi_cb_cache_SetLog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return cache_ObjSetLog(*(void *)(a1 + 48), a2, a3);
  }
  else {
    return 2153783303;
  }
}

uint64_t osspi_cb_cache_ClassClose(void **a1)
{
  if (!a1) {
    return 2153783303;
  }
  cache_ObjClose(a1[6]);
  a1[6] = 0;
  cache_ClassClose((void **)a1[7]);
  a1[7] = 0;
  heap_Free(*a1, (uint64_t)a1[2]);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a1 + 2);
  heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t osspi_DynModOpen(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a2 && a5)
  {
    if (*(void *)(a1[2] + 176))
    {
      uint64_t v11 = (void *)heap_Calloc(a2, 1, 24);
      *a5 = (uint64_t)v11;
      if (v11)
      {
        void *v11 = a1;
        *(void *)(*a5 + 8) = a2;
        uint64_t v5 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t))(a1[2] + 176))(a1[3], a1[1], a3, a4, *a5 + 16);
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(a2, *a5);
          *a5 = 0;
        }
      }
      else
      {
        return 2153783306;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return v5;
}

uint64_t osspi_DynModClose(uint64_t a1)
{
  uint64_t v1 = 2153783297;
  if (!a1) {
    return 2153783303;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 184);
  if (v3)
  {
    uint64_t v1 = v3(*(void *)(a1 + 16));
    if ((v1 & 0x80000000) == 0) {
      heap_Free(*(void **)(a1 + 8), a1);
    }
  }
  return v1;
}

uint64_t osspi_DynModObjLoad(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2153783303;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 192);
    if (v5) {
      return v5(a1[2]);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t osspi_DynModObjUnload(void *a1, uint64_t a2)
{
  uint64_t v2 = 2153783303;
  if (a1 && a2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 200);
    if (v3) {
      return v3(a1[2]);
    }
    return 2153783297;
  }
  return v2;
}

uint64_t osspi_DataOpen(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  safeh_GetNullHandle();
  return osspi_DataOpenEx(a1, a2, v8, v9, v10, a3, a4);
}

uint64_t osspi_DataOpenEx(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = 2153783303;
  if (!a6 || !a1 || !a2 || !a7) {
    return v7;
  }
  uint64_t v12 = (void *)heap_Calloc(a2, 1, 56);
  *a7 = (uint64_t)v12;
  if (!v12) {
    return 2153783306;
  }
  void *v12 = a1;
  *(void *)(*a7 + 8) = a2;
  uint64_t v13 = a1[2];
  uint64_t v14 = *(uint64_t (**)(void, void, uint64_t, uint64_t))(v13 + 80);
  if (v14)
  {
    uint64_t v7 = v14(a1[3], a1[1], a6, *a7 + 24);
    if ((v7 & 0x1FFF) != 1) {
      goto LABEL_10;
    }
    uint64_t v13 = a1[2];
  }
  uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t, const char *, uint64_t))v13)(a1[3], a1[1], a6, "rb", *a7 + 32);
LABEL_10:
  if ((v7 & 0x80000000) != 0)
  {
    heap_Free(a2, *a7);
    *a7 = 0;
  }
  return v7;
}

uint64_t osspi_DataClose(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v2 = (uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 96);
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 40);
      if (v4) {
        heap_Free(*(void **)(a1 + 8), v4);
      }
      if (!*(void *)(a1 + 32))
      {
        uint64_t v3 = 0;
LABEL_12:
        heap_Free(*(void **)(a1 + 8), a1);
        return v3;
      }
      uint64_t v2 = (uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 8);
    }
    uint64_t v3 = (*v2)();
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
    goto LABEL_12;
  }
  return 2153783303;
}

uint64_t osspi_DataReplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2153783303;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(uint64_t (**)(void, void))(a1[2] + 128);
    if (v5) {
      return v5(a1[3], a1[1]);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t osspi_DataMap(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4)
{
  uint64_t v4 = 2153783303;
  if (a1 && a3 && a4)
  {
    if (*(_DWORD *)(a1 + 16)) {
      return 2153783313;
    }
    *a4 = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      uint64_t v16 = *a3;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void *))(*(void *)(*(void *)a1 + 16) + 104))(v9, a2, &v16, a4);
      *a3 = v16;
      uint64_t v4 = v10;
      if ((v10 & 0x80000000) != 0) {
        return v4;
      }
      goto LABEL_8;
    }
    uint64_t v4 = 2153783300;
    if (!*a3)
    {
      unsigned int v12 = (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 32))(*(void *)(a1 + 32));
      *a3 = v12;
      if (v12 <= a2) {
        return v4;
      }
      *a3 = v12 - a2;
    }
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(*(void *)(*(void *)a1 + 16) + 24))(*(void *)(a1 + 32), a2, 0, 1);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v13 = *a3;
    if (*(_DWORD *)(a1 + 48) >= v13)
    {
      uint64_t v14 = *(void *)(a1 + 40);
    }
    else
    {
      uint64_t v14 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a1 + 40), v13);
      if (!v14) {
        return 2153783306;
      }
      *(void *)(a1 + 40) = v14;
      *(_DWORD *)(a1 + 48) = *a3;
      uint64_t v13 = *a3;
    }
    unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)a1 + 16) + 16))(v14, 1, v13, *(void *)(a1 + 32));
    if (v15 + 1 >= 2)
    {
      *a3 = v15;
      *a4 = *(void *)(a1 + 40);
LABEL_8:
      *(_DWORD *)(a1 + 16) = 1;
      return v10;
    }
  }
  return v4;
}

uint64_t osspi_DataUnmap(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2153783303;
  if (a1 && a2)
  {
    if (!*(_DWORD *)(a1 + 16)) {
      return 2153783313;
    }
    if (*(void *)(a1 + 24))
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 112))();
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else if (*(_DWORD *)(a1 + 48) < 0x401u)
    {
      uint64_t result = 0;
    }
    else
    {
      heap_Free(*(void **)(a1 + 8), *(void *)(a1 + 40));
      uint64_t result = 0;
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
    }
    *(_DWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t osspi_DataFreeze(void *a1)
{
  if (!a1) {
    return 2153783303;
  }
  if (a1[3])
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 120);
    if (v2)
    {
      return v2();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t result = a1[4];
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(*a1 + 16) + 8))();
      a1[4] = 0;
    }
  }
  return result;
}

uint64_t osspi_FindOpen(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = 2153783303;
  if (a5 && a3 && a1 && a2 && a6)
  {
    if (*(void *)(a1[2] + 152))
    {
      uint64_t v13 = (void *)heap_Calloc(a2, 1, 24);
      *a6 = (uint64_t)v13;
      if (v13)
      {
        void *v13 = a1;
        *(void *)(*a6 + 8) = a2;
        uint64_t v6 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1[2] + 152))(a1[3], a1[1], a3, a4, a5, *a6 + 16);
        if ((v6 & 0x80000000) != 0)
        {
          heap_Free(a2, *a6);
          *a6 = 0;
        }
      }
      else
      {
        return 2153783306;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return v6;
}

uint64_t osspi_FindNext(void *a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*a1 + 16) + 160))(a1[2]);
  }
  else {
    return 2153783303;
  }
}

uint64_t osspi_FindClose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 168))(*(void *)(a1 + 16));
  if ((v2 & 0x80000000) == 0) {
    heap_Free(*(void **)(a1 + 8), a1);
  }
  return v2;
}

uint64_t osspi_time(uint64_t result, uint64_t *a2)
{
  uint64_t v7 = 0;
  if (!result)
  {
LABEL_7:
    if (!a2) {
      return result;
    }
    goto LABEL_8;
  }
  uint64_t v3 = *(uint64_t (**)(void, uint64_t *))(*(void *)(result + 16) + 136);
  if (v3)
  {
    uint64_t result = v3(*(void *)(result + 24), &v7);
    if (!a2) {
      return result;
    }
    goto LABEL_8;
  }
  uint64_t v4 = *(void (**)(void, uint64_t *))(result + 88);
  if (v4)
  {
    int v6 = 0;
    uint64_t v5 = 0;
    v4(*(void *)(result + 80), &v5);
    uint64_t result = v5;
    goto LABEL_7;
  }
  uint64_t result = 0;
  if (!a2) {
    return result;
  }
LABEL_8:
  *a2 = result;
  return result;
}

uint64_t osspi_ctime(void *a1, void *a2, int a3, char *a4)
{
  uint64_t result = 2153783303;
  if (a3 && a1 && a2 && a4)
  {
    int v6 = *(uint64_t (**)(uint64_t))(a1[2] + 144);
    if (v6)
    {
      uint64_t v7 = a1[3];
      return v6(v7);
    }
    else if (*a2)
    {
      uint64_t result = 2153783297;
      if (a1[11])
      {
        LH_itoa(*a2, a4, 0xAu);
        return 0;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return result;
}

uint64_t osspi_ClcDataOpen(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  v4[0] = xmmword_26C21F010;
  v4[1] = *(_OWORD *)&off_26C21F020;
  uint64_t result = 2153783303;
  if (a1)
  {
    if (a2) {
      return clcarchive_Parse(a2, v4, a1, &v5, 0);
    }
  }
  return result;
}

size_t osspi_ClcDataRead(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    return (*(unsigned int (**)(void *, uint64_t, uint64_t, void))(*(void *)(*(void *)a4 + 16) + 16))(a1, a2, a3, *(void *)(a4 + 32));
  }
  uint64_t v10 = 0;
  size_t v11 = a3 * a2;
  if (((*(uint64_t (**)(uint64_t, void, size_t *, const void **))(*(void *)(*(void *)a4 + 16) + 104))(v6, *(unsigned int *)(a4 + 52), &v11, &v10) & 0x80000000) != 0)return 0; {
  uint64_t v7 = v10;
  }
  int v8 = v11;
  memcpy(a1, v10, v11);
  *(_DWORD *)(a4 + 52) += v8;
  if ((*(int (**)(void, const void *))(*(void *)(*(void *)a4 + 16) + 112))(*(void *)(a4 + 24), v7) >= 0)return v11; {
  else
  }
    return 0;
}

uint64_t osspi_ClcDataSeek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 24)) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)a1 + 16) + 24))(*(void *)(a1 + 32), a2, a3, 1);
  }
  *(_DWORD *)(a1 + 52) = a2;
  return 0;
}

uint64_t osspi_ClcDataError()
{
  return 0;
}

uint64_t osspi_ClcDataFinished()
{
  return 0;
}

uint64_t osspi_ClcDataClose(uint64_t a1, uint64_t a2)
{
  if (a2) {
    BOOL v2 = a1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 2153783303;
  }
  else {
    return 0;
  }
}

uint64_t safeh_HandleCheck(uint64_t a1, int a2, int a3, int a4)
{
  if (a1) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = -2123341816;
  }
  if (!a4) {
    unsigned int v4 = 0;
  }
  if (a2 == a3) {
    return v4;
  }
  else {
    return 2171625480;
  }
}

BOOL safeh_HandlesEqual(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return a2 == a4 && a1 == a3;
}

uint64_t safeh_GetNullHandle()
{
  return 0;
}

_WORD *LH_wcscpy(_WORD *result, unsigned __int16 *a2)
{
  int v2 = *a2;
  char *result = v2;
  if (v2)
  {
    uint64_t v3 = result + 1;
    unsigned int v4 = a2 + 1;
    do
    {
      int v5 = *v4++;
      *v3++ = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t LH_wcschr(uint64_t a1, int a2)
{
  uint64_t v2 = a1 - 2;
  do
  {
    int v4 = *(unsigned __int16 *)(v2 + 2);
    v2 += 2;
    int v3 = v4;
    if (v4) {
      BOOL v5 = v3 == a2;
    }
    else {
      BOOL v5 = 1;
    }
  }
  while (!v5);
  if (v3 == a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t LH_wcscmp(_WORD *a1, unsigned __int16 *a2)
{
  int v2 = (unsigned __int16)*a1;
  if (*a1)
  {
    int v3 = a1 + 1;
    do
    {
      if (v2 != *a2) {
        break;
      }
      ++a2;
      int v4 = *v3++;
      int v2 = v4;
    }
    while (v4);
  }
  return v2 - *a2;
}

uint64_t LH_wcslen(uint64_t a1)
{
  uint64_t v1 = 0;
  do
  {
    int v2 = *(unsigned __int16 *)(a1 + v1);
    v1 += 2;
  }
  while (v2);
  return (v1 >> 1) - 1;
}

uint64_t LH_wcsncpy(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  if (a3)
  {
    size_t v5 = 2 * a3 - 2;
    for (uint64_t i = (_WORD *)(a1 + 2); ; ++i)
    {
      int v7 = *a2;
      *(i - 1) = v7;
      if (!v7) {
        break;
      }
      ++a2;
      v5 -= 2;
      if (!--a3) {
        return a1;
      }
    }
    if (a3 != 1) {
      bzero(i, v5);
    }
  }
  return a1;
}

uint64_t ssftstring_ObjOpen(void *a1, void *a2)
{
  uint64_t v2 = 2319458311;
  if (a2)
  {
    size_t v5 = (void *)heap_Calloc(a1, 1, 24);
    *a2 = v5;
    if (v5)
    {
      uint64_t v2 = 0;
      *size_t v5 = a1;
    }
    else
    {
      return 2319458314;
    }
  }
  return v2;
}

uint64_t ssftstring_ObjClone(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 2319458311;
  if (a1 && a2)
  {
    size_t v5 = (void *)heap_Calloc(*(void **)a1, 1, 24);
    *a2 = (uint64_t)v5;
    if (v5)
    {
      *size_t v5 = *(void *)a1;
      int v6 = *(_DWORD *)(a1 + 8);
      BOOL v7 = v6 != 0;
      int v8 = v6 - 1;
      if (v7) {
        int v9 = v8;
      }
      else {
        int v9 = 0;
      }
      uint64_t v10 = ssftstring_Reserve(*a2, v9);
      if ((v10 & 0x80000000) != 0)
      {
        uint64_t v2 = v10;
        heap_Free(*(void **)a1, *a2);
        *a2 = 0;
      }
      else
      {
        strcpy(*(char **)(*a2 + 16), *(const char **)(a1 + 16));
        uint64_t v2 = 0;
        *(_DWORD *)(*a2 + 12) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      return 2319458314;
    }
  }
  return v2;
}

uint64_t ssftstring_Reserve(uint64_t a1, int a2)
{
  uint64_t v2 = 2319458314;
  if (!a1) {
    return 2319458311;
  }
  uint64_t v4 = (a2 + 1);
  if (*(_DWORD *)(a1 + 8) >= v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(uint64_t **)a1;
  if (v5)
  {
    BOOL v7 = (unsigned char *)heap_Realloc(v6, v5, v4);
    if (!v7) {
      return v2;
    }
    goto LABEL_10;
  }
  BOOL v7 = (unsigned char *)heap_Alloc((uint64_t)v6, v4);
  if (v7)
  {
    *BOOL v7 = 0;
LABEL_10:
    uint64_t v2 = 0;
    *(void *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 8) = v4;
  }
  return v2;
}

uint64_t ssftstring_AssignCStr(uint64_t a1, char *__s)
{
  if (__s)
  {
    int v4 = strlen(__s);
    if (a1) {
      goto LABEL_3;
    }
    return 2319458311;
  }
  int v4 = 0;
  if (!a1) {
    return 2319458311;
  }
LABEL_3:
  uint64_t result = ssftstring_Reserve(a1, v4);
  if ((result & 0x80000000) == 0)
  {
    int v6 = *(char **)(a1 + 16);
    if (__s)
    {
      strcpy(v6, __s);
    }
    else
    {
      int v4 = 0;
      *int v6 = 0;
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 12) = v4;
  }
  return result;
}

uint64_t ssftstring_ObjClose(void **a1)
{
  if (!a1) {
    return 2319458311;
  }
  uint64_t v2 = (uint64_t)a1[2];
  if (v2) {
    heap_Free(*a1, v2);
  }
  heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t ssftstring_CStr(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t ssftstring_CStrDetach(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 16);
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0;
  }
  return result;
}

uint64_t ssftstring_Size(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t ssftstring_Assign(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2319458311;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = ssftstring_Reserve(a1, *(_DWORD *)(a2 + 12));
      if ((result & 0x80000000) == 0)
      {
        uint64_t v5 = *(const char **)(a2 + 16);
        int v6 = *(char **)(a1 + 16);
        if (v5)
        {
          strcpy(v6, v5);
          int v7 = *(_DWORD *)(a2 + 12);
        }
        else
        {
          int v7 = 0;
          *int v6 = 0;
        }
        uint64_t result = 0;
        *(_DWORD *)(a1 + 12) = v7;
      }
    }
  }
  return result;
}

uint64_t ssftstring_AppendChar(uint64_t a1, char a2)
{
  if (!a1) {
    return 2319458311;
  }
  uint64_t result = ssftstring_Reserve(a1, *(_DWORD *)(a1 + 12) + 1);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned int *)(a1 + 12)) = a2;
    unsigned int v5 = *(_DWORD *)(a1 + 12) + 1;
    *(_DWORD *)(a1 + 12) = v5;
    *(unsigned char *)(*(void *)(a1 + 16) + v5) = 0;
  }
  return result;
}

uint64_t ssftstring_AppendCStr(uint64_t a1, char *__s)
{
  if (!a1 || !__s) {
    return 2319458311;
  }
  unsigned int v4 = strlen(__s);
  return ssftstring_AppendCStrN(a1, __s, v4);
}

uint64_t ssftstring_AppendCStrN(uint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t result = 2319458311;
  if (a1 && a2)
  {
    uint64_t result = ssftstring_Reserve(a1, *(_DWORD *)(a1 + 12) + a3);
    if ((result & 0x80000000) == 0)
    {
      strncpy((char *)(*(void *)(a1 + 16) + *(unsigned int *)(a1 + 12)), a2, a3);
      uint64_t result = 0;
      unsigned int v7 = *(_DWORD *)(a1 + 12) + a3;
      *(_DWORD *)(a1 + 12) = v7;
      *(unsigned char *)(*(void *)(a1 + 16) + v7) = 0;
    }
  }
  return result;
}

uint64_t ssftstring_Clear(uint64_t a1)
{
  if (!a1) {
    return 2319458311;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 16);
  uint64_t result = 0;
  if (v2)
  {
    *uint64_t v2 = 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t ssftstring_ReplaceAllCStrByCStr(uint64_t a1, char *__s2, char *a3)
{
  uint64_t v3 = 2319458311;
  *(void *)unsigned int v15 = 0;
  if (!a1 || !__s2 || !*__s2) {
    return v3;
  }
  int v6 = *(char **)(a1 + 16);
  if (!v6 || (int v8 = strstr(*(char **)(a1 + 16), __s2)) == 0)
  {
    uint64_t v3 = 0;
LABEL_17:
    if (*(void *)v15) {
      ssftstring_ObjClose(*(void ***)v15);
    }
    return v3;
  }
  int v9 = v8;
  uint64_t v10 = ssftstring_ObjClone(a1, (uint64_t *)v15);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v11 = *(void *)v15;
  if (*(void *)v15)
  {
    unsigned int v12 = *(unsigned char **)(*(void *)v15 + 16);
    if (v12)
    {
      unsigned char *v12 = 0;
      *(_DWORD *)(v11 + 12) = 0;
    }
    while (1)
    {
      uint64_t appended = ssftstring_AppendCStrN(*(uint64_t *)v15, v6, (int)v9 - (int)v6);
      if ((appended & 0x80000000) != 0) {
        break;
      }
      uint64_t appended = ssftstring_AppendCStr(*(uint64_t *)v15, a3);
      if ((appended & 0x80000000) != 0) {
        break;
      }
      int v6 = &v9[strlen(__s2)];
      int v9 = strstr(v6, __s2);
      if (!v9)
      {
        uint64_t appended = ssftstring_AppendCStr(*(uint64_t *)v15, v6);
        if ((appended & 0x80000000) == 0) {
          uint64_t appended = ssftstring_Assign(a1, *(uint64_t *)v15);
        }
        break;
      }
    }
    uint64_t v3 = appended;
    goto LABEL_17;
  }
  return v3;
}

uint64_t ssftstring_ReplaceAllBy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return ssftstring_ReplaceAllCStrByCStr(a1, *(char **)(a2 + 16), *(char **)(a3 + 16));
  }
  else {
    return 2319458311;
  }
}

uint64_t vector_ObjOpen(void *a1, long long *a2, __int16 a3, uint64_t *a4)
{
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t result = 0;
  if (*((void *)a2 + 1))
  {
    if (!a4 || !v8) {
      return result;
    }
LABEL_7:
    uint64_t result = heap_Calloc(a1, 1, 64);
    *a4 = result;
    if (result)
    {
      *(void *)uint64_t result = 0;
      uint64_t v10 = *a4;
      *(void *)(v10 + 32) = 0;
      long long v11 = *a2;
      *(void *)(v10 + 24) = *((void *)a2 + 2);
      *(_OWORD *)(v10 + 8) = v11;
      uint64_t v12 = *a4;
      *(_WORD *)(v12 + 40) = a3;
      *(void *)(v12 + 48) = a1;
      *(_DWORD *)(*a4 + 56) = 0;
      return 1;
    }
    return result;
  }
  if (a4 && !v8) {
    goto LABEL_7;
  }
  return result;
}

uint64_t vector_ObjClone(long long *a1, uint64_t **a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = heap_Calloc(*((void **)a1 + 6), 1, 64);
      *a2 = (uint64_t *)result;
      if (result)
      {
        long long v5 = *a1;
        long long v6 = a1[1];
        long long v7 = a1[3];
        *(_OWORD *)(result + 32) = a1[2];
        *(_OWORD *)(result + 48) = v7;
        *(_OWORD *)uint64_t result = v5;
        *(_OWORD *)(result + 16) = v6;
        **a2 = heap_Alloc((*a2)[6], *((_DWORD *)*a2 + 8) * *((unsigned __int16 *)*a2 + 4));
        uint64_t v8 = *a2;
        int v9 = (void *)**a2;
        if (!v9)
        {
LABEL_24:
          heap_Free((void *)v8[6], (uint64_t)v8);
          uint64_t result = 0;
          *a2 = 0;
          return result;
        }
        memcpy(v9, *(const void **)a1, *((_DWORD *)v8 + 9) * *((unsigned __int16 *)v8 + 4));
        if (!(*a2)[2]) {
          return 1;
        }
        unsigned int v10 = 0;
        int v11 = 0;
        uint64_t result = 1;
        while (result == 1)
        {
          if (v10 >= *((_DWORD *)*a2 + 9)) {
            return 1;
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t, uint64_t))(*a2)[2])(*(void *)a1 + v10 * *((unsigned __int16 *)a1 + 4), (*a2)[6], **a2 + v10 * *((unsigned __int16 *)*a2 + 4));
          if (result == 1) {
            ++v11;
          }
          ++v10;
        }
        if (!result)
        {
          uint64_t v8 = *a2;
          if (!*a2) {
            return 0;
          }
          uint64_t v12 = *v8;
          if (*v8)
          {
            if (v8[3]) {
              BOOL v13 = v11 == 0;
            }
            else {
              BOOL v13 = 1;
            }
            if (!v13)
            {
              int v14 = 0;
              do
              {
                ((void (*)(uint64_t, uint64_t))(*a2)[3])(**a2 + v14 * *((unsigned __int16 *)*a2 + 4), (*a2)[6]);
                ++v14;
              }
              while (v11 != v14);
              uint64_t v8 = *a2;
              uint64_t v12 = **a2;
            }
            heap_Free((void *)v8[6], v12);
            uint64_t v8 = *a2;
          }
          goto LABEL_24;
        }
      }
    }
  }
  return result;
}

uint64_t vector_ObjClose(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      if (*(void *)(result + 24) && *(_DWORD *)(result + 36))
      {
        unsigned int v3 = 0;
        do
        {
          (*(void (**)(void, void))(v1 + 24))(*(void *)v1 + v3 * *(unsigned __int16 *)(v1 + 8), *(void *)(v1 + 48));
          ++v3;
        }
        while (v3 < *(_DWORD *)(v1 + 36));
        uint64_t v2 = *(void *)v1;
      }
      heap_Free(*(void **)(v1 + 48), v2);
    }
    heap_Free(*(void **)(v1 + 48), v1);
    return 1;
  }
  return result;
}

uint64_t vector_AddGet(uint64_t a1, void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 36);
    int v6 = v5 + 1;
    uint64_t v7 = *(void *)a1;
    if (*(_DWORD *)(a1 + 32) < v5 + 1)
    {
      unsigned int v8 = *(unsigned __int16 *)(a1 + 40) + *(unsigned __int16 *)(a1 + 40) * (v5 / *(unsigned __int16 *)(a1 + 40));
      int v9 = *(uint64_t **)(a1 + 48);
      uint64_t v10 = v8 * *(unsigned __int16 *)(a1 + 8);
      if (v7)
      {
        uint64_t result = heap_Realloc(v9, v7, v10);
        if (!result) {
          return result;
        }
        uint64_t v7 = result;
        *(void *)a1 = result;
      }
      else
      {
        uint64_t result = heap_Calloc(v9, 1, v10);
        uint64_t v7 = result;
        *(void *)a1 = result;
        if (!result) {
          return result;
        }
      }
      *(_DWORD *)(a1 + 32) = v8;
      unsigned int v5 = *(_DWORD *)(a1 + 36);
      int v6 = v5 + 1;
    }
    *a2 = v7 + v5 * *(unsigned __int16 *)(a1 + 8);
    *(_DWORD *)(a1 + 36) = v6;
    return 1;
  }
  return result;
}

uint64_t vector_Add(uint64_t a1, const void *a2)
{
  __dst = 0;
  uint64_t result = vector_AddGet(a1, &__dst);
  if (result)
  {
    memcpy(__dst, a2, *(unsigned __int16 *)(a1 + 8));
    if (*(_DWORD *)(a1 + 56)) {
      return 1;
    }
    unsigned int v5 = *(uint64_t (**)(const void *, void, void *))(a1 + 16);
    if (!v5) {
      return 1;
    }
    uint64_t result = v5(a2, *(void *)(a1 + 48), __dst);
    if (result) {
      return 1;
    }
    else {
      --*(_DWORD *)(a1 + 36);
    }
  }
  return result;
}

uint64_t vector_AddElemAt(uint64_t a1, unsigned int a2, const void *a3)
{
  __dst = 0;
  uint64_t result = vector_AddGet(a1, &__dst);
  if (result)
  {
    int v7 = *(_DWORD *)(a1 + 36);
    unsigned int v8 = v7 - 1;
    if (v7 - 1 > a2)
    {
      uint64_t v9 = *(void *)a1;
      int v10 = *(unsigned __int16 *)(a1 + 8);
      __dst = (void *)(*(void *)a1 + v10 * a2);
      memmove((void *)(v9 + (a2 + 1) * v10), __dst, (v7 - (a2 + 1)) * v10);
      unsigned int v8 = a2;
    }
    memcpy(__dst, a3, *(unsigned __int16 *)(a1 + 8));
    if (*(_DWORD *)(a1 + 56)) {
      return 1;
    }
    int v11 = *(unsigned int (**)(const void *, void, void *))(a1 + 16);
    if (!v11 || v11(a3, *(void *)(a1 + 48), __dst))
    {
      return 1;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      vector_Remove(a1, v8);
      uint64_t result = 0;
      *(void *)(a1 + 24) = v12;
    }
  }
  return result;
}

uint64_t vector_Remove(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result + 36);
    if (v4 <= a2)
    {
      return 0;
    }
    else
    {
      if (!*(_DWORD *)(result + 56))
      {
        unsigned int v5 = *(void (**)(void, void))(result + 24);
        if (v5)
        {
          v5(*(void *)result + *(unsigned __int16 *)(result + 8) * a2, *(void *)(result + 48));
          unsigned int v4 = *(_DWORD *)(v3 + 36);
        }
      }
      if (v4 + ~a2)
      {
        memmove((void *)(*(void *)v3 + *(unsigned __int16 *)(v3 + 8) * a2), (const void *)(*(void *)v3 + *(unsigned __int16 *)(v3 + 8) + *(unsigned __int16 *)(v3 + 8) * a2), (v4 + ~a2) * *(unsigned __int16 *)(v3 + 8));
        unsigned int v4 = *(_DWORD *)(v3 + 36);
      }
      *(_DWORD *)(v3 + 36) = v4 - 1;
      return 1;
    }
  }
  return result;
}

uint64_t vector_RemoveAddress(uint64_t result, char *__dst)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0;
    if (__dst)
    {
      int v4 = *(unsigned __int16 *)(v3 + 8);
      unint64_t v5 = *(void *)v3 + (*(_DWORD *)(v3 + 36) * v4);
      if (*(void *)v3 <= (unint64_t)__dst && v5 >= (unint64_t)__dst)
      {
        if (!*(_DWORD *)(v3 + 56))
        {
          int v7 = *(void (**)(char *, void))(v3 + 24);
          if (v7)
          {
            v7(__dst, *(void *)(v3 + 48));
            int v4 = *(unsigned __int16 *)(v3 + 8);
          }
        }
        memmove(__dst, &__dst[v4], (v5 - (__dst + v4)));
        --*(_DWORD *)(v3 + 36);
        return 1;
      }
    }
  }
  return result;
}

uint64_t vector_Clear(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(_DWORD *)(result + 56) && *(void *)(result + 24) && *(_DWORD *)(result + 36))
    {
      unsigned int v2 = 0;
      do
      {
        (*(void (**)(void, void))(v1 + 24))(*(void *)v1 + v2 * *(unsigned __int16 *)(v1 + 8), *(void *)(v1 + 48));
        ++v2;
      }
      while (v2 < *(_DWORD *)(v1 + 36));
    }
    *(_DWORD *)(v1 + 36) = 0;
    return 1;
  }
  return result;
}

uint64_t vector_GetSize(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 36);
  }
  return result;
}

uint64_t vector_GetElemAt(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t result = 0;
  if (a1 && a3)
  {
    if (*(_DWORD *)(a1 + 36) <= a2)
    {
      return 0;
    }
    else
    {
      *a3 = *(void *)a1 + *(unsigned __int16 *)(a1 + 8) * a2;
      return 1;
    }
  }
  return result;
}

uint64_t vector_StackPop(uint64_t a1)
{
  if (a1 && (int v1 = *(_DWORD *)(a1 + 36)) != 0) {
    return vector_Remove(a1, v1 - 1);
  }
  else {
    return 0;
  }
}

uint64_t vector_StackTop(uint64_t a1, void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    int v4 = *(_DWORD *)(a1 + 36);
    if (v4)
    {
      *a2 = *(void *)a1 + (v4 - 1) * *(unsigned __int16 *)(a1 + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double XmlPrologStateInit(uint64_t a1)
{
  *(void *)a1 = prolog0;
  *(void *)&double result = 0x100000000;
  *(void *)(a1 + 16) = 0x100000000;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t prolog0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = prolog1;
  uint64_t result = 0;
  switch(a2)
  {
    case 11:
      uint64_t result = 55;
      goto LABEL_7;
    case 12:
      uint64_t result = 1;
      goto LABEL_7;
    case 13:
      uint64_t result = 56;
LABEL_7:
      unsigned int v8 = prolog1;
      goto LABEL_15;
    case 14:
      return result;
    case 15:
      goto LABEL_16;
    case 16:
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + 2 * *(int *)(a5 + 128), a4, "DOCTYPE"))goto LABEL_13; {
      int v6 = doctype0;
      }
      uint64_t result = 3;
      goto LABEL_16;
    default:
      if (a2 == 29)
      {
        uint64_t result = 2;
      }
      else
      {
        if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
          return 59;
        }
LABEL_13:
        uint64_t result = 0xFFFFFFFFLL;
      }
      unsigned int v8 = error;
LABEL_15:
      int v6 = v8;
LABEL_16:
      *(void *)a1 = v6;
      return result;
  }
}

uint64_t prolog1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 11:
      return 55;
    case 12:
      goto LABEL_5;
    case 13:
      return 56;
    case 14:
    case 15:
      return result;
    case 16:
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + 2 * *(int *)(a5 + 128), a4, "DOCTYPE"))goto LABEL_11; {
      *(void *)a1 = doctype0;
      }
      uint64_t result = 3;
      break;
    default:
      if (a2 == 29)
      {
        *(void *)a1 = error;
        uint64_t result = 2;
      }
      else
      {
LABEL_5:
        if (a2 != 28 || *(_DWORD *)(a1 + 20))
        {
LABEL_11:
          *(void *)a1 = error;
          uint64_t result = 0xFFFFFFFFLL;
        }
        else
        {
          uint64_t result = 59;
        }
      }
      break;
  }
  return result;
}

uint64_t doctype0(uint64_t a1, int a2)
{
  unsigned int v2 = doctype1;
  if (a2 == 15) {
    return 3;
  }
  uint64_t result = 4;
  if (a2 != 18 && a2 != 41)
  {
    uint64_t result = 0xFFFFFFFFLL;
    unsigned int v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t error()
{
  return 0;
}

uint64_t doctype1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = internalSubset;
  if (a2 > 17)
  {
    if (a2 == 18)
    {
      int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM");
      int v6 = doctype3;
      if (v11
        || (int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"),
            int v6 = doctype2,
            v12))
      {
        uint64_t result = 3;
        goto LABEL_16;
      }
LABEL_15:
      uint64_t result = 0xFFFFFFFFLL;
      int v6 = error;
      goto LABEL_16;
    }
    if (a2 == 25)
    {
      uint64_t result = 7;
      goto LABEL_16;
    }
LABEL_12:
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_15;
  }
  if (a2 == 15) {
    return 3;
  }
  if (a2 != 17) {
    goto LABEL_12;
  }
  uint64_t result = 8;
  int v6 = prolog2;
LABEL_16:
  *(void *)a1 = v6;
  return result;
}

void internalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
  if ((int)name > 25)
  {
    if (name == 26)
    {
      *(void *)ctx = doctype5;
    }
    else if (name != 28)
    {
LABEL_17:
      *(void *)ctx = error;
    }
  }
  else
  {
    switch((int)name)
    {
      case 11:
      case 13:
      case 15:
        return;
      case 12:
      case 14:
        goto LABEL_17;
      case 16:
        uint64_t v6 = v4;
        if ((*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v4 + 48))(v4, &ExternalID[2 * *(int *)(v4 + 128)], SystemID, "ENTITY"))
        {
          *(void *)ctx = entity0;
          return;
        }
        if ((*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v6 + 48))(v6, &ExternalID[2 * *(int *)(v6 + 128)], SystemID, "ATTLIST"))
        {
          *(void *)ctx = attlist0;
          return;
        }
        if ((*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v6 + 48))(v6, &ExternalID[2 * *(int *)(v6 + 128)], SystemID, "ELEMENT"))
        {
          *(void *)ctx = element0;
          return;
        }
        if (!(*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v6 + 48))(v6, &ExternalID[2 * *(int *)(v6 + 128)], SystemID, "NOTATION"))goto LABEL_17; {
        *(void *)ctx = notation0;
        }
        break;
      default:
        if (name != -4) {
          goto LABEL_17;
        }
        return;
    }
  }
}

uint64_t prolog2(uint64_t a1, int a2)
{
  HIDWORD(v2) = a2 - 11;
  LODWORD(v2) = a2 - 11;
  uint64_t v3 = 0;
  switch((v2 >> 1))
  {
    case 0u:
      uint64_t v3 = 55;
      break;
    case 1u:
      uint64_t v3 = 56;
      break;
    case 2u:
      return v3;
    case 9u:
      *(void *)a1 = error;
      uint64_t v3 = 2;
      break;
    default:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(void *)a1 = error;
        uint64_t v3 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v3 = 59;
      }
      break;
  }
  return v3;
}

uint64_t doctype3(uint64_t a1, int a2)
{
  unint64_t v2 = doctype4;
  if (a2 == 15) {
    return 3;
  }
  if (a2 == 27)
  {
    uint64_t result = 5;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t doctype2(uint64_t a1, int a2)
{
  unint64_t v2 = doctype3;
  if (a2 == 15) {
    return 3;
  }
  if (a2 == 27)
  {
    uint64_t result = 6;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity0(uint64_t a1, int a2)
{
  uint64_t v3 = entity1;
  uint64_t result = 11;
  if (a2 != 15)
  {
    if (a2 == 22)
    {
LABEL_9:
      *(void *)a1 = v3;
      return result;
    }
    if (a2 == 18)
    {
      uint64_t result = 9;
      uint64_t v3 = entity2;
      goto LABEL_9;
    }
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v3 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
      goto LABEL_9;
    }
    return 59;
  }
  return result;
}

uint64_t attlist0(uint64_t a1, int a2)
{
  unint64_t v2 = attlist1;
  if (a2 == 15) {
    return 33;
  }
  uint64_t result = 34;
  if (a2 != 18 && a2 != 41)
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t element0(uint64_t a1, int a2)
{
  unint64_t v2 = element1;
  if (a2 == 15) {
    return 39;
  }
  uint64_t result = 40;
  if (a2 != 18 && a2 != 41)
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t notation0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = notation1;
  if (a2 == 15) {
    return 17;
  }
  if (a2 == 18)
  {
    uint64_t v3 = a2;
LABEL_8:
    *(void *)a1 = v2;
    return v3;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  unint64_t v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
    goto LABEL_8;
  }
  return 59;
}

uint64_t doctype5(uint64_t a1, int a2)
{
  unint64_t v2 = prolog2;
  if (a2 == 15) {
    return 3;
  }
  if (a2 == 17)
  {
    uint64_t result = 8;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity1(uint64_t a1, int a2)
{
  unint64_t v2 = entity7;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 18)
  {
    uint64_t result = 10;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(a2)
  {
    case 15:
      return 11;
    case 27:
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 11;
      return 12;
    case 18:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM"))
      {
        uint64_t v9 = entity4;
LABEL_13:
        *(void *)a1 = v9;
        return 11;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"))
      {
        uint64_t v9 = entity3;
        goto LABEL_13;
      }
      break;
    default:
      if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
        return 59;
      }
      break;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t entity7(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(a2)
  {
    case 15:
      return 11;
    case 27:
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 11;
      return 12;
    case 18:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM"))
      {
        uint64_t v9 = entity9;
LABEL_13:
        *(void *)a1 = v9;
        return 11;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"))
      {
        uint64_t v9 = entity8;
        goto LABEL_13;
      }
      break;
    default:
      if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
        return 59;
      }
      break;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t entity9(uint64_t a1, int a2)
{
  unint64_t v2 = entity10;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 27)
  {
    uint64_t result = 13;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity8(uint64_t a1, int a2)
{
  unint64_t v2 = entity9;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 27)
  {
    uint64_t result = 14;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t declClose(uint64_t a1, int a2)
{
  if (a2 == 17)
  {
    uint64_t v3 = internalSubset;
    if (!*(_DWORD *)(a1 + 20)) {
      uint64_t v3 = externalSubset1;
    }
    *(void *)a1 = v3;
    return *(unsigned int *)(a1 + 12);
  }
  if (a2 == 15) {
    return *(unsigned int *)(a1 + 12);
  }
  if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
    return 59;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t entity10(uint64_t a1, int a2)
{
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 17)
  {
    unint64_t v2 = externalSubset1;
    if (*(_DWORD *)(a1 + 20)) {
      unint64_t v2 = internalSubset;
    }
    uint64_t v3 = 15;
    goto LABEL_10;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  unint64_t v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
LABEL_10:
    *(void *)a1 = v2;
    return v3;
  }
  return 59;
}

void externalSubset1(_DWORD *a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
  if ((int)a2 > 25)
  {
    if (a2 != 26)
    {
      if (a2 != 34)
      {
        if (a2 == 33)
        {
          *(void *)a1 = condSect0;
          return;
        }
        goto LABEL_14;
      }
      int v4 = a1[4];
      if (v4)
      {
        a1[4] = v4 - 1;
        return;
      }
    }
LABEL_12:
    *(void *)a1 = error;
    return;
  }
  if (a2 == -4)
  {
    if (!a1[4]) {
      return;
    }
    goto LABEL_12;
  }
  if (a2 != 15) {
LABEL_14:
  }
    internalSubset(a1, a2, a3, a4);
}

uint64_t condSect0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 15) {
    return 0;
  }
  if (a2 != 18)
  {
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_10;
  }
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "INCLUDE");
  int v10 = condSect1;
  if (!v9)
  {
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "IGNORE");
    int v10 = condSect2;
    if (!v11)
    {
LABEL_10:
      uint64_t result = 0xFFFFFFFFLL;
      int v10 = error;
      goto LABEL_11;
    }
  }
  uint64_t result = 0;
LABEL_11:
  *(void *)a1 = v10;
  return result;
}

uint64_t condSect1(uint64_t a1, int a2)
{
  if (a2 == 15) {
    return 0;
  }
  if (a2 == 25)
  {
    uint64_t v2 = 0;
    *(void *)a1 = externalSubset1;
    ++*(_DWORD *)(a1 + 16);
  }
  else if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
    *(void *)a1 = error;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 59;
  }
  return v2;
}

uint64_t condSect2(uint64_t a1, int a2)
{
  uint64_t v2 = externalSubset1;
  if (a2 == 15) {
    return 0;
  }
  if (a2 == 25)
  {
    uint64_t v3 = 58;
LABEL_8:
    *(void *)a1 = v2;
    return v3;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  uint64_t v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
    goto LABEL_8;
  }
  return 59;
}

uint64_t entity4(uint64_t a1, int a2)
{
  uint64_t v2 = entity5;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 27)
  {
    uint64_t result = 13;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity3(uint64_t a1, int a2)
{
  uint64_t v2 = entity4;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 27)
  {
    uint64_t result = 14;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity5(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 15) {
    return 11;
  }
  if (a2 != 18)
  {
    if (a2 == 17)
    {
      uint64_t v6 = externalSubset1;
      if (*(_DWORD *)(a1 + 20)) {
        uint64_t v6 = internalSubset;
      }
      uint64_t result = 15;
      goto LABEL_14;
    }
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_13;
  }
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "NDATA");
  uint64_t v6 = entity6;
  if (!v8)
  {
LABEL_13:
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v6 = error;
    goto LABEL_14;
  }
  uint64_t result = 11;
LABEL_14:
  *(void *)a1 = v6;
  return result;
}

uint64_t entity6(uint64_t a1, int a2)
{
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 18)
  {
    *(void *)a1 = declClose;
    *(_DWORD *)(a1 + 12) = 11;
    return 16;
  }
  else if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
    *(void *)a1 = error;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 59;
  }
}

uint64_t attlist1(uint64_t a1, int a2)
{
  uint64_t v2 = attlist2;
  if (a2 > 17)
  {
    uint64_t v3 = 22;
    if (a2 == 18 || a2 == 41) {
      goto LABEL_12;
    }
  }
  else
  {
    if (a2 == 15) {
      return 33;
    }
    if (a2 == 17)
    {
      uint64_t v2 = externalSubset1;
      if (*(_DWORD *)(a1 + 20)) {
        uint64_t v2 = internalSubset;
      }
      uint64_t v3 = 33;
      goto LABEL_12;
    }
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  uint64_t v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
LABEL_12:
    *(void *)a1 = v2;
    return v3;
  }
  return 59;
}

uint64_t attlist2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(a2)
  {
    case 15:
      return 33;
    case 23:
      int v11 = attlist3;
LABEL_14:
      *(void *)a1 = v11;
      return 33;
    case 18:
      for (uint64_t i = 0; i != 8; ++i)
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(a5 + 48))(a5, a3, a4, attlist2_types[i]))
        {
          *(void *)a1 = attlist8;
          return (i + 23);
        }
      }
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "NOTATION")) {
        break;
      }
      int v11 = attlist5;
      goto LABEL_14;
  }
  if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
    return 59;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t attlist8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = attlist1;
  if (a2 == 15) {
    return 33;
  }
  if (a2 == 27)
  {
    uint64_t result = 37;
    goto LABEL_16;
  }
  if (a2 != 20)
  {
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_15;
  }
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "IMPLIED");
  unint64_t v5 = attlist1;
  if (!v10)
  {
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "REQUIRED");
    unint64_t v5 = attlist1;
    if (v12)
    {
      uint64_t result = 36;
      goto LABEL_16;
    }
    int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "FIXED");
    unint64_t v5 = (uint64_t (*)())attlist9;
    if (v13)
    {
      uint64_t result = 33;
      goto LABEL_16;
    }
LABEL_15:
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v5 = error;
    goto LABEL_16;
  }
  uint64_t result = 35;
LABEL_16:
  *(void *)a1 = v5;
  return result;
}

uint64_t attlist5(uint64_t a1, int a2)
{
  uint64_t v3 = attlist6;
  uint64_t result = 33;
  if (a2 != 15)
  {
    if (a2 == 23 || (result = 0xFFFFFFFFLL, uint64_t v3 = error, a2 != 28) || *(_DWORD *)(a1 + 20)) {
      *(void *)a1 = v3;
    }
    else {
      return 59;
    }
  }
  return result;
}

uint64_t attlist3(uint64_t a1, int a2)
{
  uint64_t result = 31;
  int v4 = attlist4;
  if ((a2 - 18) < 2)
  {
LABEL_7:
    *(void *)a1 = v4;
    return result;
  }
  if (a2 != 15)
  {
    if (a2 != 41)
    {
      uint64_t result = 0xFFFFFFFFLL;
      int v4 = error;
      if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
        return 59;
      }
    }
    goto LABEL_7;
  }
  return 33;
}

uint64_t attlist9(uint64_t a1, int a2)
{
  uint64_t v2 = attlist1;
  if (a2 == 15) {
    return 33;
  }
  if (a2 == 27)
  {
    uint64_t result = 38;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t attlist6(uint64_t a1, int a2)
{
  uint64_t v2 = attlist7;
  if (a2 == 15) {
    return 33;
  }
  if (a2 == 18)
  {
    uint64_t result = 32;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t attlist7(uint64_t a1, int a2)
{
  uint64_t v3 = (uint64_t (*)())attlist8;
  uint64_t result = 33;
  if (a2 != 15)
  {
    if (a2 == 24)
    {
LABEL_9:
      *(void *)a1 = v3;
      return result;
    }
    if (a2 == 21)
    {
      uint64_t v3 = attlist6;
      goto LABEL_9;
    }
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v3 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
      goto LABEL_9;
    }
    return 59;
  }
  return result;
}

uint64_t attlist4(uint64_t a1, int a2)
{
  uint64_t v3 = (uint64_t (*)())attlist8;
  uint64_t result = 33;
  if (a2 != 15)
  {
    if (a2 == 24)
    {
LABEL_9:
      *(void *)a1 = v3;
      return result;
    }
    if (a2 == 21)
    {
      uint64_t v3 = attlist3;
      goto LABEL_9;
    }
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v3 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
      goto LABEL_9;
    }
    return 59;
  }
  return result;
}

uint64_t element1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(a2)
  {
    case 15:
      return 39;
    case 23:
      *(void *)a1 = element2;
      *(_DWORD *)(a1 + 8) = 1;
      return 44;
    case 18:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "EMPTY"))
      {
        *(void *)a1 = declClose;
        *(_DWORD *)(a1 + 12) = 39;
        return 42;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "ANY"))
      {
        *(void *)a1 = declClose;
        *(_DWORD *)(a1 + 12) = 39;
        return 41;
      }
      break;
    default:
      if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
        return 59;
      }
      break;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t element2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 51;
  int v7 = element7;
  switch(a2)
  {
    case 18:
      goto LABEL_16;
    case 19:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      goto LABEL_6;
    case 20:
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "PCDATA"))goto LABEL_14; {
      int v7 = element3;
      }
      uint64_t result = 43;
      goto LABEL_16;
    case 23:
      *(_DWORD *)(a1 + 8) = 2;
      uint64_t result = 44;
      int v8 = element6;
      goto LABEL_15;
    case 30:
      uint64_t result = 53;
      goto LABEL_13;
    case 31:
      uint64_t result = 52;
      goto LABEL_13;
    case 32:
      uint64_t result = 54;
LABEL_13:
      int v8 = element7;
      goto LABEL_15;
    default:
      if (a2 == 15) {
        return 39;
      }
      if (a2 != 41)
      {
LABEL_6:
        if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
          return 59;
        }
LABEL_14:
        uint64_t result = 0xFFFFFFFFLL;
        int v8 = (uint64_t (*)(uint64_t, int))error;
LABEL_15:
        int v7 = v8;
      }
LABEL_16:
      *(void *)a1 = v7;
      return result;
  }
}

uint64_t element3(uint64_t a1, int a2)
{
  if (a2 > 23)
  {
    if (a2 == 36)
    {
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 39;
      return 46;
    }
    if (a2 == 24)
    {
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 39;
      return 45;
    }
  }
  else
  {
    if (a2 == 15) {
      return 39;
    }
    if (a2 == 21)
    {
      *(void *)a1 = element4;
      return 39;
    }
  }
  if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
    return 59;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t element6(uint64_t a1, int a2)
{
  if (a2 <= 22)
  {
    if (a2 == 15)
    {
      return 39;
    }
    else if (a2 == 18)
    {
LABEL_6:
      *(void *)a1 = element7;
      return 51;
    }
    else
    {
LABEL_8:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(void *)a1 = error;
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 59;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 23:
        ++*(_DWORD *)(a1 + 8);
        uint64_t result = 44;
        break;
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
        goto LABEL_8;
      case 30:
        *(void *)a1 = element7;
        uint64_t result = 53;
        break;
      case 31:
        *(void *)a1 = element7;
        uint64_t result = 52;
        break;
      case 32:
        *(void *)a1 = element7;
        uint64_t result = 54;
        break;
      default:
        if (a2 != 41) {
          goto LABEL_8;
        }
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t element7(uint64_t a1, int a2)
{
  if (a2 <= 34)
  {
    switch(a2)
    {
      case 15:
        return 39;
      case 21:
        *(void *)a1 = element6;
        return 49;
      case 24:
        int v4 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v4;
        if (!v4)
        {
          *(void *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        return 45;
      default:
LABEL_21:
        if (a2 != 28 || *(_DWORD *)(a1 + 20))
        {
          *(void *)a1 = error;
          return 0xFFFFFFFFLL;
        }
        else
        {
          return 59;
        }
    }
  }
  else
  {
    switch(a2)
    {
      case '#':
        int v2 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v2;
        if (!v2)
        {
          *(void *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        uint64_t result = 47;
        break;
      case '$':
        int v5 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v5;
        if (!v5)
        {
          *(void *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        uint64_t result = 46;
        break;
      case '%':
        int v6 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v6;
        if (!v6)
        {
          *(void *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        uint64_t result = 48;
        break;
      case '&':
        *(void *)a1 = element6;
        uint64_t result = 50;
        break;
      default:
        goto LABEL_21;
    }
  }
  return result;
}

uint64_t element4(uint64_t a1, int a2)
{
  int v2 = element5;
  if (a2 == 15) {
    return 39;
  }
  uint64_t result = 51;
  if (a2 != 18 && a2 != 41)
  {
    uint64_t result = 0xFFFFFFFFLL;
    int v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t element5(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 15:
      return 39;
    case 21:
      *(void *)a1 = element4;
      return 39;
    case 36:
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 39;
      return 46;
    default:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(void *)a1 = error;
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 59;
      }
  }
}

uint64_t notation1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 15) {
    return 17;
  }
  if (a2 != 18)
  {
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_10;
  }
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM");
  int v10 = notation3;
  if (!v9)
  {
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC");
    int v10 = notation2;
    if (!v11)
    {
LABEL_10:
      uint64_t result = 0xFFFFFFFFLL;
      int v10 = error;
      goto LABEL_11;
    }
  }
  uint64_t result = 17;
LABEL_11:
  *(void *)a1 = v10;
  return result;
}

uint64_t notation3(uint64_t a1, int a2)
{
  if (a2 == 15) {
    return 17;
  }
  if (a2 == 27)
  {
    *(void *)a1 = declClose;
    *(_DWORD *)(a1 + 12) = 17;
    return 19;
  }
  else if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
    *(void *)a1 = error;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 59;
  }
}

uint64_t notation2(uint64_t a1, int a2)
{
  int v2 = notation4;
  if (a2 == 15) {
    return 17;
  }
  if (a2 == 27)
  {
    uint64_t result = 21;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    int v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t notation4(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 15:
      return 17;
    case 17:
      uint64_t v3 = internalSubset;
      if (!*(_DWORD *)(a1 + 20)) {
        uint64_t v3 = externalSubset1;
      }
      *(void *)a1 = v3;
      return 20;
    case 27:
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 17;
      return 19;
    default:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(void *)a1 = error;
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 59;
      }
  }
}

uint64_t doctype4(uint64_t a1, int a2)
{
  int v2 = internalSubset;
  switch(a2)
  {
    case 15:
      return 3;
    case 25:
      uint64_t v3 = 7;
      goto LABEL_10;
    case 17:
      uint64_t v3 = 8;
      int v2 = prolog2;
LABEL_10:
      *(void *)a1 = v2;
      return v3;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  int v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
    goto LABEL_10;
  }
  return 59;
}

XML_Parser XML_ParserCreate_MM(const XML_Char *encoding, const XML_Memory_Handling_Suite *memsuite, const XML_Char *namespaceSeparator)
{
  return (XML_Parser)parserCreate((unsigned __int8 *)encoding, (uint64_t)memsuite, namespaceSeparator, 0);
}

uint64_t parserCreate(unsigned __int8 *a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(a2 + 8))(*(void *)a2, 984);
  if (!v8) {
    return v8;
  }
  *(void *)(v8 + 24) = *(void *)a2;
  uint64_t v9 = v8 + 24;
  long long v10 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 32) = v10;
  *(void *)(v8 + 48) = *(void *)(a2 + 24);
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 72) = 0;
  *(_DWORD *)(v8 + 728) = 16;
  uint64_t v11 = ((uint64_t (*)(void))v10)();
  *(void *)(v8 + 744) = v11;
  uint64_t v12 = *(void *)(v8 + 24);
  if (!v11)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 48))(v12, v8);
    return 0;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v12, 1024);
  *(void *)(v8 + 96) = v13;
  if (!v13)
  {
LABEL_18:
    (*(void (**)(void, void))(v8 + 48))(*(void *)(v8 + 24), *(void *)(v8 + 744));
    (*(void (**)(void, uint64_t))(v8 + 48))(*(void *)(v8 + 24), v8);
    return 0;
  }
  *(void *)(v8 + 104) = v13 + 1024;
  uint64_t v14 = a4;
  if (!a4)
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(v8 + 32))(*(void *)(v8 + 24), 360);
    if (v14)
    {
      *(_OWORD *)(v14 + 160) = 0u;
      *(_OWORD *)(v14 + 176) = 0u;
      *(void *)(v14 + 192) = 0;
      *(void *)(v14 + 200) = v9;
      *(_OWORD *)(v14 + 208) = 0u;
      *(_OWORD *)(v14 + 224) = 0u;
      *(void *)(v14 + 240) = 0;
      *(void *)(v14 + 248) = v9;
      *(unsigned char *)(v14 + 8) = 0;
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      *(unsigned char *)(v14 + 48) = 0;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = 0;
      *(void *)(v14 + 56) = 0;
      *(void *)(v14 + 64) = 0;
      *(unsigned char *)(v14 + 88) = 0;
      *(void *)(v14 + 72) = v9;
      *(void *)(v14 + 80) = 0;
      *(void *)(v14 + 96) = 0;
      *(void *)(v14 + 104) = 0;
      *(unsigned char *)(v14 + 128) = 0;
      *(void *)(v14 + 112) = v9;
      *(void *)(v14 + 120) = 0;
      *(void *)(v14 + 136) = 0;
      *(void *)(v14 + 144) = 0;
      *(void *)(v14 + 152) = v9;
      *(unsigned char *)(v14 + 272) = 0;
      *(void *)(v14 + 264) = 0;
      *(void *)(v14 + 280) = 0;
      *(void *)(v14 + 288) = 0;
      *(void *)(v14 + 296) = v9;
      *(void *)(v14 + 304) = 0;
      *(void *)(v14 + 312) = 0;
      *(unsigned char *)(v14 + 320) = 0;
      *(_OWORD *)(v14 + 328) = 0u;
      *(_OWORD *)(v14 + 344) = 0u;
      *(_DWORD *)(v14 + 256) = 1;
      goto LABEL_8;
    }
    *(void *)(v8 + 680) = 0;
    (*(void (**)(void, void))(v8 + 48))(*(void *)(v8 + 24), *(void *)(v8 + 96));
    goto LABEL_18;
  }
LABEL_8:
  *(void *)(v8 + 680) = v14;
  *(void *)(v8 + 720) = 0;
  *(void *)(v8 + 704) = 0;
  *(void *)(v8 + 584) = 0;
  *(_DWORD *)(v8 + 896) = 0;
  *(void *)(v8 + 888) = 0;
  *(void *)(v8 + 256) = 0;
  *(void *)(v8 + 488) = 0;
  *(unsigned char *)(v8 + 900) = 33;
  *(_WORD *)(v8 + 464) = 0;
  *(void *)(v8 + 456) = 0;
  *(void *)(v8 + 824) = 0;
  *(_OWORD *)(v8 + 792) = 0u;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 752) = 0u;
  *(unsigned char *)(v8 + 768) = 0;
  *(void *)(v8 + 832) = v9;
  *(void *)(v8 + 872) = 0;
  *(_OWORD *)(v8 + 840) = 0u;
  *(_OWORD *)(v8 + 856) = 0u;
  *(void *)(v8 + 880) = v9;
  parserInit(v8, a1);
  if (a1 && !*(void *)(v8 + 456))
  {
    if (a4) {
      *(void *)(v8 + 680) = 0;
    }
    XML_ParserFree((XML_Parser)v8);
    return 0;
  }
  if (a3)
  {
    *(unsigned char *)(v8 + 464) = 1;
    *(void *)(v8 + 448) = XmlGetUtf8InternalEncodingNS();
    *(unsigned char *)(v8 + 900) = *a3;
  }
  else
  {
    *(void *)(v8 + 448) = XmlGetUtf8InternalEncoding();
  }
  return v8;
}

XML_Bool XML_ParserReset(XML_Parser parser, const XML_Char *encoding)
{
  if (parser)
  {
    XML_Parser v2 = parser;
    if (*((void *)parser + 113))
    {
      LOBYTE(parser) = 0;
      return parser;
    }
    int v4 = (void *)*((void *)parser + 87);
    if (v4)
    {
      int v5 = (void *)*((void *)parser + 88);
      do
      {
        int v6 = v4;
        int v4 = (void *)*v4;
        *int v6 = v5;
        uint64_t v7 = v6[10];
        if (v7)
        {
          uint64_t v8 = *((void *)parser + 90);
          do
          {
            uint64_t v9 = v7;
            uint64_t v7 = *(void *)(v7 + 8);
            *(void *)(v9 + 8) = v8;
            uint64_t v8 = v9;
          }
          while (v7);
          *((void *)parser + 90) = v9;
        }
        v6[10] = 0;
        int v5 = v6;
      }
      while (v4);
      *((void *)parser + 88) = v6;
    }
    uint64_t v10 = *((void *)parser + 72);
    if (v10)
    {
      uint64_t v11 = *((void *)parser + 73);
      do
      {
        uint64_t v12 = v10;
        uint64_t v10 = *(void *)(v10 + 16);
        *(void *)(v12 + 16) = v11;
        uint64_t v11 = v12;
      }
      while (v10);
      *((void *)parser + 73) = v12;
    }
    uint64_t v13 = *((void *)parser + 89);
    if (v13)
    {
      uint64_t v14 = *((void *)parser + 90);
      do
      {
        uint64_t v15 = v13;
        uint64_t v13 = *(void *)(v13 + 8);
        *(void *)(v15 + 8) = v14;
        uint64_t v14 = v15;
      }
      while (v13);
      *((void *)parser + 90) = v15;
    }
    (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *((void *)parser + 59));
    uint64_t v16 = (void (*)(void))*((void *)v2 + 62);
    if (v16) {
      v16(*((void *)v2 + 60));
    }
    uint64_t v17 = (void *)*((void *)v2 + 100);
    unint64_t v18 = (void *)*((void *)v2 + 99);
    if (v17)
    {
      if (!v18) {
        goto LABEL_28;
      }
      do
      {
        BOOL v19 = v18;
        unint64_t v18 = (void *)*v18;
        void *v19 = v17;
        uint64_t v17 = v19;
      }
      while (v18);
    }
    else
    {
      BOOL v19 = (void *)*((void *)v2 + 99);
    }
    *((void *)v2 + 100) = v19;
LABEL_28:
    *((void *)v2 + 99) = 0;
    *((void *)v2 + 101) = 0;
    *((void *)v2 + 103) = 0;
    *((void *)v2 + 102) = 0;
    unint64_t v20 = (void *)*((void *)v2 + 106);
    uint64_t v21 = (void *)*((void *)v2 + 105);
    if (v20)
    {
      if (!v21) {
        goto LABEL_34;
      }
      do
      {
        uint64_t v22 = v21;
        uint64_t v21 = (void *)*v21;
        *uint64_t v22 = v20;
        unint64_t v20 = v22;
      }
      while (v21);
    }
    else
    {
      uint64_t v22 = (void *)*((void *)v2 + 105);
    }
    *((void *)v2 + 106) = v22;
LABEL_34:
    *((void *)v2 + 105) = 0;
    *((void *)v2 + 107) = 0;
    *((void *)v2 + 109) = 0;
    *((void *)v2 + 108) = 0;
    (*((void (**)(void, void))v2 + 6))(*((void *)v2 + 3), *((void *)v2 + 57));
    *((void *)v2 + 57) = 0;
    parserInit((uint64_t)v2, (unsigned __int8 *)encoding);
    uint64_t v23 = *((void *)v2 + 85);
    uint64_t v24 = *(uint64_t **)(v23 + 40);
    if (v24) {
      uint64_t v25 = &v24[*(void *)(v23 + 56)];
    }
    else {
      uint64_t v25 = 0;
    }
    while (v24 != v25)
    {
      uint64_t v27 = *v24++;
      uint64_t v26 = v27;
      if (v27 && *(_DWORD *)(v26 + 28)) {
        (*((void (**)(void, void))v2 + 6))(*((void *)v2 + 3), *(void *)(v26 + 32));
      }
    }
    hashTableClear(v23);
    *(unsigned char *)(v23 + 259) = 0;
    hashTableClear(v23 + 264);
    hashTableClear(v23 + 40);
    hashTableClear(v23 + 80);
    hashTableClear(v23 + 120);
    unint64_t v29 = *(void **)(v23 + 160);
    int8x16_t v28 = *(void **)(v23 + 168);
    if (v28)
    {
      if (!v29) {
        goto LABEL_47;
      }
      do
      {
        int v30 = v29;
        unint64_t v29 = (void *)*v29;
        *int v30 = v28;
        int8x16_t v28 = v30;
      }
      while (v29);
    }
    else
    {
      int v30 = *(void **)(v23 + 160);
    }
    *(void *)(v23 + 168) = v30;
LABEL_47:
    *(void *)(v23 + 160) = 0;
    *(void *)(v23 + 184) = 0;
    *(void *)(v23 + 192) = 0;
    *(void *)(v23 + 176) = 0;
    int8x16_t v32 = *(void **)(v23 + 208);
    uint64_t v31 = *(void **)(v23 + 216);
    if (v31)
    {
      if (!v32)
      {
LABEL_53:
        *(void *)(v23 + 208) = 0;
        *(void *)(v23 + 232) = 0;
        *(void *)(v23 + 240) = 0;
        *(void *)(v23 + 224) = 0;
        *(void *)(v23 + 304) = 0;
        *(void *)(v23 + 312) = 0;
        *(unsigned char *)(v23 + 320) = 0;
        (*((void (**)(void, void))v2 + 6))(*((void *)v2 + 3), *(void *)(v23 + 352));
        *(void *)(v23 + 352) = 0;
        (*((void (**)(void, void))v2 + 6))(*((void *)v2 + 3), *(void *)(v23 + 328));
        *(void *)(v23 + 328) = 0;
        *(void *)(v23 + 336) = 0;
        *(void *)(v23 + 344) = 0;
        LOBYTE(parser) = 1;
        *(_WORD *)(v23 + 256) = 1;
        *(unsigned char *)(v23 + 258) = 0;
        return parser;
      }
      do
      {
        int v33 = v32;
        int8x16_t v32 = (void *)*v32;
        *int v33 = v31;
        uint64_t v31 = v33;
      }
      while (v32);
    }
    else
    {
      int v33 = *(void **)(v23 + 208);
    }
    *(void *)(v23 + 216) = v33;
    goto LABEL_53;
  }
  return parser;
}

char *parserInit(uint64_t a1, unsigned __int8 *a2)
{
  *(void *)(a1 + 536) = prologInitProcessor;
  v4.n128_f64[0] = XmlPrologStateInit(a1 + 504);
  if (a2)
  {
    size_t v5 = 0;
    while (a2[v5++])
      ;
    uint64_t v7 = (void *)(*(uint64_t (**)(void, size_t, __n128))(a1 + 32))(*(void *)(a1 + 24), v5, v4);
    uint64_t v8 = v7;
    if (v7) {
      memcpy(v7, a2, v5);
    }
    *(void *)(a1 + 456) = v8;
  }
  *(void *)(a1 + 688) = 0;
  XmlInitEncoding(a1 + 304, (void *)(a1 + 296), 0);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = a1;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 658) = 0u;
  *(unsigned char *)(a1 + 592) = 1;
  *(_DWORD *)(a1 + 596) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 732) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 912) = 0;
  *(_WORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 924) = 0u;
  *(_OWORD *)(a1 + 940) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_DWORD *)(a1 + 952) = getDebugLevel("EXPAT_ACCOUNTING_DEBUG");
  *(_DWORD *)(a1 + 956) = 1120403456;
  *(void *)(a1 + 960) = 0x800000;
  *(_OWORD *)(a1 + 968) = 0u;
  uint64_t result = getDebugLevel("EXPAT_ENTITY_DEBUG");
  *(_DWORD *)(a1 + 980) = result;
  return result;
}

XML_Status XML_SetEncoding(XML_Parser parser, const XML_Char *encoding)
{
  if (parser)
  {
    XML_Parser v2 = parser;
    if ((*((_DWORD *)parser + 228) | 2) == 3)
    {
      LODWORD(parser) = 0;
      return parser;
    }
    (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *((void *)parser + 57));
    if (encoding)
    {
      size_t v4 = 0;
      while (encoding[v4++])
        ;
      parser = (XML_Parser)(*((uint64_t (**)(void, size_t))v2 + 4))(*((void *)v2 + 3), v4);
      XML_Parser v6 = parser;
      if (!parser) {
        goto LABEL_11;
      }
      memcpy(parser, encoding, v4);
    }
    else
    {
      XML_Parser v6 = 0;
    }
    LODWORD(parser) = 1;
LABEL_11:
    *((void *)v2 + 57) = v6;
  }
  return parser;
}

uint64_t setContext(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = 1;
  if (*a2)
  {
    uint64_t v3 = a2;
    size_t v5 = (uint64_t *)(a1 + 792);
    XML_Parser v6 = *(uint64_t **)(a1 + 680);
    uint64_t v7 = (uint64_t *)(a1 + 712);
    uint64_t v8 = a2;
    while (1)
    {
      int v9 = *v3;
      if (!*v3) {
        break;
      }
      if (v9 == 61)
      {
        uint64_t v12 = *(unsigned char **)(a1 + 816);
        uint64_t v13 = v6 + 38;
        if (v12 == *(unsigned char **)(a1 + 824)) {
          goto LABEL_28;
        }
        if (v12 == *(unsigned char **)(a1 + 808))
        {
          if (!poolGrow(v5)) {
            return 0;
          }
          uint64_t v12 = *(unsigned char **)(a1 + 816);
        }
        *(void *)(a1 + 816) = v12 + 1;
        unsigned char *v12 = 0;
        uint64_t v14 = (char **)lookup(a1, v6 + 15, *(char **)(a1 + 824), 0x10uLL);
        if (!v14) {
          return 0;
        }
        uint64_t v13 = v14;
        uint64_t v15 = *(char **)(a1 + 824);
        if (*v14 == v15)
        {
          uint64_t v16 = poolCopyString(v6 + 20, *v14);
          void *v13 = v16;
          if (!v16) {
            return 0;
          }
          uint64_t v15 = *(char **)(a1 + 824);
        }
        *(void *)(a1 + 816) = v15;
LABEL_28:
        while (1)
        {
          int v19 = *++v3;
          int v18 = v19;
          if (!v19 || v18 == 12) {
            break;
          }
          uint64_t v17 = *(unsigned char **)(a1 + 816);
          if (v17 == *(unsigned char **)(a1 + 808))
          {
            if (!poolGrow(v5)) {
              return 0;
            }
            LOBYTE(v18) = *v3;
            uint64_t v17 = *(unsigned char **)(a1 + 816);
          }
          *(void *)(a1 + 816) = v17 + 1;
          *uint64_t v17 = v18;
        }
        uint64_t v21 = *(unsigned char **)(a1 + 816);
        if (v21 == *(unsigned char **)(a1 + 808))
        {
          if (!poolGrow(v5)) {
            return 0;
          }
          uint64_t v21 = *(unsigned char **)(a1 + 816);
        }
        *(void *)(a1 + 816) = v21 + 1;
        unsigned char *v21 = 0;
        if (addBinding(a1, v13, 0, *(unsigned __int8 **)(a1 + 824), v7)) {
          return 0;
        }
        *(void *)(a1 + 816) = *(void *)(a1 + 824);
        if (*v3) {
          uint64_t v8 = v3 + 1;
        }
        else {
          uint64_t v8 = v3;
        }
        goto LABEL_40;
      }
      if (v9 == 12) {
        break;
      }
      uint64_t v22 = *(unsigned char **)(a1 + 816);
      if (v22 == *(unsigned char **)(a1 + 808))
      {
        if (!poolGrow(v5)) {
          return 0;
        }
        LOBYTE(v9) = *v3;
        uint64_t v22 = *(unsigned char **)(a1 + 816);
      }
      *(void *)(a1 + 816) = v22 + 1;
      *uint64_t v22 = v9;
      ++v3;
LABEL_45:
      if (!*v8) {
        return 1;
      }
    }
    uint64_t v10 = *(unsigned char **)(a1 + 816);
    if (v10 == *(unsigned char **)(a1 + 808))
    {
      if (!poolGrow(v5)) {
        return 0;
      }
      uint64_t v10 = *(unsigned char **)(a1 + 816);
    }
    *(void *)(a1 + 816) = v10 + 1;
    *uint64_t v10 = 0;
    uint64_t v11 = lookup(a1, v6, *(char **)(a1 + 824), 0);
    if (v11) {
      *((unsigned char *)v11 + 56) = 1;
    }
    if (*v3) {
      uint64_t v8 = v3 + 1;
    }
    else {
      uint64_t v8 = v3;
    }
    *(void *)(a1 + 816) = *(void *)(a1 + 824);
LABEL_40:
    uint64_t v3 = v8;
    goto LABEL_45;
  }
  return v2;
}

void XML_ParserFree(XML_Parser parser)
{
  if (parser)
  {
    uint64_t v2 = (void *)*((void *)parser + 87);
    if (v2) {
      goto LABEL_5;
    }
    while (1)
    {
      uint64_t v2 = (void *)*((void *)parser + 88);
      if (!v2) {
        break;
      }
      *((void *)parser + 88) = 0;
      do
      {
LABEL_5:
        uint64_t v3 = (void *)*v2;
        (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), v2[8]);
        uint64_t v4 = v2[10];
        if (v4)
        {
          do
          {
            uint64_t v5 = *(void *)(v4 + 8);
            (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *(void *)(v4 + 32));
            (*((void (**)(void, uint64_t))parser + 6))(*((void *)parser + 3), v4);
            uint64_t v4 = v5;
          }
          while (v5);
        }
        (*((void (**)(void, void *))parser + 6))(*((void *)parser + 3), v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    uint64_t v6 = *((void *)parser + 72);
    if (v6) {
      goto LABEL_12;
    }
    while (1)
    {
      uint64_t v6 = *((void *)parser + 73);
      if (!v6) {
        break;
      }
      *((void *)parser + 73) = 0;
      do
      {
LABEL_12:
        uint64_t v7 = *(void *)(v6 + 16);
        (*((void (**)(void))parser + 6))(*((void *)parser + 3));
        uint64_t v6 = v7;
      }
      while (v7);
    }
    uint64_t v8 = *((void *)parser + 90);
    if (v8)
    {
      do
      {
        uint64_t v9 = *(void *)(v8 + 8);
        (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *(void *)(v8 + 32));
        (*((void (**)(void, uint64_t))parser + 6))(*((void *)parser + 3), v8);
        uint64_t v8 = v9;
      }
      while (v9);
    }
    uint64_t v10 = *((void *)parser + 89);
    if (v10)
    {
      do
      {
        uint64_t v11 = *(void *)(v10 + 8);
        (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *(void *)(v10 + 32));
        (*((void (**)(void, uint64_t))parser + 6))(*((void *)parser + 3), v10);
        uint64_t v10 = v11;
      }
      while (v11);
    }
    poolDestroy((void **)parser + 99);
    poolDestroy((void **)parser + 105);
    (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *((void *)parser + 57));
    if (!*((unsigned char *)parser + 920))
    {
      uint64_t v12 = *((void *)parser + 85);
      if (v12)
      {
        uint64_t v13 = *(uint64_t **)(v12 + 40);
        if (v13) {
          uint64_t v14 = &v13[*(void *)(v12 + 56)];
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *((void *)parser + 113);
        while (v13 != v14)
        {
          uint64_t v17 = *v13++;
          uint64_t v16 = v17;
          if (v17 && *(_DWORD *)(v16 + 28)) {
            (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *(void *)(v16 + 32));
          }
        }
        hashTableDestroy((uint64_t *)v12);
        hashTableDestroy((uint64_t *)(v12 + 264));
        hashTableDestroy((uint64_t *)(v12 + 40));
        hashTableDestroy((uint64_t *)(v12 + 80));
        hashTableDestroy((uint64_t *)(v12 + 120));
        poolDestroy((void **)(v12 + 160));
        poolDestroy((void **)(v12 + 208));
        if (!v15)
        {
          (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *(void *)(v12 + 352));
          (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *(void *)(v12 + 328));
        }
        (*((void (**)(void, uint64_t))parser + 6))(*((void *)parser + 3), v12);
      }
    }
    (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *((void *)parser + 93));
    (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *((void *)parser + 111));
    (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *((void *)parser + 2));
    (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *((void *)parser + 12));
    (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *((void *)parser + 94));
    (*((void (**)(void, void))parser + 6))(*((void *)parser + 3), *((void *)parser + 59));
    int v18 = (void (*)(void))*((void *)parser + 62);
    if (v18) {
      v18(*((void *)parser + 60));
    }
    int v19 = (void (*)(uint64_t, XML_Parser))*((void *)parser + 6);
    uint64_t v20 = *((void *)parser + 3);
    v19(v20, parser);
  }
}

void **poolDestroy(void **result)
{
  int v1 = result;
  uint64_t v2 = *result;
  if (*result)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t result = (void **)((uint64_t (*)(void))v1[5][3])(*v1[5]);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = v1[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      uint64_t result = (void **)((uint64_t (*)(void))v1[5][3])(*v1[5]);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  return result;
}

void XML_SetUserData(XML_Parser parser, void *userData)
{
  if (parser)
  {
    uint64_t v3 = *(void *)parser;
    uint64_t v2 = *((void *)parser + 1);
    *(void *)parser = userData;
    if (v2 == v3) {
      *((void *)parser + 1) = userData;
    }
  }
}

uint64_t poolCopyString(uint64_t *a1, char *a2)
{
  while (1)
  {
    uint64_t v4 = (unsigned char *)a1[3];
    if (v4 == (unsigned char *)a1[2]) {
      break;
    }
LABEL_4:
    char v5 = *a2;
    a1[3] = (uint64_t)(v4 + 1);
    *uint64_t v4 = v5;
    if (!*a2++)
    {
      uint64_t result = a1[4];
      a1[4] = a1[3];
      return result;
    }
  }
  if (poolGrow(a1))
  {
    uint64_t v4 = (unsigned char *)a1[3];
    goto LABEL_4;
  }
  return 0;
}

void XML_SetElementHandler(XML_Parser parser, XML_StartElementHandler start, XML_EndElementHandler end)
{
  if (parser)
  {
    *((void *)parser + 14) = start;
    *((void *)parser + 15) = end;
  }
}

void XML_SetCharacterDataHandler(XML_Parser parser, XML_CharacterDataHandler handler)
{
  if (parser) {
    *((void *)parser + 16) = handler;
  }
}

void XML_SetNamespaceDeclHandler(XML_Parser parser, XML_StartNamespaceDeclHandler start, XML_EndNamespaceDeclHandler end)
{
  if (parser)
  {
    *((void *)parser + 26) = start;
    *((void *)parser + 27) = end;
  }
}

void XML_SetUnknownEncodingHandler(XML_Parser parser, XML_UnknownEncodingHandler handler, void *encodingHandlerData)
{
  if (parser)
  {
    *((void *)parser + 32) = handler;
    *((void *)parser + 61) = encodingHandlerData;
  }
}

void XML_SetXmlDeclHandler(XML_Parser parser, XML_XmlDeclHandler xmldecl)
{
  if (parser) {
    *((void *)parser + 36) = xmldecl;
  }
}

XML_Status XML_Parse(XML_Parser parser, const char *s, int len, int isFinal)
{
  if (!parser || len < 0)
  {
    if (!parser)
    {
      LODWORD(Buffer) = 0;
      return Buffer;
    }
    goto LABEL_10;
  }
  if (!s && len)
  {
LABEL_10:
    LODWORD(Buffer) = 0;
    int v10 = 41;
    goto LABEL_11;
  }
  int v8 = *((_DWORD *)parser + 228);
  if (v8)
  {
    if (v8 == 2)
    {
      LODWORD(Buffer) = 0;
      int v10 = 36;
      goto LABEL_11;
    }
    if (v8 == 3)
    {
      LODWORD(Buffer) = 0;
      int v10 = 33;
LABEL_11:
      *((_DWORD *)parser + 136) = v10;
      return Buffer;
    }
  }
  else if (!*((void *)parser + 113))
  {
    LODWORD(Buffer) = startParsing((uint64_t)parser);
    if (!Buffer)
    {
      int v10 = 1;
      goto LABEL_11;
    }
  }
  *((_DWORD *)parser + 228) = 1;
  if (!len)
  {
    *((unsigned char *)parser + 916) = isFinal;
    if (isFinal)
    {
      *((void *)parser + 71) = *((void *)parser + 7);
      *((void *)parser + 11) = *((void *)parser + 8);
      int v11 = (*((uint64_t (**)(XML_Parser))parser + 67))(parser);
      *((_DWORD *)parser + 136) = v11;
      if (v11)
      {
        LODWORD(Buffer) = 0;
        *((void *)parser + 70) = *((void *)parser + 69);
        *((void *)parser + 67) = errorProcessor;
        return Buffer;
      }
      unsigned int v12 = *((_DWORD *)parser + 228);
      if (v12 >= 2)
      {
        if (v12 == 3)
        {
          (*(void (**)(void))(*((void *)parser + 37) + 96))();
          *((void *)parser + 71) = *((void *)parser + 7);
          LODWORD(Buffer) = 2;
          return Buffer;
        }
      }
      else
      {
        *((_DWORD *)parser + 228) = 2;
      }
    }
    LODWORD(Buffer) = 1;
    return Buffer;
  }
  Buffer = XML_GetBuffer(parser, len);
  if (Buffer)
  {
    memcpy(Buffer, s, len);
    LODWORD(Buffer) = XML_ParseBuffer(parser, len, isFinal);
  }
  return Buffer;
}

uint64_t startParsing(uint64_t a1)
{
  if (!*(void *)(a1 + 928))
  {
    __std::string buf = 0;
    arc4random_buf(&__buf, 8uLL);
    *(void *)(a1 + 928) = __buf;
  }
  if (*(unsigned char *)(a1 + 464)) {
    return setContext(a1, "xml=http://www.w3.org/XML/1998/namespace");
  }
  else {
    return 1;
  }
}

uint64_t errorProcessor(uint64_t a1)
{
  return *(unsigned int *)(a1 + 544);
}

void *__cdecl XML_GetBuffer(void *parser, int len)
{
  if (parser)
  {
    uint64_t v2 = (char *)parser;
    if (len < 0)
    {
LABEL_28:
      parser = 0;
LABEL_29:
      int v4 = 1;
      goto LABEL_30;
    }
    int v3 = *((_DWORD *)parser + 228);
    if (v3 == 2)
    {
      parser = 0;
      int v4 = 36;
      goto LABEL_30;
    }
    if (v3 == 3)
    {
      parser = 0;
      int v4 = 33;
LABEL_30:
      *((_DWORD *)v2 + 136) = v4;
      return parser;
    }
    uint64_t v5 = *((void *)parser + 9);
    if (v5)
    {
      uint64_t v6 = *((void *)parser + 8);
      uint64_t v7 = v6 ? v5 - v6 : 0;
    }
    else
    {
      uint64_t v7 = 0;
    }
    parser = (void *)*((void *)parser + 8);
    if (v7 < len)
    {
      if (parser)
      {
        uint64_t v8 = *((void *)v2 + 7);
        if (v8) {
          int v9 = parser - v8;
        }
        else {
          int v9 = 0;
        }
      }
      else
      {
        int v9 = 0;
      }
      int v10 = v9 + len;
      if (v9 + len < 0) {
        goto LABEL_28;
      }
      uint64_t v11 = *((void *)v2 + 7);
      if (v11)
      {
        uint64_t v12 = *((void *)v2 + 2);
        int v13 = v12 ? v11 - v12 : 0;
      }
      else
      {
        int v13 = 0;
      }
      int v14 = v13 >= 1024 ? 1024 : v13;
      if (v14 > (v10 ^ 0x7FFFFFFF)) {
        goto LABEL_28;
      }
      int v15 = v14 + v10;
      if (v5)
      {
        uint64_t v16 = *((void *)v2 + 2);
        if (v16) {
          uint64_t v17 = v5 - v16;
        }
        else {
          uint64_t v17 = 0;
        }
        if (v17 < v15)
        {
          if (v11)
          {
            LODWORD(v18) = v5 - v11;
            if (v5 != v11)
            {
              do
LABEL_42:
                uint64_t v18 = (2 * v18);
              while ((int)v18 < v15 && (int)v18 > 0);
              if ((int)v18 <= 0) {
                goto LABEL_28;
              }
              parser = (void *)(*((uint64_t (**)(void, uint64_t))v2 + 4))(*((void *)v2 + 3), v18);
              if (!parser) {
                goto LABEL_29;
              }
              uint64_t v20 = (char *)parser;
              *((void *)v2 + 9) = (char *)parser + v18;
              uint64_t v21 = *((void *)v2 + 7);
              if (v21)
              {
                uint64_t v22 = (const void *)(v21 - v14);
                uint64_t v23 = *((void *)v2 + 8);
                uint64_t v24 = v23 - v21;
                if (!v23) {
                  uint64_t v24 = 0;
                }
                memcpy(parser, v22, v24 + v14);
                (*((void (**)(void, void))v2 + 6))(*((void *)v2 + 3), *((void *)v2 + 2));
                *((void *)v2 + 2) = v20;
                uint64_t v25 = *((void *)v2 + 8);
                if (v25)
                {
                  uint64_t v26 = *((void *)v2 + 7);
                  v25 -= v26;
                  if (!v26) {
                    uint64_t v25 = 0;
                  }
                }
                v20 += v14;
                parser = &v20[v25];
                *((void *)v2 + 8) = &v20[v25];
              }
              else
              {
                *((void *)v2 + 8) = parser;
                *((void *)v2 + 2) = parser;
              }
              goto LABEL_68;
            }
          }
LABEL_41:
          LODWORD(v18) = 1024;
          goto LABEL_42;
        }
      }
      else if (v15 > 0)
      {
        goto LABEL_41;
      }
      if (v11)
      {
        uint64_t v27 = (char *)*((void *)v2 + 2);
        int v28 = v11 - v27;
        if (v27) {
          uint64_t v29 = v11 - (void)v27;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v29 <= v14) {
          goto LABEL_69;
        }
        if (!v27) {
          int v28 = 0;
        }
      }
      else
      {
        if ((v14 & 0x80000000) == 0)
        {
LABEL_69:
          *((void *)v2 + 71) = 0;
          *(_OWORD *)(v2 + 552) = 0u;
          return parser;
        }
        uint64_t v11 = 0;
        int v28 = 0;
        uint64_t v27 = (char *)*((void *)v2 + 2);
      }
      uint64_t v30 = v28 - (uint64_t)v14;
      memmove(v27, &v27[v30], (size_t)parser + v14 - v11);
      uint64_t v31 = *((void *)v2 + 7);
      parser = (void *)(*((void *)v2 + 8) - v30);
      *((void *)v2 + 8) = parser;
      uint64_t v20 = (char *)(v31 - v30);
LABEL_68:
      *((void *)v2 + 7) = v20;
      goto LABEL_69;
    }
  }
  return parser;
}

XML_Status XML_ParseBuffer(XML_Parser parser, int len, int isFinal)
{
  if (parser)
  {
    int v6 = *((_DWORD *)parser + 228);
    if (v6)
    {
      if (v6 == 2)
      {
        XML_Status v7 = XML_STATUS_ERROR;
        int v8 = 36;
        goto LABEL_22;
      }
      if (v6 == 3)
      {
        XML_Status v7 = XML_STATUS_ERROR;
        int v8 = 33;
LABEL_22:
        *((_DWORD *)parser + 136) = v8;
        return v7;
      }
    }
    else
    {
      if (!*((void *)parser + 7))
      {
        XML_Status v7 = XML_STATUS_ERROR;
        int v8 = 42;
        goto LABEL_22;
      }
      if (!*((void *)parser + 113) && !startParsing((uint64_t)parser))
      {
        XML_Status v7 = XML_STATUS_ERROR;
        int v8 = 1;
        goto LABEL_22;
      }
    }
    *((_DWORD *)parser + 228) = 1;
    *((void *)parser + 71) = *((void *)parser + 7);
    uint64_t v9 = *((void *)parser + 8) + len;
    *((void *)parser + 8) = v9;
    *((void *)parser + 10) += len;
    *((void *)parser + 11) = v9;
    *((unsigned char *)parser + 916) = isFinal;
    int v10 = (*((uint64_t (**)(XML_Parser))parser + 67))(parser);
    *((_DWORD *)parser + 136) = v10;
    if (v10)
    {
      XML_Status v7 = XML_STATUS_ERROR;
      *((void *)parser + 70) = *((void *)parser + 69);
      *((void *)parser + 67) = errorProcessor;
      return v7;
    }
    unsigned int v11 = *((_DWORD *)parser + 228);
    if (v11 >= 2)
    {
      if (v11 == 3)
      {
        XML_Status v7 = XML_STATUS_SUSPENDED;
LABEL_20:
        (*(void (**)(void))(*((void *)parser + 37) + 96))();
        *((void *)parser + 71) = *((void *)parser + 7);
        return v7;
      }
    }
    else if (isFinal)
    {
      *((_DWORD *)parser + 228) = 2;
      return 1;
    }
    XML_Status v7 = XML_STATUS_OK;
    goto LABEL_20;
  }
  return 0;
}

XML_Error XML_GetErrorCode(XML_Parser parser)
{
  if (parser) {
    return *((_DWORD *)parser + 136);
  }
  else {
    return 41;
  }
}

XML_Index XML_GetCurrentByteIndex(XML_Parser parser)
{
  if (parser && (uint64_t v1 = *((void *)parser + 69)) != 0) {
    return *((void *)parser + 10) + v1 - *((void *)parser + 11);
  }
  else {
    return -1;
  }
}

XML_Size XML_GetCurrentLineNumber(XML_Size parser)
{
  if (parser)
  {
    uint64_t v1 = (void *)parser;
    unint64_t v2 = *(void *)(parser + 552);
    if (v2)
    {
      if (v2 >= *(void *)(parser + 568))
      {
        (*(void (**)(void))(*(void *)(parser + 296) + 96))();
        v1[71] = v1[69];
      }
    }
    return v1[97] + 1;
  }
  return parser;
}

uint64_t reportDefault(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a3;
  if (*(unsigned char *)(a2 + 132))
  {
    int v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))a1[21];
    uint64_t v7 = a1[1];
    uint64_t v9 = (a4 - a3);
    return v6(v7, a3, v9);
  }
  else
  {
    if (a1[37] == a2)
    {
      uint64_t v12 = a1 + 69;
      int v13 = a1 + 70;
    }
    else
    {
      uint64_t v12 = (void *)a1[72];
      int v13 = v12 + 1;
    }
    do
    {
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[12];
      unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(a2 + 112))(a2, &v17, a4, &v16, v14);
      void *v13 = v17;
      uint64_t result = ((uint64_t (*)(void, void, void))a1[21])(a1[1], a1[12], v16 - a1[12]);
      void *v12 = v17;
    }
    while (v15 > 1);
  }
  return result;
}

const XML_LChar *__cdecl XML_ErrorString(XML_Error code)
{
  if (code - 1 > 0x2A) {
    return 0;
  }
  else {
    return off_264105740[code - 1];
  }
}

uint64_t prologInitProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = initializeEncoding(a1);
  if (!result)
  {
    *(void *)(a1 + 536) = prologProcessor;
    return prologProcessor(a1, a2, a3, a4);
  }
  return result;
}

char *getDebugLevel(const char *a1)
{
  uint64_t v1 = getenv(a1);
  if (v1)
  {
    *__error() = 0;
    __endptr = v1;
    uint64_t v1 = (char *)strtoul(v1, &__endptr, 10);
    if (*__error() || *__endptr)
    {
      uint64_t v1 = 0;
      *__error() = 0;
    }
  }
  return v1;
}

uint64_t initializeEncoding(uint64_t a1)
{
  unint64_t v2 = XmlInitEncodingNS;
  if (!*(unsigned char *)(a1 + 464)) {
    unint64_t v2 = XmlInitEncoding;
  }
  if (v2(a1 + 304, (void *)(a1 + 296), *(unsigned __int8 **)(a1 + 456))) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 456);
  return handleUnknownEncoding(a1, v4);
}

uint64_t prologProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v8 = (**(uint64_t (***)(void))(a1 + 296))();
  return doProlog((void *)a1, *(void *)(a1 + 296), a2, a3, v8, v10, a4, *(unsigned char *)(a1 + 916) == 0, 1, 0);
}

uint64_t handleUnknownEncoding(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int (**)(void, uint64_t, unsigned char *))(a1 + 256);
  if (!v2) {
    return 18;
  }
  memset(__b, 255, sizeof(__b));
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  if (!v2(*(void *)(a1 + 488), a2, __b))
  {
LABEL_8:
    if (v16) {
      v16(v14);
    }
    return 18;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(uint64_t (**)(uint64_t, void))(a1 + 32);
  int v7 = XmlSizeOfUnknownEncoding();
  uint64_t v8 = v6(v5, v7);
  *(void *)(a1 + 472) = v8;
  if (v8)
  {
    uint64_t v9 = (uint64_t (*)(void))XmlInitUnknownEncodingNS;
    if (!*(unsigned char *)(a1 + 464)) {
      uint64_t v9 = (uint64_t (*)(void))XmlInitUnknownEncoding;
    }
    uint64_t v10 = v9();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t result = 0;
      *(void *)(a1 + 480) = v14;
      *(void *)(a1 + 496) = v16;
      *(void *)(a1 + 296) = v11;
      return result;
    }
    goto LABEL_8;
  }
  if (v16) {
    v16(v14);
  }
  return 1;
}

uint64_t doProlog(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, char a9, int a10)
{
  uint64_t v13 = a2;
  uint64_t v14 = (uint64_t)a1;
  uint64_t v172 = a6;
  uint64_t v15 = a1[85];
  if (a1[37] == a2)
  {
    unsigned int v170 = a1 + 69;
    uint64_t v16 = a1 + 70;
  }
  else
  {
    unsigned int v170 = (uint64_t *)a1[72];
    uint64_t v16 = v170 + 1;
  }
  unsigned int v171 = v16;
  uint64_t v17 = (unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 63);
  int v163 = (uint64_t *)(v15 + 264);
  char v164 = a1 + 80;
  int v168 = a1 + 99;
  int v166 = (uint64_t *)(v15 + 160);
  int v167 = a1 + 101;
  while (2)
  {
    *unsigned int v170 = a3;
    uint64_t v18 = v172;
    *unsigned int v171 = v172;
    if ((int)a5 <= 0)
    {
      if (a8 && a5)
      {
LABEL_358:
        uint64_t v19 = 0;
        *a7 = a3;
        return v19;
      }
      if (a5 != -15)
      {
        uint64_t v19 = 5;
        switch((int)a5)
        {
          case -4:
            if (v13 == *(void *)(v14 + 296))
            {
              if (!*(unsigned char *)(v14 + 920)) {
                return 3;
              }
            }
            else if (!*(unsigned char *)(*(void *)(v14 + 576) + 36))
            {
              goto LABEL_358;
            }
            if ((*v17)(v14 + 504, 4294967292, a4, a4, v13) != -1) {
              goto LABEL_358;
            }
            uint64_t v19 = 29;
            break;
          case -2:
            return 6;
          case -1:
            return v19;
          case 0:
            *unsigned int v170 = v18;
            return 4;
          default:
            a5 = -(int)a5;
            uint64_t v172 = a4;
            uint64_t v18 = a4;
            goto LABEL_12;
        }
        return v19;
      }
      a5 = 15;
    }
LABEL_12:
    unsigned int v20 = (*v17)(v14 + 504, a5, a3, v18, v13);
    BOOL v21 = v20 > 0x39 || ((1 << v20) & 0x200000000000006) == 0;
    if (v21 && !accountingDiffTolerated(v14, a5, a3, v172, a10)) {
      return 43;
    }
    int v22 = 0;
    int v23 = 1;
    switch(v20)
    {
      case 0xFFFFFFFF:
        if (a5 == 12) {
          unsigned int v158 = 17;
        }
        else {
          unsigned int v158 = 2;
        }
        if (a5 == 28) {
          return 10;
        }
        else {
          return v158;
        }
      case 0u:
        if (a5 != 14) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 1u:
        uint64_t v53 = v172;
        uint64_t v54 = v14;
        uint64_t v55 = 0;
        goto LABEL_255;
      case 2u:
        if (!*(unsigned char *)(v14 + 921)) {
          goto LABEL_390;
        }
        char v159 = *(unsigned char *)(v15 + 257);
        *(unsigned char *)(v15 + 257) = 1;
        if (!*(_DWORD *)(v14 + 924) || !*(void *)(v14 + 232)) {
          goto LABEL_390;
        }
        uint64_t v160 = lookup(v14, v163, "#", 0x40uLL);
        if (!v160) {
          return 1;
        }
        *((void *)v160 + 4) = *(void *)(v14 + 688);
        *(unsigned char *)(v15 + 259) = 0;
        if (!(*(unsigned int (**)(void, void))(v14 + 232))(*(void *)(v14 + 240), 0)) {
          return 21;
        }
        if (*(unsigned char *)(v15 + 259))
        {
          if (!*(unsigned char *)(v15 + 258))
          {
            int v161 = *(unsigned int (**)(void))(v14 + 224);
            if (v161)
            {
              if (!v161(*(void *)(v14 + 8))) {
                return 22;
              }
            }
          }
        }
        else
        {
          *(unsigned char *)(v15 + 257) = v159;
        }
LABEL_390:
        *(void *)(v14 + 536) = contentProcessor;
        return contentProcessor(v14, a3, a4, a7);
      case 3u:
        if (!*(void *)(v14 + 176)) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 4u:
        if (!*(void *)(v14 + 176)) {
          goto LABEL_98;
        }
        uint64_t v56 = poolStoreString(v168, v13, a3, v172);
        *(void *)(v14 + 608) = v56;
        if (!v56) {
          return 1;
        }
        int v23 = 0;
        *(void *)(v14 + 824) = *(void *)(v14 + 816);
        *(void *)(v14 + 624) = 0;
LABEL_98:
        *(void *)(v14 + 616) = 0;
        goto LABEL_340;
      case 5u:
        *(unsigned char *)(v14 + 921) = 0;
        *(unsigned char *)(v15 + 257) = 1;
        if (*(void *)(v14 + 176))
        {
          uint64_t v57 = poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
          *(void *)(v14 + 616) = v57;
          if (!v57) {
            return 1;
          }
          int v23 = 0;
          *(void *)(v14 + 824) = *(void *)(v14 + 816);
        }
        else
        {
          *(void *)(v14 + 616) = "#";
        }
        if (!*(unsigned char *)(v15 + 258) && !*(_DWORD *)(v14 + 924))
        {
          int v135 = *(unsigned int (**)(void))(v14 + 224);
          if (v135)
          {
            if (!v135(*(void *)(v14 + 8))) {
              return 22;
            }
          }
        }
        if (*(void *)(v14 + 600)) {
          goto LABEL_277;
        }
        int v136 = lookup(v14, v163, "#", 0x40uLL);
        *(void *)(v14 + 600) = v136;
        if (!v136) {
          return 1;
        }
        *((void *)v136 + 5) = 0;
LABEL_277:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 600)) {
          goto LABEL_340;
        }
        uint64_t v137 = poolStoreString(v166, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        uint64_t v138 = *(void *)(v14 + 600);
        *(void *)(v138 + 24) = v137;
        if (!v137) {
          return 1;
        }
        *(void *)(v138 + 32) = *(void *)(v14 + 688);
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        if (v20 == 13) {
          goto LABEL_281;
        }
        goto LABEL_340;
      case 6u:
        *(unsigned char *)(v14 + 921) = 0;
        int v58 = lookup(v14, v163, "#", 0x40uLL);
        *(void *)(v14 + 600) = v58;
        uint64_t v19 = 1;
        if (!v58) {
          return v19;
        }
        *(unsigned char *)(v15 + 257) = 1;
        if (*(void *)(v14 + 176))
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v13 + 104))(v13, a3, v172, v170)) {
            return 32;
          }
          int v59 = (unsigned char *)poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
          if (!v59) {
            return v19;
          }
          int v60 = v59;
          normalizePublicId(v59);
          int v23 = 0;
          *(void *)(v14 + 824) = *(void *)(v14 + 816);
          *(void *)(v14 + 624) = v60;
        }
        else
        {
LABEL_107:
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v13 + 104))(v13, a3, v172, v170)) {
            return 32;
          }
        }
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 600)) {
          goto LABEL_340;
        }
        int v61 = (unsigned char *)poolStoreString(v166, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v61) {
          return 1;
        }
        int v62 = v61;
        normalizePublicId(v61);
        *(void *)(*(void *)(v14 + 600) + 40) = v62;
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        if (v20 != 14) {
          goto LABEL_340;
        }
LABEL_281:
        if (!*(void *)(v14 + 280)) {
          goto LABEL_340;
        }
        goto LABEL_343;
      case 7u:
        int v63 = *(void (**)(void, void, void, void, uint64_t))(v14 + 176);
        if (!v63) {
          goto LABEL_341;
        }
        v63(*(void *)(v14 + 8), *(void *)(v14 + 608), *(void *)(v14 + 616), *(void *)(v14 + 624), 1);
        *(void *)(v14 + 608) = 0;
        int v64 = *(void **)(v14 + 800);
        int v44 = *(void **)(v14 + 792);
        if (!v64) {
          goto LABEL_266;
        }
        if (!v44) {
          goto LABEL_268;
        }
        do
        {
          int v45 = v44;
          int v44 = (void *)*v44;
          *int v45 = v64;
          int v64 = v45;
        }
        while (v44);
        goto LABEL_267;
      case 8u:
        if (a9 != 1) {
          return 4;
        }
        uint64_t v65 = *(void *)(v14 + 608);
        if (!v65) {
          goto LABEL_306;
        }
        (*(void (**)(void, uint64_t, void, void, void))(v14 + 176))(*(void *)(v14 + 8), v65, *(void *)(v14 + 616), *(void *)(v14 + 624), 0);
        int v66 = *(void **)(v14 + 800);
        int v67 = *(void **)(v14 + 792);
        if (v66)
        {
          if (!v67) {
            goto LABEL_305;
          }
          do
          {
            int v68 = v67;
            int v67 = (void *)*v67;
            *int v68 = v66;
            int v66 = v68;
          }
          while (v67);
        }
        else
        {
          int v68 = *(void **)(v14 + 792);
        }
        *(void *)(v14 + 800) = v68;
LABEL_305:
        int v23 = 0;
        *int v168 = 0;
        v167[1] = 0;
        v167[2] = 0;
        *int v167 = 0;
LABEL_306:
        if (!*(void *)(v14 + 616) && !*(unsigned char *)(v14 + 921)) {
          goto LABEL_338;
        }
        char v147 = *(unsigned char *)(v15 + 257);
        *(unsigned char *)(v15 + 257) = 1;
        if (!*(_DWORD *)(v14 + 924) || !*(void *)(v14 + 232)) {
          goto LABEL_337;
        }
        unsigned int v148 = lookup(v14, v163, "#", 0x40uLL);
        if (!v148) {
          return 1;
        }
        if (*(unsigned char *)(v14 + 921))
        {
          uint64_t v149 = *(void *)(v14 + 688);
          v148[4] = v149;
        }
        else
        {
          uint64_t v149 = v148[4];
        }
        *(unsigned char *)(v15 + 259) = 0;
        if (!(*(unsigned int (**)(void, void, uint64_t, void, void))(v14 + 232))(*(void *)(v14 + 240), 0, v149, v148[3], v148[5]))return 21; {
        if (*(unsigned char *)(v15 + 259))
        }
        {
          if (!*(unsigned char *)(v15 + 258))
          {
            int v154 = *(unsigned int (**)(void))(v14 + 224);
            if (v154)
            {
              if (!v154(*(void *)(v14 + 8))) {
                return 22;
              }
            }
          }
        }
        else if (!*(void *)(v14 + 616))
        {
          *(unsigned char *)(v15 + 257) = v147;
        }
LABEL_337:
        *(unsigned char *)(v14 + 921) = 0;
LABEL_338:
        uint64_t v155 = *(void (**)(void))(v14 + 184);
        if (!v155) {
          goto LABEL_340;
        }
        v155(*(void *)(v14 + 8));
        goto LABEL_343;
      case 9u:
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 88))(v13, a3, v172)) {
          goto LABEL_136;
        }
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_135;
        }
        int v69 = (char *)poolStoreString(v166, v13, a3, v172);
        if (!v69) {
          return 1;
        }
        int v70 = v69;
        int v71 = lookup(v14, (uint64_t *)v15, v69, 0x40uLL);
        *(void *)(v14 + 600) = v71;
        if (!v71) {
          return 1;
        }
        if (*(char **)v71 != v70)
        {
LABEL_135:
          *(void *)(v15 + 184) = *(void *)(v15 + 192);
LABEL_136:
          *(void *)(v14 + 600) = 0;
          goto LABEL_341;
        }
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        *((void *)v71 + 5) = 0;
        *((unsigned char *)v71 + 57) = 0;
        if (*(void *)(v14 + 904)) {
          BOOL v72 = 1;
        }
        else {
LABEL_314:
        }
          BOOL v72 = *(void *)(v14 + 576) != 0;
LABEL_315:
        *((unsigned char *)v71 + 58) = !v72;
LABEL_316:
        if (!*(void *)(v14 + 280)) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 0xAu:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_135;
        }
        int v73 = (char *)poolStoreString(v166, v13, a3, v172);
        if (!v73) {
          return 1;
        }
        int v74 = v73;
        int v71 = lookup(v14, v163, v73, 0x40uLL);
        *(void *)(v14 + 600) = v71;
        if (!v71) {
          return 1;
        }
        if (*(char **)v71 != v74) {
          goto LABEL_135;
        }
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        *((void *)v71 + 5) = 0;
        BOOL v72 = 1;
        *((unsigned char *)v71 + 57) = 1;
        if (!*(void *)(v14 + 904)) {
          goto LABEL_314;
        }
        goto LABEL_315;
      case 0xBu:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_341;
        }
        goto LABEL_316;
      case 0xCu:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_341;
        }
        uint64_t v19 = storeEntityValue(v14, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128), 2);
        uint64_t v75 = *(void *)(v14 + 600);
        uint64_t v76 = *(void *)(v15 + 240);
        if (v75)
        {
          *(void *)(v75 + 8) = v76;
          uint64_t v77 = *(void *)(v15 + 232);
          *(_DWORD *)(v75 + 16) = v77 - v76;
          *(void *)(v15 + 240) = v77;
          if (*(void *)(v14 + 280))
          {
            *unsigned int v171 = a3;
            (*(void (**)(void, void, void, void, void, void, void, void, void))(v14 + 280))(*(void *)(v14 + 8), **(void **)(v14 + 600), *(unsigned __int8 *)(*(void *)(v14 + 600) + 57), *(void *)(*(void *)(v14 + 600) + 8), *(unsigned int *)(*(void *)(v14 + 600) + 16), *(void *)(v14 + 688), 0, 0, 0);
            int v23 = 0;
          }
        }
        else
        {
          *(void *)(v15 + 232) = v76;
        }
        if (v19) {
          return v19;
        }
        goto LABEL_340;
      case 0xDu:
        goto LABEL_277;
      case 0xEu:
        goto LABEL_107;
      case 0xFu:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 600) || !*(void *)(v14 + 280)) {
          goto LABEL_341;
        }
        *unsigned int v171 = a3;
        (*(void (**)(void, void, void, void, void, void, void, void, void))(v14 + 280))(*(void *)(v14 + 8), **(void **)(v14 + 600), *(unsigned __int8 *)(*(void *)(v14 + 600) + 57), 0, 0, *(void *)(*(void *)(v14 + 600) + 32), *(void *)(*(void *)(v14 + 600) + 24), *(void *)(*(void *)(v14 + 600) + 40), 0);
        goto LABEL_343;
      case 0x10u:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 600)) {
          goto LABEL_341;
        }
        uint64_t v78 = poolStoreString(v166, v13, a3, v172);
        *(void *)(*(void *)(v14 + 600) + 48) = v78;
        if (!v78) {
          return 1;
        }
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        if (*(void *)(v14 + 192))
        {
          *unsigned int v171 = a3;
          (*(void (**)(void, void, void, void, void, void))(v14 + 192))(*(void *)(v14 + 8), **(void **)(v14 + 600), *(void *)(*(void *)(v14 + 600) + 32), *(void *)(*(void *)(v14 + 600) + 24), *(void *)(*(void *)(v14 + 600) + 40), *(void *)(*(void *)(v14 + 600) + 48));
          goto LABEL_343;
        }
        if (!*(void *)(v14 + 280)) {
          goto LABEL_341;
        }
        *unsigned int v171 = a3;
        (*(void (**)(void, void, void, void, void, void, void, void, void))(v14 + 280))(*(void *)(v14 + 8), **(void **)(v14 + 600), 0, 0, 0, *(void *)(*(void *)(v14 + 600) + 32), *(void *)(*(void *)(v14 + 600) + 24), *(void *)(*(void *)(v14 + 600) + 40), *(void *)(*(void *)(v14 + 600) + 48));
        goto LABEL_343;
      case 0x11u:
        if (!*(void *)(v14 + 200)) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 0x12u:
        *char v164 = 0;
        v164[1] = 0;
        if (!*(void *)(v14 + 200)) {
          goto LABEL_341;
        }
        uint64_t v79 = poolStoreString(v168, v13, a3, v172);
        *char v164 = v79;
        if (!v79) {
          return 1;
        }
        goto LABEL_179;
      case 0x13u:
        if (!*v164 || !*(void *)(v14 + 200)) {
          goto LABEL_161;
        }
        uint64_t v80 = poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v80) {
          return 1;
        }
        *unsigned int v171 = a3;
        (*(void (**)(void, void, void, uint64_t, void))(v14 + 200))(*(void *)(v14 + 8), *(void *)(v14 + 640), *(void *)(v14 + 688), v80, *(void *)(v14 + 648));
        int v23 = 0;
LABEL_161:
        int v81 = *(void **)(v14 + 800);
        int v35 = *(void **)(v14 + 792);
        if (!v81) {
          goto LABEL_172;
        }
        if (!v35) {
          goto LABEL_174;
        }
        do
        {
          int v36 = v35;
          int v35 = (void *)*v35;
          *int v36 = v81;
          int v81 = v36;
        }
        while (v35);
        goto LABEL_173;
      case 0x14u:
        if (*(void *)(v14 + 648) && *(void *)(v14 + 200))
        {
          *unsigned int v171 = a3;
          (*(void (**)(void, void, void, void, void))(v14 + 200))(*(void *)(v14 + 8), *(void *)(v14 + 640), *(void *)(v14 + 688), 0, *(void *)(v14 + 648));
          int v23 = 0;
        }
        int v82 = *(void **)(v14 + 800);
        int v35 = *(void **)(v14 + 792);
        if (!v82) {
          goto LABEL_172;
        }
        if (!v35) {
          goto LABEL_174;
        }
        do
        {
          int v36 = v35;
          int v35 = (void *)*v35;
          *int v36 = v82;
          int v82 = v36;
        }
        while (v35);
        goto LABEL_173;
      case 0x15u:
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v13 + 104))(v13, a3, v172, v170)) {
          return 32;
        }
        if (!*v164) {
          goto LABEL_341;
        }
        int v83 = (unsigned char *)poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v83) {
          return 1;
        }
        int v84 = v83;
        normalizePublicId(v83);
        *(void *)(v14 + 648) = v84;
LABEL_179:
        *(void *)(v14 + 824) = *(void *)(v14 + 816);
        goto LABEL_343;
      case 0x16u:
        AttributeId = getAttributeId(v14, v13, a3, v172);
        *(void *)(v14 + 664) = AttributeId;
        if (!AttributeId) {
          return 1;
        }
        *(_WORD *)(v14 + 672) = 0;
        *(void *)(v14 + 632) = 0;
        goto LABEL_191;
      case 0x17u:
        *(unsigned char *)(v14 + 672) = 1;
        int v86 = "CDATA";
        goto LABEL_190;
      case 0x18u:
        *(unsigned char *)(v14 + 673) = 1;
        int v86 = "ID";
        goto LABEL_190;
      case 0x19u:
        int v86 = "IDREF";
        goto LABEL_190;
      case 0x1Au:
        int v86 = "IDREFS";
        goto LABEL_190;
      case 0x1Bu:
        int v86 = "ENTITY";
        goto LABEL_190;
      case 0x1Cu:
        int v86 = "ENTITIES";
        goto LABEL_190;
      case 0x1Du:
        int v86 = "NMTOKEN";
        goto LABEL_190;
      case 0x1Eu:
        int v86 = "NMTOKENS";
LABEL_190:
        *(void *)(v14 + 632) = v86;
        goto LABEL_191;
      case 0x1Fu:
      case 0x20u:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 272)) {
          goto LABEL_341;
        }
        uint64_t v24 = "(";
        if (v20 == 32) {
          uint64_t v24 = "NOTATION(";
        }
        if (*(void *)(v14 + 632)) {
          uint64_t v25 = "|";
        }
        else {
          uint64_t v25 = v24;
        }
        char v26 = *v25;
        if (!*v25) {
          goto LABEL_32;
        }
        uint64_t v27 = (unsigned __int8 *)(v25 + 1);
        do
        {
          int v28 = *(char **)(v14 + 816);
          if (v28 == *(char **)(v14 + 808))
          {
            if (!poolGrow(v168)) {
              return 1;
            }
            int v28 = *(char **)(v14 + 816);
          }
          *(void *)(v14 + 816) = v28 + 1;
          *int v28 = v26;
          int v29 = *v27++;
          char v26 = v29;
        }
        while (v29);
LABEL_32:
        if (!*(void *)(v14 + 824) || !poolAppend(v168, v13, a3, v172)) {
          return 1;
        }
        *(void *)(v14 + 632) = *(void *)(v14 + 824);
        goto LABEL_343;
      case 0x21u:
        goto LABEL_191;
      case 0x22u:
        ElementType = getElementType(v14, v13, a3, v172);
        *(void *)(v14 + 656) = ElementType;
        if (!ElementType) {
          return 1;
        }
LABEL_191:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 272)) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 0x23u:
      case 0x24u:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_50;
        }
        if (!defineAttribute(*(void *)(v14 + 656), *(void *)(v14 + 664), *(unsigned __int8 *)(v14 + 672), *(unsigned __int8 *)(v14 + 673), 0, v14))return 1; {
        if (!*(void *)(v14 + 272))
        }
          goto LABEL_50;
        uint64_t v30 = *(unsigned __int8 **)(v14 + 632);
        if (!v30) {
          goto LABEL_50;
        }
        int v31 = *v30;
        if (v31 != 40 && (v31 != 78 || v30[1] != 79)) {
          goto LABEL_49;
        }
        int8x16_t v32 = *(unsigned char **)(v14 + 816);
        if (v32 != *(unsigned char **)(v14 + 808)) {
          goto LABEL_45;
        }
        if (!poolGrow(v168)) {
          return 1;
        }
        int8x16_t v32 = *(unsigned char **)(v14 + 816);
LABEL_45:
        *(void *)(v14 + 816) = v32 + 1;
        *int8x16_t v32 = 41;
        int v33 = *(unsigned char **)(v14 + 816);
        if (v33 != *(unsigned char **)(v14 + 808)) {
          goto LABEL_48;
        }
        if (!poolGrow(v168)) {
          return 1;
        }
        int v33 = *(unsigned char **)(v14 + 816);
LABEL_48:
        *(void *)(v14 + 816) = v33 + 1;
        *int v33 = 0;
        *(void *)(v14 + 632) = *(void *)(v14 + 824);
        *(void *)(v14 + 824) = *(void *)(v14 + 816);
LABEL_49:
        *unsigned int v171 = a3;
        (*(void (**)(void, void, void, void, void, BOOL))(v14 + 272))(*(void *)(v14 + 8), **(void **)(v14 + 656), **(void **)(v14 + 664), *(void *)(v14 + 632), 0, v20 == 36);
        int v23 = 0;
LABEL_50:
        int v34 = *(void **)(v14 + 800);
        int v35 = *(void **)(v14 + 792);
        if (v34)
        {
          if (!v35) {
            goto LABEL_174;
          }
          do
          {
            int v36 = v35;
            int v35 = (void *)*v35;
            *int v36 = v34;
            int v34 = v36;
          }
          while (v35);
        }
        else
        {
LABEL_172:
          int v36 = v35;
        }
LABEL_173:
        *(void *)(v14 + 800) = v36;
LABEL_174:
        *int v168 = 0;
        v167[1] = 0;
        v167[2] = 0;
        *int v167 = 0;
        goto LABEL_340;
      case 0x25u:
      case 0x26u:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_341;
        }
        uint64_t v37 = storeAttributeValue(v14, v13, *(unsigned __int8 *)(v14 + 672), a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128), v166, 2);
        if (v37) {
          return v37;
        }
        uint64_t v38 = *(void *)(v15 + 192);
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        if (!defineAttribute(*(void *)(v14 + 656), *(void *)(v14 + 664), *(unsigned __int8 *)(v14 + 672), 0, v38, v14))return 1; {
        if (!*(void *)(v14 + 272))
        }
          goto LABEL_341;
        int v39 = *(unsigned __int8 **)(v14 + 632);
        if (!v39) {
          goto LABEL_341;
        }
        int v40 = *v39;
        if (v40 != 40 && (v40 != 78 || v39[1] != 79)) {
          goto LABEL_69;
        }
        int v41 = *(unsigned char **)(v14 + 816);
        if (v41 != *(unsigned char **)(v14 + 808)) {
          goto LABEL_65;
        }
        if (!poolGrow(v168)) {
          return 1;
        }
        int v41 = *(unsigned char **)(v14 + 816);
LABEL_65:
        *(void *)(v14 + 816) = v41 + 1;
        unsigned char *v41 = 41;
        uint64_t v42 = *(unsigned char **)(v14 + 816);
        if (v42 != *(unsigned char **)(v14 + 808)) {
          goto LABEL_68;
        }
        if (!poolGrow(v168)) {
          return 1;
        }
        uint64_t v42 = *(unsigned char **)(v14 + 816);
LABEL_68:
        *(void *)(v14 + 816) = v42 + 1;
        *uint64_t v42 = 0;
        *(void *)(v14 + 632) = *(void *)(v14 + 824);
        *(void *)(v14 + 824) = *(void *)(v14 + 816);
LABEL_69:
        *unsigned int v171 = a3;
        (*(void (**)(void, void, void, void, uint64_t, BOOL))(v14 + 272))(*(void *)(v14 + 8), **(void **)(v14 + 656), **(void **)(v14 + 664), *(void *)(v14 + 632), v38, v20 == 38);
        int v43 = *(void **)(v14 + 800);
        int v44 = *(void **)(v14 + 792);
        if (v43)
        {
          if (!v44) {
            goto LABEL_268;
          }
          do
          {
            int v45 = v44;
            int v44 = (void *)*v44;
            *int v45 = v43;
            int v43 = v45;
          }
          while (v44);
        }
        else
        {
LABEL_266:
          int v45 = v44;
        }
LABEL_267:
        *(void *)(v14 + 800) = v45;
LABEL_268:
        *int v168 = 0;
        v167[1] = 0;
        v167[2] = 0;
        *int v167 = 0;
        goto LABEL_343;
      case 0x27u:
        goto LABEL_323;
      case 0x28u:
        if (!*(void *)(v14 + 264)) {
          goto LABEL_341;
        }
        int v88 = getElementType(v14, v13, a3, v172);
        *(void *)(v14 + 656) = v88;
        uint64_t v19 = 1;
        if (!v88) {
          return v19;
        }
        *(void *)(v15 + 344) = 0;
        *(unsigned char *)(v15 + 320) = 1;
        goto LABEL_343;
      case 0x29u:
      case 0x2Au:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        if (!*(void *)(v14 + 264)) {
          goto LABEL_80;
        }
        uint64_t v46 = (*(uint64_t (**)(void, uint64_t))(v14 + 32))(*(void *)(v14 + 24), 32);
        uint64_t v19 = 1;
        if (!v46) {
          return v19;
        }
        *(void *)(v46 + 24) = 0;
        if (v20 == 41) {
          int v47 = 2;
        }
        else {
          int v47 = 1;
        }
        *(void *)(v46 + 12) = 0;
        *(void *)(v46 + 4) = 0;
        *(_DWORD *)uint64_t v46 = v47;
        *unsigned int v171 = a3;
        (*(void (**)(void, void, uint64_t))(v14 + 264))(*(void *)(v14 + 8), **(void **)(v14 + 656), v46);
        int v23 = 0;
LABEL_80:
        *(unsigned char *)(v15 + 320) = 0;
        goto LABEL_340;
      case 0x2Bu:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        uint64_t v89 = *(void *)(v15 + 328);
        uint64_t v90 = 32 * *(int *)(*(void *)(v15 + 352) + 4 * *(int *)(v15 + 348) - 4);
        int v91 = 3;
        goto LABEL_322;
      case 0x2Cu:
        unsigned int v92 = *(_DWORD *)(v14 + 896);
        if (*(_DWORD *)(v14 + 512) < v92) {
          goto LABEL_319;
        }
        if (v92)
        {
          if ((v92 & 0x80000000) != 0) {
            return 1;
          }
          int v93 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 40);
          uint64_t v94 = *(void *)(v14 + 24);
          uint64_t v95 = *(void *)(v14 + 888);
          *(_DWORD *)(v14 + 896) = 2 * v92;
          uint64_t v96 = v93(v94, v95);
          if (!v96)
          {
            *(_DWORD *)(v14 + 896) >>= 1;
            return 1;
          }
          *(void *)(v14 + 888) = v96;
          uint64_t v97 = *(void *)(v15 + 352);
          if (v97)
          {
            uint64_t v98 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v14 + 40))(*(void *)(v14 + 24), v97, 4 * *(unsigned int *)(v14 + 896));
            if (!v98) {
              return 1;
            }
            *(void *)(v15 + 352) = v98;
          }
          goto LABEL_319;
        }
        uint64_t v150 = *(void *)(v14 + 24);
        int v151 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 32);
        *(_DWORD *)(v14 + 896) = 32;
        uint64_t v152 = v151(v150, 32);
        *(void *)(v14 + 888) = v152;
        if (v152)
        {
LABEL_319:
          *(unsigned char *)(*(void *)(v14 + 888) + *(unsigned int *)(v14 + 512)) = 0;
          if (!*(unsigned char *)(v15 + 320)) {
            goto LABEL_341;
          }
          unsigned int ScaffoldPart = nextScaffoldPart(v14);
          if ((ScaffoldPart & 0x80000000) != 0) {
            return 1;
          }
          *(_DWORD *)(*(void *)(v15 + 352) + 4 * (int)(*(_DWORD *)(v15 + 348))++) = ScaffoldPart;
          uint64_t v89 = *(void *)(v15 + 328);
          uint64_t v90 = 32 * ScaffoldPart;
          int v91 = 6;
LABEL_322:
          *(_DWORD *)(v89 + v90) = v91;
LABEL_323:
          if (!*(void *)(v14 + 264))
          {
LABEL_341:
            if (*(void *)(v14 + 168)) {
              reportDefault((void *)v14, v13, a3, v172);
            }
          }
LABEL_343:
          int v156 = *(_DWORD *)(v14 + 912);
          if (v156 == 2) {
            return 35;
          }
          if (v156 == 3)
          {
            uint64_t v19 = 0;
            *a7 = v172;
            return v19;
          }
          a3 = v172;
          a5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))v13)(v13, v172, a4, &v172);
          continue;
        }
        *(_DWORD *)(v14 + 896) = 0;
        return 1;
      case 0x2Du:
        goto LABEL_211;
      case 0x2Eu:
        int v22 = 2;
        goto LABEL_211;
      case 0x2Fu:
        int v22 = 1;
        goto LABEL_211;
      case 0x30u:
        int v22 = 3;
LABEL_211:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        uint64_t v99 = *(void *)(v14 + 264);
        int v23 = v99 == 0;
        uint64_t v100 = *(int *)(v15 + 348) - 1;
        *(_DWORD *)(v15 + 348) = v100;
        *(_DWORD *)(*(void *)(v15 + 328) + 32 * *(int *)(*(void *)(v15 + 352) + 4 * v100) + 4) = v22;
        if (v100) {
          goto LABEL_340;
        }
        if (!v99) {
          goto LABEL_226;
        }
        uint64_t v101 = *(void *)(v14 + 680);
        uint64_t v102 = (*(uint64_t (**)(void, uint64_t))(v14 + 32))(*(void *)(v14 + 24), *(unsigned int *)(v101 + 336) + 32 * *(unsigned int *)(v101 + 344));
        if (!v102) {
          return 1;
        }
        uint64_t v103 = *(unsigned int *)(v101 + 344);
        *(_DWORD *)(v102 + 16) = 0;
        if (v103)
        {
          int v104 = (unsigned char *)(v102 + 32 * v103);
          uint64_t v105 = v102 + 32;
          unint64_t v106 = v102;
          uint64_t v107 = v104;
          do
          {
            uint64_t v108 = *(int *)(v106 + 16);
            uint64_t v109 = *(void *)(v101 + 328);
            uint64_t v110 = *(void *)(v109 + 32 * v108);
            *(void *)unint64_t v106 = v110;
            if (v110 == 4)
            {
              *(void *)(v106 + 8) = v107;
              int v111 = *(unsigned char **)(v109 + 32 * v108 + 8);
              do
                *v107++ = *v111;
              while (*v111++);
              *(_DWORD *)(v106 + 16) = 0;
              *(void *)(v106 + 24) = 0;
            }
            else
            {
              *(void *)(v106 + 8) = 0;
              uint64_t v113 = v109 + 32 * v108;
              int v114 = *(_DWORD *)(v113 + 24);
              *(_DWORD *)(v106 + 16) = v114;
              *(void *)(v106 + 24) = v105;
              if (v114)
              {
                unsigned int v115 = 0;
                int v116 = (int *)(v113 + 16);
                do
                {
                  uint64_t v117 = *v116;
                  *(_DWORD *)(v105 + 16) = v117;
                  v105 += 32;
                  ++v115;
                  int v116 = (int *)(v109 + 32 * v117 + 28);
                }
                while (v115 < *(_DWORD *)(v106 + 16));
              }
            }
            v106 += 32;
          }
          while (v106 < (unint64_t)v104);
        }
        *unsigned int v171 = a3;
        (*(void (**)(void, void, uint64_t))(v14 + 264))(*(void *)(v14 + 8), **(void **)(v14 + 656), v102);
LABEL_226:
        *(unsigned char *)(v15 + 320) = 0;
        *(_DWORD *)(v15 + 336) = 0;
        goto LABEL_340;
      case 0x31u:
        uint64_t v118 = *(void *)(v14 + 888);
        uint64_t v119 = *(unsigned int *)(v14 + 512);
        if (*(unsigned char *)(v118 + v119) == 44) {
          return 2;
        }
        if (*(unsigned char *)(v118 + v119)) {
          BOOL v120 = 1;
        }
        else {
          BOOL v120 = *(unsigned char *)(v15 + 320) == 0;
        }
        if (!v120)
        {
          unint64_t v121 = (_DWORD *)(*(void *)(v15 + 328)
                          + 32 * *(int *)(*(void *)(v15 + 352) + 4 * *(int *)(v15 + 348) - 4));
          if (*v121 != 3)
          {
            *unint64_t v121 = 5;
            int v23 = *(void *)(v14 + 264) == 0;
          }
        }
        *(unsigned char *)(v118 + v119) = 124;
        goto LABEL_340;
      case 0x32u:
        uint64_t v122 = *(void *)(v14 + 888);
        uint64_t v123 = *(unsigned int *)(v14 + 512);
        if (*(unsigned char *)(v122 + v123) == 124) {
          return 2;
        }
        *(unsigned char *)(v122 + v123) = 44;
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        goto LABEL_323;
      case 0x33u:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        int v23 = 0;
        uint64_t v124 = v172;
        goto LABEL_244;
      case 0x34u:
        int v23 = 2;
        goto LABEL_242;
      case 0x35u:
        goto LABEL_242;
      case 0x36u:
        int v23 = 3;
LABEL_242:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        uint64_t v124 = v172 - *(int *)(v13 + 128);
LABEL_244:
        unsigned int v125 = nextScaffoldPart(v14);
        if ((v125 & 0x80000000) != 0) {
          return 1;
        }
        uint64_t v126 = v125;
        char v127 = (_DWORD *)(*(void *)(v15 + 328) + 32 * v125);
        *char v127 = 4;
        v127[1] = v23;
        unsigned int v128 = getElementType(v14, v13, a3, v124);
        if (!v128) {
          return 1;
        }
        unint64_t v129 = 0;
        uint64_t v130 = *(void *)v128;
        *(void *)(*(void *)(v15 + 328) + 32 * v126 + 8) = *(void *)v128;
        while (*(unsigned __int8 *)(v130 + v129++))
          ;
        int v132 = *(_DWORD *)(v15 + 336);
        if (v129 > ~v132) {
          return 1;
        }
        *(_DWORD *)(v15 + 336) = v132 + v129;
        goto LABEL_323;
      case 0x37u:
        if (!reportProcessingInstruction(v14, v13, a3, v172)) {
          return 1;
        }
        goto LABEL_343;
      case 0x38u:
        if (!reportComment(v14, v13, a3, v172)) {
          return 1;
        }
        goto LABEL_343;
      case 0x39u:
        uint64_t v53 = v172;
        uint64_t v54 = v14;
        uint64_t v55 = 1;
LABEL_255:
        uint64_t v37 = processXmlDecl(v54, v55, a3, v53);
        if (v37) {
          return v37;
        }
        uint64_t v13 = *(void *)(v14 + 296);
        goto LABEL_343;
      case 0x3Au:
        if (*(void *)(v14 + 168)) {
          reportDefault((void *)v14, v13, a3, v172);
        }
        uint64_t v37 = doIgnoreSection(v14, v13, &v172, a4, a7, a8);
        if (v37) {
          return v37;
        }
        if (v172) {
          goto LABEL_343;
        }
        uint64_t v19 = 0;
        *(void *)(v14 + 536) = ignoreSectionProcessor;
        return v19;
      case 0x3Bu:
      case 0x3Cu:
        *(unsigned char *)(v15 + 257) = 1;
        if (!*(_DWORD *)(v14 + 924))
        {
          int v133 = *(unsigned __int8 *)(v15 + 258);
          *(unsigned char *)(v15 + 256) = v133;
          if (v133) {
            goto LABEL_340;
          }
LABEL_263:
          uint64_t v134 = *(unsigned int (**)(void))(v14 + 224);
          if (v134 && !v134(*(void *)(v14 + 8))) {
            return 22;
          }
          goto LABEL_340;
        }
        int v48 = (char *)poolStoreString(v166, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v48) {
          return 1;
        }
        int v49 = v48;
        int v50 = lookup(v14, v163, v48, 0);
        int v51 = v50;
        *(void *)(v15 + 184) = *(void *)(v15 + 192);
        if (!*(_DWORD *)(v14 + 524)) {
          goto LABEL_86;
        }
        if (*(unsigned char *)(v15 + 258))
        {
          if (!*(void *)(v14 + 576)) {
            goto LABEL_284;
          }
        }
        else if (!*(unsigned char *)(v15 + 257))
        {
LABEL_284:
          if (!v50) {
            return 11;
          }
          if (!*((unsigned char *)v50 + 58)) {
            return 24;
          }
          goto LABEL_286;
        }
LABEL_86:
        if (!v50)
        {
          *(unsigned char *)(v15 + 256) = *(unsigned char *)(v15 + 258);
          if (v20 == 60)
          {
            int v52 = *(void (**)(void, char *, uint64_t))(v14 + 248);
            if (v52)
            {
              v52(*(void *)(v14 + 8), v49, 1);
              goto LABEL_343;
            }
          }
          goto LABEL_341;
        }
LABEL_286:
        if (*((unsigned char *)v50 + 56)) {
          return 12;
        }
        if (*((void *)v50 + 1))
        {
          uint64_t v37 = processInternalEntity(v14, (uint64_t)v50, v20 == 60);
          if (v37) {
            return v37;
          }
          goto LABEL_343;
        }
        unsigned int v139 = *(uint64_t (**)(void, void, void, void, void))(v14 + 232);
        if (!v139)
        {
          *(unsigned char *)(v15 + 256) = *(unsigned char *)(v15 + 258);
          goto LABEL_341;
        }
        *(unsigned char *)(v15 + 259) = 0;
        *((unsigned char *)v50 + 56) = 1;
        uint64_t v140 = v14;
        do
        {
          int v141 = (_DWORD *)v140;
          uint64_t v140 = *(void *)(v140 + 904);
        }
        while (v140);
        ++v141[242];
        unsigned int v142 = v141[243] + 1;
        v141[243] = v142;
        unsigned int v143 = v141[244];
        if (v142 > v143) {
          v141[244] = v143 + 1;
        }
        int v144 = v139(*(void *)(v14 + 240), 0, *((void *)v50 + 4), *((void *)v50 + 3), *((void *)v50 + 5));
        uint64_t v145 = v14;
        if (!v144)
        {
          do
          {
            uint64_t v157 = v14;
            uint64_t v14 = *(void *)(v14 + 904);
          }
          while (v14);
          --*(_DWORD *)(v157 + 972);
          *((unsigned char *)v51 + 56) = 0;
          return 21;
        }
        do
        {
          uint64_t v146 = v145;
          uint64_t v145 = *(void *)(v145 + 904);
        }
        while (v145);
        --*(_DWORD *)(v146 + 972);
        *((unsigned char *)v51 + 56) = 0;
        if (!*(unsigned char *)(v15 + 259))
        {
          *(unsigned char *)(v15 + 256) = *(unsigned char *)(v15 + 258);
          goto LABEL_343;
        }
        int v23 = 0;
        if (!*(unsigned char *)(v15 + 258)) {
          goto LABEL_263;
        }
LABEL_340:
        if (!v23) {
          goto LABEL_343;
        }
        goto LABEL_341;
      default:
        goto LABEL_341;
    }
  }
}

BOOL accountingDiffTolerated(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a2 + 4) >= 5)
  {
    if (a5 == 2) {
      return 1;
    }
    goto LABEL_6;
  }
  uint64_t v5 = 1;
  if (((0x1Du >> (a2 + 4)) & 1) == 0 && a5 != 2)
  {
LABEL_6:
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 904);
    }
    while (v6);
    uint64_t v8 = a4 - a3;
    uint64_t v9 = (unint64_t *)(v7 + 936);
    uint64_t v10 = 936;
    if (a5 == 0 && v7 == a1)
    {
      uint64_t v11 = (void *)(v7 + 936);
    }
    else
    {
      uint64_t v10 = 944;
      uint64_t v11 = (void *)(v7 + 944);
    }
    uint64_t v12 = *(void *)(v7 + v10);
    if (__CFADD__(v8, v12)) {
      return 0;
    }
    void *v11 = v12 + v8;
    unint64_t v13 = *v9;
    unint64_t v14 = *(void *)(v7 + 944) + *v9;
    if (v13) {
      float v15 = (float)v14 / (float)v13;
    }
    else {
      float v15 = 1.0;
    }
    if (v14 >= *(void *)(v7 + 960)) {
      return v15 <= *(float *)(v7 + 956);
    }
    return 1;
  }
  return v5;
}

uint64_t processXmlDecl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  unsigned int v27 = -1;
  if (!accountingDiffTolerated(a1, 12, a3, a4, 0)) {
    return 43;
  }
  uint64_t v8 = XmlParseXmlDeclNS;
  if (!*(unsigned char *)(a1 + 464)) {
    uint64_t v8 = XmlParseXmlDecl;
  }
  uint64_t v9 = (uint64_t *)(a1 + 552);
  if (!v8(a2, *(void *)(a1 + 296), a3, a4, (uint64_t *)(a1 + 552), &v29, &v28, &v31, &v30, (int *)&v27))
  {
    if (a2) {
      return 31;
    }
    else {
      return 30;
    }
  }
  if (!a2 && v27 == 1)
  {
    *(unsigned char *)(*(void *)(a1 + 680) + 258) = 1;
    if (*(_DWORD *)(a1 + 924) == 1) {
      *(_DWORD *)(a1 + 924) = 0;
    }
  }
  if (*(void *)(a1 + 288))
  {
    uint64_t v10 = v31;
    if (v31)
    {
      uint64_t v11 = *(void *)(a1 + 296);
      int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v11, v31);
      uint64_t v13 = poolStoreString((uint64_t *)(a1 + 840), v11, v10, v10 + v12);
      if (!v13) {
        return 1;
      }
      uint64_t v10 = v13;
      *(void *)(a1 + 872) = *(void *)(a1 + 864);
    }
    if (v29)
    {
      uint64_t v14 = poolStoreString((uint64_t *)(a1 + 840), *(void *)(a1 + 296), v29, v28 - *(int *)(*(void *)(a1 + 296) + 128));
      if (!v14) {
        return 1;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    (*(void (**)(void, uint64_t, uint64_t, void))(a1 + 288))(*(void *)(a1 + 8), v14, v10, v27);
  }
  else
  {
    if (*(void *)(a1 + 168)) {
      reportDefault((void *)a1, *(void *)(a1 + 296), a3, a4);
    }
    uint64_t v10 = 0;
    uint64_t v14 = 0;
  }
  if (*(void *)(a1 + 456)) {
    goto LABEL_26;
  }
  if (v30)
  {
    int v19 = *(_DWORD *)(v30 + 128);
    uint64_t v20 = *(void *)(a1 + 296);
    if (v19 != *(_DWORD *)(v20 + 128) || v19 == 2 && v30 != v20)
    {
      *uint64_t v9 = v31;
      return 19;
    }
    *(void *)(a1 + 296) = v30;
LABEL_26:
    if (!(v10 | v14)) {
      return 0;
    }
    uint64_t v16 = *(void **)(a1 + 848);
    uint64_t v17 = *(void **)(a1 + 840);
    if (v16)
    {
      if (!v17)
      {
LABEL_46:
        uint64_t result = 0;
        *(void *)(a1 + 840) = 0;
        *(void *)(a1 + 856) = 0;
        *(void *)(a1 + 872) = 0;
        *(void *)(a1 + 864) = 0;
        return result;
      }
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = (void *)*v17;
        void *v18 = v16;
        uint64_t v16 = v18;
      }
      while (v17);
    }
    else
    {
      uint64_t v18 = *(void **)(a1 + 840);
    }
    *(void *)(a1 + 848) = v18;
    goto LABEL_46;
  }
  uint64_t v21 = v31;
  if (!v31) {
    goto LABEL_26;
  }
  if (!v10)
  {
    uint64_t v22 = *(void *)(a1 + 296);
    int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 56))(v22, v31);
    uint64_t v10 = poolStoreString((uint64_t *)(a1 + 840), v22, v21, v21 + v23);
    if (!v10) {
      return 1;
    }
  }
  uint64_t result = handleUnknownEncoding(a1, v10);
  uint64_t v24 = *(void **)(a1 + 848);
  uint64_t v25 = *(void **)(a1 + 840);
  if (v24)
  {
    if (!v25) {
      goto LABEL_51;
    }
    do
    {
      char v26 = v25;
      uint64_t v25 = (void *)*v25;
      *char v26 = v24;
      uint64_t v24 = v26;
    }
    while (v25);
  }
  else
  {
    char v26 = *(void **)(a1 + 840);
  }
  *(void *)(a1 + 848) = v26;
LABEL_51:
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 856) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 864) = 0;
  if (result == 18) {
    *uint64_t v9 = v31;
  }
  return result;
}

uint64_t poolStoreString(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = poolAppend(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v6 = (unsigned char *)a1[3];
    if (v6 == (unsigned char *)a1[2])
    {
      if (!poolGrow(a1)) {
        return 0;
      }
      uint64_t v6 = (unsigned char *)a1[3];
    }
    a1[3] = (uint64_t)(v6 + 1);
    *uint64_t v6 = 0;
    return a1[4];
  }
  return result;
}

_OWORD *lookup(uint64_t a1, uint64_t *a2, char *a3, size_t a4)
{
  if (!a2[2])
  {
    if (a4)
    {
      *((unsigned char *)a2 + 8) = 6;
      a2[2] = 64;
      uint64_t result = (_OWORD *)(*(uint64_t (**)(void, uint64_t))(a2[4] + 8))(*(void *)a2[4], 512);
      *a2 = (uint64_t)result;
      if (!result)
      {
        a2[2] = 0;
        return result;
      }
      result[30] = 0u;
      result[31] = 0u;
      result[28] = 0u;
      result[29] = 0u;
      result[26] = 0u;
      result[27] = 0u;
      result[24] = 0u;
      result[25] = 0u;
      result[22] = 0u;
      result[23] = 0u;
      result[20] = 0u;
      result[21] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[14] = 0u;
      result[15] = 0u;
      result[12] = 0u;
      result[13] = 0u;
      result[10] = 0u;
      result[11] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[6] = 0u;
      result[7] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      _OWORD *result = 0u;
      result[1] = 0u;
      v8.n128_u64[0] = (unint64_t)hash(a1, a3);
      unint64_t v12 = (a2[2] - 1) & v40;
      goto LABEL_45;
    }
    return 0;
  }
  v8.n128_u64[0] = (unint64_t)hash(a1, a3);
  uint64_t v10 = v9;
  uint64_t v11 = a2[2];
  unint64_t v12 = (v11 - 1) & v9;
  uint64_t result = *(_OWORD **)(*a2 + 8 * v12);
  if (!result)
  {
LABEL_14:
    if (a4)
    {
      char v22 = *((unsigned char *)a2 + 8);
      if (!((unint64_t)a2[3] >> (v22 - 1)))
      {
LABEL_45:
        *(void *)(*a2 + 8 * v12) = (*(uint64_t (**)(void, size_t, __n128))(a2[4] + 8))(*(void *)a2[4], a4, v8);
        uint64_t result = *(_OWORD **)(*a2 + 8 * v12);
        if (result)
        {
          bzero(result, a4);
          uint64_t v41 = *a2;
          **(void **)(*a2 + 8 * v12) = a3;
          ++a2[3];
          return *(_OWORD **)(v41 + 8 * v12);
        }
        return result;
      }
      char v23 = v22 + 1;
      unsigned int v24 = (v22 + 1);
      if (v24 <= 0x3C)
      {
        uint64_t result = (_OWORD *)(*(uint64_t (**)(void, uint64_t, __n128))(a2[4] + 8))(*(void *)a2[4], 8 << v23, v8);
        if (!result) {
          return result;
        }
        uint64_t v25 = result;
        char v42 = v24;
        uint64_t v26 = 1 << v23;
        unint64_t v27 = (1 << v23) - 1;
        bzero(result, 8 << v23);
        unint64_t v28 = a2[2];
        if (v28)
        {
          for (unint64_t i = 0; i < v28; ++i)
          {
            uint64_t v30 = *(char ***)(*a2 + 8 * i);
            if (v30)
            {
              hash(a1, *v30);
              unint64_t v32 = v31 & v27;
              if (*((void *)v25 + (v31 & v27)))
              {
                LODWORD(v33) = 0;
                do
                {
                  if (v33) {
                    unint64_t v33 = v33;
                  }
                  else {
                    unint64_t v33 = ((v31 & (unint64_t)-v26) >> (v42 - 1)) & (v27 >> 2) | 1;
                  }
                  BOOL v34 = v32 >= v33;
                  unint64_t v35 = v32 - v33;
                  if (v34) {
                    uint64_t v36 = 0;
                  }
                  else {
                    uint64_t v36 = 1 << v23;
                  }
                  unint64_t v32 = v35 + v36;
                }
                while (*((void *)v25 + v32));
              }
              *((void *)v25 + v32) = *(void *)(*a2 + 8 * i);
              unint64_t v28 = a2[2];
            }
          }
        }
        (*(void (**)(void, void))(a2[4] + 24))(*(void *)a2[4], *a2);
        *a2 = (uint64_t)v25;
        *((unsigned char *)a2 + 8) = v23;
        a2[2] = v26;
        unint64_t v12 = v27 & v10;
        if (*((void *)v25 + (v27 & v10)))
        {
          LODWORD(v37) = 0;
          do
          {
            if (v37) {
              unint64_t v37 = v37;
            }
            else {
              unint64_t v37 = ((v10 & (unint64_t)-v26) >> (v42 - 1)) & (v27 >> 2) | 1;
            }
            unint64_t v38 = v12 - v37;
            if (v12 >= v37) {
              uint64_t v39 = 0;
            }
            else {
              uint64_t v39 = 1 << v23;
            }
            unint64_t v12 = v38 + v39;
          }
          while (*((void *)v25 + v38 + v39));
        }
        goto LABEL_45;
      }
    }
    return 0;
  }
  unsigned int v14 = 0;
  while (*a3 != **(unsigned char **)result)
  {
LABEL_8:
    if (!v14) {
      unsigned int v14 = ((v10 & (unint64_t)-v11) >> (*((unsigned char *)a2 + 8) - 1)) & ((unint64_t)(v11 - 1) >> 2) | 1;
    }
    unint64_t v20 = v12 - v14;
    if (v12 >= v14) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = a2[2];
    }
    unint64_t v12 = v20 + v21;
    uint64_t result = *(_OWORD **)(*a2 + 8 * (v20 + v21));
    if (!result) {
      goto LABEL_14;
    }
  }
  float v15 = (unsigned __int8 *)(*(void *)result + 1);
  uint64_t v16 = (unsigned __int8 *)(a3 + 1);
  int v17 = *a3;
  while (v17)
  {
    int v18 = *v16++;
    int v17 = v18;
    int v19 = *v15++;
    if (v17 != v19) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *normalizePublicId(unsigned char *result)
{
  LOBYTE(v1) = *result;
  if (!*result) {
    goto LABEL_15;
  }
  uint64_t v2 = 1;
  int v3 = result;
  do
  {
    uint64_t v4 = v3;
    if ((char)v1 > 0x20 || ((1 << v1) & 0x100002400) == 0) {
      goto LABEL_8;
    }
    int v3 = result;
    if (v4 == result) {
      goto LABEL_10;
    }
    if (*(v4 - 1) != 32)
    {
      LOBYTE(v1) = 32;
LABEL_8:
      *v4++ = v1;
    }
    int v3 = v4;
LABEL_10:
    int v1 = result[v2++];
  }
  while (v1);
  if (v3 != result)
  {
    if (*(v3 - 1) == 32) {
      uint64_t result = v3 - 1;
    }
    else {
      uint64_t result = v3;
    }
  }
LABEL_15:
  _OWORD *result = 0;
  return result;
}

uint64_t contentProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = doContent(a1, 0, *(void *)(a1 + 296), a2, a3, a4, *(unsigned char *)(a1 + 916) == 0, 0);
  if (!v5 && !storeRawNames(a1)) {
    return 1;
  }
  return v5;
}

_OWORD *getElementType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t **)(a1 + 680);
  uint64_t v6 = (char *)poolStoreString(v5 + 20, a2, a3, a4);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  __n128 v8 = lookup(a1, v5 + 5, v6, 0x28uLL);
  uint64_t v9 = v8;
  if (v8)
  {
    if (*(char **)v8 != v7)
    {
      v5[23] = v5[24];
      return v9;
    }
    v5[24] = v5[23];
    if (setElementTypePrefix(a1, (uint64_t)v8)) {
      return v9;
    }
    return 0;
  }
  return v9;
}

_OWORD *getAttributeId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 680);
  uint64_t v9 = *(unsigned char **)(v8 + 184);
  if (v9 == *(unsigned char **)(v8 + 176))
  {
    if (!poolGrow((uint64_t *)(v8 + 160))) {
      return 0;
    }
    uint64_t v9 = *(unsigned char **)(v8 + 184);
  }
  *(void *)(v8 + 184) = v9 + 1;
  *uint64_t v9 = 0;
  uint64_t v10 = poolStoreString((uint64_t *)(v8 + 160), a2, a3, a4);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (unsigned char *)v10;
  unint64_t v12 = (unsigned char *)(v10 + 1);
  uint64_t v13 = lookup(a1, (uint64_t *)(v8 + 80), (char *)(v10 + 1), 0x18uLL);
  unsigned int v14 = v13;
  if (v13)
  {
    if (*(unsigned char **)v13 != v12)
    {
      uint64_t v15 = *(void *)(v8 + 192);
LABEL_8:
      *(void *)(v8 + 184) = v15;
      return v14;
    }
    uint64_t v16 = *(unsigned char **)(v8 + 184);
    *(void *)(v8 + 192) = v16;
    if (!*(unsigned char *)(a1 + 464)) {
      return v14;
    }
    int v17 = *v12;
    if (v17 == 120 && v11[2] == 109 && v11[3] == 108 && v11[4] == 110 && v11[5] == 115)
    {
      if (v11[6] == 58)
      {
        int v18 = lookup(a1, (uint64_t *)(v8 + 120), v11 + 7, 0x10uLL);
        goto LABEL_38;
      }
      if (!v11[6])
      {
        int v18 = (_OWORD *)(v8 + 304);
LABEL_38:
        *((void *)v14 + 1) = v18;
        *((unsigned char *)v14 + 17) = 1;
        return v14;
      }
    }
    uint64_t v19 = 0;
    if (!*v12) {
      return v14;
    }
    while (v17 != 58)
    {
      int v17 = v11[v19++ + 2];
      if (!v17) {
        return v14;
      }
    }
    if (v19)
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        uint64_t v21 = *(unsigned char **)(v8 + 184);
        if (v21 == *(unsigned char **)(v8 + 176))
        {
          if (!poolGrow((uint64_t *)(v8 + 160))) {
            return 0;
          }
          uint64_t v21 = *(unsigned char **)(v8 + 184);
        }
        char v22 = v12[i];
        *(void *)(v8 + 184) = v21 + 1;
        unsigned char *v21 = v22;
      }
      uint64_t v16 = *(unsigned char **)(v8 + 184);
    }
    if (v16 == *(unsigned char **)(v8 + 176))
    {
      if (!poolGrow((uint64_t *)(v8 + 160))) {
        return 0;
      }
      uint64_t v16 = *(unsigned char **)(v8 + 184);
    }
    *(void *)(v8 + 184) = v16 + 1;
    *uint64_t v16 = 0;
    char v23 = lookup(a1, (uint64_t *)(v8 + 120), *(char **)(v8 + 192), 0x10uLL);
    *((void *)v14 + 1) = v23;
    if (v23)
    {
      uint64_t v15 = *(void *)(v8 + 192);
      if (*(void *)v23 == v15)
      {
        *(void *)(v8 + 192) = *(void *)(v8 + 184);
        return v14;
      }
      goto LABEL_8;
    }
    return 0;
  }
  return v14;
}

uint64_t poolAppend(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  uint64_t v7 = a1 + 3;
  if (a1[3]) {
    goto LABEL_3;
  }
  while (poolGrow(a1))
  {
LABEL_3:
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(a2 + 112))(a2, &v9, a4, v7, a1[2]) < 2)return a1[4]; {
  }
    }
  return 0;
}

uint64_t defineAttribute(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v10 = *(_DWORD *)(a1 + 24);
  if (a4 || a5)
  {
    if (v10 >= 1)
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v12 = *(unsigned int *)(a1 + 24);
      while (*v11 != a2)
      {
        v11 += 3;
        if (!--v12) {
          goto LABEL_7;
        }
      }
      return 1;
    }
LABEL_7:
    if (a4 && !*(void *)(a1 + 16) && !*(unsigned char *)(a2 + 17)) {
      *(void *)(a1 + 16) = a2;
    }
  }
  if (v10 != *(_DWORD *)(a1 + 28))
  {
    uint64_t result = *(void *)(a1 + 32);
LABEL_16:
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = result + 24 * v15;
    *(void *)uint64_t v16 = a2;
    *(void *)(v16 + 16) = a5;
    *(unsigned char *)(v16 + 8) = a3;
    if (!a3) {
      *(unsigned char *)(a2 + 16) = 1;
    }
    *(_DWORD *)(a1 + 24) = v15 + 1;
    return 1;
  }
  int v13 = v10;
  if (!v10)
  {
    *(_DWORD *)(a1 + 28) = 8;
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(a6 + 32))(*(void *)(a6 + 24), 192);
    *(void *)(a1 + 32) = result;
    if (!result)
    {
      *(_DWORD *)(a1 + 28) = 0;
      return result;
    }
    goto LABEL_16;
  }
  if (v10 > 0x3FFFFFFF) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(a6 + 40))(*(void *)(a6 + 24), *(void *)(a1 + 32), 48 * v10);
  if (result)
  {
    *(_DWORD *)(a1 + 28) = 2 * v13;
    *(void *)(a1 + 32) = result;
    goto LABEL_16;
  }
  return result;
}

uint64_t poolGrow(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_5;
  }
  int v3 = (const void *)a1[4];
  if (!v3)
  {
    uint64_t v20 = *(void *)v2;
    *a1 = v2;
    a1[1] = v20;
    *(void *)uint64_t v2 = 0;
    a1[4] = v2 + 12;
    a1[2] = v2 + 12 + *(int *)(v2 + 8);
    a1[3] = v2 + 12;
    return 1;
  }
  int64_t v4 = a1[2] - (void)v3;
  if (v4 >= *(int *)(v2 + 8))
  {
LABEL_5:
    uint64_t v9 = a1[4];
    unsigned int v10 = *((_DWORD *)a1 + 4) - v9;
    if (*a1) {
      BOOL v11 = v9 == *a1 + 12;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      unsigned int v14 = 2 * v10;
      if (((2 * v10) & 0x80000000) == 0 && v14 && (int)(v14 + 12) >= 1)
      {
        uint64_t v16 = a1[3];
        uint64_t result = (*(uint64_t (**)(void))(a1[5] + 16))(*(void *)a1[5]);
        if (!result) {
          return result;
        }
        *a1 = result;
        *(_DWORD *)(result + 8) = v14;
        uint64_t v18 = result + 12 + v16 - v9;
        a1[4] = result + 12;
        uint64_t v19 = result + 12 + v14;
LABEL_28:
        a1[2] = v19;
        a1[3] = v18;
        return 1;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      if (v10 < 0x400)
      {
        unsigned int v12 = 1024;
        unsigned int v13 = 1036;
LABEL_23:
        uint64_t result = (*(uint64_t (**)(void, void))(a1[5] + 8))(*(void *)a1[5], v13);
        if (!result) {
          return result;
        }
        uint64_t v21 = result;
        *(_DWORD *)(result + 8) = v12;
        *(void *)uint64_t result = *a1;
        *a1 = result;
        char v23 = (unsigned char *)a1[3];
        char v22 = (unsigned char *)a1[4];
        if (v23 == v22)
        {
          uint64_t v24 = a1[3];
        }
        else
        {
          memcpy((void *)(result + 12), v22, v23 - v22);
          uint64_t v24 = a1[3];
          char v23 = (unsigned char *)a1[4];
        }
        uint64_t v18 = v21 + 12 + v24 - (void)v23;
        a1[4] = v21 + 12;
        uint64_t v19 = v21 + 12 + v12;
        goto LABEL_28;
      }
      if (v10 <= 0x3FFFFFF9)
      {
        unsigned int v12 = 2 * v10;
        unsigned int v13 = 2 * v10 + 12;
        goto LABEL_23;
      }
    }
    return 0;
  }
  uint64_t v5 = *(void *)v2;
  *(void *)uint64_t v2 = *a1;
  *a1 = v2;
  a1[1] = v5;
  memcpy((void *)(v2 + 12), v3, v4);
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + 12;
  uint64_t v8 = v7 + a1[3] - a1[4];
  a1[4] = v7;
  a1[2] = v7 + *(int *)(v6 + 8);
  a1[3] = v8;
  return 1;
}

uint64_t storeAttributeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  int v8 = a3;
  uint64_t result = appendAttributeValue(a1, a2, a3, a4, a5, a6, a7);
  if (!result)
  {
    unsigned int v10 = (unsigned char *)a6[3];
    if (!v8 && v10 != (unsigned char *)a6[4] && *(v10 - 1) == 32) {
      a6[3] = (uint64_t)--v10;
    }
    if (v10 == (unsigned char *)a6[2])
    {
      if (!poolGrow(a6)) {
        return 1;
      }
      unsigned int v10 = (unsigned char *)a6[3];
    }
    uint64_t result = 0;
    a6[3] = (uint64_t)(v10 + 1);
    *unsigned int v10 = 0;
  }
  return result;
}

uint64_t storeEntityValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 680);
  uint64_t v12 = *(void *)(v10 + 208);
  BOOL v11 = (uint64_t *)(v10 + 208);
  int v13 = *(_DWORD *)(a1 + 528);
  *(_DWORD *)(a1 + 528) = 1;
  if (!v12 && !poolGrow(v11)) {
    return 1;
  }
  uint64_t v42 = a3;
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 40))(a2, a3, a4, &v42);
  if (!accountingDiffTolerated(a1, v14, a3, v42, a5))
  {
LABEL_46:
    uint64_t result = 43;
    goto LABEL_48;
  }
  while (2)
  {
    uint64_t result = 0;
    switch(v14)
    {
      case -4:
        goto LABEL_48;
      case -3:
        uint64_t v42 = a3 + *(int *)(a2 + 128);
        goto LABEL_24;
      case -2:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
        goto LABEL_50;
      case -1:
        if (*(void *)(a1 + 296) == a2) {
          *(void *)(a1 + 552) = a3;
        }
        goto LABEL_57;
      case 0:
        if (*(void *)(a1 + 296) == a2) {
          *(void *)(a1 + 552) = v42;
        }
LABEL_57:
        uint64_t result = 4;
        goto LABEL_48;
      case 6:
      case 9:
        if (!poolAppend(v11, a2, a3, v42)) {
          goto LABEL_47;
        }
        goto LABEL_28;
      case 7:
LABEL_24:
        uint64_t v26 = *(unsigned char **)(v10 + 232);
        if (*(unsigned char **)(v10 + 224) != v26) {
          goto LABEL_27;
        }
        if (!poolGrow(v11)) {
          goto LABEL_47;
        }
        uint64_t v26 = *(unsigned char **)(v10 + 232);
LABEL_27:
        *(void *)(v10 + 232) = v26 + 1;
        *uint64_t v26 = 10;
        goto LABEL_28;
      case 10:
        unsigned int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a2, a3);
        if ((v27 & 0x80000000) != 0)
        {
          if (*(void *)(a1 + 296) == a2) {
            *(void *)(a1 + 552) = a3;
          }
          uint64_t result = 14;
          goto LABEL_48;
        }
        int v28 = XmlUtf8Encode(v27, v41);
        if (v28 >= 1)
        {
          uint64_t v29 = v28;
          uint64_t v30 = v41;
          do
          {
            uint64_t v31 = *(unsigned char **)(v10 + 232);
            if (*(unsigned char **)(v10 + 224) == v31)
            {
              if (!poolGrow(v11)) {
                goto LABEL_47;
              }
              uint64_t v31 = *(unsigned char **)(v10 + 232);
            }
            char v32 = *v30++;
            *(void *)(v10 + 232) = v31 + 1;
            *uint64_t v31 = v32;
            --v29;
          }
          while (v29);
        }
        goto LABEL_28;
      default:
        if (v14 != 28)
        {
LABEL_50:
          if (*(void *)(a1 + 296) == a2) {
            *(void *)(a1 + 552) = a3;
          }
          uint64_t result = 23;
          goto LABEL_48;
        }
        if (!*(unsigned char *)(a1 + 920) && *(void *)(a1 + 296) == a2)
        {
          *(void *)(a1 + 552) = a3;
          uint64_t result = 10;
          goto LABEL_48;
        }
        uint64_t v16 = (char *)poolStoreString((uint64_t *)(a1 + 792), a2, a3 + *(int *)(a2 + 128), v42 - *(int *)(a2 + 128));
        if (!v16)
        {
LABEL_47:
          uint64_t result = 1;
          goto LABEL_48;
        }
        uint64_t result = (uint64_t)lookup(a1, (uint64_t *)(v10 + 264), v16, 0);
        *(void *)(a1 + 816) = *(void *)(a1 + 824);
        if (!result)
        {
          *(unsigned char *)(v10 + 256) = *(unsigned char *)(v10 + 258);
          goto LABEL_48;
        }
        uint64_t v17 = result;
        if (!*(unsigned char *)(result + 56))
        {
          if (*(void *)(result + 24))
          {
            uint64_t v18 = *(uint64_t (**)(void, void, void))(a1 + 232);
            if (!v18) {
              goto LABEL_22;
            }
            *(unsigned char *)(v10 + 259) = 0;
            *(unsigned char *)(result + 56) = 1;
            uint64_t v19 = a1;
            do
            {
              uint64_t v20 = (_DWORD *)v19;
              uint64_t v19 = *(void *)(v19 + 904);
            }
            while (v19);
            ++v20[242];
            unsigned int v21 = v20[243] + 1;
            v20[243] = v21;
            unsigned int v22 = v20[244];
            if (v21 > v22) {
              v20[244] = v22 + 1;
            }
            int v23 = v18(*(void *)(a1 + 240), 0, *(void *)(result + 32));
            uint64_t v24 = a1;
            if (!v23)
            {
              uint64_t v39 = a1;
              do
              {
                uint64_t v40 = v39;
                uint64_t v39 = *(void *)(v39 + 904);
              }
              while (v39);
              --*(_DWORD *)(v40 + 972);
              *(unsigned char *)(v17 + 56) = 0;
              uint64_t result = 21;
              goto LABEL_48;
            }
            do
            {
              uint64_t v25 = v24;
              uint64_t v24 = *(void *)(v24 + 904);
            }
            while (v24);
            --*(_DWORD *)(v25 + 972);
            *(unsigned char *)(v17 + 56) = 0;
            if (!*(unsigned char *)(v10 + 259)) {
LABEL_22:
            }
              *(unsigned char *)(v10 + 256) = *(unsigned char *)(v10 + 258);
          }
          else
          {
            *(unsigned char *)(result + 56) = 1;
            uint64_t v33 = a1;
            do
            {
              BOOL v34 = (_DWORD *)v33;
              uint64_t v33 = *(void *)(v33 + 904);
            }
            while (v33);
            ++v34[242];
            unsigned int v35 = v34[243] + 1;
            v34[243] = v35;
            unsigned int v36 = v34[244];
            if (v35 > v36) {
              v34[244] = v36 + 1;
            }
            uint64_t result = storeEntityValue(a1, *(void *)(a1 + 448), *(void *)(result + 8), *(void *)(result + 8) + *(int *)(result + 16), 1);
            uint64_t v37 = a1;
            do
            {
              uint64_t v38 = v37;
              uint64_t v37 = *(void *)(v37 + 904);
            }
            while (v37);
            --*(_DWORD *)(v38 + 972);
            *(unsigned char *)(v17 + 56) = 0;
            if (result) {
              goto LABEL_48;
            }
          }
LABEL_28:
          a3 = v42;
          int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 40))(a2, v42, a4, &v42);
          if (!accountingDiffTolerated(a1, v14, a3, v42, a5)) {
            goto LABEL_46;
          }
          continue;
        }
        if (*(void *)(a1 + 296) == a2) {
          *(void *)(a1 + 552) = a3;
        }
        uint64_t result = 12;
LABEL_48:
        *(_DWORD *)(a1 + 528) = v13;
        return result;
    }
  }
}

uint64_t doIgnoreSection(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v11 = *a3;
  uint64_t v17 = *a3;
  if (*(void *)(a1 + 296) == a2)
  {
    uint64_t v12 = (uint64_t *)(a1 + 552);
    *(void *)(a1 + 552) = v11;
    int v13 = (void *)(a1 + 560);
  }
  else
  {
    uint64_t v12 = *(uint64_t **)(a1 + 576);
    int v13 = v12 + 1;
  }
  uint64_t *v12 = v11;
  *a3 = 0;
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 24))(a2, v11, a4, &v17);
  if (!accountingDiffTolerated(a1, v14, v11, v17, 0)) {
    return 43;
  }
  uint64_t v15 = v17;
  void *v13 = v17;
  switch(v14)
  {
    case -4:
    case -1:
      if (a6) {
        goto LABEL_17;
      }
      uint64_t result = 2;
      break;
    case -3:
      goto LABEL_15;
    case -2:
      if (a6)
      {
LABEL_17:
        uint64_t result = 0;
        *a5 = v11;
      }
      else
      {
        uint64_t result = 6;
      }
      break;
    case 0:
      uint64_t *v12 = v15;
      uint64_t result = 4;
      break;
    default:
      if (v14 == 42)
      {
        if (*(void *)(a1 + 168))
        {
          reportDefault((void *)a1, a2, v11, v15);
          uint64_t v15 = v17;
        }
        *a3 = v15;
        *a5 = v15;
        if (*(_DWORD *)(a1 + 912) == 2) {
          uint64_t result = 35;
        }
        else {
          uint64_t result = 0;
        }
      }
      else
      {
LABEL_15:
        uint64_t *v12 = v15;
        uint64_t result = 23;
      }
      break;
  }
  return result;
}

uint64_t ignoreSectionProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  uint64_t result = doIgnoreSection(a1, *(void *)(a1 + 296), &v6, a3, a4, *(unsigned char *)(a1 + 916) == 0);
  if (!result)
  {
    if (v6)
    {
      *(void *)(a1 + 536) = prologProcessor;
      return prologProcessor(a1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t nextScaffoldPart(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 680);
  if (!*(void *)(v2 + 352))
  {
    int v3 = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 4 * *(unsigned int *)(a1 + 896));
    *(void *)(v2 + 352) = v3;
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
    *int v3 = 0;
  }
  uint64_t result = *(unsigned int *)(v2 + 344);
  unsigned int v5 = *(_DWORD *)(v2 + 340);
  uint64_t v6 = *(void *)(v2 + 328);
  if (result >= v5)
  {
    if (v6)
    {
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t v7 = (*(uint64_t (**)(void))(a1 + 40))(*(void *)(a1 + 24));
        if (v7)
        {
          uint64_t v6 = v7;
          int v8 = 2 * *(_DWORD *)(v2 + 340);
LABEL_11:
          *(_DWORD *)(v2 + 340) = v8;
          *(void *)(v2 + 328) = v6;
          uint64_t result = *(unsigned int *)(v2 + 344);
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 1024);
      if (v9)
      {
        uint64_t v6 = v9;
        int v8 = 32;
        goto LABEL_11;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  *(_DWORD *)(v2 + 344) = result + 1;
  int v10 = *(_DWORD *)(v2 + 348);
  if (v10)
  {
    uint64_t v11 = *(int *)(*(void *)(v2 + 352) + 4 * (v10 - 1));
    uint64_t v12 = v6 + 32 * v11;
    int v13 = (_DWORD *)(v12 + 20);
    uint64_t v14 = *(int *)(v12 + 20);
    if (v14) {
      *(_DWORD *)(v6 + 32 * v14 + 28) = result;
    }
    int v17 = *(_DWORD *)(v12 + 24);
    uint64_t v15 = (_DWORD *)(v12 + 24);
    int v16 = v17;
    if (!v17) {
      *(_DWORD *)(v6 + 32 * v11 + 16) = result;
    }
    _DWORD *v13 = result;
    *uint64_t v15 = v16 + 1;
  }
  uint64_t v18 = v6 + 32 * (int)result;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  return result;
}

uint64_t processInternalEntity(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *(void *)(a1 + 584);
  if (v6)
  {
    *(void *)(a1 + 584) = *(void *)(v6 + 16);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 40);
    if (!v6) {
      return 1;
    }
  }
  *(unsigned char *)(a2 + 56) = 1;
  uint64_t v7 = a1;
  do
  {
    int v8 = (_DWORD *)v7;
    uint64_t v7 = *(void *)(v7 + 904);
  }
  while (v7);
  ++v8[242];
  unsigned int v9 = v8[243] + 1;
  v8[243] = v9;
  unsigned int v10 = v8[244];
  if (v9 > v10) {
    v8[244] = v10 + 1;
  }
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v11 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = v6;
  *(void *)(v6 + 16) = v11;
  *(void *)(v6 + 24) = a2;
  uint64_t v12 = *(unsigned int *)(a1 + 596);
  *(_DWORD *)(v6 + 32) = v12;
  *(unsigned char *)(v6 + 36) = a3;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = v13 + *(int *)(a2 + 16);
  uint64_t v20 = v13;
  uint64_t v15 = *(uint64_t (***)(void, uint64_t, uint64_t, uint64_t *))(a1 + 448);
  if (*(unsigned char *)(a2 + 57))
  {
    uint64_t v16 = (*v15)(*(void *)(a1 + 448), v13, v14, &v20);
    uint64_t result = doProlog(a1, *(void *)(a1 + 448), v13, v14, v16, v20, &v20, 0, 0);
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t result = doContent(a1, v12, v15, v13, v14, &v20, 0, 1);
    if (result) {
      return result;
    }
  }
  uint64_t v18 = a1;
  if (v14 == v20 || (uint64_t v18 = a1, *(_DWORD *)(a1 + 912) != 3))
  {
    do
    {
      uint64_t v19 = v18;
      uint64_t v18 = *(void *)(v18 + 904);
    }
    while (v18);
    uint64_t result = 0;
    --*(_DWORD *)(v19 + 972);
    *(unsigned char *)(a2 + 56) = 0;
    *(void *)(a1 + 576) = *(void *)(v6 + 16);
    *(void *)(v6 + 16) = *(void *)(a1 + 584);
    *(void *)(a1 + 584) = v6;
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a2 + 20) = v20 - v13;
    *(void *)(a1 + 536) = internalEntityProcessor;
  }
  return result;
}

uint64_t reportProcessingInstruction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 136))
  {
    uint64_t v7 = a3 + 2 * *(int *)(a2 + 128);
    uint64_t v8 = v7 + (*(int (**)(uint64_t, uint64_t))(a2 + 56))(a2, v7);
    uint64_t result = poolStoreString((uint64_t *)(a1 + 792), a2, v7, v8);
    if (result)
    {
      uint64_t v10 = result;
      *(void *)(a1 + 824) = *(void *)(a1 + 816);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a2, v8);
      uint64_t result = poolStoreString((uint64_t *)(a1 + 792), a2, v11, a4 - 2 * *(int *)(a2 + 128));
      if (result)
      {
        uint64_t v12 = result;
        normalizeLines((unsigned char *)result);
        (*(void (**)(void, uint64_t, uint64_t))(a1 + 136))(*(void *)(a1 + 8), v10, v12);
        uint64_t v13 = *(void **)(a1 + 800);
        uint64_t v14 = *(void **)(a1 + 792);
        if (v13)
        {
          if (!v14)
          {
LABEL_13:
            *(void *)(a1 + 792) = 0;
            *(void *)(a1 + 808) = 0;
            *(void *)(a1 + 824) = 0;
            uint64_t result = 1;
            *(void *)(a1 + 816) = 0;
            return result;
          }
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
            *uint64_t v15 = v13;
            uint64_t v13 = v15;
          }
          while (v14);
        }
        else
        {
          uint64_t v15 = *(void **)(a1 + 792);
        }
        *(void *)(a1 + 800) = v15;
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (*(void *)(a1 + 168)) {
      reportDefault((void *)a1, a2, a3, a4);
    }
    return 1;
  }
  return result;
}

uint64_t reportComment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 144))
  {
    uint64_t result = poolStoreString((uint64_t *)(a1 + 792), a2, a3 + 4 * *(int *)(a2 + 128), a4 - 3 * *(int *)(a2 + 128));
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    normalizeLines((unsigned char *)result);
    (*(void (**)(void, uint64_t))(a1 + 144))(*(void *)(a1 + 8), v6);
    uint64_t v7 = *(void **)(a1 + 800);
    uint64_t v8 = *(void **)(a1 + 792);
    if (v7)
    {
      if (!v8)
      {
LABEL_12:
        *(void *)(a1 + 792) = 0;
        *(void *)(a1 + 808) = 0;
        *(void *)(a1 + 824) = 0;
        uint64_t result = 1;
        *(void *)(a1 + 816) = 0;
        return result;
      }
      do
      {
        unsigned int v9 = v8;
        uint64_t v8 = (void *)*v8;
        *unsigned int v9 = v7;
        uint64_t v7 = v9;
      }
      while (v8);
    }
    else
    {
      unsigned int v9 = *(void **)(a1 + 792);
    }
    *(void *)(a1 + 800) = v9;
    goto LABEL_12;
  }
  if (*(void *)(a1 + 168)) {
    reportDefault((void *)a1, a2, a3, a4);
  }
  return 1;
}

int8x8_t hash(uint64_t a1, char *a2)
{
  void v11[3] = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v2 = a1;
    a1 = *(void *)(a1 + 904);
  }
  while (a1);
  uint64_t v3 = *(void *)(v2 + 928);
  v8.i64[0] = 0x736F6D6570736575;
  v8.i64[1] = v3 ^ 0x646F72616E646F6DLL;
  uint64_t v9 = 0x6C7967656E657261;
  uint64_t v10 = v3 ^ 0x7465646279746573;
  v11[1] = v11;
  _DWORD v11[2] = 0;
  if (*a2)
  {
    uint64_t v4 = 0;
    do
      uint64_t v5 = v4 + 1;
    while (a2[++v4]);
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 0;
  sip24_update(v8.i64, a2, v5);
  return sip24_final(&v8);
}

uint64_t *sip24_update(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v5 = (unint64_t)&a2[a3];
  uint64_t v6 = (unsigned char **)(a1 + 5);
  uint64_t v7 = a1 + 4;
  uint64_t v8 = (uint64_t)&a2[a3 - 1];
  do
  {
    if ((unint64_t)v3 >= v5)
    {
      BOOL v13 = 0;
    }
    else
    {
      uint64_t v9 = *v6;
      if (*v6 >= (unsigned char *)v6)
      {
        BOOL v13 = 1;
      }
      else
      {
        uint64_t v10 = v8 - (void)v3;
        while (1)
        {
          uint64_t v11 = v3;
          char v12 = *v3++;
          *uint64_t v6 = v9 + 1;
          *uint64_t v9 = v12;
          if (!v10) {
            break;
          }
          uint64_t v9 = *v6;
          --v10;
          if (*v6 >= (unsigned char *)v6) {
            goto LABEL_11;
          }
        }
        uint64_t v3 = (char *)v5;
LABEL_11:
        BOOL v13 = (unint64_t)(v11 + 1) < v5;
      }
    }
    if (*v6 < (unsigned char *)v6) {
      break;
    }
    uint64_t v14 = a1[4];
    a1[3] ^= v14;
    sip_round(a1, 2);
    *a1 ^= v14;
    uint64_t v15 = a1[6] + 8;
    a1[5] = (uint64_t)v7;
    a1[6] = v15;
  }
  while (v13);
  return a1;
}

int8x8_t sip24_final(int8x16_t *a1)
{
  __int32 v2 = a1[2].i32[2] - (a1 + 32);
  unint64_t v3 = (unint64_t)(v2 + a1[3].i32[0]) << 56;
  switch((char)v2)
  {
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      goto LABEL_5;
    case 5:
      goto LABEL_4;
    case 6:
      goto LABEL_3;
    case 7:
      v3 |= (unint64_t)a1[2].u8[6] << 48;
LABEL_3:
      v3 |= (unint64_t)a1[2].u8[5] << 40;
LABEL_4:
      v3 |= (unint64_t)a1[2].u8[4] << 32;
LABEL_5:
      v3 |= (unint64_t)a1[2].u8[3] << 24;
LABEL_6:
      v3 |= (unint64_t)a1[2].u8[2] << 16;
LABEL_7:
      v3 |= (unint64_t)a1[2].u8[1] << 8;
LABEL_8:
      v3 |= a1[2].u8[0];
      break;
    default:
      break;
  }
  a1[1].i64[1] ^= v3;
  sip_round(a1->i64, 2);
  a1->i64[0] ^= v3;
  a1[1].i64[0] ^= 0xFFuLL;
  sip_round(a1->i64, 4);
  int8x16_t v4 = veorq_s8(*a1, a1[1]);
  return veor_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
}

uint64_t *sip_round(uint64_t *result, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = *result;
    uint64_t v3 = result[1];
    uint64_t v5 = result[2];
    uint64_t v4 = result[3];
    do
    {
      uint64_t v6 = v2 + v3;
      uint64_t v7 = v6 ^ __ROR8__(v3, 51);
      uint64_t v8 = v5 + v4;
      uint64_t v9 = __ROR8__(v4, 48);
      uint64_t v2 = (v8 ^ v9) + __ROR8__(v6, 32);
      uint64_t v4 = v2 ^ __ROR8__(v8 ^ v9, 43);
      uint64_t v10 = v8 + v7;
      uint64_t v3 = v10 ^ __ROR8__(v7, 47);
      uint64_t v5 = __ROR8__(v10, 32);
      --a2;
    }
    while (a2);
    _OWORD *result = v2;
    result[1] = v3;
    result[2] = v5;
    result[3] = v4;
  }
  return result;
}

uint64_t doContent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, int a8)
{
  int v8 = a7;
  int v116 = (char **)a4;
  uint64_t v14 = *(void *)(a1 + 680);
  if (*(void *)(a1 + 296) == a3)
  {
    uint64_t v15 = (uint64_t *)(a1 + 552);
    uint64_t v16 = (uint64_t *)(a1 + 560);
  }
  else
  {
    uint64_t v15 = *(uint64_t **)(a1 + 576);
    uint64_t v16 = v15 + 1;
  }
  *uint64_t v15 = a4;
  uint64_t v107 = (void *)(a1 + 808);
  uint64_t v108 = (uint64_t *)(a1 + 792);
  uint64_t v104 = v14;
  uint64_t v105 = (uint64_t *)(v14 + 160);
  while (2)
  {
    unsigned int v115 = v116;
    int v17 = (*(uint64_t (**)(uint64_t))(a3 + 8))(a3);
    int v18 = v17;
    if (v17 == -3 || v17 == -5)
    {
      uint64_t v20 = (uint64_t)v116;
      if (v8) {
        uint64_t v21 = (uint64_t)v116;
      }
      else {
        uint64_t v21 = a5;
      }
    }
    else
    {
      uint64_t v21 = (uint64_t)v115;
      uint64_t v20 = (uint64_t)v116;
    }
    if (!accountingDiffTolerated(a1, v17, v20, v21, a8)) {
      return 43;
    }
    uint64_t v22 = (uint64_t)v115;
    *uint64_t v16 = (uint64_t)v115;
    uint64_t v23 = 17;
    switch(v18)
    {
      case -5:
        if (v8) {
          goto LABEL_166;
        }
        uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 128);
        if (v96)
        {
          if (*(unsigned char *)(a3 + 132))
          {
            uint64_t v97 = *(void *)(a1 + 8);
            uint64_t v98 = (uint64_t)v116;
            uint64_t v99 = (a5 - v116);
          }
          else
          {
            uint64_t v102 = *(void *)(a1 + 104);
            int v111 = *(char **)(a1 + 96);
            (*(void (**)(uint64_t, char ***, uint64_t, char **, uint64_t))(a3 + 112))(a3, &v116, a5, &v111, v102);
            uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 128);
            uint64_t v97 = *(void *)(a1 + 8);
            uint64_t v98 = *(void *)(a1 + 96);
            uint64_t v99 = (v111 - v98);
          }
          v96(v97, v98, v99);
        }
        else if (*(void *)(a1 + 168))
        {
          reportDefault((void *)a1, a3, (uint64_t)v116, a5);
        }
        if (!a2)
        {
          *uint64_t v15 = a5;
          return 3;
        }
        if (*(_DWORD *)(a1 + 596) == a2) {
          goto LABEL_193;
        }
        *uint64_t v15 = a5;
        return 13;
      case -4:
        if (v8) {
          goto LABEL_166;
        }
        if (a2 < 1) {
          return 3;
        }
        if (*(_DWORD *)(a1 + 596) != a2) {
          return 13;
        }
LABEL_166:
        uint64_t v23 = 0;
        uint64_t v94 = (uint64_t)v116;
        goto LABEL_167;
      case -3:
        if (v8) {
          goto LABEL_166;
        }
        *uint64_t v16 = a5;
        uint64_t v100 = *(void (**)(void, char **, uint64_t))(a1 + 128);
        if (v100)
        {
          LOBYTE(v111) = 10;
          v100(*(void *)(a1 + 8), &v111, 1);
        }
        else if (*(void *)(a1 + 168))
        {
          reportDefault((void *)a1, a3, (uint64_t)v116, a5);
        }
        if (!a2) {
          return 3;
        }
        if (*(_DWORD *)(a1 + 596) != a2) {
          return 13;
        }
LABEL_193:
        uint64_t v23 = 0;
        *a6 = a5;
        return v23;
      case -2:
        if (v8) {
          goto LABEL_166;
        }
        return 6;
      case -1:
        if (v8) {
          goto LABEL_166;
        }
        return 5;
      case 0:
        *uint64_t v15 = v22;
        return 4;
      case 1:
      case 2:
        int v111 = 0;
        uint64_t v24 = *(void *)(a1 + 704);
        int v106 = a2;
        if (v24)
        {
          *(void *)(a1 + 704) = *(void *)v24;
LABEL_69:
          *(void *)(v24 + 80) = 0;
          *(void *)uint64_t v24 = *(void *)(a1 + 696);
          *(void *)(a1 + 696) = v24;
          *(void *)(v24 + 32) = 0;
          *(void *)(v24 + 40) = 0;
          *(void *)(v24 + 8) = (char *)v116 + *(int *)(a3 + 128);
          int v60 = (*(uint64_t (**)(uint64_t))(a3 + 56))(a3);
          *(_DWORD *)(v24 + 16) = v60;
          ++*(_DWORD *)(a1 + 596);
          unint64_t v61 = *(void *)(v24 + 8) + v60;
          unint64_t v114 = *(void *)(v24 + 8);
          uint64_t v62 = *(void *)(v24 + 72);
          int v111 = *(char **)(v24 + 64);
          int v63 = (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t, char **, uint64_t))(a3 + 112))(a3, &v114, v61, &v111, v62 - 1);
          int v64 = v111;
          uint64_t v65 = *(void *)(v24 + 64);
          int v66 = v111 - v65;
          if (v114 < v61 && v63 != 1)
          {
            uint64_t v103 = a6;
            do
            {
              uint64_t v67 = 2 * (*(_DWORD *)(v24 + 72) - (int)v65);
              uint64_t v68 = (*(uint64_t (**)(void))(a1 + 40))(*(void *)(a1 + 24));
              if (!v68) {
                return 1;
              }
              *(void *)(v24 + 64) = v68;
              *(void *)(v24 + 72) = v68 + v67;
              int v111 = (char *)(v68 + v66);
              int v69 = (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t, char **, uint64_t))(a3 + 112))(a3, &v114, v61, &v111, v68 + v67 - 1);
              int v64 = v111;
              uint64_t v65 = *(void *)(v24 + 64);
              int v66 = v111 - v65;
            }
            while (v114 < v61 && v69 != 1);
            a6 = v103;
          }
          *(_DWORD *)(v24 + 48) = v66;
          *(void *)(v24 + 24) = v65;
          *int v64 = 0;
          uint64_t v71 = storeAtts(a1, a3, (uint64_t)v116, (char **)(v24 + 24), (uint64_t *)(v24 + 80), a8);
          if (v71) {
            return v71;
          }
          BOOL v72 = *(void (**)(void, void, void))(a1 + 112);
          if (v72)
          {
            v72(*(void *)(a1 + 8), *(void *)(v24 + 24), *(void *)(a1 + 744));
            a2 = v106;
            int v8 = a7;
          }
          else
          {
            a2 = v106;
            int v8 = a7;
            if (*(void *)(a1 + 168)) {
              reportDefault((void *)a1, a3, (uint64_t)v116, (uint64_t)v115);
            }
          }
          uint64_t v76 = *(void **)(a1 + 800);
          uint64_t v77 = *(void **)(a1 + 792);
          if (v76)
          {
            if (!v77)
            {
LABEL_100:
              *uint64_t v108 = 0;
              v107[1] = 0;
              v107[2] = 0;
              *uint64_t v107 = 0;
              goto LABEL_143;
            }
            do
            {
              uint64_t v78 = v77;
              uint64_t v77 = (void *)*v77;
              *uint64_t v78 = v76;
              uint64_t v76 = v78;
            }
            while (v77);
          }
          else
          {
            uint64_t v78 = *(void **)(a1 + 792);
          }
          *(void *)(a1 + 800) = v78;
          goto LABEL_100;
        }
        uint64_t v58 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 88);
        if (!v58) {
          return 1;
        }
        uint64_t v24 = v58;
        uint64_t v59 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 32);
        *(void *)(v24 + 64) = v59;
        if (v59)
        {
          *(void *)(v24 + 72) = v59 + 32;
          goto LABEL_69;
        }
        (*(void (**)(void, uint64_t))(a1 + 48))(*(void *)(a1 + 24), v24);
        return 1;
      case 3:
      case 4:
        uint64_t v25 = (uint64_t)v116 + *(int *)(a3 + 128);
        unint64_t v114 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a3, v25);
        int v111 = (char *)poolStoreString(v108, a3, v25, v25 + v26);
        if (!v111) {
          return 1;
        }
        *(void *)(a1 + 824) = *(void *)(a1 + 816);
        uint64_t v27 = storeAtts(a1, a3, (uint64_t)v116, &v111, (uint64_t *)&v114, 2);
        if (v27)
        {
          uint64_t v23 = v27;
          freeBindings(a1, v114);
          return v23;
        }
        *(void *)(a1 + 824) = *(void *)(a1 + 816);
        int v28 = *(void (**)(void, char *, void))(a1 + 112);
        if (v28)
        {
          v28(*(void *)(a1 + 8), v111, *(void *)(a1 + 744));
          uint64_t v29 = *(void (**)(void, char *))(a1 + 120);
          if (!v29) {
            goto LABEL_84;
          }
          if (*(void *)(a1 + 112))
          {
            *uint64_t v15 = *v16;
            (*(void (**)(void, char *))(a1 + 120))(*(void *)(a1 + 8), v111);
            goto LABEL_84;
          }
LABEL_83:
          v29(*(void *)(a1 + 8), v111);
          goto LABEL_84;
        }
        uint64_t v29 = *(void (**)(void, char *))(a1 + 120);
        if (v29) {
          goto LABEL_83;
        }
        if (*(void *)(a1 + 168)) {
          reportDefault((void *)a1, a3, (uint64_t)v116, (uint64_t)v115);
        }
LABEL_84:
        int v73 = *(void **)(a1 + 800);
        int v74 = *(void **)(a1 + 792);
        if (v73)
        {
          if (!v74) {
            goto LABEL_90;
          }
          do
          {
            uint64_t v75 = v74;
            int v74 = (void *)*v74;
            *uint64_t v75 = v73;
            int v73 = v75;
          }
          while (v74);
        }
        else
        {
          uint64_t v75 = *(void **)(a1 + 792);
        }
        *(void *)(a1 + 800) = v75;
LABEL_90:
        *(void *)(a1 + 792) = 0;
        v107[1] = 0;
        v107[2] = 0;
        *uint64_t v107 = 0;
        freeBindings(a1, v114);
        if (!*(_DWORD *)(a1 + 596)) {
          goto LABEL_147;
        }
        goto LABEL_143;
      case 5:
        if (*(_DWORD *)(a1 + 596) == a2) {
          return 13;
        }
        uint64_t v30 = *(void *)(a1 + 696);
        uint64_t v31 = (char *)v116 + 2 * *(int *)(a3 + 128);
        int v32 = (*(uint64_t (**)(uint64_t, char *))(a3 + 56))(a3, v31);
        if (v32 != *(_DWORD *)(v30 + 16) || memcmp(*(const void **)(v30 + 8), v31, v32))
        {
          *uint64_t v15 = (uint64_t)v31;
          return 7;
        }
        *(void *)(a1 + 696) = *(void *)v30;
        *(void *)uint64_t v30 = *(void *)(a1 + 704);
        *(void *)(a1 + 704) = v30;
        --*(_DWORD *)(a1 + 596);
        uint64_t v33 = *(void (**)(void, void))(a1 + 120);
        if (v33)
        {
          if (*(unsigned char *)(a1 + 464))
          {
            BOOL v34 = *(unsigned char **)(v30 + 32);
            if (v34)
            {
              unsigned int v35 = (unsigned char *)(*(void *)(v30 + 24) + *(int *)(v30 + 52));
              char v36 = *v34;
              if (*v34)
              {
                uint64_t v37 = v34 + 1;
                do
                {
                  *v35++ = v36;
                  int v38 = *v37++;
                  char v36 = v38;
                }
                while (v38);
              }
              uint64_t v39 = *(unsigned char **)(v30 + 40);
              if (*(unsigned char *)(a1 + 465)) {
                BOOL v40 = v39 == 0;
              }
              else {
                BOOL v40 = 1;
              }
              if (!v40)
              {
                *v35++ = *(unsigned char *)(a1 + 900);
                char v41 = *v39;
                if (*v39)
                {
                  uint64_t v42 = v39 + 1;
                  do
                  {
                    *v35++ = v41;
                    int v43 = *v42++;
                    char v41 = v43;
                  }
                  while (v43);
                }
              }
              *unsigned int v35 = 0;
              uint64_t v33 = *(void (**)(void, void))(a1 + 120);
            }
          }
          v33(*(void *)(a1 + 8), *(void *)(v30 + 24));
        }
        else if (*(void *)(a1 + 168))
        {
          reportDefault((void *)a1, a3, (uint64_t)v116, (uint64_t)v115);
        }
        uint64_t v87 = *(void *)(v30 + 80);
        if (v87)
        {
          do
          {
            int v88 = *(void (**)(void, void))(a1 + 216);
            uint64_t v89 = v87;
            if (v88)
            {
              v88(*(void *)(a1 + 8), **(void **)v87);
              uint64_t v89 = *(void *)(v30 + 80);
            }
            uint64_t v90 = *(void *)(v89 + 8);
            *(void *)(v30 + 80) = v90;
            *(void *)(v87 + 8) = *(void *)(a1 + 720);
            *(void *)(a1 + 720) = v87;
            *(void *)(*(void *)v87 + 8) = *(void *)(v87 + 16);
            uint64_t v87 = v90;
          }
          while (v90);
        }
        int v8 = a7;
        if (*(_DWORD *)(a1 + 596)) {
          goto LABEL_143;
        }
LABEL_147:
        int v95 = *(_DWORD *)(a1 + 912);
        if (v95 == 2)
        {
          *uint64_t v15 = (uint64_t)v115;
          return 35;
        }
        else if (v95 == 3)
        {
          *(void *)(a1 + 536) = epilogProcessor;
          *uint64_t v15 = (uint64_t)v115;
LABEL_145:
          uint64_t v23 = 0;
          uint64_t v94 = (uint64_t)v115;
LABEL_167:
          *a6 = v94;
        }
        else
        {
          return epilogProcessor(a1, (uint64_t)v115, a5, a6);
        }
        return v23;
      case 6:
        int v44 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 128);
        if (v44)
        {
          if (*(unsigned char *)(a3 + 132))
          {
            uint64_t v45 = *(void *)(a1 + 8);
            uint64_t v46 = v116;
            uint64_t v47 = (v22 - v116);
            goto LABEL_60;
          }
          while (1)
          {
            uint64_t v48 = *(void *)(a1 + 104);
            int v111 = *(char **)(a1 + 96);
            unsigned int v49 = (*(uint64_t (**)(uint64_t, char ***, uint64_t, char **, uint64_t))(a3 + 112))(a3, &v116, v22, &v111, v48);
            *uint64_t v16 = (uint64_t)v116;
            v44(*(void *)(a1 + 8), *(char ***)(a1 + 96), v111 - *(void *)(a1 + 96));
            if (v49 <= 1) {
              break;
            }
            *uint64_t v15 = (uint64_t)v116;
            uint64_t v22 = (uint64_t)v115;
          }
          goto LABEL_61;
        }
        int v8 = a7;
        if (!*(void *)(a1 + 168)) {
          goto LABEL_143;
        }
LABEL_102:
        uint64_t v79 = (uint64_t)v116;
        uint64_t v80 = (void *)a1;
        uint64_t v81 = a3;
        uint64_t v82 = v22;
        goto LABEL_142;
      case 7:
        int v50 = *(void (**)(void, char **, uint64_t))(a1 + 128);
        if (!v50) {
          goto LABEL_49;
        }
        LOBYTE(v111) = 10;
        v50(*(void *)(a1 + 8), &v111, 1);
        goto LABEL_143;
      case 8:
        int v51 = *(void (**)(void))(a1 + 152);
        if (v51)
        {
          v51(*(void *)(a1 + 8));
        }
        else if (*(void *)(a1 + 168))
        {
          reportDefault((void *)a1, a3, (uint64_t)v116, v22);
        }
        uint64_t v71 = doCdataSection(a1, a3, (uint64_t *)&v115, a5, a6, v8, a8);
        if (v71) {
          return v71;
        }
        if (v115) {
          goto LABEL_143;
        }
        uint64_t v23 = 0;
        *(void *)(a1 + 536) = cdataSectionProcessor;
        return v23;
      case 9:
        LOBYTE(v111) = 0;
        LOBYTE(v111) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 88))(a3, (uint64_t)v116 + *(int *)(a3 + 128), v22 - *(int *)(a3 + 128));
        if ((_BYTE)v111)
        {
          accountingDiffTolerated(a1, 9, (uint64_t)&v111, (uint64_t)&v111 + 1, 1);
          int v52 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 128);
          if (v52)
          {
            uint64_t v53 = *(void *)(a1 + 8);
            uint64_t v54 = &v111;
            uint64_t v55 = 1;
LABEL_56:
            v52(v53, v54, v55);
            goto LABEL_143;
          }
LABEL_140:
          if (!*(void *)(a1 + 168)) {
            goto LABEL_143;
          }
LABEL_141:
          uint64_t v82 = (uint64_t)v115;
          uint64_t v79 = (uint64_t)v116;
          uint64_t v80 = (void *)a1;
          uint64_t v81 = a3;
LABEL_142:
          reportDefault(v80, v81, v79, v82);
          goto LABEL_143;
        }
        int v83 = (char *)poolStoreString(v105, a3, (uint64_t)v116 + *(int *)(a3 + 128), (uint64_t)v115 - *(int *)(a3 + 128));
        if (!v83) {
          return 1;
        }
        int v84 = v83;
        int v85 = lookup(a1, (uint64_t *)v104, v83, 0);
        int v86 = v85;
        *(void *)(v104 + 184) = *(void *)(v104 + 192);
        if (!*(unsigned char *)(v104 + 257) || *(unsigned char *)(v104 + 258))
        {
          if (!v85) {
            return 11;
          }
          if (!*((unsigned char *)v85 + 58)) {
            return 24;
          }
LABEL_113:
          if (*((unsigned char *)v85 + 56)) {
            return 12;
          }
          if (*((void *)v85 + 6)) {
            return 15;
          }
          if (*((void *)v85 + 1))
          {
            if (*(unsigned char *)(a1 + 592))
            {
              uint64_t v71 = processInternalEntity(a1, (uint64_t)v85, 0);
              int v8 = a7;
              if (v71) {
                return v71;
              }
              goto LABEL_143;
            }
            int v52 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 248);
            int v8 = a7;
            if (v52)
            {
              uint64_t v53 = *(void *)(a1 + 8);
              uint64_t v54 = *(char ***)v86;
              uint64_t v55 = 0;
              goto LABEL_56;
            }
            goto LABEL_140;
          }
          if (!*(void *)(a1 + 232)) {
            goto LABEL_136;
          }
          uint64_t v23 = 1;
          *((unsigned char *)v85 + 56) = 1;
          uint64_t Context = getContext(a1);
          *((unsigned char *)v86 + 56) = 0;
          int v8 = a7;
          if (!Context) {
            return v23;
          }
          if (!(*(unsigned int (**)(void, uint64_t, void, void, void))(a1 + 232))(*(void *)(a1 + 240), Context, *((void *)v86 + 4), *((void *)v86 + 3), *((void *)v86 + 5)))return 21; {
          *(void *)(a1 + 816) = *(void *)(a1 + 824);
          }
          goto LABEL_143;
        }
        if (v85) {
          goto LABEL_113;
        }
        unsigned int v92 = *(void (**)(void, char *, void))(a1 + 248);
        if (!v92)
        {
LABEL_136:
          int v8 = a7;
          if (!*(void *)(a1 + 168)) {
            goto LABEL_143;
          }
          goto LABEL_141;
        }
        v92(*(void *)(a1 + 8), v84, 0);
LABEL_61:
        int v8 = a7;
LABEL_143:
        int v93 = *(_DWORD *)(a1 + 912);
        int v116 = v115;
        *uint64_t v15 = (uint64_t)v115;
        if (v93 == 2) {
          return 35;
        }
        if (v93 == 3) {
          goto LABEL_145;
        }
        continue;
      case 10:
        unsigned int v56 = (*(uint64_t (**)(uint64_t, char **))(a3 + 80))(a3, v116);
        if ((v56 & 0x80000000) != 0) {
          return 14;
        }
        int v44 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 128);
        if (!v44) {
          goto LABEL_136;
        }
        uint64_t v57 = *(void *)(a1 + 8);
        uint64_t v47 = XmlUtf8Encode(v56, &v111);
        uint64_t v46 = &v111;
        uint64_t v45 = v57;
LABEL_60:
        v44(v45, v46, v47);
        goto LABEL_61;
      case 11:
        if (!reportProcessingInstruction(a1, a3, (uint64_t)v116, v22)) {
          return 1;
        }
        goto LABEL_143;
      case 12:
        return v23;
      case 13:
        if (!reportComment(a1, a3, (uint64_t)v116, v22)) {
          return 1;
        }
        goto LABEL_143;
      default:
LABEL_49:
        if (!*(void *)(a1 + 168)) {
          goto LABEL_143;
        }
        goto LABEL_102;
    }
  }
}

uint64_t storeRawNames(uint64_t a1)
{
  for (uint64_t i = *(uint64_t ***)(a1 + 696); i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v3 = *((int *)i + 12) + 1;
    uint64_t v4 = i[8];
    uint64_t v5 = (char *)v4 + v3;
    uint64_t v6 = i[1];
    if (v6 == (uint64_t *)((char *)v4 + v3)) {
      break;
    }
    size_t v7 = *((int *)i + 4);
    if (2147483646 - *((int *)i + 12) < v7) {
      return 0;
    }
    int v8 = v7 + v3;
    if ((char *)i[9] - (char *)v4 < (int)v7 + (int)v3)
    {
      uint64_t v9 = v8;
      uint64_t result = (*(uint64_t (**)(void, uint64_t *, void))(a1 + 40))(*(void *)(a1 + 24), i[8], v8);
      if (!result) {
        return result;
      }
      uint64_t v11 = i[8];
      if (i[3] == v11) {
        i[3] = (uint64_t *)result;
      }
      char v12 = i[4];
      if (v12) {
        i[4] = (uint64_t *)(result + (char *)v12 - (char *)v11);
      }
      i[8] = (uint64_t *)result;
      i[9] = (uint64_t *)(result + v9);
      uint64_t v5 = (char *)(result + v3);
      uint64_t v6 = i[1];
      size_t v7 = *((int *)i + 4);
    }
    memcpy(v5, v6, v7);
    i[1] = (uint64_t *)v5;
  }
  return 1;
}

uint64_t getContext(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 680);
  uint64_t v3 = *(unsigned char **)(v2 + 312);
  if (v3)
  {
    uint64_t v4 = *(unsigned char **)(a1 + 816);
    if (v4 == *(unsigned char **)(a1 + 808))
    {
      if (!poolGrow((uint64_t *)(a1 + 792))) {
        return 0;
      }
      uint64_t v4 = *(unsigned char **)(a1 + 816);
    }
    *(void *)(a1 + 816) = v4 + 1;
    *uint64_t v4 = 61;
    uint64_t v5 = *(_DWORD *)(*(void *)(v2 + 312) + 40) - (*(unsigned char *)(a1 + 900) != 0);
    if ((int)v5 >= 1)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        size_t v7 = *(unsigned char **)(a1 + 816);
        if (v7 == *(unsigned char **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792))) {
            return 0;
          }
          size_t v7 = *(unsigned char **)(a1 + 816);
        }
        char v8 = *(unsigned char *)(*(void *)(*(void *)(v2 + 312) + 32) + i);
        *(void *)(a1 + 816) = v7 + 1;
        *size_t v7 = v8;
      }
    }
    LODWORD(v3) = 1;
  }
  uint64_t v9 = *(char ****)(v2 + 120);
  if (v9) {
    uint64_t v10 = &v9[*(void *)(v2 + 136)];
  }
  else {
    uint64_t v10 = 0;
  }
  while (v9 != v10)
  {
    uint64_t v11 = v9;
    BOOL v13 = *v9++;
    char v12 = v13;
    if (v13 && v12[1])
    {
      if (v3)
      {
        uint64_t v14 = *(unsigned char **)(a1 + 816);
        if (v14 == *(unsigned char **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792))) {
            return 0;
          }
          uint64_t v14 = *(unsigned char **)(a1 + 816);
        }
        *(void *)(a1 + 816) = v14 + 1;
        *uint64_t v14 = 12;
      }
      char v15 = **v12;
      if (v15)
      {
        uint64_t v16 = (unsigned __int8 *)(*v12 + 1);
        do
        {
          int v17 = *(unsigned char **)(a1 + 816);
          if (v17 == *(unsigned char **)(a1 + 808))
          {
            if (!poolGrow((uint64_t *)(a1 + 792))) {
              return 0;
            }
            char v15 = *(v16 - 1);
            int v17 = *(unsigned char **)(a1 + 816);
          }
          *(void *)(a1 + 816) = v17 + 1;
          *int v17 = v15;
          int v18 = *v16++;
          char v15 = v18;
        }
        while (v18);
      }
      uint64_t v3 = *(unsigned char **)(a1 + 816);
      if (v3 == *(unsigned char **)(a1 + 808))
      {
        if (!poolGrow((uint64_t *)(a1 + 792))) {
          return 0;
        }
        uint64_t v3 = *(unsigned char **)(a1 + 816);
      }
      uint64_t v9 = v11 + 1;
      *(void *)(a1 + 816) = v3 + 1;
      *uint64_t v3 = 61;
      uint64_t v19 = *((_DWORD *)v12[1] + 10) - (*(unsigned char *)(a1 + 900) != 0);
      LODWORD(v3) = 1;
      if ((int)v19 >= 1)
      {
        for (uint64_t j = 0; j != v19; ++j)
        {
          uint64_t v21 = *(unsigned char **)(a1 + 816);
          if (v21 == *(unsigned char **)(a1 + 808))
          {
            if (!poolGrow((uint64_t *)(a1 + 792))) {
              return 0;
            }
            uint64_t v21 = *(unsigned char **)(a1 + 816);
          }
          char v22 = *(unsigned char *)(*((void *)v12[1] + 4) + j);
          *(void *)(a1 + 816) = v21 + 1;
          unsigned char *v21 = v22;
        }
        LODWORD(v3) = 1;
      }
    }
  }
  uint64_t v23 = *(void **)v2;
  if (*(void *)v2) {
    uint64_t v24 = &v23[*(void *)(v2 + 16)];
  }
  else {
    uint64_t v24 = 0;
  }
  while (v23 != v24)
  {
    uint64_t v25 = v23;
    uint64_t v27 = (unsigned char *)*v23++;
    int v26 = v27;
    if (v27 && v26[56])
    {
      if (v3)
      {
        int v28 = *(unsigned char **)(a1 + 816);
        if (v28 == *(unsigned char **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792))) {
            return 0;
          }
          int v28 = *(unsigned char **)(a1 + 816);
        }
        *(void *)(a1 + 816) = v28 + 1;
        *int v28 = 12;
      }
      uint64_t v23 = v25 + 1;
      char v29 = **(unsigned char **)v26;
      LODWORD(v3) = 1;
      if (v29)
      {
        uint64_t v30 = (unsigned __int8 *)(*(void *)v26 + 1);
        do
        {
          uint64_t v31 = *(unsigned char **)(a1 + 816);
          if (v31 == *(unsigned char **)(a1 + 808))
          {
            if (!poolGrow((uint64_t *)(a1 + 792))) {
              return 0;
            }
            char v29 = *(v30 - 1);
            uint64_t v31 = *(unsigned char **)(a1 + 816);
          }
          *(void *)(a1 + 816) = v31 + 1;
          *uint64_t v31 = v29;
          int v32 = *v30++;
          char v29 = v32;
        }
        while (v32);
        LODWORD(v3) = 1;
      }
    }
  }
  uint64_t v33 = *(unsigned char **)(a1 + 816);
  if (v33 != *(unsigned char **)(a1 + 808)) {
    goto LABEL_60;
  }
  if (poolGrow((uint64_t *)(a1 + 792)))
  {
    uint64_t v33 = *(unsigned char **)(a1 + 816);
LABEL_60:
    *(void *)(a1 + 816) = v33 + 1;
    *uint64_t v33 = 0;
    return *(void *)(a1 + 824);
  }
  return 0;
}

uint64_t storeAtts(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t *a5, int a6)
{
  v148[3] = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 680);
  char v12 = lookup(a1, (uint64_t *)(v11 + 40), *a4, 0);
  if (!v12)
  {
    int v38 = (char *)poolCopyString((uint64_t *)(v11 + 160), *a4);
    if (!v38) {
      return 1;
    }
    uint64_t v39 = lookup(a1, (uint64_t *)(v11 + 40), v38, 0x28uLL);
    if (!v39) {
      return 1;
    }
    char v12 = v39;
    if (*(unsigned char *)(a1 + 464))
    {
      if (!setElementTypePrefix(a1, (uint64_t)v39)) {
        return 1;
      }
    }
  }
  uint64_t v13 = *((unsigned int *)v12 + 6);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a2 + 72))(a2, a3, *(unsigned int *)(a1 + 728), *(void *)(a1 + 744));
  if ((int)v14 > (int)(v13 ^ 0x7FFFFFFF)) {
    return 1;
  }
  uint64_t v15 = v14;
  int v16 = *(_DWORD *)(a1 + 728);
  if ((int)v14 + (int)v13 > v16)
  {
    if ((int)v13 > 2147483631 || (int)v14 > 2147483631 - (int)v13) {
      return 1;
    }
    int v18 = v14 + v13 + 16;
    *(_DWORD *)(a1 + 728) = v18;
    uint64_t v19 = (*(uint64_t (**)(void, void, uint64_t))(a1 + 40))(*(void *)(a1 + 24), *(void *)(a1 + 744), 32 * v18);
    if (!v19)
    {
      *(_DWORD *)(a1 + 728) = v16;
      return 1;
    }
    *(void *)(a1 + 744) = v19;
    if ((int)v15 > v16) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 72))(a2, a3, v15, v19);
    }
  }
  uint64_t v137 = a4;
  uint64_t v138 = v11;
  uint64_t v144 = *(void *)(a1 + 744);
  if ((int)v15 >= 1)
  {
    int v139 = a6;
    uint64_t v20 = 0;
    int v141 = 0;
    int v21 = 0;
    uint64_t v22 = v15;
    while (1)
    {
      uint64_t v23 = *(void *)(*(void *)(a1 + 744) + 32 * v20);
      int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a2, v23);
      AttributeId = getAttributeId(a1, a2, v23, v23 + v24);
      if (!AttributeId) {
        return 1;
      }
      uint64_t v26 = (uint64_t)AttributeId;
      if (*(unsigned char *)(*(void *)AttributeId - 1))
      {
        if (*(void *)(a1 + 296) == a2) {
          *(void *)(a1 + 552) = *(void *)(*(void *)(a1 + 744) + 32 * v20);
        }
        return 8;
      }
      *(unsigned char *)(*(void *)AttributeId - 1) = 1;
      uint64_t v27 = v21 + 1;
      *(void *)(v144 + 8 * v21) = *(void *)AttributeId;
      uint64_t v28 = *(void *)(a1 + 744);
      uint64_t v29 = v28 + 32 * v20;
      if (*(unsigned char *)(v29 + 24))
      {
        uint64_t v30 = poolStoreString((uint64_t *)(a1 + 792), a2, *(void *)(v29 + 8), *(void *)(v29 + 16));
        uint64_t v31 = v144;
        *(void *)(v144 + 8 * (int)v27) = v30;
        if (!v30) {
          return 1;
        }
      }
      else
      {
        if (*((unsigned char *)AttributeId + 16)) {
          BOOL v32 = (int)v13 < 1;
        }
        else {
          BOOL v32 = 1;
        }
        if (v32)
        {
LABEL_26:
          uint64_t v35 = 1;
        }
        else
        {
          uint64_t v33 = (unsigned __int8 *)(*((void *)v12 + 4) + 8);
          uint64_t v34 = v13;
          while (AttributeId != *((_OWORD **)v33 - 1))
          {
            v33 += 24;
            if (!--v34) {
              goto LABEL_26;
            }
          }
          uint64_t v35 = *v33;
        }
        uint64_t result = storeAttributeValue(a1, a2, v35, *(void *)(v28 + 32 * v20 + 8), *(void *)(v28 + 32 * v20 + 16), (uint64_t *)(a1 + 792), v139);
        if (result) {
          return result;
        }
        uint64_t v31 = v144;
        *(void *)(v144 + 8 * v27) = *(void *)(a1 + 824);
      }
      *(void *)(a1 + 824) = *(void *)(a1 + 816);
      uint64_t v37 = *(void **)(v26 + 8);
      if (v37)
      {
        if (*(unsigned char *)(v26 + 17))
        {
          uint64_t result = addBinding(a1, v37, v26, *(unsigned __int8 **)(v31 + 8 * (int)v27), a5);
          if (result) {
            return result;
          }
        }
        else
        {
          v21 += 2;
          ++v141;
          *(unsigned char *)(*(void *)v26 - 1) = 2;
        }
      }
      else
      {
        v21 += 2;
      }
      if (++v20 == v22) {
        goto LABEL_44;
      }
    }
  }
  int v21 = 0;
  int v141 = 0;
LABEL_44:
  *(_DWORD *)(a1 + 732) = v21;
  BOOL v40 = (uint64_t *)*((void *)v12 + 2);
  if (v40)
  {
    uint64_t v41 = *v40;
    uint64_t v42 = v144;
    int v43 = v141;
    if (*(unsigned char *)(*v40 - 1))
    {
      uint64_t v44 = v138;
      if (v21 < 1) {
        goto LABEL_58;
      }
      uint64_t v45 = 0;
      while (*(void *)(v144 + 8 * v45) != v41)
      {
        v45 += 2;
        if (v21 <= (int)v45) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      LODWORD(v45) = -1;
      uint64_t v44 = v138;
    }
  }
  else
  {
    LODWORD(v45) = -1;
    uint64_t v44 = v138;
    uint64_t v42 = v144;
    int v43 = v141;
  }
  *(_DWORD *)(a1 + 736) = v45;
LABEL_58:
  if ((int)v13 >= 1)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 24 * v13;
    do
    {
      uint64_t v48 = *((void *)v12 + 4);
      uint64_t v49 = *(void *)(v48 + v46);
      uint64_t v50 = *(void *)v49;
      if (!*(unsigned char *)(*(void *)v49 - 1))
      {
        int v51 = *(unsigned __int8 **)(v48 + v46 + 16);
        if (v51)
        {
          int v52 = *(void **)(v49 + 8);
          if (v52)
          {
            if (*(unsigned char *)(v49 + 17))
            {
              uint64_t result = addBinding(a1, v52, v49, v51, a5);
              uint64_t v42 = v144;
              if (result) {
                return result;
              }
              goto LABEL_61;
            }
            *(unsigned char *)(v50 - 1) = 2;
            ++v43;
          }
          else
          {
            *(unsigned char *)(v50 - 1) = 1;
          }
          uint64_t v53 = (void *)(v42 + 8 * v21);
          *uint64_t v53 = **(void **)(v48 + v46);
          v21 += 2;
          v53[1] = *(void *)(v48 + v46 + 16);
        }
      }
LABEL_61:
      v46 += 24;
    }
    while (v47 != v46);
  }
  uint64_t v54 = v21;
  *(void *)(v42 + 8 * v21) = 0;
  if (!v43)
  {
LABEL_143:
    LODWORD(v65) = 0;
LABEL_144:
    if ((int)v65 < (int)v54)
    {
      uint64_t v113 = (int)v65;
      do
      {
        *(unsigned char *)(*(void *)(v42 + 8 * v113) - 1) = 0;
        v113 += 2;
      }
      while (v113 < v54);
    }
    for (uint64_t i = *a5; i; uint64_t i = *(void *)(i + 8))
      *(unsigned char *)(**(void **)(i + 24) - 1) = 0;
    if (*(unsigned char *)(a1 + 464))
    {
      uint64_t v115 = *((void *)v12 + 1);
      if (v115)
      {
        uint64_t v116 = *(void *)(v115 + 8);
        if (!v116) {
          return 27;
        }
        uint64_t v117 = *v137;
        do
          int v118 = *v117++;
        while (v118 != 58);
LABEL_157:
        uint64_t v119 = **(char ***)v116;
        if (*(unsigned char *)(a1 + 465)) {
          BOOL v120 = v119 == 0;
        }
        else {
          BOOL v120 = 1;
        }
        if (v120)
        {
          LODWORD(v121) = 0;
        }
        else
        {
          uint64_t v121 = 0;
          while (v119[v121++])
            ;
        }
        uint64_t v123 = 0;
        v137[1] = v117;
        signed int v124 = *(_DWORD *)(v116 + 40);
        v137[2] = v119;
        *((_DWORD *)v137 + 7) = v124;
        *((_DWORD *)v137 + 8) = v121;
        while (v117[v123++])
          ;
        if (v124 > (int)(v121 ^ 0x7FFFFFFF) || (int)((v121 + v124) ^ 0x7FFFFFFF) <= (int)v123 - 1) {
          return 1;
        }
        int v126 = v123 + v121 + v124;
        if (v126 <= *(_DWORD *)(v116 + 44))
        {
          unint64_t v129 = *(char **)(v116 + 32);
        }
        else
        {
          if (v126 > 2147483623) {
            return 1;
          }
          int v127 = v126 + 24;
          unsigned int v128 = (char *)(*(uint64_t (**)(void, void))(a1 + 32))(*(void *)(a1 + 24), v126 + 24);
          if (!v128) {
            return 1;
          }
          unint64_t v129 = v128;
          *(_DWORD *)(v116 + 44) = v127;
          memcpy(v128, *(const void **)(v116 + 32), *(int *)(v116 + 40));
          uint64_t v130 = *(void **)(a1 + 696);
          for (j = *(void *)(v116 + 32); v130; uint64_t v130 = (void *)*v130)
          {
            if (v130[3] == j) {
              v130[3] = v129;
            }
          }
          (*(void (**)(void, uint64_t))(a1 + 48))(*(void *)(a1 + 24), j);
          *(void *)(v116 + 32) = v129;
          signed int v124 = *(_DWORD *)(v116 + 40);
        }
        int v132 = &v129[v124];
        memcpy(v132, v117, v123);
        if (v121)
        {
          v132[v123 - 1] = *(unsigned char *)(a1 + 900);
          memcpy(&v132[v123], **(const void ***)v116, (int)v121);
        }
        uint64_t result = 0;
        unsigned __int8 *v137 = *(char **)(v116 + 32);
        return result;
      }
      uint64_t v116 = *(void *)(v44 + 312);
      if (v116)
      {
        uint64_t v117 = *v137;
        goto LABEL_157;
      }
    }
    return 0;
  }
  unsigned int v55 = *(unsigned __int8 *)(a1 + 768);
  if (v55 > 0x1F) {
    return 1;
  }
  if (!((2 * v43) >> v55))
  {
    uint64_t v58 = *(void *)(a1 + 760);
    int v59 = 1 << v55;
    if (v58) {
      goto LABEL_85;
    }
    goto LABEL_83;
  }
  unsigned __int8 v56 = *(unsigned char *)(a1 + 768);
  while (v43 >> v56++)
    ;
  *(unsigned char *)(a1 + 768) = v56;
  if (v56 > 2u)
  {
    if (v56 >= 0x20u)
    {
LABEL_164:
      *(unsigned char *)(a1 + 768) = v55;
      return 1;
    }
  }
  else
  {
    unsigned __int8 v56 = 3;
    *(unsigned char *)(a1 + 768) = 3;
  }
  uint64_t v60 = (*(uint64_t (**)(void, void, uint64_t))(a1 + 40))(*(void *)(a1 + 24), *(void *)(a1 + 752), 24 << v56);
  if (!v60) {
    goto LABEL_164;
  }
  *(void *)(a1 + 752) = v60;
  int v59 = 1 << v56;
  uint64_t v42 = v144;
LABEL_83:
  uint64_t v61 = v59 - 1;
  uint64_t v62 = (void *)(*(void *)(a1 + 752) + 24 * v59 - 24);
  uint64_t v58 = 0xFFFFFFFFLL;
  do
  {
    *uint64_t v62 = 0xFFFFFFFFLL;
    v62 -= 3;
  }
  while (v61--);
LABEL_85:
  uint64_t v64 = v58 - 1;
  *(void *)(a1 + 760) = v58 - 1;
  if ((int)v54 < 1) {
    goto LABEL_143;
  }
  uint64_t v65 = 0;
  int v66 = (uint64_t *)(v44 + 80);
  unint64_t v67 = (v59 - 1);
  uint64_t v133 = ~v67;
  int v134 = v59;
  int v136 = v59 - 1;
  unint64_t v140 = v67 >> 2;
  uint64_t v142 = v64;
  int v135 = (uint64_t *)(v44 + 80);
  while (1)
  {
    uint64_t v68 = *(char **)(v42 + 8 * v65);
    if (*(v68 - 1) != 2)
    {
      *(v68 - 1) = 0;
      goto LABEL_141;
    }
    v148[0] = 0;
    uint64_t v69 = a1;
    do
    {
      uint64_t v70 = v69;
      uint64_t v69 = *(void *)(v69 + 904);
    }
    while (v69);
    uint64_t v71 = *(void *)(v70 + 928);
    v145.i64[0] = 0x736F6D6570736575;
    v145.i64[1] = v71 ^ 0x646F72616E646F6DLL;
    uint64_t v146 = 0x6C7967656E657261;
    uint64_t v147 = v71 ^ 0x7465646279746573;
    v148[1] = v148;
    v148[2] = 0;
    *(v68 - 1) = 0;
    BOOL v72 = lookup(a1, v66, v68, 0);
    if (!v72) {
      return 1;
    }
    uint64_t v73 = *((void *)v72 + 1);
    if (!v73) {
      return 1;
    }
    uint64_t v74 = *(void *)(v73 + 8);
    if (!v74) {
      return 27;
    }
    uint64_t v75 = *(int *)(v74 + 40);
    if ((int)v75 > 0)
    {
      int v76 = v43;
      for (uint64_t k = 0; k < v75; ++k)
      {
        char v78 = *(unsigned char *)(*(void *)(v74 + 32) + k);
        uint64_t v79 = *(unsigned char **)(a1 + 816);
        if (v79 == *(unsigned char **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792))) {
            return 1;
          }
          uint64_t v79 = *(unsigned char **)(a1 + 816);
        }
        *(void *)(a1 + 816) = v79 + 1;
        *uint64_t v79 = v78;
        uint64_t v75 = *(int *)(v74 + 40);
      }
      int v43 = v76;
      uint64_t v44 = v138;
    }
    sip24_update(v145.i64, *(char **)(v74 + 32), v75);
    do
      int v80 = *v68++;
    while (v80 != 58);
    if (*v68)
    {
      uint64_t v81 = 0;
      do
        uint64_t v82 = &v68[v81++];
      while (v82[1]);
    }
    else
    {
      uint64_t v81 = 0;
    }
    sip24_update(v145.i64, v68, v81);
    do
    {
      int v83 = *(char **)(a1 + 816);
      if (v83 == *(char **)(a1 + 808))
      {
        if (!poolGrow((uint64_t *)(a1 + 792))) {
          return 1;
        }
        int v83 = *(char **)(a1 + 816);
      }
      char v84 = *v68;
      *(void *)(a1 + 816) = v83 + 1;
      *int v83 = v84;
    }
    while (*v68++);
    sip24_final(&v145);
    uint64_t v87 = v86;
    int v88 = v136 & v86;
    uint64_t v89 = *(void *)(a1 + 752);
    uint64_t v90 = (int)(v136 & v86);
    uint64_t v91 = v142;
    if (*(void *)(v89 + 24 * v90) == v142) {
      break;
    }
LABEL_133:
    uint64_t v42 = v144;
    if (*(unsigned char *)(a1 + 465))
    {
      *(unsigned char *)(*(void *)(a1 + 816) - 1) = *(unsigned char *)(a1 + 900);
      uint64_t v107 = **(char ***)v74;
      do
      {
        uint64_t v108 = *(unsigned char **)(a1 + 816);
        if (v108 == *(unsigned char **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792))) {
            return 1;
          }
          uint64_t v108 = *(unsigned char **)(a1 + 816);
          uint64_t v42 = v144;
          uint64_t v91 = v142;
        }
        char v109 = *v107;
        *(void *)(a1 + 816) = v108 + 1;
        *uint64_t v108 = v109;
      }
      while (*v107++);
    }
    uint64_t v111 = *(void *)(a1 + 824);
    *(void *)(a1 + 824) = *(void *)(a1 + 816);
    *(void *)(v42 + 8 * v65) = v111;
    long long v112 = (uint64_t *)(*(void *)(a1 + 752) + 24 * (int)v90);
    *long long v112 = v91;
    v112[1] = v87;
    v112[2] = v111;
    if (!--v43)
    {
      LODWORD(v65) = v65 + 2;
      goto LABEL_144;
    }
    int v66 = v135;
LABEL_141:
    v65 += 2;
    if ((int)v54 <= (int)v65) {
      goto LABEL_144;
    }
  }
  int v92 = 0;
  while (1)
  {
    if (v87 == *(void *)(v89 + 24 * v90 + 8))
    {
      int v93 = *(unsigned char **)(a1 + 824);
      uint64_t v94 = *(unsigned __int8 **)(v89 + 24 * v90 + 16);
      BOOL v95 = *v93 == 0;
      if (*v93) {
        BOOL v96 = *v93 == *v94;
      }
      else {
        BOOL v96 = 0;
      }
      if (v96)
      {
        uint64_t v97 = v94 + 1;
        uint64_t v98 = v93 + 1;
        do
        {
          int v100 = *v98++;
          int v99 = v100;
          BOOL v95 = v100 == 0;
          int v102 = *v97++;
          int v101 = v102;
          if (v99) {
            BOOL v103 = v99 == v101;
          }
          else {
            BOOL v103 = 0;
          }
        }
        while (v103);
      }
      if (v95) {
        return 8;
      }
    }
    if (!v92) {
      int v92 = ((v87 & (unint64_t)v133) >> (*(unsigned char *)(a1 + 768) - 1)) & v140 | 1;
    }
    BOOL v104 = __OFSUB__(v88, v92);
    int v105 = v88 - v92;
    if (v105 < 0 != v104) {
      int v106 = v134;
    }
    else {
      int v106 = 0;
    }
    int v88 = v105 + v106;
    uint64_t v90 = v88;
    if (*(void *)(v89 + 24 * v88) != v142) {
      goto LABEL_133;
    }
  }
}

uint64_t freeBindings(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (void *)result;
    do
    {
      uint64_t v4 = (uint64_t (*)(void, void))v3[27];
      if (v4) {
        uint64_t result = v4(v3[1], **(void **)v2);
      }
      uint64_t v6 = *(void **)v2;
      uint64_t v5 = *(void *)(v2 + 8);
      *(void *)(v2 + 8) = v3[90];
      v3[90] = v2;
      v6[1] = *(void *)(v2 + 16);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t epilogProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  *(void *)(a1 + 536) = epilogProcessor;
  *(void *)(a1 + 552) = a2;
  while (1)
  {
    int v7 = (**(uint64_t (***)(void))(a1 + 296))();
    if (!accountingDiffTolerated(a1, v7, v5, 0, 0)) {
      return 43;
    }
    *(void *)(a1 + 560) = 0;
    uint64_t result = 9;
    if (v7 > 12)
    {
      if (v7 == 13)
      {
        if (!reportComment(a1, *(void *)(a1 + 296), v5, 0)) {
          return 1;
        }
      }
      else
      {
        if (v7 != 15) {
          return result;
        }
        if (*(void *)(a1 + 168)) {
          reportDefault((void *)a1, *(void *)(a1 + 296), v5, 0);
        }
      }
      goto LABEL_12;
    }
    if (v7 != 11) {
      break;
    }
    if (!reportProcessingInstruction(a1, *(void *)(a1 + 296), v5, 0)) {
      return 1;
    }
LABEL_12:
    uint64_t v5 = 0;
    *(void *)(a1 + 552) = 0;
    int v9 = *(_DWORD *)(a1 + 912);
    if (v9 == 2) {
      return 35;
    }
    if (v9 == 3)
    {
LABEL_26:
      uint64_t result = 0;
      *a4 = v5;
      return result;
    }
  }
  switch(v7)
  {
    case -4:
      goto LABEL_26;
    case -3:
      return result;
    case -2:
      if (!*(unsigned char *)(a1 + 916)) {
        goto LABEL_26;
      }
      return 6;
    case -1:
      if (!*(unsigned char *)(a1 + 916)) {
        goto LABEL_26;
      }
      return 5;
    case 0:
      *(void *)(a1 + 552) = 0;
      return 4;
    default:
      if (v7 != -15) {
        return result;
      }
      if (*(void *)(a1 + 168))
      {
        reportDefault((void *)a1, *(void *)(a1 + 296), v5, 0);
        if (*(_DWORD *)(a1 + 912) == 2) {
          return 35;
        }
      }
      uint64_t result = 0;
      *a4 = 0;
      break;
  }
  return result;
}

uint64_t doCdataSection(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, int a6, int a7)
{
  uint64_t v11 = *a3;
  uint64_t v29 = *a3;
  if (*(void *)(a1 + 296) == a2)
  {
    char v12 = (uint64_t *)(a1 + 552);
    *(void *)(a1 + 552) = v11;
    uint64_t v13 = (void *)(a1 + 560);
  }
  else
  {
    char v12 = *(uint64_t **)(a1 + 576);
    uint64_t v13 = v12 + 1;
  }
  uint64_t *v12 = v11;
  *a3 = 0;
  while (2)
  {
    uint64_t v28 = v11;
    int v14 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    if (!accountingDiffTolerated(a1, v14, v29, v28, a7)) {
      return 43;
    }
    uint64_t v15 = v28;
    void *v13 = v28;
    switch(v14)
    {
      case -4:
      case -1:
        if (a6) {
          goto LABEL_29;
        }
        return 20;
      case -3:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        goto LABEL_27;
      case -2:
        if (!a6) {
          return 6;
        }
LABEL_29:
        uint64_t result = 0;
        *a5 = v29;
        return result;
      case 0:
        uint64_t *v12 = v15;
        return 4;
      case 6:
        int v16 = *(void (**)(void, uint64_t, void))(a1 + 128);
        if (!v16) {
          goto LABEL_15;
        }
        if (*(unsigned char *)(a2 + 132))
        {
          v16(*(void *)(a1 + 8), v29, (v15 - v29));
        }
        else
        {
          while (1)
          {
            uint64_t v17 = *(void *)(a1 + 104);
            uint64_t v27 = *(void *)(a1 + 96);
            unsigned int v18 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(a2 + 112))(a2, &v29, v15, &v27, v17);
            void *v13 = v28;
            v16(*(void *)(a1 + 8), *(void *)(a1 + 96), v27 - *(void *)(a1 + 96));
            if (v18 <= 1) {
              break;
            }
            uint64_t *v12 = v29;
            uint64_t v15 = v28;
          }
        }
        goto LABEL_17;
      case 7:
        uint64_t v19 = *(void (**)(void, uint64_t *, uint64_t))(a1 + 128);
        if (v19)
        {
          LOBYTE(v27) = 10;
          v19(*(void *)(a1 + 8), &v27, 1);
        }
        else
        {
LABEL_15:
          if (*(void *)(a1 + 168)) {
            reportDefault((void *)a1, a2, v29, v15);
          }
        }
LABEL_17:
        uint64_t v11 = v28;
        uint64_t v29 = v28;
        uint64_t *v12 = v28;
        int v20 = *(_DWORD *)(a1 + 912);
        if (v20 != 2)
        {
          if (v20 == 3)
          {
            uint64_t result = 0;
            *a5 = v11;
            return result;
          }
          continue;
        }
        return 35;
      default:
        if (v14 == 40)
        {
          uint64_t v22 = *(void (**)(void))(a1 + 160);
          if (v22)
          {
            v22(*(void *)(a1 + 8));
            uint64_t v23 = a5;
          }
          else
          {
            uint64_t v23 = a5;
            if (*(void *)(a1 + 168)) {
              reportDefault((void *)a1, a2, v29, v15);
            }
          }
          uint64_t v24 = v28;
          *a3 = v28;
          *uint64_t v23 = v24;
          if (*(_DWORD *)(a1 + 912) == 2) {
            return 35;
          }
          else {
            return 0;
          }
        }
        else
        {
LABEL_27:
          uint64_t *v12 = v15;
          return 23;
        }
    }
  }
}

uint64_t cdataSectionProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t result = doCdataSection(a1, *(void *)(a1 + 296), &v9, a3, a4, *(unsigned char *)(a1 + 916) == 0, 0);
  if (!result)
  {
    uint64_t v8 = v9;
    if (v9)
    {
      if (*(void *)(a1 + 904))
      {
        *(void *)(a1 + 536) = externalEntityContentProcessor;
        return externalEntityContentProcessor(a1, v8, a3, (uint64_t)a4);
      }
      else
      {
        *(void *)(a1 + 536) = contentProcessor;
        return contentProcessor(a1);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t setElementTypePrefix(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 680);
  uint64_t v6 = *(char **)a2;
  while (1)
  {
    if (!v6[v4]) {
      return 1;
    }
    if (v6[v4] == 58) {
      break;
    }
    ++v4;
  }
  for (; v4; --v4)
  {
    int v7 = *(unsigned char **)(v5 + 184);
    if (v7 == *(unsigned char **)(v5 + 176))
    {
      uint64_t result = poolGrow((uint64_t *)(v5 + 160));
      if (!result) {
        return result;
      }
      int v7 = *(unsigned char **)(v5 + 184);
    }
    char v9 = *v6++;
    *(void *)(v5 + 184) = v7 + 1;
    *int v7 = v9;
  }
  uint64_t v10 = *(unsigned char **)(v5 + 184);
  if (v10 == *(unsigned char **)(v5 + 176))
  {
    uint64_t result = poolGrow((uint64_t *)(v5 + 160));
    if (!result) {
      return result;
    }
    uint64_t v10 = *(unsigned char **)(v5 + 184);
  }
  *(void *)(v5 + 184) = v10 + 1;
  *uint64_t v10 = 0;
  uint64_t result = (uint64_t)lookup(a1, (uint64_t *)(v5 + 120), *(char **)(v5 + 192), 0x10uLL);
  if (result)
  {
    uint64_t v11 = *(void *)(v5 + 192);
    if (*(void *)result == v11) {
      *(void *)(v5 + 192) = *(void *)(v5 + 184);
    }
    else {
      *(void *)(v5 + 184) = v11;
    }
    *(void *)(a2 + 8) = result;
    return 1;
  }
  return result;
}

uint64_t addBinding(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5)
{
  unsigned __int8 v10 = *a4;
  uint64_t v11 = (unsigned char *)*a2;
  if (*a4)
  {
    if (v11)
    {
      if (*v11 == 120 && v11[1] == 109 && v11[2] == 108)
      {
        int v12 = v11[3];
        if (!v11[3])
        {
          LODWORD(v11) = 1;
          uint64_t result = 38;
LABEL_12:
          unint64_t v14 = 0;
          int v15 = 1;
          int v16 = 1;
          while (1)
          {
            unint64_t v17 = v14;
            if (v16 && (v14 > 0x24 || addBinding_xmlNamespace[v14] != v10)) {
              int v16 = 0;
            }
            if (v15) {
              int v18 = v12;
            }
            else {
              int v18 = 0;
            }
            if (v18 == 1 && (v17 > 0x1D || addBinding_xmlnsNamespace[v17] != v10)) {
              int v15 = 0;
            }
            if (*(unsigned char *)(a1 + 464) && *(unsigned __int8 *)(a1 + 900) == v10) {
              break;
            }
LABEL_27:
            unint64_t v14 = v17 + 1;
            unsigned __int8 v10 = a4[v17 + 1];
            if (!v10) {
              goto LABEL_28;
            }
          }
          switch(v10)
          {
            case '!':
            case '#':
            case '$':
            case '%':
            case '&':
            case '\'':
            case '(':
            case ')':
            case '*':
            case '+':
            case ',':
            case '-':
            case '.':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '=':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '[':
            case ']':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            case '~':
              goto LABEL_27;
            default:
              uint64_t result = 2;
              break;
          }
          return result;
        }
        if (v12 == 110 && v11[4] == 115 && !v11[5]) {
          return 39;
        }
      }
      LODWORD(v11) = 0;
    }
    int v12 = 1;
    uint64_t result = 40;
    goto LABEL_12;
  }
  if (v11) {
    return 28;
  }
  LODWORD(v14) = 0;
  int v16 = 1;
  uint64_t result = 40;
  int v15 = 1;
LABEL_28:
  if (v16) {
    BOOL v19 = v14 == 36;
  }
  else {
    BOOL v19 = 0;
  }
  int v20 = v19;
  if (v11 == v20)
  {
    if (v15 && v14 == 29) {
      return 40;
    }
    if (*(unsigned char *)(a1 + 900)) {
      size_t v21 = (v14 + 1);
    }
    else {
      size_t v21 = v14;
    }
    uint64_t v22 = *(void *)(a1 + 720);
    if (v22)
    {
      if ((int)v21 <= *(_DWORD *)(v22 + 44))
      {
        uint64_t v23 = *(void **)(v22 + 32);
        goto LABEL_54;
      }
      if (v21 <= 0x7FFFFFE7)
      {
        uint64_t v23 = (void *)(*(uint64_t (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 24), *(void *)(v22 + 32), (v21 + 24));
        if (v23)
        {
          *(void *)(v22 + 32) = v23;
          *(_DWORD *)(v22 + 44) = v21 + 24;
LABEL_54:
          *(void *)(a1 + 720) = *(void *)(v22 + 8);
          goto LABEL_55;
        }
      }
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 48);
      uint64_t result = 1;
      if (!v22 || v21 > 0x7FFFFFE7) {
        return result;
      }
      uint64_t v23 = (void *)(*(uint64_t (**)(void, void))(a1 + 32))(*(void *)(a1 + 24), (v21 + 24));
      *(void *)(v22 + 32) = v23;
      if (v23)
      {
        *(_DWORD *)(v22 + 44) = v21 + 24;
LABEL_55:
        *(_DWORD *)(v22 + 40) = v21;
        memcpy(v23, a4, v21);
        if (*(unsigned char *)(a1 + 900)) {
          *(unsigned char *)(*(void *)(v22 + 32) + (int)v21 - 1) = *(unsigned char *)(a1 + 900);
        }
        *(void *)uint64_t v22 = a2;
        *(void *)(v22 + 16) = a2[1];
        *(void *)(v22 + 24) = a3;
        if (!*a4 && (void *)(*(void *)(a1 + 680) + 304) == a2) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v22;
        }
        a2[1] = v24;
        *(void *)(v22 + 8) = *a5;
        *a5 = v22;
        if (a3)
        {
          uint64_t v25 = *(void (**)(void, void, unsigned __int8 *))(a1 + 208);
          if (v25)
          {
            if (a2[1]) {
              uint64_t v26 = a4;
            }
            else {
              uint64_t v26 = 0;
            }
            v25(*(void *)(a1 + 8), *a2, v26);
          }
        }
        return 0;
      }
      (*(void (**)(void, uint64_t))(a1 + 48))(*(void *)(a1 + 24), v22);
    }
    return 1;
  }
  return result;
}

uint64_t externalEntityContentProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = doContent(a1, 1, *(void *)(a1 + 296), a2, a3, a4, *(unsigned char *)(a1 + 916) == 0, 1);
  if (!v5 && !storeRawNames(a1)) {
    return 1;
  }
  return v5;
}

uint64_t appendAttributeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  uint64_t v10 = a4;
  uint64_t v14 = *(void *)(a1 + 680);
  uint64_t v41 = a4;
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 32))(a2, a4, a5, &v41);
  if (!accountingDiffTolerated(a1, v15, v10, v41, a7)) {
    return 43;
  }
  while (2)
  {
    uint64_t result = 0;
    switch(v15)
    {
      case -4:
        return result;
      case -3:
        uint64_t v41 = v10 + *(int *)(a2 + 128);
        goto LABEL_5;
      case -2:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
        goto LABEL_58;
      case -1:
        if (*(void *)(a1 + 296) == a2) {
          *(void *)(a1 + 552) = v10;
        }
        return 4;
      case 0:
        if (*(void *)(a1 + 296) == a2) {
          *(void *)(a1 + 552) = v41;
        }
        return 4;
      case 6:
        if (!poolAppend(a6, a2, v10, v41)) {
          return 1;
        }
        goto LABEL_55;
      case 7:
        goto LABEL_5;
      case 9:
        char v39 = 0;
        char v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 88))(a2, v10 + *(int *)(a2 + 128), v41 - *(int *)(a2 + 128));
        if (v39)
        {
          accountingDiffTolerated(a1, 9, (uint64_t)&v39, (uint64_t)v40, 1);
          int v18 = (unsigned char *)a6[3];
          if (v18 == (unsigned char *)a6[2])
          {
            if (!poolGrow(a6)) {
              return 1;
            }
            int v18 = (unsigned char *)a6[3];
          }
          char v19 = v39;
          a6[3] = (uint64_t)(v18 + 1);
          unsigned char *v18 = v19;
          goto LABEL_55;
        }
        uint64_t v27 = (char *)poolStoreString((uint64_t *)(a1 + 840), a2, v10 + *(int *)(a2 + 128), v41 - *(int *)(a2 + 128));
        if (!v27) {
          return 1;
        }
        uint64_t v28 = lookup(a1, (uint64_t *)v14, v27, 0);
        uint64_t v29 = v28;
        *(void *)(a1 + 864) = *(void *)(a1 + 872);
        if ((uint64_t *)(v14 + 160) == a6)
        {
          if (*(_DWORD *)(a1 + 524))
          {
            if (*(unsigned char *)(v14 + 258))
            {
              if (!*(void *)(a1 + 576)) {
                goto LABEL_36;
              }
            }
            else if (!*(unsigned char *)(v14 + 257))
            {
              goto LABEL_36;
            }
          }
        }
        else if (!*(unsigned char *)(v14 + 257) || *(unsigned char *)(v14 + 258))
        {
LABEL_36:
          if (!v28) {
            return 11;
          }
          if (!*((unsigned char *)v28 + 58)) {
            return 24;
          }
          goto LABEL_45;
        }
        if (!v28) {
          goto LABEL_55;
        }
LABEL_45:
        if (!*((unsigned char *)v28 + 56))
        {
          if (*((void *)v28 + 6))
          {
            uint64_t v38 = *(void *)(a1 + 296);
            uint64_t result = 15;
            goto LABEL_72;
          }
          uint64_t v30 = *((void *)v28 + 1);
          if (!v30)
          {
            uint64_t v38 = *(void *)(a1 + 296);
            uint64_t result = 16;
            goto LABEL_72;
          }
          uint64_t v31 = *((int *)v28 + 4);
          *((unsigned char *)v28 + 56) = 1;
          uint64_t v32 = a1;
          do
          {
            uint64_t v33 = (_DWORD *)v32;
            uint64_t v32 = *(void *)(v32 + 904);
          }
          while (v32);
          ++v33[242];
          unsigned int v34 = v33[243] + 1;
          v33[243] = v34;
          unsigned int v35 = v33[244];
          if (v34 > v35) {
            v33[244] = v35 + 1;
          }
          uint64_t result = appendAttributeValue(a1, *(void *)(a1 + 448), a3, v30, v30 + v31, a6, 1);
          uint64_t v36 = a1;
          do
          {
            uint64_t v37 = v36;
            uint64_t v36 = *(void *)(v36 + 904);
          }
          while (v36);
          --*(_DWORD *)(v37 + 972);
          *((unsigned char *)v29 + 56) = 0;
          if (result) {
            return result;
          }
LABEL_55:
          uint64_t v10 = v41;
          int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 32))(a2, v41, a5, &v41);
          if (!accountingDiffTolerated(a1, v15, v10, v41, a7)) {
            return 43;
          }
          continue;
        }
        uint64_t v38 = *(void *)(a1 + 296);
        uint64_t result = 12;
LABEL_72:
        if (v38 == a2) {
          *(void *)(a1 + 552) = v10;
        }
        return result;
      case 10:
        unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a2, v10);
        if ((v20 & 0x80000000) != 0)
        {
          if (*(void *)(a1 + 296) == a2) {
            *(void *)(a1 + 552) = v10;
          }
          return 14;
        }
        if (a3 || v20 != 32 || (uint64_t v21 = a6[3], v21 != a6[4]) && *(unsigned char *)(v21 - 1) != 32)
        {
          int v22 = XmlUtf8Encode(v20, v40);
          if (v22 >= 1)
          {
            uint64_t v23 = v22;
            uint64_t v24 = v40;
            do
            {
              uint64_t v25 = (unsigned char *)a6[3];
              if (v25 == (unsigned char *)a6[2])
              {
                if (!poolGrow(a6)) {
                  return 1;
                }
                uint64_t v25 = (unsigned char *)a6[3];
              }
              char v26 = *v24++;
              a6[3] = (uint64_t)(v25 + 1);
              unsigned char *v25 = v26;
              --v23;
            }
            while (v23);
          }
        }
        goto LABEL_55;
      default:
        if (v15 != 39)
        {
LABEL_58:
          if (*(void *)(a1 + 296) == a2) {
            *(void *)(a1 + 552) = v10;
          }
          return 23;
        }
LABEL_5:
        unint64_t v17 = (unsigned char *)a6[3];
        if (a3 || v17 != (unsigned char *)a6[4] && *(v17 - 1) != 32)
        {
          if (v17 == (unsigned char *)a6[2])
          {
            if (!poolGrow(a6)) {
              return 1;
            }
            unint64_t v17 = (unsigned char *)a6[3];
          }
          a6[3] = (uint64_t)(v17 + 1);
          *unint64_t v17 = 32;
        }
        goto LABEL_55;
    }
  }
}

uint64_t internalEntityProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 576);
  if (!v4) {
    return 23;
  }
  uint64_t v9 = *(void *)(v4 + 24);
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = v10 + *(int *)(v9 + 20);
  uint64_t v12 = v10 + *(int *)(v9 + 16);
  uint64_t v22 = v11;
  if (*(unsigned char *)(v9 + 57))
  {
    uint64_t v13 = (**(uint64_t (***)(void))(a1 + 448))();
    uint64_t v14 = doProlog(a1, *(void *)(a1 + 448), v11, v12, v13, v22, &v22, 0, 1);
  }
  else
  {
    uint64_t v14 = doContent(a1, *(unsigned int *)(v4 + 32), *(void *)(a1 + 448), v11, v12, &v22, 0, 1);
  }
  uint64_t v15 = v14;
  if (!v14)
  {
    uint64_t v17 = a1;
    if (v12 == v22 || (uint64_t v17 = a1, *(_DWORD *)(a1 + 912) != 3))
    {
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = *(void *)(v17 + 904);
      }
      while (v17);
      --*(_DWORD *)(v18 + 972);
      *(unsigned char *)(v9 + 56) = 0;
      uint64_t v19 = *(void *)(v4 + 16);
      *(void *)(a1 + 576) = v19;
      *(void *)(v4 + 16) = *(void *)(a1 + 584);
      *(void *)(a1 + 584) = v4;
      if (v19 && *(_DWORD *)(a1 + 912) == 3)
      {
        return 0;
      }
      else if (*(unsigned char *)(v9 + 57))
      {
        *(void *)(a1 + 536) = prologProcessor;
        uint64_t v20 = (**(uint64_t (***)(void))(a1 + 296))();
        LOBYTE(v21) = 1;
        return doProlog(a1, *(void *)(a1 + 296), a2, a3, v20, v22, a4, *(unsigned char *)(a1 + 916) == 0, v21);
      }
      else
      {
        *(void *)(a1 + 536) = contentProcessor;
        uint64_t v15 = doContent(a1, *(void *)(a1 + 904) != 0, *(void *)(a1 + 296), a2, a3, a4, *(unsigned char *)(a1 + 916) == 0, 0);
        if (!v15 && !storeRawNames(a1)) {
          return 1;
        }
      }
    }
    else
    {
      uint64_t v15 = 0;
      *(_DWORD *)(v9 + 20) = v22 - *(_DWORD *)(v9 + 8);
    }
  }
  return v15;
}

unsigned char *normalizeLines(unsigned char *result)
{
  while (1)
  {
    int v1 = *result;
    if (!*result) {
      break;
    }
    if (v1 == 13)
    {
      uint64_t v2 = result;
      do
      {
        if (v1 == 13)
        {
          *uint64_t v2 = 10;
          int v3 = *++result;
          if (v3 == 10) {
            ++result;
          }
        }
        else
        {
          ++result;
          *uint64_t v2 = v1;
        }
        ++v2;
        int v1 = *result;
      }
      while (*result);
      *uint64_t v2 = 0;
      return result;
    }
    ++result;
  }
  return result;
}

uint64_t hashTableClear(uint64_t result)
{
  int v1 = (void *)result;
  if (*(void *)(result + 16))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, void))(v1[4] + 24))(*(void *)v1[4], *(void *)(*v1 + 8 * v2));
      *(void *)(*v1 + 8 * v2++) = 0;
    }
    while (v2 < v1[2]);
  }
  v1[3] = 0;
  return result;
}

uint64_t hashTableDestroy(uint64_t *a1)
{
  if (a1[2])
  {
    unint64_t v2 = 0;
    do
      (*(void (**)(void, void))(a1[4] + 24))(*(void *)a1[4], *(void *)(*a1 + 8 * v2++));
    while (v2 < a1[2]);
  }
  int v3 = (uint64_t *)a1[4];
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v3[3];
  uint64_t v5 = *v3;
  uint64_t v6 = *a1;
  return v4(v5, v6);
}

unint64_t _INTERNAL_trim_to_complete_utf8_characters(unint64_t result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2 > result)
  {
    uint64_t v3 = 0;
    unint64_t v4 = *a2;
    while (1)
    {
      char v6 = *(unsigned char *)--v4;
      char v5 = v6;
      if ((v6 & 0xF8) == 0xF0)
      {
        if ((unint64_t)(v3 - 3) <= 0xFFFFFFFFFFFFFFFBLL)
        {
          v2 += 3;
          break;
        }
      }
      else if ((v5 & 0xF0) == 0xE0)
      {
        if ((unint64_t)(v3 - 2) <= 0xFFFFFFFFFFFFFFFCLL)
        {
          v2 += 2;
          break;
        }
      }
      else
      {
        if ((v5 & 0xE0) != 0xC0)
        {
          if ((v5 & 0x80) == 0) {
            break;
          }
          goto LABEL_12;
        }
        if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          ++v2;
          break;
        }
      }
      uint64_t v3 = 0;
LABEL_12:
      ++v3;
      unint64_t v2 = v4;
      if (v4 <= result)
      {
        unint64_t v2 = result;
        break;
      }
    }
  }
  *a2 = v2;
  return result;
}

uint64_t XmlUtf8Encode(unsigned int a1, unsigned char *a2)
{
  if ((a1 & 0x80000000) != 0) {
    return 0;
  }
  if (a1 <= 0x7F)
  {
    *a2 = a1;
    return 1;
  }
  if (a1 <= 0x7FF)
  {
    *a2 = (a1 >> 6) | 0xC0;
    a2[1] = a1 & 0x3F | 0x80;
    return 2;
  }
  if (!HIWORD(a1))
  {
    *a2 = (a1 >> 12) | 0xE0;
    a2[1] = (a1 >> 6) & 0x3F | 0x80;
    a2[2] = a1 & 0x3F | 0x80;
    return 3;
  }
  if (HIWORD(a1) > 0x10u) {
    return 0;
  }
  *a2 = (a1 >> 18) | 0xF0;
  a2[1] = (a1 >> 12) & 0x3F | 0x80;
  a2[2] = (a1 >> 6) & 0x3F | 0x80;
  a2[3] = a1 & 0x3F | 0x80;
  return 4;
}

uint64_t XmlSizeOfUnknownEncoding()
{
  return 2016;
}

void *XmlInitUnknownEncoding(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, latin1_encoding, 0x1D0uLL);
  for (uint64_t i = 0; i != 128; ++i)
  {
    if (*((unsigned char *)&latin1_encoding[17] + i)) {
      BOOL v9 = *((unsigned char *)&latin1_encoding[17] + i) == 28;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9 && i != *(_DWORD *)(a2 + 4 * i)) {
      return 0;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 993;
  do
  {
    unint64_t v12 = *(unsigned int *)(a2 + 4 * v10);
    if (v12 == -1)
    {
      *((unsigned char *)a1 + v10 + 136) = 1;
      goto LABEL_25;
    }
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t result = 0;
      if (!a3 || v12 < 0xFFFFFFFC) {
        return result;
      }
      *((unsigned char *)a1 + v10 + 136) = 3 - v12;
      *((unsigned char *)a1 + v11 - 1) = 0;
      *((_WORD *)a1 + v10 + 240) = 0;
      goto LABEL_38;
    }
    if (v12 > 0x7F)
    {
      if ((checkCharRefNumber(*(unsigned int *)(a2 + 4 * v10)) & 0x80000000) == 0)
      {
        if (WORD1(v12)) {
          return 0;
        }
        int v19 = v12 >> 5;
        if ((namingBitmap[v19 | (8 * nmstrtPages[v12 >> 8])] & (1 << v12)) != 0)
        {
          uint64_t v20 = (char *)a1 + v10;
          char v21 = 22;
        }
        else
        {
          uint64_t v20 = (char *)a1 + v10;
          if ((namingBitmap[v19 | (8 * namePages[v12 >> 8])] & (1 << v12)) != 0) {
            char v21 = 26;
          }
          else {
            char v21 = 28;
          }
        }
        v20[136] = v21;
        *((unsigned char *)a1 + v11 - 1) = XmlUtf8Encode(v12, (unsigned char *)a1 + v11);
        *((_WORD *)a1 + v10 + 240) = v12;
        goto LABEL_38;
      }
      *((unsigned char *)a1 + v10 + 136) = 0;
LABEL_25:
      *((_WORD *)a1 + v10 + 240) = -1;
      *(_WORD *)((char *)a1 + v11 - 1) = 1;
      goto LABEL_38;
    }
    int v13 = *((unsigned __int8 *)&latin1_encoding[17] + v12);
    if (*((unsigned char *)&latin1_encoding[17] + v12)) {
      BOOL v14 = v13 == 28;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14 && v10 != v12) {
      return 0;
    }
    *((unsigned char *)a1 + v10 + 136) = v13;
    int v16 = (char *)a1 + v11;
    *(v16 - 1) = 1;
    *int v16 = v12;
    if (v12) {
      __int16 v17 = v12;
    }
    else {
      __int16 v17 = -1;
    }
    *((_WORD *)a1 + v10 + 240) = v17;
LABEL_38:
    ++v10;
    v11 += 4;
  }
  while (v10 != 256);
  a1[58] = a3;
  a1[59] = a4;
  if (a3)
  {
    a1[49] = unknown_isName;
    a1[50] = unknown_isName;
    a1[51] = unknown_isName;
    a1[52] = unknown_isNmstrt;
    a1[53] = unknown_isNmstrt;
    a1[54] = unknown_isNmstrt;
    a1[55] = unknown_isInvalid;
    a1[56] = unknown_isInvalid;
    a1[57] = unknown_isInvalid;
  }
  a1[14] = unknown_toUtf8;
  a1[15] = unknown_toUtf16;
  return a1;
}

uint64_t checkCharRefNumber(uint64_t result)
{
  int v1 = (int)result >> 8;
  if ((((int)result >> 8) - 216) < 8) {
    return 0xFFFFFFFFLL;
  }
  if (v1 == 255)
  {
    if (result >> 1 == 0x7FFF) {
      return 0xFFFFFFFFLL;
    }
  }
  else if (!v1 && !*((unsigned char *)&latin1_encoding[17] + (int)result))
  {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t unknown_isName(uint64_t a1)
{
  unsigned int v1 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
  if (HIWORD(v1)) {
    return 0;
  }
  else {
    return namingBitmap[(v1 >> 5) | (8 * namePages[(unint64_t)v1 >> 8])] & (1 << v1);
  }
}

uint64_t unknown_isNmstrt(uint64_t a1)
{
  unsigned int v1 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
  if (HIWORD(v1)) {
    return 0;
  }
  else {
    return namingBitmap[(v1 >> 5) | (8 * nmstrtPages[(unint64_t)v1 >> 8])] & (1 << v1);
  }
}

uint64_t unknown_isInvalid(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
  if (WORD1(v1)) {
    return 1;
  }
  else {
    return checkCharRefNumber(v1) >> 31;
  }
}

uint64_t unknown_toUtf8(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, void **a4, uint64_t a5)
{
  char v6 = (unsigned __int8 *)*a2;
  if (v6 == a3) {
    return 0;
  }
  while (1)
  {
    uint64_t v11 = a1 + 4 * *v6;
    unsigned int v12 = *(char *)(v11 + 992);
    if (!*(unsigned char *)(v11 + 992)) {
      break;
    }
    if (a5 - (uint64_t)*a4 < *(char *)(v11 + 992)) {
      return 2;
    }
    int v13 = (unsigned char *)(v11 + 993);
    uint64_t v14 = (uint64_t)(v6 + 1);
LABEL_7:
    *a2 = v14;
    memcpy(*a4, v13, (int)v12);
    *a4 = (char *)*a4 + (int)v12;
    char v6 = (unsigned __int8 *)*a2;
    if ((unsigned __int8 *)*a2 == a3) {
      return 0;
    }
  }
  unsigned int v15 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
  unsigned int v16 = XmlUtf8Encode(v15, v18);
  if (a5 - (uint64_t)*a4 >= v16)
  {
    unsigned int v12 = v16;
    uint64_t v14 = *(unsigned __int8 *)(a1 + *(unsigned __int8 *)*a2 + 136) + *a2 - 3;
    int v13 = v18;
    goto LABEL_7;
  }
  return 2;
}

uint64_t unknown_toUtf16(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4, _WORD *a5)
{
  char v6 = (unsigned __int8 *)*a2;
  if ((unint64_t)v6 >= a3) {
    return 0;
  }
  uint64_t v11 = (_WORD *)*a4;
  while (v11 < a5)
  {
    __int16 v12 = *(_WORD *)(a1 + 2 * *v6 + 480);
    if (v12)
    {
      uint64_t v13 = (uint64_t)(v6 + 1);
    }
    else
    {
      __int16 v12 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
      uint64_t v13 = *(unsigned __int8 *)(a1 + *(unsigned __int8 *)*a2 + 136) + *a2 - 3;
    }
    *a2 = v13;
    uint64_t v14 = (_WORD *)*a4;
    *uint64_t v14 = v12;
    uint64_t v11 = v14 + 1;
    *a4 = v11;
    char v6 = (unsigned __int8 *)*a2;
    if (*a2 >= a3) {
      return 0;
    }
  }
  if (v11 == a5) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t (**XmlGetUtf8InternalEncoding())()
{
  return internal_utf8_encoding;
}

uint64_t XmlInitEncoding(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  int EncodingIndex = getEncodingIndex(a3);
  if (EncodingIndex == -1) {
    return 0;
  }
  *(unsigned char *)(a1 + 133) = EncodingIndex;
  *(void *)a1 = initScanProlog;
  *(void *)(a1 + 8) = initScanContent;
  *(void *)(a1 + 96) = initUpdatePosition;
  *(void *)(a1 + 136) = a2;
  *a2 = a1;
  return 1;
}

uint64_t getEncodingIndex(unsigned __int8 *a1)
{
  if (!a1) {
    return 6;
  }
  uint64_t v2 = 0;
  while (!streqci(a1, (unsigned __int8 *)getEncodingIndex_encodingNames[v2]))
  {
    if (++v2 == 6) {
      return 0xFFFFFFFFLL;
    }
  }
  return v2;
}

uint64_t initScanProlog(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  return initScan(encodings, a1, 0, a2, a3, a4);
}

uint64_t initScanContent(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  return initScan(encodings, a1, 1, a2, a3, a4);
}

uint64_t initUpdatePosition(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  return normal_updatePosition((uint64_t)utf8_encoding, a2, a3, a4);
}

uint64_t XmlParseXmlDecl(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t *a8, void *a9, int *a10)
{
  return doParseXmlDecl((uint64_t (*)(uint64_t, uint64_t, uint64_t))findEncoding, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t doParseXmlDecl(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, void *a8, uint64_t *a9, void *a10, int *a11)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  uint64_t v17 = *(int *)(a3 + 128);
  uint64_t v37 = a4 + 5 * v17;
  uint64_t v18 = a5 - 2 * v17;
  int v19 = parsePseudoAttribute(a3, v37, v18, &v35, (uint64_t)&v34, (uint64_t)&v36, &v37);
  uint64_t i = v35;
  if (v19) {
    BOOL v21 = v35 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21) {
    goto LABEL_6;
  }
  uint64_t v23 = v34;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, v35, v34, "version"))
  {
    if (a7) {
      *a7 = v36;
    }
    uint64_t v25 = v37;
    if (a8) {
      *a8 = v37;
    }
    if (!parsePseudoAttribute(a3, v25, v18, &v35, (uint64_t)&v34, (uint64_t)&v36, &v37)) {
      goto LABEL_6;
    }
    uint64_t i = v35;
    if (!v35)
    {
      if (!a2) {
        return 1;
      }
LABEL_6:
      uint64_t i = v37;
      goto LABEL_7;
    }
    uint64_t v23 = v34;
  }
  else if (!a2)
  {
    goto LABEL_7;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, i, v23, "encoding"))
  {
LABEL_27:
    int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, i, v23, "standalone");
    if (a2 || !v27) {
      goto LABEL_7;
    }
    uint64_t i = v36;
    uint64_t v28 = v37;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, v36, v37 - *(int *)(a3 + 128), "yes"))
    {
      if (!a11)
      {
LABEL_38:
        for (uint64_t i = v28; ; i += *(int *)(a3 + 128))
        {
          uint64_t v40 = i;
          uint64_t v38 = &v39;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, char **, uint64_t *))(a3 + 112))(a3, &v40, v18, &v38, &v40);
          unsigned int v30 = v38 == &v39 ? -1 : v39;
          BOOL v31 = v30 > 0x20;
          uint64_t v32 = (1 << v30) & 0x100002600;
          if (v31 || v32 == 0) {
            break;
          }
        }
        if (i == v18) {
          return 1;
        }
LABEL_7:
        uint64_t result = 0;
        *a6 = i;
        return result;
      }
      int v29 = 1;
    }
    else
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, i, v28 - *(int *)(a3 + 128), "no"))goto LABEL_7; {
      if (!a11)
      }
        goto LABEL_38;
      int v29 = 0;
    }
    *a11 = v29;
    goto LABEL_38;
  }
  uint64_t i = v36;
  uint64_t v40 = v36;
  uint64_t v38 = &v39;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, char **, uint64_t *))(a3 + 112))(a3, &v40, v18, &v38, &v40);
  if (v38 == &v39 || (v39 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_7;
  }
  if (a9) {
    *a9 = i;
  }
  uint64_t v26 = v37;
  if (a10) {
    *a10 = a1(a3, i, v37 - *(int *)(a3 + 128));
  }
  if (!parsePseudoAttribute(a3, v26, v18, &v35, (uint64_t)&v34, (uint64_t)&v36, &v37)) {
    goto LABEL_6;
  }
  uint64_t i = v35;
  if (v35)
  {
    uint64_t v23 = v34;
    goto LABEL_27;
  }
  return 1;
}

uint64_t (**findEncoding(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4 = a1;
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  int v7 = v9;
  uint64_t v8 = a2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char **, char *))(a1 + 112))(a1, &v8, a3, &v7, (char *)&v10 + 15);
  if (v8 != a3) {
    return 0;
  }
  *int v7 = 0;
  if (!streqci((unsigned __int8 *)v9, "UTF-16") || *(_DWORD *)(v4 + 128) != 2)
  {
    uint64_t v6 = 0;
    while (!streqci((unsigned __int8 *)v9, (unsigned __int8 *)getEncodingIndex_encodingNames[v6]))
    {
      if (++v6 == 6) {
        return 0;
      }
    }
    if (v6 != 0xFFFFFFFFLL) {
      return encodings[v6];
    }
    return 0;
  }
  return (uint64_t (**)())v4;
}

uint64_t (**XmlGetUtf8InternalEncodingNS())()
{
  return internal_utf8_encoding_ns;
}

uint64_t XmlInitEncodingNS(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  int EncodingIndex = getEncodingIndex(a3);
  if (EncodingIndex == -1) {
    return 0;
  }
  *(unsigned char *)(a1 + 133) = EncodingIndex;
  *(void *)a1 = initScanPrologNS;
  *(void *)(a1 + 8) = initScanContentNS;
  *(void *)(a1 + 96) = initUpdatePosition;
  *(void *)(a1 + 136) = a2;
  *a2 = a1;
  return 1;
}

uint64_t initScanPrologNS(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  return initScan(encodingsNS, a1, 0, a2, a3, a4);
}

uint64_t initScanContentNS(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  return initScan(encodingsNS, a1, 1, a2, a3, a4);
}

uint64_t XmlParseXmlDeclNS(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t *a8, void *a9, int *a10)
{
  return doParseXmlDecl((uint64_t (*)(uint64_t, uint64_t, uint64_t))findEncodingNS, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t (**findEncodingNS(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4 = a1;
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  int v7 = v9;
  uint64_t v8 = a2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char **, char *))(a1 + 112))(a1, &v8, a3, &v7, (char *)&v10 + 15);
  if (v8 != a3) {
    return 0;
  }
  *int v7 = 0;
  if (!streqci((unsigned __int8 *)v9, "UTF-16") || *(_DWORD *)(v4 + 128) != 2)
  {
    uint64_t v6 = 0;
    while (!streqci((unsigned __int8 *)v9, (unsigned __int8 *)getEncodingIndex_encodingNames[v6]))
    {
      if (++v6 == 6) {
        return 0;
      }
    }
    if (v6 != 0xFFFFFFFFLL) {
      return encodingsNS[v6];
    }
    return 0;
  }
  return (uint64_t (**)())v4;
}

void *XmlInitUnknownEncodingNS(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = XmlInitUnknownEncoding(a1, a2, a3, a4);
  if (result) {
    *((unsigned char *)result + 194) = 23;
  }
  return result;
}

uint64_t normal_prologTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, char **a4)
{
  if ((unint64_t)a2 < a3)
  {
    char v5 = a2;
    uint64_t v8 = 18;
    uint64_t v9 = 1;
    switch(*(unsigned char *)(a1 + *a2 + 136))
    {
      case 2:
        unsigned int v16 = (char *)(a2 + 1);
        uint64_t v17 = a3 - (void)(a2 + 1);
        BOOL v18 = (unint64_t)v17 > 1;
        if (v17 < 1) {
          return 0xFFFFFFFFLL;
        }
        int v19 = *(unsigned __int8 *)(a1 + *v16 + 136);
        if (!v18)
        {
          switch(*(unsigned char *)(a1 + *v16 + 136))
          {
            case 0xF:
              uint64_t v38 = (char *)(a2 + 2);
              return normal_scanPi((unsigned char *)a1, v38, a3, a4);
            case 0x10:
              char v39 = a2 + 2;
              return normal_scanDecl((unsigned char *)a1, v39, a3, (unsigned __int8 **)a4);
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x17:
              goto LABEL_159;
            case 0x16:
            case 0x18:
              goto LABEL_146;
            default:
              JUMPOUT(0);
          }
        }
        if ((v19 - 5) >= 3 && v19 != 29) {
          goto LABEL_159;
        }
LABEL_146:
        *a4 = (char *)a2;
        return 29;
      case 4:
        BOOL v21 = (char *)(a2 + 1);
        uint64_t v22 = a3 - (void)(a2 + 1);
        if (v22 < 1) {
          return 4294967270;
        }
        if (*v21 != 93) {
          goto LABEL_141;
        }
        if ((unint64_t)v22 < 2) {
          return 0xFFFFFFFFLL;
        }
        if (a2[2] == 62)
        {
          *a4 = (char *)(a2 + 3);
          return 34;
        }
        else
        {
LABEL_141:
          *a4 = v21;
          return 26;
        }
      case 5:
        if ((uint64_t)(a3 - (void)a2) < 2) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2)) {
          goto LABEL_139;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v5)) {
          goto LABEL_71;
        }
        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5)) {
          goto LABEL_139;
        }
        uint64_t v8 = 19;
LABEL_71:
        uint64_t v9 = 2;
        goto LABEL_4;
      case 6:
        if ((uint64_t)(a3 - (void)a2) < 3) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2)) {
          goto LABEL_139;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v5)) {
          goto LABEL_77;
        }
        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5)) {
          goto LABEL_139;
        }
        uint64_t v8 = 19;
LABEL_77:
        uint64_t v9 = 3;
        goto LABEL_4;
      case 7:
        if ((uint64_t)(a3 - (void)a2) < 4) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2)) {
          goto LABEL_139;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v5)) {
          goto LABEL_158;
        }
        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5)) {
          goto LABEL_139;
        }
        uint64_t v8 = 19;
LABEL_158:
        uint64_t v9 = 4;
LABEL_4:
        v5 += v9;
        unint64_t v10 = a3 - (void)v5;
        if ((uint64_t)(a3 - (void)v5) < 1) {
          return -(int)v8;
        }
        while (2)
        {
          switch(*(unsigned char *)(a1 + *v5 + 136))
          {
            case 5:
              if (v10 < 2) {
                return 4294967294;
              }
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5)
                || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5))
              {
                goto LABEL_139;
              }
              uint64_t v11 = (char *)(v5 + 2);
              goto LABEL_7;
            case 6:
              if (v10 < 3) {
                return 4294967294;
              }
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5)
                || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5))
              {
                goto LABEL_139;
              }
              uint64_t v11 = (char *)(v5 + 3);
              goto LABEL_7;
            case 7:
              if (v10 < 4) {
                return 4294967294;
              }
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5)
                || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5))
              {
                goto LABEL_139;
              }
              uint64_t v11 = (char *)(v5 + 4);
              goto LABEL_7;
            case 9:
            case 0xA:
            case 0xB:
            case 0x14:
            case 0x15:
            case 0x1E:
            case 0x20:
            case 0x23:
            case 0x24:
              goto LABEL_140;
            case 0xF:
              if (v8 == 19) {
                goto LABEL_139;
              }
              *a4 = (char *)(v5 + 1);
              return 30;
            case 0x16:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
              uint64_t v11 = (char *)(v5 + 1);
              goto LABEL_7;
            case 0x17:
              uint64_t v11 = (char *)(v5 + 1);
              if (v8 == 41)
              {
                uint64_t v8 = 19;
                goto LABEL_7;
              }
              if (v8 != 18) {
                goto LABEL_7;
              }
              unint64_t v12 = a3 - (void)v11;
              if ((uint64_t)(a3 - (void)v11) < 1) {
                return 0xFFFFFFFFLL;
              }
              unsigned int v13 = *(unsigned __int8 *)(a1 + *v11 + 136);
              uint64_t v8 = 19;
              if (v13 > 0x15)
              {
                if (v13 - 24 >= 4 && v13 != 22)
                {
                  if (v13 == 29) {
                    goto LABEL_49;
                  }
LABEL_7:
                  unint64_t v10 = a3 - (void)v11;
                  char v5 = (unsigned __int8 *)v11;
                  if ((uint64_t)(a3 - (void)v11) <= 0) {
                    return -(int)v8;
                  }
                  continue;
                }
                uint64_t v11 = (char *)(v5 + 2);
LABEL_47:
                uint64_t v8 = 41;
                goto LABEL_7;
              }
              if (v13 == 5)
              {
                if (v12 < 2) {
                  return 4294967294;
                }
                if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5 + 1)
                  || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5 + 1))
                {
                  goto LABEL_49;
                }
                uint64_t v11 = (char *)(v5 + 3);
                goto LABEL_47;
              }
              if (v13 != 6)
              {
                if (v13 != 7) {
                  goto LABEL_7;
                }
                if (v12 < 4) {
                  return 4294967294;
                }
                if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5 + 1)
                  || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5 + 1))
                {
                  goto LABEL_49;
                }
                uint64_t v11 = (char *)(v5 + 5);
                goto LABEL_47;
              }
              if (v12 < 3) {
                return 4294967294;
              }
              if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5 + 1)
                && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5 + 1))
              {
                uint64_t v11 = (char *)(v5 + 4);
                goto LABEL_47;
              }
LABEL_49:
              uint64_t v8 = 0;
              *a4 = v11;
              break;
            case 0x21:
              if (v8 == 19) {
                goto LABEL_139;
              }
              *a4 = (char *)(v5 + 1);
              return 31;
            case 0x22:
              if (v8 == 19) {
                goto LABEL_139;
              }
              *a4 = (char *)(v5 + 1);
              return 32;
            default:
              goto LABEL_139;
          }
          return v8;
        }
      case 9:
        if (a2 + 1 != (unsigned __int8 *)a3) {
          goto LABEL_81;
        }
        *a4 = (char *)a3;
        return 4294967281;
      case 0xA:
      case 0x15:
LABEL_81:
        uint64_t v23 = (char *)(a2 + 1);
        uint64_t v24 = a3 - (void)(a2 + 1);
        if (v24 < 1) {
          goto LABEL_92;
        }
        do
        {
          int v25 = *(unsigned __int8 *)(a1 + *v23 + 136);
          if (v25 != 21 && v25 != 10 && (v25 != 9 || v23 + 1 == (char *)a3)) {
            goto LABEL_92;
          }
          ++v23;
          --v24;
        }
        while (v24 > 0);
        uint64_t v23 = (char *)a3;
LABEL_92:
        *a4 = v23;
        return 15;
      case 0xB:
        *a4 = (char *)(a2 + 1);
        return 17;
      case 0xC:
        uint64_t v28 = a2 + 1;
        int v29 = 12;
        goto LABEL_96;
      case 0xD:
        uint64_t v28 = a2 + 1;
        int v29 = 13;
LABEL_96:
        return normal_scanLit(v29, (unsigned char *)a1, v28, a3, (unsigned __int8 **)a4);
      case 0x13:
        char v5 = a2 + 1;
        unint64_t v30 = a3 - (void)(a2 + 1);
        if ((uint64_t)v30 < 1) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v8 = 0;
        unsigned int v31 = *(unsigned __int8 *)(a1 + *v5 + 136);
        if (v31 <= 6)
        {
          if (v31 == 5)
          {
            if (v30 >= 2)
            {
              if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5)
                && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v5))
              {
                uint64_t v33 = 2;
                goto LABEL_108;
              }
              goto LABEL_139;
            }
          }
          else
          {
            if (v31 != 6) {
              goto LABEL_140;
            }
            if (v30 >= 3)
            {
              if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5)
                && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v5))
              {
                uint64_t v33 = 3;
                goto LABEL_108;
              }
LABEL_139:
              uint64_t v8 = 0;
LABEL_140:
              *a4 = (char *)v5;
              return v8;
            }
          }
        }
        else
        {
          if (v31 != 7)
          {
            if (v31 != 22 && v31 != 24) {
              goto LABEL_140;
            }
            uint64_t v33 = 1;
LABEL_108:
            v5 += v33;
            unint64_t v34 = a3 - (void)v5;
            if ((uint64_t)(a3 - (void)v5) < 1) {
              return 4294967276;
            }
            do
            {
              uint64_t v8 = 0;
              uint64_t v35 = 1;
              switch(*(unsigned char *)(a1 + *v5 + 136))
              {
                case 5:
                  if (v34 < 2) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5)
                    || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5))
                  {
                    goto LABEL_139;
                  }
                  uint64_t v35 = 2;
                  break;
                case 6:
                  if (v34 < 3) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5)
                    || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5))
                  {
                    goto LABEL_139;
                  }
                  uint64_t v35 = 3;
                  break;
                case 7:
                  if (v34 < 4) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5)
                    || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5))
                  {
                    goto LABEL_139;
                  }
                  uint64_t v35 = 4;
                  break;
                case 9:
                case 0xA:
                case 0xB:
                case 0x15:
                case 0x1E:
                case 0x20:
                case 0x24:
                  uint64_t v8 = 20;
                  goto LABEL_140;
                case 0x16:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                  break;
                default:
                  goto LABEL_140;
              }
              v5 += v35;
              unint64_t v34 = a3 - (void)v5;
              uint64_t v8 = 4294967276;
            }
            while ((uint64_t)(a3 - (void)v5) > 0);
            return v8;
          }
          if (v30 >= 4)
          {
            if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5)
              && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v5))
            {
              uint64_t v33 = 4;
              goto LABEL_108;
            }
            goto LABEL_139;
          }
        }
        return 4294967294;
      case 0x14:
        *a4 = (char *)(a2 + 1);
        return 25;
      case 0x16:
      case 0x18:
        goto LABEL_4;
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
        uint64_t v8 = 19;
        uint64_t v9 = 1;
        goto LABEL_4;
      case 0x1E:
        uint64_t v36 = a2 + 1;
        return normal_scanPercent(a1, v36, a3, (unsigned __int8 **)a4);
      case 0x1F:
        *a4 = (char *)(a2 + 1);
        return 23;
      case 0x20:
        unsigned int v16 = (char *)(a2 + 1);
        if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
          return 4294967272;
        }
        unsigned int v37 = *(unsigned __int8 *)(a1 + *v16 + 136);
        if (v37 > 0x1F)
        {
          switch(*(unsigned char *)(a1 + *v16 + 136))
          {
            case ' ':
            case '#':
            case '$':
              goto LABEL_148;
            case '!':
              *a4 = (char *)(a2 + 2);
              uint64_t v8 = 36;
              break;
            case '""':
              *a4 = (char *)(a2 + 2);
              uint64_t v8 = 37;
              break;
            default:
              goto LABEL_159;
          }
          return v8;
        }
        if (v37 - 9 < 3) {
          goto LABEL_148;
        }
        if (v37 == 15)
        {
          *a4 = (char *)(a2 + 2);
          return 35;
        }
        else
        {
          if (v37 == 21)
          {
LABEL_148:
            *a4 = v16;
            return 24;
          }
LABEL_159:
          uint64_t v8 = 0;
          *a4 = v16;
        }
        return v8;
      case 0x23:
        *a4 = (char *)(a2 + 1);
        return 38;
      case 0x24:
        *a4 = (char *)(a2 + 1);
        return 21;
      default:
        goto LABEL_139;
    }
  }
  return 4294967292;
}

uint64_t normal_contentTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  uint64_t v6 = a2;
  switch(*(unsigned char *)(a1 + *a2 + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_3;
    case 2:
      unint64_t v10 = a2 + 1;
      unint64_t v11 = a3 - (void)(a2 + 1);
      if ((uint64_t)v11 < 1) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v12 = 1;
      switch(*(unsigned char *)(a1 + *v10 + 136))
      {
        case 5:
          if (v11 < 2) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2 + 1)
            || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6 + 1))
          {
            goto LABEL_100;
          }
          uint64_t v12 = 2;
          goto LABEL_9;
        case 6:
          if (v11 < 3) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2 + 1)
            || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6 + 1))
          {
            goto LABEL_100;
          }
          uint64_t v12 = 3;
          goto LABEL_9;
        case 7:
          if (v11 < 4) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2 + 1)
            || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6 + 1))
          {
            goto LABEL_100;
          }
          uint64_t v12 = 4;
LABEL_9:
          uint64_t v6 = &v10[v12];
          unint64_t v13 = a3 - (void)&v10[v12];
          if ((uint64_t)v13 < 1) {
            return 0xFFFFFFFFLL;
          }
          int v14 = 0;
          while (2)
          {
            uint64_t v15 = 1;
            switch(*(unsigned char *)(a1 + *v6 + 136))
            {
              case 5:
                if (v13 < 2) {
                  return 4294967294;
                }
                if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)
                  || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v6))
                {
                  goto LABEL_3;
                }
                goto LABEL_40;
              case 6:
                if (v13 < 3) {
                  return 4294967294;
                }
                if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)
                  && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v6))
                {
                  goto LABEL_19;
                }
                goto LABEL_3;
              case 7:
                if (v13 < 4) {
                  return 4294967294;
                }
                if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)
                  && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v6))
                {
                  goto LABEL_23;
                }
                goto LABEL_3;
              case 9:
              case 0xA:
              case 0x15:
                unint64_t v35 = a3 - (void)++v6;
                if ((uint64_t)(a3 - (void)v6) < 1) {
                  return 0xFFFFFFFFLL;
                }
                uint64_t result = 0xFFFFFFFFLL;
                while (2)
                {
                  switch(*(unsigned char *)(a1 + *v6 + 136))
                  {
                    case 5:
                      if (v35 < 2) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6))
                      {
                        goto LABEL_3;
                      }
                      uint64_t v39 = 3;
                      break;
                    case 6:
                      if (v35 < 3) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6))
                      {
                        goto LABEL_3;
                      }
                      uint64_t v39 = 4;
                      break;
                    case 7:
                      if (v35 < 4) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6))
                      {
                        goto LABEL_3;
                      }
                      uint64_t v39 = 5;
                      break;
                    case 9:
                    case 0xA:
                    case 0x15:
                      ++v6;
                      if ((uint64_t)--v35 > 0) {
                        continue;
                      }
                      return result;
                    case 0xB:
                      goto LABEL_172;
                    case 0x11:
                      goto LABEL_173;
                    case 0x16:
                    case 0x18:
                      uint64_t v39 = 2;
                      goto LABEL_188;
                    default:
                      goto LABEL_3;
                  }
                  break;
                }
LABEL_188:
                return normal_scanAtts(a1, &v6[v39 - 1], a3, a4);
              case 0xB:
LABEL_172:
                *a4 = v6 + 1;
                return 2;
              case 0x11:
LABEL_173:
                uint64_t v20 = v6 + 1;
                if ((uint64_t)(a3 - (void)(v6 + 1)) < 1) {
                  return 0xFFFFFFFFLL;
                }
                if (*v20 != 62) {
                  goto LABEL_58;
                }
                *a4 = v6 + 2;
                return 4;
              case 0x16:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
                goto LABEL_41;
              case 0x17:
                if (v14) {
                  goto LABEL_3;
                }
                unint64_t v10 = v6 + 1;
                unint64_t v16 = a3 - (void)(v6 + 1);
                if ((uint64_t)v16 < 1) {
                  return 0xFFFFFFFFLL;
                }
                unsigned int v17 = *(unsigned __int8 *)(a1 + *v10 + 136);
                if (v17 > 0x15)
                {
                  if (v17 != 22 && v17 != 24) {
                    goto LABEL_100;
                  }
                  int v14 = 1;
LABEL_40:
                  uint64_t v15 = 2;
                }
                else
                {
                  switch(v17)
                  {
                    case 5u:
                      if (v16 < 2) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6 + 1)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6 + 1))
                      {
                        goto LABEL_100;
                      }
                      int v14 = 1;
LABEL_19:
                      uint64_t v15 = 3;
                      break;
                    case 6u:
                      if (v16 < 3) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6 + 1)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6 + 1))
                      {
                        goto LABEL_100;
                      }
                      int v14 = 1;
LABEL_23:
                      uint64_t v15 = 4;
                      break;
                    case 7u:
                      if (v16 >= 4)
                      {
                        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6 + 1)
                          && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6 + 1))
                        {
                          int v14 = 1;
                          uint64_t v15 = 5;
                          break;
                        }
LABEL_100:
                        uint64_t result = 0;
                        *a4 = v10;
                        return result;
                      }
                      return 4294967294;
                    default:
                      goto LABEL_100;
                  }
                }
LABEL_41:
                v6 += v15;
                unint64_t v13 = a3 - (void)v6;
                uint64_t result = 0xFFFFFFFFLL;
                if ((uint64_t)(a3 - (void)v6) <= 0) {
                  return result;
                }
                continue;
              default:
                goto LABEL_3;
            }
          }
        case 0xF:
          uint64_t v24 = (char *)(a2 + 2);
          return normal_scanPi((unsigned char *)a1, v24, a3, (char **)a4);
        case 0x10:
          uint64_t v20 = a2 + 2;
          if ((uint64_t)(a3 - (void)(a2 + 2)) < 1) {
            return 0xFFFFFFFFLL;
          }
          int v25 = *(unsigned __int8 *)(a1 + *v20 + 136);
          if (v25 != 20)
          {
            if (v25 != 27) {
              goto LABEL_58;
            }
            uint64_t v26 = a2 + 3;
            return normal_scanComment((unsigned char *)a1, v26, a3, a4);
          }
          uint64_t v33 = a2 + 3;
          if ((uint64_t)(a3 - (void)(a2 + 3)) < 6) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v34 = 0;
          uint64_t v20 = a2 + 9;
          while (v33[v34] == big2_scanCdataSection_CDATA_LSQB[v34])
          {
            if (++v34 == 6)
            {
              uint64_t result = 8;
              goto LABEL_147;
            }
          }
          uint64_t result = 0;
          uint64_t v20 = &v33[v34];
          goto LABEL_147;
        case 0x11:
          uint64_t v6 = a2 + 2;
          unint64_t v27 = a3 - (void)(a2 + 2);
          if ((uint64_t)v27 < 1) {
            return 0xFFFFFFFFLL;
          }
          uint64_t result = 0;
          unsigned int v28 = *(unsigned __int8 *)(a1 + *v6 + 136);
          if (v28 > 6)
          {
            if (v28 == 7)
            {
              if (v27 < 4) {
                return 4294967294;
              }
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2 + 2)) {
                goto LABEL_3;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6);
              if (!result) {
                goto LABEL_4;
              }
              uint64_t v30 = 4;
            }
            else
            {
              if (v28 != 22 && v28 != 24) {
                goto LABEL_4;
              }
              uint64_t v30 = 1;
            }
            goto LABEL_131;
          }
          if (v28 == 5)
          {
            if (v27 < 2) {
              return 4294967294;
            }
            if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2 + 2)) {
              goto LABEL_3;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6);
            if (!result) {
              goto LABEL_4;
            }
            uint64_t v30 = 2;
            goto LABEL_131;
          }
          if (v28 != 6) {
            goto LABEL_4;
          }
          if (v27 < 3) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2 + 2)) {
            goto LABEL_3;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6);
          if (result)
          {
            uint64_t v30 = 3;
LABEL_131:
            v6 += v30;
            unint64_t v31 = a3 - (void)v6;
            if ((uint64_t)(a3 - (void)v6) < 1) {
              return 0xFFFFFFFFLL;
            }
            while (2)
            {
              uint64_t result = 0;
              uint64_t v32 = 1;
              switch(*(unsigned char *)(a1 + *v6 + 136))
              {
                case 5:
                  if (v31 < 2) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)) {
                    goto LABEL_3;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v6);
                  if (!result) {
                    goto LABEL_4;
                  }
                  uint64_t v32 = 2;
                  goto LABEL_133;
                case 6:
                  if (v31 < 3) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)) {
                    goto LABEL_3;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v6);
                  if (!result) {
                    goto LABEL_4;
                  }
                  uint64_t v32 = 3;
                  goto LABEL_133;
                case 7:
                  if (v31 < 4) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)) {
                    goto LABEL_3;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v6);
                  if (!result) {
                    goto LABEL_4;
                  }
                  uint64_t v32 = 4;
LABEL_133:
                  v6 += v32;
                  unint64_t v31 = a3 - (void)v6;
                  uint64_t result = 0xFFFFFFFFLL;
                  if ((uint64_t)(a3 - (void)v6) <= 0) {
                    return result;
                  }
                  continue;
                case 9:
                case 0xA:
                case 0x15:
                  unint64_t v36 = a3 - (void)++v6;
                  if ((uint64_t)(a3 - (void)v6) < 1) {
                    return 0xFFFFFFFFLL;
                  }
                  uint64_t result = 0xFFFFFFFFLL;
                  break;
                case 0xB:
                  goto LABEL_204;
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                  goto LABEL_133;
                default:
                  goto LABEL_4;
              }
              break;
            }
            while (1)
            {
              int v37 = *(unsigned __int8 *)(a1 + *v6 + 136);
              if ((v37 - 9) >= 2 && v37 != 21) {
                break;
              }
              ++v6;
              if ((uint64_t)--v36 <= 0) {
                return result;
              }
            }
            if (v37 == 11)
            {
LABEL_204:
              ++v6;
              uint64_t result = 5;
              goto LABEL_4;
            }
            goto LABEL_3;
          }
          break;
        case 0x16:
        case 0x18:
          goto LABEL_9;
        default:
          goto LABEL_100;
      }
      goto LABEL_4;
    case 3:
      int v19 = a2 + 1;
      return normal_scanRef(a1, v19, a3, a4);
    case 4:
      uint64_t v9 = a2 + 1;
      if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
        return 4294967291;
      }
      if (*v9 != 93) {
        goto LABEL_75;
      }
      uint64_t v20 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 1) {
        return 4294967291;
      }
      if (*v20 == 62)
      {
LABEL_58:
        uint64_t result = 0;
        goto LABEL_147;
      }
      goto LABEL_75;
    case 5:
      if ((uint64_t)(a3 - (void)a2) < 2) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2)) {
        goto LABEL_3;
      }
      uint64_t v9 = v6 + 2;
      goto LABEL_75;
    case 6:
      if ((uint64_t)(a3 - (void)a2) < 3) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2)) {
        goto LABEL_3;
      }
      uint64_t v9 = v6 + 3;
      goto LABEL_75;
    case 7:
      if ((uint64_t)(a3 - (void)a2) < 4) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2))
      {
LABEL_3:
        uint64_t result = 0;
LABEL_4:
        *a4 = v6;
        return result;
      }
      uint64_t v9 = v6 + 4;
LABEL_75:
      unint64_t v22 = a3 - (void)v9;
      if ((uint64_t)(a3 - (void)v9) < 1)
      {
        uint64_t v23 = v9;
LABEL_96:
        *a4 = v23;
        return 6;
      }
      break;
    case 9:
      BOOL v21 = a2 + 1;
      if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
        return 4294967293;
      }
      if (*(unsigned char *)(a1 + a2[1] + 136) == 10) {
        BOOL v21 = a2 + 2;
      }
LABEL_72:
      *a4 = v21;
      return 7;
    case 0xA:
      BOOL v21 = a2 + 1;
      goto LABEL_72;
    default:
      uint64_t v9 = a2 + 1;
      goto LABEL_75;
  }
  while (2)
  {
    switch(*(unsigned char *)(a1 + *v9 + 136))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 8:
      case 9:
      case 0xA:
        goto LABEL_94;
      case 4:
        if (v22 < 2) {
          goto LABEL_94;
        }
        uint64_t v23 = v9 + 1;
        if (v9[1] != 93) {
          goto LABEL_92;
        }
        if (v22 < 3)
        {
LABEL_94:
          *a4 = v9;
          return 6;
        }
        if (v9[2] != 62)
        {
LABEL_92:
          unint64_t v22 = a3 - (void)v23;
          uint64_t v9 = v23;
          if ((uint64_t)(a3 - (void)v23) <= 0) {
            goto LABEL_96;
          }
          continue;
        }
        uint64_t result = 0;
        uint64_t v20 = v9 + 2;
LABEL_147:
        *a4 = v20;
        return result;
      case 5:
        if (v22 < 2 || (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v9)) {
          goto LABEL_94;
        }
        uint64_t v23 = v9 + 2;
        goto LABEL_92;
      case 6:
        if (v22 < 3 || (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v9)) {
          goto LABEL_94;
        }
        uint64_t v23 = v9 + 3;
        goto LABEL_92;
      case 7:
        if (v22 < 4 || (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v9)) {
          goto LABEL_94;
        }
        uint64_t v23 = v9 + 4;
        goto LABEL_92;
      default:
        uint64_t v23 = v9 + 1;
        goto LABEL_92;
    }
  }
}

uint64_t normal_cdataSectionTok(unsigned char *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  uint64_t v6 = a2;
  int v8 = a1[*a2 + 136];
  uint64_t result = 0;
  switch(v8)
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_42;
    case 4:
      unint64_t v10 = a2 + 1;
      if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
        return 0xFFFFFFFFLL;
      }
      if (*v10 != 93) {
        goto LABEL_10;
      }
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 1) {
        return 0xFFFFFFFFLL;
      }
      if (a2[2] != 62) {
        goto LABEL_10;
      }
      uint64_t v6 = a2 + 3;
      uint64_t result = 40;
      goto LABEL_42;
    case 5:
      if ((uint64_t)(a3 - (void)a2) < 2) {
        goto LABEL_31;
      }
      if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 55))(a1, a2)) {
        goto LABEL_41;
      }
      unint64_t v10 = v6 + 2;
      goto LABEL_10;
    case 6:
      if ((uint64_t)(a3 - (void)a2) < 3) {
        goto LABEL_31;
      }
      if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 56))(a1, a2)) {
        goto LABEL_41;
      }
      unint64_t v10 = v6 + 3;
      goto LABEL_10;
    case 7:
      if ((uint64_t)(a3 - (void)a2) >= 4)
      {
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 57))(a1, a2))
        {
LABEL_41:
          uint64_t result = 0;
        }
        else
        {
          unint64_t v10 = v6 + 4;
LABEL_10:
          unint64_t v11 = a3 - (void)v10;
          if ((uint64_t)(a3 - (void)v10) < 1)
          {
            uint64_t result = 6;
            uint64_t v6 = v10;
          }
          else
          {
            uint64_t v6 = v10;
            while (2)
            {
              uint64_t v12 = 1;
              uint64_t result = 6;
              switch(a1[*v6 + 136])
              {
                case 0:
                case 1:
                case 4:
                case 8:
                case 9:
                case 0xA:
                  break;
                case 5:
                  if (v11 >= 2)
                  {
                    if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 55))(a1, v6)) {
                      goto LABEL_23;
                    }
                    uint64_t v12 = 2;
                    goto LABEL_22;
                  }
                  break;
                case 6:
                  if (v11 >= 3)
                  {
                    if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 56))(a1, v6)) {
                      goto LABEL_23;
                    }
                    uint64_t v12 = 3;
                    goto LABEL_22;
                  }
                  break;
                case 7:
                  if (v11 >= 4)
                  {
                    if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 57))(a1, v6)) {
                      goto LABEL_23;
                    }
                    uint64_t v12 = 4;
                    goto LABEL_22;
                  }
                  break;
                default:
LABEL_22:
                  v6 += v12;
                  unint64_t v11 = a3 - (void)v6;
                  if ((uint64_t)(a3 - (void)v6) > 0) {
                    continue;
                  }
LABEL_23:
                  uint64_t result = 6;
                  break;
              }
              break;
            }
          }
        }
LABEL_42:
        *a4 = v6;
      }
      else
      {
LABEL_31:
        uint64_t result = 4294967294;
      }
      break;
    case 9:
      if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
        return 0xFFFFFFFFLL;
      }
      if (a1[a2[1] + 136] == 10) {
        uint64_t v6 = a2 + 2;
      }
      else {
        uint64_t v6 = a2 + 1;
      }
LABEL_37:
      uint64_t result = 7;
      goto LABEL_42;
    case 10:
      uint64_t v6 = a2 + 1;
      goto LABEL_37;
    default:
      unint64_t v10 = a2 + 1;
      goto LABEL_10;
  }
  return result;
}

uint64_t normal_ignoreSectionTok(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  int v7 = a2;
  int v9 = 0;
  while (2)
  {
    uint64_t result = 0;
    switch(a1[*v7 + 136])
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_31;
      case 2:
        unint64_t v11 = v7 + 1;
        if (a3 - (uint64_t)(v7 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v11 != 33) {
          goto LABEL_26;
        }
        unint64_t v11 = v7 + 2;
        if (a3 - (uint64_t)(v7 + 2) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v11 == 91)
        {
          unint64_t v11 = v7 + 3;
          ++v9;
        }
        goto LABEL_26;
      case 4:
        unint64_t v11 = v7 + 1;
        if (a3 - (uint64_t)(v7 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v11 != 93) {
          goto LABEL_26;
        }
        unint64_t v11 = v7 + 2;
        if (a3 - (uint64_t)(v7 + 2) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v11 != 62) {
          goto LABEL_26;
        }
        unint64_t v11 = v7 + 3;
        if (v9)
        {
          --v9;
LABEL_26:
          unint64_t v4 = a3 - (void)v11;
          int v7 = v11;
          if (a3 - (uint64_t)v11 <= 0) {
            return 0xFFFFFFFFLL;
          }
          continue;
        }
        uint64_t result = 42;
        v7 += 3;
LABEL_31:
        *a4 = v7;
        return result;
      case 5:
        if (v4 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 55))(a1, v7)) {
          goto LABEL_30;
        }
        unint64_t v11 = v7 + 2;
        goto LABEL_26;
      case 6:
        if (v4 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 56))(a1, v7)) {
          goto LABEL_30;
        }
        unint64_t v11 = v7 + 3;
        goto LABEL_26;
      case 7:
        if (v4 < 4) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 57))(a1, v7))
        {
LABEL_30:
          uint64_t result = 0;
          goto LABEL_31;
        }
        unint64_t v11 = v7 + 4;
        goto LABEL_26;
      default:
        unint64_t v11 = v7 + 1;
        goto LABEL_26;
    }
  }
}

uint64_t normal_attributeValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (2)
  {
    uint64_t v5 = 2;
    switch(*(unsigned char *)(a1 + *v4 + 136))
    {
      case 2:
        uint64_t result = 0;
        *a4 = v4;
        return result;
      case 3:
        if (v4 != a2) {
          goto LABEL_9;
        }
        return normal_scanRef(a1, a2 + 1, a3, a4);
      case 5:
        goto LABEL_8;
      case 6:
        uint64_t v5 = 3;
        goto LABEL_8;
      case 7:
        uint64_t v5 = 4;
        goto LABEL_8;
      case 9:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v7 = a2 + 1;
        if ((uint64_t)(a3 - (void)(a2 + 1)) < 1)
        {
          uint64_t result = 4294967293;
        }
        else
        {
          if (*(unsigned char *)(a1 + a2[1] + 136) == 10) {
            int v7 = a2 + 2;
          }
LABEL_22:
          *a4 = v7;
          uint64_t result = 7;
        }
        break;
      case 0xA:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v7 = a2 + 1;
        goto LABEL_22;
      case 0x15:
        if (v4 != a2) {
          goto LABEL_9;
        }
        *a4 = a2 + 1;
        return 39;
      default:
        uint64_t v5 = 1;
LABEL_8:
        v4 += v5;
        if ((uint64_t)(a3 - (void)v4) > 0) {
          continue;
        }
LABEL_9:
        *a4 = v4;
        uint64_t result = 6;
        break;
    }
    return result;
  }
}

uint64_t normal_entityValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (2)
  {
    uint64_t v5 = 2;
    switch(*(unsigned char *)(a1 + *v4 + 136))
    {
      case 3:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v7 = a2 + 1;
        return normal_scanRef(a1, v7, a3, a4);
      case 5:
        goto LABEL_8;
      case 6:
        uint64_t v5 = 3;
        goto LABEL_8;
      case 7:
        uint64_t v5 = 4;
        goto LABEL_8;
      case 9:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v8 = a2 + 1;
        if ((uint64_t)(a3 - (void)(a2 + 1)) < 1)
        {
          uint64_t result = 4294967293;
        }
        else
        {
          if (*(unsigned char *)(a1 + a2[1] + 136) == 10) {
            int v8 = a2 + 2;
          }
LABEL_24:
          *a4 = v8;
          uint64_t result = 7;
        }
        break;
      case 0xA:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v8 = a2 + 1;
        goto LABEL_24;
      default:
        uint64_t v5 = 1;
LABEL_8:
        v4 += v5;
        if ((uint64_t)(a3 - (void)v4) > 0) {
          continue;
        }
LABEL_9:
        *a4 = v4;
        uint64_t result = 6;
        break;
    }
    return result;
  }
}

BOOL normal_nameMatchesAscii(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned char *a4)
{
  int v4 = *a4;
  if (!*a4) {
    return a2 == a3;
  }
  uint64_t v5 = a4 + 1;
  uint64_t v6 = a3 - a2;
  while (1)
  {
    BOOL v7 = v6-- < 1;
    if (v7 || *a2 != v4) {
      break;
    }
    ++a2;
    int v8 = *v5++;
    int v4 = v8;
    if (!v8) {
      return a2 == a3;
    }
  }
  return 0;
}

uint64_t normal_nameLength(uint64_t a1, unsigned __int8 *a2)
{
  for (uint64_t i = a2; ; i += qword_20D626CA8[(char)v3])
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + *i + 136) - 5;
    if (v3 >= 0x19 || ((0x17E0007u >> v3) & 1) == 0) {
      break;
    }
  }
  return (i - a2);
}

unsigned __int8 *normal_skipS(uint64_t a1, unsigned __int8 *a2)
{
  while (1)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + *a2 + 136);
    BOOL v3 = v2 > 0x15;
    int v4 = (1 << v2) & 0x200600;
    if (v3 || v4 == 0) {
      break;
    }
    ++a2;
  }
  return a2;
}

uint64_t normal_getAtts(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = 0;
  int v6 = 0;
  uint64_t v7 = 1;
  while (2)
  {
    uint64_t v8 = a2;
    unsigned int v10 = *(unsigned __int8 *)++a2;
    unsigned int v9 = v10;
    uint64_t v11 = v7;
    switch(*(unsigned char *)(a1 + v10 + 136))
    {
      case 3:
        if ((int)result < a3) {
          *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
        }
        continue;
      case 5:
        if (!v7)
        {
          uint64_t v11 = 1;
          if ((int)result < a3)
          {
            uint64_t v13 = a4 + 32 * (int)result;
            *(void *)uint64_t v13 = a2;
            *(unsigned char *)(v13 + 24) = 1;
          }
        }
        a2 = v8 + 2;
        uint64_t v7 = v11;
        continue;
      case 6:
        if (!v7)
        {
          uint64_t v11 = 1;
          if ((int)result < a3)
          {
            uint64_t v14 = a4 + 32 * (int)result;
            *(void *)uint64_t v14 = a2;
            *(unsigned char *)(v14 + 24) = 1;
          }
        }
        a2 = v8 + 3;
        uint64_t v7 = v11;
        continue;
      case 7:
        if (!v7)
        {
          uint64_t v11 = 1;
          if ((int)result < a3)
          {
            uint64_t v15 = a4 + 32 * (int)result;
            *(void *)uint64_t v15 = a2;
            *(unsigned char *)(v15 + 24) = 1;
          }
        }
        a2 = v8 + 4;
        uint64_t v7 = v11;
        continue;
      case 9:
      case 0xA:
        uint64_t v7 = 0;
        if (v11 != 1)
        {
          uint64_t v7 = v11;
          if (v11 == 2 && (int)result < a3)
          {
            *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
            uint64_t v7 = 2;
          }
        }
        continue;
      case 0xB:
      case 0x11:
        uint64_t v7 = 2;
        if (v11 == 2) {
          continue;
        }
        return result;
      case 0xC:
        if (v7 == 2)
        {
          uint64_t v7 = 2;
          if (v6 == 12)
          {
            if ((int)result < a3) {
              *(void *)(a4 + 32 * (int)result + 16) = a2;
            }
            uint64_t v7 = 0;
            uint64_t result = (result + 1);
            int v6 = 12;
          }
        }
        else
        {
          int v6 = 12;
          uint64_t v7 = 2;
          if ((int)result < a3)
          {
            *(void *)(a4 + 32 * (int)result + 8) = v8 + 2;
            int v6 = 12;
            uint64_t v7 = 2;
          }
        }
        continue;
      case 0xD:
        if (v7 == 2)
        {
          uint64_t v7 = 2;
          if (v6 == 13)
          {
            if ((int)result < a3) {
              *(void *)(a4 + 32 * (int)result + 16) = a2;
            }
            uint64_t v7 = 0;
            uint64_t result = (result + 1);
            int v6 = 13;
          }
        }
        else
        {
          int v6 = 13;
          uint64_t v7 = 2;
          if ((int)result < a3)
          {
            *(void *)(a4 + 32 * (int)result + 8) = v8 + 2;
            int v6 = 13;
            uint64_t v7 = 2;
          }
        }
        continue;
      case 0x15:
        uint64_t v7 = 0;
        if (v11 != 1)
        {
          uint64_t v7 = v11;
          if (v11 == 2 && (int)result < a3)
          {
            uint64_t v16 = a4 + 32 * (int)result;
            int v18 = *(unsigned __int8 *)(v16 + 24);
            unsigned int v17 = (unsigned char *)(v16 + 24);
            uint64_t v7 = 2;
            if (v18)
            {
              if (v9 != 32
                || a2 == *(void *)(a4 + 32 * (int)result + 8)
                || (uint64_t v19 = *(unsigned __int8 *)(v8 + 2), v19 == 32)
                || (v20 = *(unsigned __int8 *)(a1 + v19 + 136), uint64_t v7 = 2, v6 == v20))
              {
                *unsigned int v17 = 0;
                uint64_t v7 = 2;
              }
            }
          }
        }
        continue;
      case 0x16:
      case 0x18:
      case 0x1D:
        if (!v7)
        {
          uint64_t v7 = 1;
          if ((int)result < a3)
          {
            uint64_t v12 = a4 + 32 * (int)result;
            *(void *)uint64_t v12 = a2;
            *(unsigned char *)(v12 + 24) = 1;
          }
        }
        continue;
      default:
        continue;
    }
  }
}

uint64_t normal_charRefNumber(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = a2[2];
  if (v2 == 59)
  {
LABEL_4:
    uint64_t v4 = 0;
    return checkCharRefNumber(v4);
  }
  if (v2 == 120)
  {
    int v3 = a2[3];
    if (v3 == 59) {
      goto LABEL_4;
    }
    uint64_t v4 = 0;
    uint64_t v7 = a2 + 4;
    while (1)
    {
      unsigned int v8 = (char)v3 - 48;
      if (v8 <= 0x36)
      {
        if (((1 << v8) & 0x3FF) != 0)
        {
          uint64_t v4 = v8 | (16 * v4);
          goto LABEL_18;
        }
        if (((1 << v8) & 0x7E0000) != 0)
        {
          uint64_t v4 = ((char)v3 + 16 * v4 - 55);
LABEL_18:
          if ((int)v4 >= 1114112) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_19;
        }
        if (((1 << v8) & 0x7E000000000000) != 0)
        {
          uint64_t v4 = ((char)v3 + 16 * v4 - 87);
          goto LABEL_18;
        }
      }
LABEL_19:
      int v9 = *v7++;
      LOBYTE(v3) = v9;
      if (v9 == 59) {
        return checkCharRefNumber(v4);
      }
    }
  }
  LODWORD(v4) = 0;
  uint64_t v5 = a2 + 3;
  while (1)
  {
    uint64_t v4 = (10 * v4 + (char)v2 - 48);
    if ((int)v4 >= 1114112) {
      break;
    }
    int v6 = *v5++;
    LOBYTE(v2) = v6;
    if (v6 == 59) {
      return checkCharRefNumber(v4);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t normal_predefinedEntityName(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a3 - (void)a2;
  if (a3 - (void)a2 == 4)
  {
    int v7 = (char)*a2;
    if (v7 == 97)
    {
      if (a2[1] == 112 && a2[2] == 111 && a2[3] == 115) {
        return 39;
      }
    }
    else if (v7 == 113 && a2[1] == 117 && a2[2] == 111 && a2[3] == 116)
    {
      return 34;
    }
    return 0;
  }
  if (v3 == 3)
  {
    if (*a2 == 97 && a2[1] == 109 && a2[2] == 112) {
      return 38;
    }
    return 0;
  }
  if (v3 != 2 || a2[1] != 116) {
    return 0;
  }
  int v4 = *a2;
  if (v4 == 103) {
    unsigned int v5 = 62;
  }
  else {
    unsigned int v5 = 0;
  }
  if (v4 == 108) {
    return 60;
  }
  else {
    return v5;
  }
}

uint64_t normal_updatePosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 >= 1)
  {
    while (2)
    {
      switch(*(unsigned char *)(result + *a2 + 136))
      {
        case 5:
          a2 += 2;
          goto LABEL_7;
        case 6:
          a2 += 3;
          goto LABEL_7;
        case 7:
          a2 += 4;
          goto LABEL_7;
        case 9:
          ++*a4;
          if (a3 - (uint64_t)(a2 + 1) < 1)
          {
            ++a2;
          }
          else if (*(unsigned char *)(result + a2[1] + 136) == 10)
          {
            a2 += 2;
          }
          else
          {
            ++a2;
          }
          a4[1] = 0;
          goto LABEL_8;
        case 0xA:
          ++*a4;
          a4[1] = 0;
          ++a2;
          goto LABEL_8;
        default:
          ++a2;
LABEL_7:
          ++a4[1];
LABEL_8:
          if (a3 - (uint64_t)a2 <= 0) {
            return result;
          }
          continue;
      }
    }
  }
  return result;
}

uint64_t normal_isPublicId(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (unsigned __int8 *)(a2 + 1);
  uint64_t v5 = ~(a2 + 1) + a3;
  if (v5 >= 1)
  {
    do
    {
      uint64_t v6 = *v4;
      int v7 = (char)v6;
      uint64_t v8 = *(unsigned __int8 *)(a1 + v6 + 136);
      if (v8 <= 0x23)
      {
        if (((1 << v8) & 0xFCB8FE600) != 0) {
          goto LABEL_4;
        }
        if (((1 << v8) & 0x4400000) != 0)
        {
          if ((v7 & 0x80000000) == 0) {
            goto LABEL_4;
          }
        }
        else if (v8 == 21)
        {
          if (v7 == 9) {
            goto LABEL_14;
          }
          goto LABEL_4;
        }
      }
      if (v7 != 64 && v7 != 36)
      {
LABEL_14:
        uint64_t result = 0;
        *a4 = v4;
        return result;
      }
LABEL_4:
      ++v4;
      --v5;
    }
    while (v5 > 0);
  }
  return 1;
}

uint64_t latin1_toUtf8(uint64_t a1, char **a2, char *a3, unsigned char **a4, unsigned char *a5)
{
  while (2)
  {
    for (uint64_t i = *a2; ; *a2 = i)
    {
      if (i == a3) {
        return 0;
      }
      int v6 = *i;
      int v7 = *a4;
      if ((v6 & 0x80000000) == 0) {
        break;
      }
      if (a5 - v7 < 2) {
        return 2;
      }
      *a4 = v7 + 1;
      *int v7 = (v6 >> 6) | 0xC0;
      char v8 = v6 & 0x3F | 0x80;
      int v9 = (*a4)++;
      *int v9 = v8;
      uint64_t i = *a2 + 1;
    }
    if (v7 != a5)
    {
      *a2 = i + 1;
      char v10 = *i;
      uint64_t v11 = (*a4)++;
      char *v11 = v10;
      continue;
    }
    break;
  }
  return 2;
}

uint64_t latin1_toUtf16(uint64_t a1, unint64_t *a2, unint64_t a3, void *a4, _WORD *a5)
{
  uint64_t v5 = (unsigned __int8 *)*a2;
  if (*a2 >= a3) {
    return 0;
  }
  int v6 = (_WORD *)*a4;
  while (v6 < a5)
  {
    *a2 = (unint64_t)(v5 + 1);
    int v7 = (_WORD *)*a4;
    *int v7 = *v5;
    int v6 = v7 + 1;
    *a4 = v6;
    uint64_t v5 = (unsigned __int8 *)*a2;
    if (*a2 >= a3) {
      return 0;
    }
  }
  if (v6 == a5) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t normal_scanLit(int a1, unsigned char *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 **a5)
{
  unint64_t v5 = a4 - (void)a3;
  if (a4 - (uint64_t)a3 < 1) {
    return 0xFFFFFFFFLL;
  }
  char v8 = a3;
  while (2)
  {
    int v11 = a2[*v8 + 136];
    switch(a2[*v8 + 136])
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_19;
      case 5:
        if (v5 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a2 + 55))(a2, v8)) {
          goto LABEL_19;
        }
        v8 += 2;
        goto LABEL_16;
      case 6:
        if (v5 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a2 + 56))(a2, v8)) {
          goto LABEL_19;
        }
        v8 += 3;
        goto LABEL_16;
      case 7:
        if (v5 >= 4)
        {
          if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a2 + 57))(a2, v8))
          {
LABEL_19:
            uint64_t result = 0;
            *a5 = v8;
            return result;
          }
          v8 += 4;
LABEL_16:
          unint64_t v5 = a4 - (void)v8;
          if (a4 - (uint64_t)v8 <= 0) {
            return 0xFFFFFFFFLL;
          }
          continue;
        }
        return 4294967294;
      case 0xC:
      case 0xD:
        ++v8;
        if (v11 != a1) {
          goto LABEL_16;
        }
        if (a4 - (uint64_t)v8 < 1) {
          return 4294967269;
        }
        *a5 = v8;
        unsigned int v13 = a2[*v8 + 136];
        BOOL v14 = v13 > 0x1E;
        int v15 = (1 << v13) & 0x40300E00;
        if (v14 || v15 == 0) {
          return 0;
        }
        else {
          return 27;
        }
      default:
        ++v8;
        goto LABEL_16;
    }
  }
}

uint64_t normal_scanDecl(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  switch(a1[*a2 + 136])
  {
    case 0x14:
      *a4 = a2 + 1;
      uint64_t result = 33;
      break;
    case 0x16:
    case 0x18:
      int v4 = a2 + 1;
      uint64_t v5 = a3 - (void)(a2 + 1);
      if (v5 < 1) {
        return 0xFFFFFFFFLL;
      }
      while (2)
      {
        switch(a1[*v4 + 136])
        {
          case 0x15:
            goto LABEL_11;
          case 0x16:
          case 0x18:
            ++v4;
            if (--v5 <= 0) {
              return 0xFFFFFFFFLL;
            }
            continue;
          case 0x17:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
            goto LABEL_17;
          case 0x1E:
            if ((unint64_t)v5 < 2) {
              return 0xFFFFFFFFLL;
            }
            unsigned int v7 = a1[v4[1] + 136];
            BOOL v8 = v7 > 0x1E;
            int v9 = (1 << v7) & 0x40200600;
            if (!v8 && v9 != 0) {
              goto LABEL_17;
            }
            goto LABEL_11;
          default:
            if (a1[*v4 + 136] - 9 >= 2)
            {
LABEL_17:
              uint64_t result = 0;
              *a4 = v4;
            }
            else
            {
LABEL_11:
              *a4 = v4;
              uint64_t result = 16;
            }
            break;
        }
        break;
      }
      break;
    case 0x1B:
      uint64_t result = normal_scanComment(a1, a2 + 1, a3, a4);
      break;
    default:
      uint64_t result = 0;
      *a4 = a2;
      break;
  }
  return result;
}

uint64_t normal_scanPi(unsigned char *a1, char *a2, uint64_t a3, char **a4)
{
  unint64_t v6 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  int v9 = a2;
  unsigned int v11 = a1[*a2 + 136];
  if (v11 > 0x15)
  {
    if (v11 != 22 && v11 != 24) {
      goto LABEL_34;
    }
    uint64_t v12 = 1;
  }
  else
  {
    switch(v11)
    {
      case 5u:
        if (v6 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 55))(a1, a2)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 52))(a1, v9))
        {
          goto LABEL_34;
        }
        uint64_t v12 = 2;
        break;
      case 6u:
        if (v6 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 56))(a1, a2)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 53))(a1, v9))
        {
          goto LABEL_34;
        }
        uint64_t v12 = 3;
        break;
      case 7u:
        if (v6 >= 4)
        {
          if (!(*((unsigned int (**)(unsigned char *, char *))a1 + 57))(a1, a2)
            && (*((unsigned int (**)(unsigned char *, char *))a1 + 54))(a1, v9))
          {
            uint64_t v12 = 4;
            break;
          }
LABEL_34:
          uint64_t result = 0;
          *a4 = v9;
          return result;
        }
        return 4294967294;
      default:
        goto LABEL_34;
    }
  }
  int v15 = &v9[v12];
  unint64_t v16 = a3 - (void)&v9[v12];
  if ((uint64_t)v16 < 1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v22 = 0;
  while (2)
  {
    uint64_t v17 = 1;
    switch(a1[*v15 + 136])
    {
      case 5:
        if (v16 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 55))(a1, v15)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 49))(a1, v15))
        {
          goto LABEL_44;
        }
        uint64_t v17 = 2;
        goto LABEL_20;
      case 6:
        if (v16 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 56))(a1, v15)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 50))(a1, v15))
        {
          goto LABEL_44;
        }
        uint64_t v17 = 3;
        goto LABEL_20;
      case 7:
        if (v16 < 4) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 57))(a1, v15)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 51))(a1, v15))
        {
          goto LABEL_44;
        }
        uint64_t v17 = 4;
LABEL_20:
        v15 += v17;
        unint64_t v16 = a3 - (void)v15;
        if (a3 - (uint64_t)v15 <= 0) {
          return 0xFFFFFFFFLL;
        }
        continue;
      case 9:
      case 0xA:
      case 0x15:
        uint64_t result = normal_checkPiTarget(v9, (uint64_t)v15, &v22);
        if (!result) {
          goto LABEL_45;
        }
        int v9 = v15 + 1;
        unint64_t v18 = a3 - (void)(v15 + 1);
        if ((uint64_t)v18 >= 1)
        {
          while (2)
          {
            switch(a1[*v9 + 136])
            {
              case 0:
              case 1:
              case 8:
                goto LABEL_34;
              case 5:
                if (v18 < 2) {
                  return 4294967294;
                }
                if ((*((unsigned int (**)(unsigned char *, char *))a1 + 55))(a1, v9)) {
                  goto LABEL_34;
                }
                uint64_t v19 = v9 + 2;
                goto LABEL_61;
              case 6:
                if (v18 < 3) {
                  return 4294967294;
                }
                if ((*((unsigned int (**)(unsigned char *, char *))a1 + 56))(a1, v9)) {
                  goto LABEL_34;
                }
                uint64_t v19 = v9 + 3;
                goto LABEL_61;
              case 7:
                if (v18 < 4) {
                  return 4294967294;
                }
                if ((*((unsigned int (**)(unsigned char *, char *))a1 + 57))(a1, v9)) {
                  goto LABEL_34;
                }
                uint64_t v19 = v9 + 4;
LABEL_61:
                unint64_t v18 = a3 - (void)v19;
                uint64_t result = 0xFFFFFFFFLL;
                int v9 = v19;
                if (a3 - (uint64_t)v19 <= 0) {
                  return result;
                }
                continue;
              case 0xF:
                uint64_t v19 = v9 + 1;
                if (a3 - (uint64_t)(v9 + 1) < 1) {
                  return 0xFFFFFFFFLL;
                }
                if (*v19 != 62) {
                  goto LABEL_61;
                }
                BOOL v21 = (unsigned __int8 *)(v9 + 2);
                goto LABEL_72;
              default:
                uint64_t v19 = v9 + 1;
                goto LABEL_61;
            }
          }
        }
        return 0xFFFFFFFFLL;
      case 0xF:
        uint64_t result = normal_checkPiTarget(v9, (uint64_t)v15, &v22);
        if (!result) {
          goto LABEL_45;
        }
        int v20 = v15 + 1;
        if (a3 - (uint64_t)(v15 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v20 == 62)
        {
          BOOL v21 = (unsigned __int8 *)(v15 + 2);
LABEL_72:
          *a4 = (char *)v21;
          uint64_t result = v22;
        }
        else
        {
LABEL_64:
          uint64_t result = 0;
          *a4 = v20;
        }
        break;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_20;
      case 0x1D:
LABEL_44:
        uint64_t result = 0;
LABEL_45:
        *a4 = v15;
        return result;
      default:
        int v20 = v15;
        goto LABEL_64;
    }
    return result;
  }
}

uint64_t normal_scanPercent(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v6 = a2;
  uint64_t result = 0;
  uint64_t v10 = 1;
  switch(*(unsigned char *)(a1 + *a2 + 136))
  {
    case 5:
      if (v4 < 2) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2)) {
        goto LABEL_16;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6);
      if (!result) {
        goto LABEL_17;
      }
      uint64_t v10 = 2;
      break;
    case 6:
      if (v4 < 3) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2)) {
        goto LABEL_16;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6);
      if (!result) {
        goto LABEL_17;
      }
      uint64_t v10 = 3;
      break;
    case 7:
      if (v4 < 4) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2)) {
        goto LABEL_16;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6);
      if (!result) {
        goto LABEL_17;
      }
      uint64_t v10 = 4;
      break;
    case 9:
    case 0xA:
    case 0x15:
      uint64_t result = 22;
      goto LABEL_17;
    case 0x16:
    case 0x18:
      break;
    default:
      goto LABEL_17;
  }
  v6 += v10;
  unint64_t v11 = a3 - (void)v6;
  if (a3 - (uint64_t)v6 < 1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + *v6 + 136);
    if (v12 > 0x11) {
      break;
    }
    switch(v12)
    {
      case 5u:
        if (v11 < 2) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)) {
          goto LABEL_16;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v6);
        if (!result) {
          goto LABEL_17;
        }
        uint64_t v13 = 2;
        break;
      case 6u:
        if (v11 < 3) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)) {
          goto LABEL_16;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v6);
        if (!result) {
          goto LABEL_17;
        }
        uint64_t v13 = 3;
        break;
      case 7u:
        if (v11 < 4) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)) {
          goto LABEL_16;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v6);
        if (!result) {
          goto LABEL_17;
        }
        uint64_t v13 = 4;
        break;
      default:
        goto LABEL_16;
    }
LABEL_44:
    v6 += v13;
    unint64_t v11 = a3 - (void)v6;
    if (a3 - (uint64_t)v6 <= 0) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v12 - 24 < 4 || v12 == 22)
  {
    uint64_t v13 = 1;
    goto LABEL_44;
  }
  if (v12 != 18)
  {
LABEL_16:
    uint64_t result = 0;
    goto LABEL_17;
  }
  ++v6;
  uint64_t result = 28;
LABEL_17:
  *a4 = v6;
  return result;
}

uint64_t normal_scanComment(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a2;
  if (*a2 != 45)
  {
LABEL_22:
    uint64_t result = 0;
    goto LABEL_23;
  }
  uint64_t v5 = a2 + 1;
  unint64_t v7 = a3 - (void)(a2 + 1);
  if ((uint64_t)v7 < 1) {
    return 0xFFFFFFFFLL;
  }
  while (2)
  {
    uint64_t result = 0;
    switch(a1[*v5 + 136])
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_23;
      case 2:
      case 3:
      case 4:
        goto LABEL_12;
      case 5:
        if (v7 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 55))(a1, v5)) {
          goto LABEL_22;
        }
        uint64_t v10 = v5 + 2;
        goto LABEL_19;
      case 6:
        if (v7 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 56))(a1, v5)) {
          goto LABEL_22;
        }
        uint64_t v10 = v5 + 3;
        goto LABEL_19;
      case 7:
        if (v7 < 4) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 57))(a1, v5)) {
          goto LABEL_22;
        }
        uint64_t v10 = v5 + 4;
        goto LABEL_19;
      default:
        if (a1[*v5 + 136] != 27)
        {
LABEL_12:
          uint64_t v10 = v5 + 1;
LABEL_19:
          unint64_t v7 = a3 - (void)v10;
          uint64_t v5 = v10;
          if (a3 - (uint64_t)v10 <= 0) {
            return 0xFFFFFFFFLL;
          }
          continue;
        }
        uint64_t v10 = v5 + 1;
        if (a3 - (uint64_t)(v5 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v10 != 45) {
          goto LABEL_19;
        }
        if (a3 - (uint64_t)(v5 + 2) < 1) {
          return 0xFFFFFFFFLL;
        }
        int v11 = v5[2];
        if (v11 == 62) {
          v5 += 3;
        }
        else {
          v5 += 2;
        }
        if (v11 == 62) {
          uint64_t result = 13;
        }
        else {
          uint64_t result = 0;
        }
LABEL_23:
        *a4 = v5;
        return result;
    }
  }
}

BOOL normal_checkPiTarget(char *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 11;
  if (a2 - (void)a1 != 3) {
    return 1;
  }
  int v3 = *a1;
  if (v3 == 120)
  {
    int v4 = 0;
  }
  else
  {
    if (v3 != 88) {
      return 1;
    }
    int v4 = 1;
  }
  int v5 = a1[1];
  if (v5 != 109)
  {
    if (v5 != 77) {
      return 1;
    }
    int v4 = 1;
  }
  int v6 = a1[2];
  if (v6 != 108) {
    return v6 != 76;
  }
  if (v4) {
    return 0;
  }
  *a3 = 12;
  return 1;
}

uint64_t normal_scanRef(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = a2;
  uint64_t result = 0;
  unsigned int v10 = *(unsigned __int8 *)(a1 + *a2 + 136);
  if (v10 <= 0x12)
  {
    switch(v10)
    {
      case 5u:
        if (v4 >= 2)
        {
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2)) {
            goto LABEL_59;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v7);
          if (!result) {
            goto LABEL_60;
          }
          uint64_t v11 = 2;
          goto LABEL_18;
        }
        break;
      case 6u:
        if (v4 >= 3)
        {
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2)) {
            goto LABEL_59;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v7);
          if (!result) {
            goto LABEL_60;
          }
          uint64_t v11 = 3;
          goto LABEL_18;
        }
        break;
      case 7u:
        if (v4 >= 4)
        {
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2)) {
            goto LABEL_59;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v7);
          if (!result) {
            goto LABEL_60;
          }
          uint64_t v11 = 4;
LABEL_18:
          v7 += v11;
          unint64_t v13 = a3 - (void)v7;
          if (a3 - (uint64_t)v7 >= 1)
          {
            while (1)
            {
              unsigned int v14 = *(unsigned __int8 *)(a1 + *v7 + 136);
              if (v14 > 0x11)
              {
                if (v14 - 24 >= 4 && v14 != 22)
                {
                  if (v14 == 18)
                  {
                    ++v7;
                    uint64_t result = 9;
                    goto LABEL_60;
                  }
LABEL_59:
                  uint64_t result = 0;
                  goto LABEL_60;
                }
                uint64_t v15 = 1;
              }
              else
              {
                switch(v14)
                {
                  case 5u:
                    if (v13 < 2) {
                      return 4294967294;
                    }
                    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7)) {
                      goto LABEL_59;
                    }
                    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v7);
                    if (!result) {
                      goto LABEL_60;
                    }
                    uint64_t v15 = 2;
                    break;
                  case 6u:
                    if (v13 < 3) {
                      return 4294967294;
                    }
                    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7)) {
                      goto LABEL_59;
                    }
                    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v7);
                    if (!result) {
                      goto LABEL_60;
                    }
                    uint64_t v15 = 3;
                    break;
                  case 7u:
                    if (v13 < 4) {
                      return 4294967294;
                    }
                    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7)) {
                      goto LABEL_59;
                    }
                    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v7);
                    if (!result) {
                      goto LABEL_60;
                    }
                    uint64_t v15 = 4;
                    break;
                  default:
                    goto LABEL_59;
                }
              }
              v7 += v15;
              unint64_t v13 = a3 - (void)v7;
              if (a3 - (uint64_t)v7 <= 0) {
                return 0xFFFFFFFFLL;
              }
            }
          }
          return 0xFFFFFFFFLL;
        }
        break;
      default:
        goto LABEL_60;
    }
    return 4294967294;
  }
  if (v10 != 19)
  {
    if (v10 == 22 || v10 == 24)
    {
      uint64_t v11 = 1;
      goto LABEL_18;
    }
LABEL_60:
    *a4 = v7;
    return result;
  }
  if (a3 - (uint64_t)(a2 + 1) >= 1)
  {
    uint64_t v17 = a2[1];
    if (v17 != 120)
    {
      if (*(unsigned char *)(a1 + v17 + 136) != 25)
      {
        uint64_t result = 0;
        unint64_t v7 = a2 + 1;
        goto LABEL_60;
      }
      unint64_t v7 = a2 + 2;
      uint64_t v20 = v4 - 2;
      while (v20-- >= 1)
      {
        unsigned int v22 = *v7++;
        int v23 = *(unsigned __int8 *)(a1 + v22 + 136);
        if (v23 != 25)
        {
          if (v23 != 18)
          {
            uint64_t result = 0;
            --v7;
            goto LABEL_60;
          }
          goto LABEL_77;
        }
      }
      return 0xFFFFFFFFLL;
    }
    if (a3 - (uint64_t)(a2 + 2) >= 1)
    {
      if ((*(unsigned char *)(a1 + a2[2] + 136) & 0xFE) != 0x18)
      {
        uint64_t result = 0;
        unint64_t v7 = a2 + 2;
        goto LABEL_60;
      }
      unint64_t v7 = a2 + 3;
      uint64_t v18 = a3 - (void)(a2 + 3);
      if (v18 >= 1)
      {
        uint64_t result = 0xFFFFFFFFLL;
        while (1)
        {
          int v19 = *(unsigned __int8 *)(a1 + *v7 + 136);
          if ((v19 - 24) >= 2) {
            break;
          }
          ++v7;
          if (--v18 <= 0) {
            return result;
          }
        }
        if (v19 != 18) {
          goto LABEL_59;
        }
        ++v7;
LABEL_77:
        uint64_t result = 10;
        goto LABEL_60;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t normal_scanAtts(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t v26 = a2;
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = a2;
  int v9 = 0;
  uint64_t v10 = a3 - 2;
  while (1)
  {
    uint64_t result = 0;
    unsigned int v12 = v7;
    switch(*(unsigned char *)(a1 + *v7 + 136))
    {
      case 5:
        if (v4 < 2) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7)) {
          goto LABEL_103;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v7);
        if (!result) {
          goto LABEL_104;
        }
        v7 += 2;
        goto LABEL_5;
      case 6:
        if (v4 < 3) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7)) {
          goto LABEL_103;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v7);
        if (!result) {
          goto LABEL_104;
        }
        v7 += 3;
        goto LABEL_5;
      case 7:
        if (v4 < 4) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7)) {
          goto LABEL_103;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v7);
        if (!result) {
          goto LABEL_104;
        }
        v7 += 4;
        goto LABEL_5;
      case 8:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
        goto LABEL_105;
      case 9:
      case 0xA:
      case 0x15:
        uint64_t v13 = a3 - (void)++v7;
        if (a3 - (uint64_t)v7 < 1) {
          return 0xFFFFFFFFLL;
        }
        while (1)
        {
          int v14 = *(unsigned __int8 *)(a1 + *v7 + 136);
          if ((v14 - 9) >= 2 && v14 != 21) {
            break;
          }
          ++v7;
          if (--v13 <= 0) {
            return 0xFFFFFFFFLL;
          }
        }
        if (v14 != 14) {
          goto LABEL_103;
        }
        uint64_t v26 = v7;
LABEL_18:
        unint64_t v16 = v7 + 1;
        if (a3 - (uint64_t)(v7 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v17 = *(unsigned __int8 *)(a1 + *v16 + 136);
        if ((v17 & 0xFE) != 0xC)
        {
          uint64_t v18 = v10 - (void)v7;
          while (1)
          {
            unint64_t v7 = v16;
            if (v17 > 0x15 || ((1 << v17) & 0x200600) == 0) {
              break;
            }
            if (v18 <= 0) {
              return 0xFFFFFFFFLL;
            }
            ++v16;
            unsigned int v17 = *(unsigned __int8 *)(a1 + v7[1] + 136);
            --v18;
            if ((v17 & 0xFE) == 0xC) {
              goto LABEL_25;
            }
          }
LABEL_103:
          uint64_t result = 0;
LABEL_104:
          unsigned int v12 = v7;
LABEL_105:
          *a4 = v12;
          return result;
        }
LABEL_25:
        v7 += 2;
        uint64_t v26 = v7;
        unint64_t v19 = a3 - (void)v7;
        if (a3 - (uint64_t)v7 < 1) {
          return 0xFFFFFFFFLL;
        }
        break;
      case 0xE:
        goto LABEL_18;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        ++v7;
        goto LABEL_5;
      case 0x17:
        if (v9) {
          goto LABEL_103;
        }
        unsigned int v12 = v7 + 1;
        uint64_t v26 = v7 + 1;
        unint64_t v20 = a3 - (void)(v7 + 1);
        if ((uint64_t)v20 < 1) {
          return 0xFFFFFFFFLL;
        }
        uint64_t result = 0;
        unsigned int v21 = *(unsigned __int8 *)(a1 + *v12 + 136);
        if (v21 <= 6)
        {
          if (v21 == 5)
          {
            if (v20 < 2) {
              return 4294967294;
            }
            if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7 + 1))
            {
LABEL_122:
              uint64_t result = 0;
              goto LABEL_105;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v7 + 1);
            if (!result) {
              goto LABEL_105;
            }
            v7 += 3;
          }
          else
          {
            if (v21 != 6) {
              goto LABEL_105;
            }
            if (v20 < 3) {
              return 4294967294;
            }
            if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7 + 1)) {
              goto LABEL_122;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v7 + 1);
            if (!result) {
              goto LABEL_105;
            }
            v7 += 4;
          }
        }
        else if (v21 == 7)
        {
          if (v20 < 4) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7 + 1)) {
            goto LABEL_122;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v7 + 1);
          if (!result) {
            goto LABEL_105;
          }
          v7 += 5;
        }
        else
        {
          if (v21 != 24 && v21 != 22) {
            goto LABEL_105;
          }
          v7 += 2;
        }
        uint64_t v26 = v7;
        int v9 = 1;
        goto LABEL_6;
      default:
        goto LABEL_104;
    }
LABEL_26:
    if (*(unsigned __int8 *)(a1 + *v7 + 136) != v17) {
      break;
    }
    unsigned int v12 = v7 + 1;
    uint64_t v26 = v7 + 1;
    if (a3 - (uint64_t)(v7 + 1) < 1) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = 0;
    unsigned int v23 = *(unsigned __int8 *)(a1 + *v12 + 136);
    if (v23 > 0xA)
    {
      if (v23 != 21)
      {
        if (v23 == 11)
        {
LABEL_111:
          ++v12;
          uint64_t result = 1;
          goto LABEL_105;
        }
        if (v23 != 17) {
          goto LABEL_105;
        }
LABEL_113:
        uint64_t v26 = v12 + 1;
        if (a3 - (uint64_t)(v12 + 1) >= 1)
        {
          int v25 = v12[1];
          if (v25 == 62) {
            v12 += 2;
          }
          else {
            ++v12;
          }
          if (v25 == 62) {
            uint64_t result = 3;
          }
          else {
            uint64_t result = 0;
          }
          goto LABEL_105;
        }
        return 0xFFFFFFFFLL;
      }
    }
    else if (v23 - 9 >= 2)
    {
      goto LABEL_105;
    }
    unsigned int v12 = v7 + 2;
    uint64_t v24 = a3 - (void)(v7 + 2);
    if (v24 < 1) {
      return 0xFFFFFFFFLL;
    }
    v7 += 6;
    while (2)
    {
      switch(*(unsigned char *)(a1 + *(v7 - 4) + 136))
      {
        case 5:
          if ((unint64_t)v24 < 2) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7 - 4)) {
            goto LABEL_122;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v7 - 4);
          if (!result) {
            goto LABEL_105;
          }
          int v9 = 0;
          v7 -= 2;
          goto LABEL_5;
        case 6:
          if ((unint64_t)v24 < 3) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7 - 4)) {
            goto LABEL_122;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v7 - 4);
          if (!result) {
            goto LABEL_105;
          }
          int v9 = 0;
          --v7;
          goto LABEL_5;
        case 7:
          if ((unint64_t)v24 < 4) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7 - 4))
          {
            uint64_t result = 0;
            unsigned int v12 = v7 - 4;
            goto LABEL_105;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v7 - 4);
          if (!result) {
            goto LABEL_105;
          }
          int v9 = 0;
LABEL_5:
          uint64_t v26 = v7;
          break;
        case 9:
        case 0xA:
        case 0x15:
          ++v12;
          --v24;
          ++v7;
          uint64_t result = 0xFFFFFFFFLL;
          if (v24 <= 0) {
            return result;
          }
          continue;
        case 0xB:
          unsigned int v12 = v7 - 4;
          goto LABEL_111;
        case 0x11:
          unsigned int v12 = v7 - 4;
          goto LABEL_113;
        case 0x16:
        case 0x18:
          int v9 = 0;
          v7 -= 3;
          goto LABEL_5;
        default:
          uint64_t result = 0;
          unsigned int v12 = v7 - 4;
          goto LABEL_105;
      }
      break;
    }
LABEL_6:
    unint64_t v4 = a3 - (void)v7;
    if (a3 - (uint64_t)v7 <= 0) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t result = 0;
  unsigned int v12 = v7;
  switch(*(unsigned char *)(a1 + *v7 + 136))
  {
    case 0:
    case 1:
    case 2:
    case 8:
      goto LABEL_105;
    case 3:
      uint64_t result = normal_scanRef(a1, v7 + 1, a3, &v26);
      if ((int)result >= 1)
      {
        unint64_t v7 = v26;
LABEL_41:
        unint64_t v19 = a3 - (void)v7;
        if (a3 - (uint64_t)v7 <= 0) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_26;
      }
      if (!result)
      {
        unsigned int v12 = v26;
        goto LABEL_105;
      }
      return result;
    case 5:
      if (v19 < 2) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7)) {
        goto LABEL_103;
      }
      v7 += 2;
      goto LABEL_40;
    case 6:
      if (v19 < 3) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7)) {
        goto LABEL_103;
      }
      v7 += 3;
      goto LABEL_40;
    case 7:
      if (v19 < 4) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7)) {
        goto LABEL_103;
      }
      v7 += 4;
LABEL_40:
      uint64_t v26 = v7;
      goto LABEL_41;
    default:
      ++v7;
      goto LABEL_40;
  }
}

uint64_t utf8_toUtf8(uint64_t a1, const void **a2, unint64_t a3, void **a4, uint64_t a5)
{
  unint64_t v6 = a3;
  unint64_t v14 = a3;
  BOOL v8 = *a2;
  int64_t v9 = a3 - (void)*a2;
  int64_t v10 = a5 - (void)*a4;
  if (v9 > v10)
  {
    unint64_t v6 = (unint64_t)v8 + v10;
    unint64_t v14 = (unint64_t)v8 + v10;
  }
  _INTERNAL_trim_to_complete_utf8_characters((unint64_t)v8, &v14);
  BOOL v11 = v14 < v6;
  size_t v12 = v14 - (void)*a2;
  memcpy(*a4, *a2, v12);
  *a2 = (char *)*a2 + v12;
  *a4 = (char *)*a4 + v12;
  if (v9 <= v10) {
    return v11;
  }
  else {
    return 2;
  }
}

uint64_t utf8_toUtf16(uint64_t a1, unint64_t *a2, unint64_t a3, _WORD **a4, unint64_t a5)
{
  int v5 = *a4;
  unint64_t v6 = (unsigned __int8 *)*a2;
  BOOL v7 = *a2 < a3;
  if (*a2 < a3 && (unint64_t)v5 < a5)
  {
    do
    {
      uint64_t v10 = *v6;
      int v11 = *(unsigned __int8 *)(a1 + v10 + 136);
      switch(v11)
      {
        case 7:
          if ((uint64_t)(a5 - (void)v5) < 4)
          {
            uint64_t result = 2;
            goto LABEL_25;
          }
          if ((uint64_t)(a3 - (void)v6) < 4)
          {
LABEL_23:
            uint64_t result = 1;
            goto LABEL_25;
          }
          unsigned __int8 v12 = v6[2];
          __int16 v13 = v6[3] & 0x3F;
          *int v5 = (((((v6[1] & 0x3F) << 12) & 0xFFE3F03F | ((*v6 & 7) << 18) | ((v12 & 0x3F) << 6)) + 16711680) >> 10) | 0xD800;
          v5[1] = v13 & 0xF03F | ((v12 & 0x3F) << 6) | 0xDC00;
          v5 += 2;
          v6 += 4;
          break;
        case 6:
          if ((uint64_t)(a3 - (void)v6) < 3) {
            goto LABEL_23;
          }
          *v5++ = ((_WORD)v10 << 12) | ((v6[1] & 0x3F) << 6) | v6[2] & 0x3F;
          v6 += 3;
          break;
        case 5:
          if ((uint64_t)(a3 - (void)v6) < 2) {
            goto LABEL_23;
          }
          *v5++ = v6[1] & 0x3F | ((v10 & 0x1F) << 6);
          v6 += 2;
          break;
        default:
          ++v6;
          *v5++ = (char)v10;
          break;
      }
      BOOL v7 = (unint64_t)v6 < a3;
    }
    while ((unint64_t)v6 < a3 && (unint64_t)v5 < a5);
  }
  if (v7) {
    uint64_t result = 2;
  }
  else {
    uint64_t result = 0;
  }
LABEL_25:
  *a2 = (unint64_t)v6;
  *a4 = v5;
  return result;
}

uint64_t utf8_isName2(uint64_t a1, unsigned __int8 *a2)
{
  return (1 << a2[1]) & namingBitmap[(2 * (*a2 & 3)) | (8 * namePages[((unint64_t)*a2 >> 2) & 7]) | (a2[1] >> 5) & 1];
}

uint64_t utf8_isName3(uint64_t a1, unsigned char *a2)
{
  return (1 << a2[2]) & namingBitmap[(2 * (a2[1] & 3)) | (8
                                                                      * namePages[(16 * (*a2 & 0xF)) | ((unint64_t)a2[1] >> 2) & 0xF]) | (a2[2] >> 5) & 1];
}

uint64_t isNever()
{
  return 0;
}

uint64_t utf8_isNmstrt2(uint64_t a1, unsigned __int8 *a2)
{
  return (1 << a2[1]) & namingBitmap[(2 * (*a2 & 3)) | (8
                                                                    * nmstrtPages[((unint64_t)*a2 >> 2) & 7]) | (a2[1] >> 5) & 1];
}

uint64_t utf8_isNmstrt3(uint64_t a1, unsigned char *a2)
{
  return (1 << a2[2]) & namingBitmap[(2 * (a2[1] & 3)) | (8
                                                                      * nmstrtPages[(16 * (*a2 & 0xF)) | ((unint64_t)a2[1] >> 2) & 0xF]) | (a2[2] >> 5) & 1];
}

BOOL utf8_isInvalid2(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 < 0xC2u) {
    return 1;
  }
  if ((a2[1] & 0x80u) != 0) {
    return a2[1] > 0xBFu;
  }
  return 1;
}

BOOL utf8_isInvalid3(uint64_t a1, unsigned __int8 *a2)
{
  if (((char)a2[2] & 0x80000000) == 0) {
    return 1;
  }
  unsigned int v3 = a2[2];
  int v4 = *a2;
  if (v4 != 239)
  {
    if (v3 > 0xBF) {
      return 1;
    }
    unsigned int v5 = a2[1];
    if (v4 == 224) {
      return (v5 + 64) < 0xE0u;
    }
    goto LABEL_11;
  }
  unsigned int v5 = a2[1];
  if (v5 != 191)
  {
    if (v3 > 0xBF) {
      return 1;
    }
LABEL_11:
    if ((v5 & 0x80) != 0) {
      goto LABEL_12;
    }
    return 1;
  }
  if (v3 > 0xBD) {
    return 1;
  }
  unsigned int v5 = 191;
LABEL_12:
  if (v4 == 237) {
    unsigned int v6 = 159;
  }
  else {
    unsigned int v6 = 191;
  }
  return v5 > v6;
}

uint64_t utf8_isInvalid4(uint64_t a1, unsigned __int8 *a2)
{
  if ((char)a2[3] > -65 || (char)a2[2] > -65) {
    return 1;
  }
  int v3 = *a2;
  unsigned int v4 = a2[1];
  if (v3 == 240) {
    return (v4 + 64) < 0xD0u;
  }
  if (v3 == 244) {
    unsigned int v5 = 143;
  }
  else {
    unsigned int v5 = 191;
  }
  BOOL v6 = v4 > v5;
  return (v4 & 0x80) == 0 || v6;
}

uint64_t little2_contentTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t *a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  char v4 = a3 - (_BYTE)a2;
  unint64_t v5 = (a3 - (void)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v5) {
    BOOL v6 = ((a3 - (void)a2) & 1) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    a3 = (unint64_t)&a2[v5];
  }
  if ((v4 & 1) != 0 && !v5) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = a2[1];
  if (v9 > 0xDB)
  {
    if (v9 - 220 < 4 || v9 == 255 && *a2 > 0xFDu)
    {
LABEL_17:
      uint64_t v7 = 0;
      *a4 = (uint64_t)a2;
      return v7;
    }
  }
  else
  {
    if (v9 - 216 < 4)
    {
LABEL_14:
      if ((uint64_t)(a3 - (void)a2) < 4) {
        return 4294967294;
      }
      uint64_t v10 = a2 + 4;
      goto LABEL_29;
    }
    if (!a2[1])
    {
      switch(*(unsigned char *)(a1 + *a2 + 136))
      {
        case 0:
        case 1:
        case 8:
          goto LABEL_17;
        case 2:
          int v11 = a2 + 2;
          uint64_t v12 = a3 - (void)(a2 + 2);
          if (v12 < 2) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v13 = a2[3];
          if (a2[3] > 0xDBu)
          {
            if ((v13 - 220) < 4) {
              goto LABEL_78;
            }
            if (v13 == 255)
            {
              LODWORD(v19) = *v11;
              if (v19 > 0xFD) {
                goto LABEL_78;
              }
              goto LABEL_88;
            }
          }
          else
          {
            if ((v13 - 216) < 4)
            {
LABEL_24:
              if ((unint64_t)v12 < 4) {
                return 4294967294;
              }
LABEL_78:
              uint64_t v7 = 0;
              goto LABEL_79;
            }
            if (!a2[3])
            {
              uint64_t v19 = *v11;
              switch(*(unsigned char *)(a1 + v19 + 136))
              {
                case 5:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x17:
                  goto LABEL_78;
                case 6:
                  if ((unint64_t)v12 >= 3) {
                    goto LABEL_78;
                  }
                  return 4294967294;
                case 7:
                  goto LABEL_24;
                case 0xF:
                  return little2_scanPi(a1, (char *)a2 + 4, a3, a4);
                case 0x10:
                  int v11 = a2 + 4;
                  if ((uint64_t)(a3 - (void)(a2 + 4)) < 2) {
                    return 0xFFFFFFFFLL;
                  }
                  if (a2[5]) {
                    goto LABEL_78;
                  }
                  int v31 = *(unsigned __int8 *)(a1 + *v11 + 136);
                  if (v31 != 20)
                  {
                    if (v31 != 27) {
                      goto LABEL_78;
                    }
                    return little2_scanComment(a1, a2 + 6, a3, a4);
                  }
                  int v11 = a2 + 6;
                  if ((uint64_t)(a3 - (void)(a2 + 6)) < 12) {
                    return 0xFFFFFFFFLL;
                  }
                  uint64_t v38 = 0;
                  while (!v11[1] && *v11 == big2_scanCdataSection_CDATA_LSQB[v38])
                  {
                    ++v38;
                    v11 += 2;
                    if (v38 == 6)
                    {
                      uint64_t v7 = 8;
                      int v11 = a2 + 18;
                      goto LABEL_79;
                    }
                  }
                  goto LABEL_78;
                case 0x11:
                  int v11 = a2 + 4;
                  uint64_t v32 = a3 - (void)(a2 + 4);
                  if (v32 < 2) {
                    return 0xFFFFFFFFLL;
                  }
                  uint64_t v33 = a2[5];
                  if (a2[5] > 0xDBu)
                  {
                    if ((v33 - 220) < 4) {
                      goto LABEL_78;
                    }
                    if (v33 == 255)
                    {
                      LODWORD(v34) = *v11;
                      if (v34 > 0xFD) {
                        goto LABEL_78;
                      }
                      goto LABEL_181;
                    }
                  }
                  else
                  {
                    if ((v33 - 216) < 4) {
                      goto LABEL_138;
                    }
                    if (!a2[5])
                    {
                      uint64_t v7 = 0;
                      uint64_t v34 = *v11;
                      unsigned int v37 = *(unsigned __int8 *)(a1 + v34 + 136);
                      if (v37 <= 0x15)
                      {
                        if (v37 == 6)
                        {
LABEL_203:
                          if ((unint64_t)v32 < 3) {
                            return 4294967294;
                          }
                          goto LABEL_78;
                        }
                        if (v37 != 7) {
                          goto LABEL_79;
                        }
LABEL_138:
                        if ((unint64_t)v32 < 4) {
                          return 4294967294;
                        }
                        goto LABEL_78;
                      }
                      if (v37 == 22 || v37 == 24) {
                        goto LABEL_182;
                      }
                      if (v37 != 29) {
                        goto LABEL_79;
                      }
LABEL_181:
                      if (((namingBitmap[(v34 >> 5) | (8 * nmstrtPages[v33])] >> v34) & 1) == 0) {
                        goto LABEL_78;
                      }
LABEL_182:
                      int v11 = a2 + 6;
                      if ((uint64_t)(a3 - (void)(a2 + 6)) < 2) {
                        return 0xFFFFFFFFLL;
                      }
                      for (uint64_t i = a3 - (void)a2 - 8; ; i -= 2)
                      {
                        uint64_t v40 = v11[1];
                        if (v11[1] > 0xDBu) {
                          break;
                        }
                        if (v11[1])
                        {
                          if ((v40 - 216) < 4)
                          {
LABEL_209:
                            if ((unint64_t)(i + 2) < 4) {
                              return 4294967294;
                            }
                            goto LABEL_78;
                          }
LABEL_195:
                          LODWORD(v41) = *v11;
                          goto LABEL_196;
                        }
                        uint64_t v41 = *v11;
                        int v42 = *(unsigned __int8 *)(a1 + v41 + 136);
                        if ((v42 - 22) >= 6)
                        {
                          if (v42 != 29)
                          {
                            uint64_t v7 = 0;
                            switch(*(unsigned char *)(a1 + v41 + 136))
                            {
                              case 6:
                                if ((unint64_t)(i + 2) >= 3) {
                                  goto LABEL_78;
                                }
                                return 4294967294;
                              case 7:
                                goto LABEL_209;
                              case 8:
                                goto LABEL_79;
                              case 9:
                              case 0xA:
                                goto LABEL_215;
                              case 0xB:
                                goto LABEL_226;
                              default:
                                if (v42 != 21) {
                                  goto LABEL_79;
                                }
LABEL_215:
                                if (i < 2) {
                                  return 0xFFFFFFFFLL;
                                }
                                v11 += 2;
                                break;
                            }
                            while (1)
                            {
                              if (v11[1]) {
                                goto LABEL_78;
                              }
                              int v44 = *(unsigned __int8 *)(a1 + *v11 + 136);
                              if ((v44 - 9) >= 2 && v44 != 21) {
                                break;
                              }
                              v11 += 2;
                              i -= 2;
                              uint64_t v7 = 0xFFFFFFFFLL;
                              if (i <= 1) {
                                return v7;
                              }
                            }
                            if (v44 == 11)
                            {
LABEL_226:
                              v11 += 2;
                              uint64_t v7 = 5;
                              goto LABEL_79;
                            }
                            goto LABEL_78;
                          }
                          goto LABEL_196;
                        }
LABEL_197:
                        v11 += 2;
                        uint64_t v7 = 0xFFFFFFFFLL;
                        if (i <= 1) {
                          return v7;
                        }
                      }
                      if (v40 != 255)
                      {
                        if ((v40 - 220) < 4) {
                          goto LABEL_78;
                        }
                        goto LABEL_195;
                      }
                      LODWORD(v41) = *v11;
                      if (v41 > 0xFD) {
                        goto LABEL_78;
                      }
LABEL_196:
                      if (((namingBitmap[(v41 >> 5) | (8 * namePages[v40])] >> v41) & 1) == 0) {
                        goto LABEL_78;
                      }
                      goto LABEL_197;
                    }
                  }
                  LODWORD(v34) = *v11;
                  goto LABEL_181;
                case 0x16:
                case 0x18:
                  goto LABEL_89;
                default:
                  if (*(unsigned char *)(a1 + v19 + 136) != 29) {
                    goto LABEL_78;
                  }
                  goto LABEL_88;
              }
            }
          }
          LODWORD(v19) = *v11;
LABEL_88:
          if (((namingBitmap[(v19 >> 5) | (8 * nmstrtPages[v13])] >> v19) & 1) == 0) {
            goto LABEL_78;
          }
LABEL_89:
          int v11 = a2 + 4;
          uint64_t v20 = a3 - (void)(a2 + 4);
          if (v20 < 2) {
            return 0xFFFFFFFFLL;
          }
          int v21 = 0;
          while (1)
          {
            uint64_t v22 = v11[1];
            if (v11[1] > 0xDBu)
            {
              if (v22 == 255)
              {
                LODWORD(v23) = *v11;
                if (v23 > 0xFD) {
                  goto LABEL_78;
                }
                goto LABEL_112;
              }
              if ((v22 - 220) < 4) {
                goto LABEL_78;
              }
            }
            else
            {
              if (!v11[1])
              {
                uint64_t v23 = *v11;
                uint64_t v24 = 2;
                switch(*(unsigned char *)(a1 + v23 + 136))
                {
                  case 6:
                    if ((unint64_t)v20 >= 3) {
                      goto LABEL_78;
                    }
                    return 4294967294;
                  case 7:
                    goto LABEL_125;
                  case 9:
                  case 0xA:
                  case 0x15:
                    v11 += 2;
                    uint64_t v32 = a3 - (void)v11;
                    if ((uint64_t)(a3 - (void)v11) < 2) {
                      return 0xFFFFFFFFLL;
                    }
                    while (2)
                    {
                      uint64_t v35 = v11[1];
                      if (!v11[1])
                      {
                        uint64_t v36 = *v11;
                        switch(*(unsigned char *)(a1 + v36 + 136))
                        {
                          case 6:
                            goto LABEL_203;
                          case 7:
                            goto LABEL_138;
                          case 9:
                          case 0xA:
                          case 0x15:
                            v11 += 2;
                            v32 -= 2;
                            uint64_t v7 = 0xFFFFFFFFLL;
                            if (v32 <= 1) {
                              return v7;
                            }
                            continue;
                          case 0xB:
                            goto LABEL_171;
                          case 0x11:
                            goto LABEL_172;
                          case 0x16:
                          case 0x18:
                            return little2_scanAtts(a1, v11 + 2, a3, (unsigned __int8 **)a4);
                          case 0x1D:
                            uint64_t v35 = 0;
                            goto LABEL_212;
                          default:
                            goto LABEL_78;
                        }
                      }
                      break;
                    }
                    if ((v35 - 216) < 4) {
                      goto LABEL_138;
                    }
                    if ((v35 - 220) < 4) {
                      goto LABEL_78;
                    }
                    if (v35 == 255)
                    {
                      LODWORD(v36) = *v11;
                      if (v36 > 0xFD) {
                        goto LABEL_78;
                      }
                      uint64_t v35 = 0xFFu;
                    }
                    else
                    {
                      LODWORD(v36) = *v11;
                    }
LABEL_212:
                    if (((namingBitmap[(v36 >> 5) | (8 * nmstrtPages[v35])] >> v36) & 1) == 0) {
                      goto LABEL_78;
                    }
                    return little2_scanAtts(a1, v11 + 2, a3, (unsigned __int8 **)a4);
                  case 0xB:
LABEL_171:
                    *a4 = (uint64_t)(v11 + 2);
                    return 2;
                  case 0x11:
LABEL_172:
                    unsigned int v17 = v11 + 2;
                    if ((uint64_t)(a3 - (void)(v11 + 2)) < 2) {
                      return 0xFFFFFFFFLL;
                    }
                    if (v11[3] || *v17 != 62) {
                      goto LABEL_63;
                    }
                    *a4 = (uint64_t)(v11 + 4);
                    return 4;
                  case 0x16:
                  case 0x18:
                  case 0x19:
                  case 0x1A:
                  case 0x1B:
                    goto LABEL_114;
                  case 0x17:
                    if (v21) {
                      goto LABEL_78;
                    }
                    int v25 = v11 + 2;
                    uint64_t v26 = a3 - (void)(v11 + 2);
                    if (v26 < 2) {
                      return 0xFFFFFFFFLL;
                    }
                    uint64_t v27 = v11[3];
                    if (v11[3] > 0xDBu)
                    {
                      if (v27 == 255)
                      {
                        LODWORD(v28) = *v25;
                        if (v28 > 0xFD) {
                          goto LABEL_179;
                        }
                        goto LABEL_123;
                      }
                      if ((v27 - 220) < 4) {
                        goto LABEL_179;
                      }
                    }
                    else
                    {
                      if (!v11[3])
                      {
                        uint64_t v28 = *v25;
                        unsigned int v29 = *(unsigned __int8 *)(a1 + v28 + 136);
                        if (v29 <= 0x15)
                        {
                          if (v29 != 5)
                          {
                            if (v29 == 6)
                            {
                              if ((unint64_t)v26 < 3) {
                                return 4294967294;
                              }
                            }
                            else if (v29 == 7)
                            {
LABEL_147:
                              if ((unint64_t)v26 < 4) {
                                return 4294967294;
                              }
                            }
                          }
LABEL_179:
                          uint64_t v7 = 0;
                          *a4 = (uint64_t)v25;
                          return v7;
                        }
                        if (v29 == 22 || v29 == 24) {
                          goto LABEL_124;
                        }
                        if (v29 != 29) {
                          goto LABEL_179;
                        }
LABEL_123:
                        if (((namingBitmap[(v28 >> 5) | (8 * nmstrtPages[v27])] >> v28) & 1) == 0) {
                          goto LABEL_179;
                        }
LABEL_124:
                        int v21 = 1;
                        uint64_t v24 = 4;
                        goto LABEL_114;
                      }
                      if ((v27 - 216) < 4) {
                        goto LABEL_147;
                      }
                    }
                    LODWORD(v28) = *v25;
                    goto LABEL_123;
                  case 0x1D:
                    goto LABEL_112;
                  default:
                    goto LABEL_78;
                }
              }
              if ((v22 - 216) < 4)
              {
LABEL_125:
                if ((unint64_t)v20 >= 4) {
                  goto LABEL_78;
                }
                return 4294967294;
              }
            }
            LODWORD(v23) = *v11;
LABEL_112:
            if (((namingBitmap[(v23 >> 5) | (8 * namePages[v22])] >> v23) & 1) == 0) {
              goto LABEL_78;
            }
            uint64_t v24 = 2;
LABEL_114:
            v11 += v24;
            uint64_t v20 = a3 - (void)v11;
            uint64_t v7 = 0xFFFFFFFFLL;
            if ((uint64_t)(a3 - (void)v11) <= 1) {
              return v7;
            }
          }
        case 3:
          return little2_scanRef(a1, a2 + 2, a3, a4);
        case 4:
          uint64_t v10 = a2 + 2;
          if ((uint64_t)(a3 - (void)(a2 + 2)) < 2) {
            return 4294967291;
          }
          if (a2[3] || *v10 != 93) {
            goto LABEL_29;
          }
          unsigned int v17 = a2 + 4;
          if ((uint64_t)(a3 - (void)(a2 + 4)) < 2) {
            return 4294967291;
          }
          if (!a2[5] && *v17 == 62)
          {
LABEL_63:
            uint64_t v7 = 0;
            *a4 = (uint64_t)v17;
            return v7;
          }
          goto LABEL_29;
        case 5:
          if ((uint64_t)(a3 - (void)a2) >= 2) {
            break;
          }
          return 4294967294;
        case 6:
          if ((uint64_t)(a3 - (void)a2) < 3) {
            return 4294967294;
          }
          uint64_t v10 = a2 + 3;
          goto LABEL_29;
        case 7:
          goto LABEL_14;
        case 9:
          uint64_t v18 = a2 + 2;
          if ((uint64_t)(a3 - (void)(a2 + 2)) < 2) {
            return 4294967293;
          }
          if (!a2[3] && *(unsigned char *)(a1 + a2[2] + 136) == 10) {
            uint64_t v18 = a2 + 4;
          }
LABEL_74:
          *a4 = (uint64_t)v18;
          return 7;
        case 0xA:
          uint64_t v18 = a2 + 2;
          goto LABEL_74;
        default:
          break;
      }
    }
  }
  uint64_t v10 = a2 + 2;
LABEL_29:
  unint64_t v14 = a3 - (void)v10;
  if ((uint64_t)(a3 - (void)v10) < 2)
  {
    unint64_t v16 = v10;
LABEL_53:
    *a4 = (uint64_t)v16;
    return 6;
  }
  while (1)
  {
    unsigned int v15 = v10[1];
    if (v15 > 0xDB)
    {
      if (v15 == 255)
      {
        if (*v10 > 0xFDu) {
          goto LABEL_54;
        }
      }
      else if (v15 - 220 < 4)
      {
LABEL_54:
        *a4 = (uint64_t)v10;
        return 6;
      }
      goto LABEL_47;
    }
    if (v15 - 216 >= 4) {
      break;
    }
LABEL_32:
    if (v14 <= 3) {
      goto LABEL_54;
    }
    unint64_t v16 = v10 + 4;
LABEL_48:
    unint64_t v14 = a3 - (void)v16;
    uint64_t v10 = v16;
    if ((uint64_t)(a3 - (void)v16) <= 1) {
      goto LABEL_53;
    }
  }
  if (v10[1])
  {
LABEL_47:
    unint64_t v16 = v10 + 2;
    goto LABEL_48;
  }
  switch(*(unsigned char *)(a1 + *v10 + 136))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 0xA:
      goto LABEL_54;
    case 4:
      if (v14 < 4) {
        goto LABEL_54;
      }
      unint64_t v16 = v10 + 2;
      if (v10[3] || *v16 != 93) {
        goto LABEL_48;
      }
      if (v14 < 6) {
        goto LABEL_54;
      }
      if (v10[5] || v10[4] != 62) {
        goto LABEL_48;
      }
      uint64_t v7 = 0;
      int v11 = v10 + 4;
      break;
    case 6:
      if (v14 <= 2) {
        goto LABEL_54;
      }
      unint64_t v16 = v10 + 3;
      goto LABEL_48;
    case 7:
      goto LABEL_32;
    default:
      goto LABEL_47;
  }
LABEL_79:
  *a4 = (uint64_t)v11;
  return v7;
}

uint64_t little2_cdataSectionTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  unint64_t v4 = (a3 - (void)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v4) {
    BOOL v5 = ((a3 - (void)a2) & 1) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  BOOL v6 = &a2[v4];
  if (v5) {
    BOOL v6 = (unsigned __int8 *)a3;
  }
  if ((((_BYTE)a3 - (_BYTE)a2) & 1) == 0 || v4)
  {
    unsigned int v8 = a2[1];
    if (v8 > 0xDB)
    {
      if (v8 - 220 < 4 || v8 == 255 && *a2 > 0xFDu)
      {
        uint64_t v7 = 0;
        goto LABEL_51;
      }
    }
    else
    {
      if (v8 - 216 < 4)
      {
LABEL_13:
        if (v6 - a2 < 4) {
          return 4294967294;
        }
        unsigned int v9 = a2 + 4;
        goto LABEL_30;
      }
      if (!a2[1])
      {
        uint64_t v7 = 0;
        switch(*(unsigned char *)(a1 + *a2 + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_51;
          case 4:
            unsigned int v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (a2[3] || *v9 != 93) {
              goto LABEL_30;
            }
            if (v6 - (a2 + 4) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (a2[5] || a2[4] != 62) {
              goto LABEL_30;
            }
            a2 += 6;
            uint64_t v7 = 40;
            goto LABEL_51;
          case 5:
            if (v6 - a2 >= 2) {
              goto LABEL_29;
            }
            return 4294967294;
          case 6:
            if (v6 - a2 < 3) {
              return 4294967294;
            }
            unsigned int v9 = a2 + 3;
            goto LABEL_30;
          case 7:
            goto LABEL_13;
          case 9:
            unsigned int v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (a2[3])
            {
              uint64_t v7 = 7;
              goto LABEL_50;
            }
            if (*(unsigned char *)(a1 + a2[2] + 136) == 10) {
              a2 += 4;
            }
            else {
              a2 += 2;
            }
LABEL_61:
            uint64_t v7 = 7;
            break;
          case 0xA:
            a2 += 2;
            goto LABEL_61;
          default:
            goto LABEL_29;
        }
        goto LABEL_51;
      }
    }
LABEL_29:
    unsigned int v9 = a2 + 2;
LABEL_30:
    unint64_t v10 = v6 - v9;
    if (v6 - v9 >= 2)
    {
      while (1)
      {
        unsigned int v11 = v9[1];
        if (v11 > 0xDB) {
          break;
        }
        if (v11 - 216 < 4) {
          goto LABEL_33;
        }
        uint64_t v12 = 2;
        if (!v9[1])
        {
          unsigned int v13 = *(unsigned __int8 *)(a1 + *v9 + 136);
          if (v13 <= 0xA)
          {
            if (v13 == 6)
            {
              if (v10 < 3) {
                goto LABEL_49;
              }
              uint64_t v12 = 3;
              goto LABEL_48;
            }
            if (v13 != 7)
            {
              uint64_t v12 = 2;
              if (((1 << v13) & 0x713) != 0) {
                goto LABEL_49;
              }
              goto LABEL_48;
            }
LABEL_33:
            if (v10 < 4) {
              goto LABEL_49;
            }
            uint64_t v12 = 4;
            goto LABEL_48;
          }
          goto LABEL_37;
        }
LABEL_48:
        v9 += v12;
        unint64_t v10 = v6 - v9;
        if (v6 - v9 <= 1) {
          goto LABEL_49;
        }
      }
      if (v11 != 255)
      {
        uint64_t v12 = 2;
        if (v11 - 220 < 4) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      if (*v9 > 0xFDu) {
        goto LABEL_49;
      }
LABEL_37:
      uint64_t v12 = 2;
      goto LABEL_48;
    }
LABEL_49:
    uint64_t v7 = 6;
LABEL_50:
    a2 = v9;
LABEL_51:
    *a4 = a2;
    return v7;
  }
  return 0xFFFFFFFFLL;
}

uint64_t little2_ignoreSectionTok(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 **a4)
{
  unint64_t v4 = &a2[(a3 - a2) & 0xFFFFFFFFFFFFFFFELL];
  if (((a3 - a2) & 1) == 0) {
    unint64_t v4 = a3;
  }
  unint64_t v5 = v4 - a2;
  if (v4 - a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  while (1)
  {
    unsigned int v7 = a2[1];
    if (v7 > 0xDB)
    {
      if (v7 == 255)
      {
        if (*a2 > 0xFDu) {
          goto LABEL_38;
        }
      }
      else if (v7 - 220 < 4)
      {
LABEL_38:
        uint64_t v9 = 0;
        goto LABEL_39;
      }
      goto LABEL_23;
    }
    if (v7 - 216 >= 4) {
      break;
    }
LABEL_7:
    if (v5 < 4) {
      return 4294967294;
    }
    unsigned int v8 = a2 + 4;
LABEL_24:
    unint64_t v5 = v4 - v8;
    a2 = v8;
    if (v4 - v8 <= 1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (a2[1])
  {
LABEL_23:
    unsigned int v8 = a2 + 2;
    goto LABEL_24;
  }
  uint64_t v9 = 0;
  switch(*(unsigned char *)(a1 + *a2 + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_39;
    case 2:
      unsigned int v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[3] || *v8 != 33) {
        goto LABEL_24;
      }
      unsigned int v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (!a2[5] && *v8 == 91)
      {
        unsigned int v8 = a2 + 6;
        ++v6;
      }
      goto LABEL_24;
    case 4:
      unsigned int v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[3] || *v8 != 93) {
        goto LABEL_24;
      }
      unsigned int v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[5] || *v8 != 62) {
        goto LABEL_24;
      }
      unsigned int v8 = a2 + 6;
      if (v6)
      {
        --v6;
        goto LABEL_24;
      }
      uint64_t v9 = 42;
      a2 += 6;
LABEL_39:
      *a4 = a2;
      return v9;
    case 6:
      if (v5 < 3) {
        return 4294967294;
      }
      unsigned int v8 = a2 + 3;
      goto LABEL_24;
    case 7:
      goto LABEL_7;
    default:
      goto LABEL_23;
  }
}

uint64_t little2_attributeValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (v4[1] - 216 < 4)
  {
LABEL_5:
    uint64_t v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (void)v4) <= 1)
    {
LABEL_27:
      *a4 = v4;
      return 6;
    }
  }
  if (v4[1])
  {
    uint64_t v5 = 2;
    goto LABEL_6;
  }
  uint64_t v5 = 2;
  switch(*(unsigned char *)(a1 + *v4 + 136))
  {
    case 2:
      uint64_t result = 0;
      *a4 = v4;
      return result;
    case 3:
      if (v4 != a2) {
        goto LABEL_27;
      }
      return little2_scanRef(a1, a2 + 2, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      uint64_t v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2) {
        goto LABEL_27;
      }
      unsigned int v7 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 2)
      {
        uint64_t result = 4294967293;
      }
      else
      {
        if (!a2[3] && *(unsigned char *)(a1 + a2[2] + 136) == 10) {
          unsigned int v7 = a2 + 4;
        }
LABEL_29:
        *a4 = v7;
        uint64_t result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2) {
        goto LABEL_27;
      }
      unsigned int v7 = a2 + 2;
      goto LABEL_29;
    default:
      if (*(unsigned char *)(a1 + *v4 + 136) != 21) {
        goto LABEL_6;
      }
      if (v4 != a2) {
        goto LABEL_27;
      }
      *a4 = a2 + 2;
      uint64_t result = 39;
      break;
  }
  return result;
}

uint64_t little2_entityValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (v4[1] - 216 < 4)
  {
LABEL_5:
    uint64_t v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (void)v4) <= 1)
    {
LABEL_30:
      *a4 = v4;
      return 6;
    }
  }
  if (v4[1])
  {
    uint64_t v5 = 2;
    goto LABEL_6;
  }
  uint64_t v5 = 2;
  switch(*(unsigned char *)(a1 + *v4 + 136))
  {
    case 3:
      if (v4 != a2) {
        goto LABEL_30;
      }
      unsigned int v7 = a2 + 2;
      return little2_scanRef(a1, v7, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      uint64_t v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2) {
        goto LABEL_30;
      }
      unsigned int v8 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 2)
      {
        uint64_t result = 4294967293;
      }
      else
      {
        if (!a2[3] && *(unsigned char *)(a1 + a2[2] + 136) == 10) {
          unsigned int v8 = a2 + 4;
        }
LABEL_33:
        *a4 = v8;
        uint64_t result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2) {
        goto LABEL_30;
      }
      unsigned int v8 = a2 + 2;
      goto LABEL_33;
    default:
      if (*(unsigned char *)(a1 + *v4 + 136) != 30) {
        goto LABEL_6;
      }
      if (v4 != a2) {
        goto LABEL_30;
      }
      LODWORD(result) = little2_scanPercent(a1, a2 + 2, a3, a4);
      if (result == 22) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
      break;
  }
  return result;
}

BOOL little2_nameMatchesAscii(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned char *a4)
{
  int v4 = *a4;
  if (!*a4) {
    return a2 == a3;
  }
  uint64_t v5 = a4 + 1;
  uint64_t v6 = a3 - a2;
  while (1)
  {
    BOOL v7 = v6 < 2;
    v6 -= 2;
    if (v7 || a2[1] || *a2 != v4) {
      break;
    }
    a2 += 2;
    int v8 = *v5++;
    int v4 = v8;
    if (!v8) {
      return a2 == a3;
    }
  }
  return 0;
}

uint64_t little2_nameLength(uint64_t a1, unsigned __int8 *a2)
{
  for (uint64_t i = a2; ; i += v4)
  {
    unsigned int v3 = i[1];
    if (v3 > 0xDB)
    {
      if (v3 == 255)
      {
        if (*i > 0xFDu) {
          return (i - a2);
        }
        uint64_t v4 = 2;
      }
      else
      {
        uint64_t v4 = 2;
        if (v3 - 220 < 4) {
          return (i - a2);
        }
      }
      continue;
    }
    if (v3 - 216 < 4)
    {
      uint64_t v4 = 4;
      continue;
    }
    uint64_t v4 = 2;
    if (!i[1]) {
      break;
    }
LABEL_5:
    ;
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + *i + 136) - 5;
  if (v5 < 0x19 && ((0x17E0007u >> v5) & 1) != 0)
  {
    uint64_t v4 = qword_20D626D70[(char)v5];
    goto LABEL_5;
  }
  return (i - a2);
}

unsigned __int8 *little2_skipS(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2[1])
  {
    while (1)
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + *a2 + 136);
      BOOL v4 = v3 > 0x15;
      int v5 = (1 << v3) & 0x200600;
      if (v4 || v5 == 0) {
        break;
      }
      int v2 = a2 + 2;
      int v7 = a2[3];
      a2 += 2;
      if (v7) {
        return v2;
      }
    }
  }
  return a2;
}

uint64_t little2_getAtts(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t result = 0;
  int v6 = 0;
  uint64_t v7 = 1;
  while (1)
  {
    while (1)
    {
      uint64_t v8 = v7;
      unint64_t v10 = a2 + 3;
      unsigned int v9 = a2[3];
      unsigned int v11 = a2 + 2;
      if (v9 > 0xDB) {
        break;
      }
      uint64_t v12 = a2;
      if (v9 - 216 >= 4)
      {
        if (a2[3]) {
          goto LABEL_16;
        }
        uint64_t v14 = *v11;
        a2 += 2;
        switch(*(unsigned char *)(a1 + v14 + 136))
        {
          case 3:
            a2 = v11;
            if ((int)result < a3)
            {
              *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
              a2 = v11;
            }
            continue;
          case 5:
          case 0x16:
          case 0x18:
          case 0x1D:
            goto LABEL_16;
          case 6:
            a2 = v10;
            if (!v7)
            {
              uint64_t v7 = 1;
              a2 = v10;
              if ((int)result < a3)
              {
                uint64_t v17 = a4 + 32 * (int)result;
                *(void *)uint64_t v17 = v11;
                *(unsigned char *)(v17 + 24) = 1;
                a2 = v10;
              }
            }
            continue;
          case 7:
            goto LABEL_4;
          case 9:
          case 0xA:
            uint64_t v7 = 0;
            a2 = v11;
            if (v8 == 1) {
              continue;
            }
            a2 = v11;
            uint64_t v7 = v8;
            if (v8 != 2) {
              continue;
            }
            a2 = v11;
            if ((int)result >= a3) {
              continue;
            }
            *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
            goto LABEL_66;
          case 0xB:
          case 0x11:
            uint64_t v7 = 2;
            a2 = v11;
            if (v8 == 2) {
              continue;
            }
            return result;
          case 0xC:
            if (v7 == 2)
            {
              uint64_t v7 = 2;
              a2 = v11;
              if (v6 == 12)
              {
                if ((int)result < a3) {
                  *(void *)(a4 + 32 * (int)result + 16) = v11;
                }
                uint64_t v7 = 0;
                uint64_t result = (result + 1);
                int v6 = 12;
                a2 = v11;
              }
              continue;
            }
            int v6 = 12;
            uint64_t v7 = 2;
            a2 = v11;
            if ((int)result >= a3) {
              continue;
            }
            *(void *)(a4 + 32 * (int)result + 8) = v12 + 4;
            int v6 = 12;
            goto LABEL_66;
          case 0xD:
            if (v7 == 2)
            {
              uint64_t v7 = 2;
              a2 = v11;
              if (v6 == 13)
              {
                if ((int)result < a3) {
                  *(void *)(a4 + 32 * (int)result + 16) = v11;
                }
                uint64_t v7 = 0;
                uint64_t result = (result + 1);
                int v6 = 13;
                a2 = v11;
              }
              continue;
            }
            int v6 = 13;
            uint64_t v7 = 2;
            a2 = v11;
            if ((int)result >= a3) {
              continue;
            }
            *(void *)(a4 + 32 * (int)result + 8) = v12 + 4;
            int v6 = 13;
            goto LABEL_66;
          case 0x15:
            uint64_t v7 = 0;
            a2 = v11;
            if (v8 == 1) {
              continue;
            }
            a2 = v11;
            uint64_t v7 = v8;
            if (v8 != 2) {
              continue;
            }
            a2 = v11;
            if ((int)result >= a3) {
              continue;
            }
            uint64_t v18 = a4 + 32 * (int)result;
            int v20 = *(unsigned __int8 *)(v18 + 24);
            uint64_t v19 = (unsigned char *)(v18 + 24);
            uint64_t v7 = 2;
            a2 = v11;
            if (!v20) {
              continue;
            }
            if (v11 == *(unsigned __int8 **)(a4 + 32 * (int)result + 8) || v14 != 32) {
              goto LABEL_65;
            }
            unsigned int v21 = v12[5];
            if (v21 > 0xDB)
            {
              if (v21 - 220 < 4)
              {
                int v22 = 8;
                goto LABEL_64;
              }
              if (v21 == 255 && v12[4] > 0xFDu)
              {
                int v22 = 0;
                goto LABEL_64;
              }
LABEL_63:
              int v22 = 29;
              goto LABEL_64;
            }
            if (v21 - 216 < 4)
            {
              int v22 = 7;
              goto LABEL_64;
            }
            if (v12[5]) {
              goto LABEL_63;
            }
            uint64_t v23 = v12[4];
            if (v23 == 32) {
              goto LABEL_65;
            }
            int v22 = *(unsigned __int8 *)(a1 + v23 + 136);
LABEL_64:
            uint64_t v7 = 2;
            a2 = v11;
            if (v22 != v6) {
              continue;
            }
LABEL_65:
            unsigned char *v19 = 0;
LABEL_66:
            uint64_t v7 = 2;
            a2 = v11;
            break;
          default:
            continue;
        }
      }
      else
      {
LABEL_4:
        if (!v7)
        {
          uint64_t v8 = 1;
          if ((int)result < a3)
          {
            uint64_t v16 = a4 + 32 * (int)result;
            *(void *)uint64_t v16 = v11;
            *(unsigned char *)(v16 + 24) = 1;
          }
        }
        a2 = v12 + 4;
        uint64_t v7 = v8;
      }
    }
    a2 += 2;
    if (v9 - 220 >= 4)
    {
      if (v9 == 255)
      {
        BOOL v13 = *v11 <= 0xFDu && v7 == 0;
        a2 = v11;
        if (v13) {
          goto LABEL_17;
        }
      }
      else
      {
LABEL_16:
        a2 = v11;
        if (!v7)
        {
LABEL_17:
          uint64_t v7 = 1;
          a2 = v11;
          if ((int)result < a3)
          {
            uint64_t v15 = a4 + 32 * (int)result;
            *(void *)uint64_t v15 = v11;
            *(unsigned char *)(v15 + 24) = 1;
            a2 = v11;
          }
        }
      }
    }
  }
}

uint64_t little2_charRefNumber(uint64_t a1, unsigned char *a2)
{
  if (!a2[5] && a2[4] == 120)
  {
    uint64_t v2 = 0;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      if (!*i)
      {
        int v4 = (char)*(i - 1);
        if (v4 == 59) {
          return checkCharRefNumber(v2);
        }
        int v5 = v4 - 48;
        if ((v4 - 48) <= 0x36)
        {
          if (((1 << v5) & 0x3FF) != 0)
          {
            uint64_t v2 = v5 | (16 * v2);
          }
          else if (((1 << v5) & 0x7E0000) != 0)
          {
            uint64_t v2 = (v4 + 16 * v2 - 55);
          }
          else
          {
            if (((1 << v5) & 0x7E000000000000) == 0) {
              continue;
            }
            uint64_t v2 = (v4 + 16 * v2 - 87);
          }
          if ((int)v2 >= 1114112) {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  uint64_t v2 = 0;
  for (uint64_t j = a2 + 5; *j; j += 2)
  {
    int v7 = -1;
LABEL_19:
    uint64_t v2 = (v7 + 10 * v2 - 48);
    if ((int)v2 >= 1114112) {
      return 0xFFFFFFFFLL;
    }
  }
  int v7 = (char)*(j - 1);
  if (v7 != 59) {
    goto LABEL_19;
  }
  return checkCharRefNumber(v2);
}

uint64_t little2_predefinedEntityName(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = (a3 - (uint64_t)a2) / 2;
  if (v3 == 4)
  {
    if (!a2[1])
    {
      int v7 = (char)*a2;
      if (v7 == 97)
      {
        if (!a2[3] && a2[2] == 112 && !a2[5] && a2[4] == 111 && !a2[7] && a2[6] == 115) {
          return 39;
        }
      }
      else if (v7 == 113 && !a2[3] && a2[2] == 117 && !a2[5] && a2[4] == 111 && !a2[7] && a2[6] == 116)
      {
        return 34;
      }
    }
    return 0;
  }
  if (v3 == 3)
  {
    if (!a2[1] && *a2 == 97 && !a2[3] && a2[2] == 109 && !a2[5] && a2[4] == 112) {
      return 38;
    }
    return 0;
  }
  if (v3 != 2 || a2[3] || a2[2] != 116 || a2[1]) {
    return 0;
  }
  int v4 = *a2;
  if (v4 == 103) {
    unsigned int v5 = 62;
  }
  else {
    unsigned int v5 = 0;
  }
  if (v4 == 108) {
    return 60;
  }
  else {
    return v5;
  }
}

uint64_t little2_updatePosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 >= 2)
  {
    do
    {
      if (a2[1] - 216 >= 4)
      {
        if (!a2[1])
        {
          switch(*(unsigned char *)(result + *a2 + 136))
          {
            case 6:
              a2 += 3;
              goto LABEL_7;
            case 7:
              goto LABEL_3;
            case 9:
              ++*a4;
              int v4 = a2 + 2;
              if (a3 - (uint64_t)(a2 + 2) >= 2 && !a2[3] && *(unsigned char *)(result + a2[2] + 136) == 10) {
                int v4 = a2 + 4;
              }
              a4[1] = 0;
              a2 = v4;
              break;
            case 0xA:
              ++*a4;
              a4[1] = 0;
              a2 += 2;
              break;
            default:
              goto LABEL_6;
          }
          continue;
        }
LABEL_6:
        a2 += 2;
      }
      else
      {
LABEL_3:
        a2 += 4;
      }
LABEL_7:
      ++a4[1];
    }
    while (a3 - (uint64_t)a2 > 1);
  }
  return result;
}

uint64_t little2_isPublicId(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (unsigned __int8 *)(a2 + 2);
  uint64_t v5 = a3 - (a2 + 2) - 2;
  if (v5 >= 2)
  {
    do
    {
      if (v4[1])
      {
LABEL_15:
        uint64_t result = 0;
        *a4 = v4;
        return result;
      }
      uint64_t v6 = *v4;
      int v7 = (char)v6;
      uint64_t v8 = *(unsigned __int8 *)(a1 + v6 + 136);
      if (v8 <= 0x23)
      {
        if (((1 << v8) & 0xFCB8FE600) != 0) {
          goto LABEL_5;
        }
        if (((1 << v8) & 0x4400000) != 0)
        {
          if ((v7 & 0x80000000) == 0) {
            goto LABEL_5;
          }
        }
        else if (v8 == 21)
        {
          if (v7 == 9) {
            goto LABEL_15;
          }
          goto LABEL_5;
        }
      }
      if (v7 != 64 && v7 != 36) {
        goto LABEL_15;
      }
LABEL_5:
      v4 += 2;
      v5 -= 2;
    }
    while (v5 > 1);
  }
  return 1;
}

uint64_t little2_toUtf8(uint64_t a1, unsigned __int8 **a2, uint64_t a3, unsigned char **a4, unsigned char *a5)
{
  uint64_t v5 = *a2;
  int64_t v6 = (a3 - (void)*a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v6 >= 1)
  {
    int v7 = &v5[v6];
    do
    {
      unsigned int v8 = *v5;
      int v9 = (char)v8;
      unsigned int v10 = v5[1];
      if (v10 - 1 >= 7)
      {
        if (v10 - 216 < 4)
        {
          uint64_t v16 = *a4;
          if (a5 - *a4 < 4) {
            goto LABEL_21;
          }
          if (v7 - v5 < 4)
          {
            uint64_t result = 1;
            goto LABEL_23;
          }
          unsigned int v17 = ((v8 >> 6) & 0xFFFFFFF3 | (4 * (v10 & 3))) + 1;
          *a4 = v16 + 1;
          *uint64_t v16 = (v17 >> 2) | 0xF0;
          LOBYTE(v17) = (v8 >> 2) & 0xF | (16 * (v17 & 3)) | 0x80;
          uint64_t v18 = (*a4)++;
          unsigned char *v18 = v17;
          unsigned int v19 = v5[2];
          v5 += 2;
          char v20 = (v19 >> 6) & 0xC3 | (16 * (v9 & 3)) | (4 * (v5[1] & 3)) | 0x80;
          unsigned int v21 = (*a4)++;
          unsigned char *v21 = v20;
          LOBYTE(v9) = v19 & 0x3F | 0x80;
          int v22 = *a4;
          goto LABEL_11;
        }
        if (v5[1])
        {
          uint64_t v23 = *a4;
          if (a5 - *a4 < 3)
          {
LABEL_21:
            uint64_t result = 2;
            goto LABEL_23;
          }
          *a4 = v23 + 1;
          *uint64_t v23 = (v10 >> 4) | 0xE0;
          char v13 = (4 * (v10 & 0xF)) | (v9 >> 6) | 0x80;
          unsigned int v11 = *a4;
          goto LABEL_6;
        }
        if (((char)v8 & 0x80000000) == 0)
        {
          int v22 = *a4;
          if (*a4 == a5) {
            goto LABEL_21;
          }
LABEL_11:
          *a4 = v22 + 1;
          *int v22 = v9;
          goto LABEL_12;
        }
      }
      unsigned int v11 = *a4;
      if (a5 - *a4 < 2) {
        goto LABEL_21;
      }
      HIDWORD(v12) = v5[1];
      LODWORD(v12) = v9 << 24;
      char v13 = (v12 >> 30) | 0xC0;
LABEL_6:
      *a4 = v11 + 1;
      unsigned char *v11 = v13;
      char v14 = v9 & 0x3F | 0x80;
      uint64_t v15 = (*a4)++;
      *uint64_t v15 = v14;
LABEL_12:
      v5 += 2;
    }
    while (v5 < v7);
  }
  uint64_t result = 0;
LABEL_23:
  *a2 = v5;
  return result;
}

uint64_t little2_toUtf16(uint64_t a1, char **a2, uint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v5 = *a2;
  int64_t v6 = (a3 - (void)*a2) & 0xFFFFFFFFFFFFFFFELL;
  int v7 = &(*a2)[v6];
  if (v6 <= (uint64_t)(a5 - *a4))
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (*(v7 - 1) & 0xF8) == 216;
    uint64_t v9 = -2;
    if ((*(v7 - 1) & 0xF8) != 0xD8) {
      uint64_t v9 = 0;
    }
    v7 += v9;
  }
  while (v5 < v7)
  {
    unsigned int v10 = (_WORD *)*a4;
    if (*a4 >= a5)
    {
      if (*a4 == a5) {
        return 2;
      }
      return result;
    }
    *unsigned int v10 = *(_WORD *)v5;
    *a4 = (unint64_t)(v10 + 1);
    uint64_t v5 = *a2 + 2;
    *a2 = v5;
  }
  return result;
}

uint64_t little2_scanLit(int a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 **a5)
{
  unint64_t v5 = a4 - (void)a3;
  if (a4 - (uint64_t)a3 < 2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unsigned int v6 = a3[1];
    if (v6 > 0xDB)
    {
      if (v6 == 255)
      {
        if (*a3 > 0xFDu) {
          goto LABEL_20;
        }
      }
      else if (v6 - 220 < 4)
      {
LABEL_20:
        uint64_t result = 0;
        *a5 = a3;
        return result;
      }
      goto LABEL_14;
    }
    if (v6 - 216 >= 4)
    {
      if (!a3[1])
      {
        switch(*(unsigned char *)(a2 + *a3 + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_20;
          case 6:
            if (v5 < 3) {
              return 4294967294;
            }
            int v7 = a3 + 3;
            goto LABEL_15;
          case 7:
            goto LABEL_4;
          case 0xC:
          case 0xD:
            int v7 = a3 + 2;
            if (*(unsigned __int8 *)(a2 + *a3 + 136) != a1) {
              goto LABEL_15;
            }
            if (a4 - (uint64_t)v7 < 2) {
              return 4294967269;
            }
            *a5 = v7;
            if (a3[3]) {
              return 0;
            }
            unsigned int v9 = *(unsigned __int8 *)(a2 + *v7 + 136);
            BOOL v10 = v9 > 0x1E;
            int v11 = (1 << v9) & 0x40300E00;
            if (v10 || v11 == 0) {
              return 0;
            }
            else {
              return 27;
            }
          default:
            break;
        }
      }
LABEL_14:
      int v7 = a3 + 2;
      goto LABEL_15;
    }
LABEL_4:
    if (v5 < 4) {
      return 4294967294;
    }
    int v7 = a3 + 4;
LABEL_15:
    unint64_t v5 = a4 - (void)v7;
    a3 = v7;
    if (a4 - (uint64_t)v7 <= 1) {
      return 0xFFFFFFFFLL;
    }
  }
}

uint64_t little2_scanDecl(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  if (!a2[1])
  {
    switch(*(unsigned char *)(a1 + *a2 + 136))
    {
      case 0x14:
        *a4 = a2 + 2;
        return 33;
      case 0x16:
      case 0x18:
        unint64_t v5 = a2 + 2;
        uint64_t v6 = a3 - (void)(a2 + 2);
        if (v6 < 2) {
          return 0xFFFFFFFFLL;
        }
        while (2)
        {
          if (v5[1])
          {
LABEL_20:
            uint64_t v4 = 0;
            *a4 = v5;
          }
          else
          {
            switch(*(unsigned char *)(a1 + *v5 + 136))
            {
              case 0x15:
                goto LABEL_13;
              case 0x16:
              case 0x18:
                v5 += 2;
                v6 -= 2;
                uint64_t v4 = 0xFFFFFFFFLL;
                if (v6 > 1) {
                  continue;
                }
                return v4;
              case 0x17:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
                goto LABEL_20;
              case 0x1E:
                if ((unint64_t)v6 < 4) {
                  return 0xFFFFFFFFLL;
                }
                if (!v5[3])
                {
                  unsigned int v8 = *(unsigned __int8 *)(a1 + v5[2] + 136);
                  BOOL v9 = v8 > 0x1E;
                  int v10 = (1 << v8) & 0x40200600;
                  if (!v9 && v10 != 0) {
                    goto LABEL_20;
                  }
                }
                goto LABEL_13;
              default:
                if (*(unsigned __int8 *)(a1 + *v5 + 136) - 9 >= 2) {
                  goto LABEL_20;
                }
LABEL_13:
                *a4 = v5;
                uint64_t v4 = 16;
                break;
            }
          }
          return v4;
        }
      case 0x1B:
        return little2_scanComment(a1, a2 + 2, a3, a4);
      default:
        break;
    }
  }
  uint64_t v4 = 0;
  *a4 = a2;
  return v4;
}

uint64_t little2_scanPi(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - (void)a2;
  uint64_t v5 = a3 - (void)a2 - 2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v10 - 220) < 4) {
      goto LABEL_7;
    }
    if (v10 == 255)
    {
      LODWORD(v12) = *a2;
      if (v12 > 0xFD) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if ((v10 - 216) < 4) {
    goto LABEL_4;
  }
  if (a2[1])
  {
LABEL_17:
    LODWORD(v12) = *a2;
    goto LABEL_18;
  }
  uint64_t v12 = *a2;
  unsigned int v13 = *(unsigned __int8 *)(a1 + v12 + 136);
  if (v13 <= 0x15)
  {
    if (v13 == 5) {
      goto LABEL_7;
    }
    if (v13 == 6)
    {
      if (v4 < 3) {
        return 4294967294;
      }
      goto LABEL_7;
    }
    if (v13 != 7) {
      goto LABEL_7;
    }
LABEL_4:
    if (v4 < 4) {
      return 4294967294;
    }
LABEL_7:
    uint64_t result = 0;
    *a4 = (uint64_t)a2;
    return result;
  }
  if (v13 != 22 && v13 != 24)
  {
    if (v13 != 29) {
      goto LABEL_7;
    }
LABEL_18:
    if (((namingBitmap[(v12 >> 5) | (8 * nmstrtPages[v10])] >> v12) & 1) == 0) {
      goto LABEL_7;
    }
  }
  if (v5 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = 0;
  unsigned int v25 = 0;
  uint64_t result = 0xFFFFFFFFLL;
  while (1)
  {
    unint64_t v16 = (unint64_t)&a2[v15];
    uint64_t v17 = a2[v15 + 3];
    if (a2[v15 + 3] <= 0xDBu)
    {
      if (!a2[v15 + 3])
      {
        unint64_t v16 = *(unsigned __int8 *)(v16 + 2);
        switch(*(unsigned char *)(a1 + v16 + 136))
        {
          case 5:
            goto LABEL_45;
          case 6:
            if ((unint64_t)v5 >= 3) {
              goto LABEL_45;
            }
            return 4294967294;
          case 7:
            goto LABEL_44;
          case 9:
          case 0xA:
          case 0x15:
            unsigned int v19 = (unsigned __int8 *)&a2[v15];
            uint64_t v20 = (uint64_t)&a2[v15 + 2];
            uint64_t result = little2_checkPiTarget(a2, v20, &v25);
            if (!result)
            {
              *a4 = v20;
              return result;
            }
            unint64_t v21 = v5 - 2;
            if (v5 - 2 < 2) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v18 = v19 + 4;
            uint64_t result = 0xFFFFFFFFLL;
            while (2)
            {
              unsigned int v22 = v18[1];
              if (v22 > 0xDB)
              {
                if (v22 == 255)
                {
                  if (*v18 > 0xFDu) {
                    goto LABEL_41;
                  }
                }
                else if (v22 - 220 < 4)
                {
                  goto LABEL_41;
                }
              }
              else
              {
                if (v22 - 216 < 4)
                {
LABEL_54:
                  if (v21 < 4) {
                    return 4294967294;
                  }
                  uint64_t v23 = v18 + 4;
LABEL_65:
                  unint64_t v21 = a3 - (void)v23;
                  uint64_t v18 = v23;
                  if (a3 - (uint64_t)v23 <= 1) {
                    return result;
                  }
                  continue;
                }
                if (!v18[1])
                {
                  switch(*(unsigned char *)(a1 + *v18 + 136))
                  {
                    case 0:
                    case 1:
                    case 8:
                      goto LABEL_41;
                    case 6:
                      if (v21 < 3) {
                        return 4294967294;
                      }
                      uint64_t v23 = v18 + 3;
                      goto LABEL_65;
                    case 7:
                      goto LABEL_54;
                    case 0xF:
                      uint64_t v23 = v18 + 2;
                      if (a3 - (uint64_t)(v18 + 2) < 2) {
                        return 0xFFFFFFFFLL;
                      }
                      if (v18[3] || *v23 != 62) {
                        goto LABEL_65;
                      }
                      uint64_t v24 = (uint64_t)(v18 + 4);
                      break;
                    default:
                      goto LABEL_64;
                  }
LABEL_79:
                  *a4 = v24;
                  return v25;
                }
              }
              break;
            }
LABEL_64:
            uint64_t v23 = v18 + 2;
            goto LABEL_65;
          case 0xF:
            uint64_t result = little2_checkPiTarget(a2, (uint64_t)&a2[v15 + 2], &v25);
            if (!result)
            {
              *a4 = (uint64_t)&a2[v15 + 2];
              return result;
            }
            if (v5 - 2 < 2) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v18 = (unsigned __int8 *)&a2[v15 + 4];
            if (!a2[v15 + 5] && *v18 == 62)
            {
              uint64_t v24 = (uint64_t)&a2[v15 + 6];
              goto LABEL_79;
            }
            goto LABEL_41;
          case 0x16:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
            goto LABEL_38;
          case 0x1D:
            goto LABEL_37;
          default:
            goto LABEL_40;
        }
      }
      if ((v17 - 216) < 4)
      {
LABEL_44:
        if ((unint64_t)v5 >= 4)
        {
LABEL_45:
          uint64_t result = 0;
          uint64_t v18 = (unsigned __int8 *)&a2[v15 + 2];
          goto LABEL_46;
        }
        return 4294967294;
      }
      goto LABEL_36;
    }
    if (v17 == 255)
    {
      LODWORD(v16) = *(unsigned __int8 *)(v16 + 2);
      if (v16 > 0xFD) {
        break;
      }
      goto LABEL_37;
    }
    if ((v17 - 220) < 4) {
      break;
    }
LABEL_36:
    LODWORD(v16) = *(unsigned __int8 *)(v16 + 2);
LABEL_37:
    if (((namingBitmap[(v16 >> 5) | (8 * namePages[v17])] >> v16) & 1) == 0) {
      goto LABEL_45;
    }
LABEL_38:
    v5 -= 2;
    v15 += 2;
    if (v5 <= 1) {
      return result;
    }
  }
LABEL_40:
  uint64_t v18 = (unsigned __int8 *)&a2[v15 + 2];
LABEL_41:
  uint64_t result = 0;
LABEL_46:
  *a4 = (uint64_t)v18;
  return result;
}

uint64_t little2_scanPercent(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v5 - 220) < 4 || v5 == 255 && *a2 > 0xFDu) {
      goto LABEL_7;
    }
  }
  else
  {
    if ((v5 - 216) < 4) {
      goto LABEL_4;
    }
    if (!a2[1])
    {
      uint64_t v6 = 0;
      unsigned int v7 = *(unsigned __int8 *)(a1 + *a2 + 136);
      if (v7 > 0x14)
      {
        switch(*(unsigned char *)(a1 + *a2 + 136))
        {
          case 0x15:
          case 0x1E:
            goto LABEL_35;
          case 0x16:
          case 0x18:
            goto LABEL_15;
          case 0x1D:
            goto LABEL_14;
          default:
            goto LABEL_8;
        }
      }
      if (v7 - 9 < 2)
      {
LABEL_35:
        uint64_t v6 = 22;
        goto LABEL_8;
      }
      if (v7 == 6)
      {
        if (v4 >= 3) {
          goto LABEL_7;
        }
        return 4294967294;
      }
      if (v7 != 7) {
        goto LABEL_8;
      }
LABEL_4:
      if (v4 >= 4) {
        goto LABEL_7;
      }
      return 4294967294;
    }
  }
LABEL_14:
  if (((namingBitmap[(*a2 >> 5) | (8 * nmstrtPages[v5])] >> *a2) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_15:
  a2 += 2;
  uint64_t v8 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v9 = a2[1];
    if (a2[1] <= 0xDBu) {
      break;
    }
    if (v9 == 255)
    {
      LODWORD(v10) = *a2;
      if (v10 > 0xFD) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }
    if ((v9 - 220) < 4) {
      goto LABEL_7;
    }
LABEL_25:
    LODWORD(v10) = *a2;
LABEL_26:
    if (((namingBitmap[(v10 >> 5) | (8 * namePages[v9])] >> v10) & 1) == 0) {
      goto LABEL_7;
    }
LABEL_27:
    a2 += 2;
    v8 -= 2;
    uint64_t v6 = 0xFFFFFFFFLL;
    if (v8 <= 1) {
      return v6;
    }
  }
  if (!a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v10 = *a2;
    int v11 = *(unsigned __int8 *)(a1 + v10 + 136);
    switch(*(unsigned char *)(a1 + v10 + 136))
    {
      case 0x12:
        a2 += 2;
        uint64_t v6 = 28;
        goto LABEL_8;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x17:
      case 0x1C:
        goto LABEL_8;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_27;
      case 0x1D:
        goto LABEL_26;
      default:
        if (v11 != 6)
        {
          if (v11 != 7) {
            goto LABEL_8;
          }
          goto LABEL_40;
        }
        if ((unint64_t)v8 < 3) {
          return 4294967294;
        }
        break;
    }
    goto LABEL_7;
  }
  if ((v9 - 216) >= 4) {
    goto LABEL_25;
  }
LABEL_40:
  if ((unint64_t)v8 < 4) {
    return 4294967294;
  }
LABEL_7:
  uint64_t v6 = 0;
LABEL_8:
  *a4 = a2;
  return v6;
}

uint64_t little2_scanPoundName(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v5 - 220) >= 4 && (v5 != 255 || *a2 <= 0xFDu)) {
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  if ((v5 - 216) < 4) {
    goto LABEL_4;
  }
  if (a2[1]) {
    goto LABEL_21;
  }
  uint64_t v6 = 0;
  unsigned int v8 = *(unsigned __int8 *)(a1 + *a2 + 136);
  if (v8 <= 0x15)
  {
    if (v8 != 6)
    {
      if (v8 == 7)
      {
LABEL_4:
        if (v4 >= 4) {
          goto LABEL_8;
        }
        return 4294967294;
      }
LABEL_9:
      *a4 = a2;
      return v6;
    }
    if (v4 < 3) {
      return 4294967294;
    }
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  if (v8 == 22 || v8 == 24) {
    goto LABEL_22;
  }
  if (v8 != 29) {
    goto LABEL_9;
  }
LABEL_21:
  if (((namingBitmap[(*a2 >> 5) | (8 * nmstrtPages[v5])] >> *a2) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_22:
  a2 += 2;
  uint64_t v10 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 4294967276;
  }
  while (1)
  {
    uint64_t v11 = a2[1];
    if (a2[1] <= 0xDBu) {
      break;
    }
    if (v11 == 255)
    {
      LODWORD(v12) = *a2;
      if (v12 > 0xFD) {
        goto LABEL_8;
      }
      goto LABEL_33;
    }
    if ((v11 - 220) < 4) {
      goto LABEL_8;
    }
LABEL_32:
    LODWORD(v12) = *a2;
LABEL_33:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v11])] >> v12) & 1) == 0) {
      goto LABEL_8;
    }
LABEL_34:
    a2 += 2;
    v10 -= 2;
    uint64_t v6 = 4294967276;
    if (v10 <= 1) {
      return v6;
    }
  }
  if (!a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v12 = *a2;
    switch(*(unsigned char *)(a1 + v12 + 136))
    {
      case 6:
        if ((unint64_t)v10 >= 3) {
          goto LABEL_8;
        }
        return 4294967294;
      case 7:
        goto LABEL_40;
      case 9:
      case 0xA:
      case 0xB:
      case 0x15:
      case 0x1E:
      case 0x20:
      case 0x24:
        uint64_t v6 = 20;
        goto LABEL_9;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_34;
      case 0x1D:
        goto LABEL_33;
      default:
        goto LABEL_9;
    }
  }
  if ((v11 - 216) >= 4) {
    goto LABEL_32;
  }
LABEL_40:
  if ((unint64_t)v10 >= 4) {
    goto LABEL_8;
  }
  return 4294967294;
}

uint64_t little2_scanComment(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  if (a2[1] || *a2 != 45)
  {
LABEL_26:
    uint64_t v7 = 0;
    goto LABEL_27;
  }
  a2 += 2;
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unsigned int v5 = a2[1];
    if (v5 > 0xDB)
    {
      if (v5 == 255)
      {
        if (*a2 > 0xFDu) {
          goto LABEL_26;
        }
      }
      else if (v5 - 220 < 4)
      {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    if (v5 - 216 >= 4) {
      break;
    }
LABEL_7:
    if (v4 < 4) {
      return 4294967294;
    }
    uint64_t v6 = a2 + 4;
LABEL_24:
    unint64_t v4 = a3 - (void)v6;
    uint64_t v7 = 0xFFFFFFFFLL;
    a2 = v6;
    if (a3 - (uint64_t)v6 <= 1) {
      return v7;
    }
  }
  if (a2[1])
  {
LABEL_23:
    uint64_t v6 = a2 + 2;
    goto LABEL_24;
  }
  uint64_t v7 = 0;
  switch(*(unsigned char *)(a1 + *a2 + 136))
  {
    case 0:
    case 1:
    case 8:
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      goto LABEL_23;
    case 6:
      if (v4 < 3) {
        return 4294967294;
      }
      uint64_t v6 = a2 + 3;
      goto LABEL_24;
    case 7:
      goto LABEL_7;
    default:
      if (*(unsigned char *)(a1 + *a2 + 136) != 27) {
        goto LABEL_23;
      }
      uint64_t v6 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[3] || *v6 != 45) {
        goto LABEL_24;
      }
      if (a3 - (uint64_t)(a2 + 4) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[5])
      {
        uint64_t v7 = 0;
        a2 += 4;
      }
      else
      {
        int v9 = a2[4];
        if (v9 == 62) {
          a2 += 6;
        }
        else {
          a2 += 4;
        }
        if (v9 == 62) {
          uint64_t v7 = 13;
        }
        else {
          uint64_t v7 = 0;
        }
      }
      break;
  }
LABEL_27:
  *a4 = a2;
  return v7;
}

BOOL little2_checkPiTarget(char *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 11;
  if (a2 - (void)a1 != 6 || a1[1]) {
    return 1;
  }
  int v4 = *a1;
  if (v4 == 120)
  {
    int v5 = 0;
  }
  else
  {
    if (v4 != 88) {
      return 1;
    }
    int v5 = 1;
  }
  if (a1[3]) {
    return 1;
  }
  int v6 = a1[2];
  if (v6 != 109)
  {
    if (v6 != 77) {
      return 1;
    }
    int v5 = 1;
  }
  if (a1[5]) {
    return 1;
  }
  int v7 = a1[4];
  if (v7 == 108)
  {
    if (v5) {
      return 0;
    }
    *a3 = 12;
    return 1;
  }
  return v7 != 76;
}

uint64_t little2_scanRef(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v5 - 220) < 4 || v5 == 255 && *a2 > 0xFDu) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
  if ((v5 - 216) < 4) {
    goto LABEL_4;
  }
  if (a2[1]) {
    goto LABEL_26;
  }
  uint64_t v6 = 0;
  unsigned int v7 = *(unsigned __int8 *)(a1 + *a2 + 136);
  if (v7 > 0x15)
  {
    if (v7 == 22 || v7 == 24) {
      goto LABEL_27;
    }
    if (v7 != 29) {
      goto LABEL_8;
    }
LABEL_26:
    if (((namingBitmap[(*a2 >> 5) | (8 * nmstrtPages[v5])] >> *a2) & 1) == 0) {
      goto LABEL_7;
    }
LABEL_27:
    a2 += 2;
    uint64_t v4 = a3 - (void)a2;
    if (a3 - (uint64_t)a2 < 2) {
      return 0xFFFFFFFFLL;
    }
    while (1)
    {
      uint64_t v10 = a2[1];
      if (a2[1] > 0xDBu)
      {
        if (v10 == 255)
        {
          LODWORD(v11) = *a2;
          if (v11 > 0xFD) {
            goto LABEL_7;
          }
          goto LABEL_38;
        }
        if ((v10 - 220) < 4) {
          goto LABEL_7;
        }
      }
      else
      {
        if (!a2[1])
        {
          uint64_t v6 = 0;
          uint64_t v11 = *a2;
          int v12 = *(unsigned __int8 *)(a1 + v11 + 136);
          switch(*(unsigned char *)(a1 + v11 + 136))
          {
            case 0x12:
              a2 += 2;
              uint64_t v6 = 9;
              goto LABEL_8;
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x17:
            case 0x1C:
              goto LABEL_8;
            case 0x16:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
              goto LABEL_39;
            case 0x1D:
              goto LABEL_38;
            default:
              if (v12 == 6) {
                goto LABEL_53;
              }
              if (v12 != 7) {
                goto LABEL_8;
              }
              goto LABEL_4;
          }
        }
        if ((v10 - 216) < 4) {
          goto LABEL_4;
        }
      }
      LODWORD(v11) = *a2;
LABEL_38:
      if (((namingBitmap[(v11 >> 5) | (8 * namePages[v10])] >> v11) & 1) == 0) {
        goto LABEL_7;
      }
LABEL_39:
      a2 += 2;
      v4 -= 2;
      uint64_t v6 = 0xFFFFFFFFLL;
      if (v4 <= 1) {
        return v6;
      }
    }
  }
  if (v7 == 6)
  {
LABEL_53:
    if ((unint64_t)v4 < 3) {
      return 4294967294;
    }
    goto LABEL_7;
  }
  if (v7 != 7)
  {
    if (v7 != 19) {
      goto LABEL_8;
    }
    unsigned int v8 = a2 + 2;
    if (a3 - (uint64_t)(a2 + 2) >= 2)
    {
      if (a2[3]) {
        goto LABEL_16;
      }
      uint64_t v13 = *v8;
      if (v13 == 120)
      {
        if (a3 - (uint64_t)(a2 + 4) >= 2)
        {
          if (a2[5] || (*(unsigned char *)(a1 + a2[4] + 136) & 0xFE) != 0x18)
          {
            uint64_t v6 = 0;
            a2 += 4;
            goto LABEL_8;
          }
          a2 += 6;
          uint64_t v14 = a3 - (void)a2;
          if (a3 - (uint64_t)a2 >= 2)
          {
            while (!a2[1])
            {
              int v15 = *(unsigned __int8 *)(a1 + *a2 + 136);
              if ((v15 - 24) >= 2)
              {
                if (v15 != 18) {
                  goto LABEL_7;
                }
                a2 += 2;
                uint64_t v6 = 10;
                goto LABEL_8;
              }
              a2 += 2;
              v14 -= 2;
              uint64_t v6 = 0xFFFFFFFFLL;
              if (v14 <= 1) {
                return v6;
              }
            }
            goto LABEL_7;
          }
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + v13 + 136) != 25)
        {
LABEL_16:
          uint64_t v6 = 0;
LABEL_17:
          a2 = v8;
          goto LABEL_8;
        }
        unsigned int v8 = a2 + 4;
        uint64_t v16 = v4 - 4;
        while (1)
        {
          BOOL v17 = v16 < 2;
          v16 -= 2;
          if (v17) {
            break;
          }
          a2 = v8;
          if (v8[1]) {
            goto LABEL_7;
          }
          v8 += 2;
          int v18 = *(unsigned __int8 *)(a1 + *a2 + 136);
          if (v18 != 25)
          {
            if (v18 != 18) {
              goto LABEL_7;
            }
            uint64_t v6 = 10;
            goto LABEL_17;
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  if ((unint64_t)v4 >= 4)
  {
LABEL_7:
    uint64_t v6 = 0;
LABEL_8:
    *a4 = a2;
    return v6;
  }
  return 4294967294;
}

uint64_t little2_scanAtts(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t v32 = a2;
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  int v8 = 0;
  uint64_t v9 = a3 - 4;
  while (1)
  {
    uint64_t v10 = a2[1];
    if (a2[1] <= 0xDBu) {
      break;
    }
    if (v10 != 255)
    {
      if ((v10 - 220) < 4) {
        goto LABEL_106;
      }
LABEL_21:
      LODWORD(v12) = *a2;
      goto LABEL_22;
    }
    LODWORD(v12) = *a2;
    if (v12 > 0xFD) {
      goto LABEL_106;
    }
LABEL_22:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v10])] >> v12) & 1) == 0) {
      goto LABEL_106;
    }
LABEL_23:
    a2 += 2;
    uint64_t v32 = a2;
LABEL_24:
    unint64_t v4 = a3 - (void)a2;
    if (a3 - (uint64_t)a2 <= 1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (a2[1])
  {
    if ((v10 - 216) < 4)
    {
LABEL_101:
      if (v4 >= 4)
      {
LABEL_106:
        uint64_t result = 0;
        goto LABEL_107;
      }
      return 4294967294;
    }
    goto LABEL_21;
  }
  uint64_t result = 0;
  uint64_t v12 = *a2;
  switch(*(unsigned char *)(a1 + v12 + 136))
  {
    case 6:
      if (v4 >= 3) {
        goto LABEL_106;
      }
      return 4294967294;
    case 7:
      goto LABEL_101;
    case 9:
    case 0xA:
    case 0x15:
      a2 += 2;
      uint64_t v13 = a3 - (void)a2;
      if (a3 - (uint64_t)a2 < 2) {
        return 0xFFFFFFFFLL;
      }
      while (2)
      {
        if (a2[1]) {
          goto LABEL_106;
        }
        int v14 = *(unsigned __int8 *)(a1 + *a2 + 136);
        if ((v14 - 9) < 2 || v14 == 21)
        {
          a2 += 2;
          v13 -= 2;
          if (v13 <= 1) {
            return 0xFFFFFFFFLL;
          }
          continue;
        }
        break;
      }
      if (v14 != 14) {
        goto LABEL_106;
      }
      uint64_t v32 = a2;
LABEL_36:
      uint64_t v16 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      for (uint64_t i = v9 - (void)a2; ; i -= 2)
      {
        if (v16[1]) {
          goto LABEL_113;
        }
        unsigned int v22 = *(unsigned __int8 *)(a1 + *v16 + 136);
        if ((v22 & 0xFE) == 0xC) {
          break;
        }
        if (v22 > 0x15 || ((1 << v22) & 0x200600) == 0) {
          goto LABEL_113;
        }
        v16 += 2;
        uint64_t result = 0xFFFFFFFFLL;
        if (i <= 1) {
          return result;
        }
      }
      v16 += 2;
      uint64_t v32 = v16;
      if (i < 2) {
        return 0xFFFFFFFFLL;
      }
      while (2)
      {
        unsigned int v25 = v16[1];
        if (v25 > 0xDB)
        {
          if (v25 - 220 < 4)
          {
            int v26 = 8;
            goto LABEL_62;
          }
          if (v25 == 255 && *v16 > 0xFDu)
          {
            int v26 = 0;
            goto LABEL_62;
          }
        }
        else
        {
          if (v25 - 216 < 4)
          {
            int v26 = 7;
            goto LABEL_62;
          }
          if (!v16[1])
          {
            int v26 = *(unsigned __int8 *)(a1 + *v16 + 136);
            goto LABEL_62;
          }
        }
        int v26 = 29;
LABEL_62:
        if (v26 == v22)
        {
          a2 = v16 + 2;
          uint64_t v32 = v16 + 2;
          if (a3 - (uint64_t)(v16 + 2) < 2) {
            return 0xFFFFFFFFLL;
          }
          if (v16[3]) {
            goto LABEL_106;
          }
          uint64_t result = 0;
          unsigned int v27 = *(unsigned __int8 *)(a1 + *a2 + 136);
          if (v27 <= 0xA)
          {
            if (v27 - 9 >= 2) {
              goto LABEL_107;
            }
            goto LABEL_88;
          }
          if (v27 == 21)
          {
LABEL_88:
            a2 = v16 + 4;
            uint64_t v28 = a3 - (void)(v16 + 4);
            if (v28 < 2) {
              return 0xFFFFFFFFLL;
            }
            while (2)
            {
              int v29 = a2[1];
              if (!a2[1])
              {
                uint64_t result = 0;
                switch(*(unsigned char *)(a1 + *a2 + 136))
                {
                  case 6:
                    if ((unint64_t)v28 >= 3) {
                      goto LABEL_106;
                    }
                    return 4294967294;
                  case 7:
                    goto LABEL_103;
                  case 9:
                  case 0xA:
                  case 0x15:
                    a2 += 2;
                    v28 -= 2;
                    uint64_t result = 0xFFFFFFFFLL;
                    if (v28 <= 1) {
                      return result;
                    }
                    continue;
                  case 0xB:
                    goto LABEL_128;
                  case 0x11:
                    goto LABEL_118;
                  case 0x16:
                  case 0x18:
                    goto LABEL_100;
                  case 0x1D:
                    goto LABEL_98;
                  default:
                    goto LABEL_107;
                }
              }
              break;
            }
            if ((v29 - 216) < 4)
            {
LABEL_103:
              if ((unint64_t)v28 >= 4) {
                goto LABEL_106;
              }
              return 4294967294;
            }
            if ((v29 - 220) < 4) {
              goto LABEL_106;
            }
            if (v29 == 255)
            {
              uint64_t v32 = a2;
              unsigned int v30 = *a2;
              if (v30 > 0xFD) {
                goto LABEL_106;
              }
            }
            else
            {
LABEL_98:
              uint64_t v32 = a2;
              unsigned int v30 = *a2;
            }
            if (((namingBitmap[(v30 >> 5) | (8 * nmstrtPages[a2[1]])] >> v30) & 1) == 0) {
              goto LABEL_106;
            }
LABEL_100:
            int v8 = 0;
            goto LABEL_23;
          }
          if (v27 == 11)
          {
LABEL_128:
            a2 += 2;
            uint64_t result = 1;
            goto LABEL_107;
          }
          if (v27 != 17)
          {
LABEL_107:
            *a4 = a2;
            return result;
          }
LABEL_118:
          uint64_t v16 = a2 + 2;
          uint64_t v32 = a2 + 2;
          if (a3 - (uint64_t)(a2 + 2) >= 2)
          {
            if (!a2[3])
            {
              int v31 = a2[2];
              if (v31 == 62) {
                a2 += 4;
              }
              else {
                a2 += 2;
              }
              if (v31 == 62) {
                uint64_t result = 3;
              }
              else {
                uint64_t result = 0;
              }
              goto LABEL_107;
            }
            goto LABEL_113;
          }
          return 0xFFFFFFFFLL;
        }
        switch(v26)
        {
          case 0:
          case 1:
          case 2:
          case 8:
            goto LABEL_113;
          case 3:
            uint64_t result = little2_scanRef(a1, v16 + 2, a3, &v32);
            if ((int)result >= 1)
            {
              uint64_t v16 = v32;
LABEL_72:
              uint64_t i = a3 - (void)v16;
              uint64_t result = 0xFFFFFFFFLL;
              if (a3 - (uint64_t)v16 <= 1) {
                return result;
              }
              continue;
            }
            if (!result)
            {
              a2 = v32;
              goto LABEL_107;
            }
            return result;
          case 6:
            if ((unint64_t)i < 3) {
              return 4294967294;
            }
            v16 += 3;
            goto LABEL_71;
          case 7:
            if ((unint64_t)i < 4) {
              return 4294967294;
            }
            v16 += 4;
            goto LABEL_71;
          default:
            v16 += 2;
LABEL_71:
            uint64_t v32 = v16;
            goto LABEL_72;
        }
      }
    case 0xE:
      goto LABEL_36;
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
      goto LABEL_23;
    case 0x17:
      if (v8) {
        goto LABEL_106;
      }
      uint64_t v16 = a2 + 2;
      uint64_t v32 = a2 + 2;
      uint64_t v17 = a3 - (void)(a2 + 2);
      if (v17 < 2) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v18 = a2[3];
      if (a2[3] > 0xDBu)
      {
        if (v18 == 255)
        {
          LODWORD(v19) = *v16;
          if (v19 > 0xFD) {
            goto LABEL_113;
          }
LABEL_78:
          if (((namingBitmap[(v19 >> 5) | (8 * nmstrtPages[v18])] >> v19) & 1) == 0) {
            goto LABEL_113;
          }
          goto LABEL_79;
        }
        if ((v18 - 220) < 4) {
          goto LABEL_113;
        }
      }
      else
      {
        if (!a2[3])
        {
          uint64_t v19 = *v16;
          unsigned int v20 = *(unsigned __int8 *)(a1 + v19 + 136);
          if (v20 <= 0x17)
          {
            if (v20 != 22)
            {
              if (v20 == 6)
              {
                if ((unint64_t)v17 < 3) {
                  return 4294967294;
                }
              }
              else if (v20 == 7)
              {
LABEL_112:
                if ((unint64_t)v17 < 4) {
                  return 4294967294;
                }
              }
LABEL_113:
              uint64_t result = 0;
              a2 = v16;
              goto LABEL_107;
            }
          }
          else if (v20 != 24)
          {
            if (v20 != 29) {
              goto LABEL_113;
            }
            goto LABEL_78;
          }
LABEL_79:
          a2 += 4;
          uint64_t v32 = a2;
          int v8 = 1;
          goto LABEL_24;
        }
        if ((v18 - 216) < 4) {
          goto LABEL_112;
        }
      }
      LODWORD(v19) = *v16;
      goto LABEL_78;
    case 0x1D:
      goto LABEL_22;
    default:
      goto LABEL_107;
  }
}