uint64_t oneword_crosstoken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, const char *a6, int a7, int a8, const char *a9, char *a10, const char *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, const char **a20,const char **a21,const char **a22,const char **a23)
{
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  size_t v45;
  int v46;
  const char **v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned __int16 v54;
  unsigned __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  unsigned __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  unsigned __int16 v74;
  char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  char *v90;
  const char *v91;
  size_t v92;
  char *v93;
  const char *v94;
  size_t v95;
  size_t v96;
  __int16 v97;
  const char *v98;
  unsigned __int16 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  unsigned __int16 i;
  uint64_t v104;
  int v105;
  unsigned __int16 j;
  uint64_t v107;
  int v108;
  uint64_t v109;
  unsigned int v111;
  int v112;
  uint64_t v114;
  uint64_t v115;
  int v117;
  int v118;
  unsigned __int16 v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *__s2;
  unsigned __int16 v125;
  char __s[128];
  uint64_t v127;

  v28 = (unint64_t *)a12;
  v127 = *MEMORY[0x263EF8340];
  strcpy(__s, "cross_token");
  v29 = (unsigned __int16)(2 * strlen(*a20)) | 1u;
  if (*(unsigned __int16 *)a16 < v29)
  {
    v30 = heap_Realloc(*(uint64_t **)(a1 + 8), *a12, v29);
    if (!v30)
    {
      v86 = 2310021130;
      v109 = *(void *)(a1 + 32);
      goto LABEL_104;
    }
    *a12 = v30;
    *a16 = v29;
  }
  if (*(unsigned __int16 *)a17 < v29)
  {
    v35 = heap_Realloc(*(uint64_t **)(a1 + 8), *a13, v29);
    if (!v35)
    {
      v86 = 2310021130;
      v109 = *(void *)(a1 + 32);
      goto LABEL_104;
    }
    *a13 = v35;
    *a17 = v29;
  }
  v36 = a2;
  v37 = a1;
  if (*(unsigned __int16 *)a18 < v29)
  {
    v38 = heap_Realloc(*(uint64_t **)(a1 + 8), *a14, v29);
    if (!v38)
    {
LABEL_101:
      v86 = 2310021130;
      v109 = *(void *)(v37 + 32);
LABEL_104:
      log_OutPublic(v109, (uint64_t)"FE_ONEWORD", 34000, 0, v31, v32, v33, v34, v111);
      return v86;
    }
    *a14 = v38;
    *a18 = v29;
  }
  if (*(unsigned __int16 *)a19 < v29)
  {
    v39 = heap_Realloc(*(uint64_t **)(a1 + 8), *a15, v29);
    if (v39)
    {
      *a15 = v39;
      *a19 = v29;
      goto LABEL_13;
    }
    goto LABEL_101;
  }
LABEL_13:
  v114 = a3;
  v115 = a4;
  v112 = a5;
  v125 = 0;
  v123 = 0;
  __s2 = 0;
  v122 = 0;
  strcpy((char *)*a12, *a20);
  strcpy((char *)*a13, *a21);
  strcpy((char *)*a14, *a22);
  strcpy((char *)*a15, *a23);
  v40 = (const char *)*a12;
  if (*(unsigned char *)*a12)
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    do
    {
      if (!strncmp(&v40[v41], "â—„", 3uLL))
      {
        v43 = !v43;
      }
      else if (v40[v41] == 126 && v43)
      {
        v45 = strlen(&v40[v41]);
        memmove((void *)&v40[v41 + 1], &v40[v41], v45 + 1);
        *(_WORD *)(*a12 + v41) = -24126;
        v40 = (const char *)*a12;
        v43 = 1;
      }
      v41 = (unsigned __int16)++v42;
    }
    while (strlen(v40) > (unsigned __int16)v42);
  }
  v46 = 0;
  v47 = a20;
  **a20 = 0;
  **a21 = 0;
  **a22 = 0;
  while (1)
  {
    strcpy(__s, "cross_token");
    v119 = strlen(__s);
    v48 = (unsigned __int16)v46;
    if ((_WORD)v46)
    {
      *(_WORD *)&(*v47)[strlen(*v47)] = 32;
      *(_WORD *)&(*a21)[strlen(*a21)] = 32;
      *(_WORD *)&(*a22)[strlen(*a22)] = 32;
    }
    v49 = *v28;
    v50 = (unsigned __int16)v46;
    v51 = *(unsigned __int8 *)(*v28 + (unsigned __int16)v46);
    if (*(unsigned char *)(*v28 + (unsigned __int16)v46))
    {
      v52 = (unsigned __int16)v46;
      while ((v51 > 0x20 || ((1 << v51) & 0x100002600) == 0) && v51 != 95)
      {
        v52 = (unsigned __int16)++v46;
        v51 = *(unsigned __int8 *)(v49 + (unsigned __int16)v46);
        if (!*(unsigned char *)(v49 + (unsigned __int16)v46))
        {
          v117 = 1;
          goto LABEL_34;
        }
      }
      v117 = 0;
LABEL_34:
      v118 = v46;
      v53 = (unsigned __int16)v46;
    }
    else
    {
      v118 = v46;
      v117 = 1;
      v53 = (unsigned __int16)v46;
      v52 = (unsigned __int16)v46;
    }
    *(unsigned char *)(v49 + v52) = 0;
    v54 = Utf8_LengthInUtf8chars(*v28, v53);
    v55 = Utf8_LengthInUtf8chars(*v28, v48);
    *(unsigned char *)(*a13 + v54) = 0;
    *(unsigned char *)(*a14 + v54) = 0;
    *(unsigned char *)(*a15 + v54) = 0;
    log_OutText(*(void *)(v37 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v56, v57, v58, (uint64_t)__s);
    v59 = (unsigned __int16)strlen((const char *)(*v28 + v50));
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, void, unint64_t, uint64_t))(v115 + 120))(v36, v114, 0, *v28 + v50, v59);
    if ((v60 & 0x80000000) != 0) {
      return v60;
    }
    log_OutText(*(void *)(v37 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L2: %s", v61, v62, v63, (uint64_t)__s);
    v64 = strlen((const char *)(*a13 + v55));
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v115 + 120))(v36, v114, 1, *a13 + v55, v64);
    if ((v60 & 0x80000000) != 0) {
      return v60;
    }
    log_OutText(*(void *)(v37 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L3: %s", v65, v66, v67, (uint64_t)__s);
    v68 = (const char *)(*a14 + v55);
    v69 = strlen(v68);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void))(v115 + 120))(v36, v114, 2, v68, v69);
    if ((v60 & 0x80000000) != 0) {
      return v60;
    }
    log_OutText(*(void *)(v37 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L4: %s", v70, v71, v72, (uint64_t)__s);
    v73 = (const char *)(*a15 + v55);
    v74 = strlen(v73);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void))(v115 + 136))(v36, v114, 3, v73, v74);
    if ((v60 & 0x80000000) != 0) {
      return v60;
    }
    v75 = (char *)a6;
    if (strcmp(a6, "normal") && strlen(a6) + v119 + 2 <= 0x7F)
    {
      __strcat_chk();
      __strcat_chk();
    }
    v47 = a20;
    v28 = (unint64_t *)a12;
    if (((*(uint64_t (**)(uint64_t, uint64_t, char *))(v115 + 80))(v36, v114, __s) & 0x80000000) != 0)
    {
      __s[v119] = 0;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(v115 + 80))(v36, v114, __s);
      if ((v60 & 0x80000000) != 0) {
        return v60;
      }
    }
    else if (!a7)
    {
      if (!v112)
      {
        a7 = *(unsigned __int8 *)a6;
        v76 = a6;
LABEL_51:
        strncpy(a10, v76, 0x14uLL);
        goto LABEL_52;
      }
      v76 = a9;
      a7 = a8;
      if (a9) {
        goto LABEL_51;
      }
      a7 = 0;
    }
LABEL_52:
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, void, char **, unsigned __int16 *))(v115 + 128))(v36, v114, 0, &__s2, &v125);
    if ((v60 & 0x80000000) != 0) {
      return v60;
    }
    __s2[v125] = 0;
    log_OutText(*(void *)(v37 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v77, v78, v79, (uint64_t)__s);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(v115 + 128))(v36, v114, 1, &v123, &v125);
    if ((v60 & 0x80000000) != 0) {
      return v60;
    }
    *(unsigned char *)(v123 + v125) = 0;
    log_OutText(*(void *)(v37 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O2: %s", v80, v81, v82, (uint64_t)__s);
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(v115 + 128))(v36, v114, 2, &v122, &v125);
    if ((v86 & 0x80000000) != 0) {
      return v86;
    }
    *(unsigned char *)(v122 + v125) = 0;
    log_OutText(*(void *)(v37 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O3: %s", v83, v84, v85, (uint64_t)__s);
    v87 = __s2;
    if (*__s2)
    {
      v88 = 0;
      v89 = 0;
      do
      {
        v90 = &v87[v88];
        if (v87[v88] == 126)
        {
          v91 = &v87[v88 + 1];
          v92 = strlen(v91);
          memmove(v90, v91, v92 + 1);
          --v89;
        }
        else if (!strncmp(&v87[v88], "Â¡", 2uLL))
        {
          v93 = &v87[(unsigned __int16)v89 + 1];
          v94 = &v87[(unsigned __int16)v89 + 2];
          v95 = strlen(v94);
          memmove(v93, v94, v95 + 1);
          __s2[v88] = 126;
        }
        v88 = (unsigned __int16)++v89;
        v87 = __s2;
        v96 = strlen(__s2);
      }
      while (v96 > (unsigned __int16)v89);
      v97 = v96;
      v75 = (char *)a6;
    }
    else
    {
      v97 = 0;
    }
    v98 = *a20;
    v99 = v97 + strlen(*a20) + 2;
    if (v99 >= 0x81u)
    {
      v100 = heap_Realloc(*(uint64_t **)(v37 + 8), (uint64_t)v98, v99);
      if (!v100) {
        goto LABEL_101;
      }
      v98 = (const char *)v100;
      *a20 = (const char *)v100;
      v87 = __s2;
    }
    if (strlen(v87) != 3)
    {
      v101 = (char *)v98;
      v102 = v87;
LABEL_72:
      strcat(v101, v102);
      goto LABEL_73;
    }
    v121 = 0;
    utf8_Utf8ToUtf32_Tolerant((uint64_t)v87, 3u, (uint64_t)&v121 + 4, 1u, &v121);
    if (HIDWORD(v121) != 8230)
    {
      v102 = __s2;
      v101 = (char *)*a20;
      goto LABEL_72;
    }
    *(_WORD *)&(*a20)[strlen(*a20)] = 46;
LABEL_73:
    for (i = 0; ; ++i)
    {
      v104 = i;
      v105 = *(unsigned __int8 *)(v123 + i);
      if (v105 != 32 && v105 != 126) {
        break;
      }
    }
    if (!*(unsigned char *)(v123 + i)) {
      goto LABEL_83;
    }
    while (v105 != 32 && v105 != 126)
      LOBYTE(v105) = *(unsigned char *)(v123 + ++i);
    *(unsigned char *)(v123 + i) = 0;
    if (*(unsigned char *)(v123 + v104)) {
      strcat((char *)*a21, (const char *)(v123 + v104));
    }
    else {
LABEL_83:
    }
      *(_WORD *)&(*a21)[strlen(*a21)] = 42;
    if (a11 && strstr(v75, "latin")) {
      strcpy((char *)*a21, a11);
    }
    for (j = 0; ; ++j)
    {
      v107 = j;
      v108 = *(unsigned __int8 *)(v122 + j);
      if (v108 != 32 && v108 != 126) {
        break;
      }
    }
    if (!*(unsigned char *)(v122 + j)) {
      goto LABEL_97;
    }
    while (v108 != 32 && v108 != 126)
      LOBYTE(v108) = *(unsigned char *)(v122 + ++j);
    *(unsigned char *)(v122 + j) = 0;
    if (*(unsigned char *)(v122 + v107)) {
      strcat((char *)*a22, (const char *)(v122 + v107));
    }
    else {
LABEL_97:
    }
      *(_WORD *)&(*a22)[strlen(*a22)] = 42;
    v46 = v118 + 1;
    if (v117) {
      return v86;
    }
  }
}

uint64_t crf_mde_seg_fv_new(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, 16 * a2);
  *a3 = v6;
  if (!v6)
  {
LABEL_7:
    uint64_t v14 = 2310021130;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 35000, 0, v7, v8, v9, v10, v16);
    return v14;
  }
  *((_DWORD *)a3 + 3) = a2;
  if (a2)
  {
    uint64_t v11 = 0;
    do
    {
      v12 = (_WORD *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
      uint64_t v13 = *a3;
      *(void *)(*a3 + v11) = v12;
      if (!v12) {
        goto LABEL_7;
      }
      *(_DWORD *)(v13 + v11 + 8) = 65;
      _WORD *v12 = 45;
      v11 += 16;
    }
    while (16 * a2 != v11);
  }
  uint64_t v14 = 0;
  *((_DWORD *)a3 + 2) = a2;
  return v14;
}

void *crf_mde_seg_fv_dealloc(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)a2;
    if (v3)
    {
      v4 = result;
      unint64_t v5 = *(unsigned int *)(a2 + 8);
      if (v5)
      {
        uint64_t v6 = 0;
        for (unint64_t i = 0; i < v5; ++i)
        {
          if (*(void *)(v3 + v6))
          {
            heap_Free((void *)v4[1], *(void *)(v3 + v6));
            uint64_t v3 = *(void *)a2;
            *(void *)(*(void *)a2 + v6) = 0;
            unint64_t v5 = *(unsigned int *)(a2 + 8);
          }
          v6 += 16;
        }
      }
      result = heap_Free((void *)v4[1], v3);
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t crf_mde_seg_fv_add(uint64_t a1, void *a2, unsigned int a3, char *__s)
{
  unsigned int v8 = strlen(__s);
  uint64_t v9 = *a2 + 16 * a3;
  if (*(_DWORD *)(v9 + 8) >= v8)
  {
    uint64_t v11 = *(char **)v9;
    goto LABEL_5;
  }
  uint64_t v10 = v8 + 1;
  uint64_t v11 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)v9, v10);
  if (v11)
  {
    uint64_t v16 = *a2 + 16 * a3;
    *(void *)uint64_t v16 = v11;
    *(_DWORD *)(v16 + 8) = v10;
LABEL_5:
    strcpy(v11, __s);
    return 0;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 35000, 0, v12, v13, v14, v15, v18);
  return 2310021130;
}

uint64_t crf_mde_seg_get_features(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, __int16 a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, void *a10, unsigned int a11, unsigned int a12)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a9)
  {
    uint64_t v14 = 0;
    while (2)
    {
      uint64_t v15 = *(const char **)(a8 + 8 * v14);
      uint64_t v16 = &byte_26C21AFF0;
      v17 = "char";
      while (strcmp(v15, v17))
      {
        v17 = (const char *)*((void *)v16 + 1);
        v16 += 24;
        if (!v17) {
          goto LABEL_9;
        }
      }
      BYTE2(v19) = *v16;
      LOWORD(v19) = a6;
      uint64_t result = (*((uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, void, uint64_t, int, char *))v16
                - 1))(a1, a2, a3, a4, a5, a11, a12, a7, v19, __s);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = crf_mde_seg_fv_add(a1, a10, v14, __s);
      if ((result & 0x80000000) != 0) {
        return result;
      }
LABEL_9:
      if (++v14 != a9) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t crf_mde_seg_set_padding_features(uint64_t a1, unsigned int a2, int a3, void *a4, int a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  unsigned int v9 = 0;
  if (a5 == 1) {
    __int16 v10 = 62;
  }
  else {
    __int16 v10 = 60;
  }
  while (1)
  {
    if (v9)
    {
      strcpy(__s, "-");
    }
    else
    {
      __int16 v13 = v10;
      LH_itoa(a2, v12, 0xAu);
      __strcat_chk();
      __strcpy_chk();
    }
    uint64_t result = crf_mde_seg_fv_add(a1, a4, v9, __s);
    if ((result & 0x80000000) != 0) {
      break;
    }
    if (a3 == ++v9) {
      return 0;
    }
  }
  return result;
}

uint64_t crf_mde_seg_fe_char(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, char a10, char *a11)
{
  unsigned int v11 = a10 + a9;
  if (v11 >= a3)
  {
    *a11 = 45;
    size_t v14 = 1;
  }
  else
  {
    uint64_t v12 = *(const char **)(a2 + 8 * v11);
    unsigned __int16 v13 = strlen(v12);
    if ((v13 & 0xFE00) != 0) {
      size_t v14 = 512;
    }
    else {
      size_t v14 = v13;
    }
    strncpy(a11, v12, v14);
  }
  a11[v14] = 0;
  return 0;
}

uint64_t crf_mde_seg_fe_isvowel(int a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6, int a7, char *__s, unsigned __int16 a9, char a10, _WORD *a11)
{
  uint64_t v11 = a10 + a9;
  if (v11 >= a3)
  {
    v17 = "-";
  }
  else if (__s && (unsigned __int16 v14 = strlen(__s)) != 0)
  {
    unsigned __int16 v15 = v14;
    unsigned __int16 v16 = 0;
    v17 = "0";
    while (1)
    {
      unsigned __int16 v18 = Utf8_LengthInBytes((unsigned __int8 *)&__s[v16], 1);
      if (!strncmp(*(const char **)(a2 + 8 * v11), &__s[v16], v18)) {
        break;
      }
      v16 += v18;
      if (v16 >= v15) {
        goto LABEL_11;
      }
    }
    v17 = "1";
  }
  else
  {
    v17 = "0";
  }
LABEL_11:
  *a11 = *(unsigned __int8 *)v17;
  return 0;
}

uint64_t crf_mde_seg_fe_char_count(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, char a10, char *a11)
{
  if (a10 + a9 >= a3)
  {
    *(_WORD *)a11 = 45;
  }
  else
  {
    LH_itoa(a9, __s, 0xAu);
    unsigned __int16 v11 = strlen(__s);
    if ((v11 & 0xFE00) != 0) {
      size_t v12 = 512;
    }
    else {
      size_t v12 = v11;
    }
    strncpy(a11, __s, v12);
    a11[v12] = 0;
  }
  return 0;
}

uint64_t crf_mde_seg_fe_char_revcount(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, char a10, char *a11)
{
  int v11 = a10 + a9;
  if (v11 < 0 || v11 >= a3)
  {
    *(_WORD *)a11 = 45;
  }
  else
  {
    LH_itoa(~a9 + a3, __s, 0xAu);
    unsigned __int16 v12 = strlen(__s);
    if ((v12 & 0xFE00) != 0) {
      size_t v13 = 512;
    }
    else {
      size_t v13 = v12;
    }
    strncpy(a11, __s, v13);
    a11[v13] = 0;
  }
  return 0;
}

uint64_t crf_mde_seg_fe_morpheme(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, unsigned __int16 a9, char a10, char *a11)
{
  unsigned int v11 = a10 + a9;
  if (v11 >= a3)
  {
    if (a6 == 1 && (v11 & 0x80000000) != 0)
    {
      a11[2] = 83;
      __int16 v15 = 20307;
    }
    else
    {
      if (a7 != 1 || (int)v11 < (int)a3)
      {
        *a11 = 45;
        size_t v14 = 1;
        goto LABEL_14;
      }
      a11[2] = 83;
      __int16 v15 = 20293;
    }
    *(_WORD *)a11 = v15;
    size_t v14 = 3;
  }
  else
  {
    unsigned __int16 v12 = *(const char **)(a2 + 8 * v11);
    unsigned __int16 v13 = strlen(v12);
    if ((v13 & 0xFE00) != 0) {
      size_t v14 = 512;
    }
    else {
      size_t v14 = v13;
    }
    strncpy(a11, v12, v14);
  }
LABEL_14:
  a11[v14] = 0;
  return 0;
}

uint64_t crf_mde_seg_fe_punc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, char a10, unsigned char *a11)
{
  unsigned int v11 = a10 + a9;
  if (v11 >= a3)
  {
    *a11 = 45;
    uint64_t v12 = 1;
  }
  else if (*(_DWORD *)(a4 + 4 * v11) == 1)
  {
    a11[2] = 83;
    *(_WORD *)a11 = 17753;
    uint64_t v12 = 3;
  }
  else
  {
    *(_WORD *)a11 = 20302;
    uint64_t v12 = 2;
  }
  a11[v12] = 0;
  return 0;
}

uint64_t crf_mde_utils_add2Str(uint64_t a1, const char **a2, _WORD *a3, char *__s)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = (unsigned __int16)*a3;
  __int16 v10 = (char *)*a2;
  size_t v11 = strlen(*a2);
  if (v8 >= v9 - v11)
  {
    if ((unsigned __int16)(v8 - v9 + v11) <= 0x80u) {
      uint64_t v12 = 128;
    }
    else {
      uint64_t v12 = (unsigned __int16)(v8 - v9 + v11);
    }
    uint64_t v13 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v10, v9 + v12 + 1);
    if (!v13)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v14, v15, v16, v17, v19);
      return 2310021130;
    }
    __int16 v10 = (char *)v13;
    *a2 = (const char *)v13;
    *a3 += v12;
  }
  if (*v10) {
    strcat(v10, __s);
  }
  else {
    strcpy(v10, __s);
  }
  return 0;
}

uint64_t hlp_Write2WordRec(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, __int16 a5, __int16 a6, int a7, const char *a8, char *__s, char *a10, char *a11, int a12, int a13)
{
  __int16 v27 = a5;
  __int16 v26 = a6;
  __int16 v25 = 0;
  int v24 = 8;
  unsigned __int16 v23 = 0;
  if (a7)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1 + 80))(a2, a3, *a4, &v23);
    goto LABEL_3;
  }
  if (!a13)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1 + 88))(a2, a3, *a4, &v23);
LABEL_3:
    if ((result & 0x80000000) != 0) {
      return result;
    }
    goto LABEL_7;
  }
  unsigned __int16 v23 = *a4;
LABEL_7:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, v23, 0, 1, &v24, &v25);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1 + 160))(a2, a3, v23, 1, 1, &v27, &v25);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1 + 160))(a2, a3, v23, 2, 1, &v26, &v25);
      if ((result & 0x80000000) == 0)
      {
        __int16 v19 = strlen(__s);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1 + 160))(a2, a3, v23, 3, (unsigned __int16)(v19 + 1), __s, &v25);
        if ((result & 0x80000000) == 0)
        {
          __int16 v20 = strlen(a8);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(a1 + 160))(a2, a3, v23, 5, (unsigned __int16)(v20 + 1), a8, &v25);
          if ((result & 0x80000000) == 0)
          {
            __int16 v21 = strlen(a10);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1 + 160))(a2, a3, v23, 6, (unsigned __int16)(v21 + 1), a10, &v25);
            if ((result & 0x80000000) == 0)
            {
              __int16 v22 = strlen(a11);
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1 + 160))(a2, a3, v23, 9, (unsigned __int16)(v22 + 1), a11, &v25);
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, v23, 7, 1, &a12, &v25);
                if ((result & 0x80000000) == 0) {
                  *a4 = v23;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t crf_mde_utils_POS_dctlkp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a2 + 96))(a3, a4, a5, a6, &__c[3], &__c[1], __c);
  if ((v13 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1]
      || (log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s dct look up %s : no result", v10, v11, v12, a5), *(_WORD *)&__c[1]))
    {
      uint64_t v14 = **(const char ***)&__c[3];
      uint64_t v15 = strchr(**(char ***)&__c[3], __c[0]);
      if (v15)
      {
        *uint64_t v15 = 0;
        uint64_t v14 = **(const char ***)&__c[3];
      }
      size_t v16 = strlen(v14);
      uint64_t v17 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v16 + 1);
      *a7 = v17;
      if (v17)
      {
        strcpy(v17, **(const char ***)&__c[3]);
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s POS dct look up %s : adding %s %s %s", v22, v23, v24, a5);
      }
      else
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v18, v19, v20, v21, v26);
        return 2310021130;
      }
    }
  }
  return v13;
}

uint64_t crf_mde_utils_write_morphemes(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 *a11, unsigned __int16 a12, __int16 a13, unsigned __int16 *a14, const char *a15, _WORD *a16)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  v86 = 0;
  unsigned __int16 v85 = *a11;
  unsigned __int16 v18 = strlen(a15);
  strcpy(v87, "normal");
  uint64_t v19 = *a14;
  if (*a14)
  {
    int v20 = 0;
    uint64_t v21 = (const char **)*((void *)a14 + 1);
    do
    {
      uint64_t v22 = *v21;
      v21 += 6;
      v20 += strlen(v22) + 1;
      --v19;
    }
    while (v19);
  }
  else
  {
    LOWORD(v20) = 0;
  }
  uint64_t v23 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)v20 + 1);
  if (!v23)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v24, v25, v26, v27, __s);
    return 2310021130;
  }
  v28 = v23;
  uint64_t v80 = a1;
  strcpy(v23, **((const char ***)a14 + 1));
  if (*a14 >= 2u)
  {
    *(_WORD *)&v28[strlen(v28)] = 95;
    if (*a14 >= 2u)
    {
      unint64_t v29 = 1;
      uint64_t v30 = 48;
      do
      {
        strcat(v28, *(const char **)(*((void *)a14 + 1) + v30));
        unint64_t v31 = *a14;
        if ((int)v29 + 1 < v31)
        {
          *(_WORD *)&v28[strlen(v28)] = 95;
          unint64_t v31 = *a14;
        }
        ++v29;
        v30 += 48;
      }
      while (v29 < v31);
    }
  }
  unsigned __int16 v32 = strlen(v28);
  *a16 = a13 + a12 + v32;
  unsigned __int16 v33 = Utf8_LengthInBytes((unsigned __int8 *)&a15[(unsigned __int16)(a13 + a12 + v32)], 1);
  uint64_t v34 = (unsigned __int16)*a16;
  if (v18 > v34)
  {
    unsigned __int16 v35 = v33;
    do
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, const char *))(a4 + 128))(a5, a6, &a15[v34])) {
        break;
      }
      uint64_t v36 = (unsigned __int16)*a16;
      if (!strncmp(&a15[v36], "_", v35)) {
        break;
      }
      *a16 = v36 + v35;
      unsigned __int16 v35 = Utf8_LengthInBytes((unsigned __int8 *)&a15[(unsigned __int16)(v36 + v35)], 1);
      uint64_t v34 = (unsigned __int16)*a16;
    }
    while (v18 > v34);
  }
  int v78 = a13 + a12;
  unsigned __int16 v37 = Utf8_LengthInBytes((unsigned __int8 *)&a15[v78], 1);
  int v38 = a12 - v37 + a13;
  unsigned __int16 v82 = v32;
  if (v38 >= 0
    && (unsigned __int16 v39 = v37,
        v40 = &a15[v38],
        (*(unsigned int (**)(uint64_t, uint64_t, const char *))(a4 + 128))(a5, a6, v40)))
  {
    __int16 v41 = 0;
    unsigned int v42 = v39;
    LOWORD(v43) = v39;
    do
    {
      __int16 v44 = v43;
      if (!strncmp(v40, "_", v42)) {
        break;
      }
      unsigned __int16 v45 = Utf8_LengthInBytes((unsigned __int8 *)&a15[v78 - (unsigned __int16)v43], 1);
      int v43 = (unsigned __int16)v43 + v45;
      int v46 = a12 - v43 + a13;
      if (v46 < 0)
      {
        __int16 v41 = v44;
        break;
      }
      unsigned int v42 = v45;
      v40 = &a15[v46];
      __int16 v41 = v44;
    }
    while ((*(unsigned int (**)(uint64_t, uint64_t, const char *))(a4 + 128))(a5, a6, v40));
  }
  else
  {
    __int16 v41 = 0;
  }
  uint64_t v75 = a6;
  unsigned __int16 v47 = v82;
  if (!v82)
  {
    __int16 v49 = 0;
    unsigned __int16 v48 = 0;
LABEL_48:
    if (a2 == 1 && a3)
    {
      uint64_t v61 = v80;
      uint64_t v54 = crf_mde_utils_POS_dctlkp(v80, a4, a5, v75, a3, *(void *)(*((void *)a14 + 1) + 48 * v48), &v86);
      if ((v54 & 0x80000000) != 0) {
        return v54;
      }
      v55 = v86;
      __int16 v62 = *a16 - a13;
      if (v86)
      {
        LOWORD(v73) = 0;
        uint64_t v60 = hlp_Write2WordRec(a7, a9, a10, &v85, a12 - v41 + v49, v62, v48, v86, &byte_20D5A22AE, &byte_20D5A22AE, v87, v73, 1);
        v63 = a11;
        if ((v60 & 0x80000000) != 0) {
          goto LABEL_72;
        }
        heap_Free(*(void **)(v80 + 8), (uint64_t)v55);
        goto LABEL_56;
      }
      LOWORD(v73) = 0;
      uint64_t v64 = hlp_Write2WordRec(a7, a9, a10, &v85, a12 - v41 + v49, v62, v48, "*", &byte_20D5A22AE, &byte_20D5A22AE, v87, v73, 1);
      uint64_t v60 = v64;
    }
    else
    {
      LOWORD(v73) = 0;
      uint64_t v64 = hlp_Write2WordRec(a7, a9, a10, &v85, a12 - v41 + v49, *a16 - a13, v48, &byte_20D5A22AE, &byte_20D5A22AE, &byte_20D5A22AE, v87, v73, 1);
      uint64_t v60 = v64;
      uint64_t v61 = v80;
    }
    v63 = a11;
    if ((v64 & 0x80000000) != 0)
    {
LABEL_67:
      unsigned __int16 *v63 = v85;
      goto LABEL_68;
    }
LABEL_56:
    unint64_t v65 = (unsigned __int16)(v78 + v82);
    uint64_t v66 = (unsigned __int16)(a13 + a12);
    if (v65 > (unsigned __int16)(a13 + a12) && v82)
    {
      unint64_t v67 = 0;
      v68 = &a15[v66];
      uint64_t v69 = v66 + 1;
      do
      {
        int v70 = v28[v67];
        if (v68[v67] != v70) {
          v68[v67] = v70;
        }
        if (v69 + v67 >= v65) {
          break;
        }
        ++v67;
      }
      while (v67 < v82);
    }
    goto LABEL_67;
  }
  unsigned __int16 v48 = 0;
  __int16 v49 = 0;
  unsigned __int16 v50 = 0;
  BOOL v52 = a2 == 1 && a3 != 0;
  __int16 v76 = a12 - v41;
  BOOL v77 = v52;
  while (1)
  {
    unsigned __int16 v53 = Utf8_LengthInBytes((unsigned __int8 *)&v28[v50], 1);
    if (!strncmp(&v28[v50], "_", v53)) {
      break;
    }
LABEL_44:
    v50 += v53;
    if (v50 >= v47) {
      goto LABEL_48;
    }
  }
  if (!v77)
  {
    LOWORD(v73) = 0;
    uint64_t v59 = hlp_Write2WordRec(a7, a9, a10, &v85, v76 + v49, v50 + a12, v48, &byte_20D5A22AE, &byte_20D5A22AE, &byte_20D5A22AE, v87, v73, 1);
    goto LABEL_42;
  }
  uint64_t v54 = crf_mde_utils_POS_dctlkp(v80, a4, a5, v75, a3, *(void *)(*((void *)a14 + 1) + 48 * v48), &v86);
  if ((v54 & 0x80000000) != 0) {
    return v54;
  }
  v55 = v86;
  __int16 v56 = v76 + v49;
  __int16 v57 = v50 + a12;
  if (!v86)
  {
    LOWORD(v73) = 0;
    uint64_t v59 = hlp_Write2WordRec(a7, a9, a10, &v85, v56, v57, v48, "*", &byte_20D5A22AE, &byte_20D5A22AE, v87, v73, 1);
LABEL_42:
    if ((v59 & 0x80000000) != 0)
    {
      uint64_t v60 = v59;
      uint64_t v61 = v80;
      v63 = a11;
      goto LABEL_67;
    }
    goto LABEL_43;
  }
  LOWORD(v73) = 0;
  uint64_t v58 = hlp_Write2WordRec(a7, a9, a10, &v85, v56, v57, v48, v86, &byte_20D5A22AE, &byte_20D5A22AE, v87, v73, 1);
  if ((v58 & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v80 + 8), (uint64_t)v55);
    v86 = 0;
LABEL_43:
    ++v48;
    __int16 v49 = v50 + 1;
    unsigned __int16 v47 = v82;
    goto LABEL_44;
  }
  uint64_t v60 = v58;
  uint64_t v61 = v80;
  v63 = a11;
LABEL_72:
  unsigned __int16 *v63 = v85;
  heap_Free(*(void **)(v61 + 8), (uint64_t)v55);
LABEL_68:
  heap_Free(*(void **)(v61 + 8), (uint64_t)v28);
  return v60;
}

uint64_t crf_mde_utils_adddctres(uint64_t a1, uint64_t a2, const char *a3, char *__s, const char *a5, int a6)
{
  uint64_t v12 = *(void **)(a1 + 8);
  size_t v13 = strlen(__s);
  uint64_t v14 = (char *)heap_Calloc(v12, 1, v13 + 1);
  if (v14)
  {
    uint64_t v19 = v14;
    strcpy(v14, __s);
    int v20 = strchr(__s, 92);
    for (unsigned __int16 i = 1; v20; ++i)
    {
      *int v20 = 0;
      int v20 = strchr(v20 + 1, 92);
    }
    unsigned int v22 = *(unsigned __int16 *)(a2 + 24);
    if (*(_WORD *)(a2 + 24))
    {
      if (*(unsigned __int16 *)(a2 + 8) + i >= v22)
      {
        uint64_t v23 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 16), 32 * (v22 + i) + 160);
        if (!v23) {
          goto LABEL_33;
        }
        *(void *)(a2 + 16) = v23;
        unsigned __int16 v28 = i + *(_WORD *)(a2 + 24) + 5;
        *(_WORD *)(a2 + 24) = v28;
        uint64_t v29 = *(unsigned __int16 *)(a2 + 8);
        if (v29 < v28)
        {
          uint64_t v30 = v28;
          unint64_t v31 = (void *)(v23 + 32 * v29 + 8);
          uint64_t v32 = v30 - v29;
          do
          {
            *((_DWORD *)v31 - 2) = 0;
            v31[1] = 0;
            v31[2] = 0;
            *unint64_t v31 = 0;
            v31 += 4;
            --v32;
          }
          while (v32);
        }
      }
    }
    else
    {
      if (i >= 5u) {
        unsigned __int16 v34 = i + 1;
      }
      else {
        unsigned __int16 v34 = 5;
      }
      uint64_t v35 = heap_Calloc(*(void **)(a1 + 8), 1, 32 * v34);
      *(void *)(a2 + 16) = v35;
      if (!v35) {
        goto LABEL_33;
      }
      *(_WORD *)(a2 + 24) = v34;
    }
    uint64_t v36 = strchr(v19, 92);
    unsigned __int16 v37 = v19;
    if (v36)
    {
      int v38 = v36;
      unsigned __int16 v37 = v19;
      do
      {
        *int v38 = 0;
        size_t v39 = strlen(v37);
        v40 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v39 + 1);
        *(void *)(*(void *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 8) = v40;
        if (!v40) {
          goto LABEL_33;
        }
        strcpy(v40, v37);
        size_t v41 = strlen(a3);
        unsigned int v42 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v41 + 1);
        *(void *)(*(void *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 16) = v42;
        if (!v42) {
          goto LABEL_33;
        }
        strcpy(v42, a3);
        if (a5)
        {
          size_t v43 = strlen(a5);
          if (v43)
          {
            __int16 v44 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v43 + 1);
            *(void *)(*(void *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 24) = v44;
            if (!v44) {
              goto LABEL_33;
            }
            strcpy(v44, a5);
          }
        }
        uint64_t v45 = *(unsigned __int16 *)(a2 + 8);
        *(_DWORD *)(*(void *)(a2 + 16) + 32 * v45) = a6;
        *(_WORD *)(a2 + 8) = v45 + 1;
        unsigned __int16 v37 = v38 + 1;
        int v38 = strchr(v38 + 1, 92);
      }
      while (v38);
    }
    size_t v46 = strlen(v37);
    unsigned __int16 v47 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v46 + 1);
    *(void *)(*(void *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 8) = v47;
    if (v47)
    {
      strcpy(v47, v37);
      size_t v48 = strlen(a3);
      __int16 v49 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v48 + 1);
      *(void *)(*(void *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 16) = v49;
      if (v49)
      {
        strcpy(v49, a3);
        if (!a5) {
          goto LABEL_32;
        }
        size_t v50 = strlen(a5);
        if (!v50) {
          goto LABEL_32;
        }
        v51 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v50 + 1);
        *(void *)(*(void *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 24) = v51;
        if (v51)
        {
          strcpy(v51, a5);
LABEL_32:
          uint64_t v33 = 0;
          uint64_t v52 = *(unsigned __int16 *)(a2 + 8);
          *(_DWORD *)(*(void *)(a2 + 16) + 32 * v52) = a6;
          *(_WORD *)(a2 + 8) = v52 + 1;
          *(_DWORD *)(a2 + 28) = 1;
          *(_DWORD *)(a2 + 40) = 1;
LABEL_34:
          heap_Free(*(void **)(a1 + 8), (uint64_t)v19);
          return v33;
        }
      }
    }
LABEL_33:
    uint64_t v33 = 2310021130;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v24, v25, v26, v27, v54);
    goto LABEL_34;
  }
  uint64_t v33 = 2310021130;
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v15, v16, v17, v18, v54);
  return v33;
}

uint64_t crf_mde_utils_sysdctlkp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v70 = 0;
  unsigned __int8 v68 = 0;
  __s1 = 0;
  unsigned __int16 v69 = -1;
  size_t v13 = "xps";
  if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(a2 + 96))(a3, a4, "fecfg", "mde_affixtags", &v70, &v69, &v68) & 0x80000000) == 0)
  {
    if (v69)
    {
      size_t v13 = *v70;
      uint64_t v14 = strchr(*v70, v68);
      if (v14)
      {
        *uint64_t v14 = 0;
        size_t v13 = *v70;
      }
    }
  }
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"sysdctlookup", &__s1) & 0x80000000) == 0
    && !strcmp(__s1, "no"))
  {
    return 0;
  }
  unsigned __int16 v69 = 0;
  int v66 = 7352935;
  if (a5)
  {
    __strcat_chk();
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, char ***, unsigned __int16 *, unsigned __int8 *, void))(a2 + 232))(a3, a4, &v66, a9, &v70, &v69, &v68, 0);
  }
  else
  {
    unsigned int v60 = 0;
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, char ***, unsigned __int16 *, unsigned __int8 *, uint64_t))(a2 + 240))(a3, a4, &v66, a9, &v70, &v69, &v68, a7);
  }
  uint64_t v19 = v15;
  uint64_t v20 = a9;
  if ((v15 & 0x80000000) == 0)
  {
    if (v69
      || (log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s : no result", v16, v17, v18, a9), v69))
    {
      uint64_t v61 = (char *)v13;
      unint64_t v21 = 0;
      int v22 = 0;
      do
      {
        uint64_t v23 = v70[v21];
        uint64_t v24 = strchr(v23, v68);
        if (!v24) {
          goto LABEL_35;
        }
        *uint64_t v24 = 0;
        unsigned __int16 v28 = strchr(v24 + 1, v68);
        if (!v28) {
          goto LABEL_35;
        }
        char *v28 = 0;
        uint64_t v29 = strchr(v28 + 1, v68);
        if (!v29) {
          goto LABEL_35;
        }
        *uint64_t v29 = 0;
        uint64_t v30 = v29 + 1;
        unint64_t v31 = strchr(v29 + 1, v68);
        uint64_t v32 = v31;
        if (v31)
        {
          *unint64_t v31 = 0;
          uint64_t v32 = v31 + 1;
          uint64_t v33 = strchr(v31 + 1, v68);
          if (v33)
          {
            *uint64_t v33 = 0;
            unsigned __int16 v34 = strchr(v33 + 1, v68);
            if (v34)
            {
              *unsigned __int16 v34 = 0;
              uint64_t v35 = v34 + 1;
              uint64_t v36 = strchr(v34 + 1, v68);
              if (v36)
              {
                *uint64_t v36 = 0;
                unsigned __int16 v37 = strchr(v36 + 1, v68);
                if (v37) {
                  *unsigned __int16 v37 = 0;
                }
              }
              if (!strcmp(v35, "0") || !strcmp(v35, "2")) {
                goto LABEL_35;
              }
            }
          }
        }
        BOOL v38 = !v23 || *v30 == 0;
        if (v38 || (size_t v39 = strlen(v23)) == 0)
        {
LABEL_35:
          if (!v22) {
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s : found entry, but discarded (mde field))", v25, v26, v27, v20);
          }
          int v22 = 1;
        }
        else
        {
          v40 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v39 + 1);
          if (!v40 || (uint64_t v45 = v40, strcpy(v40, v23), (v46 = heap_Calloc(*(void **)(a1 + 8), 1, 256)) == 0))
          {
            log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v41, v42, v43, v44, v60);
            return 2310021130;
          }
          unsigned __int16 v47 = (char *)v46;
          if (strlen(v30) == 1 && strstr(v61, v30))
          {
            strcpy(v47, v30);
            int v51 = 2;
          }
          else
          {
            strcpy(v47, v30);
            if (a8)
            {
              uint64_t v52 = v47;
              while (1)
              {
                unsigned __int16 v53 = strchr(v30, 92);
                if (v53)
                {
                  strncpy(v52, v30, (unsigned __int16)((_WORD)v53 - (_WORD)v30));
                  v52[(unsigned __int16)((_WORD)v53 - (_WORD)v30)] = 0;
                }
                else
                {
                  strcpy(v52, v30);
                }
                unsigned __int16 v69 = -1;
                uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char ***, unsigned __int16 *, unsigned __int8 *))(a2 + 96))(a3, a4, a8, v52, &v70, &v69, &v68);
                if ((v54 & 0x80000000) != 0) {
                  return v54;
                }
                if (v69 == 1)
                {
                  v55 = *v70;
                  __int16 v56 = strchr(*v70, v68);
                  if (v56)
                  {
                    *__int16 v56 = 0;
                    v55 = *v70;
                  }
                  strcpy(v52, v55);
                }
                if (!v53) {
                  break;
                }
                __int16 v57 = &v52[strlen(v52)];
                *(_WORD *)__int16 v57 = 92;
                uint64_t v52 = v57 + 1;
                uint64_t v30 = v53 + 1;
              }
            }
            int v51 = 1;
          }
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s : adding %s %s %s", v48, v49, v50, a9);
          uint64_t v58 = crf_mde_utils_adddctres(a1, a10, v45, v47, v32, v51);
          heap_Free(*(void **)(a1 + 8), (uint64_t)v45);
          uint64_t v20 = a9;
          heap_Free(*(void **)(a1 + 8), (uint64_t)v47);
          uint64_t v19 = 0;
          if ((v58 & 0x80000000) != 0) {
            return v58;
          }
        }
        ++v21;
      }
      while (v21 < v69);
    }
  }
  return v19;
}

uint64_t crf_mde_utils_dctlkp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  memset(__c, 0, sizeof(__c));
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a2 + 96))(a3, a4, a5, a6, &__c[3], &__c[1], __c);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (!*(_WORD *)&__c[1])
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s dct look up %s : no result", v10, v11, v12, a5);
    if (!*(_WORD *)&__c[1]) {
      return v13;
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  while (1)
  {
    uint64_t v17 = *(char **)(*(void *)&__c[3] + 8 * v14);
    uint64_t v18 = strchr(v17, __c[0]);
    if (v18)
    {
      *uint64_t v18 = 0;
      uint64_t v19 = v18 + 1;
      uint64_t v17 = *(char **)(*(void *)&__c[3] + 8 * v14);
    }
    else
    {
      uint64_t v19 = v16;
    }
    size_t v20 = strlen(v17);
    unint64_t v21 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v20 + 1);
    if (!v21)
    {
LABEL_27:
      uint64_t v13 = 2310021130;
      uint64_t v38 = *(void *)(a1 + 32);
      uint64_t v39 = 34000;
      goto LABEL_29;
    }
    uint64_t v26 = v21;
    strcpy(v21, *(const char **)(*(void *)&__c[3] + 8 * v14));
    uint64_t v27 = strchr(v19, __c[0]);
    if (!v27)
    {
      uint64_t v16 = v19;
      if (v15) {
        goto LABEL_13;
      }
LABEL_28:
      uint64_t v13 = 2310021130;
      uint64_t v38 = *(void *)(a1 + 32);
      uint64_t v39 = 34008;
LABEL_29:
      log_OutPublic(v38, (uint64_t)"FE_ONEWORD", v39, 0, v22, v23, v24, v25, v41);
      return v13;
    }
    *uint64_t v27 = 0;
    uint64_t v16 = v27 + 1;
    uint64_t v15 = v19;
    if (!v19) {
      goto LABEL_28;
    }
LABEL_13:
    size_t v28 = strlen(v15);
    uint64_t v29 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v28 + 1);
    if (!v29) {
      goto LABEL_27;
    }
    uint64_t v30 = v29;
    strcpy(v29, v15);
    unint64_t v31 = strchr(v16, __c[0]);
    if (v31) {
      *unint64_t v31 = 0;
    }
    if (v16 && *v16 != __c[0] && (size_t v35 = strlen(v16)) != 0)
    {
      uint64_t v36 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v35 + 1);
      if (!v36) {
        goto LABEL_27;
      }
      unsigned __int16 v37 = v36;
      strcpy(v36, v16);
    }
    else
    {
      unsigned __int16 v37 = 0;
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s dct look up %s : adding %s %s %s", v32, v33, v34, a5);
    uint64_t v13 = crf_mde_utils_adddctres(a1, a7, v30, v26, v37, a8);
    heap_Free(*(void **)(a1 + 8), (uint64_t)v30);
    heap_Free(*(void **)(a1 + 8), (uint64_t)v26);
    if ((v13 & 0x80000000) != 0) {
      break;
    }
    if (v37) {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v37);
    }
    if (++v14 >= (unint64_t)*(unsigned __int16 *)&__c[1]) {
      return 0;
    }
  }
  if (v37) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v37);
  }
  return v13;
}

uint64_t crf_mde_utils_dynstr_add(uint64_t a1, uint64_t a2, const char *a3, int a4)
{
  uint64_t v8 = 2310021120;
  uint64_t v9 = *(char **)a2;
  unsigned __int16 v10 = strlen(*(const char **)a2);
  unsigned __int16 v11 = strlen(a3);
  unsigned int v12 = *(unsigned __int16 *)(a2 + 8);
  if (v10 + v11 + 2 >= v12)
  {
    uint64_t v13 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v9, v11 + v12 + *(unsigned __int16 *)(a2 + 10));
    if (!v13)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v14, v15, v16, v17, v19);
      return 2310021130;
    }
    uint64_t v9 = (char *)v13;
    *(void *)a2 = v13;
    *(_WORD *)(a2 + 8) += v11 + *(_WORD *)(a2 + 10);
  }
  if (a4 == 1)
  {
    strcat(v9, a3);
    return 0;
  }
  if (a4 == 2)
  {
    strcpy(v9, a3);
    return 0;
  }
  return v8;
}

void *crf_mde_utils_dynstr_free(void *result, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (v3)
  {
    uint64_t result = heap_Free((void *)result[1], v3);
    *(void *)a2 = 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t crf_mde_utils_dynstr_init(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4)
{
  __int16 v5 = a3;
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), 1, a3);
  *(void *)a2 = v8;
  if (v8)
  {
    uint64_t v13 = (unsigned char *)v8;
    uint64_t result = 0;
    *(_WORD *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 10) = a4;
    *uint64_t v13 = 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v9, v10, v11, v12, v15);
    return 2310021130;
  }
  return result;
}

uint64_t crf_mde_utils_CRF_MDE_SEGPAT_T_init(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, 80 * a3);
  *a2 = v6;
  if (v6)
  {
    if (a3)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 80 * a3;
      while (1)
      {
        uint64_t result = crf_mde_utils_dynstr_init(a1, *a2 + v11, 0x20u, 16);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = crf_mde_utils_dynstr_init(a1, *a2 + v11 + 32, 0x20u, 16);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = crf_mde_utils_dynstr_init(a1, *a2 + v11 + 48, 0x20u, 16);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = crf_mde_utils_dynstr_init(a1, *a2 + v11 + 16, 0x20u, 16);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = crf_mde_utils_dynstr_init(a1, *a2 + v11 + 64, 0x20u, 16);
        if ((result & 0x80000000) != 0) {
          break;
        }
        v11 += 80;
        if (v12 == v11) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v7, v8, v9, v10, v14);
    return 2310021130;
  }
  return result;
}

void *crf_mde_utils_CRF_MDE_SEGPAT_T_free(void *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    __int16 v5 = result;
    if (a3)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 80 * a3;
      do
      {
        uint64_t v8 = *a2;
        uint64_t v9 = *(void *)(*a2 + v6);
        if (v9)
        {
          heap_Free((void *)v5[1], v9);
          *(void *)(v8 + v6) = 0;
        }
        uint64_t v10 = *a2;
        *(_DWORD *)(v8 + v6 + 8) = 0;
        uint64_t v11 = v10 + v6;
        uint64_t v12 = *(void *)(v10 + v6 + 32);
        if (v12)
        {
          heap_Free((void *)v5[1], v12);
          *(void *)(v11 + 32) = 0;
          uint64_t v10 = *a2;
        }
        *(_DWORD *)(v11 + 40) = 0;
        uint64_t v13 = v10 + v6;
        uint64_t v14 = *(void *)(v10 + v6 + 48);
        if (v14)
        {
          heap_Free((void *)v5[1], v14);
          *(void *)(v13 + 48) = 0;
          uint64_t v10 = *a2;
        }
        *(_DWORD *)(v13 + 56) = 0;
        uint64_t v15 = v10 + v6;
        uint64_t v16 = *(void *)(v10 + v6 + 16);
        if (v16)
        {
          heap_Free((void *)v5[1], v16);
          *(void *)(v15 + 16) = 0;
          uint64_t v10 = *a2;
        }
        *(_DWORD *)(v15 + 24) = 0;
        uint64_t v17 = v10 + v6;
        uint64_t v18 = *(void *)(v10 + v6 + 64);
        if (v18)
        {
          heap_Free((void *)v5[1], v18);
          *(void *)(v17 + 64) = 0;
        }
        *(_DWORD *)(v17 + 72) = 0;
        v6 += 80;
      }
      while (v7 != v6);
      uint64_t v4 = *a2;
    }
    uint64_t result = heap_Free((void *)v5[1], v4);
    *a2 = 0;
  }
  return result;
}

uint64_t crf_mde_utils_do_validation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int16 a13, int a14, const char *a15, char **a16, _WORD *a17)
{
  unsigned int v183 = a7;
  uint64_t v17 = a4;
  uint64_t v18 = a13;
  if (a13)
  {
    uint64_t v19 = 0;
    uint64_t v20 = a1;
    do
    {
      unint64_t v21 = *(unsigned __int16 **)(a12 + 8 * v19);
      if (*((_DWORD *)v21 + 8) == 5)
      {
        uint64_t v22 = v20;
        log_OutText(*(void *)(v20 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"skip nbest[%d] as contains split umlaut", a6, a7, a8, v19);
        uint64_t v20 = v22;
      }
      else if (*v21)
      {
        uint64_t v195 = 0;
        for (unint64_t i = 0; i < *v21; ++i)
        {
          uint64_t v24 = *((void *)v21 + 1);
          if (!*(_WORD *)(v24 + 48 * i + 8))
          {
            uint64_t v25 = v24 + 48 * i;
            int v27 = *(_DWORD *)(v25 + 40);
            uint64_t v26 = (_DWORD *)(v25 + 40);
            if (!v27)
            {
              *uint64_t v26 = 1;
              uint64_t v28 = v20;
              uint64_t v29 = crf_mde_utils_sysdctlkp(v20, a2, a3, a4, a5, a6, v183, a8, *(void *)(v24 + 48 * i), v24 + 48 * i);
              if ((v29 & 0x80000000) != 0) {
                return v29;
              }
              uint64_t v30 = (uint64_t *)(*(void *)(*(void *)(a12 + 8 * v19) + 8) + 48 * i);
              uint64_t v29 = crf_mde_utils_dctlkp(v28, a2, a3, a4, a9, *v30, (uint64_t)v30, 1);
              if ((v29 & 0x80000000) != 0) {
                return v29;
              }
              if (a10)
              {
                unint64_t v31 = (uint64_t *)(*(void *)(*(void *)(a12 + 8 * v19) + 8) + 48 * i);
                uint64_t v29 = crf_mde_utils_dctlkp(a1, a2, a3, a4, a10, *v31, (uint64_t)v31, 2);
                if ((v29 & 0x80000000) != 0) {
                  return v29;
                }
              }
              unint64_t v21 = *(unsigned __int16 **)(a12 + 8 * v19);
              uint64_t v32 = *((void *)v21 + 1);
              if (*(_WORD *)(v32 + 48 * i + 8))
              {
                uint64_t v33 = 0;
                unint64_t v34 = 0;
                *(_DWORD *)(v32 + 48 * i + 32) = 0;
                do
                {
                  size_t v35 = (uint64_t *)(v32 + 48 * i);
                  uint64_t v36 = v35[2] + v33;
                  if (*(void *)(v36 + 16))
                  {
                    unsigned __int16 v37 = strstr(*(char **)(v36 + 16), "â—ˆ");
                    if (v37)
                    {
                      uint64_t v38 = v37;
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"segment %s has phon with special umlaut character=%s", a6, a7, a8, *v35);
                      uint64_t v42 = *(void *)(*(void *)(a12 + 8 * v19) + 8);
                      if (*(_DWORD *)(v42 + 48 * i + 36) == 1)
                      {
                        uint64_t v43 = "umlauted segment; modified to=%s";
                      }
                      else
                      {
                        uint64_t v44 = *(void **)(*(void *)(v42 + 48 * i + 16) + v33 + 16);
                        uint64_t v45 = v38 + 3;
                        size_t v46 = strlen(v45);
                        memcpy(v44, v45, v46);
                        uint64_t v38 = (char *)(*(void *)(*(void *)(*(void *)(*(void *)(a12 + 8 * v19) + 8)
                                                             + 48 * i
                                                             + 16)
                                                 + v33
                                                 + 16)
                                     + strlen(v45));
                        uint64_t v43 = "non-umlauted segment; modified to=%s";
                      }
                      *uint64_t v38 = 0;
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v43, v39, v40, v41, *(void *)(*(void *)(*(void *)(*(void *)(a12 + 8 * v19) + 8) + 48 * i + 16) + v33 + 16));
                    }
                  }
                  unint64_t v21 = *(unsigned __int16 **)(a12 + 8 * v19);
                  uint64_t v32 = *((void *)v21 + 1);
                  uint64_t v47 = *(void *)(v32 + 48 * i + 16) + v33;
                  uint64_t v48 = *(const char **)(v47 + 24);
                  if (v48)
                  {
                    uint64_t v49 = strstr(*(char **)(v47 + 24), "force");
                    if (v49)
                    {
                      uint64_t v50 = v49;
                      unsigned int v51 = (unsigned __int16)strlen(v48);
                      if (v51 < 7)
                      {
                        unsigned __int16 v52 = 5;
                      }
                      else if (v50[5] == 44)
                      {
                        unsigned __int16 v52 = 6;
                      }
                      else
                      {
                        unsigned __int16 v52 = 5;
                      }
                      if (!strcmp(v48, "force")
                        || (memmove(v50, &v50[v52], (int)(v51 - v52 + 1)),
                            uint64_t v53 = a12,
                            uint64_t v48 = *(const char **)(*(void *)(*(void *)(*(void *)(a12 + 8 * v19) + 8)
                                                             + 48 * i
                                                             + 16)
                                                 + v33
                                                 + 24),
                            !*v48))
                      {
                        heap_Free(*(void **)(a1 + 8), (uint64_t)v48);
                        uint64_t v53 = a12;
                        *(void *)(*(void *)(*(void *)(*(void *)(a12 + 8 * v19) + 8) + 48 * i + 16) + v33 + 24) = 0;
                      }
                      unint64_t v21 = *(unsigned __int16 **)(v53 + 8 * v19);
                      uint64_t v32 = *((void *)v21 + 1);
                      *(_DWORD *)(v32 + 48 * i + 32) = 1;
                    }
                  }
                  ++v34;
                  v33 += 32;
                }
                while (v34 < *(unsigned __int16 *)(v32 + 48 * i + 8));
                uint64_t v54 = 0;
                uint64_t v20 = a1;
                do
                {
                  v55 = *(unsigned __int16 **)(a12 + 8 * v54);
                  if (*v55)
                  {
                    for (unint64_t j = 0; j < *v55; ++j)
                    {
                      if ((v19 != v54 || i != j) && *((_DWORD *)v55 + 8) != 5)
                      {
                        uint64_t v57 = *((void *)v55 + 1);
                        if (!*(_WORD *)(v57 + 48 * j + 8))
                        {
                          uint64_t v58 = *((void *)v21 + 1);
                          int v59 = strcmp(*(const char **)(v58 + 48 * i), *(const char **)(v57 + 48 * j));
                          uint64_t v20 = a1;
                          if (!v59)
                          {
                            *(void *)(*(void *)(*(void *)(a12 + 8 * v54) + 8) + 48 * j + 16) = heap_Calloc(*(void **)(a1 + 8), 1, 32 * *(unsigned __int16 *)(v58 + 48 * i + 8));
                            v55 = *(unsigned __int16 **)(a12 + 8 * v54);
                            uint64_t v61 = *((void *)v55 + 1);
                            if (!*(void *)(v61 + 48 * j + 16))
                            {
LABEL_221:
                              uint64_t v122 = 2310021130;
                              uint64_t v169 = *(void *)(a1 + 32);
                              goto LABEL_217;
                            }
                            unint64_t v21 = *(unsigned __int16 **)(a12 + 8 * v19);
                            uint64_t v62 = *((void *)v21 + 1);
                            uint64_t v63 = v62 + 48 * i;
                            __int16 v64 = *(_WORD *)(v63 + 8);
                            uint64_t v65 = v61 + 48 * j;
                            *(_WORD *)(v65 + 24) = v64;
                            *(_WORD *)(v65 + 8) = v64;
                            *(_DWORD *)(v65 + 28) = 1;
                            *(_DWORD *)(v65 + 40) = 1;
                            if (*(_WORD *)(v63 + 8))
                            {
                              uint64_t v66 = 0;
                              uint64_t v67 = 0;
                              uint64_t v20 = a1;
                              while (1)
                              {
                                uint64_t v192 = v67;
                                uint64_t v68 = *(void *)(v62 + 48 * i + 16) + v66;
                                *(_DWORD *)(*(void *)(v61 + 48 * j + 16) + v66) = *(_DWORD *)v68;
                                unsigned __int16 v69 = *(const char **)(v68 + 8);
                                if (v69)
                                {
                                  unint64_t v70 = i;
                                  uint64_t v71 = v20;
                                  v72 = *(void **)(v20 + 8);
                                  size_t v73 = strlen(v69);
                                  *(void *)(*(void *)(*(void *)(*(void *)(a12 + 8 * v54) + 8) + 48 * j + 16)
                                            + v66
                                            + 8) = heap_Calloc(v72, 1, v73 + 1);
                                  v74 = *(char **)(*(void *)(*(void *)(*(void *)(a12 + 8 * v54) + 8)
                                                             + 48 * j
                                                             + 16)
                                                 + v66
                                                 + 8);
                                  if (!v74) {
                                    break;
                                  }
                                  unint64_t v75 = v70;
                                  strcpy(v74, *(const char **)(*(void *)(*(void *)(*(void *)(a12 + 8 * v19) + 8)+ 48 * v70+ 16)+ v66+ 8));
                                  unint64_t v21 = *(unsigned __int16 **)(a12 + 8 * v19);
                                  uint64_t v20 = v71;
                                  unint64_t i = v75;
                                }
                                __int16 v76 = *(void **)(v20 + 8);
                                BOOL v77 = *(const char **)(*(void *)(*((void *)v21 + 1) + 48 * i + 16) + v66 + 16);
                                unint64_t v78 = i;
                                uint64_t v71 = v20;
                                size_t v79 = strlen(v77);
                                *(void *)(*(void *)(*(void *)(*(void *)(a12 + 8 * v54) + 8) + 48 * j + 16)
                                          + v66
                                          + 16) = heap_Calloc(v76, 1, v79 + 1);
                                uint64_t v80 = *(char **)(*(void *)(*(void *)(*(void *)(a12 + 8 * v54) + 8) + 48 * j + 16)
                                               + v66
                                               + 16);
                                if (!v80) {
                                  break;
                                }
                                strcpy(v80, *(const char **)(*(void *)(*(void *)(*(void *)(a12 + 8 * v19) + 8)+ 48 * v78+ 16)+ v66+ 16));
                                unint64_t v21 = *(unsigned __int16 **)(a12 + 8 * v19);
                                uint64_t v62 = *((void *)v21 + 1);
                                uint64_t v81 = v62 + 48 * v78;
                                v55 = *(unsigned __int16 **)(a12 + 8 * v54);
                                uint64_t v61 = *((void *)v55 + 1);
                                *(_DWORD *)(v61 + 48 * j + 32) = *(_DWORD *)(v81 + 32);
                                uint64_t v20 = a1;
                                uint64_t v67 = v192 + 1;
                                v66 += 32;
                                unint64_t i = v78;
                                if (v192 + 1 >= (unint64_t)*(unsigned __int16 *)(v81 + 8)) {
                                  goto LABEL_43;
                                }
                              }
                              uint64_t v122 = 2310021130;
                              uint64_t v169 = *(void *)(v71 + 32);
LABEL_217:
                              log_OutPublic(v169, (uint64_t)"FE_ONEWORD", 34000, 0, v60, a6, a7, a8, v171);
                              return v122;
                            }
                            uint64_t v20 = a1;
                          }
                        }
                      }
LABEL_43:
                      ;
                    }
                  }
                  ++v54;
                  uint64_t v18 = a13;
                }
                while (v54 != a13);
              }
              else
              {
                uint64_t v82 = 0;
                v83 = (const char **)(v32 + 48 * i);
                do
                {
                  v84 = *(unsigned __int16 **)(a12 + 8 * v82);
                  if (*v84)
                  {
                    uint64_t v85 = 0;
                    uint64_t v86 = 48 * *v84;
                    do
                    {
                      if (v19 != v82 || v195 != v85)
                      {
                        uint64_t v87 = *((void *)v84 + 1);
                        if (!strcmp(*v83, *(const char **)(v87 + v85))) {
                          *(_DWORD *)(v87 + v85 + 40) = 1;
                        }
                      }
                      v85 += 48;
                    }
                    while (v86 != v85);
                  }
                  ++v82;
                }
                while (v82 != a13);
                uint64_t v20 = a1;
                uint64_t v18 = a13;
              }
            }
          }
          v195 += 48;
        }
      }
      ++v19;
    }
    while (v19 != v18);
    uint64_t v88 = 0;
    uint64_t v17 = a4;
    do
    {
      v89 = *(unsigned __int16 **)(a12 + 8 * v88);
      uint64_t v90 = *v89;
      if (*v89)
      {
        int v91 = 0;
        int v92 = 0;
        v93 = (_DWORD *)(*((void *)v89 + 1) + 32);
        do
        {
          if (!*((_WORD *)v93 - 12))
          {
            *(v93 - 1) = 0;
            int v92 = 1;
          }
          int v94 = *v93;
          v93 += 12;
          if (v94 == 1) {
            int v91 = 1;
          }
          --v90;
        }
        while (v90);
        if (v92 == 1)
        {
          *((_DWORD *)v89 + 8) = 2;
          if (v91 == 1)
          {
            unint64_t v95 = 0;
            *((_DWORD *)v89 + 8) = 1;
            do
            {
              uint64_t v96 = *((void *)v89 + 1);
              if (*(_WORD *)(v96 + 48 * v95 + 8))
              {
                unint64_t v97 = 0;
                uint64_t v98 = 8;
                do
                {
                  if (**(_DWORD **)(v96 + 48 * v95 + 16) == 2)
                  {
                    *(void *)(*(void *)(*(void *)(*(void *)(a12 + 8 * v88) + 8) + 48 * v95 + 16) + v98) = heap_Calloc(*(void **)(a1 + 8), 1, 2);
                    v99 = *(_WORD **)(*(void *)(*(void *)(*(void *)(a12 + 8 * v88) + 8) + 48 * v95 + 16) + v98);
                    if (!v99) {
                      goto LABEL_221;
                    }
                    _WORD *v99 = 42;
                    v89 = *(unsigned __int16 **)(a12 + 8 * v88);
                  }
                  ++v97;
                  uint64_t v96 = *((void *)v89 + 1);
                  v98 += 32;
                }
                while (v97 < *(unsigned __int16 *)(v96 + 48 * v95 + 8));
              }
              else
              {
                *(void *)(*(void *)(*(void *)(a12 + 8 * v88) + 8) + 48 * v95 + 16) = heap_Calloc(*(void **)(a1 + 8), 1, 32);
                if (!*(void *)(*(void *)(*(void *)(a12 + 8 * v88) + 8) + 48 * v95 + 16)
                  || (*(void *)(*(void *)(*(void *)(*(void *)(a12 + 8 * v88) + 8) + 48 * v95 + 16) + 8) = heap_Calloc(*(void **)(a1 + 8), 1, 2),
                      (v100 = *(_WORD **)(*(void *)(*(void *)(*(void *)(a12 + 8 * v88) + 8) + 48 * v95 + 16)
                                        + 8)) == 0))
                {
                  uint64_t v122 = 2310021130;
                  uint64_t v169 = *(void *)(a1 + 32);
                  goto LABEL_217;
                }
                _WORD *v100 = 42;
                size_t v101 = strlen(*(const char **)(*(void *)(*(void *)(a12 + 8 * v88) + 8) + 48 * v95));
                *(void *)(*(void *)(*(void *)(*(void *)(a12 + 8 * v88) + 8) + 48 * v95 + 16) + 16) = heap_Calloc(*(void **)(a1 + 8), 1, v101 + 1);
                uint64_t v102 = *(void *)(*(void *)(a12 + 8 * v88) + 8);
                v103 = *(char **)(*(void *)(v102 + 48 * v95 + 16) + 16);
                if (!v103) {
                  goto LABEL_221;
                }
                strcpy(v103, *(const char **)(v102 + 48 * v95));
                v89 = *(unsigned __int16 **)(a12 + 8 * v88);
                uint64_t v104 = *((void *)v89 + 1) + 48 * v95;
                **(_DWORD **)(v104 + 16) = 0;
                *(_WORD *)(v104 + 8) = 1;
              }
              ++v95;
            }
            while (v95 < *v89);
          }
        }
      }
      ++v88;
      uint64_t v18 = a13;
    }
    while (v88 != a13);
  }
  uint64_t v106 = a1;
  uint64_t v105 = a12;
  uint64_t v29 = crf_mde_dump(a1, (uint64_t)"After mlex lookup", a12, v18, a14, a16, a17, a8);
  if ((v29 & 0x80000000) != 0) {
    return v29;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"get pattern combinations for valid/partial segmentations:", v107, v108, v109, 0);
  if (!v18) {
    return crf_mde_dump(v106, (uint64_t)"results after mlex/pattern validation", v105, v18, a14, a16, a17, v112);
  }
  uint64_t v113 = 0;
  while (1)
  {
    uint64_t v114 = *(void *)(v106 + 32);
    if (*(_DWORD *)(*(void *)(v105 + 8 * v113) + 32) <= 1u) {
      break;
    }
    log_OutText(v114, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"skip invalid nbest[%d]", v110, v111, v112, v113);
LABEL_183:
    if (++v113 == v18) {
      return crf_mde_dump(v106, (uint64_t)"results after mlex/pattern validation", v105, v18, a14, a16, a17, v112);
    }
  }
  log_OutText(v114, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"doing valid nbest[%d]", v110, v111, v112, v113);
  v115 = *(unsigned __int16 **)(v105 + 8 * v113);
  uint64_t v199 = 0;
  v200[0] = 0;
  v198 = 0;
  __int16 v197 = -1;
  uint64_t v116 = *v115;
  if (*v115)
  {
    v117 = (__int16 *)(*((void *)v115 + 1) + 8);
    unsigned __int16 v118 = 1;
    do
    {
      __int16 v119 = *v117;
      v117 += 24;
      v118 *= v119;
      --v116;
    }
    while (v116);
  }
  else
  {
    unsigned __int16 v118 = 1;
  }
  unsigned __int8 v196 = 0;
  unsigned int v120 = v118;
  uint64_t v121 = crf_mde_utils_CRF_MDE_SEGPAT_T_init(v106, v200, v118);
  if ((v121 & 0x80000000) != 0
    || (uint64_t v121 = crf_mde_utils_CRF_MDE_SEGPAT_T_init(v106, &v199, v120), (v121 & 0x80000000) != 0))
  {
    uint64_t v122 = v121;
    goto LABEL_180;
  }
  __int16 v197 = -1;
  uint64_t v122 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a2 + 96))(a3, v17, "fecfg", "mde_addpos", &v198, &v197, &v196);
  BOOL v184 = 1;
  if ((v122 & 0x80000000) == 0 && v197)
  {
    v123 = *v198;
    v124 = strchr(*v198, v196);
    if (v124)
    {
      char *v124 = 0;
      v123 = *v198;
    }
    BOOL v184 = strcmp(v123, "YES") && strcmp(v123, "yes");
  }
  if (!*v115)
  {
LABEL_180:
    crf_mde_utils_CRF_MDE_SEGPAT_T_free((void *)v106, v200, v120);
    crf_mde_utils_CRF_MDE_SEGPAT_T_free((void *)v106, &v199, v120);
    if ((v122 & 0x80000000) != 0) {
      return v122;
    }
    uint64_t v105 = a12;
    uint64_t v159 = *(void *)(a12 + 8 * v113);
    if (!*(_WORD *)(v159 + 16)) {
      *(_DWORD *)(v159 + 32) = 3;
    }
    goto LABEL_183;
  }
  unint64_t v125 = 0;
  LOWORD(v126) = 0;
  uint64_t v127 = v199;
  uint64_t v179 = v200[0] + 64;
  uint64_t v172 = v200[0];
  uint64_t v173 = v200[0] + 32;
  unsigned int v193 = v120;
  v174 = v115;
  do
  {
    uint64_t v128 = *((void *)v115 + 1);
    uint64_t v181 = v128 + 48 * v125;
    if (*(_WORD *)(v181 + 8))
    {
      unint64_t v129 = 0;
      unsigned __int16 v130 = 0;
      v131 = (void *)(v128 + 48 * v125 + 16);
      __int16 v176 = v126;
      uint64_t v178 = (unsigned __int16)v126;
      unint64_t v175 = v125;
      do
      {
        if ((_WORD)v126)
        {
          uint64_t v132 = v178;
          v133 = (const char **)v179;
          while (1)
          {
            uint64_t v186 = v132;
            uint64_t v134 = v127;
            uint64_t v135 = v127 + 80 * v130;
            uint64_t v136 = a1;
            uint64_t v137 = crf_mde_utils_dynstr_add(a1, v135 + 32, *(v133 - 4), 2);
            if ((v137 & 0x80000000) != 0)
            {
LABEL_176:
              uint64_t v122 = v137;
              uint64_t v106 = v136;
LABEL_178:
              uint64_t v18 = a13;
              uint64_t v17 = a4;
              goto LABEL_179;
            }
            uint64_t v138 = crf_mde_utils_dynstr_add(a1, v135 + 32, a15, 1);
            if ((v138 & 0x80000000) != 0) {
              goto LABEL_177;
            }
            if (*(_DWORD *)(*v131 + 32 * v129) == 2)
            {
              uint64_t v138 = crf_mde_utils_dynstr_add(a1, v135 + 32, *(const char **)v181, 1);
              if ((v138 & 0x80000000) != 0) {
                goto LABEL_177;
              }
              uint64_t v136 = a1;
              if (v184) {
                goto LABEL_128;
              }
              uint64_t v137 = crf_mde_utils_dynstr_add(a1, v135 + 32, "_", 1);
              if ((v137 & 0x80000000) != 0) {
                goto LABEL_176;
              }
              v139 = *(const char **)(*v131 + 32 * v129 + 8);
            }
            else
            {
              v139 = *(const char **)(*v131 + 32 * v129 + 8);
              uint64_t v136 = a1;
            }
            uint64_t v137 = crf_mde_utils_dynstr_add(v136, v135 + 32, v139, 1);
            if ((v137 & 0x80000000) != 0) {
              goto LABEL_176;
            }
LABEL_128:
            uint64_t v140 = v127 + 80 * v130 + 48;
            uint64_t v137 = crf_mde_utils_dynstr_add(v136, v140, *(v133 - 2), 2);
            if ((v137 & 0x80000000) != 0) {
              goto LABEL_176;
            }
            uint64_t v137 = crf_mde_utils_dynstr_add(v136, v140, a15, 1);
            if ((v137 & 0x80000000) != 0) {
              goto LABEL_176;
            }
            uint64_t v137 = crf_mde_utils_dynstr_add(v136, v140, *(const char **)(*v131 + 32 * v129 + 8), 1);
            if ((v137 & 0x80000000) != 0) {
              goto LABEL_176;
            }
            uint64_t v137 = crf_mde_utils_dynstr_add(v136, v135, *(v133 - 8), 2);
            if ((v137 & 0x80000000) != 0) {
              goto LABEL_176;
            }
            uint64_t v137 = crf_mde_utils_dynstr_add(v136, v135, a15, 1);
            if ((v137 & 0x80000000) != 0) {
              goto LABEL_176;
            }
            uint64_t v137 = crf_mde_utils_dynstr_add(v136, v135, *(const char **)(*v131 + 32 * v129 + 16), 1);
            if ((v137 & 0x80000000) != 0) {
              goto LABEL_176;
            }
            uint64_t v127 = v134;
            uint64_t v141 = v134 + 80 * v130 + 64;
            uint64_t v137 = crf_mde_utils_dynstr_add(v136, v141, *v133, 2);
            if ((v137 & 0x80000000) != 0) {
              goto LABEL_176;
            }
            uint64_t v138 = crf_mde_utils_dynstr_add(v136, v141, a15, 1);
            if ((v138 & 0x80000000) != 0)
            {
LABEL_177:
              uint64_t v122 = v138;
              uint64_t v106 = a1;
              goto LABEL_178;
            }
            v142 = *(const char **)(*v131 + 32 * v129 + 24);
            unsigned int v120 = v193;
            if (!v142) {
              v142 = "*";
            }
            uint64_t v143 = crf_mde_utils_dynstr_add(a1, v141, v142, 1);
            if ((v143 & 0x80000000) != 0)
            {
              uint64_t v122 = v143;
              uint64_t v106 = a1;
              uint64_t v18 = a13;
              uint64_t v17 = a4;
              goto LABEL_180;
            }
            ++v130;
            v133 += 10;
            uint64_t v132 = v186 - 1;
            if (v186 == 1) {
              goto LABEL_154;
            }
          }
        }
        if (*(_DWORD *)(*v131 + 32 * v129) == 2)
        {
          uint64_t v106 = a1;
          uint64_t v144 = crf_mde_utils_dynstr_add(a1, v127 + 80 * v130 + 32, *(const char **)v181, 2);
          if ((v144 & 0x80000000) != 0
            || !v184
            && ((uint64_t v144 = crf_mde_utils_dynstr_add(a1, v127 + 80 * v130 + 32, "_", 1), (v144 & 0x80000000) != 0)
             || (uint64_t v144 = crf_mde_utils_dynstr_add(a1, v127 + 80 * v130 + 32, *(const char **)(*v131 + 32 * v129 + 8), 1), (v144 & 0x80000000) != 0)))
          {
LABEL_186:
            uint64_t v122 = v144;
            uint64_t v18 = a13;
            uint64_t v17 = a4;
            goto LABEL_179;
          }
        }
        else
        {
          uint64_t v106 = a1;
          uint64_t v144 = crf_mde_utils_dynstr_add(a1, v127 + 80 * v130 + 32, *(const char **)(*v131 + 32 * v129 + 8), 2);
          if ((v144 & 0x80000000) != 0) {
            goto LABEL_186;
          }
        }
        uint64_t v144 = crf_mde_utils_dynstr_add(v106, v127 + 80 * v130 + 48, *(const char **)(*v131 + 32 * v129 + 8), 2);
        if ((v144 & 0x80000000) != 0) {
          goto LABEL_186;
        }
        uint64_t v145 = crf_mde_utils_dynstr_add(v106, v127 + 80 * v130, *(const char **)(*v131 + 32 * v129 + 16), 2);
        if ((v145 & 0x80000000) != 0)
        {
          uint64_t v122 = v145;
          uint64_t v18 = a13;
          uint64_t v17 = a4;
          goto LABEL_179;
        }
        v146 = *(const char **)(*v131 + 32 * v129 + 24);
        if (!v146) {
          v146 = "*";
        }
        uint64_t v147 = crf_mde_utils_dynstr_add(v106, v127 + 80 * v130 + 64, v146, 2);
        unsigned int v120 = v193;
        if ((v147 & 0x80000000) != 0)
        {
          uint64_t v122 = v147;
          uint64_t v18 = a13;
          uint64_t v17 = a4;
          goto LABEL_180;
        }
        ++v130;
LABEL_154:
        ++v129;
        unint64_t v125 = v175;
        LOWORD(v126) = v176;
      }
      while (v129 < *(unsigned __int16 *)(v181 + 8));
      if (v130)
      {
        uint64_t v126 = 0;
        unsigned __int16 v148 = 0;
        uint64_t v149 = 0;
        uint64_t v187 = v130;
        uint64_t v106 = a1;
        uint64_t v17 = a4;
        while (1)
        {
          uint64_t v177 = v126;
          uint64_t v150 = v127;
          v151 = *(const char **)(v127 + 80 * v149 + 32);
          if (v148)
          {
            int v152 = 0;
            unsigned int v153 = v148;
            v154 = (const char **)v173;
            uint64_t v155 = v148;
            do
            {
              v156 = *v154;
              v154 += 10;
              if (!strcmp(v156, v151)) {
                int v152 = 1;
              }
              --v155;
            }
            while (v155);
            uint64_t v106 = a1;
            if (v152)
            {
              uint64_t v127 = v150;
              uint64_t v126 = v177;
              goto LABEL_170;
            }
          }
          else
          {
            unsigned int v153 = 0;
          }
          uint64_t v157 = crf_mde_utils_dynstr_add(v106, v172 + 80 * v153 + 32, v151, 2);
          if ((v157 & 0x80000000) != 0)
          {
            uint64_t v122 = v157;
            uint64_t v18 = a13;
LABEL_179:
            unsigned int v120 = v193;
            goto LABEL_180;
          }
          uint64_t v158 = crf_mde_utils_dynstr_add(v106, v172 + 80 * (unsigned __int16)v177 + 48, *(const char **)(v150 + 80 * v149 + 48), 2);
          if ((v158 & 0x80000000) != 0
            || (uint64_t v158 = crf_mde_utils_dynstr_add(v106, v172 + 80 * (unsigned __int16)v177, *(const char **)(v150 + 80 * v149), 2), (v158 & 0x80000000) != 0)|| (uint64_t v158 = crf_mde_utils_dynstr_add(v106, v172 + 80 * (unsigned __int16)v177 + 64, *(const char **)(v150 + 80 * v149 + 64), 2), (v158 & 0x80000000) != 0))
          {
            uint64_t v122 = v158;
            uint64_t v18 = a13;
            goto LABEL_179;
          }
          uint64_t v127 = v150;
          uint64_t v126 = (v177 + 1);
          unsigned __int16 v148 = v177 + 1;
LABEL_170:
          ++v149;
          unint64_t v125 = v175;
          if (v149 == v187) {
            goto LABEL_173;
          }
        }
      }
      LOWORD(v126) = 0;
      uint64_t v106 = a1;
      uint64_t v17 = a4;
    }
    else
    {
      LOWORD(v126) = 0;
    }
LABEL_173:
    ++v125;
    v115 = v174;
    uint64_t v18 = a13;
    unsigned int v120 = v193;
  }
  while (v125 < *v174);
  if (!(_WORD)v126)
  {
    uint64_t v122 = 0;
    goto LABEL_180;
  }
  uint64_t v188 = (unsigned __int16)v126;
  uint64_t v160 = heap_Calloc(*(void **)(v106 + 8), 1, 80 * (unsigned __int16)v126);
  *((void *)v174 + 3) = v160;
  if (!v160)
  {
    uint64_t v122 = 2310021130;
    uint64_t v169 = *(void *)(v106 + 32);
    goto LABEL_217;
  }
  uint64_t v161 = 0;
  uint64_t v122 = 0;
  v174[8] = 0;
  v162 = (uint64_t *)v173;
  while (1)
  {
    if (a11)
    {
      log_OutText(*(void *)(v106 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"   check pattern %s", a6, a7, a8, *v162);
      __int16 v197 = -1;
      uint64_t v122 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a2 + 96))(a3, v17, "mde_segpatterns", *v162, &v198, &v197, &v196);
      if ((v122 & 0x80000000) != 0) {
        return v122;
      }
    }
    if (v197)
    {
      v163 = strchr(*v198, v196);
      if (v163) {
        char *v163 = 0;
      }
      log_OutText(*(void *)(v106 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"     Found Solution %d %s : Valid, PRON=%s POS=%s", v164, v165, v166, v161);
      uint64_t v167 = crf_mde_utils_dynstr_init(v106, *((void *)v174 + 3) + 80 * v174[8] + 16, 0x20u, 16);
      if ((v167 & 0x80000000) != 0)
      {
        uint64_t v122 = v167;
        goto LABEL_179;
      }
      uint64_t v168 = crf_mde_utils_dynstr_add(v106, *((void *)v174 + 3) + 80 * v174[8] + 16, *v198, 2);
      if ((v168 & 0x80000000) != 0) {
        goto LABEL_211;
      }
      uint64_t v168 = crf_mde_utils_dynstr_init(v106, *((void *)v174 + 3) + 80 * v174[8] + 32, 0x20u, 16);
      if ((v168 & 0x80000000) != 0
        || (uint64_t v168 = crf_mde_utils_dynstr_add(v106, *((void *)v174 + 3) + 80 * v174[8] + 32, (const char *)*v162, 2),
            (v168 & 0x80000000) != 0)
        || (uint64_t v168 = crf_mde_utils_dynstr_init(v106, *((void *)v174 + 3) + 80 * v174[8] + 48, 0x20u, 16),
            (v168 & 0x80000000) != 0)
        || (uint64_t v168 = crf_mde_utils_dynstr_add(v106, *((void *)v174 + 3) + 80 * v174[8] + 48, (const char *)v162[2], 2),
            (v168 & 0x80000000) != 0)
        || (uint64_t v168 = crf_mde_utils_dynstr_init(v106, *((void *)v174 + 3) + 80 * v174[8], 0x20u, 16),
            (v168 & 0x80000000) != 0)
        || (uint64_t v168 = crf_mde_utils_dynstr_add(v106, *((void *)v174 + 3) + 80 * v174[8], (const char *)*(v162 - 4), 2),
            (v168 & 0x80000000) != 0)
        || (uint64_t v168 = crf_mde_utils_dynstr_init(v106, *((void *)v174 + 3) + 80 * v174[8] + 64, 0x20u, 16),
            (v168 & 0x80000000) != 0)
        || (uint64_t v168 = crf_mde_utils_dynstr_add(v106, *((void *)v174 + 3) + 80 * v174[8] + 64, (const char *)v162[4], 2),
            (v168 & 0x80000000) != 0))
      {
LABEL_211:
        uint64_t v122 = v168;
        goto LABEL_179;
      }
      uint64_t v122 = 0;
      ++v174[8];
      unsigned int v120 = v193;
    }
    else
    {
      log_OutText(*(void *)(v106 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"     pattern [%d] %s : Invalid", a6, a7, a8, v161);
    }
    ++v161;
    v162 += 10;
    if (v188 == v161) {
      goto LABEL_180;
    }
  }
}

uint64_t crf_mde_dump(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char **a6, _WORD *a7, uint64_t a8)
{
  if (!a5) {
    return 0;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s:", (uint64_t)a6, (uint64_t)a7, a8, a2);
  if (!a4) {
    return 0;
  }
  uint64_t v14 = 0;
  while (1)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"nbest[%d]", v11, v12, v13, v14);
    strcpy(*a6, "MSD: ");
    uint64_t v18 = *(unsigned __int16 **)(a3 + 8 * v14);
    uint64_t v19 = *v18;
    if (*v18)
    {
      int v20 = 0;
      unint64_t v21 = (int *)(*((void *)v18 + 1) + 28);
      do
      {
        int v22 = *v21;
        v21 += 12;
        if (!v22) {
          int v20 = 1;
        }
        --v19;
      }
      while (v19);
      if (v20 != 1) {
        break;
      }
      uint64_t result = crf_mde_utils_add2Str(a1, (const char **)a6, a7, " !! ");
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v18 = *(unsigned __int16 **)(a3 + 8 * v14);
      if (*v18) {
        break;
      }
    }
LABEL_18:
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s", v15, v16, v17, (uint64_t)*a6);
    unsigned int v27 = *(_DWORD *)(*(void *)(a3 + 8 * v14) + 32) - 1;
    if (v27 <= 4) {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)off_264108380[v27], v11, v12, v13, 0);
    }
    uint64_t v28 = *(unsigned __int16 **)(a3 + 8 * v14);
    if (*v28)
    {
      unint64_t v29 = 0;
      do
      {
        uint64_t v30 = "   ";
        if (!*(_DWORD *)(*((void *)v28 + 1) + 48 * v29 + 28)) {
          uint64_t v30 = "!! ";
        }
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s %s", v11, v12, v13, (uint64_t)v30);
        uint64_t v28 = *(unsigned __int16 **)(a3 + 8 * v14);
        uint64_t v31 = *((void *)v28 + 1);
        if (*(_WORD *)(v31 + 48 * v29 + 8))
        {
          uint64_t v32 = 0;
          unint64_t v33 = 0;
          do
          {
            unint64_t v34 = (_DWORD *)(*(void *)(v31 + 48 * v29 + 16) + v32);
            size_t v35 = " ISAffix";
            if (*v34 != 2) {
              size_t v35 = &byte_20D5A22AE;
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"     %s%s%s%s%s%s%s", v11, v12, v13, (uint64_t)v35);
            uint64_t v28 = *(unsigned __int16 **)(a3 + 8 * v14);
            ++v33;
            uint64_t v31 = *((void *)v28 + 1);
            v32 += 32;
          }
          while (v33 < *(unsigned __int16 *)(v31 + 48 * v29 + 8));
        }
        ++v29;
      }
      while (v29 < *v28);
    }
    if (v28[8])
    {
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      do
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"    solution[%d]", v11, v12, v13, v37);
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      segpat:%s", v38, v39, v40, *(void *)(*(void *)(*(void *)(a3 + 8 * v14) + 24) + v36 + 32));
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      segpatPOS:%s", v41, v42, v43, *(void *)(*(void *)(*(void *)(a3 + 8 * v14) + 24) + v36 + 48));
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      wordPOS:%s", v44, v45, v46, *(void *)(*(void *)(*(void *)(a3 + 8 * v14) + 24) + v36 + 16));
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      pron:%s", v47, v48, v49, *(void *)(*(void *)(*(void *)(a3 + 8 * v14) + 24) + v36));
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      feat:%s", v50, v51, v52, *(void *)(*(void *)(*(void *)(a3 + 8 * v14) + 24) + v36 + 64));
        ++v37;
        v36 += 80;
      }
      while (v37 < *(unsigned __int16 *)(*(void *)(a3 + 8 * v14) + 16));
    }
    if (++v14 == a4) {
      return 0;
    }
  }
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  while (1)
  {
    uint64_t result = crf_mde_utils_add2Str(a1, (const char **)a6, a7, *(char **)(*((void *)v18 + 1) + v24));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v18 = *(unsigned __int16 **)(a3 + 8 * v14);
    unint64_t v26 = *v18;
    if ((int)v25 + 1 < v26)
    {
      uint64_t result = crf_mde_utils_add2Str(a1, (const char **)a6, a7, " | ");
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v18 = *(unsigned __int16 **)(a3 + 8 * v14);
      unint64_t v26 = *v18;
    }
    ++v25;
    v24 += 48;
    if (v25 >= v26) {
      goto LABEL_18;
    }
  }
}

char *dynamic_strcat(const char **a1, const char *a2, size_t *a3, uint64_t *a4)
{
  uint64_t v8 = (char *)*a1;
  size_t v9 = strlen(*a1);
  size_t v10 = strlen(a2) + v9;
  if (v10 < *a3) {
    goto LABEL_4;
  }
  size_t v11 = v10 + 128;
  uint64_t v12 = heap_Realloc(a4, (uint64_t)v8, (v10 + 128));
  uint64_t v8 = (char *)v12;
  if (v12)
  {
    *a1 = (const char *)v12;
    *a3 = v11;
LABEL_4:
    strcat(v8, a2);
  }
  return v8;
}

char *dynamic_strncat(const char **a1, const char *a2, uint64_t a3, void *a4, uint64_t *a5)
{
  size_t v10 = (char *)*a1;
  size_t v11 = strlen(*a1) + a3;
  if (v11 < *a4) {
    goto LABEL_4;
  }
  size_t v12 = v11 + 128;
  uint64_t v13 = heap_Realloc(a5, (uint64_t)v10, (v11 + 128));
  size_t v10 = (char *)v13;
  if (v13)
  {
    *a1 = (const char *)v13;
    *a4 = v12;
LABEL_4:
    strncat(v10, a2, a3);
  }
  return v10;
}

uint64_t fe_oneword_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v65 = 0;
  uint64_t v5 = 2310021130;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  if (!a5) {
    return 2310021127;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v67);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  size_t v12 = (void *)heap_Calloc(*(void **)(v67 + 8), 1, 2288);
  uint64_t v17 = v67;
  if (!v12)
  {
    log_OutPublic(*(void *)(v67 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v13, v14, v15, v16, v56);
    return v5;
  }
  uint64_t v18 = (uint64_t)v12;
  v12[2] = a3;
  char v12[3] = a4;
  v12[4] = a1;
  v12[5] = a2;
  void *v12 = v17;
  v12[1] = a1;
  uint64_t v19 = (void *)heap_Calloc(*(void **)(v67 + 8), 1, 1040);
  *(void *)(v18 + 48) = v19;
  if (!v19)
  {
LABEL_52:
    uint64_t v38 = v67;
LABEL_53:
    log_OutPublic(*(void *)(v38 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v20, v21, v22, v23, v56);
LABEL_64:
    fe_oneword_ObjClose(*(uint64_t **)a5, *(void *)(a5 + 8));
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return v5;
  }
  *uint64_t v19 = a3;
  v19[1] = a4;
  uint64_t Object = objc_GetObject(*(void *)(v67 + 48), (uint64_t)"LINGDB", &v66);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_63;
  }
  *(void *)(v18 + 56) = *(void *)(v66 + 8);
  uint64_t Object = objc_GetObject(*(void *)(v67 + 48), (uint64_t)"FE_DCTLKP", &v65);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_63;
  }
  uint64_t v25 = v65;
  *(void *)(v18 + 80) = *(void *)(v65 + 8);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(v25 + 16);
  uint64_t Object = objc_GetObject(*(void *)(v67 + 48), (uint64_t)"FE_DEPES", &v64);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_63;
  }
  uint64_t v26 = v64;
  *(void *)(v18 + 104) = *(void *)(v64 + 8);
  *(_OWORD *)(v18 + 88) = *(_OWORD *)(v26 + 16);
  uint64_t Object = objc_GetObject(*(void *)(v67 + 48), (uint64_t)"CLMOBJECT", &v63);
  if ((Object & 0x80000000) != 0
    || (uint64_t v27 = v63,
        *(void *)(v18 + 128) = *(void *)(v63 + 8),
        *(_OWORD *)(v18 + 112) = *(_OWORD *)(v27 + 16),
        uint64_t Object = objc_GetObject(*(void *)(v67 + 48), (uint64_t)"PHONMAP", &v62),
        (Object & 0x80000000) != 0))
  {
LABEL_63:
    uint64_t v5 = Object;
    goto LABEL_64;
  }
  uint64_t v28 = v62;
  *(void *)(v18 + 152) = *(void *)(v62 + 8);
  *(_OWORD *)(v18 + 136) = *(_OWORD *)(v28 + 16);
  uint64_t inited = checkStatCOMP(*(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), (_DWORD *)(v18 + 2000));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = checkSkipCrosstoken(*(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), (_DWORD *)(v18 + 936));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = checkFeOneWordCLM(*(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), (_DWORD *)(v18 + 940));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = checkParaDCT(*(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), (_DWORD *)(v18 + 1996));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = oneword_posparser_Open(v18);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v29 = *(void *)(v18 + 2176);
  if (v29) {
    heap_Free(*(void **)(*(void *)v18 + 8), v29);
  }
  *(void *)(v18 + 2176) = 0;
  uint64_t inited = hlp_setKeyword(*(void *)v18, *(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), (uint64_t)"feoneword_latinPOStag", (char **)(v18 + 2176));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v30 = *(void *)(v18 + 2184);
  if (v30) {
    heap_Free(*(void **)(*(void *)v18 + 8), v30);
  }
  *(void *)(v18 + 2184) = 0;
  uint64_t inited = hlp_setKeyword(*(void *)v18, *(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), (uint64_t)"feoneword_latin2enx", (char **)(v18 + 2184));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(_DWORD *)(v18 + 2168) = 0;
  uint64_t inited = crf_mde_seg_load(*(_WORD **)(v18 + 16), *(void *)(v18 + 24), *(_WORD **)(v18 + 32), *(void *)(v18 + 40), *(void *)v18, *(void *)(v18 + 8), *(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), v18 + 2016, (_DWORD *)(v18 + 2168));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(_DWORD *)(v18 + 2192) = 0;
  if (!*(_DWORD *)(v18 + 2168))
  {
    uint64_t Object = com_mosynt_UseMosynt(*(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), (BOOL *)(v18 + 2192));
    if ((Object & 0x80000000) != 0) {
      goto LABEL_63;
    }
    if (*(_DWORD *)(v18 + 2192))
    {
      LODWORD(v57) = 1;
      uint64_t Object = hlp_GetParams((uint64_t *)v18, (_DWORD *)(v18 + 2248), &v57);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_63;
      }
      uint64_t Object = wgram_LoadData(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), (void *)(v18 + 2232));
      if ((Object & 0x80000000) != 0) {
        goto LABEL_63;
      }
      uint64_t Object = kbsymtab_LoadData(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), (uint64_t *)(v18 + 2200), v57);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_63;
      }
      uint64_t Object = fst_LoadData(a3, a4, (uint64_t *)(v18 + 2240));
      if ((Object & 0x80000000) != 0) {
        goto LABEL_63;
      }
      uint64_t Object = kblex_InitLex(*(_WORD **)(v18 + 16), *(void *)(v18 + 24), *(_WORD **)(v18 + 32), *(void *)(v18 + 40), v18 + 1228, *(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), 0, (void *)(v18 + 2208));
      if ((Object & 0x80000000) != 0) {
        goto LABEL_63;
      }
      uint64_t Object = kblex_InitLex(*(_WORD **)(v18 + 16), *(void *)(v18 + 24), *(_WORD **)(v18 + 32), *(void *)(v18 + 40), v18 + 1228, *(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), 1u, (void *)(v18 + 2216));
      if ((Object & 0x80000000) != 0) {
        goto LABEL_63;
      }
      uint64_t Object = kblex_InitLex(*(_WORD **)(v18 + 16), *(void *)(v18 + 24), *(_WORD **)(v18 + 32), *(void *)(v18 + 40), v18 + 1228, *(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), 2u, (void *)(v18 + 2224));
      if ((Object & 0x80000000) != 0) {
        goto LABEL_63;
      }
    }
  }
  *(void *)a5 = v18;
  *(_DWORD *)(a5 + 8) = 62340;
  uint64_t Object = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(v18 + 80) + 88))(*(void *)(v18 + 64), *(void *)(v18 + 72), (char *)&v61 + 4, &v61);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_63;
  }
  BOOL v31 = v61 == 1 && HIDWORD(v61) == 1;
  BOOL v32 = v31;
  *(_DWORD *)(v18 + 560) = v32;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 208) = 0u;
  *(_WORD *)(v18 + 224) = 0;
  *(_OWORD *)(v18 + 232) = 0u;
  *(_OWORD *)(v18 + 248) = 0u;
  *(void *)(v18 + 264) = 0;
  *(unsigned char *)(v18 + 556) = 1;
  *(void *)(v18 + 568) = 0;
  uint64_t Object = paramc_ParamGet(*(void *)(*(void *)v18 + 40), (uint64_t)"langcode", (void *)(v18 + 1208), 0);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_63;
  }
  uint64_t v33 = heap_Alloc(*(void *)(*(void *)v18 + 8), 128);
  *(void *)(v18 + 160) = v33;
  if (!v33) {
    goto LABEL_66;
  }
  *(void *)(v18 + 192) = 128;
  uint64_t v34 = heap_Alloc(*(void *)(*(void *)v18 + 8), 128);
  *(void *)(v18 + 168) = v34;
  if (!v34) {
    goto LABEL_66;
  }
  *(void *)(v18 + 200) = 128;
  uint64_t v35 = heap_Alloc(*(void *)(*(void *)v18 + 8), 128);
  *(void *)(v18 + 176) = v35;
  if (!v35) {
    goto LABEL_66;
  }
  *(void *)(v18 + 208) = 128;
  uint64_t v36 = heap_Alloc(*(void *)(*(void *)v18 + 8), 128);
  *(void *)(v18 + 184) = v36;
  if (!v36) {
    goto LABEL_66;
  }
  *(void *)(v18 + 216) = 128;
  uint64_t v37 = heap_Alloc(*(void *)(*(void *)v18 + 8), 128);
  *(void *)(v18 + 232) = v37;
  uint64_t v38 = *(void *)v18;
  if (!v37) {
    goto LABEL_53;
  }
  uint64_t v39 = heap_Alloc(*(void *)(v38 + 8), 128);
  *(void *)(v18 + 240) = v39;
  uint64_t v38 = *(void *)v18;
  if (!v39) {
    goto LABEL_53;
  }
  uint64_t v40 = heap_Alloc(*(void *)(v38 + 8), 128);
  *(void *)(v18 + 248) = v40;
  uint64_t v38 = *(void *)v18;
  if (!v40) {
    goto LABEL_53;
  }
  uint64_t v41 = heap_Alloc(*(void *)(v38 + 8), 128);
  *(void *)(v18 + 256) = v41;
  uint64_t v38 = *(void *)v18;
  if (!v41) {
    goto LABEL_53;
  }
  uint64_t v42 = heap_Alloc(*(void *)(v38 + 8), 128);
  *(void *)(v18 + 264) = v42;
  if (!v42)
  {
LABEL_66:
    uint64_t v38 = *(void *)v18;
    goto LABEL_53;
  }
  strcpy((char *)(v18 + 300), "normal");
  uint64_t Object = oneword_GetMdeSettings(v18);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_63;
  }
  uint64_t Object = hlp_GetPart(v18);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_63;
  }
  uint64_t v43 = *(void **)(*(void *)v18 + 8);
  *(void *)&long long v57 = ssftmap_ElemCopyString;
  *((void *)&v57 + 1) = ssftmap_ElemFreeString;
  uint64_t v58 = ssftmap_ElemCompareKeysString;
  int v59 = stringmap_loc_ElemCopyPtr;
  uint64_t v60 = stringmap_loc_ElemFreeNoOp;
  uint64_t Object = ssftmap_ObjOpen(v43, 0, &v57, (uint64_t *)(v18 + 568));
  if ((Object & 0x80000000) != 0) {
    goto LABEL_63;
  }
  *(void *)(v18 + 856) = heap_Alloc;
  *(void *)(v18 + 864) = heap_Calloc;
  *(void *)(v18 + 872) = heap_Realloc;
  *(void *)(v18 + 880) = heap_Free;
  int v44 = OOCAllocator_Con(v18 + 888, (_OWORD *)(v18 + 856), *(void *)(*(void *)v18 + 8));
  uint64_t v45 = LH_ERROR_to_VERROR(v44);
  uint64_t v50 = *(void *)v18;
  if ((v45 & 0x80000000) != 0)
  {
    uint64_t v55 = v45;
    log_OutPublic(*(void *)(v50 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v46, v47, v48, v49, v56);
    uint64_t v5 = v55;
    goto LABEL_64;
  }
  uint64_t v51 = (unsigned char *)heap_Alloc(*(void *)(v50 + 8), 64);
  *(void *)(v18 + 2256) = v51;
  if (!v51) {
    goto LABEL_52;
  }
  unsigned char *v51 = 0;
  uint64_t v52 = (unsigned char *)heap_Alloc(*(void *)(*(void *)v18 + 8), 64);
  *(void *)(v18 + 2264) = v52;
  if (!v52) {
    goto LABEL_52;
  }
  *uint64_t v52 = 0;
  uint64_t v53 = (unsigned char *)heap_Alloc(*(void *)(*(void *)v18 + 8), 16);
  *(void *)(v18 + 2280) = v53;
  if (!v53) {
    goto LABEL_52;
  }
  *uint64_t v53 = 0;
  uint64_t v5 = hlp_common_ObjOpenReopen(v18);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_64;
  }
  return v5;
}

uint64_t checkStatCOMP(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a3 + 96))(a1, a2, "fecfg", "usecompound", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3] != 0)
  {
    uint64_t v7 = **(const char ***)&__c[3];
    uint64_t v8 = strchr(**(char ***)&__c[3], __c[0]);
    if (v8)
    {
      *uint64_t v8 = 0;
      uint64_t v7 = **(const char ***)&__c[3];
    }
    if (!strcmp("yes", v7) || !strcmp("YES", v7)) {
      *a4 = 1;
    }
  }
  return v5;
}

uint64_t checkFeOneWordCLM(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a3 + 96))(a1, a2, "fecfg", "feoneword_clm", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3] != 0)
  {
    uint64_t v7 = **(const char ***)&__c[3];
    uint64_t v8 = strchr(**(char ***)&__c[3], __c[0]);
    if (v8)
    {
      *uint64_t v8 = 0;
      uint64_t v7 = **(const char ***)&__c[3];
    }
    if (!strcmp("yes", v7) || !strcmp("YES", v7)) {
      *a4 = 1;
    }
  }
  return v5;
}

uint64_t checkParaDCT(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a3 + 96))(a1, a2, "fecfg", "feoneword_parallel", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3] != 0)
  {
    uint64_t v7 = **(const char ***)&__c[3];
    uint64_t v8 = strchr(**(char ***)&__c[3], __c[0]);
    if (v8)
    {
      *uint64_t v8 = 0;
      uint64_t v7 = **(const char ***)&__c[3];
    }
    if (!strcmp("yes", v7) || !strcmp("YES", v7)) {
      *a4 = 1;
    }
  }
  return v5;
}

uint64_t hlp_setKeyword(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  memset(__c, 0, sizeof(__c));
  *a6 = 0;
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a4 + 96))(a2, a3, "fecfg", a5, &__c[3], &__c[1], __c);
  uint64_t result = 0;
  if ((v8 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3] != 0)
  {
    size_t v11 = **(const char ***)&__c[3];
    size_t v12 = strchr(**(char ***)&__c[3], __c[0]);
    if (v12)
    {
      char *v12 = 0;
      size_t v11 = **(const char ***)&__c[3];
    }
    size_t v13 = strlen(v11);
    uint64_t v14 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v13 + 1);
    *a6 = v14;
    if (v14)
    {
      strcpy(v14, **(const char ***)&__c[3]);
      return 0;
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v15, v16, v17, v18, v19);
      return 2310021130;
    }
  }
  return result;
}

uint64_t hlp_GetParams(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  __s1 = 0;
  uint64_t CfgParamVal = com_mosynt_GetCfgParamVal(a1[8], a1[9], a1[10], (uint64_t)"mosynt_usesubmorphana", "yes", &__s1);
  if ((CfgParamVal & 0x80000000) != 0) {
    return CfgParamVal;
  }
  *a2 = strcmp(__s1, "yes") == 0;
  uint64_t v7 = com_mosynt_GetCfgParamVal(a1[8], a1[9], a1[10], (uint64_t)"mosynt_enablegraphsymcache", "yes", &__s1);
  if ((v7 & 0x80000000) == 0) {
    *a3 = strcmp(__s1, "yes") == 0;
  }
  return v7;
}

uint64_t hlp_GetPart(uint64_t a1)
{
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t v2 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "nrpart_g2p", &__c[3], &__c[1], __c);
  if ((v2 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    uint64_t v3 = **(const char ***)&__c[3];
    uint64_t v4 = strchr(**(char ***)&__c[3], __c[0]);
    if (v4)
    {
      char *v4 = 0;
      uint64_t v3 = **(const char ***)&__c[3];
    }
    *(unsigned char *)(a1 + 556) = atoi(v3);
  }
  return v2;
}

uint64_t stringmap_loc_ElemCopyPtr(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t hlp_common_ObjOpenReopen(uint64_t a1)
{
  __int16 v28 = -1;
  __s1 = 0;
  uint64_t v20 = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  uint64_t DTData = hlp_LoadDTData(a1);
  if ((DTData & 0x80000000) != 0) {
    return DTData;
  }
  char v27 = 0;
  uint64_t v21 = 0;
  uint64_t DTData = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "esctn", &v21, &v28, &v27);
  if ((DTData & 0x80000000) != 0) {
    return DTData;
  }
  if (v28)
  {
    uint64_t v3 = *(void *)(a1 + 1216);
    uint64_t v4 = strlen(*v21) + 1;
    uint64_t v5 = *(uint64_t **)(*(void *)a1 + 8);
    if (v3)
    {
      uint64_t v6 = (char *)heap_Realloc(v5, v3, v4);
      if (v6)
      {
LABEL_6:
        *(void *)(a1 + 1216) = v6;
        strcpy(v6, *v21);
        *(unsigned char *)(strlen(*v21) + *(void *)(a1 + 1216) - 1) = 124;
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v6 = (char *)heap_Alloc((uint64_t)v5, v4);
      if (v6) {
        goto LABEL_6;
      }
    }
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v7, v8, v9, v10, v19);
    return 2310021130;
  }
LABEL_7:
  *(_DWORD *)(a1 + 1224) = 1;
  __int16 v25 = 0;
  char v26 = 0;
  int v24 = 7352935;
  size_t v11 = (char *)(a1 + 1327);
  uint64_t v12 = -223;
  while (1)
  {
    LH_itoa(v12 + 256, __s, 0xAu);
    strlen(__s);
    __memcpy_chk();
    __int16 v28 = -1;
    uint64_t v13 = (*(uint64_t (**)(void, void, const char *, int *, const char ***, __int16 *, char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", &v24, &v21, &v28, &v27);
    if ((v13 & 0x80000000) != 0) {
      break;
    }
    if (v28)
    {
      *size_t v11 = 0;
      size_t v14 = strlen(*v21);
      strncat(v11, *v21, v14 - 1);
    }
    else
    {
      *(_DWORD *)(a1 + 1224) = 0;
    }
    if (!__CFADD__(v12++, 1))
    {
      v11 += 3;
      if (*(_DWORD *)(a1 + 1224)) {
        continue;
      }
    }
    *(_DWORD *)(a1 + 2272) = 0;
    if ((com_mosynt_GetCfgParamVal(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), (uint64_t)"feoneword_enable_POIenhancement", "no", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 2272) = strcmp(__s1, "yes") == 0; {
    if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"enablePOIenhancement", &v20) & 0x80000000) == 0)
    }
    {
      uint64_t v16 = v20;
      BOOL v17 = !strcmp(v20, "yes") || strcmp(v16, "YES") == 0;
      *(_DWORD *)(a1 + 2272) = v17;
    }
    *(_DWORD *)(a1 + 2276) = 1;
    if ((com_mosynt_GetCfgParamVal(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), (uint64_t)"feoneword_MW_replace_spaces_with_underscores", "yes", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 2276) = strcmp(__s1, "yes") == 0; {
    return v13;
    }
  }
  return v13;
}

uint64_t fe_oneword_ObjClose(uint64_t *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62340, 2288);
  if ((result & 0x80000000) != 0) {
    return 2310021128;
  }
  if (a1)
  {
    if (a1[7]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"LINGDB");
    }
    if (a1[10]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    }
    if (a1[13]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DEPES");
    }
    if (a1[19]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"PHONMAP");
    }
    if (a1[16]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"CLMOBJECT");
    }
    oneword_posparser_Close((uint64_t)a1, v4, v5, v6, v7, v8, v9, v10);
    uint64_t v11 = a1[272];
    if (v11) {
      heap_Free(*(void **)(*a1 + 8), v11);
    }
    a1[272] = 0;
    uint64_t v12 = a1[273];
    if (v12) {
      heap_Free(*(void **)(*a1 + 8), v12);
    }
    a1[273] = 0;
    if (*((_DWORD *)a1 + 542) == 1)
    {
      crf_mde_seg_unload(*a1, a1[1], (uint64_t)(a1 + 252));
      *((_DWORD *)a1 + 542) = 0;
    }
    uint64_t v13 = a1[20];
    if (v13) {
      heap_Free(*(void **)(*a1 + 8), v13);
    }
    a1[20] = 0;
    a1[24] = 0;
    uint64_t v14 = a1[21];
    if (v14) {
      heap_Free(*(void **)(*a1 + 8), v14);
    }
    a1[21] = 0;
    a1[25] = 0;
    uint64_t v15 = a1[22];
    if (v15) {
      heap_Free(*(void **)(*a1 + 8), v15);
    }
    a1[22] = 0;
    a1[26] = 0;
    uint64_t v16 = a1[23];
    if (v16) {
      heap_Free(*(void **)(*a1 + 8), v16);
    }
    a1[23] = 0;
    a1[27] = 0;
    uint64_t v17 = a1[29];
    if (v17) {
      heap_Free(*(void **)(*a1 + 8), v17);
    }
    a1[29] = 0;
    uint64_t v18 = a1[30];
    if (v18) {
      heap_Free(*(void **)(*a1 + 8), v18);
    }
    a1[30] = 0;
    uint64_t v19 = a1[31];
    if (v19) {
      heap_Free(*(void **)(*a1 + 8), v19);
    }
    a1[31] = 0;
    uint64_t v20 = a1[32];
    if (v20) {
      heap_Free(*(void **)(*a1 + 8), v20);
    }
    a1[32] = 0;
    uint64_t v21 = a1[33];
    if (v21) {
      heap_Free(*(void **)(*a1 + 8), v21);
    }
    a1[33] = 0;
    uint64_t v22 = a1[152];
    if (v22) {
      heap_Free(*(void **)(*a1 + 8), v22);
    }
    a1[152] = 0;
    if (a1[71])
    {
      hlp_UnLoadDTData(a1);
      ssftmap_ObjClose(a1[71]);
    }
    if (a1[275]) {
      kbsymtab_UnloadData((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], a1 + 275);
    }
    if (a1[279]) {
      wgram_UnloadData((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], a1 + 279);
    }
    if (a1[280]) {
      fst_UnloadData((_WORD *)a1[2], a1[3], a1 + 280);
    }
    uint64_t v23 = a1[276];
    if (v23) {
      kblex_FinishLex((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], v23);
    }
    uint64_t v24 = a1[277];
    if (v24) {
      kblex_FinishLex((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], v24);
    }
    uint64_t v25 = a1[278];
    if (v25) {
      kblex_FinishLex((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], v25);
    }
    uint64_t v26 = a1[6];
    if (v26) {
      heap_Free(*(void **)(*a1 + 8), v26);
    }
    uint64_t v27 = a1[282];
    if (v27) {
      heap_Free(*(void **)(*a1 + 8), v27);
    }
    uint64_t v28 = a1[283];
    if (v28) {
      heap_Free(*(void **)(*a1 + 8), v28);
    }
    uint64_t v29 = a1[285];
    if (v29)
    {
      heap_Free(*(void **)(*a1 + 8), v29);
      a1[285] = 0;
    }
    heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t hlp_UnLoadDTData(uint64_t *a1)
{
  v20[100] = *MEMORY[0x263EF8340];
  uint64_t v19 = 0;
  bzero(v20, 0x320uLL);
  if ((ssftmap_IteratorOpen(a1[71], 0, 1, (uint64_t)&v19) & 0x80000000) != 0) {
    return ssftmap_Clear(a1[71]);
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unsigned __int8 v2 = 0;
  while ((ssftmap_IteratorNext(v19, &v18, &v17) & 0x80000000) == 0)
  {
    if (v2)
    {
      unint64_t v3 = 0;
      uint64_t v4 = v2;
      do
        uint64_t v5 = v20[v3++];
      while (v3 < v2 && v5 != v17);
      if (v5 == v17) {
        continue;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    ++v2;
    v20[v4] = v17;
  }
  ssftmap_IteratorClose((uint64_t)v19);
  uint64_t result = ssftmap_Clear(a1[71]);
  if (v2)
  {
    uint64_t v7 = v2;
    uint64_t v8 = v20;
    do
    {
      uint64_t v9 = *v8++;
      OOC_PlacementDeleteObject((uint64_t)(a1 + 111), *(void *)(v9 + 16));
      ssftriff_reader_ReleaseChunkData(*(void **)v9, v10, v11, v12, v13, v14, v15, v16);
      uint64_t result = (uint64_t)heap_Free(*(void **)(*a1 + 8), v9);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t fe_oneword_ObjReopen(uint64_t a1, int a2)
{
  int v26 = 0;
  int v25 = 0;
  uint64_t result = safeh_HandleCheck(a1, a2, 62340, 2288);
  if ((result & 0x80000000) != 0) {
    return 2310021128;
  }
  if (!a1) {
    return result;
  }
  uint64_t result = (*(uint64_t (**)(void, void, int *, int *))(*(void *)(a1 + 80) + 88))(*(void *)(a1 + 64), *(void *)(a1 + 72), &v26, &v25);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  BOOL v4 = v25 == 1 && v26 == 1;
  BOOL v5 = v4;
  *(_DWORD *)(a1 + 560) = v5;
  *(unsigned char *)(a1 + 556) = 1;
  uint64_t result = checkStatCOMP(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), (_DWORD *)(a1 + 2000));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = checkSkipCrosstoken(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), (_DWORD *)(a1 + 936));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = checkFeOneWordCLM(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), (_DWORD *)(a1 + 940));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = checkParaDCT(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), (_DWORD *)(a1 + 1996));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = oneword_posparser_Reopen(a1, v6, v7, v8, v9, v10, v11, v12);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v13 = *(void *)(a1 + 2176);
  if (v13) {
    heap_Free(*(void **)(*(void *)a1 + 8), v13);
  }
  *(void *)(a1 + 2176) = 0;
  uint64_t result = hlp_setKeyword(*(void *)a1, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), (uint64_t)"feoneword_latinPOStag", (char **)(a1 + 2176));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 2184);
  if (v14) {
    heap_Free(*(void **)(*(void *)a1 + 8), v14);
  }
  *(void *)(a1 + 2184) = 0;
  uint64_t result = hlp_setKeyword(*(void *)a1, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), (uint64_t)"feoneword_latin2enx", (char **)(a1 + 2184));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (*(_DWORD *)(a1 + 2168) == 1) {
    crf_mde_seg_unload(*(void *)a1, *(void *)(a1 + 8), a1 + 2016);
  }
  *(_DWORD *)(a1 + 2168) = 0;
  uint64_t result = crf_mde_seg_load(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), a1 + 2016, (_DWORD *)(a1 + 2168));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v15 = (int *)(a1 + 2192);
  int v16 = *(_DWORD *)(a1 + 2192);
  uint64_t result = com_mosynt_UseMosynt(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), (BOOL *)(a1 + 2192));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int v17 = *v15;
  if (v16 != 1)
  {
    if (v17 == 1)
    {
      int v24 = 1;
      goto LABEL_57;
    }
    goto LABEL_64;
  }
  if (v17 != 1)
  {
    if (v17) {
      goto LABEL_64;
    }
    if (*(void *)(a1 + 2200))
    {
      uint64_t result = kbsymtab_UnloadData(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 2200));
      *(void *)(a1 + 2200) = 0;
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    if (*(void *)(a1 + 2232))
    {
      uint64_t result = wgram_UnloadData(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 2232));
      *(void *)(a1 + 2232) = 0;
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    if (*(void *)(a1 + 2240))
    {
      uint64_t result = fst_UnloadData(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), (uint64_t *)(a1 + 2240));
      *(void *)(a1 + 2240) = 0;
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    uint64_t v18 = *(void *)(a1 + 2208);
    if (v18)
    {
      kblex_FinishLex(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), v18);
      *(void *)(a1 + 2208) = 0;
    }
    uint64_t v19 = *(void *)(a1 + 2216);
    if (v19)
    {
      kblex_FinishLex(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), v19);
      *(void *)(a1 + 2216) = 0;
    }
    uint64_t v20 = *(void *)(a1 + 2224);
    if (v20)
    {
      kblex_FinishLex(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), v20);
      *(void *)(a1 + 2224) = 0;
    }
    if (*v15 != 1)
    {
LABEL_64:
      strcpy((char *)(a1 + 300), "normal");
      uint64_t result = oneword_GetMdeSettings(a1);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = hlp_GetPart(a1);
        if ((result & 0x80000000) == 0)
        {
          hlp_UnLoadDTData((uint64_t *)a1);
          return hlp_common_ObjOpenReopen(a1);
        }
      }
      return result;
    }
  }
  int v24 = 1;
  if (!*(void *)(a1 + 2200)
    || (uint64_t result = kbsymtab_UnloadData(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 2200)), *(void *)(a1 + 2200) = 0, (result & 0x80000000) == 0))
  {
    if (!*(void *)(a1 + 2232)
      || (uint64_t result = wgram_UnloadData(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 2232)), *(void *)(a1 + 2232) = 0, (result & 0x80000000) == 0))
    {
      if (!*(void *)(a1 + 2240)
        || (uint64_t result = fst_UnloadData(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), (uint64_t *)(a1 + 2240)),
            *(void *)(a1 + 2240) = 0,
            (result & 0x80000000) == 0))
      {
        uint64_t v21 = *(void *)(a1 + 2208);
        if (v21)
        {
          kblex_FinishLex(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), v21);
          *(void *)(a1 + 2208) = 0;
        }
        uint64_t v22 = *(void *)(a1 + 2216);
        if (v22)
        {
          kblex_FinishLex(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), v22);
          *(void *)(a1 + 2216) = 0;
        }
        uint64_t v23 = *(void *)(a1 + 2224);
        if (v23)
        {
          kblex_FinishLex(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), v23);
          *(void *)(a1 + 2224) = 0;
        }
LABEL_57:
        uint64_t result = hlp_GetParams((uint64_t *)a1, (_DWORD *)(a1 + 2248), &v24);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = wgram_LoadData(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (void *)(a1 + 2232));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = kbsymtab_LoadData(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 2200), v24);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = fst_LoadData(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), (uint64_t *)(a1 + 2240));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = kblex_InitLex(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), a1 + 1228, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), 0, (void *)(a1 + 2208));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = kblex_InitLex(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), a1 + 1228, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), 1u, (void *)(a1 + 2216));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = kblex_InitLex(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), a1 + 1228, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), 2u, (void *)(a1 + 2224));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        goto LABEL_64;
      }
    }
  }
  return result;
}

uint64_t fe_oneword_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62340, 2288);
  if ((result & 0x80000000) != 0) {
    return 2310021128;
  }
  if (*(_DWORD *)(a1 + 2004))
  {
    return oneword_posparser_Start(a1);
  }
  return result;
}

uint64_t fe_oneword_MosyntGetMosyntParamVal(void *a1, uint64_t a2, char *__src, char *__dst, int a5)
{
  int v16 = 0;
  __int16 v15 = -1;
  unsigned __int8 v14 = 0;
  int v12 = 0;
  strcpy(__dst, __src);
  uint64_t TermSubstr = (*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t **, __int16 *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "fecfg", a2, &v16, &v15, &v14);
  if ((TermSubstr & 0x80000000) == 0)
  {
    if (v15)
    {
      int v13 = 0;
      uint64_t TermSubstr = mosynt_GetTermSubstr(*v16, &v13, v14, &v12, __dst, a5);
      if ((TermSubstr & 0x80000000) == 0 && !v12) {
        strcpy(__dst, __src);
      }
    }
  }
  return TermSubstr;
}

const char *hlp_FindWordSep(const char *a1, unsigned int a2, unsigned int a3)
{
  size_t v6 = strlen(a1);
  unint64_t v7 = a3;
  if (v6 < a3) {
    unint64_t v7 = v6;
  }
  if (v7 <= a2) {
    return 0;
  }
  unint64_t v8 = v7 - a2;
  uint64_t result = &a1[a2];
  uint64_t v10 = result;
  while (1)
  {
    int v12 = *(unsigned __int8 *)v10++;
    int v11 = v12;
    if (v12 == 95 || v11 == 32) {
      break;
    }
    uint64_t result = v10;
    if (!--v8) {
      return 0;
    }
  }
  return result;
}

uint64_t hlp_ShouldAddAsVariant(const char *a1, char *a2, char *__s2)
{
  uint64_t result = strcmp(a1, __s2);
  if (result)
  {
    size_t v6 = a2;
    while (1)
    {
      unint64_t v7 = strstr(v6, __s2);
      if (!v7) {
        break;
      }
      unint64_t v8 = v7;
      if (v7 == a2 || *(v7 - 1) != 18)
      {
        size_t v10 = strlen(__s2);
        if (v6[v10]) {
          BOOL v11 = v6[v10] == 18;
        }
        else {
          BOOL v11 = 1;
        }
        int v9 = !v11;
      }
      else
      {
        int v9 = 1;
      }
      size_t v6 = &v8[strlen(__s2)];
      if (!v9) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t fe_oneword_SplitMW(void *a1, uint64_t a2, uint64_t a3)
{
  int v87 = 0;
  unsigned __int16 v86 = 0;
  uint64_t v85 = 0;
  int v84 = 0;
  uint64_t v82 = 0;
  v83 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  int v78 = 0;
  int v79 = 0;
  __int16 v77 = 0;
  unsigned __int8 v76 = 0;
  unint64_t v75 = 0;
  size_t v73 = 0;
  v74 = 0;
  int v72 = 0;
  __int16 v71 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a2, a3, 1, 0, (char *)&v87 + 2);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, const char **, char *))(a1[7] + 176))(a2, a3, HIWORD(v87), 0, &v80, (char *)&v84 + 2);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a2, a3, 2, HIWORD(v87), &v87);
  if ((v7 & 0x80000000) == 0)
  {
    unsigned __int16 v8 = v87;
    if ((_WORD)v87)
    {
      unsigned int v65 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unsigned __int16 v11 = 0;
      while (1)
      {
        uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, v8, 0, 1, (char *)&v85 + 4, (char *)&v84 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
        {
LABEL_117:
          uint64_t v7 = WordDctBeforOrAfter;
LABEL_118:
          if (!v10) {
            goto LABEL_120;
          }
          goto LABEL_119;
        }
        if (HIDWORD(v85) == 4)
        {
          if (v10) {
            *(unsigned char *)uint64_t v10 = 0;
          }
          if (v9) {
            *(unsigned char *)uint64_t v9 = 0;
          }
          uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v87, 3, &v83, (char *)&v84 + 2);
          if ((WordDctBeforOrAfter & 0x80000000) != 0) {
            goto LABEL_117;
          }
          PhonWordSep = oneword_FindPhonWordSep(v83, (char *)&v76);
          if (PhonWordSep)
          {
            unsigned __int8 v14 = PhonWordSep;
            uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v87, 1, 1, (char *)&v79 + 2, (char *)&v84 + 2);
            if ((WordDctBeforOrAfter & 0x80000000) != 0) {
              goto LABEL_117;
            }
            uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v87, 2, 1, (char *)&v78 + 2, (char *)&v84 + 2);
            if ((WordDctBeforOrAfter & 0x80000000) != 0) {
              goto LABEL_117;
            }
            __int16 v15 = (__int16)v80;
            __int16 v16 = HIWORD(v78);
            WordSep = hlp_FindWordSep(v80, HIWORD(v79), HIWORD(v78));
            if (WordSep) {
              break;
            }
          }
        }
LABEL_112:
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 120))(a2, a3, (unsigned __int16)v87, &v87);
        if ((v7 & 0x80000000) == 0)
        {
          unsigned __int16 v8 = v87;
          if ((_WORD)v87) {
            continue;
          }
        }
        goto LABEL_118;
      }
      unsigned int __s = 0;
      LOWORD(v78) = v16;
      HIWORD(v78) = (_WORD)WordSep - v15;
      uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[7] + 160))(a2, a3, (unsigned __int16)v87, 2, 1, (char *)&v78 + 2, &v84);
      if ((WordDctBeforOrAfter & 0x80000000) != 0) {
        goto LABEL_117;
      }
      __int16 v77 = HIWORD(v78) + 1;
      uint64_t v68 = (uint64_t)v14;
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1[7] + 184))(a2, a3, (unsigned __int16)v87, 11, &v71) & 0x80000000) != 0|| v71 != 1|| ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v87, 11, &__s, (char *)&v84 + 2) & 0x80000000) != 0)
      {
LABEL_67:
        *unsigned __int8 v14 = 0;
        uint64_t v42 = v76;
        uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v87, 5, &v81, (char *)&v84 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0) {
          goto LABEL_117;
        }
        uint64_t v43 = v81;
        int v44 = strchr(v81, 92);
        if (v44)
        {
          *int v44 = 0;
          uint64_t v43 = v44 + 1;
        }
        uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v87, 6, &v82, (char *)&v84 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0) {
          goto LABEL_117;
        }
        uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v87, 9, &v74, (char *)&v84 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0) {
          goto LABEL_117;
        }
        uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v87, 4, &v73, (char *)&v84 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0) {
          goto LABEL_117;
        }
        uint64_t WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v87, 7, 1, (char *)&v72 + 2, (char *)&v84 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0) {
          goto LABEL_117;
        }
        *(void *)uint64_t v67 = v10;
        BOOL v45 = (*(int (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1[7] + 184))(a2, a3, (unsigned __int16)v87, 17, &v71) >= 0&& v71 == 1;
        int v46 = v45;
        if (v45)
        {
          uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v87, 17, 1, &v72, (char *)&v84 + 2);
          if ((v47 & 0x80000000) != 0) {
            goto LABEL_122;
          }
        }
        unint64_t v75 = 0;
        BOOL v48 = (*(int (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1[7] + 184))(a2, a3, (unsigned __int16)v87, 12, &v71) >= 0&& v71 == 1;
        BOOL v49 = v48;
        if (v48)
        {
          uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v87, 12, &v75, (char *)&v84 + 2);
          if ((v47 & 0x80000000) != 0) {
            goto LABEL_122;
          }
        }
        uint64_t v50 = (const char *)(v68 + v42);
        unsigned __int16 v51 = v87;
        unsigned __int16 v86 = v87;
        if ((_WORD)v87)
        {
          uint64_t v52 = &v72;
          if (!v46) {
            uint64_t v52 = 0;
          }
          uint64_t v69 = (uint64_t)v52;
          while (1)
          {
            unsigned __int16 v11 = v51;
            uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v51, 1, 1, &v79, (char *)&v84 + 2);
            if ((v47 & 0x80000000) != 0) {
              break;
            }
            uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t *, char *))(a1[7] + 168))(a2, a3, v86, 0, 1, &v85, (char *)&v84 + 2);
            if ((v47 & 0x80000000) != 0) {
              break;
            }
            if (HIWORD(v78) + 1 < (unsigned __int16)v79
              || (unsigned __int16)v79 >= HIWORD(v78) && v85 == 16)
            {
              uint64_t v55 = v75;
              if (!v49) {
                uint64_t v55 = 0;
              }
              uint64_t WordDctBeforOrAfter = hlp_CreateWordDctBeforOrAfter((uint64_t)a1, a2, a3, 1, v86, (uint64_t)&v77, (uint64_t)&v78, v50, (char *)v9, v43, v82, v74, v73, (uint64_t)&v72 + 2, v69, v55);
              goto LABEL_111;
            }
            uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 120))(a2, a3, v86, &v86);
            if ((v47 & 0x80000000) != 0) {
              break;
            }
            unsigned __int16 v51 = v86;
            if (!v86) {
              goto LABEL_103;
            }
          }
LABEL_122:
          uint64_t v7 = v47;
          uint64_t v10 = *(void *)v67;
          if (!*(void *)v67)
          {
LABEL_120:
            if (v9) {
              heap_Free(*(void **)(*a1 + 8), v9);
            }
            return v7;
          }
LABEL_119:
          heap_Free(*(void **)(*a1 + 8), v10);
          goto LABEL_120;
        }
LABEL_103:
        uint64_t v53 = &v72;
        if (!v46) {
          uint64_t v53 = 0;
        }
        uint64_t v54 = v75;
        if (!v49) {
          uint64_t v54 = 0;
        }
        uint64_t WordDctBeforOrAfter = hlp_CreateWordDctBeforOrAfter((uint64_t)a1, a2, a3, 0, v11, (uint64_t)&v77, (uint64_t)&v78, v50, (char *)v9, v43, v82, v74, v73, (uint64_t)&v72 + 2, (uint64_t)v53, v54);
LABEL_111:
        uint64_t v10 = *(void *)v67;
        if ((WordDctBeforOrAfter & 0x80000000) != 0) {
          goto LABEL_117;
        }
        goto LABEL_112;
      }
      if (v10 | v9)
      {
        uint64_t v21 = __s;
        unint64_t v22 = strlen(__s) + 1;
        unsigned int v23 = v65;
        if (v22 <= v65) {
          goto LABEL_26;
        }
        uint64_t v10 = heap_Realloc(*(uint64_t **)(*a1 + 8), v10, v22);
        size_t v24 = strlen(__s);
        uint64_t v20 = heap_Realloc(*(uint64_t **)(*a1 + 8), v9, v24 + 1);
      }
      else
      {
        size_t v18 = strlen(__s);
        uint64_t v10 = heap_Alloc(*(void *)(*a1 + 8), v18 + 1);
        uint64_t v19 = strlen(__s) + 1;
        uint64_t v20 = heap_Alloc(*(void *)(*a1 + 8), v19);
      }
      uint64_t v9 = v20;
      uint64_t v21 = __s;
      unsigned int v23 = strlen(__s) + 1;
LABEL_26:
      uint64_t v7 = 2310021130;
      if (!v10 || !v9) {
        goto LABEL_118;
      }
      int v25 = v83;
      unsigned int v65 = v23;
      if (v83 && v21 && strlen(v21) + 1 <= v23)
      {
        v88[0] = 0;
        *(unsigned char *)uint64_t v10 = 0;
        *(unsigned char *)uint64_t v9 = 0;
        size_t v26 = strlen(v25);
        int v27 = oneword_CountPhoneticWords(v25, &v25[v26]);
        uint64_t v28 = oneword_FindPhonWordSep(v25, v88);
        uint64_t v66 = (char *)v10;
        uint64_t v63 = v25;
        if (v28)
        {
          int v59 = &v28[v88[0]];
        }
        else
        {
          int v59 = 0;
          uint64_t v28 = &v25[strlen(v25)];
        }
        char v57 = *v28;
        uint64_t v58 = v28;
        char *v28 = 0;
        size_t v29 = strlen(v21);
        if (v29)
        {
          size_t v30 = v29;
          BOOL v32 = v27 == 2 && v59 != 0;
          BOOL v60 = v32;
          int v61 = v27;
          __s1 = (char *)v9;
          do
          {
            uint64_t v33 = strchr(v21, 18);
            if (v33) {
              uint64_t v34 = v33;
            }
            else {
              uint64_t v34 = &v21[v30];
            }
            int v35 = oneword_CountPhoneticWords(v21, v34);
            int v36 = *v34;
            if (v27 == v35)
            {
              *uint64_t v34 = 0;
              uint64_t v37 = oneword_FindPhonWordSep(v21, v88);
              if (v37)
              {
                uint64_t v38 = v37;
                __s2 = &v37[v88[0]];
              }
              else
              {
                v88[0] = 0;
                __s2 = 0;
                uint64_t v38 = &v21[strlen(v21)];
              }
              char v39 = *v38;
              *uint64_t v38 = 0;
              if (hlp_ShouldAddAsVariant(v63, v66, v21))
              {
                if (*v66) {
                  *(_WORD *)&v66[strlen(v66)] = 18;
                }
                strcat(v66, v21);
              }
              *uint64_t v38 = v39;
              uint64_t v40 = v88[0];
              uint64_t v9 = (uint64_t)__s1;
              if (v38[v88[0]])
              {
                BOOL v41 = v60;
                if (!__s2) {
                  BOOL v41 = 0;
                }
                if (!v41 || hlp_ShouldAddAsVariant(v59, __s1, __s2))
                {
                  if (*__s1)
                  {
                    *(_WORD *)&__s1[strlen(__s1)] = 18;
                    uint64_t v40 = v88[0];
                  }
                  strcat(__s1, &v38[v40]);
                }
              }
              *uint64_t v34 = v36;
              unsigned __int8 v14 = (unsigned char *)v68;
              int v27 = v61;
            }
            if (!v36) {
              break;
            }
            uint64_t v21 = v34 + 1;
            size_t v30 = strlen(v34 + 1);
          }
          while (v30);
        }
        *uint64_t v58 = v57;
        uint64_t v10 = (uint64_t)v66;
      }
      else
      {
        *(unsigned char *)uint64_t v10 = 0;
        *(unsigned char *)uint64_t v9 = 0;
      }
      strcpy(__s, (const char *)v10);
      goto LABEL_67;
    }
  }
  return v7;
}

uint64_t hlp_CreateWordDctBeforOrAfter(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, const char *a8, char *__s, char *a10, char *a11, char *a12, char *a13, uint64_t a14, uint64_t a15, const char *a16)
{
  int v31 = 0;
  uint64_t v22 = 88;
  if (!a4) {
    uint64_t v22 = 80;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)(a1 + 56) + v22))(a2, a3, a5, &v31);
  if ((result & 0x80000000) == 0)
  {
    int v32 = 4;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56)
                                                                                                 + 160))(a2, a3, (unsigned __int16)v31, 0, 1, &v32, (char *)&v31 + 2);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 1, 1, a6, (char *)&v31 + 2);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 2, 1, a7, (char *)&v31 + 2);
        if ((result & 0x80000000) == 0)
        {
          __int16 v24 = strlen(a8);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 3, (unsigned __int16)(v24 + 1), a8, (char *)&v31 + 2);
          if ((result & 0x80000000) == 0)
          {
            if (!__s
              || (size_t v25 = strlen(__s)) == 0
              || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 11, (unsigned __int16)(v25 + 1), __s, (char *)&v31 + 2), (result & 0x80000000) == 0))
            {
              __int16 v26 = strlen(a10);
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 5, (unsigned __int16)(v26 + 1), a10, (char *)&v31 + 2);
              if ((result & 0x80000000) == 0)
              {
                __int16 v27 = strlen(a11);
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 6, (unsigned __int16)(v27 + 1), a11, (char *)&v31 + 2);
                if ((result & 0x80000000) == 0)
                {
                  __int16 v28 = strlen(a12);
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 9, (unsigned __int16)(v28 + 1), a12, (char *)&v31 + 2);
                  if ((result & 0x80000000) == 0)
                  {
                    __int16 v29 = strlen(a13);
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 4, (unsigned __int16)(v29 + 1), a13, (char *)&v31 + 2);
                    if ((result & 0x80000000) == 0)
                    {
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 7, 1, a14, (char *)&v31 + 2);
                      if ((result & 0x80000000) == 0)
                      {
                        if (!a15)
                        {
                          if (!a16) {
                            return result;
                          }
                          goto LABEL_19;
                        }
                        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 17, 1, a15, (char *)&v31 + 2);
                        if (a16 && (result & 0x80000000) == 0)
                        {
LABEL_19:
                          __int16 v30 = strlen(a16);
                          return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v31, 12, (unsigned __int16)(v30 + 1), a16, (char *)&v31 + 2);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_oneword_MosyntCleanup()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v46 = *MEMORY[0x263EF8340];
  unsigned __int16 v37 = 0;
  unsigned __int16 v36 = 0;
  int v34 = 0;
  int v35 = 0;
  int v33 = 0;
  __s1 = 0;
  unsigned int __s = 0;
  __int16 v29 = 0;
  __int16 v30 = 0;
  uint64_t v28 = 0;
  int v27 = 0;
  __int16 v26 = 0;
  uint64_t v25 = 0;
  int v24 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(*(void *)v0 + 40), (uint64_t)"langcode", &v28);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = fe_oneword_MosyntGetMosyntParamVal((void *)v5, (uint64_t)"mosynt_defaultpos_stressed", "XN()", __dst, 200);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = fe_oneword_MosyntGetMosyntParamVal((void *)v5, (uint64_t)"mosynt_defaultpos_unstressed", "XX()", v39, 200);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = fe_oneword_MosyntGetMosyntParamVal((void *)v5, (uint64_t)"mosynt_usepkupos", "no", v38, 10);
        if ((result & 0x80000000) == 0)
        {
          BOOL v7 = *(_DWORD *)v38 != 7562617;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(v5 + 56) + 104))(v4, v2, 1, 0, &v37);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, char *))(*(void *)(v5 + 56) + 176))(v4, v2, v37, 0, &v25, (char *)&v34 + 2);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(v5 + 56) + 104))(v4, v2, 2, v37, &v36);
              if ((result & 0x80000000) == 0)
              {
                unsigned __int16 v8 = v36;
                if (v36)
                {
                  unsigned __int16 v22 = 0;
                  unsigned __int16 v23 = 0;
                  while (1)
                  {
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(v5 + 56) + 168))(v4, v2, v8, 0, 1, &v35, (char *)&v34 + 2);
                    if ((result & 0x80000000) != 0) {
                      break;
                    }
                    unsigned int v9 = v35;
                    if (v35 == 8)
                    {
                      int v35 = 9;
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(v5 + 56) + 160))(v4, v2, v36, 0, 1, &v35, &v34);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      unsigned int v9 = v35;
                    }
                    BOOL v10 = v9 > 0xA;
                    int v11 = (1 << v9) & 0x610;
                    if (v10 || v11 == 0)
                    {
                      BOOL v15 = 0;
                    }
                    else
                    {
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(v5 + 56) + 176))(v4, v2, v36, 3, &__s, (char *)&v34 + 2);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = mosynt_SubstAllSubstrOcc(__s, "Â¡", "~", v45, 5000);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = mosynt_SubstAllSubstrOcc(v45, "[SVOX]", &byte_20D5A22AE, __s, 5000);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      __int16 v13 = strlen(__s);
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(v5 + 56) + 160))(v4, v2, v36, 3, (unsigned __int16)(v13 + 1), __s, &v34);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(v5 + 56) + 168))(v4, v2, v36, 1, 1, (char *)&v27 + 2, (char *)&v34 + 2);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(v5 + 56) + 168))(v4, v2, v36, 2, 1, &v27, (char *)&v34 + 2);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(v5 + 56) + 176))(v4, v2, v36, 5, &v30, (char *)&v34 + 2);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(v5 + 56) + 176))(v4, v2, v36, 6, &__s1, (char *)&v34 + 2);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      if (v35 == 9)
                      {
                        unsigned __int8 v14 = __s1;
                        if (!strcmp(__s1, "Y"))
                        {
                          unsigned __int16 v22 = v27;
                          unsigned __int16 v23 = HIWORD(v27);
                        }
                        else if (strcmp(v14, "X") {
                               && (HIWORD(v27) < v23 || (unsigned __int16)v27 < v22))
                        }
                        {
                          HIWORD(v27) = v23;
                          LOWORD(v27) = v22;
                        }
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(v5 + 56) + 176))(v4, v2, v36, 9, &v29, (char *)&v34 + 2);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      if (!strcmp(v29, "normal"))
                      {
                        __strcpy_chk();
                        __int16 v16 = strlen(v41);
                        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(v5 + 56) + 160))(v4, v2, v36, 9, (unsigned __int16)(v16 + 1), v41, &v34);
                        if ((result & 0x80000000) != 0) {
                          return result;
                        }
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(v5 + 56) + 160))(v4, v2, v36, 1, 1, (char *)&v27 + 2, (char *)&v34 + 2);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(v5 + 56) + 160))(v4, v2, v36, 2, 1, &v27, (char *)&v34 + 2);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      int v33 = 0;
                      uint64_t result = mosynt_GetTermSubstr((uint64_t)__s1, &v33, 0x21u, &v24, v42, 5000);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = mosynt_GetTermSubstr((uint64_t)__s1, &v33, 0x21u, &v24, v44, 5000);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      BOOL v15 = strcmp(__s1, "Y") == 0;
                      __int16 v26 = 0;
                      if (!v44[0])
                      {
                        __int16 v26 = 1;
                        int v17 = v30;
                        if (!strcmp(v30, "*")
                          || (com_mosynt_GetBacktrans2POS(*(void *)(v5 + 64), *(void *)(v5 + 72), *(void *)(v5 + 80), v17, 0x1388u, v44), !v44[0]))
                        {
                          size_t v18 = __s;
                          if (!strchr(__s, 39)) {
                            strstr(v18, "'2");
                          }
                          __strcpy_chk();
                        }
                      }
                      if (!v42[0]) {
                        strcpy(v42, "*");
                      }
                      if (v44[0] - 48 > 9)
                      {
                        __strcpy_chk();
                      }
                      else
                      {
                        uint64_t result = mosynt_NumPOSListToPOSList(*(void *)(v5 + 48), *(uint64_t **)(v5 + 2200), v44, (uint64_t)v43, 5000);
                        if ((result & 0x80000000) != 0) {
                          return result;
                        }
                      }
                      if (v7)
                      {
                        __int16 v19 = strlen(v43);
                        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(v5 + 56) + 160))(v4, v2, v36, 5, (unsigned __int16)(v19 + 1), v43, &v34);
                        if ((result & 0x80000000) != 0) {
                          return result;
                        }
                      }
                      __int16 v20 = strlen(v42);
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(v5 + 56) + 160))(v4, v2, v36, 6, (unsigned __int16)(v20 + 1), v42, &v34);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, char *))(*(void *)(v5 + 56) + 160))(v4, v2, v36, 17, 1, &v26, (char *)&v34 + 2);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                    }
                    uint64_t v21 = v36;
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(v5 + 56) + 120))(v4, v2, v36, &v36);
                    if ((result & 0x80000000) == 0)
                    {
                      if (!v15
                        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 56) + 192))(v4, v2, v21), (result & 0x80000000) == 0))
                      {
                        unsigned __int16 v8 = v36;
                        if (v36) {
                          continue;
                        }
                      }
                    }
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_oneword_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v317 = *MEMORY[0x263EF8340];
  v297 = 0;
  unsigned int __s = 0;
  uint64_t v9 = 2310021130;
  unsigned __int16 v295 = 0;
  int v292 = 0;
  __src = 0;
  v290 = 0;
  int v287 = 0;
  __int16 v284 = 0;
  __int16 v282 = 0;
  int v281 = 1601400688;
  *(_WORD *)&__c[1] = -1;
  v278 = 0;
  v279 = 0;
  if ((safeh_HandleCheck(a1, a2, 62340, 2288) & 0x80000000) != 0) {
    return 2310021128;
  }
  int v296 = 0;
  unsigned __int16 v294 = 0;
  int v293 = 0;
  int v291 = 0;
  uint64_t v288 = 0;
  int v286 = 0;
  uint64_t v285 = 0;
  v283 = 0;
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  v277 = 0;
  *a5 = 1;
  BOOL v10 = (paramc_ParamGet(*(void *)(*(void *)a1 + 40), (uint64_t)"clmvariants", &v277, 0) & 0x80000000) == 0
     && LH_stricmp(v277, "no") != 0;
  *(_DWORD *)(a1 + 844) = v10;
  BOOL v12 = (paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"clcmlextramaintrans", &v277) & 0x80000000) == 0
     && LH_stricmp(v277, "no")
     && *(_DWORD *)(a1 + 852) != 0;
  *(_DWORD *)(a1 + 848) = v12;
  __s1[0] = 0;
  LODWORD(v300[0]) = 0;
  if (((*(uint64_t (**)(void, void, char **))(*(void *)(a1 + 128) + 96))(*(void *)(a1 + 112), *(void *)(a1 + 120), v300) & 0x80000000) != 0|| (BOOL v13 = 0, !LODWORD(v300[0])))
  {
    int Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"clm", __s1);
    BOOL v15 = 1;
    if ((Str & 0x80000000) == 0 && __s1[0]) {
      BOOL v15 = strcmp(__s1[0], "yes") == 0;
    }
    BOOL v13 = v15 && *(_DWORD *)(a1 + 1204) == 1 || *(_DWORD *)(a1 + 940) == 1;
  }
  if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"clcpppipelinemode", &v277) & 0x80000000) == 0
    && v277
    && *v277)
  {
    fe_oneword_ResetCarryOverSentenceParams(a1);
  }
  int v16 = *(unsigned __int8 *)(a1 + 1201);
  *(unsigned char *)(a1 + 1201) = 1;
  if ((paramc_ParamGet(*(void *)(*(void *)a1 + 40), (uint64_t)"numberoutputtranscriptions", &v277, 0) & 0x80000000) == 0
    && v277)
  {
    unsigned __int8 v17 = atoi(v277);
    if (v16 == v17)
    {
      unsigned int v18 = v17;
      *(unsigned char *)(a1 + 1201) = v16;
      unsigned int v19 = *(unsigned __int8 *)(a1 + 1200);
    }
    else
    {
      *(unsigned char *)(a1 + 1201) = v17;
      hlp_UnLoadDTData((uint64_t *)a1);
      uint64_t DTData = hlp_LoadDTData(a1);
      if ((DTData & 0x80000000) != 0) {
        return DTData;
      }
      unsigned int v18 = *(unsigned __int8 *)(a1 + 1200);
      unsigned int v19 = *(unsigned __int8 *)(a1 + 1201);
    }
    if (v18 >= v19) {
      LOBYTE(v18) = v19;
    }
    *(unsigned char *)(a1 + 1200) = v18;
  }
  BOOL v21 = (paramc_ParamGet(*(void *)(*(void *)a1 + 40), (uint64_t)"norichtranscription", &v277, 0) & 0x80000000) == 0
     && LH_stricmp(v277, "false") != 0;
  *(_DWORD *)(a1 + 840) = v21;
  int v22 = paramc_ParamGet(*(void *)(*(void *)a1 + 40), (uint64_t)"fecfg", &v277, 0);
  if (*(_DWORD *)(a1 + 840)
    && (v22 & 0x80000000) == 0
    && LH_stricmp(v277, "mpthree")
    && LH_stricmp(v277, "mpthreeml")
    && LH_stricmp(v277, "vadvde"))
  {
    *(_DWORD *)(a1 + 840) = 0;
  }
  if (ssftmap_GetSize(*(void *)(a1 + 568)))
  {
    __s1[0] = 0;
    v300[0] = 0;
    v299[0] = 0;
    uint64_t v275 = 0;
    v276 = 0;
    v274 = 0;
    if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"decisiontreescorepruning", __s1) & 0x80000000) != 0) {
      __s1[0] = 0;
    }
    if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"decisiontreehistogrampruning", v300) & 0x80000000) != 0) {
      v300[0] = 0;
    }
    if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"decisiontreevariantpruning", v299) & 0x80000000) != 0) {
      v299[0] = 0;
    }
    if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"numberoutputtranscriptions", &v276) & 0x80000000) != 0) {
      v276 = 0;
    }
    if ((ssftmap_IteratorOpen(*(void *)(a1 + 568), 0, 1, (uint64_t)&v274) & 0x80000000) == 0)
    {
      uint64_t v272 = 0;
      uint64_t v273 = 0;
      while ((ssftmap_IteratorNext(v274, &v273, &v272) & 0x80000000) == 0)
      {
        if (!__s1[0]
          || (LODWORD(v275) = 1,
              HIDWORD(v275) = atoi(__s1[0]),
              int v23 = LexDT_SetParamList(*(void *)(v272 + 16), (uint64_t)&v275, 1u),
              uint64_t v24 = LH_ERROR_to_VERROR(v23),
              (v24 & 0x80000000) == 0))
        {
          if (!v300[0]
            || (LODWORD(v275) = 2,
                HIDWORD(v275) = atoi(v300[0]),
                int v29 = LexDT_SetParamList(*(void *)(v272 + 16), (uint64_t)&v275, 1u),
                uint64_t v24 = LH_ERROR_to_VERROR(v29),
                (v24 & 0x80000000) == 0))
          {
            if (!v299[0]
              || (LODWORD(v275) = 5,
                  HIDWORD(v275) = atoi(v299[0]),
                  int v30 = LexDT_SetParamList(*(void *)(v272 + 16), (uint64_t)&v275, 1u),
                  uint64_t v24 = LH_ERROR_to_VERROR(v30),
                  (v24 & 0x80000000) == 0))
            {
              if (!v276) {
                continue;
              }
              LODWORD(v275) = 0;
              HIDWORD(v275) = atoi(v276);
              int v31 = LexDT_SetParamList(*(void *)(v272 + 16), (uint64_t)&v275, 1u);
              uint64_t v24 = LH_ERROR_to_VERROR(v31);
              if ((v24 & 0x80000000) == 0) {
                continue;
              }
            }
          }
        }
        uint64_t v11 = v24;
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v25, v26, v27, v28, v247);
        return v11;
      }
      ssftmap_IteratorClose((uint64_t)v274);
    }
  }
  if (*(_DWORD *)(a1 + 2004))
  {
    uint64_t DTData = oneword_posparser_Process((void *)a1, a3, a4);
    if ((DTData & 0x80000000) != 0) {
      return DTData;
    }
  }
  uint64_t v32 = a1 + 56;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a3, a4, 1, 0, (char *)&v296 + 2);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)v32 + 184))(a3, a4, HIWORD(v296), 0, &v284) & 0x80000000) != 0)return v11; {
  if (v284 != 1)
  }
    return v11;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, HIWORD(v296), 0, &__s, &v294);
  if ((v11 & 0x80000000) != 0 || v294 < 2u) {
    return v11;
  }
  int v33 = strlen(__s);
  int v34 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), (v33 + 1));
  v297 = v34;
  if (!v34)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v35, v36, v37, v38, v247);
    return 2310021130;
  }
  strcpy(v34, __s);
  long long v315 = 0u;
  long long v316 = 0u;
  long long v313 = 0u;
  long long v314 = 0u;
  long long v311 = 0u;
  long long v312 = 0u;
  long long v309 = 0u;
  long long v310 = 0u;
  long long v307 = 0u;
  long long v308 = 0u;
  long long v305 = 0u;
  long long v306 = 0u;
  long long v303 = 0u;
  long long v304 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v302 = 0u;
  HIWORD(v292) = 128;
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(*(void *)v32 + 176))(a3, a4, HIWORD(v296), 1, &v288, (char *)&v287 + 2);
  if ((v39 & 0x80000000) != 0) {
    goto LABEL_95;
  }
  HIWORD(v292) = 0;
  unsigned __int16 v40 = HIWORD(v287);
  if (HIWORD(v287))
  {
    unsigned __int16 v41 = 0;
    do
    {
      if (*(_DWORD *)(v288 + 32 * v41) == 34)
      {
        uint64_t v42 = strchr(*(char **)(v288 + 32 * v41 + 24), 20);
        if (v42)
        {
          *uint64_t v42 = 0;
          unsigned __int16 v41 = HIWORD(v292);
          unsigned __int16 v40 = HIWORD(v287);
        }
      }
      HIWORD(v292) = ++v41;
    }
    while (v41 < v40);
    uint64_t v43 = v288;
    int v44 = *(_DWORD *)(v288 + 12);
    *(_WORD *)(a1 + 224) = 0;
    __s2 = (char *)(a1 + 224);
    uint64_t v45 = (unsigned __int16)v287;
    if ((unsigned __int16)v287 < v40)
    {
      uint64_t v46 = (int *)(v43 + 32 * (unsigned __int16)v287 + 12);
      do
      {
        int v47 = *v46;
        v46 += 8;
        if (v47 != v44) {
          break;
        }
        LOWORD(v287) = ++v45;
      }
      while (v40 != v45);
    }
  }
  else
  {
    int v44 = *(_DWORD *)(v288 + 12);
    *(_WORD *)(a1 + 224) = 0;
    __s2 = (char *)(a1 + 224);
  }
  uint64_t v39 = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 104) + 112))(*(void *)(a1 + 88), *(void *)(a1 + 96), &v285, 0);
  if ((v39 & 0x80000000) != 0
    || (*(_DWORD *)(a1 + 932) = 0,
        uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a3, a4, 3, HIWORD(v296), &v296), (v39 & 0x80000000) != 0)|| (*(_WORD *)&__c[1] = -1, uint64_t v39 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "normal", &__c[3], &__c[1], __c), (v39 & 0x80000000) != 0))
  {
LABEL_95:
    uint64_t v55 = 0;
    unsigned int v56 = 0;
    uint64_t v9 = v39;
    goto LABEL_96;
  }
  strcpy((char *)v300, "normal");
  if (*(_WORD *)&__c[1])
  {
    BOOL v48 = strchr(**(char ***)&__c[3], __c[0]);
    if (v48) {
      *BOOL v48 = 0;
    }
    __strcpy_chk();
  }
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    uint64_t v49 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 352);
    if (!v49)
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v50, v51, v52, v53, v247);
      uint64_t v55 = 0;
      unsigned int v56 = 0;
      goto LABEL_96;
    }
    int v259 = v44;
    uint64_t v54 = v288;
    *(_DWORD *)(v49 + 12) = *(_DWORD *)(v288 + 12);
    *(_DWORD *)uint64_t v49 = 0x4000;
    *(_DWORD *)(v49 + 44) = *(_DWORD *)(v54 + 12);
    *(_DWORD *)(v49 + 32) = 36;
    *(void *)(v49 + 56) = "normal";
    int __dst = 10;
    uint64_t v267 = v49;
    unsigned __int16 v261 = 2;
  }
  else
  {
    int v259 = v44;
    int __dst = 0;
    uint64_t v267 = 0;
    unsigned __int16 v261 = 0;
  }
  uint64_t v57 = 78;
  int v58 = 1;
  while ((_WORD)v296)
  {
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    int v60 = v286;
    if ((v286 - 5) <= 2)
    {
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 1, 1, &v292, &v294);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 2, 1, &v291, &v294);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 4, &v290, &v294);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      if (!strcmp(v290, "phon"))
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 3, &__src, &v294);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
      }
      int v61 = v286;
      if (v286 == 5)
      {
        __int16 v284 = 0;
        v279 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)v32 + 184))(a3, a4, (unsigned __int16)v296, 6, &v284) & 0x80000000) == 0&& v284 == 1)
        {
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 6, &v279, &v294);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
        }
        int v61 = v286;
      }
      if (v61 == 6)
      {
        __int16 v284 = 0;
        v278 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)v32 + 184))(a3, a4, (unsigned __int16)v296, 7, &v284) & 0x80000000) == 0&& v284 == 1)
        {
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 7, &v278, &v294);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
        }
      }
      uint64_t v62 = *(void *)v32;
      if (v58)
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(v62 + 72))(a3, a4, 2, HIWORD(v296), &v295);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
      }
      else
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(v62 + 80))(a3, a4, v295, &v295);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 0, 1, &v286, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 1, 1, &v292, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 2, 1, &v291, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      __int16 v63 = strlen(v290);
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, v295, 4, (unsigned __int16)(v63 + 1), v290, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      if (!strcmp(v290, "phon"))
      {
        if (__src)
        {
          __int16 v64 = strlen(__src);
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, v295, 3, (unsigned __int16)(v64 + 1), __src, (char *)&v293 + 2);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
        }
      }
      int v60 = v286;
      if (v286 == 5 && v279)
      {
        __int16 v65 = strlen(v279);
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, v295, 9, (unsigned __int16)(v65 + 1), v279, (char *)&v293 + 2);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        int v60 = v286;
      }
      int v58 = 0;
      if (v60 == 6 && v278)
      {
        __int16 v66 = strlen(v278);
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, v295, 19, (unsigned __int16)(v66 + 1), v278, (char *)&v293 + 2);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        int v58 = 0;
        int v60 = v286;
      }
    }
    uint64_t v67 = v290;
    if (*(_DWORD *)(a1 + 560) != 1 || v60 != 5 || v290 == 0) {
      goto LABEL_166;
    }
    if (!strcmp(v290, "phon") || !strcmp(v67, "prompt") || !strcmp(v67, "internal-nuance-system-norm"))
    {
LABEL_163:
      uint64_t v74 = 78;
LABEL_164:
      int v75 = __dst;
      goto LABEL_165;
    }
    unint64_t v70 = *(char **)(a1 + 1216);
    if (!v70)
    {
      unsigned int v56 = 0;
      uint64_t v55 = 0;
      uint64_t v9 = 2310021126;
      goto LABEL_282;
    }
    __int16 v71 = strstr(v70, v67);
    if (!strcmp(v67, "latin")) {
      goto LABEL_180;
    }
    if (!strcmp(v67, (const char *)v300)) {
      goto LABEL_163;
    }
    if (!v71 || (size_t v72 = strlen(v67), v71[v72] != 124))
    {
LABEL_180:
      uint64_t v74 = 76;
      goto LABEL_164;
    }
    uint64_t v73 = (unsigned __int16)v72;
    if (!(_WORD)v72) {
      goto LABEL_163;
    }
    LODWORD(v74) = 78;
    int v75 = __dst;
    do
    {
      int v76 = *v67++;
      if (v76 == 95) {
        uint64_t v74 = 76;
      }
      else {
        uint64_t v74 = v74;
      }
      --v73;
    }
    while (v73);
LABEL_165:
    if (v57 != v74)
    {
      int v78 = (unsigned __int16)v292;
      if ((_WORD)v292)
      {
        if (v261 >= (unsigned __int16)v75)
        {
          int v80 = v75;
          uint64_t v79 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v267, 32 * (unsigned __int16)v75 + 352);
          if (!v79)
          {
LABEL_501:
            uint64_t v200 = *(void *)a1;
LABEL_502:
            log_OutPublic(*(void *)(v200 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v81, v82, v83, v84, v247);
            goto LABEL_503;
          }
          int __dst = v80 + 10;
          int v78 = (unsigned __int16)v292;
        }
        else
        {
          uint64_t v79 = v267;
        }
        uint64_t v267 = v79;
        uint64_t v85 = v79 + 32 * v261;
        *(_DWORD *)uint64_t v85 = 36;
        *(_DWORD *)(v85 + 12) = *(_DWORD *)(v288 + 12) + v78;
        unsigned __int16 v86 = "normal";
        if (v74 == 76) {
          unsigned __int16 v86 = "latin";
        }
        *(void *)(v85 + 24) = v86;
        ++v261;
      }
      else if (v74 == 76)
      {
        *(void *)(v267 + 56) = "latin";
        uint64_t v74 = 76;
      }
      else
      {
        *(void *)(v267 + 56) = "normal";
      }
      goto LABEL_167;
    }
LABEL_166:
    uint64_t v74 = v57;
LABEL_167:
    uint64_t v77 = (unsigned __int16)v296;
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)v296, &v296);
    if ((v59 & 0x80000000) == 0)
    {
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 192))(a3, a4, v77);
      uint64_t v57 = v74;
      if ((v59 & 0x80000000) == 0) {
        continue;
      }
    }
    goto LABEL_280;
  }
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    uint64_t v87 = *(void *)(a1 + 64);
    uint64_t v88 = *(void *)(a1 + 72);
    uint64_t v89 = v261;
    uint64_t v90 = a3;
    uint64_t v91 = a4;
    uint64_t v92 = v267;
  }
  else
  {
    uint64_t v92 = v288;
    uint64_t v89 = HIWORD(v287);
    uint64_t v87 = *(void *)(a1 + 64);
    uint64_t v88 = *(void *)(a1 + 72);
    uint64_t v90 = a3;
    uint64_t v91 = a4;
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 80) + 56))(v87, v88, v90, v91, v92, v89);
  if ((v59 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)v32 + 104))(a3, a4, 3, HIWORD(v296), &v296);
  if ((v59 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)v32 + 104))(a3, a4, 2, HIWORD(v296), &v295);
  if ((v59 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, v295, 1, 1, (char *)&v291 + 2, &v294);
  if ((v59 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  if (HIWORD(v291))
  {
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)v32 + 88))(a3, a4, v295, &v295);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 0, 1, &v286, &v294);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 1, 1, &v292, &v294);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 2, 1, &v291, &v294);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 0, 1, &v286, (char *)&v293 + 2);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 1, 1, &v292, (char *)&v293 + 2);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 2, 1, &v291, (char *)&v293 + 2);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)v296, &v296);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
  }
  LOWORD(v292) = 0;
  while (1)
  {
    uint64_t v93 = *(void *)v32;
    if (!(_WORD)v296) {
      break;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 168))(a3, a4);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 1, 1, &v292, &v294);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    unsigned __int16 v94 = v295;
    int v95 = (unsigned __int16)v292;
    int v96 = HIWORD(v291);
    if ((unsigned __int16)v292 > HIWORD(v291) && v295 != 0)
    {
      while (1)
      {
        unsigned __int16 v98 = v94;
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)v32 + 120))(a3, a4, v94, &v295);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        if (!v295)
        {
          unsigned __int16 v100 = strlen(__s);
          int v96 = v100;
          HIWORD(v291) = v100;
          int v95 = (unsigned __int16)v292;
LABEL_217:
          unsigned __int16 v94 = v98;
          break;
        }
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        int v96 = HIWORD(v291);
        unsigned __int16 v94 = v295;
        int v95 = (unsigned __int16)v292;
        if ((unsigned __int16)v292 <= HIWORD(v291) || v295 == 0) {
          goto LABEL_217;
        }
      }
    }
    if (v95 != v96) {
      unsigned __int16 v295 = v94;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 2, 1, &v291, &v294);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, v295, 0, 1, (char *)&v285 + 4, &v294);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    if (HIDWORD(v285) == 5 && (unsigned __int16)v292 == HIWORD(v291))
    {
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)v32 + 88))(a3, a4, v295, &v295);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 0, 1, &v286, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 1, 1, &v292, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 2, 1, &v291, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)v32 + 120))(a3, a4, v295, &v295);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
    }
    else
    {
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)v32 + 80))(a3, a4, v295, &v295);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 0, 1, &v286, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 1, 1, &v292, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, v295, 2, 1, &v291, (char *)&v293 + 2);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
    }
    uint64_t v101 = (unsigned __int16)v296;
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)v296, &v296);
    if ((v59 & 0x80000000) == 0)
    {
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 192))(a3, a4, v101);
      if ((v59 & 0x80000000) == 0) {
        continue;
      }
    }
    goto LABEL_280;
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v93 + 104))(a3, a4, 2, HIWORD(v296), &v296);
  if ((v59 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  int v102 = (unsigned __int16)v296;
  *(_WORD *)(a1 + 280) = v296;
  LOWORD(v293) = v102;
  if (v102)
  {
    LOWORD(v103) = 0;
    while (1)
    {
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v102, 0, 1, (char *)&v285 + 4, &v294);
      if ((v59 & 0x80000000) != 0) {
        break;
      }
      uint64_t v104 = *(void *)v32;
      uint64_t v105 = (unsigned __int16)v293;
      if (HIDWORD(v285) != 5) {
        goto LABEL_261;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(v104 + 168))(a3, a4, (unsigned __int16)v293, 1, 1, &v292, &v294);
      if ((v59 & 0x80000000) != 0) {
        break;
      }
      unsigned int v103 = (unsigned __int16)v292 <= (unsigned __int16)v103
           ? (unsigned __int16)v103
           : (unsigned __int16)v292;
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v293, 2, 1, &v291, &v294);
      if ((v59 & 0x80000000) != 0) {
        break;
      }
      uint64_t v104 = *(void *)v32;
      uint64_t v105 = (unsigned __int16)v293;
      if (v103 < (unsigned __int16)v291)
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(v104 + 176))(a3, a4, (unsigned __int16)v293, 4, &v290, &v294);
        if ((v59 & 0x80000000) != 0) {
          break;
        }
        if (!strcmp(v290, "phon"))
        {
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v293, 3, &__src, &v294);
          if ((v59 & 0x80000000) != 0) {
            break;
          }
          uint64_t v59 = oneword_ConvertPhon(a1, (uint64_t)__s, (uint64_t)__src, (unsigned __int16)v292, (unsigned __int16)v291, a3, a4, (uint64_t)&v296, v288, &v287, (unsigned __int16 *)&v287 + 1, v259);
          if ((v59 & 0x80000000) != 0) {
            break;
          }
        }
        else
        {
          __int16 v284 = 0;
          BOOL v107 = (*(int (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)(a1 + 56) + 184))(a3, a4, (unsigned __int16)v293, 9, &v284) >= 0&& v284 == 1;
          uint64_t v59 = oneword_G2PLookup(a1, (const char **)&v297, v103, &v291, v290, a3, a4, (unsigned __int16 *)&v296, v288, &v287, (unsigned __int16 *)&v287 + 1, v259, v107);
          if ((unsigned __int16)v291 > v103) {
            LOWORD(v103) = v291;
          }
          if ((v59 & 0x80000000) != 0) {
            break;
          }
        }
        LOWORD(v293) = v296;
      }
      else
      {
LABEL_261:
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v104 + 120))(a3, a4, v105, &v293);
        if ((v59 & 0x80000000) != 0) {
          break;
        }
      }
      if ((_WORD)v296)
      {
        LOWORD(v102) = v293;
        if ((_WORD)v293) {
          continue;
        }
      }
      goto LABEL_268;
    }
LABEL_280:
    unsigned int v56 = 0;
    uint64_t v55 = 0;
LABEL_281:
    uint64_t v9 = v59;
    goto LABEL_282;
  }
LABEL_268:
  int v108 = *(__int16 *)__s2;
  if (*(_WORD *)__s2)
  {
    uint64_t v109 = (_WORD *)(a1 + 280);
    __int16 v110 = HIWORD(v287);
    if ((unsigned __int16)v287 < HIWORD(v287))
    {
      uint64_t v111 = (_DWORD *)(v288 + 32 * (unsigned __int16)v287 + 12);
      unint64_t v112 = HIWORD(v287) - (unint64_t)(unsigned __int16)v287;
      do
      {
        *v111 += v108;
        v111 += 8;
        --v112;
      }
      while (v112);
      LOWORD(v287) = v110;
    }
    LOWORD(v299[0]) = 0;
    LOWORD(v276) = 0;
    if (!*v109)
    {
      int v114 = 0;
      goto LABEL_285;
    }
LABEL_274:
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
    if ((v113 & 0x80000000) != 0) {
      goto LABEL_277;
    }
    while (1)
    {
      int v114 = LOWORD(v299[0]);
LABEL_285:
      if (v114 > (__int16)strlen(__s) || !*v109) {
        break;
      }
      uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
      if ((v113 & 0x80000000) != 0) {
        goto LABEL_277;
      }
      if ((HIDWORD(v285) & 0xFFFFFFFC) == 4 || (HIDWORD(v285) - 9) <= 1)
      {
        uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)*v109, 2, 1, &v276, &v294);
        if ((v113 & 0x80000000) != 0) {
          goto LABEL_277;
        }
        __int16 v117 = *(_WORD *)__s2;
        LOWORD(v299[0]) += *(_WORD *)__s2;
        LOWORD(v276) = (_WORD)v276 + v117;
        uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char **, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)*v109, 1, 1, v299, (char *)&v293 + 2);
        if ((v113 & 0x80000000) != 0) {
          goto LABEL_277;
        }
        uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char **, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)*v109, 2, 1, &v276, (char *)&v293 + 2);
        if ((v113 & 0x80000000) != 0) {
          goto LABEL_277;
        }
      }
      uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)*v109, a1 + 280);
      if ((v113 & 0x80000000) != 0) {
        goto LABEL_277;
      }
      if (*v109)
      {
        uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
        if ((v113 & 0x80000000) != 0) {
          goto LABEL_277;
        }
        if (LOWORD(v299[0]) > (__int16)strlen(__s))
        {
          while (*v109)
          {
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
            if (HIDWORD(v285) != 17) {
              break;
            }
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)*v109, a1 + 280);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
          }
          goto LABEL_274;
        }
      }
    }
    LOWORD(v108) = *(_WORD *)__s2;
  }
  LODWORD(v285) = v285 + (__int16)v108;
  uint64_t v59 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 104) + 104))(*(void *)(a1 + 88), *(void *)(a1 + 96));
  if ((v59 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  unsigned __int16 v118 = v297;
  *(_DWORD *)(v288 + 16) = strlen(v297);
  __int16 v119 = strlen(v118);
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, char *, char *))(*(void *)v32 + 160))(a3, a4, HIWORD(v296), 0, (unsigned __int16)(v119 + 1), v118, (char *)&v293 + 2);
  if ((v59 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)v32 + 104))(a3, a4, 2, HIWORD(v296), &v296);
  if ((v59 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  unsigned __int16 v120 = v296;
  if ((_WORD)v296)
  {
    uint64_t v121 = 0;
    do
    {
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, v120, 0, 1, (char *)&v285 + 4, &v294);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      if (HIDWORD(v285) > 3)
      {
        uint64_t v122 = (unsigned __int16)v296;
      }
      else
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v32 + 192))(a3, a4, (unsigned __int16)v296);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        LOWORD(v296) = v121;
        uint64_t v122 = v121;
      }
      uint64_t v123 = *(void *)v32;
      if ((_WORD)v122)
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(v123 + 120))(a3, a4, (unsigned __int16)v122, &v296);
        uint64_t v121 = v122;
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
      }
      else
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v123 + 104))(a3, a4, 2, HIWORD(v296), &v296);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
      }
      unsigned __int16 v120 = v296;
    }
    while ((_WORD)v296);
  }
  LOWORD(v287) = 0;
  unsigned __int16 v124 = strlen(v297);
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)v32 + 104))(a3, a4, 2, HIWORD(v296), &v296);
  if ((v59 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  unint64_t v262 = 0;
  int v253 = 0;
  int v257 = 0;
  char __s2a = 0;
  int __dsta = v124;
  while (2)
  {
    if (!(_WORD)v296)
    {
      if (v257 && v253 && (_BYTE)v262)
      {
        uint64_t v162 = v262;
        v163 = __s1;
        do
        {
          unsigned int v164 = *(unsigned __int16 *)v163;
          v163 = (char **)((char *)v163 + 2);
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v32 + 192))(a3, a4, v164);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
        }
        while (--v162);
      }
      if (*(unsigned char *)(a1 + 1200))
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)v32 + 104))(a3, a4, 2, HIWORD(v296), &v296);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        v258 = (const char **)(a1 + 168);
        v260 = (size_t *)(a1 + 200);
        while ((_WORD)v296)
        {
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
          if (HIDWORD(v285) == 9)
          {
            __int16 v284 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)v32 + 184))(a3, a4, (unsigned __int16)v296, 11, &v284) & 0x80000000) != 0)
            {
              __int16 v284 = 0;
            }
            else if (v284)
            {
              goto LABEL_499;
            }
            uint64_t v275 = 0;
            v276 = 0;
            LOWORD(v272) = 0;
            v274 = 0;
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 1, 1, &v292, &v294);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 2, 1, &v291, &v294);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
            uint64_t v165 = (unsigned __int16)v291;
            uint64_t v166 = (unsigned __int16)v292;
            int v167 = (unsigned __int16)v291 - (unsigned __int16)v292;
            uint64_t v168 = *(char **)(a1 + 160);
            if (v167 >= *(unsigned __int16 *)(a1 + 192))
            {
              uint64_t v169 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 160), (v167 + 1));
              if (!v169) {
                goto LABEL_501;
              }
              uint64_t v168 = (char *)v169;
              *(void *)(a1 + 160) = v169;
              uint64_t v165 = (unsigned __int16)v291;
              uint64_t v166 = (unsigned __int16)v292;
              *(void *)(a1 + 192) = (unsigned __int16)v291 - (unint64_t)(unsigned __int16)v292 + 1;
            }
            strncpy(v168, &v297[v166], v165 - v166);
            *(unsigned char *)(*(void *)(a1 + 160) - (unsigned __int16)v292 + (unsigned __int16)v291) = 0;
            __int16 v170 = strlen(*(const char **)(a1 + 160));
            (*(void (**)(void, void, char *, void, void))(*(void *)(a1 + 80) + 112))(*(void *)(a1 + 64), *(void *)(a1 + 72), v290, *(void *)(a1 + 160), (unsigned __int16)(v170 + 1));
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 56) + 176))(a3, a4, (unsigned __int16)v296, 3, &__src, &v294);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 9, &v274, &v294);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
            **(unsigned char **)(a1 + 168) = 0;
            if (*(unsigned char *)(a1 + 1200))
            {
              unsigned int v263 = 0;
              unsigned __int16 v256 = 3;
              do
              {
                LH_itoa(++v263, (char *)&v273, 0xAu);
                strcpy((char *)v299, "multi_trans_");
                __strcat_chk();
                unsigned __int16 v171 = strlen(__src);
                uint64_t v113 = (*(uint64_t (**)(void, void, void, char *, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, __src, v171);
                if ((v113 & 0x80000000) != 0) {
                  goto LABEL_277;
                }
                uint64_t v113 = (*(uint64_t (**)(void, void, void, char **, uint64_t *))(*(void *)(a1 + 104)
                                                                                             + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, &v276, &v272);
                if ((v113 & 0x80000000) != 0) {
                  goto LABEL_277;
                }
                v276[(unsigned __int16)v272] = 0;
                HIWORD(v292) = 0;
                __s2b = v276;
                if (*v276)
                {
                  int v175 = 0;
                  uint64_t v176 = 0;
                  do
                  {
                    uint64_t v177 = &__s2b[v176];
                    if (__s2b[v176] == 126)
                    {
                      size_t v178 = strlen(v177);
                      memmove((void *)&__s2b[v176 + 1], v177, v178 + 1);
                      *(_WORD *)&v276[HIWORD(v292)] = -24126;
                      int v175 = HIWORD(v292);
                      __s2b = v276;
                    }
                    HIWORD(v292) = ++v175;
                    uint64_t v176 = (unsigned __int16)v175;
                  }
                  while (strlen(__s2b) > (unsigned __int16)v175);
                }
                if (*(unsigned char *)v274)
                {
                  uint64_t v113 = (*(uint64_t (**)(void, void, uint64_t, uint64_t *, uint64_t *))(*(void *)(a1 + 104)
                                                                                                  + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 2, &v275, &v272);
                  if ((v113 & 0x80000000) != 0) {
                    goto LABEL_277;
                  }
                  *(unsigned char *)(v275 + (unsigned __int16)v272) = 0;
                  HIWORD(v292) = 0;
                  if ((_WORD)v272)
                  {
                    unsigned __int16 v179 = 0;
                    do
                    {
                      *(unsigned char *)(v275 + v179) = *(unsigned char *)v274;
                      unsigned __int16 v179 = HIWORD(v292) + 1;
                      HIWORD(v292) = v179;
                    }
                    while ((unsigned __int16)v272 > v179);
                  }
                }
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v172, v173, v174, (uint64_t)v299);
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L2: %s", v180, v181, v182, (uint64_t)v299);
                if (*(unsigned char *)v274) {
                  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L3: %s", v183, v184, v185, (uint64_t)v299);
                }
                unsigned __int16 v186 = strlen(*(const char **)(a1 + 160));
                uint64_t v113 = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 1, *(void *)(a1 + 160), v186);
                if ((v113 & 0x80000000) != 0) {
                  goto LABEL_277;
                }
                uint64_t v113 = (*(uint64_t (**)(void, void, const char **))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), v299);
                if ((v113 & 0x80000000) != 0) {
                  goto LABEL_277;
                }
                uint64_t v113 = (*(uint64_t (**)(void, void, void, char **, uint64_t *))(*(void *)(a1 + 104)
                                                                                             + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, &v276, &v272);
                if ((v113 & 0x80000000) != 0) {
                  goto LABEL_277;
                }
                v276[(unsigned __int16)v272] = 0;
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v187, v188, v189, (uint64_t)v299);
                __s2c = v276;
                if (*v276)
                {
                  uint64_t v190 = 0;
                  unsigned __int16 v191 = 0;
                  do
                  {
                    uint64_t v192 = (char *)&__s2c[v190];
                    if (__s2c[v190] == 126)
                    {
                      unsigned int v193 = &__s2c[v190 + 1];
                      size_t v194 = strlen(v193);
                      memmove(v192, v193, v194 + 1);
                    }
                    else if (!strncmp(&__s2c[v190], "Â¡", 2uLL))
                    {
                      size_t v195 = strlen(&__s2c[v191 + 2]);
                      memmove((void *)&__s2c[v191 + 1], &__s2c[v191 + 2], v195 + 1);
                      v276[v190] = 126;
                    }
                    uint64_t v190 = ++v191;
                    __s2c = v276;
                    size_t v196 = strlen(v276);
                  }
                  while (v196 > v191);
                  __int16 v197 = v196;
                }
                else
                {
                  __int16 v197 = 0;
                }
                if (strcmp(__src, __s2c))
                {
                  v256 += v197 + 1;
                  if (*v260 < v256)
                  {
                    uint64_t v198 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 168), v256);
                    if (!v198) {
                      goto LABEL_501;
                    }
                    *v258 = (const char *)v198;
                    size_t *v260 = v256;
                    __s2c = v276;
                  }
                  uint64_t v199 = dynamic_strcat(v258, __s2c, v260, *(uint64_t **)(*(void *)a1 + 8));
                  uint64_t v200 = *(void *)a1;
                  if (!v199) {
                    goto LABEL_502;
                  }
                  if (!dynamic_strcat(v258, "\x12", v260, *(uint64_t **)(v200 + 8))) {
                    goto LABEL_501;
                  }
                }
              }
              while (v263 < *(unsigned __int8 *)(a1 + 1200));
            }
            if (**v258)
            {
              (*v258)[strlen(*v258) - 1] = 0;
              __int16 v201 = strlen(*v258);
              uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 11, (unsigned __int16)(v201 + 1), *v258, (char *)&v293 + 2);
              if ((v113 & 0x80000000) != 0) {
                goto LABEL_277;
              }
            }
          }
LABEL_499:
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)v296, &v296);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
        }
      }
      if (*(_DWORD *)(a1 + 1204) && *(_DWORD *)(a1 + 848) && *(unsigned __int8 *)(a1 + 1201) >= 2u)
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)v32 + 104))(a3, a4, 2, HIWORD(v296), &v296);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        unsigned __int16 v202 = 0;
        unsigned __int16 v203 = 0;
        unsigned __int16 v204 = 0;
        int v205 = 0;
        while ((_WORD)v296)
        {
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
          if (HIDWORD(v285) == 9 || HIDWORD(v285) == 4)
          {
            v299[0] = 0;
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 1, 1, &v292, &v294);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 2, 1, &v291, &v294);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 9, v299, &v294);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
            if ((unsigned __int16)v292 != v203)
            {
              if (!v205)
              {
                if (v203 | v204)
                {
                  uint64_t v113 = hlp_GenXtraMainVarMW(a1, a3, a4, v202, v203, v204, (uint64_t)v297);
                  if ((v113 & 0x80000000) != 0) {
                    goto LABEL_277;
                  }
                }
              }
              int v205 = 0;
            }
            if (!LH_stricmp((char *)v299[0], *(char **)(a1 + 1208))
              || !*v299[0]
              || !strcmp(v299[0], "normal"))
            {
              int v205 = 1;
            }
            unsigned __int16 v203 = v292;
            unsigned __int16 v204 = v291;
          }
          unsigned __int16 v202 = v296;
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)v296, &v296);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
        }
        if (!v205)
        {
          if (v203 | v204)
          {
            uint64_t v59 = hlp_GenXtraMainVarMW(a1, a3, a4, v202, v203, v204, (uint64_t)v297);
            if ((v59 & 0x80000000) != 0) {
              goto LABEL_280;
            }
          }
        }
      }
      v207 = *(unsigned char **)(a1 + 2184);
      if (v207 && strlen(*(const char **)(a1 + 2184)) == 3 && *v207 == 101 && v207[1] == 110)
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)v32 + 104))(a3, a4, 2, HIWORD(v296), &v296);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        while ((_WORD)v296)
        {
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
          if (HIDWORD(v285) <= 0xA && ((1 << SBYTE4(v285)) & 0x610) != 0)
          {
            v299[0] = 0;
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 9, v299, &v294);
            if ((v113 & 0x80000000) != 0) {
              goto LABEL_277;
            }
            if (!strcmp(v299[0], "latin"))
            {
              __int16 v209 = strlen(*(const char **)(a1 + 2184));
              uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, char *))(*(void *)(a1 + 56) + 160))(a3, a4, (unsigned __int16)v296, 9, (unsigned __int16)(v209 + 1), *(void *)(a1 + 2184), (char *)&v293 + 2);
              if ((v113 & 0x80000000) != 0) {
                goto LABEL_277;
              }
            }
          }
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)v296, &v296);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
        }
      }
      if (v13)
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)v32 + 104))(a3, a4, 2, HIWORD(v296), &v296);
        if ((v59 & 0x80000000) == 0)
        {
          unsigned int v56 = 0;
          uint64_t v55 = 0;
          while (1)
          {
            if (!(_WORD)v296) {
              goto LABEL_620;
            }
            uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
            if ((v59 & 0x80000000) != 0) {
              goto LABEL_281;
            }
            if (HIDWORD(v285) <= 0xA && ((1 << SBYTE4(v285)) & 0x610) != 0)
            {
              v299[0] = 0;
              uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 3, &__src, &v294);
              if ((v59 & 0x80000000) != 0) {
                goto LABEL_281;
              }
              uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 9, v299, &v294);
              if ((v59 & 0x80000000) != 0) {
                goto LABEL_281;
              }
              __int16 v284 = 0;
              uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)v32 + 184))(a3, a4, (unsigned __int16)v296, 12, &v284);
              if ((v59 & 0x80000000) != 0) {
                goto LABEL_281;
              }
              if (v284 != 1)
              {
                if (v299[0] && ((size_t v211 = strlen(v299[0]), v211 == 3) || !v211))
                {
                  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 12, (unsigned __int16)(v211 + 1), v299[0], (char *)&v293 + 2);
                }
                else
                {
                  __int16 v212 = strlen(*(const char **)(a1 + 1208));
                  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, char *))(*(void *)(a1 + 56) + 160))(a3, a4, (unsigned __int16)v296, 12, (unsigned __int16)(v212 + 1), *(void *)(a1 + 1208), (char *)&v293 + 2);
                }
                if ((v59 & 0x80000000) != 0) {
                  goto LABEL_281;
                }
              }
              if (LH_stricmp((char *)v299[0], *(char **)(a1 + 1208)))
              {
                v213 = v299[0];
                if (*v299[0])
                {
                  if (strcmp(v299[0], "normal"))
                  {
                    if (strcmp(v213, "latin"))
                    {
                      BOOL v214 = hlp_checkDoClmForForeignLanguage(a1, v213);
                      if (v214 || *(_DWORD *)(a1 + 844))
                      {
                        int v215 = strlen(__src);
                        uint64_t v216 = 0;
                        LOWORD(v275) = v296;
                        v217 = v299[0];
                        do
                        {
                          unsigned int v218 = v217[v216];
                          if (v218 > 0x60) {
                            LOBYTE(v218) = v218 - 32;
                          }
                          *((unsigned char *)&v276 + v216++) = v218;
                        }
                        while (v216 != 3);
                        uint64_t v219 = (4 * v215 + 4);
                        BYTE3(v276) = 0;
                        v220 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v56, v219);
                        unsigned int v56 = v220;
                        if (!v220)
                        {
LABEL_627:
                          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v221, v222, v223, v224, v247);
                          goto LABEL_628;
                        }
                        char *v220 = 0;
                        if (!v214 && *(_DWORD *)(a1 + 844))
                        {
                          LOWORD(v274) = 1;
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(*(void *)v32 + 80))(a3, a4, (unsigned __int16)v296, &v275);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 1, 1, &v292, &v294);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 2, 1, &v291, &v294);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          HIDWORD(v285) = 16;
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v275, 0, 1, (char *)&v285 + 4, (char *)&v293 + 2);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v275, 1, 1, &v292, (char *)&v293 + 2);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v275, 2, 1, &v291, (char *)&v293 + 2);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v275, 5, 1, "*", (char *)&v293 + 2);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v275, 6, 1, "*", (char *)&v293 + 2);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t **, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v275, 7, 1, &v274, (char *)&v293 + 2);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v275, 12, 4, "map", (char *)&v293 + 2);
                          if ((v59 & 0x80000000) != 0) {
                            goto LABEL_281;
                          }
                        }
                        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Phon before %s CLM %s", v222, v223, v224, (uint64_t)&v276);
                        if (((*(uint64_t (**)(void, void, char **, char *, char *, void, void, uint64_t))(*(void *)(a1 + 128) + 64))(*(void *)(a1 + 112), *(void *)(a1 + 120), &v276, __src, v56, 0, 0, v219) & 0x80000000) != 0&& *(_DWORD *)(a1 + 940))
                        {
                          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"CLM failed for %s", v226, v227, v228, (uint64_t)__src);
                        }
                        else
                        {
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v275, 9, 1, &byte_20D5A22AE, (char *)&v293 + 2);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                        }
                        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Phon after %s CLM %s", v229, v230, v231, (uint64_t)&v276);
                        __int16 v232 = strlen(v56);
                        uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 56) + 160))(a3, a4, (unsigned __int16)v275, 3, (unsigned __int16)(v232 + 1), v56, (char *)&v293 + 2);
                        if ((v225 & 0x80000000) != 0)
                        {
LABEL_626:
                          uint64_t v9 = v225;
LABEL_628:
                          uint64_t v59 = v9;
                          goto LABEL_281;
                        }
                        __int16 v284 = 0;
                        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)v32 + 184))(a3, a4, (unsigned __int16)v296, 11, &v284) & 0x80000000) == 0&& v284 == 1)
                        {
                          uint64_t v225 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 11, &__src, &v294);
                          if ((v225 & 0x80000000) != 0) {
                            goto LABEL_626;
                          }
                          if (*__src)
                          {
                            int v233 = strlen(__src);
                            v234 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v55, (4 * v233 + 4));
                            uint64_t v55 = v234;
                            if (!v234) {
                              goto LABEL_627;
                            }
                            char *v234 = 0;
                            v235 = __src;
                            if (__src)
                            {
                              while (1)
                              {
                                v236 = strchr(v235, 18);
                                v240 = v236;
                                if (v236) {
                                  char *v236 = 0;
                                }
                                if (*v55) {
                                  *(_WORD *)&v55[strlen(v55)] = 18;
                                }
                                *(_WORD *)unsigned int v56 = 95;
                                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Phon before %s CLM %s", v237, v238, v239, (uint64_t)&v276);
                                v241 = __src;
                                size_t v242 = strlen(__src);
                                if (4 * v242 + 4 > v219)
                                {
                                  uint64_t v219 = (4 * v242 + 4);
                                  unsigned int v56 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v56, v219);
                                  if (!v56) {
                                    goto LABEL_627;
                                  }
                                  v241 = __src;
                                }
                                if (((*(uint64_t (**)(void, void, char **, char *, char *, void, void, uint64_t))(*(void *)(a1 + 128) + 64))(*(void *)(a1 + 112), *(void *)(a1 + 120), &v276, v241, v56, 0, 0, v219) & 0x80000000) != 0)log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"CLM failed for %s", v243, v244, v245, (uint64_t)__src); {
                                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Phon after %s CLM %s", v243, v244, v245, (uint64_t)&v276);
                                }
                                strcat(v55, v56);
                                if (!v240) {
                                  break;
                                }
                                char *v240 = 18;
                                v235 = v240 + 1;
                                __src = v235;
                              }
                              __src = 0;
                            }
                            __int16 v246 = strlen(v55);
                            uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v275, 11, (unsigned __int16)(v246 + 1), v55, (char *)&v293 + 2);
                            if ((v59 & 0x80000000) != 0) {
                              goto LABEL_281;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)v296, &v296);
            if ((v59 & 0x80000000) != 0) {
              goto LABEL_281;
            }
          }
        }
        goto LABEL_280;
      }
      unsigned int v56 = 0;
      uint64_t v55 = 0;
LABEL_620:
      uint64_t v59 = fe_oneword_SplitMW((void *)a1, a3, a4);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_281;
      }
      if (*(_DWORD *)(a1 + 2192))
      {
        uint64_t v59 = fe_oneword_MosyntCleanup();
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_281;
        }
      }
      uint64_t DTData = fe_oneword_TreatNLUMarkup(a1, a3, a4);
      if ((DTData & 0x80000000) == 0)
      {
        uint64_t v9 = fe_oneword_ProcessPinyinMarkup((void *)a1, a3, a4);
        uint64_t v11 = v9;
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_282;
        }
        return v11;
      }
      return DTData;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 1, 1, &v292, &v294);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 2, 1, &v291, &v294);
    if ((v59 & 0x80000000) != 0) {
      goto LABEL_280;
    }
    int v125 = HIDWORD(v285);
    switch(HIDWORD(v285))
    {
      case 4:
LABEL_329:
        v299[0] = 0;
        __int16 v284 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)v32 + 184))(a3, a4, (unsigned __int16)v296, 11, &v284) & 0x80000000) == 0&& v284 == 1)
        {
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 11, v299, &v294);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
          uint64_t v126 = (char *)v299[0];
          uint64_t v127 = strstr((char *)v299[0], "\x12;_");
          if (v127)
          {
            *uint64_t v127 = 0;
            uint64_t v126 = (char *)v299[0];
          }
          uint64_t v128 = strstr(v126, ";_");
          if (v128) {
            *uint64_t v128 = 0;
          }
        }
LABEL_336:
        int v254 = (unsigned __int16)v292;
        if ((unsigned __int16)v292 == __dsta)
        {
          int v257 = 1;
          int v254 = __dsta;
          unint64_t __dstb = v262;
        }
        else
        {
          unint64_t __dstb = 0;
          if (v257 && v253)
          {
            int v253 = 0;
            int v257 = 0;
            char __s2a = 0;
            if ((_BYTE)v262)
            {
              uint64_t v136 = v262;
              uint64_t v137 = __s1;
              while (1)
              {
                unsigned int v138 = *(unsigned __int16 *)v137;
                uint64_t v137 = (char **)((char *)v137 + 2);
                uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v32 + 192))(a3, a4, v138);
                if ((v59 & 0x80000000) != 0) {
                  goto LABEL_280;
                }
                if (!--v136)
                {
                  unint64_t __dstb = 0;
                  int v257 = 0;
                  char __s2a = 0;
                  int v253 = 0;
                  int v254 = (unsigned __int16)v292;
                  break;
                }
              }
            }
          }
          else
          {
            int v253 = 0;
            int v257 = 0;
            char __s2a = 0;
          }
        }
        unsigned __int16 v129 = v287;
        if ((unsigned __int16)v287 < HIWORD(v287))
        {
          while ((__int16)(*(_DWORD *)(v288 + 32 * v129 + 12) - v259) < (__int16)(v292 + 1))
          {
            int v130 = *(_DWORD *)(v288 + 32 * v129);
            if (v130 == 14)
            {
              int v133 = *(_DWORD *)(v288 + 32 * v129 + 24);
              if (v133 != 64)
              {
                __int16 v282 = v133;
                *(_WORD *)&__c[1] = -1;
                uint64_t v59 = (*(uint64_t (**)(void, void, const char *, int *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", &v281, &__c[3], &__c[1], __c);
                if ((v59 & 0x80000000) != 0) {
                  goto LABEL_280;
                }
                if (*(_WORD *)&__c[1]) {
                  char v134 = ***(unsigned char ***)&__c[3];
                }
                else {
                  char v134 = v282;
                }
                char __s2a = v134;
              }
            }
            else if (v130 == 37)
            {
              v131 = *(const char **)(v288 + 32 * v129 + 24);
              __int16 v132 = strlen(v131);
              uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 10, (unsigned __int16)(v132 + 1), v131, (char *)&v293 + 2);
              if ((v59 & 0x80000000) != 0) {
                goto LABEL_280;
              }
            }
            unsigned __int16 v129 = v287 + 1;
            LOWORD(v287) = v129;
            if (HIWORD(v287) <= v129) {
              break;
            }
          }
        }
        if (__s2a)
        {
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 5, &v283, &v294);
          if ((v59 & 0x80000000) != 0) {
            goto LABEL_280;
          }
          uint64_t v135 = v283;
          if (strchr(v283, __s2a))
          {
            int v253 = 1;
          }
          else
          {
            *((_WORD *)__s1 + __dstb) = v296;
            unint64_t __dstb = (__dstb + 1);
          }
          *uint64_t v135 = __s2a;
          v283[1] = 0;
        }
        unint64_t v262 = __dstb;
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)v32 + 184))(a3, a4, (unsigned __int16)v296, 21, &v284) & 0x80000000) != 0)
        {
          __int16 v284 = 0;
        }
        else if (v284)
        {
LABEL_369:
          int v125 = HIDWORD(v285);
          int __dsta = v254;
          break;
        }
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 21, 6, "OTHER", (char *)&v293 + 2);
        if ((v59 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        goto LABEL_369;
      case 0xA:
        goto LABEL_336;
      case 9:
        goto LABEL_329;
    }
    if (v125 != 9) {
      goto LABEL_436;
    }
    v299[0] = 0;
    LOWORD(v275) = 0;
    v276 = 0;
    LOWORD(v274) = 0;
    LOWORD(v273) = 0;
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 3, &__src, &v294);
    if ((v113 & 0x80000000) != 0) {
      goto LABEL_277;
    }
    if (!strchr(__src, 32))
    {
LABEL_436:
      uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 120))(a3, a4, (unsigned __int16)v296, &v296);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      continue;
    }
    break;
  }
  uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 2, 1, &v291, &v294);
  if ((v113 & 0x80000000) != 0) {
    goto LABEL_277;
  }
  uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 7, 1, &v275, &v294);
  if ((v113 & 0x80000000) != 0) {
    goto LABEL_277;
  }
  uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 9, &v276, &v294);
  if ((v113 & 0x80000000) != 0) {
    goto LABEL_277;
  }
  __int16 v284 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)v32 + 184))(a3, a4, (unsigned __int16)v296, 8, &v284) & 0x80000000) == 0&& v284 == 1)
  {
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t **, unsigned __int16 *))(*(void *)v32 + 168))(a3, a4, (unsigned __int16)v296, 8, 1, &v274, &v294);
    if ((v113 & 0x80000000) != 0) {
      goto LABEL_277;
    }
  }
  uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 5, &v283, &v294);
  if ((v113 & 0x80000000) != 0) {
    goto LABEL_277;
  }
  uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(*(void *)v32 + 176))(a3, a4, (unsigned __int16)v296, 6, v299, &v294);
  if ((v113 & 0x80000000) != 0) {
    goto LABEL_277;
  }
  size_t v139 = strlen(__src);
  if (v139 - 128 <= 0xFFFFFFFFFFFFFF7ELL)
  {
    uint64_t v140 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 240), (v139 + 1));
    if (!v140) {
      goto LABEL_501;
    }
    *(void *)(a1 + 240) = v140;
  }
  size_t v141 = strlen(v283);
  if (v141 - 128 <= 0xFFFFFFFFFFFFFF7ELL)
  {
    uint64_t v142 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 248), (v141 + 1));
    if (!v142) {
      goto LABEL_501;
    }
    *(void *)(a1 + 248) = v142;
  }
  size_t v143 = strlen(v299[0]);
  if (v143 - 128 <= 0xFFFFFFFFFFFFFF7ELL)
  {
    uint64_t v144 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 256), (v143 + 1));
    if (!v144) {
      goto LABEL_501;
    }
    *(void *)(a1 + 256) = v144;
  }
  strcpy(*(char **)(a1 + 240), __src);
  strcpy(*(char **)(a1 + 248), v283);
  strcpy(*(char **)(a1 + 256), v299[0]);
  uint64_t v145 = *(char **)(a1 + 248);
  v146 = *(char **)(a1 + 256);
  v248 = *(char **)(a1 + 240);
  uint64_t v147 = strchr(v248, 32);
  v255 = v145;
  v251 = strchr(v145, 32);
  v252 = v146;
  v249 = v147;
  v250 = strchr(v146, 32);
  HIWORD(v292) = v292;
  if (!v147)
  {
LABEL_431:
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 2, 1, &v291, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      goto LABEL_277;
    }
    __int16 v159 = strlen(v248);
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 3, (unsigned __int16)(v159 + 1), v248, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      goto LABEL_277;
    }
    __int16 v160 = strlen(v255);
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 5, (unsigned __int16)(v160 + 1), v255, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      goto LABEL_277;
    }
    __int16 v161 = strlen(v252);
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 6, (unsigned __int16)(v161 + 1), v252, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      goto LABEL_277;
    }
    LOWORD(v273) = 0;
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t **, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 8, 1, &v274, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      goto LABEL_277;
    }
    goto LABEL_436;
  }
  while (1)
  {
    for (unsigned __int16 i = HIWORD(v292); ; HIWORD(v292) = ++i)
    {
      unsigned int v149 = v297[i];
      BOOL v150 = v149 > 0x20 || ((1 << v149) & 0x100002601) == 0;
      if (!v150 || v149 == 95) {
        break;
      }
    }
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 2, 1, (char *)&v292 + 2, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    ++HIWORD(v292);
    char *v249 = 0;
    __int16 v151 = strlen(v248);
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 3, (unsigned __int16)(v151 + 1), v248, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    if (v251) {
      char *v251 = 0;
    }
    __int16 v152 = strlen(v255);
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 5, (unsigned __int16)(v152 + 1), v255, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    unsigned int v153 = v255;
    if (v251) {
      unsigned int v153 = v251 + 1;
    }
    v255 = v153;
    if (v250) {
      char *v250 = 0;
    }
    __int16 v154 = strlen(v252);
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 6, (unsigned __int16)(v154 + 1), v252, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    uint64_t v155 = v252;
    if (v250) {
      uint64_t v155 = v250 + 1;
    }
    v252 = v155;
    LOWORD(v273) = 0;
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 8, 1, &v273, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    unsigned __int16 v156 = v296;
    if ((_WORD)v296 && HIWORD(v292) > (unsigned __int16)v292)
    {
      while (1)
      {
        unsigned __int16 v157 = v156;
        uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 120))(a3, a4, v156, &v296);
        if ((v113 & 0x80000000) != 0) {
          goto LABEL_277;
        }
        if (!(_WORD)v296) {
          goto LABEL_421;
        }
        uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 168))(a3, a4);
        if ((v113 & 0x80000000) != 0) {
          goto LABEL_277;
        }
        unsigned __int16 v156 = v296;
        if (!(_WORD)v296 || HIWORD(v292) <= (unsigned __int16)v292) {
          goto LABEL_421;
        }
      }
    }
    unsigned __int16 v157 = v296;
LABEL_421:
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v32 + 80))(a3, a4, v157, &v296);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 1, 1, (char *)&v292 + 2, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 0, 1, (char *)&v285 + 4, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 7, 1, &v275, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    __int16 v158 = strlen(v276);
    uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)v32 + 160))(a3, a4, (unsigned __int16)v296, 9, (unsigned __int16)(v158 + 1), v276, (char *)&v293 + 2);
    if ((v113 & 0x80000000) != 0) {
      break;
    }
    v248 = v249 + 1;
    v249 = strchr(v249 + 1, 32);
    if (v255) {
      v251 = strchr(v255, 32);
    }
    if (v252) {
      v250 = strchr(v252, 32);
    }
    if (!v249) {
      goto LABEL_431;
    }
  }
LABEL_277:
  uint64_t v9 = v113;
LABEL_503:
  unsigned int v56 = 0;
  uint64_t v55 = 0;
LABEL_282:
  if (v267) {
    heap_Free(*(void **)(*(void *)a1 + 8), v267);
  }
LABEL_96:
  if (v297) {
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v297);
  }
  if (v56) {
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v56);
  }
  if (v55) {
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v55);
  }
  return v9;
}

uint64_t fe_oneword_ResetCarryOverSentenceParams(uint64_t result)
{
  uint64_t v1 = *(unsigned char **)(result + 2256);
  if (v1 && *v1) {
    *uint64_t v1 = 0;
  }
  uint64_t v2 = *(unsigned char **)(result + 2264);
  if (v2)
  {
    if (*v2) {
      *uint64_t v2 = 0;
    }
  }
  return result;
}

uint64_t hlp_LoadDTData(uint64_t a1)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  *(void *)&__c[3] = 0;
  uint64_t v64 = 0;
  __c[0] = 0;
  uint64_t v61 = 0;
  *(void *)uint64_t v62 = 0;
  unsigned int __s = 0;
  char v59 = 0;
  int v58 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  int v55 = 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t Str = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "dtlhp2lhtts", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  *(_DWORD *)(a1 + 576) = *(_WORD *)&__c[1] != 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t Str = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "dtcharsetutf8", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  if (*(_WORD *)&__c[1]) {
    __strcpy_chk();
  }
  else {
    *(unsigned char *)(a1 + 584) = 0;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t Str = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "phonlhp2lhtts", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  *(_DWORD *)(a1 + 580) = *(_WORD *)&__c[1] == 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t Str = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "extramaintrans", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  *(_DWORD *)(a1 + 852) = *(_WORD *)&__c[1]
                       || strstr("eng,ena,enu,dun,frc,frf,ged,iti,ptb,ptp,sws,spe,spm", *(const char **)(a1 + 1208));
  *(_DWORD *)(a1 + 1204) = (paramc_ParamGet(*(void *)(*(void *)a1 + 40), (uint64_t)"mlset", &__s, 0) & 0x80000000) == 0
                        && strlen(__s) >= 4
                        && (paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"extclccfg", &v64) & 0x80000000) != 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t Str = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "lidenx", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  *(_DWORD *)(a1 + 928) = *(_WORD *)&__c[1] != 0;
  *(_DWORD *)(a1 + 932) = 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t Str = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "lidenxchars", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  if (*(_WORD *)&__c[1])
  {
    uint64_t v3 = strchr(**(char ***)&__c[3], __c[0]);
    if (v3) {
      *uint64_t v3 = 0;
    }
    __strcpy_chk();
  }
  else
  {
    *(unsigned char *)(a1 + 944) = 0;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t Str = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "dpsmultitrans", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  if (*(_WORD *)&__c[1])
  {
    uint64_t v4 = **(const char ***)&__c[3];
    uint64_t v5 = strchr(**(char ***)&__c[3], __c[0]);
    if (v5)
    {
      *uint64_t v5 = 0;
      uint64_t v4 = **(const char ***)&__c[3];
    }
    char v6 = atoi(v4);
  }
  else
  {
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 1200) = v6;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"langcode", v62);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"fecfg", &v61);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  LOBYTE(v67[0]) = 0;
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  int v7 = brokeraux_ComposeBrokerString(*(void *)a1, (const char *)v67, 0, 1, *(char **)v62, 0, 0, (char *)v66, 0x100uLL);
  if (v7 < 0) {
    return v7 | 0x89B02000;
  }
  if ((ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), 2, (const char *)v66, "DETR", 1031, (uint64_t *)&v57) & 0x80000000) != 0)return 0; {
  while (2)
  }
  {
    if ((ssftriff_reader_OpenChunk((uint64_t)v57, &v58, (unsigned int *)&v55, &v56, v8, v9, v10, v11) & 0x80000000) != 0) {
      return ssftriff_reader_ObjClose(v57, v12, v13, v14, v15, v16, v17, v18);
    }
    unsigned int v54 = 256;
    uint64_t Str = ssftriff_reader_ReadStringZ((uint64_t)v57, v56, v55, 0, __dst, &v54);
    if ((Str & 0x80000000) != 0) {
      return Str;
    }
    uint64_t v19 = heap_Alloc(*(void *)(*(void *)a1 + 8), 24);
    if (!v19)
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v21, v22, v23, v24, v53);
      return 2310021130;
    }
    uint64_t v25 = (uint64_t *)v19;
    uint64_t Str = ssftriff_reader_DetachChunkData((uint64_t)v57, v25, v25 + 1, v20, v21, v22, v23, v24);
    if ((Str & 0x80000000) != 0) {
      return Str;
    }
    unsigned int v26 = v54;
    if ((v54 & 3) != 0)
    {
      unsigned int v26 = v54 - (v54 | 0xFFFFFFFC);
      unsigned int v54 = v26;
    }
    PNEW_LexDT_Con(a1 + 888, a1 + 888, 0, (_DWORD *)(v25[1] + v26), 0, v25 + 2);
    uint64_t v28 = LH_ERROR_to_VERROR(v27);
    if ((v28 & 0x80000000) != 0)
    {
      uint64_t v47 = v28;
      ssftriff_reader_ReleaseChunkData((void *)*v25, v29, v30, v31, v32, v33, v34, v35);
      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v25);
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v49, v50, v51, v52, v53);
    }
    else
    {
      uint64_t v36 = __dst;
      do
      {
        uint64_t v37 = strchr(v36, 44);
        uint64_t v38 = v37;
        if (v37) {
          *uint64_t v37 = 0;
        }
        uint64_t v39 = ssftmap_Insert(*(void *)(a1 + 568), (uint64_t)v36, (uint64_t)v25);
        if ((v39 & 0x80000000) != 0)
        {
          uint64_t v47 = v39;
          ssftriff_reader_ReleaseChunkData((void *)*v25, v40, v41, v42, v43, v44, v45, v46);
          heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v25);
          return v47;
        }
        uint64_t v36 = v38 + 1;
      }
      while (v38);
      uint64_t v47 = ssftriff_reader_CloseChunk((uint64_t)v57);
      if ((v47 & 0x80000000) == 0) {
        continue;
      }
    }
    break;
  }
  return v47;
}

uint64_t hlp_GenXtraMainVarMW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned __int16 v18 = a4;
  if (a5 >= a6) {
    return 0;
  }
  unsigned int v9 = a6 - a5;
  if ((int)(a6 - a5) > 127) {
    return 0;
  }
  __strncpy_chk();
  uint64_t v17 = &v20[v9];
  char *v17 = 0;
  if (oneword_CountOrthographicWords(v20, (int)v17, 0x23u, 0x23u) < 2) {
    return hlp_GenXtraMainVar(a1, a2, a3, a4, a5, a6, a7, &v18);
  }
  oneword_ReplaceAllCharactersInOrthography(v20, (int)v17, 0x23u, 32);
  uint64_t v10 = 0;
  uint64_t v19 = 0;
  do
  {
    oneword_FindNextWord((size_t)v20, 5u, v9, (unsigned int *)&v19 + 1, (unsigned int *)&v19);
    if (HIDWORD(v19) < v9)
    {
      uint64_t v10 = hlp_GenXtraMainVar(a1, a2, a3, v18, (unsigned __int16)(WORD2(v19) + a5), (unsigned __int16)(v19 + a5), a7, &v18);
      if ((v10 & 0x80000000) != 0) {
        break;
      }
    }
    HIDWORD(v19) = v19;
  }
  while (v19 < v9);
  return v10;
}

BOOL hlp_checkDoClmForForeignLanguage(uint64_t a1, const char *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  __s1 = 0;
  v8[0] = 7171171;
  __strcat_chk();
  if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)v8, &__s1) & 0x80000000) != 0
    || (uint64_t v4 = __s1) == 0)
  {
    __s1 = 0;
    int Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"noclmset", &__s1);
    uint64_t v4 = __s1;
    if (Str < 0 || !__s1)
    {
      if (!__s1) {
        return 1;
      }
    }
    else
    {
      if (strstr(__s1, a2)) {
        uint64_t v4 = "no";
      }
      else {
        uint64_t v4 = "yes";
      }
      __s1 = v4;
    }
  }
  return strcmp(v4, "yes") == 0;
}

uint64_t fe_oneword_TreatNLUMarkup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v134 = 0;
  int v135 = 0;
  int v133 = 0;
  int v130 = 0;
  int __dst = 0;
  uint64_t v129 = 0;
  uint64_t v127 = 0;
  int v126 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, (char *)&v135 + 2);
  if ((v6 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, int *))(*(void *)(a1 + 56) + 184))(a2, a3, HIWORD(v135), 0, &v126) & 0x80000000) == 0&& (unsigned __int16)v126 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v135), 0, &v129, &v134);
    if ((v6 & 0x80000000) == 0 && (unsigned __int16)v134 >= 2u)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v135), 1, &v127, (char *)&v126 + 2);
      if ((v7 & 0x80000000) != 0) {
        return v7;
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, HIWORD(v135), &v135);
      if ((v6 & 0x80000000) == 0)
      {
        unsigned __int16 v132 = 0;
        unsigned __int16 v131 = 0;
        LOWORD(v8) = v135;
        if (!(_WORD)v135)
        {
          uint64_t v19 = 0;
          uint64_t v120 = 0;
          uint64_t v121 = 0;
          LODWORD(v9) = 0;
LABEL_264:
          unsigned int v109 = HIWORD(v126);
          if (v9 < HIWORD(v126))
          {
            unint64_t v110 = v9;
            uint64_t v111 = 32 * v9;
            do
            {
              if (*(_DWORD *)(v127 + v111) == 51)
              {
                uint64_t v112 = *(void *)(a1 + 2264);
                if (v112) {
                  int v113 = strlen(*(const char **)(a1 + 2264));
                }
                else {
                  int v113 = 0;
                }
                int v114 = strlen(*(const char **)(v127 + v111 + 24));
                v115 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v112, (v113 + v114 + 2));
                if (!v115) {
                  goto LABEL_282;
                }
                *(void *)(a1 + 2264) = v115;
                hlp_NLUStrOverride(v115, *(char **)(v127 + v111 + 24), 0);
                unsigned int v109 = HIWORD(v126);
              }
              ++v110;
              v111 += 32;
            }
            while (v110 < v109);
          }
          uint64_t v116 = v19;
          uint64_t v46 = (char *)v120;
          uint64_t v79 = (char *)v121;
          goto LABEL_285;
        }
        unint64_t v9 = 0;
        uint64_t v120 = 0;
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        while (1)
        {
          uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v8, 0, 1, &v130, &v134);
          if ((v10 & 0x80000000) != 0)
          {
LABEL_275:
            uint64_t v6 = v10;
LABEL_276:
            uint64_t v79 = (char *)v121;
            goto LABEL_277;
          }
          if ((v130 - 9) >= 6 && v130 != 4) {
            goto LABEL_181;
          }
          uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v135, 1, 1, &v132, &v134);
          if ((v10 & 0x80000000) != 0) {
            goto LABEL_275;
          }
          uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v135, 2, 1, &v131, &v134);
          if ((v10 & 0x80000000) != 0) {
            goto LABEL_275;
          }
          if (v9 >= HIWORD(v126))
          {
LABEL_25:
            int v15 = *(_DWORD *)(v127 + 16);
          }
          else
          {
            int v12 = *(_DWORD *)(v127 + 12);
            uint64_t v13 = (_DWORD *)(v127 + 32 * v9);
            unint64_t v14 = HIWORD(v126) - (unint64_t)v9;
            while (1)
            {
              int v15 = v13[3] - v12;
              uint64_t v16 = (unsigned __int16)(*((_WORD *)v13 + 6) - v12);
              if (*v13 == 1 && v16 >= v131) {
                break;
              }
              v13 += 8;
              if (!--v14) {
                goto LABEL_25;
              }
            }
            BOOL v33 = *((_WORD *)v13 + 6) == (_WORD)v12 || v16 == *(_DWORD *)(v127 + 16);
            if (!v33 && *(unsigned char *)(v129 + v16) != 32)
            {
              LODWORD(v125) = v16 - 1;
              utf8_GetPreviousValidUtf8Offset(v129, (unsigned int *)&v125);
              int v34 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(v129 + v16));
              int v35 = v125;
              int v36 = *(unsigned __int8 *)(v129 + v125);
              if (v36 != 95 && v36 != 32) {
                int v35 = v34 + v15;
              }
              int v15 = v35;
            }
          }
          LOWORD(v133) = 0;
          unsigned __int16 v18 = *(const char **)(a1 + 2264);
          if (v18 && *v18)
          {
            LOWORD(v133) = strlen(v18) + 1;
            uint64_t v19 = (char *)v122;
            uint64_t v20 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v122, (unsigned __int16)v133);
            if (!v20) {
              goto LABEL_282;
            }
            uint64_t v25 = v20;
            unsigned int v26 = strcpy(v20, *(const char **)(a1 + 2264));
            **(unsigned char **)(a1 + 2264) = 0;
            uint64_t v122 = (uint64_t)v26;
          }
          else
          {
            uint64_t v25 = 0;
          }
          unsigned int v27 = HIWORD(v126);
          if (v9 < HIWORD(v126))
          {
            uint64_t v28 = 32 * v9;
            unint64_t v9 = v9;
            while (v15 << 16 > (*(_DWORD *)(v127 + v28 + 12) - *(_DWORD *)(v127 + 12)) << 16)
            {
              if (*(_DWORD *)(v127 + v28) == 51)
              {
                LOWORD(v133) = strlen(*(const char **)(v127 + v28 + 24)) + v133 + 1;
                uint64_t v19 = (char *)v122;
                uint64_t v29 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v122, (unsigned __int16)v133);
                if (!v29) {
                  goto LABEL_282;
                }
                uint64_t v30 = v29;
                if (v25)
                {
                  uint64_t v31 = v127;
                  BOOL v32 = *(_DWORD *)(v127 + v28 + 12) + 1 == *(_DWORD *)(v127 + 16) + *(_DWORD *)(v127 + 12);
                }
                else
                {
                  BOOL v32 = 0;
                  *uint64_t v29 = 0;
                  uint64_t v31 = v127;
                }
                hlp_NLUStrOverride(v29, *(char **)(v31 + v28 + 24), v32);
                unsigned int v27 = HIWORD(v126);
                uint64_t v122 = (uint64_t)v30;
                uint64_t v25 = v30;
              }
              else
              {
                uint64_t v30 = v25;
              }
              ++v9;
              v28 += 32;
              if (v9 >= v27) {
                goto LABEL_53;
              }
            }
            uint64_t v30 = v25;
LABEL_53:
            unint64_t v9 = (unsigned __int16)v9;
            uint64_t v25 = v30;
          }
          if (!v25) {
            break;
          }
          __int16 v37 = 2 * strlen(v25);
          unsigned __int16 v38 = v37 + 2;
          LOWORD(v133) = v37 + 2;
          uint64_t v39 = *(const char **)(a1 + 2256);
          if (*v39)
          {
            unsigned __int16 v38 = v37 + strlen(v39) + 3;
            LOWORD(v133) = v38;
          }
          uint64_t v40 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v122, v38);
          if (!v40)
          {
            uint64_t v19 = (char *)v122;
LABEL_282:
            uint64_t v46 = (char *)v120;
            goto LABEL_283;
          }
          uint64_t v19 = (char *)v40;
          unint64_t v119 = v9;
          uint64_t v41 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v120, (unsigned __int16)v133);
          if (!v41)
          {
            uint64_t v6 = 2310021130;
            log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v42, v43, v44, v45, v118);
            uint64_t v79 = (char *)v121;
            uint64_t v46 = (char *)v120;
            goto LABEL_286;
          }
          uint64_t v46 = (char *)v41;
          int __dst = v19;
          uint64_t v47 = v19;
          do
          {
            if ((*v47 | 0x20) == 0x72 && v47[1] == 95)
            {
              strcpy(v46, *(const char **)(a1 + 2256));
              LOWORD(v133) = (unsigned __int16)hlp_NLUStrKeyLen(__dst);
              if (v19 < __dst)
              {
                BOOL v48 = v19;
                do
                {
                  int v49 = (unsigned __int16)v133;
                  if (v49 == hlp_NLUStrKeyLen(v48)
                    && !strncmp(__dst + 2, v48 + 2, (unsigned __int16)v133 - 2))
                  {
                    unsigned int v50 = *v48;
                    if (v50 > 0x64)
                    {
                      if (v50 == 101)
                      {
LABEL_77:
                        if (v48[1] == 95) {
                          hlp_NLUStrRemoveI(v46, v48);
                        }
                        goto LABEL_66;
                      }
                      if (v50 == 115)
                      {
LABEL_74:
                        if (v48[1] == 95) {
                          hlp_NLUStrAddI(v46, v48);
                        }
                      }
                    }
                    else
                    {
                      if (v50 == 69) {
                        goto LABEL_77;
                      }
                      if (v50 == 83) {
                        goto LABEL_74;
                      }
                    }
                  }
LABEL_66:
                  BOOL v48 = hlp_NLUStrNext(v48);
                }
                while (v48 < __dst);
              }
              uint64_t v51 = v46;
              do
              {
                if (*v51) {
                  char *v51 = 69;
                }
                uint64_t v51 = hlp_NLUStrNext(v51);
              }
              while (v51);
              LOWORD(v133) = strlen(v46);
              size_t v52 = strlen(__dst);
              memmove(&__dst[(unsigned __int16)v133 + 1], __dst, v52 + 1);
              strncpy(__dst, v46, (unsigned __int16)v133);
              __dst[(unsigned __int16)v133] = 59;
              __dst += (unsigned __int16)v133 + 1;
              uint64_t v47 = hlp_NLUStrStrip(__dst);
            }
            else
            {
              uint64_t v47 = hlp_NLUStrNext(v47);
            }
            int __dst = v47;
          }
          while (v47);
          int __dst = v19;
          unsigned int v53 = v19;
          while (2)
          {
            if ((*v53 | 0x20) == 0x65 && v53[1] == 95)
            {
              unsigned int v54 = hlp_NLUStrNext(v53);
              LOWORD(v133) = (unsigned __int16)hlp_NLUStrLength(__dst);
              if (v54)
              {
                while (1)
                {
                  if ((*v54 | 0x20) == 0x73 && v54[1] == 95)
                  {
                    int v55 = (unsigned __int16)v133;
                    if (v55 == hlp_NLUStrLength(v54)
                      && !strncmp(__dst + 2, v54 + 2, (unsigned __int16)v133 - 2))
                    {
                      break;
                    }
                  }
                  unsigned int v54 = hlp_NLUStrNext(v54);
                  if (!v54) {
                    goto LABEL_95;
                  }
                }
                hlp_NLUStrStrip(v54);
                unsigned int v53 = hlp_NLUStrStrip(__dst);
                goto LABEL_97;
              }
LABEL_95:
              unsigned int v53 = __dst;
            }
            unsigned int v53 = hlp_NLUStrNext(v53);
LABEL_97:
            int __dst = v53;
            if (v53) {
              continue;
            }
            break;
          }
          int __dst = v19;
          uint64_t v56 = v19;
LABEL_100:
          while (2)
          {
            if ((*v56 | 0x20) != 0x73 || v56[1] != 95) {
              goto LABEL_117;
            }
            uint64_t v57 = hlp_NLUStrNext(v56);
            LOWORD(v133) = (unsigned __int16)hlp_NLUStrLength(__dst);
            if (v57)
            {
              int v58 = 0;
              do
              {
                if (v58)
                {
                  int v59 = *v57;
                  if ((v59 | 0x20) != 0x65) {
                    goto LABEL_110;
                  }
                  if (v57[1] == 95)
                  {
                    int v60 = (unsigned __int16)v133;
                    if (v60 == hlp_NLUStrLength(v57)
                      && !strncmp(__dst + 2, v57 + 2, (unsigned __int16)v133 - 2))
                    {
                      hlp_NLUStrStrip(v57);
                      hlp_NLUStrStrip(__dst);
                      uint64_t v56 = __dst;
                      if (!__dst) {
                        goto LABEL_120;
                      }
                      goto LABEL_100;
                    }
                  }
                }
                int v59 = *v57;
LABEL_110:
                if (v59)
                {
                  if (v57[1] == 95)
                  {
                    int v61 = (unsigned __int16)v133;
                    if (v61 == hlp_NLUStrLength(v57)
                      && !strncmp(__dst + 2, v57 + 2, (unsigned __int16)v133 - 2))
                    {
                      int v58 = 1;
                    }
                  }
                }
                uint64_t v57 = hlp_NLUStrNext(v57);
              }
              while (v57);
            }
            uint64_t v56 = __dst;
LABEL_117:
            uint64_t v56 = hlp_NLUStrNext(v56);
            int __dst = v56;
            if (v56) {
              continue;
            }
            break;
          }
LABEL_120:
          int __dst = v19;
          uint64_t v62 = v19;
          while (2)
          {
            if ((*v62 | 0x20) != 0x65
              || v62[1] != 95
              || (v63 = hlp_NLUStrSearchI(*(char **)(a1 + 2256), v62), uint64_t v62 = __dst, v63))
            {
              uint64_t v64 = v62;
              goto LABEL_125;
            }
            LOWORD(v133) = (unsigned __int16)hlp_NLUStrLength(__dst);
            uint64_t v64 = __dst;
            if (v19 >= __dst) {
              goto LABEL_137;
            }
            int v66 = 0;
            uint64_t v67 = v19;
            do
            {
              if ((*v67 | 0x20) == 0x73 && v67[1] == 95)
              {
                int v68 = (unsigned __int16)v133;
                if (v68 == hlp_NLUStrLength(v67)
                  && !strncmp(__dst + 2, v67 + 2, (unsigned __int16)v133 - 2))
                {
                  int v66 = 1;
                }
              }
              uint64_t v67 = hlp_NLUStrNext(v67);
              uint64_t v64 = __dst;
            }
            while (v67 < __dst);
            if (v66) {
LABEL_125:
            }
              __int16 v65 = hlp_NLUStrNext(v64);
            else {
LABEL_137:
            }
              __int16 v65 = hlp_NLUStrStrip(v64);
            uint64_t v62 = v65;
            int __dst = v65;
            if (v65) {
              continue;
            }
            break;
          }
          hlp_NLUStrJoin(v19, &byte_20D5A22AE);
          HIWORD(v134) = v135;
          int v123 = v132;
          uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 120))(a2, a3);
          uint64_t v6 = v69;
          if ((v69 & 0x80000000) != 0) {
            goto LABEL_284;
          }
          if (HIWORD(v134))
          {
            uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a2, a3);
            if ((v6 & 0x80000000) != 0) {
              goto LABEL_284;
            }
            int v70 = HIWORD(v134);
            if (HIWORD(v134))
            {
              unsigned int v71 = v132;
              int v72 = v123;
              while (1)
              {
                if (v71 >= (unsigned __int16)v15) {
                  goto LABEL_185;
                }
                uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v70, 0, 1, &v130, &v134);
                if ((v73 & 0x80000000) != 0) {
                  break;
                }
                if ((v130 - 9) < 6 || v130 == 4) {
                  int v72 = v132;
                }
                uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 120))(a2, a3, HIWORD(v134), (char *)&v134 + 2);
                if ((v6 & 0x80000000) != 0) {
                  goto LABEL_284;
                }
                if (!HIWORD(v134))
                {
                  int v70 = 0;
                  goto LABEL_185;
                }
                uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a2, a3);
                if ((v6 & 0x80000000) != 0) {
                  goto LABEL_284;
                }
                int v70 = HIWORD(v134);
                if (!HIWORD(v134)) {
                  goto LABEL_185;
                }
                unsigned int v71 = v132;
              }
LABEL_274:
              uint64_t v6 = v73;
LABEL_284:
              uint64_t v116 = v19;
              uint64_t v79 = (char *)v121;
              goto LABEL_285;
            }
          }
          else
          {
            int v70 = 0;
          }
          int v72 = v123;
LABEL_185:
          int v8 = (unsigned __int16)v135;
          if ((_WORD)v135 && (unsigned __int16)v135 != v70)
          {
            unsigned __int16 v86 = 0;
            while (1)
            {
              uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v8, 0, 1, &v130, &v134);
              if ((v73 & 0x80000000) != 0) {
                goto LABEL_274;
              }
              if ((v130 - 9) < 6 || v130 == 4) {
                break;
              }
LABEL_255:
              uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 120))(a2, a3);
              if ((v6 & 0x80000000) != 0) {
                goto LABEL_284;
              }
              int v8 = (unsigned __int16)v135;
              if (!(_WORD)v135 || (unsigned __int16)v135 == HIWORD(v134)) {
                goto LABEL_258;
              }
            }
            if (v86)
            {
              uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v86, 1, 1, &v133, &v134);
              if ((v73 & 0x80000000) != 0) {
                goto LABEL_274;
              }
            }
            uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v135, 1, 1, &v132, &v134);
            if ((v73 & 0x80000000) != 0) {
              goto LABEL_274;
            }
            uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v135, 2, 1, &v131, &v134);
            if ((v73 & 0x80000000) != 0) {
              goto LABEL_274;
            }
            if (v86 && (unsigned __int16)v133 == v132)
            {
              uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 56)
                                                                                                 + 176))(a2, a3, v86, 14, &__dst, &v134);
              if ((v73 & 0x80000000) != 0) {
                goto LABEL_274;
              }
              __int16 v88 = strlen(__dst);
              uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v135, 14, (unsigned __int16)(v88 + 1), __dst, (char *)&v133 + 2);
              if ((v73 & 0x80000000) != 0) {
                goto LABEL_274;
              }
LABEL_254:
              unsigned __int16 v86 = v135;
              goto LABEL_255;
            }
            __int16 v89 = strlen(v19);
            unsigned __int16 v90 = v89 + 1;
            LOWORD(v133) = v89 + 1;
            uint64_t v91 = *(unsigned char **)(a1 + 2256);
            if (*v91)
            {
              unsigned __int16 v90 = v89 + strlen(*(const char **)(a1 + 2256)) + 2;
              LOWORD(v133) = v90;
            }
            uint64_t v92 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v91, v90);
            if (v92)
            {
              *(void *)(a1 + 2256) = v92;
              int v93 = strlen(v19);
              unsigned __int16 v94 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v121, (unsigned __int16)v133 + v93 + 1);
              if (v94)
              {
                uint64_t v79 = v94;
                int v95 = strcpy(v94, v19);
                while (1)
                {
                  unsigned int v96 = *v95;
                  if (v96 > 0x64)
                  {
                    if (v96 != 101)
                    {
                      if (v96 != 115) {
                        goto LABEL_225;
                      }
LABEL_214:
                      if (v95[1] != 95) {
                        goto LABEL_225;
                      }
                      unsigned int v97 = hlp_NLUStrSearchI(*(char **)(a1 + 2256), v95);
                      if (v132 == v123) {
                        hlp_NLUStrAddI(*(char **)(a1 + 2256), v95);
                      }
                      if (!v97) {
                        goto LABEL_225;
                      }
                      goto LABEL_224;
                    }
                  }
                  else if (v96 != 69)
                  {
                    if (v96 != 83) {
                      goto LABEL_225;
                    }
                    goto LABEL_214;
                  }
                  if (v95[1] != 95) {
                    goto LABEL_225;
                  }
                  if (v132 == v72) {
                    hlp_NLUStrRemoveI(*(const char **)(a1 + 2256), v95);
                  }
                  if (!hlp_NLUStrSearchI(*(char **)(a1 + 2256), v95))
                  {
LABEL_225:
                    unsigned __int16 v98 = hlp_NLUStrNext(v95);
                    goto LABEL_226;
                  }
LABEL_224:
                  unsigned __int16 v98 = hlp_NLUStrStrip(v95);
LABEL_226:
                  int v95 = v98;
                  if (!v98)
                  {
                    hlp_NLUStrJoin(v79, *(const char **)(a1 + 2256));
                    int __dst = v79;
                    v99 = v79;
                    do
                    {
                      if ((*v99 | 0x20) != 0x69) {
                        goto LABEL_240;
                      }
                      if (v99[1] != 95) {
                        goto LABEL_240;
                      }
                      LOWORD(v133) = (unsigned __int16)hlp_NLUStrLength(v99);
                      v99 = __dst;
                      if (v79 >= __dst) {
                        goto LABEL_240;
                      }
                      int v100 = 0;
                      uint64_t v101 = v79;
                      do
                      {
                        if (*v101)
                        {
                          if (v101[1] == 95)
                          {
                            int v102 = (unsigned __int16)v133;
                            if (v102 == hlp_NLUStrLength(v101)
                              && !strncmp(__dst + 2, v101 + 2, (unsigned __int16)v133 - 2))
                            {
                              int v100 = 1;
                            }
                          }
                        }
                        uint64_t v101 = hlp_NLUStrNext(v101);
                        v99 = __dst;
                      }
                      while (v101 < __dst);
                      if (v100) {
                        v99 = hlp_NLUStrStrip(__dst);
                      }
                      else {
LABEL_240:
                      }
                        v99 = hlp_NLUStrNext(v99);
                      int __dst = v99;
                    }
                    while (v99);
                    hlp_NLUStrJoin(v79, &byte_20D5A22AE);
                    if (v132 == v72)
                    {
                      uint64_t v125 = 0;
                      unsigned __int16 v124 = 0;
                      unsigned int v103 = hlp_NLUStrFind(v79, "PUNC", &v125, &v124);
                      if (!v103) {
                        goto LABEL_252;
                      }
                      uint64_t v104 = v103;
                      if (!strstr(v103, ":DASH")) {
                        goto LABEL_252;
                      }
LABEL_250:
                      if (*(unsigned char *)(v131 + v129 - 1) == 44) {
                        goto LABEL_252;
                      }
LABEL_251:
                      hlp_NLUStrStrip(v104);
                      goto LABEL_252;
                    }
                    uint64_t v125 = 0;
                    unsigned __int16 v124 = 0;
                    uint64_t v105 = hlp_NLUStrFind(v79, "BND", &v125, &v124);
                    if (v105) {
                      hlp_NLUStrStrip(v105);
                    }
                    uint64_t v106 = hlp_NLUStrFind(v79, "PUNC", &v125, &v124);
                    if (v106)
                    {
                      uint64_t v104 = v106;
                      if (strstr(v106, ":DASH")) {
                        goto LABEL_250;
                      }
                      goto LABEL_251;
                    }
LABEL_252:
                    __int16 v107 = strlen(v79);
                    uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v135, 14, (unsigned __int16)(v107 + 1), v79, (char *)&v133 + 2);
                    if ((v108 & 0x80000000) == 0)
                    {
                      uint64_t v121 = (uint64_t)v79;
                      goto LABEL_254;
                    }
                    uint64_t v6 = v108;
                    uint64_t v116 = v19;
LABEL_285:
                    uint64_t v19 = v116;
                    if (v116) {
LABEL_286:
                    }
                      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v19);
                    if (v46) {
                      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v46);
                    }
                    if (v79) {
                      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v79);
                    }
                    return v6;
                  }
                }
              }
            }
LABEL_283:
            uint64_t v6 = 2310021130;
            log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v21, v22, v23, v24, v118);
            goto LABEL_284;
          }
LABEL_258:
          uint64_t v120 = (uint64_t)v46;
          unint64_t v9 = v119;
LABEL_259:
          uint64_t v122 = (uint64_t)v19;
          if (!v8) {
            goto LABEL_264;
          }
        }
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56)
                                                                                                 + 168))(a2, a3, (unsigned __int16)v135, 0, 1, &v130, &v134);
        if ((v10 & 0x80000000) != 0) {
          goto LABEL_275;
        }
        if ((v130 - 9) >= 6 && v130 != 4) {
          goto LABEL_181;
        }
        int v76 = *(const char **)(a1 + 2256);
        if (!*v76) {
          goto LABEL_181;
        }
        int v77 = strlen(v76);
        int v78 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v121, (v77 + 1));
        if (v78)
        {
          uint64_t v79 = v78;
          int v80 = strcpy(v78, *(const char **)(a1 + 2256));
          int __dst = v80;
          do
          {
            if ((*v80 | 0x20) != 0x69) {
              goto LABEL_177;
            }
            if (v80[1] != 95) {
              goto LABEL_177;
            }
            LOWORD(v133) = (unsigned __int16)hlp_NLUStrLength(v80);
            int v80 = __dst;
            if (v79 >= __dst) {
              goto LABEL_177;
            }
            int v81 = 0;
            uint64_t v82 = v79;
            do
            {
              if (*v82)
              {
                if (v82[1] == 95)
                {
                  int v83 = (unsigned __int16)v133;
                  if (v83 == hlp_NLUStrLength(v82)
                    && !strncmp(__dst + 2, v82 + 2, (unsigned __int16)v133 - 2))
                  {
                    int v81 = 1;
                  }
                }
              }
              uint64_t v82 = hlp_NLUStrNext(v82);
              int v80 = __dst;
            }
            while (v82 < __dst);
            if (v81) {
              int v80 = hlp_NLUStrStrip(__dst);
            }
            else {
LABEL_177:
            }
              int v80 = hlp_NLUStrNext(v80);
            int __dst = v80;
          }
          while (v80);
          hlp_NLUStrJoin(v79, &byte_20D5A22AE);
          __int16 v84 = strlen(v79);
          uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v135, 14, (unsigned __int16)(v84 + 1), v79, (char *)&v133 + 2);
          if ((v85 & 0x80000000) == 0)
          {
            uint64_t v121 = (uint64_t)v79;
LABEL_181:
            uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a2, a3, (unsigned __int16)v135, &v135);
            if ((v6 & 0x80000000) != 0) {
              goto LABEL_276;
            }
            int v8 = (unsigned __int16)v135;
            uint64_t v19 = (char *)v122;
            goto LABEL_259;
          }
          uint64_t v6 = v85;
LABEL_277:
          uint64_t v46 = (char *)v120;
          uint64_t v116 = (char *)v122;
          goto LABEL_285;
        }
        uint64_t v19 = (char *)v122;
        goto LABEL_282;
      }
    }
  }
  return v6;
}

uint64_t fe_oneword_ProcessPinyinMarkup(void *a1, uint64_t a2, uint64_t a3)
{
  int v66 = 0;
  unsigned __int16 v65 = 0;
  __src = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a2, a3, 1, 0, (char *)&v66 + 2);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void **, unsigned __int16 *))(a1[7] + 176))(a2, a3, HIWORD(v66), 1, &__src, &v65);
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v8 = v65;
    if (v65)
    {
      int v9 = 0;
      LOWORD(v10) = 0;
      int v11 = 0;
      int v12 = (char *)__src + 12;
      uint64_t v13 = v65;
      do
      {
        int v14 = *(v12 - 3);
        if (v14 == 99)
        {
          *v12 -= v11;
          int v9 = 1;
        }
        else if (v14 == 0x4000)
        {
          int v11 = (unsigned __int16)*v12;
          int v10 = v12[1] + *v12;
        }
        v12 += 8;
        --v13;
      }
      while (v13);
    }
    else
    {
      int v11 = 0;
      LOWORD(v10) = 0;
      int v9 = 0;
    }
    if (*(unsigned char *)a1[285] || v9 != 0)
    {
      uint64_t v16 = (void *)heap_Calloc(*(void **)(*a1 + 8), 1, 32 * v8);
      if (v16)
      {
        uint64_t v21 = (uint64_t)v16;
        memcpy(v16, __src, 32 * v65);
        uint64_t v22 = v65;
        if (*(unsigned char *)a1[285])
        {
          ++v65;
          uint64_t v23 = heap_Realloc(*(uint64_t **)(*a1 + 8), v21, 32 * (unsigned __int16)(v22 + 1));
          if (!v23)
          {
            uint64_t v7 = 2310021130;
            log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v24, v25, v26, v27, v59);
            goto LABEL_84;
          }
          uint64_t v28 = v23;
          uint64_t v22 = v65;
          if (v65)
          {
            uint64_t v29 = 0;
            uint64_t v30 = 32 * v65;
            unsigned int v31 = 1;
            while (1)
            {
              if (v29)
              {
                if (*(_DWORD *)(v23 + v29) == 1 && v31 < v65) {
                  break;
                }
              }
              v29 += 32;
              ++v31;
              if (v30 == v29) {
                goto LABEL_32;
              }
            }
            uint64_t v33 = v23 + v29;
            memmove((void *)(v23 + v29 + 32), (const void *)(v23 + v29), v30 - v29 - 32);
            *(_DWORD *)uint64_t v33 = 99;
            *(void *)(v33 + 12) = (*(_DWORD *)(v33 + 44) - v11);
            uint64_t v22 = v65;
          }
LABEL_32:
          uint64_t v21 = v28;
        }
        if (*((_DWORD *)a1 + 499))
        {
          uint64_t v34 = HIWORD(v66);
          int v73 = 0;
          __int16 v72 = 0;
          int v70 = 0;
          int v71 = 0;
          unsigned int __s = 0;
          uint64_t v69 = 0;
          uint64_t v67 = 0;
          uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v66), 0, &__s, &v73);
          if ((v35 & 0x80000000) != 0)
          {
            uint64_t v7 = v35;
            uint64_t v41 = 0;
          }
          else
          {
            size_t v36 = strlen(__s);
            uint64_t v41 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, v36 + 1);
            uint64_t v42 = *a1;
            if (v41)
            {
              uint64_t v43 = ssftstring_ObjOpen(*(void **)(v42 + 8), &v67);
              if ((v43 & 0x80000000) == 0)
              {
                uint64_t v43 = ssftstring_Reserve((uint64_t)v67, 30);
                if ((v43 & 0x80000000) == 0)
                {
                  if (v22)
                  {
                    uint64_t v44 = 0;
                    do
                    {
                      if (*(_DWORD *)(v21 + 32 * v44) == 99)
                      {
                        uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, v34, (char *)&v73 + 2);
                        if ((v43 & 0x80000000) != 0) {
                          goto LABEL_64;
                        }
                        uint64_t v45 = v21 + 32 * v44;
                        uint64_t v62 = (uint64_t *)(v45 + 24);
                        unsigned int v63 = (unsigned __int16 *)(v45 + 12);
                        while (HIWORD(v73))
                        {
                          uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
                          if ((v43 & 0x80000000) == 0)
                          {
                            uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a2, a3, HIWORD(v73), 1, 1, &v70, &v73);
                            if ((v43 & 0x80000000) == 0)
                            {
                              uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[7] + 168))(a2, a3, HIWORD(v73), 2, 1, (char *)&v70 + 2, &v73);
                              if ((v43 & 0x80000000) == 0)
                              {
                                strncpy(v41, &__s[(unsigned __int16)v70], HIWORD(v70) - (unint64_t)(unsigned __int16)v70);
                                v41[HIWORD(v70) - (unsigned __int16)v70] = 0;
                                if (v71 != 9 && v71 != 4) {
                                  goto LABEL_60;
                                }
                                if (!utf8_IsChineseLetter(v41)) {
                                  goto LABEL_60;
                                }
                                unsigned int v46 = *v63;
                                if (v46 >= HIWORD(v70) || v46 < (unsigned __int16)v70) {
                                  goto LABEL_60;
                                }
                                uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v73), 3, &v69, &v73);
                                if ((v43 & 0x80000000) != 0) {
                                  goto LABEL_64;
                                }
                                __int16 ChineseUTFCharNum = utf8_GetChineseUTFCharNum((uint64_t)__s, *v63);
                                __int16 v48 = utf8_GetChineseUTFCharNum((uint64_t)__s, (unsigned __int16)v70);
                                if (*v62)
                                {
                                  uint64_t v43 = hlpProcessWordPhon(a1, v69, (unsigned __int16)(ChineseUTFCharNum - v48 + 1), *v62, (uint64_t)v67);
                                  if ((v43 & 0x80000000) != 0) {
                                    goto LABEL_64;
                                  }
                                }
                                else
                                {
                                  uint64_t v43 = hlpProcessWordPhon(a1, v69, (unsigned __int16)(ChineseUTFCharNum - v48 + 1), a1[285], (uint64_t)v67);
                                  if ((v43 & 0x80000000) != 0) {
                                    goto LABEL_64;
                                  }
                                  *(unsigned char *)a1[285] = 0;
                                }
                                if (!ssftstring_Size((uint64_t)v67)
                                  || (int v61 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, __int16 *))(a1[7] + 160),
                                      unsigned int v60 = HIWORD(v73),
                                      unsigned __int16 v49 = ssftstring_Size((uint64_t)v67) + 1,
                                      uint64_t v50 = ssftstring_CStr((uint64_t)v67),
                                      uint64_t v43 = v61(a2, a3, v60, 3, v49, v50, &v72),
                                      (v43 & 0x80000000) == 0))
                                {
LABEL_60:
                                  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a2, a3, HIWORD(v73), (char *)&v73 + 2);
                                  if ((v43 & 0x80000000) == 0) {
                                    continue;
                                  }
                                }
                              }
                            }
                          }
                          goto LABEL_64;
                        }
                      }
                      ++v44;
                    }
                    while (v44 != v22);
                  }
                  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1[7] + 160))(a2, a3, v34, 1, v22, v21, &v72);
                }
              }
LABEL_64:
              uint64_t v7 = v43;
            }
            else
            {
              uint64_t v7 = 2310021130;
              log_OutPublic(*(void *)(v42 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v37, v38, v39, v40, v59);
            }
          }
          if (v67) {
            ssftstring_ObjClose(v67);
          }
          if (v41) {
            heap_Free(*(void **)(*a1 + 8), (uint64_t)v41);
          }
          if ((v7 & 0x80000000) != 0) {
            goto LABEL_84;
          }
          LODWORD(v22) = v65;
        }
        if (v22)
        {
          int v51 = 0;
          unsigned __int16 v52 = 0;
          do
          {
            unsigned int v53 = (_DWORD *)(v21 + 32 * v52);
            if (*v53 == 99)
            {
              uint64_t v54 = (v51 + 1);
              if ((unsigned __int16)v22 > v54) {
                memmove(v53, (const void *)(v21 + 32 * v54), 32 * ((unsigned __int16)v22 - (int)v54));
              }
              uint64_t v55 = v21 + 32 * v52;
              if (*(_DWORD *)(v55 + 12) >= (unsigned __int16)v10)
              {
                uint64_t v56 = *(const char **)(v55 + 24);
                size_t v57 = strlen(v56);
                memcpy((void *)a1[285], v56, v57 + 1);
              }
              LOWORD(v22) = --v65;
            }
            else
            {
              ++v52;
            }
            int v51 = v52;
          }
          while (v52 < (unsigned __int16)v22);
        }
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, int *))(a1[7] + 160))(a2, a3, HIWORD(v66), 1, (unsigned __int16)v22, v21, &v66);
LABEL_84:
        heap_Free(*(void **)(*a1 + 8), v21);
        return v7;
      }
      uint64_t v7 = 2310021130;
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v17, v18, v19, v20, v59);
    }
  }
  return v7;
}

uint64_t fe_oneword_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 62340, 2288);
  if ((v3 & 0x80000000) != 0) {
    return 2310021128;
  }
  uint64_t v4 = v3;
  fe_oneword_ResetCarryOverSentenceParams(a1);
  if (!*(_DWORD *)(a1 + 2004)) {
    return v4;
  }
  return oneword_posparser_End(a1);
}

uint64_t fe_oneword_ResourceTypes(uint64_t a1, int a2, void *a3)
{
  if ((safeh_HandleCheck(a1, a2, 62340, 2288) & 0x80000000) != 0) {
    return 2310021128;
  }
  uint64_t result = 0;
  *a3 = &fe_oneword_ResourceTypes_SZ_CONTENT_TYPES;
  return result;
}

uint64_t fe_oneword_ResourceUnload(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62340, 2288) & 0x80000000) != 0) {
    return 2310021128;
  }
  uint64_t v7 = a1[9];
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1[10] + 248);
  uint64_t v9 = a1[8];
  return v8(v9, v7, a3, a4);
}

uint64_t fe_oneword_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2310021121;
  }
  uint64_t result = 0;
  *a2 = &IFeOneword;
  return result;
}

uint64_t hlpProcessWordPhon(void *a1, const char *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t appended = ssftstring_Clear(a5);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  unsigned __int8 __c = 0;
  uint64_t v37 = 0;
  __int16 __c_1 = -1;
  uint64_t appended = (*(uint64_t (**)(void, void, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "parallel", a4, &v37, &__c_1, &__c);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  if (!__c_1)
  {
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"[PINYIN] ERROR [lhp for tagpyt=%s not found]", v11, v12, v13, a4);
    return 7;
  }
  int v14 = *v37;
  while (1)
  {
    int v15 = strchr(v14, __c);
    if (!v15) {
      break;
    }
    *int v15 = 0;
  }
  if (a3 < 2)
  {
    unsigned int v16 = 0;
    goto LABEL_26;
  }
  unsigned int v16 = 0;
  int v17 = 1;
  while (1)
  {
    uint64_t v18 = strstr((char *)&a2[v16], "{SEP");
    uint64_t v19 = strchr((char *)&a2[v16], 46);
    if (v18) {
      BOOL v23 = v19 == 0;
    }
    else {
      BOOL v23 = 0;
    }
    if (v23)
    {
      uint64_t v25 = v18 + 6;
      goto LABEL_22;
    }
    uint64_t v24 = v19;
    if (v18 || !v19) {
      break;
    }
    uint64_t v25 = v19 + 1;
LABEL_22:
    int v27 = strlen(a2);
    unsigned int v16 = v27 - strlen(v25);
    if (++v17 >= a3) {
      goto LABEL_26;
    }
  }
  if (v18 && v19)
  {
    size_t v26 = strlen(v18);
    if (v26 <= strlen(v24)) {
      uint64_t v25 = v24 + 1;
    }
    else {
      uint64_t v25 = v18 + 6;
    }
    goto LABEL_22;
  }
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"[PINYIN] ERROR [word phon (%s not found)]", v20, v21, v22, (uint64_t)a2);
LABEL_26:
  uint64_t appended = ssftstring_AppendCStrN(a5, a2, v16);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  uint64_t v28 = ssftstring_AppendCStr(a5, v14);
  if ((v28 & 0x80000000) != 0) {
    return v28;
  }
  uint64_t v29 = (char *)&a2[v16];
  uint64_t v30 = strstr(v29, "{SEP");
  unsigned int v31 = strchr(v29, 46);
  BOOL v32 = v31;
  if (v30 && !v31)
  {
LABEL_30:
    uint64_t v33 = a5;
    uint64_t v34 = v30;
    return ssftstring_AppendCStr(v33, v34);
  }
  if (!v30 && v31)
  {
LABEL_36:
    uint64_t v33 = a5;
    uint64_t v34 = (char *)v32;
    return ssftstring_AppendCStr(v33, v34);
  }
  if (v30 && v31)
  {
    size_t v35 = strlen(v30);
    if (v35 > strlen(v32)) {
      goto LABEL_30;
    }
    goto LABEL_36;
  }
  return v28;
}

uint64_t hlp_GenXtraMainVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, _WORD *a8)
{
  uint64_t v8 = 0;
  uint64_t v56 = *MEMORY[0x263EF8340];
  unsigned __int8 v48 = 32;
  __int16 v53 = a5;
  __int16 v52 = a6;
  int v50 = 0;
  if (a5 < a6)
  {
    unsigned int v9 = a6 - a5;
    if ((int)(a6 - a5) > 127) {
      return 0;
    }
    uint64_t v51 = 0;
    __strncpy_chk();
    int v15 = &__s[v9];
    *int v15 = 0;
    oneword_ReplaceAllCharactersInOrthography(__s, (int)v15, 0x23u, 45);
    uint64_t v8 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t))(*(void *)(a1 + 80) + 144))(*(void *)(a1 + 64), *(void *)(a1 + 72), "normal", __s, 128);
    if ((v8 & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      **(unsigned char **)(a1 + 248) = 0;
      **(unsigned char **)(a1 + 256) = 0;
      **(unsigned char **)(a1 + 264) = 0;
      size_t v16 = strlen(__s);
      if (v16)
      {
        if (v16 == 1)
        {
          uint64_t appended = oneword_TranscribeAcronym(a1, "normal", __s, &v48, v55);
        }
        else
        {
          uint64_t v28 = mde_stemafx_Main(a1, "normal", __s, v17, v18, v19, v20, v21);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          strcpy(v55, "one_word");
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v33, v34, v35, (uint64_t)v55);
          unsigned __int16 v36 = strlen(*(const char **)(a1 + 160));
          uint64_t v28 = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, *(void *)(a1 + 160), v36);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L3: %s", v37, v38, v39, (uint64_t)v55);
          unsigned __int16 v40 = strlen(*(const char **)(a1 + 168));
          uint64_t v28 = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 2, *(void *)(a1 + 168), v40);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L4: %s", v41, v42, v43, (uint64_t)v55);
          unsigned __int16 v44 = strlen(*(const char **)(a1 + 176));
          uint64_t v28 = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 3, *(void *)(a1 + 176), v44);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          if ((ssftmap_FindReadOnly(*(void *)(a1 + 568), (uint64_t)"normal", &v51) & 0x80000000) != 0)
          {
            uint64_t v46 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), v55);
            if ((v46 & 0x80000000) != 0)
            {
              uint64_t v8 = v46;
              goto LABEL_31;
            }
            *(void *)uint64_t v47 = 0;
            unsigned __int16 v49 = 0;
            uint64_t appended = (*(uint64_t (**)(void, void, void, int *, unsigned __int16 *))(*(void *)(a1 + 104) + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, v47, &v49);
            if ((appended & 0x80000000) == 0)
            {
              *(unsigned char *)(*(void *)v47 + v49) = 0;
              uint64_t appended = oneword_AppendPhon(a1, *(char **)v47, &byte_20D5A22AE, (uint64_t)&byte_20D5A22AE, 0, 1);
            }
          }
          else
          {
            uint64_t appended = dt_Main(a1, 0, a2, a3, *(void *)(v51 + 16), "normal");
            uint64_t v8 = 0;
            if ((appended & 0x1FFF) == 0x10A) {
              goto LABEL_9;
            }
          }
        }
        uint64_t v8 = appended;
        if ((appended & 0x80000000) != 0) {
          goto LABEL_31;
        }
LABEL_9:
        BOOL v23 = *(unsigned char **)(a1 + 240);
        if (!*v23) {
          goto LABEL_31;
        }
        v23[strlen(*(const char **)(a1 + 240)) - 3] = 0;
        size_t v24 = strlen(*(const char **)(a1 + 240));
        if (oneword_CountPhoneticWords((char *)(*(void *)(a1 + 240) + 3), (char *)(*(void *)(a1 + 240) + v24)) != 1)
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Mismatch between number of ortographic words (%d) and phonetic words (%d) in DT(%s)", v25, v26, v27, 1);
          goto LABEL_31;
        }
        v47[0] = 16;
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 80))(a2, a3, a4, (char *)&v50 + 2);
        if ((v28 & 0x80000000) == 0)
        {
          uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v50), 0, 1, v47, &v50);
          if ((v28 & 0x80000000) == 0)
          {
            uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v50), 1, 1, &v53, &v50);
            if ((v28 & 0x80000000) == 0)
            {
              uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v50), 2, 1, &v52, &v50);
              if ((v28 & 0x80000000) == 0)
              {
                __int16 v29 = strlen((const char *)(*(void *)(a1 + 240) + 3));
                uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v50), 3, (unsigned __int16)(v29 + 1), *(void *)(a1 + 240) + 3, &v50);
                if ((v28 & 0x80000000) == 0)
                {
                  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v50), 5, 2, "*", &v50);
                  if ((v28 & 0x80000000) == 0)
                  {
                    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v50), 6, 2, "*", &v50);
                    if ((v28 & 0x80000000) == 0)
                    {
                      unsigned __int16 v49 = 1;
                      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v50), 7, 1, &v49, &v50);
                      if ((v28 & 0x80000000) == 0)
                      {
                        uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
                        unsigned int v31 = *(const char **)(a1 + 1208);
                        __int16 v32 = strlen(v31);
                        uint64_t v8 = v30(a2, a3, HIWORD(v50), 9, (unsigned __int16)(v32 + 1), v31, &v50);
                        if ((v8 & 0x80000000) != 0) {
                          return v8;
                        }
                        if (a8) {
                          *a8 = HIWORD(v50);
                        }
LABEL_31:
                        if ((v8 & 0x1FFF) == 0x10A || (v8 & 0x1FFF) == 4) {
                          return 0;
                        }
                        return v8;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return v28;
      }
    }
  }
  return v8;
}

uint64_t fe_oneword_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2310021127;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_oneword_ClassClose()
{
  return 0;
}

uint64_t fe_oneword_ResourceLoad(void *a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  unsigned int v27 = 0;
  uint64_t v13 = 2310021127;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62340, 2288) & 0x80000000) != 0) {
    return 2310021128;
  }
  *(void *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  if (!a3) {
    goto LABEL_14;
  }
  if (a4)
  {
    BOOL v18 = a6 != 0;
    if (a5 || !a6)
    {
      if (!a5) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
LABEL_14:
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 40001, 0, v14, v15, v16, v17, v26);
    return v13;
  }
  if (!a5 || !a6) {
    goto LABEL_14;
  }
  BOOL v18 = 1;
LABEL_12:
  if (v18)
  {
    uint64_t v19 = 0;
    LODWORD(v20) = 0;
    uint64_t v28 = a5;
    unsigned int v27 = a6;
LABEL_19:
    uint64_t v24 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1[10] + 224))(a1[8], a1[9], a5, a6, v19, a7, a4);
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v22 = strstr(a3, ";loader=broker");
  BOOL v20 = v22 != 0;
  unsigned int v23 = brk_DataOpenEx(*(void *)(*a1 + 24), a4, v20, (uint64_t)&v29);
  if ((v23 & 0x80000000) != 0)
  {
    if (v22) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v23;
    }
    if ((v13 & 0x80000000) == 0) {
      return v13;
    }
    goto LABEL_26;
  }
  uint64_t v24 = brk_DataMapEx(*(void *)(*a1 + 24), v29, 0, (uint64_t)&v27, (uint64_t)&v28);
  if ((v24 & 0x80000000) == 0)
  {
    a5 = v28;
    uint64_t v19 = v29;
    a6 = v27;
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v13 = v24;
  if ((v24 & 0x80000000) == 0) {
    return v13;
  }
LABEL_26:
  if (v20)
  {
    uint64_t v25 = v29;
    if (v29)
    {
      if (v28)
      {
        brk_DataUnmap(*(void *)(*a1 + 24), v29, v28);
        uint64_t v28 = 0;
        uint64_t v25 = v29;
      }
      brk_DataClose(*(void *)(*a1 + 24), v25);
    }
  }
  return v13;
}

uint64_t oneword_Lid(void *a1, _DWORD *a2)
{
  uint64_t v30 = 0;
  __int16 v29 = -1;
  char v28 = 0;
  uint64_t v4 = (const char *)a1[20];
  unsigned __int16 v5 = strlen(v4);
  unsigned __int16 v9 = v5;
  int v10 = v5;
  if (!v5)
  {
    uint64_t v18 = 0;
LABEL_18:
    if (*((_DWORD *)a1 + 233))
    {
      *a2 = 1;
      uint64_t v19 = *(void *)(*a1 + 32);
      BOOL v20 = "LID found ENX context";
    }
    else
    {
      if (v10)
      {
        uint64_t v21 = 0;
        uint64_t v22 = (v10 - 1);
        do
        {
          uint64_t v23 = a1[20];
          char v24 = v21 ? *(unsigned char *)(v23 + (v21 - 1)) : 95;
          char v31 = v24;
          char v32 = *(unsigned char *)(v23 + v21);
          char v25 = v22 == v21 ? 95 : *(unsigned char *)(v23 + v21 + 1);
          char v33 = v25;
          char v34 = 0;
          uint64_t v18 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t *, __int16 *, char *))(a1[10] + 96))(a1[8], a1[9], "lidenx", &v31, &v30, &v29, &v28);
          if ((v18 & 0x80000000) != 0) {
            return v18;
          }
          if (v29)
          {
            *a2 = 1;
            log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"LID found ENX trigram", v6, v7, v8, v27);
            goto LABEL_22;
          }
        }
        while (v9 != ++v21);
      }
      *a2 = 0;
      uint64_t v19 = *(void *)(*a1 + 32);
      BOOL v20 = "LID default to LNG";
    }
    log_OutText(v19, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v20, v6, v7, v8, v27);
    return v18;
  }
  unsigned int v11 = 0;
  unsigned int v12 = v5;
  do
  {
    unsigned int v13 = v4[v11];
    if (v13 >= 0x7B)
    {
      *a2 = 0;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"LID found diacritic", v6, v7, v8, v27);
      uint64_t v18 = 0;
LABEL_37:
      *((_DWORD *)a1 + 233) = 0;
      return v18;
    }
    if (strchr((char *)a1 + 944, v13))
    {
      *a2 = 1;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"LID found ENX character", v6, v7, v8, v27);
      uint64_t v18 = 0;
LABEL_22:
      *((_DWORD *)a1 + 233) = 1;
      return v18;
    }
    ++v11;
  }
  while (v11 < v12);
  uint64_t v14 = 0;
  while (1)
  {
    uint64_t v15 = a1[20];
    char v16 = v14 ? *(unsigned char *)(v15 + (v14 - 1)) : 95;
    char v31 = v16;
    char v32 = *(unsigned char *)(v15 + v14);
    char v17 = v10 - 1 == v14 ? 95 : *(unsigned char *)(v15 + v14 + 1);
    char v33 = v17;
    char v34 = 0;
    uint64_t v18 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t *, __int16 *, char *))(a1[10] + 96))(a1[8], a1[9], "lidlng", &v31, &v30, &v29, &v28);
    if ((v18 & 0x80000000) != 0) {
      return v18;
    }
    if (v29)
    {
      *a2 = 0;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"LID found LNG trigram", v6, v7, v8, v27);
      goto LABEL_37;
    }
    if (v9 == ++v14) {
      goto LABEL_18;
    }
  }
}

uint64_t oneword_NonDctDpsMde(void *a1, unsigned int a2, uint64_t a3, const char *a4, uint64_t a5, unsigned __int16 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a5;
  uint64_t v49 = *MEMORY[0x263EF8340];
  unsigned __int16 v47 = a5;
  int v45 = 0;
  int v46 = 0;
  unsigned __int16 v44 = 0;
  int v43 = 0;
  unsigned __int16 v42 = 0;
  strcpy(__s, "nondctbased_mde");
  unsigned __int16 v16 = strlen(__s);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, int *))(a1[7] + 168))(a7, a8, v11, 0, 1, &v46, &v45);
  if ((result & 0x80000000) == 0)
  {
    if (v11)
    {
      unsigned __int16 v40 = a6;
      int v18 = v46;
      if (v46 != 3)
      {
        unsigned int v19 = a2 + 128;
        uint64_t v37 = v16;
        uint64_t v38 = v16 + 2;
        uint64_t v39 = a3 - a2;
        int v20 = 1;
        while (1)
        {
          if (!v18)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a7, a8, (unsigned __int16)v11, 1, 1, &v43, &v45);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 168))(a7, a8, v47, 2, 1, &v42, &v45);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            BOOL v24 = (unsigned __int16)v43 + 1 < v42 && v19 > (unsigned __int16)v43;
            if (v24 && v19 > v42)
            {
              unsigned int v26 = (const char *)(v39 + (unsigned __int16)v43);
              char v27 = *(unsigned char *)(v39 + v42);
              *(unsigned char *)(v39 + v42) = 0;
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v21, v22, v23, (uint64_t)__s);
              unsigned __int16 v28 = strlen(v26);
              uint64_t result = (*(uint64_t (**)(void, void, void, const char *, void))(a1[13] + 120))(a1[11], a1[12], 0, v26, v28);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              *(unsigned char *)(v39 + v42) = v27;
              if (strcmp(a4, "normal") && v38 + strlen(a4) <= 0x7F)
              {
                __strcat_chk();
                __strcat_chk();
              }
              if (((*(uint64_t (**)(void, void, char *))(a1[13] + 80))(a1[11], a1[12], __s) & 0x80000000) != 0)
              {
                __s[v37] = 0;
                if (((*(uint64_t (**)(void, void, char *))(a1[13] + 80))(a1[11], a1[12], __s) & 0x80000000) != 0) {
                  return 0;
                }
              }
              uint64_t result = (*(uint64_t (**)(void, void, void, char **, char *))(a1[13] + 128))(a1[11], a1[12], 0, &v44, (char *)&v43 + 2);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              v44[HIWORD(v43)] = 0;
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v29, v30, v31, (uint64_t)__s);
              __int16 v32 = (__int16)v44;
              char v33 = strchr(v44, 43);
              if (v33) {
                break;
              }
            }
          }
LABEL_15:
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 120))(a7, a8, v47, &v47);
          if ((result & 0x80000000) == 0)
          {
            if (v47)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a7, a8);
              if ((result & 0x80000000) == 0)
              {
                LOWORD(v11) = v47;
                if (v47)
                {
                  int v18 = v46;
                  if (v46 != 3) {
                    continue;
                  }
                }
              }
            }
          }
          return result;
        }
        char v34 = v33;
        __int16 v35 = v43;
        int v36 = v20;
        while (1)
        {
          __int16 v41 = v35 + (_WORD)v34 - v32;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, char *))(a1[7] + 160))(a7, a8, v47, 2, 1, &v41, (char *)&v45 + 2);
          if ((result & 0x80000000) != 0) {
            break;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 80))(a7, a8, v47, &v47);
          if ((result & 0x80000000) != 0) {
            break;
          }
          int v46 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(a1[7] + 160))(a7, a8, v47, 0, 1, &v46, (char *)&v45 + 2);
          if ((result & 0x80000000) != 0) {
            break;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, char *))(a1[7] + 160))(a7, a8, v47, 1, 1, &v41, (char *)&v45 + 2);
          if ((result & 0x80000000) != 0) {
            break;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 160))(a7, a8, v47, 2, 1, &v42, (char *)&v45 + 2);
          if ((result & 0x80000000) != 0) {
            break;
          }
          __int16 v35 = v41;
          LOWORD(v43) = v41;
          if (v36) {
            unsigned __int16 *v40 = v47;
          }
          __int16 v32 = (_WORD)v34 + 1;
          unsigned __int16 v44 = v34 + 1;
          char v34 = strchr(v34 + 1, 43);
          int v36 = 0;
          int v20 = 0;
          if (!v34) {
            goto LABEL_15;
          }
        }
      }
    }
  }
  return result;
}

uint64_t oneword_DpsMde(void *a1, const char *a2, const char *a3, uint64_t a4, const char *a5, __int16 a6, unsigned __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, _WORD *a11)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  __int16 v116 = a6;
  unsigned __int16 v115 = a7;
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = 0;
  __c[0] = 0;
  int v113 = 8;
  __int16 v112 = 0;
  __int16 v111 = 1;
  int __dst = 0;
  unint64_t v110 = 0;
  unsigned __int16 v108 = 0;
  strcpy(__s, "dctbased_mde");
  unsigned __int16 v16 = strlen(__s);
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v17, v18, v19, (uint64_t)__s);
  unsigned __int16 v20 = strlen(a2);
  uint64_t v21 = (*(uint64_t (**)(void, void, void, const char *, void))(a1[13] + 120))(a1[11], a1[12], 0, a2, v20);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L2: %s", v22, v23, v24, (uint64_t)__s);
  unsigned __int16 v25 = strlen(a3);
  uint64_t v21 = (*(uint64_t (**)(void, void, uint64_t, const char *, void))(a1[13] + 120))(a1[11], a1[12], 1, a3, v25);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  if (strcmp(a5, "normal") && strlen(a5) + v16 + 2 <= 0x7F)
  {
    __strcat_chk();
    __strcat_chk();
  }
  if (((*(uint64_t (**)(void, void, char *))(a1[13] + 80))(a1[11], a1[12], __s) & 0x80000000) != 0)
  {
    __s[v16] = 0;
    if (((*(uint64_t (**)(void, void, char *))(a1[13] + 80))(a1[11], a1[12], __s) & 0x80000000) != 0) {
      return 0;
    }
  }
  uint64_t v21 = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(a1[13] + 128))(a1[11], a1[12], 0, &v110, &v108);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  v110[v108] = 0;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v26, v27, v28, (uint64_t)__s);
  uint64_t v29 = (*(uint64_t (**)(void, void, uint64_t, char **, unsigned __int16 *))(a1[13] + 128))(a1[11], a1[12], 1, &__dst, &v108);
  if ((v29 & 0x80000000) == 0)
  {
    __s2 = (char *)a5;
    memset(v120, 0, 80);
    memset(v118, 0, sizeof(v118));
    memset(v119, 0, sizeof(v119));
    memset(v117, 0, sizeof(v117));
    uint64_t v30 = v110;
    if (*v110 == 123)
    {
      *unint64_t v110 = 0;
      v120[0] = v30 + 1;
      v120[1] = "0";
      v119[0] = "0";
      v119[1] = v30 + 1;
      uint64_t v31 = strchr(v110 + 1, 125);
      if (v31)
      {
        *uint64_t v31 = 0;
        uint64_t v30 = v31 + 1;
        __int16 v32 = strchr(v31 + 1, 123);
        uint64_t v105 = 2;
        if (!v32)
        {
          unsigned __int8 v33 = 0;
LABEL_21:
          char v100 = 1;
LABEL_24:
          uint64_t v107 = 0;
          unint64_t v38 = v33;
          unint64_t v101 = v33;
          unsigned int v103 = (char *)a3;
          while (!v38)
          {
LABEL_37:
            ++v107;
            unint64_t v38 = v101;
            if (v107 == v105) {
              return v29;
            }
          }
          uint64_t v39 = (const char *)v119[v107];
          unsigned __int16 v40 = (const char **)v117;
          __int16 v41 = (const char **)v118;
          while (1)
          {
            if (strcmp(v39, "0") || strcmp(*v40, "0"))
            {
              unsigned __int16 v42 = (const char *)v120[v107];
              if (!strcmp(v42, "0"))
              {
                strcpy(__dst, v30);
              }
              else
              {
                strcpy(__dst, v42);
                strcat(__dst, v30);
              }
              int v43 = *v41;
              if (strcmp(*v41, "0")) {
                strcat(__dst, v43);
              }
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s", v44, v45, v46, (uint64_t)__dst);
              uint64_t v29 = (*(uint64_t (**)(void, void, uint64_t, char *, unsigned char *, unsigned char *, unsigned char *, void))(a1[10] + 152))(a1[8], a1[9], a4, __dst, &__c[3], &__c[1], __c, *((unsigned __int8 *)a1 + 556));
              if ((v29 & 0x80000000) != 0) {
                return v29;
              }
              if (*(_WORD *)&__c[1]) {
                break;
              }
            }
            ++v40;
            ++v41;
            if (!--v38) {
              goto LABEL_37;
            }
          }
          uint64_t v47 = 0;
          int v102 = 0;
          while (1)
          {
            unsigned __int8 v48 = *(char **)(*(void *)&__c[3] + 8 * v47);
            uint64_t v49 = strchr(v48, __c[0]);
            if (!v49) {
              break;
            }
            *uint64_t v49 = 0;
            uint64_t v54 = strchr(v49 + 1, __c[0]);
            uint64_t v55 = v54;
            if (!v54) {
              goto LABEL_50;
            }
            *uint64_t v54 = 0;
            uint64_t v55 = v54 + 1;
            uint64_t v56 = strchr(v54 + 1, __c[0]);
            size_t v57 = v56;
            if (!v56) {
              goto LABEL_51;
            }
            *uint64_t v56 = 0;
            size_t v57 = v56 + 1;
            int v58 = strchr(v56 + 1, __c[0]);
            unsigned int v59 = v58;
            if (!v58) {
              goto LABEL_52;
            }
            *int v58 = 0;
            unsigned int v59 = v58 + 1;
            unsigned int v60 = strchr(v58 + 1, __c[0]);
            if (!v60) {
              goto LABEL_52;
            }
            *unsigned int v60 = 0;
            uint64_t v106 = v60 + 1;
            int v61 = strchr(v60 + 1, __c[0]);
            uint64_t v62 = v61;
            if (v61)
            {
              *int v61 = 0;
              uint64_t v62 = v61 + 1;
              unsigned int v63 = strchr(v61 + 1, __c[0]);
              if (v63)
              {
                char *v63 = 0;
                int v102 = v63 + 1;
                uint64_t v64 = strchr(v63 + 1, __c[0]);
                if (v64) {
                  *uint64_t v64 = 0;
                }
              }
            }
LABEL_53:
            uint64_t v65 = *(void *)(*a1 + 32);
            if (!v48)
            {
              uint64_t v29 = 2310021127;
              log_OutPublic(v65, (uint64_t)"FE_ONEWORD", 34001, 0, v50, v51, v52, v53, v99);
              return v29;
            }
            log_OutText(v65, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Validating %s", v51, v52, v53, (uint64_t)v48);
            if (v55 && *v55 && !strstr(v55, __s2))
            {
              unsigned __int16 v86 = "G2P Domain validation not OK";
              goto LABEL_77;
            }
            if (v62 && !strcmp(v62, "0"))
            {
              unsigned __int16 v86 = "G2P MDE usage validation not OK";
LABEL_77:
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v86, v66, v67, v68, v99);
              goto LABEL_93;
            }
            *a11 = v116 + strlen(v103);
            uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 88))(a9, a10, v115, &v115);
            if ((v21 & 0x80000000) != 0) {
              return v21;
            }
            uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(a1[7] + 160))(a9, a10, v115, 0, 1, &v113, &v112);
            if ((v21 & 0x80000000) != 0) {
              return v21;
            }
            uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1[7] + 160))(a9, a10, v115, 1, 1, &v116, &v112);
            if ((v21 & 0x80000000) != 0) {
              return v21;
            }
            uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, _WORD *, __int16 *))(a1[7] + 160))(a9, a10, v115, 2, 1, a11, &v112);
            if ((v21 & 0x80000000) != 0) {
              return v21;
            }
            if ((v100 & 1) == 0)
            {
              size_t v69 = strlen(v48);
              size_t v70 = strlen(v32);
              if (v70 + v69 - 124 <= 0xFFFFFFFFFFFFFF7ELL)
              {
                uint64_t v71 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[30], (v70 + v69 + 5));
                if (!v71)
                {
                  log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v72, v73, v74, v75, v99);
                  return 2310021130;
                }
                a1[30] = v71;
              }
            }
            int v76 = (const char *)v119[v107];
            int v77 = strcmp(v76, "0");
            int v78 = (char *)a1[30];
            if (v77)
            {
              strcpy(v78, v76);
              int v78 = (char *)(a1[30] + strlen((const char *)a1[30]));
            }
            *(_DWORD *)int v78 = 8689634;
            strcat((char *)a1[30], v48);
            *(_DWORD *)(a1[30] + strlen((const char *)a1[30])) = 8689634;
            uint64_t v79 = *v40;
            if (strcmp(*v40, "0")) {
              strcat((char *)a1[30], v79);
            }
            __int16 v80 = strlen((const char *)a1[30]);
            uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, __int16 *))(a1[7] + 160))(a9, a10, v115, 3, (unsigned __int16)(v80 + 1), a1[30], &v112);
            if ((v21 & 0x80000000) != 0) {
              return v21;
            }
            if (v57)
            {
              if (*v57)
              {
                uint64_t v81 = (unsigned __int16)(strlen(v57) + 1);
                uint64_t v82 = a9;
                uint64_t v83 = a10;
                uint64_t v84 = v115;
                uint64_t v85 = v57;
              }
              else
              {
                uint64_t v82 = a9;
                uint64_t v83 = a10;
                uint64_t v84 = v115;
                uint64_t v81 = 2;
                uint64_t v85 = "*";
              }
              uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(a1[7] + 160))(v82, v83, v84, 5, v81, v85, &v112);
              if ((v21 & 0x80000000) != 0) {
                return v21;
              }
            }
            if (v59)
            {
              if (*v59)
              {
                uint64_t v87 = (unsigned __int16)(strlen(v59) + 1);
                uint64_t v88 = a9;
                uint64_t v89 = a10;
                uint64_t v90 = v115;
                uint64_t v91 = v59;
              }
              else
              {
                uint64_t v88 = a9;
                uint64_t v89 = a10;
                uint64_t v90 = v115;
                uint64_t v87 = 2;
                uint64_t v91 = "*";
              }
              uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(a1[7] + 160))(v88, v89, v90, 6, v87, v91, &v112);
              if ((v21 & 0x80000000) != 0) {
                return v21;
              }
            }
            __int16 v92 = v106 ? (unsigned __int16)LH_atou(v106) : 1;
            __int16 v111 = v92;
            uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1[7] + 160))(a9, a10, v115, 7, 1, &v111, &v112);
            if ((v21 & 0x80000000) != 0) {
              return v21;
            }
            if (v102)
            {
              uint64_t v93 = (unsigned __int16)(strlen(v102) + 1);
              uint64_t v94 = a9;
              uint64_t v95 = a10;
              uint64_t v96 = v115;
              unsigned int v97 = v102;
            }
            else
            {
              uint64_t v94 = a9;
              uint64_t v95 = a10;
              uint64_t v96 = v115;
              uint64_t v93 = 1;
              unsigned int v97 = &byte_20D5A22AE;
            }
            uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a1[7] + 160))(v94, v95, v96, 9, v93, v97, &v112);
            if ((v29 & 0x80000000) != 0) {
              return v29;
            }
LABEL_93:
            if (++v47 >= (unint64_t)*(unsigned __int16 *)&__c[1]) {
              return v29;
            }
          }
          uint64_t v55 = 0;
LABEL_50:
          size_t v57 = 0;
LABEL_51:
          unsigned int v59 = 0;
LABEL_52:
          uint64_t v106 = 0;
          uint64_t v62 = 0;
          goto LABEL_53;
        }
LABEL_16:
        unsigned __int8 v33 = 0;
        while (*v32 != 125)
        {
          uint64_t v35 = v33;
          v118[v33] = v32 + 1;
          *__int16 v32 = 0;
          int v36 = strchr(v32 + 1, 43);
          if (!v36) {
            return v29;
          }
          ++v33;
          *int v36 = 0;
          uint64_t v37 = v36 + 1;
          *((void *)v117 + v35) = v37;
          __int16 v32 = strchr(v37, 44);
          if (!v32)
          {
            __int16 v32 = strchr(*((char **)v117 + v33 - 1), 125);
            if (!v32) {
              goto LABEL_21;
            }
          }
        }
        char v100 = 0;
        *__int16 v32 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      v120[0] = "0";
      v119[0] = "0";
      char v34 = strchr(v110, 123);
      if (v34)
      {
        __int16 v32 = v34;
        uint64_t v105 = 1;
        goto LABEL_16;
      }
    }
  }
  return v29;
}

uint64_t crf_mde_seg_get_broker_string(uint64_t a1, char **a2, char **a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v17 = &byte_20D5A22AE;
  unsigned int __s = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v17);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  uint64_t v7 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 1024);
  *a2 = v7;
  if (v7
    && (uint64_t v12 = brokeraux_ComposeBrokerString(a1, (const char *)v19, 1, 1, __s, 0, 0, v7, 0x400uLL),
        size_t v13 = strlen(__s),
        uint64_t v14 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v13 + 1),
        (*a3 = v14) != 0))
  {
    strcpy(v14, __s);
  }
  else
  {
    uint64_t v12 = 2310021130;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v8, v9, v10, v11, v16);
  }
  return v12;
}

uint64_t getUmlautMap(uint64_t a1, char *__s, uint64_t *a3, unsigned __int16 *a4)
{
  uint64_t v6 = __s;
  uint64_t v8 = strchr(__s, 44);
  for (i = 1; v8; uint64_t v8 = strchr(v8 + 1, 44))
    ++i;
  uint64_t v10 = 16 * i;
  uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), 1, v10);
  *a3 = v11;
  if (v11)
  {
    if (i)
    {
      for (uint64_t j = 0; v10 != j; j += 16)
      {
        uint64_t v17 = strchr(v6, 44);
        uint64_t v18 = v17;
        if (v17) {
          char *v17 = 0;
        }
        uint64_t v19 = strchr(v6, 59);
        if (v19)
        {
          *uint64_t v19 = 0;
          uint64_t v20 = v19 + 1;
          size_t v21 = strlen(v6);
          *(void *)(*a3 + j) = heap_Calloc(*(void **)(a1 + 8), 1, v21 + 1);
          uint64_t v22 = *(char **)(*a3 + j);
          if (!v22) {
            goto LABEL_18;
          }
          strcpy(v22, v6);
          size_t v23 = strlen(v20);
          *(void *)(*a3 + j + 8) = heap_Calloc(*(void **)(a1 + 8), 1, v23 + 1);
          uint64_t v24 = *(char **)(*a3 + j + 8);
          if (!v24) {
            goto LABEL_18;
          }
          strcpy(v24, v20);
          if (v18) {
            BOOL v25 = v10 - 16 == j;
          }
          else {
            BOOL v25 = 1;
          }
          if (!v25) {
            uint64_t v6 = v18 + 1;
          }
        }
      }
    }
    uint64_t v26 = 0;
    *a4 = i;
  }
  else
  {
LABEL_18:
    uint64_t v26 = 2310021130;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v12, v13, v14, v15, v28);
  }
  return v26;
}

uint64_t crf_mde_seg_load(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  int v61 = 0;
  int v60 = 0;
  unsigned int __s = 0;
  *(_DWORD *)(a10 + 144) = log_GetLogLevel(*(void *)(a5 + 32)) > 4;
  *a11 = 0;
  uint64_t v17 = (uint64_t *)(a10 + 32);
  uint64_t broker_string = crf_mde_seg_get_broker_string(a5, (char **)(a10 + 32), &v61);
  if ((broker_string & 0x80000000) != 0) {
    goto LABEL_16;
  }
  if ((crf_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, (void *)(a10 + 40), 2, *(void *)(a10 + 32), (uint64_t)"CRPH", 1031, 0, (uint64_t)crf_set_nbest_callback) & 0x80000000) != 0)
  {
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"no CRF MDE model found", v19, v20, v21, *v17);
    uint64_t v31 = 0;
    goto LABEL_18;
  }
  uint64_t broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdesegsep", (char **)(a10 + 64), 0, "STR");
  if ((broker_string & 0x80000000) != 0
    || (uint64_t broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"orthtrigger", (char **)(a10 + 72), 0, "STR"), (broker_string & 0x80000000) != 0)|| (uint64_t broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdemorphesep", (char **)(a10 + 80), 0, "STR"), (broker_string & 0x80000000) != 0)
    || (uint64_t broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdesegbypassonewordcrosstoken", 0, (_DWORD *)(a10 + 52), "BOOL"), (broker_string & 0x80000000) != 0)|| (uint64_t broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdesegpostsegdictlookup", 0, (_DWORD *)(a10 + 56), "BOOL"), (broker_string & 0x80000000) != 0)
    || (uint64_t broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdeskipwordswiththischar", (char **)(a10 + 88), 0, "STR"), (broker_string & 0x80000000) != 0))
  {
LABEL_16:
    uint64_t v31 = broker_string;
    goto LABEL_18;
  }
  uint64_t fecfgparam_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdesegumlautmap", &__s, 0, "STR");
  size_t v23 = __s;
  if ((fecfgparam_string & 0x80000000) != 0) {
    goto LABEL_55;
  }
  if (!__s
    || (uint64_t UmlautMap = getUmlautMap(a5, __s, (uint64_t *)(a10 + 96), (unsigned __int16 *)(a10 + 104)),
        (UmlautMap & 0x80000000) == 0))
  {
    uint64_t fecfgparam_string = crf_mde_seg_parse_params(a5, *(void *)(a10 + 40), a10);
    if ((fecfgparam_string & 0x80000000) != 0) {
      goto LABEL_55;
    }
    int v29 = *(_DWORD *)(a10 + 12);
    if (v29 == 1)
    {
      uint64_t v30 = "SEG_Char";
    }
    else
    {
      if (v29 != 2)
      {
        uint64_t v31 = 2310021127;
        uint64_t v36 = *(void *)(a5 + 32);
        goto LABEL_41;
      }
      uint64_t v30 = "SEG_Morpheme";
    }
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde param, type: %s", v26, v27, v28, (uint64_t)v30);
    int v34 = *(_DWORD *)(a10 + 16);
    if (v34 == 1)
    {
      uint64_t v35 = "ANN_BI";
LABEL_34:
      log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde param, type: %s", v26, v27, v28, (uint64_t)v35);
      *(_DWORD *)(a10 + 48) = 1;
      *a11 = 1;
      uint64_t v37 = (void *)(a10 + 112);
      uint64_t fecfgparam_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mde_tag_mappings_dic", (char **)(a10 + 112), 0, "STR");
      if ((fecfgparam_string & 0x80000000) == 0)
      {
        if (*v37)
        {
          uint64_t fecfgparam_string = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a9 + 72))(a7, a8, *v37, &v60);
          if ((fecfgparam_string & 0x80000000) != 0) {
            goto LABEL_55;
          }
          if (*v37 && !v60)
          {
            uint64_t v31 = 2310021127;
            log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_ONEWORD", 34009, "%s%s", v38, v39, v40, v41, "message");
            goto LABEL_56;
          }
        }
        unsigned __int16 v42 = (void *)(a10 + 120);
        uint64_t fecfgparam_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mde_morpheme_dic", (char **)(a10 + 120), 0, "STR");
        if ((fecfgparam_string & 0x80000000) == 0)
        {
          if (*v42)
          {
            uint64_t fecfgparam_string = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a9 + 72))(a7, a8, *v42, &v60);
            if ((fecfgparam_string & 0x80000000) != 0) {
              goto LABEL_55;
            }
            if (*v42 && !v60)
            {
              uint64_t v31 = 2310021127;
              log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_ONEWORD", 34010, "%s%s", v43, v44, v45, v46, "message");
              goto LABEL_56;
            }
          }
          uint64_t v47 = (void *)(a10 + 128);
          uint64_t fecfgparam_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mde_affix_dic", (char **)(a10 + 128), 0, "STR");
          if ((fecfgparam_string & 0x80000000) == 0)
          {
            if (!*v47)
            {
LABEL_58:
              uint64_t v52 = (void *)(a10 + 136);
              uint64_t v31 = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mde_seg_patterns_dic", (char **)(a10 + 136), 0, "STR");
              if ((v31 & 0x80000000) == 0)
              {
                if (*v52)
                {
                  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a9 + 72))(a7, a8, *v52, &v60);
                  if ((v31 & 0x80000000) == 0 && *v52 && !v60)
                  {
                    uint64_t v31 = 2310021127;
                    log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_ONEWORD", 34012, "%s%s", v53, v54, v55, v56, "message");
                  }
                }
              }
LABEL_56:
              if (!v23) {
                goto LABEL_18;
              }
              goto LABEL_57;
            }
            uint64_t fecfgparam_string = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a9 + 72))(a7, a8, *v47, &v60);
            if ((fecfgparam_string & 0x80000000) == 0)
            {
              if (*v47 && !v60)
              {
                uint64_t v31 = 2310021127;
                log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_ONEWORD", 34011, "%s%s", v48, v49, v50, v51, "message");
                goto LABEL_56;
              }
              goto LABEL_58;
            }
          }
        }
      }
LABEL_55:
      uint64_t v31 = fecfgparam_string;
      goto LABEL_56;
    }
    if (v34 == 2)
    {
      uint64_t v35 = "ANN_BMES";
      goto LABEL_34;
    }
    uint64_t v31 = 2310021127;
    uint64_t v36 = *(void *)(a5 + 32);
LABEL_41:
    log_OutPublic(v36, (uint64_t)"FE_ONEWORD", 34006, "%s%s", v25, v26, v27, v28, "message");
    goto LABEL_56;
  }
  uint64_t v31 = UmlautMap;
LABEL_57:
  heap_Free(*(void **)(a5 + 8), (uint64_t)v23);
LABEL_18:
  if (*v17)
  {
    heap_Free(*(void **)(a5 + 8), *v17);
    uint64_t *v17 = 0;
  }
  if (v61) {
    heap_Free(*(void **)(a5 + 8), (uint64_t)v61);
  }
  if ((v31 & 0x80000000) != 0 && *(_DWORD *)(a10 + 48) == 1)
  {
    uint64_t v32 = *(void *)(a10 + 40);
    if (v32)
    {
      crf_Deinit_ReadOnly_DereferenceCnt(a5, a6, v32);
      *(void *)(a10 + 40) = 0;
    }
  }
  return v31;
}

uint64_t crf_set_nbest_callback(void *a1, uint64_t a2, _DWORD *a3)
{
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t result = crf_mde_seg_parse_params((uint64_t)a1, a2, (uint64_t)&v6);
  if ((result & 0x80000000) == 0)
  {
    if (a3) {
      *a3 = DWORD1(v7);
    }
    crf_free_conf(a1, (uint64_t)&v6);
    return 0;
  }
  return result;
}

uint64_t crf_mde_seg_get_fecfgparam_string(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6, _DWORD *a7, char *__s1)
{
  *(_WORD *)&__c[1] = -1;
  if (!strcmp(__s1, "BOOL")) {
    *a7 = 0;
  }
  if (!strcmp(__s1, "STR")) {
    *a6 = 0;
  }
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a4 + 96))(a2, a3, "fecfg", a5, &__c[3], &__c[1], __c);
  if ((v16 & 0x80001FFF) == 0x8000000A)
  {
LABEL_6:
    uint64_t v21 = 2310021130;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v17, v18, v19, v20, v29);
    return v21;
  }
  uint64_t v21 = v16;
  if ((v16 & 0x80000000) != 0) {
    return 0;
  }
  if (*(_WORD *)&__c[1])
  {
    uint64_t v22 = strchr(**(char ***)&__c[3], __c[0]);
    if (v22) {
      *uint64_t v22 = 0;
    }
    if (!strcmp(__s1, "STR"))
    {
      int v23 = strlen(**(const char ***)&__c[3]);
      uint64_t v24 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v23 + 1));
      *a6 = v24;
      if (v24)
      {
        strcpy(v24, **(const char ***)&__c[3]);
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde seg param %s = %s", v25, v26, v27, a5);
        return v21;
      }
      goto LABEL_6;
    }
    if (!strcmp(__s1, "BOOL"))
    {
      *a7 = 0;
      *a7 = strcmp(**(const char ***)&__c[3], "1") == 0;
    }
  }
  return v21;
}

uint64_t crf_mde_seg_parse_params(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a3 + 10) = 0;
  uint64_t v3 = (_WORD *)(a3 + 10);
  *(_DWORD *)(a3 + 12) = 0;
  size_t v57 = (int *)(a3 + 12);
  *(_DWORD *)(a3 + 16) = 0;
  uint64_t v56 = (int *)(a3 + 16);
  *(_DWORD *)(a3 + 20) = 1;
  uint64_t v55 = (int *)(a3 + 20);
  if (!*(_DWORD *)(a2 + 40)) {
    return 0;
  }
  unint64_t v6 = 0;
  uint64_t v53 = a2;
  uint64_t v54 = (char **)(a3 + 24);
  while (1)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    uint64_t v8 = *(const char **)(v7 + 16 * v6);
    if (!strcmp(v8, "features")) {
      break;
    }
    if (!strcmp(v8, "settings"))
    {
      uint64_t v39 = *(const char **)(v7 + 16 * v6 + 8);
      unsigned __int16 v40 = strlen(v39);
      uint64_t v41 = (char *)heap_Alloc(*(void *)(a1 + 8), v40 + 1);
      if (!v41) {
        goto LABEL_77;
      }
      uint64_t v42 = (uint64_t)v41;
      strcpy(v41, v39);
      if (v40)
      {
        uint64_t v43 = 0;
        unsigned __int16 v44 = 0;
        int v45 = 0;
        uint64_t v46 = v40;
        uint64_t v47 = -(uint64_t)v40;
        unsigned __int16 v48 = 0;
LABEL_46:
        BOOL v49 = 0;
        while (2)
        {
          ++v43;
          while (v49)
          {
            if (*(unsigned char *)(v42 + v43 - 1) != 32)
            {
              BOOL v49 = 1;
              goto LABEL_57;
            }
            *(unsigned char *)(v42 + v43 - 1) = 0;
            if (!v45)
            {
              int v45 = 1;
              unsigned __int16 v44 = v48;
              if (v47 + v43) {
                goto LABEL_46;
              }
              goto LABEL_62;
            }
            crf_mde_seg_set_param_value(a1, v42, v44, v48, v3, v57, v56, v55);
            int v45 = 0;
            BOOL v49 = 0;
            ++v43;
            if (v47 + v43 == 1) {
              goto LABEL_63;
            }
          }
          int v50 = *(unsigned __int8 *)(v42 + v43 - 1);
          BOOL v18 = v50 == 32;
          BOOL v49 = v50 != 32;
          if (!v18) {
            unsigned __int16 v48 = v43 - 1;
          }
LABEL_57:
          if (v47 + v43) {
            continue;
          }
          break;
        }
        if (v45 == 1) {
LABEL_62:
        }
          crf_mde_seg_set_param_value(a1, v42, v44, v48, v3, v57, v56, v55);
LABEL_63:
        uint64_t v51 = (unsigned char *)v42;
        do
        {
          if (!*v51) {
            unsigned char *v51 = 32;
          }
          ++v51;
          --v46;
        }
        while (v46);
      }
      heap_Free(*(void **)(a1 + 8), v42);
    }
    else if (!strcmp(v8, "featureparam"))
    {
      uint64_t v9 = *(char **)(v7 + 16 * v6 + 8);
      uint64_t v10 = (unsigned __int16)strlen(v9);
      if (v10)
      {
        uint64_t v11 = 0;
        unsigned __int16 v12 = 0;
        int v13 = 0;
        unsigned __int16 v14 = 0;
LABEL_8:
        BOOL v15 = 0;
        while (2)
        {
          ++v11;
          while (v15)
          {
            if (v9[v11 - 1] != 32)
            {
              BOOL v15 = 1;
              goto LABEL_20;
            }
            v9[v11 - 1] = 0;
            if (!v13)
            {
              int v13 = 1;
              unsigned __int16 v12 = v14;
              if (v11 != v10) {
                goto LABEL_8;
              }
              goto LABEL_71;
            }
            uint64_t result = crf_mde_seg_set_featureparam_value(a1, (uint64_t)v9, v12, v14, v54);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int v13 = 0;
            BOOL v15 = 0;
            if (++v11 - v10 == 1) {
              goto LABEL_72;
            }
          }
          int v17 = v9[v11 - 1];
          BOOL v18 = v17 == 32;
          BOOL v15 = v17 != 32;
          if (!v18) {
            unsigned __int16 v14 = v11 - 1;
          }
LABEL_20:
          if (v11 != v10) {
            continue;
          }
          break;
        }
        if (v13 != 1) {
          goto LABEL_72;
        }
LABEL_71:
        uint64_t result = crf_mde_seg_set_featureparam_value(a1, (uint64_t)v9, v12, v14, v54);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        do
        {
LABEL_72:
          if (!*v9) {
            *uint64_t v9 = 32;
          }
          ++v9;
          --v10;
        }
        while (v10);
      }
    }
LABEL_68:
    ++v6;
    a2 = v53;
    if (v6 >= *(unsigned int *)(v53 + 40)) {
      return 0;
    }
  }
  uint64_t v19 = *(const char **)(v7 + 16 * v6 + 8);
  unsigned int v20 = strlen(v19);
  unsigned int v21 = v20;
  *(unsigned char *)(a3 + 8) = 0;
  unsigned __int8 v22 = 0;
  if (v20)
  {
    BOOL v23 = 0;
    uint64_t v24 = v20;
    uint64_t v25 = v19;
    do
    {
      if (v23)
      {
        BOOL v23 = *(unsigned __int8 *)v25 != 32;
      }
      else if (*v25 == 32)
      {
        BOOL v23 = 0;
      }
      else
      {
        *(unsigned char *)(a3 + 8) = ++v22;
        BOOL v23 = 1;
      }
      ++v25;
      --v24;
    }
    while (v24);
  }
  uint64_t v26 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * v22 + 8);
  *(void *)a3 = v26;
  if (v26)
  {
    int v31 = 0;
    unsigned int v32 = 0;
    unsigned int v33 = 0;
    unsigned int v34 = 0;
    do
    {
      uint64_t v35 = v34;
      int v36 = v19[v34];
      if (v36 == 32)
      {
        LOBYTE(v36) = 0;
        unsigned int v37 = 0;
        int v31 = 0;
        uint64_t v38 = *(void *)(*(void *)a3 + 8 * v33++);
      }
      else
      {
        if (v31)
        {
          uint64_t v38 = *(void *)(*(void *)a3 + 8 * v33);
        }
        else
        {
          *(void *)(*(void *)a3 + 8 * v33) = heap_Alloc(*(void *)(a1 + 8), 64);
          uint64_t v38 = *(void *)(*(void *)a3 + 8 * v33);
          if (!v38) {
            goto LABEL_77;
          }
          LOBYTE(v36) = v19[v35];
        }
        unsigned int v37 = v32 + 1;
        int v31 = 1;
      }
      *(unsigned char *)(v38 + v32) = v36;
      unsigned int v34 = v35 + 1;
      unsigned int v32 = v37;
    }
    while ((int)v35 + 1 <= v21);
    goto LABEL_68;
  }
LABEL_77:
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v27, v28, v29, v30, v52);
  return 2310021130;
}

uint64_t crf_mde_seg_unload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 32);
  if (v6)
  {
    heap_Free(*(void **)(a1 + 8), v6);
    *(void *)(a3 + 32) = 0;
  }
  if (*(_DWORD *)(a3 + 48) == 1 && (uint64_t v7 = *(void *)(a3 + 40)) != 0)
  {
    uint64_t Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(a1, a2, v7);
    if ((Only_DereferenceCnt & 0x80000000) != 0) {
      return Only_DereferenceCnt;
    }
    *(void *)(a3 + 40) = 0;
    *(_DWORD *)(a3 + 48) = 0;
  }
  else
  {
    uint64_t Only_DereferenceCnt = 0;
  }
  crf_free_conf((void *)a1, a3);
  uint64_t v9 = *(void *)(a3 + 64);
  if (v9)
  {
    heap_Free(*(void **)(a1 + 8), v9);
    *(void *)(a3 + 64) = 0;
  }
  uint64_t v10 = *(void *)(a3 + 72);
  if (v10)
  {
    heap_Free(*(void **)(a1 + 8), v10);
    *(void *)(a3 + 72) = 0;
  }
  uint64_t v11 = *(void *)(a3 + 80);
  if (v11)
  {
    heap_Free(*(void **)(a1 + 8), v11);
    *(void *)(a3 + 80) = 0;
  }
  uint64_t v12 = *(void *)(a3 + 88);
  if (v12)
  {
    heap_Free(*(void **)(a1 + 8), v12);
    *(void *)(a3 + 88) = 0;
  }
  if (*(_WORD *)(a3 + 104))
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = *(void *)(a3 + 96);
    do
    {
      heap_Free(*(void **)(a1 + 8), *(void *)(v15 + v13));
      uint64_t v16 = (void *)(*(void *)(a3 + 96) + v13);
      *uint64_t v16 = 0;
      heap_Free(*(void **)(a1 + 8), v16[1]);
      uint64_t v15 = *(void *)(a3 + 96);
      *(void *)(v15 + v13 + 8) = 0;
      ++v14;
      v13 += 16;
    }
    while (v14 < *(unsigned __int16 *)(a3 + 104));
    heap_Free(*(void **)(a1 + 8), v15);
    *(void *)(a3 + 96) = 0;
    *(_WORD *)(a3 + 104) = 0;
  }
  uint64_t v17 = *(void *)(a3 + 112);
  if (v17)
  {
    heap_Free(*(void **)(a1 + 8), v17);
    *(void *)(a3 + 112) = 0;
  }
  uint64_t v18 = *(void *)(a3 + 120);
  if (v18)
  {
    heap_Free(*(void **)(a1 + 8), v18);
    *(void *)(a3 + 120) = 0;
  }
  uint64_t v19 = *(void *)(a3 + 128);
  if (v19)
  {
    heap_Free(*(void **)(a1 + 8), v19);
    *(void *)(a3 + 128) = 0;
  }
  uint64_t v20 = *(void *)(a3 + 136);
  if (v20)
  {
    heap_Free(*(void **)(a1 + 8), v20);
    *(void *)(a3 + 136) = 0;
  }
  return Only_DereferenceCnt;
}

void *crf_free_conf(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(unsigned char *)(a2 + 8))
    {
      unint64_t v5 = 0;
      do
        heap_Free((void *)v3[1], *(void *)(*(void *)a2 + 8 * v5++));
      while (v5 < *(unsigned __int8 *)(a2 + 8));
      uint64_t v4 = *(void *)a2;
    }
    uint64_t result = heap_Free((void *)v3[1], v4);
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t result = heap_Free((void *)v3[1], v6);
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t crf_mde_getStrForCrossToken(uint64_t a1, char *__s, const char **a3, const char *a4, const char *a5, const char *a6)
{
  unsigned __int16 v12 = strlen(__s);
  __s2 = (char *)a4;
  unsigned __int16 v13 = strlen(a4);
  if (a5)
  {
    uint64_t v14 = (unsigned __int16)strlen(a5);
    uint64_t v28 = (unsigned __int16)strlen(a6);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v26 = a1;
  uint64_t v27 = a6;
  if (v12)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unsigned __int16 v17 = 0;
    do
    {
      if (v13 + v15 < v12 && !strncmp(&__s[v15], __s2, v13))
      {
        strncat((char *)a3[v17++], &__s[v16], v15 - v16);
        uint64_t v16 = (unsigned __int16)(v13 + v15);
      }
      ++v15;
    }
    while (v12 != v15);
  }
  else
  {
    unsigned __int16 v17 = 0;
    uint64_t v16 = 0;
  }
  strncat((char *)a3[v17], &__s[v16], v12 - (unsigned __int16)v16);
  if (a5 && v17 != 0xFFFF)
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = (char *)*a3;
      if (*(_DWORD *)(*(void *)(v26 + 8) + v18 + 28))
      {
        strcat(v19, a5);
        size_t v20 = strlen(*a3);
        memmove((void *)&(*a3)[v14], *a3, v20 + v14);
        unsigned int v21 = (char *)*a3;
        unsigned __int8 v22 = a5;
        size_t v23 = v14;
      }
      else
      {
        strcat(v19, v27);
        size_t v24 = strlen(*a3);
        memmove((void *)&(*a3)[v28], *a3, v24 + v28);
        unsigned int v21 = (char *)*a3;
        unsigned __int8 v22 = v27;
        size_t v23 = v28;
      }
      memcpy(v21, v22, v23);
      v18 += 48;
      ++a3;
    }
    while (48 * (unsigned __int16)(v17 + 1) != v18);
  }
  return 0;
}

uint64_t crf_mde_seg_label(uint64_t a1, char *__s, uint64_t a3, const char *a4, unsigned int a5, int a6, _WORD *a7, unsigned __int16 *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,char *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t *a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t *a30,char *a31,char *a32,char *a33,unsigned char *a34,char *a35,int a36)
{
  uint64_t v402 = *MEMORY[0x263EF8340];
  v398[0] = 0;
  v398[1] = 0;
  uint64_t v396 = 0;
  v397 = 0;
  unsigned int v395 = 0;
  int v385 = strlen(__s);
  int v42 = strlen(a4);
  v392 = 0;
  v393 = 0;
  int v391 = 0;
  __s1[1] = 0;
  *(void *)&__c[3] = 0;
  __s1[0] = 0;
  __c[0] = 0;
  uint64_t v394 = 0;
  *(_WORD *)&__c[1] = -1;
  int v43 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a12 + 96))(a13, a14, "fecfg", "mde_morphweight", &__c[3], &__c[1], __c);
  if ((v43 & 0x80001FFF) == 0x8000000A) {
    goto LABEL_2;
  }
  __int16 v49 = 0;
  if (v43 < 0)
  {
    uint64_t v50 = a3;
  }
  else
  {
    uint64_t v50 = a3;
    if (*(_WORD *)&__c[1])
    {
      uint64_t v51 = **(const char ***)&__c[3];
      unsigned int v52 = strchr(**(char ***)&__c[3], __c[0]);
      if (v52)
      {
        *unsigned int v52 = 0;
        uint64_t v51 = **(const char ***)&__c[3];
      }
      __int16 v49 = atoi(v51);
    }
  }
  int v372 = a5;
  uint64_t v53 = crf_mde_utils_dynstr_init(a1, (uint64_t)__s1, (unsigned __int16)(v42 + 16), 16);
  if ((v53 & 0x80000000) != 0)
  {
    uint64_t v48 = v53;
    goto LABEL_15;
  }
  uint64_t v48 = crf_mde_utils_dynstr_add(a1, (uint64_t)__s1, a4, 2);
  if ((v48 & 0x80000000) != 0)
  {
LABEL_15:
    v376 = 0;
    unsigned __int16 v379 = 0;
    uint64_t v59 = 0;
    uint64_t v373 = 0;
    unsigned __int16 v374 = 0;
    int v60 = 0;
    int v61 = 0;
    uint64_t v62 = 0;
    uint64_t v368 = 0;
    unsigned int v63 = 0;
    uint64_t v381 = 0;
    unsigned __int16 v382 = 0;
    uint64_t v64 = 0;
    unsigned __int16 v380 = v42;
    goto LABEL_16;
  }
  __int16 v364 = v49;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Doing CRF MDE segmentation for token \"%s\"", v45, v46, v47, (uint64_t)__s1[0]);
  uint64_t v54 = *(void *)(v50 + 88);
  uint64_t v55 = (unsigned __int8 *)__s1[0];
  if (v54 && strstr(__s1[0], *(const char **)(v50 + 88)))
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"found \"%s\" in token, skip CRF MDE segmentation", v56, v57, v58, v54);
    return v48;
  }
  int v363 = a6;
  v362 = a8;
  if (*(void *)(v50 + 96))
  {
    unsigned __int16 v388 = 0;
    int v93 = Utf8_LengthInBytes(v55, 1);
    if ((_WORD)v42)
    {
      int v94 = v93;
      int v95 = 0;
      int v96 = 0;
      do
      {
        v95 += isUmlaut(&__s1[0][(unsigned __int16)v96], (unsigned __int16)v94, *(unsigned __int8 ***)(v50 + 96), *(unsigned __int16 *)(v50 + 104), &v388);
        v96 += v94;
        int v94 = Utf8_LengthInBytes((unsigned __int8 *)&__s1[0][(unsigned __int16)v96], 1);
      }
      while ((unsigned __int16)v96 < (unsigned __int16)v42);
      if ((_WORD)v95)
      {
        uint64_t v401 = 0;
        *(void *)v400 = 0;
        uint64_t v365 = heap_Calloc(*(void **)(a1 + 8), 1, 4 * (unsigned __int16)v95);
        if (!v365) {
          goto LABEL_2;
        }
        uint64_t v97 = crf_mde_utils_dynstr_init(a1, (uint64_t)v400, (unsigned __int16)(v42 + 16), 16);
        if ((v97 & 0x80000000) != 0)
        {
          uint64_t v48 = v97;
        }
        else
        {
          v361 = a7;
          unsigned __int16 v98 = Utf8_LengthInBytes((unsigned __int8 *)__s1[0], 1);
          unsigned __int16 v99 = 0;
          unsigned __int16 v100 = 0;
          do
          {
            if (isUmlaut(&__s1[0][v100], v98, *(unsigned __int8 ***)(v50 + 96), *(unsigned __int16 *)(v50 + 104), &v388))
            {
              uint64_t v101 = v388;
              __strcpy_chk();
              uint64_t v102 = crf_mde_utils_dynstr_add(a1, (uint64_t)v400, v399, 1);
              if ((v102 & 0x80000000) != 0) {
                return v102;
              }
              unsigned int v103 = (unsigned __int16 *)(v365 + 4 * v99);
              unsigned __int16 *v103 = v100;
              v103[1] = strlen(*(const char **)(*(void *)(v50 + 96) + 16 * v101 + 8));
              ++v99;
            }
            else
            {
              __strncpy_chk();
              v399[v98] = 0;
              uint64_t v102 = crf_mde_utils_dynstr_add(a1, (uint64_t)v400, v399, 1);
              if ((v102 & 0x80000000) != 0) {
                return v102;
              }
            }
            v100 += v98;
            unsigned __int16 v98 = Utf8_LengthInBytes((unsigned __int8 *)&__s1[0][v100], 1);
          }
          while (v100 < (unsigned __int16)v42);
          crf_mde_utils_dynstr_free((void *)a1, (uint64_t)__s1);
          unsigned __int16 v104 = strlen(*(const char **)v400);
          uint64_t v105 = crf_mde_utils_dynstr_init(a1, (uint64_t)__s1, (unsigned __int16)(v104 + 16), 16);
          if ((v105 & 0x80000000) == 0)
          {
            uint64_t v105 = crf_mde_utils_dynstr_add(a1, (uint64_t)__s1, *(const char **)v400, 2);
            if ((v105 & 0x80000000) == 0)
            {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"expanded umlaut token \"%s\"", v45, v46, v47, (uint64_t)__s1[0]);
              crf_mde_utils_dynstr_free((void *)a1, (uint64_t)v400);
              if (v99)
              {
                uint64_t v109 = 0;
                uint64_t v110 = v365 + 2;
                do
                {
                  v110 += 4;
                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"umlaut[%d] pos=%d len=%d", v106, v107, v108, v109++);
                }
                while (v99 != v109);
              }
              uint64_t v59 = v365;
              goto LABEL_104;
            }
          }
          uint64_t v48 = v105;
          LOWORD(v42) = v104;
          LOWORD(v95) = v99;
        }
        unsigned __int16 v374 = 0;
        v376 = 0;
        int v60 = 0;
        int v61 = 0;
        uint64_t v62 = 0;
        uint64_t v368 = 0;
        unsigned int v63 = 0;
        uint64_t v381 = 0;
        unsigned __int16 v382 = 0;
        uint64_t v373 = 0;
        uint64_t v64 = 0;
        unsigned __int16 v379 = v95;
        unsigned __int16 v380 = v42;
LABEL_223:
        uint64_t v59 = v365;
        goto LABEL_16;
      }
    }
    v361 = a7;
    uint64_t v59 = 0;
    unsigned __int16 v99 = 0;
    unsigned __int16 v104 = v42;
LABEL_104:
    unsigned __int16 v379 = v99;
    uint64_t v55 = (unsigned __int8 *)__s1[0];
    goto LABEL_106;
  }
  v361 = a7;
  uint64_t v59 = 0;
  unsigned __int16 v379 = 0;
  unsigned __int16 v104 = v42;
LABEL_106:
  unsigned int v111 = strlen((const char *)v55) + a5 == (unsigned __int16)v385;
  uint64_t v112 = heap_Calloc(*(void **)(a1 + 8), 1, 16 * *(unsigned __int16 *)(v50 + 10) + 8 * v104);
  if (!v112) {
    goto LABEL_2;
  }
  uint64_t v64 = (void *)v112;
  uint64_t v48 = crf_mde_seg_fv_new(a1, *(unsigned __int8 *)(v50 + 8), v398);
  unsigned __int16 v380 = v104;
  if ((v48 & 0x80000000) != 0)
  {
    unsigned __int16 v374 = 0;
    v376 = 0;
    int v60 = 0;
    int v61 = 0;
    uint64_t v62 = 0;
    uint64_t v368 = 0;
    unsigned int v63 = 0;
    uint64_t v381 = 0;
    unsigned __int16 v382 = 0;
    uint64_t v373 = 0;
    goto LABEL_16;
  }
  uint64_t v365 = v59;
  if (*(_DWORD *)(v50 + 144) == 1)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"szSent %s", v45, v46, v47, (uint64_t)__s);
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"word %s", v113, v114, v115, (uint64_t)__s1[0]);
    if (*(unsigned char *)(v50 + 8))
    {
      unint64_t v119 = 0;
      do
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"FEAT[%d] %s", v116, v117, v118, v119++);
      while (v119 < *(unsigned __int8 *)(v50 + 8));
    }
  }
  if (v104)
  {
    __int16 v120 = 0;
    unsigned __int16 v121 = 0;
    do
    {
      uint64_t v122 = v121;
      unsigned __int16 v123 = Utf8_LengthInBytes((unsigned __int8 *)&__s1[0][v121], 1);
      int v124 = *(_DWORD *)(v50 + 12);
      if (v124 == 1
        || v124 == 2
        && ((uint64_t v125 = *(const char **)(v50 + 80)) != 0 && !strncmp(&__s1[0][v122], v125, v123)
         || (int v126 = *(const char **)(v50 + 64)) != 0 && !strncmp(&__s1[0][v122], v126, v123)))
      {
        ++v120;
      }
      unsigned __int16 v121 = v122 + v123;
    }
    while ((unsigned __int16)(v122 + v123) < v104);
  }
  else
  {
    __int16 v120 = 0;
  }
  unsigned __int16 v127 = v120 + 1;
  uint64_t v128 = (unsigned __int16)(v120 + 1);
  uint64_t v381 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * v128);
  if (!v381) {
    goto LABEL_2;
  }
  if (*(_DWORD *)(v50 + 12) == 2)
  {
    uint64_t v373 = heap_Calloc(*(void **)(a1 + 8), 1, 4 * v128);
    unsigned int v129 = v372;
    if (!v373) {
      goto LABEL_2;
    }
  }
  else
  {
    uint64_t v373 = 0;
    unsigned __int16 v127 = 0;
    unsigned int v129 = v372;
  }
  int v359 = v363 + v129;
  int v360 = v363 + v129 + v42;
  if (!v104)
  {
    v376 = 0;
    unsigned __int16 v141 = 0;
    uint64_t v142 = v381;
    goto LABEL_189;
  }
  unsigned __int16 v369 = v127;
  unsigned __int16 v382 = 0;
  unsigned __int16 v130 = 0;
  unsigned __int16 v131 = 0;
  uint64_t v357 = v129;
  int v377 = v104;
  while (1)
  {
    uint64_t v132 = v131;
    unsigned __int16 v133 = Utf8_LengthInBytes((unsigned __int8 *)&__s1[0][v131], 1);
    unsigned __int16 v134 = v133;
    int v135 = *(_DWORD *)(v50 + 12);
    if (v135 != 1) {
      break;
    }
    if (v133)
    {
      unsigned __int16 v138 = v133;
LABEL_144:
      size_t v139 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v138 + 1);
      *(void *)(v381 + 8 * v382) = v139;
      if (!v139) {
        goto LABEL_2;
      }
      strncpy(v139, &__s1[0][v130], v138);
      if (*(_DWORD *)(v50 + 12) == 2) {
        *(_DWORD *)(v373 + 4 * v382) = 0;
      }
      ++v382;
      unsigned __int16 v130 = v132 + v134;
      unsigned __int16 v104 = v380;
    }
LABEL_148:
    unsigned __int16 v131 = v132 + v134;
    unsigned int v140 = (unsigned __int16)(v132 + v134);
    if (v140 >= v104)
    {
      if (v140 == v130)
      {
        v376 = 0;
        uint64_t v142 = v381;
        unsigned __int16 v141 = v382;
        unsigned __int16 v127 = v369;
        goto LABEL_189;
      }
      size_t v143 = (unsigned __int16)(v131 - v130);
      uint64_t v144 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v143 + 1);
      *(void *)(v381 + 8 * v382) = v144;
      if (!v144) {
        goto LABEL_2;
      }
      strncpy(v144, &__s1[0][v130], v143);
      if (*(_DWORD *)(v50 + 12) == 2)
      {
        unsigned __int16 v145 = v377 + v372;
        if (v377 + v372 < (unsigned __int16)v385
          && (v146 = &__s[v357 + v104], TOK_IS_PUNCT((unsigned __int8 *)v146)))
        {
          uint64_t v147 = *(const char **)(v50 + 72);
          uint64_t v142 = v381;
          if (v147 && (size_t v148 = strlen(*(const char **)(v50 + 72)), !strncmp(v146, v147, v148)))
          {
            int v153 = 0;
            v376 = 0;
          }
          else
          {
            int v378 = (unsigned __int16)(v377 + v372);
            do
              __int16 v149 = v145++;
            while (v145 < (unsigned __int16)v385
                 && TOK_IS_PUNCT((unsigned __int8 *)&__s[v145]));
            if (TOK_IS_PUNCT((unsigned __int8 *)&__s[v145])) {
              unsigned __int16 v150 = v145;
            }
            else {
              unsigned __int16 v150 = v149;
            }
            int v151 = v150 - v378;
            __int16 v152 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v151 + 2);
            if (!v152) {
              goto LABEL_2;
            }
            v376 = strncpy(v152, &__s[v378], v151 + 1);
            v376[v151 + 1] = 0;
            int v153 = 1;
          }
        }
        else
        {
          int v153 = 0;
          v376 = 0;
          uint64_t v142 = v381;
        }
        unsigned __int16 v127 = v369;
        *(_DWORD *)(v373 + 4 * v382) = v153;
      }
      else
      {
        v376 = 0;
        uint64_t v142 = v381;
        unsigned __int16 v127 = v369;
      }
      unsigned __int16 v141 = v382 + 1;
LABEL_189:
      unsigned __int16 v382 = v141;
      __int16 v166 = v141;
      LODWORD(v167) = *(unsigned __int16 *)(v50 + 10);
      if (*(_WORD *)(v50 + 10))
      {
        unint64_t v168 = 0;
        do
        {
          uint64_t v169 = crf_mde_seg_set_padding_features(a1, (unsigned __int16)v168, *(unsigned __int8 *)(v50 + 8), v398, 1);
          if ((v169 & 0x80000000) != 0) {
            goto LABEL_219;
          }
          uint64_t v169 = crf_mde_seg_concat_strings(a1, v398, &v397);
          if ((v169 & 0x80000000) != 0) {
            goto LABEL_219;
          }
          v64[v168] = v397;
          v397 = 0;
          ++v168;
          unint64_t v167 = *(unsigned __int16 *)(v50 + 10);
        }
        while (v168 < v167);
      }
      if (v382)
      {
        unsigned __int16 v358 = v166;
        uint64_t v170 = 0;
        while (1)
        {
          uint64_t features = crf_mde_seg_get_features(a1, v142, v382, v373, v127, v170, *(void *)(v50 + 24), *(void *)v50, *(unsigned char *)(v50 + 8), v398, v372 == 0, v111);
          if ((features & 0x80000000) != 0) {
            break;
          }
          uint64_t features = crf_mde_seg_concat_strings(a1, v398, &v397);
          if ((features & 0x80000000) != 0) {
            break;
          }
          unint64_t v167 = *(unsigned __int16 *)(v50 + 10);
          v64[v170 + v167] = v397;
          v397 = 0;
          if (v382 == ++v170) {
            goto LABEL_199;
          }
        }
        uint64_t v48 = features;
        unsigned __int16 v374 = 0;
        int v60 = 0;
        int v61 = 0;
        uint64_t v62 = 0;
        uint64_t v368 = 0;
        unsigned int v63 = 0;
        goto LABEL_221;
      }
LABEL_199:
      if (v167)
      {
        uint64_t v172 = 0;
        while (1)
        {
          uint64_t v169 = crf_mde_seg_set_padding_features(a1, (unsigned __int16)v172, *(unsigned __int8 *)(v50 + 8), v398, 0);
          if ((v169 & 0x80000000) != 0) {
            break;
          }
          uint64_t v169 = crf_mde_seg_concat_strings(a1, v398, &v397);
          if ((v169 & 0x80000000) != 0) {
            break;
          }
          unint64_t v167 = *(unsigned __int16 *)(v50 + 10);
          v64[v382 + v172 + v167] = v397;
          v397 = 0;
          if (++v172 >= v167) {
            goto LABEL_204;
          }
        }
LABEL_219:
        uint64_t v48 = v169;
        unsigned __int16 v374 = 0;
        int v60 = 0;
        int v61 = 0;
        uint64_t v62 = 0;
        uint64_t v368 = 0;
        unsigned int v63 = 0;
        unsigned __int16 v177 = v166;
LABEL_222:
        unsigned __int16 v382 = v177;
        goto LABEL_223;
      }
LABEL_204:
      if (*(_DWORD *)(v50 + 144) == 1 && v382)
      {
        for (uint64_t i = 0; i != v382; ++i)
        {
          int v174 = *(_DWORD *)(v50 + 12);
          if (v174 == 1)
          {
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"token[%d] %s", v45, v46, v47, i);
          }
          else if (v174 == 2)
          {
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"token[%d] %s punc = %d", v45, v46, v47, i);
          }
        }
        LODWORD(v167) = *(unsigned __int16 *)(v50 + 10);
      }
      uint64_t v48 = crf_Process(*(void *)(v50 + 40), v64, v382 + 2 * v167, &v396, &v395);
      uint64_t v59 = v365;
      if ((v48 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v50 + 144) == 1)
        {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"results : %d best", v45, v46, v47, *(unsigned int *)(v50 + 20));
          if (!v395) {
            goto LABEL_290;
          }
          int v175 = 0;
          do
          {
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s ==> _%s_", v45, v46, v47, v64[(unsigned __int16)v175++]);
            unsigned int v176 = v395;
          }
          while (v395 > (unsigned __int16)v175);
          uint64_t v59 = v365;
        }
        else
        {
          unsigned int v176 = v395;
        }
        if (v176)
        {
          uint64_t v178 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * *(_DWORD *)(v50 + 20) * v382);
          if (v178)
          {
            unsigned int v63 = (unsigned __int16 **)v178;
            unsigned __int16 v358 = v166;
            if (*(_DWORD *)(v50 + 20))
            {
              unsigned __int16 v179 = 0;
              do
              {
                uint64_t v180 = heap_Calloc(*(void **)(a1 + 8), 1, 40 * v382);
                v63[v179] = (unsigned __int16 *)v180;
                if (!v180) {
                  goto LABEL_2;
                }
                *((void *)v63[v179] + 1) = heap_Calloc(*(void **)(a1 + 8), 1, 48 * v382);
                uint64_t v181 = v63[v179];
                if (!*((void *)v181 + 1)) {
                  goto LABEL_2;
                }
                *uint64_t v181 = 0;
                *((_DWORD *)v181 + 8) = 0;
              }
              while (*(_DWORD *)(v50 + 20) > ++v179);
            }
            uint64_t v48 = crf_mde_utils_dynstr_init(a1, (uint64_t)&v393, 2 * (v380 & 0x7FFFu), 128);
            if ((v48 & 0x80000000) != 0) {
              goto LABEL_295;
            }
            unsigned int v182 = *(_DWORD *)(v50 + 20);
            if (v182)
            {
              unsigned int v183 = 0;
              unsigned int v184 = v395;
              do
              {
                uint64_t v185 = v63[(unsigned __int16)v183];
                *uint64_t v185 = 0;
                if (v184)
                {
                  unsigned int v186 = 0;
                  __int16 v187 = 0;
                  unsigned int v188 = *(unsigned __int16 *)(v50 + 10);
                  uint64_t v189 = v396;
                  do
                  {
                    if (v188 <= (unsigned __int16)v186 && v188 + v382 > v186)
                    {
                      int v190 = *(unsigned __int8 *)(*(void *)(v189 + 8 * (unsigned __int16)v186) + 2 * v183);
                      if (v190 == 83 || v190 == 66) {
                        *uint64_t v185 = ++v187;
                      }
                    }
                    ++v186;
                  }
                  while (v184 > (unsigned __int16)v186);
                }
                else
                {
                  __int16 v187 = 0;
                }
                *uint64_t v185 = v187 + 1;
                unsigned __int16 v191 = v183 + 1;
                unsigned int v183 = (unsigned __int16)(v183 + 1);
              }
              while (v182 > v191);
              unsigned int v192 = 0;
              unsigned __int16 v193 = 0;
              while (1)
              {
                bzero(v393, (unsigned __int16)v394);
                uint64_t v370 = v193;
                *v63[v193] = 0;
                if (v395) {
                  break;
                }
LABEL_272:
                size_t v209 = strlen(v393);
                if (v209)
                {
                  *(void *)(*((void *)v63[v370] + 1) + 48 * *v63[v370]) = heap_Calloc(*(void **)(a1 + 8), 1, v209 + 1);
                  v210 = *(char **)(*((void *)v63[v370] + 1) + 48 * *v63[v370]);
                  if (!v210) {
                    goto LABEL_2;
                  }
                  strcpy(v210, v393);
                  ++*v63[v370];
                }
                unsigned __int16 v193 = v370 + 1;
                unsigned int v192 = (unsigned __int16)(v370 + 1);
                if (*(_DWORD *)(v50 + 20) <= v192) {
                  goto LABEL_276;
                }
              }
              unsigned int v194 = 0;
              unsigned __int16 v195 = 0;
              unsigned __int16 v196 = 0;
              uint64_t v197 = 2 * v192;
              while (1)
              {
                unsigned int v198 = *(unsigned __int16 *)(v50 + 10);
                if (v198 <= v196 && v198 + v382 > v194)
                {
                  int v200 = *(unsigned __int8 *)(*(void *)(v396 + 8 * v196) + v197);
                  if (v200 == 83 || v200 == 66)
                  {
                    size_t v201 = strlen(v393);
                    if (v201)
                    {
                      *(void *)(*((void *)v63[v370] + 1) + 48 * *v63[v370]) = heap_Calloc(*(void **)(a1 + 8), 1, v201 + 1);
                      unsigned __int16 v202 = *(char **)(*((void *)v63[v370] + 1) + 48 * *v63[v370]);
                      if (!v202) {
                        goto LABEL_2;
                      }
                      strcpy(v202, v393);
                      unsigned __int16 v203 = v63[v370];
                      unsigned __int16 v204 = *v203;
                      *(_DWORD *)(*((void *)v203 + 1) + 48 * *v203 + 28) = 1;
                      *unsigned __int16 v203 = v204 + 1;
                      bzero(v393, (unsigned __int16)v394);
                    }
                  }
                  int v205 = *v393 ? 1 : 2;
                  uint64_t v48 = crf_mde_utils_dynstr_add(a1, (uint64_t)&v393, *(const char **)(v381 + 8 * v195), v205);
                  if ((v48 & 0x80000000) != 0) {
                    goto LABEL_295;
                  }
                  ++v195;
                  if (v194 + 1 < (unsigned __int16)v395)
                  {
                    int v206 = *(unsigned __int8 *)(*(void *)(v396 + 8 * (v194 + 1)) + v197);
                    if (v206 != 66 && v206 != 83)
                    {
                      v207 = *(const char **)(v50 + 80);
                      if (v207)
                      {
                        int v208 = *v393 ? 1 : 2;
                        uint64_t v48 = crf_mde_utils_dynstr_add(a1, (uint64_t)&v393, v207, v208);
                        if ((v48 & 0x80000000) != 0) {
                          goto LABEL_295;
                        }
                      }
                    }
                  }
                }
                unsigned int v194 = ++v196;
                if (v395 <= v196) {
                  goto LABEL_272;
                }
              }
            }
LABEL_276:
            v392 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 1024);
            if (!v392)
            {
              uint64_t v48 = 2310021130;
              log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v211, v45, v46, v47, v340);
LABEL_295:
              unsigned __int16 v374 = 0;
              int v60 = 0;
              int v61 = 0;
              uint64_t v62 = 0;
              uint64_t v368 = 0;
LABEL_221:
              unsigned __int16 v177 = v358;
              goto LABEL_222;
            }
            HIWORD(v391) = 1024;
            if (*(_DWORD *)(v50 + 144) == 1)
            {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Segmentation results:", v45, v46, v47, 0);
              if (*(_DWORD *)(a3 + 20))
              {
                int v212 = 0;
                unsigned __int16 v213 = 0;
                while (1)
                {
                  char *v392 = 0;
                  __sprintf_chk(v400, 0, 0x40uLL, "nbest[%d] ", v212);
                  uint64_t v48 = crf_mde_utils_add2Str(a1, (const char **)&v392, (_WORD *)&v391 + 1, v400);
                  if ((v48 & 0x80000000) != 0) {
                    goto LABEL_389;
                  }
                  BOOL v214 = v63[v213];
                  if (*v214)
                  {
                    uint64_t v215 = 0;
                    unint64_t v216 = 0;
                    do
                    {
                      uint64_t v48 = crf_mde_utils_add2Str(a1, (const char **)&v392, (_WORD *)&v391 + 1, *(char **)(*((void *)v214 + 1) + v215));
                      if ((v48 & 0x80000000) != 0) {
                        goto LABEL_389;
                      }
                      BOOL v214 = v63[v213];
                      unint64_t v217 = *v214;
                      if ((int)v216 + 1 < v217)
                      {
                        uint64_t v48 = crf_mde_utils_add2Str(a1, (const char **)&v392, (_WORD *)&v391 + 1, " | ");
                        if ((v48 & 0x80000000) != 0) {
                          goto LABEL_389;
                        }
                        BOOL v214 = v63[v213];
                        unint64_t v217 = *v214;
                      }
                      ++v216;
                      v215 += 48;
                    }
                    while (v216 < v217);
                  }
                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s", v45, v46, v47, (uint64_t)v392);
                  int v212 = ++v213;
                  unsigned int v375 = *(_DWORD *)(a3 + 20);
                  if (v375 <= v213) {
                    goto LABEL_297;
                  }
                }
              }
            }
            else
            {
              unsigned int v375 = *(_DWORD *)(a3 + 20);
LABEL_297:
              if (v375)
              {
                int v351 = 0;
                int v354 = 0;
                int v219 = 0;
                uint64_t v349 = *(void *)(a3 + 96);
                while (1)
                {
                  int v220 = v351;
                  int v350 = v219;
                  if (v349)
                  {
                    uint64_t v221 = v63[(unsigned __int16)v219];
                    uint64_t v371 = *v221;
                    if (*v221)
                    {
                      uint64_t v222 = 0;
                      unsigned __int16 v223 = 0;
                      uint64_t v224 = *((void *)v221 + 1);
                      do
                      {
                        unsigned __int16 v225 = strlen(*(const char **)(v224 + 48 * v222));
                        if (v379)
                        {
                          unsigned int v226 = v225 + v223;
                          uint64_t v228 = (unsigned __int16 *)(v365 + 2);
                          uint64_t v227 = v379;
                          do
                          {
                            unsigned int v229 = *(v228 - 1);
                            if (v229 >= v223)
                            {
                              unsigned int v230 = *v228 + v229;
                              if (v226 > v229 && v230 > v226)
                              {
                                *((_DWORD *)v221 + 8) = 5;
                                int v220 = 1;
                              }
                              if (v230 < v226) {
                                *(_DWORD *)(v224 + 48 * v222 + 36) = 1;
                              }
                            }
                            v228 += 2;
                            --v227;
                          }
                          while (v227);
                        }
                        v223 += v225;
                        ++v222;
                      }
                      while (v222 != v371);
                    }
                  }
                  int v351 = v220;
                  if (v375 <= (unsigned __int16)(v350 + 1)) {
                    break;
                  }
                  __int16 v232 = v63[(unsigned __int16)v350];
                  int v233 = *v232;
                  uint64_t v234 = 48 * *v232 + 48;
                  unsigned __int16 v235 = v350 + 1;
                  do
                  {
                    v236 = v63[v235];
                    if (v233 == *v236)
                    {
                      uint64_t v237 = 0;
                      while (1)
                      {
                        uint64_t v238 = v237 + 48;
                        if (v234 == v237 + 48) {
                          break;
                        }
                        uint64_t v239 = *((void *)v236 + 1);
                        BOOL v240 = *(_DWORD *)(v239 + v237 + 28) != 1
                            || strcmp(*(const char **)(*((void *)v232 + 1) + v237), *(const char **)(v239 + v237)) == 0;
                        uint64_t v237 = v238;
                        if (!v240) {
                          goto LABEL_326;
                        }
                      }
                      *((_DWORD *)v236 + 8) = 4;
                      int v354 = 1;
                    }
LABEL_326:
                    ++v235;
                  }
                  while (v375 > v235);
                  int v219 = v350 + 1;
                }
LABEL_329:
                if ((v354 == 1 || v351 == 1) && *(_DWORD *)(a3 + 144) == 1)
                {
                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Segmentation results (remove duplicates):", v45, v46, v47, 0);
                  if (*(_DWORD *)(a3 + 20))
                  {
                    int v241 = 0;
                    unsigned __int16 v242 = 0;
                    while (1)
                    {
                      char *v392 = 0;
                      __sprintf_chk(v400, 0, 0x40uLL, "nbest[%d] ", v241);
                      uint64_t v48 = crf_mde_utils_add2Str(a1, (const char **)&v392, (_WORD *)&v391 + 1, v400);
                      if ((v48 & 0x80000000) != 0) {
                        goto LABEL_389;
                      }
                      uint64_t v243 = v63[v242];
                      if (*v243)
                      {
                        uint64_t v244 = 0;
                        unint64_t v245 = 0;
                        do
                        {
                          uint64_t v48 = crf_mde_utils_add2Str(a1, (const char **)&v392, (_WORD *)&v391 + 1, *(char **)(*((void *)v243 + 1) + v244));
                          if ((v48 & 0x80000000) != 0) {
                            goto LABEL_389;
                          }
                          uint64_t v243 = v63[v242];
                          unint64_t v246 = *v243;
                          if ((int)v245 + 1 < v246)
                          {
                            uint64_t v48 = crf_mde_utils_add2Str(a1, (const char **)&v392, (_WORD *)&v391 + 1, " | ");
                            if ((v48 & 0x80000000) != 0) {
                              goto LABEL_389;
                            }
                            uint64_t v243 = v63[v242];
                            unint64_t v246 = *v243;
                          }
                          ++v245;
                          v244 += 48;
                        }
                        while (v245 < v246);
                      }
                      int v247 = *((_DWORD *)v243 + 8);
                      if (v247 == 4)
                      {
                        uint64_t v48 = crf_mde_utils_add2Str(a1, (const char **)&v392, (_WORD *)&v391 + 1, " MDE_Duplicate");
                        if ((v48 & 0x80000000) != 0) {
                          goto LABEL_389;
                        }
                        int v247 = *((_DWORD *)v63[v242] + 8);
                      }
                      if (v247 == 5)
                      {
                        uint64_t v48 = crf_mde_utils_add2Str(a1, (const char **)&v392, (_WORD *)&v391 + 1, " MDE_UmlautSplit");
                        if ((v48 & 0x80000000) != 0) {
                          goto LABEL_389;
                        }
                      }
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s", v45, v46, v47, (uint64_t)v392);
                      int v241 = ++v242;
                      unsigned int v375 = *(_DWORD *)(a3 + 20);
                      if (v375 <= v242) {
                        goto LABEL_350;
                      }
                    }
                  }
                  unsigned int v375 = 0;
                }
LABEL_350:
                int v248 = *(_DWORD *)(a3 + 56);
                if (v248 == 1)
                {
                  if (!*(void *)(a3 + 120)) {
                    goto LABEL_353;
                  }
                }
                else if (v248 || *(void *)(a3 + 120))
                {
LABEL_353:
                  if (a21 == 1)
                  {
                    v249 = strchr(a22, 95);
                    if (v249) {
                      v250 = v249 + 1;
                    }
                    else {
                      v250 = a22;
                    }
                    v353 = v250;
                    int v251 = *v250;
                  }
                  else
                  {
                    v353 = 0;
                    int v251 = 32;
                  }
                  int v352 = v251;
                  uint64_t v48 = crf_mde_utils_do_validation(a1, a12, a13, a14, a15, a16, a17, *(void *)(a3 + 112), *(void *)(a3 + 120), *(void *)(a3 + 128), *(void *)(a3 + 136), (uint64_t)v63, v375, *(_DWORD *)(a3 + 144), *(const char **)(a3 + 64), &v392, (_WORD *)&v391 + 1);
                  if ((v48 & 0x80000000) == 0)
                  {
                    unsigned int v254 = *(_DWORD *)(a3 + 20);
                    if (v254)
                    {
                      unsigned __int16 v255 = 0;
                      for (unsigned __int16 j = 0; j < v254; ++j)
                      {
                        int v257 = v63[j];
                        unsigned int v258 = *((_DWORD *)v257 + 8);
                        if (v258 < 2 || v258 == 3 && !*(void *)(a3 + 136))
                        {
                          unsigned int v259 = *v257;
                          if (v259 > v255) {
                            unsigned __int16 v255 = v259;
                          }
                        }
                      }
                      unsigned __int16 v374 = v255;
                      if (v255)
                      {
                        uint64_t v260 = v255;
                        uint64_t v368 = heap_Calloc(*(void **)(a1 + 8), 1, 2 * v255);
                        if (!v368)
                        {
                          uint64_t v48 = 2310021130;
                          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v261, v262, v263, v264, v341);
                          goto LABEL_390;
                        }
                        uint64_t v265 = 8 * v260;
                        uint64_t v62 = (const char **)heap_Calloc(*(void **)(a1 + 8), 1, 8 * v260);
                        if (!v62)
                        {
                          uint64_t v48 = 2310021130;
                          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v266, v267, v268, v269, v341);
                          int v60 = 0;
                          int v61 = 0;
                          goto LABEL_391;
                        }
                        int v61 = (const char **)heap_Calloc(*(void **)(a1 + 8), 1, 8 * v260);
                        if (!v61)
                        {
                          uint64_t v48 = 2310021130;
                          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v270, v271, v272, v273, v341);
                          int v60 = 0;
                          goto LABEL_391;
                        }
                        int v60 = (const char **)heap_Calloc(*(void **)(a1 + 8), 1, 8 * v260);
                        if (v60)
                        {
                          unint64_t v278 = 0;
                          while (1)
                          {
                            uint64_t v279 = heap_Calloc(*(void **)(a1 + 8), 1, 128);
                            v62[v278 / 8] = (const char *)v279;
                            if (!v279) {
                              break;
                            }
                            uint64_t v280 = heap_Calloc(*(void **)(a1 + 8), 1, 128);
                            v61[v278 / 8] = (const char *)v280;
                            if (!v280) {
                              break;
                            }
                            uint64_t v281 = heap_Calloc(*(void **)(a1 + 8), 1, 128);
                            v60[v278 / 8] = (const char *)v281;
                            if (!v281) {
                              break;
                            }
                            *v62[v278 / 8] = 0;
                            *v61[v278 / 8] = 0;
                            *v60[v278 / 8] = 0;
                            v278 += 8;
                            if (v265 == v278)
                            {
                              char v347 = 0;
                              goto LABEL_394;
                            }
                          }
                        }
                        uint64_t v48 = 2310021130;
                        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v274, v275, v276, v277, v341);
LABEL_464:
                        unsigned __int16 v382 = v358;
                        goto LABEL_392;
                      }
                    }
                    unsigned __int16 v374 = 0;
                    uint64_t v368 = 0;
                    uint64_t v62 = 0;
                    int v61 = 0;
                    int v60 = 0;
                    char v347 = 1;
LABEL_394:
                    int v282 = strlen(__s1[0]);
                    int v283 = v359 + v282;
                    int v356 = Utf8_LengthInBytes((unsigned __int8 *)&__s[(unsigned __int16)(v359 + v282)], 1);
                    int v343 = (unsigned __int16)v283;
                    int v344 = (unsigned __int16)v385;
                    if ((unsigned __int16)v385 > (unsigned __int16)v283
                      && (__int16 v284 = &__s[(unsigned __int16)v283],
                          (*(unsigned int (**)(uint64_t, uint64_t, const char *))(a12 + 128))(a13, a14, v284)))
                    {
                      int v360 = v283;
                      do
                      {
                        if (!strncmp(v284, "_", (unsigned __int16)v356)) {
                          break;
                        }
                        int v285 = v360 + v356;
                        int v356 = Utf8_LengthInBytes((unsigned __int8 *)&__s[(unsigned __int16)(v360 + v356)], 1);
                        int v343 = (unsigned __int16)v285;
                        int v360 = v285;
                        if ((unsigned __int16)v385 <= (unsigned __int16)v285) {
                          break;
                        }
                        __int16 v284 = &__s[(unsigned __int16)v285];
                      }
                      while ((*(unsigned int (**)(uint64_t, uint64_t, const char *))(a12 + 128))(a13, a14, v284));
                    }
                    else
                    {
                      LOWORD(v360) = v283;
                    }
                    if (*(_DWORD *)(a3 + 20))
                    {
                      uint64_t v366 = 0;
                      unsigned __int16 v367 = 0;
                      int v355 = 0;
                      unsigned __int16 v286 = 0;
                      int v346 = a36;
                      v345 = a35;
                      while (1)
                      {
                        uint64_t v386 = v286;
                        unsigned int v287 = *((_DWORD *)v63[v286] + 8);
                        if (v287 < 2 || v287 == 3 && !*(void *)(a3 + 136))
                        {
                          *a31 = 0;
                          *a32 = 0;
                          *a33 = 0;
                          uint64_t v288 = (uint64_t)v63[v386];
                          if (*(_WORD *)(v288 + 16))
                          {
                            uint64_t v289 = 0;
                            uint64_t v290 = v386;
                            __int16 v348 = v386 + 1;
                            while (1)
                            {
                              uint64_t v384 = v289;
                              uint64_t v291 = 5 * v289;
                              crf_mde_getStrForCrossToken(v288, *(char **)(*(void *)(v288 + 24) + 80 * v289), v61, *(const char **)(a3 + 64), "â—„", "â—–");
                              crf_mde_getStrForCrossToken((uint64_t)v63[v290], *(char **)(*((void *)v63[v290] + 3) + 16 * v291 + 48), v62, *(const char **)(a3 + 64), 0, 0);
                              crf_mde_getStrForCrossToken((uint64_t)v63[v290], *(char **)(*((void *)v63[v290] + 3) + 16 * v291 + 64), v60, *(const char **)(a3 + 64), 0, 0);
                              if (*v63[v290])
                              {
                                unint64_t v295 = 0;
                                uint64_t v296 = v368;
                                do
                                {
                                  int v297 = strlen(v62[v295]);
                                  *(_WORD *)(v296 + 2 * v295) = Utf8_LengthInUtf8chars((unint64_t)v62[v295], v297);
                                  int v298 = strlen(v61[v295]);
                                  unsigned __int16 v299 = Utf8_LengthInUtf8chars((unint64_t)v61[v295], v298);
                                  int v300 = strlen(v60[v295]);
                                  uint64_t v296 = v368;
                                  unsigned __int16 v301 = Utf8_LengthInUtf8chars((unint64_t)v60[v295], v300);
                                  unsigned int v302 = *(unsigned __int16 *)(v368 + 2 * v295);
                                  if (v299 > v302)
                                  {
                                    *(_WORD *)(v368 + 2 * v295) = v299;
                                    unsigned int v302 = v299;
                                  }
                                  if (v302 < v301) {
                                    *(_WORD *)(v368 + 2 * v295) = v301;
                                  }
                                  ++v295;
                                }
                                while (v295 < *v63[v386]);
                                if (*v63[v386])
                                {
                                  unint64_t v303 = 0;
                                  do
                                  {
                                    int v304 = strlen(v62[v303]);
                                    unsigned __int16 v305 = Utf8_LengthInUtf8chars((unint64_t)v62[v303], v304);
                                    if (*(unsigned __int16 *)(v368 + 2 * v303) > v305)
                                    {
                                      unsigned int v306 = v305;
                                      do
                                      {
                                        *(_WORD *)&v62[v303][strlen(v62[v303])] = 126;
                                        ++v306;
                                      }
                                      while (v306 < *(unsigned __int16 *)(v368 + 2 * v303));
                                    }
                                    int v307 = strlen(v61[v303]);
                                    unsigned __int16 v308 = Utf8_LengthInUtf8chars((unint64_t)v61[v303], v307);
                                    if (*(unsigned __int16 *)(v368 + 2 * v303) > v308)
                                    {
                                      unsigned int v309 = v308;
                                      do
                                      {
                                        *(_WORD *)&v61[v303][strlen(v61[v303])] = 126;
                                        ++v309;
                                      }
                                      while (v309 < *(unsigned __int16 *)(v368 + 2 * v303));
                                    }
                                    int v310 = strlen(v60[v303]);
                                    unsigned __int16 v311 = Utf8_LengthInUtf8chars((unint64_t)v60[v303], v310);
                                    if (*(unsigned __int16 *)(v368 + 2 * v303) > v311)
                                    {
                                      unsigned int v312 = v311;
                                      do
                                      {
                                        *(_WORD *)&v60[v303][strlen(v60[v303])] = 126;
                                        ++v312;
                                      }
                                      while (v312 < *(unsigned __int16 *)(v368 + 2 * v303));
                                    }
                                    ++v303;
                                  }
                                  while (v303 < *v63[v386]);
                                }
                              }
                              *a31 = 0;
                              *a32 = 0;
                              *a33 = 0;
                              if (*v63[v386])
                              {
                                unint64_t v313 = 0;
                                do
                                {
                                  strcat(a31, v61[v313]);
                                  strcat(a32, v62[v313]);
                                  strcat(a33, v60[v313++]);
                                }
                                while (v313 < *v63[v386]);
                              }
                              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"crosstoken call nbest[%d] solution[%d] segpat:%s patPOS:%s pos:%s pron:%s feat:%s", v292, v293, v294, v366);
                              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"crosstoken call phon:%s", v314, v315, v316, (uint64_t)a31);
                              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"crosstoken call pos :%s", v317, v318, v319, (uint64_t)a32);
                              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"crosstoken call cgn :%s", v320, v321, v322, (uint64_t)a33);
                              *a34 = 0;
                              strcpy(v399, "normal");
                              uint64_t v323 = oneword_crosstoken(a1, a18, a19, a20, a21, a22, 0, v352, v353, v399, 0, a23, a24, a25, a26, a27, a28, a29, a30,
                                       (const char **)&a31,
                                       (const char **)&a32,
                                       (const char **)&a33,
                                       (const char **)&a34);
                              if ((v323 & 0x80000000) != 0) {
                                break;
                              }
                              HIWORD(v342) = WORD1(a31);
                              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"write to lingdb nbest[%d] solution[%d] pos:%s pron:%s cgn:%s", v45, v46, v47, v366);
                              v324 = v63[v386];
                              int v325 = *((_DWORD *)v324 + 8);
                              if (v346)
                              {
                                if (v325 == 3 && !*(void *)(a3 + 136)) {
                                  v326 = (const char **)&a32;
                                }
                                else {
                                  v326 = (const char **)(*((void *)v324 + 3) + 80 * v384 + 16);
                                }
                                v327 = *v326;
                                v328 = a31;
                                v329 = a33;
                                __int16 v330 = v348 + *v324 * v364;
                                int v331 = *(_DWORD *)(a3 + 52);
                              }
                              else
                              {
                                if (v325 == 3 && !*(void *)(a3 + 136)) {
                                  v332 = (const char **)&a32;
                                }
                                else {
                                  v332 = (const char **)(*((void *)v324 + 3) + 80 * v384 + 16);
                                }
                                v327 = *v332;
                                v328 = a31;
                                v329 = a33;
                                __int16 v330 = v348 + *v324 * v364;
                                int v331 = 1;
                              }
                              LOWORD(v342) = v330;
                              uint64_t v48 = hlp_Write2WordRec(a9, a10, a11, v362, v372, (unsigned __int16)v360 - (unsigned __int16)v363, v367, v327, v328, v329, v345, v342, v331);
                              if ((v48 & 0x80000000) != 0) {
                                goto LABEL_458;
                              }
                              if ((v347 & 1) == 0)
                              {
                                uint64_t v333 = v374;
                                v334 = v60;
                                v335 = v61;
                                v336 = v62;
                                do
                                {
                                  v337 = *v336++;
                                  unsigned char *v337 = 0;
                                  v338 = *v335++;
                                  unsigned char *v338 = 0;
                                  v339 = *v334++;
                                  unsigned char *v339 = 0;
                                  --v333;
                                }
                                while (v333);
                              }
                              ++v367;
                              uint64_t v290 = v386;
                              uint64_t v289 = v384 + 1;
                              uint64_t v288 = (uint64_t)v63[v386];
                              if (v384 + 1 >= (unint64_t)*(unsigned __int16 *)(v288 + 16)) {
                                goto LABEL_450;
                              }
                            }
                            uint64_t v48 = v323;
                            goto LABEL_458;
                          }
LABEL_450:
                          int v355 = 1;
                        }
                        unsigned __int16 v286 = v386 + 1;
                        uint64_t v366 = (unsigned __int16)(v386 + 1);
                        if (*(_DWORD *)(a3 + 20) <= (unsigned __int16)(v386 + 1)) {
                          goto LABEL_455;
                        }
                      }
                    }
                    int v355 = 0;
LABEL_455:
                    if (v344 != v343) {
                      int v360 = v359 + strlen(__s1[0]);
                    }
LABEL_458:
                    if (v355 != 1) {
                      goto LABEL_464;
                    }
                    uint64_t v59 = v365;
                    uint64_t v50 = a3;
LABEL_460:
                    __int16 v165 = v360;
                    goto LABEL_182;
                  }
                  goto LABEL_389;
                }
                if (v375)
                {
                  int v355 = 0;
                  unsigned __int16 v252 = 0;
                  uint64_t v50 = a3;
                  do
                  {
                    uint64_t v48 = crf_mde_utils_write_morphemes(a1, *(_DWORD *)(a3 + 56), *(void *)(a3 + 120), a12, a13, a14, a9, v47, a10, a11, v362, v372, v363, v63[v252], __s, &v391);
                    if ((v48 & 0x80000000) != 0)
                    {
                      uint64_t v368 = 0;
                      uint64_t v62 = 0;
                      int v61 = 0;
                      int v60 = 0;
                      unsigned __int16 v374 = 0;
                      goto LABEL_458;
                    }
                    if ((unsigned __int16)v391 == (unsigned __int16)v385) {
                      int v253 = v385;
                    }
                    else {
                      int v253 = v360;
                    }
                    int v360 = v253;
                    ++v252;
                    int v355 = 1;
                  }
                  while (*(_DWORD *)(a3 + 20) > v252);
                  unsigned __int16 v374 = 0;
                  int v60 = 0;
                  int v61 = 0;
                  uint64_t v62 = 0;
                  uint64_t v368 = 0;
                  uint64_t v59 = v365;
                  goto LABEL_460;
                }
LABEL_389:
                unsigned __int16 v374 = 0;
LABEL_390:
                int v60 = 0;
                int v61 = 0;
                uint64_t v62 = 0;
                uint64_t v368 = 0;
LABEL_391:
                unsigned __int16 v382 = v358;
LABEL_392:
                uint64_t v59 = v365;
                uint64_t v50 = a3;
                goto LABEL_16;
              }
            }
            unsigned int v375 = 0;
            int v354 = 0;
            int v351 = 0;
            goto LABEL_329;
          }
LABEL_2:
          uint64_t v48 = 2310021130;
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v44, v45, v46, v47, v340);
          return v48;
        }
      }
LABEL_290:
      unsigned __int16 v374 = 0;
      int v60 = 0;
      int v61 = 0;
      uint64_t v62 = 0;
      uint64_t v368 = 0;
      unsigned int v63 = 0;
      __int16 v218 = v166;
LABEL_291:
      unsigned __int16 v382 = v218;
      goto LABEL_16;
    }
  }
  if (v135 != 2) {
    goto LABEL_148;
  }
  uint64_t v136 = *(const char **)(v50 + 80);
  if (!v136 || strncmp(&__s1[0][v132], v136, v133))
  {
    uint64_t v137 = *(const char **)(v50 + 64);
    if (!v137 || strncmp(&__s1[0][v132], v137, v134)) {
      goto LABEL_148;
    }
  }
  unsigned __int16 v138 = v132 - v130;
  if ((_WORD)v132 != v130 && strcmp(a22, "prompt") && strcmp(a22, "internal-nuance-system-norm")) {
    goto LABEL_144;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Error Parsing For Morpheme - character=%d, word=%s", v45, v46, v47, v132);
  int v154 = *(_DWORD *)(v50 + 56);
  if (!v154)
  {
    uint64_t v59 = v365;
    __int16 v155 = v363;
    unsigned __int16 v156 = v362;
    unsigned __int16 v157 = __s;
    if (!*(void *)(v50 + 120)) {
      goto LABEL_173;
    }
LABEL_185:
    unsigned __int16 v374 = 0;
    v376 = 0;
    int v60 = 0;
    int v61 = 0;
    uint64_t v62 = 0;
    uint64_t v368 = 0;
    unsigned int v63 = 0;
    goto LABEL_16;
  }
  uint64_t v59 = v365;
  __int16 v155 = v363;
  unsigned __int16 v156 = v362;
  unsigned __int16 v157 = __s;
  if (v154 != 1 || !*(void *)(v50 + 120)) {
    goto LABEL_185;
  }
LABEL_173:
  uint64_t v158 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * *(unsigned int *)(v50 + 20));
  if (!v158) {
    goto LABEL_2;
  }
  unsigned int v63 = (unsigned __int16 **)v158;
  uint64_t v159 = heap_Calloc(*(void **)(a1 + 8), 1, 40);
  char *v63 = (unsigned __int16 *)v159;
  if (!v159) {
    goto LABEL_2;
  }
  *((void *)*v63 + 1) = heap_Calloc(*(void **)(a1 + 8), 1, 48);
  __int16 v160 = *v63;
  if (!*((void *)*v63 + 1)) {
    goto LABEL_2;
  }
  *__int16 v160 = 0;
  *((_DWORD *)v160 + 8) = 0;
  size_t v161 = strlen(__s1[0]);
  *(void *)(*((void *)*v63 + 1) + 48 * **v63) = heap_Calloc(*(void **)(a1 + 8), 1, v161 + 1);
  uint64_t v162 = *(char **)(*((void *)*v63 + 1) + 48 * **v63);
  if (!v162) {
    goto LABEL_2;
  }
  strcpy(v162, __s1[0]);
  v163 = *v63;
  unsigned __int16 *v163 = **v63 + 1;
  uint64_t v48 = crf_mde_utils_write_morphemes(a1, 0, 0, a12, a13, a14, a9, v164, a10, a11, v156, v372, v155, v163, v157, &v391);
  if ((v48 & 0x80000000) != 0)
  {
    unsigned __int16 v374 = 0;
    v376 = 0;
    int v60 = 0;
    int v61 = 0;
    uint64_t v62 = 0;
    uint64_t v368 = 0;
    __int16 v218 = 1;
    goto LABEL_291;
  }
  unsigned __int16 v374 = 0;
  v376 = 0;
  int v60 = 0;
  int v61 = 0;
  uint64_t v62 = 0;
  uint64_t v368 = 0;
  if ((unsigned __int16)v391 == (unsigned __int16)v385) {
    __int16 v165 = v385;
  }
  else {
    __int16 v165 = v360;
  }
  unsigned __int16 v382 = 1;
LABEL_182:
  _WORD *v361 = v165 - v363;
LABEL_16:
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"CRF MDE segmentation for token \"%s\" : %s", v45, v46, v47, (uint64_t)__s1[0]);
  crf_mde_seg_fv_dealloc((void *)a1, (uint64_t)v398);
  if (v392)
  {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v392);
    v392 = 0;
  }
  if (v379) {
    heap_Free(*(void **)(a1 + 8), v59);
  }
  if (v374)
  {
    for (uint64_t k = 0; k != v374; ++k)
    {
      if (v62)
      {
        uint64_t v66 = (uint64_t)v62[k];
        if (v66)
        {
          heap_Free(*(void **)(a1 + 8), v66);
          v62[k] = 0;
        }
      }
      if (v61)
      {
        uint64_t v67 = (uint64_t)v61[k];
        if (v67)
        {
          heap_Free(*(void **)(a1 + 8), v67);
          v61[k] = 0;
        }
      }
      if (v60)
      {
        uint64_t v68 = (uint64_t)v60[k];
        if (v68)
        {
          heap_Free(*(void **)(a1 + 8), v68);
          v60[k] = 0;
        }
      }
    }
    if (v368) {
      heap_Free(*(void **)(a1 + 8), v368);
    }
    if (v62) {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v62);
    }
    if (v61) {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v61);
    }
    if (v60) {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v60);
    }
  }
  crf_mde_utils_dynstr_free((void *)a1, (uint64_t)__s1);
  if (v393)
  {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v393);
    v393 = 0;
  }
  if (v376) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v376);
  }
  if (v381)
  {
    if (v382)
    {
      uint64_t v69 = v382;
      size_t v70 = (uint64_t *)v381;
      do
      {
        if (*v70)
        {
          heap_Free(*(void **)(a1 + 8), *v70);
          *size_t v70 = 0;
        }
        ++v70;
        --v69;
      }
      while (v69);
    }
    heap_Free(*(void **)(a1 + 8), v381);
    heap_Free(*(void **)(a1 + 8), v373);
  }
  if (v64)
  {
    int v71 = *(unsigned __int16 *)(v50 + 10);
    if (2 * v71 + v380)
    {
      unsigned __int16 v72 = 0;
      do
      {
        uint64_t v73 = v72;
        uint64_t v74 = v64[v72];
        if (v74)
        {
          heap_Free(*(void **)(a1 + 8), v74);
          v64[v73] = 0;
          int v71 = *(unsigned __int16 *)(v50 + 10);
        }
        unsigned __int16 v72 = v73 + 1;
      }
      while (v380 + 2 * v71 > (unsigned __int16)(v73 + 1));
    }
    heap_Free(*(void **)(a1 + 8), (uint64_t)v64);
  }
  uint64_t v75 = v396;
  if (v396)
  {
    unsigned int v76 = v395;
    if (v395)
    {
      unsigned __int16 v77 = 0;
      do
      {
        uint64_t v78 = v77;
        uint64_t v79 = *(void *)(v396 + 8 * v77);
        if (v79)
        {
          heap_Free(*(void **)(a1 + 8), v79);
          *(void *)(v396 + 8 * v78) = 0;
          unsigned int v76 = v395;
        }
        unsigned __int16 v77 = v78 + 1;
      }
      while (v76 > (unsigned __int16)(v78 + 1));
      uint64_t v75 = v396;
    }
    heap_Free(*(void **)(a1 + 8), v75);
    uint64_t v396 = 0;
  }
  if (v63)
  {
    if (*(_DWORD *)(v50 + 20))
    {
      unsigned __int16 v80 = 0;
      do
      {
        uint64_t v81 = v80;
        uint64_t v82 = v63[v80];
        if (*v82)
        {
          unint64_t v83 = 0;
          do
          {
            heap_Free(*(void **)(a1 + 8), *(void *)(*((void *)v82 + 1) + 48 * v83));
            *(void *)(*((void *)v63[v81] + 1) + 48 * v83) = 0;
            uint64_t v84 = v63[v81];
            uint64_t v85 = *((void *)v84 + 1);
            if (*(_WORD *)(v85 + 48 * v83 + 8))
            {
              uint64_t v86 = 0;
              unint64_t v87 = 0;
              do
              {
                uint64_t v88 = *(void *)(*(void *)(v85 + 48 * v83 + 16) + v86 + 8);
                if (v88)
                {
                  heap_Free(*(void **)(a1 + 8), v88);
                  *(void *)(*(void *)(*((void *)v63[v81] + 1) + 48 * v83 + 16) + v86 + 8) = 0;
                  uint64_t v84 = v63[v81];
                }
                uint64_t v85 = *((void *)v84 + 1);
                uint64_t v89 = *(void *)(v85 + 48 * v83 + 16);
                uint64_t v90 = *(void *)(v89 + v86 + 16);
                if (v90)
                {
                  heap_Free(*(void **)(a1 + 8), v90);
                  *(void *)(*(void *)(*((void *)v63[v81] + 1) + 48 * v83 + 16) + v86 + 16) = 0;
                  uint64_t v84 = v63[v81];
                  uint64_t v85 = *((void *)v84 + 1);
                  uint64_t v89 = *(void *)(v85 + 48 * v83 + 16);
                }
                uint64_t v91 = *(void *)(v89 + v86 + 24);
                if (v91)
                {
                  heap_Free(*(void **)(a1 + 8), v91);
                  *(void *)(*(void *)(*((void *)v63[v81] + 1) + 48 * v83 + 16) + v86 + 24) = 0;
                  uint64_t v84 = v63[v81];
                  uint64_t v85 = *((void *)v84 + 1);
                }
                ++v87;
                v86 += 32;
              }
              while (v87 < *(unsigned __int16 *)(v85 + 48 * v83 + 8));
            }
            heap_Free(*(void **)(a1 + 8), *(void *)(v85 + 48 * v83 + 16));
            *(void *)(*((void *)v63[v81] + 1) + 48 * v83++ + 16) = 0;
            uint64_t v82 = v63[v81];
          }
          while (v83 < *v82);
        }
        heap_Free(*(void **)(a1 + 8), *((void *)v82 + 1));
        *((void *)v63[v81] + 1) = 0;
        crf_mde_utils_CRF_MDE_SEGPAT_T_free((void *)a1, (uint64_t *)v63[v81] + 3, v63[v81][8]);
        heap_Free(*(void **)(a1 + 8), (uint64_t)v63[v81]);
        v63[v81] = 0;
        unsigned __int16 v80 = v81 + 1;
      }
      while (*(_DWORD *)(v50 + 20) > (unsigned __int16)(v81 + 1));
    }
    heap_Free(*(void **)(a1 + 8), (uint64_t)v63);
  }
  return v48;
}

uint64_t isUmlaut(const char *a1, int a2, unsigned __int8 **a3, unsigned int a4, _WORD *a5)
{
  if (!a4) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a4;
  while (1)
  {
    unsigned __int16 v11 = Utf8_LengthInBytes(*a3, 1);
    if (a2 == v11 && !strncmp(a1, (const char *)*a3, v11)) {
      break;
    }
    ++v9;
    a3 += 2;
    if (v10 == v9) {
      return 0;
    }
  }
  *a5 = v9;
  return 1;
}

uint64_t crf_mde_seg_concat_strings(uint64_t a1, uint64_t *a2, char **a3)
{
  unsigned int v6 = *((_DWORD *)a2 + 2);
  if (v6)
  {
    int v7 = 0;
    LODWORD(v8) = 0;
    uint64_t v9 = *a2;
    do
      uint64_t v8 = v8 + strlen(*(const char **)(v9 + 16 * v7++)) + 2;
    while (v6 > v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), 1, v8);
  *a3 = (char *)v10;
  if (v10)
  {
    if (*((_DWORD *)a2 + 2))
    {
      unsigned int v15 = 0;
      unsigned __int8 v16 = 0;
      do
      {
        strcat(*a3, *(const char **)(*a2 + 16 * v16));
        unsigned int v17 = *((_DWORD *)a2 + 2);
        if (v17 - 1 > v15)
        {
          *(_WORD *)&(*a3)[strlen(*a3)] = 32;
          unsigned int v17 = *((_DWORD *)a2 + 2);
        }
        unsigned int v15 = ++v16;
      }
      while (v17 > v16);
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v11, v12, v13, v14, v19);
    return 2310021130;
  }
}

uint64_t crf_mde_seg_set_param_value(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _WORD *a5, int *a6, int *a7, int *a8)
{
  unsigned int v15 = (const char *)(a2 + a3);
  if (!strcmp(v15, "nbest"))
  {
    *a8 = atoi((const char *)(a2 + a4));
    return log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde param, %s: %s", v18, v19, v20, (uint64_t)v15);
  }
  if (!strcmp(v15, "padding"))
  {
    *a5 = atoi((const char *)(a2 + a4));
    return log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde param, %s: %s", v18, v19, v20, (uint64_t)v15);
  }
  if (!strcmp(v15, "annotation"))
  {
    uint64_t result = strcmp((const char *)(a2 + a4), "BMES");
    if (result)
    {
      uint64_t result = strcmp((const char *)(a2 + a4), "BI");
      if (result) {
        return result;
      }
      int v21 = 1;
    }
    else
    {
      int v21 = 2;
    }
    *a7 = v21;
    return result;
  }
  uint64_t result = strcmp(v15, "type");
  if (!result)
  {
    uint64_t result = strcmp((const char *)(a2 + a4), "char");
    if (!result)
    {
      int v17 = 1;
      goto LABEL_18;
    }
    uint64_t result = strcmp((const char *)(a2 + a4), "morpheme");
    if (!result)
    {
      int v17 = 2;
LABEL_18:
      *a6 = v17;
    }
  }
  return result;
}

uint64_t crf_mde_seg_set_featureparam_value(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char **a5)
{
  uint64_t v9 = (const char *)(a2 + a3);
  if (strcmp(v9, "isvowel")) {
    return 0;
  }
  uint64_t v10 = (const char *)(a2 + a4);
  size_t v11 = strlen(v10);
  uint64_t v12 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v11 + 1);
  *a5 = v12;
  if (v12)
  {
    strcpy(v12, v10);
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde featureparam, %s: %s", v17, v18, v19, (uint64_t)v9);
    return 0;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v13, v14, v15, v16, v21);
  return 2310021130;
}

uint64_t oneword_posparser_Open(uint64_t a1)
{
  uint64_t v20 = 0;
  *(_DWORD *)(a1 + 2004) = 0;
  *(void *)&v17[0] = 0;
  unsigned __int8 v21 = 0;
  int v19 = 0;
  __int16 v22 = -1;
  uint64_t v2 = (_OWORD *)(a1 + 64);
  uint64_t result = (*(uint64_t (**)(void, void, const char *, const char *, long long *, __int16 *, unsigned __int8 *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "arwpospredictiononly", v17, &v22, &v21);
  if ((result & 0x80000000) != 0 || !v22)
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
    return oneword_posparser_Close(a1, v4, v5, v6, v7, v8, v9, v10);
  }
  size_t v11 = **(const char ***)&v17[0];
  uint64_t v12 = strchr(**(char ***)&v17[0], v21);
  if (v12)
  {
    char *v12 = 0;
    size_t v11 = **(const char ***)&v17[0];
  }
  if (strcmp(v11, "1")) {
    return oneword_posparser_Close(a1, v4, v5, v6, v7, v8, v9, v10);
  }
  int v19 = 1;
  uint64_t result = posparser_Open(*(void *)a1, (uint64_t *)(a1 + 2008));
  if ((result & 0x80000000) == 0)
  {
    *(_OWORD *)(*(void *)(a1 + 2008) + 8) = *v2;
    uint64_t v13 = *(void *)(a1 + 2008);
    *(void *)(v13 + 24) = *(void *)(a1 + 80);
    *(void *)(v13 + 32) = *(void *)(a1 + 56);
    *(void *)(v13 + 56) = *(void *)(a1 + 104);
    *(_OWORD *)(v13 + 40) = *(_OWORD *)(a1 + 88);
    uint64_t result = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"langcode", &v20);
    if ((result & 0x80000000) == 0)
    {
      __strcpy_chk();
      *(_DWORD *)(*(void *)(a1 + 2008) + 243) = 7565168;
      uint64_t v14 = *(void *)(a1 + 2008);
      uint64_t result = getPosparserIGTreesAndDict(*(void *)a1, *(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(void *)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24), (_DWORD *)(v14 + 232), (uint64_t *)(v14 + 216), (uint64_t *)(v14 + 224), (_DWORD *)(v14 + 236), v14 + 240, &v19);
      if ((result & 0x80000000) == 0)
      {
        if (v19)
        {
          *(_DWORD *)(a1 + 2004) = 1;
          uint64_t v15 = *(void **)(*(void *)a1 + 8);
          uint64_t v16 = (uint64_t *)(*(void *)(a1 + 2008) + 256);
          v17[0] = xmmword_26C21F390;
          v17[1] = *(_OWORD *)&off_26C21F3A0;
          uint64_t v18 = off_26C21F3B0;
          uint64_t result = ssftmap_ObjOpen(v15, 0, v17, v16);
          if ((result & 0x80000000) == 0) {
            return posparser_getPosMap(*(void **)(a1 + 2008));
          }
          return result;
        }
        return oneword_posparser_Close(a1, v4, v5, v6, v7, v8, v9, v10);
      }
    }
  }
  return result;
}

uint64_t oneword_posparser_Close(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void **)(a1 + 2008);
  if (v9)
  {
    if (v9[32])
    {
      uint64_t v10 = ssftmap_ObjClose(v9[32]);
      uint64_t v9 = *(void **)(a1 + 2008);
      if ((v10 & 0x80000000) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (v9[27] && v9[28])
    {
      uint64_t v10 = freePosparserIGTrees(*(void *)a1, v9 + 27, v9 + 28, a4, a5, a6, a7, a8);
      uint64_t v9 = *(void **)(a1 + 2008);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_10:
  posparser_Close(v9);
  *(void *)(a1 + 2008) = 0;
  *(_DWORD *)(a1 + 2004) = 0;
  return v10;
}

uint64_t oneword_posparser_Reopen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = oneword_posparser_Close(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0)
  {
    return oneword_posparser_Open(a1);
  }
  return result;
}

uint64_t oneword_posparser_Start(uint64_t a1)
{
  uint64_t result = posparser_ProcessStart(*(char **)(a1 + 2008));
  if ((result & 0x80000000) == 0 && !*(_DWORD *)(*(void *)(a1 + 2008) + 248))
  {
    posparser_ProcessEnd(*(void **)(a1 + 2008));
    uint64_t result = 0;
    *(_DWORD *)(a1 + 2004) = 0;
  }
  return result;
}

uint64_t oneword_posparser_End(uint64_t a1)
{
  return 0;
}

uint64_t oneword_posparser_Process(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v45 = 0;
  __int16 v44 = 0;
  int v42 = 0;
  unsigned int __s = 0;
  uint64_t v41 = 0;
  int v40 = 0;
  __int16 v39 = 0;
  unsigned int v37 = 0;
  __src = 0;
  unsigned __int16 v36 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 104))(a2, a3, 1, 0, &v45);
  if ((v6 & 0x80000000) != 0) {
    goto LABEL_22;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1[7] + 184))(a2, a3, v45, 0, &v44) & 0x80000000) != 0) {
    return v6;
  }
  if (v44 != 1) {
    return v6;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1[7] + 176))(a2, a3, v45, 0, &__s, &v40);
  if ((v6 & 0x80000000) != 0 || (unsigned __int16)v40 < 2u) {
    return v6;
  }
  unsigned int v7 = strlen(__s);
  uint64_t v8 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, v7 + 1);
  int v42 = v8;
  if (!v8) {
    goto LABEL_34;
  }
  uint64_t v13 = v8;
  strcpy(v8, __s);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void **, unsigned __int16 *))(a1[7] + 176))(a2, a3, v45, 1, &__src, &v36);
  if ((v14 & 0x80000000) == 0)
  {
    uint64_t v15 = (char *)heap_Alloc(*(void *)(*a1 + 8), 32 * v36);
    unsigned int v37 = v15;
    if (v15)
    {
      uint64_t v16 = (uint64_t)v15;
      memcpy(v15, __src, 32 * v36);
      uint64_t v17 = v45;
      int v51 = 0;
      int v52 = 0;
      unsigned __int16 v50 = 0;
      int v49 = 0;
      uint64_t v18 = v36;
      unsigned __int16 v46 = v36;
      __n128 v47 = 0u;
      long long v48 = 0u;
      v47.n128_u32[0] = 1;
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1[7] + 184))(a2, a3, v45, 3, (char *)&v52 + 2) & 0x80000000) != 0|| HIWORD(v52) != 1|| ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a1[7] + 104))(a2, a3, 3, v17, &v52) & 0x80000000) != 0)
      {
LABEL_15:
        uint64_t v21 = v16;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 32 * v18 + 32;
        while ((_WORD)v52)
        {
          v20 += 32;
          --v19;
          if (((*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 120))(a2, a3) & 0x80000000) != 0) {
            goto LABEL_15;
          }
        }
        if (v19)
        {
          uint64_t v21 = heap_Realloc(*(uint64_t **)(*a1 + 8), v16, v20);
          if (!v21)
          {
            log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 54000, 0, v28, v29, v30, v31, v35);
            uint64_t v18 = v36;
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v21 = v16;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a1[7] + 104))(a2, a3, 3, v17, &v52) & 0x80000000) == 0)
        {
          unsigned __int16 v32 = v52;
          if ((_WORD)v52)
          {
            do
            {
              if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v32, 1, 1, &v51, (char *)&v51 + 2) & 0x80000000) != 0)break; {
              if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v52, 2, 1, &v50, (char *)&v51 + 2) & 0x80000000) != 0)break;
              }
              if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v52, 0, 1, &v49, (char *)&v51 + 2) & 0x80000000) != 0)break; {
              v47.n128_u32[0] = 59;
              }
              v47.n128_u32[1] = (unsigned __int16)v51;
              int v33 = *(_DWORD *)(v21 + 12) + (unsigned __int16)v51;
              v47.n128_u32[2] = v50;
              v47.n128_u32[3] = v33;
              LODWORD(v48) = v50 - (unsigned __int16)v51;
              DWORD2(v48) = v49;
              __n128 v34 = posPInsertTOKMarker(v21, &v46, &v47);
              if (((*(uint64_t (**)(uint64_t, uint64_t, void, int *, __n128))(a1[7] + 120))(a2, a3, (unsigned __int16)v52, &v52, v34) & 0x80000000) != 0)break; {
              unsigned __int16 v32 = v52;
              }
            }
            while ((_WORD)v52);
            uint64_t v18 = v46;
          }
        }
      }
      unsigned int v37 = (char *)v21;
      unsigned __int16 v36 = v18;
      uint64_t v16 = v21;
LABEL_17:
      uint64_t v14 = posparser_ExtractWords((_DWORD *)a1[251], v16, v18, v13, v7, &v41, (unsigned __int16 *)&v40 + 1);
      if ((v14 & 0x80000000) == 0)
      {
        uint64_t v14 = posparser_Process((unsigned __int16 *)a1[251], a2, a3, v41, HIWORD(v40), 0, v45, &v42, (uint64_t *)&v37, &v36);
        if ((v14 & 0x80000000) == 0)
        {
          __int16 v22 = strlen(v42);
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, char *, __int16 *))(a1[7] + 160))(a2, a3, v45, 0, (unsigned __int16)(v22 + 1), v42, &v39);
          if ((v14 & 0x80000000) == 0) {
            uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1[7] + 160))(a2, a3, v45, 1, v36, v37, &v39);
          }
        }
      }
      goto LABEL_21;
    }
LABEL_34:
    uint64_t v6 = 2310021130;
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 54000, 0, v9, v10, v11, v12, v35);
    return v6;
  }
LABEL_21:
  uint64_t v6 = v14;
LABEL_22:
  if (v42) {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v42);
  }
  uint64_t v23 = (uint64_t)v37;
  if (v37)
  {
    unsigned int v24 = v36;
    if (v36)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      do
      {
        if (*(_DWORD *)&v37[v25] == 58)
        {
          heap_Free(*(void **)(*a1 + 8), *(void *)&v37[v25 + 24]);
          *(void *)&v37[v25 + 24] = 0;
          unsigned int v24 = v36;
        }
        ++v26;
        v25 += 32;
      }
      while (v26 < v24);
      uint64_t v23 = (uint64_t)v37;
    }
    heap_Free(*(void **)(*a1 + 8), v23);
  }
  if (v41) {
    posparser_FreeWords((void *)a1[251], v41, HIWORD(v40));
  }
  return v6;
}

uint64_t dt_Main(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char *__s2)
{
  LODWORD(v10) = a2;
  uint64_t v141 = *MEMORY[0x263EF8340];
  memset(v139, 0, sizeof(v139));
  int v137 = 0;
  unsigned __int16 v136 = 0;
  unsigned __int16 v134 = 0;
  unsigned int __s = 0;
  unsigned __int16 v133 = 0;
  unsigned int v132 = 0;
  memset(v138, 0, sizeof(v138));
  uint64_t v12 = (const char **)(a1 + 168);
  **(unsigned char **)(a1 + 168) = 0;
  *(unsigned char *)(*(void *)(a1 + 160) + 127) = 0;
  uint64_t v13 = (char *)(a1 + 584);
  if (!strstr((char *)(a1 + 584), __s2))
  {
    int v14 = strlen(*(const char **)(a1 + 160));
    uint64_t v15 = utf8_Utf8ToDepes(*(void *)(a1 + 160), v14 + 1, 0, *(void *)(a1 + 160), v14 + 1, &v132, 0);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
  }
  unsigned int v130 = v10;
  int v16 = strlen(*(const char **)(a1 + 160));
  int v17 = Transcription_Con((uint64_t)v139, a1 + 888, *(unsigned char **)(a1 + 160), v16 + 1, 4, 1);
  uint64_t v18 = LH_ERROR_to_VERROR(v17);
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v40 = v18;
    goto LABEL_99;
  }
  __s1 = v13;
  int v23 = PtrQueue_Con((uint64_t)v138, a1 + 888, 5u, 5);
  uint64_t v28 = LH_ERROR_to_VERROR(v23);
  if ((v28 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v24, v25, v26, v27, v119);
    uint64_t appended = v28;
    goto LABEL_93;
  }
  int Word = _LexDT_FindWord(a5, (uint64_t)v139, (uint64_t)v138);
  uint64_t v30 = LH_ERROR_to_VERROR(Word);
  uint64_t v35 = v30;
  uint64_t v10 = v10;
  if ((v30 & 0x80000000) != 0)
  {
    int v36 = v30 & 0x1FFF;
    uint64_t v37 = *(void *)(*(void *)a1 + 32);
    if (v36 != 266)
    {
      log_OutPublic(v37, (uint64_t)"FE_ONEWORD", 34004, 0, v31, v32, v33, v34, v119);
      goto LABEL_27;
    }
    log_OutPublic(v37, (uint64_t)"FE_ONEWORD", 34005, 0, v31, v32, v33, v34, v119);
  }
  if (PtrQueue_IsEmpty((uint64_t)v138))
  {
    char v38 = 1;
    uint64_t appended = v35;
    if (!v10) {
      goto LABEL_93;
    }
LABEL_32:
    if (**v12) {
      char v52 = 0;
    }
    else {
      char v52 = v38;
    }
    if ((v52 & 1) == 0)
    {
      if (dynamic_strcat(v12, ";_", (size_t *)(a1 + 200), *(uint64_t **)(*(void *)a1 + 8)))
      {
        __int16 v53 = strlen(*(const char **)(a1 + 168));
        uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, char *))(*(void *)(a1 + 56) + 160))(a3, a4, v10, 11, (unsigned __int16)(v53 + 1), *(void *)(a1 + 168), (char *)&v137 + 2);
      }
      else
      {
LABEL_88:
        uint64_t appended = 2310021130;
      }
    }
    goto LABEL_93;
  }
  unsigned __int16 v136 = 0;
  uint64_t v125 = a4;
  uint64_t v126 = a3;
  if (!v10) {
    goto LABEL_29;
  }
  int v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56) + 184))(a3, a4, v10, 11, &v136);
  int v42 = v136;
  if ((v41 & 0x80000000) == 0 && v136 == 1)
  {
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 56) + 176))(a3, a4, v10, 11, &__s, &v137);
    if ((v35 & 0x80000000) == 0)
    {
      int v42 = v136;
      goto LABEL_19;
    }
LABEL_27:
    uint64_t appended = v35;
    goto LABEL_93;
  }
LABEL_19:
  if (v42)
  {
    int v43 = v28;
    uint64_t v28 = (uint64_t)__s;
    if (__s)
    {
      uint64_t appended = 2310021130;
      unsigned __int16 v44 = strlen(__s) + 3;
      unsigned __int16 v45 = *(char **)(a1 + 168);
      if (*(void *)(a1 + 200) < (unint64_t)v44)
      {
        uint64_t v46 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v45, v44);
        if (!v46)
        {
          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v47, v48, v49, v50, v119);
          LODWORD(v28) = v43;
          goto LABEL_93;
        }
        unsigned __int16 v45 = (char *)v46;
        char *v12 = (const char *)v46;
        *(void *)(a1 + 200) = v44;
        uint64_t v28 = (uint64_t)__s;
      }
      strcpy(v45, (const char *)v28);
      unsigned __int16 v123 = v44;
      LODWORD(v28) = v43;
      a4 = v125;
      uint64_t v10 = v130;
      if (!dynamic_strcat(v12, "\x12", (size_t *)(a1 + 200), *(uint64_t **)(*(void *)a1 + 8))) {
        goto LABEL_93;
      }
      goto LABEL_30;
    }
    LODWORD(v28) = v43;
    a4 = v125;
  }
LABEL_29:
  *char *v12 = 0;
  unsigned __int16 v123 = 3;
LABEL_30:
  BOOL IsEmpty = PtrQueue_IsEmpty((uint64_t)v138);
  char v38 = 1;
  uint64_t appended = v35;
  if (IsEmpty)
  {
    if (!v10) {
      goto LABEL_93;
    }
    goto LABEL_32;
  }
  char v54 = 0;
  int v120 = v28;
  BOOL v121 = v10 == 0;
  uint64_t v122 = (size_t *)(a1 + 200);
  do
  {
    char v127 = v54;
    uint64_t v55 = PtrQueue_Item((uint64_t)v138);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"DT: %s", v56, v57, v58, *(void *)(v55 + 8));
    strcpy(v140, "dtpostproc");
    unsigned __int16 v124 = strlen(v140);
    uint64_t v129 = v55;
    if (*(_DWORD *)(a1 + 576) && !*(_DWORD *)(a1 + 840))
    {
      unsigned int v131 = 0;
      unsigned __int16 v77 = *(const char **)(v55 + 8);
      unint64_t v78 = (unsigned __int16)(2 * strlen(v77)) | 1u;
      uint64_t v79 = *(void *)(a1 + 176);
      if (*(void *)(a1 + 208) < v78)
      {
        uint64_t v80 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 176), v78);
        if (!v80)
        {
LABEL_91:
          uint64_t appended = 2310021130;
          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v63, v64, v65, v66, v119);
          goto LABEL_92;
        }
        uint64_t v79 = v80;
        *(void *)(a1 + 176) = v80;
        *(void *)(a1 + 208) = v78;
        unsigned __int16 v77 = *(const char **)(v129 + 8);
      }
      uint64_t appended = (*(uint64_t (**)(void, void, uint64_t, const char *, unint64_t, uint64_t, void))(*(void *)(a1 + 152) + 72))(*(void *)(a1 + 136), *(void *)(a1 + 144), 1, v77, v78, v79, 0);
      unsigned int v81 = strlen(*(const char **)(a1 + 176));
      unsigned int v82 = (unsigned __int16)Utf8_DepesLengthInBytesUtf8(*(unsigned __int8 **)(a1 + 176), v81);
      uint64_t v83 = *(void *)(a1 + 160);
      if (v82 >= *(unsigned __int16 *)(a1 + 192))
      {
        uint64_t v84 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 160), v82 + 1);
        if (!v84) {
          goto LABEL_101;
        }
        uint64_t v83 = v84;
        *(void *)(a1 + 160) = v84;
        *(void *)(a1 + 192) = v82 + 1;
        uint64_t v10 = v130;
      }
      if (!strstr(__s1, __s2))
      {
        unsigned int v89 = strlen(*(const char **)(a1 + 176));
        uint64_t appended = utf8_DepesToUtf8(*(void *)(a1 + 176), v89, 0, v83, v82, &v131, 0);
        if ((appended & 0x80000000) != 0) {
          goto LABEL_93;
        }
        uint64_t v83 = *(void *)(a1 + 160);
      }
      *(unsigned char *)(v83 + v131) = 0;
      a3 = v126;
      goto LABEL_61;
    }
    uint64_t v59 = *(const char **)(v55 + 8);
    unsigned __int16 v60 = strlen(v59) + 1;
    int v61 = *(char **)(a1 + 160);
    if (*(void *)(a1 + 192) < (unint64_t)v60)
    {
      uint64_t v62 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v61, v60);
      if (!v62) {
        goto LABEL_91;
      }
      int v61 = (char *)v62;
      *(void *)(a1 + 160) = v62;
      *(void *)(a1 + 192) = v60;
      uint64_t v59 = *(const char **)(v129 + 8);
    }
    strcpy(v61, v59);
    uint64_t appended = 0;
    int v70 = *(_DWORD *)(a1 + 840);
    if (!v70 && v60)
    {
      unint64_t v71 = 0;
      uint64_t v72 = 1;
      unsigned __int16 v73 = v60;
      do
      {
        uint64_t v74 = *(const char **)(a1 + 160);
        uint64_t v75 = &v74[v71];
        if (v74[v71] == 126)
        {
          size_t v76 = strlen(v74);
          memmove((void *)(v75 + 1), v75, v76 + v72);
          *(_WORD *)(*(void *)(a1 + 160) + v71) = -24126;
          ++v73;
        }
        ++v71;
        --v72;
      }
      while (v71 < v73);
      uint64_t appended = 0;
      a4 = v125;
      a3 = v126;
      uint64_t v10 = v130;
LABEL_61:
      int v70 = *(_DWORD *)(a1 + 840);
    }
    if (v70)
    {
      unsigned __int16 v134 = *(char **)(a1 + 160);
    }
    else
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v67, v68, v69, (uint64_t)v140);
      unsigned __int16 v90 = strlen(*(const char **)(a1 + 160));
      uint64_t v91 = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, *(void *)(a1 + 160), v90);
      if ((v91 & 0x80000000) != 0) {
        goto LABEL_90;
      }
      if (strcmp(__s2, "normal"))
      {
        __strcat_chk();
        __strcat_chk();
      }
      if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), v140) & 0x80000000) != 0)
      {
        v140[v124] = 0;
        uint64_t v91 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), v140);
        if ((v91 & 0x80000000) != 0)
        {
LABEL_90:
          uint64_t appended = v91;
LABEL_92:
          PDELETE_Transcription(a1 + 888, v129);
          goto LABEL_93;
        }
      }
      uint64_t appended = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 104)
                                                                                                + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, &v134, &v133);
      if ((appended & 0x80000000) != 0) {
        goto LABEL_92;
      }
      v134[v133] = 0;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v92, v93, v94, (uint64_t)v140);
      unsigned __int16 v98 = v133;
      if (v133)
      {
        unint64_t v99 = 0;
        uint64_t v100 = 1;
        do
        {
          uint64_t v101 = v134;
          uint64_t v102 = &v134[v99];
          if (!strncmp(&v134[v99], "Â¡", 2uLL))
          {
            size_t v103 = strlen(v101);
            memmove(v102 + 1, v102 + 2, v103 + v100);
            v134[v99] = 126;
            unsigned __int16 v98 = v133;
          }
          ++v99;
          --v100;
        }
        while (v99 < v98);
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v95, v96, v97, (uint64_t)v140);
      LODWORD(v28) = v120;
      a4 = v125;
      a3 = v126;
      uint64_t v10 = v130;
    }
    if (v127)
    {
      if (v10)
      {
        unsigned __int16 v104 = v134;
        __int16 v105 = strlen(v134);
        uint64_t v106 = (size_t *)(a1 + 200);
        v123 += v105 + 1;
        if (*v122 < v123)
        {
          uint64_t v107 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 168), v123);
          if (!v107)
          {
LABEL_101:
            uint64_t appended = 2310021130;
            log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v85, v86, v87, v88, v119);
            goto LABEL_93;
          }
          char *v12 = (const char *)v107;
          uint64_t v106 = (size_t *)(a1 + 200);
          *uint64_t v122 = v123;
          unsigned __int16 v104 = v134;
        }
        if (!dynamic_strcat(v12, v104, v106, *(uint64_t **)(*(void *)a1 + 8))
          || !dynamic_strcat(v12, "\x12", v122, *(uint64_t **)(*(void *)a1 + 8)))
        {
          goto LABEL_88;
        }
      }
    }
    else
    {
      uint64_t appended = oneword_AppendPhon(a1, v134, "*", (uint64_t)"*", 0, v121);
      if ((appended & 0x80000000) != 0) {
        goto LABEL_92;
      }
    }
    PtrQueue_Remove((uint64_t)v138);
    PDELETE_Transcription(a1 + 888, v129);
    BOOL v108 = PtrQueue_IsEmpty((uint64_t)v138);
    char v54 = 1;
  }
  while (!v108);
  char v38 = 0;
  if (v10) {
    goto LABEL_32;
  }
LABEL_93:
  int v109 = Transcription_Des((uint64_t)v139);
  uint64_t v110 = LH_ERROR_to_VERROR(v109);
  if ((appended & 0x80000000) == 0)
  {
    uint64_t v115 = v110;
    if ((v110 & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v111, v112, v113, v114, v119);
      uint64_t appended = v115;
    }
  }
  if ((v28 & 0x80000000) == 0)
  {
    int v116 = (*(uint64_t (**)(_OWORD *))(*(void *)&v138[0] + 16))(v138);
    uint64_t v117 = LH_ERROR_to_VERROR(v116);
    if ((appended & 0x80000000) == 0)
    {
      uint64_t v40 = v117;
      if ((v117 & 0x80000000) != 0)
      {
LABEL_99:
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v19, v20, v21, v22, v119);
        return v40;
      }
    }
  }
  return appended;
}

uint64_t mde_stemafx_Main(uint64_t a1, const char *a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v23 = 0;
  if (*(unsigned char *)(a1 + 286) == 1
    && (size_t v11 = strlen(__s), v11 >= *(unsigned __int8 *)(a1 + 282))
    && v11 <= *(unsigned __int8 *)(a1 + 283)
    && (*(unsigned char *)(a1 + 284) != 1
     || (int v14 = *__s, (v14 - 65) < 0x1A)
     || (unsigned int v15 = v14 - 128, v15 <= 0x25) && ((1 << v15) & 0x200605C001) != 0))
  {
    uint64_t v16 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t))(*(void *)(a1 + 80) + 104))(*(void *)(a1 + 64), *(void *)(a1 + 72), a2, __s, 128);
    if ((v16 & 0x80000000) != 0) {
      return v16;
    }
    **(unsigned char **)(a1 + 160) = 0;
    **(unsigned char **)(a1 + 168) = 0;
    **(unsigned char **)(a1 + 176) = 0;
    uint64_t v12 = hlp_MdeRecurse(a1, __s, 0, &v23, 0, 0, a2);
    if ((v12 & 0x80000000) == 0 && !v23)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Mde stem affix failed", v17, v18, v19, v22);
      strcpy(*(char **)(a1 + 160), __s);
      **(unsigned char **)(a1 + 168) = 0;
      **(unsigned char **)(a1 + 176) = 0;
      if ((unsigned __int16)strlen(__s))
      {
        int v20 = 0;
        while (dynamic_strcat((const char **)(a1 + 168), " ", (size_t *)(a1 + 200), *(uint64_t **)(*(void *)a1 + 8))
             && dynamic_strcat((const char **)(a1 + 176), " ", (size_t *)(a1 + 208), *(uint64_t **)(*(void *)a1 + 8)))
        {
          v20 += utf8_determineUTF8CharLength(__s[(unsigned __int16)v20]);
          if ((unsigned __int16)strlen(__s) <= (unsigned __int16)v20) {
            return v12;
          }
        }
        return 2310021130;
      }
    }
  }
  else
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Mde stem affix cfg settings do not apply on %s", a6, a7, a8, (uint64_t)__s);
    uint64_t v12 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t))(*(void *)(a1 + 80) + 104))(*(void *)(a1 + 64), *(void *)(a1 + 72), a2, __s, 128);
    if ((v12 & 0x80000000) == 0)
    {
      strcpy(*(char **)(a1 + 160), __s);
      **(unsigned char **)(a1 + 168) = 0;
      **(unsigned char **)(a1 + 176) = 0;
      if ((unsigned __int16)strlen(__s))
      {
        int v13 = 0;
        while (dynamic_strcat((const char **)(a1 + 168), " ", (size_t *)(a1 + 200), *(uint64_t **)(*(void *)a1 + 8))
             && dynamic_strcat((const char **)(a1 + 176), " ", (size_t *)(a1 + 208), *(uint64_t **)(*(void *)a1 + 8)))
        {
          v13 += utf8_determineUTF8CharLength(__s[(unsigned __int16)v13]);
          if ((unsigned __int16)strlen(__s) <= (unsigned __int16)v13) {
            return v12;
          }
        }
        return 2310021130;
      }
    }
  }
  return v12;
}

uint64_t hlp_MdeRecurse(uint64_t a1, const char *a2, unsigned int a3, _DWORD *a4, int a5, char *a6, const char *a7)
{
  unsigned int v11 = a3;
  uint64_t v263 = 0;
  v264[0] = 0;
  int v262 = 0;
  __int16 v261 = 0;
  __int16 v260 = 10801;
  if (a3 != (unsigned __int16)strlen(a2))
  {
    uint64_t v30 = 0;
    char v31 = 32;
    uint64_t v32 = 32;
    goto LABEL_15;
  }
  unsigned int v249 = v11;
  int v13 = (const char **)(a1 + 168);
  int v14 = strlen(*(const char **)(a1 + 168));
  int v15 = strlen(a7);
  uint64_t v16 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), (v14 + v15 + 6));
  if (!v16)
  {
    uint64_t v30 = 2310021130;
LABEL_169:
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v17, v18, v19, v20, v219);
    return v30;
  }
  uint64_t v21 = v16;
  uint64_t v237 = a4;
  strcpy(v16, "mde_");
  uint64_t v243 = a7;
  uint64_t v22 = strcat(v16, a7);
  *(_WORD *)&v21[strlen(v22)] = 95;
  unsigned __int16 v23 = strlen(v21);
  uint64_t v24 = *v13;
  if ((unsigned __int16)strlen(*v13))
  {
    uint64_t v28 = 0;
    do
    {
      int v29 = v24[v28];
      if (v29 != 32 && v29 != 126)
      {
        v21[v23] = v29;
        uint64_t v24 = *v13;
        ++v23;
      }
      ++v28;
    }
    while ((unsigned __int16)strlen(v24) > (unsigned __int16)v28);
  }
  v21[v23] = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v25, v26, v27, (uint64_t)v21);
  LOWORD(v262) = -1;
  uint64_t v30 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t *, int *, char *))(*(void *)(a1 + 80)
                                                                                                  + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v21, v264, &v262, (char *)&v261 + 1);
  if ((v30 & 0x80000000) != 0) {
    goto LABEL_278;
  }
  if ((_WORD)v262)
  {
LABEL_11:
    *a4 = 1;
LABEL_12:
    char v31 = 32;
    uint64_t v32 = 32;
    a7 = v243;
    goto LABEL_13;
  }
  strcpy(v21, "mde_");
  int v153 = *v13;
  if ((unsigned __int16)strlen(*v13))
  {
    uint64_t v157 = 0;
    unsigned __int16 v158 = 4;
    do
    {
      int v159 = v153[v157];
      if (v159 != 32 && v159 != 126)
      {
        v21[v158] = v159;
        int v153 = *v13;
        ++v158;
      }
      ++v157;
    }
    while ((unsigned __int16)strlen(v153) > (unsigned __int16)v157);
  }
  else
  {
    unsigned __int16 v158 = 4;
  }
  v21[v158] = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v154, v155, v156, (uint64_t)v21);
  LOWORD(v262) = -1;
  uint64_t v30 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t *, int *, char *))(*(void *)(a1 + 80)
                                                                                                  + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v21, v264, &v262, (char *)&v261 + 1);
  if ((v30 & 0x80000000) != 0)
  {
LABEL_278:
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v21);
    return v30;
  }
  if ((_WORD)v262) {
    goto LABEL_11;
  }
  if (*a4) {
    goto LABEL_12;
  }
  a7 = v243;
  if (!a6)
  {
    char v31 = 32;
    uint64_t v32 = 32;
    goto LABEL_13;
  }
  if (!*(_DWORD *)(a1 + 288)) {
    goto LABEL_186;
  }
  __int16 v160 = strchr(a6, 95);
  if (!v160) {
    goto LABEL_186;
  }
  size_t v161 = v160;
  v236 = a6;
  size_t v162 = strlen(v160) + 1;
  memmove(a6 + 1, v161, v162);
  *a6 = 64;
  int v248 = strchr(a6, 95);
  if (!v248)
  {
    char v31 = 32;
    uint64_t v32 = 32;
    a7 = v243;
    goto LABEL_13;
  }
  a7 = v243;
  if (*a4)
  {
LABEL_186:
    char v31 = 32;
    uint64_t v32 = 32;
    goto LABEL_13;
  }
  unsigned __int16 v256 = (const char **)(a1 + 160);
  unsigned __int16 v252 = (size_t *)(a1 + 192);
  unint64_t v246 = (size_t *)(a1 + 200);
  int v233 = (const char **)(a1 + 176);
  __sa = (char *)(a1 + 208);
  uint64_t v32 = 32;
  char v163 = 1;
  char v31 = 32;
  while (1)
  {
    unsigned __int16 v242 = v248 + 1;
    char v254 = v163;
    if ((v163 & 1) == 0)
    {
      LOBYTE(v260) = v248[1];
      uint64_t v32 = v248[2];
      char v31 = v248[3];
      *((_WORD *)v248 + 1) = 42;
      unsigned __int16 v242 = (const char *)&v260;
    }
    LOWORD(v262) = 0;
    uint64_t v164 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t *, int *, char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "mdeafx", a6, v264, &v262, (char *)&v261 + 1);
    if ((v164 & 0x80000000) != 0) {
      goto LABEL_277;
    }
    if ((v254 & 1) == 0)
    {
      v248[2] = v32;
      v248[3] = v31;
    }
    uint64_t v164 = hlp_saveLookupResults(*(void **)(*(void *)a1 + 8), v264[0], (unsigned __int16)v262, &v263, (unsigned __int16 *)&v262 + 1);
    if ((v164 & 0x80000000) != 0)
    {
LABEL_277:
      uint64_t v30 = v164;
      goto LABEL_278;
    }
    char v165 = v254;
    __int16 v166 = a4;
    if (HIWORD(v262))
    {
      if (!*a4) {
        break;
      }
    }
    uint64_t v30 = 0;
LABEL_202:
    if ((v165 & 1) == 0)
    {
      a4 = v166;
LABEL_13:
      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v21);
      unsigned int v11 = v249;
LABEL_15:
      if (*(unsigned __int8 *)(a1 + 285) == a5) {
        goto LABEL_274;
      }
      uint64_t v33 = a6;
      char v34 = a5;
      uint64_t v35 = a2;
      int v36 = strlen(a2);
      if (v11 >= (unsigned __int16)v36) {
        goto LABEL_274;
      }
      uint64_t v244 = a7;
      char v227 = v31;
      unsigned int __s = (char *)&a2[v11];
      unsigned __int8 v224 = v34 + 1;
      unsigned int v259 = (const char **)(a1 + 160);
      int v253 = (const char **)(a1 + 168);
      unsigned __int16 v255 = (size_t *)(a1 + 192);
      int v251 = (size_t *)(a1 + 200);
      unint64_t v245 = (size_t *)(a1 + 208);
      int v247 = (const char **)(a1 + 176);
      uint64_t v37 = (unsigned __int16)v36;
      char v38 = a4;
      __int16 v39 = v33;
      int v40 = v36;
      while (2)
      {
        if (*v38) {
          goto LABEL_274;
        }
        int v41 = v38;
        char v42 = v35[v37];
        v35[v37] = 0;
        if (v11)
        {
          char v258 = v42;
          int v43 = strchr(v39, 95);
          if (v43)
          {
            unsigned __int16 v44 = v43;
            uint64_t v240 = v37;
            int v232 = v40;
            unsigned __int16 v45 = v35;
            uint64_t v46 = v32;
            uint64_t v47 = &v39[strlen(__s)];
            size_t v48 = strlen(v44);
            memmove(v47, v44, v48 + 1);
            size_t v49 = strlen(__s);
            memcpy(v39, __s, v49);
            uint64_t v234 = v39;
            uint64_t v50 = strchr(v39, 95);
            if (v50)
            {
              char v38 = v41;
              uint64_t v32 = v46;
              if (!*v41)
              {
                __int16 v53 = v50;
                unsigned int v250 = v11;
                unsigned __int16 v225 = v50 + 1;
                char v54 = 1;
                uint64_t v35 = v45;
                int v40 = v232;
                while (1)
                {
                  uint64_t v55 = v38;
                  uint64_t v56 = v225;
                  char v229 = v54;
                  if ((v54 & 1) == 0)
                  {
                    LOBYTE(v260) = v53[1];
                    uint64_t v32 = v53[2];
                    char v227 = v53[3];
                    *((_WORD *)v53 + 1) = 42;
                    uint64_t v56 = (const char *)&v260;
                  }
                  LOWORD(v262) = 0;
                  uint64_t v30 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t *, int *, char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "mdeafx", v39, v264, &v262, (char *)&v261 + 1);
                  int v51 = *(void **)(*(void *)a1 + 8);
                  if ((v30 & 0x80000000) != 0) {
                    goto LABEL_275;
                  }
                  uint64_t v52 = hlp_saveLookupResults(v51, v264[0], (unsigned __int16)v262, &v263, (unsigned __int16 *)&v262 + 1);
                  if ((v52 & 0x80000000) != 0) {
                    return v52;
                  }
                  char v57 = v229;
                  if ((v229 & 1) == 0)
                  {
                    v53[2] = v32;
                    v53[3] = v227;
                  }
                  char v38 = v55;
                  if (HIWORD(v262) && !*v55)
                  {
                    uint64_t v58 = 0;
                    uint64_t v238 = v55;
                    unsigned int v221 = v32;
                    while (1)
                    {
                      uint64_t v220 = v58;
                      uint64_t v59 = *(char **)(v263 + 8 * v58);
                      unsigned __int16 v60 = strchr(v59, HIBYTE(v261));
                      int v61 = v60;
                      if (v60)
                      {
                        *unsigned __int16 v60 = 0;
                        int v61 = v60 + 1;
                        uint64_t v62 = strchr(v60 + 1, HIBYTE(v261));
                        if (v62) {
                          *uint64_t v62 = 0;
                        }
                      }
                      unsigned __int16 v63 = strlen(*v259);
                      if (v63)
                      {
                        if (!dynamic_strcat(v259, "+", v255, *(uint64_t **)(*(void *)a1 + 8))
                          || !dynamic_strcat(v253, "~", v251, *(uint64_t **)(*(void *)a1 + 8))
                          || !dynamic_strcat(v247, "~", v245, *(uint64_t **)(*(void *)a1 + 8)))
                        {
                          goto LABEL_273;
                        }
                      }
                      uint64_t v64 = __s;
                      if (v61)
                      {
                        if (*v61) {
                          uint64_t v64 = v61;
                        }
                        else {
                          uint64_t v64 = __s;
                        }
                      }
                      int v65 = (__int16)strlen(v64);
                      int v66 = (__int16)strlen(v59);
                      int v67 = (__int16)strlen(v56);
                      if (v66 > v67) {
                        int v67 = v66;
                      }
                      if (v65 > v67) {
                        LOWORD(v67) = v65;
                      }
                      uint64_t v68 = hlp_Realloc((uint64_t *)a1, (unsigned __int16)(v67 + v63 + 4));
                      if ((v68 & 0x80000000) != 0) {
                        goto LABEL_188;
                      }
                      if (!dynamic_strcat(v259, v64, v255, *(uint64_t **)(*(void *)a1 + 8))
                        || !dynamic_strcat(v253, v59, v251, *(uint64_t **)(*(void *)a1 + 8))
                        || !dynamic_strcat(v247, v56, v245, *(uint64_t **)(*(void *)a1 + 8)))
                      {
                        goto LABEL_273;
                      }
                      int v69 = strlen(v64);
                      signed int v70 = Utf8_LengthInUtf8chars((unint64_t)v64, v69) << 16;
                      if (v70 >= (int)(strlen(v59) << 16)
                        && (int v71 = strlen(v64),
                            signed int v72 = Utf8_LengthInUtf8chars((unint64_t)v64, v71) << 16,
                            v72 >= (int)(strlen(v56) << 16)))
                      {
                        int v84 = strlen(v64);
                        uint64_t v85 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v64, v84);
                        if (strlen(v59) != v85)
                        {
                          int v86 = 0;
                          while (dynamic_strcat(v253, "~", v251, *(uint64_t **)(*(void *)a1 + 8)))
                          {
                            ++v86;
                            int v87 = strlen(v64);
                            uint64_t v88 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v64, v87);
                            if (v88 - strlen(v59) <= (unsigned __int16)v86) {
                              goto LABEL_86;
                            }
                          }
                          goto LABEL_273;
                        }
LABEL_86:
                        int v89 = strlen(v64);
                        uint64_t v90 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v64, v89);
                        if (strlen(v56) != v90)
                        {
                          int v91 = 0;
                          while (dynamic_strcat(v247, "~", v245, *(uint64_t **)(*(void *)a1 + 8)))
                          {
                            ++v91;
                            int v92 = strlen(v64);
                            uint64_t v93 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v64, v92);
                            if (v93 - strlen(v56) <= (unsigned __int16)v91) {
                              goto LABEL_99;
                            }
                          }
                          goto LABEL_273;
                        }
                      }
                      else
                      {
                        signed int v73 = strlen(v59) << 16;
                        int v74 = strlen(v64);
                        if (v73 >= (int)(Utf8_LengthInUtf8chars((unint64_t)v64, v74) << 16)
                          && (size_t v75 = strlen(v59), v75 << 16 >= (signed int)(strlen(v56) << 16)))
                        {
                          int v94 = strlen(v64);
                          if (v75 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v64, v94))
                          {
                            int v95 = 0;
                            while (dynamic_strcat(v259, "~", v255, *(uint64_t **)(*(void *)a1 + 8)))
                            {
                              ++v95;
                              size_t v96 = strlen(v59);
                              int v97 = strlen(v64);
                              if (v96 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v64, v97) <= (unsigned __int16)v95) {
                                goto LABEL_95;
                              }
                            }
                            goto LABEL_273;
                          }
LABEL_95:
                          size_t v98 = strlen(v59);
                          if (v98 != strlen(v56))
                          {
                            int v99 = 0;
                            while (dynamic_strcat(v247, "~", v245, *(uint64_t **)(*(void *)a1 + 8)))
                            {
                              ++v99;
                              size_t v100 = strlen(v59);
                              if (v100 - strlen(v56) <= (unsigned __int16)v99) {
                                goto LABEL_99;
                              }
                            }
                            goto LABEL_273;
                          }
                        }
                        else
                        {
                          size_t v76 = strlen(v56);
                          int v77 = strlen(v64);
                          if (v76 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v64, v77))
                          {
                            int v78 = 0;
                            while (dynamic_strcat(v259, "~", v255, *(uint64_t **)(*(void *)a1 + 8)))
                            {
                              ++v78;
                              size_t v79 = strlen(v56);
                              int v80 = strlen(v64);
                              if (v79 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v64, v80) <= (unsigned __int16)v78) {
                                goto LABEL_77;
                              }
                            }
                            goto LABEL_273;
                          }
LABEL_77:
                          size_t v81 = strlen(v56);
                          if (v81 != strlen(v59))
                          {
                            int v82 = 0;
                            while (dynamic_strcat(v253, "~", v251, *(uint64_t **)(*(void *)a1 + 8)))
                            {
                              ++v82;
                              size_t v83 = strlen(v56);
                              if (v83 - strlen(v59) <= (unsigned __int16)v82) {
                                goto LABEL_99;
                              }
                            }
                            goto LABEL_273;
                          }
                        }
                      }
LABEL_99:
                      uint64_t v37 = v240;
                      v35[v240] = v258;
                      __int16 v39 = v234;
                      uint64_t v30 = hlp_MdeRecurse(a1, v35, (unsigned __int16)v240, v238, v224, v234, v244);
                      if ((v30 & 0x80000000) != 0) {
                        goto LABEL_274;
                      }
                      char v38 = v238;
                      if (!*v238)
                      {
                        (*v259)[v63] = 0;
                        (*v253)[v63] = 0;
                        (*v247)[v63] = 0;
                      }
                      uint64_t v58 = v220 + 1;
                      uint64_t v32 = v221;
                      if (v220 + 1 >= (unint64_t)HIWORD(v262))
                      {
                        char v57 = v229;
                        goto LABEL_46;
                      }
                      char v57 = v229;
                      if (*v238) {
                        goto LABEL_46;
                      }
                    }
                  }
                  uint64_t v30 = 0;
LABEL_46:
                  if (v57)
                  {
                    char v54 = 0;
                    if (!*v38) {
                      continue;
                    }
                  }
                  unsigned int v11 = v250;
                  goto LABEL_24;
                }
              }
              uint64_t v35 = v45;
              int v40 = v232;
LABEL_24:
              char v42 = v258;
              goto LABEL_34;
            }
            uint64_t v32 = v46;
            uint64_t v35 = v45;
            int v40 = v232;
          }
          char v42 = v258;
        }
        else
        {
          LOWORD(v262) = 0;
          uint64_t v30 = (*(uint64_t (**)(void, void, const char *, const char *, uint64_t *, int *, char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "mdestem", v35, v264, &v262, (char *)&v261 + 1);
          int v51 = *(void **)(*(void *)a1 + 8);
          if ((v30 & 0x80000000) != 0) {
            goto LABEL_275;
          }
          uint64_t v52 = hlp_saveLookupResults(v51, v264[0], (unsigned __int16)v262, &v263, (unsigned __int16 *)&v262 + 1);
          if ((v52 & 0x80000000) != 0) {
            return v52;
          }
          if (HIWORD(v262))
          {
            char v38 = v41;
            if (!*v41)
            {
              char v258 = v42;
              uint64_t v101 = 0;
              uint64_t v239 = v41;
              uint64_t v241 = v37;
              unsigned int v222 = v32;
              while (1)
              {
                uint64_t v235 = v101;
                uint64_t v102 = *(char **)(v263 + 8 * v101);
                size_t v103 = strchr(v102, HIBYTE(v261));
                unsigned __int16 v104 = v103;
                if (v103)
                {
                  char *v103 = 0;
                  unsigned __int16 v104 = v103 + 1;
                  __int16 v105 = strchr(v103 + 1, HIBYTE(v261));
                  uint64_t v106 = v105;
                  if (v105)
                  {
                    *__int16 v105 = 0;
                    uint64_t v106 = v105 + 1;
                    uint64_t v107 = strchr(v105 + 1, HIBYTE(v261));
                    if (v107) {
                      *uint64_t v107 = 0;
                    }
                  }
                }
                else
                {
                  uint64_t v106 = 0;
                }
                unsigned __int16 v108 = strlen(*v259);
                if (v108)
                {
                  if (!dynamic_strcat(v259, "+", v255, *(uint64_t **)(*(void *)a1 + 8))
                    || !dynamic_strcat(v253, "~", v251, *(uint64_t **)(*(void *)a1 + 8))
                    || !dynamic_strcat(v247, "~", v245, *(uint64_t **)(*(void *)a1 + 8)))
                  {
                    goto LABEL_273;
                  }
                }
                if (v104) {
                  int v109 = v104;
                }
                else {
                  int v109 = &byte_20D5A22AE;
                }
                if (!v106 || !*v106) {
                  uint64_t v106 = v35;
                }
                int v110 = (__int16)strlen(v106);
                int v111 = (__int16)strlen(v102);
                int v112 = (__int16)strlen(v109);
                if (v111 > v112) {
                  int v112 = v111;
                }
                if (v110 > v112) {
                  LOWORD(v112) = v110;
                }
                uint64_t v68 = hlp_Realloc((uint64_t *)a1, (unsigned __int16)(v112 + v108 + 4));
                if ((v68 & 0x80000000) != 0)
                {
LABEL_188:
                  uint64_t v30 = v68;
                  goto LABEL_274;
                }
                if (!dynamic_strcat(v259, v106, v255, *(uint64_t **)(*(void *)a1 + 8))
                  || !dynamic_strcat(v253, v102, v251, *(uint64_t **)(*(void *)a1 + 8))
                  || !dynamic_strcat(v247, v109, v245, *(uint64_t **)(*(void *)a1 + 8)))
                {
                  goto LABEL_273;
                }
                int v113 = strlen(v106);
                signed int v114 = Utf8_LengthInUtf8chars((unint64_t)v106, v113) << 16;
                if (v114 >= (int)(strlen(v102) << 16)
                  && (int v115 = strlen(v106),
                      signed int v116 = Utf8_LengthInUtf8chars((unint64_t)v106, v115) << 16,
                      v116 >= (int)(strlen(v109) << 16)))
                {
                  int v128 = strlen(v106);
                  uint64_t v129 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v106, v128);
                  if (strlen(v102) != v129)
                  {
                    int v130 = 0;
                    while (dynamic_strcat(v253, "~", v251, *(uint64_t **)(*(void *)a1 + 8)))
                    {
                      ++v130;
                      int v131 = strlen(v106);
                      uint64_t v132 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v106, v131);
                      if (v132 - strlen(v102) <= (unsigned __int16)v130) {
                        goto LABEL_147;
                      }
                    }
                    goto LABEL_273;
                  }
LABEL_147:
                  int v133 = strlen(v106);
                  uint64_t v134 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v106, v133);
                  if (strlen(v109) != v134)
                  {
                    int v135 = 0;
                    while (dynamic_strcat(v247, "~", v245, *(uint64_t **)(*(void *)a1 + 8)))
                    {
                      ++v135;
                      int v136 = strlen(v106);
                      uint64_t v137 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v106, v136);
                      if (v137 - strlen(v109) <= (unsigned __int16)v135) {
                        goto LABEL_160;
                      }
                    }
                    goto LABEL_273;
                  }
                }
                else
                {
                  signed int v117 = strlen(v102) << 16;
                  int v118 = strlen(v106);
                  if (v117 >= (int)(Utf8_LengthInUtf8chars((unint64_t)v106, v118) << 16)
                    && (size_t v119 = strlen(v102), v119 << 16 >= (signed int)(strlen(v109) << 16)))
                  {
                    int v138 = strlen(v106);
                    if (v119 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v106, v138))
                    {
                      int v139 = 0;
                      while (dynamic_strcat(v259, "~", v255, *(uint64_t **)(*(void *)a1 + 8)))
                      {
                        ++v139;
                        size_t v140 = strlen(v102);
                        int v141 = strlen(v106);
                        if (v140 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v106, v141) <= (unsigned __int16)v139) {
                          goto LABEL_156;
                        }
                      }
                      goto LABEL_273;
                    }
LABEL_156:
                    size_t v142 = strlen(v102);
                    if (v142 != strlen(v109))
                    {
                      int v143 = 0;
                      while (dynamic_strcat(v247, "~", v245, *(uint64_t **)(*(void *)a1 + 8)))
                      {
                        ++v143;
                        size_t v144 = strlen(v102);
                        if (v144 - strlen(v109) <= (unsigned __int16)v143) {
                          goto LABEL_160;
                        }
                      }
                      goto LABEL_273;
                    }
                  }
                  else
                  {
                    size_t v120 = strlen(v109);
                    int v121 = strlen(v106);
                    if (v120 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v106, v121))
                    {
                      int v122 = 0;
                      while (dynamic_strcat(v259, "~", v255, *(uint64_t **)(*(void *)a1 + 8)))
                      {
                        ++v122;
                        size_t v123 = strlen(v109);
                        int v124 = strlen(v106);
                        if (v123 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v106, v124) <= (unsigned __int16)v122) {
                          goto LABEL_138;
                        }
                      }
                      goto LABEL_273;
                    }
LABEL_138:
                    size_t v125 = strlen(v109);
                    if (v125 != strlen(v102))
                    {
                      int v126 = 0;
                      while (dynamic_strcat(v253, "~", v251, *(uint64_t **)(*(void *)a1 + 8)))
                      {
                        ++v126;
                        size_t v127 = strlen(v109);
                        if (v127 - strlen(v102) <= (unsigned __int16)v126) {
                          goto LABEL_160;
                        }
                      }
                      goto LABEL_273;
                    }
                  }
                }
LABEL_160:
                v35[v241] = v258;
                int v145 = strlen(v35);
                int v146 = strlen(v109);
                uint64_t v147 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), (v145 + v146 + 1));
                if (!v147)
                {
                  log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v148, v149, v150, v151, v219);
                  hlp_freeLookupResults(*(void **)(*(void *)a1 + 8), &v263, (_WORD *)&v262 + 1);
                  return 2310021130;
                }
                uint64_t v152 = (uint64_t)v147;
                *(_WORD *)uint64_t v147 = 95;
                strcat(v147, v109);
                uint64_t v30 = hlp_MdeRecurse(a1, v35, (unsigned __int16)v241, v239, v224, v152, v244);
                heap_Free(*(void **)(*(void *)a1 + 8), v152);
                if ((v30 & 0x80000000) != 0) {
                  goto LABEL_274;
                }
                uint64_t v37 = v241;
                char v38 = v239;
                if (!*v239)
                {
                  (*v259)[v108] = 0;
                  (*v253)[v108] = 0;
                  (*v247)[v108] = 0;
                }
                uint64_t v101 = v235 + 1;
                unsigned int v11 = 0;
                uint64_t v32 = v222;
                if (v235 + 1 >= (unint64_t)HIWORD(v262) || *v239)
                {
                  __int16 v39 = 0;
                  goto LABEL_24;
                }
              }
            }
            uint64_t v30 = 0;
            goto LABEL_34;
          }
          uint64_t v30 = 0;
        }
        char v38 = v41;
LABEL_34:
        v35[v37] = v42;
        --v40;
        --v37;
        if (v11 >= (unsigned __int16)v40) {
          goto LABEL_274;
        }
        continue;
      }
    }
    char v163 = 0;
    a4 = v166;
    if (*v166) {
      goto LABEL_13;
    }
  }
  uint64_t v167 = 0;
  unsigned int v223 = v32;
  while (1)
  {
    uint64_t v226 = v167;
    unint64_t v168 = *(char **)(v263 + 8 * v167);
    uint64_t v169 = strchr(v168, HIBYTE(v261));
    uint64_t v170 = v169;
    if (v169)
    {
      *uint64_t v169 = 0;
      uint64_t v170 = v169 + 1;
      unsigned __int16 v171 = strchr(v169 + 1, HIBYTE(v261));
      if (v171) {
        *unsigned __int16 v171 = 0;
      }
    }
    unsigned __int16 v228 = strlen(*v256);
    if (v228
      && (!dynamic_strcat(v256, "+", v252, *(uint64_t **)(*(void *)a1 + 8))
       || !dynamic_strcat((const char **)(a1 + 168), "~", v246, *(uint64_t **)(*(void *)a1 + 8))
       || !dynamic_strcat(v233, "~", (size_t *)__sa, *(uint64_t **)(*(void *)a1 + 8))))
    {
      goto LABEL_273;
    }
    if (v170)
    {
      if (!*v170) {
        uint64_t v170 = "@";
      }
    }
    else
    {
      uint64_t v170 = "@";
    }
    int v172 = (__int16)strlen(v170);
    int v173 = (__int16)strlen(v168);
    int v174 = (__int16)strlen(v242);
    if (v173 > v174) {
      int v174 = v173;
    }
    if (v172 > v174) {
      LOWORD(v174) = v172;
    }
    uint64_t v175 = hlp_Realloc((uint64_t *)a1, (unsigned __int16)(v174 + v228 + 4));
    if ((v175 & 0x80000000) != 0)
    {
      uint64_t v30 = v175;
      __int16 v218 = *(void **)(*(void *)a1 + 8);
      goto LABEL_283;
    }
    if (!dynamic_strcat(v256, v170, v252, *(uint64_t **)(*(void *)a1 + 8))
      || !dynamic_strcat((const char **)(a1 + 168), v168, v246, *(uint64_t **)(*(void *)a1 + 8))
      || !dynamic_strcat(v233, v242, (size_t *)__sa, *(uint64_t **)(*(void *)a1 + 8)))
    {
      goto LABEL_273;
    }
    int v176 = strlen(v170);
    signed int v177 = Utf8_LengthInUtf8chars((unint64_t)v170, v176) << 16;
    if (v177 >= (int)(strlen(v168) << 16)
      && (int v178 = strlen(v170),
          signed int v179 = Utf8_LengthInUtf8chars((unint64_t)v170, v178) << 16,
          v179 >= (int)(strlen(v242) << 16)))
    {
      int v191 = strlen(v170);
      uint64_t v192 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v170, v191);
      if (strlen(v168) != v192)
      {
        int v193 = 0;
        while (dynamic_strcat((const char **)(a1 + 168), "~", v246, *(uint64_t **)(*(void *)a1 + 8)))
        {
          ++v193;
          int v194 = strlen(v170);
          uint64_t v195 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v170, v194);
          if (v195 - strlen(v168) <= (unsigned __int16)v193) {
            goto LABEL_243;
          }
        }
        goto LABEL_273;
      }
LABEL_243:
      int v196 = strlen(v170);
      uint64_t v197 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v170, v196);
      if (strlen(v242) != v197)
      {
        int v198 = 0;
        while (dynamic_strcat(v233, "~", (size_t *)__sa, *(uint64_t **)(*(void *)a1 + 8)))
        {
          ++v198;
          int v199 = strlen(v170);
          uint64_t v200 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v170, v199);
          if (v200 - strlen(v242) <= (unsigned __int16)v198) {
            goto LABEL_256;
          }
        }
        goto LABEL_273;
      }
    }
    else
    {
      signed int v180 = strlen(v168) << 16;
      int v181 = strlen(v170);
      if (v180 >= (int)(Utf8_LengthInUtf8chars((unint64_t)v170, v181) << 16)
        && (size_t v182 = strlen(v168), v182 << 16 >= (signed int)(strlen(v242) << 16)))
      {
        int v201 = strlen(v170);
        if (v182 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v170, v201))
        {
          int v202 = 0;
          while (dynamic_strcat(v256, "~", v252, *(uint64_t **)(*(void *)a1 + 8)))
          {
            ++v202;
            size_t v203 = strlen(v168);
            int v204 = strlen(v170);
            if (v203 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v170, v204) <= (unsigned __int16)v202) {
              goto LABEL_252;
            }
          }
          goto LABEL_273;
        }
LABEL_252:
        size_t v205 = strlen(v168);
        if (v205 != strlen(v242))
        {
          int v206 = 0;
          while (dynamic_strcat(v233, "~", (size_t *)__sa, *(uint64_t **)(*(void *)a1 + 8)))
          {
            ++v206;
            size_t v207 = strlen(v168);
            if (v207 - strlen(v242) <= (unsigned __int16)v206) {
              goto LABEL_256;
            }
          }
          goto LABEL_273;
        }
      }
      else
      {
        size_t v183 = strlen(v242);
        int v184 = strlen(v170);
        if (v183 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v170, v184))
        {
          int v185 = 0;
          while (dynamic_strcat(v256, "~", v252, *(uint64_t **)(*(void *)a1 + 8)))
          {
            ++v185;
            size_t v186 = strlen(v242);
            int v187 = strlen(v170);
            if (v186 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v170, v187) <= (unsigned __int16)v185) {
              goto LABEL_234;
            }
          }
          goto LABEL_273;
        }
LABEL_234:
        size_t v188 = strlen(v242);
        if (v188 != strlen(v168))
        {
          int v189 = 0;
          while (dynamic_strcat((const char **)(a1 + 168), "~", v246, *(uint64_t **)(*(void *)a1 + 8)))
          {
            ++v189;
            size_t v190 = strlen(v242);
            if (v190 - strlen(v168) <= (unsigned __int16)v189) {
              goto LABEL_256;
            }
          }
LABEL_273:
          uint64_t v30 = 2310021130;
          goto LABEL_274;
        }
      }
    }
LABEL_256:
    int v208 = strlen(*(const char **)(a1 + 168));
    size_t v209 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v21, (v208 + 4));
    if (!v209)
    {
      uint64_t v30 = 2310021130;
      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v21);
      hlp_freeLookupResults(*(void **)(*(void *)a1 + 8), &v263, (_WORD *)&v262 + 1);
      goto LABEL_169;
    }
    uint64_t v21 = v209;
    strcpy(v209, "mde_");
    v210 = *v13;
    if ((unsigned __int16)strlen(*v13))
    {
      uint64_t v214 = 0;
      unsigned __int16 v215 = 4;
      do
      {
        int v216 = v210[v214];
        if (v216 != 32 && v216 != 126)
        {
          v21[v215] = v216;
          v210 = *v13;
          ++v215;
        }
        ++v214;
      }
      while ((unsigned __int16)strlen(v210) > (unsigned __int16)v214);
    }
    else
    {
      unsigned __int16 v215 = 4;
    }
    v21[v215] = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v211, v212, v213, (uint64_t)v21);
    LOWORD(v262) = -1;
    uint64_t v30 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t *, int *, char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v21, v264, &v262, (char *)&v261 + 1);
    if ((v30 & 0x80000000) != 0) {
      break;
    }
    a7 = v243;
    a6 = v236;
    __int16 v166 = v237;
    uint64_t v32 = v223;
    char v165 = v254;
    if ((_WORD)v262)
    {
      *uint64_t v237 = 1;
    }
    else if (!*v237)
    {
      (*v256)[v228] = 0;
      (*v13)[v228] = 0;
      (*v233)[v228] = 0;
    }
    uint64_t v167 = v226 + 1;
    if (v226 + 1 >= (unint64_t)HIWORD(v262) || *v237) {
      goto LABEL_202;
    }
  }
  __int16 v218 = *(void **)(*(void *)a1 + 8);
LABEL_283:
  heap_Free(v218, (uint64_t)v21);
LABEL_274:
  int v51 = *(void **)(*(void *)a1 + 8);
LABEL_275:
  hlp_freeLookupResults(v51, &v263, (_WORD *)&v262 + 1);
  return v30;
}

uint64_t hlp_saveLookupResults(void *a1, uint64_t a2, unsigned int a3, uint64_t *a4, unsigned __int16 *a5)
{
  hlp_freeLookupResults(a1, a4, a5);
  uint64_t result = 0;
  if (a2 && a3)
  {
    uint64_t v11 = heap_Alloc((uint64_t)a1, 8 * a3);
    *a4 = v11;
    if (v11)
    {
      unsigned __int16 v12 = 0;
      *a5 = 0;
      while (1)
      {
        int v13 = strlen(*(const char **)(a2 + 8 * v12));
        uint64_t v14 = heap_Alloc((uint64_t)a1, (v13 + 1));
        uint64_t v15 = *a5;
        *(void *)(*a4 + 8 * v15) = v14;
        uint64_t v16 = *(char **)(*a4 + 8 * v15);
        if (!v16) {
          break;
        }
        strcpy(v16, *(const char **)(a2 + 8 * v15));
        unsigned __int16 v12 = *a5 + 1;
        *a5 = v12;
        if (a3 <= v12) {
          return 0;
        }
      }
    }
    hlp_freeLookupResults(a1, a4, a5);
    return 2310021130;
  }
  return result;
}

uint64_t hlp_Realloc(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a2;
  if (a1[24] < (unint64_t)a2)
  {
    uint64_t v4 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[20], a2);
    if (!v4) {
      goto LABEL_10;
    }
    a1[20] = v4;
    a1[24] = v3;
  }
  if (a1[25] >= v3) {
    goto LABEL_7;
  }
  uint64_t v9 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[21], v3);
  if (!v9)
  {
LABEL_10:
    uint64_t v11 = 2310021130;
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v5, v6, v7, v8, v13);
    return v11;
  }
  a1[21] = v9;
  a1[25] = v3;
LABEL_7:
  if (a1[26] >= v3) {
    return 0;
  }
  uint64_t v10 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[22], v3);
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = 0;
  a1[22] = v10;
  a1[26] = v3;
  return v11;
}

void *hlp_freeLookupResults(void *result, uint64_t *a2, _WORD *a3)
{
  uint64_t v5 = *a2;
  if (v5)
  {
    uint64_t v6 = result;
    if (*a3)
    {
      unint64_t v7 = 0;
      do
        heap_Free(v6, *(void *)(*a2 + 8 * v7++));
      while (v7 < (unsigned __int16)*a3);
      uint64_t v5 = *a2;
    }
    uint64_t result = heap_Free(v6, v5);
  }
  *a3 = 0;
  *a2 = 0;
  return result;
}

uint64_t hlp_WriteWordRec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v5 = MEMORY[0x270FA5388]();
  int v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v5;
  uint64_t v36 = *MEMORY[0x263EF8340];
  unsigned __int16 v32 = v8;
  int v31 = v15;
  __int16 v30 = v16;
  __int16 v29 = v17;
  __int16 v28 = 0;
  __strcpy_chk();
  __strcpy_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcat_chk();
  if (!v7) {
    goto LABEL_11;
  }
  unsigned __int16 v18 = strlen(v35);
  unsigned __int16 v19 = strlen(v34);
  unsigned __int16 v20 = strlen(__s);
  unsigned __int16 v21 = v19 <= v18 ? v18 : v19;
  unsigned __int16 v22 = v20 <= v21 ? v21 : v20;
  unsigned int v23 = v22;
  uint64_t result = mosynt_PadWithChar((uint64_t)v35, 5000, 126, v22);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosynt_PadWithChar((uint64_t)v34, 5000, 32, v23);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = mosynt_PadWithChar((uint64_t)__s, 5000, 32, v23);
      if ((result & 0x80000000) == 0)
      {
LABEL_11:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(v14 + 56) + 88))(v13, v11, v9, &v32);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(*(void *)(v14 + 56) + 160))(v13, v11, v32, 0, 1, &v31, &v28);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(v14 + 56) + 160))(v13, v11, v32, 1, 1, &v30, &v28);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(v14 + 56) + 160))(v13, v11, v32, 2, 1, &v29, &v28);
              if ((result & 0x80000000) == 0)
              {
                __int16 v25 = strlen(v35);
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(*(void *)(v14 + 56) + 160))(v13, v11, v32, 3, (unsigned __int16)(v25 + 1), v35, &v28);
                if ((result & 0x80000000) == 0)
                {
                  __int16 v26 = strlen(v34);
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(*(void *)(v14 + 56) + 160))(v13, v11, v32, 5, (unsigned __int16)(v26 + 1), v34, &v28);
                  if ((result & 0x80000000) == 0)
                  {
                    __int16 v27 = strlen(__s);
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(*(void *)(v14 + 56) + 160))(v13, v11, v32, 6, (unsigned __int16)(v27 + 1), __s, &v28);
                    if ((result & 0x80000000) == 0)
                    {
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, __int16 *))(*(void *)(v14 + 56) + 160))(v13, v11, v32, 7, 1, (uint64_t *)va, &v28);
                      if ((result & 0x80000000) == 0) {
                        return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(*(void *)(v14 + 56) + 160))(v13, v11, v32, 9, 1, &byte_20D5A22AE, &v28);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mde_MosyntMorphAna(uint64_t a1, unsigned char *a2, uint64_t a3, const char *a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 *a11, int a12, _DWORD *a13)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  bzero(v27, 0x8C8uLL);
  *a13 = 0;
  **(unsigned char **)(a1 + 240) = 0;
  **(unsigned char **)(a1 + 248) = 0;
  **(unsigned char **)(a1 + 256) = 0;
  uint64_t result = mosynt_StartWordAnalysis(*(void *)(a1 + 48), *(void *)(a1 + 2200), *(void *)(a1 + 2208), *(void *)(a1 + 2216), *(void *)(a1 + 2224), *(void *)(a1 + 2232), *(void *)(a1 + 2240), (uint64_t)v27);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosynt_WordAnalysis();
    if ((result & 0x80000000) == 0)
    {
      int v19 = HIDWORD(v26);
      *a13 = HIDWORD(v26);
      if (v19)
      {
        *a11 = strlen(a4) + a6;
        HIDWORD(v26) = 1;
        unsigned __int16 v20 = a2 + 15000;
        unsigned __int16 v21 = a2 + 5000;
        unsigned __int16 v22 = a2 + 10000;
        int v23 = 1;
        while (1)
        {
          uint64_t result = mosynt_GetReading(*(void *)(a1 + 48), (uint64_t)v27, 0, (_DWORD *)&v26 + 1, v20, 5000, v21, 5000, &v26);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = mosynt_SubstAllSubstrOcc(v21, "~", "Â¡", v22, 5000);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          __strcpy_chk();
          if (!HIDWORD(v26)) {
            return mosynt_FinishWordAnalysis(*(void *)(a1 + 48), (uint64_t)v27);
          }
          if (a12) {
            break;
          }
          if (v23)
          {
            if (v26)
            {
              int v23 = 1;
              goto LABEL_13;
            }
            hlp_WriteWordRec(a1, a9, a10, a7, 1, 8, a6, *a11, v21, &byte_20D5A22AE, &byte_20D5A22AE, &byte_20D5A22AE);
LABEL_12:
            int v23 = 0;
LABEL_13:
            if (!HIDWORD(v26)) {
              return mosynt_FinishWordAnalysis(*(void *)(a1 + 48), (uint64_t)v27);
            }
          }
        }
        uint64_t v24 = a10;
        uint64_t v25 = a9;
        if (v23)
        {
          hlp_WriteWordRec(a1, a9, a10, a7, 1, 4, a6, *a11, v21, "Y", "Y", &byte_20D5A22AE);
          uint64_t v25 = a9;
          uint64_t v24 = a10;
        }
        hlp_WriteWordRec(a1, v25, v24, a7, 0, 8, a6, *a11, v21, "N", "*", v20);
        goto LABEL_12;
      }
      return mosynt_FinishWordAnalysis(*(void *)(a1 + 48), (uint64_t)v27);
    }
  }
  return result;
}

uint64_t mde_Main(uint64_t a1, const char *a2, char *__s, const char *a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9)
{
  __int16 v28 = a5;
  unsigned __int16 v27 = a6;
  int v25 = 8;
  int v26 = 0;
  __int16 v24 = 0;
  __int16 v23 = 1;
  if (*(unsigned char *)(a1 + 286) == 1
    || (size_t v17 = strlen(__s), v17 < *(unsigned __int8 *)(a1 + 282))
    || v17 > *(unsigned __int8 *)(a1 + 283)
    || *(unsigned char *)(a1 + 284) == 1
    && (int v19 = *__s, (v19 - 65) >= 0x1A)
    && (v19 != 195 || __s[1] - 132 > 0x18 || ((1 << (__s[1] + 124)) & 0x104202F) == 0))
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Mde cfg settings do not apply on %s", a6, a7, a8, (uint64_t)a2);
    return 0;
  }
  else
  {
    **(unsigned char **)(a1 + 240) = 0;
    **(unsigned char **)(a1 + 248) = 0;
    **(unsigned char **)(a1 + 256) = 0;
    uint64_t result = hlp_MdeRecurse_0(a1, a2, a4, 0, &v26, 0);
    if ((result & 0x80000000) == 0)
    {
      if (v26)
      {
        *a9 = strlen(__s) + a5;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56) + 88))(a7, a8, a6, &v27);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(*(void *)(a1 + 56) + 160))(a7, a8, v27, 0, 1, &v25, &v24);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a7, a8, v27, 1, 1, &v28, &v24);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, _WORD *, __int16 *))(*(void *)(a1 + 56) + 160))(a7, a8, v27, 2, 1, a9, &v24);
              if ((result & 0x80000000) == 0)
              {
                __int16 v20 = strlen(*(const char **)(a1 + 240));
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, __int16 *))(*(void *)(a1 + 56) + 160))(a7, a8, v27, 3, (unsigned __int16)(v20 + 1), *(void *)(a1 + 240), &v24);
                if ((result & 0x80000000) == 0)
                {
                  __int16 v21 = strlen(*(const char **)(a1 + 248));
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, __int16 *))(*(void *)(a1 + 56) + 160))(a7, a8, v27, 5, (unsigned __int16)(v21 + 1), *(void *)(a1 + 248), &v24);
                  if ((result & 0x80000000) == 0)
                  {
                    __int16 v22 = strlen(*(const char **)(a1 + 256));
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, __int16 *))(*(void *)(a1 + 56) + 160))(a7, a8, v27, 6, (unsigned __int16)(v22 + 1), *(void *)(a1 + 256), &v24);
                    if ((result & 0x80000000) == 0)
                    {
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a7, a8, v27, 7, 1, &v23, &v24);
                      if ((result & 0x80000000) == 0) {
                        return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(*(void *)(a1 + 56) + 160))(a7, a8, v27, 9, 1, &byte_20D5A22AE, &v24);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_MdeRecurse_0(uint64_t a1, const char *a2, const char *a3, unsigned int a4, _DWORD *a5, int a6)
{
  unsigned int v8 = a4;
  uint64_t v119 = *MEMORY[0x263EF8340];
  memset(__c, 0, sizeof(__c));
  uint64_t v11 = 0;
  if (a4 == (unsigned __int16)strlen(a2))
  {
    strcpy(__s, "mde_");
    __strcat_chk();
    __strcat_chk();
    unsigned int v15 = (unsigned __int16)strlen(__s);
    __int16 v16 = *(const char **)(a1 + 248);
    if (*v16 && v15 <= 0xFF)
    {
      uint64_t v17 = 0;
      unsigned __int16 v18 = 0;
      do
      {
        int v19 = v16[v17];
        if (v19 != 32) {
          __s[v15++] = v19;
        }
        if (strlen(v16) <= ++v18) {
          break;
        }
        uint64_t v17 = v18;
      }
      while (v15 < 0x100);
    }
    __s[v15] = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v12, v13, v14, (uint64_t)__s);
    *(_WORD *)&__c[1] = -1;
    uint64_t v11 = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", __s, &__c[3], &__c[1], __c);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    if (*(_WORD *)&__c[1]) {
      goto LABEL_11;
    }
    strcpy(__s, "mde_");
    uint64_t v93 = *(const char **)(a1 + 248);
    if (*v93)
    {
      uint64_t v94 = 0;
      unsigned __int16 v95 = 0;
      unint64_t v96 = 4;
      do
      {
        int v97 = v93[v94];
        if (v97 != 32) {
          __s[v96++] = v97;
        }
        if (strlen(v93) <= ++v95) {
          break;
        }
        uint64_t v94 = v95;
      }
      while (v96 < 0x100);
    }
    else
    {
      unint64_t v96 = 4;
    }
    __s[v96] = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v20, v21, v22, (uint64_t)__s);
    *(_WORD *)&__c[1] = -1;
    uint64_t v11 = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", __s, &__c[3], &__c[1], __c);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    if (*(_WORD *)&__c[1])
    {
LABEL_11:
      *a5 = 1;
      __int16 v23 = "MDE succeeds";
    }
    else
    {
      __int16 v23 = "MDE fails";
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v23, v20, v21, v22, v100);
  }
  if (*(unsigned __int8 *)(a1 + 285) == a6) {
    return v11;
  }
  unsigned __int16 v24 = strlen(a2);
  unsigned __int16 v25 = v24;
  if (v8 >= v24 || *a5) {
    return v11;
  }
  int v109 = 0;
  int v110 = a5;
  unsigned __int8 v106 = a6 + 1;
  __s2 = (char *)&a2[v8];
  uint64_t v26 = v24;
  unsigned int v108 = v8;
  while (1)
  {
    char v27 = a2[v26];
    a2[v26] = 0;
    *(_WORD *)&__c[1] = 0;
    uint64_t v11 = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "mde", __s2, &__c[3], &__c[1], __c);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    a2[v26] = v27;
    uint64_t v111 = v26;
    if (!*(_WORD *)&__c[1]) {
      goto LABEL_75;
    }
    if (!*a5) {
      break;
    }
LABEL_76:
    unsigned __int16 v25 = v26 - 1;
    if (v8 < (unsigned __int16)(v26 - 1))
    {
      --v26;
      if (!*a5) {
        continue;
      }
    }
    return v11;
  }
  char v101 = v27;
  uint64_t v28 = 0;
  size_t __n = (int)(v25 - v8);
  __int16 v103 = v26 - v8 + 2;
  int v104 = (unsigned __int16)(v25 - v8 - 1);
  while (1)
  {
    __int16 v29 = *(char **)(*(void *)&__c[3] + 8 * v28);
    __int16 v30 = strchr(v29, __c[0]);
    if (v30)
    {
      *__int16 v30 = 0;
      int v31 = v30 + 1;
      unsigned __int16 v32 = strchr(v30 + 1, __c[0]);
      uint64_t v33 = v32;
      if (v32)
      {
        *unsigned __int16 v32 = 0;
        uint64_t v33 = v32 + 1;
        char v34 = strchr(v32 + 1, __c[0]);
        uint64_t v35 = v34;
        if (v34)
        {
          *char v34 = 0;
          uint64_t v35 = v34 + 1;
          uint64_t v36 = strchr(v34 + 1, __c[0]);
          if (v36) {
            *uint64_t v36 = 0;
          }
        }
      }
      else
      {
        uint64_t v35 = 0;
      }
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      int v31 = v109;
    }
    unsigned __int16 v37 = strlen(*(const char **)(a1 + 240));
    unsigned __int16 v38 = v37;
    if (v29 && *v29)
    {
      if (v35) {
        goto LABEL_33;
      }
    }
    else
    {
      __int16 v29 = "*";
      if (v35)
      {
LABEL_33:
        if (*v35) {
          goto LABEL_35;
        }
      }
    }
    uint64_t v35 = "*";
LABEL_35:
    int v105 = v37;
    if (v37)
    {
      *(_WORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 43;
      *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
      *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
    }
    int v109 = v31;
    if (v33 && *v33)
    {
      __int16 v39 = strlen(v33);
      uint64_t v40 = hlp_Realloc_0((uint64_t *)a1, (unsigned __int16)(v39 + v38 + 4));
      if ((v40 & 0x80000000) != 0) {
        return v40;
      }
      *(_DWORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 8689634;
      *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
      *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
      strcat(*(char **)(a1 + 240), v33);
      strcat(*(char **)(a1 + 248), v29);
      strcat(*(char **)(a1 + 256), v35);
      int v41 = strlen(v33);
      if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v33, v41) != 1)
      {
        int v42 = 0;
        do
        {
          *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
          *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
          ++v42;
          int v43 = strlen(v33);
        }
        while ((unsigned __int16)(Utf8_LengthInUtf8chars((unint64_t)v33, v43) - 1) > (unsigned __int16)v42);
      }
      *(_DWORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 8689634;
      *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
      *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
      a5 = v110;
    }
    else if (v31 && !strcmp(v31, "yes"))
    {
      signed int v116 = 0;
      unsigned __int16 v115 = 0;
      strcpy(__s, "one_word");
      a2[v111] = 0;
      v114[0] = *v29;
      v114[1] = 0;
      v113[0] = *v35;
      v113[1] = 0;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v44, v45, v46, (uint64_t)__s);
      unsigned __int16 v48 = strlen(__s2);
      uint64_t v40 = (*(uint64_t (**)(void, void, void, char *, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, __s2, v48);
      if ((v40 & 0x80000000) != 0) {
        return v40;
      }
      a2[v111] = v101;
      uint64_t v40 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s);
      if ((v40 & 0x80000000) != 0) {
        return v40;
      }
      uint64_t v40 = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 104)
                                                                                           + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, &v116, &v115);
      if ((v40 & 0x80000000) != 0) {
        return v40;
      }
      v116[v115] = 0;
      size_t v49 = v116;
      size_t v50 = strlen(v116);
      if ((_WORD)v50)
      {
        size_t v54 = v50;
        int v55 = 0;
        int v56 = 0;
        a5 = v110;
        do
        {
          char v57 = &v49[(unsigned __int16)v56];
          if (*v57 == 126)
          {
            memmove(v57, &v49[v55 + 1], (unsigned __int16)(v54 - v56-- + 1));
          }
          else if (!strncmp(v57, "Â¡", 2uLL))
          {
            memmove(&v49[v55 + 1], &v49[v55 + 2], v54 - (unsigned __int16)v56 + 1);
            v116[(unsigned __int16)v56] = 126;
            a5 = v110;
          }
          int v55 = (unsigned __int16)++v56;
          size_t v49 = v116;
          size_t v54 = strlen(v116);
        }
        while ((unsigned __int16)v56 < (unsigned __int16)v54);
      }
      else
      {
        a5 = v110;
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v51, v52, v53, (uint64_t)__s);
      __int16 v58 = strlen(v116);
      uint64_t v40 = hlp_Realloc_0((uint64_t *)a1, (unsigned __int16)(v58 + v38 + 4));
      if ((v40 & 0x80000000) != 0) {
        return v40;
      }
      *(_DWORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 8689634;
      *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
      *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
      strcat(*(char **)(a1 + 240), v116);
      strcat(*(char **)(a1 + 248), v114);
      strcat(*(char **)(a1 + 256), v113);
      int v59 = strlen(v116);
      if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v116, v59) != 1)
      {
        int v60 = 0;
        do
        {
          *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
          *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
          ++v60;
          int v61 = strlen(v116);
        }
        while ((unsigned __int16)(Utf8_LengthInUtf8chars((unint64_t)v116, v61) - 1) > (unsigned __int16)v60);
      }
      *(_DWORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 8689634;
      *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
      *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
    }
    else
    {
      uint64_t v40 = hlp_Realloc_0((uint64_t *)a1, (unsigned __int16)(v103 + v38));
      if ((v40 & 0x80000000) != 0) {
        return v40;
      }
      strncat(*(char **)(a1 + 240), __s2, __n);
      strcat(*(char **)(a1 + 248), v29);
      strcat(*(char **)(a1 + 256), v35);
      a5 = v110;
      if (v104)
      {
        int v47 = v104;
        do
        {
          *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
          *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
          --v47;
        }
        while (v47);
      }
    }
    uint64_t v26 = v111;
    uint64_t v11 = hlp_MdeRecurse_0(a1, a2, a3, (unsigned __int16)v111, a5, v106);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    if (!*a5)
    {
      unsigned __int16 v62 = Utf8_LengthInUtf8chars(*(void *)(a1 + 240), v105);
      *(unsigned char *)(*(void *)(a1 + 240) + v38) = 0;
      *(unsigned char *)(*(void *)(a1 + 248) + v62) = 0;
      *(unsigned char *)(*(void *)(a1 + 256) + v62) = 0;
    }
    if (++v28 >= (unint64_t)*(unsigned __int16 *)&__c[1]) {
      break;
    }
    unsigned int v8 = v108;
    if (*a5) {
      goto LABEL_76;
    }
  }
  unsigned int v8 = v108;
LABEL_75:
  if (*a5) {
    goto LABEL_76;
  }
  char v63 = a2[v26];
  a2[v26] = 0;
  *(_WORD *)&__c[1] = 0;
  uint64_t v11 = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *, void))(*(void *)(a1 + 80) + 152))(*(void *)(a1 + 64), *(void *)(a1 + 72), "g2p", __s2, &__c[3], &__c[1], __c, *(unsigned __int8 *)(a1 + 556));
  if ((v11 & 0x80000000) == 0)
  {
    a2[v26] = v63;
    if (!*(_WORD *)&__c[1]) {
      goto LABEL_76;
    }
    uint64_t v64 = 0;
    while (2)
    {
      if (*a5) {
        goto LABEL_76;
      }
      int v65 = *(char **)(*(void *)&__c[3] + 8 * v64);
      int v66 = strchr(v65, __c[0]);
      if (v66)
      {
        *int v66 = 0;
        int v71 = strchr(v66 + 1, __c[0]);
        signed int v72 = v71;
        if (v71)
        {
          *int v71 = 0;
          signed int v72 = v71 + 1;
          signed int v73 = strchr(v71 + 1, __c[0]);
          int v74 = v73;
          if (v73)
          {
            *signed int v73 = 0;
            int v74 = v73 + 1;
            size_t v75 = strchr(v73 + 1, __c[0]);
            size_t v76 = v75;
            if (v75)
            {
              *size_t v75 = 0;
              size_t v76 = v75 + 1;
              int v77 = strchr(v75 + 1, __c[0]);
              if (v77)
              {
                *int v77 = 0;
                int v78 = strchr(v77 + 1, __c[0]);
                size_t v79 = v78;
                if (v78)
                {
                  *int v78 = 0;
                  size_t v79 = v78 + 1;
                  int v80 = strchr(v78 + 1, __c[0]);
                  if (v80) {
                    *int v80 = 0;
                  }
                }
LABEL_95:
                uint64_t v81 = *(void *)(*(void *)a1 + 32);
                if (!v65)
                {
                  log_OutPublic(v81, (uint64_t)"FE_ONEWORD", 34001, 0, v67, v68, v69, v70, v99);
                  return 2310021127;
                }
                log_OutText(v81, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Validating %s", v68, v69, v70, (uint64_t)v65);
                if (v72 && *v72 && !strstr(v72, a3))
                {
                  uint64_t v91 = *(void *)(*(void *)a1 + 32);
                  int v92 = "G2P Domain validation not OK";
                }
                else
                {
                  if (!v79 || strcmp(v79, "0"))
                  {
                    unsigned __int16 v85 = strlen(*(const char **)(a1 + 240));
                    if (*v65)
                    {
                      if (!v74 || !*v74) {
                        int v74 = "*";
                      }
                      if (!v76 || !*v76) {
                        size_t v76 = "*";
                      }
                      __int16 v86 = strlen(v65);
                      uint64_t v40 = hlp_Realloc_0((uint64_t *)a1, (unsigned __int16)(v86 + v85 + 4));
                      if ((v40 & 0x80000000) != 0) {
                        return v40;
                      }
                      if (v85)
                      {
                        *(_WORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 43;
                        *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
                        *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
                      }
                      *(_DWORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 8689634;
                      *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
                      *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
                      strcat(*(char **)(a1 + 240), v65);
                      strcat(*(char **)(a1 + 248), v74);
                      strcat(*(char **)(a1 + 256), v76);
                      int v87 = strlen(v65);
                      if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v65, v87) != 1)
                      {
                        int v88 = 0;
                        do
                        {
                          *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
                          *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
                          ++v88;
                          int v89 = strlen(v65);
                        }
                        while ((unsigned __int16)(Utf8_LengthInUtf8chars((unint64_t)v65, v89) - 1) > (unsigned __int16)v88);
                      }
                      *(_DWORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 8689634;
                      *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
                      *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
                    }
                    uint64_t v26 = v111;
                    a5 = v110;
                    uint64_t v11 = hlp_MdeRecurse_0(a1, a2, a3, (unsigned __int16)v111, v110, v106);
                    if ((v11 & 0x80000000) != 0) {
                      return v11;
                    }
                    if (!*v110)
                    {
                      unsigned __int16 v90 = Utf8_LengthInUtf8chars(*(void *)(a1 + 240), v85);
                      *(unsigned char *)(*(void *)(a1 + 240) + v85) = 0;
                      *(unsigned char *)(*(void *)(a1 + 248) + v90) = 0;
                      *(unsigned char *)(*(void *)(a1 + 256) + v90) = 0;
                    }
                    goto LABEL_121;
                  }
                  uint64_t v91 = *(void *)(*(void *)a1 + 32);
                  int v92 = "G2P MDE usage validation not OK";
                }
                log_OutText(v91, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v92, v82, v83, v84, v99);
                a5 = v110;
                uint64_t v26 = v111;
LABEL_121:
                unsigned int v8 = v108;
                if (++v64 >= (unint64_t)*(unsigned __int16 *)&__c[1]) {
                  goto LABEL_76;
                }
                continue;
              }
            }
LABEL_94:
            size_t v79 = 0;
            goto LABEL_95;
          }
LABEL_93:
          size_t v76 = 0;
          goto LABEL_94;
        }
      }
      else
      {
        signed int v72 = 0;
      }
      break;
    }
    int v74 = 0;
    goto LABEL_93;
  }
  return v11;
}

uint64_t hlp_Realloc_0(uint64_t *a1, unsigned int a2)
{
  if (a2 < 0x81) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v4 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[30], a2);
  if (v4
    && (a1[30] = v4, (uint64_t v9 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[31], v3)) != 0)
    && (a1[31] = v9, (uint64_t v10 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[32], v3)) != 0))
  {
    uint64_t v11 = 0;
    a1[32] = v10;
  }
  else
  {
    uint64_t v11 = 2310021130;
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v5, v6, v7, v8, v13);
  }
  return v11;
}

char *oneword_FindPhonWordSep(char *a1, char *a2)
{
  *a2 = 0;
  uint64_t result = strchr(a1, 95);
  if (result)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t result = strstr(a1, "-*");
    if (!result) {
      return result;
    }
    char v5 = 2;
  }
  *a2 = v5;
  return result;
}

uint64_t oneword_CountPhoneticWords(char *a1, char *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = strchr(a1, 18);
  if (v4) {
    char v5 = v4;
  }
  else {
    char v5 = a2;
  }
  if (v5 - v3 >= 2 && *(v5 - 1) == 35) {
    --v5;
  }
  if (v5 <= v3)
  {
    return 1;
  }
  else
  {
    int64_t v6 = v5 - v3;
    unsigned __int16 v7 = 1;
    do
    {
      int v8 = *(unsigned __int8 *)v3;
      __int16 v9 = 1;
      if (v8 != 35 && v8 != 95) {
        __int16 v9 = strncmp(v3, "-*", 2uLL) == 0;
      }
      v7 += v9;
      ++v3;
      --v6;
    }
    while (v6);
  }
  return v7;
}

size_t oneword_FindNextWord(size_t result, unsigned int a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v7 = a3;
  unsigned int v8 = *a4;
  if (*a4 >= a3)
  {
    unsigned int v8 = a3;
  }
  else
  {
    uint64_t v10 = (char *)result;
    do
    {
      uint64_t result = utf8_BelongsToSet(a2, v10, v8, v7);
      if (!result) {
        break;
      }
      uint64_t result = utf8_GetNextUtf8Offset(v10, v8);
      unsigned int v8 = result;
    }
    while (result < v7);
    if (v8 >= v7)
    {
      unsigned int v7 = v8;
    }
    else
    {
      unsigned int v11 = v8;
      do
      {
        uint64_t result = utf8_BelongsToSet(a2, v10, v11, v7);
        if (result) {
          break;
        }
        uint64_t result = utf8_GetNextUtf8Offset(v10, v11);
        unsigned int v11 = result;
      }
      while (result < v7);
      unsigned int v7 = v8;
      unsigned int v8 = v11;
    }
  }
  *a4 = v7;
  *a5 = v8;
  return result;
}

uint64_t oneword_CountOrthographicWords(char *a1, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v7 = a2 - a1;
  for (unsigned int i = 0; utf8_BelongsToSet(a3, a1, i, v7); unsigned int i = utf8_GetNextUtf8Offset(a1, i))
    ;
  unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)a1, v7);
  if (v7)
  {
    unsigned int v10 = PreviousUtf8Offset;
    unsigned int v11 = v7;
    if (utf8_BelongsToSet(a3, a1, PreviousUtf8Offset, v7))
    {
      do
      {
        unsigned int v11 = v10;
        unsigned int v12 = utf8_GetPreviousUtf8Offset((uint64_t)a1, v10);
        if (!v10) {
          break;
        }
        unsigned int v10 = v12;
      }
      while (utf8_BelongsToSet(a3, a1, v12, v7));
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  for (j = 1; i < v11; unsigned int i = utf8_GetNextUtf8Offset(a1, i))
  {
    if (!a1[i]) {
      break;
    }
    if (utf8_BelongsToSet(a4, a1, i, v7))
    {
      ++j;
      for (; i < v11; unsigned int i = utf8_GetNextUtf8Offset(a1, i))
      {
        if (!utf8_BelongsToSet(a4, a1, i, v7)) {
          break;
        }
      }
    }
  }
  return j;
}

char *oneword_ReplaceAllCharactersInOrthography(char *a1, int a2, unsigned int a3, char a4)
{
  __int16 v5 = a2 - (_WORD)a1;
  return oneword_ReplaceCharactersInOrthography(a1, a2, a3, a4, &v5);
}

char *oneword_ReplaceCharactersInOrthography(char *result, int a2, unsigned int a3, char a4, _WORD *a5)
{
  if (a5 && *a5)
  {
    unsigned int v8 = result;
    unsigned int v9 = a2 - result;
    uint64_t result = (char *)utf8_BelongsToSet(a3, result, 0, a2 - (int)result);
    if (result)
    {
      unsigned int NextUtf8Offset = 0;
      do
      {
        unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(v8, NextUtf8Offset);
        uint64_t result = (char *)utf8_BelongsToSet(a3, v8, NextUtf8Offset, v9);
      }
      while (result);
    }
    if (*a5) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      unsigned int v12 = 0;
      do
      {
        if (utf8_BelongsToSet(a3, v8, v12, v9))
        {
          v8[v12] = a4;
          --*a5;
        }
        uint64_t result = (char *)utf8_GetNextUtf8Offset(v8, v12);
        unsigned int v12 = result;
        if (*a5) {
          BOOL v13 = result >= v9;
        }
        else {
          BOOL v13 = 1;
        }
      }
      while (!v13);
    }
  }
  return result;
}

uint64_t getDepesLayersForWordAndPOS(uint64_t a1, uint64_t a2, char *__s, char *a4)
{
  __int16 v5 = __s;
  int v8 = strlen(__s);
  unsigned __int16 v9 = Utf8_LengthInUtf8chars((unint64_t)v5, v8);
  unsigned int v10 = (const char **)(a1 + 160);
  **(unsigned char **)(a1 + 160) = 0;
  BOOL v11 = (char **)(a1 + 168);
  **(unsigned char **)(a1 + 168) = 0;
  **(unsigned char **)(a1 + 176) = 0;
  unsigned int v48 = (*(uint64_t (**)(void, void, uint64_t, char *, uint64_t))(*(void *)(a1 + 80) + 104))(*(void *)(a1 + 64), *(void *)(a1 + 72), a2, v5, 128);
  if ((v48 & 0x80000000) == 0)
  {
    if (a4)
    {
      int v12 = strlen(a4);
      Utf8_LengthInUtf8chars((unint64_t)a4, v12);
      BOOL v13 = strstr(v5, "â•‘");
      uint64_t v14 = strchr(a4, 43);
      BOOL v15 = v13 != 0;
      BOOL v16 = v14 != 0;
      __sa = a4;
      if ((unint64_t)v13 | (unint64_t)v14)
      {
        int v55 = 0;
        int v17 = 0;
        unsigned __int16 v18 = v5;
        size_t v49 = v5;
        uint64_t v51 = a1;
        while (1)
        {
          int v19 = v18;
          if (v15) {
            unsigned __int16 v20 = (_WORD)v13 - (_WORD)v18;
          }
          else {
            unsigned __int16 v20 = 0;
          }
          if (v16) {
            unsigned __int16 v21 = (_WORD)v14 - (_WORD)a4;
          }
          else {
            unsigned __int16 v21 = 0;
          }
          size_t v22 = v21;
          size_t v23 = v20;
          if (!v20 || !v21)
          {
            if (!v20 || v21)
            {
              if (v20 || !v21)
              {
                a1 = v51;
              }
              else
              {
                size_t v54 = v14;
                strncat(*v11, &__sa[(unsigned __int16)v17], v21);
                int v28 = 0;
                *(_WORD *)&(*v11)[strlen(*v11)] = 32;
                int v29 = v17 + 1;
                do
                {
                  *(_WORD *)&(*v10)[strlen(*v10)] = 126;
                  ++v28;
                }
                while (v22 > (unsigned __int16)v28);
                int v17 = v29 + v22;
                *(_WORD *)&(*v10)[strlen(*v10)] = 32;
                uint64_t v14 = strchr(v54 + 1, 43);
                a1 = v51;
                __int16 v5 = v49;
              }
            }
            else
            {
              uint64_t v53 = v14;
              strncat((char *)*v10, &v5[(unsigned __int16)v55], v20);
              int v27 = 0;
              *(_WORD *)&(*v10)[strlen(*v10)] = 32;
              do
              {
                *(_WORD *)&(*v11)[strlen(*v11)] = 126;
                ++v27;
              }
              while (v23 > (unsigned __int16)v27);
              v55 += 3 + v23;
              *(_WORD *)&(*v11)[strlen(*v11)] = 32;
              BOOL v13 = strstr(v13 + 3, "â•‘");
              a1 = v51;
              __int16 v5 = v49;
              uint64_t v14 = v53;
            }
            unsigned __int16 v18 = v19;
            goto LABEL_36;
          }
          int v24 = v20 - v21;
          uint64_t v52 = v14;
          if (v20 <= v21)
          {
            strncat(*v11, &__sa[(unsigned __int16)v17], v21);
            *(_WORD *)&(*v11)[strlen(*v11)] = 32;
            strncat((char *)*v10, &v5[(unsigned __int16)v55], v23);
            unsigned __int16 v25 = v10;
            if ((int)v22 - (int)v23 >= 1)
            {
              int v30 = 0;
              do
              {
                *(_WORD *)&(*v10)[strlen(*v10)] = 126;
                ++v30;
              }
              while ((int)v22 - (int)v23 > (unsigned __int16)v30);
              unsigned __int16 v25 = v10;
              goto LABEL_32;
            }
          }
          else
          {
            strncat((char *)*v10, &v5[(unsigned __int16)v55], v20);
            *(_WORD *)&(*v10)[strlen(*v10)] = 32;
            strncat(*v11, &__sa[(unsigned __int16)v17], v22);
            unsigned __int16 v25 = (const char **)v11;
            if (v24 >= 1)
            {
              int v26 = 0;
              do
              {
                *(_WORD *)&(*v11)[strlen(*v11)] = 126;
                ++v26;
              }
              while (v24 > (unsigned __int16)v26);
              unsigned __int16 v25 = (const char **)v11;
LABEL_32:
              __int16 v5 = v49;
            }
          }
          *(_WORD *)&(*v25)[strlen(*v25)] = 32;
          v17 += v22 + 1;
          v55 += v23 + 3;
          unsigned __int16 v18 = v13 + 3;
          LOWORD(a4) = (_WORD)v52 + 1;
          BOOL v13 = strstr(v13 + 3, "â•‘");
          uint64_t v14 = strchr(v52 + 1, 43);
          a1 = v51;
LABEL_36:
          BOOL v15 = v13 != 0;
          BOOL v16 = v14 != 0;
          if (!((unint64_t)v13 | (unint64_t)v14)) {
            goto LABEL_46;
          }
        }
      }
      LOWORD(v17) = 0;
      LOWORD(v55) = 0;
LABEL_46:
      unsigned __int16 v37 = strlen(v5);
      unsigned __int16 v38 = strlen(__sa);
      if (v37 > (unsigned __int16)v55) {
        strcat((char *)*v10, &v5[(unsigned __int16)v55]);
      }
      if (v38 > (unsigned __int16)v17) {
        strcat(*v11, &__sa[(unsigned __int16)v17]);
      }
      int v39 = strlen(*v10);
      int v40 = strlen(*v11);
      int v41 = v40;
      if ((unsigned __int16)v39 <= (unsigned __int16)v40)
      {
        for (unsigned int i = (unsigned __int16)v40; i > (unsigned __int16)v39; ++v39)
          *(_WORD *)&(*v10)[strlen(*v10)] = 126;
      }
      else
      {
        do
        {
          *(_WORD *)&(*v11)[strlen(*v11)] = 126;
          ++v41;
        }
        while ((unsigned __int16)v39 > (unsigned __int16)v41);
      }
      uint64_t v43 = (unsigned __int16)strlen(*v10);
      if (v43)
      {
        for (uint64_t j = 0; j != v43; ++j)
        {
          size_t v45 = strlen(*(const char **)(a1 + 176));
          if (*(unsigned char *)(*(void *)(a1 + 160) + j) == 32) {
            __int16 v46 = 32;
          }
          else {
            __int16 v46 = 126;
          }
          *(_WORD *)(*(void *)(a1 + 176) + v45) = v46;
        }
      }
    }
    else if (v9)
    {
      unsigned __int16 v31 = 0;
      do
      {
        unsigned __int16 v32 = &v5[v31];
        int v33 = strncmp(v32, "â•‘", 3uLL);
        char v34 = (char *)*v10;
        if (v33)
        {
          unsigned int v35 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v32);
          strncat(v34, &v5[v31], v35);
          *(_WORD *)(*(void *)(a1 + 168) + strlen(*(const char **)(a1 + 168))) = 126;
          *(_WORD *)(*(void *)(a1 + 176) + strlen(*(const char **)(a1 + 176))) = 126;
          __int16 v36 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v32);
        }
        else
        {
          *(_WORD *)&v34[strlen(*v10)] = 32;
          *(_WORD *)(*(void *)(a1 + 168) + strlen(*(const char **)(a1 + 168))) = 32;
          *(_WORD *)(*(void *)(a1 + 176) + strlen(*(const char **)(a1 + 176))) = 32;
          __int16 v36 = 3;
        }
        v31 += v36;
      }
      while (v31 < v9);
    }
  }
  return v48;
}

uint64_t oneword_SkipCrosstoken(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, unsigned __int16 a9)
{
  __int16 v50 = a6;
  __int16 v49 = a7;
  int v46 = 17;
  int v47 = 9;
  uint64_t v44 = 0;
  unsigned int __s = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  BOOL v15 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (2 * a5) | 1);
  if (v15)
  {
    unsigned __int16 v20 = v15;
    if (a5 >= 2)
    {
      unsigned int v21 = a5 - 1;
      do
      {
        strcat(v15, "*.");
        --v21;
      }
      while (v21);
    }
    unsigned int v48 = 0;
    int v40 = 0;
    int v41 = 0;
    int v38 = 0;
    int v39 = 0;
    int v37 = 0;
    unsigned __int16 v36 = 0;
    *(_WORD *)&v15[strlen(v15)] = 42;
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, a9, 0, 1, &v48, (char *)&v41 + 2);
    if ((v22 & 0x80000000) == 0)
    {
      uint64_t v23 = *(void *)(a1 + 56);
      uint64_t v22 = v48 > 1
          ? (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(v23 + 88))(a2, a3, a9, (char *)&v37 + 2)
          : (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(v23 + 80))(a2, a3, a9, (char *)&v37 + 2);
      if ((v22 & 0x80000000) == 0)
      {
        unsigned int v48 = 9;
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 0, 1, &v48, &v41);
        if ((v22 & 0x80000000) == 0)
        {
          uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 1, 1, &v50, &v41);
          if ((v22 & 0x80000000) == 0)
          {
            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 2, 1, &v49, &v41);
            if ((v22 & 0x80000000) == 0)
            {
              __int16 v25 = strlen(v20);
              uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 3, (unsigned __int16)(v25 + 1), v20, &v41);
              if ((v22 & 0x80000000) == 0)
              {
                uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 5, 1, "*", &v41);
                if ((v22 & 0x80000000) == 0)
                {
                  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 6, 1, "*", &v41);
                  if ((v22 & 0x80000000) == 0)
                  {
                    if (strcmp(a4, "latin")
                      || (__int16 v35 = 1,
                          uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 7, 1, &v35, &v41), (v22 & 0x80000000) == 0))
                    {
                      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 9, 7, "normal", &v41);
                      if ((v24 & 0x80000000) != 0) {
                        goto LABEL_60;
                      }
                      LOWORD(v38) = a8;
                      if (HIWORD(v37) == a8) {
                        goto LABEL_60;
                      }
                      unsigned __int16 v26 = 0;
                      while (1)
                      {
                        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)a8, 0, 1, &v48, (char *)&v41 + 2);
                        if ((v22 & 0x80000000) != 0) {
                          break;
                        }
                        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v38, 1, 1, &v40, (char *)&v41 + 2);
                        if ((v22 & 0x80000000) != 0) {
                          break;
                        }
                        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v38, 2, 1, (char *)&v39 + 2, (char *)&v41 + 2);
                        if ((v22 & 0x80000000) != 0) {
                          break;
                        }
                        if (v48 <= 1)
                        {
                          uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 136))(a2, a3, (unsigned __int16)v38, &v36);
LABEL_27:
                          if ((v22 & 0x80000000) != 0) {
                            break;
                          }
                          int v27 = v36;
                          while (v27 != v26)
                          {
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v27, 0, 1, &v47, (char *)&v41 + 2);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v36, 1, 1, &v39, (char *)&v41 + 2);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v36, 2, 1, (char *)&v38 + 2, (char *)&v41 + 2);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            if (v47 != 4
                              || (unsigned __int16)v39 != (unsigned __int16)v40
                              || HIWORD(v38) != HIWORD(v39))
                            {
                              uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 136))(a2, a3, v36, &v36);
                              goto LABEL_27;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56)
                                                                                              + 88))(a2, a3, HIWORD(v37), (char *)&v37 + 2);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a2, a3, v36, 3, &__s, (char *)&v41 + 2);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a2, a3, v36, 5, &v42, (char *)&v41 + 2);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v36, 7, 1, (char *)&v40 + 2, (char *)&v41 + 2);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a2, a3, v36, 6, &v44, (char *)&v41 + 2);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a2, a3, v36, 9, &v43, (char *)&v41 + 2);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 0, 1, &v46, &v41);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            LOWORD(v39) = v39 + *(_WORD *)(a1 + 224);
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 1, 1, &v39, &v41);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            HIWORD(v38) += *(_WORD *)(a1 + 224);
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 2, 1, (char *)&v38 + 2, &v41);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            __int16 v28 = strlen(__s);
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 3, (unsigned __int16)(v28 + 1), __s, &v41);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            __int16 v29 = strlen(a4);
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 4, (unsigned __int16)(v29 + 1), a4, &v41);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            __int16 v30 = strlen(v42);
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 5, (unsigned __int16)(v30 + 1), v42, &v41);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            __int16 v31 = strlen(v44);
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 6, (unsigned __int16)(v31 + 1), v44, &v41);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 7, 1, (char *)&v40 + 2, &v41);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            __int16 v32 = strlen(v43);
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v37), 9, (unsigned __int16)(v32 + 1), v43, &v41);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56)
                                                                                             + 136))(a2, a3, v36, &v37);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56) + 192))(a2, a3, v36);
                            if ((v22 & 0x80000000) != 0) {
                              goto LABEL_59;
                            }
                            int v27 = (unsigned __int16)v37;
                            unsigned __int16 v36 = v37;
                          }
                          unsigned __int16 v26 = v38;
                        }
                        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 120))(a2, a3);
                        if ((v24 & 0x80000000) == 0)
                        {
                          LOWORD(a8) = v38;
                          if ((unsigned __int16)v38 != HIWORD(v37)) {
                            continue;
                          }
                        }
                        goto LABEL_60;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    uint64_t v24 = v22;
LABEL_60:
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v20);
    return v24;
  }
  log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v16, v17, v18, v19, v34);
  return 2310021130;
}

uint64_t hlp_RemoveMNCRecords(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14 = heap_Calloc(*(void **)(*a1 + 8), 1, 129);
  if (!v14)
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v15, v16, v17, v18, v27);
    return 2310021130;
  }
  uint64_t v19 = (char *)v14;
  unsigned __int16 v32 = 0;
  int v30 = 0;
  int v31 = 0;
  int v29 = 0;
  unsigned __int16 v28 = 0;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[7] + 120))(a2, a3, a5, &v32);
  if ((v20 & 0x80000000) == 0)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, a5, 1, 1, &v29, (char *)&v30 + 2);
    if ((v20 & 0x80000000) == 0)
    {
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a2, a3, a6, 2, 1, &v28, (char *)&v30 + 2);
      if ((v21 & 0x80000000) != 0) {
        goto LABEL_22;
      }
      unsigned __int16 v22 = v32;
      if (!v32) {
        goto LABEL_22;
      }
      while (1)
      {
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v22, 0, 1, &v31, (char *)&v30 + 2);
        if ((v20 & 0x80000000) != 0) {
          break;
        }
        if (v31 == 4)
        {
          uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v32, 1, 1, &v30, (char *)&v30 + 2);
          if ((v20 & 0x80000000) != 0) {
            break;
          }
          uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, v32, 2, 1, (char *)&v29 + 2, (char *)&v30 + 2);
          if ((v21 & 0x80000000) != 0) {
            goto LABEL_22;
          }
          if ((unsigned __int16)v30 > ~a7)
          {
            size_t v23 = HIWORD(v29) - (unint64_t)(unsigned __int16)v30;
            if ((int)v23 <= 127)
            {
              strncpy(v19, (const char *)(*a4 + (unsigned __int16)v30 + a7), v23);
              unsigned int v24 = HIWORD(v29);
              unsigned int v25 = (unsigned __int16)v30;
              v19[HIWORD(v29) - (unsigned __int16)v30] = 0;
              if (v25 < (unsigned __int16)v29 || v24 > v28 || strlen(v19) < 2 || !strchr(v19, 95)) {
                goto LABEL_22;
              }
              uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1[7] + 192))(a2, a3, v32);
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              unsigned __int16 v32 = a5;
            }
          }
        }
        LOWORD(a5) = v32;
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 120))(a2, a3, v32, &v32);
        if ((v21 & 0x80000000) == 0)
        {
          unsigned __int16 v22 = v32;
          if (v32) {
            continue;
          }
        }
        goto LABEL_22;
      }
    }
  }
  uint64_t v21 = v20;
LABEL_22:
  heap_Free(*(void **)(*a1 + 8), (uint64_t)v19);
  return v21;
}

uint64_t oneword_TranscribeAcronym(uint64_t a1, char *a2, const char *a3, unsigned __int8 *a4, char *a5)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  unsigned __int16 __c_1 = 0;
  strcpy(__s, "one_word");
  unsigned __int16 v9 = strlen(__s);
  int v10 = strlen(a3);
  BOOL v11 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), (v10 + 1));
  if (!v11)
  {
    uint64_t v20 = 2310021130;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v12, v13, v14, v15, v77);
    return v20;
  }
  uint64_t v16 = v11;
  uint64_t __c_3 = 0;
  *(void *)unsigned __int16 v90 = 0;
  unsigned __int16 v89 = 0;
  strcpy(v11, a3);
  size_t v79 = a4;
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    uint64_t v17 = strchr(a2, 95);
    if (v17) {
      uint64_t v18 = v17 + 1;
    }
    else {
      uint64_t v18 = a2;
    }
    uint64_t v82 = v18;
    char v19 = *v18;
  }
  else
  {
    uint64_t v82 = 0;
    char v19 = 32;
  }
  char v81 = v19;
  uint64_t v21 = 0;
  int v22 = 0;
  unsigned __int16 v23 = 0;
  unsigned __int8 __c = 0;
  unsigned int v24 = (const char **)(a1 + 160);
  unsigned int v25 = (void *)(a1 + 192);
  uint64_t v80 = v9;
  uint64_t v83 = v9 + 2;
  unsigned __int8 v87 = 32;
  uint64_t v84 = (uint64_t)v16;
  while (1)
  {
    int v26 = v16[v21];
    if (v26 >= -64)
    {
      if ((*(unsigned int (**)(void, void, const char *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), &v16[v21]))
      {
        break;
      }
      LOBYTE(v26) = v16[v21];
    }
    unsigned int v27 = v26;
    uint64_t v28 = (1 << v26) & 0x100002601;
    BOOL v29 = v27 > 0x20 || v28 == 0;
    if (!v29 || v27 == 95) {
      break;
    }
    ++v22;
LABEL_90:
    uint64_t v21 = (unsigned __int16)v22;
    if (strlen(v16) < (unsigned __int16)v22)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v16);
      uint64_t v20 = 0;
      *size_t v79 = v87;
      return v20;
    }
  }
  unsigned __int16 v85 = (char *)&v16[v21];
  if ((unsigned __int16)v22 == v23)
  {
LABEL_88:
    v94[0] = *v85;
    v94[1] = 0;
    uint64_t appended = oneword_AppendPhon(a1, v94, &byte_20D5A22AE, (uint64_t)&byte_20D5A22AE, 32, 0);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_94;
    }
    unsigned __int16 v23 = ++v22;
    goto LABEL_90;
  }
  **(unsigned char **)(a1 + 160) = 0;
  if (!dynamic_strncat(v24, &v16[v23], v21 - v23, v25, *(uint64_t **)(*(void *)a1 + 8))) {
    return 2310021130;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s", v30, v31, v32, *(void *)(a1 + 160));
  unsigned __int16 __c_1 = 0;
  if (*(_DWORD *)(a1 + 1224))
  {
    int v88 = 7352935;
    __strcat_chk();
    uint64_t v33 = (*(uint64_t (**)(void, void, int *, void, uint64_t *, unsigned __int16 *, unsigned __int8 *, void))(*(void *)(a1 + 80) + 232))(*(void *)(a1 + 64), *(void *)(a1 + 72), &v88, *(void *)(a1 + 160), &__c_3, &__c_1, &__c, 0);
  }
  else
  {
    LODWORD(v78) = 0;
    uint64_t v33 = (*(uint64_t (**)(void, void, const char *, void, uint64_t *, unsigned __int16 *, unsigned __int8 *, void))(*(void *)(a1 + 80) + 240))(*(void *)(a1 + 64), *(void *)(a1 + 72), "g2p", *(void *)(a1 + 160), &__c_3, &__c_1, &__c, *(unsigned __int8 *)(a1 + 556));
  }
  uint64_t v20 = v33;
  if ((v33 & 0x80000000) != 0) {
    goto LABEL_95;
  }
  if (!__c_1)
  {
    unsigned __int8 v69 = 32;
LABEL_74:
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v34, v35, v36, (uint64_t)__s);
    unsigned __int16 v70 = strlen(*(const char **)(a1 + 160));
    uint64_t appended = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, *(void *)(a1 + 160), v70);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_94;
    }
    if (strcmp(a2, "normal") && v83 + strlen(a2) <= 0x7F)
    {
      __strcat_chk();
      __strcat_chk();
    }
    if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s) & 0x80000000) != 0)
    {
      __s[v80] = 0;
      uint64_t appended = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s);
      if ((appended & 0x80000000) != 0) {
        goto LABEL_94;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 560))
      {
        int v71 = v82;
        char v72 = v81;
        if (!v82) {
          goto LABEL_86;
        }
      }
      else
      {
        char v72 = *a2;
        int v71 = a2;
      }
      strncpy(a5, v71, 0x14uLL);
      unsigned __int8 v69 = v72;
    }
LABEL_86:
    uint64_t appended = (*(uint64_t (**)(void, void, void, int *, unsigned __int16 *))(*(void *)(a1 + 104)
                                                                                            + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, v90, &v89);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_94;
    }
    *(unsigned char *)(*(void *)v90 + v89) = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v73, v74, v75, (uint64_t)__s);
    unsigned __int8 v87 = v69;
    uint64_t appended = oneword_AppendPhon(a1, *(char **)v90, "*", (uint64_t)"*", v69, 1);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_94;
    }
    goto LABEL_88;
  }
  unint64_t v37 = 0;
  int v38 = 0;
  int v39 = 0;
  unsigned __int8 v87 = 32;
  do
  {
    int v40 = *(char **)(__c_3 + 8 * v37);
    int v41 = strchr(v40, __c);
    if (!v41)
    {
      int v47 = 0;
LABEL_37:
      uint64_t v51 = 0;
LABEL_38:
      size_t v54 = 0;
      goto LABEL_39;
    }
    *int v41 = 0;
    int v46 = strchr(v41 + 1, __c);
    int v47 = v46;
    if (!v46) {
      goto LABEL_37;
    }
    *int v46 = 0;
    int v47 = v46 + 1;
    unsigned int v48 = strchr(v46 + 1, __c);
    if (!v48) {
      goto LABEL_37;
    }
    *unsigned int v48 = 0;
    __int16 v49 = strchr(v48 + 1, __c);
    if (!v49) {
      goto LABEL_37;
    }
    *__int16 v49 = 0;
    __int16 v50 = strchr(v49 + 1, __c);
    uint64_t v51 = v50;
    if (!v50) {
      goto LABEL_38;
    }
    *__int16 v50 = 0;
    uint64_t v51 = v50 + 1;
    uint64_t v52 = strchr(v50 + 1, __c);
    if (!v52) {
      goto LABEL_38;
    }
    *uint64_t v52 = 0;
    uint64_t v53 = strchr(v52 + 1, __c);
    size_t v54 = v53;
    if (v53)
    {
      *uint64_t v53 = 0;
      size_t v54 = v53 + 1;
      int v55 = strchr(v53 + 1, __c);
      if (v55) {
        char *v55 = 0;
      }
    }
LABEL_39:
    if (!v40)
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34001, 0, v42, v43, v44, v45, v78);
      heap_Free(*(void **)(*(void *)a1 + 8), v84);
      return 2310021127;
    }
    oneword_ReplaceUnderscoreWithDot(v40);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Validating %s", v56, v57, v58, (uint64_t)v40);
    if (v47 && *v47 && !strstr(v47, a2))
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Domain validation not OK", v34, v35, v36, v78);
    }
    else if (v54 {
           && *(_DWORD *)(a1 + 1204)
    }
           && ((int v59 = strstr(a2, v54)) == 0 || (v60 = v59, (v61 = strlen(v54)) != 0) && v60[v61])
           && ((unsigned __int16 v62 = strstr(*(char **)(a1 + 1216), a2), LH_stricmp(v54, *(char **)(a1 + 1208)))
            || !v62
            || v62[strlen(a2)] != 124))
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Language %s validation not OK", v34, v35, v36, (uint64_t)v54);
    }
    else
    {
      if (v51 && *v51) {
        int v63 = atoi(v51);
      }
      else {
        int v63 = 1;
      }
      unsigned int v64 = (unsigned __int16)(v63 - 1);
      if (v64 < (unsigned __int16)v38)
      {
        int v65 = v38;
      }
      else
      {
        int v39 = v40;
        int v65 = v63;
      }
      if (v54)
      {
        BOOL v66 = v64 >= (unsigned __int16)v38;
        int v38 = v65;
        if (v66)
        {
          unsigned __int8 v87 = *v54;
          strncpy(a5, v54, 0x14uLL);
          int v39 = v40;
          int v38 = v63;
        }
      }
      else
      {
        int v38 = v65;
      }
    }
    ++v37;
  }
  while (v37 < __c_1);
  if (!v39)
  {
    unsigned int v24 = (const char **)(a1 + 160);
    uint64_t v16 = (const char *)v84;
    unsigned int v25 = (void *)(a1 + 192);
    unsigned __int8 v69 = v87;
    goto LABEL_74;
  }
  uint64_t v67 = strchr(v39, 18);
  unsigned int v25 = (void *)(a1 + 192);
  unsigned int v24 = (const char **)(a1 + 160);
  if (v67) {
    *uint64_t v67 = 0;
  }
  if (!strcmp(v39, "_"))
  {
    uint64_t v16 = (const char *)v84;
    goto LABEL_88;
  }
  uint64_t appended = oneword_AppendPhon(a1, v39, "*", (uint64_t)"*", v87, 1);
  uint64_t v16 = (const char *)v84;
  if ((appended & 0x80000000) == 0) {
    goto LABEL_88;
  }
LABEL_94:
  uint64_t v20 = appended;
LABEL_95:
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v16);
  return v20;
}

size_t oneword_ReplaceUnderscoreWithDot(const char *a1)
{
  uint64_t v1 = (char *)a1;
  size_t result = strlen(a1);
  uint64_t v3 = (unsigned __int16)result;
  if ((_WORD)result)
  {
    do
    {
      if (*v1 == 95) {
        *uint64_t v1 = 46;
      }
      ++v1;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t oneword_AppendPhon(uint64_t a1, char *a2, char *__s, uint64_t a4, int a5, uint64_t a6)
{
  if (a5) {
    char v11 = a5;
  }
  else {
    char v11 = 32;
  }
  __s2[0] = v11;
  __s2[1] = 0;
  if (strlen(__s) >= 2)
  {
    if (!a6 && strchr(__s, 32))
    {
      if (strlen((const char *)a4) <= 1) {
        goto LABEL_14;
      }
LABEL_12:
      if (strchr((char *)a4, 32)) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    __s[1] = 0;
  }
  if (strlen((const char *)a4) <= 1) {
    goto LABEL_14;
  }
  if (!a6) {
    goto LABEL_12;
  }
LABEL_13:
  *(unsigned char *)(a4 + 1) = 0;
LABEL_14:
  if (!*a2) {
    return 0;
  }
  __int16 v12 = strlen(*(const char **)(a1 + 240));
  __int16 v13 = strlen(a2);
  __int16 v14 = v12 + 7;
  if (!a6) {
    __int16 v14 = v12 + 1;
  }
  unsigned __int16 v15 = v14 + v13;
  if (v15 >= 0x81u)
  {
    uint64_t v16 = v15;
    uint64_t v17 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 240), v15);
    if (!v17
      || (*(void *)(a1 + 240) = v17,
          (uint64_t v22 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 248), v16)) == 0)
      || (*(void *)(a1 + 248) = v22,
          (uint64_t v23 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 256), v16)) == 0)
      || (*(void *)(a1 + 256) = v23,
          (uint64_t v24 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 264), v16)) == 0))
    {
      a6 = 2310021130;
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v18, v19, v20, v21, v47);
      return a6;
    }
    *(void *)(a1 + 264) = v24;
  }
  if (a6)
  {
    *(_DWORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 8689634;
    *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
    *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
    *(_WORD *)(*(void *)(a1 + 264) + strlen(*(const char **)(a1 + 264))) = 32;
  }
  unsigned int v25 = strstr(a2, "â—„");
  if (strchr(__s, 32) || !v25)
  {
    strcat(*(char **)(a1 + 240), a2);
    strcat(*(char **)(a1 + 248), __s);
    strcat(*(char **)(a1 + 256), (const char *)a4);
    strcat(*(char **)(a1 + 264), __s2);
    int v41 = strlen(a2);
    unsigned int v42 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a2, v41);
    if (v42 > (unsigned __int16)strlen(__s))
    {
      int v43 = 0;
      do
      {
        *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 126;
        ++v43;
      }
      while ((int)(v42 - (unsigned __int16)strlen(__s)) > (unsigned __int16)v43);
    }
    if (v42 > (unsigned __int16)strlen((const char *)a4))
    {
      int v44 = 0;
      do
      {
        *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 126;
        ++v44;
      }
      while ((int)(v42 - (unsigned __int16)strlen((const char *)a4)) > (unsigned __int16)v44);
    }
    if (v42 > (unsigned __int16)strlen(__s2))
    {
      int v45 = 0;
      do
      {
        strcat(*(char **)(a1 + 264), __s2);
        ++v45;
      }
      while ((int)(v42 - (unsigned __int16)strlen(__s2)) > (unsigned __int16)v45);
    }
  }
  else
  {
    int v26 = strstr(v25 + 3, "â—„");
    if (!v26)
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34001, 0, v27, v28, v29, v30, v47);
      return 2310021127;
    }
    unsigned int v48 = v26;
    strncat(*(char **)(a1 + 240), a2, (unsigned __int16)((_WORD)v25 - (_WORD)a2 + 3));
    if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a2, (int)v25 - (int)a2 + 3))
    {
      int v31 = 0;
      do
      {
        *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
        *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
        *(_WORD *)(*(void *)(a1 + 264) + strlen(*(const char **)(a1 + 264))) = 32;
        ++v31;
      }
      while ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a2, (int)v25 - (int)a2 + 3) > (unsigned __int16)v31);
    }
    strncat(*(char **)(a1 + 240), v25 + 3, (unsigned __int16)((_WORD)v48 - (_WORD)v25 - 3));
    strcat(*(char **)(a1 + 248), __s);
    strcat(*(char **)(a1 + 256), (const char *)a4);
    strcat(*(char **)(a1 + 264), __s2);
    int v32 = (__int16)Utf8_LengthInUtf8chars((unint64_t)v25, (int)v48 - (int)v25) - 1;
    if (v32 > (__int16)strlen(__s))
    {
      int v33 = 0;
      do
      {
        *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 126;
        ++v33;
      }
      while (v32 - (__int16)strlen(__s) > (__int16)v33);
    }
    if (v32 > (__int16)strlen((const char *)a4))
    {
      int v34 = 0;
      do
      {
        *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 126;
        ++v34;
      }
      while (v32 - (__int16)strlen((const char *)a4) > (__int16)v34);
    }
    if (v32 > (__int16)strlen(__s2))
    {
      int v35 = 0;
      do
      {
        strcat(*(char **)(a1 + 264), __s2);
        ++v35;
      }
      while (v32 - (__int16)strlen(__s2) > (__int16)v35);
    }
    strcat(*(char **)(a1 + 240), v48);
    int v36 = strlen(a2);
    signed int v37 = Utf8_LengthInUtf8chars((unint64_t)a2, v36) << 16;
    if (v37 > (int)(Utf8_LengthInUtf8chars((unint64_t)a2, (int)v48 - (int)a2) << 16))
    {
      int v38 = 0;
      do
      {
        *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
        *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
        *(_WORD *)(*(void *)(a1 + 264) + strlen(*(const char **)(a1 + 264))) = 32;
        ++v38;
        int v39 = strlen(a2);
        int v40 = (__int16)Utf8_LengthInUtf8chars((unint64_t)a2, v39);
      }
      while (v40 - (__int16)Utf8_LengthInUtf8chars((unint64_t)a2, (int)v48 - (int)a2) > (__int16)v38);
    }
  }
  if (a6)
  {
    *(_DWORD *)(*(void *)(a1 + 240) + strlen(*(const char **)(a1 + 240))) = 8689634;
    *(_WORD *)(*(void *)(a1 + 248) + strlen(*(const char **)(a1 + 248))) = 32;
    *(_WORD *)(*(void *)(a1 + 256) + strlen(*(const char **)(a1 + 256))) = 32;
    a6 = 0;
    *(_WORD *)(*(void *)(a1 + 264) + strlen(*(const char **)(a1 + 264))) = 32;
  }
  return a6;
}

uint64_t oneword_ConvertPhon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _WORD *a10, unsigned __int16 *a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388]();
  unsigned __int16 v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  unsigned int v20 = v13;
  uint64_t v22 = v21;
  uint64_t v23 = v12;
  uint64_t v135 = *MEMORY[0x263EF8340];
  __int16 v132 = v24;
  int v25 = *v14;
  unsigned __int16 v131 = *v14;
  unsigned int v130 = 0;
  int v128 = 0;
  __int16 v127 = 1;
  __int16 v126 = 0;
  __int16 v124 = 200;
  unsigned __int16 v122 = 0;
  size_t v120 = 0;
  __dst[0] = 0;
  unint64_t v26 = (unsigned __int16)*a10;
  if (v26 < *a11)
  {
    uint64_t v27 = (_DWORD *)(a9 + 32 * v26 + 12);
    do
    {
      if (*v27 - a12 >= v13) {
        break;
      }
      *v27 += *(__int16 *)(v12 + 224);
      v27 += 8;
      *a10 = ++v26;
    }
    while (v26 < *a11);
  }
  int v129 = 0;
  unsigned int __s = 0;
  __int16 v121 = 0;
  unsigned __int16 v28 = 0;
  if (v25)
  {
    while (!v28 || SHIWORD(v128) < (__int16)v20)
    {
      uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(v23 + 56) + 168))(v19, v17, (unsigned __int16)v25, 0, 1, &v130, (char *)&v129 + 2);
      if ((v29 & 0x80000000) != 0) {
        return v29;
      }
      if (v130 > 3)
      {
        uint64_t v30 = 0;
        if (v130 == 5) {
          unsigned __int16 v28 = v131;
        }
      }
      else
      {
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(v23 + 56) + 168))(v19, v17, v131, 2, 1, (char *)&v128 + 2, (char *)&v129 + 2);
        if ((v29 & 0x80000000) != 0) {
          return v29;
        }
        uint64_t v30 = v131;
      }
      uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 + 56) + 120))(v19, v17);
      if ((v29 & 0x80000000) != 0) {
        return v29;
      }
      if (v30)
      {
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 + 56) + 192))(v19, v17, v30);
        if ((v29 & 0x80000000) != 0) {
          return v29;
        }
        int v25 = v131;
        if (*(unsigned __int16 *)(v23 + 280) == v30) {
          *(_WORD *)(v23 + 280) = v131;
        }
        if (!v25) {
          break;
        }
      }
      else
      {
        LOWORD(v25) = v131;
        if (!v131) {
          break;
        }
      }
    }
  }
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(v23 + 56) + 176))(v19, v17, v28, 3, &__s, (char *)&v129 + 2);
  if ((v29 & 0x80000000) != 0) {
    return v29;
  }
  __int16 v121 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)(v23 + 56) + 184))(v19, v17, v28, 9, &v121) & 0x80000000) == 0&& v121 == 1)
  {
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(v23 + 56) + 176))(v19, v17, v28, 9, &v120, (char *)&v129 + 2);
    if ((v29 & 0x80000000) != 0) {
      return v29;
    }
  }
  strcpy(v133, "EXTMRKP");
  int v31 = strchr(__s, 20);
  if (v31)
  {
    *int v31 = 0;
    int v32 = v31 + 1;
    int v33 = strchr(v31 + 1, 20);
    int v34 = v33;
    if (v33)
    {
      *int v33 = 0;
      int v34 = v33 + 1;
      if (strlen(v33 + 1) != 3) {
        int v34 = 0;
      }
    }
    size_t v35 = strlen(v32);
    unsigned __int16 v115 = v34;
    if (v35 && v35 + 1 <= 0x14) {
      __strcpy_chk();
    }
  }
  else
  {
    unsigned __int16 v115 = 0;
  }
  int v36 = __s;
  if (*__s == 32)
  {
    signed int v37 = __s + 1;
    do
    {
      unsigned int __s = v37;
      int v38 = *v37++;
    }
    while (v38 == 32);
    int v36 = v37 - 1;
  }
  int v39 = strchr(v36, 18);
  if (v39)
  {
    *int v39 = 0;
    __s1 = v39 + 1;
    int v36 = __s;
  }
  else
  {
    __s1 = 0;
  }
  if (strlen(v36) >= 5)
  {
    int v40 = *v36;
    if (v40 != 92) {
      goto LABEL_51;
    }
    if (v36[1] == 84)
    {
      *(void *)&__c[3] = 0;
      *(_WORD *)&__c[1] = -1;
      __c[0] = 0;
      strcpy(v134, "lngphon_e");
      v134[8] = v36[2];
      uint64_t v29 = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(v23 + 80) + 96))(*(void *)(v23 + 64), *(void *)(v23 + 72), "fecfg", v134, &__c[3], &__c[1], __c);
      if ((v29 & 0x80000000) != 0) {
        return v29;
      }
      if (*(_WORD *)&__c[1])
      {
        int v41 = **(const char ***)&__c[3];
        unsigned int v42 = strchr(**(char ***)&__c[3], __c[0]);
        if (v42)
        {
          *unsigned int v42 = 0;
          int v41 = **(const char ***)&__c[3];
        }
        strncpy(__dst, v41, 3uLL);
      }
      int v36 = __s + 4;
      __s += 4;
    }
  }
  int v40 = *v36;
LABEL_51:
  if (v40 != 35) {
    goto LABEL_91;
  }
  *(_WORD *)&__c[3] = v28;
  BOOL v43 = v28 != 0;
  unsigned int v44 = v130;
  if (v28 && v130 != 4 && v130 != 9)
  {
    LOWORD(v45) = v28;
    if (v130 != 10)
    {
      LOWORD(v45) = v28;
      while (1)
      {
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned char *))(*(void *)(v23 + 56) + 136))(v19, v17, (unsigned __int16)v45, &__c[3]);
        if ((v29 & 0x80000000) != 0) {
          return v29;
        }
        if (*(_WORD *)&__c[3])
        {
          uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 + 56) + 168))(v19, v17);
          if ((v29 & 0x80000000) != 0) {
            return v29;
          }
          int v45 = *(unsigned __int16 *)&__c[3];
        }
        else
        {
          int v45 = 0;
        }
        BOOL v43 = v45 != 0;
        unsigned int v44 = v130;
        if (v45)
        {
          BOOL v46 = v130 == 4 || v130 == 9;
          if (!v46 && v130 != 10) {
            continue;
          }
        }
        break;
      }
    }
    if (!v43) {
      goto LABEL_87;
    }
LABEL_74:
    *(_WORD *)&__c[1] = v45;
    *(_DWORD *)uint64_t v134 = v44;
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(v23 + 56)
                                                                                                  + 160))(v19, v17, (unsigned __int16)v45, 8, 1, &v124, &v129);
    if ((v29 & 0x80000000) == 0)
    {
      while (1)
      {
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned char *))(*(void *)(v23 + 56) + 120))(v19, v17, *(unsigned __int16 *)&__c[1], &__c[1]);
        if ((v29 & 0x80000000) != 0) {
          break;
        }
        if (!*(_WORD *)&__c[1]) {
          goto LABEL_87;
        }
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 + 56) + 168))(v19, v17);
        if ((v29 & 0x80000000) != 0) {
          break;
        }
        if (!*(_WORD *)&__c[1]) {
          goto LABEL_87;
        }
        if (*(unsigned __int16 *)&__c[1] == v28 || *(_DWORD *)v134 != 8) {
          goto LABEL_87;
        }
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 + 56) + 160))(v19, v17);
        if ((v29 & 0x80000000) != 0) {
          return v29;
        }
      }
    }
    return v29;
  }
  LOWORD(v45) = v28;
  if (v28) {
    goto LABEL_74;
  }
LABEL_87:
  int v36 = __s;
  if (*__s == 35)
  {
    uint64_t v51 = __s + 1;
    do
    {
      unsigned int __s = v51;
      int v52 = *v51++;
    }
    while (v52 == 35);
    int v36 = v51 - 1;
  }
LABEL_91:
  unsigned int v130 = 10;
  LOWORD(v53) = v132;
  while (1)
  {
    unsigned int v54 = *(unsigned __int8 *)(v22 + (unsigned __int16)v53);
    BOOL v55 = v54 > 0x20 || ((1 << v54) & 0x100002600) == 0;
    if (v55 && v54 != 95) {
      break;
    }
    LOWORD(v53) = v53 + 1;
    __int16 v132 = v53;
  }
  if (v20 <= (unsigned __int16)v53)
  {
    unsigned __int16 v113 = 0;
    uint64_t v56 = 0;
LABEL_202:
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(v23 + 56) + 120))(v19, v17, (unsigned __int16)v128, v15);
    if ((v49 & 0x80000000) == 0 && v113 && v122 >= 2u)
    {
      uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(v23 + 56) + 160))(v19, v17, v113, 7, 1, &v122, &v129);
LABEL_206:
      uint64_t v49 = v64;
      if (!v56) {
        return v49;
      }
      goto LABEL_210;
    }
    goto LABEL_209;
  }
  uint64_t v56 = 0;
  unsigned __int16 v113 = 0;
  char v57 = 0;
  unint64_t v58 = v20;
  unsigned __int16 v111 = v28;
  int v112 = v15;
  while (2)
  {
    uint64_t v59 = (unsigned __int16)v53;
    if (v20 <= (unsigned __int16)(v53 + 1)) {
      __int16 v60 = v53 + 1;
    }
    else {
      __int16 v60 = v20;
    }
    while (1)
    {
      unsigned int v61 = *(unsigned __int8 *)(v22 + v59);
      BOOL v62 = v61 > 0x20 || ((1 << v61) & 0x100002600) == 0;
      if (!v62 || v61 == 95) {
        break;
      }
      if (++v59 >= v58) {
        goto LABEL_113;
      }
    }
    __int16 v60 = v59;
LABEL_113:
    HIWORD(v128) = v60;
    uint64_t v63 = *(void *)(v23 + 56);
    char v114 = v57;
    if (v57) {
      uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(v63 + 80))(v19, v17, (unsigned __int16)v128, &v128);
    }
    else {
      uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(v63 + 88))(v19, v17, v28, &v128);
    }
    if ((v64 & 0x80000000) != 0) {
      goto LABEL_206;
    }
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(v23 + 56) + 160))(v19, v17, (unsigned __int16)v128, 0, 1, &v130, &v129);
    if ((v64 & 0x80000000) != 0) {
      goto LABEL_206;
    }
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(v23 + 56)
                                                                                                  + 160))(v19, v17, (unsigned __int16)v128, 1, 1, &v132, &v129);
    if ((v64 & 0x80000000) != 0) {
      goto LABEL_206;
    }
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(v23 + 56)
                                                                                               + 160))(v19, v17, (unsigned __int16)v128, 2, 1, (char *)&v128 + 2, &v129);
    if ((v64 & 0x80000000) != 0) {
      goto LABEL_206;
    }
    signed int v117 = v56;
    if (v120)
    {
      __int16 v65 = strlen(v120);
      uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(v23 + 56)
                                                                                                + 160))(v19, v17, (unsigned __int16)v128, 9, (unsigned __int16)(v65 + 1), v120, &v129);
      if ((v66 & 0x80000000) != 0) {
        goto LABEL_208;
      }
    }
    __int16 v67 = strlen(v133);
    uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(v23 + 56)
                                                                                              + 160))(v19, v17, (unsigned __int16)v128, 21, (unsigned __int16)(v67 + 1), v133, &v129);
    if ((v66 & 0x80000000) != 0) {
      goto LABEL_208;
    }
    if (v115)
    {
      __int16 v68 = strlen(v115);
      uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(v23 + 56)
                                                                                                + 160))(v19, v17, (unsigned __int16)v128, 12, (unsigned __int16)(v68 + 1), v115, &v129);
      if ((v66 & 0x80000000) != 0) {
        goto LABEL_208;
      }
    }
    ++v122;
    for (unsigned int i = v36 + 1; ; ++i)
    {
      unsigned int v70 = *v36;
      if (v70 > 0x22) {
        break;
      }
      if (!*v36 || v70 == 32) {
        goto LABEL_137;
      }
LABEL_132:
      ++v36;
    }
    if (v70 == 35) {
      goto LABEL_137;
    }
    if (v70 != 95) {
      goto LABEL_132;
    }
    if (v36[1] == 95) {
      __int16 v71 = 2;
    }
    else {
      __int16 v71 = 1;
    }
    __int16 v126 = v71;
LABEL_137:
    *int v36 = 0;
    if (!*__s)
    {
      uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(v23 + 56)
                                                                                                 + 160))(v19, v17, (unsigned __int16)v128, 3, 1, &byte_20D5A22AE, &v129);
      if ((v66 & 0x80000000) != 0) {
        goto LABEL_208;
      }
      goto LABEL_160;
    }
    uint64_t v72 = (2 * strlen(__s)) | 1;
    uint64_t v73 = (char *)heap_Realloc(*(uint64_t **)(*(void *)v23 + 8), (uint64_t)v56, v72);
    if (!v73)
    {
      uint64_t v49 = 2310021130;
      log_OutPublic(*(void *)(*(void *)v23 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v74, v75, v76, v77, v109);
      if (!v56) {
        return v49;
      }
      goto LABEL_210;
    }
    if (!*(_DWORD *)(v23 + 580))
    {
      uint64_t v56 = strcpy(v73, __s);
LABEL_151:
      if (strcmp(v56, "*,")
        && strcmp(v56, "*;")
        && strcmp(v56, "*:")
        && strcmp(v56, "'")
        && strcmp(v56, "\""))
      {
        int v118 = v56;
        __int16 v95 = strlen(v56);
        uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(v23 + 56)
                                                                                                  + 160))(v19, v17, (unsigned __int16)v128, 3, (unsigned __int16)(v95 + 1), v56, &v129);
        if ((v96 & 0x80000000) != 0)
        {
          uint64_t v49 = v96;
LABEL_211:
          uint64_t v108 = 0;
LABEL_212:
          heap_Free(*(void **)(*(void *)v23 + 8), (uint64_t)v118);
          goto LABEL_213;
        }
        goto LABEL_160;
      }
      uint64_t v97 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(v23 + 56)
                                                                                                 + 160))(v19, v17, (unsigned __int16)v128, 3, 1, &byte_20D5A22AE, &v129);
      if ((v97 & 0x80000000) == 0)
      {
LABEL_160:
        size_t v98 = __s1;
        signed int v117 = v56;
        if (__s1)
        {
          if (*(_DWORD *)(v23 + 2192))
          {
            uint64_t v66 = mosynt_LHPlusMapping(*(void *)(v23 + 48), *(uint64_t **)(v23 + 2200), *(void *)(v23 + 2240), __s1, v134, 0x1388u);
            size_t v98 = v134;
            if ((v66 & 0x80000000) != 0) {
              goto LABEL_208;
            }
          }
          uint64_t v99 = v98;
          __int16 v100 = strlen(v98);
          uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(*(void *)(v23 + 56) + 160))(v19, v17, (unsigned __int16)v128, 11, (unsigned __int16)(v100 + 1), v99, &v129);
          if ((v66 & 0x80000000) != 0) {
            goto LABEL_208;
          }
          unsigned __int16 v113 = v128;
        }
        uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 + 56) + 160))(v19, v17);
        if ((v66 & 0x80000000) == 0)
        {
          uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(v23 + 56) + 160))(v19, v17, (unsigned __int16)v128, 6, 2, "*", &v129);
          if ((v66 & 0x80000000) == 0)
          {
            uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(v23 + 56) + 160))(v19, v17, (unsigned __int16)v128, 7, 1, &v127, &v129);
            if ((v64 & 0x80000000) != 0) {
              goto LABEL_206;
            }
            uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(v23 + 56) + 160))(v19, v17, (unsigned __int16)v128, 20, 1, &v126, &v129);
            if ((v64 & 0x80000000) != 0) {
              goto LABEL_206;
            }
            if (v120)
            {
              uint64_t v101 = (unsigned __int16)(strlen(v120) + 1);
              uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(v23 + 56) + 160))(v19, v17, (unsigned __int16)v128, 9, v101, v120, &v129);
            }
            else
            {
              uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(v23 + 56) + 160))(v19, v17, (unsigned __int16)v128, 9, 1, &byte_20D5A22AE, &v129);
            }
            if ((v66 & 0x80000000) == 0)
            {
              if (v70 == 35
                || v56
                && (size_t v102 = strlen(v56), v102 >= 2)
                && v56[v102 - 2] == 42
                && (unsigned int v103 = v56[v102 - 1], v103 <= 0x3B)
                && ((1 << v103) & 0xC00100000000000) != 0)
              {
                uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(v23 + 56) + 160))(v19, v17, (unsigned __int16)v128, 8, 1, &v124, &v129);
                if ((v64 & 0x80000000) != 0) {
                  goto LABEL_206;
                }
              }
              if (v70)
              {
                *int v36 = v70;
                unsigned __int16 v28 = v111;
                unint64_t v58 = v20;
                char v104 = v114;
                while (1)
                {
                  int v105 = *i;
                  if (v105 != 95 && v105 != 35) {
                    break;
                  }
                  ++i;
                }
                unsigned int __s = i;
                int v36 = i;
              }
              else
              {
                unsigned __int16 v28 = v111;
                unint64_t v58 = v20;
                char v104 = v114;
              }
              uint64_t v53 = HIWORD(v128);
              unsigned __int16 v15 = v112;
              if (HIWORD(v128) < v20)
              {
                while (1)
                {
                  unsigned int v106 = *(unsigned __int8 *)(v22 + v53);
                  BOOL v107 = v106 > 0x20 || ((1 << v106) & 0x100002600) == 0;
                  if (v107 && v106 != 95) {
                    break;
                  }
                  if (v20 == (unsigned __int16)++v53)
                  {
                    LOWORD(v53) = v20;
                    break;
                  }
                }
              }
              __int16 v132 = v53;
              if ((v104 & 1) == 0) {
                LOWORD(v128) = v28;
              }
              __s1 = 0;
              char v57 = 1;
              if (v20 <= (unsigned __int16)v53) {
                goto LABEL_202;
              }
              continue;
            }
          }
        }
LABEL_208:
        uint64_t v49 = v66;
        uint64_t v56 = v117;
LABEL_209:
        if (!v56) {
          return v49;
        }
        goto LABEL_210;
      }
      uint64_t v49 = v97;
LABEL_210:
      int v118 = v56;
      goto LABEL_211;
    }
    break;
  }
  int v118 = v73;
  *(_DWORD *)&__c[3] = 0;
  unsigned __int16 v78 = (2 * strlen(__s)) | 1;
  if (__dst[0])
  {
    size_t v79 = __dst;
    uint64_t v80 = __s;
    char v81 = v118;
  }
  else
  {
    uint64_t v80 = __s;
    char v81 = v118;
    size_t v79 = 0;
  }
  uint64_t v49 = (*(uint64_t (**)(void, void, uint64_t, char *, void, char *, char *))(*(void *)(v23 + 152)
                                                                                           + 72))(*(void *)(v23 + 136), *(void *)(v23 + 144), 1, v80, v78, v81, v79);
  if ((v49 & 0x80000000) != 0) {
    goto LABEL_211;
  }
  int v82 = strlen(v118);
  uint64_t v83 = (char *)heap_Alloc(*(void *)(*(void *)v23 + 8), (v82 + 1));
  if (!v83)
  {
    uint64_t v108 = 0;
LABEL_220:
    uint64_t v49 = 2310021130;
    log_OutPublic(*(void *)(*(void *)v23 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v84, v85, v86, v87, v109);
    goto LABEL_212;
  }
  int v88 = v83;
  strcpy(v83, v118);
  unsigned int v89 = strlen(v118);
  unsigned int v90 = (unsigned __int16)Utf8_DepesLengthInBytesUtf8((unsigned __int8 *)v118, v89);
  uint64_t v91 = heap_Realloc(*(uint64_t **)(*(void *)v23 + 8), (uint64_t)v118, v90 + 1);
  int v92 = v88;
  if (!v91)
  {
    uint64_t v108 = (uint64_t)v88;
    goto LABEL_220;
  }
  uint64_t v56 = (char *)v91;
  uint64_t v110 = (uint64_t)v92;
  unsigned int v93 = strlen(v92);
  uint64_t v94 = utf8_DepesToUtf8(v110, v93, 0, (uint64_t)v56, v90, (unsigned int *)&__c[3], 0);
  if ((v94 & 0x80000000) == 0)
  {
    v56[*(unsigned int *)&__c[3]] = 0;
    heap_Free(*(void **)(*(void *)v23 + 8), v110);
    goto LABEL_151;
  }
  uint64_t v49 = v94;
  uint64_t v108 = v110;
  heap_Free(*(void **)(*(void *)v23 + 8), (uint64_t)v56);
LABEL_213:
  if (v108) {
    heap_Free(*(void **)(*(void *)v23 + 8), v108);
  }
  return v49;
}

uint64_t oneword_G2PLookup(uint64_t a1, const char **a2, __int16 a3, _WORD *a4, char *a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, uint64_t a9, _WORD *a10, unsigned __int16 *a11, __int16 a12, int a13)
{
  uint64_t v251 = *MEMORY[0x263EF8340];
  __int16 v249 = a3;
  unsigned int v229 = (unsigned __int16)*a4;
  int v248 = 0;
  uint64_t v247 = 3;
  unsigned int v16 = (2 * strlen(*a2)) | 1;
  if (v16 <= 0x80) {
    uint64_t v17 = 128;
  }
  else {
    uint64_t v17 = v16;
  }
  int v25 = (const char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v17);
  uint64_t v26 = *(void *)a1;
  if (!v25) {
    oneword_G2PLookup_cold_1(v26, v18, v19, v20, v21, v22, v23, v24);
  }
  int v34 = (char *)heap_Calloc(*(void **)(v26 + 8), 1, (2 * v17));
  uint64_t v35 = *(void *)a1;
  if (!v34) {
    oneword_G2PLookup_cold_1(v35, v27, v28, v29, v30, v31, v32, v33);
  }
  BOOL v43 = (char *)heap_Calloc(*(void **)(v35 + 8), 1, v17);
  uint64_t v44 = *(void *)a1;
  if (!v43) {
    oneword_G2PLookup_cold_1(v44, v36, v37, v38, v39, v40, v41, v42);
  }
  int v52 = (char *)heap_Calloc(*(void **)(v44 + 8), 1, v17);
  uint64_t v53 = *(void *)a1;
  if (!v52) {
    oneword_G2PLookup_cold_1(v53, v45, v46, v47, v48, v49, v50, v51);
  }
  unsigned int v61 = (char *)heap_Calloc(*(void **)(v53 + 8), 1, (2 * v17));
  uint64_t v62 = *(void *)a1;
  if (!v61) {
    oneword_G2PLookup_cold_1(v62, v54, v55, v56, v57, v58, v59, v60);
  }
  unsigned int v70 = (char *)heap_Calloc(*(void **)(v62 + 8), 1, v17);
  uint64_t v71 = *(void *)a1;
  if (!v70) {
    oneword_G2PLookup_cold_1(v71, v63, v64, v65, v66, v67, v68, v69);
  }
  uint64_t v79 = heap_Calloc(*(void **)(v71 + 8), 1, v17);
  uint64_t v80 = *(void *)a1;
  int __dst = (char *)v79;
  if (!v79) {
    oneword_G2PLookup_cold_1(v80, v72, v73, v74, v75, v76, v77, v78);
  }
  uint64_t v81 = heap_Calloc(*(void **)(v80 + 8), 1, v17 >> 1);
  if (!v81) {
    oneword_G2PLookup_cold_8(a1, v82, v83, v84, v85, v86, v87, v88);
  }
  unsigned int v89 = (_OWORD *)v81;
  unsigned __int8 v246 = 0;
  signed __int16 v245 = a3 - 1;
  int v244 = 0;
  uint64_t v243 = 0;
  int v242 = 0;
  BOOL v230 = *(_DWORD *)(a1 + 2192) != 0;
  size_t v90 = strlen(*a2);
  uint64_t v91 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v90 + 1);
  uint64_t v96 = *(void *)a1;
  if (!v91)
  {
    uint64_t v105 = 2310021130;
    log_OutPublic(*(void *)(v96 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v92, v93, v94, v95, v201);
    goto LABEL_319;
  }
  int v232 = (char *)v91;
  uint64_t v97 = heap_Calloc(*(void **)(v96 + 8), 1, 25016);
  if (!v97)
  {
    uint64_t v105 = 2310021130;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v98, v99, v100, v101, v201);
    goto LABEL_318;
  }
  unsigned __int16 v228 = (char *)v97;
  uint64_t MultiWordLen = mosynt_ResetMosyntWS(*(void *)(a1 + 48), v97);
  if ((MultiWordLen & 0x80000000) != 0)
  {
LABEL_312:
    uint64_t v105 = MultiWordLen;
    goto LABEL_317;
  }
  uint64_t v226 = v89;
  *int v25 = 0;
  *int v34 = 0;
  *BOOL v43 = 0;
  *int v52 = 0;
  *unsigned int v61 = 0;
  *unsigned int v70 = 0;
  *(_DWORD *)(a1 + 2172) = 0;
  if (strcmp(a5, (const char *)(a1 + 300)))
  {
    uint64_t MdeSettings = oneword_GetMdeSettings(a1);
    if ((MdeSettings & 0x80000000) != 0) {
      goto LABEL_316;
    }
    __strcpy_chk();
  }
  __src = v43;
  unsigned __int16 v225 = v25;
  char v227 = v34;
  uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, char *))(*(void *)(a1 + 56)
                                                                                              + 168))(a6, a7, *a8, 0, 1, (char *)&v247 + 4, (char *)&v248 + 2);
  if ((v104 & 0x80000000) != 0)
  {
LABEL_313:
    uint64_t v105 = v104;
    unsigned int v89 = v226;
    goto LABEL_314;
  }
  uint64_t v105 = oneword_read_LD_W_INPUTSPACETAG(a1, a6, a7, SHIDWORD(v247), *a8, &v243);
  if ((v105 & 0x80000000) != 0)
  {
LABEL_314:
    int v34 = (char *)v227;
LABEL_315:
    BOOL v43 = __src;
    int v25 = v225;
    goto LABEL_317;
  }
  if ((HIDWORD(v247) - 5) <= 2)
  {
    while (1)
    {
      uint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a6, a7, *a8, a8);
      if ((v105 & 0x80000000) != 0) {
        break;
      }
      int v34 = (char *)v227;
      if (!*a8) {
        goto LABEL_317;
      }
      uint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, char *))(*(void *)(a1 + 56)
                                                                                                  + 168))(a6, a7, *a8, 0, 1, (char *)&v247 + 4, (char *)&v248 + 2);
      if ((v105 & 0x80000000) != 0) {
        goto LABEL_317;
      }
      if ((HIDWORD(v247) - 5) > 2) {
        goto LABEL_25;
      }
    }
LABEL_329:
    int v34 = (char *)v227;
    goto LABEL_317;
  }
LABEL_25:
  if (*(_DWORD *)(a1 + 2168) != 1) {
    goto LABEL_29;
  }
  int v106 = *(_DWORD *)(a1 + 2072);
  if (v106 != 1)
  {
    if (v106 || *(void *)(a1 + 2136)) {
      goto LABEL_29;
    }
LABEL_324:
    int v108 = 0;
    int v107 = 1;
    goto LABEL_30;
  }
  if (*(void *)(a1 + 2136)) {
    goto LABEL_324;
  }
LABEL_29:
  int v107 = 0;
  int v108 = 1;
LABEL_30:
  LOWORD(v109) = *a8;
  if (!*a8) {
    goto LABEL_317;
  }
  int v219 = v108;
  int v220 = v107;
  if ((__int16)v244 >= (__int16)*a4)
  {
    LOWORD(v221) = 0;
    goto LABEL_321;
  }
  int v213 = 0;
  int v221 = 0;
  uint64_t v211 = a1 + 1228;
  uint64_t v212 = a1 + 2016;
  v210 = (uint64_t *)(a1 + 160);
  int v208 = (uint64_t *)(a1 + 176);
  size_t v209 = (uint64_t *)(a1 + 168);
  int v206 = (uint64_t *)(a1 + 192);
  size_t v207 = (uint64_t *)(a1 + 184);
  int v204 = (uint64_t *)(a1 + 208);
  size_t v205 = (uint64_t *)(a1 + 200);
  size_t v203 = (uint64_t *)(a1 + 216);
  unsigned __int16 v218 = -1;
  int v222 = 3;
  int v214 = 1;
  while (1)
  {
    unsigned __int16 v241 = 0;
    uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a6, a7, (unsigned __int16)v109, &v248);
    if ((MultiWordLen & 0x80000000) != 0) {
      goto LABEL_312;
    }
    unsigned __int16 v241 = v248;
    if ((_WORD)v248)
    {
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a6, a7);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      int v110 = v247;
      uint64_t v111 = (unsigned __int16)v248;
    }
    else
    {
      uint64_t v111 = 0;
      int v110 = 3;
      LODWORD(v247) = 3;
    }
    uint64_t MultiWordLen = oneword_read_LD_W_INPUTSPACETAG(a1, a6, a7, v110, v111, &v243);
    if ((MultiWordLen & 0x80000000) != 0) {
      goto LABEL_312;
    }
    if ((v247 - 5) <= 2)
    {
      while (1)
      {
        uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a6, a7, (unsigned __int16)v248, &v248);
        if ((MultiWordLen & 0x80000000) != 0) {
          goto LABEL_312;
        }
        if (!(_WORD)v248) {
          break;
        }
        uint64_t v112 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a6, a7);
        if ((v112 & 0x80000000) != 0
          || (uint64_t v112 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a6, a7, (unsigned __int16)v248, 1, 1, (char *)&v242 + 2, (char *)&v248 + 2), (v112 & 0x80000000) != 0)|| (uint64_t v112 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a6, a7, (unsigned __int16)v248, 2, 1, &v242, (char *)&v248 + 2), (v112 & 0x80000000) != 0))
        {
          uint64_t v105 = v112;
          goto LABEL_315;
        }
        BOOL v43 = __src;
        int v25 = v225;
        if ((v247 - 5) >= 3) {
          goto LABEL_48;
        }
      }
      LODWORD(v247) = 3;
    }
LABEL_48:
    uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, char *))(*(void *)(a1 + 56) + 168))(a6, a7, *a8, 1, 1, &v249, (char *)&v248 + 2);
    if ((MultiWordLen & 0x80000000) != 0) {
      goto LABEL_312;
    }
    __int16 v116 = v249;
    int v117 = v245;
    if (v249 < v245) {
      goto LABEL_50;
    }
    if (HIDWORD(v247) != 3 && v222 == 3) {
      break;
    }
LABEL_137:
    if (v116 < (__int16)v117 || v222 == 3 && v247 == 3)
    {
      if (v116 < (__int16)v117 || v222 != 3 || v247 != 3) {
        goto LABEL_50;
      }
      if (!HIDWORD(v247))
      {
        uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a6, a7, *a8, 2, 1, &v244, (char *)&v248 + 2);
        if ((MultiWordLen & 0x80000000) != 0) {
          goto LABEL_312;
        }
        __int16 v144 = *(_WORD *)(a1 + 224);
        unsigned __int16 v145 = v144 + v249;
        int v146 = (unsigned __int16)(v244 + v144) - (unsigned __int16)(v144 + v249);
        if (v146 >= 128) {
          int v147 = 128;
        }
        else {
          int v147 = v146;
        }
        strncpy(v43, &(*a2)[v145], v147);
        v43[v147] = 0;
        *(_DWORD *)(a1 + 2172) = 0;
        strcpy(v70, v43);
        uint64_t v148 = a5;
        if (((*(uint64_t (**)(void, void, char *, char *, uint64_t))(*(void *)(a1 + 80) + 136))(*(void *)(a1 + 64), *(void *)(a1 + 72), a5, v70, 128) & 0x80000000) != 0)goto LABEL_182; {
        if (*(_DWORD *)(a1 + 2192))
        }
        {
          LODWORD(v250[0]) = 0;
          BOOL v150 = strcmp(v25, v43) == 0;
          uint64_t MultiWordLen = mde_MosyntMorphAna(a1, v228, (uint64_t)v70, v43, (uint64_t)a5, (unsigned __int16)v249, *a8, v151, a6, a7, (unsigned __int16 *)&v245, v150, v250);
          if ((MultiWordLen & 0x80000000) != 0) {
            goto LABEL_312;
          }
          if (LODWORD(v250[0]) == 1) {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD WGRAM %s", v152, v153, v154, (uint64_t)v43);
          }
          uint64_t v148 = a5;
          goto LABEL_182;
        }
        if (*(_DWORD *)(a1 + 2168) == 1
          && !strstr(a5, "latin")
          && (!v219 || strcmp(a5, "prompt") && strcmp(a5, "internal-nuance-system-norm")))
        {
          strcpy(__dst, v43);
          if (((*(uint64_t (**)(void, void, char *, char *, uint64_t))(*(void *)(a1 + 80) + 104))(*(void *)(a1 + 64), *(void *)(a1 + 72), a5, __dst, 128) & 0x80000000) != 0)strcpy(__dst, __src); {
          uint64_t v104 = crf_mde_seg_label(*(void *)a1, (char *)*a2, v212, __dst, (unsigned __int16)v249, *(__int16 *)(a1 + 224), &v245, a8, *(void *)(a1 + 56), a6, a7, *(void *)(a1 + 80), *(void *)(a1 + 64), *(void *)(a1 + 72), *(_DWORD *)(a1 + 1224), v211, *(unsigned char *)(a1 + 556), *(void *)(a1 + 88), *(void *)(a1 + 96),
          }
                   *(void *)(a1 + 104),
                   *(_DWORD *)(a1 + 560),
                   a5,
                   v210,
                   v209,
                   v208,
                   v207,
                   v206,
                   v205,
                   v204,
                   v203,
                   *(char **)(a1 + 240),
                   *(char **)(a1 + 248),
                   *(char **)(a1 + 256),
                   *(unsigned char **)(a1 + 264),
                   *(char **)(a1 + 1208),
                   0);
          if ((v104 & 0x80000000) != 0) {
            goto LABEL_313;
          }
          unsigned int v89 = v226;
          int v34 = (char *)v227;
          BOOL v43 = __src;
          int v25 = v225;
          uint64_t v148 = a5;
          if (v249 < v245)
          {
            *(_DWORD *)(a1 + 2172) = 1;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD CRF MDE SEG %s", v195, v196, v149, (uint64_t)__src);
          }
        }
        __int16 v156 = v249;
        __int16 v157 = v245;
        if (v249 >= v245 && *(_DWORD *)(a1 + 296))
        {
          uint64_t v104 = oneword_DpsMde((void *)a1, v70, v43, (uint64_t)"g2p", v148, v249, *a8, v149, a6, a7, &v245);
          if ((v104 & 0x80000000) != 0) {
            goto LABEL_313;
          }
          __int16 v156 = v249;
          __int16 v157 = v245;
          if (v249 >= v245)
          {
            unsigned int v89 = v226;
            int v34 = (char *)v227;
            BOOL v43 = __src;
          }
          else
          {
            BOOL v43 = __src;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD DEPES MDE %s", v168, v169, v170, (uint64_t)__src);
            __int16 v156 = v249;
            __int16 v157 = v245;
            unsigned int v89 = v226;
            int v34 = (char *)v227;
          }
          int v25 = v225;
          uint64_t v148 = a5;
        }
        int v155 = *(_DWORD *)(a1 + 2168);
        if (!v155)
        {
          if (v156 >= v157)
          {
            uint64_t v104 = mde_Main(a1, v70, v43, v148, v156, *a8, a6, a7, &v245);
            if ((v104 & 0x80000000) != 0) {
              goto LABEL_313;
            }
            unsigned int v89 = v226;
            int v34 = (char *)v227;
            BOOL v43 = __src;
            int v25 = v225;
            uint64_t v148 = a5;
            if (v249 < v245) {
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD DCTBASEDMDE %s", v197, v198, v199, (uint64_t)__src);
            }
          }
LABEL_182:
          int v155 = *(_DWORD *)(a1 + 2168);
          __int16 v156 = v249;
          __int16 v157 = v245;
        }
        BOOL v188 = v156 < v157;
        int v158 = v214;
        if (!v188) {
          int v158 = 1;
        }
        int v214 = v158;
        if (v155 != 1) {
          goto LABEL_193;
        }
        int v159 = v220;
        if (v220)
        {
          __int16 v160 = strstr(v148, "latin");
          int v159 = v220;
          if (v160) {
            goto LABEL_191;
          }
        }
        uint64_t MultiWordLen = oneword_joinTokens(a1, a6, a7, v218, a8, v159);
        if ((MultiWordLen & 0x80000000) != 0) {
          goto LABEL_312;
        }
        int v155 = *(_DWORD *)(a1 + 2168);
        uint64_t v148 = a5;
        if (v155 == 1)
        {
          if (v220)
          {
LABEL_191:
            if (!strstr(v148, "latin")) {
              goto LABEL_50;
            }
          }
          int v161 = 1;
        }
        else
        {
LABEL_193:
          if (v155) {
            goto LABEL_50;
          }
          int v161 = 0;
        }
        uint64_t v162 = oneword_ProcessNTokens(a1, (uint64_t)v228, a2, v148, a6, a7, v218, *a8, a9, a10, a11, a12, v214, v161, v161);
        if ((v162 & 0x80000000) != 0) {
          goto LABEL_328;
        }
        goto LABEL_50;
      }
      if (HIDWORD(v247) > 2) {
        goto LABEL_50;
      }
      LOWORD(v250[0]) = 0;
      LOWORD(__s2) = 0;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Front end oneword: Digit or punctuation not in G2P dictionary. Word='%s', tokenType=%d", v113, v114, v115, (uint64_t)v25);
      signed __int16 v245 = v249 + strlen(v25);
      HIDWORD(v247) = 4;
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56) + 88))(a6, a7, *a8);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 0, 1, (char *)&v247 + 4, v250);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 1, 1, &v249, v250);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, signed __int16 *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 2, 1, &v245, v250);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 3, 1, &byte_20D5A22AE, v250);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 5, 2, "*", v250);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 6, 2, "*", v250);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      LOWORD(__s2) = 1;
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char **, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 7, 1, &__s2, v250);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      uint64_t v136 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 9, 1, &byte_20D5A22AE, v250);
      if ((v136 & 0x80000000) == 0) {
        goto LABEL_50;
      }
      uint64_t v105 = v136;
      int v222 = 3;
    }
    else
    {
      if (HIDWORD(v247) >= 2 && (HIDWORD(v247) != 2 || *(_DWORD *)(a1 + 936) != 1)) {
        goto LABEL_259;
      }
      uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a6, a7, *a8, 2, 1, &v244, (char *)&v248 + 2);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      __int16 v137 = *(_WORD *)(a1 + 224);
      unsigned __int16 v138 = v137 + v249;
      int v139 = (unsigned __int16)(v244 + v137) - (unsigned __int16)(v137 + v249);
      int v140 = v139 >= 128 ? 128 : v139;
      strncpy(v43, &(*a2)[v138], v140);
      v43[v140] = 0;
      *(_DWORD *)(a1 + 2172) = 0;
      strcpy(v70, v43);
      if (((*(uint64_t (**)(void, void, char *, char *, uint64_t))(*(void *)(a1 + 80) + 136))(*(void *)(a1 + 64), *(void *)(a1 + 72), a5, v70, 128) & 0x80000000) != 0)
      {
        strcpy(v70, v43);
      }
      else if (strcmp(v52, v70))
      {
        uint64_t MultiWordLen = oneword_Lookup((_DWORD *)a1, v228, a2, (uint64_t)v70, v43, a5, v243, v249, *a8, a6, a7, (unsigned __int16 *)&v245, 1, a13, v230);
        if ((MultiWordLen & 0x80000000) != 0) {
          goto LABEL_312;
        }
        if (v245 > v249)
        {
          *(void *)&v250[0] = 0;
          LOWORD(__s2) = 0;
          uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, char **))(*(void *)(a1 + 56) + 136))(a6, a7, *a8, &__s2);
          if ((v104 & 0x80000000) != 0) {
            goto LABEL_313;
          }
          uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, _OWORD *, char *))(*(void *)(a1 + 56)
                                                                                                + 176))(a6, a7, (unsigned __int16)__s2, 3, v250, (char *)&v248 + 2);
          if ((v104 & 0x80000000) != 0) {
            goto LABEL_313;
          }
          oneword_ReplaceUnderscoreWithDot(*(const char **)&v250[0]);
          BOOL v43 = __src;
          int v25 = v225;
        }
      }
      if (v249 < v245) {
        goto LABEL_259;
      }
      if (HIDWORD(v247) != 1)
      {
        if (!HIDWORD(v247))
        {
          if (*(_DWORD *)(a1 + 2192))
          {
            LODWORD(v250[0]) = 0;
            unsigned __int16 v163 = strlen(v25);
            unsigned __int16 v164 = strlen(v43);
            int v166 = 0;
            if (v163 >= 2u)
            {
              LOWORD(__s2) = v25[v163 - 1];
              unsigned __int16 v223 = v164;
              BOOL v181 = (*(unsigned int (**)(void, void, char **))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), &__s2) == 0;
              unsigned __int16 v164 = v223;
              int v166 = !v181;
            }
            if (v163 == v164)
            {
              int v167 = 1;
            }
            else
            {
              if (v166) {
                BOOL v181 = v164 == v163 - 1;
              }
              else {
                BOOL v181 = 0;
              }
              int v167 = v181;
            }
            uint64_t MultiWordLen = mde_MosyntMorphAna(a1, v228, (uint64_t)v70, v43, (uint64_t)a5, (unsigned __int16)v249, *a8, v165, a6, a7, (unsigned __int16 *)&v245, v167, v250);
            if ((MultiWordLen & 0x80000000) != 0) {
              goto LABEL_312;
            }
          }
          else
          {
            if (*(_DWORD *)(a1 + 2168) == 1
              && !strstr(a5, "latin")
              && (!v219 || strcmp(a5, "prompt") && strcmp(a5, "internal-nuance-system-norm")))
            {
              strcpy(__dst, v43);
              if (((*(uint64_t (**)(void, void, char *, char *, uint64_t))(*(void *)(a1 + 80) + 104))(*(void *)(a1 + 64), *(void *)(a1 + 72), a5, __dst, 128) & 0x80000000) != 0)strcpy(__dst, __src); {
              uint64_t v104 = crf_mde_seg_label(*(void *)a1, (char *)*a2, v212, __dst, (unsigned __int16)v249, *(__int16 *)(a1 + 224), &v245, a8, *(void *)(a1 + 56), a6, a7, *(void *)(a1 + 80), *(void *)(a1 + 64), *(void *)(a1 + 72), *(_DWORD *)(a1 + 1224), v211, *(unsigned char *)(a1 + 556), *(void *)(a1 + 88), *(void *)(a1 + 96),
              }
                       *(void *)(a1 + 104),
                       *(_DWORD *)(a1 + 560),
                       a5,
                       v210,
                       v209,
                       v208,
                       v207,
                       v206,
                       v205,
                       v204,
                       v203,
                       *(char **)(a1 + 240),
                       *(char **)(a1 + 248),
                       *(char **)(a1 + 256),
                       *(unsigned char **)(a1 + 264),
                       *(char **)(a1 + 1208),
                       1);
              if ((v104 & 0x80000000) != 0) {
                goto LABEL_313;
              }
              if (v249 < v245)
              {
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD CRF MDE SEG %s", v172, v173, v143, (uint64_t)__src);
                *(_DWORD *)(a1 + 2172) = 1;
              }
              BOOL v43 = __src;
              if (!*(_DWORD *)(a1 + 2068))
              {
                if (*(_DWORD *)(a1 + 2172))
                {
                  uint64_t v174 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56) + 120))(a6, a7, *a8);
                  if ((v174 & 0x80000000) != 0)
                  {
                    uint64_t v105 = v174;
                    unsigned int v89 = v226;
                    int v34 = (char *)v227;
                    int v25 = v225;
                    goto LABEL_317;
                  }
                }
              }
            }
            if (v249 >= v245 && *(_DWORD *)(a1 + 296))
            {
              uint64_t v104 = oneword_DpsMde((void *)a1, v70, v43, (uint64_t)"g2p", a5, v249, *a8, v143, a6, a7, &v245);
              if ((v104 & 0x80000000) != 0) {
                goto LABEL_313;
              }
              BOOL v43 = __src;
              if (v249 < v245) {
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD DEPES MAIN %s", v175, v176, v177, (uint64_t)__src);
              }
            }
            unsigned int v89 = v226;
            int v34 = (char *)v227;
            int v25 = v225;
            if (!*(_DWORD *)(a1 + 2168) && v249 >= v245)
            {
              uint64_t v104 = mde_Main(a1, v70, v43, a5, v249, *a8, a6, a7, &v245);
              if ((v104 & 0x80000000) != 0) {
                goto LABEL_313;
              }
              unsigned int v89 = v226;
              int v34 = (char *)v227;
              BOOL v43 = __src;
              int v25 = v225;
              if (v249 < v245) {
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD DCTBASEDMDE MAIN %s", v178, v179, v180, (uint64_t)__src);
              }
            }
          }
        }
LABEL_256:
        int v182 = v214;
        if (v249 >= v245) {
          int v182 = 1;
        }
        int v214 = v182;
LABEL_259:
        if ((v218 & 0x8000) != 0) {
          goto LABEL_50;
        }
        if (HIDWORD(v247) == 3 || v247 != 3) {
          goto LABEL_285;
        }
        uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a6, a7, v218, 1, 1, (char *)&v244 + 2, (char *)&v248 + 2);
        if ((MultiWordLen & 0x80000000) != 0) {
          goto LABEL_312;
        }
        size_t v183 = v232;
        *int v232 = 0;
        if ((unsigned __int16)v244 > HIWORD(v244))
        {
          size_t v183 = strncpy(v232, &(*a2)[*(unsigned __int16 *)(a1 + 224) + HIWORD(v244)], (unsigned __int16)v244 - (unint64_t)HIWORD(v244));
          v183[(unsigned __int16)v244 - HIWORD(v244)] = 0;
        }
        if (*(_DWORD *)(a1 + 936) && utf8_IsChineseLetter(v183))
        {
          unint64_t v184 = *(unsigned __int16 *)(a1 + 224);
          __int16 ChineseUTFCharNum = utf8_GetChineseUTFCharNum((uint64_t)*a2, (unsigned __int16)(v244 + v184));
          unsigned __int16 v186 = ChineseUTFCharNum
               - utf8_GetChineseUTFCharNum((uint64_t)*a2, (unsigned __int16)(*(_WORD *)(a1 + 224) + HIWORD(v244)));
          while (1)
          {
            int v187 = (*a2)[(unsigned __int16)v244 + v184];
            if (v187 == 32) {
              break;
            }
            BOOL v188 = v187 == 95 || v184 > 5;
            if (v188 || v187 == 0) {
              break;
            }
            ++v184;
          }
          uint64_t MultiWordLen = oneword_SkipCrosstoken(a1, a6, a7, a5, v186, SHIWORD(v244), (unsigned __int16)v244 + (unsigned __int16)v184 - *(_WORD *)(a1 + 224), v218, *a8);
          unsigned int v89 = v226;
          if ((MultiWordLen & 0x80000000) != 0) {
            goto LABEL_312;
          }
LABEL_285:
          if (*(_DWORD *)(a1 + 2168) == 1)
          {
LABEL_286:
            int v192 = v219;
            if (HIDWORD(v247) != 3 && v247 == 3 || v245 == *a4)
            {
              if ((v193 = v220) != 0 && (v194 = strstr(a5, "latin"), int v192 = v219, v193 = v220, !v194)
                || v192 && *(_DWORD *)(a1 + 2172))
              {
                uint64_t v162 = oneword_joinTokens(a1, a6, a7, v218, a8, v193);
                if ((v162 & 0x80000000) != 0)
                {
LABEL_328:
                  uint64_t v105 = v162;
                  goto LABEL_329;
                }
                *(_DWORD *)(a1 + 2172) = 0;
              }
            }
          }
LABEL_50:
          uint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a6, a7, *a8, 2, 1, &v244, (char *)&v248 + 2);
          if ((v105 & 0x80000000) != 0) {
            goto LABEL_329;
          }
          int v109 = (unsigned __int16)v248;
          *a8 = v248;
          int v222 = HIDWORD(v247);
          HIDWORD(v247) = v247;
          if (!v109) {
            goto LABEL_326;
          }
          goto LABEL_52;
        }
        int v190 = *(_DWORD *)(a1 + 2168);
        if (v190)
        {
          if (v190 != 1) {
            goto LABEL_50;
          }
          if (v220 && !strstr(a5, "latin")) {
            goto LABEL_286;
          }
        }
        uint64_t v191 = oneword_ProcessNTokens(a1, (uint64_t)v228, a2, a5, a6, a7, v218, *a8, a9, a10, a11, a12, v214, *(_DWORD *)(a1 + 2172), v190);
        if ((v191 & 0x80000000) == 0)
        {
          uint64_t MultiWordLen = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a6, a7, *a8, 2, 1, &v244, (char *)&v248 + 2);
          int v34 = (char *)v227;
          BOOL v43 = __src;
          int v25 = v225;
          if ((MultiWordLen & 0x80000000) != 0) {
            goto LABEL_312;
          }
          goto LABEL_285;
        }
        uint64_t v105 = v191;
        goto LABEL_314;
      }
      LOWORD(v250[0]) = 0;
      LOWORD(__s2) = 0;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Front end oneword: Digit or punctuation not in G2P dictionary. Word='%s', tokenType=%d", v141, v142, v143, (uint64_t)v25);
      signed __int16 v245 = v249 + strlen(v43);
      HIDWORD(v247) = 4;
      uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56) + 88))(a6, a7, *a8);
      if ((v104 & 0x80000000) != 0) {
        goto LABEL_313;
      }
      uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 0, 1, (char *)&v247 + 4, v250);
      if ((v104 & 0x80000000) != 0) {
        goto LABEL_313;
      }
      uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 1, 1, &v249, v250);
      if ((v104 & 0x80000000) != 0) {
        goto LABEL_313;
      }
      uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, signed __int16 *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 2, 1, &v245, v250);
      if ((v104 & 0x80000000) != 0) {
        goto LABEL_313;
      }
      uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 3, 1, &byte_20D5A22AE, v250);
      if ((v104 & 0x80000000) != 0) {
        goto LABEL_313;
      }
      uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 5, 2, "*", v250);
      if ((v104 & 0x80000000) != 0) {
        goto LABEL_313;
      }
      uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 6, 2, "*", v250);
      if ((v104 & 0x80000000) != 0) {
        goto LABEL_313;
      }
      LOWORD(__s2) = 1;
      uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char **, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 7, 1, &__s2, v250);
      if ((v104 & 0x80000000) != 0) {
        goto LABEL_313;
      }
      uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, _OWORD *))(*(void *)(a1 + 56) + 160))(a6, a7, *a8, 9, 1, &byte_20D5A22AE, v250);
      if ((v104 & 0x80000000) != 0) {
        goto LABEL_313;
      }
      uint64_t v171 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56) + 120))(a6, a7, *a8);
      if ((v171 & 0x80000000) == 0) {
        goto LABEL_256;
      }
      uint64_t v105 = v171;
    }
    if ((v105 & 0x80000000) != 0) {
      goto LABEL_329;
    }
    LOWORD(v109) = *a8;
    if (!*a8)
    {
LABEL_326:
      int v34 = (char *)v227;
LABEL_321:
      if ((_WORD)v221) {
        *a8 = v221;
      }
      goto LABEL_317;
    }
LABEL_52:
    int v34 = (char *)v227;
    if ((__int16)v244 >= (__int16)*a4) {
      goto LABEL_321;
    }
  }
  unsigned __int16 v218 = *a8;
  int v215 = v249;
  if (!oneword_GetWord(*(_WORD *)(a1 + 224) + v249, (uint64_t)*a2, (uint64_t)v25))
  {
LABEL_130:
    __int16 v116 = v249;
    LOWORD(v117) = v245;
    if (v249 >= v245 && *(_DWORD *)(a1 + 292))
    {
      LOWORD(v250[0]) = 0;
      uint64_t MultiWordLen = oneword_NonDctDpsMde((void *)a1, (unsigned __int16)v249, (uint64_t)v25, a5, *a8, (unsigned __int16 *)v250, a6, a7);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      if (LOWORD(v250[0]))
      {
        LODWORD(v247) = 0;
        LOWORD(v248) = v250[0];
      }
      int v214 = 0;
      __int16 v116 = v249;
      LOWORD(v117) = v245;
    }
    else
    {
      int v214 = 0;
    }
    goto LABEL_137;
  }
  if (!(_WORD)v248 || !strcmp(a5, "prompt") || !strcmp(a5, "internal-nuance-system-norm"))
  {
    int v118 = v215;
    goto LABEL_113;
  }
  strcpy(v34, v25);
  uint64_t MultiWordLen = oneword_GetMultiWordLen((void *)a1, (uint64_t)v34, (uint64_t)a5, v89, &v246);
  if ((MultiWordLen & 0x80000000) != 0) {
    goto LABEL_312;
  }
  int v118 = v249;
  int v117 = v245;
  unint64_t v202 = v246;
  if (!v246 || v249 <= v245)
  {
LABEL_113:
    if (v118 >= v117)
    {
      uint64_t MultiWordLen = oneword_Lookup((_DWORD *)a1, v228, a2, (uint64_t)v25, v25, a5, v243, v118, *a8, a6, a7, (unsigned __int16 *)&v245, 0, a13, v230);
      if ((MultiWordLen & 0x80000000) != 0) {
        goto LABEL_312;
      }
      int v217 = v249;
      int v117 = v245;
      if (oneword_isInputBetweenPOIMrk(a9, *a11, (unsigned __int16)v249, (unsigned __int16)v245))
      {
        LOWORD(__s2) = 0;
        int v118 = v217;
        if (v217 < v117)
        {
          do
          {
            unsigned __int16 v131 = &(*a2)[(unsigned __int16)v118 + *(__int16 *)(a1 + 224)];
            int v132 = v118;
            if (utf8_IsChineseLetter(v131))
            {
              int v133 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v131);
              int v118 = v132 + v133;
              LOWORD(__s2) = v132 + v133;
              if ((unsigned __int16)v249 != (unsigned __int16)v132
                || (unsigned __int16)v245 > (unsigned __int16)v118)
              {
                memset(v250, 0, sizeof(v250));
                unsigned __int16 v134 = v132;
                int v135 = v132 + v133;
                __strncpy_chk();
                uint64_t MdeSettings = oneword_Lookup((_DWORD *)a1, v228, a2, (uint64_t)v250, (const char *)v250, a5, v243, v134, *a8, a6, a7, (unsigned __int16 *)&__s2, 0, a13, v230);
                int v118 = v135;
                if ((MdeSettings & 0x80000000) != 0) {
                  goto LABEL_316;
                }
              }
            }
            else
            {
              int v118 = v132 + 1;
            }
            int v117 = v245;
          }
          while (v245 > (__int16)v118);
          LOWORD(v118) = v249;
          unsigned int v89 = v226;
        }
      }
      else
      {
        LOWORD(v118) = v217;
      }
    }
    if (v117 <= (__int16)v118)
    {
      strcpy(v52, v25);
      if (((*(uint64_t (**)(void, void, char *, char *, uint64_t))(*(void *)(a1 + 80) + 144))(*(void *)(a1 + 64), *(void *)(a1 + 72), a5, v52, 128) & 0x80000000) == 0)
      {
        if (strcmp(v25, v52))
        {
          uint64_t MultiWordLen = oneword_Lookup((_DWORD *)a1, v228, a2, (uint64_t)v52, v25, a5, v243, v249, *a8, a6, a7, (unsigned __int16 *)&v245, 0, a13, v230);
          if ((MultiWordLen & 0x80000000) != 0) {
            goto LABEL_312;
          }
        }
      }
    }
    goto LABEL_130;
  }
  uint64_t v216 = 0;
  while (1)
  {
    *(void *)&v250[0] = 0;
    int v240 = 0;
    unsigned __int16 v119 = v213;
    if ((_WORD)v213)
    {
      unsigned __int16 v241 = v213;
    }
    else
    {
      unsigned __int16 v119 = v241;
      if (!v241)
      {
        int v213 = 0;
        goto LABEL_88;
      }
    }
    if (*((unsigned char *)v89 + v216)) {
      break;
    }
LABEL_88:
    unsigned int v89 = v226;
    if (oneword_GetMultiWord((unsigned __int16)(*(_WORD *)(a1 + 224) + v249), (uint64_t)*a2, (uint64_t)v34, *((unsigned __int8 *)v226 + v216)))
    {
      strcpy(v61, v34);
      if (((*(uint64_t (**)(void, void, char *, char *, uint64_t))(*(void *)(a1 + 80) + 144))(*(void *)(a1 + 64), *(void *)(a1 + 72), a5, v61, 256) & 0x80000000) == 0)
      {
        uint64_t MultiWordLen = oneword_Lookup((_DWORD *)a1, v228, a2, (uint64_t)v61, v34, a5, v243, v249, *a8, a6, a7, (unsigned __int16 *)&v245, 0, a13, v230);
        if ((MultiWordLen & 0x80000000) != 0) {
          goto LABEL_312;
        }
        int v125 = v213;
        if (v245 > (__int16)*a4)
        {
          unsigned int v126 = (unsigned __int16)v245;
LABEL_93:
          *a4 = v126;
          BOOL v188 = v126 > v229;
          int v127 = v221;
          if (!v188) {
            int v127 = v125;
          }
          int v221 = v127;
          goto LABEL_108;
        }
        if (*(_DWORD *)(a1 + 2000))
        {
          if (*v61)
          {
            uint64_t v128 = 0;
            int v129 = 0;
            int v130 = 0;
            do
            {
              if (v61[v128] == 95)
              {
                v61[v128] = 32;
                int v129 = 1;
              }
              uint64_t v128 = (unsigned __int16)++v130;
            }
            while (strlen(v61) > (unsigned __int16)v130);
            if (v129)
            {
              uint64_t v104 = oneword_Lookup((_DWORD *)a1, v228, a2, (uint64_t)v61, v227, a5, v243, v249, *a8, a6, a7, (unsigned __int16 *)&v245, 0, a13, v230);
              if ((v104 & 0x80000000) != 0) {
                goto LABEL_313;
              }
              if (v245 > (__int16)*a4)
              {
                unsigned int v126 = (unsigned __int16)v245;
                unsigned int v89 = v226;
                int v34 = (char *)v227;
                BOOL v43 = __src;
                int v25 = v225;
                int v125 = v213;
                goto LABEL_93;
              }
            }
            unsigned int v89 = v226;
            int v34 = (char *)v227;
            BOOL v43 = __src;
            int v25 = v225;
          }
          else
          {
            unsigned int v89 = v226;
          }
        }
      }
    }
LABEL_108:
    int v118 = v249;
    int v117 = v245;
    if (++v216 >= v202 || v249 <= v245) {
      goto LABEL_113;
    }
  }
  unsigned int v120 = 0;
  while (1)
  {
    uint64_t MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a6, a7, v119, 0, 1, &v240, (char *)&v248 + 2);
    if ((MdeSettings & 0x80000000) != 0) {
      break;
    }
    if (v240 == 3)
    {
      ++v120;
    }
    else if (v240 == 5)
    {
      __int16 v239 = 0;
      uint64_t v122 = a6;
      uint64_t v121 = a7;
      (*(void (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(*(void *)(a1 + 56) + 184))(a6, a7, v241, 9, &v239);
      if (v239)
      {
        __s2 = 0;
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a6, a7, v241, 9, &__s2, (char *)&v248 + 2);
        if (__s2 && strcmp("lid", __s2))
        {
          BOOL v43 = __src;
          int v25 = v225;
          goto LABEL_88;
        }
        uint64_t v122 = a6;
        uint64_t v121 = a7;
      }
      uint64_t v123 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, _OWORD *, char *))(*(void *)(a1 + 56)
                                                                                            + 176))(v122, v121, v241, 4, v250, (char *)&v248 + 2);
      if ((v123 & 0x80000000) != 0)
      {
        uint64_t v105 = v123;
        unsigned int v89 = v226;
        goto LABEL_315;
      }
      __int16 v124 = *(const char **)&v250[0];
      BOOL v43 = __src;
      int v25 = v225;
      if (!strcmp(*(const char **)&v250[0], "phon")
        || !strcmp(v124, "prompt")
        || !strcmp(v124, "internal-nuance-system-norm"))
      {
        *((unsigned char *)v226 + v216) = v120;
        goto LABEL_88;
      }
      int v213 = v241;
    }
    uint64_t MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a6, a7, v241, &v241);
    if ((MdeSettings & 0x80000000) != 0) {
      break;
    }
    unsigned __int16 v119 = v241;
    if (!v241 || v120 >= *((unsigned __int8 *)v226 + v216)) {
      goto LABEL_88;
    }
  }
LABEL_316:
  uint64_t v105 = MdeSettings;
  unsigned int v89 = v226;
LABEL_317:
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v228);
LABEL_318:
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v232);
LABEL_319:
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v25);
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v34);
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v43);
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v52);
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v61);
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v70);
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)__dst);
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v89);
  return v105;
}

uint64_t oneword_GetMdeSettings(uint64_t a1)
{
  v23[33] = *MEMORY[0x263EF8340];
  __c[0] = 0;
  uint64_t v2 = (unsigned char *)(a1 + 282);
  *(_DWORD *)(a1 + 282) = 0x10000000;
  *(unsigned char *)(a1 + 286) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1;
  *(void *)&__c[3] = 0;
  strcpy((char *)v23, "mdeminwrdlen_");
  __strcat_chk();
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, void *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v23, &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1]) {
    goto LABEL_3;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "mdeminwrdlen", &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1])
  {
LABEL_3:
    uint64_t v4 = **(const char ***)&__c[3];
    __int16 v5 = strchr(**(char ***)&__c[3], __c[0]);
    if (v5)
    {
      *__int16 v5 = 0;
      uint64_t v4 = **(const char ***)&__c[3];
    }
    *uint64_t v2 = atoi(v4);
  }
  strcpy((char *)v23, "mdemaxwrdlen_");
  __strcat_chk();
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, void *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v23, &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1]) {
    goto LABEL_8;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "mdemaxwrdlen", &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1])
  {
LABEL_8:
    int64_t v6 = **(const char ***)&__c[3];
    unsigned int v7 = strchr(**(char ***)&__c[3], __c[0]);
    if (v7)
    {
      *unsigned int v7 = 0;
      int64_t v6 = **(const char ***)&__c[3];
    }
    *(unsigned char *)(a1 + 283) = atoi(v6);
  }
  strcpy((char *)v23, "mdemaxnrmorph_");
  __strcat_chk();
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, void *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v23, &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1]) {
    goto LABEL_13;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "mdemaxnrmorph", &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1])
  {
LABEL_13:
    int v8 = **(const char ***)&__c[3];
    unsigned __int16 v9 = strchr(**(char ***)&__c[3], __c[0]);
    if (v9)
    {
      *unsigned __int16 v9 = 0;
      int v8 = **(const char ***)&__c[3];
    }
    *(unsigned char *)(a1 + 285) = atoi(v8);
  }
  strcpy((char *)v23, "mdefirstletter_");
  __strcat_chk();
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, void *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v23, &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1]) {
    goto LABEL_18;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "mdefirstletter", &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1])
  {
LABEL_18:
    int v10 = **(const char ***)&__c[3];
    char v11 = strchr(**(char ***)&__c[3], __c[0]);
    if (v11)
    {
      *char v11 = 0;
      int v10 = **(const char ***)&__c[3];
    }
    *(unsigned char *)(a1 + 284) = strcmp(v10, "upper") == 0;
  }
  strcpy((char *)v23, "mdetype_");
  __strcat_chk();
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, void *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v23, &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1]) {
    goto LABEL_23;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "mdetype", &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1])
  {
LABEL_23:
    uint64_t v12 = **(const char ***)&__c[3];
    unsigned int v13 = strchr(**(char ***)&__c[3], __c[0]);
    if (v13)
    {
      *unsigned int v13 = 0;
      uint64_t v12 = **(const char ***)&__c[3];
    }
    if (!strcmp(v12, "stemafx")) {
      *(unsigned char *)(a1 + 286) = 1;
    }
  }
  strcpy((char *)v23, "mdeemptyafx_");
  __strcat_chk();
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, void *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v23, &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1]) {
    goto LABEL_43;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "mdeemptyafx", &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1])
  {
LABEL_43:
    __int16 v14 = **(const char ***)&__c[3];
    unsigned __int16 v15 = strchr(**(char ***)&__c[3], __c[0]);
    if (v15)
    {
      *unsigned __int16 v15 = 0;
      __int16 v14 = **(const char ***)&__c[3];
    }
    *(_DWORD *)(a1 + 288) = strcmp(v14, "yes") == 0;
  }
  strcpy((char *)v23, "mdenondctdps_");
  __strcat_chk();
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, void *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v23, &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1])
  {
LABEL_48:
    unsigned int v16 = **(const char ***)&__c[3];
    uint64_t v17 = strchr(**(char ***)&__c[3], __c[0]);
    if (v17)
    {
      char *v17 = 0;
      unsigned int v16 = **(const char ***)&__c[3];
    }
    *(_DWORD *)(a1 + 292) = strcmp(v16, "yes") == 0;
    goto LABEL_51;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "mdenondctdps", &__c[3], &__c[1], __c);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (*(_WORD *)&__c[1]) {
    goto LABEL_48;
  }
LABEL_51:
  v23[0] = 0x5F73706465646DLL;
  __strcat_chk();
  *(_WORD *)&__c[1] = -1;
  uint64_t v18 = (*(uint64_t (**)(void, void, const char *, void *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", v23, &__c[3], &__c[1], __c);
  if ((v18 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1]
      || (*(_WORD *)&__c[1] = -1,
          uint64_t v18 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 80) + 96))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fecfg", "mdedps", &__c[3], &__c[1], __c), (v18 & 0x80000000) == 0)&& *(_WORD *)&__c[1])
    {
      uint64_t v19 = **(const char ***)&__c[3];
      uint64_t v20 = strchr(**(char ***)&__c[3], __c[0]);
      if (v20)
      {
        *uint64_t v20 = 0;
        uint64_t v19 = **(const char ***)&__c[3];
      }
      *(_DWORD *)(a1 + 296) = strcmp(v19, "yes") == 0;
    }
  }
  return v18;
}

uint64_t oneword_read_LD_W_INPUTSPACETAG(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6)
{
  if (a4 != 6) {
    return 0;
  }
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  __int16 v15 = 0;
  *a6 = 0;
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)(a1 + 56) + 184))(a2, a3, a5, 19, &v15);
  uint64_t result = 0;
  if ((v13 & 0x80000000) == 0 && v15 == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, __int16 *))(*(void *)(a1 + 56)
  }
                                                                                              + 176))(a2, a3, a5, 19, a6, &v15);
  return result;
}

uint64_t oneword_GetWord(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  while (1)
  {
    unsigned int v4 = *(unsigned __int8 *)(a2 + a1);
    BOOL v5 = v4 > 0x20 || ((1 << v4) & 0x100002601) == 0;
    if (!v5 || v4 == 95) {
      break;
    }
    ++a1;
    *(unsigned char *)(a3 + v3++) = v4;
    if (v3 == 127)
    {
      uint64_t result = 0;
      goto LABEL_11;
    }
  }
  uint64_t result = 1;
LABEL_11:
  *(unsigned char *)(a3 + (unsigned __int16)v3) = 0;
  return result;
}

uint64_t oneword_GetMultiWordLen(void *a1, uint64_t a2, uint64_t a3, _OWORD *a4, unsigned char *a5)
{
  uint64_t v14 = 0;
  unsigned __int16 v13 = 0;
  *a4 = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, const char *, uint64_t, uint64_t *, unsigned __int16 *))(a1[10] + 120))(a1[8], a1[9], a2, 255, "femwg2p", a3, &v14, &v13);
  if ((v7 & 0x80000000) == 0)
  {
    *a5 = 0;
    if (v13)
    {
      for (unint64_t i = 0; i < v13; ++i)
      {
        unsigned int v9 = LH_atou(*(const char **)(v14 + 8 * i));
        if (v9 <= 0x3F)
        {
          uint64_t v10 = *a5;
          *a5 = v10 + 1;
          *((unsigned char *)a4 + v10) = v9;
        }
      }
      unint64_t v11 = *a5;
    }
    else
    {
      unint64_t v11 = 0;
    }
    ssft_qsort((uint64_t)a4, v11, 1, (uint64_t (*)(unint64_t, unint64_t))compare_0);
  }
  return v7;
}

BOOL oneword_GetMultiWord(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = 0;
  int v5 = 0;
  unsigned __int16 v6 = 0;
  unsigned int v7 = *(unsigned __int8 *)(a2 + a1);
  while (v7)
  {
    *(unsigned char *)(a3 + v4) = v7;
    if (v4 == 255) {
      return 0;
    }
    LOWORD(a1) = a1 + 1;
    uint64_t v8 = (unsigned __int16)a1;
    unsigned int v7 = *(unsigned __int8 *)(a2 + (unsigned __int16)a1);
    BOOL v9 = v7 > 0x20 || ((1 << v7) & 0x100002600) == 0;
    if (!v9 || v7 == 95)
    {
      unsigned int v10 = *(unsigned __int8 *)((unsigned __int16)a1 + a2 - 1);
      int v11 = v10 == 95 ? v5 : v5 + 1;
      BOOL v12 = v10 > 0x20;
      uint64_t v13 = (1 << v10) & 0x100002600;
      if (v12 || v13 == 0) {
        int v5 = v11;
      }
    }
    ++v4;
    ++v6;
    if (a4 <= v5) {
      goto LABEL_24;
    }
  }
  uint64_t v8 = (unsigned __int16)a1;
  unsigned __int16 v6 = v4;
LABEL_24:
  *(unsigned char *)(a3 + v6) = 0;
  if (!*(unsigned char *)(a2 + v8))
  {
    unsigned int v16 = *(unsigned __int8 *)(v8 + a2 - 1);
    if ((v16 > 0x20 || ((1 << v16) & 0x100002600) == 0) && v16 != 95) {
      LOBYTE(v5) = v5 + 1;
    }
  }
  return a4 == v5;
}

uint64_t oneword_Lookup(_DWORD *a1, char *a2, void *a3, uint64_t a4, const char *a5, char *a6, const char *a7, unsigned __int16 a8, unsigned __int16 a9, uint64_t a10, uint64_t a11, unsigned __int16 *a12, int a13, int a14, int a15)
{
  unsigned __int16 v178 = a8;
  uint64_t v177 = 0;
  unsigned __int16 v176 = 0;
  unsigned __int8 v175 = 0;
  int v174 = 4;
  __int16 v173 = 0;
  uint64_t v172 = 0;
  __int16 v171 = 1;
  int v170 = 0;
  if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"sysdctlookup", &v172) & 0x80000000) == 0
    && !strcmp(v172, "no"))
  {
    return 0;
  }
  int v167 = a13;
  if (a13)
  {
    if (a1[69]) {
      return 0;
    }
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s", v22, v23, v24, a4);
  if (a1[306])
  {
    strcpy(__s1, "g2p");
    __strcat_chk();
    uint64_t v26 = (*(uint64_t (**)(void, void, char *, uint64_t, uint64_t *, unsigned __int16 *, unsigned __int8 *, int *))(*((void *)a1 + 10) + 232))(*((void *)a1 + 8), *((void *)a1 + 9), __s1, a4, &v177, &v176, &v175, &v170);
  }
  else
  {
    uint64_t v26 = (*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t *, unsigned __int16 *, unsigned __int8 *, void, int *))(*((void *)a1 + 10) + 240))(*((void *)a1 + 8), *((void *)a1 + 9), "g2p", a4, &v177, &v176, &v175, *((unsigned __int8 *)a1 + 556), &v170);
  }
  uint64_t v25 = v26;
  if ((v26 & 0x80000000) == 0)
  {
    uint64_t v27 = "ADDONDCT";
    if (!v170) {
      uint64_t v27 = "OTHER";
    }
    uint64_t v151 = v27;
    if (v176)
    {
      uint64_t v152 = a5;
      uint64_t v153 = a7;
      BOOL v150 = a3;
      uint64_t v28 = 0;
      int v155 = 0;
      int __dst = a2 + 10000;
      uint64_t v165 = a10;
      uint64_t v29 = a2 + 14999;
      unsigned __int16 v164 = a12;
      __s2 = (char *)(a1 + 68);
      uint64_t v149 = a2 + 5000;
      int v158 = a15;
      int v145 = a14;
      if (v170) {
        int v30 = 9;
      }
      else {
        int v30 = 6;
      }
      unsigned int v148 = v30;
      __int16 v157 = a6;
      uint64_t v159 = a11;
      int v147 = a2 + 14999;
      while (1)
      {
        if (v167 && a1[235] && (__int16)v178 < (__int16)*v164) {
          goto LABEL_169;
        }
        uint64_t v31 = strncpy(__dst, *(const char **)(v177 + 8 * v28), 0x1387uLL);
        *uint64_t v29 = 0;
        uint64_t v32 = strchr(v31, v175);
        if (!v32) {
          break;
        }
        *uint64_t v32 = 0;
        __int16 v160 = v32 + 1;
        uint64_t v36 = strchr(v32 + 1, v175);
        uint64_t v37 = v36;
        if (!v36) {
          goto LABEL_30;
        }
        *uint64_t v36 = 0;
        uint64_t v37 = v36 + 1;
        uint64_t v38 = strchr(v36 + 1, v175);
        if (!v38) {
          goto LABEL_30;
        }
        *uint64_t v38 = 0;
        unsigned int __s = v38 + 1;
        uint64_t v39 = strchr(v38 + 1, v175);
        if (!v39) {
          goto LABEL_31;
        }
        *uint64_t v39 = 0;
        int v161 = v39 + 1;
        uint64_t v40 = strchr(v39 + 1, v175);
        uint64_t v41 = v40;
        if (!v40) {
          goto LABEL_32;
        }
        char *v40 = 0;
        uint64_t v41 = v40 + 1;
        uint64_t v42 = strchr(v40 + 1, v175);
        BOOL v43 = v42;
        if (!v42) {
          goto LABEL_33;
        }
        *uint64_t v42 = 0;
        BOOL v43 = v42 + 1;
        uint64_t v44 = strchr(v42 + 1, v175);
        if (!v44) {
          goto LABEL_33;
        }
        *uint64_t v44 = 0;
        uint64_t v168 = v44 + 1;
        uint64_t v45 = strchr(v44 + 1, v175);
        if (v45) {
          *uint64_t v45 = 0;
        }
LABEL_34:
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Validating %s", v33, v34, v35, (uint64_t)__dst);
        if (!strcmp(a6, "name"))
        {
          if (v37 && *v37)
          {
            if ((uint64_t v49 = strstr(v37, a6)) == 0
              || (uint64_t v50 = v49, v51 = strlen(a6), v50 != v37) && *(v50 - 1) != 44
              || v50[v51] && v50[v51] != 44)
            {
LABEL_65:
              uint64_t v52 = *(void *)(*(void *)a1 + 32);
              uint64_t v53 = "G2P Domain validation not OK";
              goto LABEL_86;
            }
          }
        }
        else if (v37 && *v37 && !strstr(v37, a6))
        {
          goto LABEL_65;
        }
        if (v158 && v43 && strcmp(v43, "0"))
        {
          uint64_t v52 = *(void *)(*(void *)a1 + 32);
          uint64_t v53 = "MDE validation not OK";
LABEL_86:
          log_OutText(v52, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v53, v46, v47, v48, v143);
          goto LABEL_164;
        }
        if (v168 && a1[301])
        {
          uint64_t v54 = v159;
          uint64_t v55 = v165;
          if (strchr(v168, 33))
          {
            v168[3] = 0;
            if (!v167) {
              goto LABEL_93;
            }
          }
          else
          {
            uint64_t v60 = strstr(a6, v168);
            unsigned int v61 = v60;
            if (v145)
            {
              if (!v167)
              {
                if (!v60 || (size_t v62 = strlen(v168)) != 0 && v61[v62])
                {
                  if (LH_stricmp(v168, *((char **)a1 + 151)))
                  {
                    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Language %s validation not OK", v63, v64, v65, (uint64_t)v168);
                    goto LABEL_164;
                  }
                }
                goto LABEL_93;
              }
            }
            else if (!v167)
            {
              if (!v60 || (size_t v72 = strlen(v168)) != 0 && v61[v72])
              {
                uint64_t v73 = strstr(*((char **)a1 + 152), a6);
                if (LH_stricmp(v168, *((char **)a1 + 151)) || !v73 || v73[strlen(a6)] != 124)
                {
                  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"User lang lookup: G2P Language %s validation not OK", v74, v75, v76, (uint64_t)v168);
                  goto LABEL_164;
                }
              }
LABEL_93:
              __int16 v156 = v41;
              uint64_t v56 = __dst;
              goto LABEL_94;
            }
          }
          uint64_t v68 = strstr(a6, v168);
          if (!v68 || (uint64_t v69 = v68, (v70 = strlen(v168)) != 0) && v69[v70])
          {
            uint64_t v71 = strstr(*((char **)a1 + 152), a6);
            if (LH_stricmp(v168, *((char **)a1 + 151)) || !v71 || v71[strlen(a6)] != 124)
            {
              uint64_t v52 = *(void *)(*(void *)a1 + 32);
              uint64_t v143 = (uint64_t)v168;
              uint64_t v53 = "Token lookup: G2P Language %s validation not OK";
              goto LABEL_86;
            }
          }
        }
        else
        {
          uint64_t v54 = v159;
          uint64_t v55 = v165;
          if (!v167) {
            goto LABEL_93;
          }
        }
        if (!a1[235]) {
          goto LABEL_93;
        }
        uint64_t v56 = __dst;
        if (v168 && *v168) {
          strlen(v168);
        }
        __strcpy_chk();
        if (*__s2 && strncmp(__s1, __s2, 2uLL) || strstr(v157, "latin") && !strcmp(__s1, *((const char **)a1 + 151)))
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Token lookup: G2P Language %s validation not OK", v57, v58, v59, (uint64_t)v168);
          if (*((unsigned char *)a1 + 272))
          {
            int v66 = strncmp(__s1, __s2, 2uLL);
            int v67 = v155;
            if (v66) {
              int v67 = 1;
            }
            int v155 = v67;
          }
          a6 = v157;
          goto LABEL_164;
        }
        __int16 v156 = v41;
        __strcpy_chk();
        int v155 = 0;
LABEL_94:
        *unsigned __int16 v164 = v178 + strlen(v152);
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*((void *)a1 + 7) + 88))(v55, v54, a9, &a9);
        if ((v77 & 0x80000000) != 0) {
          return v77;
        }
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(*((void *)a1 + 7) + 160))(v55, v54, a9, 0, 1, &v174, &v173);
        if ((v77 & 0x80000000) != 0) {
          return v77;
        }
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*((void *)a1 + 7) + 160))(v55, v54, a9, 1, 1, &v178, &v173);
        if ((v77 & 0x80000000) != 0) {
          return v77;
        }
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*((void *)a1 + 7) + 160))(v55, v54, a9, 2, 1, v164, &v173);
        if ((v77 & 0x80000000) != 0) {
          return v77;
        }
        if (v153)
        {
          __int16 v78 = strlen(v153);
          uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(*((void *)a1 + 7) + 160))(v55, v54, a9, 19, (unsigned __int16)(v78 + 1), v153, &v173);
          uint64_t v56 = __dst;
          if ((v77 & 0x80000000) != 0) {
            return v77;
          }
        }
        uint64_t v79 = strchr(v56, 18);
        uint64_t v80 = v79;
        if (!v79) {
          uint64_t v80 = &v56[strlen(v56)];
        }
        uint64_t v81 = *((__int16 *)a1 + 112);
        uint64_t v82 = (char *)(*v150 + v178 + v81);
        uint64_t v83 = *v150 + *v164 + v81;
        int v146 = a1[569];
        uint64_t v84 = *(void *)(*(void *)a1 + 32);
        v179[0] = 0;
        uint64_t v85 = oneword_CountPhoneticWords(v56, v80);
        log_OutText(v84, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Number of orthographic words: %d", v86, v87, v88, 0);
        unsigned int v89 = oneword_CountOrthographicWords(v82, v83, 0x23u, 0x23u);
        log_OutText(v84, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Number of phonetic words:     %d", v90, v91, v92, v85);
        if (!v85)
        {
          uint64_t v100 = v84;
          uint64_t v101 = "No phonetic words found: returning";
LABEL_108:
          log_OutText(v100, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v101, v93, v94, v95, v144);
          goto LABEL_118;
        }
        if (!v89)
        {
          uint64_t v100 = v84;
          uint64_t v101 = "No orthographic words found: returning";
          goto LABEL_108;
        }
        if (v85 == 1)
        {
          v179[0] = v89 - 1;
          oneword_ReplaceCharactersInOrthography(v82, v83, 0x21u, 45, v179);
          uint64_t v96 = v82;
          int v97 = v83;
          unsigned int v98 = 5;
          char v99 = 45;
LABEL_117:
          oneword_ReplaceCharactersInOrthography(v96, v97, v98, v99, v179);
          goto LABEL_118;
        }
        if (utf8_BelongsToSet(0x24u, v82, 0, (int)v83 - (int)v82))
        {
          unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v82, (int)v83 - (int)v82);
          if (PreviousUtf8Offset)
          {
            if (utf8_BelongsToSet(0x24u, v82, PreviousUtf8Offset, (int)v83 - (int)v82))
            {
              log_OutText(v84, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Orthography starts and ends with underscore or hyphen: no replacement made", v103, v104, v105, v144);
              uint64_t v56 = __dst;
              goto LABEL_118;
            }
          }
        }
        if (v146)
        {
          *(_WORD *)__s1 = v83 - (_WORD)v82;
          oneword_ReplaceCharactersInOrthography(v82, v83, 5u, 95, __s1);
        }
        uint64_t v56 = __dst;
        if (v89 < v85)
        {
          v179[0] = v85 - v89;
          uint64_t v96 = v82;
          int v97 = v83;
          unsigned int v98 = 34;
          char v99 = 95;
          goto LABEL_117;
        }
LABEL_118:
        unsigned int v106 = oneword_CountOrthographicWords(v82, v83, 0x23u, 0x23u);
        log_OutText(v84, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Number of orthographic words after adjustment: %d", v107, v108, v109, v106);
        log_OutText(v84, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Number of phonetic words after adjustment:     %d", v110, v111, v112, v85);
        a6 = v157;
        if (v79)
        {
          *uint64_t v79 = 0;
          uint64_t v113 = v79 + 1;
          if (a1[548])
          {
            uint64_t v114 = (char *)v113;
            uint64_t v113 = v149;
            uint64_t v77 = mosynt_LHPlusMapping(*((void *)a1 + 6), *((uint64_t **)a1 + 275), *((void *)a1 + 280), v114, v149, 0x1388u);
            if ((v77 & 0x80000000) != 0) {
              return v77;
            }
          }
          __int16 v115 = strlen(v113);
          uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(*((void *)a1 + 7) + 160))(v165, v159, a9, 11, (unsigned __int16)(v115 + 1), v113, &v173);
          uint64_t v56 = __dst;
          if ((v77 & 0x80000000) != 0) {
            return v77;
          }
        }
        if (a1[548])
        {
          __int16 v116 = v56;
          uint64_t v56 = v149;
          uint64_t v77 = mosynt_LHPlusMapping(*((void *)a1 + 6), *((uint64_t **)a1 + 275), *((void *)a1 + 280), v116, v149, 0x1388u);
          if ((v77 & 0x80000000) != 0) {
            return v77;
          }
        }
        uint64_t v117 = (unsigned __int16)(strlen(v56) + 1);
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(*((void *)a1 + 7) + 160))(v165, v159, a9, 3, v117, v56, &v173);
        if ((v77 & 0x80000000) != 0) {
          return v77;
        }
        if (__s)
        {
          if (*__s)
          {
            uint64_t v118 = (unsigned __int16)(strlen(__s) + 1);
            uint64_t v119 = v165;
            uint64_t v120 = v159;
            uint64_t v121 = a9;
            uint64_t v122 = __s;
          }
          else
          {
            uint64_t v119 = v165;
            uint64_t v120 = v159;
            uint64_t v121 = a9;
            uint64_t v118 = 2;
            uint64_t v122 = "*";
          }
          uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(*((void *)a1 + 7) + 160))(v119, v120, v121, 5, v118, v122, &v173);
          if ((v77 & 0x80000000) != 0) {
            return v77;
          }
        }
        if (v161)
        {
          if (*v161)
          {
            uint64_t v123 = (unsigned __int16)(strlen(v161) + 1);
            uint64_t v124 = v165;
            uint64_t v125 = v159;
            uint64_t v126 = a9;
            int v127 = v161;
          }
          else
          {
            uint64_t v124 = v165;
            uint64_t v125 = v159;
            uint64_t v126 = a9;
            uint64_t v123 = 2;
            int v127 = "*";
          }
          uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(*((void *)a1 + 7) + 160))(v124, v125, v126, 6, v123, v127, &v173);
          if ((v77 & 0x80000000) != 0) {
            return v77;
          }
        }
        if (v160)
        {
          __int16 v128 = strlen(v160);
          uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(*((void *)a1 + 7) + 160))(v165, v159, a9, 4, (unsigned __int16)(v128 + 1), v160, &v173);
          if ((v77 & 0x80000000) != 0) {
            return v77;
          }
        }
        if (v156) {
          __int16 v129 = atoi(v156);
        }
        else {
          __int16 v129 = 1;
        }
        int v130 = (int)v168;
        __int16 v171 = v129;
        if (v168)
        {
          __sa = strstr(v157, v168);
          int v131 = *v168;
          __int16 v132 = strlen(v168);
          uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(*((void *)a1 + 7) + 160))(v165, v159, a9, 9, (unsigned __int16)(v132 + 1), v168, &v173);
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Language tag is %s", v133, v134, v135, (uint64_t)v168);
          uint64_t v136 = (char *)*((void *)a1 + 152);
          if (v136) {
            __int16 v137 = strstr(v136, v157);
          }
          else {
            __int16 v137 = 0;
          }
          int v130 = v131;
          if (!a1[301])
          {
            a6 = v157;
            if ((v25 & 0x80000000) != 0) {
              return v25;
            }
            goto LABEL_156;
          }
          a6 = v157;
          if (__sa && ((size_t v138 = strlen(v168)) == 0 || !__sa[v138])
            || !LH_stricmp(v168, *((char **)a1 + 151)) && v137 && v137[strlen(v157)] == 124)
          {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Increasing priority to %d", v139, v140, v141, (unsigned __int16)++v171);
          }
        }
        else
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(*((void *)a1 + 7) + 160))(v165, v159, a9, 9, 1, &byte_20D5A22AE, &v173);
        }
        if ((v25 & 0x80000000) != 0) {
          return v25;
        }
LABEL_156:
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*((void *)a1 + 7) + 160))(v165, v159, a9, 7, 1, &v171, &v173);
        if ((v77 & 0x80000000) != 0) {
          return v77;
        }
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(*((void *)a1 + 7) + 160))(v165, v159, a9, 21, v148, v151, &v173);
        if ((v25 & 0x80000000) != 0) {
          return v25;
        }
        if (v176 == 1 && v130) {
          a1[233] = v130 == 101;
        }
        uint64_t v29 = v147;
LABEL_164:
        if (++v28 >= (unint64_t)v176) {
          goto LABEL_169;
        }
      }
      __int16 v160 = 0;
      uint64_t v37 = 0;
LABEL_30:
      unsigned int __s = 0;
LABEL_31:
      int v161 = 0;
      uint64_t v41 = 0;
LABEL_32:
      BOOL v43 = 0;
LABEL_33:
      uint64_t v168 = 0;
      goto LABEL_34;
    }
    int v155 = 0;
LABEL_169:
    a1[69] = v155;
  }
  return v25;
}

uint64_t oneword_isInputBetweenPOIMrk(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (!a2) {
    return 0;
  }
  unsigned int v6 = 0;
  BOOL v7 = 0;
  uint64_t v8 = a2;
  for (unint64_t i = (unsigned __int16 *)(a1 + 12); ; i += 16)
  {
    int v10 = *((_DWORD *)i - 3);
    if (v10 == 55)
    {
      if (!strstr(*(char **)(i + 6), "POI"))
      {
        BOOL v7 = v7;
        goto LABEL_14;
      }
      unsigned int v6 = *i;
LABEL_12:
      BOOL v7 = 1;
      goto LABEL_14;
    }
    if (v7)
    {
      if (v10 != 56 || !strstr(*(char **)(i + 6), "POI")) {
        goto LABEL_12;
      }
      if (v6 <= a3 && *i >= a4) {
        break;
      }
    }
    BOOL v7 = 0;
LABEL_14:
    if (!--v8) {
      return 0;
    }
  }
  return 1;
}

uint64_t oneword_ProcessNTokens(uint64_t a1, uint64_t a2, const char **a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _WORD *a10, unsigned __int16 *a11, __int16 a12, int a13, int a14, int a15)
{
  uint64_t v301 = *MEMORY[0x263EF8340];
  unsigned __int16 v296 = a7;
  unsigned __int16 v295 = 0;
  unsigned __int16 v287 = 1;
  char v286 = 32;
  int v285 = 0;
  uint64_t v23 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 2248);
  if (!v23)
  {
    uint64_t DepesLayersForWordAndPOS = 2310021130;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v24, v25, v26, v27, v239);
    return DepesLayersForWordAndPOS;
  }
  uint64_t v28 = v23;
  int v294 = 0;
  int v293 = 0;
  int v292 = 0;
  int v291 = 0;
  __src = 0;
  uint64_t v289 = 0;
  unsigned __int16 v288 = 0;
  int v284 = 0;
  int v283 = 0;
  v298[0] = 0;
  strcpy(__s, "acronym_detection");
  unsigned __int16 v275 = strlen(__s);
  uint64_t v277 = v28;
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    uint64_t v29 = strchr(a4, 95);
    if (v29) {
      int v30 = v29 + 1;
    }
    else {
      int v30 = a4;
    }
    uint64_t v274 = v30;
    int v31 = *v30;
  }
  else
  {
    uint64_t v274 = 0;
    int v31 = 32;
  }
  memset(v299, 0, sizeof(v299));
  uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, a7, 1, 1, (char *)&v291 + 2, (char *)&v293 + 2);
  if ((appended & 0x80000000) != 0) {
    goto LABEL_452;
  }
  HIWORD(v292) = HIWORD(v291);
  unsigned __int16 v34 = v296;
  if (v296)
  {
    do
    {
      unsigned __int16 v295 = v34;
      uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 136))(a5, a6, v34, &v296);
      if ((appended & 0x80000000) != 0) {
        goto LABEL_452;
      }
      if (!v296) {
        break;
      }
      uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
      if ((appended & 0x80000000) != 0) {
        goto LABEL_452;
      }
      unsigned __int16 v34 = v296;
    }
    while (HIWORD(v292) == HIWORD(v291) && v296 != 0);
  }
  uint64_t v36 = *(unsigned char **)(a1 + 240);
  unsigned __int16 v296 = v295;
  *uint64_t v36 = 0;
  **(unsigned char **)(a1 + 248) = 0;
  **(unsigned char **)(a1 + 256) = 0;
  **(unsigned char **)(a1 + 264) = 0;
  uint64_t v272 = (const char **)(a1 + 240);
  uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, a8, 2, 1, &v291, (char *)&v293 + 2);
  if ((appended & 0x80000000) != 0) {
    goto LABEL_452;
  }
  uint64_t v271 = a2;
  int v37 = (unsigned __int16)(v291 - HIWORD(v291));
  uint64_t v38 = (4 * v37 + 200);
  uint64_t v269 = (uint64_t *)(a1 + 192);
  if (v38 > *(unsigned __int16 *)(a1 + 192))
  {
    uint64_t v39 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 160), (4 * v37 + 200));
    if (!v39) {
      goto LABEL_398;
    }
    *(void *)(a1 + 160) = v39;
    *(void *)(a1 + 192) = v38;
  }
  uint64_t v268 = (uint64_t *)(a1 + 200);
  if (v38 > *(unsigned __int16 *)(a1 + 200))
  {
    uint64_t v44 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 168), (4 * v37 + 200));
    if (!v44) {
      goto LABEL_398;
    }
    *(void *)(a1 + 168) = v44;
    *(void *)(a1 + 200) = v38;
  }
  uint64_t v266 = (uint64_t *)(a1 + 208);
  if (v38 > *(unsigned __int16 *)(a1 + 208))
  {
    uint64_t v45 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 176), (4 * v37 + 200));
    if (!v45) {
      goto LABEL_398;
    }
    *(void *)(a1 + 176) = v45;
    *(void *)(a1 + 208) = v38;
  }
  int v251 = v31;
  uint64_t v267 = (const char **)(a1 + 160);
  **(unsigned char **)(a1 + 160) = 0;
  unsigned __int16 v295 = v296;
  unsigned __int16 v46 = HIWORD(v291);
  int v47 = (unsigned __int16)v291;
  __s1 = a4;
  unsigned int v273 = a8;
  if (HIWORD(v291) >= (unsigned __int16)v291)
  {
    unsigned __int16 v50 = 0;
    int v255 = 0;
  }
  else
  {
    int v48 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), &(*a3)[*(__int16 *)(a1 + 224) + HIWORD(v291)]);
    unsigned __int16 v46 = HIWORD(v291);
    int v49 = 0;
    if (v48)
    {
      while (1)
      {
        unsigned __int16 v50 = v49 + utf8_determineUTF8CharLength((*a3)[*(__int16 *)(a1 + 224) + (uint64_t)(v49 + v46)]);
        unsigned __int16 v46 = HIWORD(v291);
        int v49 = v50;
        unsigned int v51 = HIWORD(v291) + v50;
        int v47 = (unsigned __int16)v291;
        if (v51 >= (unsigned __int16)v291) {
          break;
        }
        int v52 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), &(*a3)[*(__int16 *)(a1 + 224) + (unint64_t)v51]);
        unsigned __int16 v46 = HIWORD(v291);
        if (!v52) {
          goto LABEL_36;
        }
      }
      int v255 = v50;
    }
    else
    {
      unsigned __int16 v50 = 0;
LABEL_36:
      int v255 = v49;
      int v47 = (unsigned __int16)v291;
    }
  }
  unsigned __int16 v53 = v46 + v50;
  HIWORD(v291) = v46 + v50;
  int v54 = (unsigned __int16)(v46 + v50);
  int v55 = (__int16)v47;
  if ((__int16)v47 > (int)v53)
  {
    while ((*a3)[*(__int16 *)(a1 + 224) - 1 + (unint64_t)(unsigned __int16)v47] < -64)
    {
      int v55 = (__int16)--v47;
      if ((__int16)v47 <= v54) {
        goto LABEL_43;
      }
    }
    int v55 = (__int16)v47;
  }
LABEL_43:
  unsigned __int16 v252 = (_WORD *)(v271 + 20000);
  char v254 = (unsigned __int8 *)(v271 + 15000);
  int v253 = (const char **)(a1 + 256);
  if (v55 > v54)
  {
    int v56 = v47;
    do
    {
      int v57 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), &(*a3)[*(__int16 *)(a1 + 224) - 1 + (unint64_t)(unsigned __int16)v56]);
      unsigned __int16 v53 = HIWORD(v291);
      if (!v57) {
        break;
      }
      LOWORD(v291) = --v56;
      int v58 = (__int16)v56;
      if ((__int16)v56 > (int)HIWORD(v291))
      {
        while ((*a3)[*(__int16 *)(a1 + 224) - 1 + (unint64_t)(unsigned __int16)v56] < -64)
        {
          int v58 = (__int16)--v56;
          if ((__int16)v56 <= (int)HIWORD(v291)) {
            goto LABEL_51;
          }
        }
        int v58 = (__int16)v56;
      }
LABEL_51:
      ;
    }
    while (v58 > HIWORD(v291));
  }
  unsigned __int8 v263 = 0;
  int v59 = 0;
  int v260 = v37 + 100;
  unsigned int v259 = (uint64_t *)(a1 + 168);
  char v258 = (uint64_t *)(a1 + 176);
  int v262 = (unsigned __int16 *)(a1 + 280);
  unsigned __int16 v60 = 1;
  int v61 = 1;
LABEL_53:
  int v62 = v295;
  while (1)
  {
    if (v62 == v273)
    {
      uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v273, 0, 1, &v294, (char *)&v293 + 2);
      if ((appended & 0x80000000) != 0) {
        goto LABEL_452;
      }
      if (v294 | v61)
      {
        uint64_t v77 = appended;
      }
      else
      {
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v295, 1, 1, (char *)&v292 + 2, (char *)&v293 + 2);
        if ((v77 & 0x80000000) != 0)
        {
          uint64_t DepesLayersForWordAndPOS = v77;
          goto LABEL_453;
        }
        uint64_t DepesLayersForWordAndPOS = 2310021130;
        uint64_t v90 = HIWORD(v292) - v53;
        if ((int)v90 >= 1
          && !dynamic_strncat(v267, &(*a3)[v53 + *(__int16 *)(a1 + 224)], v90, v269, *(uint64_t **)(*(void *)a1 + 8))
          || *(_DWORD *)(a1 + 292) && !dynamic_strcat(v267, "+", (size_t *)v269, *(uint64_t **)(*(void *)a1 + 8)))
        {
          goto LABEL_453;
        }
        unsigned __int16 v53 = HIWORD(v292);
      }
      uint64_t v78 = (unsigned __int16)v291 - v53;
      if ((int)v78 >= 1
        && !dynamic_strncat(v267, &(*a3)[v53 + *(__int16 *)(a1 + 224)], v78, v269, *(uint64_t **)(*(void *)a1 + 8)))
      {
        uint64_t DepesLayersForWordAndPOS = 2310021130;
        goto LABEL_453;
      }
      if (!a13)
      {
        unsigned int v250 = a3;
        uint64_t v91 = *v267;
        size_t v92 = strlen(*v267);
        uint64_t v94 = (uint64_t *)(a1 + 192);
        uint64_t v93 = __s1;
        if (v92 - 128 >= 0xFFFFFFFFFFFFFF7FLL)
        {
          uint64_t v95 = *(char **)(a1 + 232);
        }
        else
        {
          uint64_t v95 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 232), (v92 + 1));
          if (!v95) {
            goto LABEL_398;
          }
          *(void *)(a1 + 232) = v95;
          uint64_t v91 = *(const char **)(a1 + 160);
        }
        strcpy(v95, v91);
        int v264 = 0;
        int v98 = strlen(*v267) + 1;
LABEL_156:
        if (!(_WORD)v98)
        {
          uint64_t v243 = 0;
          uint64_t v249 = 0;
          int v247 = 0;
          uint64_t DepesLayersForWordAndPOS = v77;
LABEL_401:
          if (v286 == 32) {
            uint64_t v227 = 0;
          }
          else {
            uint64_t v227 = v286;
          }
          char v286 = v227;
          *(unsigned char *)(a1 + 272) = 0;
          *(_DWORD *)(a1 + 276) = 0;
          if (*(_DWORD *)(a1 + 2172) == 1 && (*(_DWORD *)(a1 + 2068) == 1 || !v249))
          {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s", v96, v227, v97, (uint64_t)"skipping crosstoken grammar");
            goto LABEL_453;
          }
          if (v247)
          {
            *(unsigned char *)(*(void *)(a1 + 248) + 1) = 0;
            *((unsigned char *)*v253 + 1) = 0;
          }
          else
          {
            uint64_t appended = oneword_crosstoken(*(void *)a1, *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(_DWORD *)(a1 + 560), v93, v227, v251, v274, v298, *(const char **)(a1 + 2176), (uint64_t *)v267, v259, v258, (uint64_t *)(a1 + 184), v94, v268, v266, (uint64_t *)(a1 + 216),
                         v272,
                         (const char **)(a1 + 248),
                         v253,
                         (const char **)(a1 + 264));
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56)
                                                                                               + 88))(a5, a6, v296, &v295);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
          }
          uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v296, 0, 1, &v294, (char *)&v293 + 2);
          if ((appended & 0x80000000) == 0)
          {
            uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v296, 1, 1, (char *)&v292 + 2, (char *)&v293 + 2);
            if ((appended & 0x80000000) == 0)
            {
              if (v243 && v294 != 4) {
                HIWORD(v292) = HIWORD(v292) - WORD2(v243) + *(_WORD *)(a1 + 224);
              }
              uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v295, 1, 1, (char *)&v292 + 2, &v293);
              if ((appended & 0x80000000) == 0)
              {
                int v294 = 9;
                uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v295, 0, 1, &v294, &v293);
                if ((appended & 0x80000000) == 0)
                {
                  uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v273, 2, 1, &v292, (char *)&v293 + 2);
                  if ((appended & 0x80000000) == 0)
                  {
                    __int16 v228 = v292;
                    if (v243) {
                      __int16 v228 = v292 - WORD2(v243) + *(_WORD *)(a1 + 224);
                    }
                    LOWORD(v292) = v228 + WORD2(v243);
                    uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v295, 2, 1, &v292, &v293);
                    if ((appended & 0x80000000) == 0)
                    {
                      __int16 v229 = strlen(*(const char **)(a1 + 240));
                      uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v295, 3, (unsigned __int16)(v229 + 1), *(void *)(a1 + 240), &v293);
                      if ((appended & 0x80000000) == 0)
                      {
                        __int16 v230 = strlen(*(const char **)(a1 + 248));
                        uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v295, 5, (unsigned __int16)(v230 + 1), *(void *)(a1 + 248), &v293);
                        if ((appended & 0x80000000) == 0)
                        {
                          __int16 v231 = strlen(*(const char **)(a1 + 256));
                          uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v295, 6, (unsigned __int16)(v231 + 1), *(void *)(a1 + 256), &v293);
                          if ((appended & 0x80000000) == 0)
                          {
                            if (a15 && !*(_DWORD *)(a1 + 2068) && v287 >= 2u) {
                              unsigned __int16 v287 = ~v287;
                            }
                            uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v295, 7, 1, &v287, &v293);
                            if ((appended & 0x80000000) == 0)
                            {
                              if (*(_DWORD *)(a1 + 1204))
                              {
                                if (*(_DWORD *)v298 == 1836216174 && *(_DWORD *)&v298[3] == 7102829)
                                {
                                  __strcpy_chk();
                                  for (uint64_t i = 0; i != 3; ++i)
                                    v298[i] = ssft_tolower(v298[i]);
                                }
                              }
                              __int16 v234 = strlen(v298);
                              uint64_t DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v295, 9, (unsigned __int16)(v234 + 1), v298, &v293);
                              if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
                                goto LABEL_453;
                              }
                              if (v249)
                              {
                                uint64_t v235 = v299;
                                do
                                {
                                  unsigned int v237 = *v235++;
                                  uint64_t v236 = v237;
                                  if (*v262 == v237)
                                  {
                                    uint64_t DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 120))(a5, a6);
                                    if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
                                      goto LABEL_453;
                                    }
                                  }
                                  if (!a14 || a14 == 1 && (strstr(__s1, "latin") || !*(_DWORD *)(a1 + 2068)))
                                  {
                                    uint64_t DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 192))(a5, a6, v236);
                                    if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
                                      goto LABEL_453;
                                    }
                                  }
                                }
                                while (--v249);
                              }
                              if (HIWORD(v292) != (unsigned __int16)v292
                                || a14 && (a14 != 1 || !strstr(__s1, "latin") && *(_DWORD *)(a1 + 2068)))
                              {
                                goto LABEL_453;
                              }
                              uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56)
                                                                                             + 192))(a5, a6, v295);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_452:
          uint64_t DepesLayersForWordAndPOS = appended;
          goto LABEL_453;
        }
        *(_DWORD *)&v241[8] = 0;
        int v247 = 0;
        int v99 = 0;
        int v242 = (char *)(v271 + 5000);
        uint64_t v243 = 0;
        *(void *)unsigned __int16 v241 = (unsigned __int16)v98 - 2;
        int v261 = v98;
        uint64_t v100 = (unsigned __int16)v98;
        uint64_t v248 = (unsigned __int16)v98;
        uint64_t v249 = 0;
        while (1)
        {
          uint64_t v101 = *(void *)(a1 + 232);
          int v276 = v99;
          uint64_t v256 = (unsigned __int16)v99;
          size_t v102 = (char *)(v101 + (unsigned __int16)v99);
          int v103 = strncmp(v102, "â†•", 3uLL);
          if (v103 || !strcmp(__s1, "prompt") || !strcmp(__s1, "internal-nuance-system-norm"))
          {
            int v104 = *(_DWORD *)(a1 + 2192);
            if (!v104 || !*(_DWORD *)(a1 + 2248))
            {
              if (!strncmp(v102, "Â§", 2uLL)
                || !v103 && (!strcmp(__s1, "prompt") || !strcmp(__s1, "internal-nuance-system-norm")))
              {
                uint64_t v281 = 0;
                int v282 = 0;
                int v109 = strncmp(v102, "Â§", 2uLL);
                uint64_t v115 = 2;
                if (v109) {
                  uint64_t v115 = 3;
                }
                uint64_t v244 = v115;
                int v116 = v276;
                if ((unsigned __int16)v261 <= (unsigned __int16)(v276 + 1)) {
                  uint64_t v117 = (unsigned __int16)(v276 + 1);
                }
                else {
                  uint64_t v117 = (unsigned __int16)v261;
                }
                while (1)
                {
                  int v118 = v116++;
                  if ((unsigned __int16)v116 >= (unsigned __int16)v261) {
                    break;
                  }
                  uint64_t v265 = (unsigned __int16)v116;
                  if (!strncmp((const char *)(v101 + (unsigned __int16)v116), "Â§", 2uLL)
                    || !strncmp((const char *)(v101 + (unsigned __int16)v116), "â†•", 3uLL))
                  {
                    goto LABEL_204;
                  }
                }
                uint64_t v265 = v117;
                int v118 = v117 - 1;
                int v116 = v117;
LABEL_204:
                char v123 = *(unsigned char *)(v101 + v265);
                *(unsigned char *)(v101 + v265) = 0;
                char v240 = v123;
                if (*(_DWORD *)(a1 + 2004))
                {
                  unint64_t v124 = *a11;
                  if (v124 >= 2)
                  {
                    unint64_t v125 = v124 - 1;
                    uint64_t v126 = (void *)(a9 + 56);
                    while (*((_DWORD *)v126 - 6) != 58
                         || *((_DWORD *)v126 - 3) + v255 - *(_DWORD *)(a9 + 12) != HIWORD(v291))
                    {
                      v126 += 4;
                      if (!--v125) {
                        goto LABEL_305;
                      }
                    }
                    *(void *)&v241[4] = *v126;
                  }
LABEL_305:
                  uint64_t DepesLayersForWordAndPOS = getDepesLayersForWordAndPOS(a1, (uint64_t)__s1, (char *)(*(void *)(a1 + 232) + v256 + v244), *(char **)&v241[4]);
                  __int16 v127 = HIWORD(v291) + strlen((const char *)(*(void *)(a1 + 232) + v256 + v244));
                }
                else
                {
                  uint64_t DepesLayersForWordAndPOS = mde_stemafx_Main(a1, __s1, (char *)(*(void *)(a1 + 232) + v256 + v244), v110, v111, v112, v113, v114);
                  __int16 v127 = HIWORD(v291) + strlen(*(const char **)(a1 + 160));
                }
                HIWORD(v291) = v127;
                if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
                  goto LABEL_453;
                }
                strcpy(__s, "one_word");
                unsigned __int16 v246 = strlen(__s);
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v178, v179, v180, (uint64_t)__s);
                unsigned __int16 v181 = strlen(*(const char **)(a1 + 160));
                uint64_t appended = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 104)
                                                                                             + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, *(void *)(a1 + 160), v181);
                if ((appended & 0x80000000) != 0) {
                  goto LABEL_452;
                }
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L3: %s", v182, v183, v184, (uint64_t)__s);
                unsigned __int16 v185 = strlen(*(const char **)(a1 + 168));
                uint64_t appended = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 104)
                                                                                              + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 2, *(void *)(a1 + 168), v185);
                if ((appended & 0x80000000) != 0) {
                  goto LABEL_452;
                }
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L4: %s", v186, v187, v188, (uint64_t)__s);
                unsigned __int16 v189 = strlen(*(const char **)(a1 + 176));
                uint64_t appended = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 104)
                                                                                              + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 3, *(void *)(a1 + 176), v189);
                if ((appended & 0x80000000) != 0) {
                  goto LABEL_452;
                }
                int v190 = __s1;
                if (strcmp(__s1, "normal")
                  && (ssftmap_FindReadOnly(*(void *)(a1 + 568), (uint64_t)__s1, &v281) & 0x80000000) == 0)
                {
                  if (!(_WORD)v276 && *(_DWORD *)v241 == (unsigned __int16)v116)
                  {
                    uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 88))(a5, a6, v296, &v295);
                    if ((appended & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
                    int v190 = __s1;
                    uint64_t appended = dt_Main(a1, v295, a5, a6, *((void *)v281 + 2), __s1);
                    uint64_t DepesLayersForWordAndPOS = (appended & 0x1FFF) == 0x10A ? 0 : appended;
                    if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
                    int v247 = 1;
LABEL_324:
                    if (!strncmp((const char *)(*(void *)(a1 + 232) + v256), "Â§", 2uLL))
                    {
                      oneword_ReplaceUnderscoreWithDot(*v272);
                      uint64_t DepesLayersForWordAndPOS = 0;
                    }
                    if (*(_DWORD *)(a1 + 560))
                    {
                      int v192 = v274;
                      if (v274)
                      {
                        char v286 = v251;
                        goto LABEL_350;
                      }
                    }
                    else
                    {
                      char v286 = *v190;
                      int v192 = v190;
LABEL_350:
                      strncpy(v298, v192, 0x14uLL);
                    }
LABEL_355:
                    int v116 = v118 + 2;
LABEL_394:
                    int v264 = 0;
                    int v174 = v116;
                    uint64_t v94 = (uint64_t *)(a1 + 192);
                    uint64_t v93 = __s1;
                    uint64_t v100 = v248;
                    goto LABEL_395;
                  }
                  uint64_t v191 = dt_Main(a1, 0, a5, a6, *((void *)v281 + 2), __s1);
                  if ((v191 & 0x1FFF) == 0x10A)
                  {
                    uint64_t DepesLayersForWordAndPOS = 0;
                    int v190 = __s1;
                    goto LABEL_324;
                  }
                  int v190 = __s1;
                  if ((v191 & 0x80000000) == 0)
                  {
                    uint64_t DepesLayersForWordAndPOS = v191;
                    goto LABEL_324;
                  }
                }
                if (strcmp(v190, "normal"))
                {
                  if (strlen(v190) + v246 + 2 <= 0x7F)
                  {
                    __strcat_chk();
                    __strcat_chk();
                    if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s) & 0x80000000) == 0)
                    {
                      if (*(_DWORD *)(a1 + 560))
                      {
                        if (v274)
                        {
                          char v286 = v251;
                          strncpy(v298, v274, 0x14uLL);
                        }
                      }
                      else
                      {
                        char v286 = *__s1;
                        strncpy(v298, __s1, 0x14uLL);
                      }
                      goto LABEL_365;
                    }
                  }
                }
                LODWORD(v280) = 0;
                if (*(_DWORD *)(a1 + 928) && strlen(__s1) >= 2 && !strchr(__s1, 95))
                {
                  uint64_t appended = oneword_Lid((void *)a1, &v280);
                  if ((appended & 0x80000000) != 0) {
                    goto LABEL_452;
                  }
                  if (v280)
                  {
                    __s[v246] = 0;
LABEL_363:
                    __strcat_chk();
                    char v286 = 101;
                    strcpy(v298, "e");
LABEL_364:
                    uint64_t appended = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s);
                    if ((appended & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
LABEL_365:
                    uint64_t appended = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 104) + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, &__src, &v288);
                    if ((appended & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
                    __src[v288] = 0;
                    uint64_t appended = (*(uint64_t (**)(void, void, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 104) + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 2, &v289, &v288);
                    if ((appended & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
                    *(unsigned char *)(v289 + v288) = 0;
                    uint64_t appended = (*(uint64_t (**)(void, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 104) + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 4, &v282, &v288);
                    if ((appended & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
                    v282[v288] = 0;
                    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v195, v196, v197, (uint64_t)__s);
                    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O3: %s", v198, v199, v200, (uint64_t)__s);
                    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O5: %s", v201, v202, v203, (uint64_t)__s);
                    int v204 = __src;
                    if ((unsigned __int16)strlen(__src))
                    {
                      int v208 = 0;
                      int v209 = 0;
                      do
                      {
                        v210 = &v204[(unsigned __int16)v209];
                        if (*v210 == 126)
                        {
                          uint64_t v211 = &v204[v208 + 1];
                          __int16 v212 = strlen(v211);
                          memmove(v210, v211, (unsigned __int16)(v212 + 1));
                          --v209;
                        }
                        else if (!strncmp(&v204[(unsigned __int16)v209], "Â¡", 2uLL))
                        {
                          int v213 = &v204[v208 + 1];
                          int v214 = &v204[v208 + 2];
                          size_t v215 = strlen(v214);
                          memmove(v213, v214, v215 + 1);
                          __src[(unsigned __int16)v209] = 126;
                        }
                        int v208 = (unsigned __int16)++v209;
                        int v204 = __src;
                      }
                      while ((unsigned __int16)v209 < (unsigned __int16)strlen(__src));
                    }
                    unsigned __int16 v216 = 0;
                    *(unsigned char *)(*(void *)(a1 + 232) + v265) = v240;
                    uint64_t v217 = v289;
                    while (1)
                    {
                      uint64_t v218 = v216;
                      int v219 = *(unsigned __int8 *)(v289 + v216);
                      if (v219 != 32 && v219 != 126) {
                        break;
                      }
                      ++v216;
                    }
                    if (*(unsigned char *)(v289 + v216))
                    {
                      while (v219 != 32 && v219 != 126)
                        LOBYTE(v219) = *(unsigned char *)(v289 + ++v216);
                      *(unsigned char *)(v289 + v216) = 0;
                      uint64_t v217 = v289;
                    }
                    unsigned __int16 v220 = 0;
                    int v221 = (char *)(v217 + v218);
                    int v222 = v282;
                    while (1)
                    {
                      uint64_t v223 = v220;
                      int v224 = v282[v220];
                      if (v224 != 32 && v224 != 126) {
                        break;
                      }
                      ++v220;
                    }
                    if (v282[v220])
                    {
                      while (v224 != 32 && v224 != 126)
                        LOBYTE(v224) = v282[++v220];
                      v282[v220] = 0;
                      int v222 = v282;
                    }
                    uint64_t v225 = (uint64_t)&v222[v223];
                    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD ONEWORDGRAMMAR %s", v205, v206, v207, *(void *)(a1 + 232));
                    uint64_t appended = oneword_AppendPhon(a1, __src, v221, v225, v286, 1);
                    uint64_t DepesLayersForWordAndPOS = 0;
                    if ((appended & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
                    goto LABEL_394;
                  }
                }
                if ((ssftmap_FindReadOnly(*(void *)(a1 + 568), (uint64_t)"normal", &v281) & 0x80000000) == 0)
                {
                  if (!(_WORD)v276 && *(_DWORD *)v241 == (unsigned __int16)v116)
                  {
                    uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 88))(a5, a6, v296, &v295);
                    if ((appended & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
                    uint64_t appended = dt_Main(a1, v295, a5, a6, *((void *)v281 + 2), __s1);
                    uint64_t DepesLayersForWordAndPOS = (appended & 0x1FFF) == 0x10A ? 0 : appended;
                    if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
                    int v247 = 1;
                    goto LABEL_353;
                  }
                  uint64_t v193 = dt_Main(a1, 0, a5, a6, *((void *)v281 + 2), __s1);
                  if ((v193 & 0x1FFF) == 0x10A)
                  {
                    uint64_t DepesLayersForWordAndPOS = 0;
                    goto LABEL_353;
                  }
                  if ((v193 & 0x80000000) == 0)
                  {
                    uint64_t DepesLayersForWordAndPOS = v193;
LABEL_353:
                    if (!strncmp((const char *)(*(void *)(a1 + 232) + v256), "Â§", 2uLL))
                    {
                      oneword_ReplaceUnderscoreWithDot(*v272);
                      uint64_t DepesLayersForWordAndPOS = 0;
                    }
                    goto LABEL_355;
                  }
                }
                int v194 = v280;
                __s[v246] = 0;
                if (v194) {
                  goto LABEL_363;
                }
                goto LABEL_364;
              }
              if (!v104 || !*(_DWORD *)(a1 + 2248))
              {
LABEL_167:
                if (!strncmp(v102, "â—„", 3uLL))
                {
                  uint64_t v281 = 0;
                  int v282 = 0;
                  uint64_t v279 = 0;
                  uint64_t v280 = 0;
                  int v278 = 4;
                  LODWORD(v107) = v276 + 3;
                  if ((unsigned __int16)(v276 + 3) < (unsigned __int16)v261)
                  {
                    int v108 = HIWORD(v291);
                    uint64_t v107 = (unsigned __int16)(v276 + 3);
                    while (strncmp((const char *)(v101 + v107), "â—„", 3uLL))
                    {
                      HIWORD(v291) = ++v108;
                      if (v100 == ++v107)
                      {
                        LODWORD(v107) = v261;
                        break;
                      }
                    }
                  }
                  int v276 = v107;
                  uint64_t v171 = (unsigned __int16)v299[v249];
                  uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a5, a6, v171, 3, &v282, (char *)&v293 + 2);
                  if ((appended & 0x80000000) != 0) {
                    goto LABEL_452;
                  }
                  uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a5, a6, v171, 5, &v281, (char *)&v293 + 2);
                  if ((appended & 0x80000000) != 0) {
                    goto LABEL_452;
                  }
                  uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, char *))(*(void *)(a1 + 56) + 176))(a5, a6, v171, 6, &v280, (char *)&v293 + 2);
                  if ((appended & 0x80000000) != 0) {
                    goto LABEL_452;
                  }
                  uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v171, 0, 1, &v278, (char *)&v293 + 2);
                  if ((appended & 0x80000000) != 0) {
                    goto LABEL_452;
                  }
                  if ((v249 & 0x80) != 0)
                  {
                    uint64_t DepesLayersForWordAndPOS = 2310021632;
                    goto LABEL_453;
                  }
                  uint64_t DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a5, a6, v171, 9, &v279, (char *)&v293 + 2);
                  if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
                    goto LABEL_453;
                  }
                  strncpy(v298, v279, 0x14uLL);
                  if (v298[0]) {
                    int v172 = v298[0];
                  }
                  else {
                    int v172 = 32;
                  }
                  char v286 = v172;
                  __int16 v173 = v282;
                  if (v278 == 4)
                  {
                    if (strcmp(v282, "_"))
                    {
                      uint64_t appended = oneword_AppendPhon(a1, v173, v281, v280, v172, 1);
                      if ((appended & 0x80000000) != 0) {
                        goto LABEL_452;
                      }
                      uint64_t DepesLayersForWordAndPOS = 0;
                    }
                  }
                  else
                  {
                    uint64_t appended = oneword_AppendPhon(a1, v282, v281, v280, v172, 0);
                    uint64_t DepesLayersForWordAndPOS = 0;
                    if ((appended & 0x80000000) != 0) {
                      goto LABEL_452;
                    }
                  }
                  int v264 = 0;
                  ++v249;
                  uint64_t v94 = (uint64_t *)(a1 + 192);
                  uint64_t v93 = __s1;
                }
                else
                {
                  utf8_ToLower(v102, 0, (uint64_t)&v282);
                  uint64_t appended = oneword_AppendPhon(a1, (char *)&v282, &byte_20D5A22AE, (uint64_t)&byte_20D5A22AE, 32, 0);
                  uint64_t v94 = (uint64_t *)(a1 + 192);
                  if ((appended & 0x80000000) != 0) {
                    goto LABEL_452;
                  }
                  uint64_t DepesLayersForWordAndPOS = 0;
                  int v264 = 0;
                  HIWORD(v291) += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 232) + v256));
                  uint64_t v93 = __s1;
                }
                goto LABEL_277;
              }
            }
            uint64_t v105 = 2;
            if (strncmp(v102, "Â§", 2uLL))
            {
              if (v103 || strcmp(__s1, "prompt") && strcmp(__s1, "internal-nuance-system-norm")) {
                goto LABEL_167;
              }
              uint64_t v105 = 3;
            }
            if ((unsigned __int16)v261 <= (unsigned __int16)(v276 + 1)) {
              uint64_t v119 = (unsigned __int16)(v276 + 1);
            }
            else {
              uint64_t v119 = (unsigned __int16)v261;
            }
            while (1)
            {
              unsigned __int16 v120 = v276 + 1;
              if ((unsigned __int16)(v276 + 1) >= (unsigned __int16)v261) {
                break;
              }
              uint64_t v121 = (unsigned __int16)++v276;
              uint64_t v122 = (const char *)(v101 + v120);
              if (!strncmp(v122, "Â§", 2uLL) || !strncmp(v122, "â†•", 3uLL)) {
                goto LABEL_213;
              }
            }
            uint64_t v121 = v119;
            int v276 = v119;
LABEL_213:
            *(unsigned char *)(v101 + v121) = 0;
            strncpy(__dst, (const char *)(*(void *)(a1 + 232) + v256 + v105), 0x7FuLL);
            __dst[128] = 0;
            uint64_t appended = (*(uint64_t (**)(void, void, const char *, char *, uint64_t))(*(void *)(a1 + 80)
                                                                                                + 136))(*(void *)(a1 + 64), *(void *)(a1 + 72), "normal", __dst, 128);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            uint64_t appended = mosynt_StartWordAnalysis(*(void *)(a1 + 48), *(void *)(a1 + 2200), *(void *)(a1 + 2208), *(void *)(a1 + 2216), *(void *)(a1 + 2224), *(void *)(a1 + 2232), *(void *)(a1 + 2240), v277);
            uint64_t v94 = (uint64_t *)(a1 + 192);
            uint64_t v93 = __s1;
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            uint64_t appended = mosynt_WordAnalysis();
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            uint64_t appended = mosynt_SkipToFirstOptimalReading(*(void *)(a1 + 48), v277);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            uint64_t appended = mosynt_GetReading(*(void *)(a1 + 48), v277, 0, &v285, v254, 5000, v242, 5000, &v284);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            uint64_t appended = mosynt_SubstAllSubstrOcc(v242, "~", "Â¡", (unsigned char *)(v271 + 10000), 5000);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            __strcpy_chk();
            if (v285)
            {
              *char v254 = 0;
              _WORD *v252 = 42;
              char v286 = 32;
              uint64_t appended = oneword_AppendPhon(a1, v242, (char *)v254, (uint64_t)v252, 32, 1);
              if ((appended & 0x80000000) != 0) {
                goto LABEL_452;
              }
            }
            uint64_t appended = mosynt_FinishWordAnalysis(*(void *)(a1 + 48), v277);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            uint64_t DepesLayersForWordAndPOS = mosynt_ResetMosyntWS(*(void *)(a1 + 48), v271);
            uint64_t v100 = v248;
            if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
              goto LABEL_453;
            }
            int v264 = 0;
            HIWORD(v291) += strlen(*v267);
          }
          else
          {
            LODWORD(v106) = v276 + 3;
            if ((unsigned __int16)(v276 + 3) < (unsigned __int16)v261)
            {
              uint64_t v106 = (unsigned __int16)(v276 + 3);
              while (strncmp((const char *)(v101 + v106), "â†•", 3uLL))
              {
                if (v100 == ++v106)
                {
                  LODWORD(v106) = v261;
                  break;
                }
              }
            }
            int v276 = v106;
            char v245 = *(unsigned char *)(v101 + (unsigned __int16)v106);
            *(unsigned char *)(v101 + (unsigned __int16)v106) = 0;
            __int16 v128 = strlen((const char *)(*(void *)(a1 + 232) + v256 + 3));
            uint64_t appended = (*(uint64_t (**)(void, void, char *, uint64_t, void))(*(void *)(a1 + 80) + 104))(*(void *)(a1 + 64), *(void *)(a1 + 72), __s1, *(void *)(a1 + 232) + v256 + 3, (unsigned __int16)(v128 + 1));
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            strcpy(*(char **)(a1 + 160), (const char *)(*(void *)(a1 + 232) + v256 + 3));
            strcpy(__s, "spell_acronym");
            unsigned __int16 v129 = strlen(__s);
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v130, v131, v132, (uint64_t)__s);
            unsigned __int16 v133 = strlen(*(const char **)(a1 + 160));
            uint64_t appended = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, *(void *)(a1 + 160), v133);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            if (strcmp(__s1, "normal") && strlen(__s1) + v129 + 2 <= 0x7F)
            {
              __strcat_chk();
              __strcat_chk();
            }
            if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s) & 0x80000000) != 0)
            {
              __s[v129] = 0;
              uint64_t appended = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s);
              if ((appended & 0x80000000) != 0) {
                goto LABEL_452;
              }
            }
            uint64_t appended = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 104) + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, &__src, &v288);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            __src[v288] = 0;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v134, v135, v136, (uint64_t)__s);
            __int16 v137 = strlen(__src);
            __int16 v138 = v264 + v137 - strlen(*(const char **)(a1 + 160));
            *(unsigned char *)(*(void *)(a1 + 232) + (unsigned __int16)v106) = v245;
            uint64_t v139 = *v250;
            int v257 = v138;
            if (v138 <= 0)
            {
              __int16 v142 = v138 + 1;
            }
            else
            {
              __int16 v140 = v138;
              __int16 v141 = strlen(v139);
              __int16 v142 = v140 + 1;
              uint64_t v143 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v139, (unsigned __int16)(v142 + v141));
              if (!v143) {
                goto LABEL_398;
              }
              uint64_t v139 = (const char *)v143;
              char *v250 = (const char *)v143;
            }
            int v144 = *(__int16 *)(a1 + 224);
            unsigned int v145 = (unsigned __int16)(HIWORD(v291) + *(_WORD *)(a1 + 224) + strlen(__src));
            if (v145 > (unsigned __int16)(v142 + strlen(v139)))
            {
              log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34001, 0, v146, v147, v148, v149, v239);
              uint64_t DepesLayersForWordAndPOS = 2310021127;
              goto LABEL_453;
            }
            int v150 = *(unsigned __int16 *)(a1 + 224);
            int v151 = strlen(*v267);
            int v152 = HIWORD(v291) - v264 + v151;
            LOWORD(v291) = HIWORD(v291) - v264 + v151;
            if (v257 < 1)
            {
              if (v257 < 0)
              {
                int v158 = v152 + v150;
                unsigned int v159 = (unsigned __int16)(v152 + v150);
                if (v159 <= (unsigned __int16)strlen(v139))
                {
                  do
                  {
                    v139[v159 + v257] = v139[(unsigned __int16)v158++];
                    unsigned int v159 = (unsigned __int16)v158;
                    uint64_t v139 = *v250;
                  }
                  while ((unsigned __int16)v158 <= (unsigned __int16)strlen(*v250));
                  LOWORD(v150) = *(_WORD *)(a1 + 224);
                }
              }
              int v155 = (_WORD *)(a1 + 280);
              __int16 v156 = a11;
            }
            else
            {
              int v153 = strlen(v139);
              int v154 = v144 + (unsigned __int16)v152;
              int v155 = (_WORD *)(a1 + 280);
              __int16 v156 = a11;
              if (v154 <= (unsigned __int16)v153)
              {
                unsigned int v157 = (unsigned __int16)v153;
                do
                {
                  (*v250)[v157 + (unint64_t)v257] = (*v250)[(unsigned __int16)v153--];
                  unsigned int v157 = (unsigned __int16)v153;
                }
                while (*(__int16 *)(a1 + 224) + (unsigned __int16)v291 <= (unsigned __int16)v153);
                LOWORD(v150) = *(_WORD *)(a1 + 224);
                uint64_t v139 = *v250;
              }
            }
            size_t v160 = strlen(__src);
            memcpy((void *)&v139[HIWORD(v291) + (__int16)v150], __src, v160);
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Normalizing to: %s", v161, v162, v163, (uint64_t)*v250);
            HIWORD(v291) += strlen(*(const char **)(a1 + 160));
            unint64_t v164 = (unsigned __int16)*a10;
            if (v164 < *v156)
            {
              int v165 = (unsigned __int16)v291;
              int v166 = (_DWORD *)(a9 + 12 + 32 * v164);
              do
              {
                if (v165 <= (__int16)(*v166 - a12)) {
                  break;
                }
                *v166 += *(__int16 *)(a1 + 224);
                v166 += 8;
                *a10 = ++v164;
              }
              while (v164 < *v156);
            }
            LOWORD(v282) = 0;
            LOWORD(v281) = 0;
            LOWORD(v280) = 0;
            LOWORD(v279) = 0;
            __int16 v167 = v257;
            if (*(_DWORD *)(a1 + 2272) == 1)
            {
              uint64_t appended = hlp_RemoveMNCRecords((void *)a1, a5, a6, v250, v296, v273, v257);
              if ((appended & 0x80000000) != 0) {
                goto LABEL_452;
              }
            }
            uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char **))(*(void *)(a1 + 56)
                                                                                             + 104))(a5, a6, 1, 0, &v279);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *))(*(void *)(a1 + 56)
                                                                                               + 104))(a5, a6, 2, (unsigned __int16)v279, &v280);
            if ((appended & 0x80000000) != 0) {
              goto LABEL_452;
            }
            while ((unsigned __int16)v280 != (unsigned __int16)*v155)
            {
              uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
              if ((appended & 0x80000000) == 0)
              {
                if ((unsigned __int16)v281 - *(__int16 *)(a1 + 224) >= (unsigned __int16)v291) {
                  LOWORD(v281) = (_WORD)v281 + v257;
                }
                uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char **, int *))(*(void *)(a1 + 56) + 160))(a5, a6, (unsigned __int16)v280, 2, 1, &v281, &v293);
                if ((appended & 0x80000000) == 0)
                {
                  uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(*(void *)(a1 + 56)
                                                                                            + 120))(a5, a6, (unsigned __int16)v280, &v280);
                  if ((appended & 0x80000000) == 0) {
                    continue;
                  }
                }
              }
              goto LABEL_452;
            }
            if ((_WORD)v280)
            {
              uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char **, char *))(*(void *)(a1 + 56) + 168))(a5, a6, (unsigned __int16)v280, 1, 1, &v282, (char *)&v293 + 2);
              if ((appended & 0x80000000) != 0) {
                goto LABEL_452;
              }
            }
            while ((unsigned __int16)v282 < (unsigned __int16)v291 && *v155)
            {
              uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
              if ((appended & 0x80000000) == 0)
              {
                BOOL v175 = (v294 & 0xFFFFFFFC) != 4 && (v294 - 9) > 1;
                if (v175
                  || (appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char **, char *))(*(void *)(a1 + 56) + 168))(a5, a6, *(unsigned __int16 *)(a1 + 280), 2, 1, &v281, (char *)&v293 + 2), (appended & 0x80000000) == 0)&& ((__int16 v176 = *(_WORD *)(a1 + 224), LOWORD(v282) = v176 + (_WORD)v282, (unsigned __int16)v281 >= (unsigned __int16)v291)? (v177 = v167): (v177 = 0), (LOWORD(v281) = (_WORD)v281 + v176 + v177, appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char **, int *))(*(void *)(a1 + 56) + 160))(a5, a6, *(unsigned __int16 *)(a1 + 280), 1,
                                    1,
                                    &v282,
                                    &v293),
                       (appended & 0x80000000) == 0)
                   && (uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char **, int *))(*(void *)(a1 + 56) + 160))(a5, a6, *(unsigned __int16 *)(a1 + 280), 2, 1, &v281, &v293), (appended & 0x80000000) == 0)))
                {
                  uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, _WORD *))(*(void *)(a1 + 56) + 120))(a5, a6, *(unsigned __int16 *)(a1 + 280), v155);
                  if ((appended & 0x80000000) == 0)
                  {
                    if (!*v155) {
                      continue;
                    }
                    uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
                    if ((appended & 0x80000000) == 0)
                    {
                      if ((unsigned __int16)v282 < (unsigned __int16)v291) {
                        continue;
                      }
                      while (*v155)
                      {
                        uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
                        if ((appended & 0x80000000) != 0) {
                          goto LABEL_452;
                        }
                        if (v294 != 17) {
                          break;
                        }
                        uint64_t DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, _WORD *))(*(void *)(a1 + 56) + 120))(a5, a6, (unsigned __int16)*v155, v155);
                        if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
                          goto LABEL_453;
                        }
                      }
                      uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
                      int v155 = (_WORD *)(a1 + 280);
                      __int16 v167 = v257;
                      if ((appended & 0x80000000) == 0) {
                        continue;
                      }
                    }
                  }
                }
              }
              goto LABEL_452;
            }
            *(_WORD *)(a1 + 224) += v167;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD SPELLACRONYM %s", v168, v169, v170, *(void *)(a1 + 232));
            uint64_t v93 = __s1;
            uint64_t DepesLayersForWordAndPOS = oneword_TranscribeAcronym(a1, __s1, __src, (unsigned __int8 *)&v286, v298);
            if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
              goto LABEL_453;
            }
            WORD2(v243) += v167;
            LODWORD(v243) = 1;
            uint64_t v94 = (uint64_t *)(a1 + 192);
            uint64_t v100 = v248;
          }
LABEL_277:
          int v174 = v276;
LABEL_395:
          int v226 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 232) + (unsigned __int16)v174));
          int v99 = v174 + v226;
          if ((unsigned __int16)(v174 + v226) >= (unsigned __int16)v261) {
            goto LABEL_401;
          }
        }
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v74, v75, v76, (uint64_t)__s);
      unsigned __int16 v79 = strlen(*(const char **)(a1 + 160));
      uint64_t appended = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 104) + 120))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, *(void *)(a1 + 160), v79);
      if ((appended & 0x80000000) != 0) {
        goto LABEL_452;
      }
      if (strcmp(__s1, "normal") && strlen(__s1) + v275 + 2 <= 0x7F)
      {
        __strcat_chk();
        __strcat_chk();
      }
      if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s) & 0x80000000) != 0)
      {
        __s[v275] = 0;
        uint64_t appended = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 104) + 80))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s);
        if ((appended & 0x80000000) != 0) {
          goto LABEL_452;
        }
      }
      uint64_t v80 = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 104)
                                                                                           + 128))(*(void *)(a1 + 88), *(void *)(a1 + 96), 0, &__src, &v288);
      uint64_t v81 = v80;
      if ((v80 & 0x80000000) != 0)
      {
        uint64_t DepesLayersForWordAndPOS = v80;
        goto LABEL_453;
      }
      __src[v288] = 0;
      __int16 v82 = strlen(__src);
      __int16 v83 = strlen(*(const char **)(a1 + 160));
      __int16 v84 = count_inserted_oneword_bytes(__src);
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v85, v86, v87, (uint64_t)__s);
      if (v288 <= 0x7FuLL)
      {
        __int16 v89 = v82;
        uint64_t v77 = v81;
        unsigned int v250 = a3;
        uint64_t v88 = *(char **)(a1 + 232);
        goto LABEL_155;
      }
      uint64_t v88 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 232), v288 + 1);
      if (v88)
      {
        __int16 v89 = v82;
        uint64_t v77 = v81;
        unsigned int v250 = a3;
        *(void *)(a1 + 232) = v88;
LABEL_155:
        int v264 = (__int16)(v89 - (v84 + v83)) & ~((__int16)(v89 - (v84 + v83)) >> 31);
        strcpy(v88, __src);
        int v98 = v288;
        uint64_t v94 = (uint64_t *)(a1 + 192);
        uint64_t v93 = __s1;
        goto LABEL_156;
      }
LABEL_398:
      uint64_t DepesLayersForWordAndPOS = 2310021130;
      goto LABEL_399;
    }
    uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, (unsigned __int16)v62, 0, 1, &v294, (char *)&v293 + 2);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_452;
    }
    if (!v294)
    {
      if (v61)
      {
        int v61 = 0;
        goto LABEL_114;
      }
      uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v295, 1, 1, (char *)&v292 + 2, (char *)&v293 + 2);
      if ((appended & 0x80000000) != 0) {
        goto LABEL_452;
      }
      uint64_t DepesLayersForWordAndPOS = 2310021130;
      uint64_t v73 = HIWORD(v292) - v53;
      if ((int)v73 >= 1
        && !dynamic_strncat(v267, &(*a3)[v53 + *(__int16 *)(a1 + 224)], v73, v269, *(uint64_t **)(*(void *)a1 + 8))
        || *(_DWORD *)(a1 + 292) && !dynamic_strcat(v267, "+", (size_t *)v269, *(uint64_t **)(*(void *)a1 + 8)))
      {
        goto LABEL_453;
      }
      int v61 = 0;
      unsigned __int16 v53 = HIWORD(v292);
LABEL_114:
      uint64_t DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a5, a6, v295, &v295);
      if ((DepesLayersForWordAndPOS & 0x80000000) != 0) {
        goto LABEL_453;
      }
      goto LABEL_53;
    }
    if (*(_DWORD *)(a1 + 276)) {
      goto LABEL_113;
    }
    if (v294 != 8 && v294 != 4) {
      goto LABEL_113;
    }
    uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v295, 1, 1, (char *)&v292 + 2, (char *)&v293 + 2);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_452;
    }
    uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v295, 2, 1, &v292, (char *)&v293 + 2);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_452;
    }
    uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v295, 7, 1, &v287, (char *)&v293 + 2);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_452;
    }
    if (a15 && !*(_DWORD *)(a1 + 2068)) {
      unsigned __int16 v287 = ~v287;
    }
    if ((unsigned __int16)v292 != v53) {
      break;
    }
    if (!v59 || *(_DWORD *)(a1 + 2192)) {
      goto LABEL_113;
    }
    if (v287 >= v60)
    {
      if (!a14 || a14 == 1 && (strstr(__s1, "latin") || !*(_DWORD *)(a1 + 2068)))
      {
        uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56) + 192))(a5, a6, (unsigned __int16)v299[v59 - 1]);
        if ((appended & 0x80000000) != 0) {
          goto LABEL_452;
        }
      }
      uint64_t v70 = (v59 - 1);
      int v71 = (unsigned __int16)v299[v70];
      unsigned __int16 v72 = v295;
      if (v296 == v71) {
        unsigned __int16 v296 = v295;
      }
      if (*v262 == v71) {
        *int v262 = v295;
      }
      v299[v70] = v72;
      if (a15 && !*(_DWORD *)(a1 + 2068)) {
        unsigned __int16 v60 = v287;
      }
LABEL_113:
      int v61 = 1;
      goto LABEL_114;
    }
    uint64_t v64 = v295;
    uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a5, a6, v295, &v295);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_452;
    }
    if (!a14 || a14 == 1 && (strstr(__s1, "latin") || !*(_DWORD *)(a1 + 2068)))
    {
      uint64_t appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 192))(a5, a6, v64);
      if ((appended & 0x80000000) != 0) {
        goto LABEL_452;
      }
    }
    if (a15 && !*(_DWORD *)(a1 + 2068)) {
      unsigned __int16 v287 = v60;
    }
    int v62 = v295;
    int v61 = 1;
  }
  uint64_t DepesLayersForWordAndPOS = 2310021130;
  if ((v59 & 0x80) != 0)
  {
    uint64_t DepesLayersForWordAndPOS = 2310021632;
    goto LABEL_453;
  }
  unsigned __int16 v60 = v287;
  v299[v59] = v295;
  uint64_t v65 = HIWORD(v292) - v53;
  if ((int)v65 < 1
    || dynamic_strncat(v267, &(*a3)[v53 + *(__int16 *)(a1 + 224)], v65, v269, *(uint64_t **)(*(void *)a1 + 8)))
  {
    uint64_t v66 = v260 + 300 * v263;
    if (v66 <= *(unsigned __int16 *)v269) {
      goto LABEL_92;
    }
    uint64_t v67 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 160), v260 + 300 * v263);
    if (!v67) {
      goto LABEL_399;
    }
    *uint64_t v267 = (const char *)v67;
    *uint64_t v269 = v66;
LABEL_92:
    if (v66 > *(unsigned __int16 *)v268)
    {
      uint64_t v68 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 168), v66);
      if (v68)
      {
        *unsigned int v259 = v68;
        *uint64_t v268 = v66;
        goto LABEL_95;
      }
LABEL_399:
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v40, v41, v42, v43, v239);
      goto LABEL_453;
    }
LABEL_95:
    if (v66 > *(unsigned __int16 *)v266)
    {
      uint64_t v69 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 176), v66);
      if (!v69) {
        goto LABEL_399;
      }
      *char v258 = v69;
      *uint64_t v266 = v66;
    }
    if (dynamic_strcat(v267, "â—„", (size_t *)v269, *(uint64_t **)(*(void *)a1 + 8))
      && dynamic_strncat(v267, &(*a3)[HIWORD(v292) + *(__int16 *)(a1 + 224)], (unsigned __int16)v292 - (unint64_t)HIWORD(v292), v269, *(uint64_t **)(*(void *)a1 + 8))&& dynamic_strcat(v267, "â—„", (size_t *)v269, *(uint64_t **)(*(void *)a1 + 8)))
    {
      ++v59;
      v263 += 2;
      int v61 = 1;
      unsigned __int16 v53 = v292;
      goto LABEL_114;
    }
  }
LABEL_453:
  heap_Free(*(void **)(*(void *)a1 + 8), v277);
  return DepesLayersForWordAndPOS;
}

uint64_t oneword_joinTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, int a6)
{
  int v8 = a4;
  unsigned __int16 v29 = a4;
  int v27 = 0;
  int v28 = 0;
  int v25 = 0;
  int v26 = 0;
  uint64_t v12 = *a5;
  __int16 v22 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, a4, 1, 1, &v22, (char *)&v27 + 2);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  __int16 v23 = v22;
  if (v8)
  {
    while (1)
    {
      unsigned __int16 v14 = v8;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 136))(a2, a3, (unsigned __int16)v8, &v29);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if (!v29) {
        goto LABEL_13;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a2, a3);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      LOWORD(v8) = v29;
      if (v23 != v22 || v29 == 0) {
        goto LABEL_13;
      }
    }
  }
  unsigned __int16 v14 = 0;
LABEL_13:
  unsigned __int16 v29 = v14;
  if (v12 == v14)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, char *))(*(void *)(a1 + 56)
                                                                                                  + 168))(a2, a3, v12, 0, 1, &v28, (char *)&v27 + 2);
    if ((result & 0x80000000) == 0 && v28 == 8)
    {
      int v28 = 9;
      return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56)
                                                                                                + 160))(a2, a3, v29, 0, 1, &v28, &v27);
    }
    return result;
  }
  LOWORD(v16) = 0;
  unsigned __int16 v24 = v14;
  while (1)
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168);
    if (v24 == v12) {
      break;
    }
    uint64_t result = v17(a2, a3);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v28 == 8 || v28 == 4)
    {
      if ((_WORD)v16)
      {
        if ((unsigned __int16)v26 == HIWORD(v25))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56) + 192))(a2, a3, (unsigned __int16)v16);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v19 = v24;
          if (*(unsigned __int16 *)(a1 + 280) == (unsigned __int16)v16) {
            *(_WORD *)(a1 + 280) = v24;
          }
          int v28 = 9;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v19, 0, 1, &v28, &v27);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v24, 1, 1, (char *)&v26 + 2, &v27);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (a6)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v24, 3, 1, &byte_20D5A22AE, &v27);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
        }
        else
        {
          int v28 = 9;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v16, 0, 1, &v28, &v27);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v24, 0, 1, &v28, &v27);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          HIWORD(v26) = HIWORD(v25);
        }
        LOWORD(v26) = v25;
        LOWORD(v16) = v24;
      }
      else
      {
        uint64_t v16 = v24;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v24, 1, 1, (char *)&v26 + 2, (char *)&v27 + 2);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v16, 2, 1, &v26, (char *)&v27 + 2);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a2, a3, v24, &v24);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v24, 1, 1, (char *)&v25 + 2, (char *)&v27 + 2);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v24, 2, 1, &v25, (char *)&v27 + 2);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v24, 0, 1, &v28, (char *)&v27 + 2);
          if ((result & 0x80000000) == 0) {
            continue;
          }
        }
      }
    }
    return result;
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, char *))v17)(a2, a3, v12, 0, 1, &v28, (char *)&v27 + 2);
  if ((result & 0x80000000) == 0)
  {
    if (v28 != 8 && v28 != 4)
    {
      if (!(_WORD)v16) {
        goto LABEL_70;
      }
      int v28 = 9;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56)
                                                                                                  + 160))(a2, a3, (unsigned __int16)v16, 0, 1, &v28, &v27);
      goto LABEL_69;
    }
    if ((_WORD)v16)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v24, 1, 1, (char *)&v25 + 2, (char *)&v27 + 2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v24, 2, 1, &v25, (char *)&v27 + 2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if ((unsigned __int16)v26 == HIWORD(v25))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56) + 192))(a2, a3, (unsigned __int16)v16);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v21 = v24;
        if (*(unsigned __int16 *)(a1 + 280) == (unsigned __int16)v16) {
          *(_WORD *)(a1 + 280) = v24;
        }
        int v28 = 9;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v21, 0, 1, &v28, &v27);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v24, 1, 1, (char *)&v26 + 2, &v27);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (!a6)
        {
LABEL_70:
          *a5 = v24;
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v24, 3, 1, &byte_20D5A22AE, &v27);
LABEL_69:
        if ((result & 0x80000000) != 0) {
          return result;
        }
        goto LABEL_70;
      }
      int v28 = 9;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56)
                                                                                                  + 160))(a2, a3, (unsigned __int16)v16, 0, 1, &v28, &v27);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      int v28 = 9;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56)
                                                                                                + 160))(a2, a3, v24, 0, 1, &v28, &v27);
    goto LABEL_69;
  }
  return result;
}

uint64_t compare_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 - *a1;
}

uint64_t count_inserted_oneword_bytes(const char *a1)
{
  if (a1 && (unsigned __int16 v2 = strlen(a1)) != 0)
  {
    unsigned __int16 v3 = v2;
    int v4 = 0;
    int v5 = 0;
    do
    {
      if (!strncmp(&a1[(unsigned __int16)v5], "â†•", 3uLL)) {
        v4 += 3;
      }
      if (!strncmp(&a1[(unsigned __int16)v5], "Â§", 2uLL)) {
        v4 += 2;
      }
      v5 += utf8_determineUTF8CharLength(a1[(unsigned __int16)v5]);
    }
    while ((unsigned __int16)v5 < v3);
  }
  else
  {
    LOWORD(v4) = 0;
  }
  return (unsigned __int16)v4;
}

uint64_t OUTLINED_FUNCTION_0_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  return log_OutPublic(a1, a2, 34000, 0, a5, a6, a7, a8, a9);
}

uint64_t printNode(int a1, const char **a2, char *a3, _WORD *a4, void *a5, uint64_t a6, unsigned __int16 *a7, int a8)
{
  if (!a1) {
    return 0;
  }
  sprintf(a3, "[%3d] ", a8);
  uint64_t v14 = add2Str(*(void *)a6, a2, a4, a3);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  int v15 = *((_DWORD *)a7 + 1);
  if (v15 == 2)
  {
    uint64_t v16 = *(void *)a6;
    uint64_t v17 = "(T) ";
  }
  else
  {
    if (v15 != 1) {
      goto LABEL_9;
    }
    uint64_t v16 = *(void *)a6;
    uint64_t v17 = "(S) ";
  }
  uint64_t v14 = add2Str(v16, a2, a4, v17);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
LABEL_9:
  uint64_t v14 = add2Str(*(void *)a6, a2, a4, a3);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  sprintf(a3, "NODE <%3d,%3d > ", *a7, a7[1]);
  uint64_t v18 = add2Str(*(void *)a6, a2, a4, a3);
  if ((v18 & 0x80000000) == 0)
  {
    unint64_t v19 = *a7;
    if (v19 < a7[1])
    {
      uint64_t v20 = 224 * v19;
      do
      {
        uint64_t v14 = add2Str(*(void *)a6, a2, a4, *(char **)(*(void *)(*a5 + v20 + 16) + 8 * *(unsigned __int16 *)(a6 + 16)));
        if ((v14 & 0x80000000) != 0) {
          return v14;
        }
        if (*(unsigned __int8 *)(*a5 + v20 + 72) != 255)
        {
          sprintf(a3, "_%d", *(unsigned __int8 *)(*a5 + v20 + 72));
          uint64_t v14 = add2Str(*(void *)a6, a2, a4, a3);
          if ((v14 & 0x80000000) != 0) {
            return v14;
          }
        }
        uint64_t v18 = add2Str(*(void *)a6, a2, a4, " ");
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
        ++v19;
        v20 += 224;
      }
      while (v19 < a7[1]);
    }
    if (!FLOATSUR_GT_INT(a7 + 4, 0, 0)
      || (sprintf(a3, "phraseWeight=%d.%d ", a7[4], a7[5]),
          uint64_t v18 = add2Str(*(void *)a6, a2, a4, a3),
          (v18 & 0x80000000) == 0))
    {
      if (!FLOATSUR_GT_INT(a7 + 6, 0, 0)
        || (sprintf(a3, "bndWeight=%d.%d ", a7[6], a7[7]),
            uint64_t v18 = add2Str(*(void *)a6, a2, a4, a3),
            (v18 & 0x80000000) == 0))
      {
        if (!FLOATSUR_GT_INT(a7 + 8, 0, 0)
          || (sprintf(a3, "bndValue=%d.%d ", a7[8], a7[9]),
              uint64_t v18 = add2Str(*(void *)a6, a2, a4, a3),
              (v18 & 0x80000000) == 0))
        {
          unsigned __int16 v24 = "bndType=U ";
          switch(*((_DWORD *)a7 + 5))
          {
            case 0:
              goto LABEL_31;
            case 1:
              goto LABEL_29;
            case 3:
              unsigned __int16 v24 = "bndType=W ";
              goto LABEL_29;
            case 4:
              unsigned __int16 v24 = "bndType=S ";
LABEL_29:
              *(void *)a3 = *(void *)v24;
              *(_DWORD *)(a3 + 7) = *(_DWORD *)(v24 + 7);
              break;
            default:
              break;
          }
          uint64_t v18 = add2Str(*(void *)a6, a2, a4, a3);
          if ((v18 & 0x80000000) == 0)
          {
LABEL_31:
            if (*((_DWORD *)a7 + 6) != 1
              || (sprintf(a3, "bProcessed=%d ", 1), uint64_t v18 = add2Str(*(void *)a6, a2, a4, a3), (v18 & 0x80000000) == 0))
            {
              if (*((_DWORD *)a7 + 7) != 1
                || (sprintf(a3, "bBndBefore=%d ", 1), uint64_t v18 = add2Str(*(void *)a6, a2, a4, a3), (v18 & 0x80000000) == 0))
              {
                log_OutText(*(void *)(*(void *)a6 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v21, v22, v23, (uint64_t)*a2);
                **a2 = 0;
              }
            }
          }
        }
      }
    }
  }
  return v18;
}

uint64_t printLevel(uint64_t result, const char **a2, char *a3, _WORD *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    int v14 = result;
    log_OutText(*(void *)(*(void *)a6 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Level dump : %s", a6, a7, a8, a8);
    if (*(_WORD *)(a7 + 8))
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t result = printNode(v14, a2, a3, a4, a5, a6, (unsigned __int16 *)(*(void *)a7 + v15), (unsigned __int16)v16);
        if ((result & 0x80000000) != 0) {
          break;
        }
        ++v16;
        v15 += 32;
      }
      while (v16 < *(unsigned __int16 *)(a7 + 8));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t printAsString(int a1, const char **a2, char *a3, _WORD *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  **a2 = 0;
  if (*(_WORD *)(a7 + 8))
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = *(void *)a7;
      uint64_t v17 = (unsigned __int16 *)(*(void *)a7 + 32 * v14);
      unint64_t v18 = *v17;
      if (v18 < v17[1])
      {
        uint64_t v19 = 224 * v18;
        do
        {
          uint64_t v20 = *a5 + v19;
          if (!*(_DWORD *)(v20 + 220))
          {
            uint64_t v21 = add2Str(*(void *)a6, a2, a4, *(char **)(*(void *)(v20 + 16) + 8 * *(unsigned __int16 *)(a6 + 16)));
            if ((v21 & 0x80000000) != 0) {
              return v21;
            }
            if (*(unsigned __int8 *)(*a5 + v19 + 72) != 255)
            {
              sprintf(a3, "_%d", *(unsigned __int8 *)(*a5 + v19 + 72));
              uint64_t v21 = add2Str(*(void *)a6, a2, a4, a3);
              if ((v21 & 0x80000000) != 0) {
                return v21;
              }
            }
            uint64_t v15 = add2Str(*(void *)a6, a2, a4, " ");
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
            uint64_t v16 = *(void *)a7;
          }
          ++v18;
          v19 += 224;
        }
        while (v18 < *(unsigned __int16 *)(v16 + 32 * v14 + 2));
      }
      int v22 = *(_DWORD *)(v16 + 32 * v14 + 20);
      if (v22 == 4) {
        break;
      }
      if (v22 == 3)
      {
        uint64_t v23 = *(void *)a6;
        unsigned __int16 v24 = a2;
        int v25 = a4;
        int v26 = "| ";
        goto LABEL_17;
      }
LABEL_18:
      if (++v14 >= (unint64_t)*(unsigned __int16 *)(a7 + 8)) {
        goto LABEL_22;
      }
    }
    uint64_t v23 = *(void *)a6;
    unsigned __int16 v24 = a2;
    int v25 = a4;
    int v26 = "|| ";
LABEL_17:
    uint64_t v15 = add2Str(v23, v24, v25, v26);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    goto LABEL_18;
  }
  uint64_t v15 = 0;
LABEL_22:
  log_OutText(*(void *)(*(void *)a6 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s%s", a6, a7, a8, a8);
  **a2 = 0;
  return v15;
}

unsigned __int16 *removeNode(unsigned __int16 *result, unsigned int a2)
{
  unsigned __int16 v2 = result;
  uint64_t v3 = a2 + 1;
  int v4 = result[4];
  if (v4 != v3)
  {
    uint64_t result = (unsigned __int16 *)memmove((void *)(*(void *)result + 32 * a2), (const void *)(*(void *)result + 32 * v3), 32 * (v4 - (int)v3));
    LOWORD(v4) = v2[4];
  }
  v2[4] = v4 - 1;
  return result;
}

uint64_t addNode(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, int a5, unsigned int a6)
{
  uint64_t NodeMem = getNodeMem(a1, a6, a2, 1u);
  if ((NodeMem & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)a2 + 32 * *(unsigned __int16 *)(a2 + 8);
    *(_WORD *)uint64_t v11 = a3;
    *(_WORD *)(v11 + 2) = a4;
    *(_DWORD *)(v11 + 4) = a5;
    FLOATSUR_SET_INT((_WORD *)(v11 + 8), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(*(void *)a2 + 32 * *(unsigned __int16 *)(a2 + 8) + 12), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(*(void *)a2 + 32 * *(unsigned __int16 *)(a2 + 8) + 16), 0, 0);
    uint64_t v12 = *(unsigned __int16 *)(a2 + 8);
    uint64_t v13 = *(void *)a2 + 32 * v12;
    *(void *)(v13 + 24) = 0;
    *(_DWORD *)(v13 + 20) = 0;
    *(_WORD *)(a2 + 8) = v12 + 1;
  }
  return NodeMem;
}

uint64_t getNodeMem(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if (!*(void *)a3)
  {
    if (a4 <= a2) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = a4;
    }
    __int16 v14 = v13 + a2;
    uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, (32 * (unsigned __int16)(v13 + a2)) | 1);
    *(void *)a3 = v15;
    if (v15)
    {
      uint64_t v12 = 0;
      *(_WORD *)(a3 + 10) = v14;
      return v12;
    }
LABEL_11:
    uint64_t v12 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v8, v9, v10, v11, v17);
    return v12;
  }
  uint64_t v6 = *(unsigned __int16 *)(a3 + 10);
  if (*(unsigned __int16 *)(a3 + 8) + a4 <= v6) {
    return 0;
  }
  uint64_t v7 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)a3, 32 * v6 + 321);
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v12 = 0;
  *(void *)a3 = v7;
  *(_WORD *)(a3 + 10) += 10;
  return v12;
}

__n128 addNewNode(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if ((getNodeMem(a1, a4, a2, 1u) & 0x80000000) == 0)
  {
    uint64_t v7 = (_OWORD *)(*(void *)a2 + 32 * *(unsigned __int16 *)(a2 + 8));
    __n128 result = *(__n128 *)a3;
    long long v8 = *(_OWORD *)(a3 + 16);
    *uint64_t v7 = *(_OWORD *)a3;
    v7[1] = v8;
    ++*(_WORD *)(a2 + 8);
  }
  return result;
}

uint64_t addLevel(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result = getNodeMem(a1, a4, a2, *(unsigned __int16 *)(a3 + 8));
  if ((result & 0x80000000) == 0)
  {
    int v7 = *(unsigned __int16 *)(a2 + 8);
    if (*(_WORD *)(a3 + 8))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = (_OWORD *)(*(void *)a2 + 32 * (unsigned __int16)v7);
        uint64_t v11 = (_OWORD *)(*(void *)a3 + v8);
        long long v12 = v11[1];
        *uint64_t v10 = *v11;
        v10[1] = v12;
        ++v9;
        ++v7;
        unint64_t v13 = *(unsigned __int16 *)(a3 + 8);
        v8 += 32;
      }
      while (v9 < v13);
      LOWORD(v7) = *(_WORD *)(a2 + 8);
    }
    else
    {
      LOWORD(v13) = 0;
    }
    *(_WORD *)(a2 + 8) = v7 + v13;
  }
  return result;
}

uint64_t createLevel0ProsodicStructure(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO createLevel0ProsodicStructure()", a6, a7, a8, 0);
  uint64_t v27 = 0;
  long long v12 = a1 + 336;
  LOWORD(v13) = a1[340];
  if ((_WORD)v13)
  {
    uint64_t v14 = 0;
    unsigned __int16 v15 = 0;
    uint64_t v16 = a1 + 15;
    unsigned int v17 = a1 + 16;
    do
    {
      uint64_t v18 = v15;
      uint64_t v19 = *(void *)(*v12 + 224 * v15 + 56);
      if (v19)
      {
        if (*(_DWORD *)(v19 + 32 * *v16) == 1)
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"get phrasing for token (%d,%d)", v9, v10, v11, v14);
          uint64_t result = getPhrasingForToken((uint64_t *)a1, (uint64_t)&v27, v15);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = addLevel(*(void *)a1, (uint64_t)(a1 + 360), (uint64_t)&v27, (unsigned __int16)a1[340]);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v21 = a1 + 15;
          if (v27)
          {
            heap_Free(*(void **)(*(void *)a1 + 8), v27);
            uint64_t v27 = 0;
            LODWORD(v28) = 0;
            uint64_t v21 = a1 + 15;
          }
          goto LABEL_11;
        }
        uint64_t v22 = *v17;
        if (*(_DWORD *)(v19 + 32 * v22) == 1)
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"add syntactic node (%d,%d)", v9, v10, v11, *(unsigned __int16 *)(v19 + 32 * v22 + 8));
          uint64_t v23 = *(void *)(*((void *)a1 + 84) + 224 * v15 + 56) + 32 * (unsigned __int16)a1[16];
          uint64_t result = addNode(*(void *)a1, (uint64_t)(a1 + 360), *(_WORD *)(v23 + 8), *(_WORD *)(v23 + 10) + 1, 1, (unsigned __int16)a1[340]);
          uint64_t v21 = a1 + 16;
          if ((result & 0x80000000) != 0) {
            return result;
          }
LABEL_11:
          unsigned __int16 v15 = *(_WORD *)(*(void *)(*v12 + 224 * v15 + 56) + 32 * *v21 + 10) + 1;
          goto LABEL_21;
        }
      }
      __int16 v24 = v15;
      if (v15 < (unsigned __int16)v13)
      {
        int v25 = (uint64_t *)(*v12 + 224 * v15 + 56);
        while (1)
        {
          uint64_t v26 = *v25;
          if (*v25)
          {
            if (*(_DWORD *)(v26 + 32 * *v16) == 1 || *(_DWORD *)(v26 + 32 * *v17) == 1) {
              break;
            }
          }
          ++v18;
          v25 += 28;
          if ((unsigned __int16)v13 == v18)
          {
            unsigned __int16 v15 = v13;
            goto LABEL_20;
          }
        }
        unsigned __int16 v15 = v18;
      }
LABEL_20:
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"handle in between node (%d,%d)", v9, v10, v11, v14);
      uint64_t result = addNode(*(void *)a1, (uint64_t)(a1 + 360), v24, v15, 1, (unsigned __int16)a1[340]);
      if ((result & 0x80000000) != 0) {
        return result;
      }
LABEL_21:
      uint64_t v14 = v15;
      unsigned int v13 = (unsigned __int16)a1[340];
    }
    while (v15 < v13);
  }
  return printLevel(*((unsigned int *)a1 + 277), (const char **)a1 + 136, *((char **)a1 + 137), a1 + 552, (void *)a1 + 84, (uint64_t)(a1 + 4), (uint64_t)(a1 + 360), (uint64_t)"LEVEL0");
}

uint64_t checkStructure(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO checkStructure()", a6, a7, a8, 0);
  unint64_t v13 = *((unsigned __int16 *)a2 + 4);
  if (!*((_WORD *)a2 + 4)) {
    return 0;
  }
  uint64_t v14 = 0;
  for (uint64_t i = *a2; ; i += 16)
  {
    uint64_t v16 = v14 + 1;
    if (v14 + 1 < v13 && i[1] != i[16]) {
      break;
    }
    if (*((_DWORD *)i + 1) == 1)
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 672) + 224 * *i + 56);
      if (!v17 || !*(_DWORD *)(v17 + 32 * *(unsigned __int16 *)(a1 + 32)))
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"WARNING : wordindex=%d starts node %d but syntactic phrase doesnt start here", v10, v11, v12, *i);
        return 0;
      }
    }
    ++v14;
    if (v13 == v16) {
      return 0;
    }
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nodeindex=%d and %d do not follow in sequence", v10, v11, v12, v14);
  return 2315264000;
}

void createLevel1ProsodicStructure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v42, 0, sizeof(v42));
  memset(v41, 0, 12);
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO createLevel1ProsodicStructure()", a6, a7, a8, 0);
  if (*(_WORD *)(a1 + 728))
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unsigned __int16 v38 = 0;
    uint64_t v39 = (const char **)(a1 + 1088);
    uint64_t v15 = a1 + 736;
    uint64_t v16 = "FE_PHRASING";
    while (1)
    {
      uint64_t v17 = v14;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"processing node %d", v9, v10, v11, v13);
      if ((printNode(*(_DWORD *)(a1 + 1108), v39, *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, (unsigned __int16 *)(*(void *)(a1 + 720) + 32 * v12), (unsigned __int16)v12) & 0x80000000) != 0)break; {
      memset(v42, 0, sizeof(v42));
      }
      uint64_t v14 = v17;
      LOWORD(v42[0]) = v17;
      uint64_t v18 = *(void *)(a1 + 720);
      uint64_t v19 = v18 + 32 * v12;
      int v21 = *(_DWORD *)(v19 + 4);
      uint64_t v20 = (_DWORD *)(v19 + 4);
      WORD1(v42[0]) = *((_WORD *)v20 - 1);
      DWORD1(v42[0]) = v21;
      DWORD1(v42[1]) = 1;
      LODWORD(v13) = v13 + 1;
      if (v13 != *(unsigned __int16 *)(a1 + 728))
      {
        if (*v20 == 2)
        {
          uint64_t v22 = (_WORD *)(v18 + 32 * v12);
          if (v17 != (unsigned __int16)*v22)
          {
            memset(v42, 0, sizeof(v42));
            LOWORD(v42[0]) = v17;
            WORD1(v42[0]) = *v22;
            DWORD1(v42[0]) = 1;
            DWORD1(v42[1]) = 1;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"  adding (S) node before this token node", v9, v10, v11, 0);
            if ((printNode(*(_DWORD *)(a1 + 1108), v39, *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, (unsigned __int16 *)v42, 0) & 0x80000000) != 0)return; {
            addNewNode(*(void *)a1, v15, (uint64_t)v42, *(unsigned __int16 *)(a1 + 728));
            }
            if (v23 < 0) {
              return;
            }
            uint64_t v18 = *(void *)(a1 + 720);
          }
          __int16 v24 = (_OWORD *)(v18 + 32 * v12);
          long long v25 = v24[1];
          v42[0] = *v24;
          v42[1] = v25;
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"  token node - copy verbatim", v9, v10, v11, 0);
LABEL_20:
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"  adding new node", v26, v27, v28, 0);
          if ((printNode(*(_DWORD *)(a1 + 1108), v39, *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, (unsigned __int16 *)v42, 0) & 0x80000000) != 0)return; {
          addNewNode(*(void *)a1, v15, (uint64_t)v42, *(unsigned __int16 *)(a1 + 728));
          }
          if (v31 < 0) {
            return;
          }
          uint64_t v14 = WORD1(v42[0]);
          unsigned __int16 v38 = v13;
        }
        else
        {
          __int16 v37 = v13;
          uint64_t v40 = 0;
          uint64_t v13 = (uint64_t)v16;
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"  apply general rules on WordIdx %d", v9, v10, v11, *(unsigned __int16 *)(v18 + 32 * v12));
          uint64_t v29 = 0;
          unint64_t v30 = 0;
          WORD2(v41[0]) = *(_WORD *)(*(void *)(a1 + 720) + 32 * v12);
          LODWORD(v41[0]) = 4;
          *(_DWORD *)((char *)v41 + 6) = 0;
          while (!HIDWORD(v40))
          {
            if (v30 >= *(unsigned __int16 *)(a1 + 168)) {
              goto LABEL_23;
            }
            if ((matchMAPRULE2NUM_TRule(*(unsigned int *)(a1 + 1108), v39, (_WORD *)(a1 + 1104), *(char **)(a1 + 1096), a1 + 8, a1 + 672, (_DWORD *)(*(void *)(a1 + 160) + v29), (uint64_t)v41, (int *)&v40 + 1, &v40) & 0x80000000) != 0)return; {
            if (HIDWORD(v40) == 1)
            }
              log_OutText(*(void *)(*(void *)a1 + 32), v13, 5, 0, (uint64_t)"  general rule %d FIRED -> set bndWeight = %d.%d", v26, v27, v28, v30);
            ++v30;
            v29 += 32;
          }
          if (HIDWORD(v40) == 1)
          {
            HIDWORD(v42[0]) = v40;
            uint64_t v15 = a1 + 736;
            uint64_t v16 = (const char *)v13;
            LOWORD(v13) = v37;
            goto LABEL_20;
          }
LABEL_23:
          uint64_t v16 = (const char *)v13;
          log_OutText(*(void *)(*(void *)a1 + 32), v13, 5, 0, (uint64_t)"  no rules fire", v26, v27, v28, 0);
          uint64_t v15 = a1 + 736;
          uint64_t v14 = v17;
        }
      }
      uint64_t v13 = ++v12;
      if (v12 >= *(unsigned __int16 *)(a1 + 728)) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
    unsigned __int16 v38 = 0;
LABEL_27:
    int v32 = *(unsigned __int16 *)(a1 + 680);
    if (v14 == v32) {
      goto LABEL_30;
    }
    memset((char *)v42 + 4, 0, 28);
    LOWORD(v42[0]) = v14;
    WORD1(v42[0]) = v32;
    *(void *)((char *)v42 + 4) = *(void *)(*(void *)(a1 + 720) + 32 * v38 + 4);
    FLOATSUR_SET_INT((_WORD *)((unint64_t)v42 | 0xC), 50, 0);
    DWORD1(v42[1]) = 1;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  adding end node", v33, v34, v35, 0);
    if ((printNode(*(_DWORD *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, (unsigned __int16 *)v42, 0) & 0x80000000) == 0)
    {
      addNewNode(*(void *)a1, a1 + 736, (uint64_t)v42, *(unsigned __int16 *)(a1 + 728));
      if ((v36 & 0x80000000) == 0) {
LABEL_30:
      }
        printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, a1 + 736, (uint64_t)"LEVEL1");
    }
  }
}

uint64_t setLevel1StructureWeights(uint64_t a1)
{
  uint64_t v83 = 0;
  unsigned __int16 v2 = (unsigned __int16 *)(a1 + 8);
  long long v82 = 0uLL;
  BOOL v77 = isStrSetting(a1 + 8, "PHRASE_WEIGHT_ALG", "AVERAGE");
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO setLevel1StructureWeights(bApplyWeighting=%d)", v3, v4, v5, 0);
  uint64_t v9 = (void *)(a1 + 736);
  if (!*(_WORD *)(a1 + 744)) {
    return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), (uint64_t)v2, (uint64_t)v9, (uint64_t)"AFTER SET PHRASEWEIGHT");
  }
  uint64_t v10 = 0;
  uint64_t v11 = (const char **)(a1 + 1088);
  unint64_t v12 = (_WORD *)(a1 + 1104);
  while (1)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"processing node %d", v6, v7, v8, v10);
    uint64_t result = printNode(*(_DWORD *)(a1 + 1108), v11, *(char **)(a1 + 1096), v12, (void *)(a1 + 672), (uint64_t)v2, (unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v10), (unsigned __int16)v10);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (*(_DWORD *)(*v9 + 32 * v10 + 4) == 2)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip token node", v6, v7, v8, 0);
    }
    else
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 672) + 224 * *(unsigned __int16 *)(*v9 + 32 * v10) + 56);
      if (v14 && *(_DWORD *)(v14 + 32 * *(unsigned __int16 *)(a1 + 32)) == 1)
      {
        uint64_t v78 = v12;
        unsigned __int16 v79 = v11;
        int v81 = 0;
        int v80 = 0;
        FLOATSUR_SET_INT(&v81, 0, 0);
        FLOATSUR_SET_INT(&v80, 0, 0);
        uint64_t v18 = (unsigned __int16 *)(*v9 + 32 * v10);
        unint64_t v19 = *v18;
        if (v19 < v18[1])
        {
          do
          {
            FLOATSUR_PLUS_INT(&v80, (unsigned __int16 *)&v80, *(_WORD *)(*(void *)(a1 + 672) + 224 * v19 + 24), 0);
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  word[%d] : nodeSyllableWeight=%d.%d (word[%d].nsyll=%d)", v20, v21, v22, v19);
            uint64_t v23 = 0;
            unint64_t v24 = 0;
            HIDWORD(v83) = 0;
            do
            {
              if (v24 >= *(unsigned __int16 *)(a1 + 216)) {
                break;
              }
              WORD2(v82) = v19;
              LODWORD(v82) = 1;
              *(_DWORD *)((char *)&v82 + 6) = 0;
              uint64_t result = matchMMAPREGEX2NUM_TRule(v2, a1 + 672, (unsigned __int16 *)(*(void *)(a1 + 208) + v23), (unsigned __int16 *)&v82, (int *)&v83 + 1, (unsigned __int16 *)&v81, v16, v17);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              int v25 = HIDWORD(v83);
              if (HIDWORD(v83) == 1)
              {
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  word[%d] : pos weight rule %d FIRED nodePOSWeight=%d.%d", v15, v16, v17, v19);
                int v25 = HIDWORD(v83);
              }
              ++v24;
              v23 += 10;
            }
            while (!v25);
            ++v19;
          }
          while (v19 < *(unsigned __int16 *)(*v9 + 32 * v10 + 2));
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  unweighted nodePOSWeight = %d.%d", v15, v16, v17, (unsigned __int16)v81);
        if (v77) {
          FLOATSUR_TIMES(&v81, (unsigned __int16 *)&v81, (unsigned __int16 *)(a1 + 200));
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  weighted nodePOSWeight = %d.%d", v26, v27, v28, (unsigned __int16)v81);
        uint64_t v32 = 0;
        unint64_t v33 = 0;
        HIDWORD(v83) = 0;
        do
        {
          if (v33 >= *(unsigned __int16 *)(a1 + 240)) {
            break;
          }
          matchMAPNUMNUM_TRule(*(void *)(a1 + 232) + v32, (unsigned __int16 *)&v80, (_DWORD *)&v83 + 1);
          int v34 = HIDWORD(v83);
          if (HIDWORD(v83) == 1)
          {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  syll weight rule %d FIRED nodeSyllableWeight=%d.%d", v29, v30, v31, v33);
            int v34 = HIDWORD(v83);
          }
          ++v33;
          v32 += 12;
        }
        while (!v34);
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  unweighted nodeSyllableWeight = %d.%d", v29, v30, v31, (unsigned __int16)v80);
        if (v77) {
          FLOATSUR_TIMES(&v80, (unsigned __int16 *)&v80, (unsigned __int16 *)(a1 + 224));
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  weighted nodeSyllableWeight = %d.%d", v35, v36, v37, (unsigned __int16)v80);
        if (*(_WORD *)(a1 + 256))
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  apply %d gen weight rules", v38, v39, v40, *(unsigned __int16 *)(a1 + 256));
          uint64_t v41 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (4 * *(unsigned __int16 *)(a1 + 256)) | 1);
          if (!v41)
          {
            log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v42, v38, v39, v40, v74);
            return 2315264010;
          }
          uint64_t v43 = *(void *)(a1 + 736);
          unsigned __int16 v46 = (unsigned __int16 *)(v43 + 32 * v10);
          unsigned int v44 = *v46;
          unsigned int v45 = v46[1];
          LODWORD(v46) = *(unsigned __int16 *)(a1 + 256);
          if (v44 < v45)
          {
            int v47 = *(unsigned __int16 *)(a1 + 256);
            uint64_t v75 = v9;
            do
            {
              if (v47)
              {
                uint64_t v48 = v41;
                unint64_t v49 = 0;
                __int16 v76 = v44;
                while (2)
                {
                  HIDWORD(v83) = 0;
                  WORD2(v82) = v44;
                  LODWORD(v82) = 4;
                  *(_DWORD *)((char *)&v82 + 6) = 0;
                  unint64_t v50 = *(unsigned __int16 *)(*(void *)(a1 + 248) + 12 * v49 + 8);
                  uint64_t v51 = 32 * v50;
                  do
                  {
                    if (v50 >= *(unsigned __int16 *)(*(void *)(a1 + 248) + 12 * v49 + 10)) {
                      break;
                    }
                    if ((matchMAPRULE2NUM_TRule(*(unsigned int *)(a1 + 1108), v79, v78, *(char **)(a1 + 1096), (uint64_t)v2, a1 + 672, (_DWORD *)(*(void *)(a1 + 264) + v51), (uint64_t)&v82, (int *)&v83 + 1, &v83) & 0x80000000) != 0)
                    {
                      heap_Free(*(void **)(*(void *)a1 + 8), v48);
                      uint64_t v9 = v75;
                      return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), (uint64_t)v2, (uint64_t)v9, (uint64_t)"AFTER SET PHRASEWEIGHT");
                    }
                    int v52 = HIDWORD(v83);
                    if (HIDWORD(v83) == 1)
                    {
                      *(_DWORD *)(v48 + 4 * v49) = v83;
                      int v52 = HIDWORD(v83);
                      if (HIDWORD(v83) == 1)
                      {
                        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  general weight rule %d FIRED genRuleValues[%d]=%d.%d", v38, v39, v40, v50);
                        int v52 = HIDWORD(v83);
                      }
                    }
                    ++v50;
                    v51 += 32;
                  }
                  while (!v52);
                  unsigned __int16 v46 = (unsigned __int16 *)*(unsigned __int16 *)(a1 + 256);
                  ++v49;
                  LOWORD(v44) = v76;
                  if (v49 < (unint64_t)v46) {
                    continue;
                  }
                  break;
                }
                uint64_t v9 = v75;
                uint64_t v43 = *v75;
                int v47 = *(unsigned __int16 *)(a1 + 256);
                uint64_t v41 = v48;
              }
              LOWORD(v44) = *(_WORD *)(*(void *)(*(void *)(a1 + 672) + 224 * (unsigned __int16)v44 + 56)
                                     + 32 * *(unsigned __int16 *)(a1 + 32)
                                     + 10)
                          + 1;
            }
            while (*(unsigned __int16 *)(v43 + 32 * v10 + 2) > (unsigned __int16)v44);
          }
          unsigned __int16 v53 = v9;
          if (v46)
          {
            unint64_t v54 = 0;
            uint64_t v55 = 4;
            uint64_t v56 = v41;
            int v57 = (unsigned __int16 *)v41;
            do
            {
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  unweighted genRuleValues[%d]  = %d.%d", v38, v39, v40, v54);
              if (v77) {
                FLOATSUR_TIMES(v57, v57, (unsigned __int16 *)(*(void *)(a1 + 248) + v55));
              }
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  weighted genRuleValues[%d]  = %d.%d", v58, v59, v60, v54++);
              v57 += 2;
              v55 += 12;
            }
            while (v54 < *(unsigned __int16 *)(a1 + 256));
          }
          else
          {
            uint64_t v56 = v41;
          }
        }
        else
        {
          unsigned __int16 v53 = v9;
          uint64_t v56 = 0;
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  compute final phraseweight = %d.%d", v38, v39, v40, *(unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v10 + 8));
        FLOATSUR_PLUS((_WORD *)&v82 + 6, (unsigned __int16 *)&v81, (unsigned __int16 *)&v80);
        int v61 = (unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v10 + 8);
        FLOATSUR_PLUS(v61, v61, (unsigned __int16 *)&v82 + 6);
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  add weighted nodePOSWeight(%d.%d) and nodeSyllableWeight(%d.%d) -> %d.%d", v62, v63, v64, (unsigned __int16)v81);
        if (*(_WORD *)(a1 + 256))
        {
          unint64_t v68 = 0;
          uint64_t v69 = (unsigned __int16 *)v56;
          do
          {
            uint64_t v70 = (unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v10 + 8);
            FLOATSUR_PLUS(v70, v70, v69);
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  add weighted genRuleValues[%d](%d.%d) -> %d.%d", v71, v72, v73, v68++);
            v69 += 2;
          }
          while (v68 < *(unsigned __int16 *)(a1 + 256));
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  final phraseweight = %d.%d", v65, v66, v67, *(unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v10 + 8));
        if (v56) {
          heap_Free(*(void **)(*(void *)a1 + 8), v56);
        }
        uint64_t v9 = v53;
        unint64_t v12 = v78;
        uint64_t v11 = v79;
      }
    }
    if (++v10 >= (unint64_t)*(unsigned __int16 *)(a1 + 744)) {
      return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), (uint64_t)v2, (uint64_t)v9, (uint64_t)"AFTER SET PHRASEWEIGHT");
    }
  }
}

uint64_t setLevel1Boundaries(uint64_t a1)
{
  *(_DWORD *)uint64_t v60 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  int v55 = 0;
  unsigned __int16 v2 = (unsigned __int16 *)(a1 + 400);
  int v54 = 0;
  int v52 = (unsigned __int16 *)(a1 + 396);
  uint64_t v53 = a1 + 8;
  FLOATSUR_PLUS((_WORD *)&v58 + 2, (unsigned __int16 *)(a1 + 396), (unsigned __int16 *)(a1 + 400));
  FLOATSUR_PLUS(v60, (unsigned __int16 *)(a1 + 392), (unsigned __int16 *)&v58 + 2);
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO setLevel1Boundaries(threshold_bnd_val_weak=%d threshold_weak_frag=%d threshold_bnd_val_strong=%d)", v3, v4, v5, *(unsigned __int16 *)(a1 + 380));
  getLowestBnd(a1, (unsigned __int16 *)&v59);
  uint64_t v6 = (unsigned __int16)v59;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"START lowestBnd : node %d", v7, v8, v9, (unsigned __int16)v59);
  if (HIDWORD(v59) == 1
    && FLOATSUR_LT((unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v6 + 12), (unsigned __int16 *)(a1 + 376)))
  {
    unsigned __int16 v13 = 0;
    uint64_t v14 = (void *)(a1 + 736);
    uint64_t v51 = (unsigned __int16 *)(a1 + 388);
    unsigned __int16 v15 = v6;
    while (1)
    {
      unsigned int v16 = v15;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"LOOP[%d] lowestBnd : node %d (bndWeight=%d.%d)", v10, v11, v12, v13);
      FLOATSUR_SET((_DWORD *)&v56 + 1, (_DWORD *)(*(void *)(a1 + 736) + 32 * v6 + 8));
      FLOATSUR_SET_INT(&v56, 0, 0);
      uint64_t v17 = v16 + 1;
      if (v17 < *(unsigned __int16 *)(a1 + 744)) {
        FLOATSUR_SET(&v56, (_DWORD *)(*v14 + 32 * v17 + 8));
      }
      FLOATSUR_SET(&v54, (_DWORD *)(*(void *)(a1 + 736) + 32 * v6 + 12));
      FLOATSUR_TIMES((_WORD *)&v58 + 2, (unsigned __int16 *)&v56 + 2, (unsigned __int16 *)(a1 + 392));
      FLOATSUR_TIMES(&v58, (unsigned __int16 *)&v56, v52);
      FLOATSUR_TIMES((_WORD *)&v57 + 2, (unsigned __int16 *)&v54, v2);
      FLOATSUR_PLUS(&v57, (unsigned __int16 *)&v58 + 2, (unsigned __int16 *)&v58);
      FLOATSUR_PLUS(&v57, (unsigned __int16 *)&v57, (unsigned __int16 *)&v57 + 2);
      FLOATSUR_DIV((_WORD *)&v58 + 2, (unsigned __int16 *)&v57, v60);
      FLOATSUR_TIMES_INT(&v55, (unsigned __int16 *)&v58 + 2, 0xAu, 0);
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  weighted mean bndVal = %d.%d (thisphraseWeight=%d.%d thisBndWeight=%d.%d nextphraseWeight=%d.%d)", v18, v19, v20, (unsigned __int16)v55);
      if (!FLOATSUR_LT((unsigned __int16 *)&v55, (unsigned __int16 *)(a1 + 380))
        && !FLOATSUR_LT((unsigned __int16 *)&v56 + 2, v51)
        && !FLOATSUR_LT((unsigned __int16 *)&v56, v51))
      {
        break;
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  [bnd_val < threshold_weak(%d.%d) or one thisphraseWeight or nextphraseWeight < threshold_weak_frag(%d.%d)] remove node (merge %d and %d)", v21, v22, v23, *(unsigned __int16 *)(a1 + 380));
      if (v17 == *(unsigned __int16 *)(a1 + 744)) {
        goto LABEL_10;
      }
      uint64_t v27 = (_WORD *)(*v14 + 32 * v6);
      *(_WORD *)(*v14 + 32 * (v16 + 1)) = *v27;
      FLOATSUR_PLUS(v27 + 20, v27 + 20, v27 + 4);
      removeNode((unsigned __int16 *)(a1 + 736), v16);
LABEL_12:
      getLowestBnd(a1, (unsigned __int16 *)&v59);
      uint64_t v6 = (unsigned __int16)v59;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"END LOOP lowestBnd : node %d", v28, v29, v30, (unsigned __int16)v59);
      if (HIDWORD(v59) != 1) {
        goto LABEL_23;
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"ITERATION %d", v31, v32, v33, v13);
      uint64_t result = printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), v53, a1 + 736, (uint64_t)"ITER");
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if (FLOATSUR_EQUAL_INT((unsigned __int16 *)(*v14 + 32 * v6 + 12), 0, 0))
      {
        *(_DWORD *)(*(void *)(a1 + 736) + 32 * v6 + 24) = 1;
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  NO CHANGE - marked node as processed", v35, v36, v37, 0);
      }
      ++v13;
      BOOL v38 = FLOATSUR_LT((unsigned __int16 *)(*v14 + 32 * v6 + 12), (unsigned __int16 *)(a1 + 376));
      unsigned __int16 v15 = v6;
      if (!v38) {
        goto LABEL_23;
      }
    }
    if (FLOATSUR_LT((unsigned __int16 *)&v55, (unsigned __int16 *)(a1 + 384)))
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  set WEAK BND", v39, v40, v41, 0);
      uint64_t v42 = *(void *)(a1 + 736) + 32 * v6;
      int v43 = 3;
    }
    else
    {
      if (!FLOATSUR_GTOREQUAL((unsigned __int16 *)&v55, (unsigned __int16 *)(a1 + 384)))
      {
LABEL_10:
        *(_DWORD *)(*(void *)(a1 + 736) + 32 * v6 + 24) = 1;
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  NO CHANGE - marked node as processed", v24, v25, v26, 0);
        goto LABEL_12;
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  set STRONG BND", v24, v25, v26, 0);
      uint64_t v42 = *(void *)(a1 + 736) + 32 * v6;
      int v43 = 4;
    }
    *(_DWORD *)(v42 + 20) = v43;
    *(_DWORD *)(v42 + 16) = v55;
    goto LABEL_10;
  }
LABEL_23:
  if (*(_WORD *)(a1 + 744))
  {
    unint64_t v44 = 0;
    uint64_t v45 = *(void *)(a1 + 736);
    uint64_t v46 = 20;
    do
    {
      if (*(_DWORD *)(v45 + v46) <= 1u)
      {
        BOOL v47 = FLOATSUR_GT((unsigned __int16 *)(v45 + v46 - 8), (unsigned __int16 *)(a1 + 376));
        uint64_t v45 = *(void *)(a1 + 736);
        if (v47)
        {
          *(_DWORD *)(v45 + v46) = 4;
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  set node %d STRONG BND", v48, v49, v50, v44);
          uint64_t v45 = *(void *)(a1 + 736);
        }
      }
      *(unsigned char *)(*(void *)(a1 + 672) + 224 * *(unsigned __int16 *)(v45 + v46 - 18) - 151) = *(_DWORD *)(v45 + v46);
      ++v44;
      v46 += 32;
    }
    while (v44 < *(unsigned __int16 *)(a1 + 744));
  }
  return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), v53, a1 + 736, (uint64_t)"AFTER SET BOUNDARIES");
}

uint64_t getLowestBnd(uint64_t result, unsigned __int16 *a2)
{
  *a2 = 0;
  *((_DWORD *)a2 + 1) = 0;
  unint64_t v2 = *(unsigned __int16 *)(result + 744);
  if (*(_WORD *)(result + 744))
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    for (uint64_t i = 24; *(_DWORD *)(*(void *)(result + 736) + i) == 1; i += 32)
    {
      if (v2 == ++v5) {
        return result;
      }
    }
    int v7 = (unsigned __int16)v5;
    *a2 = v5;
    *((_DWORD *)a2 + 1) = 1;
    unsigned int v8 = (unsigned __int16)v5;
    if (v2 > (unsigned __int16)v5)
    {
      uint64_t v9 = i - 24;
      unsigned int v8 = (unsigned __int16)v5;
      do
      {
        uint64_t v10 = *(void *)(v4 + 736);
        if (*(_DWORD *)(v10 + v9 + 20) == 1)
        {
          if ((uint64_t result = FLOATSUR_LT((unsigned __int16 *)(v10 + v9 + 12), (unsigned __int16 *)(v10 + 32 * *a2 + 12)),
                uint64_t v11 = *(void *)(v4 + 736),
                result)
            && !*(_DWORD *)(v11 + v9 + 24)
            || (uint64_t result = FLOATSUR_LT_INT((unsigned __int16 *)(v11 + v9 + 12), 0, 0), result))
          {
            unsigned int v8 = (unsigned __int16)v5;
            *a2 = v5;
            *((_DWORD *)a2 + 1) = 1;
          }
        }
        ++v5;
        unint64_t v2 = *(unsigned __int16 *)(v4 + 744);
        v9 += 32;
      }
      while (v5 < v2);
    }
    if (v8 == v7 && v8 < v2 && !*(_DWORD *)(*(void *)(v4 + 736) + i))
    {
      *a2 = v7;
      *((_DWORD *)a2 + 1) = 1;
    }
  }
  return result;
}

void getProsodicStructure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  if ((createLevel0ProsodicStructure((_WORD *)a1, a2, a3, a4, a5, a6, a7, a8) & 0x80000000) == 0
    && (checkStructure(a1, (unsigned __int16 **)(a1 + 720), v9, v10, v11, v12, v13, v14) & 0x80000000) == 0)
  {
    if (*(void *)(a1 + 928))
    {
      if ((simplifiedTokenPhrasing(*(void *)a1, (void *)(a1 + 720), (void *)(a1 + 672), (unsigned __int16 *)(a1 + 8)) & 0x80000000) == 0)
      {
        uint64_t v22 = *(void *)a1;
        threePassIgtreePhrasing(v22, a1 + 720, (uint64_t *)(a1 + 672), a1 + 8, (uint64_t *)(a1 + 752));
      }
    }
    else if (*(void *)(a1 + 816))
    {
      if ((simplifiedTokenPhrasing(*(void *)a1, (void *)(a1 + 720), (void *)(a1 + 672), (unsigned __int16 *)(a1 + 8)) & 0x80000000) == 0)
      {
        uint64_t v23 = *(void *)a1;
        twoPassIgtreePhrasing(v23, a1 + 720, (void *)(a1 + 672), a1 + 8, (uint64_t *)(a1 + 752));
      }
    }
    else if (*(void *)(a1 + 760))
    {
      if ((simplifiedTokenPhrasing(*(void *)a1, (void *)(a1 + 720), (void *)(a1 + 672), (unsigned __int16 *)(a1 + 8)) & 0x80000000) == 0)
      {
        uint64_t v24 = *(void *)a1;
        singlePassIgtreePhrasing(v24, a1 + 720, (void *)(a1 + 672), a1 + 8, (uint64_t *)(a1 + 752));
      }
    }
    else
    {
      createLevel1ProsodicStructure(a1, v15, v16, v17, v18, v19, v20, v21);
      if ((v31 & 0x80000000) == 0
        && (checkStructure(a1, (unsigned __int16 **)(a1 + 736), v25, v26, v27, v28, v29, v30) & 0x80000000) == 0
        && (setLevel1StructureWeights(a1) & 0x80000000) == 0)
      {
        setLevel1Boundaries(a1);
      }
    }
  }
}

double freeProsodicStructure(void *a1)
{
  uint64_t v2 = a1[90];
  if (v2)
  {
    heap_Free(*(void **)(*a1 + 8), v2);
    a1[90] = 0;
  }
  uint64_t v3 = a1[92];
  if (v3) {
    heap_Free(*(void **)(*a1 + 8), v3);
  }
  double result = 0.0;
  *((_OWORD *)a1 + 45) = 0u;
  *((_OWORD *)a1 + 46) = 0u;
  return result;
}

uint64_t getPwPredict(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, _WORD *a6, uint64_t a7)
{
  uint64_t v7 = *a5;
  if (result)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    int v10 = 0;
    __int16 v11 = 1;
    uint64_t v12 = result;
    while (1)
    {
      uint64_t v13 = 0;
      __int16 v14 = 0;
      uint64_t v15 = v9;
      float v17 = 0.0;
      do
      {
        uint64_t v16 = a2 + 28 * (unsigned __int16)(v10 + v8);
        if (v17 < *(float *)(v16 + 4 * v13))
        {
          float v17 = *(float *)(v16 + 4 * v13);
          __int16 v14 = v13;
        }
        ++v13;
      }
      while (v13 != 7);
      if (a3 > (unsigned __int16)v10 && v8 == *(unsigned __int16 *)(a4 + 2 * (unsigned __int16)v10))
      {
        uint64_t v18 = 0;
        __int16 v14 = 0;
        int v19 = v10 + 1;
        uint64_t v20 = a2 + 28 * (unsigned __int16)(v10 + v11);
        float v21 = 0.0;
        do
        {
          if (v21 < *(float *)(v20 + 4 * v18))
          {
            float v21 = *(float *)(v20 + 4 * v18);
            __int16 v14 = v18;
          }
          ++v18;
        }
        while (v18 != 7);
        double result = 0;
        int v10 = v19;
      }
      else
      {
        double result = 1;
      }
      int v22 = *(_DWORD *)(a7 + 4 * v8);
      BOOL v23 = v22 == 1 || v14 == 0;
      if (v23 || v14 == 3) {
        break;
      }
      uint64_t v25 = (_WORD *)(v7 + 2 * v8);
      *uint64_t v25 = 0;
      if ((result & 1) == 0)
      {
        int v26 = 1;
LABEL_30:
        *uint64_t v25 = 1;
        uint64_t v9 = (v15 + v26);
        goto LABEL_31;
      }
      uint64_t v9 = v15;
LABEL_31:
      ++v8;
      ++v11;
      if (v8 == v12)
      {
        uint64_t v27 = v12 - 1;
        goto LABEL_34;
      }
    }
    uint64_t v9 = (v15 + 1);
    *(_WORD *)(v7 + 2 * v8) = 1;
    if (!v8) {
      goto LABEL_31;
    }
    if (v22 != 1) {
      goto LABEL_31;
    }
    uint64_t v25 = (_WORD *)(v7 + 2 * (v8 - 1));
    double result = (unsigned __int16)*v25;
    if (*v25) {
      goto LABEL_31;
    }
    int v26 = 2;
    goto LABEL_30;
  }
  LOWORD(v9) = 0;
  uint64_t v27 = -1;
LABEL_34:
  if (*(_WORD *)(v7 + 2 * v27) != 1)
  {
    LOWORD(v9) = v9 + 1;
    *(_WORD *)(v7 + 2 * v27) = 1;
  }
  *a6 = v9;
  return result;
}

uint64_t storeResult(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6, _WORD *a7, uint64_t a8, unsigned __int8 a9, const char **a10)
{
  uint64_t v52 = *a6;
  if (!a3)
  {
LABEL_50:
    uint64_t result = 0;
    *a6 = v52;
    return result;
  }
  uint64_t v10 = a8;
  uint64_t v12 = 0;
  unsigned int v50 = 0;
  __int16 v13 = 0;
  unsigned __int16 v51 = 0;
  if (a9) {
    BOOL v14 = a10 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  char v15 = v14;
  char v48 = v15;
  uint64_t v47 = a3;
  uint64_t v16 = a2 + 64;
  while (1)
  {
    if (v48)
    {
LABEL_13:
      uint64_t v20 = (_WORD *)(a4 + 2 * v12);
      int v21 = (unsigned __int16)*v20;
      int v22 = 1;
      if (*v20)
      {
        uint64_t v23 = v52;
        unsigned int v24 = v50;
        if (v21 == 1) {
          goto LABEL_31;
        }
        if (!*(_DWORD *)v10) {
          goto LABEL_49;
        }
        goto LABEL_16;
      }
      uint64_t v23 = v52;
      unsigned int v24 = v50;
    }
    else
    {
      float v17 = *(char **)(a2 + 40 * v12);
      uint64_t v19 = a9;
      uint64_t v18 = a10;
      while (!strstr(v17, *v18))
      {
        ++v18;
        if (!--v19) {
          goto LABEL_13;
        }
      }
      int v22 = 0;
      uint64_t v20 = (_WORD *)(a4 + 2 * v12);
      uint64_t v23 = v52;
      unsigned int v24 = v50;
      if (*v20) {
        goto LABEL_31;
      }
      LOBYTE(v21) = 1;
    }
    if (!*(_DWORD *)v10 || v24 >= *(unsigned __int16 *)(v10 + 4))
    {
      if (!v22) {
        goto LABEL_31;
      }
LABEL_30:
      ++v13;
      goto LABEL_49;
    }
    if (*(_DWORD *)(a2 + 40 * v12 + 32) + 1 == *(_DWORD *)(*(void *)(v10 + 8) + 4 * v24)) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) == 0) {
      goto LABEL_30;
    }
    if ((v22 & 1) == 0) {
      break;
    }
LABEL_16:
    if (v24 < *(unsigned __int16 *)(v10 + 4)
      && *(_DWORD *)(a2 + 40 * v12 + 32) + 1 == *(_DWORD *)(*(void *)(v10 + 8) + 4 * v24))
    {
      LOBYTE(v22) = 1;
      goto LABEL_31;
    }
LABEL_49:
    ++v12;
    v16 += 40;
    if (v12 == v47) {
      goto LABEL_50;
    }
  }
  LOBYTE(v22) = 0;
LABEL_31:
  unsigned __int16 v25 = v13 + 1;
  *(_WORD *)(v23 + 184 * v51 + 8) = v25;
  if (*(_DWORD *)v10
    && v24 < *(unsigned __int16 *)(v10 + 4)
    && *(_DWORD *)(a2 + 40 * v12 + 32) + 1 == *(_DWORD *)(*(void *)(v10 + 8) + 4 * v24))
  {
    if (!*v20)
    {
      uint64_t v26 = heap_Realloc(*(uint64_t **)(a1 + 8), v23, 184 * (unsigned __int16)*a7 + 184);
      if (!v26) {
        return 2315264010;
      }
      uint64_t v23 = v26;
      uint64_t v27 = v26 + 184 * (unsigned __int16)*a7;
      *(void *)(v27 + 176) = 0;
      *(_OWORD *)(v27 + 144) = 0u;
      *(_OWORD *)(v27 + 160) = 0u;
      *(_OWORD *)(v27 + 112) = 0u;
      *(_OWORD *)(v27 + 128) = 0u;
      *(_OWORD *)(v27 + 80) = 0u;
      *(_OWORD *)(v27 + 96) = 0u;
      *(_OWORD *)(v27 + 48) = 0u;
      *(_OWORD *)(v27 + 64) = 0u;
      *(_OWORD *)(v27 + 16) = 0u;
      *(_OWORD *)(v27 + 32) = 0u;
      *(_OWORD *)uint64_t v27 = 0u;
      ++*a7;
      *uint64_t v20 = 1;
      unsigned int v24 = v50;
    }
    ++v24;
  }
  uint64_t v28 = (_DWORD *)(v23 + 184 * v51 + 72);
  uint64_t v52 = v23;
  unsigned int v50 = v24;
  if (*(_WORD *)(a5 + 2 * v12) == 1)
  {
    _DWORD *v28 = 1;
  }
  else
  {
    _DWORD *v28 = 0;
    if ((v22 & 1) == 0 && !*v20)
    {
      uint64_t v29 = heap_Realloc(*(uint64_t **)(a1 + 8), v23, 184 * (unsigned __int16)*a7 + 184);
      if (!v29) {
        return 2315264010;
      }
      uint64_t v52 = v29;
      uint64_t v30 = v29 + 184 * (unsigned __int16)*a7;
      *(void *)(v30 + 176) = 0;
      *(_OWORD *)(v30 + 144) = 0u;
      *(_OWORD *)(v30 + 160) = 0u;
      *(_OWORD *)(v30 + 112) = 0u;
      *(_OWORD *)(v30 + 128) = 0u;
      *(_OWORD *)(v30 + 80) = 0u;
      *(_OWORD *)(v30 + 96) = 0u;
      *(_OWORD *)(v30 + 48) = 0u;
      *(_OWORD *)(v30 + 64) = 0u;
      *(_OWORD *)(v30 + 16) = 0u;
      *(_OWORD *)(v30 + 32) = 0u;
      *(_OWORD *)uint64_t v30 = 0u;
      ++*a7;
    }
  }
  int v31 = v25;
  uint64_t v32 = 2 * v25;
  uint64_t v33 = heap_Alloc(*(void *)(a1 + 8), v32);
  uint64_t v37 = (uint64_t *)(v52 + 184 * v51);
  *uint64_t v37 = v33;
  if (v33)
  {
    *(void *)(v52 + 184 * v51 + 56) = &byte_20D5A22AE;
    if (v25)
    {
      uint64_t v38 = 0;
      uint64_t v39 = (__int16 *)(v16 - 40 * v31);
      do
      {
        __int16 v40 = *v39;
        v39 += 20;
        *(_WORD *)(*v37 + v38) = v40;
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pw:%d , tid=%d", v34, v35, v36, v51);
        v38 += 2;
      }
      while (v32 != v38);
    }
    __int16 v13 = 0;
    ++v51;
    uint64_t v10 = a8;
    goto LABEL_49;
  }
  return 2315264010;
}

uint64_t storePwResult(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (!a3) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __int16 v10 = 0;
  int v11 = 0;
  uint64_t v12 = *a5;
  uint64_t v13 = a3;
  uint64_t v14 = a2 + 64;
  uint64_t v24 = a4;
  uint64_t v25 = a3;
  while (*(_WORD *)(a4 + 2 * v8) != 1)
  {
    if (*(_WORD *)(a4 + 2 * v8))
    {
      if (!*(_DWORD *)a6) {
        goto LABEL_22;
      }
    }
    else if (!*(_DWORD *)a6 {
           || *(unsigned __int16 *)(a6 + 4) > (unsigned __int16)v9
    }
           && *(_DWORD *)(a2 + 40 * v8 + 32) == *(_DWORD *)(*(void *)(a6 + 8) + 4 * (unsigned __int16)v9))
    {
      ++v10;
      goto LABEL_22;
    }
    if (*(unsigned __int16 *)(a6 + 4) > (unsigned __int16)v9
      && *(_DWORD *)(a2 + 40 * v8 + 32) == *(_DWORD *)(*(void *)(a6 + 8) + 4 * (unsigned __int16)v9))
    {
      break;
    }
LABEL_22:
    ++v8;
    v14 += 40;
    if (v8 == v13) {
      return 0;
    }
  }
  uint64_t v27 = v9;
  unsigned __int16 v15 = v10 + 1;
  int v16 = v11;
  unsigned int v17 = (unsigned __int16)v11;
  uint64_t v18 = v12 + 184 * (unsigned __int16)v11;
  *(_WORD *)(v18 + 8) = v15;
  uint64_t v19 = v15;
  uint64_t v20 = (_WORD *)heap_Alloc(*(void *)(a1 + 8), 2 * v15);
  *(void *)uint64_t v18 = v20;
  if (v20)
  {
    *(void *)(v12 + 184 * v17 + 56) = &byte_20D5A22AE;
    if (v19)
    {
      int v21 = (__int16 *)(v14 - 40 * (int)v19);
      do
      {
        __int16 v22 = *v21;
        v21 += 20;
        *v20++ = v22;
        --v19;
      }
      while (v19);
    }
    a4 = v24;
    uint64_t v13 = v25;
    uint64_t v9 = v27;
    if (*(_DWORD *)a6 && *(unsigned __int16 *)(a6 + 4) > (unsigned __int16)v27)
    {
      if (*(_DWORD *)(a2 + 40 * v8 + 32) == *(_DWORD *)(*(void *)(a6 + 8) + 4 * (unsigned __int16)v27)) {
        uint64_t v9 = (v27 + 1);
      }
      else {
        uint64_t v9 = v27;
      }
    }
    __int16 v10 = 0;
    int v11 = v16 + 1;
    goto LABEL_22;
  }
  return 2315264010;
}

uint64_t pw_nn_process(uint64_t a1, uint64_t ****a2, uint64_t *a3, uint64_t a4, uint64_t *a5, _WORD *a6, uint64_t a7, void *a8, int a9, uint64_t a10, unsigned __int8 a11, const char **a12, int a13)
{
  uint64_t v69 = 0;
  v77[0] = *a5;
  int v76 = 0;
  uint64_t v20 = 2315264010;
  uint64_t v74 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v21 = 2 * a4;
  uint64_t v22 = heap_Alloc(*(void *)(a1 + 8), v21);
  uint64_t v75 = v22;
  if (!v22)
  {
    uint64_t v28 = 0;
    uint64_t v24 = 0;
    goto LABEL_66;
  }
  uint64_t v23 = (_WORD *)v22;
  uint64_t v66 = a2;
  uint64_t v24 = heap_Alloc(*(void *)(a1 + 8), v21);
  if (!v24) {
    goto LABEL_65;
  }
  uint64_t v67 = a3;
  uint64_t v65 = a5;
  if (a4)
  {
    uint64_t v25 = 0;
    unsigned __int16 v26 = 0;
    uint64_t v27 = (const char **)v67;
    do
    {
      if (checkAttachedPunc(*v27)) {
        *(_WORD *)(v24 + 2 * v26++) = v25;
      }
      ++v25;
      v27 += 5;
    }
    while (a4 != v25);
  }
  else
  {
    unsigned __int16 v26 = 0;
  }
  uint64_t v29 = heap_Calloc(*(void **)(a1 + 8), a4, 4);
  uint64_t v70 = v29;
  if (!v29) {
    goto LABEL_29;
  }
  uint64_t v30 = v29;
  int v31 = *(void **)(a1 + 8);
  if (a9 == 1)
  {
    uint64_t v32 = heap_Alloc((uint64_t)v31, v21);
    uint64_t v72 = v32;
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = *(void **)(a1 + 8);
      if (a13)
      {
        uint64_t v64 = (_WORD *)v33;
        uint64_t v28 = 0;
        uint64_t v73 = (float *)heap_Calloc(v34, 100 * (a4 + v26), 4);
        unsigned __int16 v35 = v26;
        uint64_t v36 = (uint64_t)v67;
        if (v73) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v28 = heap_Alloc((uint64_t)v34, v21);
        uint64_t v69 = v28;
        if (!v28)
        {
          uint64_t v20 = 2315264010;
          goto LABEL_46;
        }
        uint64_t v64 = (_WORD *)v33;
        uint64_t v36 = (uint64_t)v67;
        uint64_t Embedding = getcharNum(a4, v67, &v70, (_WORD *)&v76 + 1, v26, v24, &v69);
        if ((Embedding & 0x80000000) != 0)
        {
LABEL_44:
          uint64_t v20 = Embedding;
          goto LABEL_45;
        }
        unsigned __int16 v35 = HIWORD(v76);
        uint64_t v73 = (float *)heap_Calloc(*(void **)(a1 + 8), HIWORD(v76) + 2, 4);
        if (v73)
        {
LABEL_16:
          uint64_t Embedding = getEmbedding(a1, a7, a8, 1, a4, v36, v26, v24, &v73, &v70, a13);
          if ((Embedding & 0x80000000) == 0)
          {
            if (a4 == 1)
            {
              unsigned int v42 = 1;
              *uint64_t v23 = 1;
              *uint64_t v64 = 1;
              LOWORD(v76) = 1;
              if (v73)
              {
                heap_Free(*(void **)(a1 + 8), (uint64_t)v73);
                uint64_t v73 = 0;
                unsigned int v42 = 1;
              }
LABEL_41:
              uint64_t v20 = 2315264010;
              *a6 = v42;
              v77[0] = heap_Calloc(*(void **)(a1 + 8), v42, 184);
              if (v77[0])
              {
                uint64_t v56 = v36;
                uint64_t v33 = (uint64_t)v64;
                uint64_t v20 = storeResult(a1, v56, a4, (uint64_t)v23, (uint64_t)v64, v77, &v76, a10, a11, a12);
                if ((v20 & 0x80000000) == 0)
                {
                  *a6 = v76;
                  heap_Free(*(void **)(a1 + 8), (uint64_t)v64);
                  uint64_t v72 = 0;
                  *uint64_t v65 = v77[0];
LABEL_70:
                  if (v28) {
                    heap_Free(*(void **)(a1 + 8), v28);
                  }
                  goto LABEL_72;
                }
                goto LABEL_46;
              }
              goto LABEL_45;
            }
            if (a13) {
              int v55 = a4;
            }
            else {
              int v55 = 2;
            }
            uint64_t Embedding = fi_predict(*v66, (const void **)&v73, v55 + v35, &v74, v38, v39, v40, v41);
            if ((Embedding & 0x80000000) == 0)
            {
              getJointResult((unint64_t)&v75, &v72, a4, v26, v24, &v76, v74, v70, a13, v28);
              unsigned int v42 = (unsigned __int16)v76;
              goto LABEL_41;
            }
          }
          goto LABEL_44;
        }
      }
      uint64_t v20 = 2315264010;
LABEL_45:
      uint64_t v33 = (uint64_t)v64;
LABEL_46:
      heap_Free(*(void **)(a1 + 8), v33);
      goto LABEL_66;
    }
LABEL_29:
    uint64_t v28 = 0;
    uint64_t v20 = 2315264010;
    goto LABEL_66;
  }
  uint64_t v73 = (float *)heap_Calloc(v31, (100 * a4), 4);
  if (!v73)
  {
    uint64_t v28 = 0;
    uint64_t v20 = 2315264010;
LABEL_68:
    if (v71) {
      heap_Free(*(void **)(a1 + 8), v71);
    }
    goto LABEL_70;
  }
  uint64_t v43 = getEmbedding(a1, a7, a8, a9, a4, (uint64_t)v67, v26, v24, &v73, &v70, a13);
  if ((v43 & 0x80000000) != 0) {
    goto LABEL_30;
  }
  uint64_t v43 = fi_predict(v66[1], (const void **)&v73, a4, &v74, v44, v45, v46, v47);
  if ((v43 & 0x80000000) != 0) {
    goto LABEL_30;
  }
  getPwPredict(a4, v74, v26, v24, &v75, &v76, v30);
  uint64_t v48 = (unsigned __int16)v76;
  *a6 = v76;
  uint64_t v49 = heap_Calloc(*(void **)(a1 + 8), v48, 184);
  v77[0] = v49;
  if (!v49) {
    goto LABEL_29;
  }
  uint64_t v50 = v49;
  uint64_t v43 = storePwResult(a1, (uint64_t)v67, a4, (uint64_t)v23, v77, a10);
  if ((v43 & 0x80000000) != 0)
  {
LABEL_30:
    uint64_t v28 = 0;
    uint64_t v20 = v43;
    goto LABEL_66;
  }
  uint64_t v71 = heap_Calloc(*(void **)(a1 + 8), 100 * v48, 4);
  if (!v71) {
    goto LABEL_29;
  }
  if (v66[1])
  {
    uint64_t v20 = fi_predict(*v66, (const void **)&v71, v48, &v74, v51, v52, v53, v54);
    if ((v20 & 0x80000000) != 0)
    {
LABEL_65:
      uint64_t v28 = 0;
LABEL_66:
      if (v73) {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v73);
      }
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (v48)
  {
    uint64_t v57 = 0;
    for (uint64_t i = 0; i != v48; ++i)
    {
      uint64_t v59 = 0;
      __int16 v60 = 0;
      float v61 = 0.0;
      do
      {
        if (v61 < *(float *)(v74 + v57 + 4 * v59))
        {
          float v61 = *(float *)(v74 + v57 + 4 * v59);
          __int16 v60 = v59;
        }
        ++v59;
      }
      while (v59 != 4);
      *(_DWORD *)(v50 + 184 * i + 72) = v60 == 3 || v60 == 0 || v48 - 1 == i;
      v57 += 16;
    }
  }
  if (v71)
  {
    heap_Free(*(void **)(a1 + 8), v71);
    uint64_t v71 = 0;
  }
  *uint64_t v65 = v50;
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_65;
  }
LABEL_72:
  if (v24) {
    heap_Free(*(void **)(a1 + 8), v24);
  }
  if (v70) {
    heap_Free(*(void **)(a1 + 8), v70);
  }
  heap_Free(*(void **)(a1 + 8), v75);
  return v20;
}

uint64_t getcharNum(unsigned int a1, uint64_t *a2, uint64_t *a3, _WORD *a4, unsigned int a5, uint64_t a6, uint64_t *a7)
{
  char v23 = 0;
  int v22 = 0;
  uint64_t v7 = *a3;
  if (a1)
  {
    uint64_t v11 = 0;
    __int16 v12 = 0;
    int v13 = 0;
    uint64_t v14 = *a7;
    uint64_t v15 = a1;
    do
    {
      uint64_t UTF8Char = utf8_getUTF8Char(*a2, 0, &v22);
      if ((UTF8Char & 0x80000000) != 0) {
        break;
      }
      if (utf8_IsChineseLetter((const char *)&v22))
      {
        __int16 v17 = Utf8_Utf8NbrOfSymbols((const char *)*a2) - 1;
        *(_WORD *)(v14 + 2 * v11) = v17;
        if (a5 > (unsigned __int16)v13 && v11 == *(unsigned __int16 *)(a6 + 2 * (unsigned __int16)v13)) {
          ++v13;
        }
      }
      else
      {
        if (a5 > (unsigned __int16)v13 && v11 == *(unsigned __int16 *)(a6 + 2 * (unsigned __int16)v13))
        {
          ++v13;
          int v18 = Utf8_Utf8NbrOfSymbols((const char *)*a2);
          __int16 v17 = 1;
          if (v18 >= 3)
          {
            *(_DWORD *)(v7 + 4 * v11) = 1;
            __int16 v17 = 2;
          }
        }
        else
        {
          __int16 v17 = 1;
          *(_DWORD *)(v7 + 4 * v11) = 1;
        }
        *(_WORD *)(v14 + 2 * v11) = v17;
      }
      v12 += v17;
      ++v11;
      a2 += 5;
    }
    while (v15 != v11);
  }
  else
  {
    __int16 v12 = 0;
    uint64_t UTF8Char = 0;
  }
  *a3 = v7;
  *a4 = v12;
  return UTF8Char;
}

uint64_t getEmbedding(uint64_t a1, uint64_t a2, void *a3, int a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, float **a9, uint64_t *a10, int a11)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  __int16 v92 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  uint64_t v84 = *a10;
  uint64_t v93 = 0;
  __int16 v17 = *a9;
  uint64_t result = (*(uint64_t (**)(void, void, char *))(a2 + 40))(*a3, a3[1], (char *)&v93 + 4);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (a11)
  {
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t *))(v15 + 40))(v14[2], v14[3], &v93);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (HIDWORD(v93) != v93)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v19, v20, v21, (uint64_t)"ERROR: word embedding and character embedding do not have same dimension");
      return 2315264000;
    }
  }
  else
  {
    float *v17 = 101.0;
    v17 += HIDWORD(v93);
  }
  if (!a5)
  {
LABEL_107:
    if (!a11) {
      float *v17 = 102.0;
    }
    return result;
  }
  int v76 = v14;
  uint64_t v77 = a1;
  uint64_t v22 = 0;
  int v85 = 0;
  unsigned int v23 = 0;
  uint64_t v82 = a5;
  unsigned int v75 = a7;
  uint64_t v73 = a6;
  uint64_t v89 = v15;
  while (1)
  {
    uint64_t v24 = *(char **)(a6 + 40 * v22);
    unsigned __int16 v25 = strlen(v24);
    int v26 = 0;
    if (a7 && v23 < a7)
    {
      if (v22 == *(unsigned __int16 *)(a8 + 2 * v23))
      {
        if (v25 == 3
          && (*(void *)unsigned int __s = 0,
              __int16 v27 = 3,
              int v85 = 1,
              unsigned __int16 v28 = v25,
              utf8_Utf8ToUtf32_Tolerant((uint64_t)v24, 3u, (uint64_t)&__s[4], 1u, __s),
              unsigned __int16 v25 = v28,
              a7 = v75,
              *(_DWORD *)&__s[4] == 8230))
        {
          int v26 = 0;
        }
        else
        {
          int v85 = 0;
          __int16 v92 = v24[v25 - 1];
          __int16 v27 = v25 - 1;
          v24[(unsigned __int16)(v25 - 1)] = 0;
          int v26 = 1;
        }
        ++v23;
        *(_DWORD *)(a6 + 40 * v22 + 36) = 1;
        unsigned __int16 v25 = v27;
      }
      else
      {
        int v26 = 0;
        int v85 = 0;
      }
    }
    unsigned __int16 v83 = v25;
    if (!a11) {
      break;
    }
    int v90 = v26;
    *(_DWORD *)(v84 + 4 * v22) = 0;
    uint64_t result = (*(uint64_t (**)(void, void, char *, float *))(v15 + 56))(v14[2], v14[3], v24, v17);
    if (*v17 != 0.0 || result == 0) {
      goto LABEL_92;
    }
    unsigned int v86 = v23;
    unsigned int v30 = HIDWORD(v93);
    uint64_t v79 = v14[1];
    uint64_t v80 = *v14;
    uint64_t v31 = v14[3];
    uint64_t v74 = v14[2];
    __int16 v95 = 0;
    *(void *)&char __s[4] = 0;
    uint64_t v32 = heap_Calloc(*(void **)(v77 + 8), HIDWORD(v93), 4);
    if (!v32)
    {
      log_OutPublic(*(void *)(v77 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v33, v34, v35, v36, v71);
LABEL_65:
      uint64_t v15 = v89;
      goto LABEL_90;
    }
    uint64_t v37 = (unsigned __int32 *)v32;
    uint64_t v72 = v31;
    __int16 v38 = Utf8_Utf8NbrOfSymbols(v24);
    *(_WORD *)unsigned int __s = v38 - 1;
    if (v38 == 1)
    {
LABEL_64:
      heap_Free(*(void **)(v77 + 8), (uint64_t)v37);
      a7 = v75;
      a6 = v73;
      goto LABEL_65;
    }
    checkremoveNormalSym(v24, (unsigned __int16 *)__s, 0x5Fu);
    checkremoveNormalSym(v24, (unsigned __int16 *)__s, 0x2Du);
    unsigned int v39 = *(unsigned __int16 *)__s;
    if (*(_WORD *)__s)
    {
      unsigned __int16 v40 = 0;
      __int16 v41 = 0;
      if (*(unsigned __int16 *)__s == 1) {
        char v42 = 115;
      }
      else {
        char v42 = 98;
      }
      char v78 = v42;
      while (1)
      {
        unsigned __int16 v43 = v40;
        int UTF8Char = utf8_getUTF8Char((uint64_t)v24, v40, &__s[4]);
        if (UTF8Char < 0) {
          goto LABEL_64;
        }
        int v45 = UTF8Char;
        unsigned __int16 v46 = strlen(&__s[4]);
        if (!utf8_IsChineseLetter(&__s[4])) {
          break;
        }
        if (v41) {
          char v47 = 109;
        }
        else {
          char v47 = v78;
        }
        __s[v46 + 4] = v47;
        __s[strlen(&__s[4]) + 4] = 0;
        int v48 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, unsigned __int32 *))(v89 + 56))(v80, v79, &__s[4], v37);
        if (*(float *)v37 == 0.0 && v48 != 0)
        {
          v49.n128_u32[0] = *v37;
          int v45 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, float *, __n128))(v89 + 56))(v74, v72, "</s>", v17, v49);
LABEL_83:
          *(_DWORD *)(v84 + 4 * v22) = 0;
          a7 = v75;
          a6 = v73;
          uint64_t v15 = v89;
          goto LABEL_89;
        }
        int v45 = v48;
        if (v30)
        {
          int v51 = 0;
          unsigned __int16 v40 = v43 + v46;
          LOBYTE(v52) = 1;
          do
          {
            float v53 = *(float *)&v37[(unsigned __int16)v51];
            int v52 = v52 & (v53 == 0.0);
            v17[(unsigned __int16)v51] = v17[(unsigned __int16)v51] + (float)(v53 / (float)v39);
            ++v51;
          }
          while (v30 > (unsigned __int16)v51);
          int v54 = v39 <= (unsigned __int16)++v41 ? 1 : v52;
          if (v54 != 1) {
            continue;
          }
        }
        goto LABEL_83;
      }
      if (strlen(&__s[4]) == 1)
      {
        a7 = v75;
        a6 = v73;
        uint64_t v15 = v89;
        if (__s[4] - 48 >= 0xA)
        {
          if ((__s[4] & 0xDFu) - 65 >= 0x1A)
          {
            int v67 = 0;
            goto LABEL_88;
          }
          int v67 = 1;
          unint64_t v68 = "ENG";
        }
        else
        {
          int v67 = 0;
          unint64_t v68 = "NUM";
        }
      }
      else
      {
        int v67 = 0;
        unint64_t v68 = "</s>";
        a7 = v75;
        a6 = v73;
        uint64_t v15 = v89;
      }
      int v45 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, float *))(v15 + 56))(v74, v72, v68, v17);
LABEL_88:
      *(_DWORD *)(v84 + 4 * v22) = v67;
      goto LABEL_89;
    }
    uint64_t v15 = v89;
    int v45 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, float *))(v89 + 56))(v74, v31, "</s>", v17);
    a7 = v75;
    a6 = v73;
LABEL_89:
    heap_Free(*(void **)(v77 + 8), (uint64_t)v37);
    if (!v45)
    {
      uint64_t result = 0;
      uint64_t v14 = v76;
      goto LABEL_91;
    }
LABEL_90:
    uint64_t v14 = v76;
    uint64_t result = (*(uint64_t (**)(void, void, const char *, float *))(v15 + 56))(v76[2], v76[3], "</s>", v17);
LABEL_91:
    unsigned int v23 = v86;
LABEL_92:
    if (v23 && !v85 && v22 == *(unsigned __int16 *)(a8 + 2 * (v23 - 1))) {
      v24[v83] = 0;
    }
    v17 += HIDWORD(v93);
    if (v90)
    {
      uint64_t result = (*(uint64_t (**)(void, void, __int16 *, float *))(v15 + 56))(v14[2], v14[3], &v92, v17);
      if (*v17 == 0.0 && result != 0)
      {
        v69.n128_f32[0] = *v17;
        uint64_t result = (*(uint64_t (**)(void, void, const char *, float *, __n128))(v15 + 56))(v14[2], v14[3], "</s>", v17, v69);
      }
      v17 += HIDWORD(v93);
    }
LABEL_103:
    if (++v22 == v82) {
      goto LABEL_107;
    }
  }
  unsigned int v87 = v23;
  uint64_t v55 = HIDWORD(v93);
  int v56 = *(_DWORD *)(v84 + 4 * v22);
  uint64_t v57 = *v14;
  uint64_t v58 = v14[1];
  __s[8] = 0;
  *(_DWORD *)&char __s[4] = 0;
  if (v56)
  {
    float *v17 = 1.0;
    v17 += v55;
    if (v26)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, float *))(v15 + 72))(v57, v58, &v92, v17);
      if ((result & 0x80000000) != 0)
      {
        uint64_t result = 0;
        float *v17 = 100.0;
      }
      v17 += v55;
    }
    else
    {
      uint64_t result = 0;
    }
    goto LABEL_76;
  }
  uint64_t v81 = HIDWORD(v93);
  int v91 = v26;
  *(_WORD *)unsigned int __s = Utf8_Utf8NbrOfSymbols(v24) - 1;
  checkremoveNormalSym(v24, (unsigned __int16 *)__s, 0x5Fu);
  checkremoveNormalSym(v24, (unsigned __int16 *)__s, 0x2Du);
  unsigned int v59 = *(unsigned __int16 *)__s;
  if (!(v91 | *(unsigned __int16 *)__s))
  {
    uint64_t result = 0;
    float *v17 = 100.0;
LABEL_75:
    uint64_t v14 = v76;
LABEL_76:
    unsigned int v23 = v87;
    if (v87 && !v85 && v22 == *(unsigned __int16 *)(a8 + 2 * (v87 - 1))) {
      v24[v83] = 0;
    }
    goto LABEL_103;
  }
  if (!*(_WORD *)__s)
  {
    uint64_t result = 0;
LABEL_70:
    a6 = v73;
    if (v91)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, float *))(v15 + 72))(v57, v58, &v92, v17);
      a7 = v75;
      uint64_t v14 = v76;
      if ((result & 0x80000000) != 0)
      {
        uint64_t result = 0;
        float *v17 = 100.0;
      }
      v17 += v81;
      goto LABEL_76;
    }
    a7 = v75;
    goto LABEL_75;
  }
  unsigned __int16 v60 = 0;
  unsigned int v61 = 0;
  uint64_t v62 = 4 * v55;
  while (1)
  {
    unsigned __int16 v63 = v60;
    uint64_t result = utf8_getUTF8Char((uint64_t)v24, v60, &__s[4]);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    __int16 v64 = strlen(&__s[4]);
    uint64_t v65 = v15;
    __int16 v66 = v64;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, float *))(v65 + 72))(v57, v58, &__s[4], v17);
    if ((result & 0x80000000) != 0)
    {
      uint64_t result = 0;
      float *v17 = 100.0;
    }
    unsigned __int16 v60 = v63 + v66;
    ++v61;
    __int16 v17 = (float *)((char *)v17 + v62);
    uint64_t v15 = v89;
    if (v61 >= v59) {
      goto LABEL_70;
    }
  }
}

unint64_t getJointResult(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, uint64_t a5, _WORD *a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  uint64_t v10 = *(void *)result;
  uint64_t v11 = *a2;
  if (a3)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    unsigned __int16 v16 = 0;
    __int16 v17 = 1;
    uint64_t v18 = a3;
    while (a9)
    {
      uint64_t v19 = 0;
      LODWORD(result) = 0;
      float v21 = 0.0;
      do
      {
        uint64_t v20 = a7 + 28 * (unsigned __int16)(v16 + v14);
        if (v21 >= *(float *)(v20 + 4 * v19))
        {
          uint64_t result = result;
        }
        else
        {
          float v21 = *(float *)(v20 + 4 * v19);
          uint64_t result = v19;
        }
        ++v19;
      }
      while (v19 != 7);
      if (a4 <= v16 || v14 != *(unsigned __int16 *)(a5 + 2 * v16)) {
        goto LABEL_18;
      }
      uint64_t v22 = 0;
      LODWORD(result) = 0;
      float v24 = 0.0;
      do
      {
        uint64_t v23 = a7 + 28 * (unsigned __int16)(v16 + v17);
        if (v24 >= *(float *)(v23 + 4 * v22))
        {
          uint64_t result = result;
        }
        else
        {
          float v24 = *(float *)(v23 + 4 * v22);
          uint64_t result = v22;
        }
        ++v22;
      }
      while (v22 != 7);
      int v25 = 1;
      ++v16;
LABEL_19:
      if (*(_DWORD *)(a8 + 4 * v14) == 1) {
        int v26 = 1;
      }
      else {
        int v26 = v25;
      }
      if ((vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(result), (int16x4_t)0x6000500040003)) & 1) == 0 && !v26)
      {
        *(_WORD *)(v10 + 2 * v14) = 0;
LABEL_32:
        *(_WORD *)(v11 + 2 * v14) = 0;
        goto LABEL_33;
      }
      ++*a6;
      *(_WORD *)(v10 + 2 * v14) = 1;
      char v27 = v26 ^ 1;
      if (!v14) {
        char v27 = 1;
      }
      if ((v27 & 1) == 0)
      {
        uint64_t v28 = (v14 - 1);
        if (!*(_WORD *)(v10 + 2 * v28))
        {
          *(_WORD *)(v10 + 2 * v28) = 1;
          ++*a6;
        }
      }
      if ((result & 0xFFFD) != 4) {
        goto LABEL_32;
      }
      *(_WORD *)(v11 + 2 * v14) = 1;
LABEL_33:
      ++v14;
      ++v17;
      if (v14 == v18)
      {
        uint64_t v29 = v18 - 1;
        goto LABEL_36;
      }
    }
    *(_WORD *)uint64_t v33 = 0;
    v15 += *(unsigned __int16 *)(a10 + 2 * v14);
    v33[0] = **(unsigned char **)(a7 + 8 * (unsigned __int16)v15);
    uint64_t result = atoi(v33);
LABEL_18:
    int v25 = 0;
    goto LABEL_19;
  }
  uint64_t v29 = -1;
LABEL_36:
  if (*(_WORD *)(v10 + 2 * v29) != 1)
  {
    ++*a6;
    *(_WORD *)(v10 + 2 * v29) = 1;
  }
  if (*(_WORD *)(v11 + 2 * v29) != 1) {
    *(_WORD *)(v11 + 2 * v29) = 1;
  }
  return result;
}

uint64_t load_pw_cfg(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "fepw_enable_cscgroup", &__c[3], &__c[1], __c) & 0x80000000) != 0|| !*(_WORD *)&__c[1])
  {
    BOOL v12 = 1;
  }
  else
  {
    uint64_t v10 = **(const char ***)&__c[3];
    uint64_t v11 = strchr(**(char ***)&__c[3], __c[0]);
    if (v11)
    {
      *uint64_t v11 = 0;
      uint64_t v10 = **(const char ***)&__c[3];
    }
    BOOL v12 = strcmp(v10, "no") != 0;
  }
  *((_DWORD *)a4 + 8) = v12;
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "fepw_cscgroup_stopwords", &__c[3], &__c[1], __c) & 0x80000000) != 0|| !*(_WORD *)&__c[1])
  {
    a4[36] = 0;
  }
  else
  {
    int v13 = **(const char ***)&__c[3];
    uint64_t v14 = strchr(**(char ***)&__c[3], __c[0]);
    if (v14)
    {
      *uint64_t v14 = 0;
      int v13 = **(const char ***)&__c[3];
    }
    strcpy((char *)a4 + 36, v13);
  }
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "fepw_auxiliarywords", &__c[3], &__c[1], __c);
  if ((v15 & 0x80000000) != 0)
  {
    int v20 = -1979703276;
  }
  else
  {
    uint64_t v16 = v15;
    if (!*(void *)&__c[3] || *(unsigned __int16 *)&__c[1] != 1) {
      goto LABEL_21;
    }
    unsigned __int16 v17 = strlen(**(const char ***)&__c[3]);
    unsigned __int8 ChineseUTFCharNum = utf8_GetChineseUTFCharNum(**(void **)&__c[3], v17);
    *a4 = ChineseUTFCharNum;
    uint64_t v19 = heap_Alloc(*(void *)(a5 + 8), 8 * ChineseUTFCharNum);
    *((void *)a4 + 1) = v19;
    int v20 = -1979703286;
    if (v19)
    {
      if (*a4)
      {
        uint64_t v21 = 0;
        uint64_t v22 = **(unsigned __int8 ***)&__c[3];
        while (1)
        {
          size_t v23 = (unsigned __int16)utf8_determineUTF8CharLength(*v22);
          *(void *)(*((void *)a4 + 1) + 8 * v21) = heap_Calloc(*(void **)(a5 + 8), 1, v23 + 1);
          uint64_t v24 = *((void *)a4 + 1);
          int v25 = *(void **)(v24 + 8 * v21);
          if (!v25) {
            break;
          }
          memcpy(v25, v22, v23);
          *(unsigned char *)(*(void *)(*((void *)a4 + 1) + 8 * v21) + v23) = 0;
          v22 += v23;
          if (++v21 >= (unint64_t)*a4) {
            goto LABEL_21;
          }
        }
        heap_Free(*(void **)(a5 + 8), v24);
        int v20 = -1979703286;
        goto LABEL_24;
      }
LABEL_21:
      if (!v16) {
        goto LABEL_28;
      }
      goto LABEL_25;
    }
  }
LABEL_24:
  LODWORD(v16) = v20;
LABEL_25:
  *((void *)a4 + 1) = 0;
  if (v16 == -1979703286) {
    uint64_t v16 = 2315264010;
  }
  else {
    uint64_t v16 = 0;
  }
LABEL_28:
  a4[16] = 0;
  *((void *)a4 + 3) = 0;
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  int v26 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "fepw_custermizedchar", &__c[3], &__c[1], __c);
  if (v26 < 0)
  {
    int v27 = -1979703276;
  }
  else
  {
    int v27 = v26;
    if (!*(void *)&__c[3] || *(unsigned __int16 *)&__c[1] != 1)
    {
      a4[16] = 0;
      goto LABEL_39;
    }
    *(unsigned char *)(strlen(**(const char ***)&__c[3]) + **(void **)&__c[3] - 1) = 0;
    char v28 = Utf8_Utf8NbrOfSymbols(**(const char ***)&__c[3]);
    a4[16] = v28 - 1;
    uint64_t v29 = heap_Alloc(*(void *)(a5 + 8), 8 * (v28 - 1));
    *((void *)a4 + 3) = v29;
    if (v29)
    {
      if (!a4[16]) {
        goto LABEL_40;
      }
      uint64_t v30 = 0;
      uint64_t v31 = **(unsigned __int8 ***)&__c[3];
      while (1)
      {
        size_t v32 = (unsigned __int16)utf8_determineUTF8CharLength(*v31);
        *(void *)(*((void *)a4 + 3) + 8 * v30) = heap_Calloc(*(void **)(a5 + 8), 1, v32 + 1);
        uint64_t v33 = *((void *)a4 + 3);
        uint64_t v34 = *(void **)(v33 + 8 * v30);
        if (!v34) {
          break;
        }
        memcpy(v34, v31, v32);
        *(unsigned char *)(*(void *)(*((void *)a4 + 3) + 8 * v30) + v32) = 0;
        v31 += v32;
        if (++v30 >= (unint64_t)a4[16]) {
          goto LABEL_40;
        }
      }
      heap_Free(*(void **)(a5 + 8), v33);
      int v27 = -1979703286;
LABEL_39:
      *((void *)a4 + 3) = 0;
LABEL_40:
      if (!v27) {
        return v16;
      }
      goto LABEL_43;
    }
    int v27 = -1979703286;
  }
LABEL_43:
  *((void *)a4 + 3) = 0;
  if (v27 == -1979703286) {
    return 2315264010;
  }
  else {
    return v16;
  }
}

void *freePwTids(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 1064);
  if (v2)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 1072);
    if (*(_WORD *)(a2 + 1072))
    {
      unint64_t v5 = result;
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(v2 + v6);
        if (v8)
        {
          uint64_t result = heap_Free((void *)v5[1], v8);
          uint64_t v2 = *(void *)(a2 + 1064);
          *(void *)(v2 + v6) = 0;
          unsigned int v4 = *(unsigned __int16 *)(a2 + 1072);
        }
        ++v7;
        v6 += 184;
      }
      while (v7 < v4);
    }
  }
  return result;
}

void *freePWInfo(void *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 1064);
  if (v3)
  {
    unint64_t v5 = result;
    uint64_t v7 = *(void *)(v3 + 184 * a3 + 40);
    if (v7)
    {
      uint64_t result = heap_Free((void *)result[1], v7);
      uint64_t v3 = *(void *)(a2 + 1064);
    }
    uint64_t v8 = *(void *)(v3 + 184 * a3 + 24);
    if (v8)
    {
      uint64_t result = heap_Free((void *)v5[1], v8);
      uint64_t v3 = *(void *)(a2 + 1064);
    }
    uint64_t v9 = v3 + 184 * a3;
    *(void *)(v9 + 40) = 0;
    *(void *)(v9 + 24) = 0;
  }
  return result;
}

uint64_t pw_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t ****a6, uint64_t a7, void *a8, int a9, void *a10, uint64_t a11, int a12, int a13)
{
  uint64_t v298 = *MEMORY[0x263EF8340];
  int v291 = 0;
  int v292 = 0;
  int v290 = 0;
  __int16 v289 = 0;
  char v286 = &byte_20D5A22AE;
  unsigned __int16 v287 = 0;
  int v285 = 0;
  unsigned __int16 v282 = 0;
  uint64_t v280 = 0;
  uint64_t v281 = 0;
  uint64_t v277 = 0;
  unsigned int v276 = 0;
  unsigned __int16 v275 = 0;
  int v274 = 0;
  BYTE2(v273[1]) = 0;
  strcpy((char *)v273, "latin");
  long long v297 = 0u;
  long long v296 = 0u;
  long long v295 = 0u;
  long long v294 = 0u;
  uint64_t v271 = 0;
  uint64_t v272 = 0;
  uint64_t v13 = 2315264007;
  if (a3)
  {
    uint64_t v14 = a4;
    if (a4)
    {
      uint64_t v15 = a5;
      if (a5)
      {
        if (a6 && a7 && a8)
        {
          bzero(v278, 0x404uLL);
          *(void *)(v15 + 1088) = 0;
          *(void *)(v15 + 1064) = 0;
          if (*(_WORD *)(v15 + 1098) != 1) {
            return 0;
          }
          unsigned int v288 = 0;
          int v284 = 0;
          unsigned __int16 v283 = 0;
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *))(a3 + 176))(a1, a2, *(unsigned __int16 *)(v15 + 1096), 0, v15 + 1088, (char *)&v292 + 2);
          if ((v13 & 0x80000000) == 0 && HIWORD(v292) >= 2u)
          {
            int v257 = (const char **)(v15 + 1088);
            uint64_t v21 = *(unsigned __int16 *)(v15 + 1096);
            *(_WORD *)int v293 = 0;
            LODWORD(v270) = 0;
            *(_WORD *)__s1 = 0;
            LOWORD(v267) = 0;
            LOWORD(v266) = 0;
            unsigned int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a3 + 104))(a1, a2, 2, v21, v293);
            unsigned int v23 = v22;
            uint64_t v263 = v14;
            uint64_t v264 = a2;
            if ((v22 & 0x80000000) == 0)
            {
              unsigned __int16 v24 = *(_WORD *)v293;
              if (*(_WORD *)v293)
              {
                unsigned __int16 v25 = 0;
                while (1)
                {
                  unsigned int v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, const char **, char *))(a3 + 168))(a1, a2, v24, 0, 1, &v270, __s1);
                  if ((v26 & 0x80000000) != 0) {
                    break;
                  }
                  if (v270 > 0xA || ((1 << (char)v270) & 0x610) == 0)
                  {
                    uint64_t v31 = 0;
                    uint64_t v30 = *(unsigned __int16 *)v293;
                  }
                  else
                  {
                    unsigned int v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a3 + 168))(a1, a2, *(unsigned __int16 *)v293, 1, 1, &v267, __s1);
                    if ((v26 & 0x80000000) != 0) {
                      break;
                    }
                    unsigned int v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a3 + 168))(a1, a2, *(unsigned __int16 *)v293, 2, 1, &v266, __s1);
                    if ((v26 & 0x80000000) != 0) {
                      break;
                    }
                    BOOL v29 = (unsigned __int16)v267 > v25 || (unsigned __int16)v266 > v25;
                    uint64_t v30 = *(unsigned __int16 *)v293;
                    if (v29)
                    {
                      unsigned __int16 v25 = v266;
                      uint64_t v31 = 0;
                    }
                    else
                    {
                      uint64_t v31 = *(unsigned __int16 *)v293;
                    }
                  }
                  unsigned int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(a3 + 120))(a1, a2, v30, v293);
                  if ((v32 & 0x80000000) != 0
                    || v31
                    && (log_OutText(*(void *)(v263 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v33, v34, v35, (uint64_t)"Dropping nested word record"), unsigned int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 192))(a1, a2, v31), (v32 & 0x80000000) != 0))
                  {
                    unsigned int v23 = v32;
                    uint64_t v14 = v263;
                    goto LABEL_136;
                  }
                  unsigned __int16 v24 = *(_WORD *)v293;
                  uint64_t v14 = v263;
                  if (!*(_WORD *)v293) {
                    goto LABEL_37;
                  }
                }
                unsigned int v23 = v26;
LABEL_136:
                unsigned __int16 v107 = 0;
                int v51 = 0;
                uint64_t v61 = 0;
                uint64_t v106 = 0;
                goto LABEL_143;
              }
            }
            if ((v22 & 0x80000000) != 0)
            {
              unsigned __int16 v107 = 0;
              int v51 = 0;
              uint64_t v61 = 0;
              uint64_t v106 = 0;
              goto LABEL_143;
            }
LABEL_37:
            uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a3 + 104))(a1, a2, 2, *(unsigned __int16 *)(v15 + 1096), &v292);
            uint64_t v13 = v36;
            if ((v36 & 0x80000000) != 0)
            {
              unsigned __int16 v107 = 0;
              uint64_t v61 = 0;
              uint64_t v106 = 0;
              unsigned int v23 = v36;
              int v51 = 0;
              goto LABEL_143;
            }
            unsigned __int16 v40 = v292;
            if (!(_WORD)v292) {
              goto LABEL_138;
            }
            unsigned int v255 = 0;
            unsigned __int16 v258 = 0;
            unsigned __int16 v260 = 0;
            int v41 = 0;
            unsigned int v23 = -1979703286;
            char v254 = (uint64_t *)(v15 + 1064);
            while (1)
            {
              unsigned int v42 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a3 + 120))(a1, a2, v40, (char *)&v291 + 2);
              if ((v42 & 0x80000000) != 0) {
                break;
              }
              uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v292, 0, 1, &v288, (char *)&v292 + 2);
              uint64_t v13 = v43;
              if ((v43 & 0x80000000) != 0)
              {
                uint64_t v61 = 0;
                uint64_t v106 = 0;
                unsigned int v23 = v43;
                int v51 = 0;
                goto LABEL_141;
              }
              unsigned int v44 = v288;
              if (v288 <= 0xA && ((1 << v288) & 0x610) != 0)
              {
                uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v292, 1, 1, &v291, (char *)&v292 + 2);
                if ((v46 & 0x80000000) != 0) {
                  return v46;
                }
                uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v292, 2, 1, (char *)&v290 + 2, (char *)&v292 + 2);
                if ((v13 & 0x80000000) != 0) {
                  return v13;
                }
                if (!(_WORD)v291
                  || v41 + 1 == (unsigned __int16)v291 && HIWORD(v290) > (unsigned __int16)v291)
                {
                  ++v260;
                  int v41 = HIWORD(v290);
                }
                unsigned int v44 = v288;
              }
              if (v44 == 5)
              {
                uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, char *))(a3 + 176))(a1, a2, (unsigned __int16)v292, 4, &v281, (char *)&v292 + 2);
                if ((v13 & 0x80000000) != 0) {
                  return v13;
                }
                if (HIWORD(v292))
                {
                  if (!strncmp(v281, "prompt", HIWORD(v292)))
                  {
                    ++v258;
                    if (v255 <= 0x7F)
                    {
                      uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v292, 1, 1, &v291, (char *)&v292 + 2);
                      if ((v46 & 0x80000000) != 0) {
                        return v46;
                      }
                      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v292, 2, 1, (char *)&v290 + 2, (char *)&v292 + 2);
                      if ((v13 & 0x80000000) != 0) {
                        return v13;
                      }
                      v278[v255] = (unsigned __int16)v291;
                      v278[v279 + 128] = HIWORD(v290);
                      unsigned int v255 = ++v279;
                    }
                  }
                }
              }
              unsigned __int16 v40 = HIWORD(v291);
              LOWORD(v292) = HIWORD(v291);
              if (!HIWORD(v291))
              {
                uint64_t v14 = v263;
                if (v258 >= 0x81u) {
                  log_OutText(*(void *)(v263 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Warning: the prompt number %d is large than the threshold %d, so the last %d promp not used to guide grouping", v37, v38, v39, v258);
                }
                if (v260)
                {
                  int v51 = (uint64_t *)heap_Calloc(*(void **)(v263 + 8), v260, 40);
                  if (v51)
                  {
                    unsigned int v259 = (unsigned __int8 *)v15;
                    uint64_t v52 = 0;
                    do
                    {
                      uint64_t v53 = heap_Calloc(*(void **)(v263 + 8), 128, 1);
                      v51[v52] = v53;
                      if (!v53 || (uint64_t v58 = heap_Calloc(*(void **)(v263 + 8), 1, 64), (v51[v52 + 1] = v58) == 0))
                      {
                        log_OutPublic(*(void *)(v263 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v54, v55, v56, v57, v241);
                        uint64_t v61 = 0;
                        uint64_t v106 = 0;
                        uint64_t v15 = (uint64_t)v259;
                        unsigned __int16 v107 = v260;
                        goto LABEL_143;
                      }
                      v52 += 5;
                    }
                    while (5 * v260 != v52);
                    uint64_t v15 = (uint64_t)v259;
                    unsigned int v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a3 + 104))(a1, a2, 2, *((unsigned __int16 *)v259 + 548), &v292);
                    if ((v59 & 0x80000000) != 0)
                    {
                      uint64_t v61 = 0;
                      uint64_t v106 = 0;
                      unsigned int v23 = v59;
                    }
                    else
                    {
                      unsigned int v60 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, const char **, char *))(a3 + 176))(a1, a2, *((unsigned __int16 *)v259 + 548), 0, v257, (char *)&v292 + 2);
                      uint64_t v61 = 0;
                      if ((v60 & 0x80000000) == 0)
                      {
                        uint64_t v256 = a3;
                        if (HIWORD(v292) >= 2u)
                        {
                          uint64_t v248 = v51;
                          unsigned __int16 v62 = v292;
                          if ((_WORD)v292)
                          {
                            unsigned __int16 v246 = 0;
                            int v63 = 0;
                            while (1)
                            {
                              unsigned int v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(v256 + 120))(a1, v264, v62, (char *)&v291 + 2);
                              if ((v64 & 0x80000000) != 0) {
                                break;
                              }
                              unsigned int v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(v256 + 168))(a1, v264, (unsigned __int16)v292, 0, 1, &v288, (char *)&v292 + 2);
                              if ((v64 & 0x80000000) != 0) {
                                break;
                              }
                              if (v288 <= 0xA && ((1 << v288) & 0x610) != 0)
                              {
                                unsigned int v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(v256 + 168))(a1, v264, (unsigned __int16)v292, 1, 1, &v291, (char *)&v292 + 2);
                                if ((v64 & 0x80000000) != 0) {
                                  break;
                                }
                                unsigned int v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(v256 + 168))(a1, v264, (unsigned __int16)v292, 2, 1, (char *)&v290 + 2, (char *)&v292 + 2);
                                if ((v64 & 0x80000000) != 0) {
                                  break;
                                }
                                if (!(_WORD)v291
                                  || v63 + 1 == (unsigned __int16)v291
                                  && HIWORD(v290) > (unsigned __int16)v291)
                                {
                                  uint64_t v66 = v256;
                                  unsigned int word_separating_markers = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(v256 + 176))(a1, v264, (unsigned __int16)v292, 3, &v280, (char *)&v292 + 2);
                                  if ((word_separating_markers & 0x80000000) != 0) {
                                    goto LABEL_186;
                                  }
                                  unint64_t v68 = v280;
                                  __n128 v69 = (_WORD *)&v51[5 * v246 + 3] + 1;
                                  if (strstr(v280, "comma"))
                                  {
                                    *__n128 v69 = 11;
                                  }
                                  else
                                  {
                                    *__n128 v69 = 1;
                                    uint64_t v70 = strchr(v68, 46);
                                    int v285 = v70;
                                    if (v70)
                                    {
                                      int v71 = 1;
                                      do
                                      {
                                        uint64_t v72 = v70 + 1;
                                        int v285 = v72;
                                        *__n128 v69 = ++v71;
                                        uint64_t v70 = strchr(v72, 46);
                                        int v285 = v70;
                                      }
                                      while (v70);
                                    }
                                  }
                                  unsigned int v73 = (unsigned __int16)v291;
                                  if ((unsigned __int16)v291 >= HIWORD(v290))
                                  {
                                    int v74 = 0;
                                  }
                                  else
                                  {
                                    int v74 = 0;
                                    do
                                    {
                                      BOOL IsChineseLetter = utf8_IsChineseLetter(&(*v257)[v73]);
                                      unsigned int v76 = (*v257)[v73];
                                      if (v76 > 0x3E || ((1 << v76) & 0x4C00510000000000) == 0) {
                                        int v78 = 1;
                                      }
                                      else {
                                        int v78 = v74;
                                      }
                                      if (!IsChineseLetter) {
                                        int v74 = v78;
                                      }
                                      v73 += utf8_determineUTF8CharLength((*v257)[v73]);
                                    }
                                    while (v73 < HIWORD(v290));
                                  }
                                  unsigned int v79 = v246;
                                  uint64_t v80 = &v51[5 * v246];
                                  *((_WORD *)v80 + 12) = v292;
                                  if (!a12)
                                  {
                                    unsigned int TNmarker = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(v256 + 176))(a1, v264, (unsigned __int16)v292, 14, &v286, (char *)&v292 + 2);
                                    if ((TNmarker & 0x80000000) != 0) {
                                      goto LABEL_131;
                                    }
                                    if (!hlp_NLUStrFind(v286, "POS", (uint64_t *)&v284, &v283))
                                    {
                                      uint64_t v61 = 0;
                                      uint64_t v106 = 0;
                                      unsigned int v23 = -1979703296;
                                      goto LABEL_132;
                                    }
                                    uint64_t v82 = &v51[5 * v246];
                                    *(unsigned char *)v82[1] = 0;
                                    unsigned __int16 v83 = (char *)v82[1];
                                    if (v74) {
                                      *(_DWORD *)&v83[strlen((const char *)v82[1])] = 7237486;
                                    }
                                    else {
                                      strncat(v83, v284, v283);
                                    }
                                    uint64_t v66 = v256;
                                    unsigned int v79 = v246;
                                  }
                                  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(v66 + 184))(a1, v264, (unsigned __int16)v292, 9, (char *)&v292 + 2) & 0x80000000) == 0&& HIWORD(v292) == 1)
                                  {
                                    unsigned int TNmarker = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(v66 + 176))(a1, v264, (unsigned __int16)v292, 9, &v51[5 * v79 + 2], (char *)&v292 + 2);
                                    if ((TNmarker & 0x80000000) != 0) {
                                      goto LABEL_131;
                                    }
                                  }
                                  uint64_t v84 = HIWORD(v290);
                                  uint64_t v85 = (unsigned __int16)v291;
                                  int v86 = HIWORD(v290) - (unsigned __int16)v291;
                                  unsigned int v87 = (void *)*v80;
                                  if (v86 >= 128)
                                  {
                                    uint64_t v88 = heap_Realloc(*(uint64_t **)(v263 + 8), *v80, (v86 + 1));
                                    *uint64_t v80 = v88;
                                    if (!v88)
                                    {
                                      uint64_t v14 = v263;
                                      log_OutPublic(*(void *)(v263 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v89, v90, v91, v92, v241);
                                      uint64_t v61 = 0;
                                      uint64_t v106 = 0;
                                      goto LABEL_187;
                                    }
                                    unsigned int v87 = (void *)v88;
                                    uint64_t v85 = (unsigned __int16)v291;
                                    uint64_t v84 = HIWORD(v290);
                                  }
                                  uint64_t v15 = (uint64_t)v259;
                                  memcpy(v87, &(*v257)[v85], v84 - v85);
                                  *(unsigned char *)(*v80 - (unsigned __int16)v291 + HIWORD(v290)) = 0;
                                  uint64_t v93 = &v51[5 * v79];
                                  int v63 = HIWORD(v290);
                                  *((_DWORD *)v93 + 7) = (unsigned __int16)v291;
                                  *((_DWORD *)v93 + 8) = v63;
                                  ++v246;
                                  uint64_t v14 = v263;
                                }
                              }
                              unsigned __int16 v62 = HIWORD(v291);
                              LOWORD(v292) = HIWORD(v291);
                              if (!HIWORD(v291)) {
                                goto LABEL_120;
                              }
                            }
                            uint64_t v61 = 0;
                            uint64_t v106 = 0;
                            unsigned int v23 = v64;
LABEL_188:
                            unsigned __int16 v107 = v260;
                            goto LABEL_143;
                          }
LABEL_120:
                          uint64_t v94 = a1;
                          unsigned int word_separating_markers = pw_get_word_separating_markers(v256, v14, a1, v264, *(unsigned __int16 *)(v15 + 1096), (uint64_t *)&v277, &v276);
                          if ((word_separating_markers & 0x80000000) != 0)
                          {
LABEL_186:
                            uint64_t v61 = 0;
                            uint64_t v106 = 0;
                            unsigned int v23 = word_separating_markers;
                            goto LABEL_187;
                          }
                          unsigned int v98 = v276;
                          log_OutText(*(void *)(v14 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Info: Valid Word Seperator Markers Count:%d", v95, v96, v97, v276);
                          uint64_t v102 = v14;
                          if (v98)
                          {
                            int v103 = 0;
                            int v104 = v277;
                            do
                              log_OutText(*(void *)(v102 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Info: Valid Word Seperator Markers POS:%d", v99, v100, v101, v104[(unsigned __int16)v103++]);
                            while (v98 > (unsigned __int16)v103);
                          }
                          unsigned int TNmarker = getTNmarker(*((unsigned __int16 *)v259 + 548), v102, v256, a1, v264, &v272);
                          if ((TNmarker & 0x80000000) != 0
                            || (uint64_t v105 = v272,
                                *a10 = v272,
                                *((_WORD *)v259 + 536) = 0,
                                *((void *)v259 + 133) = 0,
                                unsigned int TNmarker = pw_nn_process(v263, a6, v51, v260, (uint64_t *)&v275, &v290, a7, a8, a9, v105, v259[16], *((const char ***)v259 + 3), a13), (TNmarker & 0x80000000) != 0)|| (paramc_ParamGetStr(*(void *)(v263 + 40), (uint64_t)"spaceInPYT", &v287) & 0x80000000) == 0&& !LH_stricmp(v287, "yes")&& (unsigned int TNmarker = pw_PYT_process(v256, a1,
                                             v264,
                                             v263,
                                             (uint64_t)v51,
                                             v260,
                                             v277,
                                             v98,
                                             (uint64_t *)&v275,
                                             (unsigned __int16 *)&v290),
                                (TNmarker & 0x80000000) != 0))
                          {
LABEL_131:
                            uint64_t v61 = 0;
                            uint64_t v106 = 0;
                            unsigned int v23 = TNmarker;
                            goto LABEL_132;
                          }
                          int v262 = (unsigned __int16 *)(v259 + 1072);
                          if (*((_DWORD *)v259 + 8) == 1)
                          {
                            unsigned int TNmarker = pw_group_csc(v263, (uint64_t)v278, (uint64_t)v51, v260, (char *)v259 + 36, (uint64_t)v275, (unsigned __int16)v290, v254, v262, *v259, *((const char ***)v259 + 1));
                            if ((TNmarker & 0x80000000) != 0) {
                              goto LABEL_131;
                            }
                          }
                          else
                          {
                            *int v262 = v290;
                            *char v254 = (uint64_t)v275;
                            unsigned __int16 v275 = 0;
                            LOWORD(v290) = 0;
                          }
                          unsigned int v118 = pw_respect_word_separating_markers(v256, v263, a1, v264, *((unsigned __int16 *)v259 + 548), v254, v262);
                          if ((v118 & 0x80000000) != 0
                            || a11
                            && (unsigned int v118 = pw_igtree_process(v263, (uint64_t)v51, v254, v262, v260, a11),
                                (v118 & 0x80000000) != 0))
                          {
                            uint64_t v61 = 0;
                            uint64_t v106 = 0;
                            unsigned int v23 = v118;
                            goto LABEL_132;
                          }
                          if (!*v257)
                          {
                            uint64_t v14 = v263;
                            uint64_t v15 = (uint64_t)v259;
                            freePwTids((void *)v263, (uint64_t)v259);
                            uint64_t v61 = 0;
                            uint64_t v106 = 0;
                            unsigned int v23 = v118;
                            goto LABEL_188;
                          }
                          unsigned int __s = (char *)heap_Calloc(*(void **)(v263 + 8), 1024, 1);
                          if (!__s)
                          {
                            uint64_t v61 = 0;
                            uint64_t v106 = 0;
LABEL_132:
                            uint64_t v14 = v263;
LABEL_187:
                            uint64_t v15 = (uint64_t)v259;
                            goto LABEL_188;
                          }
                          uint64_t v106 = heap_Calloc(*(void **)(v263 + 8), 64, 1);
                          if (!v106) {
                            goto LABEL_416;
                          }
                          unsigned __int16 v119 = strlen(*((const char **)v259 + 136));
                          uint64_t v120 = heap_Calloc(*(void **)(v263 + 8), *((unsigned __int16 *)v259 + 536), v119 + 2);
                          *((void *)v259 + 135) = v120;
                          if (!v120) {
                            goto LABEL_416;
                          }
                          if (*v262)
                          {
                            int v124 = 0;
                            unsigned __int16 v125 = 0;
                            unsigned __int16 v244 = 64;
                            unsigned __int16 v245 = 1024;
                            while (1)
                            {
                              unsigned int v252 = v125;
                              int v126 = *(unsigned __int16 *)(*v254 + 184 * v125 + 8);
                              if (v126 == 1) {
                                break;
                              }
                              if (!v126)
                              {
                                uint64_t v14 = v263;
                                log_OutText(*(void *)(v263 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error: the prosody word should has at least one lexical word", v121, v122, v123, v242);
LABEL_417:
                                uint64_t v15 = (uint64_t)v259;
                                unsigned __int16 v107 = v260;
                                int v51 = v248;
                                uint64_t v61 = (uint64_t)__s;
LABEL_143:
                                if (v271)
                                {
                                  heap_Free(*(void **)(v14 + 8), (uint64_t)v271);
                                  uint64_t v271 = 0;
                                }
                                if ((v23 & 0x80000000) != 0)
                                {
                                  uint64_t v108 = v272;
                                  if (v272)
                                  {
                                    uint64_t v109 = *(void *)(v272 + 8);
                                    if (v109) {
                                      heap_Free(*(void **)(v14 + 8), v109);
                                    }
                                    *(void *)(v108 + 8) = 0;
                                    heap_Free(*(void **)(v14 + 8), v108);
                                    uint64_t v272 = 0;
                                  }
                                  freePwTids((void *)v14, v15);
                                }
                                if (v277) {
                                  heap_Free(*(void **)(v14 + 8), (uint64_t)v277);
                                }
                                if (v51)
                                {
                                  if (v107)
                                  {
                                    uint64_t v110 = v107;
                                    uint64_t v111 = v51 + 1;
                                    do
                                    {
                                      uint64_t v112 = *(v111 - 1);
                                      if (v112)
                                      {
                                        heap_Free(*(void **)(v14 + 8), v112);
                                        *(v111 - 1) = 0;
                                      }
                                      if (*v111)
                                      {
                                        heap_Free(*(void **)(v14 + 8), *v111);
                                        *uint64_t v111 = 0;
                                      }
                                      v111 += 5;
                                      --v110;
                                    }
                                    while (v110);
                                  }
                                  heap_Free(*(void **)(v14 + 8), (uint64_t)v51);
                                }
                                uint64_t v113 = (uint64_t)v275;
                                if (v275)
                                {
                                  uint64_t v114 = (unsigned __int16)v290;
                                  if ((_WORD)v290)
                                  {
                                    uint64_t v115 = v275;
                                    do
                                    {
                                      if (*v115)
                                      {
                                        heap_Free(*(void **)(v14 + 8), *v115);
                                        uint64_t *v115 = 0;
                                      }
                                      v115 += 23;
                                      --v114;
                                    }
                                    while (v114);
                                  }
                                  heap_Free(*(void **)(v14 + 8), v113);
                                  unsigned __int16 v275 = 0;
                                }
                                if (v61) {
                                  heap_Free(*(void **)(v14 + 8), v61);
                                }
                                if (v106) {
                                  heap_Free(*(void **)(v14 + 8), v106);
                                }
                                if ((_WORD)v290) {
                                  BOOL v116 = 0;
                                }
                                else {
                                  BOOL v116 = v23 == -1979703288;
                                }
                                if (v116) {
                                  return 0;
                                }
                                else {
                                  return v23;
                                }
                              }
                              uint64_t v270 = 0;
                              __int16 v243 = strlen(*v257);
                              bzero(__s, 0x400uLL);
                              *(_OWORD *)(v106 + 32) = 0u;
                              *(_OWORD *)(v106 + 48) = 0u;
                              *(_OWORD *)uint64_t v106 = 0u;
                              *(_OWORD *)(v106 + 16) = 0u;
                              long long v297 = 0u;
                              long long v296 = 0u;
                              long long v295 = 0u;
                              long long v294 = 0u;
                              uint64_t v127 = *v254;
                              if (*(_WORD *)(*v254 + 184 * v252 + 8))
                              {
                                uint64_t v128 = 0;
                                int v129 = 0;
                                int v250 = 1;
                                while (1)
                                {
                                  unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(v256 + 168))(v94, v264, *(unsigned __int16 *)(*(void *)(v127 + 184 * v252) + 2 * v128), 1, 1, &v291, (char *)&v292 + 2);
                                  if ((v130 & 0x80000000) != 0) {
                                    break;
                                  }
                                  unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(v256 + 168))(v94, v264, *(unsigned __int16 *)(*(void *)(*v254 + 184 * v252) + 2 * v128), 2, 1, (char *)&v290 + 2, (char *)&v292 + 2);
                                  if ((v130 & 0x80000000) != 0) {
                                    break;
                                  }
                                  unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(v256 + 176))(v94, v264, *(unsigned __int16 *)(*(void *)(*v254 + 184 * v252) + 2 * v128), 3, &v280, (char *)&v292 + 2);
                                  if ((v130 & 0x80000000) != 0) {
                                    break;
                                  }
                                  if (a12
                                    && ((*(void (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int16 *))(v256 + 184))(v94, v264, (unsigned __int16)v292, 14, &v282), v282 != 1))
                                  {
                                    int v247 = 0;
                                    char v249 = 1;
                                  }
                                  else
                                  {
                                    unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(v256 + 176))(v94, v264, *(unsigned __int16 *)(*(void *)(*v254 + 184 * v252) + 2 * v128), 14, &v286, (char *)&v292 + 2);
                                    if ((v130 & 0x80000000) != 0) {
                                      break;
                                    }
                                    char v249 = 0;
                                    int v247 = 1;
                                  }
                                  if (!v128) {
                                    *(_WORD *)(*v254 + 184 * v252 + 16) = v291;
                                  }
                                  if ((v249 & 1) == 0)
                                  {
                                    uint64_t v131 = *(uint64_t **)(v263 + 8);
                                    size_t v132 = strlen(v286);
                                    size_t v133 = v132;
                                    if (v271)
                                    {
                                      size_t v134 = strlen(v271);
                                      uint64_t v135 = (char *)heap_Realloc(v131, (uint64_t)v271, v133 + v134 + 2);
                                      if (!v135) {
                                        goto LABEL_416;
                                      }
                                      uint64_t v136 = v135;
                                      uint64_t v271 = v135;
                                      *(_WORD *)&v135[strlen(v135)] = 59;
                                      strcat(v136, v286);
                                    }
                                    else
                                    {
                                      __int16 v137 = (char *)heap_Alloc((uint64_t)v131, v132 + 1);
                                      uint64_t v271 = v137;
                                      if (!v137) {
                                        goto LABEL_416;
                                      }
                                      strcpy(v137, v286);
                                    }
                                  }
                                  if (v250)
                                  {
                                    int v250 = 0;
                                    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int16 *))(v256 + 184))(v94, v264, *(unsigned __int16 *)(*(void *)(*v254 + 184 * v252) + 2 * v128), 10, &v282) & 0x80000000) == 0&& v282 == 1)
                                    {
                                      unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, char *))(v256 + 176))(v94, v264, *(unsigned __int16 *)(*(void *)(*v254 + 184 * v252) + 2 * v128), 10, &v270, (char *)&v292 + 2);
                                      if ((v130 & 0x80000000) != 0) {
                                        break;
                                      }
                                      int v250 = 1;
                                    }
                                  }
                                  else
                                  {
                                    int v250 = 0;
                                  }
                                  __int16 v138 = v280;
                                  if (v128)
                                  {
                                    size_t v139 = strlen(__s);
                                    if (v139 + strlen(v280) + 1 > v245)
                                    {
                                      uint64_t v140 = heap_Realloc(*(uint64_t **)(v263 + 8), (uint64_t)__s, (unsigned __int16)(v245 + 1024));
                                      if (!v140) {
                                        goto LABEL_416;
                                      }
                                      unsigned int __s = (char *)v140;
                                      v245 += 1024;
                                    }
                                    (*v257)[(unsigned __int16)v291 - 1] = 45;
                                    __int16 v138 = v280;
                                    if (*v280)
                                    {
                                      *(_WORD *)&__s[strlen(__s)] = 46;
                                      __int16 v138 = v280;
                                    }
                                    uint64_t v141 = *(unsigned __int16 *)(*(void *)(*v254 + 184 * v252) + 2 * v128);
                                    __int16 v142 = strstr(v138, "{SEP");
                                    int v285 = v142;
                                    if (v142)
                                    {
                                      int v285 = v142 + 4;
                                      v142[4] += v129;
                                      __int16 v138 = v280;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v141 = 0;
                                  }
                                  strcat(__s, v138);
                                  if ((v249 & 1) == 0 && hlp_NLUStrFind(v286, "POS", (uint64_t *)&v284, &v283))
                                  {
                                    if (strlen((const char *)v106) + v283 + 2 > v244)
                                    {
                                      uint64_t v143 = heap_Realloc(*(uint64_t **)(v263 + 8), v106, (unsigned __int16)(v244 + 64) + 1);
                                      if (!v143) {
                                        goto LABEL_416;
                                      }
                                      uint64_t v106 = v143;
                                      v244 += 64;
                                    }
                                    if (*(unsigned char *)v106) {
                                      *(_WORD *)(v106 + strlen((const char *)v106)) = 45;
                                    }
                                    strncat((char *)v106, v284, v283);
                                  }
                                  int v144 = v250;
                                  if (!v270) {
                                    int v144 = 0;
                                  }
                                  if (v144 == 1) {
                                    __strcat_chk();
                                  }
                                  unsigned int v145 = v280;
                                  if (v280)
                                  {
                                    do
                                    {
                                      uint64_t v146 = v145;
                                      int v147 = v129;
                                      int v129 = 0;
                                      int v285 = strstr(v145, "{SEP");
                                      unsigned int v145 = v285 + 1;
                                    }
                                    while (v285);
                                    for (uint64_t i = v146; ; uint64_t i = v149 + 1)
                                    {
                                      uint64_t v149 = strchr(i, 46);
                                      int v285 = v149;
                                      if (!v149) {
                                        break;
                                      }
                                      ++v147;
                                    }
                                  }
                                  else
                                  {
                                    int v147 = v129;
                                  }
                                  if (v141)
                                  {
                                    unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v256 + 192))(v94, v264, v141);
                                    if ((v130 & 0x80000000) != 0) {
                                      break;
                                    }
                                  }
                                  int v129 = v147 + 1;
                                  uint64_t v127 = *v254;
                                  if (++v128 >= (unint64_t)*(unsigned __int16 *)(*v254 + 184 * v252 + 8)) {
                                    goto LABEL_266;
                                  }
                                }
LABEL_415:
                                unsigned int v23 = v130;
                                goto LABEL_416;
                              }
                              int v250 = 1;
                              int v247 = v124;
LABEL_266:
                              if (v247)
                              {
                                unsigned int v130 = pw_merge_NLU(v263, &v271);
                                if ((v130 & 0x80000000) != 0) {
                                  goto LABEL_415;
                                }
                                uint64_t v127 = *v254;
                              }
                              if (*((_DWORD *)v259 + 8) == 1)
                              {
                                pw_split_csc_pw(v127 + 184 * v252, __s);
                                uint64_t v127 = *v254;
                              }
                              unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(v256 + 160))(v94, v264, **(unsigned __int16 **)(v127 + 184 * v252), 2, 1, (char *)&v290 + 2, &v289);
                              if ((v130 & 0x80000000) != 0) {
                                goto LABEL_415;
                              }
                              unsigned __int16 v152 = v252 + v252 * v243;
                              __int16 v153 = HIWORD(v290);
                              uint64_t v154 = *((void *)v259 + 133) + 184 * v252;
                              *(_WORD *)(v154 + 18) = HIWORD(v290);
                              uint64_t v155 = *(unsigned __int16 *)(v154 + 16);
                              size_t v156 = (unsigned __int16)(v153 - v155);
                              memcpy((void *)(*((void *)v259 + 135) + v152), (const void *)(*((void *)v259 + 136) + v155), v156);
                              *(unsigned char *)(*((void *)v259 + 135) + v152 + v156) = 0;
                              unsigned int v157 = (unsigned __int16 **)(*((void *)v259 + 133) + 184 * v252);
                              v157[7] = (unsigned __int16 *)(*((void *)v259 + 135) + v152);
                              uint64_t v158 = **v157;
                              __int16 v159 = strlen(__s);
                              unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(v256 + 160))(v94, v264, v158, 3, (unsigned __int16)(v159 + 1), __s, &v289);
                              if ((v130 & 0x80000000) != 0) {
                                goto LABEL_415;
                              }
                              size_t v160 = strlen(__s);
                              uint64_t v161 = (char *)heap_Alloc(*(void *)(v263 + 8), v160 + 1);
                              *(void *)(*v254 + 184 * v252 + 24) = v161;
                              if (!v161) {
                                goto LABEL_416;
                              }
                              strcpy(v161, __s);
                              if (v247)
                              {
                                uint64_t v162 = v271;
                                hlp_NLUStrRemoveKeyVal(v271, "POS");
                                hlp_NLUStrSet(v162, "POS", (char *)v106);
                                uint64_t v163 = v271;
                                __int16 v164 = strlen(v271);
                                (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(v256 + 160))(v94, v264, **(unsigned __int16 **)(*v254 + 184 * v252), 14, (unsigned __int16)(v164 + 1), v271, &v289);
                                size_t v165 = strlen(v163);
                                int v166 = (char *)heap_Alloc(*(void *)(v263 + 8), v165 + 1);
                                *(void *)(*v254 + 184 * v252 + 40) = v166;
                                if (!v166) {
                                  goto LABEL_416;
                                }
                                strcpy(v166, v163);
                                char v286 = &byte_20D5A22AE;
                                if (v163)
                                {
                                  heap_Free(*(void **)(v263 + 8), (uint64_t)v163);
                                  uint64_t v271 = 0;
                                }
                              }
                              if (v250)
                              {
                                __int16 v167 = strlen((const char *)&v294);
                                unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, long long *, __int16 *))(v256 + 160))(v94, v264, **(unsigned __int16 **)(*v254 + 184 * v252), 10, (unsigned __int16)(v167 + 1), &v294, &v289);
                                if ((v130 & 0x80000000) != 0) {
                                  goto LABEL_415;
                                }
                              }
LABEL_290:
                              unsigned __int16 v125 = v252 + 1;
                              int v124 = v247;
                              if (*v262 <= (unsigned __int16)(v252 + 1)) {
                                goto LABEL_291;
                              }
                            }
                            __int16 v150 = strlen(*v257);
                            unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *))(v256 + 168))(v94, v264, **(unsigned __int16 **)(*v254 + 184 * v252), 1, 1, *v254 + 184 * v252 + 16, (char *)&v292 + 2);
                            if ((v130 & 0x80000000) != 0) {
                              goto LABEL_415;
                            }
                            unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *))(v256 + 168))(v94, v264, **(unsigned __int16 **)(*v254 + 184 * v252), 2, 1, *v254 + 184 * v252 + 18, (char *)&v292 + 2);
                            if ((v130 & 0x80000000) != 0) {
                              goto LABEL_415;
                            }
                            unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(v256 + 176))(v94, v264, **(unsigned __int16 **)(*v254 + 184 * v252), 3, &v280, (char *)&v292 + 2);
                            if ((v130 & 0x80000000) != 0) {
                              goto LABEL_415;
                            }
                            if (a12)
                            {
                              unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int16 *))(v256 + 184))(v94, v264, (unsigned __int16)v292, 14, &v282);
                              int v247 = v282;
                              if (!v282) {
                                goto LABEL_264;
                              }
                              if (v282 != 1)
                              {
                                if ((v130 & 0x80000000) != 0) {
                                  goto LABEL_415;
                                }
                                int v247 = v124;
                                if (!v124)
                                {
LABEL_264:
                                  int v247 = 0;
                                  char v286 = 0;
                                  char v151 = 1;
LABEL_284:
                                  unsigned __int16 v168 = v252 + v252 * v150;
                                  uint64_t v169 = *((void *)v259 + 133) + 184 * v252;
                                  __int16 v170 = *(_WORD *)(v169 + 18);
                                  uint64_t v171 = *(unsigned __int16 *)(v169 + 16);
                                  size_t v172 = (unsigned __int16)(v170 - v171);
                                  memcpy((void *)(*((void *)v259 + 135) + v168), (const void *)(*((void *)v259 + 136) + v171), v172);
                                  *(unsigned char *)(*((void *)v259 + 135) + v168 + v172) = 0;
                                  uint64_t v173 = *((void *)v259 + 133);
                                  *(void *)(v173 + 184 * v252 + 56) = *((void *)v259 + 135) + v168;
                                  if (v151)
                                  {
                                    *(void *)(v173 + 184 * v252 + 40) = 0;
                                  }
                                  else
                                  {
                                    unsigned __int16 v174 = strlen(v286);
                                    BOOL v175 = (char *)heap_Alloc(*(void *)(v263 + 8), v174 + 1);
                                    *(void *)(*v254 + 184 * v252 + 40) = v175;
                                    if (!v175) {
                                      goto LABEL_416;
                                    }
                                    strcpy(v175, v286);
                                  }
                                  size_t v176 = strlen(v280);
                                  __int16 v177 = (char *)heap_Alloc(*(void *)(v263 + 8), v176 + 1);
                                  *(void *)(*v254 + 184 * v252 + 24) = v177;
                                  if (!v177) {
                                    goto LABEL_416;
                                  }
                                  strcpy(v177, v280);
                                  goto LABEL_290;
                                }
                              }
                            }
                            else
                            {
                              int v247 = 1;
                            }
                            unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(v256 + 176))(v94, v264, **(unsigned __int16 **)(*v254 + 184 * v252), 14, &v286, (char *)&v292 + 2);
                            if ((v130 & 0x80000000) != 0) {
                              goto LABEL_415;
                            }
                            char v151 = 0;
                            goto LABEL_284;
                          }
LABEL_291:
                          freePwTids((void *)v263, (uint64_t)v259);
                          *((_WORD *)v259 + 537) = *((_WORD *)v259 + 536);
                          unsigned int v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v256 + 104))(v94, v264, 2, *((unsigned __int16 *)v259 + 548), &v292);
                          if ((v23 & 0x80000000) != 0) {
                            goto LABEL_416;
                          }
                          bzero(__s, 0x400uLL);
                          *(_OWORD *)(v106 + 32) = 0u;
                          *(_OWORD *)(v106 + 48) = 0u;
                          *(_OWORD *)uint64_t v106 = 0u;
                          *(_OWORD *)(v106 + 16) = 0u;
                          long long v297 = 0u;
                          long long v296 = 0u;
                          long long v295 = 0u;
                          long long v294 = 0u;
                          HIWORD(v291) = 0;
                          unsigned __int16 v178 = v292;
                          if (!(_WORD)v292)
                          {
LABEL_416:
                            uint64_t v14 = v263;
                            goto LABEL_417;
                          }
                          int v179 = 0;
                          LOWORD(v253) = 0;
                          int v180 = 0;
                          while (2)
                          {
                            unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(v256 + 120))(v94, v264, v178, (char *)&v291 + 2);
                            if ((v130 & 0x80000000) != 0) {
                              goto LABEL_415;
                            }
                            unsigned int v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(v256 + 168))(v94, v264, (unsigned __int16)v292, 0, 1, &v288, (char *)&v292 + 2);
                            if ((v23 & 0x80000000) != 0) {
                              goto LABEL_416;
                            }
                            if (v288 <= 0xA && ((1 << v288) & 0x610) != 0)
                            {
                              uint64_t v182 = *v254;
                              uint64_t v183 = *v254 + 184 * (unsigned __int16)v179;
                              *(_DWORD *)(v183 + 36) = v288;
                              LOWORD(v291) = *(_WORD *)(v183 + 16);
                              unsigned int v184 = *(unsigned __int16 *)(v183 + 18);
                              HIWORD(v290) = v184;
                              if ((_WORD)v291)
                              {
                                if (v180 + 1 != (unsigned __int16)v291 || v184 <= (unsigned __int16)v291) {
                                  goto LABEL_391;
                                }
                              }
                              uint64_t v270 = 0;
                              uint64_t v186 = v182 + 184 * (unsigned __int16)v179;
                              uint64_t v280 = *(char **)(v186 + 24);
                              char v286 = 0;
                              char v286 = *(char **)(v186 + 40);
                              if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int16 *))(v256 + 184))(v94, v264, (unsigned __int16)v292, 10, &v282) & 0x80000000) == 0&& v282 == 1)
                              {
                                unsigned int v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, char *))(v256 + 176))(v94, v264, (unsigned __int16)v292, 10, &v270, (char *)&v292 + 2);
                                if ((v23 & 0x80000000) != 0) {
                                  goto LABEL_416;
                                }
                              }
                              if (HIWORD(v290) - (unsigned __int16)v291 > 5)
                              {
                                BOOL v187 = 0;
LABEL_339:
                                if (checkAttachedPunc(*(const char **)(*v254
                                                                                    + 184 * (unsigned __int16)v179
                                                                                    + 56)))
                                {
                                  LOBYTE(v274) = 0;
                                }
                                else
                                {
                                  uint64_t v205 = &(*v257)[HIWORD(v290)];
                                  unsigned __int8 v206 = *(v205 - 1);
                                  LOWORD(v274) = *(_WORD *)(v205 - 3);
                                  HIWORD(v274) = v206;
                                }
                                goto LABEL_342;
                              }
                              *(void *)int v293 = 0;
                              char v269 = 0;
                              *(_DWORD *)__s1 = 0;
                              unint64_t v188 = HIWORD(v290) - (unint64_t)(unsigned __int16)v291;
                              __memcpy_chk();
                              v293[v188] = 0;
                              if (utf8_IsChineseLetter(v293))
                              {
                                uint64_t v189 = v276;
                                if (v276)
                                {
                                  int v190 = v277;
                                  do
                                  {
                                    int v191 = *v190++;
                                    if (v191 == (unsigned __int16)v291) {
                                      goto LABEL_336;
                                    }
                                  }
                                  while (--v189);
                                }
                                if (*(_DWORD *)v272 && *(_WORD *)(v272 + 4))
                                {
                                  int v192 = *(unsigned int **)(v272 + 8);
                                  uint64_t v193 = *(unsigned __int16 *)(v272 + 4) - 1;
                                  do
                                  {
                                    unsigned int v195 = *v192++;
                                    unsigned int v194 = v195;
                                    if (v195 == HIWORD(v290)) {
                                      goto LABEL_336;
                                    }
                                  }
                                  while (v194 <= HIWORD(v290) && v193-- != 0);
                                }
                                if (!strstr(v280, "11") || !utf8_IsChineseLetter((const char *)&v274))
                                {
                                  int v267 = 0;
                                  unsigned int v197 = strlen(v293);
                                  int v265 = 0;
                                  int v266 = 0;
                                  utf8_Utf8ToUtf32_Tolerant((uint64_t)v293, v197, (uint64_t)&v267, 1u, &v266);
                                  int v198 = v266;
                                  if (v197 <= 3) {
                                    int v198 = 0;
                                  }
                                  utf8_Utf32ToUtf8((uint64_t)&v267, 1, (uint64_t)__s1, v197 - v198, &v265);
                                  __s1[v265] = 0;
                                  unsigned __int8 v199 = *v259;
                                  if (*v259)
                                  {
                                    unint64_t v200 = 0;
                                    do
                                    {
                                      if (!strcmp(__s1, *(const char **)(*((void *)v259 + 1) + 8 * v200)))
                                      {
                                        if (utf8_IsChineseLetter((const char *)&v274)) {
                                          goto LABEL_327;
                                        }
                                        unsigned __int8 v199 = *v259;
                                      }
                                      ++v200;
                                    }
                                    while (v200 < v199);
                                  }
                                  goto LABEL_336;
                                }
LABEL_327:
                                BOOL v187 = 1;
                              }
                              else
                              {
LABEL_336:
                                BOOL v187 = 0;
                              }
                              unint64_t v201 = HIWORD(v290) - (unint64_t)(unsigned __int16)v291;
                              if (HIWORD(v290) - (unsigned __int16)v291 > 2) {
                                goto LABEL_339;
                              }
                              __memcpy_chk();
                              *((unsigned char *)&v274 + v201) = 0;
LABEL_342:
                              if (v187)
                              {
                                if ((_WORD)v253)
                                {
                                  *(_DWORD *)int v293 = 0;
                                  unsigned int v23 = pw_check_if_glue_forbidden(v256, v94, v264, *((unsigned __int16 *)v259 + 548), (unsigned __int16)v253, (unsigned __int16)v292, (int *)v293);
                                  BOOL v187 = *(_DWORD *)v293 == 0;
                                  if ((v23 & 0x80000000) != 0) {
                                    goto LABEL_416;
                                  }
                                }
                              }
                              if (v286)
                              {
                                hlp_NLUStrFind(v286, "POS", (uint64_t *)&v284, &v283);
                                if (v270
                                  && (size_t v207 = strlen((const char *)&v294), v207 + strlen(v270) - 63 < 0xFFFFFFFFFFFFFFC0)
                                  || v284
                                  && (size_t v208 = strlen((const char *)v106), v208 + strlen(v284) - 62 < 0xFFFFFFFFFFFFFFC0)
                                  || v280 && (size_t v209 = strlen(__s), v209 + strlen(v280) - 1022 <= 0xFFFFFFFFFFFFFBFFLL))
                                {
                                  log_OutText(*(void *)(v263 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip the merging due to the length limit of prosodic word", v202, v203, v204, v242);
                                  goto LABEL_372;
                                }
                              }
                              else
                              {
                                unsigned __int16 v283 = 0;
                                int v284 = 0;
                              }
                              if (v187
                                && (_WORD)v253
                                && (v273[0] == 1769234796 ? (BOOL v210 = LOWORD(v273[1]) == 110) : (BOOL v210 = 0), !v210))
                              {
                                log_OutText(*(void *)(v263 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"merge special auxiliary word and neutral tone cases", v202, v203, v204, v242);
                                (*v257)[(unsigned __int16)v291 - 1] = 45;
                                *(_WORD *)&__s[strlen(__s)] = 46;
                                uint64_t v211 = v280;
                                if (v280)
                                {
                                  size_t v212 = strlen(v280);
                                  unint64_t v213 = strlen(__s) + v212;
                                  if (v213 >= 0x401)
                                  {
                                    uint64_t v214 = heap_Realloc(*(uint64_t **)(v263 + 8), (uint64_t)__s, v213 + 1);
                                    if (!v214) {
                                      goto LABEL_420;
                                    }
                                    uint64_t v211 = v280;
                                    unsigned int __s = (char *)v214;
                                  }
                                  strcat(__s, v211);
                                }
                                if (v286)
                                {
                                  if (v283)
                                  {
                                    *(_WORD *)(v106 + strlen((const char *)v106)) = 45;
                                    if (v284) {
                                      strncat((char *)v106, v284, v283);
                                    }
                                  }
                                }
                                if (v270 && (_BYTE)v294) {
                                  __strcat_chk();
                                }
                                else {
                                  LOBYTE(v294) = 0;
                                }
                                unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v256 + 192))(v94, v264, (unsigned __int16)v292);
                                if ((v130 & 0x80000000) != 0) {
                                  goto LABEL_415;
                                }
                                unsigned int v130 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(v256 + 160))(v94, v264, (unsigned __int16)v253, 2, 1, (char *)&v290 + 2, &v289);
                                if ((v130 & 0x80000000) != 0) {
                                  goto LABEL_415;
                                }
                                __int16 v220 = strlen(__s);
                                unsigned int v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(v256 + 160))(v94, v264, (unsigned __int16)v253, 3, (unsigned __int16)(v220 + 1), __s, &v289);
                                if ((v23 & 0x80000000) != 0) {
                                  goto LABEL_416;
                                }
                                if (v286)
                                {
                                  size_t v221 = strlen(*(const char **)(*v254 + 184 * ((unsigned __int16)v179 - 1) + 40));
                                  size_t v222 = strlen((const char *)v106);
                                  uint64_t v223 = heap_Realloc(*(uint64_t **)(v263 + 8), *(void *)(*v254 + 184 * ((unsigned __int16)v179 - 1) + 40), v221 + v222 + 5);
                                  *(void *)(*v254 + 184 * ((unsigned __int16)v179 - 1) + 40) = v223;
                                  if (!v223)
                                  {
                                    log_OutPublic(*(void *)(v263 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v224, v225, v226, v227, v242);
LABEL_420:
                                    unsigned int v23 = -1979703286;
                                    goto LABEL_416;
                                  }
                                  *(unsigned char *)(v223 + (unsigned __int16)v221) = 0;
                                  hlp_NLUStrSet(*(char **)(*v254 + 184 * ((unsigned __int16)v179 - 1) + 40), "POS", (char *)v106);
                                  __int16 v228 = strlen(v286);
                                  unsigned int v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(v256 + 160))(v94, v264, (unsigned __int16)v253, 14, (unsigned __int16)(v228 + 1), v286, &v289);
                                  if ((v23 & 0x80000000) != 0) {
                                    goto LABEL_416;
                                  }
                                  char v286 = &byte_20D5A22AE;
                                }
                                uint64_t v229 = *v254;
                                int v230 = (unsigned __int16)v179 - 1;
                                *(_WORD *)(*v254 + 184 * v230 + 18) = HIWORD(v290);
                                uint64_t v231 = *(void *)(v229 + 184 * (unsigned __int16)v179 + 24);
                                size_t v232 = strlen(__s);
                                int v233 = (char *)heap_Realloc(*(uint64_t **)(v263 + 8), v231, v232 + 1);
                                *(void *)(*v254 + 184 * (unsigned __int16)v179 + 24) = v233;
                                strcpy(v233, __s);
                                uint64_t v234 = *v254;
                                uint64_t v235 = *v254 + 184 * v230;
                                int v237 = *(_DWORD *)(v235 + 72);
                                uint64_t v236 = (BOOL *)(v235 + 72);
                                if (v237) {
                                  BOOL v238 = 1;
                                }
                                else {
                                  BOOL v238 = *(_DWORD *)(v234 + 184 * (unsigned __int16)v179 + 72) != 0;
                                }
                                BOOL *v236 = v238;
                                *(_WORD *)(*(void *)(v234 + 184 * v230 + 56)
                                         + strlen(*(const char **)(v234 + 184 * v230 + 56))) = 45;
                                strcat(*(char **)(*((void *)v259 + 133) + 184 * v230 + 56), *(const char **)(*((void *)v259 + 133) + 184 * (unsigned __int16)v179 + 56));
                                --*((_WORD *)v259 + 536);
                                freePWInfo((void *)v263, (uint64_t)v259, (unsigned __int16)v179);
                                int v239 = *((unsigned __int16 *)v259 + 536);
                                if ((unsigned __int16)v179 != v239) {
                                  memmove((void *)(*v254 + 184 * (unsigned __int16)v179), (const void *)(*v254 + 184 * ((unsigned __int16)v179 + 1)), 184 * (v239 - (unsigned __int16)v179));
                                }
                                --v179;
                                if ((_BYTE)v294)
                                {
                                  __int16 v240 = strlen((const char *)&v294);
                                  unsigned int v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, long long *, __int16 *))(v256 + 160))(v94, v264, (unsigned __int16)v253, 10, (unsigned __int16)(v240 + 1), &v294, &v289);
                                  if ((v23 & 0x80000000) != 0) {
                                    goto LABEL_416;
                                  }
                                }
                              }
                              else
                              {
LABEL_372:
                                size_t v215 = v280;
                                if (v280)
                                {
                                  size_t v216 = strlen(v280);
                                  if (v216 >= 0x401)
                                  {
                                    size_t v217 = v216;
                                    size_t v218 = strlen(__s);
                                    if (v217 > v218)
                                    {
                                      uint64_t v219 = heap_Realloc(*(uint64_t **)(v263 + 8), (uint64_t)__s, v217 + v218 + 1);
                                      if (!v219) {
                                        goto LABEL_420;
                                      }
                                      size_t v215 = v280;
                                      unsigned int __s = (char *)v219;
                                    }
                                  }
                                  strcpy(__s, v215);
                                }
                                *(unsigned char *)uint64_t v106 = 0;
                                if (v283 && v284) {
                                  strncat((char *)v106, v284, v283);
                                }
                                if (v270) {
                                  __strcpy_chk();
                                }
                                else {
                                  LOBYTE(v294) = 0;
                                }
                                unsigned int v253 = (unsigned __int16)v292;
                                if (((*(uint64_t (**)(uint64_t, uint64_t))(v256 + 184))(v94, v264) & 0x80000000) != 0
                                  || HIWORD(v292) != 1)
                                {
                                  strcpy((char *)v273, "latin");
                                }
                                else
                                {
                                  unsigned int v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(v256 + 176))(v94, v264, v253, 9, &v285, (char *)&v292 + 2);
                                  if ((v23 & 0x80000000) != 0 || strlen(v285) > 6) {
                                    goto LABEL_416;
                                  }
                                  __strcpy_chk();
                                }
                              }
                              int v180 = HIWORD(v290);
LABEL_391:
                              if (*v262 <= (unsigned __int16)++v179) {
                                goto LABEL_416;
                              }
                            }
                            unsigned __int16 v178 = HIWORD(v291);
                            LOWORD(v292) = HIWORD(v291);
                            if (!HIWORD(v291)) {
                              goto LABEL_416;
                            }
                            continue;
                          }
                        }
                      }
                      unsigned int v23 = v60;
                      uint64_t v106 = 0;
                    }
                  }
                  else
                  {
                    log_OutPublic(*(void *)(v263 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v47, v48, v49, v50, v241);
                    uint64_t v61 = 0;
                    uint64_t v106 = 0;
                  }
LABEL_142:
                  unsigned __int16 v107 = v260;
                  goto LABEL_143;
                }
LABEL_138:
                log_OutText(*(void *)(v14 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Warning: no lexicon word", v37, v38, v39, v241);
                return v13;
              }
            }
            int v51 = 0;
            uint64_t v61 = 0;
            uint64_t v106 = 0;
            unsigned int v23 = v42;
LABEL_141:
            uint64_t v14 = v263;
            goto LABEL_142;
          }
        }
      }
    }
  }
  return v13;
}

uint64_t pw_get_word_separating_markers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int *a7)
{
  unsigned __int16 v32 = 0;
  uint64_t v31 = 0;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int **, unsigned __int16 *))(a1 + 176))(a3, a4, a5, 1, &v31, &v32);
  if ((v13 & 0x80000000) != 0)
  {
LABEL_18:
    if (*a6)
    {
      heap_Free(*(void **)(a2 + 8), *a6);
      *a6 = 0;
    }
    return v13;
  }
  if (!v32)
  {
    log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Warning: no marker in lingdb.", v10, v11, v12, (uint64_t)v31);
    return v13;
  }
  uint64_t v14 = heap_Calloc(*(void **)(a2 + 8), v32, 4);
  *a6 = v14;
  if (!v14) {
    goto LABEL_17;
  }
  *a7 = 0;
  unsigned int v19 = v32;
  if (v32)
  {
    unsigned int v20 = 0;
    uint64_t v21 = (uint64_t)v31;
    uint64_t v22 = v32;
    uint64_t v23 = (uint64_t)v31;
    unsigned __int16 v24 = v31;
    do
    {
      unsigned int v25 = *v24;
      v24 += 8;
      uint64_t v26 = (1 << v25) & 0x3C0010124001140;
      if (v25 <= 0x39 && v26 != 0)
      {
        *(_DWORD *)(v14 + 4 * v20) = *(_DWORD *)(v23 + 12) - *(_DWORD *)(v21 + 12);
        unsigned int v20 = *a7 + 1;
        *a7 = v20;
      }
      uint64_t v23 = (uint64_t)v24;
      --v22;
    }
    while (v22);
  }
  else
  {
    unsigned int v20 = 0;
  }
  unsigned int v28 = v20 + 1;
  if (v28 > v19)
  {
    uint64_t v29 = heap_Realloc(*(uint64_t **)(a2 + 8), v14, 4 * v28);
    *a6 = v29;
    if (!v29)
    {
LABEL_17:
      log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v15, v16, v17, v18, v31);
      uint64_t v13 = 2315264010;
      goto LABEL_18;
    }
  }
  return v13;
}

uint64_t getTNmarker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = 2315264010;
  unsigned __int16 v34 = 0;
  uint64_t v33 = 0;
  uint64_t v13 = heap_Alloc(*(void *)(a2 + 8), 24);
  uint64_t v14 = v13;
  if (!v13) {
    goto LABEL_32;
  }
  *(_DWORD *)uint64_t v13 = 0;
  *(_WORD *)(v13 + 4) = 0;
  *(void *)(v13 + 8) = 0;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD **, unsigned __int16 *))(a3 + 176))(a4, a5, a1, 1, &v33, &v34);
  uint64_t v16 = v15;
  if ((v15 & 0x80000000) != 0)
  {
    uint64_t v12 = v15;
    goto LABEL_27;
  }
  uint64_t v17 = v34;
  if (v34)
  {
    uint64_t v18 = v33;
    unsigned int v19 = v33;
    do
    {
      int v21 = *v19;
      v19 += 8;
      int v20 = v21;
      if (v21 == 34 || v20 == 70 && v18[6] >= 3u)
      {
        if (!*(_DWORD *)v14) {
          *(_DWORD *)uint64_t v14 = 1;
        }
        ++*(_WORD *)(v14 + 4);
      }
      uint64_t v18 = v19;
      --v17;
    }
    while (v17);
  }
  if (!*(_DWORD *)v14) {
    goto LABEL_24;
  }
  uint64_t v22 = heap_Alloc(*(void *)(a2 + 8), 4 * *(unsigned __int16 *)(v14 + 4));
  *(void *)(v14 + 8) = v22;
  if (v22)
  {
    uint64_t v23 = heap_Alloc(*(void *)(a2 + 8), 2 * *(unsigned __int16 *)(v14 + 4));
    *(void *)(v14 + 16) = v23;
    if (v23)
    {
      if (v34)
      {
        unint64_t v24 = 0;
        unsigned __int16 v25 = 0;
        uint64_t v26 = v33 + 3;
        do
        {
          int v27 = *(v26 - 3);
          if (v27 == 34)
          {
            LOWORD(v29) = 0;
            uint64_t v28 = v25;
            *(_DWORD *)(*(void *)(v14 + 8) + 4 * v25) = *v26;
          }
          else
          {
            if (v27 != 70 || v26[3] < 3u) {
              goto LABEL_23;
            }
            uint64_t v28 = v25;
            *(_DWORD *)(*(void *)(v14 + 8) + 4 * v25) = *v26;
            int v29 = v26[3];
          }
          *(_WORD *)(v23 + 2 * v28) = v29;
          ++v25;
LABEL_23:
          v26 += 8;
          ++v24;
        }
        while (v24 < v34);
      }
LABEL_24:
      uint64_t v12 = v16;
      if ((v16 & 0x80000000) == 0)
      {
        uint64_t v12 = v16;
        goto LABEL_32;
      }
    }
LABEL_27:
    uint64_t v30 = *(void *)(v14 + 8);
    if (v30)
    {
      heap_Free(*(void **)(a2 + 8), v30);
      *(void *)(v14 + 8) = 0;
    }
  }
  uint64_t v31 = *(void *)(v14 + 16);
  if (v31)
  {
    heap_Free(*(void **)(a2 + 8), v31);
    *(void *)(v14 + 16) = 0;
  }
  heap_Free(*(void **)(a2 + 8), v14);
  uint64_t v14 = 0;
LABEL_32:
  *a6 = v14;
  return v12;
}

uint64_t pw_PYT_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int *a7, unsigned int a8, uint64_t *a9, unsigned __int16 *a10)
{
  uint64_t v10 = *a9;
  int v11 = *a10;
  uint64_t v117 = 0;
  uint64_t v12 = a6;
  __int16 v116 = 0;
  uint64_t v115 = 0;
  if (v11)
  {
    uint64_t v13 = 0;
    __int16 v14 = 0;
    unsigned __int16 v15 = 0;
    uint64_t v108 = a8;
    uint64_t v105 = (unsigned __int16 *)(a5 + 24);
    int v16 = 1;
    while (1)
    {
      uint64_t v17 = (unsigned __int16 **)(v10 + 184 * v14);
      if (*((unsigned __int16 *)v17 + 4) > 1u) {
        goto LABEL_9;
      }
      uint64_t v18 = **v17;
      __int16 v116 = 0;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, v18, 9, &v116);
      if ((v13 & 0x80000000) == 0 && v116 == 1)
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(a1 + 176))(a2, a3, v18, 9, &v117, &v116);
        if ((v13 & 0x80000000) != 0) {
          goto LABEL_75;
        }
      }
      if (!v117 || !strcmp(v117, "mnc!"))
      {
        uint64_t v20 = 0;
        if (v12)
        {
          int v21 = v105;
          while (1)
          {
            int v22 = *v21;
            v21 += 20;
            if (v22 == **v17) {
              break;
            }
            if (v12 == ++v20)
            {
              LODWORD(v20) = v12;
              goto LABEL_16;
            }
          }
          LODWORD(v20) = (unsigned __int16)v20;
        }
LABEL_16:
        if (a8)
        {
          int v23 = *(unsigned __int16 *)(a5 + 40 * v20 + 28);
          unint64_t v24 = a7;
          uint64_t v25 = v108;
          while (1)
          {
            int v26 = *v24++;
            if (v26 == v23) {
              break;
            }
            if (!--v25) {
              goto LABEL_20;
            }
          }
        }
        else
        {
LABEL_20:
          if (v16 != 1)
          {
            __int16 v116 = 0;
            uint64_t v115 = 0;
            uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, v18, 19, &v116);
            int v16 = 0;
            __int16 v19 = 1;
            if ((v13 & 0x80000000) == 0 && v116 == 1)
            {
              uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(a1 + 176))(a2, a3, v18, 19, &v115, &v116);
              if ((v13 & 0x80000000) != 0) {
                return v13;
              }
              int v16 = 0;
              __int16 v19 = strcmp(v115, "left") == 0;
            }
            goto LABEL_26;
          }
        }
        int v16 = 0;
        __int16 v19 = 1;
      }
      else
      {
LABEL_9:
        __int16 v19 = 1;
        int v16 = 1;
      }
LABEL_26:
      v15 += v19;
      if (v11 <= ++v14) {
        goto LABEL_29;
      }
    }
  }
  unsigned __int16 v15 = 0;
  uint64_t v13 = 0;
LABEL_29:
  uint64_t v27 = a4;
  uint64_t v28 = heap_Calloc(*(void **)(a4 + 8), v15, 184);
  if (!v28)
  {
    uint64_t v13 = 2315264010;
    log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v101);
    if (!v10) {
      return v13;
    }
    goto LABEL_75;
  }
  *a10 = v15;
  *a9 = v28;
  if (!v11)
  {
LABEL_74:
    if (!v10) {
      return v13;
    }
LABEL_75:
    heap_Free(*(void **)(a4 + 8), v10);
    return v13;
  }
  uint64_t v109 = v28;
  uint64_t v33 = 0;
  __int16 v34 = 0;
  int v35 = 0;
  int v36 = 1;
  while (1)
  {
    uint64_t v37 = (unsigned __int16 **)(v10 + 184 * v34);
    if (*((unsigned __int16 *)v37 + 4) >= 2u) {
      goto LABEL_39;
    }
    uint64_t v38 = **v37;
    __int16 v116 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, v38, 9, &v116) & 0x80000000) == 0
      && v116 == 1)
    {
      uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(a1 + 176))(a2, a3, v38, 9, &v117, &v116);
      if ((v39 & 0x80000000) != 0)
      {
LABEL_77:
        uint64_t v13 = v39;
        goto LABEL_75;
      }
    }
    if (v117 && strcmp(v117, "mnc!"))
    {
      uint64_t v27 = a4;
LABEL_39:
      log_OutText(*(void *)(v27 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> Not a PYT PW. Skip by copying pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
      uint64_t v45 = pw_copy_pw(v27, (uint64_t)v37, v109 + 184 * (unsigned __int16)v35, v40, v41, v42, v43, v44);
      if ((v45 & 0x80000000) != 0) {
        return v45;
      }
      log_OutText(*(void *)(v27 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v46, v47, v48, v33);
      ++v35;
      int v36 = 1;
      goto LABEL_67;
    }
    uint64_t v49 = 0;
    if (v12)
    {
      uint64_t v50 = (unsigned __int16 *)(a5 + 24);
      while (1)
      {
        int v51 = *v50;
        v50 += 20;
        if (v51 == **v37) {
          break;
        }
        if (v12 == ++v49)
        {
          LODWORD(v49) = v12;
          goto LABEL_47;
        }
      }
      LODWORD(v49) = (unsigned __int16)v49;
    }
LABEL_47:
    if (a8)
    {
      int v52 = *(unsigned __int16 *)(a5 + 40 * v49 + 28);
      uint64_t v53 = a7;
      uint64_t v54 = a8;
      while (1)
      {
        int v55 = *v53++;
        if (v55 == v52) {
          break;
        }
        if (!--v54) {
          goto LABEL_51;
        }
      }
      if (v36 == 1)
      {
LABEL_62:
        uint64_t v27 = a4;
        unsigned int v86 = (unsigned __int16)v35;
        log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> I am First PYT PW. Copy pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
      }
      else
      {
        uint64_t v27 = a4;
        unsigned int v86 = (unsigned __int16)v35;
        log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> I am a PYT PW start with Marker! Copy pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
      }
LABEL_65:
      uint64_t v45 = pw_copy_pw(v27, (uint64_t)v37, v109 + 184 * v86, v87, v88, v89, v90, v91);
      if ((v45 & 0x80000000) != 0) {
        return v45;
      }
LABEL_66:
      log_OutText(*(void *)(v27 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v92, v93, v94, v33);
      int v36 = 0;
      ++v35;
      goto LABEL_67;
    }
LABEL_51:
    if (v36 == 1) {
      goto LABEL_62;
    }
    __int16 v116 = 0;
    uint64_t v115 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, v38, 19, &v116) & 0x80000000) != 0|| v116 != 1)
    {
      uint64_t v27 = a4;
      unsigned int v86 = (unsigned __int16)v35;
      log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> The WORD_DCT record doesn't has field LD_W_INPUTSPACETAG. Copy pPWIn[%d] to pPWOut[%d].", v56, v57, v58, v33);
      goto LABEL_65;
    }
    uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(a1 + 176))(a2, a3, v38, 19, &v115, &v116);
    if ((v45 & 0x80000000) != 0) {
      return v45;
    }
    int v62 = strcmp(v115, "left");
    uint64_t v27 = a4;
    uint64_t v63 = *(void *)(a4 + 32);
    if (!v62)
    {
      log_OutText(v63, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> There is a space before this PYT PW. Copy pPWIn[%d] to pPWOut[%d].", v59, v60, v61, v33);
      uint64_t v45 = pw_copy_pw(a4, (uint64_t)v37, v109 + 184 * (unsigned __int16)v35, v95, v96, v97, v98, v99);
      if ((v45 & 0x80000000) != 0) {
        return v45;
      }
      goto LABEL_66;
    }
    uint64_t v104 = (unsigned __int16)v35 - 1;
    log_OutText(v63, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> No space before this PYT unit. Merge pPWIn[%d] to pPWOut[%d] ...", v59, v60, v61, v33);
    log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pPWIn[%d] is: ", v64, v65, v66, v33);
    uint64_t v67 = pw_show_pw(a4, (uint64_t)v37);
    if ((v67 & 0x80000000) != 0) {
      break;
    }
    log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Before merge, pPWOut[%d] is: ", v68, v69, v70, v104);
    int v103 = (uint64_t *)(v109 + 184 * (int)v104);
    uint64_t v67 = pw_show_pw(a4, (uint64_t)v103);
    if ((v67 & 0x80000000) != 0) {
      break;
    }
    uint64_t v71 = v109 + 184 * (int)v104;
    __int16 v73 = *(_WORD *)(v71 + 8);
    uint64_t v72 = (_WORD *)(v71 + 8);
    _WORD *v72 = v73 + 1;
    uint64_t v74 = heap_Realloc(*(uint64_t **)(a4 + 8), *v103, 2 * (unsigned __int16)(v73 + 1));
    uint64_t *v103 = v74;
    if (!v74)
    {
      uint64_t v13 = 2315264010;
      log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v75, v76, v77, v78, v102);
      return v13;
    }
    unsigned int v79 = *v37;
    *(_WORD *)(v74 + 2 * (unsigned __int16)*v72 - 2) = **v37;
    heap_Free(*(void **)(a4 + 8), (uint64_t)v79);
    log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"After merge, pPWOut[%d] is: ", v80, v81, v82, v104);
    uint64_t v39 = pw_show_pw(a4, (uint64_t)v103);
    if ((v39 & 0x80000000) != 0) {
      goto LABEL_77;
    }
    log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Merge pPWIn[%d] to pPWOut[%d] done!", v83, v84, v85, v33);
    int v36 = 0;
LABEL_67:
    uint64_t v33 = ++v34;
    if ((int)v33 >= v11)
    {
      uint64_t v13 = 0;
      goto LABEL_74;
    }
  }
  uint64_t v13 = v67;
  if (v10) {
    goto LABEL_75;
  }
  return v13;
}

uint64_t pw_group_csc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, uint64_t a6, uint64_t a7, uint64_t *a8, _WORD *a9, unsigned __int16 a10, const char **a11)
{
  unsigned int v12 = a7;
  uint64_t v105 = *MEMORY[0x263EF8340];
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pw_group_csc Begin", a6, a7, (uint64_t)a8, v88);
  uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), v12, 184);
  *a8 = v16;
  if (!v16)
  {
    uint64_t v85 = 2315264010;
    uint64_t v86 = *(void *)(a1 + 32);
LABEL_76:
    log_OutPublic(v86, (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v89);
    return v85;
  }
  uint64_t v90 = a1;
  *a9 = 0;
  __int16 v104 = 0;
  uint64_t v103 = 0;
  if (v12)
  {
    LOWORD(v21) = 0;
    uint64_t v22 = 0;
    int v23 = 0;
    uint64_t v24 = a4;
    uint64_t v25 = (unsigned __int16 *)(v16 + 8);
    int v26 = (unsigned __int16 *)(a3 + 24);
    uint64_t v94 = a8;
    unsigned int v93 = v12;
    while (1)
    {
      uint64_t v95 = v22;
      uint64_t v96 = v25;
      int v91 = v23;
      *uint64_t v25 = 0;
      uint64_t v27 = a3;
      while (1)
      {
        uint64_t v28 = (unsigned __int16 **)(a6 + 184 * (unsigned __int16)v21);
        if (v24)
        {
          uint64_t v29 = 0;
          int v30 = **v28;
          uint64_t v31 = v26;
          while (1)
          {
            int v32 = *v31;
            v31 += 20;
            if (v32 == v30) {
              break;
            }
            if (v24 == ++v29)
            {
              unsigned int v98 = v24;
              goto LABEL_12;
            }
          }
          unsigned int v98 = (unsigned __int16)v29;
LABEL_12:
          uint64_t v34 = 0;
          int v35 = v26;
          while (1)
          {
            int v36 = *v35;
            v35 += 20;
            if (v36 == v30) {
              break;
            }
            if (v24 == ++v34)
            {
              unsigned int v33 = v24;
              goto LABEL_17;
            }
          }
          unsigned int v33 = (unsigned __int16)v34;
        }
        else
        {
          unsigned int v98 = 0;
          unsigned int v33 = 0;
        }
LABEL_17:
        uint64_t v37 = *(const char **)(v27 + 40 * v33);
        __int16 v99 = Utf8_Utf8NbrOfSymbols(v37);
        if (v24)
        {
          uint64_t v38 = 0;
          int v39 = **v28;
          uint64_t v40 = v26;
          while (1)
          {
            int v41 = *v40;
            v40 += 20;
            if (v41 == v39) {
              break;
            }
            if (v24 == ++v38)
            {
              uint64_t v38 = v24;
              break;
            }
          }
          uint64_t v42 = 0;
          int v100 = *(_DWORD *)(v27 + 40 * v38 + 36);
          uint64_t v43 = v26;
          while (1)
          {
            int v44 = *v43;
            v43 += 20;
            if (v44 == v39) {
              break;
            }
            if (v24 == ++v42)
            {
              unsigned int v45 = v24;
              goto LABEL_28;
            }
          }
          unsigned int v45 = (unsigned __int16)v42;
        }
        else
        {
          unsigned int v45 = 0;
          int v100 = *(_DWORD *)(v27 + 36);
        }
LABEL_28:
        uint64_t v46 = *(const char **)(v27 + 40 * v45 + 16);
        utf8_getUTF8Char((uint64_t)v37, 0, &v103);
        BOOL IsChineseLetter = utf8_IsChineseLetter((const char *)&v103);
        unsigned int v48 = *(_DWORD *)(a2 + 1024);
        if (v48)
        {
          unsigned __int16 v49 = 0;
          uint64_t v50 = v27 + 40 * v98;
          unsigned int v51 = *(_DWORD *)(v50 + 28);
          int v52 = (_DWORD *)(v50 + 32);
          while (*(_DWORD *)(a2 + 4 * v49) > v51 || *v52 > *(_DWORD *)(a2 + 4 * v49 + 512))
          {
            if (v48 <= ++v49) {
              goto LABEL_33;
            }
          }
          int v53 = 0;
        }
        else
        {
LABEL_33:
          int v53 = 1;
        }
        int v54 = *(unsigned __int16 *)(a6 + 184 * (unsigned __int16)v21 + 8);
        if (v54 != 1) {
          break;
        }
        int v55 = (unsigned __int16)(v99 - 1);
        if (v55 != 1 && (v55 != 2 || !v100)) {
          break;
        }
        BOOL v56 = strcmp(v46, "latin") && IsChineseLetter;
        int v57 = v56 ? v53 : 0;
        if (v57 != 1) {
          break;
        }
        uint64_t v27 = a3;
        if (strstr(a5, v37)) {
          goto LABEL_55;
        }
        uint64_t v58 = a11;
        uint64_t v59 = a10;
        if (a10)
        {
          while (strcmp(v37, *v58))
          {
            ++v58;
            if (!--v59) {
              goto LABEL_50;
            }
          }
LABEL_55:
          unsigned __int16 v102 = v21 + 1;
          uint64_t v60 = v95;
          uint64_t v64 = v96;
          LOWORD(v21) = *v96;
          uint64_t v63 = v90;
          int v62 = v94;
LABEL_56:
          *uint64_t v64 = v21 + 1;
          goto LABEL_57;
        }
LABEL_50:
        if (v100 || *(_DWORD *)(a6 + 184 * (unsigned __int16)v21 + 72)) {
          goto LABEL_55;
        }
        uint64_t v60 = v95;
        unsigned __int16 v61 = *v96 + 1;
        *uint64_t v96 = v61;
        LOWORD(v21) = v21 + 1;
        int v62 = v94;
        int v26 = (unsigned __int16 *)(a3 + 24);
        if (v93 <= (unsigned __int16)v21 || v61 >= 3u)
        {
          unsigned __int16 v102 = v21;
          uint64_t v63 = v90;
          goto LABEL_57;
        }
      }
      unsigned __int16 v102 = v21;
      uint64_t v60 = v95;
      uint64_t v63 = v90;
      int v62 = v94;
      if (!*v96)
      {
        *uint64_t v96 = v54;
        uint64_t v64 = &v102;
        goto LABEL_56;
      }
LABEL_57:
      ++*a9;
      *(void *)(*v62 + 184 * v60) = heap_Calloc(*(void **)(v63 + 8), *(unsigned __int16 *)(*v62 + 184 * v60 + 8), 2);
      uint64_t v65 = *v62;
      uint64_t v66 = *(void *)(*v62 + 184 * v60);
      if (!v66) {
        break;
      }
      uint64_t v67 = v65 + 184 * v60;
      unsigned int v70 = *(unsigned __int16 *)(v67 + 8);
      uint64_t v68 = (unsigned __int16 *)(v67 + 8);
      unsigned int v69 = v70;
      unsigned int v21 = v102;
      int v71 = v102 - 1;
      if (v70 <= *(unsigned __int16 *)(a6 + 184 * v71 + 8))
      {
        if (v69)
        {
          unint64_t v83 = 0;
          uint64_t v84 = *(void *)(a6 + 184 * v71);
          do
          {
            *(_WORD *)(v66 + 2 * v83) = *(_WORD *)(v84 + 2 * v83);
            ++v83;
          }
          while (v83 < *v68);
        }
        *(_DWORD *)(v65 + 184 * v60 + 72) = *(_DWORD *)(a6 + 184 * v71 + 72);
      }
      else
      {
        uint64_t v72 = heap_Calloc(*(void **)(v63 + 8), 1, 1024);
        if (!v72) {
          break;
        }
        __int16 v73 = (const char *)v72;
        uint64_t v74 = *v62;
        uint64_t v75 = *v62 + 184 * v60;
        *(_DWORD *)(v75 + 12) = 1;
        unsigned int v76 = *(unsigned __int16 *)(v75 + 8);
        if (v76)
        {
          unsigned __int16 v77 = 0;
          uint64_t v78 = -(uint64_t)v76;
          unsigned int v79 = (unsigned __int16 **)(a6 + 184 * v21 - 184 * v76);
          unsigned int v80 = v76 - 1;
          do
          {
            uint64_t v81 = *v79;
            v79 += 23;
            *(_WORD *)(*(void *)(*v62 + 184 * v60) + 2 * (v78 + *(unsigned __int16 *)(*v62 + 184 * v60 + 8))) = *v81;
            sprintf((char *)&v73[v77], "%d-", *v81);
            unsigned __int16 v77 = strlen(v73);
            ++v78;
          }
          while ((unsigned __int16)v80--);
          uint64_t v74 = *v62;
          uint64_t v63 = v90;
          int v71 = v21 - 1;
        }
        *(_DWORD *)(v74 + 184 * v60 + 72) = *(_DWORD *)(a6 + 184 * v71 + 72);
        log_OutText(*(void *)(v63 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"\t group [tids:%s, ntok: %d]", v18, v19, v20, (uint64_t)v73);
        heap_Free(*(void **)(v63 + 8), (uint64_t)v73);
        uint64_t v65 = *v62;
      }
      int v26 = (unsigned __int16 *)(a3 + 24);
      int v23 = v91 + 1;
      uint64_t v22 = (unsigned __int16)(v91 + 1);
      uint64_t v25 = (unsigned __int16 *)(v65 + 184 * v22 + 8);
      __int16 v104 = 0;
      uint64_t v103 = 0;
      if (v21 >= v93) {
        goto LABEL_73;
      }
    }
    uint64_t v85 = 2315264010;
    uint64_t v86 = *(void *)(v63 + 32);
    goto LABEL_76;
  }
LABEL_73:
  log_OutText(*(void *)(v90 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pw_group_csc End", v18, v19, v20, v89);
  return 0;
}

uint64_t pw_respect_word_separating_markers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned __int16 *a7)
{
  if (!*a7) {
    return 0;
  }
  uint64_t v7 = a7;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v38 = 0;
  uint64_t v15 = *a6;
  while (1)
  {
    if (*(unsigned __int16 *)(v15 + 184 * v13 + 8) >= 2u)
    {
      int v38 = 0;
      uint64_t v15 = *a6;
      if (*(unsigned __int16 *)(*a6 + 184 * v13 + 8) >= 2u) {
        break;
      }
    }
LABEL_17:
    if (++v13 >= (unint64_t)*v7) {
      return v14;
    }
  }
  unsigned __int16 v16 = 1;
  while (1)
  {
    uint64_t v17 = (unsigned __int16 *)(*(void *)(v15 + 184 * v13) + 2 * v16);
    uint64_t v14 = pw_check_if_glue_forbidden(a1, a3, a4, a5, *(v17 - 1), *v17, &v38);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    if (v38)
    {
      uint64_t v18 = heap_Realloc(*(uint64_t **)(a2 + 8), *a6, 184 * *v7 + 184);
      if (!v18) {
        goto LABEL_21;
      }
      *a6 = v18;
      uint64_t v23 = v18 + 184 * *v7;
      *(void *)(v23 + 176) = 0;
      *(_OWORD *)(v23 + 144) = 0u;
      *(_OWORD *)(v23 + 160) = 0u;
      *(_OWORD *)(v23 + 112) = 0u;
      *(_OWORD *)(v23 + 128) = 0u;
      *(_OWORD *)(v23 + 80) = 0u;
      *(_OWORD *)(v23 + 96) = 0u;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)uint64_t v23 = 0u;
      unsigned __int16 v24 = *v7 + 1;
      *uint64_t v7 = v24;
      int v36 = v7;
      if (v13 + 2 < (unint64_t)v24) {
        memmove((void *)(*a6 + 184 * (v13 + 2)), (const void *)(*a6 + 184 * (v13 + 1)), (0xB800000000 * (v24 - v13) - 0x17000000000) >> 32);
      }
      uint64_t v25 = *a6 + 184 * v13;
      unsigned __int16 v26 = *(_WORD *)(v25 + 8) - v16;
      uint64_t v35 = v13 + 1;
      uint64_t v27 = 184 * (v13 + 1);
      *(_WORD *)(*a6 + v27 + 8) = v26;
      *(_WORD *)(v25 + 8) = v16;
      *(void *)(*a6 + v27) = heap_Calloc(*(void **)(a2 + 8), 2, v26);
      uint64_t v15 = *a6;
      uint64_t v28 = *(void *)(*a6 + v27);
      uint64_t v7 = v36;
      if (!v28)
      {
LABEL_21:
        log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v19, v20, v21, v22, v35);
        return 2315264010;
      }
      uint64_t v29 = v15 + 184 * v35;
      int v31 = *(unsigned __int16 *)(v29 + 8);
      int v30 = (unsigned __int16 *)(v29 + 8);
      if (v31)
      {
        unint64_t v32 = 0;
        uint64_t v33 = *(void *)(v15 + 184 * v13) + 2 * v16;
        do
        {
          *(_WORD *)(v28 + 2 * v32) = *(_WORD *)(v33 + 2 * v32);
          ++v32;
        }
        while (v32 < *v30);
      }
      goto LABEL_17;
    }
    ++v16;
    uint64_t v15 = *a6;
    if (*(unsigned __int16 *)(*a6 + 184 * v13 + 8) <= v16) {
      goto LABEL_17;
    }
  }
}

uint64_t pw_igtree_process(uint64_t a1, uint64_t a2, uint64_t *a3, _WORD *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v8 = a1;
  uint64_t inited = 2315264010;
  uint64_t v10 = (unsigned __int16)*a4;
  unsigned int v76 = 0;
  uint64_t v11 = *a3;
  unsigned int v12 = (uint64_t *)heap_Calloc(*(void **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(a6 + 1296) - 8);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t inited = hlp_igtree_initFeatureVector(v8, v12, (unsigned __int16)(*(unsigned __int8 *)(v6 + 1296) - 1));
    if ((inited & 0x80000000) != 0)
    {
      uint64_t v61 = 0;
    }
    else
    {
      uint64_t v14 = heap_Calloc(*(void **)(v8 + 8), a5, 4);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v63 = a3;
        if (v10)
        {
          unint64_t v16 = 0;
          unsigned __int16 v17 = 0;
          unsigned int v70 = a5 - 1;
          uint64_t v71 = v6;
          uint64_t v72 = v14;
          uint64_t v67 = v8;
          unsigned int v69 = v13;
          while (1)
          {
            unint64_t v18 = v11 + 184 * v16;
            int v21 = *(unsigned __int16 *)(v18 + 8);
            uint64_t v20 = (unsigned __int16 *)(v18 + 8);
            unsigned __int16 v19 = v21;
            uint64_t v68 = v10;
            if (v21)
            {
              if (v70 != v17) {
                break;
              }
            }
LABEL_8:
            ++v16;
            uint64_t v10 = v68;
            uint64_t v6 = v71;
            if (v16 >= (unsigned __int16)v68) {
              goto LABEL_53;
            }
          }
          int v22 = 0;
          uint64_t v23 = 0;
          unsigned int v65 = v16 + 1;
          unsigned int v64 = v16 + 2;
          uint64_t v24 = 2;
          while (1)
          {
            uint64_t v75 = v23;
            uint64_t v25 = v17;
            *(_DWORD *)(v15 + 4 * v17) = v19 - 1 == v22;
            uint64_t v6 = v71;
            uint64_t v26 = hlp_igtree_setFeatureVector(v8, (uint64_t)v13, *(void *)(v71 + 1312), *(unsigned __int8 *)(v71 + 1296), a2, a5, v17);
            if ((v26 & 0x80000000) != 0)
            {
              uint64_t inited = v26;
              uint64_t v61 = v72;
              goto LABEL_59;
            }
            uint64_t inited = igtree_Process(v71, (uint64_t)v13, &v76);
            if ((inited & 0x80000000) != 0)
            {
LABEL_58:
              uint64_t v6 = v71;
              uint64_t v61 = v72;
              goto LABEL_59;
            }
            uint64_t v27 = v76;
            if (!strcmp(v76, "NOMATCH")) {
              goto LABEL_21;
            }
            int v28 = strcmp(v27, "1");
            uint64_t v15 = v72;
            int v29 = *(_DWORD *)(v72 + 4 * v25);
            if (v29 == (v28 == 0)) {
              goto LABEL_15;
            }
            if (v25 && v28)
            {
              int v30 = *(const char **)(a2 + 40 * v25 + 16);
              if (strcmp(v30, "normal") && strcmp(v30, "mnx"))
              {
                uint64_t v8 = v67;
LABEL_21:
                uint64_t v13 = v69;
                uint64_t v15 = v72;
LABEL_22:
                uint64_t v31 = v75;
                goto LABEL_23;
              }
              uint64_t v15 = v72;
              if (*(_DWORD *)(a2 + 40 * v25 + 36))
              {
LABEL_15:
                uint64_t v8 = v67;
                uint64_t v13 = v69;
                goto LABEL_22;
              }
            }
            if (v29)
            {
              uint64_t v35 = v11 + 184 * v65;
              int v36 = (_WORD *)(v35 + 8);
              unsigned __int16 v37 = *v20 + *(_WORD *)(v35 + 8);
              *uint64_t v20 = v37;
              uint64_t v38 = heap_Realloc(*(uint64_t **)(v67 + 8), *(void *)(v11 + 184 * v16), 2 * v37);
              *(void *)(v11 + 184 * v16) = v38;
              if (!v38) {
                goto LABEL_55;
              }
              LOWORD(v39) = *v36;
              if (*v36)
              {
                unint64_t v40 = 0;
                uint64_t v41 = *(void *)v35;
                do
                {
                  *(_WORD *)(v38 + 2 * (v40 - (unsigned __int16)v39 + *v20)) = *(_WORD *)(v41 + 2 * v40);
                  ++v40;
                  unint64_t v39 = (unsigned __int16)*v36;
                }
                while (v40 < v39);
              }
              unint64_t v42 = v11 + 184 * v16;
              int v44 = *(_DWORD *)(v42 + 72);
              uint64_t v43 = (_DWORD *)(v42 + 72);
              uint64_t v8 = v67;
              int v45 = v68;
              if (v44) {
                *uint64_t v43 = *(_DWORD *)(v11 + 184 * v65 + 72);
              }
              *(_DWORD *)(v11 + 184 * v16 + 12) |= *(_DWORD *)(v11 + 184 * v65 + 12);
              heap_Free(*(void **)(v67 + 8), *(void *)v35);
              uint64_t v13 = v69;
              if (v64 < (unsigned __int16)v68) {
                memmove((void *)v35, (const void *)(v11 + 184 * v64), 184 * ((unsigned __int16)v68 - (int)v16) - 368);
              }
              int v46 = 0xFFFF;
              uint64_t v15 = v72;
              uint64_t v31 = v75;
            }
            else
            {
              uint64_t v8 = v67;
              uint64_t v47 = heap_Realloc(*(uint64_t **)(v67 + 8), v11, 184 * (unsigned __int16)v68 + 184);
              if (!v47)
              {
                uint64_t inited = 2315264010;
                goto LABEL_57;
              }
              uint64_t v48 = v47 + 184 * (unsigned __int16)v68;
              *(void *)(v48 + 176) = 0;
              *(_OWORD *)(v48 + 144) = 0u;
              *(_OWORD *)(v48 + 160) = 0u;
              *(_OWORD *)(v48 + 112) = 0u;
              *(_OWORD *)(v48 + 128) = 0u;
              *(_OWORD *)(v48 + 80) = 0u;
              *(_OWORD *)(v48 + 96) = 0u;
              *(_OWORD *)(v48 + 48) = 0u;
              *(_OWORD *)(v48 + 64) = 0u;
              *(_OWORD *)(v48 + 16) = 0u;
              *(_OWORD *)(v48 + 32) = 0u;
              *(_OWORD *)uint64_t v48 = 0u;
              uint64_t v11 = v47;
              if (v65 < (unsigned __int16)v68)
              {
                memmove((void *)(v47 + 184 * v64), (const void *)(v47 + 184 * v65), 184 * ((unsigned __int16)v68 + ~v16));
                uint64_t v47 = v11;
              }
              unint64_t v49 = v47 + 184 * v16;
              __int16 v50 = *(_WORD *)(v49 + 8);
              uint64_t v51 = v47 + 184 * v65;
              *(_WORD *)(v51 + 8) = v50 + ~(_WORD)v22;
              int v52 = (_WORD *)(v51 + 8);
              uint64_t v53 = heap_Alloc(*(void *)(v67 + 8), 2 * (unsigned __int16)(v50 + ~(_WORD)v22));
              *(void *)(v11 + 184 * v65) = v53;
              if (!v53)
              {
LABEL_55:
                uint64_t inited = 2315264010;
                uint64_t v8 = v67;
LABEL_57:
                uint64_t v13 = v69;
                goto LABEL_58;
              }
              if (*v52)
              {
                unint64_t v54 = 0;
                uint64_t v55 = *(void *)v49 + v24;
                do
                {
                  *(_WORD *)(v53 + 2 * v54) = *(_WORD *)(v55 + 2 * v54);
                  ++v54;
                }
                while (v54 < (unsigned __int16)*v52);
              }
              int v56 = 0;
              unint64_t v57 = v11 + 184 * v16;
              int v59 = *(_DWORD *)(v57 + 12);
              uint64_t v58 = (_DWORD *)(v57 + 12);
              uint64_t v60 = v11 + 184 * v65;
              *(_DWORD *)(v60 + 72) = v58[15];
              v58[15] = 0;
              *(_DWORD *)(v60 + 112) = v58[25];
              v58[25] = 0;
              uint64_t v15 = v72;
              int v45 = v68;
              if (v59 == 1)
              {
                *uint64_t v58 = 0;
                int v56 = 1;
              }
              *(_DWORD *)(v11 + 184 * v65 + 12) = v56;
              uint64_t v31 = v75;
              *(_WORD *)(v49 + 8) = v75 + 1;
              int v46 = 1;
              uint64_t v8 = v67;
              uint64_t v13 = v69;
            }
            uint64_t inited = 0;
            uint64_t v68 = (v46 + v45);
LABEL_23:
            unsigned __int16 v17 = v25 + 1;
            unint64_t v32 = v11 + 184 * v16;
            unsigned int v33 = *(unsigned __int16 *)(v32 + 8);
            uint64_t v20 = (unsigned __int16 *)(v32 + 8);
            unsigned __int16 v19 = v33;
            int v22 = v31 + 1;
            v24 += 2;
            BOOL v34 = v31 + 1 >= (unint64_t)v33 || v70 == (unsigned __int16)(v25 + 1);
            uint64_t v23 = v31 + 1;
            if (v34) {
              goto LABEL_8;
            }
          }
        }
LABEL_53:
        *a4 = v10;
        uint64_t *v63 = v11;
        uint64_t v61 = v15;
      }
      else
      {
        uint64_t v61 = 0;
        uint64_t inited = 2315264010;
      }
    }
LABEL_59:
    hlp_igtree_freeFeatureVector(v8, v13, (unsigned __int16)(*(unsigned __int8 *)(v6 + 1296) - 1));
    heap_Free(*(void **)(v8 + 8), (uint64_t)v13);
    if (v61) {
      heap_Free(*(void **)(v8 + 8), v61);
    }
  }
  return inited;
}

uint64_t pw_merge_NLU(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unsigned __int16 v5 = 0;
  do
  {
    if (hlp_NLUStrKeyLen(v2) >= 3)
    {
      unsigned int v6 = *v2 - 69;
      BOOL v7 = v6 > 0xE;
      int v8 = (1 << v6) & 0x4011;
      BOOL v9 = v7 || v8 == 0;
      if (!v9 && v2[1] == 95) {
        ++v5;
      }
    }
    uint64_t v2 = hlp_NLUStrNext(v2);
  }
  while (v2);
  if (!v5) {
    return 0;
  }
  uint64_t v10 = 2315264010;
  uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), 8, v5);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *a2;
    if (*a2)
    {
      __int16 v99 = a2;
      unsigned int v98 = -1979703286;
      unsigned __int16 v14 = 0;
      do
      {
        unsigned int v15 = hlp_NLUStrKeyLen(v13);
        if (v15 >= 3)
        {
          unsigned int v16 = *v13 - 69;
          BOOL v7 = v16 > 0xE;
          int v17 = (1 << v16) & 0x4011;
          BOOL v18 = v7 || v17 == 0;
          if (!v18 && v13[1] == 95)
          {
            unsigned int v19 = v15;
            uint64_t v20 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v15 - 1);
            if (!v20)
            {
              uint64_t v26 = v12;
              uint64_t v10 = 2315264010;
              goto LABEL_181;
            }
            int v21 = v20;
            strncpy(v20, v13 + 2, v19 - 2);
            if (v14)
            {
              uint64_t v22 = v14;
              uint64_t v23 = (const char **)v12;
              uint64_t v24 = v14;
              while (*v23)
              {
                if (!strcmp(*v23, v21))
                {
                  heap_Free(*(void **)(a1 + 8), (uint64_t)v21);
                  goto LABEL_31;
                }
                ++v23;
                if (!--v24) {
                  break;
                }
              }
            }
            else
            {
              uint64_t v22 = 0;
            }
            *(void *)(v12 + 8 * v22) = v21;
            ++v14;
          }
        }
LABEL_31:
        uint64_t v13 = hlp_NLUStrNext(v13);
      }
      while (v13);
      if (!v14) {
        goto LABEL_158;
      }
      uint64_t v25 = heap_Realloc(*(uint64_t **)(a1 + 8), v12, 8 * v14);
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), 2, v14);
        if (v27)
        {
          uint64_t v28 = v27;
          for (uint64_t i = *v99; i; uint64_t i = hlp_NLUStrNext(i))
          {
            unsigned int v30 = hlp_NLUStrKeyLen(i);
            if (v30 >= 3)
            {
              unsigned int v31 = *i - 69;
              BOOL v7 = v31 > 0xE;
              int v32 = (1 << v31) & 0x4011;
              BOOL v33 = v7 || v32 == 0;
              if (!v33 && i[1] == 95)
              {
                uint64_t v34 = 0;
                size_t v35 = (unsigned __int16)(v30 - 2);
                do
                {
                  int v36 = *(const char **)(v26 + 8 * v34);
                  if (!v36) {
                    break;
                  }
                  if (!strncmp(v36, i + 2, v35))
                  {
                    if ((v34 & 0x8000) == 0) {
                      ++*(_WORD *)(v28 + 2 * v34);
                    }
                    break;
                  }
                  ++v34;
                }
                while (v14 != v34);
              }
            }
          }
          uint64_t v37 = heap_Calloc(*(void **)(a1 + 8), 8, v14);
          if (v37)
          {
            uint64_t v38 = v37;
            uint64_t v39 = 0;
            if ((v14 & 0xFFFE) != 0) {
              uint64_t v40 = v14;
            }
            else {
              uint64_t v40 = 1;
            }
            do
            {
              uint64_t v41 = heap_Calloc(*(void **)(a1 + 8), 8, *(unsigned __int16 *)(v28 + 2 * v39));
              *(void *)(v38 + 8 * v39) = v41;
              if (!v41)
              {
                uint64_t v42 = 0;
                goto LABEL_166;
              }
              ++v39;
            }
            while (v40 != v39);
            uint64_t v42 = heap_Calloc(*(void **)(a1 + 8), 2, v14);
            if (v42)
            {
              for (uint64_t j = *v99; j; uint64_t j = hlp_NLUStrNext(j))
              {
                unsigned int v44 = hlp_NLUStrKeyLen(j);
                if (v44 >= 3)
                {
                  unsigned int v45 = *j - 69;
                  BOOL v7 = v45 > 0xE;
                  int v46 = (1 << v45) & 0x4011;
                  if (!v7 && v46 != 0 && j[1] == 95)
                  {
                    int KeyIdx = hlp_getKeyIdx(v26, v14, j + 2, (unsigned __int16)(v44 - 2));
                    if ((KeyIdx & 0x80000000) == 0)
                    {
                      uint64_t v94 = (unsigned __int16)KeyIdx;
                      uint64_t v96 = *(void *)(v38 + 8 * (unsigned __int16)KeyIdx);
                      unint64_t v49 = hlp_NLUStrKeyValue(j);
                      __int16 v50 = (const char *)v49;
                      unsigned int v51 = v49 ? hlp_NLUStrLength((char *)v49) : 0;
                      unsigned int v52 = v51;
                      if (!hlp_checkValExist(v96, *(unsigned __int16 *)(v42 + 2 * v94), v50, v51))
                      {
                        uint64_t v53 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v52 + 2);
                        if (!v53) {
                          goto LABEL_166;
                        }
                        if (v50) {
                          uint64_t v53 = strncpy(v53, v50, v52);
                        }
                        else {
                          *(_WORD *)uint64_t v53 = 32;
                        }
                        uint64_t v54 = *(unsigned __int16 *)(v42 + 2 * v94);
                        *(void *)(v96 + 8 * v54) = v53;
                        *(_WORD *)(v42 + 2 * v94) = v54 + 1;
                      }
                    }
                  }
                }
              }
              uint64_t v89 = v28;
              uint64_t v55 = 0;
              do
              {
                uint64_t v56 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(v38 + 8 * v55), 8 * *(unsigned __int16 *)(v42 + 2 * v55));
                if (!v56)
                {
LABEL_164:
                  uint64_t v28 = v89;
                  goto LABEL_166;
                }
                *(void *)(v38 + 8 * v55++) = v56;
              }
              while (v40 != v55);
              uint64_t v57 = 0;
              while (!*(_WORD *)(v42 + 2 * v57))
              {
LABEL_155:
                if (++v57 == v40)
                {
                  uint64_t v28 = v89;
                  unsigned int v98 = 0;
                  goto LABEL_166;
                }
              }
              size_t v58 = 0;
              while (2)
              {
                int v59 = *(const char **)(v26 + 8 * v57);
                uint64_t v60 = *(const char **)(*(void *)(v38 + 8 * v57) + 8 * v58);
                uint64_t v61 = *v99;
                unsigned __int16 v101 = 0;
                __s2 = 0;
                uint64_t v97 = v61;
                if (!v61) {
                  goto LABEL_129;
                }
                size_t __n_4 = v58;
                if (v60) {
                  unsigned int __n = (unsigned __int16)strlen(v60);
                }
                else {
                  unsigned int __n = 0;
                }
                size_t v62 = strlen(v59);
                uint64_t v63 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v62 + 3);
                if (!v63) {
                  goto LABEL_164;
                }
                unsigned int v64 = v63;
                __s1 = (char *)v60;
                strcpy(v63, "S_");
                strcat(v63, v59);
                size_t v65 = strlen(v59);
                uint64_t v66 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v65 + 3);
                if (v66)
                {
                  strcpy(v66, "I_");
                  unsigned int __s = v66;
                  strcat(v66, v59);
                  size_t v67 = strlen(v59);
                  uint64_t v68 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v67 + 3);
                  if (v68)
                  {
                    uint64_t v69 = v57;
                    strcpy(v68, "E_");
                    uint64_t v95 = v68;
                    strcat(v68, v59);
                    if (!hlp_NLUStrFind(v97, v64, (uint64_t *)&__s2, &v101)
                      || ((int v70 = v101, !__s1) || v101 || strcmp(__s1, " "))
                      && (!__s1 || v70 != __n || strncmp(__s1, __s2, __n)))
                    {
                      heap_Free(*(void **)(a1 + 8), (uint64_t)v64);
                      unsigned int v64 = 0;
                    }
                    if (!hlp_NLUStrFind(v97, __s, (uint64_t *)&__s2, &v101)
                      || ((int v71 = v101, !__s1) || v101 || strcmp(__s1, " "))
                      && (!__s1 || v71 != __n || strncmp(__s1, __s2, __n)))
                    {
                      heap_Free(*(void **)(a1 + 8), (uint64_t)__s);
                      unsigned int __s = 0;
                    }
                    if (!hlp_NLUStrFind(v97, v95, (uint64_t *)&__s2, &v101)) {
                      goto LABEL_114;
                    }
                    int v72 = v101;
                    if (__s1 && !v101 && !strcmp(__s1, " ")) {
                      goto LABEL_112;
                    }
                    if (__s1 && v72 == __n)
                    {
                      if (strncmp(__s1, __s2, __n))
                      {
                        heap_Free(*(void **)(a1 + 8), (uint64_t)v95);
                        uint64_t v95 = 0;
                      }
LABEL_112:
                      uint64_t v57 = v69;
                      __int16 v73 = __s1;
LABEL_115:
                      if (!strcmp(v73, " ")) {
                        __int16 v73 = 0;
                      }
                    }
                    else
                    {
LABEL_114:
                      heap_Free(*(void **)(a1 + 8), (uint64_t)v95);
                      uint64_t v95 = 0;
                      uint64_t v57 = v69;
                      __int16 v73 = __s1;
                      if (__s1) {
                        goto LABEL_115;
                      }
                    }
                    hlp_NLUStrRemoveRangeKey((unsigned __int8 *)v97, v59, v73);
                    if (v64)
                    {
                      if (!__s)
                      {
                        uint64_t v74 = v64;
                        if (!v95) {
                          goto LABEL_120;
                        }
                      }
                    }
                    if (v64) {
                      BOOL v78 = 1;
                    }
                    else {
                      BOOL v78 = __s == 0;
                    }
                    char v79 = !v78;
                    if (!v78)
                    {
                      unsigned int v80 = __s;
                      if (!v95)
                      {
LABEL_139:
                        hlp_NLUStrAppendKeyVal(v97, v80, v73);
                        uint64_t v76 = (uint64_t)__s;
                        int v75 = 0;
LABEL_125:
                        heap_Free(*(void **)(a1 + 8), v76);
LABEL_126:
                        uint64_t v77 = (uint64_t)v95;
                        if (v95) {
LABEL_127:
                        }
                          heap_Free(*(void **)(a1 + 8), v77);
                        size_t v58 = __n_4;
                        if (v75 < 0)
                        {
                          uint64_t v28 = v89;
                          unsigned int v98 = v75;
                          goto LABEL_166;
                        }
LABEL_129:
                        if (++v58 >= *(unsigned __int16 *)(v42 + 2 * v57)) {
                          goto LABEL_155;
                        }
                        continue;
                      }
                    }
                    if (!v64 && !__s && v95)
                    {
                      hlp_NLUStrAppendKeyVal(v97, v95, v73);
                      uint64_t v77 = (uint64_t)v95;
                      int v75 = 0;
                      goto LABEL_127;
                    }
                    if (v64 && v95)
                    {
                      hlp_NLUStrAppendKeyVal(v97, v64, v73);
                      uint64_t v74 = v95;
                      goto LABEL_120;
                    }
                    if (v64 && __s && (uint64_t v74 = v64, !v95))
                    {
LABEL_120:
                      hlp_NLUStrAppendKeyVal(v97, v74, v73);
                      int v75 = 0;
                    }
                    else
                    {
                      if (!v95) {
                        char v79 = 0;
                      }
                      unsigned int v80 = v95;
                      if (v79) {
                        goto LABEL_139;
                      }
                      int v75 = 0;
                      if (!v64)
                      {
LABEL_124:
                        uint64_t v76 = (uint64_t)__s;
                        if (__s) {
                          goto LABEL_125;
                        }
                        goto LABEL_126;
                      }
                    }
LABEL_123:
                    heap_Free(*(void **)(a1 + 8), (uint64_t)v64);
                    goto LABEL_124;
                  }
                  uint64_t v95 = 0;
                }
                else
                {
                  uint64_t v95 = 0;
                  unsigned int __s = 0;
                }
                break;
              }
              int v75 = -1979703286;
              goto LABEL_123;
            }
LABEL_166:
            uint64_t v81 = 0;
            do
            {
              uint64_t v82 = *(void *)(v38 + 8 * v81);
              if (v82)
              {
                if (v42)
                {
                  unsigned __int16 v83 = *(_WORD *)(v42 + 2 * v81);
                  if (v83)
                  {
                    for (unint64_t k = 0; k < v83; ++k)
                    {
                      uint64_t v85 = *(void *)(*(void *)(v38 + 8 * v81) + 8 * k);
                      if (v85)
                      {
                        heap_Free(*(void **)(a1 + 8), v85);
                        unsigned __int16 v83 = *(_WORD *)(v42 + 2 * v81);
                      }
                    }
                    uint64_t v82 = *(void *)(v38 + 8 * v81);
                  }
                }
                heap_Free(*(void **)(a1 + 8), v82);
              }
              ++v81;
            }
            while (v81 != v40);
            heap_Free(*(void **)(a1 + 8), v38);
            if (v42) {
              heap_Free(*(void **)(a1 + 8), v42);
            }
            uint64_t v10 = v98;
          }
          else
          {
            uint64_t v10 = 2315264010;
          }
          heap_Free(*(void **)(a1 + 8), v28);
          uint64_t v12 = v26;
LABEL_181:
          if (!v14) {
            goto LABEL_187;
          }
LABEL_182:
          uint64_t v86 = 0;
          do
          {
            uint64_t v87 = *(void *)(v26 + 8 * v86);
            if (v87) {
              heap_Free(*(void **)(a1 + 8), v87);
            }
            ++v86;
          }
          while (v14 != v86);
          uint64_t v12 = v26;
          goto LABEL_187;
        }
      }
      else
      {
        uint64_t v26 = v12;
      }
      uint64_t v10 = 2315264010;
      goto LABEL_182;
    }
LABEL_158:
    uint64_t v10 = 0;
LABEL_187:
    heap_Free(*(void **)(a1 + 8), v12);
  }
  return v10;
}

void pw_split_csc_pw(uint64_t a1, char *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  bzero(__src, 0x400uLL);
  if (*(_DWORD *)(a1 + 12) == 1 && (*(_WORD *)(a1 + 8) & 0xFFFE) == 4 && a2 != 0)
  {
    char v5 = 1;
    unsigned int v6 = a2;
    do
    {
      char v7 = v5;
      int v8 = strchr(v6, 46);
      if (v8) {
        unsigned int v6 = v8 + 1;
      }
      else {
        unsigned int v6 = 0;
      }
      if (!v8) {
        break;
      }
      char v5 = 0;
    }
    while ((v7 & 1) != 0);
    if (v8)
    {
      __strncpy_chk();
      __strcat_chk();
      __strcat_chk();
      strcpy(a2, __src);
    }
  }
}

uint64_t checkAttachedPunc(const char *a1)
{
  unsigned __int16 v2 = strlen(a1);
  uint64_t v5 = 0;
  uint64_t v3 = v2;
  if (v2)
  {
    if (memchr(",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#", a1[v2 - 1], 0x1EuLL))
    {
      return 1;
    }
    else
    {
      if (v3 != 3) {
        return 0;
      }
      uint64_t v3 = 1;
      utf8_Utf8ToUtf32_Tolerant((uint64_t)a1, 3u, (uint64_t)&v5 + 4, 1u, &v5);
      if (HIDWORD(v5) != 8230) {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t pw_check_if_glue_forbidden(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  *a7 = 0;
  uint64_t result = pw_check_if_word_in_prompt(a1, a2, a3, a5, a7);
  if ((result & 0x80000000) == 0 && !*a7)
  {
    uint64_t result = pw_check_if_word_in_prompt(a1, a2, a3, a6, a7);
    if ((result & 0x80000000) == 0 && !*a7)
    {
      int v24 = 0;
      int v25 = 0;
      uint64_t v23 = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, int *))(a1 + 176))(a2, a3, a4, 1, &v23, &v24);
      if ((result & 0x80000000) == 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(a1 + 168))(a2, a3, a5, 1, 1, (char *)&v25 + 2, (char *)&v24 + 2);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, a6, 2, 1, &v25, (char *)&v24 + 2);
        if ((result & 0x80000000) == 0)
        {
          if ((_WORD)v24)
          {
            uint64_t v15 = 0;
            unsigned int v16 = (int *)(v23 + 12);
            while (1)
            {
              int v17 = *v16;
              v16 += 8;
              if (v17 - *(_DWORD *)(v23 + 12) > HIWORD(v25)) {
                break;
              }
              if ((unsigned __int16)v24 == ++v15) {
                goto LABEL_24;
              }
            }
            unsigned int v18 = (unsigned __int16)v15;
          }
          else
          {
            unsigned int v18 = 0;
          }
          if (v18 < (unsigned __int16)v24)
          {
            unint64_t v19 = (unsigned __int16)v24 - (unint64_t)v18;
            uint64_t v20 = (_DWORD *)(v23 + 32 * v18);
            while (v20[3] - *(_DWORD *)(v23 + 12) < (unsigned __int16)v25)
            {
              if (*v20 <= 0x39u && ((1 << *v20) & 0x3C0010124001140) != 0)
              {
                int v22 = 1;
                goto LABEL_25;
              }
              v20 += 8;
              if (!--v19) {
                break;
              }
            }
          }
LABEL_24:
          int v22 = 0;
LABEL_25:
          *a7 = v22;
        }
      }
    }
  }
  return result;
}

char *checkremoveNormalSym(char *a1, unsigned __int16 *a2, unsigned __int8 a3)
{
  int v5 = a3;
  uint64_t result = strchr(a1, a3);
  if (result)
  {
    unsigned int v7 = *a2;
    if (*a2)
    {
      unint64_t v8 = 0;
      unsigned __int16 v9 = 0;
      do
      {
        int v10 = a1[v8];
        if (v10 != v5)
        {
          if (v8 != v9)
          {
            a1[v9] = v10;
            unsigned int v7 = *a2;
          }
          ++v9;
        }
        ++v8;
      }
      while (v8 < v7);
    }
    else
    {
      unsigned __int16 v9 = 0;
    }
    a1[v9] = 0;
    *a2 = v9;
  }
  return result;
}

uint64_t pw_copy_pw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copying PW ... ", a6, a7, a8, v19);
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pPWIn and pPWOut is: ", v11, v12, v13, v20);
  uint64_t v17 = pw_show_pw(a1, a2);
  if ((v17 & 0x80000000) == 0)
  {
    *(_WORD *)(a3 + 8) = *(_WORD *)(a2 + 8);
    *(void *)a3 = *(void *)a2;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copy PW done!", v14, v15, v16, v21);
  }
  return v17;
}

uint64_t pw_show_pw(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = heap_Calloc(*(void **)(a1 + 8), 1, 1000);
  if (!v4) {
    return 2315264010;
  }
  unint64_t v8 = (const char *)v4;
  if (*(_WORD *)(a2 + 8))
  {
    unint64_t v9 = 0;
    int v10 = 0;
    do
    {
      sprintf((char *)&v8[v10], "%d-", *(unsigned __int16 *)(*(void *)a2 + 2 * v9));
      int v10 = strlen(v8);
      ++v9;
    }
    while (v9 < *(unsigned __int16 *)(a2 + 8));
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"\tPW [tids:%s, ntok:%d]", v5, v6, v7, (uint64_t)v8);
  heap_Free(*(void **)(a1 + 8), (uint64_t)v8);
  return 0;
}

uint64_t hlp_getKeyIdx(uint64_t a1, unsigned int a2, char *__s2, size_t __n)
{
  if (a2)
  {
    uint64_t v6 = 0;
    size_t v7 = __n;
    uint64_t v8 = a2;
    do
    {
      unint64_t v9 = *(const char **)(a1 + 8 * v6);
      if (!v9) {
        break;
      }
      if (!strncmp(v9, __s2, v7)) {
        return (__int16)v6;
      }
      ++v6;
    }
    while (v8 != v6);
  }
  LOWORD(v6) = -1;
  return (__int16)v6;
}

uint64_t hlp_checkValExist(uint64_t result, unsigned int a2, const char *a3, unsigned int a4)
{
  if (result)
  {
    if (a3) {
      uint64_t v4 = a3;
    }
    else {
      uint64_t v4 = " ";
    }
    if (a2)
    {
      uint64_t v5 = (const char **)result;
      if (a3) {
        size_t v6 = a4;
      }
      else {
        size_t v6 = 1;
      }
      uint64_t v7 = a2;
      while (*v5)
      {
        if (strlen(*v5) == v6 && !strncmp(*v5, v4, v6)) {
          return 1;
        }
        ++v5;
        if (!--v7) {
          return 0;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t pw_check_if_word_in_prompt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v10 = 0;
  *a5 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, a4, 1, 1, &v10, (char *)&v10 + 2);
  if ((result & 0x80000000) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, _DWORD *))(a1 + 312))(a2, a3, (unsigned __int16)v10, a5);
  }
  return result;
}

uint64_t getphraseCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, char **a6, char **a7)
{
  uint64_t v19 = 0;
  __int16 v18 = -1;
  char v17 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a2 + 96))(a3, a4, "fecfg", "fephrase_slience", &v19, &v18, &v17);
  if ((result & 0x80000000) == 0)
  {
    if (v19) {
      BOOL v15 = v18 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      unsigned int v16 = 300;
    }
    else {
      unsigned int v16 = LH_atou(*v19);
    }
    *a5 = v16;
    uint64_t result = getPunc(a1, a2, a3, a4, a6, (uint64_t)"fephrase_strongphrasepunc");
    if ((result & 0x80000000) == 0) {
      return getPunc(a1, a2, a3, a4, a7, (uint64_t)"fephrase_weakphrasepunc");
    }
  }
  return result;
}

uint64_t getPunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  char v17 = 0;
  __int16 v16 = 0;
  char v15 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, const char ***, __int16 *, char *))(a2 + 96))(a3, a4, "fecfg", a6, &v17, &v16, &v15);
  if ((v8 & 0x80000000) == 0)
  {
    if (v17) {
      BOOL v9 = v16 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      int v10 = (char *)heap_Alloc(*(void *)(a1 + 8), 10);
      if (v10)
      {
        strcpy(v10, ",;:.?!_~|");
        uint64_t v11 = v10 + 9;
LABEL_11:
        *uint64_t v11 = 0;
        *a5 = v10;
        return v8;
      }
    }
    else
    {
      unsigned int v12 = strlen(*v17);
      uint64_t v13 = (char *)heap_Alloc(*(void *)(a1 + 8), v12 + 1);
      if (v13)
      {
        int v10 = strcpy(v13, *v17);
        uint64_t v11 = &v10[v12 - 1];
        goto LABEL_11;
      }
    }
    return 2315264010;
  }
  return v8;
}

uint64_t ruleNNInit(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  memset(v70, 0, sizeof(v70));
  unsigned __int8 v67 = 0;
  int v65 = 0;
  int v66 = 0;
  *(void *)unsigned __int8 __c = 0;
  uint64_t v64 = 0;
  unsigned int v62 = 0;
  uint64_t v60 = 0;
  *(void *)uint64_t v61 = 0;
  if ((com_mosynt_GetCfgParamVal(a5, a6, a4, (uint64_t)"fephrase_max_rule", "1024", &v60) & 0x80000000) != 0) {
    uint64_t v15 = 1024;
  }
  else {
    uint64_t v15 = atoi(v60);
  }
  uint64_t v20 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, v15);
  if (v20)
  {
    uint64_t v68 = 0;
    *(void *)uint64_t v69 = 0;
    memset(v76, 0, sizeof(v76));
    long long v75 = 0u;
    long long v74 = 0u;
    long long v73 = 0u;
    long long v72 = 0u;
    int Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", v69);
    if (Str < 0
      || (int Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"fecfg", &v68), Str < 0)
      || (uint64_t v71 = 0x73656C75727073,
          __strcat_chk(),
          __strcat_chk(),
          __strcat_chk(),
          __strcat_chk(),
          int Str = brokeraux_ComposeBrokerString(a3, (const char *)&v71, 1, 1, *(char **)v69, 0, 0, (char *)v70, 0x100uLL), Str < 0))
    {
      int v45 = Str;
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Could not assemble broker string for SP rules %s", v22, v23, v24, (uint64_t)"sprules");
      int v34 = v45 | 0x8A002000;
    }
    else
    {
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"looking for SP rules %s at %s", v22, v23, v24, (uint64_t)"sprules");
      int v25 = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v70, "SPDT", 1031, (uint64_t *)v61);
      if (v25 < 0)
      {
        int v34 = v25;
        log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"no sp rules", v27, v28, v29, v57);
        *(_WORD *)(a7 + 10) = 0;
        *(void *)a7 = 0;
      }
      else
      {
        while (1)
        {
          int v30 = ssftriff_reader_OpenChunk(*(uint64_t *)v61, &v66, (unsigned int *)&v65, &v64, v26, v27, v28, v29);
          if (v30 < 0) {
            break;
          }
          if (!(v66 ^ 0x52545344 | v67))
          {
            int ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v61, v65, __c, v33, v26, v27, v28, v29);
            if (ChunkData < 0) {
              goto LABEL_77;
            }
            unsigned int v62 = 0;
            ssftriff_reader_ReadStringZ(*(uint64_t *)v61, *(uint64_t *)__c, v65, 0, 0, &v62);
            ssftriff_reader_ReadStringZ(*(uint64_t *)v61, *(uint64_t *)__c, v65, 0, v20, &v62);
            int v36 = strchr(v20, 10);
            if (v36) {
              *int v36 = 0;
            }
            uint64_t v37 = strchr(v20, 58);
            unsigned __int16 v38 = v37 ? atoi(v37 + 2) : 0;
            unsigned int v39 = v62;
            int ChunkData = initPhrasingRuleStruct(a3, a7, v38);
            if (ChunkData < 0) {
              goto LABEL_77;
            }
            unsigned __int16 v58 = v38;
            if (v38)
            {
              int v40 = 0;
              while (1)
              {
                do
                {
                  unsigned int v62 = 0;
                  ssftriff_reader_ReadStringZ(*(uint64_t *)v61, *(uint64_t *)__c, v65, v39, 0, &v62);
                  ssftriff_reader_ReadStringZ(*(uint64_t *)v61, *(uint64_t *)__c, v65, v39, v20, &v62);
                  v39 += v62;
                  uint64_t v41 = v20 + 1;
                  for (uint64_t i = v20; ; ++i)
                  {
                    unsigned int v43 = *i;
                    if (v43 > 0x23) {
                      goto LABEL_29;
                    }
                    if (((1 << v43) & 0x100000200) == 0) {
                      break;
                    }
                    ++v41;
                  }
                }
                while (((1 << v43) & 0x800002401) != 0);
LABEL_29:
                while ((_BYTE)v43)
                {
                  if (v43 == 35)
                  {
                    *(v41 - 1) = 0;
                    break;
                  }
                  char v44 = *v41++;
                  LOBYTE(v43) = v44;
                }
                int ChunkData = addPhrasingRuleNN(a3, (uint64_t *)a7, v20);
                if (ChunkData < 0) {
                  break;
                }
                if ((unsigned __int16)++v40 >= v58) {
                  goto LABEL_11;
                }
              }
LABEL_77:
              int v34 = ChunkData;
              goto LABEL_37;
            }
          }
LABEL_11:
          int v34 = ssftriff_reader_CloseChunk(*(uint64_t *)v61);
          if (v34 < 0) {
            goto LABEL_37;
          }
        }
        if ((v30 & 0x1FFF) == 0x14) {
          int v34 = 0;
        }
        else {
          int v34 = v30;
        }
      }
    }
  }
  else
  {
    log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v16, v17, v18, v19, v56);
    int v34 = -1979703286;
  }
LABEL_37:
  if (*(void *)v61)
  {
    int v46 = ssftriff_reader_ObjClose(*(void **)v61, v31, v32, v33, v26, v27, v28, v29);
    if (v46 < 0 && v34 > -1) {
      int v34 = v46;
    }
  }
  if (v20) {
    heap_Free(*(void **)(a3 + 8), (uint64_t)v20);
  }
  if (a7 && v34 < 0) {
    releasePhrasingRuleStructNN(a3, a7);
  }
  uint64_t v48 = 0;
  uint64_t v68 = 0;
  *(void *)uint64_t v69 = 0;
  LOWORD(v64) = -1;
  LOBYTE(__c[0]) = 0;
  *(_OWORD *)(a8 + 2) = 0u;
  *(_OWORD *)(a8 + 18) = 0u;
  *(_OWORD *)(a8 + 34) = 0u;
  *(_OWORD *)(a8 + 50) = 0u;
  *(_OWORD *)(a8 + 66) = 0u;
  uint64_t v71 = (uint64_t)"JOY_KEYS";
  *(void *)&long long v72 = "DID_KEYS";
  *((void *)&v72 + 1) = "NEU_KEYS";
  *(void *)&long long v73 = "COM_KEYS";
  while (1)
  {
    strcpy((char *)v70, "statbnd_");
    __strcat_chk();
    LOWORD(v64) = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, _OWORD *, int *, uint64_t *, int *))(a4 + 96))(a5, a6, "fecfg", v70, v69, &v64, __c) & 0x80000000) != 0|| !(_WORD)v64)
    {
      break;
    }
    unint64_t v49 = **(unsigned char ***)v69;
    __int16 v50 = strchr(**(char ***)v69, LOBYTE(__c[0]));
    if (v50)
    {
      *__int16 v50 = 0;
      unint64_t v49 = **(unsigned char ***)v69;
    }
    int v51 = *v49;
    if (*v49)
    {
      unsigned __int16 v52 = 0;
      do
      {
        for (j = 0; v51; int v51 = v49[++j])
        {
          if (v51 == 44) {
            break;
          }
        }
        strcpy((char *)v70, "statbnd_");
        __strncat_chk();
        LOWORD(v64) = 0;
        (*(void (**)(uint64_t, uint64_t, const char *, _OWORD *, char ***, uint64_t *, int *))(a4 + 96))(a5, a6, "fecfg", v70, &v68, &v64, __c);
        if ((_WORD)v64)
        {
          uint64_t v54 = strchr(*v68, LOBYTE(__c[0]));
          if (v54) {
            *uint64_t v54 = 0;
          }
          if ((unsigned __int16)v48 == 2)
          {
            *(_WORD *)(a8 + 2 * v52 + 42) = atoi(*v68);
          }
          else if ((unsigned __int16)v48 == 1)
          {
            *(_WORD *)(a8 + 2 * v52 + 22) = atoi(*v68);
          }
          else if ((_WORD)v48)
          {
            *(_WORD *)(a8 + 2 * v52 + 62) = atoi(*v68);
          }
          else
          {
            *(_WORD *)(a8 + 2 * v52 + 2) = atoi(*v68);
          }
        }
        if (v49[j] == 44) {
          v49 += j + 1;
        }
        else {
          v49 += j;
        }
        ++v52;
        int v51 = *v49;
      }
      while (*v49);
    }
    else
    {
      unsigned __int16 v52 = 0;
    }
    if (++v48 == 4)
    {
      *(_WORD *)a8 = v52;
      return 0;
    }
  }
  return 0;
}

uint64_t doesNNCustermizedFE(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 8);
    uint64_t v24 = *(const char **)(a2 + 1088);
    size_t v7 = strlen(v24);
    uint64_t v8 = heap_Alloc(v6, v7 + 2);
    if (v8)
    {
      BOOL v9 = (void *)v8;
      if (*(_WORD *)(a2 + 1072))
      {
        unint64_t v10 = 0;
        unsigned __int16 v11 = 0;
        do
        {
          uint64_t v12 = *(void *)(a2 + 1064);
          unsigned int v13 = *(_DWORD *)(v12 + 184 * v10 + 36);
          BOOL v14 = v13 > 0xA;
          int v15 = (1 << v13) & 0x610;
          if (!v14 && v15 != 0)
          {
            uint64_t v17 = v12 + 184 * v10;
            uint64_t v18 = *(unsigned __int16 *)(v17 + 16);
            uint64_t v19 = *(unsigned __int16 *)(v17 + 18);
            if (v18 != v19)
            {
              uint64_t v20 = v19 - v18;
              memcpy(v9, &v24[v18], v19 - v18);
              *((unsigned char *)v9 + v20) = 0;
              __int16 v21 = strlen((const char *)v9);
              int v22 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v9, v21);
              if (v22)
              {
                unsigned __int16 v23 = 0;
                do
                {
                  utf8_getUTF8Char((uint64_t)v9, v23, &v25);
                  if (!(v25 ^ 0xA7C2 | v26)) {
                    ++v11;
                  }
                  v23 += utf8_determineUTF8CharLength(v25);
                  --v22;
                }
                while (v22);
              }
            }
          }
          ++v10;
        }
        while (v10 < *(unsigned __int16 *)(a2 + 1072));
        if (v11 >= 3u) {
          *a3 = 1;
        }
      }
      heap_Free(*(void **)(v5 + 8), (uint64_t)v9);
      return 0;
    }
    else
    {
      return 2315264010;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t addTokenNN(uint64_t a1, unsigned __int16 *a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(unsigned __int16 *)(a4 + 1072);
  int v12 = *a2;
  if (!*(_WORD *)(a4 + 1072)) {
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  unsigned __int16 v14 = v11 + 1;
  unsigned int v15 = a2[1];
  uint64_t v16 = (unsigned __int16 *)(*(void *)(a4 + 1064) + 18);
  while (1)
  {
    unsigned int v17 = *(v16 - 1);
    if (v12 == v17) {
      unsigned __int16 v14 = v13;
    }
    unsigned int v18 = *v16;
    if (v15 == v18) {
      break;
    }
    if (v15 >= v17 && v15 < v18) {
      break;
    }
    v16 += 92;
    ++v13;
    int v12 = *a2;
    if (v11 == v13) {
      goto LABEL_14;
    }
  }
  if (v11 + 1 != v14)
  {
    unsigned __int8 v26 = *(void **)(a1 + 8);
    int v27 = strlen(__s);
    uint64_t v28 = heap_Calloc(v26, 1, (v27 - 1));
    *(void *)(*(void *)(a4 + 1064) + 184 * v14 + 128) = v28;
    if (v28)
    {
      uint64_t v33 = (char *)v28;
      size_t v34 = strlen(__s + 1);
      strncpy(v33, __s + 1, v34 - 1);
      return 0;
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v36);
      return 2315264010;
    }
  }
  else
  {
LABEL_14:
    uint64_t v20 = 2315264000;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not resolve token positions (find start and end) : token=%s from=%d to=%d", a6, a7, a8, (uint64_t)__s);
    if (*(_WORD *)(a4 + 1072))
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"word[%d] %d,%d", v21, v22, v23, v25++);
        v24 += 184;
      }
      while (v25 < *(unsigned __int16 *)(a4 + 1072));
    }
  }
  return v20;
}

uint64_t insert_NLU_infoNN(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v7 = a3;
  __int16 v8 = a2;
  if (a2 == a3)
  {
    if (a2 + 1 == *(unsigned __int16 *)(a5 + 1072)) {
      unsigned __int16 v7 = a2 + 1;
    }
    else {
      unsigned __int16 v7 = a2;
    }
  }
  if (a2 >= v7) {
    return 0;
  }
  uint64_t v10 = 184 * a2 + 88;
  uint64_t v11 = a2 + 1;
  while (1)
  {
    int v12 = *(const char **)(a4 + 8);
    if (!v12) {
      goto LABEL_12;
    }
    uint64_t v13 = *(void *)(*(void *)(a5 + 1064) + v10);
    if (v13)
    {
      heap_Free(*(void **)(a1 + 8), v13);
      *(void *)(*(void *)(a5 + 1064) + v10) = 0;
      int v12 = *(const char **)(a4 + 8);
    }
    int v14 = strlen(v12);
    unsigned int v15 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v14 + 1));
    *(void *)(*(void *)(a5 + 1064) + v10) = v15;
    if (!v15) {
      break;
    }
    strcpy(v15, *(const char **)(a4 + 8));
    *(_WORD *)(*(void *)(a5 + 1064) + v10 + 8) = v8;
LABEL_12:
    uint64_t v20 = *(const char **)(a4 + 56);
    if (v20)
    {
      uint64_t v21 = *(void *)(*(void *)(a5 + 1064) + v10 + 32);
      if (v21)
      {
        heap_Free(*(void **)(a1 + 8), v21);
        *(void *)(*(void *)(a5 + 1064) + v10 + 32) = 0;
        uint64_t v20 = *(const char **)(a4 + 56);
      }
      int v22 = strlen(v20);
      uint64_t v23 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v22 + 1));
      *(void *)(*(void *)(a5 + 1064) + v10 + 32) = v23;
      if (!v23) {
        break;
      }
      strcpy(v23, *(const char **)(a4 + 56));
    }
    uint64_t v24 = *(const char **)(a4 + 40);
    if (v24)
    {
      int v25 = strlen(v24);
      unsigned __int8 v26 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(*(void *)(a5 + 1064) + v10 + 56), (v25 + 32) & 0xFFFFFFE0);
      if (!v26) {
        break;
      }
      *(void *)(*(void *)(a5 + 1064) + v10 + 56) = strcpy(v26, *(const char **)(a4 + 40));
    }
    uint64_t v27 = *(void *)(a4 + 72);
    if (v27)
    {
      *(void *)(*(void *)(a5 + 1064) + v10 + 64) = v27;
      uint64_t v28 = *(const char **)(a4 + 64);
      if (v28)
      {
        size_t v29 = strlen(v28);
        uint64_t v30 = (char *)heap_Alloc(*(void *)(a1 + 8), v29 + 1);
        *(void *)(*(void *)(a5 + 1064) + v10 + 72) = v30;
        if (!v30) {
          break;
        }
        strcpy(v30, *(const char **)(a4 + 64));
      }
    }
    v10 += 184;
    if (v7 == (unsigned __int16)v11++) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v16, v17, v18, v19, v33);
  return 2315264010;
}

uint64_t addMarkerTypeNN(uint64_t a1, char *__s2, const char *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(unsigned __int16 *)(a5 + 74);
  if (v14 <= *(unsigned __int16 *)(a5 + 72)) {
    uint64_t v15 = *(unsigned __int16 *)(a5 + 72);
  }
  else {
    uint64_t v15 = *(unsigned __int16 *)(a5 + 74);
  }
  uint64_t v16 = 8 * v14;
  do
  {
    if (v15 == v14 || (uint64_t v17 = *(void *)(a5 + 528)) == 0)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Ignoring marker :%s, as not in DEFMAPPING list", a6, a7, a8, (uint64_t)__s2);
      return 0;
    }
    int v18 = strcmp((const char *)(v17+ *(unsigned int *)(*(void *)(a5 + 536) + 4 * *(unsigned int *)(*(void *)(a5 + 64) + v16))), __s2);
    ++v14;
    v16 += 8;
  }
  while (v18);
  if ((_WORD)v14 != 1) {
    return 0;
  }
  int v19 = strlen(a3);
  uint64_t v20 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v19 + 1));
  *(void *)(*(void *)(a6 + 1064) + 184 * a4 + 128) = v20;
  if (v20)
  {
    strcpy(v20, a3);
    return 0;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v21, v22, v23, v24, v26);
  return 2315264010;
}

uint64_t getNNSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v117 = 0;
  unsigned __int16 v116 = 0;
  uint64_t inserted = *(void *)(a5 + 1088);
  if (!inserted) {
    return inserted;
  }
  uint64_t v6 = a5;
  unsigned int v7 = *(unsigned __int16 *)(a5 + 1096);
  unsigned __int16 v118 = 0;
  __int16 v115 = 0;
  int v114 = 0;
  uint64_t v113 = 0;
  unsigned int v112 = 0;
  __int16 v111 = 0;
  if (!*(unsigned char *)inserted) {
    return 0;
  }
  __int16 v12 = strlen((const char *)inserted);
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)(v12 + 2));
  if (!v13)
  {
    uint64_t inserted = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v92);
    return inserted;
  }
  uint64_t v18 = v13;
  unsigned int v95 = v7;
  uint64_t v93 = a3;
  uint64_t v94 = a4;
  uint64_t v104 = a2;
  if (!*(_WORD *)(v6 + 1072))
  {
LABEL_77:
    uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 104))(v93, v94, 2, v95, &v118);
    if ((v71 & 0x80000000) != 0)
    {
LABEL_89:
      uint64_t inserted = v71;
    }
    else
    {
      while (v118)
      {
        uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(v93, v94);
        if ((v71 & 0x80000000) != 0) {
          goto LABEL_89;
        }
        if (v114 == 6)
        {
          uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, __int16 *))(v104 + 168))(v93, v94, v118, 1, 1, &v112, &v115);
          if ((v71 & 0x80000000) != 0) {
            goto LABEL_89;
          }
          uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(v104 + 168))(v93, v94, v118, 2, 1, (char *)&v112 + 2, &v115);
          if ((v71 & 0x80000000) != 0) {
            goto LABEL_89;
          }
          if ((unsigned __int16)v112 > HIWORD(v112))
          {
            uint64_t inserted = 2315271857;
            goto LABEL_90;
          }
          uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(v104 + 176))(v93, v94, v118, 4, &v113, &v115);
          if ((v71 & 0x80000000) != 0) {
            goto LABEL_89;
          }
          long long v75 = v113;
          if (strcmp(v113, "_PR_"))
          {
            uint64_t v80 = addTokenNN(a1, (unsigned __int16 *)&v112, v75, v6, v76, v77, v78, v79);
            if ((v80 & 0x80000000) != 0)
            {
              uint64_t inserted = v80;
              if (v80 != -1979703296) {
                goto LABEL_90;
              }
            }
          }
        }
        a2 = v104;
        uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(v104 + 120))(v93, v94, v118, &v118);
        if ((v71 & 0x80000000) != 0) {
          goto LABEL_89;
        }
      }
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Added words information", v72, v73, v74, 0);
      uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(a2 + 176))(v93, v94, v95, 1, &v117, &v116);
      if ((inserted & 0x80000000) == 0)
      {
        LOWORD(v82) = v116;
        if (v116)
        {
          int v83 = 0;
          unsigned __int16 v84 = 0;
          uint64_t v85 = v6 + 1104;
          do
          {
            if (*(_DWORD *)(v117 + 32 * v84) == 21)
            {
              int DomainFromPausingDefs = getDomainFromPausingDefs(v85, *(char **)(v117 + 32 * v84 + 24), &v111);
              unsigned int v82 = v116;
              if (DomainFromPausingDefs == 1)
              {
                unsigned __int16 v87 = v84 + 1;
                if (v116 > (unsigned __int16)(v84 + 1))
                {
                  uint64_t v88 = a1;
                  uint64_t v89 = v117;
                  uint64_t v90 = v117 + 32 * v84 + 24;
                  while (1)
                  {
                    int v91 = v87;
                    if (*(_DWORD *)(v89 + 32 * v87) == 21)
                    {
                      if (strcmp(*(const char **)v90, *(const char **)(v89 + 32 * v87 + 24))) {
                        break;
                      }
                    }
                    unsigned __int16 v87 = v91 + 1;
                    if (v82 <= (unsigned __int16)(v91 + 1)) {
                      goto LABEL_106;
                    }
                  }
                  unsigned __int16 v84 = v91 - (v91 + 1 != v83);
LABEL_106:
                  a1 = v88;
                }
              }
            }
            int v83 = ++v84;
          }
          while (v84 < (unsigned __int16)v82);
        }
      }
    }
    goto LABEL_90;
  }
  unint64_t v19 = 0;
  uint64_t v96 = v6 + 1104;
  uint64_t v97 = v13;
  uint64_t v106 = v6;
  uint64_t v107 = inserted;
  uint64_t v98 = a1;
  while (1)
  {
    uint64_t v20 = *(void *)(v6 + 1064) + 184 * v19;
    *(void *)(v20 + 80) = 0;
    *(void *)(v20 + 88) = 0;
    *(void *)(v20 + 120) = 0;
    *(void *)(v20 + 128) = 0;
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 160) = 0u;
    unsigned int v112 = *(_DWORD *)(v20 + 16);
    unint64_t v21 = v112;
    unint64_t v22 = (unint64_t)v112 >> 16;
    strncpy((char *)v18, (const char *)(inserted + (unsigned __int16)v21), (v21 >> 16) - (unsigned __int16)v21);
    *(unsigned char *)(v18 + v22 - (unsigned __int16)v112) = 0;
    if (v22 == (unsigned __int16)v21)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v23, v24, v25, (unsigned __int16)v21);
      goto LABEL_73;
    }
    BOOL v26 = doesWordEndInComma((const char *)v18);
    uint64_t v27 = *(void *)(v6 + 1064);
    if (v26) {
      *(_DWORD *)(v27 + 184 * *(unsigned __int16 *)(v6 + 1072) - 84) = 1;
    }
    uint64_t v28 = *(const char **)(v27 + 184 * v19 + 40);
    if (v28) {
      break;
    }
LABEL_73:
    ++v19;
    uint64_t inserted = v107;
    if (v19 >= *(unsigned __int16 *)(v6 + 1072)) {
      goto LABEL_77;
    }
  }
  long long v122 = 0u;
  long long v123 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v119 = 0u;
  int v29 = strlen(v28);
  uint64_t v30 = heap_Calloc(*(void **)(a1 + 8), 1, (v29 + 1));
  if (!v30)
  {
LABEL_93:
    uint64_t inserted = 2315264010;
    a1 = v98;
    log_OutPublic(*(void *)(v98 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v31, v32, v33, v34, v92);
    uint64_t v18 = v97;
    goto LABEL_90;
  }
  unint64_t v35 = v30;
  __int16 v99 = v28;
  unsigned int v36 = strcpy((char *)v30, v28);
  for (uint64_t i = (unsigned __int8 *)(v35 + strlen(v36) - 1); (unint64_t)i >= v35; --i)
  {
    unsigned int v38 = *i;
    BOOL v39 = v38 > 0x3B;
    uint64_t v40 = (1 << v38) & 0x800000100002600;
    if (v39 || v40 == 0) {
      break;
    }
    *uint64_t i = 0;
  }
  uint64_t v42 = 0;
  uint64_t v110 = 0;
  uint64_t v108 = 0;
  long long v109 = 0uLL;
  uint64_t v105 = 0;
  int v100 = 0;
  unsigned __int16 v101 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  unsigned int v43 = 0;
  unint64_t v44 = v35;
  do
  {
    int v45 = strchr((char *)v44, 59);
    int v46 = v45;
    if (v45) {
      *int v45 = 0;
    }
    uint64_t v47 = strchr((char *)v44, 58);
    uint64_t v48 = v47;
    if (v47)
    {
      *uint64_t v47 = 0;
      unint64_t v49 = v47 + 1;
    }
    else
    {
      unint64_t v49 = "null";
    }
    if (!strcmp((const char *)v44, "POS"))
    {
      uint64_t inserted = 0;
      unsigned int v43 = v49;
      goto LABEL_45;
    }
    if (!strcmp((const char *)v44, "PHR"))
    {
      uint64_t inserted = 0;
      uint64_t v42 = v49;
      goto LABEL_45;
    }
    if (!strcmp((const char *)v44, "BND"))
    {
      uint64_t inserted = 0;
      uint64_t v110 = v49;
      goto LABEL_45;
    }
    if (!strcmp((const char *)v44, "BNDSHAPE"))
    {
      uint64_t inserted = 0;
      uint64_t v108 = v49;
      goto LABEL_45;
    }
    if (!strcmp((const char *)v44, "S_POI"))
    {
      uint64_t inserted = 0;
      uint64_t v54 = "B";
LABEL_44:
      *((void *)&v109 + 1) = v54;
      *(void *)&long long v109 = v49;
      goto LABEL_45;
    }
    if (!strcmp((const char *)v44, "I_POI"))
    {
      uint64_t inserted = 0;
      uint64_t v54 = "I";
      goto LABEL_44;
    }
    if (!strcmp((const char *)v44, "E_POI"))
    {
      uint64_t inserted = 0;
      uint64_t v54 = "S";
      if (!*((void *)&v109 + 1)) {
        uint64_t v54 = "E";
      }
      goto LABEL_44;
    }
    if (!strcmp((const char *)v44, "PRM"))
    {
      uint64_t inserted = 0;
      uint64_t v105 = v49;
      goto LABEL_45;
    }
    int v53 = *(_DWORD *)(v106 + 1760);
    if (v53 == 1)
    {
      if (!strcmp((const char *)(v44 + 1), "_COMP"))
      {
        int v55 = strlen(v49);
        uint64_t v56 = heap_Calloc(*(void **)(v98 + 8), 1, (v55 + 3));
        if (!v56) {
          goto LABEL_93;
        }
        uint64_t v57 = (char *)v56;
        int v58 = strcmp((const char *)v44, "S_COMP");
        int v59 = "I-";
        if (!v58) {
          int v59 = "B-";
        }
        *(_WORD *)uint64_t v57 = *(_WORD *)v59;
        v57[2] = v59[2];
        strcat(v57, v49);
        uint64_t v60 = v57;
        uint64_t inserted = 0;
        uint64_t v102 = (uint64_t)v60;
        uint64_t v103 = v60;
        goto LABEL_45;
      }
    }
    else if (!v53 && !strcmp((const char *)v44, "COMP"))
    {
      uint64_t inserted = 0;
      uint64_t v103 = v49;
      goto LABEL_45;
    }
    if (!v48 || (unint64_t)v48 <= v44 + 1) {
      goto LABEL_54;
    }
    if (!strcmp((const char *)(v44 + 1), "_CLASS"))
    {
      uint64_t inserted = 0;
      int v100 = v49;
      goto LABEL_45;
    }
    if (!strcmp((const char *)(v44 + 1), "_PUNC"))
    {
      uint64_t v61 = v101;
      if (!v101)
      {
        int v62 = strlen(v99);
        uint64_t v61 = (const char *)heap_Calloc(*(void **)(v98 + 8), 1, (v62 + 1));
        if (!v61)
        {
          uint64_t inserted = 2315264010;
          a1 = v98;
          log_OutPublic(*(void *)(v98 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v63, v64, v65, v66, v92);
          uint64_t v67 = v35;
          uint64_t v18 = v97;
LABEL_69:
          heap_Free(*(void **)(a1 + 8), v67);
          goto LABEL_70;
        }
        *uint64_t v61 = 0;
      }
      *uint64_t v48 = 58;
      unsigned __int16 v101 = v61;
      hlp_NLUStrJoin(v61, (const char *)v44);
      uint64_t inserted = 0;
    }
    else
    {
LABEL_54:
      uint64_t inserted = addMarkerTypeNN(v98, (char *)v44, v49, (unsigned __int16)v19, v96, v106, v51, v52);
    }
LABEL_45:
    if (!v46) {
      break;
    }
    unint64_t v44 = (unint64_t)(v46 + 1);
  }
  while ((inserted & 0x80000000) == 0);
  uint64_t v67 = (uint64_t)v101;
  *(void *)&long long v122 = v101;
  *((void *)&v122 + 1) = v103;
  *(void *)&long long v121 = v105;
  *((void *)&v121 + 1) = v100;
  long long v123 = v109;
  *(void *)&long long v120 = v110;
  *((void *)&v120 + 1) = v108;
  *(void *)&long long v119 = v43;
  *((void *)&v119 + 1) = v42;
  a1 = v98;
  log_OutText(*(void *)(v98 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"parsed NLU %s[%d,%d] -> POS=%s, PHR=%s, BND=%s, BNDSHAPE=%s, PRM=%s, CLASS=%s, PUNC=%s, COMP=%s, POIClass=%s, POIPosi=%s", v50, v51, v52, (uint64_t)v99);
  uint64_t v18 = v97;
  if ((inserted & 0x80000000) == 0)
  {
    if (!v43) {
      log_OutText(*(void *)(v98 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"missing POS in NLU string: arg=%s", v68, v69, v70, v35);
    }
    uint64_t inserted = insert_NLU_infoNN(v98, (unsigned __int16)v19, (unsigned __int16)(v19 + 1), (uint64_t)&v119, v106);
  }
  heap_Free(*(void **)(v98 + 8), v35);
  if (v101) {
    goto LABEL_69;
  }
LABEL_70:
  a2 = v104;
  if (v102) {
    heap_Free(*(void **)(a1 + 8), v102);
  }
  uint64_t v6 = v106;
  if ((inserted & 0x80000000) == 0) {
    goto LABEL_73;
  }
LABEL_90:
  heap_Free(*(void **)(a1 + 8), v18);
  return inserted;
}

uint64_t getDocumentClassNN(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 1072);
  if (!*(_WORD *)(a1 + 1072)) {
    return 0;
  }
  __int16 v2 = 0;
  uint64_t v3 = *(void *)(a1 + 1064);
  while (1)
  {
    uint64_t v4 = v3 + 184 * v2;
    uint64_t v5 = *(char **)(v4 + 144);
    if (v5)
    {
      if (strstr(*(char **)(v4 + 144), "joyfulstyle")) {
        return 1;
      }
      if (strstr(v5, "didacticstyle")) {
        return 2;
      }
      if (strstr(v5, "neutralstyle")) {
        break;
      }
    }
    if (v1 <= ++v2) {
      return 0;
    }
  }
  return 3;
}

uint64_t nnpuncPhrasing(uint64_t a1, uint64_t a2, int a3, int a4, unsigned __int16 *a5, const char *a6, char *__s)
{
  unsigned int v7 = __s;
  if (strchr(__s, 44)) {
  int DocumentClassNN = getDocumentClassNN(a2);
  }
  unint64_t v19 = a5 + 25;
  uint64_t v20 = a5 + 15;
  unint64_t v21 = a5 + 35;
  if (DocumentClassNN == 1) {
    unint64_t v21 = a5 + 5;
  }
  if (DocumentClassNN != 2) {
    uint64_t v20 = v21;
  }
  if (DocumentClassNN != 3) {
    unint64_t v19 = v20;
  }
  int v22 = *v19;
  if (!v22) {
    int v22 = 9;
  }
  unsigned int v43 = v22;
  if (!*(void *)(a2 + 1088))
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"%s\n", v16, v17, v18, (uint64_t)"input parameter: sent is NULL");
    return 0;
  }
  uint64_t v42 = a1;
  if (*(_WORD *)(a2 + 1072))
  {
    unint64_t v23 = 0;
    uint64_t v24 = 100;
    uint64_t v25 = *(void *)(a2 + 1064);
    while (1)
    {
      int v26 = doesWordEndInCommaNN(*(void *)(v25 + v24 - 36), a6);
      uint64_t v25 = *(void *)(a2 + 1064);
      if ((v26 || *(_DWORD *)(v25 + v24) == 1 && *(unsigned char *)(v25 + v24 + 4))
        && *(_DWORD *)(v25 + v24 + 8)
        && *(_WORD *)(a2 + 1072))
      {
        *(unsigned char *)(v25 + v24 - 24) = 4;
      }
      if (*(_DWORD *)(v25 + v24) == 1)
      {
        int v27 = *(char *)(v25 + v24 + 4);
        uint64_t v28 = strchr(v7, v27);
        if (v27) {
          BOOL v29 = v28 == 0;
        }
        else {
          BOOL v29 = 1;
        }
        if (!v29 && !*(_DWORD *)(v25 + v24 + 8)) {
          *(unsigned char *)(v25 + v24 - 24) = 3;
        }
      }
      uint64_t v30 = *(const char **)(v25 + v24 + 52);
      if (!v30) {
        goto LABEL_36;
      }
      if (strcmp(*(const char **)(v25 + v24 + 52), "B") && strcmp(v30, "S")) {
        break;
      }
      if (v24 != 100)
      {
        unint64_t v31 = (v23 - 1);
LABEL_35:
        *(unsigned char *)(v25 + 184 * v31 + 76) = 4;
      }
LABEL_36:
      ++v23;
      v24 += 184;
      if (v23 >= *(unsigned __int16 *)(a2 + 1072)) {
        goto LABEL_37;
      }
    }
    if (strcmp(v30, "E")) {
      goto LABEL_36;
    }
    unint64_t v31 = v23;
    if (*(_DWORD *)(v25 + v24 + 76) < v43) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_37:
  printPhrasesNN(v42, a2, v13, v14, v15, v16, v17, v18);
  uint64_t v32 = heap_Calloc(*(void **)(v42 + 8), 1024, 2);
  if (v32)
  {
    uint64_t v39 = v32;
    printPhrasesNN(v42, a2, v33, v34, v35, v36, v37, v38);
    heap_Free(*(void **)(v42 + 8), v39);
    return 0;
  }
  log_OutPublic(*(void *)(v42 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v35, v36, v37, v38, v41);
  return 2315264010;
}

uint64_t doesWordEndInCommaNN(uint64_t result, const char *a2)
{
  *(_DWORD *)__s2 = 0;
  if (result)
  {
    __int16 v2 = (char *)result;
    if (*(unsigned char *)result)
    {
      __int16 v4 = Utf8_Utf8NbrOfSymbols(a2);
      int v5 = (unsigned __int16)(v4 - 1);
      if (v4 != 1)
      {
        unsigned __int16 v6 = 0;
        do
        {
          unsigned __int16 v7 = v6;
          if ((utf8_getUTF8Char((uint64_t)a2, v6, __s2) & 0x80000000) != 0) {
            break;
          }
          if (strstr(v2, __s2)) {
            return 1;
          }
          unsigned __int16 v6 = v7 + strlen(__s2);
          --v5;
        }
        while (v5);
      }
    }
    return 0;
  }
  return result;
}

uint64_t printPhrasesNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a2 + 1072))
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = log_OutText(*(void *)(v9 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s\t\t%c\n", a6, a7, a8, *(void *)(*(void *)(a2 + 1064) + v10 + 56));
      ++v11;
      v10 += 184;
    }
    while (v11 < *(unsigned __int16 *)(a2 + 1072));
  }
  return result;
}

uint64_t updateLingdbNNPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6, const char *a7, int a8)
{
  uint64_t v15 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  __s1 = 0;
  uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), 32, 1);
  if (v16)
  {
    unint64_t v21 = (char *)v16;
    int v106 = 0;
    int v105 = 0;
    unsigned int v104 = 0;
    __int16 v103 = 0;
    int v101 = 0;
    unsigned int v102 = 0;
    uint64_t v100 = 0;
    __int16 v99 = 0;
    uint64_t v22 = a5;
    uint64_t v23 = *(unsigned __int16 *)(a5 + 1096);
    uint64_t v96 = v22;
    unsigned int v92 = *(char **)(v22 + 1088);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __int16 *))(a2 + 176))(a3, a4, v23, 1, &v100, &v99);
    if ((v24 & 0x80000000) != 0)
    {
      return v24;
    }
    else
    {
      __s[0] = 0;
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a2 + 104))(a3, a4, 2, v23, (char *)&v106 + 2);
      if ((v25 & 0x80000000) == 0)
      {
        unsigned __int16 v26 = HIWORD(v106);
        if (HIWORD(v106))
        {
          unsigned __int16 v87 = a7;
          uint64_t v27 = 0;
          uint64_t v93 = v15;
          uint64_t v94 = 0;
          int v88 = a6;
          int v89 = a8;
          uint64_t v28 = v96;
          uint64_t v97 = a4;
          while (1)
          {
            uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a2 + 168))(a3, a4, v26, 0, 1, &v104, (char *)&v105 + 2);
            if ((v25 & 0x80000000) != 0) {
              goto LABEL_137;
            }
            if (v104 <= 0xA && ((1 << v104) & 0x610) != 0) {
              break;
            }
LABEL_116:
            uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v106), (char *)&v106 + 2);
            if ((v25 & 0x80000000) != 0) {
              goto LABEL_137;
            }
            unsigned __int16 v26 = HIWORD(v106);
            if (!HIWORD(v106)) {
              goto LABEL_125;
            }
          }
          uint64_t v30 = *(void *)(v28 + 1064);
          unsigned int v102 = *(_DWORD *)(v30 + 184 * (unsigned __int16)v27 + 16);
          if ((unsigned __int16)v102 == HIWORD(v102))
          {
            a4 = v97;
LABEL_115:
            uint64_t v27 = (v27 + 1);
            if (*(unsigned __int16 *)(v28 + 1072) <= (unsigned __int16)v27) {
              goto LABEL_125;
            }
            goto LABEL_116;
          }
          HIWORD(v101) = 0;
          uint64_t v31 = v94;
          if ((unsigned __int16)v27 | (unsigned __int16)v94
            && (unsigned __int16)v94 >= (unsigned __int16)v27)
          {
            __s[0] = 0;
            goto LABEL_46;
          }
          uint64_t v31 = *(unsigned __int16 *)(v28 + 1072);
          uint64_t v32 = v27;
          if (v31 > (unsigned __int16)v27)
          {
            uint64_t v33 = (_DWORD *)(v30 + 184 * (unsigned __int16)v27 + 112);
            uint64_t v32 = (unsigned __int16)v27;
            while (*((unsigned __int8 *)v33 - 36) - 3 >= 2 && !*v33)
            {
              ++v32;
              v33 += 46;
              if (v31 == v32) {
                goto LABEL_23;
              }
            }
          }
          if (v31 == (unsigned __int16)v32)
          {
LABEL_23:
            __int16 v103 = *(_WORD *)(v30 + 184 * *(unsigned __int16 *)(v28 + 1072) - 166);
            if (*(void *)(v28 + 1768))
            {
              uint64_t v34 = v31;
              __strcpy_chk();
              uint64_t v31 = v34;
            }
            else
            {
              strcpy(__s, "T");
            }
            goto LABEL_33;
          }
          __int16 v103 = *(_WORD *)(v30 + 184 * (unsigned __int16)v32 + 18);
          if ((unsigned __int16)v32 + 1 == v31)
          {
            if (*(void *)(v28 + 1768))
            {
              __strcpy_chk();
LABEL_32:
              uint64_t v31 = v32;
LABEL_33:
              if ((_WORD)v27)
              {
                if (*(unsigned char *)(*(void *)(v28 + 1064) + 184 * ((unsigned __int16)v27 - 1) + 76) == 3) {
                  __int16 v36 = 2;
                }
                else {
                  __int16 v36 = 1;
                }
              }
              else
              {
                __int16 v36 = 0;
              }
              HIWORD(v101) = v36;
              if (__s[0])
              {
                uint64_t v95 = v31;
                LOWORD(v101) = 0;
                uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a2 + 88))(a3, v97, HIWORD(v106), &v106);
                if ((v37 & 0x80000000) != 0) {
                  goto LABEL_131;
                }
                unsigned int v104 = 15;
                uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a2 + 160))(a3, v97, (unsigned __int16)v106, 0, 1, &v104, &v105);
                if ((v37 & 0x80000000) != 0) {
                  goto LABEL_131;
                }
                uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int *))(a2 + 160))(a3, v97, (unsigned __int16)v106, 1, 1, &v102, &v105);
                if ((v37 & 0x80000000) != 0) {
                  goto LABEL_131;
                }
                uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a2 + 160))(a3, v97, (unsigned __int16)v106, 2, 1, &v103, &v105);
                if ((v37 & 0x80000000) != 0
                  || (__int16 v38 = strlen(__s),
                      uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(a2 + 160))(a3, v97, (unsigned __int16)v106, 4, (unsigned __int16)(v38 + 1), __s, &v105), (v37 & 0x80000000) != 0)|| (uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 160))(a3, v97, (unsigned __int16)v106, 7, 1, (char *)&v101 + 2, &v105), (v37 & 0x80000000) != 0)|| (uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 160))(a3,
                              v97,
                              (unsigned __int16)v106,
                              8,
                              1,
                              &v101,
                              &v105),
                      uint64_t v31 = v95,
                      uint64_t v28 = v96,
                      a8 = v89,
                      (v37 & 0x80000000) != 0))
                {
LABEL_131:
                  uint64_t v25 = v37;
                  goto LABEL_137;
                }
              }
LABEL_46:
              uint64_t v94 = v31;
              LOWORD(v101) = 0;
              uint64_t v39 = *(void *)(v28 + 1064);
              if (*(unsigned char *)(v39 + 184 * (unsigned __int16)v27 + 76) == 4)
              {
                if (*(unsigned __int16 *)(v28 + 1072) - 1 != (unsigned __int16)v27)
                {
                  uint64_t v40 = *(const char **)(v39 + 184 * (unsigned __int16)v27 + 56);
                  int v41 = strlen(v40);
                  LOWORD(v101) = 100;
                  uint64_t v42 = (uint64_t)v40;
                  uint64_t v28 = v96;
                  if (doesWordEndInCommaNN(v42, v87)
                    || (uint64_t v43 = *(void *)(v96 + 1064), *(_DWORD *)(v43 + 184 * (unsigned __int16)v27 + 100))
                    || *(unsigned char *)(*(void *)(v43 + 184 * (unsigned __int16)v27 + 56) + (v41 - 1)) == 46)
                  {
                    LOWORD(v101) = v88;
                    if (v88) {
                      goto LABEL_55;
                    }
                  }
                  else if ((_WORD)v101)
                  {
                    goto LABEL_55;
                  }
                }
                uint64_t v39 = *(void *)(v28 + 1064);
              }
              if (*(_DWORD *)(v39 + 184 * (unsigned __int16)v27 + 112)) {
                LOWORD(v101) = v88;
              }
LABEL_55:
              uint64_t v44 = HIWORD(v106);
              __int16 v109 = 0;
              uint64_t v108 = 0;
              __int16 v107 = 0;
              uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a2 + 184))(a3, v97, HIWORD(v106), 18, &v109);
              uint64_t v25 = v45;
              if ((v45 & 0x80000000) != 0 || !v109)
              {
                uint64_t v46 = v97;
                if ((v45 & 0x80000000) != 0) {
                  goto LABEL_137;
                }
              }
              else
              {
                uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(a2 + 176))(a3, v97, v44, 18, &v108, &v107);
                if ((v37 & 0x80000000) != 0) {
                  goto LABEL_131;
                }
                uint64_t v46 = v97;
                if (!strcmp(v108, "external")) {
                  goto LABEL_62;
                }
              }
              uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 160))(a3, v46, HIWORD(v106), 8, 1, &v101, &v105);
              if ((v37 & 0x80000000) != 0) {
                goto LABEL_131;
              }
LABEL_62:
              uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a2 + 176))(a3, v46, HIWORD(v106), 9, &__s1, (char *)&v105 + 2);
              if ((v37 & 0x80000000) != 0) {
                goto LABEL_131;
              }
              uint64_t v47 = __s1;
              if (!strcmp(__s1, "normal"))
              {
                unsigned int v91 = 0;
                uint64_t v52 = *(void *)(v28 + 1064);
              }
              else
              {
                int v51 = strcmp(v47, "mnx");
                uint64_t v52 = *(void *)(v28 + 1064);
                if (v51) {
                  unsigned int v91 = *(unsigned __int8 *)(v52 + 184 * (unsigned __int16)v27 + 77);
                }
                else {
                  unsigned int v91 = 0;
                }
              }
              uint64_t v53 = v52 + 184 * (unsigned __int16)v27;
              uint64_t v54 = *(const char **)(v53 + 128);
              if (v54)
              {
                unint64_t v55 = strlen(*(const char **)(v53 + 128)) + 1;
                if (v55 >= 0x21)
                {
                  uint64_t v56 = heap_Realloc(*(uint64_t **)(v15 + 8), (uint64_t)v21, v55);
                  if (!v56)
                  {
                    uint64_t v25 = 2315264010;
                    goto LABEL_136;
                  }
                  uint64_t v54 = *(const char **)(*(void *)(v28 + 1064) + 184 * (unsigned __int16)v27 + 128);
                  unint64_t v21 = (char *)v56;
                }
                if (!strcmp(v54, "O") || !strcmp(v54, "O-P"))
                {
                  strcpy(v21, v54);
                }
                else
                {
                  strcpy(v21, "B-");
                  strcat(v21, *(const char **)(*(void *)(v28 + 1064) + 184 * (unsigned __int16)v27 + 128));
                }
                size_t v61 = strlen(v21);
                if (v61 >= 2)
                {
                  size_t v62 = v61;
                  if (!strcmp(&v21[v61 - 2], "-P")) {
                    v21[v62 - 2] = 0;
                  }
                }
              }
              else if (*v21 && strcmp(v21, "O"))
              {
                *unint64_t v21 = 73;
              }
              uint64_t v63 = *(void *)(v28 + 1064);
              uint64_t v64 = *(const char **)(v63 + 184 * (unsigned __int16)v27 + 80);
              if (v64)
              {
                size_t v65 = strlen(v64);
                uint64_t v66 = (char *)heap_Alloc(*(void *)(v15 + 8), v65 + 1);
                if (!v66) {
                  goto LABEL_134;
                }
                uint64_t v67 = v66;
                strcpy(v66, *(const char **)(*(void *)(v28 + 1064) + 184 * (unsigned __int16)v27 + 80));
              }
              else
              {
                uint64_t v68 = *(char **)(v63 + 184 * (unsigned __int16)v27 + 48);
                if (v68)
                {
                  size_t v69 = hlp_NLUStrValueLen(v68);
                  uint64_t v70 = (char *)heap_Alloc(*(void *)(v15 + 8), v69 + 1);
                  if (!v70)
                  {
LABEL_134:
                    uint64_t v25 = 2315264010;
                    uint64_t v15 = v93;
LABEL_136:
                    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v57, v58, v59, v60, v86);
                    goto LABEL_137;
                  }
                  uint64_t v67 = v70;
                  strncpy(v70, *(const char **)(*(void *)(v28 + 1064) + 184 * (unsigned __int16)v27 + 48), v69)[v69] = 0;
                }
                else
                {
                  uint64_t v67 = 0;
                }
              }
              uint64_t v71 = *(void *)(v28 + 1064) + 184 * (unsigned __int16)v27;
              uint64_t v72 = *(char **)(v71 + 168);
              uint64_t v73 = *(const char **)(v71 + 40);
              uint64_t v90 = HIWORD(v106);
              if (a8)
              {
                if (!v73)
                {
                  if (!*v21)
                  {
LABEL_112:
                    if (v67) {
                      heap_Free(*(void **)(v93 + 8), (uint64_t)v67);
                    }
                    log_OutText(*(void *)(v93 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_PRM -> %d dur=%d", v48, v49, v50, HIWORD(v106));
                    LH_itoa(v91, v110, 0xAu);
                    __int16 v83 = strlen(v110);
                    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(a2 + 160))(a3, v97, HIWORD(v106), 13, (unsigned __int16)(v83 + 1), v110, &v105);
                    uint64_t v15 = v93;
                    a4 = v97;
                    uint64_t v28 = v96;
                    if ((v25 & 0x80000000) != 0) {
                      goto LABEL_137;
                    }
                    goto LABEL_115;
                  }
                  uint64_t v73 = 0;
                  char v74 = 1;
                  size_t v75 = 1;
                  if (!v67)
                  {
LABEL_97:
                    uint64_t v76 = v75 + strlen(v21) + 5;
                    if (v72) {
                      v76 += strlen(v72) + 10;
                    }
                    uint64_t v77 = (char *)heap_Alloc(*(void *)(v93 + 8), v76);
                    if (!v77)
                    {
                      uint64_t v25 = 2315264010;
LABEL_133:
                      uint64_t v15 = v93;
                      goto LABEL_137;
                    }
                    uint64_t v81 = v77;
                    LOWORD(v108) = 0;
                    if (v74)
                    {
                      *uint64_t v77 = 0;
                      if (!v67) {
                        goto LABEL_106;
                      }
                    }
                    else
                    {
                      strcpy(v77, v73);
                      if (!v67) {
                        goto LABEL_106;
                      }
                    }
                    if (*v67) {
                      hlp_NLUStrSet(v81, "POS", v67);
                    }
LABEL_106:
                    if (*v21) {
                      hlp_NLUStrSet(v81, "PHR", v21);
                    }
                    if (v72 && *v72) {
                      hlp_NLUStrSet(v81, "BNDSHAPE", v72);
                    }
                    log_OutText(*(void *)(v93 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_NLU %s -> %s", v78, v79, v80, v90);
                    __int16 v82 = strlen(v81);
                    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, const char **))(a2 + 160))(a3, v97, v90, 14, (unsigned __int16)(v82 + 1), v81, &v108);
                    heap_Free(*(void **)(v93 + 8), (uint64_t)v81);
                    a8 = v89;
                    if ((v25 & 0x80000000) != 0) {
                      goto LABEL_133;
                    }
                    goto LABEL_112;
                  }
LABEL_96:
                  v75 += strlen(v67) + 5;
                  goto LABEL_97;
                }
              }
              else if (!v73)
              {
                size_t v75 = 1;
                char v74 = 1;
                if (!v67) {
                  goto LABEL_97;
                }
                goto LABEL_96;
              }
              char v74 = 0;
              size_t v75 = strlen(v73) + 1;
              if (!v67) {
                goto LABEL_97;
              }
              goto LABEL_96;
            }
            __int16 v35 = 84;
          }
          else
          {
            __int16 v35 = 80;
          }
          *(_WORD *)unsigned int __s = v35;
          goto LABEL_32;
        }
LABEL_125:
        if (*(unsigned __int16 *)__s == 87 || !(*(unsigned __int16 *)__s ^ 0x4641 | v112))
        {
          unsigned __int16 v84 = strrchr(v92, 63);
          if (v84 && v84 != v92 && *(v84 - 1) != 32) {
            char *v84 = 46;
          }
        }
      }
LABEL_137:
      heap_Free(*(void **)(v15 + 8), (uint64_t)v21);
    }
  }
  else
  {
    uint64_t v25 = 2315264010;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v86);
  }
  return v25;
}

void *freePwInObjClose(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *((void *)a2 + 1);
  if (v10)
  {
    unsigned int v11 = *a2;
    if (*a2)
    {
      unint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(*((void *)a2 + 1) + 8 * v12);
        if (v13)
        {
          heap_Free(*(void **)(a1 + 8), v13);
          *(void *)(*((void *)a2 + 1) + 8 * v12) = 0;
          unsigned int v11 = *a2;
        }
        ++v12;
      }
      while (v12 < v11);
      uint64_t v10 = *((void *)a2 + 1);
    }
    heap_Free(*(void **)(a1 + 8), v10);
    *((void *)a2 + 1) = 0;
    *a2 = 0;
  }
  uint64_t v14 = *((void *)a2 + 3);
  if (v14)
  {
    unsigned int v15 = a2[16];
    if (a2[16])
    {
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(*((void *)a2 + 3) + 8 * v16);
        if (v17)
        {
          heap_Free(*(void **)(a1 + 8), v17);
          *(void *)(*((void *)a2 + 3) + 8 * v16) = 0;
          unsigned int v15 = a2[16];
        }
        ++v16;
      }
      while (v16 < v15);
      uint64_t v14 = *((void *)a2 + 3);
    }
    heap_Free(*(void **)(a1 + 8), v14);
    *((void *)a2 + 3) = 0;
    a2[16] = 0;
  }
  freePandPRules((void *)a2 + 138, v14, a3, a4, a5, a6, a7, a8);
  uint64_t v18 = *(void **)(a1 + 8);
  return heap_Free(v18, (uint64_t)a2);
}

void *freeSPPunc(void *result, uint64_t a2)
{
  if (a2) {
    return heap_Free((void *)result[1], a2);
  }
  return result;
}

void *freeSentenceDataNN(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 1768);
  if (v4)
  {
    uint64_t result = heap_Free((void *)result[1], v4);
    *(void *)(a2 + 1768) = 0;
  }
  uint64_t v5 = *(void *)(a2 + 1080);
  if (v5)
  {
    uint64_t result = heap_Free((void *)v3[1], v5);
    *(void *)(a2 + 1080) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 1064);
  if (v6)
  {
    if (*(_WORD *)(a2 + 1072))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        if (*(void *)(v6 + v7 + 40))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 40));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 40) = 0;
        }
        if (*(void *)(v6 + v7 + 24))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 24));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 24) = 0;
        }
        if (*(void *)(v6 + v7 + 128))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 128));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 128) = 0;
        }
        if (*(void *)(v6 + v7 + 144))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 144));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 144) = 0;
        }
        if (*(void *)(v6 + v7 + 160))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 160));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 160) = 0;
        }
        if (*(void *)(v6 + v7 + 168))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 168));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 168) = 0;
        }
        if (*(void *)(v6 + v7))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7) = 0;
        }
        ++v8;
        v7 += 184;
      }
      while (v8 < *(unsigned __int16 *)(a2 + 1072));
    }
    uint64_t result = heap_Free((void *)v3[1], v6);
    *(void *)(a2 + 1064) = 0;
  }
  *(_DWORD *)(a2 + 1072) = 0;
  *(_DWORD *)(a2 + 1096) = 0;
  return result;
}

uint64_t nn_model_getBrokerString(uint64_t a1, char *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  *(void *)uint64_t v10 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v10);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v9);
    if ((result & 0x80000000) == 0)
    {
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      int v8 = brokeraux_ComposeBrokerString(a1, (const char *)v11, 1, 1, *(char **)v10, 0, 0, a2, a4);
      return v8 & (v8 >> 31);
    }
  }
  return result;
}

uint64_t initFiModel(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, void *a10)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  __int16 v36 = 0;
  char v34 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  memset(v37, 0, sizeof(v37));
  __int16 v35 = -1;
  uint64_t BrokerString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a8 + 96))(a6, a7, "fecfg", "statbnd_phrase_nn_type_joint", &v36, &v35, &v34);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  uint64_t v16 = 2315264010;
  if (v35)
  {
    (*v36)[strlen(*v36) - 1] = 0;
    if (!strcmp(*v36, "yes"))
    {
      *a9 = 1;
      uint64_t v17 = *(void *)(a1 + 8);
      uint64_t v18 = 8;
    }
    else
    {
      *a9 = 0;
      uint64_t v17 = *(void *)(a1 + 8);
      uint64_t v18 = 16;
    }
    uint64_t v23 = (void *)heap_Alloc(v17, v18);
    if (!v23)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v19, v20, v21, v22, v30);
      return v16;
    }
    uint64_t BrokerString = nn_model_getBrokerString(a1, (char *)v37, (uint64_t)"nnphrase_", 0x100uLL);
    if ((BrokerString & 0x80000000) == 0)
    {
      uint64_t v16 = fi_init(a2, a3, a4, a5, &v33, 0, (uint64_t)v37, (uint64_t)"FINN", 1031, 0);
      if ((v16 & 0x80000000) != 0)
      {
        uint64_t v27 = *(void *)(a1 + 32);
        uint64_t v28 = "load FI model failed";
        goto LABEL_14;
      }
      *uint64_t v23 = v33;
      if (*a9)
      {
LABEL_11:
        *a10 = v23;
        return v16;
      }
      uint64_t BrokerString = nn_model_getBrokerString(a1, (char *)v37, (uint64_t)"nnword_", 0x100uLL);
      if ((BrokerString & 0x80000000) == 0)
      {
        uint64_t v16 = fi_init(a2, a3, a4, a5, &v32, 0, (uint64_t)v37, (uint64_t)"FINN", 1031, 0);
        if ((v16 & 0x80000000) == 0)
        {
          v23[1] = v32;
          goto LABEL_11;
        }
        uint64_t v27 = *(void *)(a1 + 32);
        uint64_t v28 = "load FI pw model failed";
LABEL_14:
        log_OutText(v27, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v28, v24, v25, v26, v31);
        return v16;
      }
    }
    return BrokerString;
  }
  return 2315264020;
}

uint64_t loadEmbedding(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, BOOL *a9)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  __lasts = 0;
  __int16 v23 = -1;
  char v22 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a8 + 96))(a6, a7, "fecfg", "statbnd_embed_type", &v25, &v23, &v22);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 2315264020;
    if (v23)
    {
      if (v25)
      {
        (*v25)[strlen(*v25) - 1] = 0;
        unsigned int v15 = strtok_r((char *)*v25, "|", &__lasts);
        BOOL v16 = !strcmp(v15, "joint_char") && !strcmp(__lasts, "joint_word");
        *a9 = v16;
        uint64_t result = nn_word_lkp_GetInterface(1u, &v26);
        if ((result & 0x80000000) == 0)
        {
          *a5 = safeh_GetNullHandle();
          a5[1] = v17;
          a5[2] = safeh_GetNullHandle();
          a5[3] = v18;
          uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t *))(v26 + 16);
          uint64_t v20 = *a4;
          uint64_t v21 = a4[1];
          if (*a9)
          {
            uint64_t result = v19(v20, v21, "joint_char", a1, a2, a5);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t, uint64_t *))(v26 + 16))(*a4, a4[1], "joint_word", a1, a2, a5 + 2);
          }
          else
          {
            uint64_t result = v19(v20, v21, "albert", a1, a2, a5);
          }
          if ((result & 0x80000000) == 0) {
            *a3 = v26;
          }
        }
      }
    }
  }
  return result;
}

void *freeSpRules(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)a2;
    if (v3)
    {
      uint64_t v4 = result;
      unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
      if (*(_WORD *)(a2 + 10))
      {
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = *(void *)(v3 + 16 * v6);
          if (v7)
          {
            if (*(_WORD *)(v3 + 16 * v6 + 8))
            {
              uint64_t v8 = 0;
              unint64_t v9 = 0;
              do
              {
                if (*(void *)(v7 + v8 + 24))
                {
                  heap_Free((void *)v4[1], *(void *)(v7 + v8 + 24));
                  uint64_t v3 = *(void *)a2;
                  uint64_t v7 = *(void *)(*(void *)a2 + 16 * v6);
                  *(void *)(v7 + v8 + 24) = 0;
                }
                if (*(void *)(v7 + v8 + 16))
                {
                  heap_Free((void *)v4[1], *(void *)(v7 + v8 + 16));
                  uint64_t v3 = *(void *)a2;
                  uint64_t v7 = *(void *)(*(void *)a2 + 16 * v6);
                  *(void *)(v7 + v8 + 16) = 0;
                }
                ++v9;
                v8 += 40;
              }
              while (v9 < *(unsigned __int16 *)(v3 + 16 * v6 + 8));
            }
            heap_Free((void *)v4[1], v7);
            uint64_t v3 = *(void *)a2;
            uint64_t v10 = *(void *)a2 + 16 * v6;
            *(void *)uint64_t v10 = 0;
            *(_WORD *)(v10 + 8) = 0;
            unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
          }
          ++v6;
        }
        while (v6 < v5);
      }
      uint64_t result = heap_Free((void *)v4[1], v3);
      *(void *)a2 = 0;
      *(_WORD *)(a2 + 10) = 0;
    }
  }
  return result;
}

uint64_t nnEmbeddingReLoad(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, BOOL *a9)
{
  if (*a3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*a3 + 24))(*a5, a5[1]);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (*a9)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*a3 + 24))(a5[2], a5[3]);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    *a3 = 0;
  }
  *a4 = safeh_GetNullHandle();
  a4[1] = v18;
  *a9 = 1;
  return loadEmbedding(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t nnModelReload(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t ***a11)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v40 = 0;
  char v38 = 0;
  __int16 v36 = 0;
  uint64_t v37 = 0;
  memset(v41, 0, sizeof(v41));
  uint64_t v17 = *a11;
  __int16 v39 = -1;
  (*(void (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a9 + 96))(a7, a8, "fecfg", "statbnd_phrase_nn_type_joint", &v40, &v39, &v38);
  (*v40)[strlen(*v40) - 1] = 0;
  int v18 = strcmp(*v40, "yes");
  uint64_t BrokerString = nn_model_getBrokerString(a1, (char *)v41, (uint64_t)"nnphrase_", 0x100uLL);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  uint64_t v23 = fi_init(a2, a3, a5, a6, &v37, 0, (uint64_t)v41, (uint64_t)"FINN", 1031, 0);
  if ((v23 & 0x80000000) != 0)
  {
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v25 = "load FI model failed";
    goto LABEL_10;
  }
  if (!v17)
  {
    uint64_t v26 = *(void *)(a1 + 8);
    if (v18)
    {
      uint64_t v27 = (uint64_t **)heap_Alloc(v26, 16);
      if (v27)
      {
        uint64_t v17 = v27;
        *uint64_t v27 = v37;
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v33 = (uint64_t **)heap_Alloc(v26, 8);
      if (v33)
      {
        uint64_t v17 = v33;
        *uint64_t v33 = v37;
        goto LABEL_23;
      }
    }
    uint64_t v23 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v28, v29, v30, v31, v35);
    return v23;
  }
  if (!*v17 || (uint64_t v23 = fi_deinit(a1, a4, *v17), (v23 & 0x80000000) == 0))
  {
    if (*a10 || (v32 = v17[1]) == 0 || (uint64_t v23 = fi_deinit(a1, a4, v32), (v23 & 0x80000000) == 0))
    {
      unsigned __int16 *v17 = v37;
      if (!v18) {
        goto LABEL_23;
      }
LABEL_14:
      uint64_t BrokerString = nn_model_getBrokerString(a1, (char *)v41, (uint64_t)"nnword_", 0x100uLL);
      if ((BrokerString & 0x80000000) == 0)
      {
        uint64_t v23 = fi_init(a2, a3, a5, a6, &v36, 0, (uint64_t)v41, (uint64_t)"FINN", 1031, 0);
        if ((v23 & 0x80000000) == 0)
        {
          v17[1] = v36;
LABEL_23:
          *a10 = v18 == 0;
          *a11 = v17;
          return v23;
        }
        uint64_t v24 = *(void *)(a1 + 32);
        uint64_t v25 = "load FI pw model failed";
LABEL_10:
        log_OutText(v24, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v25, v20, v21, v22, v35);
        return v23;
      }
      return BrokerString;
    }
  }
  return v23;
}

uint64_t releaseEmbedding(uint64_t a1, uint64_t *a2, void *a3, _DWORD *a4)
{
  if (!*(void *)a1)
  {
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = (*(uint64_t (**)(void, void))(*(void *)a1 + 24))(*a3, a3[1]);
  if ((v8 & 0x80000000) == 0)
  {
    if (!*a4
      || (uint64_t v8 = (*(uint64_t (**)(void, void))(*(void *)a1 + 24))(a3[2], a3[3]), (v8 & 0x80000000) == 0))
    {
      *(void *)a1 = 0;
LABEL_7:
      *a2 = safeh_GetNullHandle();
      a2[1] = v9;
      *a4 = 1;
    }
  }
  return v8;
}

uint64_t releaseFIModel(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  if (!*a4)
  {
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  if (!*(void *)v5)
  {
    uint64_t v8 = 0;
    if (!a3) {
      goto LABEL_8;
    }
LABEL_10:
    heap_Free(*(void **)(a1 + 8), v5);
    return v8;
  }
  uint64_t v8 = fi_deinit(a1, a2, *(uint64_t **)v5);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  if (a3) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v9 = *(uint64_t **)(v5 + 8);
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v8 = fi_deinit(a1, a2, v9);
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  return v8;
}

void *setbndfromTN(void *result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)a2)
    {
      uint64_t v5 = *(unsigned __int16 *)(a3 + 1072);
      if (*(_WORD *)(a3 + 1072))
      {
        uint64_t v6 = 0;
        unsigned int v7 = 0;
        unsigned int v8 = *(unsigned __int16 *)(a2 + 4);
        uint64_t v9 = *(void *)(a3 + 1064);
        uint64_t v10 = (_DWORD *)(v9 + 112);
        do
        {
          if (v7 < v8 && *(_DWORD *)(*(void *)(a2 + 8) + 4 * v7) == *((unsigned __int16 *)v10 - 48))
          {
            if (v6)
            {
              unsigned int v11 = *(unsigned __int16 *)(*(void *)(a2 + 16) + 2 * v7);
              *(_DWORD *)(v9 + 184 * (v6 - 1) + 112) = v11 > 2;
              if (v11 == 4) {
                *(_DWORD *)(v9 + 184 * (v6 - 1) + 100) = 1;
              }
            }
            ++v7;
          }
          else
          {
            *uint64_t v10 = 0;
          }
          ++v6;
          v10 += 46;
        }
        while (v5 != v6);
      }
      uint64_t v12 = *(void *)(a2 + 8);
      if (v12) {
        heap_Free((void *)result[1], v12);
      }
      uint64_t v13 = *(void *)(a2 + 16);
      if (v13) {
        heap_Free((void *)v4[1], v13);
      }
    }
    uint64_t v14 = (void *)v4[1];
    return heap_Free(v14, a2);
  }
  return result;
}

uint64_t last_POS(uint64_t result, void *a2, unsigned int a3, const char **a4, unsigned int a5)
{
  if (!result) {
    return result;
  }
  uint64_t v6 = 0;
  for (uint64_t i = *(void *)(*(void *)(*a2 + 224 * a3 + 16) + 8) + 1; *(unsigned char *)(i - 1) == 45; ++i)
  {
    uint64_t v6 = (const char *)i;
LABEL_7:
    ;
  }
  if (*(unsigned char *)(i - 1)) {
    goto LABEL_7;
  }
  if (v6) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = *(const char **)(*(void *)(*a2 + 224 * a3 + 16) + 8);
  }
  if (!a5) {
    return 0;
  }
  uint64_t v9 = a5;
  while (strcmp(*a4, v8))
  {
    ++a4;
    if (!--v9) {
      return 0;
    }
  }
  return 1;
}

uint64_t first_POS(uint64_t a1, void *a2, unsigned int a3, const char **a4, int a5)
{
  LODWORD(v5) = a5;
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = strlen(*(const char **)(*(void *)(*a2 + 224 * a3 + 16) + 8));
  uint64_t v12 = heap_Alloc(v10, (v11 + 1));
  if (!v12) {
    return 0;
  }
  uint64_t v13 = (const char *)v12;
  unsigned __int16 v14 = 0;
  for (uint64_t i = *(unsigned char **)(*(void *)(*a2 + 224 * a3 + 16) + 8); ; ++i)
  {
    int v16 = *i;
    if (!*i || v16 == 45) {
      break;
    }
    uint64_t v17 = v14++;
    *(unsigned char *)(v12 + v17) = v16;
  }
  *(unsigned char *)(v12 + v14) = 0;
  if (v5)
  {
    uint64_t v5 = v5;
    while (strcmp(v13, *a4))
    {
      ++a4;
      if (!--v5) {
        goto LABEL_10;
      }
    }
    uint64_t v18 = 1;
  }
  else
  {
LABEL_10:
    uint64_t v18 = 0;
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v13);
  return v18;
}

uint64_t has_POS(uint64_t a1, void *a2, unsigned int a3, const char **a4, unsigned int a5)
{
  uint64_t result = 0;
  if (a1 && a5)
  {
    unsigned int v8 = *(char **)(*(void *)(*a2 + 224 * a3 + 16) + 8);
    uint64_t v9 = a5;
    while (!strstr(v8, *a4))
    {
      ++a4;
      if (!--v9) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t first_character(uint64_t result, void *a2, unsigned int a3, const char **a4, int a5)
{
  if (result)
  {
    LODWORD(v5) = a5;
    utf8_getUTF8Char(**(void **)(*a2 + 224 * a3 + 16), 0, __s2);
    if (v5)
    {
      uint64_t v5 = v5;
      while (strcmp(*a4, __s2))
      {
        ++a4;
        if (!--v5) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t last_character(uint64_t result, void *a2, unsigned int a3, const char **a4, int a5)
{
  __int16 v15 = 0;
  *(_DWORD *)__s2 = 0;
  if (result)
  {
    LODWORD(v5) = a5;
    unsigned int v7 = **(const char ***)(*a2 + 224 * a3 + 16);
    int v8 = strlen(v7);
    int v9 = v8 - utf8_GetCurrentUtf8Offset((unint64_t)v7, v8 - 1);
    int v10 = strlen(v7);
    int CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v7, v10 - 1);
    if (v9 >= (int)Utf8_LengthInBytes((unsigned __int8 *)&v7[CurrentUtf8Offset], 1))
    {
      int v12 = strlen(v7);
      unsigned int v13 = utf8_GetCurrentUtf8Offset((unint64_t)v7, v12 - 1);
      utf8_getUTF8Char((uint64_t)v7, v13, __s2);
    }
    if (v5)
    {
      uint64_t v5 = v5;
      while (strcmp(*a4, __s2))
      {
        ++a4;
        if (!--v5) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t initPhrasingRuleStruct(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_WORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 10) = a3;
  uint64_t v4 = heap_Calloc(*(void **)(a1 + 8), a3, 16);
  *(void *)a2 = v4;
  if (v4) {
    return 0;
  }
  else {
    return 2315264010;
  }
}

uint64_t addPhrasingRule(uint64_t a1, uint64_t *a2, const char *a3)
{
  unsigned __int16 v6 = 1;
  for (uint64_t i = a3; *i == 94; ++i)
  {
    ++v6;
LABEL_6:
    ;
  }
  if (*i) {
    goto LABEL_6;
  }
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), v6, 40);
  uint64_t v9 = *a2;
  uint64_t v10 = *((unsigned __int16 *)a2 + 4);
  *(void *)(*a2 + 16 * v10) = v8;
  if (!v8) {
    return 2315264010;
  }
  *(_WORD *)(v9 + 16 * v10 + 8) = v6;
  uint64_t result = parseOneRule(a1, v8, v6, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    ++*((_WORD *)a2 + 4);
  }
  return result;
}

uint64_t parseOneRule(uint64_t a1, uint64_t a2, unsigned int a3, const char *a4)
{
  for (unsigned __int16 i = 0; a4[i] != 45 || a4[i + 1] != 45 || a4[i + 2] != 62; ++i)
    ;
  a4[i] = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a3;
  while (2)
  {
    uint64_t v9 = a4 - 1;
    do
    {
      int v11 = *(unsigned __int8 *)++v9;
      int v10 = v11;
    }
    while (v11 == 32);
    int v12 = v9;
    while (v10 != 95)
    {
      int v13 = *(unsigned __int8 *)++v12;
      int v10 = v13;
    }
    const char *v12 = 0;
    *(_WORD *)(a2 + 40 * v7 + 8) = atoi(v9);
    do
    {
      int v15 = *(unsigned __int8 *)++v12;
      int v14 = v15;
    }
    while (v15 == 32);
    int v16 = v12;
    if (v14 != 40)
    {
      int v16 = v12;
      do
        int v17 = *(unsigned __int8 *)++v16;
      while (v17 != 40);
    }
    uint64_t v18 = (void *)(a2 + 40 * v7);
    *int v16 = 0;
    if (!strcmp(v12, "last-pos")) {
      *uint64_t v18 = last_POS;
    }
    if (!strcmp(v12, "first-pos")) {
      *uint64_t v18 = first_POS;
    }
    if (!strcmp(v12, "has-pos")) {
      *uint64_t v18 = has_POS;
    }
    if (!strcmp(v12, "first-character")) {
      *uint64_t v18 = first_character;
    }
    if (!strcmp(v12, "last-character")) {
      *uint64_t v18 = last_character;
    }
    uint64_t v19 = a2 + 40 * v7;
    *(_WORD *)(v19 + 32) = 1;
    uint64_t v20 = (_WORD *)(v19 + 32);
    uint64_t v21 = v16;
    do
    {
      int v23 = *(unsigned __int8 *)++v16;
      int v22 = v23;
      ++v21;
    }
    while (v23 == 32);
    uint64_t v24 = 0;
    int v25 = 1;
    while (v22 == 124)
    {
      *uint64_t v20 = ++v25;
LABEL_35:
      int v22 = v16[++v24];
    }
    if (v22 != 41) {
      goto LABEL_35;
    }
    v16[v24] = 0;
    uint64_t v26 = &v16[v24 + 1];
    uint64_t v27 = (char *)heap_Alloc(*(void *)(a1 + 8), (unsigned __int16)(v24 + 2));
    uint64_t v28 = a2 + 40 * v7;
    *(void *)(v28 + 16) = v27;
    uint64_t v29 = (void *)(v28 + 16);
    if (v27)
    {
      strcpy(v27, v16);
      uint64_t v30 = (void *)heap_Alloc(*(void *)(a1 + 8), 8 * (unsigned __int16)*v20);
      uint64_t v31 = a2 + 40 * v7;
      *(void *)(v31 + 24) = v30;
      uint64_t v32 = (void *)(v31 + 24);
      if (v30)
      {
        *uint64_t v30 = *v29;
        if ((unsigned __int16)*v20 >= 2u)
        {
          unint64_t v33 = 1;
          do
          {
            char v34 = (void *)(*v32 + 8 * v33);
            for (uint64_t j = (unsigned char *)*(v34 - 1); ; uint64_t j = v36 + 1)
            {
              *char v34 = j;
              char v34 = (void *)(*v32 + 8 * v33);
              __int16 v36 = (unsigned char *)*v34;
              if (*(unsigned char *)*v34 == 124) {
                break;
              }
            }
            *char v34 = v36 + 1;
            *__int16 v36 = 0;
            ++v33;
          }
          while (v33 < (unsigned __int16)*v20);
        }
        while (1)
        {
          int v37 = *(unsigned __int8 *)v26;
          if (!*v26 || v37 == 94) {
            break;
          }
          ++v26;
        }
        if (v37 == 94) {
          a4 = v26 + 1;
        }
        else {
          a4 = v26;
        }
        if (++v7 == v8) {
          return 0;
        }
        continue;
      }
    }
    return 2315264010;
  }
}

uint64_t releasePhrasingRuleStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (v3)
  {
    unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
    if (*(_WORD *)(a2 + 10))
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *(void *)a2 + 16 * v6;
        uint64_t v9 = *(void *)v8;
        if (*(void *)v8)
        {
          if (*(_WORD *)(v8 + 8))
          {
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            do
            {
              uint64_t v12 = *(void *)(*(void *)v8 + v10 + 16);
              if (v12)
              {
                heap_Free(*(void **)(a1 + 8), v12);
                uint64_t v7 = *(void *)a2;
              }
              uint64_t v13 = *(void *)(*(void *)(v7 + 16 * v6) + v10 + 24);
              if (v13)
              {
                heap_Free(*(void **)(a1 + 8), v13);
                uint64_t v7 = *(void *)a2;
              }
              ++v11;
              uint64_t v8 = v7 + 16 * v6;
              v10 += 40;
            }
            while (v11 < *(unsigned __int16 *)(v8 + 8));
            uint64_t v9 = *(void *)v8;
          }
          heap_Free(*(void **)(a1 + 8), v9);
          unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
        }
        ++v6;
      }
      while (v6 < v5);
      uint64_t v3 = *(void *)a2;
    }
    heap_Free(*(void **)(a1 + 8), v3);
  }
  *(_WORD *)(a2 + 10) = 0;
  *(void *)a2 = 0;
  return 0;
}

uint64_t applyRules(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  if (!*((_WORD *)a4 + 5)) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *a4;
  while (*(_WORD *)(v9 + 16 * v8 + 8))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    int v12 = 1;
    do
    {
      uint64_t v13 = *(void *)(v9 + 16 * v8) + v10;
      if (*(unsigned __int16 *)(v13 + 8) + a3 >= *(unsigned __int16 *)(a2 + 8))
      {
        int v12 = 0;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, void, void, void))v13)(a1, a2, (unsigned __int16)(*(_WORD *)(v13 + 8) + a3), *(void *)(v13 + 24), *(unsigned __int16 *)(v13 + 32)) != 1)int v12 = 0; {
        uint64_t v9 = *a4;
        }
      }
      ++v11;
      v10 += 40;
    }
    while (v11 < *(unsigned __int16 *)(v9 + 16 * v8 + 8));
    if (v12 == 1) {
      break;
    }
    if (++v8 >= (unint64_t)*((unsigned __int16 *)a4 + 5)) {
      return 0;
    }
  }
  return 1;
}

uint64_t setPhraseProminences(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO setPhraseProminences()", a6, a7, a8, 0);
  uint64_t v30 = (uint64_t *)(a1 + 736);
  unsigned __int16 v12 = *(_WORD *)(a1 + 744) - 1;
  if ((v12 & 0x8000) != 0)
  {
LABEL_19:
    uint64_t v27 = *(unsigned int *)(a1 + 1108);
    uint64_t v28 = *(char **)(a1 + 1096);
    return printLevel(v27, (const char **)(a1 + 1088), v28, (_WORD *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, (uint64_t)v30, (uint64_t)"AFTER SET PHRASE PROMINENCE");
  }
  else
  {
    while (1)
    {
      int v13 = v12;
      uint64_t v14 = v12;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"processing (phrase) node %d", v9, v10, v11, v12);
      uint64_t result = printNode(*(_DWORD *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (_WORD *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, (unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v14), v13);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t v16 = *v30;
      int v17 = (__int16 *)(*v30 + 32 * v14);
      int v18 = (__int16)(v17[1] - 1);
      if (v18 >= *v17)
      {
        int v19 = 0;
        int v20 = *(unsigned __int16 *)(a1 + 304);
        uint64_t v29 = v14;
        do
        {
          uint64_t v21 = (__int16)v18;
          if (v20)
          {
            for (__int16 i = 0; i < v20; ++i)
            {
              uint64_t v23 = *(void *)(a1 + 672);
              if (!strcmp((const char *)(*(void *)(a1 + 536)+ *(unsigned int *)(*(void *)(a1 + 544)+ 4 * *(unsigned int *)(*(void *)(a1 + 296) + 4 * i))), *(const char **)(*(void *)(v23 + 224 * (int)v21 + 16) + 8 * *(unsigned __int16 *)(a1 + 26))))
              {
                BOOL v24 = v19 == 0;
                int v19 = 1;
                if (v24) {
                  char v25 = 2;
                }
                else {
                  char v25 = 1;
                }
                if (v24) {
                  uint64_t v26 = "set word[%d] %s to _MAINACCENT";
                }
                else {
                  uint64_t v26 = "set word[%d] %s to _ACCENTED";
                }
                *(unsigned char *)(v23 + 224 * (int)v21 + 72) = v25;
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v26, v9, v10, v11, v21);
              }
              int v20 = *(unsigned __int16 *)(a1 + 304);
            }
            uint64_t v14 = v29;
            uint64_t v16 = *v30;
          }
          int v18 = (__int16)(v21 - 1);
        }
        while (v18 >= *(__int16 *)(v16 + 32 * v14));
      }
      unsigned __int16 v12 = v14 - 1;
      if ((__int16)v14 < 1) {
        goto LABEL_19;
      }
    }
  }
  return result;
}

uint64_t setCompoundProminences(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = 0;
  int v46 = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO setCompoundProminences()", a6, a7, a8, 0);
  unsigned __int16 v12 = *(_WORD *)(a1 + 744) - 1;
  if ((v12 & 0x8000) == 0)
  {
    uint64_t v42 = (_WORD *)(a1 + 1104);
    uint64_t v43 = (const char **)(a1 + 1088);
    int v13 = (void *)(a1 + 672);
    uint64_t v41 = a1 + 8;
    memset(v45, 0, sizeof(v45));
    __int16 v44 = 0;
    while (1)
    {
      int v14 = v12;
      uint64_t v15 = v12;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"processing (phrase) node %d", v9, v10, v11, v12);
      uint64_t matched = printNode(*(_DWORD *)(a1 + 1108), v43, *(char **)(a1 + 1096), v42, (void *)(a1 + 672), v41, (unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v15), v14);
      if ((matched & 0x80000000) != 0) {
        return matched;
      }
      int v17 = (__int16 *)(*(void *)(a1 + 736) + 32 * v15);
      int v18 = (__int16)(v17[1] - 1);
      int v19 = *v17;
      if (v18 >= v19) {
        break;
      }
LABEL_5:
      unsigned __int16 v12 = v15 - 1;
      if ((__int16)v15 < 1) {
        return matched;
      }
    }
    while (1)
    {
      uint64_t v20 = *(void *)(*v13 + 224 * (__int16)v18 + 56);
      if (v20)
      {
        uint64_t v21 = *(unsigned __int16 *)(a1 + 32);
        uint64_t v22 = v20 + 32 * v21;
        if (*(_DWORD *)(v22 + 4) == 1)
        {
          uint64_t v23 = *(unsigned __int16 *)(v22 + 8);
          if (v23 >= (unsigned __int16)v19
            && !strcmp(*(const char **)(*(void *)(*v13 + 224 * *(unsigned __int16 *)(v22 + 8) + 56) + 32 * v21 + 16), "NP"))
          {
            break;
          }
        }
      }
LABEL_13:
      int v18 = (__int16)(v18 - 1);
      int v19 = *(__int16 *)(*(void *)(a1 + 736) + 32 * v15);
      if (v18 < v19) {
        goto LABEL_5;
      }
    }
    int v24 = (__int16)v18;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  processing (NP phrase) node %d,%d", v9, v10, v11, v23);
    uint64_t v47 = 0;
    int v46 = 0;
    if ((__int16)v18 < (int)v23)
    {
LABEL_12:
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    no rules fire", v25, v26, v27, 0);
      goto LABEL_13;
    }
    int v28 = v18;
    while (1)
    {
      unsigned int v29 = (unsigned __int16)v28;
      int v30 = v28 - 1;
      BOOL v31 = *(unsigned char *)(*v13 + 224 * (unsigned __int16)v28 + 72) != 2 || (__int16)v28 < 1;
      if (!v31 && v24 > (int)v23 && *(unsigned char *)(*v13 + 224 * (unsigned __int16)(v28 - 1) + 72) == 1)
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    found PRM pattern word[%d]=%s PRM=%d word[%d]=%s PRM=%d : apply rules", v25, v26, v27, (unsigned __int16)(v28 - 1));
        *(_WORD *)&v45[4] = v28;
        *(_DWORD *)uint64_t v45 = 1;
        *(_DWORD *)&v45[6] = 0;
        if (*(_WORD *)(a1 + 320)) {
          break;
        }
      }
LABEL_24:
      int v24 = (__int16)v30;
      int v28 = v30;
      if ((__int16)v30 < (int)v23) {
        goto LABEL_12;
      }
    }
    uint64_t v33 = 0;
    __int16 v34 = 0;
    while (1)
    {
      uint64_t v35 = *(void *)(a1 + 312);
      int v36 = v34;
      uint64_t v37 = *(void *)(v35 + 24 * v34);
      if (v37)
      {
        uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"LEFT", v43, v42, *(char **)(a1 + 1096), v41, a1 + 672, v37, (uint64_t)v45, (int *)&v47 + 1, (uint64_t)&v44, 1u);
        if ((matched & 0x80000000) != 0) {
          return matched;
        }
        if (HIDWORD(v47) != 1) {
          goto LABEL_43;
        }
        uint64_t v35 = *(void *)(a1 + 312);
      }
      else
      {
        HIDWORD(v47) = 1;
      }
      uint64_t v38 = *(void *)(v35 + 24 * v36 + 8);
      if (v38)
      {
        uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"CUR", v43, v42, *(char **)(a1 + 1096), v41, a1 + 672, v38, (uint64_t)v45, (int *)&v47, (uint64_t)&v44, 0);
        if ((matched & 0x80000000) != 0) {
          return matched;
        }
        if (v47 != 1) {
          goto LABEL_43;
        }
        uint64_t v35 = *(void *)(a1 + 312);
      }
      else
      {
        LODWORD(v47) = 1;
      }
      uint64_t v26 = *(void *)(v35 + 24 * v36 + 16);
      if (v26)
      {
        uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"RIGHT", v43, v42, *(char **)(a1 + 1096), v41, a1 + 672, v26, (uint64_t)v45, &v46, (uint64_t)&v44, 2u);
        if ((matched & 0x80000000) != 0) {
          return matched;
        }
      }
      else
      {
        int v46 = 1;
      }
LABEL_43:
      if (v47 == 0x100000001 && v46 == 1)
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  stress shift rule %d FIRED", v25, v26, v27, v33);
        uint64_t v39 = *(void *)(a1 + 672);
        *(unsigned char *)(v39 + 224 * v29 + 72) = 1;
        *(unsigned char *)(v39 + 224 * (unsigned __int16)v30 + 72) = 2;
        goto LABEL_13;
      }
      __int16 v34 = v36 + 1;
      uint64_t v33 = (__int16)(v36 + 1);
      if ((int)v33 >= *(unsigned __int16 *)(a1 + 320)) {
        goto LABEL_24;
      }
    }
  }
  return 0;
}

uint64_t getProminence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = setPhraseProminences(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = setCompoundProminences(a1, v10, v11, v12, v13, v14, v15, v16);
    if ((result & 0x80000000) == 0)
    {
      int v17 = *(_DWORD *)(a1 + 1108);
      int v18 = *(char **)(a1 + 1096);
      return printAsString(v17, (const char **)(a1 + 1088), v18, (_WORD *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, a1 + 736, (uint64_t)"FEPHRRES: ");
    }
  }
  return result;
}

uint64_t logPANDPRULE_TRule(uint64_t result, const char **a2, _WORD *a3, char *__s, uint64_t *a5, uint64_t **a6)
{
  if (result)
  {
    if (!*a6 || (uint64_t result = logPANDPCONTEXT_TRule(a2, a3, __s, a5, *a6), (result & 0x80000000) == 0))
    {
      *(_DWORD *)unsigned int __s = 2121504;
      uint64_t result = add2Str(*a5, a2, a3, __s);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v11 = a6[1];
        if (!v11 || (uint64_t result = logPANDPCONTEXT_TRule(a2, a3, __s, a5, v11), (result & 0x80000000) == 0))
        {
          *(_DWORD *)unsigned int __s = 2121504;
          uint64_t result = add2Str(*a5, a2, a3, __s);
          if ((result & 0x80000000) == 0)
          {
            uint64_t v12 = a6[2];
            if (v12)
            {
              return logPANDPCONTEXT_TRule(a2, a3, __s, a5, v12);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t logPANDPCONTEXT_TRule(const char **a1, _WORD *a2, char *__s, uint64_t *a4, uint64_t *a5)
{
  if (*((_WORD *)a5 + 4))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *a5;
      uint64_t v13 = (unsigned __int16 *)(*a5 + v10);
      if (*((unsigned char *)v13 + 4)) {
        break;
      }
LABEL_17:
      uint64_t result = add2Str(*a4, a1, a2, "[");
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = add2Str(*a4, a1, a2, (char *)(a4[66] + *(unsigned int *)(a4[67] + 4 * *(unsigned int *)(a4[8] + 8 * *v13 + 4))));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      sprintf(__s, " %d(", *(unsigned __int16 *)(v12 + v10 + 2));
      uint64_t result = add2Str(*a4, a1, a2, __s);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = add2Str(*a4, a1, a2, (char *)(a4[61] + *(unsigned int *)(a4[62] + 4 * *(unsigned __int16 *)(v12 + v10 + 2))));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = add2Str(*a4, a1, a2, ")] ");
LABEL_22:
      if ((result & 0x80000000) == 0)
      {
        ++v11;
        v10 += 6;
        if (v11 < *((unsigned __int16 *)a5 + 4)) {
          continue;
        }
      }
      return result;
    }
    if (v13[2])
    {
      *(_WORD *)unsigned int __s = 33;
    }
    else
    {
      if ((v13[2] & 2) != 0)
      {
        int v14 = 0;
        strcpy(__s, "HASCOMMA ");
        goto LABEL_15;
      }
      if ((v13[2] & 4) != 0)
      {
        int v14 = 0;
        strcpy(__s, "DIRECTIVE_MOVE2NEXT ");
        goto LABEL_15;
      }
      if ((v13[2] & 8) != 0)
      {
        int v14 = 0;
        strcpy(__s, "ISLASTINPHR ");
        goto LABEL_15;
      }
      if ((v13[2] & 0x10) != 0)
      {
        int v14 = 0;
        strcpy(__s, "ISFIRSTINPHR ");
LABEL_15:
        uint64_t result = add2Str(*a4, a1, a2, __s);
        if (!v14 || (result & 0x80000000) != 0) {
          goto LABEL_22;
        }
        goto LABEL_17;
      }
    }
    int v14 = 1;
    goto LABEL_15;
  }
  return 0;
}

void *freePANDPRULE_TRule(void *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  if (*a2)
  {
    if (*(_WORD *)(v4 + 8))
    {
      heap_Free((void *)result[1], *(void *)v4);
      *(void *)uint64_t v4 = 0;
      uint64_t v4 = *a2;
    }
    uint64_t result = heap_Free((void *)v3[1], v4);
    *a2 = 0;
  }
  uint64_t v5 = a2[1];
  if (v5)
  {
    if (*(_WORD *)(v5 + 8))
    {
      heap_Free((void *)v3[1], *(void *)v5);
      *(void *)uint64_t v5 = 0;
      uint64_t v5 = a2[1];
    }
    uint64_t result = heap_Free((void *)v3[1], v5);
    a2[1] = 0;
  }
  uint64_t v6 = a2[2];
  if (v6)
  {
    if (*(_WORD *)(v6 + 8))
    {
      heap_Free((void *)v3[1], *(void *)v6);
      *(void *)uint64_t v6 = 0;
      uint64_t v6 = a2[2];
    }
    uint64_t result = heap_Free((void *)v3[1], v6);
    a2[2] = 0;
  }
  return result;
}

uint64_t freePandPRules(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[62];
  if (v10)
  {
    heap_Free(*(void **)(v9 + 8), v10);
    a1[62] = 0;
  }
  unint64_t v11 = (void *)a1[64];
  if (v11)
  {
    uint64_t v12 = ssftriff_reader_ReleaseChunkData(v11, v10, a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    a1[64] = 0;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = a1[67];
  if (v13)
  {
    heap_Free(*(void **)(v9 + 8), v13);
    a1[67] = 0;
  }
  int v14 = (void *)a1[69];
  if (v14)
  {
    uint64_t v12 = ssftriff_reader_ReleaseChunkData(v14, v13, a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    a1[69] = 0;
  }
  uint64_t v15 = a1[57];
  if (v15)
  {
    heap_Free(*(void **)(v9 + 8), v15);
    a1[57] = 0;
  }
  uint64_t v16 = (void *)a1[59];
  if (v16)
  {
    uint64_t v12 = ssftriff_reader_ReleaseChunkData(v16, v15, a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    a1[59] = 0;
  }
  uint64_t v17 = a1[8];
  if (v17)
  {
    heap_Free(*(void **)(v9 + 8), v17);
    a1[8] = 0;
    *((_WORD *)a1 + 36) = 0;
  }
  if (*((_WORD *)a1 + 44))
  {
    unint64_t v18 = 0;
    uint64_t v19 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v9, (uint64_t *)(a1[10] + v19));
      ++v18;
      v19 += 32;
    }
    while (v18 < *((unsigned __int16 *)a1 + 44));
  }
  uint64_t v20 = a1[10];
  if (v20)
  {
    heap_Free(*(void **)(v9 + 8), v20);
    a1[10] = 0;
  }
  *((_WORD *)a1 + 44) = 0;
  if (*((_WORD *)a1 + 52))
  {
    unint64_t v21 = 0;
    uint64_t v22 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v9, (uint64_t *)(a1[12] + v22));
      ++v21;
      v22 += 32;
    }
    while (v21 < *((unsigned __int16 *)a1 + 52));
  }
  uint64_t v23 = a1[12];
  if (v23)
  {
    heap_Free(*(void **)(v9 + 8), v23);
    a1[12] = 0;
  }
  *((_WORD *)a1 + 52) = 0;
  if (*((_WORD *)a1 + 60))
  {
    unint64_t v24 = 0;
    uint64_t v25 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v9, (uint64_t *)(a1[14] + v25));
      ++v24;
      v25 += 32;
    }
    while (v24 < *((unsigned __int16 *)a1 + 60));
  }
  uint64_t v26 = a1[14];
  if (v26)
  {
    heap_Free(*(void **)(v9 + 8), v26);
    a1[14] = 0;
  }
  *((_WORD *)a1 + 60) = 0;
  if (*((_WORD *)a1 + 72))
  {
    unint64_t v27 = 0;
    do
    {
      heap_Free(*(void **)(v9 + 8), *(void *)(a1[16] + 8 * v27));
      *(void *)(a1[16] + 8 * v27++) = 0;
    }
    while (v27 < *((unsigned __int16 *)a1 + 72));
  }
  *((_WORD *)a1 + 72) = 0;
  uint64_t v28 = a1[17];
  if (v28)
  {
    heap_Free(*(void **)(v9 + 8), v28);
    a1[17] = 0;
  }
  uint64_t v29 = a1[16];
  if (v29)
  {
    heap_Free(*(void **)(v9 + 8), v29);
    a1[16] = 0;
  }
  if (*((_WORD *)a1 + 80))
  {
    unint64_t v30 = 0;
    uint64_t v31 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v9, (uint64_t *)(a1[19] + v31));
      ++v30;
      v31 += 32;
    }
    while (v30 < *((unsigned __int16 *)a1 + 80));
  }
  uint64_t v32 = a1[19];
  if (v32)
  {
    heap_Free(*(void **)(v9 + 8), v32);
    a1[19] = 0;
  }
  *((_WORD *)a1 + 80) = 0;
  if (*((_WORD *)a1 + 92))
  {
    unint64_t v33 = 0;
    uint64_t v34 = a1[22];
    do
    {
      freePANDPRULE_TRule((void *)v9, *(uint64_t **)(v34 + 40 * v33));
      uint64_t v35 = a1[22];
      uint64_t v36 = *(void *)(v35 + 40 * v33);
      if (v36)
      {
        heap_Free(*(void **)(v9 + 8), v36);
        uint64_t v35 = a1[22];
        *(void *)(v35 + 40 * v33) = 0;
      }
      if (*(_WORD *)(v35 + 40 * v33 + 16))
      {
        unint64_t v37 = 0;
        uint64_t v38 = 8;
        do
        {
          freePANDPRULE_TRule((void *)v9, (uint64_t *)(*(void *)(v35 + 40 * v33 + 8) + v38));
          ++v37;
          uint64_t v35 = a1[22];
          v38 += 32;
        }
        while (v37 < *(unsigned __int16 *)(v35 + 40 * v33 + 16));
      }
      freePANDPRULE_TRule((void *)v9, (uint64_t *)(*(void *)(v35 + 40 * v33 + 8) + 8));
      uint64_t v34 = a1[22];
      if (*(void *)(v34 + 40 * v33 + 8))
      {
        heap_Free(*(void **)(v9 + 8), *(void *)(v34 + 40 * v33 + 8));
        uint64_t v34 = a1[22];
        *(void *)(v34 + 40 * v33 + 8) = 0;
      }
      unint64_t v39 = v34 + 40 * v33;
      *(_WORD *)(v39 + 16) = 0;
      if (*(_WORD *)(v39 + 32))
      {
        uint64_t v40 = 0;
        unint64_t v41 = 0;
        do
        {
          freePANDPRULE_TRule((void *)v9, (uint64_t *)(*(void *)(v34 + 40 * v33 + 24) + v40));
          ++v41;
          uint64_t v34 = a1[22];
          v40 += 32;
        }
        while (v41 < *(unsigned __int16 *)(v34 + 40 * v33 + 32));
      }
      if (*(void *)(v34 + 40 * v33 + 24))
      {
        heap_Free(*(void **)(v9 + 8), *(void *)(v34 + 40 * v33 + 24));
        uint64_t v34 = a1[22];
        *(void *)(v34 + 40 * v33 + 24) = 0;
      }
      *(_WORD *)(v34 + 40 * v33++ + 32) = 0;
    }
    while (v33 < *((unsigned __int16 *)a1 + 92));
  }
  else
  {
    uint64_t v34 = a1[22];
    if (!v34) {
      goto LABEL_64;
    }
  }
  heap_Free(*(void **)(v9 + 8), v34);
  a1[22] = 0;
LABEL_64:
  *((_WORD *)a1 + 92) = 0;
  uint64_t v42 = a1[25];
  if (v42)
  {
    heap_Free(*(void **)(v9 + 8), v42);
    a1[25] = 0;
  }
  *((_WORD *)a1 + 104) = 0;
  uint64_t v43 = a1[28];
  if (v43)
  {
    heap_Free(*(void **)(v9 + 8), v43);
    a1[28] = 0;
  }
  *((_WORD *)a1 + 116) = 0;
  uint64_t v44 = a1[30];
  if (v44)
  {
    heap_Free(*(void **)(v9 + 8), v44);
    a1[30] = 0;
  }
  *((_WORD *)a1 + 124) = 0;
  if (*((_WORD *)a1 + 132))
  {
    unint64_t v45 = 0;
    uint64_t v46 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v9, (uint64_t *)(a1[32] + v46));
      ++v45;
      v46 += 32;
    }
    while (v45 < *((unsigned __int16 *)a1 + 132));
  }
  *((_WORD *)a1 + 132) = 0;
  uint64_t v47 = a1[32];
  if (v47)
  {
    heap_Free(*(void **)(v9 + 8), v47);
    a1[32] = 0;
  }
  uint64_t v48 = a1[34];
  if (v48)
  {
    heap_Free(*(void **)(v9 + 8), v48);
    a1[34] = 0;
  }
  *((_WORD *)a1 + 140) = 0;
  uint64_t v49 = a1[4];
  if (v49)
  {
    heap_Free(*(void **)(v9 + 8), v49);
    a1[4] = 0;
  }
  *((_WORD *)a1 + 20) = 0;
  uint64_t v50 = a1[6];
  if (v50)
  {
    heap_Free(*(void **)(v9 + 8), v50);
    a1[6] = 0;
  }
  *((_WORD *)a1 + 28) = 0;
  uint64_t v51 = a1[36];
  if (v51)
  {
    heap_Free(*(void **)(v9 + 8), v51);
    a1[36] = 0;
  }
  uint64_t v52 = a1[38];
  if (v52)
  {
    if (*((_WORD *)a1 + 156))
    {
      uint64_t v53 = 0;
      unint64_t v54 = 0;
      do
      {
        freePANDPRULE_TRule((void *)v9, (uint64_t *)(a1[38] + v53));
        ++v54;
        v53 += 24;
      }
      while (v54 < *((unsigned __int16 *)a1 + 156));
      uint64_t v52 = a1[38];
    }
    *((_WORD *)a1 + 156) = 0;
    heap_Free(*(void **)(v9 + 8), v52);
    a1[38] = 0;
  }
  if (*((_WORD *)a1 + 160))
  {
    unint64_t v55 = 0;
    uint64_t v56 = a1[42];
    do
    {
      if (*(_WORD *)(v56 + 16 * v55))
      {
        uint64_t v57 = 0;
        unint64_t v58 = 0;
        do
        {
          freePANDPRULE_TRule((void *)v9, (uint64_t *)(*(void *)(v56 + 16 * v55 + 8) + v57));
          ++v58;
          uint64_t v56 = a1[42];
          v57 += 24;
        }
        while (v58 < *(unsigned __int16 *)(v56 + 16 * v55));
      }
      unint64_t v59 = v56 + 16 * v55;
      *(_WORD *)unint64_t v59 = 0;
      heap_Free(*(void **)(v9 + 8), *(void *)(v59 + 8));
      uint64_t v56 = a1[42];
      *(void *)(v56 + 16 * v55++ + 8) = 0;
    }
    while (v55 < *((unsigned __int16 *)a1 + 160));
    goto LABEL_97;
  }
  uint64_t v56 = a1[42];
  if (v56)
  {
LABEL_97:
    heap_Free(*(void **)(v9 + 8), v56);
    a1[42] = 0;
  }
  uint64_t v60 = a1[41];
  if (v60)
  {
    heap_Free(*(void **)(v9 + 8), v60);
    a1[41] = 0;
  }
  *((_WORD *)a1 + 160) = 0;
  if (*((_WORD *)a1 + 292))
  {
    unint64_t v61 = 0;
    do
    {
      heap_Free(*(void **)(v9 + 8), *(void *)(a1[71] + 8 * v61));
      *(void *)(a1[71] + 8 * v61++) = 0;
    }
    while (v61 < *((unsigned __int16 *)a1 + 292));
  }
  uint64_t v62 = a1[72];
  if (v62)
  {
    heap_Free(*(void **)(v9 + 8), v62);
    a1[72] = 0;
  }
  uint64_t v63 = a1[71];
  if (v63)
  {
    heap_Free(*(void **)(v9 + 8), v63);
    a1[71] = 0;
  }
  *((_WORD *)a1 + 292) = 0;
  if (*((_WORD *)a1 + 304))
  {
    unint64_t v64 = 0;
    do
    {
      heap_Free(*(void **)(v9 + 8), *(void *)(a1[74] + 8 * v64));
      *(void *)(a1[74] + 8 * v64++) = 0;
    }
    while (v64 < *((unsigned __int16 *)a1 + 304));
  }
  uint64_t v65 = a1[75];
  if (v65)
  {
    heap_Free(*(void **)(v9 + 8), v65);
    a1[75] = 0;
  }
  uint64_t v66 = a1[74];
  if (v66)
  {
    heap_Free(*(void **)(v9 + 8), v66);
    a1[74] = 0;
  }
  *((_WORD *)a1 + 304) = 0;
  if (*((_WORD *)a1 + 316))
  {
    unint64_t v67 = 0;
    do
    {
      heap_Free(*(void **)(v9 + 8), *(void *)(a1[77] + 8 * v67));
      *(void *)(a1[77] + 8 * v67++) = 0;
    }
    while (v67 < *((unsigned __int16 *)a1 + 316));
  }
  uint64_t v68 = a1[78];
  if (v68)
  {
    heap_Free(*(void **)(v9 + 8), v68);
    a1[78] = 0;
  }
  uint64_t v69 = a1[77];
  if (v69)
  {
    heap_Free(*(void **)(v9 + 8), v69);
    a1[77] = 0;
  }
  *((_WORD *)a1 + 316) = 0;
  if (*((_WORD *)a1 + 180))
  {
    unint64_t v70 = 0;
    do
    {
      heap_Free(*(void **)(v9 + 8), *(void *)(a1[43] + 8 * v70));
      *(void *)(a1[43] + 8 * v70++) = 0;
    }
    while (v70 < *((unsigned __int16 *)a1 + 180));
  }
  uint64_t v71 = a1[44];
  if (v71)
  {
    heap_Free(*(void **)(v9 + 8), v71);
    a1[44] = 0;
  }
  uint64_t v72 = a1[43];
  if (v72)
  {
    heap_Free(*(void **)(v9 + 8), v72);
    a1[43] = 0;
  }
  *((_WORD *)a1 + 180) = 0;
  uint64_t v73 = a1[81];
  if (v73)
  {
    heap_Free(*(void **)(v9 + 8), v73);
    a1[81] = 0;
  }
  uint64_t NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(a1[53], a1[54], NullHandle, v75))
  {
    nuance_pcre_DeInit((void *)a1[53], a1[54]);
    nuance_pcre_ObjClose(a1[53], a1[54]);
  }
  bzero(a1, 0x298uLL);
  return v12;
}

uint64_t do_pcre_exec(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!a3 || (uint64_t v9 = (_DWORD *)a6, a7 = a5, a6 = a4, a5 >= a4))
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"invalid arg for regex", a6, a7, a8, 0);
    return 2315264007;
  }
  *uint64_t v9 = 0;
  unsigned int v10 = nuance_pcre_exec(*(void **)(a1 + 424), *(void *)(a1 + 432), *(void *)(a1 + 448) + *(unsigned int *)(*(void *)(a1 + 456) + 4 * a2), 0, a3, a4, a5, 0, v22, 30);
  if ((v10 & 0x80000000) == 0)
  {
    if (v10)
    {
      uint64_t v11 = 0;
      *uint64_t v9 = 1;
      return v11;
    }
    return 0;
  }
  uint64_t v12 = nuance_pcre_ErrorToLhError(v10);
  uint64_t v11 = v12;
  if (v12 >> 20 != 2213) {
    return v11;
  }
  if ((v12 & 0x1FFF) == 0x14) {
    return 0;
  }
  if ((v12 & 0x1FFF) == 0xA)
  {
    uint64_t v17 = *(void *)(*(void *)a1 + 32);
    uint64_t v18 = 11002;
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v17 = *(void *)(*(void *)a1 + 32);
    unint64_t v21 = "lhError";
    uint64_t v19 = "%s%x";
    uint64_t v18 = 11027;
  }
  log_OutPublic(v17, (uint64_t)"FE_PHRASING", v18, v19, v13, v14, v15, v16, v21);
  return v11;
}

uint64_t getCompoundAccent(uint64_t a1, char *__s, _DWORD *a3, _WORD *a4, _WORD *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!__s) {
    return 2315264007;
  }
  *a3 = 0;
  uint64_t v10 = *(void *)(a1 + 648);
  int v11 = strlen(__s);
  unsigned int v12 = nuance_pcre_exec(*(void **)(a1 + 424), *(void *)(a1 + 432), v10, 0, __s, v11, 0, 0, &v24, 30);
  if ((v12 & 0x80000000) == 0)
  {
    if (v12)
    {
      uint64_t v13 = 0;
      *a3 = 1;
      *a4 = v24 + 1;
      *a5 = v25 - 1;
      return v13;
    }
    return 0;
  }
  uint64_t v14 = nuance_pcre_ErrorToLhError(v12);
  uint64_t v13 = v14;
  if (v14 >> 20 != 2213) {
    return v13;
  }
  if ((v14 & 0x1FFF) == 0x14) {
    return 0;
  }
  if ((v14 & 0x1FFF) == 0xA)
  {
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    uint64_t v20 = 11002;
    unint64_t v21 = 0;
  }
  else
  {
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    uint64_t v23 = "lhError";
    unint64_t v21 = "%s%x";
    uint64_t v20 = 11027;
  }
  log_OutPublic(v19, (uint64_t)"FE_PHRASING", v20, v21, v15, v16, v17, v18, v23);
  return v13;
}

uint64_t matchPANDPCONTEXT_TRule(uint64_t a1, const char **a2, _WORD *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t a10, unsigned int a11)
{
  int v25 = 1;
  *a9 = 0;
  *(_DWORD *)(a8 + 6) = 0;
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t matched = logPANDPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, (uint64_t *)a7);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"         %s %s", v17, v18, v19, a1);
    **a2 = 0;
  }
  else
  {
    uint64_t matched = 0;
  }
  if (*(_WORD *)(a7 + 8))
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t matched = matchREGEX_TRule((unsigned __int16 *)a5, a6, (unsigned __int16 *)(*(void *)a7 + v21), (unsigned __int16 *)a8, &v25, a10, a11, a8);
      if ((matched & 0x80000000) != 0) {
        break;
      }
      int v23 = v25;
      if (v25 != 1) {
        goto LABEL_11;
      }
      ++v22;
      v21 += 6;
      if (v22 >= *(unsigned __int16 *)(a7 + 8)) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    int v23 = 1;
LABEL_11:
    *a9 = v23;
  }
  return matched;
}

uint64_t matchREGEX_TRule(unsigned __int16 *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  uint64_t v10 = a5;
  int v51 = 0;
  int v15 = a4[2];
  unsigned __int16 v50 = a4[2];
  *a5 = 0;
  if (a1[4]) {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           regex %d", a6, a7, a8, a3[1]);
  }
  unsigned int v16 = *((unsigned __int8 *)a3 + 4);
  if (*((unsigned char *)a3 + 4))
  {
    if ((v16 & 4) != 0)
    {
      if (v8 == 2)
      {
        ++a4[4];
      }
      else if (v8 == 1)
      {
        ++a4[3];
      }
      if (a1[4]) {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           DIRECTIVE_MOVE2NEXT - window increased (ruleDef->left_window=%d ruleDef->right_window=%d)", a6, a7, a8, a4[3]);
      }
      uint64_t v24 = 0;
      goto LABEL_29;
    }
    uint64_t v48 = (_WORD *)a6;
    uint64_t v49 = v10;
    int v17 = (v16 >> 1) & 1;
    int v18 = (v16 >> 3) & 1;
    int v19 = v16 & 1;
    int v20 = (v16 >> 4) & 1;
  }
  else
  {
    uint64_t v48 = (_WORD *)a6;
    uint64_t v49 = v10;
    int v19 = 0;
    int v17 = 0;
    int v18 = 0;
    int v20 = 0;
  }
  if (a1[4] >= 2u)
  {
    int v21 = v19;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           ruleDef[domain=%s(%d) wordIdx=%d left_window=%d right_window=%d] defMapIdx=%s(%d) bNegateMatch=%d bHasComma=%d", a6, a7, a8, (uint64_t)DOMAIN2STRING[*(unsigned int *)a4]);
    int v19 = v21;
  }
  if (v17)
  {
    unsigned int v22 = a4[2];
    if (a1[4])
    {
      int v23 = v19;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           pSent->words[%d].bHasComma = %d", a6, a7, a8, a4[2]);
      int v19 = v23;
      unsigned int v22 = a4[2];
    }
    uint64_t v10 = v49;
    uint64_t v24 = 0;
    int v25 = *(_DWORD *)(*(void *)a2 + 224 * v22 + 28);
LABEL_24:
    int v30 = v19 ^ (v25 == 1);
    goto LABEL_30;
  }
  if (v18)
  {
    unsigned int v26 = a4[2];
    if (a1[4])
    {
      int v27 = v19;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           pSent->words[%d].bIsLastInPhr = %d", a6, a7, a8, a4[2]);
      int v19 = v27;
      unsigned int v26 = a4[2];
    }
    uint64_t v10 = v49;
    uint64_t v24 = 0;
    int v25 = *(_DWORD *)(*(void *)a2 + 224 * v26 + 40);
    goto LABEL_24;
  }
  if (v20)
  {
    unsigned int v28 = a4[2];
    if (a1[4])
    {
      int v29 = v19;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           pSent->words[%d].bIsFirstInPhr = %d", a6, a7, a8, a4[2]);
      int v19 = v29;
      unsigned int v28 = a4[2];
    }
    uint64_t v10 = v49;
    uint64_t v24 = 0;
    int v25 = *(_DWORD *)(*(void *)a2 + 224 * v28 + 44);
    goto LABEL_24;
  }
  unsigned int v32 = *(_DWORD *)a4 - 1;
  if (v32 > 2)
  {
    uint64_t v10 = v49;
    goto LABEL_39;
  }
  uint64_t v10 = v49;
  switch(v8)
  {
    case 0:
LABEL_39:
      switch(v32)
      {
        case 0u:
          unint64_t v33 = *(char **)(*(void *)(*(void *)a2 + 224 * (unsigned __int16)v15 + 16) + 8 * *a3);
          goto LABEL_59;
        case 1u:
          unint64_t v33 = *(char **)(*(void *)(*(void *)a2 + 224 * (unsigned __int16)v15 + 56) + 32 * *a3 + 16);
          goto LABEL_59;
        case 2u:
          uint64_t v35 = *a3;
          if (v35 == a1[9]) {
            unint64_t v33 = (char *)(*(void *)(a2 + 16)
          }
                         + *(unsigned __int16 *)(*(void *)(a2 + 24) + 2 * (unsigned __int16)v15));
          else {
            unint64_t v33 = *(char **)(*(void *)(*(void *)a2 + 224 * (unsigned __int16)v15 + 16) + 8 * v35);
          }
          goto LABEL_59;
        case 3u:
          int v36 = v19;
          uint64_t v37 = adjustWordIdxByWindow(a1, (uint64_t *)a2, a4, v8, &v51, &v50, a7, a8);
          if ((v37 & 0x80000000) != 0) {
            return v37;
          }
          int v30 = v51;
          if (!v51) {
            goto LABEL_56;
          }
          int v19 = v36;
          unint64_t v33 = *(char **)(*(void *)(*(void *)a2 + 224 * v50 + 64) + 8 * *a3);
          int v34 = a1[4];
          if (!v33)
          {
            if (a1[4])
            {
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           NULL STR FOUND - no match", a6, a7, a8, 0);
              int v19 = v36;
              int v34 = a1[4];
            }
            uint64_t v38 = v48;
            uint64_t v24 = 0;
            *uint64_t v10 = 0;
            goto LABEL_73;
          }
LABEL_60:
          int v39 = v19;
          if (v34) {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           STR=\"%s\"", a6, a7, a8, (uint64_t)v33);
          }
          unsigned __int16 v40 = strlen(v33);
          uint64_t v24 = do_pcre_exec((uint64_t)a1, a3[1], v33, v40, 0, (uint64_t)v10, v41, v42);
          uint64_t v38 = v48;
          if ((v24 & 0x80000000) == 0) {
            goto LABEL_66;
          }
          return v24;
        case 4u:
          if (*a3 == a1[9]) {
            unint64_t v33 = *(char **)(a2 + 16);
          }
          else {
            unint64_t v33 = *(char **)(a2 + 32);
          }
LABEL_59:
          int v34 = a1[4];
          if (v33) {
            goto LABEL_60;
          }
          goto LABEL_64;
        default:
          int v34 = a1[4];
LABEL_64:
          *uint64_t v10 = 0;
          if (v34)
          {
            int v39 = v19;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           NULL STR FOUND - no match", a6, a7, a8, 0);
            uint64_t v24 = 0;
            uint64_t v38 = v48;
LABEL_66:
            int v34 = a1[4];
            if (*v10 == 1)
            {
              if (a1[4]) {
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           REGEX FIRED", a6, a7, a8, 0);
              }
              if (v39)
              {
                int v30 = a1[4];
                if (!a1[4]) {
                  goto LABEL_30;
                }
                uint64_t v43 = *(void *)(*(void *)a1 + 32);
                uint64_t v44 = "           negate match - return LH_FALSE";
LABEL_81:
                log_OutText(v43, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v44, a6, a7, a8, 0);
                int v30 = 0;
                goto LABEL_30;
              }
              *uint64_t v38 = a3[1];
              if (!a1[4])
              {
LABEL_29:
                int v30 = 1;
                goto LABEL_30;
              }
              uint64_t v46 = *(void *)(*(void *)a1 + 32);
              uint64_t v47 = "           return LH_TRUE";
LABEL_84:
              log_OutText(v46, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v47, a6, a7, a8, 0);
              goto LABEL_29;
            }
            int v19 = v39;
LABEL_73:
            if (v34)
            {
              int v45 = v19;
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           REGEX FAILED", a6, a7, a8, 0);
              int v19 = v45;
            }
          }
          else
          {
            uint64_t v24 = 0;
            uint64_t v38 = v48;
          }
          if (!v19)
          {
            int v30 = a1[4];
            if (!a1[4]) {
              goto LABEL_30;
            }
            uint64_t v43 = *(void *)(*(void *)a1 + 32);
            uint64_t v44 = "           return LH_FALSE";
            goto LABEL_81;
          }
          *uint64_t v38 = a3[1];
          if (!a1[4]) {
            goto LABEL_29;
          }
          uint64_t v46 = *(void *)(*(void *)a1 + 32);
          uint64_t v47 = "           negate match - return LH_TRUE";
          goto LABEL_84;
      }
    case 2:
      v15 += a4[4] + 1;
      if (v15 < *(unsigned __int16 *)(a2 + 8))
      {
LABEL_37:
        unsigned __int16 v50 = v15;
        goto LABEL_39;
      }
      break;
    case 1:
      v15 += ~a4[3];
      if (v15 >= 0) {
        goto LABEL_37;
      }
      break;
  }
  int v30 = a1[4];
  if (a1[4])
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           context not found. rule not applicable. RETURN LH_FALSE", a6, a7, a8, 0);
    int v30 = 0;
  }
LABEL_56:
  uint64_t v24 = 0;
LABEL_30:
  *uint64_t v10 = v30;
  return v24;
}

uint64_t matchPANDPRULE_TRule(uint64_t a1, const char **a2, _WORD *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  int v25 = 1;
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t matched = logPANDPRULE_TRule(a1, a2, a3, __s, (uint64_t *)a5, (uint64_t **)a7);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"       <%s>", v16, v17, v18, (uint64_t)*a2);
    **a2 = 0;
  }
  else
  {
    uint64_t matched = 0;
  }
  *a9 = 0;
  if (*(void *)a7)
  {
    uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"LEFT", a2, a3, __s, a5, a6, *(void *)a7, a8, &v25, (uint64_t)v24, 1u);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v20 = v25;
    if (v25 != 1) {
      goto LABEL_15;
    }
  }
  uint64_t v21 = *(void *)(a7 + 8);
  if (v21)
  {
    int v25 = 0;
    uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"CUR", a2, a3, __s, a5, a6, v21, a8, &v25, (uint64_t)v24, 0);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v20 = v25;
    if (v25 != 1)
    {
LABEL_15:
      *a9 = v20;
      return matched;
    }
  }
  uint64_t v22 = *(void *)(a7 + 16);
  if (!v22)
  {
    int v20 = 1;
    goto LABEL_15;
  }
  int v25 = 0;
  uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"RIGHT", a2, a3, __s, a5, a6, v22, a8, &v25, (uint64_t)v24, 2u);
  if ((matched & 0x80000000) == 0)
  {
    int v20 = v25;
    goto LABEL_15;
  }
  return matched;
}

uint64_t matchMAPRULE2STR_TRule(uint64_t a1, const char **a2, _WORD *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  *a9 = 0;
  return matchPANDPRULE_TRule(a1, a2, a3, a4, a5, a6, a7 + 8, a8, a9);
}

uint64_t matchMAPSTRSTR_TRule(uint64_t a1, void *a2, unsigned int *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  if (*(_WORD *)(a1 + 8)) {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           compare \"%s\" \"%s\"", a6, a7, a8, *(void *)(a1 + 528) + *(unsigned int *)(*(void *)(a1 + 536) + 4 * *a3));
  }
  if (!strcmp((const char *)(*(void *)(a1 + 528) + *(unsigned int *)(*(void *)(a1 + 536) + 4 * *a3)), *(const char **)(*(void *)(*a2 + 224 * *(unsigned __int16 *)(a4 + 4) + 16)+ 8 * *(unsigned __int16 *)(a1 + 16))))
  {
    if (*(_WORD *)(a1 + 8)) {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           FOUND", v13, v14, v15, 0);
    }
    *a5 = 1;
  }
  return 0;
}

uint64_t matchMMAPREGEX2STR_TRule(unsigned __int16 *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  return matchREGEX_TRule(a1, a2, a3, a4, a5, a6, 0, a8);
}

uint64_t matchMMAPREGEX2NUM_TRule(unsigned __int16 *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int *a5, unsigned __int16 *a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  uint64_t matched = matchREGEX_TRule(a1, a2, a3, a4, a5, (uint64_t)v13, 0, a8);
  if ((matched & 0x80000000) == 0 && *a5 == 1) {
    FLOATSUR_PLUS(a6, a6, a3 + 3);
  }
  return matched;
}

uint64_t matchMAPRULE2NUMANDOPERATOR_TRule(uint64_t a1, const char **a2, _WORD *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, unsigned __int16 *a10)
{
  *a9 = 0;
  uint64_t matched = matchPANDPRULE_TRule(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if ((matched & 0x80000000) == 0 && *a9 == 1) {
    getVal(a10, (_DWORD *)(a7 + 24), (unsigned __int16 *)(a7 + 28));
  }
  return matched;
}

unsigned __int16 *getVal(unsigned __int16 *result, _DWORD *a2, unsigned __int16 *a3)
{
  switch(*a2)
  {
    case 0:
      uint64_t result = (unsigned __int16 *)FLOATSUR_PLUS_INT(result, result, 1u, 0);
      break;
    case 1:
      uint64_t result = (unsigned __int16 *)FLOATSUR_PLUS(result, result, a3);
      break;
    case 2:
      uint64_t result = (unsigned __int16 *)FLOATSUR_MINUS_INT(result, result, 1u, 0);
      break;
    case 3:
      uint64_t result = (unsigned __int16 *)FLOATSUR_MINUS(result, result, a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t matchMAPRULE2NUM_TRule(uint64_t a1, const char **a2, _WORD *a3, char *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, int *a9, _DWORD *a10)
{
  *a9 = 0;
  uint64_t result = matchPANDPRULE_TRule(a1, a2, a3, a4, a5, a6, (uint64_t)(a7 + 2), a8, a9);
  if ((result & 0x80000000) == 0 && *a9 == 1) {
    *a10 = *a7;
  }
  return result;
}

unsigned __int16 *matchMAPNUMNUM_TRule(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t result = (unsigned __int16 *)FLOATSUR_EQUAL((unsigned __int16 *)(a1 + 4), a2);
  if (result)
  {
    *a3 = 1;
    return getVal(a2, (_DWORD *)a1, (unsigned __int16 *)(a1 + 8));
  }
  return result;
}

uint64_t setParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v18 = 0;
  __s1 = 0;
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpdetailtrace", &v18) & 0x80000000) == 0) {
    *(_WORD *)(a5 + 8) = v18;
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpthresholdweakbnd", &v18) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 368), v18, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpthresholdbndvalweak", &v18) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 372), v18, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpthresholdbndvalstrong", &v18) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 376), v18, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpthresholdweakfrag", &v18) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 380), v18, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpprevfactor", &v18) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 384), v18, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpnextfactor", &v18) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 388), v18, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpbndfactor", &v18) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 392), v18, 0);
  }
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"pandpphrasesize", &__s1) & 0x80000000) == 0)
  {
    uint64_t v10 = __s1;
    if (!strcmp(__s1, "min"))
    {
      FLOATSUR_SET_INT((_WORD *)(a5 + 372), 0, 0);
      FLOATSUR_SET_INT((_WORD *)(a5 + 380), 0, 0);
    }
    else if (!strcmp(v10, "default"))
    {
      FLOATSUR_SET((_DWORD *)(a5 + 368), (_DWORD *)(a5 + 396));
      FLOATSUR_SET((_DWORD *)(a5 + 372), (_DWORD *)(a5 + 400));
      FLOATSUR_SET((_DWORD *)(a5 + 376), (_DWORD *)(a5 + 404));
      FLOATSUR_SET((_DWORD *)(a5 + 380), (_DWORD *)(a5 + 408));
      FLOATSUR_SET((_DWORD *)(a5 + 384), (_DWORD *)(a5 + 412));
      FLOATSUR_SET((_DWORD *)(a5 + 388), (_DWORD *)(a5 + 416));
      FLOATSUR_SET((_DWORD *)(a5 + 392), (_DWORD *)(a5 + 420));
    }
  }
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a4 + 96))(a2, a3, "fecfg", "usecompound", &__c[3], &__c[1], __c);
  if ((v11 & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)&__c[1] != 1 || !*(void *)&__c[3]) {
      goto LABEL_29;
    }
    unsigned int v12 = **(const char ***)&__c[3];
    uint64_t v13 = strchr(**(char ***)&__c[3], __c[0]);
    if (v13)
    {
      *uint64_t v13 = 0;
      unsigned int v12 = **(const char ***)&__c[3];
    }
    if (!strcmp("yes", v12) || !strcmp("YES", v12))
    {
      if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompwidescope", &v18) & 0x80000000) != 0)
      {
        *(_DWORD *)(a5 + 656) = 1;
        uint64_t v14 = *(void *)(a1 + 40);
        unsigned int v15 = 1;
        goto LABEL_36;
      }
    }
    else
    {
LABEL_29:
      if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompwidescope", &v18) & 0x80000000) != 0)
      {
        *(_DWORD *)(a5 + 656) = 0;
        uint64_t v14 = *(void *)(a1 + 40);
        unsigned int v15 = 0;
LABEL_36:
        paramc_ParamSetInt(v14, (uint64_t)"statcompwidescope", v15);
        return v11;
      }
    }
    if (v18) {
      *(_DWORD *)(a5 + 656) = 1;
    }
    else {
      *(_DWORD *)(a5 + 656) = 0;
    }
  }
  return v11;
}

uint64_t readPandPRules(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  uint64_t v140 = 0;
  unsigned __int8 v139 = 0;
  unsigned int v137 = 0;
  int v138 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  memset(v141, 0, sizeof(v141));
  __s1 = 0;
  *(void *)a4 = a3;
  if ((paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"basicclcprosody", &__s1) & 0x80000000) == 0
    && __s1
    && !strcmp(__s1, "yes"))
  {
    goto LABEL_175;
  }
  log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"trying to load voice-dependent PandP rules", v8, v9, v10, 0);
  uint64_t BrokerString = getBrokerString(a3, 1, (char *)v141);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  if ((brk_DataOpenEx(*(void *)(a3 + 24), (uint64_t)v141, 1, (uint64_t)&v135) & 0x80000000) != 0)
  {
    log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"trying to load legacy voice-dependent PandP MS rules", v12, v13, v14, 0);
    uint64_t BrokerString = getLegacyBrokerString(a3, (char *)v141);
    if ((BrokerString & 0x80000000) != 0) {
      return BrokerString;
    }
    if ((brk_DataOpenEx(*(void *)(a3 + 24), (uint64_t)v141, 1, (uint64_t)&v135) & 0x80000000) != 0)
    {
LABEL_175:
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"trying to load voice-independent PandP rules", v8, v9, v10, 0);
      uint64_t BrokerString = getBrokerString(a3, 0, (char *)v141);
      if ((BrokerString & 0x80000000) != 0) {
        return BrokerString;
      }
      uint64_t BrokerString = brk_DataOpenEx(*(void *)(a3 + 24), (uint64_t)v141, 1, (uint64_t)&v135);
      if ((BrokerString & 0x80000000) != 0) {
        return BrokerString;
      }
    }
  }
  uint64_t BrokerString = brk_DataClose(*(void *)(a3 + 24), v135);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  uint64_t BrokerString = ssftriff_reader_ObjOpen(a1, a2, 0, (const char *)v141, "PANP", 1031, (uint64_t *)&v140);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  do
  {
    LODWORD(v22) = ssftriff_reader_OpenChunk((uint64_t)v140, &v138, &v137, &v136, v15, v16, v17, v18);
    if ((v22 & 0x80000000) != 0) {
      break;
    }
    if (v138 ^ 0x47494643 | v139)
    {
      if (!(v138 ^ 0x45535453 | v139))
      {
        int v25 = v136;
        uint64_t v26 = *v136;
        *(_WORD *)(a4 + 40) = v26;
        uint64_t v27 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * v26) | 1);
        *(void *)(a4 + 32) = v27;
        if (!v27) {
          goto LABEL_152;
        }
        if (*(_WORD *)(a4 + 40))
        {
          uint64_t v32 = 0;
          unint64_t v33 = 0;
          unsigned int v34 = 2;
          do
          {
            *(_DWORD *)(*(void *)(a4 + 32) + v32) = *(_DWORD *)((char *)v25 + v34);
            unsigned int v35 = v34 + 4;
            *(_DWORD *)(*(void *)(a4 + 32) + v32 + 4) = *(_DWORD *)((char *)v25 + v35);
            unsigned int v34 = v35 + 4;
            ++v33;
            v32 += 8;
          }
          while (v33 < *(unsigned __int16 *)(a4 + 40));
        }
        goto LABEL_65;
      }
      if (!(v138 ^ 0x44554150 | v139))
      {
        int v36 = v136;
        uint64_t v37 = *v136;
        *(_WORD *)(a4 + 56) = v37;
        LODWORD(v133) = 2;
        uint64_t v38 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * v37) | 1);
        *(void *)(a4 + 48) = v38;
        if (!v38) {
          goto LABEL_152;
        }
        if (*(_WORD *)(a4 + 56))
        {
          uint64_t v39 = 0;
          unint64_t v40 = 0;
          do
          {
            readSTR2NUMRULE((uint64_t)v36, (unsigned int *)&v133, (_DWORD *)(*(void *)(a4 + 48) + v39));
            ++v40;
            v39 += 8;
          }
          while (v40 < *(unsigned __int16 *)(a4 + 56));
        }
        goto LABEL_65;
      }
      if (!(v138 ^ 0x4D464544 | v139))
      {
        uint64_t v41 = v136;
        uint64_t v42 = *v136;
        *(_WORD *)(a4 + 72) = v42;
        *(_WORD *)(a4 + 74) = v41[1];
        uint64_t v43 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * v42) | 1);
        *(void *)(a4 + 64) = v43;
        if (!v43) {
          goto LABEL_152;
        }
        if (*(_WORD *)(a4 + 74))
        {
          unint64_t v44 = 0;
          uint64_t v45 = 4;
          uint64_t v46 = 2;
          do
          {
            *(_DWORD *)(*(void *)(a4 + 64) + v45) = *(_DWORD *)&v41[v46];
            v46 += 2;
            ++v44;
            v45 += 8;
          }
          while (v44 < *(unsigned __int16 *)(a4 + 74));
          unsigned int v47 = *(unsigned __int16 *)(a4 + 74);
        }
        else
        {
          unsigned int v47 = 0;
          uint64_t v46 = 2;
        }
        if (v47 < *(unsigned __int16 *)(a4 + 72))
        {
          unint64_t v60 = v47;
          unint64_t v61 = &v41[v46 + 2];
          uint64_t v62 = 8 * v47;
          do
          {
            *(_DWORD *)(*(void *)(a4 + 64) + v62) = *((_DWORD *)v61 - 1);
            int v63 = *(_DWORD *)v61;
            v61 += 4;
            *(_DWORD *)(*(void *)(a4 + 64) + v62 + 4) = v63;
            ++v60;
            v62 += 8;
          }
          while (v60 < *(unsigned __int16 *)(a4 + 72));
        }
        goto LABEL_65;
      }
      if (!(v138 ^ 0x47415452 | v139))
      {
        uint64_t v48 = v136;
        uint64_t v49 = *v136;
        *(_WORD *)(a4 + 88) = v49;
        LODWORD(v133) = 2;
        uint64_t v50 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (32 * v49) | 1);
        *(void *)(a4 + 80) = v50;
        if (!v50) {
          goto LABEL_152;
        }
        if (*(_WORD *)(a4 + 88))
        {
          uint64_t v51 = 0;
          unint64_t v52 = 0;
          while (1)
          {
            int v53 = (int)v133;
            *(_DWORD *)(*(void *)(a4 + 80) + v51) = *(_DWORD *)((char *)v48 + v133);
            LODWORD(v133) = v53 + 4;
            uint64_t BrokerString = readRULE(*(void *)a4, (uint64_t)v48, (unsigned int *)&v133, (uint64_t *)(*(void *)(a4 + 80) + v51 + 8));
            if ((BrokerString & 0x80000000) != 0) {
              return BrokerString;
            }
            ++v52;
            v51 += 32;
            if (v52 >= *(unsigned __int16 *)(a4 + 88)) {
              goto LABEL_75;
            }
          }
        }
        goto LABEL_75;
      }
      if (!(v138 ^ 0x47415453 | v139))
      {
        unint64_t v54 = v136;
        uint64_t v55 = *v136;
        *(_WORD *)(a4 + 104) = v55;
        LODWORD(v133) = 2;
        uint64_t v56 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (32 * v55) | 1);
        *(void *)(a4 + 96) = v56;
        if (!v56) {
          goto LABEL_152;
        }
        if (*(_WORD *)(a4 + 104))
        {
          uint64_t v57 = 0;
          unint64_t v58 = 0;
          while (1)
          {
            int v59 = (int)v133;
            *(_DWORD *)(*(void *)(a4 + 96) + v57) = *(_DWORD *)((char *)v54 + v133);
            LODWORD(v133) = v59 + 4;
            uint64_t BrokerString = readRULE(*(void *)a4, (uint64_t)v54, (unsigned int *)&v133, (uint64_t *)(*(void *)(a4 + 96) + v57 + 8));
            if ((BrokerString & 0x80000000) != 0) {
              return BrokerString;
            }
            ++v58;
            v57 += 32;
            if (v58 >= *(unsigned __int16 *)(a4 + 104)) {
              goto LABEL_75;
            }
          }
        }
        goto LABEL_75;
      }
      if (!(v138 ^ 0x534F5054 | v139))
      {
        uint64_t v65 = v136;
        uint64_t v66 = *v136;
        *(_WORD *)(a4 + 120) = v66;
        LODWORD(v133) = 2;
        uint64_t v67 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (32 * v66) | 1);
        *(void *)(a4 + 112) = v67;
        if (!v67) {
          goto LABEL_152;
        }
        if (*(_WORD *)(a4 + 120))
        {
          uint64_t v68 = 0;
          unint64_t v69 = 0;
          do
          {
            int v70 = (int)v133;
            *(_DWORD *)(*(void *)(a4 + 112) + v68) = *(_DWORD *)((char *)v65 + v133);
            LODWORD(v133) = v70 + 4;
            uint64_t BrokerString = readRULE(*(void *)a4, (uint64_t)v65, (unsigned int *)&v133, (uint64_t *)(*(void *)(a4 + 112) + v68 + 8));
            if ((BrokerString & 0x80000000) != 0) {
              return BrokerString;
            }
            ++v69;
            v68 += 32;
          }
          while (v69 < *(unsigned __int16 *)(a4 + 120));
        }
LABEL_75:
        LODWORD(v22) = 0;
        goto LABEL_66;
      }
      if (!(v138 ^ 0x46454454 | v139))
      {
        uint64_t v71 = v136;
        uint64_t v72 = *v136;
        *(_WORD *)(a4 + 144) = v72;
        uint64_t v73 = (_DWORD *)heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * v72) | 1);
        *(void *)(a4 + 136) = v73;
        if (!v73) {
          goto LABEL_152;
        }
        uint64_t v74 = *(unsigned __int16 *)(a4 + 144);
        if (*(_WORD *)(a4 + 144))
        {
          uint64_t v75 = 0;
          do
            *v73++ = v71[++v75];
          while (v74 != v75);
          unsigned int v76 = v75 * 2 + 2;
        }
        else
        {
          unsigned int v76 = 2;
        }
        LODWORD(v133) = v76;
        uint64_t v77 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * v74) | 1);
        *(void *)(a4 + 128) = v77;
        if (!v77)
        {
LABEL_152:
          uint64_t v22 = 2315264010;
          uint64_t v112 = *(void *)(*(void *)a4 + 32);
LABEL_153:
          log_OutPublic(v112, (uint64_t)"FE_PHRASING", 37000, 0, v28, v29, v30, v31, v126);
          return v22;
        }
        if (*(_WORD *)(a4 + 144))
        {
          unint64_t v78 = 0;
          do
          {
            uint64_t v79 = *(void **)(*(void *)a4 + 8);
            if (*(_DWORD *)(*(void *)(a4 + 136) + 4 * v78) == 1)
            {
              *(void *)(*(void *)(a4 + 128) + 8 * v78) = heap_Calloc(v79, 1, 13);
              uint64_t v80 = *(void *)(*(void *)(a4 + 128) + 8 * v78);
              if (!v80) {
                goto LABEL_152;
              }
              readREGEX((uint64_t)v71, (unsigned int *)&v133, v80);
              uint64_t v81 = (_DWORD *)(*(void *)(*(void *)(a4 + 128) + 8 * v78) + 8);
              unsigned int v82 = v133;
            }
            else
            {
              *(void *)(*(void *)(a4 + 128) + 8 * v78) = heap_Calloc(v79, 1, 9);
              __int16 v83 = *(_DWORD **)(*(void *)(a4 + 128) + 8 * v78);
              if (!v83) {
                goto LABEL_152;
              }
              _DWORD *v83 = *(_DWORD *)((char *)v71 + v76);
              unsigned int v82 = v76 + 4;
              uint64_t v81 = (_DWORD *)(*(void *)(*(void *)(a4 + 128) + 8 * v78) + 4);
            }
            *uint64_t v81 = *(_DWORD *)((char *)v71 + v82);
            unsigned int v76 = v82 + 4;
            LODWORD(v133) = v82 + 4;
            ++v78;
          }
          while (v78 < *(unsigned __int16 *)(a4 + 144));
        }
        goto LABEL_65;
      }
      if (!(v138 ^ 0x524E4547 | v139))
      {
        uint64_t BrokerString = readGeneralRulesCHUNK(v136, a4);
        if ((BrokerString & 0x80000000) != 0) {
          return BrokerString;
        }
LABEL_65:
        LODWORD(v22) = 0;
        goto LABEL_66;
      }
      if (!(v138 ^ 0x524B4F54 | v139))
      {
        uint64_t TokenRulesCHUNK = readTokenRulesCHUNK(v136, a4);
        goto LABEL_104;
      }
      if (!(v138 ^ 0x54475750 | v139))
      {
        uint64_t TokenRulesCHUNK = readPhraseWeightsCHUNK(v136, a4);
        goto LABEL_104;
      }
      if (!(v138 ^ 0x534D554E | v139))
      {
        uint64_t TokenRulesCHUNK = readNumSettingsCHUNK(v136, a4);
        goto LABEL_104;
      }
      if (!(v138 ^ 0x4D4F5250 | v139))
      {
        uint64_t TokenRulesCHUNK = readProminenceCHUNK(v136, a4);
        goto LABEL_104;
      }
      if (!(v138 ^ 0x58474552 | v139))
      {
        uint64_t TokenRulesCHUNK = readRegexCHUNK((uint64_t)v140, v136, a4);
        goto LABEL_104;
      }
      if (!(v138 ^ 0x53525453 | v139))
      {
        uint64_t TokenRulesCHUNK = readStringCHUNK((uint64_t)v140, v136, a4);
        goto LABEL_104;
      }
      if (!(v138 ^ 0x54534552 | v139))
      {
        uint64_t TokenRulesCHUNK = readRegexStringCHUNK((uint64_t)v140, v136, a4);
        goto LABEL_104;
      }
      if (!(v138 ^ 0x4644534D | v139))
      {
        uint64_t BrokerString = readMSCHUNK(v136, a4);
        if ((BrokerString & 0x80000000) != 0) {
          return BrokerString;
        }
        goto LABEL_65;
      }
      if (!(v138 ^ 0x54524850 | v139))
      {
        uint64_t TokenRulesCHUNK = readPhraseTypeCHUNK(v136, a4);
LABEL_104:
        uint64_t v22 = TokenRulesCHUNK;
        if ((TokenRulesCHUNK & 0x80000000) != 0) {
          return v22;
        }
        goto LABEL_66;
      }
      if (!(v138 ^ 0x44504D43 | v139))
      {
        uint64_t TokenRulesCHUNK = readMSCOMPOUNDDEFCHUNK(v136, a4);
        goto LABEL_104;
      }
    }
    else
    {
      LODWORD(v22) = 0;
      uint64_t v24 = v136;
      *(_WORD *)(a4 + 10) = *v136;
      *(_WORD *)(a4 + 12) = v24[1];
      *(_WORD *)(a4 + 14) = v24[2];
    }
LABEL_66:
    int v64 = ssftriff_reader_CloseChunk((uint64_t)v140);
    if (v64 < 0) {
      LODWORD(v22) = v64;
    }
  }
  while ((v22 & 0x80000000) == 0);
  if ((v22 & 0x1FFF) == 0x14) {
    int v85 = 0;
  }
  else {
    int v85 = v22;
  }
  uint64_t v22 = 2315264010;
  if ((v85 & 0x1FFF) != 0xA)
  {
    int v86 = ssftriff_reader_ObjClose(v140, v19, v20, v21, v15, v16, v17, v18);
    uint64_t v140 = 0;
    if (v86 >= 0 || v85 <= -1) {
      int v88 = v85;
    }
    else {
      int v88 = v86;
    }
    unsigned int v127 = v88;
    uint64_t v89 = *(unsigned __int16 *)(a4 + 74);
    if (*(_WORD *)(a4 + 74))
    {
      uint64_t v90 = 0;
      uint64_t v91 = *(void *)(a4 + 528);
      unsigned int v92 = (unsigned int *)(*(void *)(a4 + 64) + 4);
      uint64_t v93 = *(void *)(a4 + 536);
      do
      {
        unsigned int v94 = *v92;
        v92 += 2;
        uint64_t v95 = (const char *)(v91 + *(unsigned int *)(v93 + 4 * v94));
        if (!strcmp("ORT", v95))
        {
          *(_WORD *)(a4 + 16) = v90;
        }
        else if (!strcmp("POS", v95))
        {
          *(_WORD *)(a4 + 18) = v90;
        }
        else if (!strcmp("TOK", v95))
        {
          *(_WORD *)(a4 + 20) = v90;
        }
        else if (!strcmp("TOKT", v95))
        {
          *(_WORD *)(a4 + 22) = v90;
        }
        else if (!strcmp("PHR", v95))
        {
          *(_WORD *)(a4 + 24) = v90;
        }
        ++v90;
      }
      while (v89 != v90);
    }
    FLOATSUR_SET_INT((_WORD *)(a4 + 368), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 372), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 376), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 380), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 384), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 388), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 392), 0, 0);
    if (*(_WORD *)(a4 + 280))
    {
      uint64_t v100 = 0;
      unint64_t v101 = 0;
      int v128 = 0;
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      int v131 = 0;
      int v102 = 0;
      do
      {
        uint64_t v103 = *(void *)(a4 + 272);
        unsigned int v104 = (const char *)(*(void *)(a4 + 528)
                            + *(unsigned int *)(*(void *)(a4 + 536) + 4 * *(unsigned int *)(v103 + v100)));
        if (!strcmp(v104, "threshold_weak_bnd"))
        {
          int v105 = *(_DWORD *)(v103 + v100 + 4);
          *(_DWORD *)(a4 + 368) = v105;
          *(_DWORD *)(a4 + 396) = v105;
          int v102 = 1;
        }
        else if (!strcmp(v104, "threshold_bnd_val_weak"))
        {
          int v106 = *(_DWORD *)(v103 + v100 + 4);
          *(_DWORD *)(a4 + 372) = v106;
          *(_DWORD *)(a4 + 400) = v106;
          int v131 = 1;
        }
        else if (!strcmp(v104, "threshold_bnd_val_strong"))
        {
          int v107 = *(_DWORD *)(v103 + v100 + 4);
          *(_DWORD *)(a4 + 376) = v107;
          *(_DWORD *)(a4 + 404) = v107;
          HIDWORD(v130) = 1;
        }
        else if (!strcmp(v104, "threshold_weak_frag"))
        {
          int v108 = *(_DWORD *)(v103 + v100 + 4);
          *(_DWORD *)(a4 + 380) = v108;
          *(_DWORD *)(a4 + 408) = v108;
          LODWORD(v130) = 1;
        }
        else if (!strcmp(v104, "prevFactor"))
        {
          int v109 = *(_DWORD *)(v103 + v100 + 4);
          *(_DWORD *)(a4 + 384) = v109;
          *(_DWORD *)(a4 + 412) = v109;
          HIDWORD(v129) = 1;
        }
        else if (!strcmp(v104, "nextFactor"))
        {
          int v110 = *(_DWORD *)(v103 + v100 + 4);
          *(_DWORD *)(a4 + 388) = v110;
          *(_DWORD *)(a4 + 416) = v110;
          LODWORD(v129) = 1;
        }
        else if (!strcmp(v104, "bndFactor"))
        {
          int v111 = *(_DWORD *)(v103 + v100 + 4);
          *(_DWORD *)(a4 + 392) = v111;
          *(_DWORD *)(a4 + 420) = v111;
          int v128 = 1;
        }
        else if (!strcmp(v104, "mapfromBIO") && !FLOATSUR_EQUAL_INT((unsigned __int16 *)(v103 + v100 + 4), 0, 0))
        {
          log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 1, 0, (uint64_t)"mapfromBIO PandP setting is no longer honored", v97, v98, v99, v126);
        }
        ++v101;
        v100 += 8;
      }
      while (v101 < *(unsigned __int16 *)(a4 + 280));
    }
    else
    {
      int v102 = 0;
      int v131 = 0;
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      int v128 = 0;
    }
    if (v102 && v131 && HIDWORD(v130) && v130 && HIDWORD(v129) && v129 && v128)
    {
      size_t v133 = 0;
      int v132 = 0;
      uint64_t StrSetting = getStrSetting(a4, "COMPOUND_FEATURE_STR");
      if (StrSetting)
      {
        int v114 = (const char *)StrSetting;
        uint64_t v115 = getStrSetting(a4, "COMPOUND_START_TAG");
        *(void *)(a4 + 640) = v115;
        if (v115)
        {
          unsigned __int16 v116 = strlen(v114);
          uint64_t v117 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, v116 + 3);
          if (!v117)
          {
            uint64_t v112 = *(void *)(a3 + 32);
            goto LABEL_153;
          }
          unsigned __int16 v118 = v117;
          *(_WORD *)uint64_t v117 = 44;
          long long v119 = strcat(v117, v114);
          *(_WORD *)&v118[strlen(v119)] = 44;
          *(void *)(a4 + 648) = nuance_pcre_compile(*(void *)(a4 + 424), *(void *)(a4 + 432), v118, 0, &v133, &v132, 0);
          heap_Free(*(void **)(a3 + 8), (uint64_t)v118);
          if (*(void *)(a4 + 648)) {
            return v127;
          }
          log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 11006, "%s%s%s%s%s%d", v120, v121, v122, v123, "regularExpression");
          return 2315264000;
        }
      }
      uint64_t v124 = *(void *)(a3 + 32);
      uint64_t v125 = 62000;
    }
    else
    {
      uint64_t v124 = *(void *)(a3 + 32);
      uint64_t v125 = 62004;
    }
    log_OutPublic(v124, (uint64_t)"FE_PHRASING", v125, 0, v96, v97, v98, v99, v126);
    return 2315264000;
  }
  return v22;
}

uint64_t getBrokerString(uint64_t a1, int a2, char *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  unsigned int __s = 0;
  memset(v15, 0, sizeof(v15));
  *(_DWORD *)__s2 = 0;
  *a3 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v7 = __s;
    if (*__s)
    {
      size_t v8 = 0;
      do
      {
        unint64_t v9 = v8;
        __s2[v8] = __tolower(v7[v8]);
        ++v8;
        uint64_t v7 = __s;
        size_t v10 = strlen(__s);
      }
      while (v9 <= 1 && v8 < v10);
    }
    else
    {
      size_t v8 = 0;
    }
    __s2[v8] = 0;
    if (strcmp(v7, __s2))
    {
      uint64_t result = paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)"langcode", __s2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int __s = __s2;
    }
    __strcat_chk();
    __strcat_chk();
    __strcat_chk();
    if (a2 == 1)
    {
      uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &v13);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      __strcat_chk();
      __strcat_chk();
      uint64_t v11 = v13;
    }
    else
    {
      uint64_t v11 = 0;
    }
    return brokeraux_ComposeBrokerString(a1, (const char *)v15, 0, 1, __s, v11, 0, a3, 0x80uLL);
  }
  return result;
}

uint64_t getLegacyBrokerString(uint64_t a1, char *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  size_t v10 = 0;
  unsigned int __s = 0;
  memset(v12, 0, sizeof(v12));
  *(_DWORD *)__s2 = 0;
  *a2 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = __s;
    if (*__s)
    {
      size_t v6 = 0;
      do
      {
        unint64_t v7 = v6;
        __s2[v6] = __tolower(v5[v6]);
        ++v6;
        uint64_t v5 = __s;
        size_t v8 = strlen(__s);
      }
      while (v7 <= 1 && v6 < v8);
    }
    else
    {
      size_t v6 = 0;
    }
    __s2[v6] = 0;
    if (strcmp(v5, __s2))
    {
      uint64_t result = paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)"langcode", __s2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int __s = __s2;
    }
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &v10);
    if ((result & 0x80000000) == 0)
    {
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      return brokeraux_ComposeBrokerString(a1, (const char *)v12, 1, 1, __s, v10, 0, a2, 0x80uLL);
    }
  }
  return result;
}

uint64_t readGeneralRulesCHUNK(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_WORD *)(a2 + 160) = v4;
  unsigned int v17 = 2;
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (32 * v4) | 1);
  *(void *)(a2 + 152) = v5;
  if (v5)
  {
    if (*(_WORD *)(a2 + 160))
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t result = readRULE(*(void *)a2, (uint64_t)a1, &v17, (uint64_t *)(*(void *)(a2 + 152) + v10 + 8));
        if ((result & 0x80000000) != 0) {
          break;
        }
        __int16 v13 = *(unsigned __int16 *)((char *)a1 + v17);
        uint64_t v14 = (_WORD *)(*(void *)(a2 + 152) + v10);
        __int16 v15 = *(unsigned __int16 *)((char *)a1 + v17 + 2);
        v17 += 4;
        FLOATSUR_SET_INT(v14, v13, v15);
        ++v11;
        v10 += 32;
        if (v11 >= *(unsigned __int16 *)(a2 + 160)) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v16);
    return 2315264010;
  }
  return result;
}

uint64_t readTokenRulesCHUNK(_WORD *a1, uint64_t a2)
{
  *(_WORD *)(a2 + 168) = *a1;
  uint64_t v4 = (unsigned __int16)a1[1];
  *(_WORD *)(a2 + 184) = v4;
  unsigned int v33 = 4;
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (40 * v4) | 1);
  *(void *)(a2 + 176) = v5;
  if (!v5)
  {
LABEL_18:
    uint64_t v12 = *(void *)a2;
LABEL_19:
    log_OutPublic(*(void *)(v12 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v32);
    return 2315264010;
  }
  if (*(_WORD *)(a2 + 184))
  {
    uint64_t v10 = 0;
    while (1)
    {
      unint64_t v11 = (uint64_t *)heap_Calloc(*(void **)(*(void *)a2 + 8), 1, 25);
      *(void *)(*(void *)(a2 + 176) + 40 * v10) = v11;
      uint64_t v12 = *(void *)a2;
      if (!v11) {
        goto LABEL_19;
      }
      uint64_t result = readRULE(v12, (uint64_t)a1, &v33, v11);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int v14 = v33;
      *(_WORD *)(*(void *)(a2 + 176) + 40 * v10 + 16) = *(_WORD *)((char *)a1 + v33);
      unsigned int v15 = v14 + 2;
      unsigned int v33 = v14 + 2;
      uint64_t v16 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (32 * *(unsigned __int16 *)(*(void *)(a2 + 176) + 40 * v10 + 16)) | 1);
      uint64_t v17 = *(void *)(a2 + 176);
      *(void *)(v17 + 40 * v10 + 8) = v16;
      if (!v16) {
        goto LABEL_18;
      }
      if (*(_WORD *)(v17 + 40 * v10 + 16))
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        do
        {
          uint64_t result = readRULE(*(void *)a2, (uint64_t)a1, &v33, (uint64_t *)(*(void *)(v17 + 40 * v10 + 8) + v18 + 8));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          __int16 v20 = *(_WORD *)((char *)a1 + v33);
          uint64_t v21 = (_WORD *)(*(void *)(*(void *)(a2 + 176) + 40 * v10 + 8) + v18);
          __int16 v22 = *(_WORD *)((char *)a1 + v33 + 2);
          unsigned int v15 = v33 + 4;
          v33 += 4;
          FLOATSUR_SET_INT(v21, v20, v22);
          ++v19;
          uint64_t v17 = *(void *)(a2 + 176);
          v18 += 32;
        }
        while (v19 < *(unsigned __int16 *)(v17 + 40 * v10 + 16));
      }
      *(_WORD *)(v17 + 40 * v10 + 32) = *(_WORD *)((char *)a1 + v15);
      unsigned int v33 = v15 + 2;
      uint64_t v23 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (32 * *(unsigned __int16 *)(*(void *)(a2 + 176) + 40 * v10 + 32)) | 1);
      uint64_t v24 = *(void *)(a2 + 176);
      *(void *)(v24 + 40 * v10 + 24) = v23;
      if (!v23) {
        goto LABEL_18;
      }
      if (*(_WORD *)(v24 + 40 * v10 + 32))
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        do
        {
          uint64_t result = readRULE(*(void *)a2, (uint64_t)a1, &v33, (uint64_t *)(*(void *)(v24 + 40 * v10 + 24) + v25));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          unsigned int v27 = v33;
          unsigned int v28 = v33 + 2;
          uint64_t v29 = *(void *)(*(void *)(a2 + 176) + 40 * v10 + 24) + v25;
          *(_DWORD *)(v29 + 24) = *(unsigned __int16 *)((char *)a1 + v33);
          __int16 v30 = *(_WORD *)((char *)a1 + v28);
          __int16 v31 = *(_WORD *)((char *)a1 + v27 + 4);
          unsigned int v33 = v27 + 6;
          FLOATSUR_SET_INT((_WORD *)(v29 + 28), v30, v31);
          ++v26;
          uint64_t v24 = *(void *)(a2 + 176);
          v25 += 32;
        }
        while (v26 < *(unsigned __int16 *)(v24 + 40 * v10 + 32));
      }
      uint64_t result = 0;
      if (++v10 >= (unint64_t)*(unsigned __int16 *)(a2 + 184)) {
        return result;
      }
    }
  }
  return 0;
}

uint64_t readPhraseWeightsCHUNK(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_WORD *)(a2 + 248) = v4;
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (12 * v4) | 1);
  *(void *)(a2 + 240) = v5;
  if (!v5) {
    goto LABEL_21;
  }
  if (*(_WORD *)(a2 + 248))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      *(_DWORD *)(*(void *)(a2 + 240) + v10 * 2) = *(_DWORD *)&a1[v10 + 1];
      FLOATSUR_SET_INT((_WORD *)(*(void *)(a2 + 240) + v10 * 2 + 4), a1[v10 + 3], a1[v10 + 4]);
      *(_WORD *)(*(void *)(a2 + 240) + v10 * 2 + 8) = a1[v10 + 5];
      *(_WORD *)(*(void *)(a2 + 240) + v10 * 2 + 10) = a1[v10 + 6];
      ++v11;
      v10 += 6;
    }
    while (v11 < *(unsigned __int16 *)(a2 + 248));
    unsigned int v12 = v10 * 2 + 2;
  }
  else
  {
    unsigned int v12 = 2;
  }
  uint64_t v13 = *(unsigned __int16 *)((char *)a1 + v12);
  *(_WORD *)(a2 + 264) = v13;
  unsigned int v14 = v12 + 2;
  unsigned int v37 = v12 + 2;
  uint64_t v15 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (32 * v13) | 1);
  *(void *)(a2 + 256) = v15;
  if (!v15) {
    goto LABEL_21;
  }
  if (!*(_WORD *)(a2 + 264))
  {
LABEL_12:
    FLOATSUR_SET_INT((_WORD *)(a2 + 192), *(unsigned __int16 *)((char *)a1 + v14), *(unsigned __int16 *)((char *)a1 + v14 + 2));
    uint64_t v22 = *(unsigned __int16 *)((char *)a1 + v14 + 4);
    *(_WORD *)(a2 + 208) = v22;
    unsigned int v23 = v14 + 6;
    unsigned int v37 = v23;
    uint64_t v24 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (10 * v22) | 1);
    *(void *)(a2 + 200) = v24;
    if (v24)
    {
      if (*(_WORD *)(a2 + 208))
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        do
        {
          readREGEX((uint64_t)a1, &v37, *(void *)(a2 + 200) + v25);
          __int16 v27 = *(unsigned __int16 *)((char *)a1 + v37);
          unsigned int v28 = (_WORD *)(*(void *)(a2 + 200) + v25 + 6);
          __int16 v29 = *(unsigned __int16 *)((char *)a1 + v37 + 2);
          unsigned int v23 = v37 + 4;
          v37 += 4;
          FLOATSUR_SET_INT(v28, v27, v29);
          ++v26;
          v25 += 10;
        }
        while (v26 < *(unsigned __int16 *)(a2 + 208));
      }
      FLOATSUR_SET_INT((_WORD *)(a2 + 216), *(unsigned __int16 *)((char *)a1 + v23), *(unsigned __int16 *)((char *)a1 + v23 + 2));
      uint64_t v30 = *(unsigned __int16 *)((char *)a1 + v23 + 4);
      *(_WORD *)(a2 + 232) = v30;
      uint64_t v31 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (12 * v30) | 1);
      *(void *)(a2 + 224) = v31;
      if (v31)
      {
        if (*(_WORD *)(a2 + 232))
        {
          uint64_t v32 = 0;
          unint64_t v33 = 0;
          unsigned int v34 = v23 + 14;
          do
          {
            uint64_t v35 = *(void *)(a2 + 224) + v32;
            FLOATSUR_SET_INT((_WORD *)(v35 + 4), *(unsigned __int16 *)((char *)a1 + v34 - 8), *(unsigned __int16 *)((char *)a1 + v34 - 6));
            FLOATSUR_SET_INT((_WORD *)(v35 + 8), *(unsigned __int16 *)((char *)a1 + v34 - 4), *(unsigned __int16 *)((char *)a1 + v34 - 2));
            *(_DWORD *)uint64_t v35 = *(unsigned __int16 *)((char *)a1 + v34);
            ++v33;
            v32 += 12;
            v34 += 10;
          }
          while (v33 < *(unsigned __int16 *)(a2 + 232));
        }
        return 0;
      }
    }
LABEL_21:
    log_OutPublic(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v36);
    return 2315264010;
  }
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  while (1)
  {
    uint64_t result = readRULE(*(void *)a2, (uint64_t)a1, &v37, (uint64_t *)(*(void *)(a2 + 256) + v16 + 8));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    __int16 v19 = *(unsigned __int16 *)((char *)a1 + v37);
    __int16 v20 = (_WORD *)(*(void *)(a2 + 256) + v16);
    __int16 v21 = *(unsigned __int16 *)((char *)a1 + v37 + 2);
    unsigned int v14 = v37 + 4;
    v37 += 4;
    FLOATSUR_SET_INT(v20, v19, v21);
    ++v17;
    v16 += 32;
    if (v17 >= *(unsigned __int16 *)(a2 + 264)) {
      goto LABEL_12;
    }
  }
}

uint64_t readNumSettingsCHUNK(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_WORD *)(a2 + 280) = v4;
  unsigned int v14 = 2;
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (8 * v4) | 1);
  *(void *)(a2 + 272) = v5;
  if (v5)
  {
    if (*(_WORD *)(a2 + 280))
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        readSTR2NUMRULE((uint64_t)a1, &v14, (_DWORD *)(*(void *)(a2 + 272) + v10));
        ++v11;
        v10 += 8;
      }
      while (v11 < *(unsigned __int16 *)(a2 + 280));
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v13);
    return 2315264010;
  }
}

uint64_t readProminenceCHUNK(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_WORD *)(a2 + 296) = v4;
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (4 * v4) | 1);
  *(void *)(a2 + 288) = v5;
  if (!v5) {
    goto LABEL_13;
  }
  if (*(_WORD *)(a2 + 296))
  {
    unint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      *(_DWORD *)(*(void *)(a2 + 288) + 4 * v10) = *(_DWORD *)&a1[2 * v10 + 1];
      v11 += 2;
      ++v10;
    }
    while (v10 < *(unsigned __int16 *)(a2 + 296));
  }
  else
  {
    unsigned int v11 = 1;
  }
  uint64_t v12 = a1[v11];
  *(_WORD *)(a2 + 312) = v12;
  unsigned int v18 = v11 * 2 + 2;
  uint64_t v13 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (24 * v12) | 1);
  *(void *)(a2 + 304) = v13;
  if (v13)
  {
    if (*(_WORD *)(a2 + 312))
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t result = readRULE(*(void *)a2, (uint64_t)a1, &v18, (uint64_t *)(*(void *)(a2 + 304) + v14));
        if ((result & 0x80000000) != 0) {
          break;
        }
        ++v15;
        v14 += 24;
        if (v15 >= *(unsigned __int16 *)(a2 + 312)) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_13:
    log_OutPublic(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v17);
    return 2315264010;
  }
  return result;
}

uint64_t readRegexCHUNK(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  __int16 v20 = a2;
  int v6 = *a2;
  *(_DWORD *)(a3 + 440) = *a2;
  if (v6)
  {
    uint64_t v7 = (a2[1] + 8);
    *(void *)(a3 + 448) = (char *)a2 + v7;
    uint64_t v8 = (v7 + v6);
  }
  else
  {
    uint64_t v8 = 4;
  }
  uint64_t v9 = *(unsigned __int16 *)((char *)a2 + v8);
  *(_WORD *)(a3 + 464) = v9;
  uint64_t v10 = heap_Calloc(*(void **)(*(void *)a3 + 8), 1, (4 * v9) | 1);
  *(void *)(a3 + 456) = v10;
  if (v10)
  {
    if (*(_WORD *)(a3 + 464))
    {
      unint64_t v16 = 0;
      unsigned int v17 = v8 + 2;
      do
      {
        *(_DWORD *)(*(void *)(a3 + 456) + 4 * v16) = *(_DWORD *)((char *)a2 + v17);
        v17 += 4;
        ++v16;
      }
      while (v16 < *(unsigned __int16 *)(a3 + 464));
    }
    return ssftriff_reader_DetachChunkData(a1, (uint64_t *)(a3 + 472), &v20, v11, v12, v13, v14, v15);
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v12, v13, v14, v15, v19);
    return 2315264010;
  }
}

uint64_t readStringCHUNK(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  __int16 v20 = a2;
  int v6 = *a2;
  *(_DWORD *)(a3 + 520) = *a2;
  if (v6)
  {
    uint64_t v7 = (a2[1] + 8);
    *(void *)(a3 + 528) = (char *)a2 + v7;
    uint64_t v8 = (v7 + v6);
  }
  else
  {
    uint64_t v8 = 4;
  }
  uint64_t v9 = *(unsigned __int16 *)((char *)a2 + v8);
  *(_WORD *)(a3 + 544) = v9;
  uint64_t v10 = heap_Calloc(*(void **)(*(void *)a3 + 8), 1, (4 * v9) | 1);
  *(void *)(a3 + 536) = v10;
  if (v10)
  {
    if (*(_WORD *)(a3 + 544))
    {
      unint64_t v16 = 0;
      unsigned int v17 = v8 + 2;
      do
      {
        *(_DWORD *)(*(void *)(a3 + 536) + 4 * v16) = *(_DWORD *)((char *)a2 + v17);
        v17 += 4;
        ++v16;
      }
      while (v16 < *(unsigned __int16 *)(a3 + 544));
    }
    return ssftriff_reader_DetachChunkData(a1, (uint64_t *)(a3 + 552), &v20, v11, v12, v13, v14, v15);
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v12, v13, v14, v15, v19);
    return 2315264010;
  }
}

uint64_t readRegexStringCHUNK(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  __int16 v20 = a2;
  int v6 = *a2;
  *(_DWORD *)(a3 + 480) = *a2;
  if (v6)
  {
    uint64_t v7 = (a2[1] + 8);
    *(void *)(a3 + 488) = (char *)a2 + v7;
    uint64_t v8 = (v7 + v6);
  }
  else
  {
    uint64_t v8 = 4;
  }
  uint64_t v9 = *(unsigned __int16 *)((char *)a2 + v8);
  *(_WORD *)(a3 + 504) = v9;
  uint64_t v10 = heap_Calloc(*(void **)(*(void *)a3 + 8), 1, (4 * v9) | 1);
  *(void *)(a3 + 496) = v10;
  if (v10)
  {
    if (*(_WORD *)(a3 + 504))
    {
      unint64_t v16 = 0;
      unsigned int v17 = v8 + 2;
      do
      {
        *(_DWORD *)(*(void *)(a3 + 496) + 4 * v16) = *(_DWORD *)((char *)a2 + v17);
        v17 += 4;
        ++v16;
      }
      while (v16 < *(unsigned __int16 *)(a3 + 504));
    }
    return ssftriff_reader_DetachChunkData(a1, (uint64_t *)(a3 + 512), &v20, v11, v12, v13, v14, v15);
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v12, v13, v14, v15, v19);
    return 2315264010;
  }
}

uint64_t readMSCHUNK(unsigned __int16 *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 560) = *a1;
  uint64_t v4 = a1[1];
  *(_WORD *)(a2 + 584) = v4;
  uint64_t v5 = (_DWORD *)heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (4 * v4) | 1);
  *(void *)(a2 + 576) = v5;
  if (!v5) {
    goto LABEL_47;
  }
  uint64_t v10 = *(unsigned __int16 *)(a2 + 584);
  if (*(_WORD *)(a2 + 584))
  {
    uint64_t v11 = 0;
    do
    {
      *v5++ = a1[v11 + 2];
      ++v11;
    }
    while (v10 != v11);
    uint64_t v12 = (8 * v10) | 1;
    unsigned int v13 = v11 * 2 + 4;
  }
  else
  {
    unsigned int v13 = 4;
    uint64_t v12 = 1;
  }
  unsigned int v51 = v13;
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, v12);
  *(void *)(a2 + 568) = v14;
  if (!v14) {
    goto LABEL_47;
  }
  if (*(_WORD *)(a2 + 584))
  {
    unint64_t v15 = 0;
    do
    {
      unint64_t v16 = *(void **)(*(void *)a2 + 8);
      if (*(_DWORD *)(*(void *)(a2 + 576) + 4 * v15) == 1)
      {
        *(void *)(*(void *)(a2 + 568) + 8 * v15) = heap_Calloc(v16, 1, 13);
        uint64_t v17 = *(void *)(*(void *)(a2 + 568) + 8 * v15);
        if (!v17) {
          goto LABEL_47;
        }
        readREGEX((uint64_t)a1, &v51, v17);
        unsigned int v18 = (_DWORD *)(*(void *)(*(void *)(a2 + 568) + 8 * v15) + 8);
        unsigned int v19 = v51;
      }
      else
      {
        *(void *)(*(void *)(a2 + 568) + 8 * v15) = heap_Calloc(v16, 1, 9);
        __int16 v20 = *(_DWORD **)(*(void *)(a2 + 568) + 8 * v15);
        if (!v20) {
          goto LABEL_47;
        }
        *__int16 v20 = *(_DWORD *)((char *)a1 + v13);
        unsigned int v19 = v13 + 4;
        unsigned int v18 = (_DWORD *)(*(void *)(*(void *)(a2 + 568) + 8 * v15) + 4);
      }
      *unsigned int v18 = *(_DWORD *)((char *)a1 + v19);
      unsigned int v13 = v19 + 4;
      unsigned int v51 = v19 + 4;
      ++v15;
    }
    while (v15 < *(unsigned __int16 *)(a2 + 584));
  }
  uint64_t v21 = *(unsigned __int16 *)((char *)a1 + v13);
  *(_WORD *)(a2 + 608) = v21;
  uint64_t v22 = (_DWORD *)heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (4 * v21) | 1);
  *(void *)(a2 + 600) = v22;
  if (!v22) {
    goto LABEL_47;
  }
  unsigned int v23 = v13 + 2;
  uint64_t v24 = *(unsigned __int16 *)(a2 + 608);
  if (*(_WORD *)(a2 + 608))
  {
    uint64_t v25 = *(unsigned __int16 *)(a2 + 608);
    do
    {
      int v26 = *(unsigned __int16 *)((char *)a1 + v23);
      v23 += 2;
      *v22++ = v26;
      --v25;
    }
    while (v25);
    uint64_t v27 = (8 * v24) | 1;
  }
  else
  {
    uint64_t v27 = 1;
  }
  unsigned int v51 = v23;
  uint64_t v28 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, v27);
  *(void *)(a2 + 592) = v28;
  if (!v28) {
    goto LABEL_47;
  }
  if (*(_WORD *)(a2 + 608))
  {
    unint64_t v29 = 0;
    do
    {
      uint64_t v30 = *(void **)(*(void *)a2 + 8);
      if (*(_DWORD *)(*(void *)(a2 + 600) + 4 * v29) == 1)
      {
        *(void *)(*(void *)(a2 + 592) + 8 * v29) = heap_Calloc(v30, 1, 13);
        uint64_t v31 = *(void *)(*(void *)(a2 + 592) + 8 * v29);
        if (!v31) {
          goto LABEL_47;
        }
        readREGEX((uint64_t)a1, &v51, v31);
        uint64_t v32 = (_DWORD *)(*(void *)(*(void *)(a2 + 592) + 8 * v29) + 8);
        unsigned int v33 = v51;
      }
      else
      {
        *(void *)(*(void *)(a2 + 592) + 8 * v29) = heap_Calloc(v30, 1, 9);
        unsigned int v34 = *(_DWORD **)(*(void *)(a2 + 592) + 8 * v29);
        if (!v34) {
          goto LABEL_47;
        }
        *unsigned int v34 = *(_DWORD *)((char *)a1 + v23);
        unsigned int v33 = v23 + 4;
        uint64_t v32 = (_DWORD *)(*(void *)(*(void *)(a2 + 592) + 8 * v29) + 4);
      }
      *uint64_t v32 = *(_DWORD *)((char *)a1 + v33);
      unsigned int v23 = v33 + 4;
      unsigned int v51 = v33 + 4;
      ++v29;
    }
    while (v29 < *(unsigned __int16 *)(a2 + 608));
  }
  uint64_t v35 = *(unsigned __int16 *)((char *)a1 + v23);
  *(_WORD *)(a2 + 632) = v35;
  unsigned int v36 = (_DWORD *)heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (4 * v35) | 1);
  *(void *)(a2 + 624) = v36;
  if (!v36) {
    goto LABEL_47;
  }
  unsigned int v37 = v23 + 2;
  uint64_t v38 = *(unsigned __int16 *)(a2 + 632);
  if (*(_WORD *)(a2 + 632))
  {
    uint64_t v39 = *(unsigned __int16 *)(a2 + 632);
    do
    {
      int v40 = *(unsigned __int16 *)((char *)a1 + v37);
      v37 += 2;
      *v36++ = v40;
      --v39;
    }
    while (v39);
    uint64_t v41 = (8 * v38) | 1;
  }
  else
  {
    uint64_t v41 = 1;
  }
  unsigned int v51 = v37;
  uint64_t v42 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, v41);
  *(void *)(a2 + 616) = v42;
  if (v42)
  {
    if (*(_WORD *)(a2 + 632))
    {
      unint64_t v43 = 0;
      do
      {
        unint64_t v44 = *(void **)(*(void *)a2 + 8);
        if (*(_DWORD *)(*(void *)(a2 + 624) + 4 * v43) == 1)
        {
          *(void *)(*(void *)(a2 + 616) + 8 * v43) = heap_Calloc(v44, 1, 13);
          uint64_t v45 = *(void *)(*(void *)(a2 + 616) + 8 * v43);
          if (!v45) {
            goto LABEL_47;
          }
          readREGEX((uint64_t)a1, &v51, v45);
          uint64_t v46 = (_DWORD *)(*(void *)(*(void *)(a2 + 616) + 8 * v43) + 8);
          unsigned int v47 = v51;
        }
        else
        {
          *(void *)(*(void *)(a2 + 616) + 8 * v43) = heap_Calloc(v44, 1, 9);
          uint64_t v48 = *(_DWORD **)(*(void *)(a2 + 616) + 8 * v43);
          if (!v48) {
            goto LABEL_47;
          }
          *uint64_t v48 = *(_DWORD *)((char *)a1 + v37);
          unsigned int v47 = v37 + 4;
          uint64_t v46 = (_DWORD *)(*(void *)(*(void *)(a2 + 616) + 8 * v43) + 4);
        }
        uint64_t result = 0;
        *uint64_t v46 = *(_DWORD *)((char *)a1 + v47);
        unsigned int v37 = v47 + 4;
        unsigned int v51 = v47 + 4;
        ++v43;
      }
      while (v43 < *(unsigned __int16 *)(a2 + 632));
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_47:
    log_OutPublic(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v50);
    return 2315264010;
  }
  return result;
}

uint64_t readPhraseTypeCHUNK(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_WORD *)(a2 + 320) = v4;
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (16 * v4) | 1);
  *(void *)(a2 + 336) = v5;
  uint64_t v10 = *(void *)a2;
  if (v5)
  {
    uint64_t v11 = heap_Calloc(*(void **)(v10 + 8), 1, (4 * *(unsigned __int16 *)(a2 + 320)) | 1);
    *(void *)(a2 + 328) = v11;
    if (v11)
    {
      if (!*(_WORD *)(a2 + 320)) {
        return 0;
      }
      unint64_t v12 = 0;
      unsigned int v13 = 2;
      do
      {
        *(_DWORD *)(*(void *)(a2 + 328) + 4 * v12) = *(_DWORD *)&a1[2 * v12 + 1];
        v13 += 4;
        ++v12;
        unint64_t v14 = *(unsigned __int16 *)(a2 + 320);
      }
      while (v12 < v14);
      unsigned int v23 = v13;
      if (!v14) {
        return 0;
      }
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)(a2 + 336);
      while (1)
      {
        unsigned int v17 = v23;
        *(_WORD *)(v16 + 16 * v15) = *(unsigned __int16 *)((char *)a1 + v23);
        unsigned int v23 = v17 + 2;
        uint64_t v18 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (24 * *(unsigned __int16 *)(*(void *)(a2 + 336) + 16 * v15)) | 1);
        uint64_t v16 = *(void *)(a2 + 336);
        *(void *)(v16 + 16 * v15 + 8) = v18;
        if (!v18) {
          break;
        }
        if (*(_WORD *)(v16 + 16 * v15))
        {
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          do
          {
            uint64_t result = readRULE(*(void *)a2, (uint64_t)a1, &v23, (uint64_t *)(*(void *)(v16 + 16 * v15 + 8) + v19));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            ++v20;
            uint64_t v16 = *(void *)(a2 + 336);
            v19 += 24;
          }
          while (v20 < *(unsigned __int16 *)(v16 + 16 * v15));
        }
        uint64_t result = 0;
        if (++v15 >= (unint64_t)*(unsigned __int16 *)(a2 + 320)) {
          return result;
        }
      }
    }
    uint64_t v10 = *(void *)a2;
  }
  log_OutPublic(*(void *)(v10 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v22);
  return 2315264010;
}

uint64_t readMSCOMPOUNDDEFCHUNK(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(_WORD *)(a2 + 360) = v4;
  uint64_t v5 = (_DWORD *)heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (4 * v4) | 1);
  *(void *)(a2 + 352) = v5;
  if (!v5) {
    goto LABEL_17;
  }
  uint64_t v10 = *(unsigned __int16 *)(a2 + 360);
  if (*(_WORD *)(a2 + 360))
  {
    uint64_t v11 = 0;
    do
      *v5++ = a1[++v11];
    while (v10 != v11);
    uint64_t v12 = (8 * v10) | 1;
    unsigned int v13 = v11 * 2 + 2;
  }
  else
  {
    unsigned int v13 = 2;
    uint64_t v12 = 1;
  }
  unsigned int v23 = v13;
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, v12);
  *(void *)(a2 + 344) = v14;
  if (v14)
  {
    if (*(_WORD *)(a2 + 360))
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(void **)(*(void *)a2 + 8);
        if (*(_DWORD *)(*(void *)(a2 + 352) + 4 * v15) == 1)
        {
          *(void *)(*(void *)(a2 + 344) + 8 * v15) = heap_Calloc(v16, 1, 13);
          uint64_t v17 = *(void *)(*(void *)(a2 + 344) + 8 * v15);
          if (!v17) {
            goto LABEL_17;
          }
          readREGEX((uint64_t)a1, &v23, v17);
          uint64_t v18 = (_DWORD *)(*(void *)(*(void *)(a2 + 344) + 8 * v15) + 8);
          unsigned int v19 = v23;
        }
        else
        {
          *(void *)(*(void *)(a2 + 344) + 8 * v15) = heap_Calloc(v16, 1, 9);
          unint64_t v20 = *(_DWORD **)(*(void *)(a2 + 344) + 8 * v15);
          if (!v20) {
            goto LABEL_17;
          }
          *unint64_t v20 = *(_DWORD *)((char *)a1 + v13);
          unsigned int v19 = v13 + 4;
          uint64_t v18 = (_DWORD *)(*(void *)(*(void *)(a2 + 344) + 8 * v15) + 4);
        }
        *uint64_t v18 = *(_DWORD *)((char *)a1 + v19);
        unsigned int v13 = v19 + 4;
        unsigned int v23 = v19 + 4;
        ++v15;
      }
      while (v15 < *(unsigned __int16 *)(a2 + 360));
    }
    return 0;
  }
  else
  {
LABEL_17:
    log_OutPublic(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v22);
    return 2315264010;
  }
}

uint64_t getStrSetting(uint64_t a1, char *__s1)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 40);
  if (!*(_WORD *)(a1 + 40)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 528);
  uint64_t v5 = *(void *)(a1 + 536);
  for (__int16 i = (unsigned int *)(*(void *)(a1 + 32) + 4);
        strcmp(__s1, (const char *)(v4 + *(unsigned int *)(v5 + 4 * *(i - 1))));
        i += 2)
  {
    if (!--v2) {
      return 0;
    }
  }
  return v4 + *(unsigned int *)(v5 + 4 * *i);
}

uint64_t usePandP(uint64_t *a1, _DWORD *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  __s1 = 0;
  uint64_t v25 = 0;
  memset(v26, 0, sizeof(v26));
  *a2 = 0;
  char v4 = 0;
  if ((paramc_ParamGetStr(a1[5], (uint64_t)"basicclcprosody", &__s1) & 0x80000000) == 0 && __s1)
  {
    if (!strcmp(__s1, "yes"))
    {
      log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"<%s> disables voice-dependent pandp rules", v5, v6, v7, (uint64_t)"basicclcprosody");
      char v4 = 1;
    }
    else
    {
      char v4 = 0;
    }
  }
  uint64_t result = getBrokerString((uint64_t)a1, 1, (char *)v26);
  if ((result & 0x80000000) == 0)
  {
    int v9 = brk_DataOpenEx(a1[3], (uint64_t)v26, 1, (uint64_t)&v25);
    if (v9 < 0) {
      char v13 = 1;
    }
    else {
      char v13 = v4;
    }
    if ((v13 & 1) == 0) {
      goto LABEL_23;
    }
    int v14 = v9;
    log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Voice-dependent PandP rules not found or disabled", v10, v11, v12, 0);
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t result = brk_DataClose(a1[3], v25);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    uint64_t result = getLegacyBrokerString((uint64_t)a1, (char *)v26);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    int v15 = brk_DataOpenEx(a1[3], (uint64_t)v26, 1, (uint64_t)&v25);
    char v19 = v15 < 0 ? 1 : v4;
    if ((v19 & 1) == 0)
    {
LABEL_23:
      *a2 = 1;
      goto LABEL_24;
    }
    int v20 = v15;
    log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Voice-dependent legacy PandP MS rules not found or disabled", v16, v17, v18, 0);
    if (v20 < 0 || (uint64_t result = brk_DataClose(a1[3], v25), (result & 0x80000000) == 0))
    {
      uint64_t result = getBrokerString((uint64_t)a1, 0, (char *)v26);
      if ((result & 0x80000000) == 0)
      {
        if ((brk_DataOpenEx(a1[3], (uint64_t)v26, 1, (uint64_t)&v25) & 0x80000000) != 0)
        {
          log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Voice-independent PandP rules not found", v21, v22, v23, 0);
          return 0;
        }
        *a2 = 1;
LABEL_24:
        uint64_t result = brk_DataClose(a1[3], v25);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t doMapStr(uint64_t a1, const char **a2, char *__s)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = (char *)*a2;
  if (v6 <= strlen(*a2)) {
    goto LABEL_4;
  }
  uint64_t v8 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v7, (v6 + 1));
  if (v8)
  {
    uint64_t v7 = (char *)v8;
    *a2 = (const char *)v8;
LABEL_4:
    strcpy(v7, __s);
    return 0;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v9, v10, v11, v12, v14);
  return 2315264010;
}

uint64_t doRetagging(uint64_t a1, const char **a2, _WORD *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)&v34[2] = 0;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"applying %d retagging rules", a6, a7, a8, *(unsigned __int16 *)(a6 + 88));
  if (!*(_WORD *)(a7 + 8)) {
    return 0;
  }
  uint64_t v15 = 0;
  uint64_t result = 0;
  while (!*(_WORD *)(a6 + 88))
  {
LABEL_13:
    if (++v15 >= (unint64_t)*(unsigned __int16 *)(a7 + 8)) {
      return result;
    }
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  while (1)
  {
    __int16 v33 = v15;
    int v32 = 3;
    *(_DWORD *)unsigned int v34 = 0;
    uint64_t v19 = *(void *)(a6 + 80);
    int v35 = 0;
    uint64_t result = matchPANDPRULE_TRule(a1, a2, a3, a4, a6, a7, v19 + v17 + 8, (uint64_t)&v32, &v35);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v35)
    {
      if (v35 != 1) {
        goto LABEL_13;
      }
      log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FIRED RETAGGING RULE %d RETAG POS %s to %s on word[%d]=%s", v20, v21, v22, v18);
      uint64_t v23 = 224 * v15;
      uint64_t result = doMapStr(a5, (const char **)(*(void *)(*(void *)a7 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)), (char *)(*(void *)(a6 + 528)+ *(unsigned int *)(*(void *)(a6 + 536) + 4 * *(unsigned int *)(*(void *)(a6 + 80) + v17))));
      if ((result & 0x80000000) == 0)
      {
        unsigned __int16 v24 = strlen(*(const char **)(*(void *)(*(void *)a7 + v23 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)));
        uint64_t v25 = (char *)heap_Calloc(*(void **)(a5 + 8), 1, v24 + 1);
        uint64_t v30 = *(void *)a7;
        *(void *)(*(void *)a7 + v23 + 88) = v25;
        if (v25)
        {
          strcpy(v25, *(const char **)(*(void *)(v30 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)));
          uint64_t result = 0;
          goto LABEL_13;
        }
        log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v26, v27, v28, v29, v31);
        return 2315264010;
      }
      return result;
    }
    ++v18;
    v17 += 32;
    if (v18 >= *(unsigned __int16 *)(a6 + 88)) {
      goto LABEL_13;
    }
  }
}

uint64_t doSubtagging(uint64_t a1, const char **a2, _WORD *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)&v38[2] = 0;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"applying %d subtagging rules", a6, a7, a8, *(unsigned __int16 *)(a6 + 104));
  if (!*(_WORD *)(a7 + 8)) {
    return 0;
  }
  uint64_t v35 = a5;
  uint64_t v15 = 0;
  uint64_t result = 0;
  while (!*(_WORD *)(a6 + 104))
  {
LABEL_15:
    if (++v15 >= (unint64_t)*(unsigned __int16 *)(a7 + 8)) {
      return result;
    }
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  while (1)
  {
    __int16 v37 = v15;
    int v36 = 3;
    *(_DWORD *)uint64_t v38 = 0;
    uint64_t v19 = *(void *)(a6 + 96);
    int v39 = 0;
    uint64_t result = matchPANDPRULE_TRule(a1, a2, a3, a4, a6, a7, v19 + v17 + 8, (uint64_t)&v36, &v39);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v39)
    {
      if (v39 != 1) {
        goto LABEL_15;
      }
      uint64_t v33 = v18;
      uint64_t v23 = v35;
      log_OutText(*(void *)(v35 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FIRED SUBTAGGING RULE %d RETAG POS %s to %s on word[%d]=%s", v20, v21, v22, v33);
      uint64_t v24 = *(void *)a7;
      uint64_t v25 = *(void *)a7 + 224 * v15;
      if (!*(void *)(v25 + 88))
      {
        unsigned __int16 v26 = strlen(*(const char **)(*(void *)(v25 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)));
        uint64_t v27 = (char *)heap_Calloc(*(void **)(v35 + 8), 1, v26 + 1);
        uint64_t v32 = *(void *)a7;
        *(void *)(*(void *)a7 + 224 * v15 + 88) = v27;
        if (!v27)
        {
          log_OutPublic(*(void *)(v35 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v28, v29, v30, v31, v34);
          return 2315264010;
        }
        strcpy(v27, *(const char **)(*(void *)(v32 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)));
        uint64_t v24 = *(void *)a7;
        uint64_t v23 = v35;
      }
      uint64_t result = doMapStr(v23, (const char **)(*(void *)(v24 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)), (char *)(*(void *)(a6 + 528)+ *(unsigned int *)(*(void *)(a6 + 536) + 4 * *(unsigned int *)(*(void *)(a6 + 96) + v17))));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = 0;
      goto LABEL_15;
    }
    ++v18;
    v17 += 32;
    if (v18 >= *(unsigned __int16 *)(a6 + 104)) {
      goto LABEL_15;
    }
  }
}

uint64_t setPhraseType(uint64_t a1, const char **a2, _WORD *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a7 + 32) = a8;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  Using ORT \"%s\"", a6, a7, a8, a8);
  uint64_t v39 = a7;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  Using POS \"%s\"", v15, v16, v17, *(void *)(a7 + 16));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  applying %d phrase type rules", v18, v19, v20, *(unsigned __int16 *)(a6 + 320));
  if (!*(_WORD *)(a6 + 320)) {
    return 0;
  }
  uint64_t v38 = a5;
  uint64_t v24 = 0;
  uint64_t matched = 0;
  int v41 = 0;
  while (1)
  {
    uint64_t v40 = 5;
    LOWORD(v41) = 0;
    int v42 = 1;
    uint64_t v26 = *(void *)(a6 + 336);
    unint64_t v27 = *(unsigned __int16 *)(v26 + 16 * v24);
    if (*(_WORD *)(v26 + 16 * v24)) {
      break;
    }
    LOWORD(v29) = 0;
LABEL_10:
    if (v27 == (unsigned __int16)v29)
    {
      log_OutText(*(void *)(v38 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"ALL %d RULES FIRE -> SET Phrase type %s", v21, v22, v23, v27);
      int v31 = strlen((const char *)(*(void *)(a6 + 528)
                                + *(unsigned int *)(*(void *)(a6 + 536)
                                                  + 4 * *(unsigned int *)(*(void *)(a6 + 328) + 4 * v24))));
      uint64_t v32 = (char *)heap_Calloc(*(void **)(v38 + 8), 1, (v31 + 1));
      *(void *)(v39 + 40) = v32;
      if (v32)
      {
        strcpy(v32, (const char *)(*(void *)(a6 + 528)+ *(unsigned int *)(*(void *)(a6 + 536)+ 4 * *(unsigned int *)(*(void *)(a6 + 328) + 4 * v24))));
      }
      else
      {
        log_OutPublic(*(void *)(v38 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v33, v34, v35, v36, v37);
        return 2315264010;
      }
      return matched;
    }
LABEL_12:
    if (++v24 >= (unint64_t)*(unsigned __int16 *)(a6 + 320)) {
      return matched;
    }
  }
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  while (1)
  {
    uint64_t matched = matchPANDPRULE_TRule(a1, a2, a3, a4, a6, v39, *(void *)(v26 + 16 * v24 + 8) + v28, (uint64_t)&v40, &v42);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    if (v42 != 1) {
      goto LABEL_12;
    }
    ++v29;
    uint64_t v26 = *(void *)(a6 + 336);
    unint64_t v27 = *(unsigned __int16 *)(v26 + 16 * v24);
    v28 += 24;
    if (v29 >= v27) {
      goto LABEL_10;
    }
  }
}

uint64_t getDomainFromPausingDefs(uint64_t a1, char *__s1, _WORD *a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 56);
  if (!*(_WORD *)(a1 + 56)) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 528);
  uint64_t v8 = *(void *)(a1 + 536);
  uint64_t v9 = *(unsigned int **)(a1 + 48);
  while (1)
  {
    unsigned int v10 = *v9;
    v9 += 2;
    if (!strcmp(__s1, (const char *)(v7 + *(unsigned int *)(v8 + 4 * v10)))) {
      break;
    }
    if (v3 == ++v6) {
      return 0;
    }
  }
  *a3 = v6;
  return 1;
}

uint64_t createLists(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int16 v3 = *((_WORD *)a3 + 4);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = a2;
  unsigned __int16 v6 = 0;
  uint64_t v7 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v8 = *a3;
  uint64_t v9 = 32 * v7;
  while (1)
  {
    uint64_t v10 = v6;
    uint64_t v11 = *(void *)(v8 + 224 * v6 + 56);
    if (v11)
    {
      if (*(_DWORD *)(v11 + v9) == 1) {
        break;
      }
    }
LABEL_33:
    if (++v6 >= v3) {
      return 0;
    }
  }
  uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), 1, (8 * *(unsigned __int16 *)(v5 + 72)) | 1);
  uint64_t v8 = *a3;
  *(void *)(*a3 + 224 * v10 + 64) = v12;
  if (v12)
  {
    if (*(_WORD *)(v5 + 72))
    {
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = *(void *)(v8 + 224 * v10 + 56) + 32 * v7;
        unsigned int v19 = *(unsigned __int16 *)(v18 + 8);
        unsigned int v20 = *(unsigned __int16 *)(v18 + 10);
        if (v19 > v20) {
          goto LABEL_30;
        }
        uint64_t v21 = v5;
        int v22 = 0;
        do
        {
          unsigned int v23 = (unsigned __int16)v19;
          uint64_t v24 = *(void *)(v8 + 224 * (unsigned __int16)v19 + 16);
          if (v24)
          {
            uint64_t v25 = *(const char **)(v24 + 8 * v17);
            if (v25) {
              v22 += strlen(v25) + 1;
            }
          }
          uint64_t v26 = *(void *)(v8 + 224 * v23 + 56);
          if (v26)
          {
            unint64_t v27 = *(const char **)(v26 + 32 * v17 + 16);
            if (v27)
            {
              if (*(_DWORD *)(v26 + 32 * v17) == 1) {
                v22 += strlen(v27) + 1;
              }
            }
          }
          LOWORD(v19) = v23 + 1;
        }
        while (v20 >= (unsigned __int16)(v23 + 1));
        uint64_t v5 = v21;
        if ((_WORD)v22)
        {
          uint64_t v28 = (unsigned char *)heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)v22 + 2);
          *(void *)(*(void *)(*a3 + 224 * v10 + 64) + 8 * v17) = v28;
          if (!v28) {
            goto LABEL_35;
          }
          unsigned char *v28 = 0;
          uint64_t v8 = *a3;
          uint64_t v29 = *(void *)(*a3 + 224 * v10 + 56) + 32 * v7;
          unsigned int v30 = *(unsigned __int16 *)(v29 + 8);
          if (v30 <= *(unsigned __int16 *)(v29 + 10))
          {
            do
            {
              unsigned int v31 = (unsigned __int16)v30;
              uint64_t v32 = *(void *)(v8 + 224 * (unsigned __int16)v30 + 16);
              if (v32)
              {
                uint64_t v33 = *(const char **)(v32 + 8 * v17);
                if (v33)
                {
                  strcat(*(char **)(*(void *)(v8 + 224 * v10 + 64) + 8 * v17), v33);
                  *(_WORD *)(*(void *)(*(void *)(*a3 + 224 * v10 + 64) + 8 * v17)
                           + strlen(*(const char **)(*(void *)(*a3 + 224 * v10 + 64) + 8 * v17))) = 32;
                  uint64_t v8 = *a3;
                }
              }
              uint64_t v34 = *(void *)(v8 + 224 * v31 + 56);
              if (v34)
              {
                uint64_t v35 = *(const char **)(v34 + 32 * v17 + 16);
                if (v35)
                {
                  if (*(_DWORD *)(v34 + 32 * v17) == 1)
                  {
                    strcat(*(char **)(*(void *)(v8 + 224 * v10 + 64) + 8 * v17), v35);
                    *(_WORD *)(*(void *)(*(void *)(*a3 + 224 * v10 + 64) + 8 * v17)
                             + strlen(*(const char **)(*(void *)(*a3 + 224 * v10 + 64) + 8 * v17))) = 32;
                    uint64_t v8 = *a3;
                  }
                }
              }
              LOWORD(v30) = v31 + 1;
            }
            while (*(unsigned __int16 *)(*(void *)(v8 + 224 * v10 + 56) + 32 * v7 + 10) >= (unsigned __int16)(v31 + 1));
          }
        }
        else
        {
LABEL_30:
          *(void *)(*(void *)(v8 + 224 * v10 + 64) + 8 * v17) = 0;
        }
        ++v17;
      }
      while (v17 < *(unsigned __int16 *)(v5 + 72));
    }
    unsigned __int16 v6 = *(_WORD *)(*(void *)(v8 + 224 * v10 + 56) + 32 * v7 + 10);
    unsigned __int16 v3 = *((_WORD *)a3 + 4);
    uint64_t v9 = 32 * v7;
    goto LABEL_33;
  }
LABEL_35:
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, 32 * v7);
  return 2315264010;
}

BOOL isStrSetting(uint64_t a1, char *__s1, const char *a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 40);
  if (!*(_WORD *)(a1 + 40)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 528);
  uint64_t v7 = *(void *)(a1 + 536);
  for (__int16 i = (unsigned int *)(*(void *)(a1 + 32) + 4);
        strcmp(__s1, (const char *)(v6 + *(unsigned int *)(v7 + 4 * *(i - 1))));
        i += 2)
  {
    if (!--v3) {
      return 0;
    }
  }
  return strcmp(a3, (const char *)(v6 + *(unsigned int *)(v7 + 4 * *i))) == 0;
}

uint64_t adjustWordIdxByWindow(unsigned __int16 *a1, uint64_t *a2, unsigned __int16 *a3, int a4, _DWORD *a5, unsigned __int16 *a6, uint64_t a7, uint64_t a8)
{
  *a5 = 1;
  uint64_t v8 = *a2;
  int v9 = a3[2];
  uint64_t v10 = *(void *)(*a2 + 224 * a3[2] + 56);
  if (!v10 || (uint64_t v11 = a1[12], !*(_DWORD *)(v10 + 32 * v11)))
  {
    uint64_t result = 0;
    *a5 = 0;
    return result;
  }
  if (a4 == 2)
  {
    unsigned int v15 = *((unsigned __int16 *)a2 + 4);
    if (v9 + 1 == v15)
    {
      *a5 = 0;
      if (a1[4] >= 2u)
      {
        uint64_t v16 = *(void *)(*(void *)a1 + 32);
        unint64_t v17 = "           [1] _RIGHT doesnt exist, return LH_FALSE";
LABEL_38:
        log_OutText(v16, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v17, (uint64_t)a6, a7, a8, 0);
LABEL_39:
        LOWORD(v9) = a3[2];
      }
    }
    else
    {
      int v23 = a3[4] + 1;
      unsigned __int16 v24 = a3[2];
      if ((v23 & 0x10000) != 0)
      {
LABEL_21:
        if (v15 > v24)
        {
          *a6 = v24;
          if (a1[4] >= 2u)
          {
            uint64_t v20 = *(void *)(*(void *)a1 + 32);
            uint64_t v21 = a3[2];
            int v22 = "           [3] _RIGHT wordIdx=%d";
            goto LABEL_24;
          }
          return 0;
        }
      }
      else
      {
        unsigned __int16 v24 = a3[2];
        while (v15 > v24)
        {
          unsigned __int16 v24 = *(_WORD *)(*(void *)(v8 + 224 * v24 + 56) + 32 * v11 + 10) + 1;
          if (!(_WORD)--v23) {
            goto LABEL_21;
          }
        }
      }
      *a5 = 0;
      if (a1[4] >= 2u)
      {
        uint64_t v16 = *(void *)(*(void *)a1 + 32);
        unint64_t v17 = "           [2] _RIGHT doesnt exist, return LH_FALSE";
        goto LABEL_38;
      }
    }
LABEL_40:
    uint64_t result = 0;
    *a6 = v9;
    return result;
  }
  if (a4 != 1)
  {
    if (a4 || a1[4] < 2u) {
      goto LABEL_40;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           _CUR wordIdx=%d", (uint64_t)a6, a7, a8, a3[2]);
    goto LABEL_39;
  }
  if (a3[2])
  {
    int v18 = a3[3] + 1;
    if ((v18 & 0x10000) == 0)
    {
      unsigned __int16 v19 = a3[2];
      do
      {
        unsigned __int16 v25 = v19 - 1;
        uint64_t v26 = *(void *)(v8 + 224 * v25 + 56) + 32 * v11;
        if (!*(_DWORD *)(v26 + 4))
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"wordindex=%d does not end previous phrase", (uint64_t)a6, a7, a8, v25);
          return 2315264000;
        }
        unsigned __int16 v19 = *(_WORD *)(v26 + 8);
        --v18;
      }
      while ((_WORD)v18 && *(_WORD *)(v26 + 8));
      if (!(_WORD)v18) {
        goto LABEL_15;
      }
      *a5 = 0;
      if (a1[4] >= 2u)
      {
        uint64_t v16 = *(void *)(*(void *)a1 + 32);
        unint64_t v17 = "           [2] _LEFT doesnt exist, return LH_FALSE";
        goto LABEL_38;
      }
      goto LABEL_40;
    }
    unsigned __int16 v19 = a3[2];
LABEL_15:
    *a6 = v19;
    if (a1[4] >= 2u)
    {
      uint64_t v20 = *(void *)(*(void *)a1 + 32);
      uint64_t v21 = a3[2];
      int v22 = "           [3] _LEFT wordIdx=%d";
LABEL_24:
      log_OutText(v20, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v22, (uint64_t)a6, a7, a8, v21);
      return 0;
    }
    return 0;
  }
  *a5 = 0;
  if (a1[4] >= 2u)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           [1] _LEFT doesnt exist, return LH_FALSE", (uint64_t)a6, a7, a8, 0);
    LOWORD(v9) = a3[2];
  }
  uint64_t result = 0;
  *a6 = v9;
  return result;
}

_WORD *readSTR2NUMRULE(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)(a1 + *a2);
  uint64_t v3 = a3 + 1;
  unsigned int v4 = *a2;
  unsigned int v5 = *a2 + 4;
  *a2 = v5;
  LOWORD(v5) = *(_WORD *)(a1 + v5);
  *a2 = v4 + 6;
  __int16 v6 = *(_WORD *)(a1 + v4 + 6);
  *a2 = v4 + 8;
  return FLOATSUR_SET_INT(v3, v5, v6);
}

uint64_t readRULE(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t result = readCONTEXT(a1, a2, a3, a4);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = readCONTEXT(a1, a2, a3, a4 + 1);
    if ((result & 0x80000000) == 0)
    {
      return readCONTEXT(a1, a2, a3, a4 + 2);
    }
  }
  return result;
}

uint64_t readCONTEXT(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(unsigned __int16 *)(a2 + v4);
  *a3 = v4 + 2;
  if (!v5) {
    return 0;
  }
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), 1, 17);
  if (v10
    && (uint64_t v15 = v10,
        *(_WORD *)(v10 + 8) = v5,
        uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), 1, (6 * v5) | 1),
        (*(void *)uint64_t v15 = v16) != 0))
  {
    if (*(_WORD *)(v15 + 8))
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      unsigned int v19 = *a3;
      do
      {
        *(_WORD *)(v16 + v17) = *(_WORD *)(a2 + v19);
        unsigned int v20 = *a3 + 2;
        *a3 = v20;
        *(_WORD *)(*(void *)v15 + v17 + 2) = *(_WORD *)(a2 + v20);
        unsigned int v21 = *a3;
        unsigned int v22 = *a3 + 2;
        *a3 = v22;
        LOBYTE(v22) = *(unsigned char *)(a2 + v22);
        unsigned int v19 = v21 + 4;
        *a3 = v19;
        uint64_t v16 = *(void *)v15;
        *(unsigned char *)(*(void *)v15 + v17 + 4) = v22;
        ++v18;
        v17 += 6;
      }
      while (v18 < *(unsigned __int16 *)(v15 + 8));
    }
    uint64_t v23 = 0;
    *a4 = v15;
  }
  else
  {
    uint64_t v23 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v11, v12, v13, v14, v25);
  }
  return v23;
}

uint64_t readREGEX(uint64_t result, unsigned int *a2, uint64_t a3)
{
  *(_WORD *)a3 = *(_WORD *)(result + *a2);
  unsigned int v3 = *a2 + 2;
  *a2 = v3;
  *(_WORD *)(a3 + 2) = *(_WORD *)(result + v3);
  unsigned int v4 = *a2;
  unsigned int v5 = *a2 + 2;
  *a2 = v5;
  LOBYTE(v5) = *(unsigned char *)(result + v5);
  *a2 = v4 + 4;
  *(unsigned char *)(a3 + 4) = v5;
  return result;
}

uint64_t nn_phrasing_checkIfActive(_WORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v19 = 0;
  unsigned int v20 = 0;
  *a4 = 0;
  uint64_t BrokerString = nn_phrasing_getBrokerString(a3, &v20);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  int v9 = v20;
  if ((ssftriff_reader_ObjOpen(a1, a2, 2, v20, "FINN", 1, (uint64_t *)&v19) & 0x80000000) != 0)
  {
    uint64_t v17 = 0;
    if (!v9) {
      return v17;
    }
LABEL_9:
    heap_Free(*(void **)(a3 + 8), (uint64_t)v9);
    return v17;
  }
  uint64_t v17 = ssftriff_reader_ObjClose(v19, v10, v11, v12, v13, v14, v15, v16);
  if ((v17 & 0x80000000) == 0) {
    *a4 = 1;
  }
  if (v9) {
    goto LABEL_9;
  }
  return v17;
}

uint64_t nn_phrasing_getBrokerString(uint64_t a1, char **a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v11 = &byte_20D5A22AE;
  *(void *)uint64_t v12 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v12);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v11);
    if ((result & 0x80000000) == 0)
    {
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      unsigned int v5 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 1024);
      *a2 = v5;
      if (v5)
      {
        return brokeraux_ComposeBrokerString(a1, (const char *)v13, 1, 1, *(char **)v12, 0, 0, v5, 0x400uLL);
      }
      else
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v10);
        return 2315264010;
      }
    }
  }
  return result;
}

uint64_t nn_phrasing_Load(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 *a9)
{
  *(void *)&v153[17] = *MEMORY[0x263EF8340];
  uint64_t v141 = 0;
  *((_OWORD *)a9 + 7) = 0u;
  *((_OWORD *)a9 + 8) = 0u;
  *((_OWORD *)a9 + 5) = 0u;
  *((_OWORD *)a9 + 6) = 0u;
  *((_OWORD *)a9 + 3) = 0u;
  *((_OWORD *)a9 + 4) = 0u;
  *((_OWORD *)a9 + 1) = 0u;
  *((_OWORD *)a9 + 2) = 0u;
  *(_OWORD *)a9 = 0u;
  __int16 v150 = 0;
  __int16 v149 = -1;
  unsigned __int8 v148 = 0;
  uint64_t v146 = 0;
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_puncpause", a9);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_resppause", a9 + 1);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  unsigned __int8 v139 = a9 + 2;
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_numadditionalfields", a9 + 2);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  int v138 = a9 + 3;
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_maxwordsinsent", a9 + 3);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_thresholdpercent", a9 + 4);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  unsigned int v137 = a9 + 5;
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_numfeats", a9 + 5);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_dolenverification", a9 + 8);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_dophrverification", a9 + 7);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_docompverification", a9 + 6);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_usedynamicstep", a9 + 9);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t v140 = 0;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_puncpause %d", v18, v19, v20, *a9);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_resppause %d", v21, v22, v23, a9[1]);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_numadditionalfields %d", v24, v25, v26, a9[2]);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_maxwordsinsent %d", v27, v28, v29, a9[3]);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_thresholdpercent %d", v30, v31, v32, a9[4]);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_numfeats %d", v33, v34, v35, a9[5]);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_dolenverification %d", v36, v37, v38, a9[8]);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_dophrverification %d", v39, v40, v41, a9[7]);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_docompverification %d", v42, v43, v44, a9[6]);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_usedynamicstep %d", v45, v46, v47, a9[9]);
  if (a9[5])
  {
    uint64_t v48 = heap_Calloc(*(void **)(a5 + 8), 1, 32 * a9[5]);
    *((void *)a9 + 4) = v48;
    if (!v48)
    {
      uint64_t v86 = 2315264010;
      log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v49, v50, v51, v52, v123);
      return v86;
    }
    if (*v137)
    {
      int v53 = 0;
      uint64_t v54 = 0;
      int v133 = 0;
      int v128 = v153;
      uint64_t v129 = &v152[9];
      strcpy((char *)&v126, "ng_feat");
      uint64_t v127 = *(void *)"nnpausing_feat";
      *(void *)size_t v134 = a5;
      while (1)
      {
        uint64_t v135 = v54;
        uint64_t v136 = v53;
        *(void *)int v128 = 0;
        *((void *)v128 + 1) = 0;
        v128[16] = 0;
        *(void *)unsigned __int16 v152 = v127;
        *(void *)&v152[7] = v126;
        LH_itoa(v54, v147, 0xAu);
        __strcat_chk();
        __int16 v149 = -1;
        uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, unsigned char *, char ***, __int16 *, unsigned __int8 *))(a6 + 96))(a7, a8, "fecfg", v152, &v150, &v149, &v148);
        if ((NumericFeatureValue & 0x80000000) != 0) {
          return NumericFeatureValue;
        }
        if (v149) {
          break;
        }
        uint64_t v65 = v136;
LABEL_34:
        uint64_t v54 = v135 + 1;
        int v53 = v65 + 4;
        if (v135 + 1 >= (unint64_t)(unsigned __int16)*v137) {
          goto LABEL_35;
        }
      }
      uint64_t v55 = *v150;
      uint64_t v56 = strchr(*v150, 124);
      if (v56)
      {
        *uint64_t v56 = 0;
        __s1 = v56 + 1;
        uint64_t v62 = strchr(v56 + 1, 124);
        if (v62)
        {
          *uint64_t v62 = 0;
          unsigned int __s = v62 + 1;
          int v63 = strchr(v62 + 1, 124);
          if (v63)
          {
            char *v63 = 0;
            uint64_t v130 = v63 + 1;
            int v64 = strchr(v63 + 1, v148);
            if (v64) {
              *int v64 = 0;
            }
LABEL_26:
            uint64_t NumericFeatureValue = setStr(a5, (char **)((char *)v136 + *((void *)a9 + 4)), v55, v57, v58, v59, v60, v61);
            if ((NumericFeatureValue & 0x80000000) != 0) {
              return NumericFeatureValue;
            }
            if (__s1)
            {
              int v71 = strcmp(__s1, "NUMERIC");
              uint64_t v72 = *((void *)a9 + 4);
              if (!v71)
              {
                uint64_t v73 = v136;
                *(_DWORD *)((char *)v136 + v72 + 8) = 1;
LABEL_32:
                uint64_t NumericFeatureValue = setStr(*(uint64_t *)v134, (char **)((char *)v73 + v72 + 16), __s, v66, v67, v68, v69, v70);
                if ((NumericFeatureValue & 0x80000000) != 0) {
                  return NumericFeatureValue;
                }
                int v74 = atoi(v130);
                uint64_t v75 = (char *)v73 + *((void *)a9 + 4);
                *((_WORD *)v75 + 13) = v74;
                *((_WORD *)v75 + 14) = v133;
                v133 += v74;
                uint64_t v65 = v73;
                a5 = *(void *)v134;
                goto LABEL_34;
              }
            }
            else
            {
              uint64_t v72 = *((void *)a9 + 4);
            }
            uint64_t v73 = v136;
            goto LABEL_32;
          }
LABEL_25:
          uint64_t v130 = 0;
          goto LABEL_26;
        }
      }
      else
      {
        __s1 = 0;
      }
      unsigned int __s = 0;
      goto LABEL_25;
    }
LABEL_35:
    unsigned int v76 = *(void **)(a5 + 8);
    *(void *)&long long v142 = ssftmap_ElemCopyString;
    *((void *)&v142 + 1) = ssftmap_ElemFreeString;
    uint64_t v143 = ssftmap_ElemCompareKeysString;
    int v144 = ssftmap_ElemCopyString;
    unsigned int v145 = ssftmap_ElemFreeString;
    uint64_t v136 = (uint64_t *)(a9 + 12);
    uint64_t NumericFeatureValue = ssftmap_ObjOpen(v76, 0, &v142, (uint64_t *)a9 + 3);
    if ((NumericFeatureValue & 0x80000000) != 0) {
      return NumericFeatureValue;
    }
    __int16 v149 = -1;
    uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a6 + 96))(a7, a8, "fecfg", "nnpausing_cols", &v150, &v149, &v148);
    if ((NumericFeatureValue & 0x80000000) != 0) {
      return NumericFeatureValue;
    }
    if (v149)
    {
      uint64_t v77 = *v150;
      unint64_t v78 = strchr(*v150, v148);
      if (v78)
      {
        *unint64_t v78 = 0;
        uint64_t v77 = *v150;
      }
      uint64_t v79 = strchr(v77, 124);
      if (v79)
      {
        uint64_t v80 = v79;
        unsigned __int16 v81 = 0;
        while (1)
        {
          *uint64_t v80 = 0;
          LH_itoa(v81, v151, 0xAu);
          log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Feature to index mappings %s -> %s", v82, v83, v84, (uint64_t)v77);
          uint64_t NumericFeatureValue = ssftmap_Insert(*v136, (uint64_t)v77, (uint64_t)v151);
          if ((NumericFeatureValue & 0x80000000) != 0) {
            return NumericFeatureValue;
          }
          ++v81;
          uint64_t v77 = v80 + 1;
          uint64_t v80 = strchr(v80 + 1, 124);
          if (!v80)
          {
            unsigned int v85 = v81;
            goto LABEL_48;
          }
        }
      }
      if (v77)
      {
        unsigned int v85 = 0;
LABEL_48:
        LH_itoa(v85, v151, 0xAu);
        uint64_t NumericFeatureValue = ssftmap_Insert(*v136, (uint64_t)v77, (uint64_t)v151);
        if ((NumericFeatureValue & 0x80000000) != 0) {
          return NumericFeatureValue;
        }
      }
    }
    if (*v137)
    {
      uint64_t v87 = 0;
      unint64_t v88 = 0;
      uint64_t v89 = *((void *)a9 + 4);
      do
      {
        uint64_t ReadOnly = ssftmap_FindReadOnly(*v136, *(void *)(v89 + v87 + 16), &v146);
        if ((ReadOnly & 0x1FFF) == 0x14)
        {
          log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37005, "%s%s", v91, v92, v93, v94, "expected default value for");
          return 2315264000;
        }
        uint64_t v86 = ReadOnly;
        __int16 v95 = atoi(v146);
        uint64_t v89 = *((void *)a9 + 4);
        *(_WORD *)(v89 + v87 + 24) = v95;
        ++v88;
        v87 += 32;
      }
      while (v88 < a9[5]);
      if ((v86 & 0x80000000) != 0) {
        return v86;
      }
    }
  }
  uint64_t NumericFeatureValue = nn_word_lkp_GetInterface(1u, (void *)a9 + 9);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  *((void *)a9 + 10) = safeh_GetNullHandle();
  *((void *)a9 + 11) = v96;
  *((void *)a9 + 12) = safeh_GetNullHandle();
  *((void *)a9 + 13) = v97;
  uint64_t NumericFeatureValue = (*(uint64_t (**)(void, void, const char *, _WORD *, uint64_t))(*((void *)a9 + 9)
                                                                                                  + 16))(*((void *)a9 + 10), *((void *)a9 + 11), "word", a1, a2);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t v98 = a9 + 56;
  uint64_t NumericFeatureValue = (*(uint64_t (**)(void, void, unsigned __int16 *))(*((void *)a9 + 9) + 40))(*((void *)a9 + 12), *((void *)a9 + 13), a9 + 56);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"word2vec length %d", v99, v100, v101, *((unsigned int *)a9 + 28));
  uint64_t v102 = heap_Alloc(*(void *)(a5 + 8), 4 * *((unsigned int *)a9 + 28));
  *((void *)a9 + 15) = v102;
  if (v102)
  {
    uint64_t BrokerString = nn_phrasing_getBrokerString(a5, &v141);
    int v108 = v141;
    if ((BrokerString & 0x80000000) != 0)
    {
      uint64_t v86 = BrokerString;
    }
    else
    {
      uint64_t v109 = fi_init(a1, a2, a3, a4, &v140, 0, (uint64_t)v141, (uint64_t)"FINN", 1, 0);
      if ((v109 & 0x80000000) != 0)
      {
        log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37006, 0, v110, v111, v112, v113, v125);
        uint64_t v86 = 2315264000;
      }
      else
      {
        uint64_t v86 = v109;
        uint64_t v114 = *v140;
        int v115 = *(_DWORD *)(*v140 + 52);
        if (a9[9])
        {
          if (v115 == 2 && *(_DWORD *)(v114 + 60) == *v98 + *v139)
          {
            unsigned int v116 = *v138;
            goto LABEL_64;
          }
          log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37003, "%s%d%s%d", v110, v111, v112, v113, "expected");
        }
        else
        {
          unsigned int v116 = *v138;
          if (v115 == 2 && *(_DWORD *)(v114 + 56) == v116 && *(_DWORD *)(v114 + 60) == *v98 + *v139)
          {
LABEL_64:
            *((void *)a9 + 6) = v140;
            uint64_t v117 = heap_Calloc(*(void **)(a5 + 8), 1, (12 * v116) | 1);
            *((void *)a9 + 16) = v117;
            if (!v117)
            {
              uint64_t v86 = 2315264010;
              log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v118, v119, v120, v121, v125);
            }
            goto LABEL_79;
          }
          log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37003, "%s%d%d%s%d%d", v110, v111, v112, v113, "expected");
        }
        uint64_t v86 = 2315264025;
      }
    }
  }
  else
  {
    uint64_t v86 = 2315264010;
    log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v103, v104, v105, v106, v124);
    int v108 = v141;
  }
LABEL_79:
  if (v108) {
    heap_Free(*(void **)(a5 + 8), (uint64_t)v108);
  }
  return v86;
}

uint64_t nn_phrasing_UnLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ssftmap_ObjClose(*(void *)(a3 + 24));
  uint64_t v6 = *(void *)(a3 + 32);
  if (v6)
  {
    if (*(_WORD *)(a3 + 10))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        if (*(void *)(v6 + v7))
        {
          heap_Free(*(void **)(a1 + 8), *(void *)(v6 + v7));
          uint64_t v6 = *(void *)(a3 + 32);
          *(void *)(v6 + v7) = 0;
        }
        if (*(void *)(v6 + v7 + 16))
        {
          heap_Free(*(void **)(a1 + 8), *(void *)(v6 + v7 + 16));
          uint64_t v6 = *(void *)(a3 + 32);
          *(void *)(v6 + v7 + 16) = 0;
        }
        ++v8;
        v7 += 32;
      }
      while (v8 < *(unsigned __int16 *)(a3 + 10));
    }
    heap_Free(*(void **)(a1 + 8), v6);
    *(void *)(a3 + 32) = 0;
  }
  uint64_t v9 = *(void *)(a3 + 120);
  if (v9)
  {
    heap_Free(*(void **)(a1 + 8), v9);
    *(void *)(a3 + 120) = 0;
  }
  uint64_t v10 = *(void *)(a3 + 72);
  if (v10)
  {
    (*(void (**)(void, void))(v10 + 24))(*(void *)(a3 + 96), *(void *)(a3 + 104));
    *(void *)(a3 + 72) = 0;
  }
  uint64_t v11 = fi_deinit(a1, a2, *(uint64_t **)(a3 + 48));
  uint64_t v12 = *(void *)(a3 + 128);
  if (v12) {
    heap_Free(*(void **)(a1 + 8), v12);
  }
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return v11;
}

uint64_t NNPausing_cleanLingdb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v20 = 0;
  if (!*(_WORD *)(a5 + 136)) {
    return 0;
  }
  int v24 = 0;
  int v25 = 0;
  __int16 v23 = 0;
  int v21 = 0;
  unsigned int v22 = 0;
  uint64_t v19 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v25);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a2 + 184))(a3, a4, (unsigned __int16)v25, 0, (char *)&v25 + 2);
    if ((result & 0x80000000) == 0 && HIWORD(v25) == 1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a2 + 176))(a3, a4, (unsigned __int16)v25, 0, &v19, &v24);
      if ((result & 0x80000000) == 0 && (unsigned __int16)v24 >= 2u)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v25, (char *)&v24 + 2);
        if ((result & 0x80000000) == 0)
        {
          unsigned __int16 v11 = HIWORD(v24);
          if (HIWORD(v24))
          {
            int v12 = 0;
            while (1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v11, 0, 1, &v22, &v24);
              if ((result & 0x80000000) != 0) {
                break;
              }
              if (v22 <= 0xA && ((1 << v22) & 0x610) != 0)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v24), 1, 1, &v21, &v24);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v24), 2, 1, (char *)&v21 + 2, &v24);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                if ((unsigned __int16)v21 != HIWORD(v21))
                {
                  if (v12 + 1 >= *(unsigned __int16 *)(a5 + 6)) {
                    return result;
                  }
                  uint64_t result = getWordIdx(a1, *(void *)(a5 + 128), *(unsigned __int16 *)(a5 + 136), (unsigned __int16)v21, HIWORD(v21), &v20, v14, v15);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  int v12 = v20;
                  if (*(_DWORD *)(*(void *)(a5 + 128) + 12 * v20) == 1)
                  {
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a2 + 160))(a3, a4, HIWORD(v24), 18, 1, &byte_20D5A22AE, &v23);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing : remove temp external label from  WordRecord[%d] word[%d] by setting to \"\"", v16, v17, v18, HIWORD(v24));
                  }
                }
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v24), (char *)&v24 + 2);
              if ((result & 0x80000000) == 0)
              {
                unsigned __int16 v11 = HIWORD(v24);
                if (HIWORD(v24)) {
                  continue;
                }
              }
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getWordIdx(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (_DWORD *)(a2 + 8);
    while (*(v9 - 1) != a4 || *v9 != a5)
    {
      v9 += 3;
      if (a3 == ++v8) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    *a6 = v8;
  }
  else
  {
LABEL_6:
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant align lingdb word : no word found with at %d,%d", (uint64_t)a6, a7, a8, a4);
    return 2315264000;
  }
  return result;
}

uint64_t NNPausing_UpdateLingdb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  int v33 = 0;
  int v34 = 0;
  __int16 v32 = 0;
  int v30 = 0;
  unsigned int v31 = 0;
  unsigned __int16 v29 = 0;
  uint64_t v28 = 0;
  int v27 = 0;
  __int16 v26 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v34);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a2 + 184))(a3, a4, (unsigned __int16)v34, 0, (char *)&v34 + 2);
    if ((result & 0x80000000) == 0 && HIWORD(v34) == 1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a2 + 176))(a3, a4, (unsigned __int16)v34, 0, &v28, &v33);
      if ((result & 0x80000000) == 0 && (unsigned __int16)v33 >= 2u)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v34, (char *)&v33 + 2);
        if ((result & 0x80000000) == 0)
        {
          unsigned __int16 v13 = HIWORD(v33);
          if (HIWORD(v33))
          {
            unsigned int v14 = 0;
            while (1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v13, 0, 1, &v31, &v33);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              if (v31 <= 0xA && ((1 << v31) & 0x610) != 0)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v33), 1, 1, &v30, &v33);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v33), 2, 1, (char *)&v30 + 2, &v33);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                if ((unsigned __int16)v30 != HIWORD(v30))
                {
                  if (v14 + 1 >= *(unsigned __int16 *)(a5 + 6)) {
                    return result;
                  }
                  uint64_t result = getWordIdx(a1, *(void *)(a5 + 128), *(unsigned __int16 *)(a5 + 136), (unsigned __int16)v30, HIWORD(v30), &v29, v16, v17);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  __int16 v26 = 0;
                  unsigned int v14 = v29;
                  int v18 = *(_DWORD *)(*a6 + 224 * v29 + 216);
                  uint64_t v19 = (__int16 *)a5;
                  if (v18 != 1)
                  {
                    if (v18 != 2) {
                      goto LABEL_29;
                    }
                    uint64_t v19 = (__int16 *)(a5 + 2);
                  }
                  __int16 v26 = *v19;
                  if (v26)
                  {
                    uint64_t result = checkForExternalSildur(a2, a3, a4, HIWORD(v33), &v27);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                    if (v27)
                    {
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing : clash with WordRecord[%d] word[%d] external pause has priority", v20, v21, v22, HIWORD(v33));
                    }
                    else
                    {
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, HIWORD(v33), 8, 1, &v26, &v32);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, __int16 *))(a2 + 160))(a3, a4, HIWORD(v33), 18, 9, "external", &v32);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing : updating WordRecord[%d] word[%d] set as ext pause with duration=%d", v23, v24, v25, HIWORD(v33));
                      *(_DWORD *)(*(void *)(a5 + 128) + 12 * v14) = 1;
                    }
                  }
                }
              }
LABEL_29:
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v33), (char *)&v33 + 2);
              if ((result & 0x80000000) == 0)
              {
                unsigned __int16 v13 = HIWORD(v33);
                if (HIWORD(v33)) {
                  continue;
                }
              }
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t nn_phrasing_ProcessSent(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v10 = a9;
  unsigned __int16 v173 = 0;
  LODWORD(v11) = *(unsigned __int16 *)(a5 + 8);
  uint64_t v172 = 0;
  uint64_t v169 = 0;
  __s2 = 0;
  int v167 = 0;
  *(_WORD *)(a7 + 136) = 0;
  *a9 = 1;
  if (!v11)
  {
    log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip NN pausing, no words found", a6, a7, a8, 0);
    uint64_t Str = 0;
    goto LABEL_34;
  }
  int v12 = a8;
  int v170 = 0;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v170 + 2);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a2 + 176))(a3, a4, HIWORD(v170), 1, &v169, &v170);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t Str = paramc_ParamGetStr(a1[5], (uint64_t)"langcode", &__s2);
  if ((Str & 0x80000000) == 0)
  {
    int v165 = v12;
    uint64_t v162 = a3;
    uint64_t v163 = a2;
    if ((_WORD)v170)
    {
      unint64_t v23 = 0;
      uint64_t v24 = 24;
      while (1)
      {
        if (*(_DWORD *)(v169 + v24 - 24) == 36)
        {
          uint64_t v25 = *(const char **)(v169 + v24);
          if (strcmp(v25, __s2))
          {
            MarkerArguint64_t Str = marker_getMarkerArgStr(1u);
            if (strcmp(v25, MarkerArgStr))
            {
              int v27 = *(const char **)(v169 + v24);
              uint64_t v28 = marker_getMarkerArgStr(9u);
              if (strcmp(v27, v28))
              {
                unsigned __int16 v29 = *(const char **)(v169 + v24);
                int v30 = marker_getMarkerArgStr(2u);
                if (strcmp(v29, v30)) {
                  break;
                }
              }
            }
          }
        }
        ++v23;
        v24 += 32;
        if (v23 >= (unsigned __int16)v170) {
          goto LABEL_13;
        }
      }
      uint64_t v40 = a1[4];
      uint64_t v31 = *(void *)(v169 + v24);
      uint64_t v41 = "skip NN pausing, as language tag \"%s\" found";
    }
    else
    {
LABEL_13:
      LODWORD(v31) = *(unsigned __int16 *)(a7 + 16);
      if (v165 == -1) {
        unsigned __int16 v32 = *(_WORD *)(a7 + 16);
      }
      else {
        unsigned __int16 v32 = v165;
      }
      int v33 = v32;
      if (v32)
      {
        LODWORD(v34) = *(unsigned __int16 *)(a5 + 8);
        if (*(_WORD *)(a5 + 8))
        {
          uint64_t v161 = a4;
          unint64_t v35 = 0;
          __int16 v36 = -1;
          uint64_t v37 = 208;
          while (1)
          {
            if (**(unsigned char **)(*(void *)a5 + v37) != 88 || v35 + 1 == v34)
            {
              if (v35)
              {
                uint64_t v39 = a1[4];
                if ((int)v35 - v36 >= v33)
                {
                  log_OutText(v39, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"found valid predictive range of length %d (minimum setting is %d) ending on word %d - continue with NN pausing", v19, v20, v21, -v36 + v35);
                  if (*(unsigned __int16 *)(a5 + 8) <= *(unsigned __int16 *)(a7 + 6)) {
                    unint64_t v11 = v11;
                  }
                  else {
                    unint64_t v11 = *(unsigned __int16 *)(a7 + 6);
                  }
                  if (*(_WORD *)(a7 + 18)) {
                    int v43 = v11;
                  }
                  else {
                    int v43 = *(unsigned __int16 *)(a7 + 6);
                  }
                  unsigned int v44 = (*(_DWORD *)(a7 + 112) + *(unsigned __int16 *)(a7 + 4)) * v43;
                  *(_DWORD *)(a7 + 56) = v44;
                  uint64_t v45 = (float *)heap_Alloc(a1[1], 4 * v44);
                  uint64_t v171 = v45;
                  if (v45)
                  {
                    unint64_t v160 = v11;
                    unsigned int v50 = *(_DWORD *)(a7 + 56);
                    if (v50)
                    {
                      int v51 = 0;
                      do
                        v45[(unsigned __int16)v51++] = -1.0;
                      while (v50 > (unsigned __int16)v51);
                    }
                    log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Dimensions:\nmaxWordsInSent=%d\nword2vecVecLength=%dnumAdditionalFields=%d", v47, v48, v49, *(unsigned __int16 *)(a7 + 6));
                    uint64_t v53 = v163;
                    int v54 = v165;
                    unsigned int v156 = v11;
                    if (v11)
                    {
                      uint64_t v55 = 0;
                      uint64_t v164 = 0;
                      unsigned __int16 v158 = 0;
                      uint64_t v56 = 0;
                      while (1)
                      {
                        unsigned int v57 = *(_DWORD *)(a7 + 112) + *(unsigned __int16 *)(a7 + 4);
                        if (v57)
                        {
                          int v58 = 0;
                          uint64_t v59 = v171;
                          int v60 = v55 * v57;
                          do
                          {
                            v59[v60] = 0.0;
                            ++v58;
                            ++v60;
                          }
                          while (v57 > (unsigned __int16)v58);
                        }
                        uint64_t v159 = v55;
                        uint64_t v61 = (void *)(*(void *)a5 + 224 * v164);
                        uint64_t v62 = *(const char **)(v61[2] + 8 * *(unsigned __int16 *)(a6 + 16));
                        int v63 = (const char *)v61[21];
                        int v64 = (const char *)v61[26];
                        __int16 v65 = strlen(v62);
                        unsigned __int16 v66 = (v65 & 0xFFC0) != 0 ? v65 : 64;
                        if (v56)
                        {
                          if (v66 <= v158)
                          {
                            int v71 = (char *)v56;
                          }
                          else
                          {
                            int v71 = (char *)heap_Realloc((uint64_t *)a1[1], v56, v66 + 1);
                            unsigned __int16 v158 = v66;
                            if (!v71)
                            {
                              uint64_t Str = 2315264010;
                              log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v67, v68, v69, v70, v155);
                              int v71 = (char *)v56;
                              goto LABEL_140;
                            }
                          }
                        }
                        else
                        {
                          int v71 = (char *)heap_Calloc((void *)a1[1], 1, v66 + 1);
                          unsigned __int16 v158 = v66;
                          if (!v71)
                          {
                            uint64_t Str = 2315264010;
                            log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v72, v73, v74, v75, v155);
                            goto LABEL_140;
                          }
                        }
                        if (!v63 || !strcmp(v63, "-"))
                        {
                          uint64_t v79 = v159;
                          if (!strcmp(v64, "X"))
                          {
                            unsigned __int16 v82 = v158;
                          }
                          else
                          {
                            v174[0] = 0;
                            unsigned int StartOfOrthPunc = getStartOfOrthPunc(v62, v174);
                            unsigned __int16 v81 = v158;
                            if (StartOfOrthPunc < v158) {
                              unsigned __int16 v81 = StartOfOrthPunc;
                            }
                            unsigned __int16 v82 = v174[0] == 1 ? v81 : v158;
                          }
                          uint64_t v83 = v82;
                          strncpy(v71, v62, v82);
                          v71[v83] = 0;
                        }
                        else
                        {
                          strcpy(v71, v63);
                          uint64_t v79 = v159;
                        }
                        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"word [%d] %s lookup \"%s\"", v76, v77, v78, v79);
                        uint64_t v84 = (*(uint64_t (**)(void, void, char *, void))(*(void *)(a7 + 72) + 56))(*(void *)(a7 + 96), *(void *)(a7 + 104), v71, *(void *)(a7 + 120));
                        if ((v84 & 0x1FFF) == 0x14)
                        {
                          if (((*(uint64_t (**)(void, void, const char *, void))(*(void *)(a7 + 72)
                                                                                                + 56))(*(void *)(a7 + 96), *(void *)(a7 + 104), "$MEANW2V$", *(void *)(a7 + 120)) & 0x1FFF) == 0x14)
                          {
                            log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37004, "%s%s", v85, v86, v87, v88, "expected");
                            uint64_t Str = 2315264000;
                            goto LABEL_140;
                          }
                        }
                        else
                        {
                          uint64_t Str = v84;
                          if ((v84 & 0x80000000) != 0) {
                            goto LABEL_140;
                          }
                        }
                        unsigned int v157 = v71;
                        int v89 = v57 * v79;
                        memcpy(&v171[v57 * v79], *(const void **)(a7 + 120), 4 * *(unsigned int *)(a7 + 112));
                        if (*(_WORD *)(a7 + 10)) {
                          break;
                        }
LABEL_100:
                        uint64_t v53 = v163;
                        uint64_t v55 = (v159 + 1);
                        uint64_t v119 = v157;
                        uint64_t v56 = (uint64_t)v157;
                        ++v164;
                        int v54 = v165;
                        if (v164 == v160) {
                          goto LABEL_106;
                        }
                      }
                      uint64_t v90 = 0;
                      unint64_t v91 = 0;
                      __int16 v92 = 0;
                      unsigned __int16 v93 = 0;
                      while (2)
                      {
                        uint64_t v94 = *(const char **)(*(void *)(a7 + 32) + v90);
                        __int16 v95 = "POS";
                        if (!strcmp(v94, "POS"))
                        {
                          uint64_t v99 = *(void *)(*(void *)(*(void *)a5 + 224 * v164 + 16)
                                          + 8 * *(unsigned __int16 *)(a6 + 18));
                        }
                        else
                        {
                          __int16 v95 = "PHR";
                          if (!strcmp(v94, "PHR"))
                          {
                            uint64_t v99 = *(void *)(*(void *)a5 + 224 * v164 + 80);
                          }
                          else
                          {
                            __int16 v95 = "TOK";
                            if (!strcmp(v94, "TOK"))
                            {
                              uint64_t v99 = *(void *)(*(void *)a5 + 224 * v164 + 168);
                            }
                            else
                            {
                              __int16 v95 = "COMP";
                              if (!strcmp(v94, "COMP"))
                              {
                                uint64_t v99 = *(void *)(*(void *)a5 + 224 * v164 + 176);
                              }
                              else
                              {
                                __int16 v95 = "SPUNC";
                                if (!strcmp(v94, "SPUNC"))
                                {
                                  uint64_t v99 = *(void *)(*(void *)a5 + 224 * v164 + 184);
                                }
                                else
                                {
                                  __int16 v95 = "EPUNC";
                                  if (!strcmp(v94, "EPUNC"))
                                  {
                                    uint64_t v99 = *(void *)(*(void *)a5 + 224 * v164 + 192);
                                  }
                                  else
                                  {
                                    __int16 v95 = "PUNC";
                                    if (strcmp(v94, "PUNC"))
                                    {
                                      if (!strcmp(v94, "ORTHPUNC"))
                                      {
                                        uint64_t v99 = *(void *)(*(void *)a5 + 224 * v164 + 208);
                                        unsigned int v100 = (unsigned __int16)v91;
                                        uint64_t v101 = (uint64_t)a1;
                                        uint64_t v102 = a7;
                                        uint64_t v103 = "ORTHPUNC";
LABEL_95:
                                        uint64_t IndexValue = getIndexValue(v101, v102, v100, (uint64_t)v103, v99, &v173);
                                        if ((IndexValue & 0x80000000) != 0)
                                        {
                                          uint64_t Str = IndexValue;
                                          int v71 = v157;
                                          goto LABEL_140;
                                        }
                                      }
                                      v173 -= v92;
                                      unsigned int v105 = v173;
                                      log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"translated thisFeatureIdx=%d", v96, v97, v98, v173);
                                      int v109 = v89 + v93;
                                      if (*(_DWORD *)(*(void *)(a7 + 32) + v90 + 8))
                                      {
                                        float v110 = (double)v105 + 1.0;
                                        uint64_t v111 = (v109 + *(_DWORD *)(a7 + 112));
                                        v171[v111] = v110;
                                        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NUMERIC SET [%d] (%d + %d + %d) = %3.1lf + 1.0", v106, v107, v108, v111);
                                        uint64_t v115 = *(void *)(a7 + 32);
                                        __int16 v116 = *(_WORD *)(v115 + v90 + 26);
                                        __int16 v117 = 1;
                                      }
                                      else
                                      {
                                        uint64_t v118 = v109 + v105 + *(_DWORD *)(a7 + 112);
                                        v171[v118] = 1.0;
                                        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"ONEHOT SET [%d] (%d + %d + %d + %d) = 1.0", v106, v107, v108, v118);
                                        uint64_t v115 = *(void *)(a7 + 32);
                                        __int16 v116 = *(_WORD *)(v115 + v90 + 26);
                                        __int16 v117 = v116;
                                      }
                                      v93 += v117;
                                      v92 += v116;
                                      log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"increase featureValOffset by %s %d", v112, v113, v114, *(void *)(v115 + v90));
                                      ++v91;
                                      v90 += 32;
                                      if (v91 >= *(unsigned __int16 *)(a7 + 10)) {
                                        goto LABEL_100;
                                      }
                                      continue;
                                    }
                                    uint64_t v99 = *(void *)(*(void *)a5 + 224 * v164 + 200);
                                  }
                                }
                              }
                            }
                          }
                        }
                        break;
                      }
                      unsigned int v100 = (unsigned __int16)v91;
                      uint64_t v101 = (uint64_t)a1;
                      uint64_t v102 = a7;
                      uint64_t v103 = v95;
                      goto LABEL_95;
                    }
                    uint64_t v119 = 0;
LABEL_106:
                    uint64_t v120 = v119;
                    LOWORD(v52) = *(_WORD *)(a7 + 8);
                    *(float *)(**(void **)(a7 + 48) + 196) = (float)v52 / 100.0;
                    if ((paramc_ParamGetInt(a1[5], (uint64_t)"nnpausingthresholdpercent", &v167) & 0x80000000) == 0)
                    {
                      float v125 = (float)v167 / 100.0;
                      *(float *)(**(void **)(a7 + 48) + 196) = v125;
                      log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing threshold set to %f", v122, v123, v124, COERCE__INT64(v125));
                    }
                    uint64_t v127 = v161;
                    uint64_t v126 = a9;
                    uint64_t v128 = v156;
                    if (!*(_WORD *)(a7 + 18)) {
                      uint64_t v128 = *(unsigned __int16 *)(a7 + 6);
                    }
                    uint64_t Str = fi_predict(*(uint64_t ****)(a7 + 48), (const void **)&v171, v128, &v172, v121, v122, v123, v124);
                    if ((Str & 0x80000000) != 0)
                    {
                      log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37002, 0, v129, v130, v131, v132, v155);
                    }
                    else
                    {
                      unsigned int v133 = *(unsigned __int16 *)(a5 + 8);
                      *(_WORD *)(a7 + 136) = v133;
                      if (*(_WORD *)(a7 + 6))
                      {
                        uint64_t v134 = 0;
                        uint64_t v135 = 0;
                        unint64_t v136 = 0;
                        unint64_t v137 = v160;
                        do
                        {
                          uint64_t v138 = *(void *)(a7 + 128);
                          *(_DWORD *)(v138 + v134) = 0;
                          if (v136 < v137)
                          {
                            unsigned __int8 v139 = (unsigned __int16 *)(*(void *)a5 + v135);
                            uint64_t v140 = v138 + v134;
                            *(_DWORD *)(v140 + 4) = *v139;
                            *(_DWORD *)(v140 + 8) = v139[1];
                            uint64_t v141 = a1[4];
                            if (*(void *)(v172 + 8 * v136)) {
                              log_OutText(v141, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Prediction [%d,%s]: %s", v130, v131, v132, v136);
                            }
                            else {
                              log_OutText(v141, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Prediction via thresholding [%d,%s]: 0", v130, v131, v132, v136);
                            }
                            long long v142 = *(const char **)(v172 + 8 * v136);
                            if (v142 && !strcmp(v142, "1"))
                            {
                              uint64_t v143 = *(void *)a5 + v135;
                              if (**(unsigned char **)(v143 + 208) == 88)
                              {
                                *(_DWORD *)(v143 + 216) = 2;
                                log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"_RESPPAUSE", v130, v131, v132, 0);
                              }
                              else
                              {
                                *(_DWORD *)(v143 + 216) = 1;
                                log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"_PUNCPAUSE", v130, v131, v132, 0);
                              }
                            }
                            else
                            {
                              *(_DWORD *)(*(void *)a5 + v135 + 216) = 0;
                            }
                            unint64_t v137 = v160;
                          }
                          ++v136;
                          v135 += 224;
                          v134 += 12;
                        }
                        while (v136 < *(unsigned __int16 *)(a7 + 6));
                        unsigned int v133 = *(unsigned __int16 *)(a5 + 8);
                        uint64_t v127 = v161;
                        uint64_t v126 = a9;
                        uint64_t v53 = v163;
                        int v54 = v165;
                      }
                      else
                      {
                        LODWORD(v137) = v160;
                      }
                      if (v137 < v133)
                      {
                        uint64_t v144 = v133;
                        unsigned int v145 = (_DWORD *)(*(void *)a5 + 224 * v137 + 216);
                        uint64_t v146 = v144 - v137;
                        do
                        {
                          *unsigned int v145 = 0;
                          v145 += 56;
                          --v146;
                        }
                        while (v146);
                      }
                      validatePauseLocations((uint64_t)a1, (unsigned __int16 *)a7, (uint64_t *)a5, a6, v54, v130, v131, v132);
                      *uint64_t v126 = 0;
                      uint64_t v150 = *(unsigned __int16 *)(a5 + 8);
                      if (!*(_WORD *)(a5 + 8)) {
                        goto LABEL_138;
                      }
                      int v151 = 0;
                      unsigned __int16 v152 = (int *)(*(void *)a5 + 216);
                      do
                      {
                        int v153 = *v152;
                        v152 += 56;
                        if (v153)
                        {
                          int v151 = 1;
                          *uint64_t v126 = 1;
                        }
                        --v150;
                      }
                      while (v150);
                      if (v151 == 1)
                      {
                        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN_PAUSING has prediction(s)", v147, v148, v149, 0);
                        uint64_t Str = NNPausing_UpdateLingdb((uint64_t)a1, v53, v162, v127, a7, (void *)a5);
                      }
                      else
                      {
LABEL_138:
                        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN_PAUSING has no prediction(s)", v147, v148, v149, 0);
                      }
                    }
                    int v71 = v120;
LABEL_140:
                    if (v171)
                    {
                      heap_Free((void *)a1[1], (uint64_t)v171);
                      uint64_t v171 = 0;
                    }
                    if (v71) {
                      heap_Free((void *)a1[1], (uint64_t)v71);
                    }
                  }
                  else
                  {
                    uint64_t Str = 2315264010;
                    log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v46, v47, v48, v49, v154);
                  }
                  return Str;
                }
                log_OutText(v39, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip %d word phrase ending at word %d", v19, v20, v21, v35 + -v36);
                __int16 v36 = v35;
              }
              else
              {
                log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip 1 word phrase at word %d", v19, v20, v21, 0);
                __int16 v36 = 0;
              }
            }
            ++v35;
            unint64_t v34 = *(unsigned __int16 *)(a5 + 8);
            v37 += 224;
            if (v35 >= v34)
            {
              LODWORD(v31) = *(unsigned __int16 *)(a7 + 16);
              uint64_t v10 = a9;
              break;
            }
          }
        }
      }
      uint64_t v40 = a1[4];
      uint64_t v31 = v31;
      uint64_t v41 = "skip NN pausing, no valid predictive range found (doLenVerification setting is %d, minWordSpan parameter is %d)";
    }
    log_OutText(v40, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v41, v19, v20, v21, v31);
LABEL_34:
    *uint64_t v10 = 0;
  }
  return Str;
}

uint64_t getIndexValue(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v22 = 0;
  __strcpy_chk();
  __strncat_chk();
  uint64_t ReadOnly = ssftmap_FindReadOnly(*(void *)(a2 + 24), (uint64_t)v23, &v22);
  if ((ReadOnly & 0x1FFF) == 0x14)
  {
    uint64_t v14 = *(void *)(a2 + 32) + 32 * a3;
    *a6 = *(_WORD *)(v14 + 24);
    if (*(_DWORD *)(v14 + 8)) {
      uint64_t v15 = "NUMERIC";
    }
    else {
      uint64_t v15 = "ONEHOT";
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s [%s] (default) convert %s to vector col %d", v11, v12, v13, (uint64_t)v15);
    return 0;
  }
  else
  {
    uint64_t v16 = ReadOnly;
    *a6 = atoi(v22);
    if (*(_DWORD *)(*(void *)(a2 + 32) + 32 * a3 + 8)) {
      uint64_t v20 = "NUMERIC";
    }
    else {
      uint64_t v20 = "ONEHOT";
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s [%s] convert %s to vector col %d", v17, v18, v19, (uint64_t)v20);
  }
  return v16;
}

uint64_t validatePauseLocations(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 == -1) {
    unsigned __int16 v9 = a2[8];
  }
  else {
    unsigned __int16 v9 = a5;
  }
  uint64_t result = log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"validatePauseLocations doCompVerification=%d doPHRVerification=%d doLenVerification=%d minWordSpan=%d", a6, a7, a8, a2[6]);
  LODWORD(v14) = *((unsigned __int16 *)a3 + 4);
  if (!*((_WORD *)a3 + 4)) {
    return result;
  }
  unsigned __int16 v40 = v9;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = *a3;
  uint64_t v18 = 208;
  do
  {
    unint64_t v19 = v15 + 1;
    BOOL v21 = 1;
    if (v15 + 1 < (unint64_t)v14)
    {
      uint64_t v20 = *(const char **)(v17 + v18 + 96);
      if (v20)
      {
        if (!strncmp(*(const char **)(v17 + v18 + 96), "B-", 2uLL) || !strcmp(v20, "O")) {
          BOOL v21 = 0;
        }
      }
    }
    if (*(void *)(v17 + v18 - 32) && !strcmp(*(const char **)(v17 + v18 - 32), "[COMP")) {
      int v16 = 1;
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[%d] %s bInCompoundWord=%d bPHRBnd=%d pause=%d orthPunc=%s    (%s %s)", v11, v12, v13, v15);
    uint64_t v17 = *a3;
    if (*(_DWORD *)(*a3 + v18 + 8))
    {
      if (v16 == 1 && a2[6] == 1 && strcmp(*(const char **)(v17 + v18 - 32), "COMP]"))
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block inside compound word", v11, v12, v13, v15);
LABEL_39:
        uint64_t v17 = *a3;
        *(_DWORD *)(*a3 + v18 + 8) = 0;
        goto LABEL_40;
      }
      char v22 = !v21;
      if (a2[7] != 1) {
        char v22 = 1;
      }
      if ((v22 & 1) == 0)
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block inside PHR", v11, v12, v13, v15);
        goto LABEL_39;
      }
      unint64_t v23 = *(const char **)(v17 + v18 - 40);
      int v24 = strcmp(v23, "-");
      unint64_t v25 = *((unsigned __int16 *)a3 + 4);
      if (v24)
      {
        if (v19 < v25)
        {
          __int16 v26 = *(const char **)(v17 + v18 + 184);
          if (strcmp(v26, "-"))
          {
            int v30 = *(unsigned __int8 *)v23;
            if ((v30 == 73 || v30 == 66) && *v26 == 73)
            {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block inside TOK", v27, v28, v29, v15);
              goto LABEL_39;
            }
          }
        }
      }
      uint64_t v31 = *(unsigned __int16 *)(a4 + 16);
      BOOL v32 = strcmp(*(const char **)(*(void *)(v17 + v18 - 192) + 8 * v31), "Â§") || v19 >= v25;
      if (!v32 && !strcmp(*(const char **)(*(void *)(v17 + v18 + 32) + 8 * v31), "Â§"))
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block inside DUMMYWORD sequence", v11, v12, v13, v15);
        goto LABEL_39;
      }
      if (v15 + 3 > v25)
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block on last 2 words", v11, v12, v13, v15);
        goto LABEL_39;
      }
    }
LABEL_40:
    uint64_t result = *(void *)(v17 + v18 - 32);
    if (result)
    {
      uint64_t result = strcmp((const char *)result, "COMP]");
      if (!result) {
        int v16 = 0;
      }
    }
    unint64_t v14 = *((unsigned __int16 *)a3 + 4);
    v18 += 224;
    ++v15;
  }
  while (v19 < v14);
  if (v40 && *((_WORD *)a3 + 4))
  {
    unint64_t v33 = 0;
    int v34 = 0;
    uint64_t v35 = *a3;
    unsigned __int16 v36 = -1;
    do
    {
      if (**(unsigned char **)(v35 + 224 * v33 + 208) != 88 || v34 + 1 == v14)
      {
        if (v33)
        {
          if (v34 - (__int16)v36 >= v40) {
            goto LABEL_62;
          }
          if (v36 == 0xFFFF) {
            unsigned __int16 v36 = 0;
          }
          if (v33 <= v36)
          {
LABEL_62:
            unsigned __int16 v36 = v33;
          }
          else
          {
            uint64_t v38 = v36;
            uint64_t v39 = 224 * v36;
            do
            {
              if (*(_DWORD *)(v35 + v39 + 216) == 2)
              {
                uint64_t result = log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : blocked via len constraints, span word %d to word %d < %d", v11, v12, v13, v38);
                uint64_t v35 = *a3;
                *(_DWORD *)(*a3 + v39 + 216) = 0;
              }
              ++v38;
              v39 += 224;
            }
            while (v33 != (unsigned __int16)v38);
            LODWORD(v14) = *((unsigned __int16 *)a3 + 4);
            unsigned __int16 v36 = v33;
          }
        }
        else
        {
          unsigned __int16 v36 = 0;
        }
      }
      int v34 = ++v33;
    }
    while (v33 < v14);
  }
  return result;
}

uint64_t getNumericFeatureValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a5 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", a4, &__c[3], &__c[1], __c);
  if ((v6 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3] != 0)
  {
    uint64_t v8 = **(const char ***)&__c[3];
    unsigned __int16 v9 = strchr(**(char ***)&__c[3], __c[0]);
    if (v9)
    {
      *unsigned __int16 v9 = 0;
      uint64_t v8 = **(const char ***)&__c[3];
    }
    *a5 = atoi(v8);
  }
  return v6;
}

uint64_t setStr(uint64_t a1, char **a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (__s)
  {
    uint64_t v11 = *(void **)(a1 + 8);
    int v12 = strlen(__s);
    uint64_t v13 = (char *)heap_Calloc(v11, 1, (v12 + 1));
    *a2 = v13;
    if (v13)
    {
      strcpy(v13, __s);
      return 0;
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v20);
      return 2315264010;
    }
  }
  else
  {
    uint64_t v18 = 2315264007;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, a5, a6, a7, a8, v20);
  }
  return v18;
}

uint64_t getPrecisionFactor(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 2);
  if (v2 >= 0xA)
  {
    int v4 = 0;
    do
    {
      __int16 v5 = v4++;
      BOOL v6 = v2 > 0x63;
      v2 /= 0xAu;
    }
    while (v6);
    unsigned __int16 v3 = v5 + 2;
  }
  else
  {
    unsigned __int16 v3 = 1;
  }
  unsigned int v7 = *(unsigned __int16 *)(a2 + 2);
  if (v7 >= 0xA)
  {
    int v9 = 0;
    do
    {
      __int16 v10 = v9++;
      BOOL v6 = v7 > 0x63;
      v7 /= 0xAu;
    }
    while (v6);
    unsigned __int16 v8 = v10 + 2;
  }
  else
  {
    unsigned __int16 v8 = 1;
  }
  int v11 = v3;
  if (v3 > v8)
  {
    int v12 = 0;
    uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v11 - 1);
    v14.i64[0] = 0x100000001;
    v14.i64[1] = 0x100000001;
    v15.i64[0] = 0xA0000000ALL;
    v15.i64[1] = 0xA0000000ALL;
    do
    {
      int8x16_t v16 = (int8x16_t)v14;
      int32x4_t v14 = vmulq_s32(v14, v15);
      v12 += 4;
    }
    while (((v11 + 3) & 0x1FFFC) != v12);
LABEL_18:
    unsigned int v18 = v12 - 4;
LABEL_19:
    int8x16_t v19 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v18), (int8x16_t)xmmword_20D62D9F0), v13), v16, (int8x16_t)v14);
    *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
    return (v19.i32[0] * v19.i32[1]);
  }
  if (v8 > v3)
  {
    int v12 = 0;
    uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v8 - 1);
    v14.i64[0] = 0x100000001;
    v14.i64[1] = 0x100000001;
    v17.i64[0] = 0xA0000000ALL;
    v17.i64[1] = 0xA0000000ALL;
    do
    {
      int8x16_t v16 = (int8x16_t)v14;
      int32x4_t v14 = vmulq_s32(v14, v17);
      v12 += 4;
    }
    while (((v8 + 3) & 0x1FFFC) != v12);
    goto LABEL_18;
  }
  if (v3)
  {
    int v21 = 0;
    int v22 = v3;
    int v23 = (v3 + 3) & 0x1FFFC;
    uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v22 - 1);
    v14.i64[0] = 0x100000001;
    v14.i64[1] = 0x100000001;
    v24.i64[0] = 0xA0000000ALL;
    v24.i64[1] = 0xA0000000ALL;
    do
    {
      int8x16_t v16 = (int8x16_t)v14;
      int32x4_t v14 = vmulq_s32(v14, v24);
      v21 += 4;
    }
    while (v23 != v21);
    unsigned int v18 = v21 - 4;
    goto LABEL_19;
  }
  return 1;
}

BOOL FLOATSUR_EQUAL_INT(unsigned __int16 *a1, int a2, int a3)
{
  return *a1 == a2 && a1[1] == a3;
}

BOOL FLOATSUR_EQUAL(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL FLOATSUR_GT_INT(unsigned __int16 *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *a1;
  if (v3 > a2) {
    return 1;
  }
  if (v3 >= a2) {
    return a1[1] > a3;
  }
  return 0;
}

BOOL FLOATSUR_GT(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = *a1;
  if (v3 > v2) {
    return 1;
  }
  if (v3 >= v2) {
    return a1[1] > a2[1];
  }
  return 0;
}

BOOL FLOATSUR_GTOREQUAL(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = *a1;
  unsigned int v4 = a2[1];
  if (v3 == v2)
  {
    if (a1[1] == v4) {
      return 1;
    }
  }
  else if (v3 > v2)
  {
    return 1;
  }
  return v3 >= v2 && a1[1] > v4;
}

BOOL FLOATSUR_LT_INT(unsigned __int16 *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *a1;
  if (v3 < a2) {
    return 1;
  }
  if (v3 > a2) {
    return 0;
  }
  return a1[1] < a3;
}

BOOL FLOATSUR_LT(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = *a1;
  if (v3 < v2) {
    return 1;
  }
  if (v3 > v2) {
    return 0;
  }
  return a1[1] < a2[1];
}

_WORD *FLOATSUR_SET_INT(_WORD *result, __int16 a2, __int16 a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

_DWORD *FLOATSUR_SET(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t FLOATSUR_PLUS(_WORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v14 = 0;
  unsigned int v13 = 0;
  uint64_t result = getVals(a2, a3, (unsigned int *)&v14 + 1, (uint64_t)&v14, &v13);
  int v5 = v13 + v14;
  int v6 = HIDWORD(v14);
  unsigned int v7 = (v13 + v14) / HIDWORD(v14);
  *a1 = v7;
  unsigned int v8 = v5 - (unsigned __int16)v7 * v6;
  if (v8) {
    BOOL v9 = v8 % 0xA == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    do
    {
      unsigned int v10 = v8;
      v8 /= 0xAu;
    }
    while (v10 >= 0xA && v8 == 10 * ((429496730 * (unint64_t)v8) >> 32));
  }
  if (v8 < 0x10000)
  {
    LOWORD(v11) = v8;
  }
  else
  {
    do
    {
      unsigned int v11 = v8 / 0xA;
      unsigned int v12 = v8 >> 17;
      v8 /= 0xAu;
    }
    while (v12 > 4);
  }
  a1[1] = v11;
  return result;
}

uint64_t getVals(unsigned __int16 *a1, unsigned __int16 *a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  roundUpAndNormalize((uint64_t)a1);
  roundUpAndNormalize((uint64_t)a2);
  uint64_t result = getPrecisionFactor((uint64_t)a1, (uint64_t)a2);
  *a3 = result;
  int v11 = *a1;
  unsigned int v12 = a1[1];
  *(_DWORD *)a4 = v12 + result * v11;
  int v13 = *a2;
  unsigned int v14 = a2[1];
  unsigned int v15 = v14 + *a3 * v13;
  *a5 = v15;
  if (*(_DWORD *)a4 >= 0x10000u && v15 >= 0x10000)
  {
    __int16 v16 = 1;
    do
    {
      if (v15 < 0x10000) {
        break;
      }
      v16 *= 10;
      unsigned int v17 = *a3 / 0xA;
      *a3 = v17;
      *(_DWORD *)a4 = v12 / (v16 & 0xFFFEu) + v17 * v11;
      unsigned int v15 = v14 / (v16 & 0xFFFEu) + *a3 * v13;
      *a5 = v15;
    }
    while (*(_WORD *)(a4 + 2));
  }
  return result;
}

uint64_t FLOATSUR_PLUS_INT(_DWORD *a1, unsigned __int16 *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v6 = 0;
  v7[0] = a3;
  v7[1] = a4;
  uint64_t result = FLOATSUR_PLUS(&v6, a2, v7);
  *a1 = v6;
  return result;
}

uint64_t FLOATSUR_MINUS(_WORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v15 = 0;
  unsigned int v14 = 0;
  uint64_t result = getVals(a2, a3, (unsigned int *)&v15 + 1, (uint64_t)&v15, &v14);
  unsigned int v5 = v14;
  int v6 = v15;
  if (v15 >= v14)
  {
    int v7 = HIDWORD(v15);
    unsigned int v8 = (v15 - v14) / HIDWORD(v15);
    *a1 = v8;
    unsigned int v9 = v6 - (v5 + (unsigned __int16)v8 * v7);
    if (v9) {
      BOOL v10 = v9 % 0xA == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      do
      {
        unsigned int v11 = v9;
        v9 /= 0xAu;
      }
      while (v11 >= 0xA && v9 == 10 * ((429496730 * (unint64_t)v9) >> 32));
    }
    if (v9 < 0x10000)
    {
      LOWORD(v12) = v9;
    }
    else
    {
      do
      {
        unsigned int v12 = v9 / 0xA;
        unsigned int v13 = v9 >> 17;
        v9 /= 0xAu;
      }
      while (v13 > 4);
    }
    a1[1] = v12;
    return roundUpAndNormalize((uint64_t)a1);
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
  return result;
}

uint64_t roundUpAndNormalize(uint64_t result)
{
  unsigned int v1 = *(unsigned __int16 *)(result + 2);
  if (v1 >= 0x64)
  {
    do
    {
      unsigned int v2 = v1;
      v1 /= 0xAu;
    }
    while (v2 >= 0x3E8);
    *(_WORD *)(result + 2) = v1;
    if (v2 >= 0xA && v1 == 10 * ((429496730 * (unint64_t)v1) >> 32))
    {
      do
      {
        unsigned int v3 = v1;
        v1 /= 0xAu;
      }
      while (v3 >= 0xA && v1 == 10 * ((429496730 * (unint64_t)v1) >> 32));
      *(_WORD *)(result + 2) = v1;
    }
  }
  if (v1 <= 9) {
    *(_WORD *)(result + 2) = 10 * v1;
  }
  return result;
}

uint64_t FLOATSUR_MINUS_INT(_DWORD *a1, unsigned __int16 *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v6 = 0;
  v7[0] = a3;
  v7[1] = a4;
  uint64_t result = FLOATSUR_MINUS(&v6, a2, v7);
  *a1 = v6;
  return result;
}

uint64_t FLOATSUR_TIMES(_WORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v14 = 0;
  unsigned int v13 = 0;
  uint64_t result = getVals(a2, a3, (unsigned int *)&v14 + 1, (uint64_t)&v14, &v13);
  int v5 = v13 * v14;
  unsigned int v6 = HIDWORD(v14) * HIDWORD(v14);
  unsigned int v7 = v13 * v14 / (HIDWORD(v14) * HIDWORD(v14));
  if (v7 < 0x10000)
  {
    *a1 = v7;
    unsigned int v8 = v5 - v7 * v6;
    if (v8)
    {
      unsigned int v9 = v6 / 0xA;
      if (v8 >= v9)
      {
        HIDWORD(v10) = -858993459 * v8;
        LODWORD(v10) = -858993459 * v8;
        if ((v10 >> 1) <= 0x19999999)
        {
          do
          {
            unsigned int v11 = v8;
            v8 /= 0xAu;
          }
          while (v11 >= 0xA && v8 == 10 * ((429496730 * (unint64_t)v8) >> 32));
        }
        if (v8 < 0x10000)
        {
          LOWORD(v9) = v8;
        }
        else
        {
          do
          {
            unsigned int v9 = v8 / 0xA;
            unsigned int v12 = v8 >> 17;
            v8 /= 0xAu;
          }
          while (v12 > 4);
        }
      }
      else
      {
        LOWORD(v9) = 10 * v8 / v9 > 5;
      }
    }
    else
    {
      LOWORD(v9) = 0;
    }
    a1[1] = v9;
    return roundUpAndNormalize((uint64_t)a1);
  }
  else
  {
    *(_DWORD *)a1 = 0xFFFF;
  }
  return result;
}

uint64_t FLOATSUR_TIMES_INT(_DWORD *a1, unsigned __int16 *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v6 = 0;
  v7[0] = a3;
  v7[1] = a4;
  uint64_t result = FLOATSUR_TIMES(&v6, a2, v7);
  *a1 = v6;
  return result;
}

uint64_t FLOATSUR_DIV(_WORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v15 = 0;
  unsigned int v14 = 0;
  uint64_t result = getVals(a2, a3, (unsigned int *)&v15 + 1, (uint64_t)&v15, &v14);
  unsigned int v5 = v14;
  if (v14)
  {
    int v6 = v15;
    unsigned int v7 = v15 / v14;
    *a1 = v15 / v14;
    int v8 = v6 - v7 * v5;
    if (v8)
    {
      unsigned int v9 = HIDWORD(v15) * v8 * HIDWORD(v15);
      unsigned int v10 = v9 / v5;
      if (v5 <= v9 && !(v10 % 0xA))
      {
        do
        {
          unsigned int v11 = v10;
          v10 /= 0xAu;
        }
        while (v11 >= 0xA && v10 == 10 * ((429496730 * (unint64_t)v10) >> 32));
      }
      if (v10 < 0x10000)
      {
        LOWORD(v12) = v10;
      }
      else
      {
        do
        {
          unsigned int v12 = v10 / 0xA;
          unsigned int v13 = v10 >> 17;
          v10 /= 0xAu;
        }
        while (v13 > 4);
      }
    }
    else
    {
      LOWORD(v12) = 0;
    }
    a1[1] = v12;
    return roundUpAndNormalize((uint64_t)a1);
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
  return result;
}

uint64_t load_stress_models(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _WORD *a7, uint64_t a8, _DWORD *a9, void *a10, void *a11, uint64_t a12, void *a13, _OWORD *a14, _WORD *a15, BOOL *a16)
{
  *(void *)&__c[3] = 0;
  uint64_t v39 = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  *(void *)&long long v35 = safeh_GetNullHandle();
  *((void *)&v35 + 1) = v23;
  *a10 = 0;
  *a11 = 0;
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, unsigned char *, unsigned char *))(a6 + 96))(a4, a5, "fecfg", "statbnd_stress", &v39, &__c[1], __c);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v33 = a8;
  BOOL v25 = 0;
  if (*(unsigned __int16 *)&__c[1] == 1 && v39)
  {
    (*v39)[strlen(*v39) - 1] = 0;
    BOOL v25 = strcmp(*v39, "yes") == 0;
  }
  *(_WORD *)&__c[1] = 0;
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, unsigned char *, unsigned char *))(a6 + 96))(a4, a5, "fecfg", "statbnd_stress_albert", &v39, &__c[1], __c);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  BOOL v26 = 0;
  if (*(unsigned __int16 *)&__c[1] == 1 && v39)
  {
    (*v39)[strlen(*v39) - 1] = 0;
    BOOL v26 = strcmp(*v39, "yes") == 0;
  }
  if (!v25) {
    goto LABEL_17;
  }
  BOOL v27 = v26;
  uint64_t inited = fe_stress_tryLoading_STRESS_igModel(a1, a2, a3, &v37);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *a10 = v37;
  uint64_t inited = Init_stress_nn_model(a3, a1, a2, a7, v33, &v36);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *a11 = v36;
  uint64_t v28 = v27 ? "albert" : "char";
  uint64_t inited = (*(uint64_t (**)(void, void, char *, _WORD *, uint64_t, long long *))(a12 + 16))(*a13, a13[1], v28, a1, a2, &v35);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *a14 = v35;
  *a9 = 1;
  *a16 = v27;
LABEL_17:
  *a15 = 20;
  __c[0] = 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a6 + 96))(a4, a5, "fecfg", "statbnd_pos_dimension", &__c[3], &__c[1], __c);
  if ((v29 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    int v30 = **(const char ***)&__c[3];
    uint64_t v31 = strchr(**(char ***)&__c[3], __c[0]);
    if (v31)
    {
      *uint64_t v31 = 0;
      int v30 = **(const char ***)&__c[3];
    }
    *a15 = atoi(v30);
  }
  return v29;
}

uint64_t fe_stress_tryLoading_STRESS_igModel(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  memset(v29, 0, 240);
  *(void *)BOOL v26 = 0;
  uint64_t v27 = 0;
  *a4 = 0;
  *(void *)uint64_t v28 = 0;
  memset(v30, 0, 128);
  v29[15] = 0u;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", v28);
  if ((Str & 0x80000000) != 0
    || (uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"fecfg", &v27), (Str & 0x80000000) != 0)
    || (__strcat_chk(),
        __strcat_chk(),
        __strcat_chk(),
        __strcat_chk(),
        uint64_t Str = brokeraux_ComposeBrokerString(a3, v30, 1, 1, *(char **)v28, 0, 0, (char *)v29, 0x100uLL),
        (Str & 0x80000000) != 0)
    || (uint64_t Str = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v29, "IGTR", 1031, (uint64_t *)v26),
        (Str & 0x80000000) != 0))
  {
    uint64_t v21 = Str;
  }
  else
  {
    __int16 v16 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
    *a4 = (uint64_t)v16;
    if (v16)
    {
      uint64_t v21 = igtree_Init(a1, a2, *(uint64_t *)v26, v16);
      ssftriff_reader_CloseChunk(*(uint64_t *)v26);
      if ((v21 & 0x80001FFF) == 0x14)
      {
        ssftriff_reader_CloseChunk(*(uint64_t *)v26);
        uint64_t v21 = 0;
      }
    }
    else
    {
      log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v25);
      uint64_t v21 = 2315264010;
    }
  }
  if (*(void *)v26)
  {
    uint64_t v22 = ssftriff_reader_ObjClose(*(void **)v26, v9, v10, v11, v12, v13, v14, v15);
    if ((v21 & 0x80000000) == 0)
    {
      uint64_t v23 = v22;
      if ((v22 & 0x80000000) != 0)
      {
        if (*a4)
        {
          heap_Free(*(void **)(a3 + 8), *a4);
          *a4 = 0;
        }
        return v23;
      }
    }
  }
  return v21;
}

uint64_t Init_stress_nn_model(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, void *a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  memset(v21, 0, 240);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  *a6 = 0;
  *(void *)uint64_t v20 = 0;
  memset(v22, 0, 128);
  v21[15] = 0u;
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v20) & 0x80000000) == 0
    && (paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v19) & 0x80000000) == 0)
  {
    __strcat_chk();
    __strcat_chk();
    __strcat_chk();
    __strcat_chk();
    brokeraux_ComposeBrokerString(a1, v22, 1, 1, *(char **)v20, 0, 0, (char *)v21, 0x100uLL);
  }
  uint64_t v15 = fi_init(a2, a3, a4, a5, &v18, 0, (uint64_t)v21, (uint64_t)"FINN", 1, 0);
  if ((v15 & 0x80000000) != 0) {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Init Stress FI model failed", v12, v13, v14, v17);
  }
  else {
    *a6 = v18;
  }
  return v15;
}

uint64_t *free_stress_model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (uint64_t *)a4;
  if (a3)
  {
    igtree_Deinit(a1, a3, a3, a4, a5, a6, a7, a8);
    heap_Free(*(void **)(a1 + 8), a3);
  }
  if (v11) {
    uint64_t v11 = (uint64_t *)fi_deinit(a1, a2, v11);
  }
  if (a5) {
    (*(void (**)(uint64_t, uint64_t))(a5 + 24))(a6, a7);
  }
  return v11;
}

uint64_t fe_stress_process(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t ***a9, unsigned __int16 a10, int a11)
{
  uint64_t v17 = heap_Calloc((void *)a1[1], 1, 16);
  if (!v17)
  {
    uint64_t inited = 2315264010;
    log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v18, v19, v20, v21, v446);
    return inited;
  }
  uint64_t v22 = v17;
  int v533 = 0;
  int v534 = 0;
  v535 = 0;
  v536 = 0;
  unsigned __int16 v532 = 0;
  int v530 = 0;
  unsigned int v531 = 0;
  int v529 = 0;
  v527 = 0;
  *(void *)v528 = 0;
  v526 = 0;
  *(_WORD *)(v17 + 12) = 0;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a4 + 104))(a2, a3, 1, 0, (char *)&v534 + 2);
  if ((v23 & 0x80000000) != 0) {
    goto LABEL_572;
  }
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, void, int *))(a4 + 184))(a2, a3, HIWORD(v534), 0, &v533);
  int v25 = 0;
  if ((inited & 0x80000000) != 0) {
    goto LABEL_287;
  }
  if ((unsigned __int16)v533 != 1) {
    goto LABEL_287;
  }
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, void, const char **, char *))(a4 + 176))(a2, a3, HIWORD(v534), 0, &v536, (char *)&v533 + 2);
  int v25 = 0;
  if ((inited & 0x80000000) != 0 || HIWORD(v533) < 2u) {
    goto LABEL_287;
  }
  log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Stress: processing=\"%s\"", v26, v27, v28, (uint64_t)v536);
  uint64_t v29 = heap_Calloc((void *)a1[1], 1, 1024);
  if (!v29) {
    goto LABEL_612;
  }
  uint64_t v34 = v29;
  uint64_t v473 = a5;
  __int16 v35 = strlen(v536);
  uint64_t v36 = heap_Calloc((void *)a1[1], 1, (unsigned __int16)(v35 + 1));
  if (!v36)
  {
    uint64_t inited = 2315264010;
    log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v37, v38, v39, v40, v446);
    int v251 = (void *)a1[1];
    unsigned int v252 = (const char *)v34;
    goto LABEL_381;
  }
  uint64_t v41 = (char *)v36;
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a4 + 104))(a2, a3, 2, HIWORD(v534), &v534);
  if ((inited & 0x80000000) != 0 || (unsigned __int16 v42 = v534) == 0)
  {
    heap_Free((void *)a1[1], v34);
    int v25 = 0;
    uint64_t v253 = (uint64_t)v41;
    a5 = v473;
    goto LABEL_286;
  }
  uint64_t v483 = v34;
  v516 = 0;
  unsigned __int16 v494 = 0;
  int v503 = 0;
  unsigned int v482 = -1979703286;
  v491 = v41;
  uint64_t v468 = a3;
  uint64_t v485 = a2;
  uint64_t v510 = a6;
  do
  {
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a4 + 168))(a2, a3, v42, 0, 1, &v531, (char *)&v533 + 2);
    if ((v43 & 0x80000000) != 0)
    {
LABEL_262:
      uint64_t inited = v43;
      goto LABEL_263;
    }
    unsigned int v44 = v531;
    if (v531 == 15)
    {
      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v534, 1, 1, (char *)&v530 + 2, (char *)&v533 + 2);
      if ((v43 & 0x80000000) != 0) {
        goto LABEL_262;
      }
      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v534, 2, 1, &v530, (char *)&v533 + 2);
      if ((v43 & 0x80000000) != 0) {
        goto LABEL_262;
      }
      if (HIWORD(v530) > (unsigned __int16)v530) {
        goto LABEL_267;
      }
      unsigned int v44 = v531;
    }
    BOOL v137 = v44 > 0xA;
    int v45 = (1 << v44) & 0x610;
    if (v137 || v45 == 0) {
      goto LABEL_167;
    }
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v534, 1, 1, (char *)&v529 + 2, (char *)&v533 + 2);
    if ((v47 & 0x80000000) != 0
      || (uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v534, 2, 1, &v529, (char *)&v533 + 2), (v47 & 0x80000000) != 0))
    {
LABEL_261:
      uint64_t inited = v47;
      int v503 = 0;
LABEL_263:
      unint64_t v160 = 0;
      int v54 = 0;
      break;
    }
    if (HIWORD(v529) > (unsigned __int16)v529)
    {
      int v503 = 0;
LABEL_267:
      unint64_t v160 = 0;
      int v54 = 0;
      unsigned __int16 v254 = 16049;
LABEL_268:
      uint64_t inited = v254 | 0x8A000000;
      break;
    }
    strncpy(v41, &v536[HIWORD(v529)], (unsigned __int16)v529 - (unint64_t)HIWORD(v529));
    v41[(unsigned __int16)v529 - HIWORD(v529)] = 0;
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a4 + 184))(a2, a3, (unsigned __int16)v534, 14, &v533);
    if ((v47 & 0x80000000) != 0) {
      goto LABEL_261;
    }
    if ((unsigned __int16)v533 == 1)
    {
      uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a4 + 176))(a2, a3, (unsigned __int16)v534, 14, &v535, (char *)&v533 + 2);
      if ((v47 & 0x80000000) != 0) {
        goto LABEL_261;
      }
      hlp_NLUStrFind(v535, "POS", (uint64_t *)&v527, &v532);
    }
    v493 = v527;
    if (v527)
    {
      int v503 = 0;
    }
    else
    {
      uint64_t v48 = (char *)heap_Calloc((void *)a1[1], 1, 2);
      v527 = v48;
      if (!v48)
      {
        int v503 = 1;
        unint64_t v160 = 0;
        int v54 = 0;
        goto LABEL_265;
      }
      *uint64_t v48 = 61;
      v527[1] = 0;
      int v503 = 1;
    }
    uint64_t v49 = (char *)heap_Calloc((void *)a1[1], 1, v532 + 1);
    int v54 = v49;
    if (!v49) {
      goto LABEL_264;
    }
    strncpy(v49, v527, v532);
    v54[v532] = 0;
    uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *, char *))(a4 + 176))(a2, a3, (unsigned __int16)v534, 9, v528, (char *)&v533 + 2);
    if ((v55 & 0x80000000) != 0)
    {
      uint64_t inited = v55;
      unint64_t v160 = 0;
      break;
    }
    uint64_t v56 = heap_Calloc((void *)a1[1], 1, 16);
    if (!v56)
    {
LABEL_264:
      log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v50, v51, v52, v53, v446);
      unint64_t v160 = 0;
LABEL_265:
      unsigned __int16 v254 = 8202;
      goto LABEL_268;
    }
    uint64_t v57 = v56;
    *(_DWORD *)(v56 + 8) = 655360;
    uint64_t v58 = heap_Calloc((void *)a1[1], 10, 16);
    *(void *)uint64_t v57 = v58;
    if (!v58)
    {
      v508 = 0;
      goto LABEL_279;
    }
    unsigned int v63 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a4 + 176))(a2, a3, (unsigned __int16)v534, 3, &v526, (char *)&v533 + 2);
    if ((v63 & 0x80000000) != 0)
    {
      v508 = 0;
      unsigned int v482 = v63;
      goto LABEL_280;
    }
    int v64 = v526;
    if (strstr(v526, "[SVOX]"))
    {
      v64 += 6;
      v526 = v64;
    }
    size_t v65 = strlen(v64);
    unsigned __int16 v66 = (char *)heap_Alloc(a1[1], v65 + 1);
    if (!v66)
    {
      v508 = 0;
      a3 = v468;
LABEL_278:
      a6 = v510;
LABEL_279:
      log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v59, v60, v61, v62, v446);
LABEL_280:
      stat_stress_freeCandidatePhons(a1, v57);
      heap_Free((void *)a1[1], v57);
      uint64_t inited = v482;
      unint64_t v160 = v508;
      break;
    }
    v508 = v66;
    strcpy(v66, v526);
    unsigned __int16 v67 = strlen(v526);
    if (v67 >= v494)
    {
      if ((unsigned __int16)(v67 + 1) <= 4u) {
        uint64_t v69 = 4;
      }
      else {
        uint64_t v69 = (unsigned __int16)(v67 + 1);
      }
      unsigned __int16 v494 = v69;
      uint64_t v68 = (char *)heap_Realloc((uint64_t *)a1[1], (uint64_t)v516, v69);
      a3 = v468;
      if (!v68) {
        goto LABEL_278;
      }
LABEL_48:
      v516 = v68;
      char *v68 = 0;
      goto LABEL_49;
    }
    uint64_t v68 = v516;
    if (v516) {
      goto LABEL_48;
    }
    v516 = 0;
LABEL_49:
    v505 = v54;
    uint64_t v513 = v57;
    if (strlen(v41))
    {
      unsigned int v70 = 0;
      unsigned int v71 = 0;
      while (1)
      {
        if ((utf8_getUTF8Char((uint64_t)v41, v71, &v525) & 0x80000000) != 0) {
          goto LABEL_83;
        }
        uint64_t v72 = *(unsigned __int16 *)(v57 + 10);
        if (*(unsigned __int16 *)(v57 + 8) >= v72)
        {
          uint64_t v73 = heap_Realloc((uint64_t *)a1[1], *(void *)v57, 16 * v72 + 160);
          if (!v73)
          {
            a3 = v468;
            goto LABEL_278;
          }
          *(void *)uint64_t v57 = v73;
          uint64_t v74 = (_OWORD *)(v73 + 16 * *(unsigned __int16 *)(v57 + 8));
          v74[8] = 0u;
          v74[9] = 0u;
          v74[6] = 0u;
          v74[7] = 0u;
          v74[4] = 0u;
          v74[5] = 0u;
          v74[2] = 0u;
          v74[3] = 0u;
          _OWORD *v74 = 0u;
          v74[1] = 0u;
          *(_WORD *)(v57 + 10) += 10;
        }
        *(_DWORD *)__s2 = v71;
        if (!v516) {
          break;
        }
        uint64_t v75 = a2;
        uint64_t v76 = a4;
        *(_WORD *)v539 = 0;
        if (utf8_Utf8CharTo16bit((unsigned __int8 *)v41, (uint64_t)v539)
          && (unsigned __int16)((unsigned __int16)(*(_WORD *)v539 + 24576) >> 9) <= 0x56u
          && (*(unsigned __int16 *)v539 > 0x3Eu || ((1 << v539[0]) & 0x5000040000000000) == 0))
        {
          unsigned __int16 v81 = v516;
          strcpy(v516, v508);
          char v83 = 1;
        }
        else
        {
          utf8_GetPreviousValidUtf8Offset((uint64_t)v41, (unsigned int *)__s2);
          uint64_t v77 = (char *)v508;
          if (*(_DWORD *)__s2)
          {
            unsigned int NextUtf8Offset = 0;
            uint64_t v77 = (char *)v508;
            while (1)
            {
              unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(v41, NextUtf8Offset);
              uint64_t v79 = strchr(v77, 46);
              if (!v79) {
                break;
              }
              if (*v79 == 46) {
                uint64_t v77 = v79 + 1;
              }
              else {
                uint64_t v77 = v79;
              }
              if (NextUtf8Offset == *(_DWORD *)__s2) {
                goto LABEL_67;
              }
            }
            uint64_t v57 = v513;
            v516[NextUtf8Offset] = 0;
            a4 = v76;
            a2 = v75;
            int v54 = v505;
            goto LABEL_83;
          }
LABEL_67:
          LODWORD(v80) = 0;
          unsigned __int16 v81 = v516;
          while (1)
          {
            int v82 = v77[v80];
            uint64_t v80 = v80;
            if (!v77[v80] || v82 == 46) {
              break;
            }
            v516[v80] = v82;
            if (v80 && v82 == 125 && v516[(v80 - 1)] - 48 <= 9)
            {
              v77[v80] = 46;
              uint64_t v80 = (v80 + 1);
              break;
            }
            LODWORD(v80) = v80 + 1;
          }
          char v83 = 0;
          v516[v80] = 0;
        }
        int v84 = strlen(v81);
        uint64_t v85 = (char *)heap_Alloc(a1[1], (v84 + 1));
        uint64_t v57 = v513;
        *(void *)(*(void *)v513 + 16 * *(unsigned __int16 *)(v513 + 8)) = v85;
        if (!v85)
        {
          a4 = v76;
          a3 = v468;
          a2 = v75;
          a6 = v510;
          uint64_t v41 = v491;
          int v54 = v505;
          goto LABEL_279;
        }
        strcpy(v85, v81);
        v70 += strlen(v81) + 1;
        unsigned __int16 v86 = *(_WORD *)(v513 + 8) + 1;
        *(_WORD *)(v513 + 8) = v86;
        if (v83)
        {
          a4 = v76;
          uint64_t v41 = v491;
          int v54 = v505;
          goto LABEL_84;
        }
        uint64_t v41 = v491;
        unsigned int v71 = utf8_GetNextUtf8Offset(v491, v71);
        a4 = v76;
        a2 = v75;
        int v54 = v505;
        uint64_t v57 = v513;
        if (v71 >= strlen(v491)) {
          goto LABEL_83;
        }
      }
    }
    unsigned int v70 = 0;
LABEL_83:
    uint64_t v75 = a2;
    unsigned __int16 v86 = *(_WORD *)(v57 + 8);
LABEL_84:
    if (v86)
    {
      int v87 = strlen(v526);
      if (v70 < v87 + 1)
      {
        uint64_t v57 = v513;
        uint64_t v88 = *(const char **)(*(void *)v513 + 16 * (v86 - 1));
        int v89 = strlen(v88);
        uint64_t v90 = (char *)heap_Realloc((uint64_t *)a1[1], (uint64_t)v88, v87 - v70 + v89 + 2);
        if (!v90)
        {
          a3 = v468;
          a2 = v75;
          goto LABEL_278;
        }
        *(void *)(*(void *)v513 + 16 * *(unsigned __int16 *)(v513 + 8) - 16) = v90;
        strcat(v90, &v526[v70 - 1]);
      }
    }
    __int16 v475 = HIWORD(v529);
    int v480 = (unsigned __int16)v529;
    int v471 = (unsigned __int16)v530;
    unsigned int __s = *(char **)v528;
    uint64_t v91 = *(unsigned __int16 *)(v22 + 10);
    if (*(_WORD *)(v22 + 10))
    {
      a3 = v468;
      a6 = v510;
      if (*(unsigned __int16 *)(v22 + 8) >= v91)
      {
        a2 = v75;
        uint64_t v98 = heap_Realloc((uint64_t *)a1[1], *(void *)v22, (v91 << 6) + 1280);
        uint64_t v97 = v513;
        if (!v98) {
          goto LABEL_162;
        }
        *(void *)uint64_t v22 = v98;
        bzero((void *)(v98 + ((unint64_t)*(unsigned __int16 *)(v22 + 8) << 6)), 0x500uLL);
        *(_WORD *)(v22 + 10) += 20;
        uint64_t v497 = *(void *)v22;
        goto LABEL_96;
      }
      uint64_t v497 = *(void *)v22;
    }
    else
    {
      uint64_t v92 = heap_Calloc((void *)a1[1], 1, 3201);
      *(void *)uint64_t v22 = v92;
      a3 = v468;
      a6 = v510;
      uint64_t v497 = v92;
      if (!v92)
      {
        a2 = v75;
LABEL_162:
        log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v93, v94, v95, v96, v446);
        uint64_t inited = 2315264010;
        goto LABEL_163;
      }
      *(_WORD *)(v22 + 10) = 50;
    }
    uint64_t v97 = v513;
LABEL_96:
    uint64_t v500 = *(unsigned __int16 *)(v22 + 8);
    uint64_t v99 = (const char **)(v497 + (v500 << 6));
    int v100 = strlen(v41);
    uint64_t v101 = (char *)heap_Calloc((void *)a1[1], 1, (v100 + 4));
    const char *v99 = v101;
    if (!v101) {
      goto LABEL_126;
    }
    strcpy(v101, v41);
    int v106 = strlen(v54);
    uint64_t v107 = (char *)heap_Calloc((void *)a1[1], 1, (v106 + 1));
    v99[2] = v107;
    if (!v107) {
      goto LABEL_126;
    }
    v466 = v99 + 2;
    strcpy(v107, v54);
    uint64_t v108 = __s;
    int v109 = strlen(__s);
    float v110 = (char *)heap_Calloc((void *)a1[1], 1, (v109 + 1));
    uint64_t v111 = v497 + (v500 << 6);
    *(void *)(v111 + 24) = v110;
    if (!v110
      || (v459 = (const char **)(v111 + 24),
          strcpy(v110, __s),
          uint64_t v112 = *(unsigned __int16 *)(v97 + 8),
          *(_WORD *)(v111 + 54) = v112,
          uint64_t v113 = heap_Calloc((void *)a1[1], v112, 32),
          *(void *)(v111 + 56) = v113,
          v477 = (uint64_t *)(v111 + 56),
          !v113))
    {
LABEL_126:
      log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v102, v103, v104, v105, v446);
      uint64_t inited = 2315264010;
      goto LABEL_127;
    }
    v470 = (uint64_t *)(v497 + (v500 << 6));
    uint64_t v114 = (uint64_t *)(v111 + 56);
    if (*(_WORD *)(v97 + 8))
    {
      unint64_t v115 = 0;
      uint64_t v463 = a4;
      do
      {
        int v116 = strlen(*(const char **)(*(void *)v97 + 16 * v115));
        __int16 v117 = (char *)heap_Calloc((void *)a1[1], 1, (v116 + 1));
        *(void *)(*v114 + 32 * v115) = v117;
        if (!v117) {
          goto LABEL_216;
        }
        strcpy(v117, *(const char **)(*(void *)v97 + 16 * v115));
        int v122 = strlen(v108);
        uint64_t v123 = (char *)heap_Calloc((void *)a1[1], 1, (v122 + 1));
        *(void *)(*v114 + 32 * v115 + 16) = v123;
        if (!v123
          || (strcpy(v123, v108),
              uint64_t v124 = heap_Calloc((void *)a1[1], 1, 4),
              uint64_t v125 = *v114,
              uint64_t v126 = *v114 + 32 * v115,
              *(void *)(v126 + 8) = v124,
              uint64_t v127 = (char **)(v126 + 8),
              !v124))
        {
LABEL_216:
          log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v118, v119, v120, v121, v446);
          uint64_t inited = 2315264010;
          goto LABEL_220;
        }
        uint64_t v128 = (unsigned char *)v124;
        uint64_t v129 = *(const char **)(v126 + 16);
        if (!strcmp(v129, "normal") || !strcmp(v129, "mnx"))
        {
          char v542 = 0;
          *(_DWORD *)__s2 = 0;
          if (!*v128)
          {
            uint64_t v130 = (const char **)(v125 + 32 * v115);
            __int16 v131 = Utf8_Utf8NbrOfSymbols(*v130);
            int v132 = (unsigned __int16)(v131 - 1);
            if (v131 != 1)
            {
              unsigned __int16 v133 = 0;
              while (1)
              {
                unsigned __int16 v134 = v133;
                uint64_t UTF8Char = utf8_getUTF8Char((uint64_t)*v130, v133, __s2);
                if ((UTF8Char & 0x80000000) != 0) {
                  break;
                }
                uint64_t v97 = v513;
                if (__s2[0] != 46)
                {
                  size_t v136 = strlen(__s2);
                  BOOL v137 = __s2[0] - 54 < 0xFFFFFFFA || v136 > 1;
                  if (!v137 && strlen(*v127) <= 2) {
                    strcat(*v127, __s2);
                  }
                  unsigned __int16 v133 = v134 + strlen(__s2);
                  if (--v132) {
                    continue;
                  }
                }
                goto LABEL_109;
              }
              uint64_t inited = UTF8Char;
              a4 = v463;
LABEL_220:
              a6 = v510;
              uint64_t v99 = (const char **)(v497 + (v500 << 6));
LABEL_127:
              uint64_t v138 = v497;
              goto LABEL_128;
            }
          }
LABEL_109:
          uint64_t v108 = __s;
          if (!**v127) {
            *(_WORD *)*uint64_t v127 = 61;
          }
          a4 = v463;
          uint64_t v99 = (const char **)(v497 + (v500 << 6));
        }
        else
        {
          *(_WORD *)uint64_t v128 = 61;
          a4 = v463;
          uint64_t v99 = (const char **)(v497 + (v500 << 6));
          uint64_t v108 = __s;
        }
        uint64_t v114 = v477;
        *(_DWORD *)(*v477 + 32 * v115++ + 24) = 0;
      }
      while (v115 < *(unsigned __int16 *)(v97 + 8));
    }
    char v540 = 0;
    *(_DWORD *)v539 = 0;
    char v538 = 0;
    *(_DWORD *)v537 = 0;
    uint64_t v161 = heap_Calloc((void *)a1[1], 5, 40);
    uint64_t v138 = v497;
    uint64_t v166 = v497 + (v500 << 6);
    *(void *)(v166 + 40) = v161;
    int v167 = (uint64_t *)(v166 + 40);
    if (!v161)
    {
      log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v162, v163, v164, v165, v446);
      uint64_t inited = 2315264010;
      a6 = v510;
      goto LABEL_245;
    }
    __int16 v168 = Utf8_Utf8NbrOfSymbols(*v99);
    int v169 = 0;
    LOWORD(v170) = 0;
    int v171 = 0;
    int v478 = 0;
    uint64_t v172 = 0;
    __int16 v454 = 0;
    unsigned __int16 v455 = v168 - 1;
    int v457 = (unsigned __int16)(v168 - 1);
    unsigned __int16 v447 = 5;
    v461 = v167;
    while (1)
    {
      int __sa = (unsigned __int16)v170;
      uint64_t v173 = utf8_getUTF8Char(*v470, (unsigned __int16)v170, v539);
      if ((v173 & 0x80000000) != 0)
      {
        uint64_t inited = v173;
        goto LABEL_225;
      }
      if (v457 == v169 || (int v174 = v539[0], v539[0] == 45))
      {
        BOOL v175 = (char *)heap_Calloc((void *)a1[1], 1, (unsigned __int16)(__sa - v171 + 1));
        uint64_t v451 = v172;
        uint64_t v180 = (unsigned __int16)v172;
        *(void *)(*v167 + 40 * (unsigned __int16)v172) = v175;
        if (!v175)
        {
          log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v176, v177, v178, v179, v446);
          uint64_t inited = 2315264010;
          a6 = v510;
          uint64_t v99 = (const char **)(v497 + (v500 << 6));
LABEL_222:
          uint64_t v138 = v497;
          goto LABEL_245;
        }
        strncpy(v175, (const char *)(*v470 + (unsigned __int16)v171), (unsigned __int16)(__sa - v171));
        *(unsigned char *)(*(void *)(*v167 + 40 * (unsigned __int16)v172) + (unsigned __int16)(__sa - v171)) = 0;
        uint64_t v452 = 5 * (unsigned __int16)v172;
        unsigned __int16 v181 = (const char **)(*v167 + 40 * (unsigned __int16)v172);
        char v542 = 0;
        *(_DWORD *)__s2 = 0;
        uint64_t v182 = v181;
        __int16 v183 = Utf8_Utf8NbrOfSymbols(*v181);
        unsigned __int16 v184 = v183 - 1;
        int v450 = v171;
        if (v183 != 1)
        {
          uint64_t v448 = (unsigned __int16)v172;
          unsigned __int16 v185 = 0;
          unsigned __int16 v186 = 0;
          __int16 v187 = 0;
          while (1)
          {
            unsigned __int16 v188 = v185;
            uint64_t v189 = utf8_getUTF8Char((uint64_t)*v182, v185, __s2);
            if ((v189 & 0x80000000) != 0) {
              break;
            }
            uint64_t v190 = a4;
            BOOL IsChineseLetter = utf8_IsChineseLetter(__s2);
            int v192 = isPunc(__s2);
            if (!v186 && !IsChineseLetter && !v192)
            {
              unsigned __int16 v184 = 1;
              a4 = v190;
LABEL_186:
              __int16 v193 = v184 - v187;
              uint64_t v180 = v448;
              goto LABEL_187;
            }
            v187 += v192;
            unsigned __int16 v185 = v188 + strlen(__s2);
            ++v186;
            a4 = v190;
            if (v186 >= v184) {
              goto LABEL_186;
            }
          }
          uint64_t inited = v189;
          a6 = v510;
          uint64_t v99 = (const char **)(v497 + (v500 << 6));
          int v167 = v461;
          goto LABEL_222;
        }
        __int16 v193 = 0;
LABEL_187:
        *((_WORD *)v182 + 16) = v193;
        uint64_t v194 = *v461;
        uint64_t v195 = *v461 + 8 * v452;
        __int16 v453 = *(_WORD *)(v195 + 32);
        uint64_t v196 = *(const char **)v195;
        uint64_t v138 = v497;
        if (*(void *)v195
          && (size_t v197 = strlen(*(const char **)v195)) != 0
          && (strstr("'\",.:?!;()<>[]#$+-=^_|", &v196[v197 - 1]) || strstr("'\",.:?!;()<>[]#$+-=^_|", v196)))
        {
          uint64_t v198 = a4;
          int v199 = 1;
        }
        else
        {
          uint64_t v198 = a4;
          int v199 = 0;
        }
        *(_DWORD *)(v194 + 40 * v180 + 16) = v199;
        int v200 = strlen(v196);
        unint64_t v201 = (unsigned char *)heap_Calloc((void *)a1[1], 1, (v200 + 4));
        *(void *)(*v461 + 40 * v180 + 24) = v201;
        if (!v201)
        {
          log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v202, v203, v204, v205, v446);
          uint64_t inited = 2315264010;
          a4 = v198;
          a6 = v510;
          uint64_t v99 = (const char **)(v497 + (v500 << 6));
          int v167 = v461;
          goto LABEL_245;
        }
        *unint64_t v201 = 0;
        uint64_t v206 = *v461;
        uint64_t v207 = *v461 + 40 * v180;
        a4 = v198;
        if (*(_DWORD *)(v207 + 16) == 1)
        {
          char v542 = 0;
          *(_DWORD *)__s2 = 0;
          __int16 v208 = Utf8_Utf8NbrOfSymbols(*(const char **)v207);
          int v209 = (unsigned __int16)(v208 - 1);
          if (v208 != 1)
          {
            int v210 = 0;
            unsigned __int16 v211 = 0;
            v449 = (char **)(v206 + 40 * v180 + 24);
            while (1)
            {
              unsigned __int16 v212 = v211;
              uint64_t v213 = utf8_getUTF8Char(*(void *)v207, v211, __s2);
              if ((v213 & 0x80000000) != 0) {
                break;
              }
              uint64_t v214 = a4;
              BOOL v215 = isPunc(__s2);
              BOOL v216 = utf8_IsChineseLetter(__s2);
              if (!v210 && !v216 && !v215)
              {
                int v223 = strlen(*(const char **)v207);
                strncpy(*v449, *(const char **)v207, (v223 - 1));
                a4 = v214;
                goto LABEL_206;
              }
              if (!v215) {
                strcat(*v449, __s2);
              }
              unsigned __int16 v211 = v212 + strlen(__s2);
              ++v210;
              a4 = v214;
              if (v209 == v210) {
                goto LABEL_206;
              }
            }
            uint64_t inited = v213;
            a6 = v510;
            uint64_t v99 = (const char **)(v497 + (v500 << 6));
            int v167 = v461;
            goto LABEL_245;
          }
        }
        else
        {
          strcpy(*(char **)(v206 + 40 * v180 + 24), *(const char **)v207);
        }
LABEL_206:
        v454 += v453;
        int v174 = v539[0];
        int v167 = v461;
        int v171 = v450;
        uint64_t v172 = v451;
        if (v539[0] == 45) {
          break;
        }
      }
LABEL_211:
      int v170 = __sa + (unsigned __int16)strlen(v539);
      if (v174 == 45) {
        int v171 = v170;
      }
      int v169 = (unsigned __int16)++v478;
      if ((unsigned __int16)v478 > v455)
      {
        uint64_t v464 = a4;
        uint64_t v224 = (_WORD *)(v138 + (v500 << 6));
        v224[26] = v454;
        v224 += 26;
        *(v224 - 1) = v447;
        v456 = v224;
        *(v224 - 2) = v172 + 1;
        __int16 v225 = Utf8_Utf8NbrOfSymbols(*v466);
        int v226 = 0;
        unsigned __int16 v227 = 0;
        unsigned __int16 v228 = 0;
        int v229 = 0;
        unsigned __int16 v230 = 0;
        unsigned __int16 v231 = v225 - 1;
        int v232 = (unsigned __int16)(v225 - 1);
        int __sb = v232;
        unsigned __int16 v458 = v225 - 1;
        while (1)
        {
          unsigned __int16 v233 = v227;
          uint64_t inited = utf8_getUTF8Char((uint64_t)*v466, v227, v537);
          if ((inited & 0x80000000) != 0) {
            break;
          }
          if (v232 == v226 || (int v234 = v537[0], v537[0] == 45))
          {
            uint64_t v235 = (char *)heap_Calloc((void *)a1[1], 1, (unsigned __int16)(v233 - v228 + 1));
            *(void *)(*v461 + 40 * v230 + 8) = v235;
            if (!v235)
            {
              log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v236, v237, v238, v239, v446);
              uint64_t inited = 2315264010;
              a4 = v464;
              a6 = v510;
              uint64_t v41 = v491;
              uint64_t v99 = (const char **)(v497 + (v500 << 6));
              int v167 = v461;
              goto LABEL_244;
            }
            size_t v240 = (unsigned __int16)(v233 - v228);
            strncpy(v235, &(*v466)[v228], v240);
            *(unsigned char *)(*(void *)(*v461 + 40 * v230 + 8) + v240) = 0;
            int v234 = v537[0];
            if (v537[0] == 45) {
              ++v230;
            }
            unsigned __int16 v231 = v458;
            int v232 = __sb;
          }
          unsigned __int16 v227 = v233 + strlen(v537);
          if (v234 == 45) {
            unsigned __int16 v228 = v227;
          }
          int v226 = (unsigned __int16)++v229;
          if ((unsigned __int16)v229 > v231)
          {
            uint64_t v241 = *v459;
            if (!strcmp(*v459, "normal") || !strcmp(v241, "mnx")) {
              *(_WORD *)(v22 + 12) += *v456;
            }
            uint64_t v242 = v497 + (v500 << 6);
            *(_WORD *)(v242 + 8) = v475;
            *(_WORD *)(v242 + 10) = v480;
            *(_DWORD *)(v242 + 32) = v480 == v471;
            ++*(_WORD *)(v22 + 8);
            a4 = v464;
            a3 = v468;
            a2 = v485;
            a6 = v510;
            uint64_t v41 = v491;
            goto LABEL_159;
          }
        }
        int v167 = v461;
        a4 = v464;
        a6 = v510;
        uint64_t v41 = v491;
        uint64_t v99 = (const char **)(v497 + (v500 << 6));
LABEL_244:
        uint64_t v138 = v497;
        goto LABEL_245;
      }
    }
    uint64_t v172 = (v451 + 1);
    if (v447 > (unsigned __int16)(v451 + 1))
    {
      int v174 = 45;
      goto LABEL_211;
    }
    v447 += 3;
    uint64_t v217 = heap_Realloc((uint64_t *)a1[1], *v461, 40 * v447);
    if (v217)
    {
      uint64_t *v461 = v217;
      uint64_t v222 = v217 + 40 * (unsigned __int16)(v451 + 1);
      *(void *)(v222 + 112) = 0;
      *(_OWORD *)(v222 + 80) = 0u;
      *(_OWORD *)(v222 + 96) = 0u;
      *(_OWORD *)(v222 + 48) = 0u;
      *(_OWORD *)(v222 + 64) = 0u;
      *(_OWORD *)(v222 + 16) = 0u;
      *(_OWORD *)(v222 + 32) = 0u;
      *(_OWORD *)uint64_t v222 = 0u;
      int v174 = v539[0];
      goto LABEL_211;
    }
    log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v218, v219, v220, v221, v446);
    uint64_t inited = 2315264010;
LABEL_225:
    a6 = v510;
    uint64_t v99 = (const char **)(v497 + (v500 << 6));
LABEL_245:
    uint64_t v243 = *v167;
    if (*v167)
    {
      uint64_t v244 = a4;
      uint64_t v245 = v138 + (v500 << 6);
      int v247 = *(unsigned __int16 *)(v245 + 50);
      unsigned __int16 v246 = (unsigned __int16 *)(v245 + 50);
      if (v247)
      {
        uint64_t v248 = 0;
        unint64_t v249 = 0;
        uint64_t v250 = *v167;
        do
        {
          if (v250)
          {
            if (*(void *)(v250 + v248))
            {
              heap_Free((void *)a1[1], *(void *)(v250 + v248));
              uint64_t v243 = *v167;
              *(void *)(*v167 + v248) = 0;
            }
            if (*(void *)(v243 + v248 + 8))
            {
              heap_Free((void *)a1[1], *(void *)(v243 + v248 + 8));
              uint64_t v243 = *v167;
              *(void *)(*v167 + v248 + 8) = 0;
            }
            uint64_t v250 = v243;
            if (*(void *)(v243 + v248 + 24))
            {
              heap_Free((void *)a1[1], *(void *)(v243 + v248 + 24));
              uint64_t v243 = *v167;
              *(void *)(*v167 + v248 + 24) = 0;
              uint64_t v250 = v243;
            }
          }
          ++v249;
          v248 += 40;
        }
        while (v249 < *v246);
      }
      heap_Free((void *)a1[1], v243);
      *int v167 = 0;
      a4 = v244;
      a6 = v510;
      uint64_t v99 = (const char **)(v497 + (v500 << 6));
    }
LABEL_128:
    if (*v99)
    {
      heap_Free((void *)a1[1], (uint64_t)*v99);
      const char *v99 = 0;
    }
    uint64_t v139 = v138 + (v500 << 6);
    uint64_t v140 = *(void *)(v139 + 16);
    if (v140)
    {
      heap_Free((void *)a1[1], v140);
      *(void *)(v139 + 16) = 0;
    }
    uint64_t v143 = *(void *)(v139 + 24);
    long long v142 = (void *)(v139 + 24);
    uint64_t v141 = v143;
    if (v143)
    {
      heap_Free((void *)a1[1], v141);
      void *v142 = 0;
    }
    uint64_t v144 = v138 + (v500 << 6);
    uint64_t v146 = (uint64_t *)(v144 + 56);
    uint64_t v145 = *(void *)(v144 + 56);
    if (v145)
    {
      if (*(_WORD *)(v144 + 54))
      {
        uint64_t v147 = 0;
        unint64_t v148 = 0;
        uint64_t v149 = *(void *)(v144 + 56);
        do
        {
          if (v149)
          {
            if (*(void *)(v149 + v147))
            {
              heap_Free((void *)a1[1], *(void *)(v149 + v147));
              uint64_t v145 = *v146;
              *(void *)(*v146 + v147) = 0;
            }
            if (*(void *)(v145 + v147 + 16))
            {
              heap_Free((void *)a1[1], *(void *)(v145 + v147 + 16));
              uint64_t v145 = *v146;
              *(void *)(*v146 + v147 + 16) = 0;
            }
            uint64_t v149 = v145;
            if (*(void *)(v145 + v147 + 8))
            {
              heap_Free((void *)a1[1], *(void *)(v145 + v147 + 8));
              uint64_t v145 = *v146;
              *(void *)(*v146 + v147 + 8) = 0;
              uint64_t v149 = v145;
            }
          }
          ++v148;
          v147 += 32;
        }
        while (v148 < *(unsigned __int16 *)(v144 + 54));
      }
      heap_Free((void *)a1[1], v145);
      uint64_t *v146 = 0;
      a6 = v510;
    }
    uint64_t v152 = *(void *)(v144 + 40);
    int v151 = (uint64_t *)(v144 + 40);
    uint64_t v150 = v152;
    if (v152)
    {
      uint64_t v153 = a4;
      uint64_t v154 = v138 + (v500 << 6);
      int v156 = *(unsigned __int16 *)(v154 + 50);
      unsigned int v155 = (unsigned __int16 *)(v154 + 50);
      if (v156)
      {
        uint64_t v157 = 0;
        unint64_t v158 = 0;
        uint64_t v159 = v150;
        do
        {
          if (v159)
          {
            if (*(void *)(v159 + v157))
            {
              heap_Free((void *)a1[1], *(void *)(v159 + v157));
              uint64_t v150 = *v151;
              *(void *)(*v151 + v157) = 0;
            }
            if (*(void *)(v150 + v157 + 8))
            {
              heap_Free((void *)a1[1], *(void *)(v150 + v157 + 8));
              uint64_t v150 = *v151;
              *(void *)(*v151 + v157 + 8) = 0;
            }
            uint64_t v159 = v150;
            if (*(void *)(v150 + v157 + 24))
            {
              heap_Free((void *)a1[1], *(void *)(v150 + v157 + 24));
              uint64_t v150 = *v151;
              *(void *)(*v151 + v157 + 24) = 0;
              uint64_t v159 = v150;
            }
          }
          ++v158;
          v157 += 40;
        }
        while (v158 < *v155);
      }
      heap_Free((void *)a1[1], v150);
      uint64_t *v151 = 0;
      a4 = v153;
      a3 = v468;
      a2 = v485;
      a6 = v510;
    }
    else
    {
      a3 = v468;
      a2 = v485;
    }
LABEL_159:
    int v54 = v505;
LABEL_163:
    stat_stress_freeCandidatePhons(a1, v513);
    heap_Free((void *)a1[1], v513);
    heap_Free((void *)a1[1], (uint64_t)v508);
    heap_Free((void *)a1[1], (uint64_t)v54);
    if (!v493 && v527)
    {
      heap_Free((void *)a1[1], (uint64_t)v527);
      v527 = 0;
    }
    if ((inited & 0x80000000) != 0) {
      goto LABEL_263;
    }
LABEL_167:
    uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a4 + 120))(a2, a3, (unsigned __int16)v534, &v534);
    unint64_t v160 = 0;
    if ((inited & 0x80000000) != 0)
    {
      int v54 = 0;
      break;
    }
    unsigned __int16 v42 = v534;
    int v54 = 0;
  }
  while ((_WORD)v534);
  if (v516) {
    heap_Free((void *)a1[1], (uint64_t)v516);
  }
  heap_Free((void *)a1[1], v483);
  heap_Free((void *)a1[1], (uint64_t)v41);
  if (v54) {
    heap_Free((void *)a1[1], (uint64_t)v54);
  }
  a5 = v473;
  uint64_t v253 = (uint64_t)v160;
  int v25 = v503;
  if (v253) {
LABEL_286:
  }
    heap_Free((void *)a1[1], v253);
LABEL_287:
  if ((inited & 0x80000000) != 0)
  {
    if (v25 != 1) {
      goto LABEL_613;
    }
    unsigned int v252 = v527;
    if (!v527) {
      goto LABEL_613;
    }
    goto LABEL_380;
  }
  uint64_t v486 = a2;
  if (!*(_WORD *)(v22 + 12)) {
    goto LABEL_613;
  }
  v535 = 0;
  v536 = 0;
  v528[4] = 0;
  *(_DWORD *)v528 = 0;
  LODWORD(v527) = 0;
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, char **))(a6 + 40))(a7, a8, &v527);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_613;
  }
  uint64_t v474 = a5;
  if (a11)
  {
    unsigned int v255 = (unsigned __int32 *)heap_Calloc((void *)a1[1], (*(unsigned __int16 *)(v22 + 12) + 2) * v527, 4);
    if (!v255) {
      goto LABEL_612;
    }
    unsigned __int32 *v255 = 1120534528;
    uint64_t v256 = &v255[v527];
  }
  else
  {
    unsigned int v255 = (unsigned __int32 *)heap_Calloc((void *)a1[1], *(unsigned __int16 *)(v22 + 12)* (unint64_t)(unsigned __int16)(a10 + (_WORD)v527 + 14), 4);
    uint64_t v256 = v255;
    if (!v255) {
      goto LABEL_612;
    }
  }
  v460 = (const char *)v255;
  uint64_t v469 = a3;
  uint64_t v465 = a4;
  unsigned int v257 = *(unsigned __int16 *)(v22 + 8);
  if (*(_WORD *)(v22 + 8))
  {
    uint64_t v258 = 0;
    while (1)
    {
      uint64_t v501 = v258;
      uint64_t v259 = *(void *)v22 + (v258 << 6);
      unsigned __int16 v260 = *(const char **)(v259 + 24);
      uint64_t v476 = *(void *)(v259 + 40);
      uint64_t v261 = *(unsigned __int16 *)(v259 + 48);
      unsigned int v262 = *(unsigned __int16 *)(v259 + 52);
      unsigned int v263 = *(unsigned __int16 *)(v259 + 54);
      v492 = *(char **)(v259 + 56);
      if ((!strcmp(v260, "normal") || !strcmp(v260, "mnx")) && v262 >= v263 && v261 != 0) {
        break;
      }
LABEL_306:
      uint64_t v258 = v501 + 1;
      if (v501 + 1 >= (unint64_t)v257) {
        goto LABEL_376;
      }
    }
    uint64_t v479 = v22;
    uint64_t v511 = a6;
    uint64_t v265 = 0;
    int v498 = 0;
    uint64_t v472 = (v261 - 1);
    int v462 = v263 - 1;
    uint64_t v267 = a7;
    uint64_t v266 = a8;
    uint64_t v481 = v261;
    while (1)
    {
      uint64_t v495 = v265;
      uint64_t v268 = v476 + 40 * v265;
      __sc = *(char **)(v268 + 8);
      v514 = *(const char **)(v268 + 24);
      __int16 v269 = Utf8_Utf8NbrOfSymbols(v514);
      if (v269 != 1) {
        break;
      }
LABEL_373:
      uint64_t v265 = v495 + 1;
      if (v495 + 1 == v261)
      {
        uint64_t v22 = v479;
        unsigned int v257 = *(unsigned __int16 *)(v479 + 8);
        a6 = v511;
        goto LABEL_306;
      }
    }
    int v270 = 0;
    unsigned __int16 v271 = 0;
    BOOL v272 = v261 == 1;
    int v517 = (unsigned __int16)(v269 - 1);
    if (v517 == 1) {
      int v273 = 3;
    }
    else {
      int v273 = 0;
    }
    unsigned int v484 = v273;
    if ((unsigned __int16)(v269 - 1) != 1) {
      BOOL v272 = 0;
    }
    BOOL v467 = v272;
    while (2)
    {
      unsigned __int16 v274 = v271;
      uint64_t inited = utf8_getUTF8Char((uint64_t)v514, v271, v528);
      if ((inited & 0x80000000) != 0)
      {
        unsigned int v252 = v460;
        uint64_t v22 = v479;
        goto LABEL_379;
      }
      __int16 v275 = strlen(v528);
      if (utf8_IsChineseLetter(v528))
      {
        if (a11)
        {
          uint64_t v276 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned __int32 *))(v511 + 72))(v267, v266, v528, v256);
          uint64_t inited = v276;
          if (*(float *)v256 == 0.0 && v276 != 0)
          {
            v277.n128_u32[0] = *v256;
            uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, const char *, unsigned __int32 *, __n128))(v511 + 72))(v267, v266, "</s>", v256, v277);
          }
          v256 += v527;
          goto LABEL_372;
        }
        int v279 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned __int32 *))(v511 + 56))(v267, v266, v528, v256);
        LODWORD(inited) = v279;
        if (*(float *)v256 == 0.0 && v279 != 0)
        {
          v283.n128_u32[0] = *v256;
          LODWORD(inited) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, unsigned __int32 *, __n128))(v511 + 56))(v267, v266, "</s>", v256, v283);
        }
        v506 = &v492[32 * (unsigned __int16)v498];
        int v285 = (unsigned char *)*((void *)v506 + 1);
        unsigned int v286 = 2;
        switch(*v285)
        {
          case '1':
            unsigned int v286 = 4;
            break;
          case '2':
            break;
          case '3':
            if (v285[1] == 53) {
              unsigned int v286 = 1;
            }
            else {
              unsigned int v286 = 5;
            }
            break;
          case '5':
            if (v285[1] == 53) {
              unsigned int v286 = 0;
            }
            else {
              unsigned int v286 = 3;
            }
            break;
          default:
            unsigned int v286 = 0;
            break;
        }
        unsigned __int16 v287 = &v256[v527];
        v287[v286] = 1065353216;
        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get tune %d", v280, v281, v282, (uint64_t)v528);
        if (__sc)
        {
          utf8_ToLower(__sc, 0, (uint64_t)&v526);
          unsigned int v291 = v526 - 99;
          if (v291 > 0x16) {
            uint64_t v292 = 0;
          }
          else {
            uint64_t v292 = word_20D62DA00[(char)v291];
          }
        }
        else
        {
          uint64_t v292 = 2;
        }
        int v293 = v517 + v270;
        v287[v292 + 6] = 1065353216;
        uint64_t v294 = (uint64_t)&v287[a10 + 6];
        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get pos %d", v288, v289, v290, (uint64_t)v528);
        if (v517 + v270 == 1) {
          unsigned int v298 = 2;
        }
        else {
          unsigned int v298 = 1;
        }
        if (!v270) {
          unsigned int v298 = v484;
        }
        *(_DWORD *)(v294 + 4 * v298) = 1065353216;
        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get word bmes tag %d", v295, v296, v297, (uint64_t)v528);
        if (v495)
        {
          if (v495 == v472 && v293 == 1) {
            unsigned __int16 v303 = 2;
          }
          else {
            unsigned __int16 v303 = 1;
          }
          goto LABEL_355;
        }
        if (v467 && v270 == 0) {
          unsigned __int16 v303 = 3;
        }
        else {
          unsigned __int16 v303 = 0;
        }
        if (v270)
        {
          uint64_t v261 = v481;
          if (v293 == 1 && v481 == 1) {
            unsigned __int16 v303 = 2;
          }
          else {
            unsigned __int16 v303 = 1;
          }
          uint64_t inited = inited;
        }
        else
        {
LABEL_355:
          uint64_t inited = inited;
          uint64_t v261 = v481;
        }
        *(_DWORD *)(v294 + 16 + 4 * v303) = 1065353216;
        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get pw bmes tag %d", v299, v300, v301, (uint64_t)v528);
        uint64_t v267 = a7;
        uint64_t v266 = a8;
        uint64_t v256 = (unsigned __int32 *)(v294 + 32);
        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get phrase bmes tag %c", v305, v306, v307, (uint64_t)v528);
        if (!isERphon((unsigned __int8 *)v528, *(char **)v506))
        {
          if (v462 <= (unsigned __int16)v498) {
            int v308 = v498;
          }
          else {
            int v308 = v498 + 1;
          }
          int v498 = v308;
        }
      }
LABEL_372:
      unsigned __int16 v271 = v274 + v275;
      --v270;
      if (!(v517 + v270)) {
        goto LABEL_373;
      }
      continue;
    }
  }
LABEL_376:
  unsigned int v252 = v460;
  if (a11) {
    *(_DWORD *)&v460[4 * *(unsigned __int16 *)(v22 + 12) + 4] = 1120665600;
  }
  v536 = v460;
LABEL_379:
  if ((inited & 0x80000000) != 0)
  {
LABEL_380:
    int v251 = (void *)a1[1];
    goto LABEL_381;
  }
  uint64_t v309 = *(unsigned __int16 *)(v22 + 12);
  if (!a11)
  {
    uint64_t v23 = fi_predict(a9, (const void **)&v536, v309, &v535, v30, v31, v32, v33);
    if ((v23 & 0x80000000) == 0)
    {
      v522 = v535;
      goto LABEL_387;
    }
LABEL_572:
    uint64_t inited = v23;
    goto LABEL_613;
  }
  uint64_t v23 = fi_predict(a9, (const void **)&v536, (v309 + 2), &v535, v30, v31, v32, v33);
  if ((v23 & 0x80000000) != 0) {
    goto LABEL_572;
  }
  v522 = v535 + 8;
  v535 += 8;
LABEL_387:
  unsigned int v313 = *(unsigned __int16 *)(v22 + 8);
  if (!*(_WORD *)(v22 + 8)) {
    goto LABEL_424;
  }
  uint64_t v314 = 0;
  int v315 = 0;
  uint64_t v316 = *(void *)v22;
  while (1)
  {
    uint64_t v317 = v316 + (v314 << 6);
    uint64_t v318 = *(const char **)(v317 + 24);
    if ((!strcmp(v318, "normal") || !strcmp(v318, "mnx"))
      && *(unsigned __int16 *)(v317 + 52) >= *(unsigned __int16 *)(v317 + 54)
      && *(_WORD *)(v316 + (v314 << 6) + 54))
    {
      break;
    }
LABEL_423:
    if (++v314 >= (unint64_t)v313) {
      goto LABEL_424;
    }
  }
  unint64_t v319 = 0;
  while (2)
  {
    if (*(unsigned __int16 *)(v22 + 12) <= (unsigned __int16)v315)
    {
      log_OutText(a1[4], (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"Not Severe Error: Stress label out of range. Skip some stress tag.", v310, v311, v312, v446);
      uint64_t v316 = *(void *)v22;
      uint64_t v320 = *(void *)(*(void *)v22 + (v314 << 6) + 56);
    }
    else
    {
      uint64_t v320 = *(void *)(v316 + (v314 << 6) + 56);
      uint64_t v321 = (_DWORD *)(v320 + 32 * v319 + 24);
      *uint64_t v321 = **(unsigned __int8 **)&v522[8 * (unsigned __int16)v315] == 49;
    }
    uint64_t v322 = *(const char **)(v320 + 32 * v319);
    unsigned int v323 = *(unsigned __int8 *)v322;
    unsigned int v324 = strlen(v322);
    unsigned int v325 = v324;
    if (v324 < 2) {
      goto LABEL_421;
    }
    if (v324 >= 5 && !strcmp(&v322[v324 - 5], "%\"~r\""))
    {
      if ((v323 > 0x3E) | (0x2FFFFBFFFFFFFFFFuLL >> v323) & 1) {
        goto LABEL_403;
      }
      goto LABEL_421;
    }
    if ((((v323 > 0x3E) | (0x2FFFFBFFFFFFFFFFuLL >> v323)) & (strcmp(&v322[v325 - 2], "%r") == 0)) == 0) {
      goto LABEL_421;
    }
LABEL_403:
    if (v323 == 36 || v323 == 97)
    {
LABEL_421:
      ++v319;
      ++v315;
      if (v319 >= *(unsigned __int16 *)(v316 + (v314 << 6) + 54))
      {
        unsigned int v313 = *(unsigned __int16 *)(v22 + 8);
        goto LABEL_423;
      }
      continue;
    }
    break;
  }
  unsigned __int16 v326 = 0;
  unsigned int v327 = 0;
  v528[4] = 0;
  *(_DWORD *)v528 = 0;
  while ((utf8_getUTF8Char(*(void *)(*(void *)v22 + (v314 << 6)), v327, v528) & 0x80000000) == 0)
  {
    unsigned int v328 = utf8_GetNextUtf8Offset(*(char **)(*(void *)v22 + (v314 << 6)), v327);
    if (v328 != v327)
    {
      unsigned int v329 = v328;
      if (utf8_IsChineseLetter(v528)) {
        ++v326;
      }
      unsigned int v327 = v329;
      if ((unsigned __int16)(v319 + 1) >= v326) {
        continue;
      }
    }
    if (v528[0] == 229 && v528[1] == 132 && v528[2] == 191) {
      ++v315;
    }
    uint64_t v316 = *(void *)v22;
    goto LABEL_421;
  }
LABEL_424:
  BYTE4(v535) = 0;
  LODWORD(v535) = 0;
  v536 = 0;
  uint64_t v332 = v474;
  if (!v474)
  {
    log_OutText(a1[4], (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"IGTree model for stress does not exist. Skip processing IGTree.", v310, v311, v312, v446);
    uint64_t v402 = v465;
    goto LABEL_579;
  }
  uint64_t v333 = (uint64_t *)heap_Calloc((void *)a1[1], 1, 8 * *(unsigned __int8 *)(v474 + 1296) - 8);
  if (!v333)
  {
    uint64_t inited = 2315264010;
    goto LABEL_613;
  }
  v334 = v333;
  uint64_t inited = hlp_igtree_initFeatureVector((uint64_t)a1, v333, (unsigned __int16)(*(unsigned __int8 *)(v474 + 1296) - 1));
  if ((inited & 0x80000000) == 0)
  {
    unsigned int v335 = *(unsigned __int16 *)(v22 + 8);
    if (*(_WORD *)(v22 + 8))
    {
      uint64_t v336 = 0;
      while (1)
      {
        uint64_t v337 = *(void *)v22;
        uint64_t v338 = *(void *)v22 + (v336 << 6);
        v339 = *(const char **)(v338 + 24);
        if (!strcmp(v339, "normal") || !strcmp(v339, "mnx"))
        {
          int v341 = *(unsigned __int16 *)(v338 + 54);
          unsigned int v340 = (unsigned __int16 *)(v338 + 54);
          int v342 = *(v340 - 1);
          v512 = v340 - 1;
          int v343 = v341 + 1;
          if (v341 == v342 || v343 == v342)
          {
            uint64_t v345 = v337 + (v336 << 6);
            unsigned __int16 v346 = *(_WORD *)(v345 + 48);
            if (v346) {
              break;
            }
          }
        }
LABEL_570:
        if (++v336 >= (unint64_t)v335) {
          goto LABEL_578;
        }
      }
      unint64_t v347 = 0;
      int v518 = 0;
      __int16 v348 = (void *)(v345 + 40);
      v502 = (void *)(v345 + 56);
      uint64_t v520 = (uint64_t)v334;
      v504 = v340;
      v496 = (void *)(v345 + 40);
      v499 = (unsigned __int16 *)(v345 + 48);
      while (1)
      {
        uint64_t v349 = *v348 + 40 * v347;
        int v351 = *(unsigned __int16 *)(v349 + 32);
        int v350 = (unsigned __int16 *)(v349 + 32);
        if (v351) {
          break;
        }
LABEL_568:
        if (++v347 >= v346)
        {
          unsigned int v335 = *(unsigned __int16 *)(v22 + 8);
          goto LABEL_570;
        }
      }
      int v352 = 0;
      unsigned int v523 = 0;
      unint64_t v515 = v347;
      v353 = (uint64_t *)(*v348 + 40 * v347 + 24);
      v507 = v350;
      v509 = v353;
      while (2)
      {
        uint64_t inited = utf8_getUTF8Char(*v353, v523, &v535);
        if ((inited & 0x80000000) != 0) {
          break;
        }
        if (utf8_IsChineseLetter((const char *)&v535))
        {
          uint64_t v354 = *(void *)(v332 + 1312);
          unsigned int v355 = *(unsigned __int8 *)(v332 + 1296);
          uint64_t v356 = heap_Calloc((void *)a1[1], 1, 2048);
          if (!v356)
          {
            uint64_t inited = 2315264010;
            log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v357, v358, v359, v360, v446);
LABEL_577:
            v334 = (uint64_t *)v520;
            break;
          }
          v361 = (char *)v356;
          if (v355 > 1)
          {
            uint64_t v362 = 0;
            uint64_t v363 = v355 - 1;
            while (strcmp(*(const char **)(v354 + v362), "char0"))
            {
              v362 += 8;
              if (8 * (v355 - 1) == v362)
              {
                uint64_t inited = 0;
                goto LABEL_451;
              }
            }
            uint64_t v364 = fe_stress_feat_character((uint64_t)a1, (uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, v523, 0, v361);
            if ((v364 & 0x80000000) != 0)
            {
LABEL_575:
              uint64_t inited = v364;
              goto LABEL_576;
            }
            uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 0, v520, v361);
            if ((inited & 0x80000000) != 0) {
              goto LABEL_576;
            }
LABEL_451:
            uint64_t v365 = 0;
            while (strcmp(*(const char **)(v354 + 8 * v365), "lchar"))
            {
              if (v363 == ++v365) {
                goto LABEL_457;
              }
            }
            uint64_t v364 = fe_stress_feat_character((uint64_t)a1, (uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, v523, -1, v361);
            if ((v364 & 0x80000000) != 0) {
              goto LABEL_575;
            }
            uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 1, v520, v361);
            if ((inited & 0x80000000) == 0)
            {
LABEL_457:
              uint64_t v366 = 0;
              while (strcmp(*(const char **)(v354 + 8 * v366), "llchar"))
              {
                if (v363 == ++v366) {
                  goto LABEL_463;
                }
              }
              uint64_t v364 = fe_stress_feat_character((uint64_t)a1, (uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, v523, -2, v361);
              if ((v364 & 0x80000000) != 0) {
                goto LABEL_575;
              }
              uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 2, v520, v361);
              if ((inited & 0x80000000) == 0)
              {
LABEL_463:
                uint64_t v367 = 0;
                while (strcmp(*(const char **)(v354 + 8 * v367), "l3char"))
                {
                  if (v363 == ++v367) {
                    goto LABEL_469;
                  }
                }
                uint64_t v364 = fe_stress_feat_character((uint64_t)a1, (uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, v523, -3, v361);
                if ((v364 & 0x80000000) != 0) {
                  goto LABEL_575;
                }
                uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 3, v520, v361);
                if ((inited & 0x80000000) == 0)
                {
LABEL_469:
                  uint64_t v368 = 0;
                  while (strcmp(*(const char **)(v354 + 8 * v368), "rchar"))
                  {
                    if (v363 == ++v368) {
                      goto LABEL_475;
                    }
                  }
                  uint64_t v364 = fe_stress_feat_character((uint64_t)a1, (uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, v523, 1, v361);
                  if ((v364 & 0x80000000) != 0) {
                    goto LABEL_575;
                  }
                  uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 4, v520, v361);
                  if ((inited & 0x80000000) == 0)
                  {
LABEL_475:
                    uint64_t v369 = 0;
                    while (strcmp(*(const char **)(v354 + 8 * v369), "rrchar"))
                    {
                      if (v363 == ++v369) {
                        goto LABEL_481;
                      }
                    }
                    uint64_t v364 = fe_stress_feat_character((uint64_t)a1, (uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, v523, 2, v361);
                    if ((v364 & 0x80000000) != 0) {
                      goto LABEL_575;
                    }
                    uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 5, v520, v361);
                    if ((inited & 0x80000000) == 0)
                    {
LABEL_481:
                      uint64_t v370 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v370), "r3char"))
                      {
                        if (v363 == ++v370) {
                          goto LABEL_487;
                        }
                      }
                      uint64_t v364 = fe_stress_feat_character((uint64_t)a1, (uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, v523, 3, v361);
                      if ((v364 & 0x80000000) != 0) {
                        goto LABEL_575;
                      }
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 6, v520, v361);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_487:
                      uint64_t v371 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v371), "phon0"))
                      {
                        if (v363 == ++v371) {
                          goto LABEL_492;
                        }
                      }
                      int v372 = (char *)fe_stress_feat_phon((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v518, 0);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 7, v520, v372);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_492:
                      uint64_t v373 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v373), "lphon"))
                      {
                        if (v363 == ++v373) {
                          goto LABEL_497;
                        }
                      }
                      unsigned __int16 v374 = (char *)fe_stress_feat_phon((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v518, -1);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 8, v520, v374);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_497:
                      uint64_t v375 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v375), "rphon"))
                      {
                        if (v363 == ++v375) {
                          goto LABEL_502;
                        }
                      }
                      v376 = (char *)fe_stress_feat_phon((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v518, 1);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 9, v520, v376);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_502:
                      uint64_t v377 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v377), "tone0"))
                      {
                        if (v363 == ++v377) {
                          goto LABEL_507;
                        }
                      }
                      int v378 = (char *)fe_stress_feat_tone((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v518, 0);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 10, v520, v378);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_507:
                      uint64_t v379 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v379), "ltone"))
                      {
                        if (v363 == ++v379) {
                          goto LABEL_512;
                        }
                      }
                      unsigned __int16 v380 = (char *)fe_stress_feat_tone((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v518, -1);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 11, v520, v380);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_512:
                      uint64_t v381 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v381), "rtone"))
                      {
                        if (v363 == ++v381) {
                          goto LABEL_517;
                        }
                      }
                      unsigned __int16 v382 = (char *)fe_stress_feat_tone((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v518, 1);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 12, v520, v382);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_517:
                      uint64_t v383 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v383), "word0"))
                      {
                        if (v363 == ++v383) {
                          goto LABEL_522;
                        }
                      }
                      uint64_t v384 = (char *)fe_stress_feat_word((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, 0);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 13, v520, v384);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_522:
                      uint64_t v385 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v385), "lword"))
                      {
                        if (v363 == ++v385) {
                          goto LABEL_527;
                        }
                      }
                      uint64_t v386 = (char *)fe_stress_feat_word((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, -1);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 14, v520, v386);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_527:
                      uint64_t v387 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v387), "rword"))
                      {
                        if (v363 == ++v387) {
                          goto LABEL_532;
                        }
                      }
                      unsigned __int16 v388 = (char *)fe_stress_feat_word((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, 1);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 15, v520, v388);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_532:
                      uint64_t v389 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v389), "wordlen"))
                      {
                        if (v363 == ++v389) {
                          goto LABEL_540;
                        }
                      }
                      char *v361 = 0;
                      uint64_t v390 = *(void *)v22 + (v336 << 6);
                      if (v515 >= *(unsigned __int16 *)(v390 + 48)) {
                        *(_WORD *)v361 = 61;
                      }
                      else {
                        sprintf(v361, "%d", *(unsigned __int16 *)(*(void *)(v390 + 40) + 40 * v515 + 32));
                      }
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 16, v520, v361);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_540:
                      uint64_t v391 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v391), "pos0"))
                      {
                        if (v363 == ++v391) {
                          goto LABEL_545;
                        }
                      }
                      v392 = (char *)fe_stress_feat_pos((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, 0);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 17, v520, v392);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_545:
                      uint64_t v393 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v393), "lpos"))
                      {
                        if (v363 == ++v393) {
                          goto LABEL_550;
                        }
                      }
                      uint64_t v394 = (char *)fe_stress_feat_pos((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, -1);
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v354, v355, 18, v520, v394);
                      if ((inited & 0x80000000) != 0) {
                        goto LABEL_576;
                      }
LABEL_550:
                      uint64_t v395 = 0;
                      while (strcmp(*(const char **)(v354 + 8 * v395), "rpos"))
                      {
                        if (v363 == ++v395)
                        {
                          v334 = (uint64_t *)v520;
                          goto LABEL_555;
                        }
                      }
                      uint64_t v396 = (char *)fe_stress_feat_pos((uint64_t *)v22, (unsigned __int16)v336, (unsigned __int16)v515, 1);
                      uint64_t v397 = v354;
                      v334 = (uint64_t *)v520;
                      uint64_t inited = fe_stress_igtr_setFeature((uint64_t)a1, v397, v355, 19, v520, v396);
LABEL_555:
                      heap_Free((void *)a1[1], (uint64_t)v361);
                      uint64_t v332 = v474;
                      v353 = v509;
                      if ((inited & 0x80000000) != 0) {
                        break;
                      }
                      goto LABEL_556;
                    }
                  }
                }
              }
            }
LABEL_576:
            heap_Free((void *)a1[1], (uint64_t)v361);
            uint64_t v332 = v474;
            goto LABEL_577;
          }
          heap_Free((void *)a1[1], v356);
          uint64_t inited = 0;
          v334 = (uint64_t *)v520;
          v353 = v509;
LABEL_556:
          igtree_Process(v332, (uint64_t)v334, &v536);
          v398 = v536;
          if (strcmp(v536, "NOMATCH"))
          {
            unsigned int v399 = atoi(v398);
            if (v399 <= 1) {
              *(_DWORD *)(*v502 + 32 * (unsigned __int16)v518 + 24) = v399;
            }
          }
          unsigned int v523 = utf8_GetNextUtf8Offset((char *)*v353, v523);
          unsigned int v400 = *v504;
          int v350 = v507;
          if (v400 + 1 == *v512)
          {
            if (!isERphon((unsigned __int8 *)&v535, *(char **)(*v502 + 32 * (unsigned __int16)v518)))
            {
              unsigned int v400 = *v504;
              goto LABEL_562;
            }
          }
          else
          {
LABEL_562:
            if (v400 <= (unsigned __int16)(v518 + 1)) {
              int v401 = v518;
            }
            else {
              int v401 = v518 + 1;
            }
            int v518 = v401;
          }
        }
        if (++v352 >= *v350)
        {
          __int16 v348 = v496;
          unsigned __int16 v346 = *v499;
          unint64_t v347 = v515;
          goto LABEL_568;
        }
        continue;
      }
    }
  }
LABEL_578:
  hlp_igtree_freeFeatureVector((uint64_t)a1, v334, (unsigned __int16)(*(unsigned __int8 *)(v332 + 1296) - 1));
  heap_Free((void *)a1[1], (uint64_t)v334);
  uint64_t v402 = v465;
  if ((inited & 0x80000000) == 0)
  {
LABEL_579:
    LOWORD(v527) = 0;
    LOWORD(v526) = 0;
    __int16 v525 = 0;
    *(_WORD *)__s2 = 0;
    v535 = 0;
    v536 = 0;
    v403 = (char *)heap_Calloc((void *)a1[1], 1, 2048);
    if (v403)
    {
      v404 = v403;
      *(_DWORD *)v528 = 0;
      char *v403 = 0;
      uint64_t v405 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char **))(v402 + 104))(v486, v469, 1, 0, &v527);
      if ((v405 & 0x80000000) != 0) {
        goto LABEL_651;
      }
      uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char **))(v402 + 104))(v486, v469, 2, (unsigned __int16)v527, &v526);
      if ((inited & 0x80000000) == 0)
      {
        unsigned __int16 v406 = (unsigned __int16)v526;
        if ((_WORD)v526)
        {
          unsigned __int16 v407 = 0;
          unsigned __int16 v524 = 2048;
          while (1)
          {
            uint64_t v405 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, __int16 *))(v465 + 168))(v486, v469, v406, 0, 1, v528, &v525);
            if ((v405 & 0x80000000) != 0) {
              break;
            }
            if (*(_DWORD *)v528 <= 0xAu && ((1 << v528[0]) & 0x610) != 0)
            {
              uint64_t v405 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, __int16 *))(v465 + 176))(v486, v469, (unsigned __int16)v526, 9, &v536, &v525);
              if ((v405 & 0x80000000) != 0) {
                break;
              }
              uint64_t v405 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(v465 + 176))(v486, v469, (unsigned __int16)v526, 3, &v535, &v525);
              if ((v405 & 0x80000000) != 0) {
                break;
              }
              v409 = v536;
              if (!strcmp(v536, "normal") || !strcmp(v409, "mnx"))
              {
                unint64_t v410 = *(void *)v22 + ((unint64_t)v407 << 6);
                unsigned int v411 = *(unsigned __int16 *)(v410 + 54);
                if (v411 <= *(unsigned __int16 *)(v410 + 52))
                {
                  unsigned int v412 = v411 + (unsigned __int16)strlen(v535);
                  if (v412 >= v524)
                  {
                    unsigned __int16 v524 = v412 + 1;
                    uint64_t v413 = heap_Realloc((uint64_t *)a1[1], (uint64_t)v404, (unsigned __int16)(v412 + 1));
                    if (!v413)
                    {
                      uint64_t inited = 2315264010;
                      log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v414, v415, v416, v417, v446);
                      goto LABEL_652;
                    }
                    unsigned int v411 = *(unsigned __int16 *)(*(void *)v22 + ((unint64_t)v407 << 6) + 54);
                    v404 = (char *)v413;
                  }
                  if (v411)
                  {
                    uint64_t v418 = 0;
                    unint64_t v419 = 0;
                    do
                    {
                      if (v418)
                      {
                        *(_WORD *)&v404[strlen(v404)] = 46;
                      }
                      else if (strstr(v535, "[SVOX]"))
                      {
                        strcpy(v404, "[SVOX]");
                      }
                      uint64_t v420 = *(void *)(*(void *)v22 + ((unint64_t)v407 << 6) + 56);
                      if (*(_DWORD *)(v420 + v418 + 24) == 1)
                      {
                        *(_WORD *)&v404[strlen(v404)] = 39;
                        uint64_t v420 = *(void *)(*(void *)v22 + ((unint64_t)v407 << 6) + 56);
                      }
                      strcat(v404, *(const char **)(v420 + v418));
                      ++v419;
                      v418 += 32;
                    }
                    while (v419 < *(unsigned __int16 *)(*(void *)v22 + ((unint64_t)v407 << 6) + 54));
                  }
                  __int16 v421 = strlen(v404);
                  uint64_t v405 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(v465 + 160))(v486, v469, (unsigned __int16)v526, 3, (unsigned __int16)(v421 + 1), v404, __s2);
                  if ((v405 & 0x80000000) != 0) {
                    break;
                  }
                  char *v404 = 0;
                }
              }
              ++v407;
            }
            uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, char **))(v465 + 120))(v486, v469, (unsigned __int16)v526, &v526);
            if ((inited & 0x80000000) == 0)
            {
              unsigned __int16 v406 = (unsigned __int16)v526;
              if ((_WORD)v526) {
                continue;
              }
            }
            goto LABEL_652;
          }
LABEL_651:
          uint64_t inited = v405;
        }
      }
LABEL_652:
      int v251 = (void *)a1[1];
      unsigned int v252 = v404;
LABEL_381:
      heap_Free(v251, (uint64_t)v252);
      goto LABEL_613;
    }
LABEL_612:
    uint64_t inited = 2315264010;
    log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v30, v31, v32, v33, v446);
  }
LABEL_613:
  if (*(_WORD *)(v22 + 8))
  {
    unint64_t v422 = 0;
    do
    {
      uint64_t v423 = *(void *)v22;
      if (*(void *)v22)
      {
        v424 = (uint64_t *)(v423 + (v422 << 6));
        if (*v424)
        {
          heap_Free((void *)a1[1], *v424);
          uint64_t *v424 = 0;
        }
        unint64_t v425 = v423 + (v422 << 6);
        uint64_t v426 = *(void *)(v425 + 16);
        if (v426)
        {
          heap_Free((void *)a1[1], v426);
          *(void *)(v425 + 16) = 0;
        }
        uint64_t v429 = *(void *)(v425 + 24);
        v428 = (void *)(v425 + 24);
        uint64_t v427 = v429;
        if (v429)
        {
          heap_Free((void *)a1[1], v427);
          void *v428 = 0;
        }
        unint64_t v430 = v423 + (v422 << 6);
        v432 = (uint64_t *)(v430 + 56);
        uint64_t v431 = *(void *)(v430 + 56);
        if (v431)
        {
          if (*(_WORD *)(v430 + 54))
          {
            uint64_t v433 = 0;
            unint64_t v434 = 0;
            uint64_t v435 = *(void *)(v430 + 56);
            do
            {
              if (v435)
              {
                if (*(void *)(v435 + v433))
                {
                  heap_Free((void *)a1[1], *(void *)(v435 + v433));
                  uint64_t v431 = *v432;
                  *(void *)(*v432 + v433) = 0;
                }
                if (*(void *)(v431 + v433 + 16))
                {
                  heap_Free((void *)a1[1], *(void *)(v431 + v433 + 16));
                  uint64_t v431 = *v432;
                  *(void *)(*v432 + v433 + 16) = 0;
                }
                uint64_t v435 = v431;
                if (*(void *)(v431 + v433 + 8))
                {
                  heap_Free((void *)a1[1], *(void *)(v431 + v433 + 8));
                  uint64_t v431 = *v432;
                  *(void *)(*v432 + v433 + 8) = 0;
                  uint64_t v435 = v431;
                }
              }
              ++v434;
              v433 += 32;
            }
            while (v434 < *(unsigned __int16 *)(v430 + 54));
          }
          heap_Free((void *)a1[1], v431);
          uint64_t *v432 = 0;
        }
        uint64_t v438 = *(void *)(v430 + 40);
        v437 = (uint64_t *)(v430 + 40);
        uint64_t v436 = v438;
        if (v438)
        {
          unint64_t v439 = v423 + (v422 << 6);
          int v441 = *(unsigned __int16 *)(v439 + 50);
          v440 = (unsigned __int16 *)(v439 + 50);
          if (v441)
          {
            uint64_t v442 = 0;
            unint64_t v443 = 0;
            uint64_t v444 = v436;
            do
            {
              if (v444)
              {
                if (*(void *)(v444 + v442))
                {
                  heap_Free((void *)a1[1], *(void *)(v444 + v442));
                  uint64_t v436 = *v437;
                  *(void *)(*v437 + v442) = 0;
                }
                if (*(void *)(v436 + v442 + 8))
                {
                  heap_Free((void *)a1[1], *(void *)(v436 + v442 + 8));
                  uint64_t v436 = *v437;
                  *(void *)(*v437 + v442 + 8) = 0;
                }
                uint64_t v444 = v436;
                if (*(void *)(v436 + v442 + 24))
                {
                  heap_Free((void *)a1[1], *(void *)(v436 + v442 + 24));
                  uint64_t v436 = *v437;
                  *(void *)(*v437 + v442 + 24) = 0;
                  uint64_t v444 = v436;
                }
              }
              ++v443;
              v442 += 40;
            }
            while (v443 < *v440);
          }
          heap_Free((void *)a1[1], v436);
          uint64_t *v437 = 0;
        }
      }
      ++v422;
    }
    while (v422 < *(unsigned __int16 *)(v22 + 8));
  }
  if (*(void *)v22) {
    heap_Free((void *)a1[1], *(void *)v22);
  }
  *(void *)uint64_t v22 = 0;
  *(void *)(v22 + 8) = 0;
  heap_Free((void *)a1[1], v22);
  return inited;
}

void *stat_stress_freeCandidatePhons(void *result, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (v3)
  {
    unsigned int v4 = result;
    unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
    if (*(_WORD *)(a2 + 8))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = v3;
      do
      {
        if (v8)
        {
          if (*(void *)(v8 + v6))
          {
            heap_Free((void *)v4[1], *(void *)(v8 + v6));
            uint64_t v3 = *(void *)a2;
            *(void *)(v3 + v6) = 0;
            unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
            uint64_t v8 = v3;
          }
        }
        ++v7;
        v6 += 16;
      }
      while (v7 < v5);
    }
    uint64_t result = heap_Free((void *)v4[1], v3);
    *(void *)a2 = 0;
  }
  return result;
}

BOOL isPunc(const char *a1)
{
  if (strlen(a1) > 1) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)a1;
  BOOL result = 1;
  if ((v3 - 33) > 0x3E || ((1 << (v3 - 33)) & 0x740000007E003FCFLL) == 0) {
    return v3 == 124;
  }
  return result;
}

BOOL isERphon(unsigned __int8 *a1, char *__s)
{
  unsigned int v4 = strlen(__s);
  unsigned int v5 = v4;
  if (v4 >= 2 && (v4 >= 5 && !strcmp(&__s[v4 - 5], "%\"~r\"") || !strcmp(&__s[v5 - 2], "%r")))
  {
    int v7 = *__s;
    BOOL v6 = v7 != 97 && v7 != 36;
  }
  else
  {
    BOOL v6 = 0;
  }
  __int16 v10 = 0;
  utf8_Utf8CharTo16bit(a1, (uint64_t)&v10);
  return v10 != 20799 && v6;
}

uint64_t fe_stress_igtr_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  uint64_t v8 = g_featureNames_1[a3];
  while (strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6) {
      return 0;
    }
  }
  *a4 = v6;
  return 1;
}

uint64_t fe_stress_feat_character(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, unsigned char *a7)
{
  uint64_t v10 = *a2;
  uint64_t v11 = a3;
  uint64_t v54 = a4;
  uint64_t v57 = *(const char ***)(*a2 + ((unint64_t)a3 << 6) + 40);
  int v55 = strlen(v57[5 * a4]);
  if (a3)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    do
    {
      uint64_t v14 = v10 + (v12 << 6);
      uint64_t v15 = *(unsigned __int16 *)(v14 + 48);
      if (*(_WORD *)(v14 + 48))
      {
        __int16 v16 = *(const char ***)(v14 + 40);
        do
        {
          uint64_t v17 = *v16;
          v16 += 5;
          v13 += strlen(v17);
          --v15;
        }
        while (v15);
      }
      ++v12;
    }
    while (v12 != v11);
  }
  else
  {
    int v13 = 0;
  }
  if (a4)
  {
    uint64_t v18 = v54;
    uint64_t v19 = v57;
    do
    {
      uint64_t v20 = *v19;
      v19 += 5;
      v13 += strlen(v20);
      --v18;
    }
    while (v18);
  }
  unsigned int v21 = *((unsigned __int16 *)a2 + 4);
  unsigned __int16 v22 = a3 + 1;
  if (v21 <= (unsigned __int16)(a3 + 1))
  {
    int v23 = 0;
  }
  else
  {
    int v23 = 0;
    uint64_t v24 = v22;
    do
    {
      uint64_t v25 = v10 + (v24 << 6);
      uint64_t v26 = *(unsigned __int16 *)(v25 + 48);
      if (*(_WORD *)(v25 + 48))
      {
        uint64_t v27 = *(const char ***)(v25 + 40);
        do
        {
          uint64_t v28 = *v27;
          v27 += 5;
          v23 += strlen(v28);
          --v26;
        }
        while (v26);
      }
      ++v24;
    }
    while (v21 != (unsigned __int16)v24);
  }
  unsigned int v29 = *(unsigned __int16 *)(v10 + (v11 << 6) + 48);
  if (v29 <= (unsigned __int16)(a4 + 1))
  {
    uint64_t v30 = a1;
  }
  else
  {
    uint64_t v30 = a1;
    uint64_t v31 = &v57[5 * (unsigned __int16)(a4 + 1)];
    uint64_t v32 = (unsigned __int16)(a4 + 1) + 1;
    do
    {
      uint64_t v33 = *v31;
      v31 += 5;
      v23 += strlen(v33);
      BOOL v34 = v29 == (unsigned __int16)v32++;
    }
    while (!v34);
  }
  uint64_t v35 = heap_Calloc(*(void **)(v30 + 8), 1, (v55 + v13 + v23 + 1));
  if (!v35)
  {
    log_OutPublic(*(void *)(v30 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v36, v37, v38, v39, v51);
    return 2315264010;
  }
  uint64_t v40 = (char *)v35;
  unsigned int v41 = *((unsigned __int16 *)a2 + 4);
  uint64_t v42 = *a2;
  if (*((_WORD *)a2 + 4))
  {
    unint64_t v43 = 0;
    do
    {
      if (*(_WORD *)(v42 + (v43 << 6) + 48))
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          strcat(v40, *(const char **)(*(void *)(v42 + (v43 << 6) + 40) + v44));
          ++v45;
          uint64_t v42 = *a2;
          v44 += 40;
        }
        while (v45 < *(unsigned __int16 *)(*a2 + (v43 << 6) + 48));
        unsigned int v41 = *((unsigned __int16 *)a2 + 4);
      }
      ++v43;
    }
    while (v43 < v41);
  }
  uint64_t v46 = v42 + (v11 << 6);
  if (*(unsigned __int16 *)(v46 + 48) <= a4
    || strlen(*(const char **)(*(void *)(v46 + 40) + 40 * v54)) <= a5)
  {
    goto LABEL_47;
  }
  unsigned int NextUtf8Offset = v13 + a5;
  if (a6 < 0)
  {
    if (!NextUtf8Offset) {
      goto LABEL_47;
    }
    do
    {
      unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v40, NextUtf8Offset);
      unsigned int NextUtf8Offset = PreviousUtf8Offset;
      BOOL v34 = (unsigned __int16)~(_WORD)a6 == 0;
      LOWORD(a6) = a6 + 1;
    }
    while (!v34 && PreviousUtf8Offset);
    if ((_WORD)a6) {
      goto LABEL_47;
    }
  }
  else if (a6)
  {
    while (NextUtf8Offset != strlen(v40))
    {
      unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(v40, NextUtf8Offset);
      int v48 = (__int16)a6--;
      if (v48 <= 1) {
        goto LABEL_46;
      }
    }
    goto LABEL_47;
  }
LABEL_46:
  if ((utf8_getUTF8Char((uint64_t)v40, NextUtf8Offset, a7) & 0x80000000) != 0) {
LABEL_47:
  }
    *(_WORD *)a7 = 61;
  heap_Free(*(void **)(v30 + 8), (uint64_t)v40);
  return 0;
}

uint64_t fe_stress_igtr_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, char *a6)
{
  unsigned __int16 v12 = -1;
  if (!fe_stress_igtr_isFeatureRequired(a2, a3, a4, &v12)) {
    return 0;
  }
  if (*a6)
  {
    uint64_t v9 = v12;
    if (strlen(a6) < 0x41)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = hlp_resizeFeature(a1, (uint64_t *)(a5 + 8 * v12), a6);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
    }
    strcpy(*(char **)(a5 + 8 * v9), a6);
  }
  else
  {
    uint64_t v10 = 0;
    **(_WORD **)(a5 + 8 * v12) = 61;
  }
  return v10;
}

const char *fe_stress_feat_phon(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  unsigned int v5 = a4 + a3;
  signed int v6 = *(unsigned __int16 *)(*a1 + ((unint64_t)a2 << 6) + 54);
  if (a4 + a3 >= v6)
  {
    while (*((unsigned __int16 *)a1 + 4) - 1 > (unsigned __int16)a2)
    {
      a4 -= v6;
      LOWORD(a2) = a2 + 1;
      unsigned int v5 = a3 + (__int16)a4;
      signed int v6 = *(unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) + 54);
      if ((int)v5 < v6) {
        goto LABEL_6;
      }
    }
    unsigned int v5 = a3 + (__int16)a4;
  }
LABEL_6:
  if ((_WORD)a2 && (v5 & 0x80000000) != 0)
  {
    a2 = (unsigned __int16)a2;
    uint64_t v7 = (unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) - 10);
    do
    {
      int v8 = *v7;
      v7 -= 32;
      a4 += v8;
      unsigned int v5 = a3 + (__int16)a4;
      --a2;
    }
    while (a2 && (v5 & 0x80000000) != 0);
  }
  if ((v5 & 0x80000000) != 0) {
    return "=";
  }
  uint64_t v9 = v4 + ((unint64_t)(unsigned __int16)a2 << 6);
  if (v5 >= *(unsigned __int16 *)(v9 + 54)) {
    return "=";
  }
  else {
    return *(const char **)(*(void *)(v9 + 56) + 32 * v5);
  }
}

const char *fe_stress_feat_tone(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  unsigned int v5 = a4 + a3;
  signed int v6 = *(unsigned __int16 *)(*a1 + ((unint64_t)a2 << 6) + 54);
  if (a4 + a3 >= v6)
  {
    while (*((unsigned __int16 *)a1 + 4) - 1 > (unsigned __int16)a2)
    {
      a4 -= v6;
      LOWORD(a2) = a2 + 1;
      unsigned int v5 = a3 + (__int16)a4;
      signed int v6 = *(unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) + 54);
      if ((int)v5 < v6) {
        goto LABEL_6;
      }
    }
    unsigned int v5 = a3 + (__int16)a4;
  }
LABEL_6:
  if ((_WORD)a2 && (v5 & 0x80000000) != 0)
  {
    a2 = (unsigned __int16)a2;
    uint64_t v7 = (unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) - 10);
    do
    {
      int v8 = *v7;
      v7 -= 32;
      a4 += v8;
      unsigned int v5 = a3 + (__int16)a4;
      --a2;
    }
    while (a2 && (v5 & 0x80000000) != 0);
  }
  if ((v5 & 0x80000000) != 0) {
    return "=";
  }
  uint64_t v9 = v4 + ((unint64_t)(unsigned __int16)a2 << 6);
  if (v5 >= *(unsigned __int16 *)(v9 + 54)) {
    return "=";
  }
  else {
    return *(const char **)(*(void *)(v9 + 56) + 32 * v5 + 8);
  }
}

const char *fe_stress_feat_word(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  unsigned int v5 = a4 + a3;
  signed int v6 = *(unsigned __int16 *)(*a1 + ((unint64_t)a2 << 6) + 48);
  if (a4 + a3 >= v6)
  {
    while (*((unsigned __int16 *)a1 + 4) - 1 > (unsigned __int16)a2)
    {
      a4 -= v6;
      LOWORD(a2) = a2 + 1;
      unsigned int v5 = a3 + (__int16)a4;
      signed int v6 = *(unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) + 48);
      if ((int)v5 < v6) {
        goto LABEL_6;
      }
    }
    unsigned int v5 = a3 + (__int16)a4;
  }
LABEL_6:
  if ((_WORD)a2 && (v5 & 0x80000000) != 0)
  {
    a2 = (unsigned __int16)a2;
    uint64_t v7 = (unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) - 16);
    do
    {
      int v8 = *v7;
      v7 -= 32;
      a4 += v8;
      unsigned int v5 = a3 + (__int16)a4;
      --a2;
    }
    while (a2 && (v5 & 0x80000000) != 0);
  }
  if ((v5 & 0x80000000) != 0) {
    return "=";
  }
  uint64_t v9 = v4 + ((unint64_t)(unsigned __int16)a2 << 6);
  if (v5 >= *(unsigned __int16 *)(v9 + 48)) {
    return "=";
  }
  else {
    return *(const char **)(*(void *)(v9 + 40) + 40 * v5 + 24);
  }
}

const char *fe_stress_feat_pos(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  unsigned int v5 = a4 + a3;
  signed int v6 = *(unsigned __int16 *)(*a1 + ((unint64_t)a2 << 6) + 48);
  if (a4 + a3 >= v6)
  {
    while (*((unsigned __int16 *)a1 + 4) - 1 > (unsigned __int16)a2)
    {
      a4 -= v6;
      LOWORD(a2) = a2 + 1;
      unsigned int v5 = a3 + (__int16)a4;
      signed int v6 = *(unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) + 48);
      if ((int)v5 < v6) {
        goto LABEL_6;
      }
    }
    unsigned int v5 = a3 + (__int16)a4;
  }
LABEL_6:
  if ((_WORD)a2 && (v5 & 0x80000000) != 0)
  {
    a2 = (unsigned __int16)a2;
    uint64_t v7 = (unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) - 16);
    do
    {
      int v8 = *v7;
      v7 -= 32;
      a4 += v8;
      unsigned int v5 = a3 + (__int16)a4;
      --a2;
    }
    while (a2 && (v5 & 0x80000000) != 0);
  }
  if ((v5 & 0x80000000) != 0) {
    return "=";
  }
  uint64_t v9 = v4 + ((unint64_t)(unsigned __int16)a2 << 6);
  BOOL result = "=";
  if (v5 < *(unsigned __int16 *)(v9 + 48))
  {
    uint64_t v11 = *(void *)(*(void *)(v9 + 40) + 40 * v5 + 8);
    if (v11) {
      return (const char *)v11;
    }
  }
  return result;
}

uint64_t last_POSNN(uint64_t result, uint64_t a2, unsigned int a3, const char **a4, unsigned int a5)
{
  if (!result) {
    return result;
  }
  signed int v6 = 0;
  for (uint64_t i = *(void *)(*(void *)(a2 + 1064) + 184 * a3 + 48) + 1; *(unsigned char *)(i - 1) == 45; ++i)
  {
    signed int v6 = (const char *)i;
LABEL_7:
    ;
  }
  if (*(unsigned char *)(i - 1)) {
    goto LABEL_7;
  }
  if (v6) {
    int v8 = v6;
  }
  else {
    int v8 = *(const char **)(*(void *)(a2 + 1064) + 184 * a3 + 48);
  }
  if (!a5) {
    return 0;
  }
  uint64_t v9 = a5;
  while (strcmp(*a4, v8))
  {
    ++a4;
    if (!--v9) {
      return 0;
    }
  }
  return 1;
}

uint64_t first_POSNN(uint64_t a1, uint64_t a2, unsigned int a3, const char **a4, int a5)
{
  LODWORD(v5) = a5;
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = strlen(*(const char **)(*(void *)(a2 + 1064) + 184 * a3 + 48));
  uint64_t v12 = heap_Alloc(v10, (v11 + 1));
  if (!v12) {
    return 0;
  }
  int v13 = (const char *)v12;
  unsigned __int16 v14 = 0;
  for (uint64_t i = *(unsigned char **)(*(void *)(a2 + 1064) + 184 * a3 + 48); ; ++i)
  {
    int v16 = *i;
    if (!*i || v16 == 45) {
      break;
    }
    uint64_t v17 = v14++;
    *(unsigned char *)(v12 + v17) = v16;
  }
  *(unsigned char *)(v12 + v14) = 0;
  if (v5)
  {
    uint64_t v5 = v5;
    while (strcmp(v13, *a4))
    {
      ++a4;
      if (!--v5) {
        goto LABEL_10;
      }
    }
    uint64_t v18 = 1;
  }
  else
  {
LABEL_10:
    uint64_t v18 = 0;
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v13);
  return v18;
}

uint64_t has_POSNN(uint64_t a1, uint64_t a2, unsigned int a3, const char **a4, unsigned int a5)
{
  uint64_t result = 0;
  if (a1 && a5)
  {
    int v8 = *(char **)(*(void *)(a2 + 1064) + 184 * a3 + 48);
    uint64_t v9 = a5;
    while (!strstr(v8, *a4))
    {
      ++a4;
      if (!--v9) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t first_characterNN(uint64_t result, uint64_t a2, unsigned int a3, const char **a4, int a5)
{
  if (result)
  {
    LODWORD(v5) = a5;
    utf8_getUTF8Char(*(void *)(*(void *)(a2 + 1064) + 184 * a3 + 48), 0, __s2);
    if (v5)
    {
      uint64_t v5 = v5;
      while (strcmp(*a4, __s2))
      {
        ++a4;
        if (!--v5) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t last_characterNN(uint64_t result, uint64_t a2, unsigned int a3, const char **a4, int a5)
{
  __int16 v15 = 0;
  *(_DWORD *)__s2 = 0;
  if (result)
  {
    LODWORD(v5) = a5;
    uint64_t v7 = *(const char **)(*(void *)(a2 + 1064) + 184 * a3 + 48);
    int v8 = strlen(v7);
    int v9 = v8 - utf8_GetCurrentUtf8Offset((unint64_t)v7, v8 - 1);
    int v10 = strlen(v7);
    int CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v7, v10 - 1);
    if (v9 >= (int)Utf8_LengthInBytes((unsigned __int8 *)&v7[CurrentUtf8Offset], 1))
    {
      int v12 = strlen(v7);
      unsigned int v13 = utf8_GetCurrentUtf8Offset((unint64_t)v7, v12 - 1);
      utf8_getUTF8Char((uint64_t)v7, v13, __s2);
    }
    if (v5)
    {
      uint64_t v5 = v5;
      while (strcmp(*a4, __s2))
      {
        ++a4;
        if (!--v5) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t addPhrasingRuleNN(uint64_t a1, uint64_t *a2, const char *a3)
{
  unsigned __int16 v6 = 1;
  for (uint64_t i = a3; *i == 94; ++i)
  {
    ++v6;
LABEL_6:
    ;
  }
  if (*i) {
    goto LABEL_6;
  }
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), v6, 40);
  uint64_t v9 = *a2;
  uint64_t v10 = *((unsigned __int16 *)a2 + 4);
  *(void *)(*a2 + 16 * v10) = v8;
  if (!v8) {
    return 2315264010;
  }
  *(_WORD *)(v9 + 16 * v10 + 8) = v6;
  uint64_t result = parseOneRuleNN(a1, v8, v6, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    ++*((_WORD *)a2 + 4);
  }
  return result;
}

uint64_t parseOneRuleNN(uint64_t a1, uint64_t a2, unsigned int a3, const char *a4)
{
  for (unsigned __int16 i = 0; a4[i] != 45 || a4[i + 1] != 45 || a4[i + 2] != 62; ++i)
    ;
  a4[i] = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a3;
  while (2)
  {
    uint64_t v9 = a4 - 1;
    do
    {
      int v11 = *(unsigned __int8 *)++v9;
      int v10 = v11;
    }
    while (v11 == 32);
    int v12 = v9;
    while (v10 != 95)
    {
      int v13 = *(unsigned __int8 *)++v12;
      int v10 = v13;
    }
    const char *v12 = 0;
    *(_WORD *)(a2 + 40 * v7 + 8) = atoi(v9);
    do
    {
      int v15 = *(unsigned __int8 *)++v12;
      int v14 = v15;
    }
    while (v15 == 32);
    int v16 = v12;
    if (v14 != 40)
    {
      int v16 = v12;
      do
        int v17 = *(unsigned __int8 *)++v16;
      while (v17 != 40);
    }
    uint64_t v18 = (void *)(a2 + 40 * v7);
    *int v16 = 0;
    if (!strcmp(v12, "last-pos")) {
      *uint64_t v18 = last_POSNN;
    }
    if (!strcmp(v12, "first-pos")) {
      *uint64_t v18 = first_POSNN;
    }
    if (!strcmp(v12, "has-pos")) {
      *uint64_t v18 = has_POSNN;
    }
    if (!strcmp(v12, "first-character")) {
      *uint64_t v18 = first_characterNN;
    }
    if (!strcmp(v12, "last-character")) {
      *uint64_t v18 = last_characterNN;
    }
    uint64_t v19 = a2 + 40 * v7;
    *(_WORD *)(v19 + 32) = 1;
    uint64_t v20 = (_WORD *)(v19 + 32);
    unsigned int v21 = v16;
    do
    {
      int v23 = *(unsigned __int8 *)++v16;
      int v22 = v23;
      ++v21;
    }
    while (v23 == 32);
    uint64_t v24 = 0;
    int v25 = 1;
    while (v22 == 124)
    {
      *uint64_t v20 = ++v25;
LABEL_35:
      int v22 = v16[++v24];
    }
    if (v22 != 41) {
      goto LABEL_35;
    }
    v16[v24] = 0;
    uint64_t v26 = &v16[v24 + 1];
    uint64_t v27 = (char *)heap_Alloc(*(void *)(a1 + 8), (unsigned __int16)(v24 + 2));
    uint64_t v28 = a2 + 40 * v7;
    *(void *)(v28 + 16) = v27;
    unsigned int v29 = (void *)(v28 + 16);
    if (v27)
    {
      strcpy(v27, v16);
      uint64_t v30 = (void *)heap_Alloc(*(void *)(a1 + 8), 8 * (unsigned __int16)*v20);
      uint64_t v31 = a2 + 40 * v7;
      *(void *)(v31 + 24) = v30;
      uint64_t v32 = (void *)(v31 + 24);
      if (v30)
      {
        *uint64_t v30 = *v29;
        if ((unsigned __int16)*v20 >= 2u)
        {
          unint64_t v33 = 1;
          do
          {
            BOOL v34 = (void *)(*v32 + 8 * v33);
            for (uint64_t j = (unsigned char *)*(v34 - 1); ; uint64_t j = v36 + 1)
            {
              *BOOL v34 = j;
              BOOL v34 = (void *)(*v32 + 8 * v33);
              uint64_t v36 = (unsigned char *)*v34;
              if (*(unsigned char *)*v34 == 124) {
                break;
              }
            }
            *BOOL v34 = v36 + 1;
            *uint64_t v36 = 0;
            ++v33;
          }
          while (v33 < (unsigned __int16)*v20);
        }
        while (1)
        {
          int v37 = *(unsigned __int8 *)v26;
          if (!*v26 || v37 == 94) {
            break;
          }
          ++v26;
        }
        if (v37 == 94) {
          a4 = v26 + 1;
        }
        else {
          a4 = v26;
        }
        if (++v7 == v8) {
          return 0;
        }
        continue;
      }
    }
    return 2315264010;
  }
}

uint64_t releasePhrasingRuleStructNN(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (v3)
  {
    unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
    if (*(_WORD *)(a2 + 10))
    {
      unint64_t v6 = 0;
      do
      {
        unint64_t v7 = v3 + 16 * v6;
        uint64_t v8 = *(void *)v7;
        if (*(void *)v7)
        {
          if (*(_WORD *)(v7 + 8))
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            do
            {
              if (*(void *)(*(void *)v7 + v9 + 16))
              {
                heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)v7 + v9 + 16));
                uint64_t v3 = *(void *)a2;
              }
              if (*(void *)(*(void *)(v3 + 16 * v6) + v9 + 24))
              {
                heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)(v3 + 16 * v6) + v9 + 24));
                uint64_t v3 = *(void *)a2;
              }
              ++v10;
              unint64_t v7 = v3 + 16 * v6;
              v9 += 40;
            }
            while (v10 < *(unsigned __int16 *)(v7 + 8));
            uint64_t v8 = *(void *)v7;
          }
          heap_Free(*(void **)(a1 + 8), v8);
          uint64_t v3 = *(void *)a2;
          *(void *)(*(void *)a2 + 16 * v6) = 0;
          unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
        }
        ++v6;
      }
      while (v6 < v5);
    }
    heap_Free(*(void **)(a1 + 8), v3);
  }
  *(_WORD *)(a2 + 10) = 0;
  *(void *)a2 = 0;
  return 0;
}

uint64_t com_IncludeCRF(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  __s1 = 0;
  uint64_t CfgParamVal = com_mosynt_GetCfgParamVal(a1, a2, a3, (uint64_t)"statbnd_include", "NO", &__s1);
  if ((CfgParamVal & 0x80000000) != 0)
  {
    BOOL v7 = 0;
  }
  else
  {
    unint64_t v6 = __s1;
    BOOL v7 = !strcmp(__s1, "CRF") || strcmp(v6, "crf") == 0;
  }
  *a4 = v7;
  return CfgParamVal;
}

uint64_t pandpCrfInit(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v100[4] = *MEMORY[0x263EF8340];
  *(void *)(a11 + 224) = 0;
  int v17 = (uint64_t *)(a11 + 224);
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  int v18 = hlp_BrokerString(a5, (char *)&v84);
  if (v18 < 0)
  {
    int v28 = v18;
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Could not assemble broker string for CRF phrasing model %s", v19, v20, v21, (uint64_t)"crfphrase");
    goto LABEL_7;
  }
  uint64_t v77 = a5;
  int Only_ReferenceCnt = crf_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, v17, 2, (uint64_t)&v84, (uint64_t)"CRPH", 1031, 0, 0);
  if (Only_ReferenceCnt < 0)
  {
    int v28 = Only_ReferenceCnt;
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no CRF Phrasing model found", v23, v24, v25, (uint64_t)&v84);
LABEL_7:
    uint64_t v29 = v28 | 0x8A002000;
    if (*v17)
    {
      crf_Deinit_ReadOnly_DereferenceCnt(a5, a6, *v17);
      uint64_t *v17 = 0;
    }
    return v29;
  }
  uint64_t v76 = (uint64_t *)(a11 + 232);
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  unsigned __int8 v81 = 0;
  int __c = 0;
  uint64_t v78 = 0;
  *(void *)uint64_t v79 = 0;
  v100[0] = 0;
  int v82 = 0;
  char v83 = 0;
  uint64_t v26 = a5;
  if ((com_mosynt_GetCfgParamVal(a9, a10, a7, (uint64_t)"fephrase_max_rule", "1024", &v78) & 0x80000000) != 0) {
    uint64_t v27 = 1024;
  }
  else {
    uint64_t v27 = atoi(v78);
  }
  uint64_t v30 = heap_Calloc(*(void **)(a5 + 8), 1, v27);
  if (v30)
  {
    uint64_t v35 = (char *)v30;
    int v39 = hlp_BrokerString(a5, (char *)&v84);
    uint64_t v40 = *(void *)(a5 + 32);
    if (v39 < 0)
    {
      log_OutText(v40, (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Could not assemble broker string for SP rules %s", v36, v37, v38, (uint64_t)"sprules");
      signed int v60 = v39 | 0x8A002000;
    }
    else
    {
      log_OutText(v40, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"looking for SP rules %s at %s", v36, v37, v38, (uint64_t)"sprules");
      signed int v41 = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)&v84, "SPDT", 1031, (uint64_t *)&v82);
      if (v41 < 0)
      {
        signed int v60 = v41;
        log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"no sp rules", v43, v44, v45, v73);
        *(_WORD *)(a11 + 242) = 0;
        *(void *)(a11 + 232) = 0;
      }
      else
      {
        while (1)
        {
          signed int v46 = ssftriff_reader_OpenChunk((uint64_t)v82, &__c, (unsigned int *)&v79[1], v100, v42, v43, v44, v45);
          if (v46 < 0) {
            break;
          }
          if (!(__c ^ 0x52545344 | v81))
          {
            signed int ChunkData = ssftriff_reader_GetChunkData((uint64_t)v82, v79[1], &v83, v49, v42, v43, v44, v45);
            if (ChunkData < 0) {
              goto LABEL_41;
            }
            v79[0] = 0;
            ssftriff_reader_ReadStringZ((uint64_t)v82, (uint64_t)v83, v79[1], 0, 0, (unsigned int *)v79);
            ssftriff_reader_ReadStringZ((uint64_t)v82, (uint64_t)v83, v79[1], 0, v35, (unsigned int *)v79);
            unsigned int v51 = strchr(v35, 10);
            if (v51) {
              char *v51 = 0;
            }
            uint64_t v52 = strchr(v35, 58);
            unsigned __int16 v53 = v52 ? atoi(v52 + 2) : 0;
            unsigned int v54 = v79[0];
            signed int ChunkData = initPhrasingRuleStruct(v77, (uint64_t)v76, v53);
            if (ChunkData < 0) {
              goto LABEL_41;
            }
            unsigned __int16 v74 = v53;
            if (v53)
            {
              int v55 = 0;
              while (1)
              {
                do
                {
                  v79[0] = 0;
                  ssftriff_reader_ReadStringZ((uint64_t)v82, (uint64_t)v83, v79[1], v54, 0, (unsigned int *)v79);
                  ssftriff_reader_ReadStringZ((uint64_t)v82, (uint64_t)v83, v79[1], v54, v35, (unsigned int *)v79);
                  v54 += v79[0];
                  uint64_t v56 = v35 + 1;
                  for (unsigned __int16 i = v35; ; ++i)
                  {
                    unsigned int v58 = *i;
                    if (v58 > 0x23) {
                      goto LABEL_33;
                    }
                    if (((1 << v58) & 0x100000200) == 0) {
                      break;
                    }
                    ++v56;
                  }
                }
                while (((1 << v58) & 0x800002401) != 0);
LABEL_33:
                while ((_BYTE)v58)
                {
                  if (v58 == 35)
                  {
                    *(v56 - 1) = 0;
                    break;
                  }
                  char v59 = *v56++;
                  LOBYTE(v58) = v59;
                }
                signed int ChunkData = addPhrasingRule(v77, v76, v35);
                if (ChunkData < 0) {
                  break;
                }
                if ((unsigned __int16)++v55 >= v74) {
                  goto LABEL_15;
                }
              }
LABEL_41:
              signed int v60 = ChunkData;
              goto LABEL_42;
            }
          }
LABEL_15:
          signed int ChunkData = ssftriff_reader_CloseChunk((uint64_t)v82);
          if (ChunkData < 0) {
            goto LABEL_41;
          }
        }
        if ((v46 & 0x1FFF) == 0x14) {
          signed int v60 = 0;
        }
        else {
          signed int v60 = v46;
        }
LABEL_42:
        uint64_t v26 = v77;
      }
    }
    if (v82)
    {
      int v61 = ssftriff_reader_ObjClose(v82, v47, v48, v49, v42, v43, v44, v45);
      if (v61 < 0 && v60 > -1) {
        signed int v60 = v61;
      }
    }
    heap_Free(*(void **)(v26 + 8), (uint64_t)v35);
    if ((v60 & 0x80000000) == 0) {
      goto LABEL_52;
    }
  }
  else
  {
    log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v31, v32, v33, v34, v72);
  }
  releasePhrasingRuleStruct(v26, (uint64_t)v76);
LABEL_52:
  uint64_t v63 = 0;
  int v82 = 0;
  char v83 = 0;
  LOWORD(v78) = -1;
  LOBYTE(__c) = 0;
  *(_OWORD *)(a11 + 250) = 0u;
  *(_OWORD *)(a11 + 266) = 0u;
  *(_OWORD *)(a11 + 282) = 0u;
  *(_OWORD *)(a11 + 298) = 0u;
  *(_OWORD *)(a11 + 314) = 0u;
  v100[0] = "JOY_KEYS";
  v100[1] = "DID_KEYS";
  v100[2] = "NEU_KEYS";
  v100[3] = "COM_KEYS";
  while (1)
  {
    strcpy((char *)&v84, "statbnd_");
    __strcat_chk();
    LOWORD(v78) = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, long long *, char ***, char **, int *))(a7 + 96))(a9, a10, "fecfg", &v84, &v83, &v78, &__c) & 0x80000000) != 0|| !(_WORD)v78)
    {
      return 0;
    }
    int v64 = *v83;
    size_t v65 = strchr(*v83, __c);
    if (v65)
    {
      *size_t v65 = 0;
      int v64 = *v83;
    }
    int v66 = *v64;
    if (*v64) {
      break;
    }
    unsigned __int16 v67 = 0;
LABEL_79:
    if (++v63 == 4)
    {
      *(_WORD *)(a11 + 248) = v67;
      return 0;
    }
  }
  unsigned __int16 v67 = 0;
  while (1)
  {
    for (j = 0; v66; int v66 = v64[++j])
    {
      if (v66 == 44) {
        break;
      }
    }
    strcpy((char *)&v84, "statbnd_");
    __strncat_chk();
    LOWORD(v78) = 0;
    uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, long long *, char ***, char **, int *))(a7 + 96))(a9, a10, "fecfg", &v84, &v82, &v78, &__c);
    if ((v69 & 0x80000000) != 0) {
      return v69;
    }
    if ((_WORD)v78)
    {
      unsigned int v70 = strchr(*v82, __c);
      if (v70) {
        *unsigned int v70 = 0;
      }
      if ((unsigned __int16)v63 == 2)
      {
        *(_WORD *)(a11 + 2 * v67 + 290) = atoi(*v82);
      }
      else if ((unsigned __int16)v63 == 1)
      {
        *(_WORD *)(a11 + 2 * v67 + 270) = atoi(*v82);
      }
      else if ((_WORD)v63)
      {
        *(_WORD *)(a11 + 2 * v67 + 310) = atoi(*v82);
      }
      else
      {
        *(_WORD *)(a11 + 2 * v67 + 250) = atoi(*v82);
      }
    }
    if (v64[j] == 44) {
      v64 += j + 1;
    }
    else {
      v64 += j;
    }
    ++v67;
    int v66 = *v64;
    if (!*v64) {
      goto LABEL_79;
    }
  }
}

uint64_t pandpCrfDeinit(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(a3 + 224);
    if (v5)
    {
      crf_Deinit_ReadOnly_DereferenceCnt(result, a2, v5);
      *(void *)(a3 + 224) = 0;
    }
    return releasePhrasingRuleStruct(v4, a3 + 232);
  }
  return result;
}

uint64_t crfWeakPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v158 = 0;
  unsigned int v157 = 0;
  int v156 = 0;
  if ((com_mosynt_GetCfgParamVal(a2, a3, a1, (uint64_t)"fephrase_max_char", "6", &v156) & 0x80000000) != 0) {
    unsigned int v15 = 6;
  }
  else {
    unsigned int v15 = atoi(v156);
  }
  if ((com_mosynt_GetCfgParamVal(a2, a3, a1, (uint64_t)"fephrase_max_pos", "6", &v156) & 0x80000000) != 0) {
    unsigned int v16 = 6;
  }
  else {
    unsigned int v16 = atoi(v156);
  }
  uint64_t v150 = a6;
  if ((com_mosynt_GetCfgParamVal(a2, a3, a1, (uint64_t)"fephrase_max_obs", "1024", &v156) & 0x80000000) != 0) {
    uint64_t v17 = 1024;
  }
  else {
    uint64_t v17 = atoi(v156);
  }
  uint64_t v147 = v17;
  uint64_t v18 = v15;
  uint64_t v19 = (unsigned char *)heap_Calloc(*(void **)(a4 + 8), 1, v15);
  uint64_t v20 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v15);
  uint64_t v21 = (char *)heap_Calloc(*(void **)(a4 + 8), 2, v18);
  int v22 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v18);
  uint64_t v23 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v18);
  uint64_t v24 = (char *)heap_Calloc(*(void **)(a4 + 8), 2, v18);
  unint64_t v148 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v16);
  uint64_t v152 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v16);
  if (!v19 || !v20 || !v21 || !v22 || !v23 || !v24 || !v148 || !v152) {
    goto LABEL_95;
  }
  *uint64_t v19 = 0;
  *uint64_t v20 = 0;
  *uint64_t v21 = 0;
  *int v22 = 0;
  *uint64_t v23 = 0;
  *uint64_t v24 = 0;
  if (a5 | a7) {
    log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Parameter errors: %s %s\n", v26, v27, v28, (uint64_t)"level0");
  }
  uint64_t v143 = heap_Calloc(*(void **)(a4 + 8), *(unsigned __int16 *)(v150 + 8), 8);
  if (!v143
    || (v141 = v21, (uint64_t v29 = heap_Calloc(*(void **)(a4 + 8), *(unsigned __int16 *)(v150 + 8), 8)) == 0)
    || (uint64_t v30 = v29, (v31 = heap_Calloc(*(void **)(a4 + 8), *(unsigned __int16 *)(v150 + 8), 4)) == 0))
  {
LABEL_95:
    uint64_t v107 = 2315264010;
    log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v25, v26, v27, v28, v129);
    return v107;
  }
  uint64_t v32 = v31;
  uint64_t v139 = v19;
  BOOL v137 = v22;
  unsigned __int16 v134 = v23;
  uint64_t v146 = v24;
  __s2 = v20;
  if (*(_WORD *)(v150 + 8))
  {
    unint64_t v33 = 0;
    int v130 = 0;
    uint64_t v34 = (void *)v143;
    uint64_t v35 = (void *)v150;
    while (1)
    {
      unint64_t v149 = v33;
      uint64_t v154 = 0;
      __lasts = 0;
      uint64_t v153 = 0;
      uint64_t v36 = strlen(*(const char **)(*v35 + 224 * v33 + 8)) + 2;
      uint64_t v37 = (char *)heap_Alloc(*(void *)(a4 + 8), v36);
      if (!v37) {
        goto LABEL_95;
      }
      int v39 = v37;
      extractAndConvertTones(a4, *(unsigned char **)(*(void *)v150 + 224 * v33 + 8), v37, v38, v25, v26, v27, v28);
      int v40 = (unsigned __int16)strlen(v39);
      if (v40)
      {
        uint64_t v135 = v39[v40 - 1];
        uint64_t v136 = *(unsigned __int8 *)v39;
      }
      else
      {
        uint64_t v135 = 48;
        uint64_t v136 = 48;
      }
      uint64_t v144 = v39;
      signed int v41 = *(char **)(*(void *)(*(void *)v150 + 224 * v33 + 16) + 8);
      if (!strcmp(v41, "{T:comma}")) {
        *(_WORD *)signed int v41 = 103;
      }
      uint64_t v145 = (char *)heap_Alloc(*(void *)(a4 + 8), v147);
      if (!v145 || (uint64_t v46 = heap_Alloc(*(void *)(a4 + 8), v147)) == 0)
      {
LABEL_111:
        uint64_t v107 = 2315264010;
        log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v42, v43, v44, v45, v129);
        LODWORD(v112) = *(unsigned __int16 *)(v150 + 8);
LABEL_112:
        uint64_t v19 = v139;
        uint64_t v24 = v146;
        goto LABEL_113;
      }
      uint64_t v47 = (char *)v46;
      uint64_t v48 = *(const char ***)(*(void *)v150 + 224 * v149 + 16);
      if (!strcmp(*v48, "-"))
      {
        if (*(void *)(*(void *)(a8 + 224) + 32))
        {
          sprintf(v145, "%s %d %s %s %s %s %s %s %s %s %s %s %s %s %d %d %s %s %d", "-", 1, v48[1], v39, "-", "-", "-", "-", "NULL", "NULL", "-", "-", v48[1], v48[1], 1, 1, v39,
            v39,
            1);
          uint64_t v57 = strtok_r(v145, " ", &v153);
          *uint64_t v47 = 0;
          if (v57)
          {
            unsigned int v58 = v57;
            unsigned __int16 v59 = 0;
            do
            {
              signed int v60 = *(const char **)(*(void *)(*(void *)(a8 + 224) + 32) + 8);
              if (v60[v59] == 49)
              {
                int v61 = strlen(v60) - 1;
                *(_WORD *)&v47[strlen(v47)] = 32;
                strcat(v47, v58);
                if (v61 != v59) {
                  *(_WORD *)&v47[strlen(v47)] = 32;
                }
              }
              ++v59;
              unsigned int v58 = strtok_r(0, " ", &v153);
            }
            while (v58);
          }
          uint64_t v62 = v145;
          strcpy(v145, v47);
          unint64_t v63 = v149;
          int v64 = v144;
        }
        else
        {
          uint64_t v62 = v145;
          strcpy(v145, "- 1 ");
          unint64_t v63 = v149;
          uint64_t v79 = strcat(v145, *(const char **)(*(void *)(*(void *)v150 + 224 * v149 + 16) + 8));
          *(_WORD *)&v145[strlen(v79)] = 32;
          int v64 = v144;
          uint64_t v80 = strcat(v145, v144);
          strcpy(&v145[strlen(v80)], " 1 - - NULL NULL");
        }
        int v81 = strlen(v62);
        int v82 = (char *)heap_Alloc(*(void *)(a4 + 8), (v81 + 1));
        v34[v63] = v82;
        if (!v82) {
          goto LABEL_95;
        }
        unint64_t v83 = v63;
        strcpy(v82, v145);
        uint64_t v84 = (uint64_t)v64;
        goto LABEL_93;
      }
      uint64_t v49 = heap_Alloc(*(void *)(a4 + 8), v147);
      if (!v49) {
        goto LABEL_111;
      }
      uint64_t v50 = (char *)v49;
      int v51 = strlen(*(const char **)(*(void *)(*(void *)v150 + 224 * v149 + 16) + 8));
      int __dst = (char *)heap_Alloc(*(void *)(a4 + 8), (v51 + 2));
      if (!__dst) {
        goto LABEL_111;
      }
      *uint64_t v50 = 0;
      strcpy(__dst, *(const char **)(*(void *)(*(void *)v150 + 224 * v149 + 16) + 8));
      uint64_t v52 = strtok_r(**(char ***)(*(void *)v150 + 224 * v149 + 16), "-", &__lasts);
      unsigned __int16 v53 = strtok_r(*(char **)(*(void *)(*(void *)v150 + 224 * v149 + 16) + 8), "-", &v154);
      int v54 = strlen(v52);
      long long v142 = (char *)heap_Alloc(*(void *)(a4 + 8), (v54 + 2));
      if (!v142) {
        goto LABEL_111;
      }
      uint64_t v55 = heap_Alloc(*(void *)(a4 + 8), v147);
      if (!v55) {
        goto LABEL_111;
      }
      uint64_t v56 = (char *)v55;
      strcpy(v142, v52);
      if (v53) {
        strcpy(v148, v53);
      }
      else {
        strcpy(v148, "NULL");
      }
      __int16 v65 = strlen(v142);
      unsigned __int16 v132 = Utf8_LengthInUtf8chars((unint64_t)v142, v65);
      for (unsigned __int16 i = 0; v52; ++i)
      {
        strcat(v50, v52);
        strcpy(v56, v52);
        uint64_t v52 = strtok_r(0, "-", &__lasts);
        if (v53) {
          strcpy(v152, v53);
        }
        else {
          strcpy(v152, "NULL");
        }
        if (v154) {
          unsigned __int16 v53 = strtok_r(0, "-", &v154);
        }
      }
      __int16 v67 = strlen(v56);
      unsigned __int16 v131 = Utf8_LengthInUtf8chars((unint64_t)v56, v67);
      strcpy(**(char ***)(*(void *)v150 + 224 * v149 + 16), v50);
      __int16 v68 = strlen(v50);
      unsigned __int16 v69 = Utf8_LengthInUtf8chars((unint64_t)v50, v68);
      utf8_getUTF8Char((uint64_t)v50, 0, v139);
      int v70 = strlen(v50);
      unsigned int CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v50, v70 - 1);
      utf8_getUTF8Char((uint64_t)v50, CurrentUtf8Offset, v137);
      int v72 = v69;
      int v133 = v69;
      if (v69 < 3u)
      {
        if (v69 == 2)
        {
          strcpy(v141, v50);
          strcpy(v146, v50);
          int v72 = v69;
        }
        else
        {
          strcpy(v141, "NULL");
          strcpy(v146, "NULL");
        }
        uint64_t v78 = v137;
      }
      else
      {
        unsigned int v73 = strlen(v139);
        utf8_getUTF8Char((uint64_t)v50, v73, __s2);
        int v74 = strlen(v50);
        unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v50, v74 - 1);
        utf8_getUTF8Char((uint64_t)v50, PreviousUtf8Offset, v134);
        uint64_t v76 = strcpy(v141, v139);
        strcat(v76, __s2);
        uint64_t v77 = strcpy(v146, v134);
        strcat(v77, v137);
        int v72 = v69;
        uint64_t v78 = v137;
      }
      if (*(void *)(*(void *)(a8 + 224) + 32))
      {
        sprintf(v145, "%s %d %s %s %s %s %s %s %s %s %s %s %s %s %d %d %c %c %d", v50, v72, __dst, v144, v139, v78, __s2, v134, v141, v146, v142, v56, v148, v152, v132, v131, v136,
          v135,
          i);
        long long v85 = strtok_r(v145, " ", &v153);
        *uint64_t v47 = 0;
        if (v85)
        {
          long long v86 = v85;
          unsigned __int16 v87 = 0;
          do
          {
            long long v88 = *(const char **)(*(void *)(*(void *)(a8 + 224) + 32) + 8);
            if (v88[v87] == 49)
            {
              int v89 = strlen(v88) - 1;
              *(_WORD *)&v47[strlen(v47)] = 32;
              strcat(v47, v86);
              if (v89 != v87) {
                *(_WORD *)&v47[strlen(v47)] = 32;
              }
            }
            ++v87;
            long long v86 = strtok_r(0, " ", &v153);
          }
          while (v86);
        }
        long long v90 = v145;
        strcpy(v145, v47);
      }
      else
      {
        long long v90 = v145;
        sprintf(v145, "%s %d %s %s %d %s %s %s %s", v50, v72, __dst, v144, i, v139, v78, v141, v146);
      }
      uint64_t v34 = (void *)v143;
      log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Crf Phrasing Obversation: %s", v91, v92, v93, (uint64_t)v90);
      int v94 = strlen(v90);
      long long v95 = (char *)heap_Alloc(*(void *)(a4 + 8), (v94 + 1));
      *(void *)(v143 + 8 * v149) = v95;
      if (!v95) {
        goto LABEL_95;
      }
      strcpy(v95, v145);
      uint64_t v96 = *(void *)v150 + 224 * v149;
      long long v97 = *(const char **)(v96 + 136);
      if (v97) {
        break;
      }
      *(_DWORD *)(v32 + 4 * v149) = 0;
      *(void *)(v30 + 8 * v149) = 0;
      unint64_t v83 = v149;
      uint64_t v99 = (uint64_t)v144;
LABEL_92:
      heap_Free(*(void **)(a4 + 8), v99);
      heap_Free(*(void **)(a4 + 8), (uint64_t)v50);
      heap_Free(*(void **)(a4 + 8), (uint64_t)v142);
      heap_Free(*(void **)(a4 + 8), (uint64_t)v56);
      heap_Free(*(void **)(a4 + 8), (uint64_t)v145);
      heap_Free(*(void **)(a4 + 8), (uint64_t)v47);
      uint64_t v84 = (uint64_t)__dst;
LABEL_93:
      heap_Free(*(void **)(a4 + 8), v84);
      unint64_t v33 = v83 + 1;
      uint64_t v35 = (void *)v150;
      unint64_t v106 = *(unsigned __int16 *)(v150 + 8);
      if (v33 >= v106)
      {
        uint64_t v19 = v139;
        uint64_t v24 = v146;
        goto LABEL_98;
      }
    }
    if (!strcmp(*(const char **)(v96 + 136), "B"))
    {
      unint64_t v83 = v149;
      *(_DWORD *)(v32 + 4 * v149) = 1;
      uint64_t v100 = heap_Calloc(*(void **)(a4 + 8), 1, 8);
      *(void *)(v30 + 8 * v149) = v100;
      if (!v100) {
        goto LABEL_95;
      }
      **(void **)(v30 + 8 * v149) = heap_Calloc(*(void **)(a4 + 8), 2, 1);
      uint64_t v101 = **(char ***)(v30 + 8 * v149);
      if (!v101) {
        goto LABEL_95;
      }
      char v102 = 66;
    }
    else
    {
      if (!strcmp(v97, "E"))
      {
        unint64_t v83 = v149;
        *(_DWORD *)(v32 + 4 * v149) = 1;
        uint64_t v103 = heap_Calloc(*(void **)(a4 + 8), 1, 8);
        *(void *)(v30 + 8 * v149) = v103;
        if (!v103) {
          goto LABEL_95;
        }
        **(void **)(v30 + 8 * v149) = heap_Calloc(*(void **)(a4 + 8), 2, 1);
        uint64_t v104 = **(unsigned char ***)(v30 + 8 * v149);
        if (!v104) {
          goto LABEL_95;
        }
        int v98 = v133 + v130;
        *uint64_t v104 = 69;
        goto LABEL_91;
      }
      if (strcmp(v97, "S"))
      {
        int v98 = v133 + v130;
        unint64_t v83 = v149;
        *(_DWORD *)(v32 + 4 * v149) = 0;
        *(void *)(v30 + 8 * v149) = 0;
LABEL_91:
        uint64_t v99 = (uint64_t)v144;
        *(_DWORD *)(*(void *)v150 + 224 * v83 + 144) = v98;
        int v130 = v98;
        goto LABEL_92;
      }
      unint64_t v83 = v149;
      *(_DWORD *)(v32 + 4 * v149) = 1;
      uint64_t v105 = heap_Calloc(*(void **)(a4 + 8), 1, 8);
      *(void *)(v30 + 8 * v149) = v105;
      if (!v105) {
        goto LABEL_95;
      }
      **(void **)(v30 + 8 * v149) = heap_Calloc(*(void **)(a4 + 8), 2, 1);
      uint64_t v101 = **(char ***)(v30 + 8 * v149);
      if (!v101) {
        goto LABEL_95;
      }
      char v102 = 83;
    }
    *uint64_t v101 = v102;
    int v98 = v133;
    goto LABEL_91;
  }
  LODWORD(v106) = 0;
  uint64_t v34 = (void *)v143;
LABEL_98:
  uint64_t v107 = crf_Process_Constrained(*(void *)(a8 + 224), v34, v106, &v158, &v157, v30, v32);
  LODWORD(v112) = *(unsigned __int16 *)(v150 + 8);
  if ((v107 & 0x80000000) != 0)
  {
LABEL_113:
    if (v112)
    {
      unint64_t v118 = 0;
      uint64_t v119 = v150;
      do
      {
        uint64_t v120 = v34[v118];
        if (v120)
        {
          heap_Free(*(void **)(a4 + 8), v120);
          LODWORD(v112) = *(unsigned __int16 *)(v150 + 8);
        }
        ++v118;
      }
      while (v118 < v112);
      goto LABEL_120;
    }
  }
  else if (*(_WORD *)(v150 + 8))
  {
    unint64_t v113 = 0;
    uint64_t v114 = v158;
    uint64_t v115 = 73;
    while (1)
    {
      log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"returned labels: %s\n", v109, v110, v111, *(void *)(v114 + 8 * v113));
      uint64_t v114 = v158;
      unsigned int v116 = **(unsigned __int8 **)(v158 + 8 * v113);
      char v117 = 1;
      if (v116 <= 0x4C) {
        break;
      }
      if (v116 == 77) {
        goto LABEL_108;
      }
      if (v116 == 83) {
        goto LABEL_107;
      }
LABEL_109:
      ++v113;
      unint64_t v112 = *(unsigned __int16 *)(v150 + 8);
      v115 += 224;
      if (v113 >= v112) {
        goto LABEL_112;
      }
    }
    if (v116 != 66)
    {
      if (v116 != 69) {
        goto LABEL_109;
      }
LABEL_107:
      char v117 = 3;
    }
LABEL_108:
    *(unsigned char *)(*(void *)v150 + v115) = v117;
    goto LABEL_109;
  }
  uint64_t v119 = v150;
LABEL_120:
  heap_Free(*(void **)(a4 + 8), (uint64_t)v34);
  unsigned int v121 = *(unsigned __int16 *)(v119 + 8);
  if (*(_WORD *)(v119 + 8))
  {
    unint64_t v122 = 0;
    do
    {
      uint64_t v123 = *(void *)(v30 + 8 * v122);
      if (v123)
      {
        if (*(_DWORD *)(v32 + 4 * v122))
        {
          int v124 = 0;
          do
            heap_Free(*(void **)(a4 + 8), *(void *)(*(void *)(v30 + 8 * v122) + 8 * (unsigned __int16)v124++));
          while (*(_DWORD *)(v32 + 4 * v122) > (unsigned __int16)v124);
          uint64_t v123 = *(void *)(v30 + 8 * v122);
          uint64_t v24 = v146;
        }
        heap_Free(*(void **)(a4 + 8), v123);
        unsigned int v121 = *(unsigned __int16 *)(v119 + 8);
      }
      ++v122;
    }
    while (v122 < v121);
  }
  heap_Free(*(void **)(a4 + 8), v30);
  heap_Free(*(void **)(a4 + 8), v32);
  uint64_t v125 = v158;
  if (v158)
  {
    unsigned int v126 = v157;
    if (v157)
    {
      unsigned __int16 v127 = 0;
      do
      {
        uint64_t v128 = *(void *)(v158 + 8 * v127);
        if (v128)
        {
          heap_Free(*(void **)(a4 + 8), v128);
          unsigned int v126 = v157;
        }
        ++v127;
      }
      while (v126 > v127);
      uint64_t v125 = v158;
    }
    heap_Free(*(void **)(a4 + 8), v125);
  }
  heap_Free(*(void **)(a4 + 8), (uint64_t)v19);
  heap_Free(*(void **)(a4 + 8), (uint64_t)__s2);
  heap_Free(*(void **)(a4 + 8), (uint64_t)v141);
  heap_Free(*(void **)(a4 + 8), (uint64_t)v137);
  heap_Free(*(void **)(a4 + 8), (uint64_t)v134);
  heap_Free(*(void **)(a4 + 8), (uint64_t)v24);
  heap_Free(*(void **)(a4 + 8), (uint64_t)v148);
  heap_Free(*(void **)(a4 + 8), (uint64_t)v152);
  return v107;
}

uint64_t extractAndConvertTones(uint64_t a1, unsigned char *a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    uint64_t v16 = 2315264006;
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = "szSourcePron";
    uint64_t v20 = "invalid input parameter: %s\n";
LABEL_23:
    log_OutText(v18, (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)v20, a6, a7, a8, (uint64_t)v19);
    return v16;
  }
  if (!__s)
  {
    uint64_t v16 = 2315264006;
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = "szTargetTone";
    uint64_t v20 = "invalid input prone: %s\n";
    goto LABEL_23;
  }
  *unsigned int __s = 0;
  __int16 v10 = *a2;
  if (*a2)
  {
    do
    {
      int v11 = a2 + 1;
      if ((unsigned __int16)(v10 - 48) - 1 <= 8)
      {
        int v12 = *v11;
        if (v12 == 125)
        {
          int v11 = a2 + 2;
        }
        else
        {
          __s1[0] = v10;
          if (v12)
          {
            uint64_t v13 = 0;
            uint64_t v14 = 1;
            while (1)
            {
              if ((unsigned __int16)(v12 - 48) - 1 > 4)
              {
                uint64_t v14 = (unsigned __int16)(v13 + 1);
                int v11 = &a2[v13 + 1];
                goto LABEL_17;
              }
              unsigned int v15 = &a2[v13];
              __s1[v13 + 1] = v12;
              if (v13 == 1) {
                break;
              }
              ++v14;
              LOWORD(v12) = v15[2];
              ++v13;
              if (!v15[2]) {
                goto LABEL_16;
              }
            }
            uint64_t v14 = 3;
LABEL_16:
            int v11 = v15 + 2;
          }
          else
          {
            uint64_t v14 = 1;
          }
LABEL_17:
          __s1[v14] = 0;
          convertTones(a1, __s1, __s);
        }
      }
      __int16 v10 = *v11;
      a2 = v11;
    }
    while (*v11);
  }
  uint64_t v16 = 0;
  int v17 = (unsigned __int16)strlen(__s);
  if (v17) {
    __s[v17 - 1] = 0;
  }
  else {
    *(_WORD *)unsigned int __s = 48;
  }
  return v16;
}

uint64_t recursiveFindSplit(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, _WORD *a6, unsigned int a7)
{
  uint64_t v9 = result;
  if (a2 <= a3)
  {
    unsigned __int16 v10 = 0;
    unsigned __int16 v11 = a2;
    do
    {
      v10 += *(_WORD *)(result + 2 * v11);
      if (a4 >> 1 <= v10) {
        break;
      }
      ++v11;
    }
    while (a3 >= v11);
  }
  else
  {
    unsigned __int16 v10 = 0;
    unsigned __int16 v11 = a2;
  }
  if (a7 <= v10 && (int)(a4 - v10) >= (int)a7)
  {
    recursiveFindSplit(result);
    uint64_t result = recursiveFindSplit(v9);
    *(_WORD *)(a5 + 2 * (unsigned __int16)(*a6)++) = v11;
  }
  return result;
}

uint64_t getDocumentClass(uint64_t *a1)
{
  int v1 = *((unsigned __int16 *)a1 + 4);
  if (!*((_WORD *)a1 + 4)) {
    return 0;
  }
  __int16 v2 = 0;
  uint64_t v3 = *a1;
  while (1)
  {
    uint64_t v4 = v3 + 224 * v2;
    uint64_t v5 = *(char **)(v4 + 152);
    if (v5)
    {
      if (strstr(*(char **)(v4 + 152), "joyfulstyle")) {
        return 1;
      }
      if (strstr(v5, "didacticstyle")) {
        return 2;
      }
      if (strstr(v5, "neutralstyle")) {
        break;
      }
    }
    if (v1 <= ++v2) {
      return 0;
    }
  }
  return 3;
}

uint64_t puncPhrasing(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t)a2;
  if (!a2)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"%s\n", a6, a7, a8, (uint64_t)"input parameter: sent is NULL");
    return v8;
  }
  if (!a3)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s\n", a6, a7, a8, (uint64_t)"input parameter: rules is NULL, but it is ok");
    return 0;
  }
  unsigned __int16 v10 = (int16x4_t *)(a3 + 270);
  __int16 v11 = *(_WORD *)(a3 + 242);
  int DocumentClass = getDocumentClass(a2);
  __int16 v166 = v11;
  switch(DocumentClass)
  {
    case 3:
      int8x8_t v163 = vbsl_s8((int8x8_t)vceqz_s16(*(int16x4_t *)(a3 + 290)), (int8x8_t)0x6001400030009, *(int8x8_t *)(a3 + 290));
      int v23 = *(unsigned __int16 *)(a3 + 298);
      if (!*(_WORD *)(a3 + 298)) {
        int v23 = 9;
      }
      unsigned int v168 = v23;
      int v24 = *(unsigned __int16 *)(a3 + 300);
      if (!*(_WORD *)(a3 + 300)) {
        int v24 = 21;
      }
      unsigned int v164 = v24;
      int v25 = *(unsigned __int16 *)(a3 + 302);
      if (!*(_WORD *)(a3 + 302)) {
        int v25 = 6;
      }
      unsigned int v172 = v25;
      __int16 v22 = *(_WORD *)(a3 + 304);
      if (!v22) {
        goto LABEL_24;
      }
      break;
    case 2:
      int8x8_t v163 = vbsl_s8((int8x8_t)vceqz_s16(*v10), (int8x8_t)0x6001400030009, (int8x8_t)*v10);
      int v135 = *(unsigned __int16 *)(a3 + 278);
      if (!*(_WORD *)(a3 + 278)) {
        int v135 = 9;
      }
      unsigned int v168 = v135;
      int v136 = *(unsigned __int16 *)(a3 + 280);
      if (!*(_WORD *)(a3 + 280)) {
        int v136 = 21;
      }
      unsigned int v164 = v136;
      int v137 = *(unsigned __int16 *)(a3 + 282);
      if (!*(_WORD *)(a3 + 282)) {
        int v137 = 6;
      }
      unsigned int v172 = v137;
      __int16 v22 = *(_WORD *)(a3 + 284);
      if (!v22) {
        goto LABEL_24;
      }
      break;
    case 1:
      int8x8_t v163 = vbsl_s8((int8x8_t)vceqz_s16(*(int16x4_t *)(a3 + 250)), (int8x8_t)0x6001400030009, *(int8x8_t *)(a3 + 250));
      int v19 = *(unsigned __int16 *)(a3 + 258);
      if (!*(_WORD *)(a3 + 258)) {
        int v19 = 9;
      }
      unsigned int v168 = v19;
      int v20 = *(unsigned __int16 *)(a3 + 260);
      if (!*(_WORD *)(a3 + 260)) {
        int v20 = 21;
      }
      unsigned int v164 = v20;
      int v21 = *(unsigned __int16 *)(a3 + 262);
      if (!*(_WORD *)(a3 + 262)) {
        int v21 = 6;
      }
      unsigned int v172 = v21;
      __int16 v22 = *(_WORD *)(a3 + 264);
      if (!v22) {
        goto LABEL_24;
      }
      break;
    default:
      int8x8_t v163 = vbsl_s8((int8x8_t)vceqz_s16(*(int16x4_t *)(a3 + 310)), (int8x8_t)0x6001400030009, *(int8x8_t *)(a3 + 310));
      int v138 = *(unsigned __int16 *)(a3 + 318);
      if (!*(_WORD *)(a3 + 318)) {
        int v138 = 9;
      }
      unsigned int v168 = v138;
      int v139 = *(unsigned __int16 *)(a3 + 320);
      if (!*(_WORD *)(a3 + 320)) {
        int v139 = 21;
      }
      unsigned int v164 = v139;
      int v140 = *(unsigned __int16 *)(a3 + 322);
      if (!*(_WORD *)(a3 + 322)) {
        int v140 = 6;
      }
      unsigned int v172 = v140;
      __int16 v22 = *(_WORD *)(a3 + 324);
      if (!v22) {
        goto LABEL_24;
      }
      break;
  }
  *(_WORD *)(a3 + 242) = v22;
LABEL_24:
  uint64_t v167 = a3;
  unsigned __int16 v178 = 0;
  int v177 = 0;
  unint64_t v26 = *(unsigned __int16 *)(v8 + 8);
  if (*(_WORD *)(v8 + 8))
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = *(void *)v8;
    while (1)
    {
      uint64_t v30 = *(const char ***)(v29 + v27 + 16);
      uint64_t v31 = *v30;
      if (*v30)
      {
        size_t v32 = strlen(*v30);
        if (v32)
        {
          unsigned int v33 = v31[v32 - 1];
          BOOL v34 = v33 > 0x3B;
          uint64_t v35 = (1 << v33) & 0xC00500000000000;
          BOOL v36 = v34 || v35 == 0;
          if (!v36 && v28 + 1 < v26) {
            *(unsigned char *)(v29 + v27 + 73) = 4;
          }
        }
      }
      uint64_t v38 = *(const char **)(v29 + v27 + 136);
      if (!v38) {
        goto LABEL_45;
      }
      if (strcmp(*(const char **)(v29 + v27 + 136), "B") && strcmp(v38, "S")) {
        break;
      }
      if (v27)
      {
        uint64_t v39 = (v28 - 1);
LABEL_44:
        *(unsigned char *)(v29 + 224 * v39 + 73) = 4;
      }
LABEL_45:
      ++v28;
      v27 += 224;
      if (224 * v26 == v27) {
        goto LABEL_46;
      }
    }
    if (strcmp(v38, "E")) {
      goto LABEL_45;
    }
    uint64_t v39 = v28;
    if (*(_DWORD *)(v29 + v27 + 144) < v168) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_46:
  uint64_t v40 = a1;
  printPhrases(a1, v8, v13, v14, v15, v16, v17, v18);
  uint64_t v41 = heap_Calloc(*(void **)(a1 + 8), 1024, 2);
  if (!v41)
  {
    uint64_t v8 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v44, v45, v46, v47, v161);
    uint64_t v133 = v167;
    __int16 v134 = v11;
    goto LABEL_194;
  }
  uint64_t v48 = v41;
  int v170 = (uint64_t *)(v167 + 232);
  if (!*(_WORD *)(v8 + 8))
  {
LABEL_103:
    printPhrases(v40, v8, v42, v43, v44, v45, v46, v47);
    int v101 = *(unsigned __int16 *)(v8 + 8);
    uint64_t v176 = v48;
    if (*(_WORD *)(v8 + 8))
    {
      int v102 = 0;
      do
      {
        uint64_t v103 = *(void *)v8;
        if (*(unsigned char *)(*(void *)v8 + 224 * (unsigned __int16)v102 + 73) != 3) {
          goto LABEL_143;
        }
        int v104 = v102 + 1;
        if ((unsigned __int16)(v102 + 1) < (unsigned __int16)v101)
        {
          unsigned __int16 v105 = 1;
          LODWORD(v106) = v102 + 1;
          while (1)
          {
            int v107 = *(unsigned __int8 *)(v103 + 224 * (unsigned __int16)v106 + 73);
            if (v107 == 3)
            {
              ++v105;
            }
            else if (v107 == 4)
            {
              goto LABEL_114;
            }
            LODWORD(v106) = v106 + 1;
            if ((unsigned __int16)v106 >= (unsigned __int16)v101)
            {
              LODWORD(v106) = v101;
LABEL_114:
              if (v105 == 1)
              {
                int v104 = v106;
                break;
              }
              unsigned __int16 v108 = v102 + 1;
              if ((v102 & 0x8000) == 0)
              {
                do
                {
                  if (*(unsigned char *)(v103 + 224 * (unsigned __int16)v102 + 73) == 4) {
                    goto LABEL_120;
                  }
                  int v109 = (__int16)v102;
                  LOWORD(v102) = v102 - 1;
                }
                while (v109 > 0);
                LOWORD(v102) = -1;
LABEL_120:
                unsigned __int16 v108 = v102 + 1;
              }
              if (v105 < 9u)
              {
                __int16 v110 = v105;
              }
              else
              {
                LODWORD(v106) = v104;
                __int16 v110 = 8;
              }
              if (v105 < 9u || (unsigned __int16)v104 >= (unsigned __int16)v101) {
                goto LABEL_135;
              }
              int v111 = 0;
              uint64_t v106 = (unsigned __int16)v104;
              unint64_t v112 = (unsigned char *)(v103 + 224 * (unsigned __int16)v104 + 73);
              while (1)
              {
                int v113 = *v112;
                if (v113 == 3)
                {
                  if ((unsigned __int16)++v111 >= 8u)
                  {
                    *unint64_t v112 = 4;
LABEL_134:
                    __int16 v110 = 8;
LABEL_135:
                    BOOL v114 = (unsigned __int16)v106 == (unsigned __int16)v101;
                    int v102 = v106 - v114;
                    if (v108 <= (unsigned __int16)(v106 - v114))
                    {
                      int v115 = 0;
                      unsigned __int16 v116 = v108;
                      do
                      {
                        char v117 = **(char ***)(*(void *)v8 + 224 * v116 + 16);
                        if (!strstr(v117, "comma"))
                        {
                          __int16 v118 = strlen(v117);
                          v115 += Utf8_LengthInUtf8chars((unint64_t)v117, v118);
                        }
                        ++v116;
                      }
                      while (v116 <= (unsigned __int16)v102);
                      if (v164 <= (unsigned __int16)v115)
                      {
                        LOWORD(v177) = v115;
                        HIWORD(v177) = v110;
                        astar_search(a1, (uint64_t *)v8, v108, (unsigned __int16)v102, (unsigned __int16 *)&v177, v170);
                      }
                    }
                    uint64_t v48 = v176;
LABEL_143:
                    int v104 = v102 + 1;
                    int v101 = *(unsigned __int16 *)(v8 + 8);
                    goto LABEL_144;
                  }
                }
                else if (v113 == 4)
                {
                  goto LABEL_134;
                }
                ++v106;
                v112 += 224;
                if ((unsigned __int16)v101 == v106)
                {
                  __int16 v110 = 8;
                  LODWORD(v106) = v101;
                  goto LABEL_135;
                }
              }
            }
          }
        }
LABEL_144:
        int v102 = v104;
      }
      while ((unsigned __int16)v104 < (unsigned __int16)v101);
    }
    printPhrases(a1, v8, v95, v96, v97, v98, v99, v100);
    int v125 = *(unsigned __int16 *)(v8 + 8);
    int v126 = v125 - 2;
    LOWORD(v127) = *(_WORD *)(v8 + 8);
    while (1)
    {
      int v127 = (__int16)(v127 - 1);
      if (v127 < 1) {
        break;
      }
      LOWORD(v128) = v126;
      uint64_t v129 = *(void *)v8;
      --v126;
      if (*(void *)(*(void *)v8 + 224 * (unsigned __int16)v127 + 136))
      {
        *(unsigned char *)(v129 + 224 * (unsigned __int16)v127 + 73) = 4;
        uint64_t v128 = (unsigned __int16)v128;
        int v130 = (unsigned __int16)(v125 - 1) - (__int16)(v125 - 2);
        uint64_t v131 = v129 + 224 * (unsigned __int16)v128 + 73;
        while (!*(void *)(v131 + 63) || *(unsigned char *)v131 != 4)
        {
          int v132 = (__int16)v128--;
          ++v130;
          v131 -= 224;
          if (v132 <= 0) {
            goto LABEL_172;
          }
        }
        if (v130 <= v163.u16[1]) {
          *(unsigned char *)uint64_t v131 = 3;
        }
        break;
      }
    }
LABEL_172:
    printPhrases(a1, v8, v119, v120, v121, v122, v123, v124);
    if (*(_WORD *)(v8 + 8))
    {
      unsigned __int16 v147 = 0;
      uint64_t v148 = *(void *)v8;
      do
      {
        unsigned int v149 = v147;
        if (*(unsigned char *)(v148 + 224 * v147 + 73) == 4
          && ((uint64_t v150 = *(const char ***)(v148 + 224 * v147 + 16), (v151 = *v150) == 0)
           || (size_t v152 = strlen(*v150)) == 0
           || ((unsigned int v153 = v151[v152 - 1],
                BOOL v34 = v153 > 0x3B,
                uint64_t v154 = (1 << v153) & 0xC00500000000000,
                !v34)
             ? (BOOL v155 = v154 == 0)
             : (BOOL v155 = 1),
               v155)))
        {
          ++v147;
          if (*(unsigned __int16 *)(v8 + 8) <= (unsigned __int16)(v149 + 1))
          {
            LOWORD(v156) = 0;
          }
          else
          {
            int v156 = 0;
            do
            {
              uint64_t v157 = 224 * v147;
              __int16 v158 = strlen(**(const char ***)(v148 + v157 + 16));
              v156 += Utf8_LengthInUtf8chars(**(void **)(v148 + v157 + 16), v158);
              uint64_t v148 = *(void *)v8;
              if (*(unsigned char *)(*(void *)v8 + v157 + 73) == 4) {
                break;
              }
              ++v147;
            }
            while (*(unsigned __int16 *)(v8 + 8) > v147);
          }
          if (v172 > (unsigned __int16)v156) {
            *(unsigned char *)(v148 + 224 * v149 + 73) = 3;
          }
        }
        else
        {
          ++v147;
        }
        uint64_t v48 = v176;
      }
      while (*(unsigned __int16 *)(v8 + 8) > v147);
    }
    printPhrases(a1, v8, v141, v142, v143, v144, v145, v146);
    uint64_t v8 = 0;
    goto LABEL_192;
  }
  int v49 = 0;
  unsigned __int16 v169 = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  int v171 = 1024;
  int v165 = 0;
  while (1)
  {
    int v52 = *(unsigned __int8 *)(*(void *)v8 + 224 * (unsigned __int16)v51 + 73);
    if (v52 == 4) {
      goto LABEL_99;
    }
    if (v52 == 3) {
      break;
    }
LABEL_100:
    int v49 = (unsigned __int16)++v51;
    if ((unsigned __int16)v51 >= *(unsigned __int16 *)(v8 + 8)) {
      goto LABEL_103;
    }
  }
  unsigned int v53 = (unsigned __int16)v50;
  int v54 = **(char ***)(*(void *)v8 + 224 * (unsigned __int16)v50 + 16);
  if (strstr(v54, "comma"))
  {
    int v55 = 0;
  }
  else
  {
    __int16 v56 = strlen(v54);
    int v55 = Utf8_LengthInUtf8chars((unint64_t)v54, v56);
  }
  BOOL v175 = (_WORD *)v48;
  unsigned __int16 v57 = v50 + 1;
  uint64_t v173 = v50;
  if ((unsigned __int16)(v50 + 1) <= (unsigned __int16)v51)
  {
    unsigned __int16 v58 = v50 + 1;
    do
    {
      unsigned __int16 v59 = **(char ***)(*(void *)v8 + 224 * v58 + 16);
      if (!strstr(v59, "comma"))
      {
        __int16 v60 = strlen(v59);
        v55 += Utf8_LengthInUtf8chars((unint64_t)v59, v60);
      }
      ++v58;
    }
    while (v58 <= (unsigned __int16)v51);
  }
  uint64_t v61 = heap_Alloc(*(void *)(a1 + 8), (4 * (unsigned __int16)v55) | 2);
  if (!v61)
  {
    uint64_t v8 = 2315264010;
    uint64_t v133 = v167;
    __int16 v134 = v166;
    uint64_t v48 = (uint64_t)v175;
    goto LABEL_193;
  }
  uint64_t v62 = (char *)v61;
  unint64_t v63 = **(char ***)(*(void *)v8 + 224 * v53 + 16);
  uint64_t v48 = (uint64_t)v175;
  if (strstr(v63, "comma"))
  {
    int v67 = 0;
    *uint64_t v62 = 0;
  }
  else
  {
    __int16 v68 = strlen(v63);
    *BOOL v175 = Utf8_LengthInUtf8chars((unint64_t)v63, v68);
    strcpy(v62, **(const char ***)(*(void *)v8 + 224 * v53 + 16));
    int v67 = 1;
  }
  int v69 = v49 - (unsigned __int16)v173 + v67;
  if (v69 > v171)
  {
    uint64_t v70 = 2 * (unsigned __int16)v69;
    if (v70 > 0x1000)
    {
      uint64_t v160 = a1;
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Memory exceeds upper boundary: %d/%d", v64, v65, v66, 2 * (unsigned __int16)v69);
      uint64_t v8 = 2315264015;
    }
    else
    {
      uint64_t v71 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v175, v70);
      if (v71)
      {
        int v171 = (unsigned __int16)v69;
        uint64_t v48 = v71;
        goto LABEL_70;
      }
      uint64_t v8 = 2315264010;
      uint64_t v160 = a1;
    }
    heap_Free(*(void **)(v160 + 8), (uint64_t)v62);
    goto LABEL_192;
  }
LABEL_70:
  while (v57 <= (unsigned __int16)v51)
  {
    int v72 = **(char ***)(*(void *)v8 + 224 * v57 + 16);
    if (!strstr(v72, "comma"))
    {
      strcat(v62, v72);
      __int16 v73 = strlen(**(const char ***)(*(void *)v8 + 224 * v57 + 16));
      *(_WORD *)(v48 + 2 * (unsigned __int16)v67) = Utf8_LengthInUtf8chars(**(void **)(*(void *)v8 + 224 * v57 + 16), v73);
      LOWORD(v67) = v67 + 1;
    }
    ++v57;
  }
  __int16 v74 = strlen(v62);
  unsigned __int16 v75 = Utf8_LengthInUtf8chars((unint64_t)v62, v74);
  uint64_t v40 = a1;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"WEAK PHRASE:%s %d\n", v76, v77, v78, (uint64_t)v62);
  int v79 = strlen(v62);
  unsigned int CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v62, v79 - 1);
  utf8_getUTF8Char((uint64_t)v62, CurrentUtf8Offset, v179);
  heap_Free(*(void **)(a1 + 8), (uint64_t)v62);
  if (v75 && applyRules(a1, v8, (unsigned __int16)v51, v170) == 1)
  {
    v169 += v75;
    int v165 = v51;
    uint64_t v50 = v173;
    goto LABEL_100;
  }
  if (v75 < v163.u16[0])
  {
LABEL_99:
    uint64_t v50 = (v51 + 1);
    goto LABEL_100;
  }
  if (v75 - v169 <= v163.u16[3] && v169)
  {
    unsigned __int16 v169 = 0;
    int v165 = 0;
    goto LABEL_78;
  }
  if (v169)
  {
    unsigned __int16 v169 = 0;
    int v51 = v165 + 1;
    uint64_t v50 = (v165 + 1);
    int v165 = 0;
    goto LABEL_100;
  }
  if (v75 < v163.u16[2] && applyRules(a1, v8, (unsigned __int16)v51, v170) != 1)
  {
LABEL_78:
    *(unsigned char *)(*(void *)v8 + 224 * (unsigned __int16)v51 + 73) = 4;
    goto LABEL_99;
  }
  if ((unsigned __int16)v67 < 0x801u)
  {
    uint64_t v81 = heap_Calloc(*(void **)(a1 + 8), 1, 2 * (unsigned __int16)v67);
    if (!v81)
    {
      uint64_t v8 = 2315264010;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v82, v83, v84, v85, v162);
      goto LABEL_192;
    }
    uint64_t v86 = v81;
    unsigned __int16 v178 = 0;
    recursiveFindSplit(v48, 0, (unsigned __int16)v67, v75, v81, &v178, v168);
    if ((unsigned __int16)v173 <= (unsigned __int16)v51)
    {
      unsigned __int16 v87 = 0;
      unsigned __int16 v88 = v173;
      do
      {
        unsigned int v89 = v88;
        int v90 = v88;
        if (strstr(**(char ***)(*(void *)v8 + 224 * v88 + 16), "comma")) {
          BOOL v91 = 1;
        }
        else {
          BOOL v91 = v90 == (unsigned __int16)v173;
        }
        if (!v91) {
          ++v87;
        }
        uint64_t v92 = v178;
        uint64_t v93 = (unsigned __int16 *)v86;
        if (v178)
        {
          while (1)
          {
            int v94 = *v93++;
            if (v94 == v87) {
              break;
            }
            if (!--v92) {
              goto LABEL_97;
            }
          }
          if (applyRules(a1, v8, v89, v170) != 1) {
            *(unsigned char *)(*(void *)v8 + 224 * v89 + 73) = 4;
          }
        }
LABEL_97:
        unsigned __int16 v88 = v89 + 1;
      }
      while ((unsigned __int16)(v89 + 1) <= (unsigned __int16)v51);
    }
    uint64_t v40 = a1;
    heap_Free(*(void **)(a1 + 8), v86);
    goto LABEL_99;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Memory exceeds upper boundary: %d/%d", v45, v46, v47, 2 * (unsigned __int16)v67);
  uint64_t v8 = 2315264015;
LABEL_192:
  uint64_t v133 = v167;
  __int16 v134 = v166;
LABEL_193:
  heap_Free(*(void **)(a1 + 8), v48);
LABEL_194:
  *(_WORD *)(v133 + 242) = v134;
  return v8;
}

uint64_t printPhrases(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a2 + 8))
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = log_OutText(*(void *)(v9 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s\t\t%s\n", a6, a7, a8, **(void **)(*(void *)a2 + v10 + 16));
      ++v11;
      v10 += 224;
    }
    while (v11 < *(unsigned __int16 *)(a2 + 8));
  }
  return result;
}

uint64_t convertTones(uint64_t a1, char *__s1, const char *a3)
{
  if (!strcmp(__s1, "55"))
  {
    uint64_t v9 = (char *)&a3[strlen(a3)];
    __int16 v10 = 11569;
LABEL_18:
    *(_WORD *)uint64_t v9 = v10;
    v9[2] = 0;
    return 0;
  }
  if (!strcmp(__s1, "35"))
  {
    uint64_t v9 = (char *)&a3[strlen(a3)];
    __int16 v10 = 11570;
    goto LABEL_18;
  }
  if (!strcmp(__s1, "214") || !strcmp(__s1, "33"))
  {
    uint64_t v9 = (char *)&a3[strlen(a3)];
    __int16 v10 = 11571;
    goto LABEL_18;
  }
  if (!strcmp(__s1, "51") || !strcmp(__s1, "21"))
  {
    uint64_t v9 = (char *)&a3[strlen(a3)];
    __int16 v10 = 11572;
    goto LABEL_18;
  }
  if (!strcmp(__s1, "11") || !strcmp(__s1, "13"))
  {
    uint64_t v9 = (char *)&a3[strlen(a3)];
    __int16 v10 = 11573;
    goto LABEL_18;
  }
  if (!strcmp(__s1, "34") || !strcmp(__s1, "22"))
  {
    uint64_t v9 = (char *)&a3[strlen(a3)];
    __int16 v10 = 11574;
    goto LABEL_18;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"invalid input prone: %s\n", v6, v7, v8, (uint64_t)__s1);
  return 0;
}

uint64_t hlp_BrokerString(uint64_t a1, char *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  *(void *)uint64_t v6 = 0;
  int v8 = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v6);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v5);
    if ((result & 0x80000000) == 0)
    {
      __strcpy_chk();
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      return brokeraux_ComposeBrokerString(a1, (const char *)v7, 1, 1, *(char **)v6, 0, 0, a2, 0x100uLL);
    }
  }
  return result;
}

uint64_t getTokenRuleset(uint64_t a1, __int16 a2, _DWORD *a3, _WORD *a4)
{
  __int16 v19 = 0;
  *a3 = 0;
  __int16 v16 = a2;
  int v14 = 0;
  int v15 = 2;
  __int16 v17 = 0;
  __int16 v18 = 0;
  if (!*(_WORD *)(a1 + 192)) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = a1 + 8;
  __int16 v10 = (const char **)(a1 + 1088);
  unint64_t v11 = (_WORD *)(a1 + 1104);
  uint64_t v12 = a1 + 672;
  do
  {
    uint64_t result = matchPANDPRULE_TRule(*(unsigned int *)(a1 + 1108), v10, v11, *(char **)(a1 + 1096), v9, v12, *(void *)(*(void *)(a1 + 184) + v7), (uint64_t)&v15, &v14);
    if ((result & 0x80000000) != 0) {
      break;
    }
    if (v14)
    {
      if (v14 == 1)
      {
        *a3 = 1;
        *a4 = v8;
      }
      return result;
    }
    ++v8;
    v7 += 40;
  }
  while (v8 < *(unsigned __int16 *)(a1 + 192));
  return result;
}

uint64_t handleTokenWord(uint64_t a1, unsigned int a2, int a3, unsigned __int16 *a4, _DWORD *a5, uint64_t a6)
{
  *(_DWORD *)&v53[2] = 0;
  int v49 = 0;
  int v47 = 0;
  int v48 = 0;
  FLOATSUR_SET_INT(&v49, 0, 0);
  FLOATSUR_SET_INT(&v48, *(_WORD *)(*(void *)(a1 + 672) + 224 * a2 + 24), 0);
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    [1] apply word weight rules", v11, v12, v13, 0);
  unsigned int v44 = a2;
  __int16 v52 = a2;
  int v50 = 0;
  int v51 = 1;
  *(_DWORD *)unsigned int v53 = 0;
  unsigned int v14 = a6;
  uint64_t v15 = *(void *)(a1 + 184);
  uint64_t v45 = a6;
  int v42 = a3;
  uint64_t v43 = a4;
  if (*(_WORD *)(v15 + 40 * a6 + 32))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    while (1)
    {
      uint64_t matched = matchMAPRULE2NUMANDOPERATOR_TRule(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), (_WORD *)(a1 + 1104), *(char **)(a1 + 1096), a1 + 8, a1 + 672, *(void *)(v15 + 40 * v14 + 24) + v16, (uint64_t)&v51, &v50, (unsigned __int16 *)&v49);
      if ((matched & 0x80000000) != 0) {
        break;
      }
      int v22 = v50;
      if (v50 == 1)
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    wordwweight : rulset %d, idx %d FIRED wordWeight=%d.%d", v18, v19, v20, v45);
        int v22 = v50;
      }
      if (!v22)
      {
        ++v17;
        uint64_t v15 = *(void *)(a1 + 184);
        v16 += 32;
        if (v17 < *(unsigned __int16 *)(v15 + 40 * v14 + 32)) {
          continue;
        }
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t matched = 0;
LABEL_10:
    FLOATSUR_PLUS(&v47, (unsigned __int16 *)&v49, (unsigned __int16 *)&v48);
    FLOATSUR_PLUS(v43, v43, (unsigned __int16 *)&v47);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    runningPhraseWeight=%d.%d (wordWeight=%d.%d pronWeight=%d.%d)", v23, v24, v25, *v43);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    [2] apply token rules", v26, v27, v28, 0);
    __int16 v52 = v44;
    int v50 = 0;
    int v51 = 1;
    *(_DWORD *)unsigned int v53 = 0;
    uint64_t v32 = *(void *)(a1 + 184);
    if (*(_WORD *)(v32 + 40 * v14 + 16))
    {
      unint64_t v33 = 0;
      uint64_t v34 = 8;
      while (1)
      {
        uint64_t matched = matchMAPRULE2NUM_TRule(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), (_WORD *)(a1 + 1104), *(char **)(a1 + 1096), a1 + 8, a1 + 672, (_DWORD *)(*(void *)(v32 + 40 * v14 + 8) + v34 - 8), (uint64_t)&v51, &v50, a5);
        if ((matched & 0x80000000) != 0) {
          break;
        }
        if (v50 == 1)
        {
          uint64_t matched = logPANDPRULE_TRule(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), (_WORD *)(a1 + 1104), *(char **)(a1 + 1096), (uint64_t *)(a1 + 8), (uint64_t **)(*(void *)(*(void *)(a1 + 184) + 40 * v14 + 8) + v34));
          if ((matched & 0x80000000) == 0)
          {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    FIRED : ruleset %d, idx %d <%s> bndWeight=%d.%d", v38, v39, v40, v45);
            **(unsigned char **)(a1 + 1088) = 0;
          }
          return matched;
        }
        ++v33;
        uint64_t v32 = *(void *)(a1 + 184);
        v34 += 32;
        if (v33 >= *(unsigned __int16 *)(v32 + 40 * v14 + 16))
        {
          if (v50) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    no token rules fire.", v29, v30, v31, 0);
LABEL_17:
      if (v44 + 1 == v42)
      {
        FLOATSUR_SET_INT(a5, *(_WORD *)(a1 + 176), 0);
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    END token word; set TOKENENDWORDBNDWEIGHT bndWeight=%d.%d",
          v35,
          v36,
          v37,
          *(unsigned __int16 *)a5);
      }
      else
      {
        FLOATSUR_SET_INT(a5, 0, 0);
      }
    }
  }
  return matched;
}

uint64_t getPhrasingForToken(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v3 = a3;
  uint64_t v27 = 0;
  int v26 = 0;
  unsigned __int16 v25 = 0;
  uint64_t v6 = *(void *)(a1[84] + 224 * a3 + 56) + 32 * *((unsigned __int16 *)a1 + 15);
  uint64_t v7 = *(void *)(v6 + 16);
  __int16 v8 = *(_WORD *)(v6 + 10);
  FLOATSUR_SET_INT((_WORD *)&v27 + 2, 0, 0);
  FLOATSUR_SET_INT(&v27, 0, 0);
  uint64_t TokenRuleset = getTokenRuleset((uint64_t)a1, v3, &v26, &v25);
  if ((TokenRuleset & 0x80000000) != 0) {
    return TokenRuleset;
  }
  uint64_t v13 = *(void *)(*a1 + 32);
  if (v26 == 1)
  {
    unsigned __int16 v14 = v8 + 1;
    uint64_t v15 = v25;
    log_OutText(v13, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  using token rule set %d (for \"%s\")", v10, v11, v12, v25);
    unsigned int v24 = (unsigned __int16)(v14 - v3);
    unsigned __int16 v19 = v3;
    do
    {
      unsigned __int16 v20 = v3;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  doing token word[%d]=%s", v16, v17, v18, v3);
      uint64_t v21 = handleTokenWord((uint64_t)a1, v3, v14, (unsigned __int16 *)&v27 + 2, &v27, v15);
      if ((v21 & 0x80000000) != 0) {
        break;
      }
      if (FLOATSUR_GT_INT((unsigned __int16 *)&v27, 0, 0))
      {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  add token node %d,%d", v16, v17, v18, v19);
        uint64_t v21 = addNode(*a1, a2, v19, v3 + 1, 2, v24);
        if ((v21 & 0x80000000) != 0) {
          return v21;
        }
        *(_DWORD *)(*(void *)a2 + 32 * *(unsigned __int16 *)(a2 + 8) - 24) = HIDWORD(v27);
        uint64_t v22 = *(void *)a2 + 32 * *(unsigned __int16 *)(a2 + 8);
        *(_DWORD *)(v22 - 12) = 1;
        *(_DWORD *)(v22 - 20) = v27;
        FLOATSUR_SET_INT((_WORD *)&v27 + 2, 0, 0);
        FLOATSUR_SET_INT(&v27, 0, 0);
        unsigned __int16 v19 = v3 + 1;
      }
      ++v3;
    }
    while ((unsigned __int16)(v20 + 1) < v14);
  }
  else
  {
    log_OutText(v13, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  no rules match for token type =%s", v10, v11, v12, v7);
    return 2315264000;
  }
  return v21;
}

uint64_t assignTokenPOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v43 = 0;
  unsigned __int16 v8 = *(_WORD *)(a1 + 680);
  if (!v8) {
    return 0;
  }
  unsigned __int16 v10 = 0;
  uint64_t matched = 0;
  uint64_t v12 = a1 + 672;
  memset(v42, 0, sizeof(v42));
  uint64_t v13 = a1 + 8;
  unsigned __int16 v14 = (const char **)(a1 + 1088);
  uint64_t v15 = (_WORD *)(a1 + 1104);
  uint64_t v16 = *(void *)(a1 + 672);
  uint64_t v40 = a1 + 8;
  uint64_t v41 = a1 + 672;
  uint64_t v38 = (_WORD *)(a1 + 1104);
  uint64_t v39 = (const char **)(a1 + 1088);
  while (1)
  {
    uint64_t v17 = *(void *)(v16 + 224 * v10 + 56);
    if (!v17) {
      goto LABEL_7;
    }
    uint64_t v18 = *(unsigned __int16 *)(a1 + 30);
    if (*(_DWORD *)(v17 + 32 * v18) != 1) {
      goto LABEL_7;
    }
    unsigned int v19 = *(unsigned __int16 *)(*(void *)(v16 + 224 * v10 + 56) + 32 * v18 + 10);
    if (v19 >= v10) {
      break;
    }
LABEL_6:
    unsigned __int16 v10 = v19;
LABEL_7:
    if (++v10 >= v8) {
      return matched;
    }
  }
  unsigned int v37 = v10;
  while (1)
  {
    int v43 = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"get token POS for \"%s\"", a6, a7, a8, *(void *)(*(void *)(v16 + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a1 + 24)));
    if (!v43)
    {
      if (*(_WORD *)(a1 + 128)) {
        break;
      }
    }
LABEL_11:
    ++v10;
    uint64_t v16 = *(void *)(a1 + 672);
    unsigned int v19 = *(unsigned __int16 *)(*(void *)(v16 + 224 * v37 + 56) + 32 * *(unsigned __int16 *)(a1 + 30) + 10);
    if (v19 < v10)
    {
      unsigned __int16 v8 = *(_WORD *)(a1 + 680);
      goto LABEL_6;
    }
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  while (1)
  {
    *(_WORD *)&v42[4] = v10;
    *(_DWORD *)int v42 = 1;
    *(_DWORD *)&v42[6] = 0;
    uint64_t matched = matchMAPRULE2STR_TRule(*(unsigned int *)(a1 + 1108), v14, v15, *(char **)(a1 + 1096), v13, v12, *(void *)(a1 + 120) + v20, (uint64_t)v42, &v43);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v22 = v43;
    if (v43 == 1)
    {
      uint64_t v23 = 224 * v10;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"POS tagging rule %d FIRED (word %d) \"%s\" -> \"%s\"", a6, a7, a8, v21);
      uint64_t v24 = *(void *)(a1 + 672);
      uint64_t v25 = *(void *)(a1 + 536);
      uint64_t v26 = *(void *)(a1 + 544);
      uint64_t v27 = *(void *)(a1 + 120);
      if (!*(void *)(v24 + v23 + 88)
        && !strcmp("UNK", (const char *)(v25 + *(unsigned int *)(v26 + 4 * *(unsigned int *)(v27 + v20)))))
      {
        unsigned __int16 v28 = strlen(*(const char **)(*(void *)(v24 + v23 + 16) + 8 * *(unsigned __int16 *)(a1 + 26)));
        uint64_t v29 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v28 + 1);
        uint64_t v34 = *(void *)(a1 + 672);
        *(void *)(v34 + v23 + 88) = v29;
        if (!v29)
        {
          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v30, v31, v32, v33, v36);
          return 2315264010;
        }
        strcpy(v29, *(const char **)(*(void *)(v34 + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a1 + 26)));
        uint64_t v24 = *(void *)(a1 + 672);
        uint64_t v25 = *(void *)(a1 + 536);
        uint64_t v26 = *(void *)(a1 + 544);
        uint64_t v27 = *(void *)(a1 + 120);
      }
      uint64_t matched = doMapStr(*(void *)a1, (const char **)(*(void *)(v24 + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a1 + 26)), (char *)(v25 + *(unsigned int *)(v26 + 4 * *(unsigned int *)(v27 + v20))));
      if ((matched & 0x80000000) != 0) {
        return matched;
      }
      int v22 = v43;
      uint64_t v13 = v40;
      uint64_t v12 = v41;
      uint64_t v15 = v38;
      unsigned __int16 v14 = v39;
    }
    if (!v22)
    {
      ++v21;
      v20 += 32;
      if (v21 < *(unsigned __int16 *)(a1 + 128)) {
        continue;
      }
    }
    goto LABEL_11;
  }
}

uint64_t assignTokenTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v31 = 0;
  unsigned __int16 v30 = 0;
  unsigned __int16 v8 = *(_WORD *)(a1 + 680);
  if (!v8) {
    return 0;
  }
  unsigned __int16 v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = (uint64_t *)(a1 + 672);
  memset(v29, 0, 12);
  uint64_t v13 = (unsigned __int16 *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 672);
  while (1)
  {
    unsigned int v15 = v10;
    uint64_t v16 = *(void *)(v14 + 224 * v10 + 56);
    if (!v16) {
      goto LABEL_7;
    }
    uint64_t v17 = *(unsigned __int16 *)(a1 + 30);
    if (*(_DWORD *)(v16 + 32 * v17) != 1) {
      goto LABEL_7;
    }
    unsigned int v18 = *(unsigned __int16 *)(*(void *)(v14 + 224 * v10 + 56) + 32 * v17 + 10);
    if (v18 >= v10) {
      break;
    }
LABEL_6:
    unsigned __int16 v10 = v18;
LABEL_7:
    if (++v10 >= v8) {
      return v11;
    }
  }
  while (1)
  {
    int v31 = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"get token tag for word %d \"%s\"", a6, a7, a8, v10);
    if (!v31)
    {
      unint64_t v19 = 0;
      while (v19 < *(unsigned __int16 *)(a1 + 152))
      {
        if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v19) == 1)
        {
          WORD2(v29[0]) = v10;
          LODWORD(v29[0]) = 1;
          *(_DWORD *)((char *)v29 + 6) = 0;
          uint64_t matched = matchMMAPREGEX2STR_TRule(v13, (uint64_t)v12, *(unsigned __int16 **)(*(void *)(a1 + 136) + 8 * v19), (unsigned __int16 *)v29, &v31, (uint64_t)&v30, a7, a8);
        }
        else
        {
          uint64_t matched = matchMAPSTRSTR_TRule((uint64_t)v13, v12, *(unsigned int **)(*(void *)(a1 + 136) + 8 * v19), (uint64_t)v29, &v31, a6, a7, a8);
        }
        uint64_t v11 = matched;
        if ((matched & 0x80000000) != 0) {
          return v11;
        }
        int v21 = v31;
        if (v31 == 1)
        {
          uint64_t v22 = *(void *)(*(void *)a1 + 32);
          if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v19) == 1)
          {
            log_OutText(v22, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"regex rule %d FIRED \"%s\" -> \"%s\"", a6, a7, a8, v30);
            uint64_t v23 = *(void *)a1;
            uint64_t v24 = *(void *)(a1 + 536);
            uint64_t v25 = *(void *)(a1 + 544);
            uint64_t v26 = *(unsigned int *)(*(void *)(*(void *)(a1 + 136) + 8 * v19) + 8);
          }
          else
          {
            log_OutText(v22, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"normal rule FIRED \"%s\" -> \"%s\"", a6, a7, a8, *(void *)(*(void *)(*(void *)(a1 + 672) + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a1 + 24)));
            uint64_t v23 = *(void *)a1;
            uint64_t v24 = *(void *)(a1 + 536);
            uint64_t v25 = *(void *)(a1 + 544);
            uint64_t v26 = *(unsigned int *)(*(void *)(*(void *)(a1 + 136) + 8 * v19) + 4);
          }
          uint64_t v11 = addTokenTag(v23, v10, (char *)(v24 + *(unsigned int *)(v25 + 4 * v26)), (uint64_t)v13, v12);
          if ((v11 & 0x80000000) != 0) {
            return v11;
          }
          int v21 = v31;
        }
        ++v19;
        if (v21) {
          goto LABEL_10;
        }
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no matches found", a6, a7, a8, v28);
      uint64_t v11 = addTokenTag(*(void *)a1, v10, "UNK", (uint64_t)v13, v12);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
    }
LABEL_10:
    ++v10;
    uint64_t v14 = *(void *)(a1 + 672);
    unsigned int v18 = *(unsigned __int16 *)(*(void *)(v14 + 224 * v15 + 56) + 32 * *(unsigned __int16 *)(a1 + 30) + 10);
    if (v18 < v10)
    {
      unsigned __int16 v8 = *(_WORD *)(a1 + 680);
      goto LABEL_6;
    }
  }
}

uint64_t extendPHRContainingTokenTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_WORD *)(a1 + 680)) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  int v12 = 0;
  LODWORD(v13) = 0;
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 672);
  while (1)
  {
    uint64_t v16 = *(void *)(v15 + 224 * v9 + 56);
    if (!v16) {
      goto LABEL_46;
    }
    uint64_t v17 = *(unsigned __int16 *)(a1 + 32);
    if (*(_DWORD *)(v16 + 32 * v17) == 1)
    {
      uint64_t v18 = v16 + 32 * v17;
      uint64_t v13 = *(unsigned __int16 *)(v18 + 10);
      uint64_t v19 = *(unsigned __int16 *)(v18 + 8);
      uint64_t v14 = (unsigned __int16)v9;
      if (v19 >= v13)
      {
        int v11 = 0;
        int v12 = 0;
      }
      else
      {
        int v12 = 0;
        uint64_t v20 = (void *)(v15 + 224 * *(unsigned __int16 *)(v18 + 8) + 56);
        uint64_t v21 = v13 - v19;
        do
        {
          if (*v20 && *(_DWORD *)(*v20 + 32 * *(unsigned __int16 *)(a1 + 30)) == 1) {
            ++v12;
          }
          v20 += 28;
          --v21;
        }
        while (v21);
        int v11 = 0;
      }
    }
    uint64_t v22 = *(unsigned __int16 *)(a1 + 30);
    uint64_t v23 = v16 + 32 * v22;
    if (!*(void *)(v23 + 16)) {
      goto LABEL_46;
    }
    int v24 = v11 + 1;
    BOOL v25 = (_WORD)v11 || v9 == v14;
    BOOL v26 = !v25;
    unsigned int v27 = *(unsigned __int16 *)(v23 + 10);
    uint64_t v28 = *(void *)(v15 + 224 * *(unsigned __int16 *)(v23 + 10) + 56);
    if (!v28) {
      break;
    }
    BOOL v30 = *(_DWORD *)(v28 + 32 * v22 + 4) == 1
       && v27 < v13
       && (unsigned __int16)v24 == (unsigned __int16)v12;
    int v31 = v30;
    if (v30 && v26)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Extend token at %d to Left and Right", a6, a7, a8, v10);
      uint64_t v33 = *(void *)(a1 + 672);
      uint64_t v34 = *(unsigned __int16 *)(a1 + 30);
      uint64_t v35 = *(void *)(v33 + 224 * v9 + 56) + 32 * v34;
      *(_DWORD *)uint64_t v35 = 0;
      *(_DWORD *)(*(void *)(v33 + 224 * v27 + 56) + 32 * v34 + 4) = 0;
      uint64_t v36 = *(void *)(v33 + 224 * v14 + 56) + 32 * v34;
      *(_DWORD *)uint64_t v36 = 1;
      *(_WORD *)(v36 + 8) = v14;
      *(_WORD *)(v36 + 10) = v13;
      *(_DWORD *)(v36 + 24) = 1;
      int v37 = strlen(*(const char **)(v35 + 16));
      uint64_t v38 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v37 + 1));
      uint64_t v43 = *(void *)(a1 + 672);
      uint64_t v44 = *(unsigned __int16 *)(a1 + 30);
      *(void *)(*(void *)(v43 + 224 * v14 + 56) + 32 * v44 + 16) = v38;
      if (!v38) {
        goto LABEL_48;
      }
      strcpy(v38, *(const char **)(*(void *)(v43 + 224 * v9 + 56) + 32 * v44 + 16));
      heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(*(void *)(*(void *)(a1 + 672) + 224 * v9 + 56) + 32 * *(unsigned __int16 *)(a1 + 30) + 16));
      uint64_t v15 = *(void *)(a1 + 672);
      uint64_t v45 = *(unsigned __int16 *)(a1 + 30);
      *(void *)(*(void *)(v15 + 224 * v9 + 56) + 32 * v45 + 16) = 0;
      uint64_t v46 = *(void *)(v15 + 224 * v13 + 56) + 32 * v45;
      int v11 = 1;
      *(_DWORD *)(v46 + 4) = 1;
      *(_WORD *)(v46 + 8) = v14;
    }
    else
    {
      if (v26) {
        goto LABEL_39;
      }
      if (!v31)
      {
LABEL_45:
        int v11 = v24;
        goto LABEL_46;
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Extend token at %d to Right", a6, a7, a8, v10);
      uint64_t v15 = *(void *)(a1 + 672);
      uint64_t v56 = *(unsigned __int16 *)(a1 + 30);
      *(_DWORD *)(*(void *)(v15 + 224 * v27 + 56) + 32 * v56 + 4) = 0;
      uint64_t v57 = *(void *)(v15 + 224 * v9 + 56) + 32 * v56;
      *(_WORD *)(v57 + 10) = v13;
      *(_DWORD *)(v57 + 24) = 1;
      uint64_t v58 = *(void *)(v15 + 224 * v13 + 56) + 32 * v56;
      *(_DWORD *)(v58 + 4) = 1;
      *(_WORD *)(v58 + 8) = *(_WORD *)(v57 + 8);
      int v11 = v12;
    }
LABEL_46:
    uint64_t v10 = ++v9;
    if (v9 >= *(unsigned __int16 *)(a1 + 680)) {
      return 0;
    }
  }
  if (!v26) {
    goto LABEL_45;
  }
LABEL_39:
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Extend token at %d to Left", a6, a7, a8, v10);
  uint64_t v15 = *(void *)(a1 + 672);
  uint64_t v47 = *(void *)(v15 + 224 * v9 + 56);
  uint64_t v48 = *(unsigned __int16 *)(a1 + 30);
  *(_DWORD *)(v47 + 32 * v48) = 0;
  uint64_t v49 = *(void *)(v15 + 224 * v14 + 56);
  if (!v49)
  {
LABEL_42:
    *(_WORD *)(*(void *)(v15 + 224 * *(unsigned __int16 *)(v47 + 32 * v48 + 10) + 56) + 32 * v48 + 8) = v14;
    int v11 = 1;
    goto LABEL_46;
  }
  uint64_t v50 = v49 + 32 * v48;
  *(_DWORD *)uint64_t v50 = 1;
  *(_WORD *)(v50 + 8) = v14;
  uint64_t v51 = v47 + 32 * v48;
  *(_WORD *)(v50 + 10) = *(_WORD *)(v51 + 10);
  *(_DWORD *)(v50 + 24) = 1;
  int v52 = strlen(*(const char **)(v51 + 16));
  unsigned int v53 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v52 + 1));
  uint64_t v54 = *(void *)(a1 + 672);
  uint64_t v55 = *(unsigned __int16 *)(a1 + 30);
  *(void *)(*(void *)(v54 + 224 * v14 + 56) + 32 * v55 + 16) = v53;
  if (v53)
  {
    strcpy(v53, *(const char **)(*(void *)(v54 + 224 * v9 + 56) + 32 * v55 + 16));
    heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(*(void *)(*(void *)(a1 + 672) + 224 * v9 + 56) + 32 * *(unsigned __int16 *)(a1 + 30) + 16));
    uint64_t v15 = *(void *)(a1 + 672);
    uint64_t v47 = *(void *)(v15 + 224 * v9 + 56);
    uint64_t v48 = *(unsigned __int16 *)(a1 + 30);
    *(void *)(v47 + 32 * v48 + 16) = 0;
    goto LABEL_42;
  }
LABEL_48:
  log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v39, v40, v41, v42, v60);
  return 2315264010;
}

uint64_t annotateTokenTypeOnEachWord(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 680);
  if (*(_WORD *)(a1 + 680))
  {
    uint64_t v2 = 0;
    unsigned __int16 v3 = (void *)(*(void *)(a1 + 672) + 104);
    do
    {
      uint64_t v4 = *(v3 - 6);
      if (v4)
      {
        uint64_t v5 = *(unsigned __int16 *)(a1 + 30);
        if (*(_DWORD *)(v4 + 32 * v5) == 1) {
          uint64_t v2 = *(void *)(v4 + 32 * v5 + 16);
        }
        *unsigned __int16 v3 = v2;
        if (*(_DWORD *)(v4 + 32 * v5 + 4) == 1) {
          uint64_t v2 = 0;
        }
      }
      else
      {
        *unsigned __int16 v3 = v2;
      }
      v3 += 28;
      --v1;
    }
    while (v1);
  }
  return 0;
}

uint64_t load_pw_igtree_cfg(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v9 = 0;
  __int16 v8 = -1;
  char v7 = 0;
  *a4 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a3 + 96))(a1, a2, "fecfg", "statbnd_pw_igtree", &v9, &v8, &v7);
  if ((v5 & 0x80000000) == 0 && v8 == 1)
  {
    (*v9)[strlen(*v9) - 1] = 0;
    if (!strcmp(*v9, "yes")) {
      *a4 = 1;
    }
  }
  return v5;
}

uint64_t load_pw_igtree(_WORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  memset(v27, 0, sizeof(v27));
  *(void *)BOOL v26 = 0;
  *a4 = 0;
  uint64_t BrokerString = nn_model_getBrokerString(a3, (char *)v27, (uint64_t)"pwigtree_", 0x100uLL);
  if ((BrokerString & 0x80000000) != 0
    || (uint64_t BrokerString = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v27, "IGTR", 1031, (uint64_t *)v26),
        (BrokerString & 0x80000000) != 0))
  {
    uint64_t v21 = BrokerString;
  }
  else
  {
    uint64_t v16 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
    *a4 = v16;
    if (v16)
    {
      uint64_t v21 = igtree_Init(a1, a2, *(uint64_t *)v26, v16);
      ssftriff_reader_CloseChunk(*(uint64_t *)v26);
      if ((v21 & 0x80001FFF) == 0x14)
      {
        ssftriff_reader_CloseChunk(*(uint64_t *)v26);
        uint64_t v21 = 0;
      }
    }
    else
    {
      log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v25);
      uint64_t v21 = 2315264010;
    }
  }
  if (*(void *)v26)
  {
    int v22 = ssftriff_reader_ObjClose(*(void **)v26, v9, v10, v11, v12, v13, v14, v15);
    if (v22 >= 0 || (int)v21 <= -1) {
      return v21;
    }
    else {
      return v22;
    }
  }
  return v21;
}

uint64_t hlp_igtree_initFeatureVector(uint64_t a1, void *a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v6 = (_WORD *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *a2 = v6;
    if (!v6) {
      break;
    }
    *uint64_t v6 = 61;
    ++a2;
    if (!--v5) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v7, v8, v9, v10, v12);
  return 2315264010;
}

uint64_t hlp_igtree_freeFeatureVector(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      if (*a2)
      {
        heap_Free(*(void **)(a1 + 8), *a2);
        *a2 = 0;
      }
      ++a2;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t hlp_resizeFeature(uint64_t a1, uint64_t *a2, char *__s)
{
  int v5 = strlen(__s);
  uint64_t v6 = heap_Realloc(*(uint64_t **)(a1 + 8), *a2, (v5 + 1));
  if (v6)
  {
    uint64_t v11 = v6;
    uint64_t result = 0;
    *a2 = v11;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v7, v8, v9, v10, v13);
    return 2315264010;
  }
  return result;
}

uint64_t hlp_igtree_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, char *a6)
{
  unsigned __int16 v11 = -1;
  uint64_t result = hlp_igtree_isFeatureRequired(a2, a3, a4, &v11);
  if (result)
  {
    if (*a6)
    {
      uint64_t v10 = v11;
      if (strlen(a6) < 0x41
        || (uint64_t result = hlp_resizeFeature(a1, (uint64_t *)(a5 + 8 * v11), a6), (result & 0x80000000) == 0))
      {
        strcpy(*(char **)(a5 + 8 * v10), a6);
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      **(_WORD **)(a5 + 8 * v11) = 61;
    }
  }
  return result;
}

uint64_t hlp_igtree_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  uint64_t v8 = g_featureNames_2[a3];
  while (strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6) {
      return 0;
    }
  }
  *a4 = v6;
  return 1;
}

char *feat_wordlength(uint64_t a1, unsigned int a2, int a3, int a4, char *__src, char *__dst)
{
  *int __dst = 0;
  if (a4 + a3 < a2) {
    return (char *)sprintf(__dst, "%d", *(unsigned __int16 *)(a1 + 40 * (a4 + a3) + 26));
  }
  return strcpy(__dst, __src);
}

uint64_t hlp_igtree_setFeatureVector(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  unsigned __int16 v82 = 0;
  uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), 1, 2048);
  if (v14)
  {
    uint64_t v19 = (char *)v14;
    unsigned int v81 = a6;
    if (a4 < 2) {
      goto LABEL_99;
    }
    uint64_t v20 = 0;
    uint64_t v21 = a4 - 1;
    while (strcmp(*(const char **)(a3 + 8 * v20), "word"))
    {
      if (v21 == ++v20) {
        goto LABEL_12;
      }
    }
    unsigned __int16 v82 = v20;
    if (a7 >= v81) {
      uint64_t v23 = "=";
    }
    else {
      uint64_t v23 = *(char **)(a5 + 40 * a7);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 0, a2, v23);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_12:
    uint64_t v25 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v25), "lword"))
    {
      if (v21 == ++v25) {
        goto LABEL_20;
      }
    }
    unsigned __int16 v82 = v25;
    if (a7 - 1 >= v81) {
      BOOL v26 = "=";
    }
    else {
      BOOL v26 = *(char **)(a5 + 40 * (a7 - 1));
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 1, a2, v26);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_20:
    uint64_t v27 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v27), "llword"))
    {
      if (v21 == ++v27) {
        goto LABEL_28;
      }
    }
    unsigned __int16 v82 = v27;
    if (a7 - 2 >= v81) {
      uint64_t v28 = "=";
    }
    else {
      uint64_t v28 = *(char **)(a5 + 40 * (a7 - 2));
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 2, a2, v28);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_28:
    uint64_t v29 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v29), "rword"))
    {
      if (v21 == ++v29) {
        goto LABEL_36;
      }
    }
    unsigned __int16 v82 = v29;
    if (a7 + 1 >= v81) {
      BOOL v30 = "=";
    }
    else {
      BOOL v30 = *(char **)(a5 + 40 * (a7 + 1));
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 3, a2, v30);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_36:
    uint64_t v31 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v31), "rrword"))
    {
      if (v21 == ++v31) {
        goto LABEL_44;
      }
    }
    unsigned __int16 v82 = v31;
    if (a7 + 2 >= v81) {
      uint64_t v32 = "=";
    }
    else {
      uint64_t v32 = *(char **)(a5 + 40 * (a7 + 2));
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 4, a2, v32);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_44:
    uint64_t v33 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v33), "wordlen"))
    {
      if (v21 == ++v33) {
        goto LABEL_49;
      }
    }
    unsigned __int16 v82 = v33;
    feat_wordlength(a5, v81, a7, 0, "=", v19);
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 5, a2, v19);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_49:
    uint64_t v34 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v34), "lwordlen"))
    {
      if (v21 == ++v34) {
        goto LABEL_54;
      }
    }
    unsigned __int16 v82 = v34;
    feat_wordlength(a5, v81, a7, -1, "=", v19);
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 6, a2, v19);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_54:
    uint64_t v35 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v35), "rwordlen"))
    {
      if (v21 == ++v35) {
        goto LABEL_59;
      }
    }
    unsigned __int16 v82 = v35;
    feat_wordlength(a5, v81, a7, 1, "=", v19);
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 7, a2, v19);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_59:
    uint64_t v36 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v36), "pos"))
    {
      if (v21 == ++v36) {
        goto LABEL_67;
      }
    }
    unsigned __int16 v82 = v36;
    if (a7 >= v81) {
      int v37 = "=";
    }
    else {
      int v37 = *(char **)(a5 + 40 * a7 + 8);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 8, a2, v37);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_67:
    uint64_t v38 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v38), "lpos"))
    {
      if (v21 == ++v38) {
        goto LABEL_75;
      }
    }
    unsigned __int16 v82 = v38;
    if (a7 - 1 >= v81) {
      uint64_t v39 = "=";
    }
    else {
      uint64_t v39 = *(char **)(a5 + 40 * (a7 - 1) + 8);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 9, a2, v39);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_75:
    uint64_t v40 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v40), "llpos"))
    {
      if (v21 == ++v40) {
        goto LABEL_83;
      }
    }
    unsigned __int16 v82 = v40;
    if (a7 - 2 >= v81) {
      uint64_t v41 = "=";
    }
    else {
      uint64_t v41 = *(char **)(a5 + 40 * (a7 - 2) + 8);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 10, a2, v41);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_83:
    uint64_t v42 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v42), "rpos"))
    {
      if (v21 == ++v42) {
        goto LABEL_91;
      }
    }
    unsigned __int16 v82 = v42;
    if (a7 + 1 >= v81) {
      uint64_t v43 = "=";
    }
    else {
      uint64_t v43 = *(char **)(a5 + 40 * (a7 + 1) + 8);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 11, a2, v43);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_186;
    }
LABEL_91:
    uint64_t v44 = 0;
    while (strcmp(*(const char **)(a3 + 8 * v44), "rrpos"))
    {
      if (v21 == ++v44) {
        goto LABEL_99;
      }
    }
    unsigned __int16 v82 = v44;
    uint64_t v45 = a7 + 2 >= v81 ? "=" : *(char **)(a5 + 40 * (a7 + 2) + 8);
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 12, a2, v45);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_99:
      if (!hlp_igtree_isFeatureRequired(a3, a4, 13, &v82)
        || (uint64_t v46 = (char *)feat_char(a5, a7, 0, v19),
            uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 13, a2, v46),
            (v24 & 0x80000000) == 0))
      {
        if (!hlp_igtree_isFeatureRequired(a3, a4, 15, &v82)
          || (uint64_t v47 = (char *)feat_char(a5, a7, 1, v19),
              uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 15, a2, v47),
              (v24 & 0x80000000) == 0))
        {
          if (!hlp_igtree_isFeatureRequired(a3, a4, 14, &v82)
            || (uint64_t v48 = (char *)feat_char(a5, a7, -1, v19),
                uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 14, a2, v48),
                (v24 & 0x80000000) == 0))
          {
            if (!hlp_igtree_isFeatureRequired(a3, a4, 16, &v82)
              || (uint64_t v49 = (char *)feat_char(a5, a7, -2, v19),
                  uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 16, a2, v49),
                  (v24 & 0x80000000) == 0))
            {
              if (!hlp_igtree_isFeatureRequired(a3, a4, 17, &v82)) {
                goto LABEL_194;
              }
              if (a7)
              {
                uint64_t v50 = a7;
                uint64_t v51 = "=";
                while (v50 != 1)
                {
                  unsigned int v52 = v50 - 2;
                  int v53 = **(unsigned __int8 **)(a5 + 40 * (v50-- - 2) + 8);
                  if (v53 == 110)
                  {
                    uint64_t v51 = *(char **)(a5 + 40 * v52);
                    break;
                  }
                }
              }
              else
              {
                uint64_t v51 = "=";
              }
              uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 17, a2, v51);
              if ((v24 & 0x80000000) == 0)
              {
LABEL_194:
                if (!hlp_igtree_isFeatureRequired(a3, a4, 18, &v82)) {
                  goto LABEL_191;
                }
                if (a7)
                {
                  uint64_t v54 = a7;
                  uint64_t v55 = "=";
                  while (v54 != 1)
                  {
                    unsigned int v56 = v54 - 2;
                    int v57 = **(unsigned __int8 **)(a5 + 40 * (v54-- - 2) + 8);
                    if (v57 == 118)
                    {
                      uint64_t v55 = *(char **)(a5 + 40 * v56);
                      break;
                    }
                  }
                }
                else
                {
                  uint64_t v55 = "=";
                }
                uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 18, a2, v55);
                if ((v24 & 0x80000000) == 0)
                {
LABEL_191:
                  if (!hlp_igtree_isFeatureRequired(a3, a4, 19, &v82)) {
                    goto LABEL_192;
                  }
                  uint64_t v58 = "=";
                  unsigned __int16 v59 = a7;
                  while (v81 > ++v59)
                  {
                    if (**(unsigned char **)(a5 + 40 * v59 + 8) == 110)
                    {
                      uint64_t v58 = *(char **)(a5 + 40 * v59);
                      break;
                    }
                  }
                  uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 19, a2, v58);
                  if ((v24 & 0x80000000) == 0)
                  {
LABEL_192:
                    if (!hlp_igtree_isFeatureRequired(a3, a4, 19, &v82)) {
                      goto LABEL_193;
                    }
                    unsigned int v60 = "=";
                    unsigned __int16 v61 = a7;
                    while (v81 > ++v61)
                    {
                      if (**(unsigned char **)(a5 + 40 * v61 + 8) == 118)
                      {
                        unsigned int v60 = *(char **)(a5 + 40 * v61);
                        break;
                      }
                    }
                    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 20, a2, v60);
                    if ((v24 & 0x80000000) == 0)
                    {
LABEL_193:
                      if (!hlp_igtree_isFeatureRequired(a3, a4, 21, &v82)
                        || (a7 >= v81
                          ? (unint64_t v63 = "=")
                          : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * a7 + 26) > 5u) ? (char v62 = 48) : (char v62 = 49),
                             *uint64_t v19 = v62,
                             unint64_t v63 = v19),
                            uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 21, a2, v63),
                            (v24 & 0x80000000) == 0))
                      {
                        if (!hlp_igtree_isFeatureRequired(a3, a4, 22, &v82)
                          || (a7 >= v81
                            ? (uint64_t v65 = "=")
                            : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * a7 + 26) < 2u) ? (char v64 = 48) : (char v64 = 49),
                               *uint64_t v19 = v64,
                               uint64_t v65 = v19),
                              uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 22, a2, v65),
                              (v24 & 0x80000000) == 0))
                        {
                          if (!hlp_igtree_isFeatureRequired(a3, a4, 23, &v82)
                            || (a7 - 1 >= v81
                              ? (int v67 = "=")
                              : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 - 1) + 26) > 5u)
                               ? (char v66 = 48)
                               : (char v66 = 49),
                                 *uint64_t v19 = v66,
                                 int v67 = v19),
                                uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 23, a2, v67),
                                (v24 & 0x80000000) == 0))
                          {
                            if (!hlp_igtree_isFeatureRequired(a3, a4, 24, &v82)
                              || (a7 - 1 >= v81
                                ? (int v69 = "=")
                                : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 - 1) + 26) < 2u)
                                 ? (char v68 = 48)
                                 : (char v68 = 49),
                                   *uint64_t v19 = v68,
                                   int v69 = v19),
                                  uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 24, a2, v69),
                                  (v24 & 0x80000000) == 0))
                            {
                              if (!hlp_igtree_isFeatureRequired(a3, a4, 25, &v82)
                                || (a7 + 1 >= v81
                                  ? (uint64_t v71 = "=")
                                  : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 + 1) + 26) > 5u)
                                   ? (char v70 = 48)
                                   : (char v70 = 49),
                                     *uint64_t v19 = v70,
                                     uint64_t v71 = v19),
                                    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 25, a2, v71),
                                    (v24 & 0x80000000) == 0))
                              {
                                if (!hlp_igtree_isFeatureRequired(a3, a4, 26, &v82)
                                  || (a7 + 1 >= v81
                                    ? (uint64_t v76 = "=")
                                    : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 + 1) + 26) < 2u)
                                     ? (char v75 = 48)
                                     : (char v75 = 49),
                                       *uint64_t v19 = v75,
                                       uint64_t v76 = v19),
                                      uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 26, a2, v76),
                                      (v24 & 0x80000000) == 0))
                                {
                                  int v77 = 0;
                                  unsigned int v78 = v82;
                                  do
                                  {
                                    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"igtree feature %s", v72, v73, v74, *(void *)(a2 + 8 * (unsigned __int16)v77));
                                    uint64_t v22 = 0;
                                    ++v77;
                                  }
                                  while (v78 >= (unsigned __int16)v77);
                                  goto LABEL_187;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_186:
    uint64_t v22 = v24;
LABEL_187:
    heap_Free(*(void **)(a1 + 8), (uint64_t)v19);
    return v22;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v15, v16, v17, v18, v80);
  return 2315264010;
}

const char *feat_char(uint64_t a1, unsigned int a2, int a3, char *a4)
{
  int v5 = a3;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 40 * a2 + 26);
  if (a3 < 0)
  {
    if ((((_WORD)v6 + (_WORD)a3) & 0x8000) != 0) {
      return "=";
    }
    int v5 = (__int16)(v6 + a3);
  }
  if (v6 <= (unsigned __int16)v5) {
    return "=";
  }
  unsigned __int16 v7 = 0;
  uint64_t v8 = (uint64_t *)(a1 + 40 * a2);
  do
  {
    utf8_getUTF8Char(*v8, v7, a4);
    v7 += strlen(a4);
  }
  while ((unsigned __int16)v5-- != 0);
  return a4;
}

uint64_t pandpIgtreeInit(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  int v14 = IgtreeContextInit(a1, a2, a3, a4, a5, a6, (uint64_t)(a7 + 7), "igtree2ps");
  if (v14 < 0) {
    goto LABEL_5;
  }
  if (a7[8])
  {
    int v14 = IgtreeContextInit(a1, a2, a3, a4, a5, a6, (uint64_t)(a7 + 14), "igtree2pw");
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t v15 = (uint64_t)(a7 + 21);
      uint64_t v16 = "igtreexsh";
      uint64_t v17 = a1;
      uint64_t v18 = a2;
      uint64_t v19 = a3;
      uint64_t v20 = a4;
      uint64_t v21 = a5;
      uint64_t v22 = a6;
      goto LABEL_7;
    }
LABEL_5:
    int v23 = v14;
    pandpIgtreeDeinit(a5, a6, a7);
    return v23 | 0x8A002000;
  }
  uint64_t v16 = "igtree1p";
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v15 = (uint64_t)a7;
LABEL_7:
  uint64_t v24 = IgtreeContextInit(v17, v18, v19, v20, v21, v22, v15, v16);
  if ((v24 & 0x80000000) != 0)
  {
    pandpIgtreeDeinit(a5, a6, a7);
    return v24 | 0x8A002000;
  }
  return v24;
}

uint64_t IgtreeContextInit(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *__s1)
{
  __s1a = 0;
  *(void *)a7 = __s1;
  *(void *)(a7 + 24) = 0;
  *(void *)(a7 + 40) = 0;
  *(void *)(a7 + 48) = 0;
  if (!strcmp(__s1, "igtree2ps"))
  {
    int v16 = 1;
    if ((paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"compatstrongbnd", &__s1a) & 0x80000000) == 0
      && __s1a
      && !strcmp(__s1a, "yes"))
    {
      log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"<%s> disables voice-dependent strong BND model", v21, v22, v23, (uint64_t)"compatstrongbnd");
      int v16 = 0;
    }
  }
  else
  {
    int v16 = 1;
  }
  if ((paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"basicclcprosody", &__s1a) & 0x80000000) == 0
    && __s1a
    && !strcmp(__s1a, "yes"))
  {
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"<%s> disables voice-dependent %s", v17, v18, v19, (uint64_t)"basicclcprosody");
  }
  else if (v16)
  {
    int v20 = tryLoadingIgtreeModel(a1, a2, a3, a4, a5, a7, (uint64_t)__s1, 1);
    if (v20 < 0) {
      return v20 | 0x8A002000;
    }
  }
  uint64_t v24 = *(void *)(a7 + 8);
  if (v24) {
    goto LABEL_15;
  }
  int v20 = tryLoadingIgtreeModel(a1, a2, a3, a4, a5, a7, (uint64_t)__s1, 0);
  if (v20 < 0) {
    return v20 | 0x8A002000;
  }
  uint64_t v24 = *(void *)(a7 + 8);
  if (v24)
  {
LABEL_15:
    *(void *)(a7 + 16) = 0;
    uint64_t v25 = *(void *)(v24 + 1312);
    int v26 = *(unsigned __int8 *)(v24 + 1296);
    int v27 = v26 - 1;
    uint64_t v28 = heap_Calloc(*(void **)(a5 + 8), (unsigned __int16)(v26 - 1), 8);
    *(void *)(a7 + 16) = v28;
    if (v28)
    {
      if (!v27)
      {
LABEL_25:
        *(void *)(a7 + 24) = &byte_20D5A22AE;
        *(_DWORD *)(a7 + 32) = 1;
        uint64_t v42 = *(void *)(a7 + 8);
        if (v42 && *(void *)(v42 + 1328) && *(_DWORD *)(v42 + 1336))
        {
          unsigned __int16 v43 = 0;
          do
          {
            uint64_t v44 = *(void *)(v42 + 1328);
            uint64_t v45 = v43;
            uint64_t v46 = *(const char **)(v44 + 16 * v43);
            if (!strcmp("orth_top200", v46))
            {
              *(void *)(a7 + 24) = *(void *)(v44 + 16 * v45 + 8);
            }
            else if (!strcmp("bnd1_dist_min", v46))
            {
              int v47 = strtol(*(const char **)(v44 + 16 * v45 + 8), 0, 10);
              if (v47 < 1) {
                log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 1, 0, (uint64_t)"readIgtreeParams: ignore invalid bnd1_dist_min value %s", v48, v49, v50, *(void *)(*(void *)(*(void *)(a7 + 8) + 1328) + 16 * v45 + 8));
              }
              else {
                *(_DWORD *)(a7 + 32) = v47;
              }
            }
            unsigned __int16 v43 = v45 + 1;
            uint64_t v42 = *(void *)(a7 + 8);
          }
          while (*(_DWORD *)(v42 + 1336) > (unsigned __int16)(v45 + 1));
        }
        return 0;
      }
      unsigned int v33 = 0;
      while (1)
      {
        uint64_t v34 = v33;
        *(void *)(v28 + 8 * v33) = 0;
        uint64_t v35 = *(const char **)(v25 + 8 * v33);
        uint64_t v36 = &off_26C1EE430;
        int v37 = "pos_current";
        while (strcmp(v37, v35))
        {
          uint64_t v41 = *v36;
          v36 += 2;
          int v37 = v41;
          if (!v41) {
            goto LABEL_23;
          }
        }
        log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"traceFeatureMap %s [%d] => %s", v38, v39, v40, *(void *)a7);
        *(void *)(*(void *)(a7 + 16) + 8 * v34) = *(v36 - 1);
LABEL_23:
        uint64_t v28 = *(void *)(a7 + 16);
        if (!*(void *)(v28 + 8 * v34)) {
          break;
        }
        unsigned int v33 = (unsigned __int16)(v34 + 1);
        if (v33 >= (unsigned __int16)v27) {
          goto LABEL_25;
        }
      }
      log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"no implementation for feature[%d] => %s", v38, v39, v40, v34);
      log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37001, "%s%s", v52, v53, v54, v55, "unimplemented feature");
      heap_Free(*(void **)(a5 + 8), *(void *)(a7 + 16));
      *(void *)(a7 + 16) = 0;
      uint64_t v51 = 2315264025;
    }
    else
    {
      log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v57);
      uint64_t v51 = 2315264010;
    }
    IgtreeContextDeinit(a5, a6, (void *)a7);
    return v51;
  }
  return 0;
}

uint64_t pandpIgtreeDeinit(uint64_t a1, uint64_t a2, void *a3)
{
  IgtreeContextDeinit(a1, a2, a3);
  IgtreeContextDeinit(a1, a2, a3 + 7);
  IgtreeContextDeinit(a1, a2, a3 + 14);
  return IgtreeContextDeinit(a1, a2, a3 + 21);
}

uint64_t IgtreeContextDeinit(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4 = result;
  *a3 = 0;
  a3[3] = 0;
  uint64_t v5 = a3[1];
  if (v5)
  {
    uint64_t result = igtree_Deinit_ReadOnly_DereferenceCnt(result, a2, v5);
    a3[1] = 0;
  }
  uint64_t v6 = a3[2];
  if (v6)
  {
    uint64_t result = (uint64_t)heap_Free(*(void **)(v4 + 8), v6);
    a3[2] = 0;
  }
  a3[3] = 0;
  a3[5] = 0;
  a3[6] = 0;
  return result;
}

uint64_t singlePassIgtreePhrasing(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  int v5 = *(unsigned __int8 *)(a5[1] + 1296);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (*(unsigned __int16 *)(a2 + 8) < 2u) {
    return 0;
  }
  uint64_t v10 = a2;
  uint64_t v32 = 0;
  int v29 = v5 - 1;
  int v12 = allocateFeatureVector(a1, (unsigned __int16)(v5 - 1), (uint64_t *)&v32, &v31);
  if (v12 < 0) {
    return v12 | 0x8A002000;
  }
  a5[5] = (uint64_t)a3;
  a5[6] = a4;
  unsigned int v13 = v32;
  if (*(unsigned __int16 *)(v10 + 8) >= 2u)
  {
    int v14 = 0;
    unsigned int v28 = 0;
    uint64_t v27 = v10;
    while (1)
    {
      uint64_t v15 = *(void *)v10 + 32 * (unsigned __int16)v14;
      if (*(_DWORD *)(v15 + 4) == 2 && *(_DWORD *)(*(void *)v10 + 32 * (v14 + 1) + 4) == 2) {
        goto LABEL_24;
      }
      unsigned __int16 v16 = *(_WORD *)(v15 + 2) - 1;
      if (v29)
      {
        uint64_t v17 = 0;
        do
        {
          (*(void (**)(uint64_t *, void, const char *, uint64_t))(a5[2] + v17 * 8))(a5, v16, v13[v17], 128);
          ++v17;
        }
        while ((unsigned __int16)v29 != v17);
      }
      unsigned int v28 = igtree_Process(a5[1], (uint64_t)v13, &v30);
      if ((v28 & 0x80000000) != 0) {
        goto LABEL_24;
      }
      unsigned int v20 = v16;
      uint64_t v21 = "?";
      uint64_t v22 = a3;
      if ((*(unsigned char *)(*a3 + 224 * v16 + 75) - 1) <= 3u) {
        uint64_t v21 = off_264108588[(char)(*(unsigned char *)(*a3 + 224 * v16 + 75) - 1)];
      }
      uint64_t v23 = v30;
      traceFeatureVector(a1, a5, v16, v13, v30, (uint64_t)v21, v18, v19);
      uint64_t v24 = *v22;
      if (!*(unsigned char *)(*v22 + 224 * v20 + 75)) {
        uint64_t v21 = (const char *)v23;
      }
      if (!strcmp("1", v21)) {
        break;
      }
      if (!strcmp("2", v21))
      {
        char v25 = 3;
        goto LABEL_22;
      }
      a3 = v22;
      if (!strcmp(".", v21))
      {
        char v25 = 2;
        goto LABEL_23;
      }
      uint64_t v10 = v27;
LABEL_24:
      unsigned __int16 v26 = v14 + 1;
      int v14 = (unsigned __int16)(v14 + 1);
      if (*(unsigned __int16 *)(v10 + 8) - 1 <= v26) {
        goto LABEL_29;
      }
    }
    char v25 = 4;
LABEL_22:
    a3 = v22;
LABEL_23:
    uint64_t v10 = v27;
    *(unsigned char *)(v24 + 224 * v20 + 73) = v25;
    goto LABEL_24;
  }
  unsigned int v28 = 0;
LABEL_29:
  heap_Free(*(void **)(a1 + 8), (uint64_t)v13);
  heap_Free(*(void **)(a1 + 8), v31);
  return v28;
}

uint64_t allocateFeatureVector(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a2;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a2, 128);
  *a4 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), v8, 8);
  *a3 = v14;
  if (!v14)
  {
    heap_Free(*(void **)(a1 + 8), *a4);
    *a4 = 0;
LABEL_8:
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v10, v11, v12, v13, v17);
    return 2315264010;
  }
  if (a2)
  {
    uint64_t v15 = 0;
    do
    {
      *(void *)(*a3 + 8 * v15) = *a4 + (v15 << 7);
      ++v15;
    }
    while (v15 != v8);
  }
  return 0;
}

uint64_t traceFeatureVector(uint64_t a1, uint64_t *a2, uint64_t a3, const char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (unsigned __int16)(*(unsigned __int8 *)(a2[1] + 1296) - 1);
  if (v11 >= 2)
  {
    uint64_t v12 = 8 * v11;
    uint64_t v13 = 8;
    do
    {
      *(_WORD *)&(*a4)[strlen(*a4)] = 32;
      strcat((char *)*a4, a4[(unint64_t)v13 / 8]);
      v13 += 8;
    }
    while (v12 != v13);
  }
  return log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"traceFeatureVector %s [%02d] %-16s | %-44s | %s %s", a6, a7, a8, *a2);
}

uint64_t twoPassIgtreePhrasing(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (*(unsigned __int16 *)(a2 + 8) < 2u) {
    return 0;
  }
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  unsigned __int16 v11 = *(unsigned __int8 *)(a5[8] + 1296) - 1;
  uint64_t v12 = a5[15];
  if (v12)
  {
    int v13 = *(unsigned __int8 *)(v12 + 1296) - 1;
    if (v13 > v11) {
      unsigned __int16 v11 = v13;
    }
  }
  unsigned int v60 = 0;
  int v14 = allocateFeatureVector(a1, v11, (uint64_t *)&v60, &v59);
  if (v14 < 0) {
    return v14 | 0x8A002000;
  }
  __int16 v15 = *(unsigned __int8 *)(a5[8] + 1296);
  a5[12] = (uint64_t)a3;
  a5[13] = a4;
  unsigned int v16 = *(unsigned __int16 *)(v9 + 8);
  uint64_t v50 = v9;
  uint64_t v51 = a3;
  if (v16 < 2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v49 = a4;
    uint64_t v54 = v10;
    int v17 = 0;
    unsigned int v56 = 0;
    uint64_t v18 = v60;
    uint64_t v52 = (unsigned __int16)(v15 - 1);
    do
    {
      uint64_t v19 = *(void *)v9 + 32 * (unsigned __int16)v17;
      if (*(_DWORD *)(v19 + 4) != 2 || *(_DWORD *)(*(void *)v9 + 32 * (v17 + 1) + 4) != 2)
      {
        unsigned __int16 v20 = *(_WORD *)(v19 + 2) - 1;
        if (v52)
        {
          for (uint64_t i = 0; i != v52; ++i)
            (*(void (**)(uint64_t *, void, const char *, uint64_t))(a5[9] + i * 8))(a5 + 7, v20, v18[i], 128);
        }
        unsigned int v56 = igtree_Process(a5[8], (uint64_t)v18, &v58);
        if ((v56 & 0x80000000) == 0)
        {
          uint64_t v24 = "?";
          if ((*(unsigned char *)(*v51 + 224 * v20 + 75) - 1) <= 3u) {
            uint64_t v24 = off_2641085A8[(char)(*(unsigned char *)(*v51 + 224 * v20 + 75) - 1)];
          }
          uint64_t v25 = v58;
          traceFeatureVector(v54, a5 + 7, v20, v18, v58, (uint64_t)v24, v22, v23);
          uint64_t v26 = *v51 + 224 * v20;
          if (*(unsigned char *)(v26 + 75)) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = (const char *)v25;
          }
          if (!strcmp("+", v27)) {
            char v28 = 4;
          }
          else {
            char v28 = 2;
          }
          *(unsigned char *)(v26 + 73) = v28;
          uint64_t v9 = v50;
        }
      }
      unsigned __int16 v29 = v17 + 1;
      int v17 = (unsigned __int16)(v17 + 1);
      unsigned int v16 = *(unsigned __int16 *)(v9 + 8);
    }
    while ((int)(v16 - 1) > v29);
    uint64_t v10 = v54;
    a3 = v51;
    uint64_t v5 = v56;
    a4 = v49;
  }
  uint64_t v30 = a5[15];
  if (v30)
  {
    __int16 v31 = *(unsigned __int8 *)(v30 + 1296);
    a5[19] = (uint64_t)a3;
    a5[20] = a4;
    uint64_t v32 = v60;
    if (v16 >= 2)
    {
      unsigned int v57 = v5;
      uint64_t v55 = v10;
      int v33 = 0;
      uint64_t v53 = (unsigned __int16)(v31 - 1);
      do
      {
        uint64_t v34 = *(void *)v9 + 32 * (unsigned __int16)v33;
        if (*(_DWORD *)(v34 + 4) != 2 || *(_DWORD *)(*(void *)v9 + 32 * (v33 + 1) + 4) != 2)
        {
          uint64_t v35 = (unsigned __int16)(*(_WORD *)(v34 + 2) - 1);
          if (*(unsigned char *)(*a3 + 224 * v35 + 73) != 4 || *(unsigned char *)(*a3 + 224 * v35 + 75) != 4)
          {
            if (v53)
            {
              for (uint64_t j = 0; j != v53; ++j)
                (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(a5[16] + j * 8))(a5 + 14, v35, v32[j], 128);
            }
            unsigned int v57 = igtree_Process(a5[15], (uint64_t)v32, &v58);
            if ((v57 & 0x80000000) == 0)
            {
              uint64_t v39 = "?";
              uint64_t v40 = a3;
              if ((*(unsigned char *)(*a3 + 224 * v35 + 75) - 1) <= 3u) {
                uint64_t v39 = off_2641085C8[(char)(*(unsigned char *)(*a3 + 224 * v35 + 75) - 1)];
              }
              uint64_t v41 = v58;
              traceFeatureVector(v55, a5 + 14, v35, v32, v58, (uint64_t)v39, v37, v38);
              uint64_t v42 = *v40 + 224 * v35;
              int v44 = *(unsigned __int8 *)(v42 + 73);
              unsigned __int16 v43 = (char *)(v42 + 73);
              if (v44 != 4)
              {
                if (*(unsigned char *)(*v40 + 224 * v35 + 75)) {
                  uint64_t v45 = v39;
                }
                else {
                  uint64_t v45 = (const char *)v41;
                }
                if (!strcmp("+", v45)) {
                  char v46 = 3;
                }
                else {
                  char v46 = 2;
                }
                *unsigned __int16 v43 = v46;
              }
              uint64_t v9 = v50;
              a3 = v51;
            }
          }
        }
        unsigned __int16 v47 = v33 + 1;
        int v33 = (unsigned __int16)(v33 + 1);
      }
      while (*(unsigned __int16 *)(v9 + 8) - 1 > v47);
      uint64_t v10 = v55;
      uint64_t v5 = v57;
    }
  }
  else
  {
    uint64_t v32 = v60;
  }
  heap_Free(*(void **)(v10 + 8), (uint64_t)v32);
  heap_Free(*(void **)(v10 + 8), v59);
  return v5;
}

uint64_t threePassIgtreePhrasing(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = a2;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  int v10 = twoPassIgtreePhrasing(a1, a2, a3, a4, a5);
  if (v10 < 0) {
    return v10 | 0x8A002000;
  }
  uint64_t v38 = 0;
  int v10 = allocateFeatureVector(a1, (unsigned __int16)(*(unsigned __int8 *)(a5[22] + 1296) - 1), (uint64_t *)&v38, &v37);
  if (v10 < 0) {
    return v10 | 0x8A002000;
  }
  __int16 v11 = *(unsigned __int8 *)(a5[22] + 1296);
  a5[26] = (uint64_t)a3;
  a5[27] = a4;
  LODWORD(v12) = *(unsigned __int16 *)(v8 + 8);
  int v13 = v38;
  uint64_t v32 = a1;
  if (*(_WORD *)(v8 + 8))
  {
    unint64_t v14 = 0;
    int v15 = 0;
    unsigned int v34 = 0;
    uint64_t v33 = (unsigned __int16)(v11 - 1);
    uint64_t v31 = v8;
    while (1)
    {
      uint64_t v16 = *a3;
      uint64_t v17 = (unsigned __int16)(*(_WORD *)(*(void *)v8 + 32 * v14 + 2) - 1);
      if (*(_DWORD *)(*a3 + 224 * v17 + 216) == 2) {
        *(unsigned char *)(v16 + 224 * v17 + 73) = 4;
      }
      if (v12 - 1 == v15 || *(unsigned __int8 *)(v16 + 224 * v17 + 73) - 3 <= 1)
      {
        if (v33)
        {
          for (uint64_t i = 0; i != v33; ++i)
            (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(a5[23] + i * 8))(a5 + 21, v17, v13[i], 128);
        }
        unsigned int v34 = igtree_Process(a5[22], (uint64_t)v13, &v36);
        if ((v34 & 0x80000000) == 0)
        {
          uint64_t v35 = v36;
          if (*(void *)(*a3 + 224 * v17 + 120)) {
            uint64_t v21 = *(const char **)(*a3 + 224 * v17 + 120);
          }
          else {
            uint64_t v21 = "?";
          }
          traceFeatureVector(v32, a5 + 21, v17, v13, v36, (uint64_t)v21, v19, v20);
          uint64_t v22 = *a3 + 224 * v17;
          uint64_t v23 = *(void *)(v22 + 112);
          if (!*(void *)(v22 + 120)) {
            uint64_t v21 = (const char *)v35;
          }
          int v24 = strlen(v21);
          uint64_t v25 = (char *)heap_Realloc(*(uint64_t **)(v32 + 8), v23, (v24 + 1));
          if (!v25)
          {
            log_OutPublic(*(void *)(v32 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v26, v27, v28, v29, v31);
            return 2315264010;
          }
          *(void *)(*a3 + 224 * v17 + 112) = v25;
          strcpy(v25, v21);
          uint64_t v8 = v31;
        }
      }
      ++v14;
      unint64_t v12 = *(unsigned __int16 *)(v8 + 8);
      int v15 = v14;
      if (v14 >= v12) {
        goto LABEL_24;
      }
    }
  }
  unsigned int v34 = 0;
LABEL_24:
  heap_Free(*(void **)(v32 + 8), (uint64_t)v13);
  heap_Free(*(void **)(v32 + 8), v37);
  return v34;
}

uint64_t simplifiedTokenPhrasing(uint64_t a1, void *a2, void *a3, unsigned __int16 *a4)
{
  if (*((unsigned __int16 *)a2 + 4) >= 2u)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v20 = a4 + 186;
    uint64_t v18 = a4 + 188;
    uint64_t v19 = a2;
    uint64_t v6 = *a2;
    unsigned __int16 v7 = a4 + 196;
    uint64_t v8 = a4 + 194;
    uint64_t v9 = a4 + 192;
    do
    {
      *(_DWORD *)uint64_t v26 = 0;
      if (*(_DWORD *)(v6 + 32 * (unsigned __int16)v5 + 4) == 2)
      {
        uint64_t v10 = v6 + v4;
        if (*(_DWORD *)(v6 + v4 + 36) == 2)
        {
          uint64_t v25 = 0;
          uint64_t v24 = 0;
          int v23 = 0;
          uint64_t v11 = v6 + 32 * (unsigned __int16)v5;
          FLOATSUR_PLUS((_WORD *)&v25 + 2, v8, v7);
          FLOATSUR_PLUS(&v23, v9, (unsigned __int16 *)&v25 + 2);
          FLOATSUR_TIMES((_WORD *)&v25 + 2, (unsigned __int16 *)(v11 + 8), v9);
          FLOATSUR_TIMES(&v25, (unsigned __int16 *)(v10 + 40), v8);
          FLOATSUR_TIMES((_WORD *)&v24 + 2, (unsigned __int16 *)(v11 + 12), v7);
          FLOATSUR_PLUS(&v24, (unsigned __int16 *)&v25 + 2, (unsigned __int16 *)&v25);
          FLOATSUR_PLUS(&v24, (unsigned __int16 *)&v24, (unsigned __int16 *)&v24 + 2);
          FLOATSUR_DIV((_WORD *)&v25 + 2, (unsigned __int16 *)&v24, (unsigned __int16 *)&v23);
          FLOATSUR_TIMES_INT(v26, (unsigned __int16 *)&v25 + 2, 0xAu, 0);
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"bndVal[%d] = %d.%d (thisphraseWeight=%d.%d thisBndWeight=%d.%d nextphraseWeight=%d.%d)", v12, v13, v14, v5);
          if (FLOATSUR_LT(v26, v20))
          {
            a2 = v19;
            uint64_t v6 = *v19;
            *(unsigned char *)(*a3 + 224 * *(unsigned __int16 *)(*v19 + 32 * (unsigned __int16)v5 + 2) - 151) = 2;
          }
          else
          {
            BOOL v15 = FLOATSUR_LT(v26, v18);
            a2 = v19;
            uint64_t v6 = *v19;
            if (v15) {
              char v16 = 3;
            }
            else {
              char v16 = 4;
            }
            *(unsigned char *)(*a3 + 224 * *(unsigned __int16 *)(*v19 + 32 * (unsigned __int16)v5 + 2) - 151) = v16;
          }
        }
      }
      uint64_t v5 = (v5 + 1);
      v4 += 32;
    }
    while (*((unsigned __int16 *)a2 + 4) - 1 > (unsigned __int16)v5);
  }
  return 0;
}

uint64_t tryLoadingIgtreeModel(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  memset(v31, 0, sizeof(v31));
  *(void *)(a6 + 8) = 0;
  __s1 = 0;
  uint64_t v30 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = &byte_20D5A22AE;
  memset(v39, 0, sizeof(v39));
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  int Str = paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"langcode", &v30);
  if (Str < 0) {
    goto LABEL_11;
  }
  int Str = paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"fecfg", &v28);
  if (Str < 0) {
    goto LABEL_11;
  }
  char v32 = 0;
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  if (a8 == 1)
  {
    int Str = paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"voice", &__s1);
    if (Str < 0)
    {
LABEL_11:
      int v24 = Str;
      log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 3, 0, (uint64_t)"Could not assemble broker string for IGtree phrasing model %s", v17, v18, v19, a7);
      return v24 | 0x8A002000;
    }
    if (strstr(__s1, "uni"))
    {
      __s1 = 0;
    }
    else
    {
      __strcat_chk();
      __strcat_chk();
    }
  }
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  int Str = brokeraux_ComposeBrokerString(a5, &v32, 1, 1, v30, __s1, 0, (char *)v31, 0x80uLL);
  if (Str < 0) {
    goto LABEL_11;
  }
  if ((igtree_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, &v27, 2, (uint64_t)v31, (uint64_t)"IGTR", 1031, 0) & 0x80000000) != 0)
  {
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 3, 0, (uint64_t)"failed to read IGtree phrasing model data - going on without", v20, v21, v22, v26);
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = v27;
  }
  uint64_t result = 0;
  *(void *)(a6 + 8) = v23;
  return result;
}

char *BND_pos_current(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  char *__s1 = 0;
  uint64_t v6 = *(uint64_t **)(a1 + 40);
  if (*((unsigned __int16 *)v6 + 4) <= a2)
  {
    size_t v11 = a4 - 1;
    BOOL v15 = "%";
LABEL_8:
    uint64_t v14 = __s1;
    size_t v13 = v11;
    goto LABEL_9;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = v7 + 224 * a2;
  uint64_t v10 = *(void *)(v8 + 104);
  uint64_t v9 = (const char **)(v8 + 104);
  if (!v10)
  {
    BOOL v15 = *(const char **)(v7 + 224 * a2 + 88);
    if (!v15) {
      BOOL v15 = *(const char **)(*(void *)(v7 + 224 * a2 + 16) + 8
    }
                                                               * *(unsigned __int16 *)(*(void *)(a1 + 48) + 18));
    size_t v11 = a4 - 1;
    goto LABEL_8;
  }
  size_t v11 = a4 - 1;
  uint64_t v12 = strncat(__s1, "_", v11);
  strncat(v12, *v9, (int)(a4 - 2));
  size_t v13 = (int)(a4 - 2) - strlen(*v9);
  uint64_t v14 = __s1;
  BOOL v15 = "_";
LABEL_9:
  uint64_t result = strncat(v14, v15, v13);
  __s1[v11] = 0;
  return result;
}

char *BND_pos_prev(char *result, unsigned int a2, char *a3, unsigned int a4)
{
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(**((void **)result + 5) + 224 * a2 + 56);
  if (!v4 || (uint64_t v5 = v4 + 32 * *(unsigned __int16 *)(*((void *)result + 6) + 22), *(_DWORD *)(v5 + 4) != 1))
  {
    unsigned __int16 v7 = a2 - 1;
    return BND_pos_current((uint64_t)result, v7, a3, a4);
  }
  int v6 = *(unsigned __int16 *)(v5 + 8);
  if (!v6)
  {
LABEL_6:
    *(_WORD *)a3 = 37;
    return result;
  }
  unsigned __int16 v7 = v6 - 1;
  return BND_pos_current((uint64_t)result, v7, a3, a4);
}

char *BND_pos_next(uint64_t a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_pos_current(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

unint64_t BND_syn_boundary_current(unint64_t result, unsigned int a2, char *__s1, unsigned int a4)
{
  uint64_t v6 = *(unsigned __int16 *)(*(void *)(result + 48) + 24);
  char *__s1 = 0;
  unsigned __int16 v7 = *(uint64_t **)(result + 40);
  if (*((unsigned __int16 *)v7 + 4) <= a2)
  {
    return (unint64_t)strncat(__s1, "%", a4 - 1);
  }
  uint64_t v9 = *v7;
  for (unsigned __int16 i = a2; ; --i)
  {
    uint64_t v11 = *(void *)(v9 + 224 * i + 56);
    if (!v11)
    {
LABEL_9:
      if (!i) {
        goto LABEL_22;
      }
      continue;
    }
    if (*(_DWORD *)(v11 + 32 * v6) == 1) {
      break;
    }
    if (a2 <= i) {
      goto LABEL_9;
    }
    if (!i || *(_DWORD *)(v11 + 32 * v6 + 4) == 1) {
      goto LABEL_22;
    }
  }
  uint64_t v12 = *(const char **)(v11 + 32 * v6 + 16);
  uint64_t result = strcmp(v12, "O");
  if (!result)
  {
LABEL_22:
    *(_WORD *)__s1 = 79;
    return result;
  }
  if (a2 == i) {
    char v13 = 66;
  }
  else {
    char v13 = 73;
  }
  char *__s1 = v13;
  *(_WORD *)(__s1 + 1) = 45;
  uint64_t v14 = strncat(__s1, v12, (int)(a4 - 3));
  __s1[a4 - 1] = 0;
  uint64_t result = strlen(v14);
  if (result >= 5 && __s1[result - 2] == 45 && __s1[result - 1] == 80) {
    __s1[result - 2] = 0;
  }
  return result;
}

unint64_t BND_syn_boundary_prev(unint64_t result, unsigned int a2, char *a3, unsigned int a4)
{
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(**(void **)(result + 40) + 224 * a2 + 56);
  if (!v4 || (uint64_t v5 = v4 + 32 * *(unsigned __int16 *)(*(void *)(result + 48) + 22), *(_DWORD *)(v5 + 4) != 1))
  {
    unsigned __int16 v7 = a2 - 1;
    return BND_syn_boundary_current(result, v7, a3, a4);
  }
  int v6 = *(unsigned __int16 *)(v5 + 8);
  if (!v6)
  {
LABEL_6:
    *(_WORD *)a3 = 37;
    return result;
  }
  unsigned __int16 v7 = v6 - 1;
  return BND_syn_boundary_current(result, v7, a3, a4);
}

unint64_t BND_syn_boundary_next(unint64_t a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_syn_boundary_current(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

char *BND_orth_uni200(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  char *__s1 = 0;
  int v6 = *(uint64_t **)(a1 + 40);
  if (*((unsigned __int16 *)v6 + 4) <= a2)
  {
    uint64_t v11 = a4;
    size_t v13 = a4 - 1;
    BOOL v15 = "%";
LABEL_5:
    uint64_t v14 = __s1;
    goto LABEL_6;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = v7 + 224 * a2;
  uint64_t v10 = *(void *)(v8 + 104);
  uint64_t v9 = (const char **)(v8 + 104);
  if (v10)
  {
    uint64_t v11 = a4;
    uint64_t v12 = strncat(__s1, "_", a4 - 1);
    strncat(v12, *v9, (int)(a4 - 2));
    size_t v13 = (int)(a4 - 2) - strlen(*v9);
    uint64_t v14 = __s1;
    BOOL v15 = "_";
LABEL_6:
    uint64_t result = strncat(v14, v15, v13);
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)(v7 + 224 * a2 + 16);
  uint64_t v19 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 16);
  uint64_t v20 = *(const char **)(v18 + 8 * v19);
  if (!v20)
  {
    uint64_t v11 = a4;
    size_t v13 = a4 - 1;
    BOOL v15 = "?";
    goto LABEL_5;
  }
  size_t v21 = strlen(*(const char **)(v18 + 8 * v19));
  uint64_t v11 = a4;
  uint64_t v22 = strncat(__s1, " ", a4 - 1);
  uint64_t v23 = strncat(v22, v20, (int)(a4 - 2));
  strncat(v23, " ", a4 - v21 - 2);
  if (v21 >= 2)
  {
    int v24 = __s1[1];
    if (v24 != 32)
    {
      uint64_t v25 = __s1 + 2;
      do
      {
        if ((v24 - 91) >= 0xFFFFFFE6) {
          *(v25 - 1) = v24 | 0x60;
        }
        int v26 = *v25++;
        int v24 = v26;
      }
      while (v26 != 32);
    }
  }
  uint64_t result = strstr(*(char **)(a1 + 24), __s1);
  if (!result)
  {
    char *__s1 = 0;
    BOOL v15 = "?";
    uint64_t v14 = __s1;
    size_t v13 = a4 - 1;
    goto LABEL_6;
  }
  if (v21)
  {
    int v27 = 0;
    uint64_t v28 = __s1 + 1;
    do
    {
      *(v28 - 1) = *v28;
      ++v27;
      ++v28;
    }
    while (v21 > (unsigned __int16)v27);
  }
  __s1[v21] = 0;
LABEL_7:
  __s1[v11 - 1] = 0;
  return result;
}

char *BND_orth_uni200_next(uint64_t a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_orth_uni200(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

char *BND_punct_current(char *result, unsigned int a2, char *__s1, unsigned int a4)
{
  unsigned int v4 = a4;
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v6 = *(unsigned char **)(*(void *)(**((void **)result + 5) + 224 * a2 + 16)
                 + 8 * *(unsigned __int16 *)(*((void *)result + 6) + 16));
  char *__s1 = 0;
  if (v6)
  {
    LOBYTE(v7) = *v6;
    if (*v6)
    {
      uint64_t v8 = 0;
      int v9 = 0;
      do
      {
        uint64_t result = strchr(__s, (char)v7);
        if (result)
        {
          int v9 = 1;
          uint64_t result = strncat(__s1, &v6[v8], 1uLL);
          --v4;
        }
        else
        {
          if (v9 == 1 || !v8) {
            uint64_t result = strncat(__s1, "_", (unsigned __int16)--v4);
          }
          int v9 = 0;
        }
        int v7 = v6[++v8];
      }
      while (v7);
    }
  }
  else
  {
    return strncat(__s1, "?", a4 - 1);
  }
  return result;
}

uint64_t BND_phr1_dist(uint64_t result, int a2, _WORD *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    uint64_t result = bnd_dist(result, a2, 4);
    if (result >= 2) {
      char v5 = 2;
    }
    else {
      char v5 = result;
    }
    *a3 = v5 | 0x30;
  }
  return result;
}

uint64_t BND_phr1_dist3(uint64_t result, int a2, _WORD *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    uint64_t result = bnd_dist(result, a2, 4);
    if (result >= 3) {
      char v5 = 3;
    }
    else {
      char v5 = result;
    }
    *a3 = v5 | 0x30;
  }
  return result;
}

uint64_t BND_phr1_dist3_fwd(uint64_t result, unsigned int a2, unsigned char *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    unsigned int v4 = *(uint64_t **)(result + 40);
    unsigned int v5 = *((unsigned __int16 *)v4 + 4);
    if (v5 <= a2)
    {
      char v12 = 0;
    }
    else
    {
      unsigned int v6 = 0;
      uint64_t v7 = *v4;
      while (1)
      {
        uint64_t v8 = v7 + 224 * (unsigned __int16)a2;
        uint64_t v9 = *(void *)(v8 + 56);
        if (v9)
        {
          uint64_t v10 = *(unsigned __int16 *)(*(void *)(result + 48) + 22);
          if (*(_DWORD *)(v9 + 32 * v10) == 1)
          {
            LOWORD(a2) = *(_WORD *)(v9 + 32 * v10 + 10);
            uint64_t v8 = v7 + 224 * (unsigned __int16)a2;
          }
        }
        if (*(unsigned char *)(v8 + 73) == 4 || v5 - 1 == (unsigned __int16)a2) {
          break;
        }
        char v12 = v6 + 1;
        LOWORD(a2) = a2 + 1;
        if (v5 > (unsigned __int16)a2 && v6++ < 2) {
          continue;
        }
        goto LABEL_17;
      }
      char v12 = v6;
    }
LABEL_17:
    *a3 = v12 + 48;
    a3[1] = 0;
  }
  return result;
}

uint64_t BND_phr2_dist(uint64_t result, int a2, _WORD *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    uint64_t result = bnd_dist(result, a2, 3);
    if (result >= 2) {
      char v5 = 2;
    }
    else {
      char v5 = result;
    }
    *a3 = v5 | 0x30;
  }
  return result;
}

uint64_t BND_bnd1_dist_min_passed(uint64_t result, int a2, char *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    uint64_t result = bnd_dist(result, a2, 4);
    if (*(_DWORD *)(v5 + 32) >= result) {
      char v6 = 45;
    }
    else {
      char v6 = 43;
    }
    *a3 = v6;
    a3[1] = 0;
  }
  return result;
}

char *BND_trailpunct(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = *(const char **)(*(void *)(**(void **)(a1 + 40) + 224 * a2 + 16)
                      + 8 * *(unsigned __int16 *)(*(void *)(a1 + 48) + 16));
  char *__s1 = 0;
  if (v6 && (size_t v7 = strlen(v6), *v6))
  {
    uint64_t v8 = &v6[v7 - 1];
    *(_WORD *)&__s1[strlen(__s1)] = 95;
    uint64_t result = strchr(__s, *v8);
    if (result) {
      return strncat(__s1, v8, 1uLL);
    }
  }
  else
  {
    return strncat(__s1, "?", a4 - 1);
  }
  return result;
}

char *BND_doc_class(char *result, unsigned int a2, char *__s1, unsigned int a4)
{
  uint64_t v4 = **((void **)result + 5);
  char *__s1 = 0;
  if (a4 >= 2)
  {
    uint64_t v5 = *(const char **)(v4 + 224 * a2 + 152);
    if (v5) {
      char v6 = v5;
    }
    else {
      char v6 = "%";
    }
    return strncat(__s1, v6, a4 - 1);
  }
  return result;
}

size_t BND_doc_punc(size_t result, unsigned int a2, char *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    __n_2[11] = v4;
    __n_2[12] = v5;
    char v6 = a3;
    if (*(unsigned __int16 *)(*(void *)(result + 40) + 8) <= a2)
    {
LABEL_42:
      *(_WORD *)char v6 = 37;
      return result;
    }
    int v8 = 0;
    __n_2[0] = 0;
    unsigned __int16 __n = 0;
    *a3 = 0;
    uint64_t v9 = *(uint64_t **)(result + 40);
    uint64_t v10 = *v9;
    if (*((unsigned __int16 *)v9 + 4) - 1 > (int)a2)
    {
      int v8 = 0;
      if (hlp_NLUStrFind(*(char **)(v10 + 224 * a2 + 384), "S_PUNC", (uint64_t *)__n_2, &__n))
      {
        do
        {
          if (v8 && v8 + 1 < a4)
          {
            *(_WORD *)&v6[strlen(v6)] = 59;
            int v8 = (unsigned __int16)(v8 + 1);
          }
          if (v8 + 7 < a4)
          {
            *(void *)&v6[strlen(v6)] = 0x3A434E55505F53;
            int v8 = (unsigned __int16)(v8 + 7);
          }
          uint64_t v12 = __n;
          unsigned int v13 = v8 + __n;
          if (v13 < a4)
          {
            strncat(v6, __n_2[0], __n);
            int v8 = (unsigned __int16)v13;
            uint64_t v12 = __n;
          }
        }
        while (hlp_NLUStrFind((char *)&__n_2[0][v12], "S_PUNC", (uint64_t *)__n_2, &__n));
      }
    }
    uint64_t v14 = v10 + 224 * a2;
    char v16 = *(char **)(v14 + 160);
    BOOL v15 = (char **)(v14 + 160);
    if (hlp_NLUStrFind(v16, "I_PUNC", (uint64_t *)__n_2, &__n))
    {
      do
      {
        if (v8 && v8 + 1 < a4)
        {
          *(_WORD *)&v6[strlen(v6)] = 59;
          int v8 = (unsigned __int16)(v8 + 1);
        }
        if (v8 + 7 < a4)
        {
          *(void *)&v6[strlen(v6)] = 0x3A434E55505F49;
          int v8 = (unsigned __int16)(v8 + 7);
        }
        uint64_t v17 = __n;
        unsigned int v18 = v8 + __n;
        if (v18 < a4)
        {
          strncat(v6, __n_2[0], __n);
          int v8 = (unsigned __int16)v18;
          uint64_t v17 = __n;
        }
      }
      while (hlp_NLUStrFind((char *)&__n_2[0][v17], "I_PUNC", (uint64_t *)__n_2, &__n));
    }
    if (hlp_NLUStrFind(*v15, "S_PUNC", (uint64_t *)__n_2, &__n))
    {
      do
      {
        if (v8 && v8 + 1 < a4)
        {
          *(_WORD *)&v6[strlen(v6)] = 59;
          int v8 = (unsigned __int16)(v8 + 1);
        }
        if (v8 + 7 < a4)
        {
          *(void *)&v6[strlen(v6)] = 0x3A434E55505F49;
          int v8 = (unsigned __int16)(v8 + 7);
        }
        uint64_t v19 = __n;
        unsigned int v20 = v8 + __n;
        if (v20 < a4)
        {
          strncat(v6, __n_2[0], __n);
          int v8 = (unsigned __int16)v20;
          uint64_t v19 = __n;
        }
      }
      while (hlp_NLUStrFind((char *)&__n_2[0][v19], "S_PUNC", (uint64_t *)__n_2, &__n));
    }
    for (uint64_t result = (size_t)hlp_NLUStrFind(*v15, "E_PUNC", (uint64_t *)__n_2, &__n);
          result;
          uint64_t result = (size_t)hlp_NLUStrFind((char *)&__n_2[0][v21], "E_PUNC", (uint64_t *)__n_2, &__n))
    {
      if (v8 && v8 + 1 < a4)
      {
        *(_WORD *)&v6[strlen(v6)] = 59;
        int v8 = (unsigned __int16)(v8 + 1);
      }
      if (v8 + 7 < a4)
      {
        *(void *)&v6[strlen(v6)] = 0x3A434E55505F45;
        int v8 = (unsigned __int16)(v8 + 7);
      }
      uint64_t v21 = __n;
      unsigned int v22 = v8 + __n;
      if (v22 < a4)
      {
        strncat(v6, __n_2[0], __n);
        int v8 = (unsigned __int16)v22;
        uint64_t v21 = __n;
      }
    }
    if (!v8)
    {
      uint64_t result = strlen(v6);
      v6 += result;
      goto LABEL_42;
    }
  }
  return result;
}

char *BND_orth(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  char *__s1 = 0;
  char v6 = *(uint64_t **)(a1 + 40);
  if (*((unsigned __int16 *)v6 + 4) <= a2)
  {
    size_t v11 = a4 - 1;
    BOOL v15 = "%";
LABEL_5:
    uint64_t v14 = __s1;
    size_t v13 = v11;
    goto LABEL_6;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = v7 + 224 * a2;
  uint64_t v10 = *(void *)(v8 + 104);
  uint64_t v9 = (const char **)(v8 + 104);
  if (v10)
  {
    size_t v11 = a4 - 1;
    uint64_t v12 = strncat(__s1, "_", v11);
    strncat(v12, *v9, (int)(a4 - 2));
    size_t v13 = (int)(a4 - 2) - strlen(*v9);
    uint64_t v14 = __s1;
    BOOL v15 = "_";
LABEL_6:
    uint64_t result = strncat(v14, v15, v13);
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)(v7 + 224 * a2 + 16);
  uint64_t v19 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 16);
  unsigned int v20 = *(unsigned __int8 **)(v18 + 8 * v19);
  if (!v20)
  {
    size_t v11 = a4 - 1;
LABEL_25:
    BOOL v15 = "?";
    goto LABEL_5;
  }
  int64_t v21 = strlen(*(const char **)(v18 + 8 * v19));
  uint64_t v22 = a4;
  size_t v11 = a4 - 1;
  strncat(__s1, " ", v11);
  if (v21 >= 1)
  {
    uint64_t v23 = &v20[v21];
    do
    {
      unsigned int v24 = Utf8_LengthInBytes(v20, 1);
      if (!utf8_BelongsToSet(0xAu, v20, 0, v24))
      {
        if (utf8_ToLower((char *)v20, 0, (uint64_t)v31))
        {
          size_t v25 = v11 - strlen(__s1);
          int v26 = v31;
          int v27 = __s1;
LABEL_16:
          strncat(v27, v26, v25);
          goto LABEL_17;
        }
        if (v22 - strlen(__s1) > v24)
        {
          size_t v25 = v24;
          int v27 = __s1;
          int v26 = (const char *)v20;
          goto LABEL_16;
        }
      }
LABEL_17:
      v20 += v24;
    }
    while (v20 < v23);
  }
  size_t v28 = strlen(__s1);
  strncat(__s1, " ", v11 - v28);
  uint64_t result = strstr(*(char **)(a1 + 24), __s1);
  if (!result)
  {
    char *__s1 = 0;
    goto LABEL_25;
  }
  if (v21)
  {
    int v29 = 0;
    uint64_t v30 = __s1 + 1;
    do
    {
      *(v30 - 1) = *v30;
      ++v29;
      ++v30;
    }
    while (v21 > (unint64_t)(unsigned __int16)v29);
  }
  __s1[v21] = 0;
LABEL_7:
  __s1[v11] = 0;
  return result;
}

char *BND_orth_next(uint64_t a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_orth(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

size_t BND_dummy(int a1, int a2, char *__s)
{
  size_t result = strlen(__s);
  *(_WORD *)&__s[result] = 63;
  return result;
}

uint64_t BND_bnd_type(uint64_t result, unsigned int a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(result + 40);
  if (*(unsigned __int16 *)(v3 + 8) <= a2)
  {
    LOBYTE(v5) = 37;
  }
  else
  {
    unsigned int v4 = *(unsigned __int8 *)(*(void *)v3 + 224 * a2 + 73);
    if (v4 > 4) {
      LOBYTE(v5) = 63;
    }
    else {
      unint64_t v5 = 0x53574E3F3FuLL >> (8 * v4);
    }
  }
  *a3 = v5;
  a3[1] = 0;
  return result;
}

size_t BND_phrase_type(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  char *__s1 = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(unsigned __int16 *)(v5 + 8) > a2 && (char v6 = *(const char **)(v5 + 40)) != 0 && *v6)
  {
    return (size_t)strncat(__s1, v6, a4 - 1);
  }
  else
  {
    size_t result = strlen(__s1);
    *(_WORD *)&__s1[result] = 37;
  }
  return result;
}

size_t BND_tn(size_t result, unsigned int a2, char *__s1, unsigned int a4)
{
  if (a4 >= 2)
  {
    if (*(unsigned __int16 *)(*(void *)(result + 40) + 8) <= a2)
    {
      *(_WORD *)__s1 = 37;
    }
    else
    {
      uint64_t v5 = 0;
      unsigned __int16 v6 = 0;
      char *__s1 = 0;
      do
      {
        uint64_t v7 = *(void *)(**(void **)(result + 40) + 224 * v6 + 56);
        if (v7)
        {
          uint64_t v8 = *(unsigned __int16 *)(*(void *)(result + 48) + 22);
          uint64_t v9 = *(const char **)(v7 + 32 * v8 + 16);
          if (v9)
          {
            if (*(_DWORD *)(v7 + 32 * v8) == 1)
            {
              uint64_t v10 = v7 + 32 * v8;
              if (*(unsigned __int16 *)(v10 + 10) >= a2 && *(unsigned __int16 *)(v10 + 8) <= a2)
              {
                unsigned __int16 v6 = a2;
                uint64_t v5 = v9;
              }
            }
          }
        }
        ++v6;
      }
      while (a2 >= v6);
      if (v5)
      {
        return (size_t)strncat(__s1, v5, a4 - 1);
      }
      else
      {
        size_t result = strlen(__s1);
        *(_WORD *)&__s1[result] = 37;
      }
    }
  }
  return result;
}

size_t BND_doc_punc_prev(size_t result, unsigned int a2, char *a3, unsigned int a4)
{
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(**(void **)(result + 40) + 224 * a2 + 56);
  if (!v4 || (uint64_t v5 = v4 + 32 * *(unsigned __int16 *)(*(void *)(result + 48) + 22), *(_DWORD *)(v5 + 4) != 1))
  {
    unsigned __int16 v7 = a2 - 1;
    return BND_doc_punc(result, v7, a3, a4);
  }
  int v6 = *(unsigned __int16 *)(v5 + 8);
  if (!v6)
  {
LABEL_6:
    *(_WORD *)a3 = 37;
    return result;
  }
  unsigned __int16 v7 = v6 - 1;
  return BND_doc_punc(result, v7, a3, a4);
}

size_t BND_doc_punc_next(size_t a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_doc_punc(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

uint64_t bnd_dist(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = **(void **)(a1 + 40);
    unsigned __int16 v4 = 1;
    do
    {
      LOWORD(a2) = a2 - 1;
      if (*(unsigned __int8 *)(v3 + 224 * (unsigned __int16)a2 + 73) == a3) {
        break;
      }
      uint64_t v5 = *(void *)(v3 + 224 * (unsigned __int16)a2 + 56);
      if (v5)
      {
        uint64_t v6 = v5 + 32 * *(unsigned __int16 *)(*(void *)(a1 + 48) + 22);
        if (*(_DWORD *)(v6 + 4) == 1) {
          LOWORD(a2) = *(_WORD *)(v6 + 8);
        }
      }
      ++v4;
    }
    while ((_WORD)a2);
  }
  else
  {
    return 1;
  }
  return v4;
}

uint64_t checkForExternalSildur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __int16 v14 = 0;
  __s1 = 0;
  __int16 v12 = 0;
  *a5 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, a4, 18, &v14);
  if ((v10 & 0x80000000) == 0)
  {
    if (v14)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(a1 + 176))(a2, a3, a4, 18, &__s1, &v12);
      if ((v10 & 0x80000000) == 0 && !strcmp(__s1, "external")) {
        *a5 = 1;
      }
    }
  }
  return v10;
}

BOOL doesWordEndInComma(const char *a1)
{
  BOOL result = 0;
  if (a1)
  {
    size_t v2 = strlen(a1);
    if (v2)
    {
      unsigned int v3 = a1[v2 - 1];
      BOOL v4 = v3 > 0x3B;
      uint64_t v5 = (1 << v3) & 0xC00100000000000;
      if (!v4 && v5 != 0) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t addWord(uint64_t a1, const char *a2, _DWORD *a3, const char *a4, uint64_t a5, uint64_t a6)
{
  if (!*(_WORD *)(a6 + 10))
  {
    uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), 1, 11200);
    *(void *)a6 = v18;
    if (v18)
    {
      uint64_t v12 = v18;
      *(_WORD *)(a6 + 10) = 50;
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)a6;
  if (*(unsigned __int16 *)(a6 + 8) >= *(unsigned __int16 *)(a6 + 10))
  {
    uint64_t v13 = heap_Realloc(*(uint64_t **)(a1 + 8), v12, 224 * *(unsigned __int16 *)(a6 + 10) + 11200);
    if (v13)
    {
      *(void *)a6 = v13;
      bzero((void *)(v13 + 224 * *(unsigned __int16 *)(a6 + 8)), 0x2BC0uLL);
      *(_WORD *)(a6 + 10) += 50;
      uint64_t v12 = *(void *)a6;
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v24 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v26);
    return v24;
  }
LABEL_7:
  *(_DWORD *)(v12 + 224 * *(unsigned __int16 *)(a6 + 8)) = *a3;
  uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), 1, (8 * *(unsigned __int16 *)(a5 + 72)) | 1);
  *(void *)(*(void *)a6 + 224 * *(unsigned __int16 *)(a6 + 8) + 16) = v19;
  if (!v19) {
    goto LABEL_11;
  }
  int v20 = strlen(a2);
  int64_t v21 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v20 + 1));
  *(void *)(*(void *)(*(void *)a6 + 224 * *(unsigned __int16 *)(a6 + 8) + 16)
            + 8 * *(unsigned __int16 *)(a5 + 16)) = v21;
  if (!v21) {
    goto LABEL_11;
  }
  strcpy(v21, a2);
  int v22 = strlen(a4);
  uint64_t v23 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v22 + 1));
  *(void *)(*(void *)a6 + 224 * *(unsigned __int16 *)(a6 + 8) + 8) = v23;
  if (!v23) {
    goto LABEL_11;
  }
  strcpy(v23, a4);
  uint64_t v24 = 0;
  ++*(_WORD *)(a6 + 8);
  return v24;
}

uint64_t addToken(uint64_t a1, unsigned __int16 *a2, const char *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *((unsigned __int16 *)a5 + 4);
  int v12 = *a2;
  if (*((_WORD *)a5 + 4))
  {
    int v13 = a6;
    uint64_t v15 = 0;
    unsigned __int16 v16 = 0;
    unsigned __int16 v17 = v11 + 1;
    uint64_t v18 = *a5;
    unsigned int v19 = a2[1];
    while (1)
    {
      unsigned int v20 = *(unsigned __int16 *)(v18 + v15);
      if (v12 == v20) {
        unsigned __int16 v17 = v16;
      }
      unsigned int v21 = *(unsigned __int16 *)(v18 + v15 + 2);
      if (v19 == v21) {
        break;
      }
      if (v19 >= v20 && v19 < v21) {
        break;
      }
      ++v16;
      int v12 = *a2;
      v15 += 224;
      if (224 * v11 == v15) {
        goto LABEL_14;
      }
    }
    if (v11 + 1 != v17)
    {
      uint64_t v29 = checkSpan(a1, a4, (uint64_t *)(v18 + 224 * v17 + 56));
      if ((v29 & 0x80000000) != 0) {
        return v29;
      }
      uint64_t v29 = checkSpan(a1, a4, (uint64_t *)(*a5 + v15 + 56));
      if ((v29 & 0x80000000) != 0) {
        return v29;
      }
      uint64_t v30 = *a5;
      uint64_t v31 = 224 * v17;
      uint64_t v32 = *(unsigned __int16 *)(a4 + 22);
      uint64_t v33 = *(void *)(*a5 + v31 + 56) + 32 * v32;
      *(_DWORD *)uint64_t v33 = 1;
      *(_WORD *)(v33 + 8) = v17;
      *(_WORD *)(v33 + 10) = v16;
      uint64_t v34 = *(void *)(v30 + v15 + 56) + 32 * v32;
      *(_DWORD *)(v34 + 4) = 1;
      *(_WORD *)(v34 + 8) = v17;
      int v35 = strlen(a3);
      uint64_t v36 = heap_Calloc(*(void **)(a1 + 8), 1, (v35 - 1));
      uint64_t v41 = *a5 + v31;
      unsigned int v42 = v17;
      *(void *)(*(void *)(v41 + 56) + 32 * *(unsigned __int16 *)(a4 + 22) + 16) = v36;
      if (v36)
      {
        unsigned __int16 v43 = (char *)v36;
        int v44 = a3 + 1;
        size_t v45 = strlen(a3 + 1);
        strncpy(v43, a3 + 1, v45 - 1);
        if (v13 != 1) {
          return 0;
        }
        uint64_t v46 = *(void *)(*a5 + 224 * v17 + 168);
        if (v46) {
          heap_Free(*(void **)(a1 + 8), v46);
        }
        int v47 = strlen(a3);
        uint64_t v48 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v47 + 1));
        *(void *)(*a5 + 224 * v17 + 168) = v48;
        if (v48)
        {
          strcpy(v48, "B-");
          size_t v49 = strlen(v44);
          strncpy((char *)(*(void *)(*a5 + 224 * v17 + 168) + 2), v44, v49 - 1);
          uint64_t v23 = 0;
          unsigned __int16 v50 = v17 + 1;
          if (v50 > v16) {
            return v23;
          }
          while (1)
          {
            int v51 = strlen(*(const char **)(*a5 + 224 * v42 + 168));
            uint64_t v52 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v51 + 1));
            uint64_t v53 = *a5;
            unsigned __int16 v54 = v50;
            *(void *)(*a5 + 224 * v50 + 168) = v52;
            if (!v52) {
              break;
            }
            strcpy(v52, *(const char **)(v53 + 224 * v42 + 168));
            uint64_t v23 = 0;
            **(unsigned char **)(*a5 + 224 * v50++ + 168) = 73;
            if ((unsigned __int16)(v54 + 1) > v16) {
              return v23;
            }
          }
        }
      }
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v37, v38, v39, v40, v56);
      return 2315264010;
    }
  }
LABEL_14:
  uint64_t v23 = 2315264000;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not resolve token positions (find start and end) : token=%s from=%d to=%d", a6, a7, a8, (uint64_t)a3);
  if (*((_WORD *)a5 + 4))
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    do
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"word[%d] %d,%d", v24, v25, v26, v28++);
      v27 += 224;
    }
    while (v28 < *((unsigned __int16 *)a5 + 4));
  }
  return v23;
}

uint64_t checkSpan(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*a3) {
    return 0;
  }
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, (32 * *(unsigned __int16 *)(a2 + 72)) | 1);
  if (v6)
  {
    uint64_t v11 = v6;
    uint64_t result = 0;
    *a3 = v11;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v7, v8, v9, v10, v12);
    return 2315264010;
  }
  return result;
}

uint64_t addTokenTag(uint64_t a1, unsigned int a2, char *__s, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = a2;
  if (!*(void *)(*a5 + 224 * a2 + 88) && !strcmp("UNK", __s))
  {
    unsigned __int16 v11 = strlen(*(const char **)(*(void *)(v9 + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a4 + 18)));
    unsigned int v12 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v11 + 1);
    uint64_t v17 = *a5;
    *(void *)(*a5 + 224 * v10 + 88) = v12;
    if (!v12)
    {
LABEL_7:
      uint64_t v20 = 2315264010;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, v22);
      return v20;
    }
    strcpy(v12, *(const char **)(*(void *)(v17 + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a4 + 18)));
  }
  int v18 = strlen(__s);
  unsigned int v19 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v18 + 1));
  *(void *)(*(void *)(*a5 + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a4 + 20)) = v19;
  if (!v19) {
    goto LABEL_7;
  }
  strcpy(v19, __s);
  return 0;
}

uint64_t addSynChunk(uint64_t a1, const char *a2, const char *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a4;
  unsigned int v11 = *(unsigned __int16 *)(a7 + 8);
  if (a4 <= a5 && v11 > a4 && v11 > a5)
  {
    uint64_t v19 = checkSpan(a1, a6, (uint64_t *)(*(void *)a7 + 224 * a4 + 56));
    if ((v19 & 0x80000000) != 0) {
      return v19;
    }
    uint64_t v19 = checkSpan(a1, a6, (uint64_t *)(*(void *)a7 + 224 * a5 + 56));
    if ((v19 & 0x80000000) != 0) {
      return v19;
    }
    unsigned int v20 = v9;
    uint64_t v21 = *(void *)a7;
    uint64_t v22 = *(unsigned __int16 *)(a6 + 24);
    uint64_t v23 = *(void *)(*(void *)a7 + 224 * v9 + 56) + 32 * v22;
    *(_DWORD *)uint64_t v23 = 1;
    *(_WORD *)(v23 + 8) = v9;
    *(_WORD *)(v23 + 10) = a5;
    uint64_t v24 = *(void *)(v21 + 224 * a5 + 56) + 32 * v22;
    *(_DWORD *)(v24 + 4) = 1;
    *(_WORD *)(v24 + 8) = v9;
    uint64_t v25 = *(void **)(a1 + 8);
    int v26 = strlen(a2);
    int v27 = v26;
    if (a3)
    {
      int v28 = strlen(a3);
      uint64_t v29 = (char *)heap_Calloc(v25, 1, (v27 + v28 + 1));
      *(void *)(*(void *)(*(void *)a7 + 224 * v20 + 56) + 32 * *(unsigned __int16 *)(a6 + 24) + 16) = v29;
      if (v29)
      {
        strcpy(v29, a2);
        strcat(*(char **)(*(void *)(*(void *)a7 + 224 * v20 + 56) + 32 * *(unsigned __int16 *)(a6 + 24) + 16), a3);
        return 0;
      }
    }
    else
    {
      uint64_t v34 = (char *)heap_Calloc(v25, 1, (v26 + 1));
      *(void *)(*(void *)(*(void *)a7 + 224 * v20 + 56) + 32 * *(unsigned __int16 *)(a6 + 24) + 16) = v34;
      if (v34)
      {
        strcpy(v34, a2);
        return 0;
      }
    }
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v30, v31, v32, v33, v35);
    return 2315264010;
  }
  uint64_t v13 = 2315264000;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"syntactic chunks out of order : fromWordIdx=%d toWordIdx=%d numWords=%d", a6, a7, a8, a4);
  return v13;
}

uint64_t addPHRRange(uint64_t a1, unsigned int a2, unsigned int a3, char *__s, void *a5)
{
  if (a2 > a3) {
    return 0;
  }
  unsigned __int16 v12 = a2;
  while (1)
  {
    int v13 = strlen(__s);
    uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), 1, (v13 + 3));
    *(void *)(*a5 + 224 * v12 + 80) = v14;
    if (!v14) {
      break;
    }
    uint64_t v19 = (char *)v14;
    if (!strcmp(__s, "O"))
    {
      strcpy(v19, __s);
    }
    else
    {
      unsigned int v20 = "I-";
      if (v12 == a2) {
        unsigned int v20 = "B-";
      }
      *(_WORD *)uint64_t v19 = *(_WORD *)v20;
      v19[2] = v20[2];
      strcat(*(char **)(*a5 + 224 * v12 + 80), __s);
    }
    *(_WORD *)(*a5 + 224 * v12++ + 4) = a2;
    if (a3 < v12) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v15, v16, v17, v18, v5);
  return 2315264010;
}

uint64_t addMSPOS(uint64_t a1, unsigned int a2, char *__s, uint64_t a4, void *a5)
{
  uint64_t v10 = *(void **)(a1 + 8);
  int v11 = strlen(__s);
  unsigned __int16 v12 = (char *)heap_Calloc(v10, 1, (v11 + 1));
  *(void *)(*(void *)(*a5 + 224 * a2 + 16) + 8 * *(unsigned __int16 *)(a4 + 18)) = v12;
  if (v12)
  {
    strcpy(v12, __s);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, v18);
    return 2315264010;
  }
}

uint64_t expandAndValidateCompounds(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  LODWORD(v3) = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t v8 = *a2;
      unsigned int v9 = *(char **)(*a2 + 224 * i + 96);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = *(_DWORD *)(a3 + 656);
      if (v10 == 1 || !v10 && (!strncmp(v9, "B-", 2uLL) || !strncmp(v9, "I-", 2uLL))) {
        goto LABEL_22;
      }
      int v11 = *(const char **)(a3 + 640);
      size_t v12 = strlen(v11);
      if (!strncmp(v9, v11, v12))
      {
        unint64_t v23 = i + 1;
        if (i + 1 != v3)
        {
          if (v23 >= v3) {
            goto LABEL_22;
          }
          uint64_t v24 = *(const char **)(v8 + 224 * v23 + 96);
          if (v24)
          {
            if (strncmp(v24, v11, v12)) {
              goto LABEL_22;
            }
          }
        }
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"single word cannot be a compound word : word index=%d compound tag=%s", v13, v14, v15, i);
      }
      else
      {
        if (i)
        {
          unsigned __int16 v16 = i;
          while (1)
          {
            uint64_t v17 = *(const char **)(v8 + 224 * v16 + 96);
            if (!v17 || !strncmp(v17, v11, v12)) {
              break;
            }
            if (!--v16) {
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          unsigned __int16 v16 = 0;
        }
        uint64_t v18 = v8 + 224 * v16;
        uint64_t v19 = *(void *)(v18 + 96);
        if (v19)
        {
          if (!strncmp(*(const char **)(v18 + 96), v11, v12))
          {
            strcat(v9, (const char *)(v19 + 1));
            goto LABEL_22;
          }
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"compound word has no beginning tag : word index=%d compound tag=%s", v20, v21, v22, i);
        }
        else
        {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no start word for internal compound word : word index=%d compound tag=%s", v13, v14, v15, i);
        }
      }
      heap_Free(*(void **)(a1 + 8), *(void *)(*a2 + 224 * i + 96));
      *(void *)(*a2 + 224 * i + 96) = 0;
LABEL_22:
      unint64_t v3 = *((unsigned __int16 *)a2 + 4);
    }
  }
  return 0;
}

uint64_t checkMSPOSForCompound(uint64_t a1, unsigned int a2, char *__s, uint64_t a4, void *a5)
{
  unint64_t v10 = 0;
  uint64_t CompoundAccent = 0;
  int v42 = 0;
  int v43 = 0;
  do
  {
    unint64_t v12 = v10;
    if (v10 >= *(unsigned __int16 *)(a4 + 360)) {
      return CompoundAccent;
    }
    if (*(_DWORD *)(*(void *)(a4 + 352) + 4 * v10) == 1)
    {
      unsigned int v13 = *(unsigned __int16 *)(*(void *)(*(void *)(a4 + 344) + 8 * v10) + 2);
      unsigned __int16 v14 = strlen(__s);
      uint64_t CompoundAccent = do_pcre_exec(a4, v13, __s, v14, 0, (uint64_t)&v43, v15, v16);
      if ((CompoundAccent & 0x80000000) != 0) {
        return CompoundAccent;
      }
      int v17 = v43;
    }
    else if (!strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * **(unsigned int **)(*(void *)(a4 + 344) + 8 * v10))), __s))
    {
      int v17 = 1;
      int v43 = 1;
    }
    else
    {
      int v17 = 0;
    }
    unint64_t v10 = v12 + 1;
  }
  while (!v17);
  if (v17 != 1) {
    return CompoundAccent;
  }
  uint64_t v18 = (unsigned __int16)v12;
  uint64_t v19 = 4;
  if (*(_DWORD *)(*(void *)(a4 + 352) + 4 * (unsigned __int16)v12) == 1) {
    uint64_t v19 = 8;
  }
  uint64_t v20 = (const char *)(*(void *)(a4 + 528)
                     + *(unsigned int *)(*(void *)(a4 + 536)
                                       + 4
                                       * *(unsigned int *)(*(void *)(*(void *)(a4 + 344)
                                                                     + 8 * (unsigned __int16)v12)
                                                         + v19)));
  if (strcmp(v20, *(const char **)(a4 + 640)))
  {
    LODWORD(v21) = a2;
    uint64_t v22 = *(void *)(*a5 + 224 * a2 + 96);
    if (v22)
    {
      heap_Free(*(void **)(a1 + 8), v22);
      *(void *)(*a5 + 224 * a2 + 96) = 0;
    }
    int v23 = strlen(v20);
    uint64_t v24 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v23 + 52));
    *(void *)(*a5 + 224 * a2 + 96) = v24;
    if (v24)
    {
      strcpy(v24, v20);
      goto LABEL_18;
    }
LABEL_25:
    uint64_t CompoundAccent = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v25, v26, v27, v28, v41);
    return CompoundAccent;
  }
  int v42 = 0;
  int v43 = 0;
  uint64_t CompoundAccent = getCompoundAccent(a4, __s, &v43, (_WORD *)&v42 + 1, &v42);
  if ((CompoundAccent & 0x80000000) != 0) {
    return CompoundAccent;
  }
  if (v43)
  {
    int v36 = strlen(v20);
    uint64_t v37 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v36 + (unsigned __int16)v42 - HIWORD(v42) + 2);
    *(void *)(*a5 + 224 * a2 + 96) = v37;
    if (!v37) {
      goto LABEL_25;
    }
    uint64_t v21 = a2;
    strcpy(v37, v20);
    uint64_t v38 = *(const char **)(*a5 + 224 * a2 + 96);
    *(_WORD *)&v38[strlen(v38)] = 45;
    strncat(*(char **)(*a5 + 224 * v21 + 96), &__s[HIWORD(v42)], (unsigned __int16)v42 - (unint64_t)HIWORD(v42));
  }
  else
  {
    LODWORD(v21) = a2;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no stress information on first word of compound word : word index=%d pos=%s", v33, v34, v35, a2);
    uint64_t v40 = 224 * a2;
    heap_Free(*(void **)(a1 + 8), *(void *)(*a5 + v40 + 96));
    *(void *)(*a5 + v40 + 96) = 0;
  }
LABEL_18:
  if (*(void *)(*a5 + 224 * v21 + 96))
  {
    uint64_t v32 = *(void *)(a1 + 32);
    if (*(_DWORD *)(*(void *)(a4 + 352) + 4 * v18) == 1) {
      log_OutText(v32, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"COMPOUND regex rule %d FIRED : SET \"%s\" -> \"%s\"", v29, v30, v31, *(unsigned __int16 *)(*(void *)(*(void *)(a4 + 344) + 8 * v18) + 2));
    }
    else {
      log_OutText(v32, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"COMPOUND normal rule FIRED : SET \"%s\" -> \"%s\"", v29, v30, v31, (uint64_t)__s);
    }
  }
  return CompoundAccent;
}

uint64_t insert_NLU_info(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  unsigned __int16 v10 = a3;
  __int16 v11 = a2;
  if (a2 == a3)
  {
    if (a2 + 1 == *((unsigned __int16 *)a6 + 4)) {
      unsigned __int16 v10 = a2 + 1;
    }
    else {
      unsigned __int16 v10 = a2;
    }
  }
  if (a2 >= v10) {
    return 0;
  }
  unsigned int v13 = a2;
  int v78 = v10 - 1;
  for (uint64_t i = 224 * a2 + 120; ; i += 224)
  {
    uint64_t v15 = *(const char **)a4;
    if (!*(void *)a4) {
      goto LABEL_12;
    }
    uint64_t v16 = *(void *)(*(void *)(*a6 + i - 104) + 8 * *(unsigned __int16 *)(a5 + 18));
    if (v16)
    {
      heap_Free(*(void **)(a1 + 8), v16);
      *(void *)(*(void *)(*a6 + i - 104) + 8 * *(unsigned __int16 *)(a5 + 18)) = 0;
      uint64_t v15 = *(const char **)a4;
    }
    int v17 = strlen(v15);
    uint64_t v18 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v17 + 1));
    *(void *)(*(void *)(*a6 + i - 104) + 8 * *(unsigned __int16 *)(a5 + 18)) = v18;
    if (!v18) {
      break;
    }
    strcpy(v18, *(const char **)a4);
LABEL_12:
    int v23 = *(const char **)(a4 + 8);
    if (v23)
    {
      uint64_t v24 = *(void *)(*a6 + i - 40);
      if (v24)
      {
        heap_Free(*(void **)(a1 + 8), v24);
        *(void *)(*a6 + i - 40) = 0;
        int v23 = *(const char **)(a4 + 8);
      }
      int v25 = strlen(v23);
      uint64_t v26 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v25 + 1));
      *(void *)(*a6 + i - 40) = v26;
      if (!v26) {
        break;
      }
      strcpy(v26, *(const char **)(a4 + 8));
      *(_WORD *)(*a6 + i - 116) = v11;
    }
    uint64_t v27 = *(const char **)(a4 + 16);
    if (v27) {
      BOOL v28 = v78 == v13;
    }
    else {
      BOOL v28 = 0;
    }
    if (v28)
    {
      if (!strcmp(*(const char **)(a4 + 16), "W"))
      {
        uint64_t v30 = *a6 + i;
        char v31 = 3;
      }
      else
      {
        if (strcmp(v27, "S"))
        {
          if (!strcmp(v27, "N")) {
            char v29 = 2;
          }
          else {
            char v29 = 1;
          }
          *(unsigned char *)(*a6 + i - 45) = v29;
          goto LABEL_31;
        }
        uint64_t v30 = *a6 + i;
        char v31 = 4;
      }
      *(unsigned char *)(v30 - 45) = v31;
    }
LABEL_31:
    uint64_t v32 = *(const char **)(a4 + 32);
    if (!v32) {
      goto LABEL_40;
    }
    if (!strcmp(*(const char **)(a4 + 32), "0"))
    {
      uint64_t v34 = *a6 + i;
LABEL_37:
      *(unsigned char *)(v34 - 46) = 0;
      goto LABEL_40;
    }
    if (!strcmp(v32, "1"))
    {
      uint64_t v34 = *a6 + i;
      char v35 = 1;
    }
    else
    {
      int v33 = strcmp(v32, "2");
      uint64_t v34 = *a6 + i;
      if (v33) {
        goto LABEL_37;
      }
      char v35 = 2;
    }
    *(unsigned char *)(v34 - 46) = v35;
LABEL_40:
    int v36 = *(const char **)(a4 + 56);
    if (v36)
    {
      uint64_t v37 = *(void *)(*a6 + i - 24);
      if (v37)
      {
        heap_Free(*(void **)(a1 + 8), v37);
        *(void *)(*a6 + i - 24) = 0;
        int v36 = *(const char **)(a4 + 56);
      }
      int v38 = strlen(v36);
      uint64_t v39 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v38 + 1));
      *(void *)(*a6 + i - 24) = v39;
      if (!v39) {
        break;
      }
      strcpy(v39, *(const char **)(a4 + 56));
      uint64_t v40 = heap_Calloc(*(void **)(a1 + 8), 1, 6);
      *(void *)(*a6 + i + 56) = v40;
      if (!v40) {
        break;
      }
      uint64_t v41 = v40;
      int v42 = strncmp(*(const char **)(a4 + 56), "B-", 2uLL);
      int v43 = "COMP]";
      if (!v42) {
        int v43 = "[COMP";
      }
      *(_DWORD *)uint64_t v41 = *(_DWORD *)v43;
      *(_WORD *)(v41 + 4) = *((_WORD *)v43 + 2);
    }
    int v44 = *(const char **)(a4 + 24);
    if (v44 && v78 == v13)
    {
      int v45 = strlen(v44);
      uint64_t v46 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(*a6 + i), (v45 + 1));
      if (!v46) {
        break;
      }
      *(void *)(*a6 + i) = v46;
      strcpy(v46, *(const char **)(a4 + 24));
    }
    int v47 = *(const char **)(a4 + 40);
    if (v47)
    {
      int v48 = strlen(v47);
      size_t v49 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(*a6 + i + 32), (v48 + 32) & 0xFFFFFFE0);
      if (!v49) {
        break;
      }
      *(void *)(*a6 + i + 32) = strcpy(v49, *(const char **)(a4 + 40));
    }
    unsigned __int16 v50 = *(const char **)(a4 + 48);
    if (v50)
    {
      int v51 = strlen(v50);
      uint64_t v52 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(*a6 + i + 40), (v51 + 32) & 0xFFFFFFE0);
      if (!v52) {
        break;
      }
      uint64_t v53 = v52;
      unsigned __int16 v54 = strcpy(v52, *(const char **)(a4 + 48));
      uint64_t v55 = *a6;
      *(void *)(*a6 + i + 40) = v54;
      if (i != 120 && strstr(v53, "S_PUNC")) {
        *(_DWORD *)(v55 + 224 * (v13 - 1) + 28) = 1;
      }
      if (strstr(v53, "E_PUNC")) {
        *(_DWORD *)(v55 + i - 92) = 1;
      }
      if (a7 == 1)
      {
        unsigned int v56 = *(char **)(a4 + 48);
        unsigned int v57 = strstr(v56, "S_PUNC:");
        if (v57)
        {
          uint64_t v58 = v57 + 7;
          uint64_t v59 = strchr(v57 + 7, 59);
          if (v59) {
            unsigned __int16 v60 = (_WORD)v59 - (_WORD)v58;
          }
          else {
            unsigned __int16 v60 = strlen(v58);
          }
          size_t v61 = v60;
          char v62 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v60 + 1);
          *(void *)(*a6 + i + 64) = v62;
          if (!v62) {
            break;
          }
          strncpy(v62, v58, v61);
          unsigned int v56 = *(char **)(a4 + 48);
        }
        unint64_t v63 = strstr(v56, "E_PUNC:");
        if (v63)
        {
          char v64 = v63 + 7;
          size_t v65 = strlen(v63 + 7);
          char v66 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v65 + 1);
          *(void *)(*a6 + i + 72) = v66;
          if (!v66) {
            break;
          }
          strcpy(v66, v64);
          unsigned int v56 = *(char **)(a4 + 48);
        }
        int v67 = strstr(v56, "X_PUNC:");
        if (v67)
        {
          char v68 = v67 + 7;
          size_t v69 = strlen(v67 + 7);
          char v70 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v69 + 1);
          *(void *)(*a6 + i + 80) = v70;
          if (!v70) {
            break;
          }
          strcpy(v70, v68);
        }
      }
    }
    uint64_t v71 = *(void *)(a4 + 72);
    if (v71)
    {
      *(void *)(*a6 + i + 16) = v71;
      uint64_t v72 = *(const char **)(a4 + 64);
      if (v72)
      {
        size_t v73 = strlen(v72);
        uint64_t v74 = (char *)heap_Alloc(*(void *)(a1 + 8), v73 + 1);
        *(void *)(*a6 + i + 8) = v74;
        if (!v74) {
          break;
        }
        strcpy(v74, *(const char **)(a4 + 64));
      }
    }
    if (v10 == (unsigned __int16)++v13) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v19, v20, v21, v22, v76);
  return 2315264010;
}

uint64_t resolvePHR(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  if (!*(_WORD *)(a4 + 8)) {
    return 0;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  do
  {
    if (v12)
    {
      unsigned __int16 v14 = (unsigned __int16 *)(*(void *)a4 + v12);
      if (!*((void *)v14 + 10))
      {
        uint64_t v15 = (v13 - 1);
        uint64_t v16 = *(const char **)(*(void *)a4 + 224 * v15 + 80);
        if (v16)
        {
          unint64_t v17 = *v14;
          if (v17 >= 2 && *(unsigned char *)(a1 + (v17 - 1)) == 95)
          {
            int v18 = strlen(v16);
            uint64_t v19 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v18 + 3));
            uint64_t v24 = *(void *)a4;
            *(void *)(*(void *)a4 + v12 + 80) = v19;
            if (!v19) {
              goto LABEL_86;
            }
            strcpy(v19, *(const char **)(v24 + 224 * v15 + 80));
            uint64_t v25 = *(void *)a4;
            uint64_t v26 = *(char **)(*(void *)a4 + v12 + 80);
            if (strcmp(v26, "O"))
            {
              *uint64_t v26 = 73;
              uint64_t v25 = *(void *)a4;
            }
            int v27 = strlen(*(const char **)(*(void *)(v25 + 224 * v15 + 16)
                                        + 8 * *(unsigned __int16 *)(a3 + 18)));
            BOOL v28 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v27 + 3));
            uint64_t v29 = *(void *)a4;
            uint64_t v30 = *(unsigned __int16 *)(a3 + 18);
            *(void *)(*(void *)(*(void *)a4 + v12 + 16) + 8 * v30) = v28;
            if (!v28)
            {
LABEL_86:
              uint64_t v106 = 2315264010;
              log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v20, v21, v22, v23, v108);
              return v106;
            }
            strcpy(v28, *(const char **)(*(void *)(v29 + 224 * v15 + 16) + 8 * v30));
            log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[1] set missing PHR on word : word index=%d to %s (also copy POS %s)", v31, v32, v33, v13);
          }
          else
          {
            int v34 = *(unsigned __int8 *)v16;
            if (v34 == 66)
            {
              int v45 = strlen(v16);
              uint64_t v46 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v45 + 3));
              uint64_t v47 = *(void *)a4;
              *(void *)(*(void *)a4 + v12 + 80) = v46;
              if (!v46) {
                goto LABEL_86;
              }
              strcpy(v46, *(const char **)(v47 + 224 * v15 + 80));
              **(unsigned char **)(*(void *)a4 + v12 + 80) = 73;
              int v48 = strlen(*(const char **)(*(void *)(*(void *)a4 + 224 * v15 + 16)
                                          + 8 * *(unsigned __int16 *)(a3 + 18)));
              size_t v49 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v48 + 3));
              uint64_t v50 = *(void *)a4;
              uint64_t v51 = *(unsigned __int16 *)(a3 + 18);
              *(void *)(*(void *)(*(void *)a4 + v12 + 16) + 8 * v51) = v49;
              if (!v49) {
                goto LABEL_86;
              }
              strcpy(v49, *(const char **)(*(void *)(v50 + 224 * v15 + 16) + 8 * v51));
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[3] set missing PHR on word : word index=%d to %s (also copy POS %s)", v52, v53, v54, v13);
            }
            else if (v34 == 79 || v34 == 73)
            {
              int v35 = strlen(v16);
              int v36 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v35 + 3));
              uint64_t v37 = *(void *)a4;
              *(void *)(*(void *)a4 + v12 + 80) = v36;
              if (!v36) {
                goto LABEL_86;
              }
              strcpy(v36, *(const char **)(v37 + 224 * v15 + 80));
              int v38 = strlen(*(const char **)(*(void *)(*(void *)a4 + 224 * v15 + 16)
                                          + 8 * *(unsigned __int16 *)(a3 + 18)));
              uint64_t v39 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v38 + 3));
              uint64_t v40 = *(void *)a4;
              uint64_t v41 = *(unsigned __int16 *)(a3 + 18);
              *(void *)(*(void *)(*(void *)a4 + v12 + 16) + 8 * v41) = v39;
              if (!v39) {
                goto LABEL_86;
              }
              strcpy(v39, *(const char **)(*(void *)(v40 + 224 * v15 + 16) + 8 * v41));
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[2] set missing PHR on word : word index=%d to %s (also copy POS %s)", v42, v43, v44, v13);
            }
          }
        }
      }
    }
    ++v13;
    unint64_t v55 = *(unsigned __int16 *)(a4 + 8);
    v12 += 224;
  }
  while (v13 < v55);
  if (!*(_WORD *)(a4 + 8)) {
    return 0;
  }
  unint64_t v56 = 0;
  uint64_t v57 = 80;
  do
  {
    if (!*(void *)(*(void *)a4 + v57))
    {
      if ((insert_NLU_info(a2, (unsigned __int16)v56, (unsigned __int16)(v56 + 1), (uint64_t)&unk_2641085E8, a3, (uint64_t *)a4, a5) & 0x80000000) != 0)
      {
        log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Failed to fill out PHR=B-NIL on word : word index=%d", a6, a7, a8, v56);
        return 2315264000;
      }
      LODWORD(v55) = *(unsigned __int16 *)(a4 + 8);
    }
    ++v56;
    v57 += 224;
  }
  while (v56 < v55);
  if (!v55) {
    return 0;
  }
  uint64_t v58 = 0;
  uint64_t v59 = (void *)(*(void *)a4 + 80);
  do
  {
    if (!*v59)
    {
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not work out PHR on word : word index=%d", a6, a7, a8, v58);
      return 2315264000;
    }
    ++v58;
    v59 += 28;
  }
  while (v55 != v58);
  uint64_t v60 = 0;
  unint64_t v61 = 0;
  uint64_t v62 = *(void *)a4;
  do
  {
    unint64_t v63 = *(char **)(v62 + v60 + 80);
    if (!strncmp(v63, "I-", 2uLL))
    {
      if (v60)
      {
        if (strcmp(*(const char **)(v62 + 224 * (v61 - 1) + 80), v63))
        {
          __strcpy_chk();
          __s2[0] = 66;
          uint64_t v67 = *(void *)a4;
          if (strcmp(*(const char **)(*(void *)a4 + 224 * (v61 - 1) + 80), __s2))
          {
            **(unsigned char **)(v67 + v60 + 80) = 66;
            log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v68, v69, v70, v61);
          }
        }
      }
      else
      {
        char *v63 = 66;
        log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v64, v65, v66, 0);
      }
    }
    uint64_t v62 = *(void *)a4;
    uint64_t v71 = *(const char **)(*(void *)a4 + v60 + 176);
    if (v71)
    {
      int v72 = strcmp(v71, "COMP]");
      if (v60)
      {
        if (!v72)
        {
          uint64_t v73 = v62 + 224 * (v61 - 1);
          uint64_t v74 = *(void *)(v73 + 176);
          if (v74)
          {
            if (!strcmp(*(const char **)(v73 + 176), "COMP]"))
            {
              heap_Free(*(void **)(a2 + 8), v74);
              uint64_t v62 = *(void *)a4;
              *(void *)(*(void *)a4 + 224 * (v61 - 1) + 176) = 0;
            }
          }
        }
      }
    }
    ++v61;
    v60 += 224;
  }
  while (v61 < *(unsigned __int16 *)(a4 + 8));
  if (!*(_WORD *)(a4 + 8)) {
    return 0;
  }
  int v75 = 0;
  do
  {
    unsigned int v76 = (unsigned __int16)v75;
    __strcpy_chk();
    if (*(unsigned __int16 *)__s2 == 11586) {
      __strcpy_chk();
    }
    uint64_t v80 = *(unsigned __int16 *)(a4 + 8);
    int v81 = v75;
    if (v80 > (unsigned __int16)v75)
    {
      uint64_t v82 = *(void *)a4 + 224 * (unsigned __int16)v75;
      uint64_t v83 = (unsigned __int16)v75;
      uint64_t v84 = (unsigned __int16 *)(v82 + 4);
      uint64_t v85 = (const char **)(v82 + 80);
      while (1)
      {
        uint64_t v86 = *v85;
        if (!*v85
          || strcmp(*v85, __s2)
          && (strlen(v86) < 3 || strcmp(v86 + 2, __s2) || strncmp(v86, "I-", 2uLL))
          && *((unsigned __int16 *)v85 - 38) != *v84)
        {
          break;
        }
        ++v83;
        v85 += 28;
        if (v80 == v83)
        {
          int v81 = v80;
          goto LABEL_62;
        }
      }
      int v81 = v83;
LABEL_62:
      unsigned int v76 = (unsigned __int16)v75;
    }
    int v87 = (unsigned __int16)v81 - 1;
    uint64_t v88 = (unsigned __int16)v75;
    if (v87 <= (unsigned __int16)v75) {
      goto LABEL_73;
    }
    int v109 = v81;
    int v89 = 0;
    int v90 = v75;
    unsigned __int16 v91 = v75;
    do
    {
      if (*(_DWORD *)(*(void *)a4 + 224 * (unsigned __int16)v90 + 28) == 1)
      {
        uint64_t v92 = v91;
        log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[1] add syn chunk %s%s from %d to %d", v77, v78, v79, (uint64_t)__s2);
        uint64_t v94 = addSynChunk(a2, __s2, "-P", v92, (unsigned __int16)v90, a3, a4, v93);
        if ((v94 & 0x80000000) != 0) {
          return v94;
        }
        ++v90;
        int v89 = 1;
        unsigned __int16 v91 = v90;
      }
      else
      {
        ++v90;
      }
    }
    while (v87 > (unsigned __int16)v90);
    unsigned int v76 = (unsigned __int16)v75;
    int v81 = v109;
    uint64_t v88 = (unsigned __int16)v75;
    if (v89)
    {
      if ((unsigned __int16)v109 <= v91) {
        goto LABEL_75;
      }
      uint64_t v95 = v91;
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[2] add syn chunk %s%s from %d to %d", v77, v78, v79, (uint64_t)__s2);
      unsigned int v97 = (unsigned __int16)v87;
      uint64_t v98 = a2;
      uint64_t v99 = "-P";
      uint64_t v100 = v95;
      int v81 = v109;
      unsigned int v76 = (unsigned __int16)v75;
    }
    else
    {
LABEL_73:
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[3] add syn chunk %s from %d to %d", v77, v78, v79, (uint64_t)__s2);
      unsigned int v97 = (unsigned __int16)v87;
      uint64_t v98 = a2;
      uint64_t v99 = 0;
      uint64_t v100 = v88;
    }
    uint64_t v94 = addSynChunk(v98, __s2, v99, v100, v97, a3, a4, v96);
    if ((v94 & 0x80000000) != 0) {
      return v94;
    }
LABEL_75:
    uint64_t v101 = *(void *)a4;
    *(_DWORD *)(*(void *)a4 + 224 * v76 + 44) = 1;
    uint64_t v102 = v101 + 224 * v87;
    *(_DWORD *)(v102 + 40) = 1;
    if (*(_DWORD *)(v102 + 28) == 1) {
      *(_DWORD *)(v101 + 224 * v76 + 32) = 1;
    }
    if ((unsigned __int16)v75 == (unsigned __int16)v81) {
      int v75 = v81 + 1;
    }
    else {
      int v75 = v81;
    }
  }
  while ((unsigned __int16)v75 < *(unsigned __int16 *)(a4 + 8));
  if (!*(_WORD *)(a4 + 8)) {
    return 0;
  }
  unint64_t v103 = 0;
  uint64_t v104 = *(void *)a4;
  uint64_t v105 = 80;
  do
  {
    heap_Free(*(void **)(a2 + 8), *(void *)(v104 + v105));
    uint64_t v106 = 0;
    uint64_t v104 = *(void *)a4;
    *(void *)(*(void *)a4 + v105) = 0;
    ++v103;
    v105 += 224;
  }
  while (v103 < *(unsigned __int16 *)(a4 + 8));
  return v106;
}

uint64_t addMarkerType(uint64_t a1, const char *a2, const char *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t *a7)
{
  uint64_t result = checkSpan(a1, a6, (uint64_t *)(*a7 + 224 * a4 + 56));
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = checkSpan(a1, a6, (uint64_t *)(*a7 + 224 * a5 + 56));
    if ((result & 0x80000000) == 0)
    {
      int v34 = a3;
      uint64_t v18 = *(unsigned __int16 *)(a6 + 74);
      if (v18 <= *(unsigned __int16 *)(a6 + 72)) {
        uint64_t v19 = *(unsigned __int16 *)(a6 + 72);
      }
      else {
        uint64_t v19 = *(unsigned __int16 *)(a6 + 74);
      }
      uint64_t v20 = 8 * v18;
      do
      {
        if (v19 == v18 || (uint64_t v21 = *(void *)(a6 + 528)) == 0)
        {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Ignoring marker :%s, as not in DEFMAPPING list", v15, v16, v17, (uint64_t)a2);
          return 0;
        }
        int v22 = strcmp((const char *)(v21+ *(unsigned int *)(*(void *)(a6 + 536)+ 4 * *(unsigned int *)(*(void *)(a6 + 64) + v20))), a2);
        ++v18;
        v20 += 8;
      }
      while (v22);
      uint64_t v23 = *a7;
      uint64_t v24 = (unsigned __int16)(v18 - 1);
      uint64_t v25 = *(void *)(*a7 + 224 * a4 + 56) + 32 * v24;
      *(_DWORD *)uint64_t v25 = 1;
      *(_WORD *)(v25 + 8) = a4;
      *(_WORD *)(v25 + 10) = a5;
      uint64_t v26 = *(void *)(v23 + 224 * a5 + 56) + 32 * v24;
      *(_DWORD *)(v26 + 4) = 1;
      *(_WORD *)(v26 + 8) = a4;
      int v27 = strlen(v34);
      BOOL v28 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v27 + 1));
      *(void *)(*(void *)(*a7 + 224 * a4 + 56) + 32 * v24 + 16) = v28;
      if (v28)
      {
        strcpy(v28, v34);
        return 0;
      }
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v33);
      return 2315264010;
    }
  }
  return result;
}

uint64_t createPOSString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, (2 * *(unsigned __int16 *)(a3 + 8)) | 1);
  *(void *)(a3 + 24) = v6;
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v11 = *(unsigned __int16 *)(a3 + 8);
  if (*(_WORD *)(a3 + 8))
  {
    int v12 = 0;
    unint64_t v13 = (uint64_t *)(*(void *)a3 + 16);
    do
    {
      uint64_t v14 = *v13;
      v13 += 28;
      v12 += strlen(*(const char **)(v14 + 8 * *(unsigned __int16 *)(a2 + 18))) + 1;
      --v11;
    }
    while (v11);
    uint64_t v15 = (unsigned __int16)v12 + 1;
  }
  else
  {
    uint64_t v15 = 1;
  }
  uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), 1, v15);
  *(void *)(a3 + 16) = v16;
  if (v16)
  {
    if (*(_WORD *)(a3 + 8))
    {
      unint64_t v17 = 0;
      int v18 = 0;
      uint64_t v19 = 16;
      do
      {
        uint64_t v20 = *(void *)(a3 + 16);
        *(_WORD *)(*(void *)(a3 + 24) + 2 * v17) = v18;
        uint64_t v21 = (void *)(v20 + (unsigned __int16)v18);
        size_t v22 = strlen(*(const char **)(*(void *)(*(void *)a3 + v19) + 8 * *(unsigned __int16 *)(a2 + 18)));
        memcpy(v21, *(const void **)(*(void *)(*(void *)a3 + v19) + 8 * *(unsigned __int16 *)(a2 + 18)), v22);
        int v23 = v18 + strlen(*(const char **)(*(void *)(*(void *)a3 + v19) + 8 * *(unsigned __int16 *)(a2 + 18)));
        unint64_t v24 = *(unsigned __int16 *)(a3 + 8);
        if ((int)v17 + 1 < v24)
        {
          *(_WORD *)(*(void *)(a3 + 16)
                   + (unsigned __int16)v23
                   + strlen((const char *)(*(void *)(a3 + 16) + (unsigned __int16)v23))) = 32;
          unint64_t v24 = *(unsigned __int16 *)(a3 + 8);
        }
        int v18 = v23 + 1;
        ++v17;
        v19 += 224;
      }
      while (v17 < v24);
    }
    return 0;
  }
  else
  {
LABEL_14:
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v7, v8, v9, v10, v26);
    return 2315264010;
  }
}

uint64_t getSyllCount(const char *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    size_t v2 = strlen(a1);
    if (!v2) {
      return 0;
    }
    unsigned __int16 v3 = v2;
    if (!strcmp(v1, "."))
    {
      return 0;
    }
    else
    {
      unsigned __int16 v4 = 1;
      uint64_t v5 = v3;
      if (v3)
      {
        do
        {
          int v6 = *(unsigned __int8 *)v1++;
          if (v6 == 46) {
            ++v4;
          }
          --v5;
        }
        while (v5);
      }
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t getPhonWeights(unsigned __int16 *a1)
{
  uint64_t v1 = a1[4];
  if (a1[4])
  {
    size_t v2 = (const char **)(*(void *)a1 + 24);
    do
    {
      *(_WORD *)size_t v2 = getSyllCount(*(v2 - 2));
      v2 += 28;
      --v1;
    }
    while (v1);
  }
  return 0;
}

uint64_t add2Str(uint64_t a1, const char **a2, _WORD *a3, char *__s)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = (unsigned __int16)*a3;
  uint64_t v10 = (char *)*a2;
  size_t v11 = strlen(*a2);
  if (v8 >= v9 - v11)
  {
    if ((unsigned __int16)(v8 - v9 + v11) <= 0x80u) {
      uint64_t v12 = 128;
    }
    else {
      uint64_t v12 = (unsigned __int16)(v8 - v9 + v11);
    }
    uint64_t v13 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v10, v9 + v12 + 1);
    if (!v13)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v19);
      return 2315264010;
    }
    uint64_t v10 = (char *)v13;
    *a2 = (const char *)v13;
    *a3 += v12;
  }
  if (*v10) {
    strcat(v10, __s);
  }
  else {
    strcpy(v10, __s);
  }
  return 0;
}

unsigned __int16 **setDomainOnWord(unsigned __int16 **result, unsigned int a2, unsigned int a3, int a4)
{
  if (*((_WORD *)result + 4))
  {
    unsigned __int16 v4 = *result;
    uint64_t v5 = *((unsigned __int16 *)result + 4) - 1;
    do
    {
      unsigned int v6 = *v4;
      if (v6 >= a2 && v4[1] <= a3) {
        *((_DWORD *)v4 + 13) = a4;
      }
      BOOL v7 = v6 > a3 || v5-- == 0;
      v4 += 112;
    }
    while (!v7);
  }
  return result;
}

unsigned __int16 **setPhoneticRange(unsigned __int16 **result, unsigned int a2, unsigned int a3)
{
  if (*((_WORD *)result + 4))
  {
    unsigned __int16 v3 = *result;
    uint64_t v4 = *((unsigned __int16 *)result + 4) - 1;
    do
    {
      unsigned int v5 = *v3;
      if (v5 >= a2 && v3[1] <= a3) {
        *((_DWORD *)v3 + 12) = 1;
      }
      BOOL v6 = v5 > a3 || v4-- == 0;
      v3 += 112;
    }
    while (!v6);
  }
  return result;
}

uint64_t printAsChunks(uint64_t result, const char **a2, _WORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"CHUNKS", a6, a7, a8, 0);
    if (*((_WORD *)a5 + 4))
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *a5;
        uint64_t v18 = *(void *)(*a5 + v15 + 56);
        if (v18 && *(_DWORD *)(v18 + 32 * *(unsigned __int16 *)(a4 + 24)) == 1)
        {
          uint64_t result = add2Str(*(void *)a4, a2, a3, "[");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = add2Str(*(void *)a4, a2, a3, *(char **)(*(void *)(*a5 + v15 + 56) + 32 * *(unsigned __int16 *)(a4 + 24) + 16));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = add2Str(*(void *)a4, a2, a3, " ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v17 = *a5;
        }
        uint64_t result = add2Str(*(void *)a4, a2, a3, *(char **)(*(void *)(v17 + v15 + 16) + 8 * *(unsigned __int16 *)(a4 + 16)));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = add2Str(*(void *)a4, a2, a3, "_");
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = add2Str(*(void *)a4, a2, a3, *(char **)(*(void *)(*a5 + v15 + 16) + 8 * *(unsigned __int16 *)(a4 + 18)));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = add2Str(*(void *)a4, a2, a3, " ");
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v19 = *(void *)(*a5 + v15 + 56);
        if (v19 && *(_DWORD *)(v19 + 32 * *(unsigned __int16 *)(a4 + 24) + 4) == 1)
        {
          uint64_t result = add2Str(*(void *)a4, a2, a3, "] ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v20, v21, v22, (uint64_t)*a2);
          **a2 = 0;
        }
        ++v16;
        v15 += 224;
      }
      while (v16 < *((unsigned __int16 *)a5 + 4));
    }
    log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v12, v13, v14, (uint64_t)*a2);
    uint64_t result = 0;
    **a2 = 0;
  }
  return result;
}

uint64_t printSent(uint64_t a1, int a2, const char **a3, char *a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  if (!a2) {
    return 0;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Sentence :%s", a6, a7, a8, a8);
  if (*(_WORD *)(a7 + 8))
  {
    uint64_t v15 = 0;
    unint64_t v16 = "tmphr=%4s ";
    if (a9 == 1) {
      unint64_t v16 = "%4s ";
    }
    uint64_t v41 = (char *)v16;
    while (1)
    {
      sprintf(a4, "[%2d] ", v15);
      uint64_t result = add2Str(a1, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v18 = 224 * v15;
      strncpy(a4, *(const char **)(*(void *)(*(void *)a7 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 16)), 0x14uLL);
      unsigned int v19 = (unsigned __int16)strlen(*(const char **)(*(void *)(*(void *)a7 + 224 * v15 + 16)
                                                    + 8 * *(unsigned __int16 *)(a6 + 16)));
      if (v19 <= 0x13)
      {
        do
        {
          *(_WORD *)&a4[strlen(a4)] = 32;
          BOOL v20 = v19++ >= 0x13;
        }
        while (!v20);
      }
      uint64_t result = add2Str(a1, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = add2Str(a1, a3, a5, " ");
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v21 = *(const char **)(*(void *)(*(void *)a7 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18));
      if (!v21) {
        uint64_t v21 = " ";
      }
      sprintf(a4, "%6s ", v21);
      uint64_t result = add2Str(a1, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v22 = *(void *)a7;
      if (*(void *)(*(void *)a7 + 224 * v15 + 80))
      {
        sprintf(a4, v41, *(void *)(*(void *)a7 + 224 * v15 + 80));
        uint64_t result = add2Str(a1, a3, a5, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v22 = *(void *)a7;
      }
      if (*(void *)(v22 + 224 * v15 + 88))
      {
        sprintf(a4, "retag=%4s ", *(const char **)(v22 + 224 * v15 + 88));
        uint64_t result = add2Str(a1, a3, a5, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v22 = *(void *)a7;
      }
      int v23 = *(const char **)(*(void *)(v22 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 20));
      if (!v23) {
        int v23 = " ";
      }
      sprintf(a4, "%6s ", v23);
      uint64_t result = add2Str(a1, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      strncpy(a4, *(const char **)(*(void *)a7 + v18 + 8), 0x14uLL);
      unsigned int v24 = (unsigned __int16)strlen(*(const char **)(*(void *)a7 + v18 + 8));
      if (v24 <= 0x13)
      {
        do
        {
          *(_WORD *)&a4[strlen(a4)] = 32;
          BOOL v20 = v24++ >= 0x13;
        }
        while (!v20);
      }
      uint64_t result = add2Str(a1, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if (*(_WORD *)(*(void *)a7 + 224 * v15 + 24))
      {
        sprintf(a4, "(nsyll=%d) ", *(unsigned __int16 *)(*(void *)a7 + 224 * v15 + 24));
        uint64_t result = add2Str(a1, a3, a5, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      if (a9 == 1)
      {
        uint64_t v28 = *(void *)a7;
        if (*(void *)(*(void *)a7 + 224 * v15 + 184))
        {
          sprintf(a4, "startDocPunc=%s ", *(const char **)(*(void *)a7 + 224 * v15 + 184));
          uint64_t result = add2Str(a1, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 192))
        {
          sprintf(a4, "endDocPunc=%s ", *(const char **)(v28 + 224 * v15 + 192));
          uint64_t result = add2Str(a1, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 200))
        {
          sprintf(a4, "singleDocPunc=%s ", *(const char **)(v28 + 224 * v15 + 200));
          uint64_t result = add2Str(a1, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 208))
        {
          sprintf(a4, "orthPunc=%s ", *(const char **)(v28 + 224 * v15 + 208));
          uint64_t result = add2Str(a1, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 168))
        {
          sprintf(a4, "tokTag=%s ", *(const char **)(v28 + 224 * v15 + 168));
          uint64_t result = add2Str(a1, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 176))
        {
          sprintf(a4, "compoundInfo=%s ");
          goto LABEL_72;
        }
      }
      else if (!a9)
      {
        uint64_t v29 = *(void *)a7;
        if (*(_DWORD *)(*(void *)a7 + 224 * v15 + 220))
        {
          uint64_t result = add2Str(a1, a3, a5, "DUMMYWORD ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 28))
        {
          uint64_t result = add2Str(a1, a3, a5, "_HASCOMMA ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 36))
        {
          uint64_t result = add2Str(a1, a3, a5, "_HASBNDBEFORESET ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 44))
        {
          uint64_t result = add2Str(a1, a3, a5, "_ISFIRSTINPHR ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 40))
        {
          uint64_t result = add2Str(a1, a3, a5, "_ISLASTINPHR ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 32))
        {
          uint64_t result = add2Str(a1, a3, a5, "_PHRENDSINCOMMA ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(void *)(v29 + 224 * v15 + 96))
        {
          sprintf(a4, "compoundTag=%s ", *(const char **)(v29 + 224 * v15 + 96));
          uint64_t result = add2Str(a1, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 52))
        {
          sprintf(a4, "domain=%s ");
LABEL_72:
          uint64_t result = add2Str(a1, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
      if (!*(_DWORD *)(*(void *)a7 + 224 * v15 + 48)
        || (uint64_t result = add2Str(a1, a3, a5, " bPHONETIC "), (result & 0x80000000) == 0))
      {
        if (a9 == 1 && *(_WORD *)(a6 + 72))
        {
          uint64_t v42 = a5;
          uint64_t v30 = 0;
          unint64_t v31 = 0;
          uint64_t v32 = 4;
          do
          {
            uint64_t v33 = *(void *)a7;
            uint64_t v34 = *(void *)(*(void *)a7 + 224 * v15 + 56);
            if (v34)
            {
              if (*(_DWORD *)(v34 + v30) != 1) {
                goto LABEL_85;
              }
              if (*(_DWORD *)(v34 + v30 + 24) == 1) {
                sprintf(a4, "<%s_%s_ext ");
              }
              else {
                sprintf(a4, "<%s_%s ");
              }
              uint64_t result = add2Str(a1, a3, v42, a4);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v33 = *(void *)a7;
              uint64_t v34 = *(void *)(*(void *)a7 + 224 * v15 + 56);
              if (v34)
              {
LABEL_85:
                uint64_t v35 = v34 + v30;
                if (*(_DWORD *)(v35 + 4) == 1)
                {
                  if (*(_DWORD *)(*(void *)(v33 + 224 * *(unsigned __int16 *)(v35 + 8) + 56) + v30 + 24) == 1) {
                    sprintf(a4, "%s_ext_%s> ");
                  }
                  else {
                    sprintf(a4, "%s_%s> ");
                  }
                  uint64_t result = add2Str(a1, a3, v42, a4);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                }
              }
            }
            ++v31;
            unint64_t v36 = *(unsigned __int16 *)(a6 + 72);
            v30 += 32;
            v32 += 8;
          }
          while (v31 < v36);
          if (*(void *)(*(void *)a7 + 224 * v15 + 64)) {
            BOOL v37 = v36 == 0;
          }
          else {
            BOOL v37 = 1;
          }
          a5 = v42;
          if (!v37)
          {
            unint64_t v38 = 0;
            uint64_t v39 = 4;
            do
            {
              uint64_t v40 = *(const char **)(*(void *)(*(void *)a7 + 224 * v15 + 64) + 8 * v38);
              if (v40)
              {
                snprintf(a4, 0x400uLL, "[%s %s] ", (const char *)(*(void *)(a6 + 528)+ *(unsigned int *)(*(void *)(a6 + 536)+ 4 * *(unsigned int *)(*(void *)(a6 + 64) + v39))), v40);
                uint64_t result = add2Str(a1, a3, v42, a4);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                LOWORD(v36) = *(_WORD *)(a6 + 72);
              }
              ++v38;
              v39 += 8;
            }
            while (v38 < (unsigned __int16)v36);
          }
        }
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v25, v26, v27, (uint64_t)*a3);
        uint64_t result = 0;
        **a3 = 0;
        if (++v15 < (unint64_t)*(unsigned __int16 *)(a7 + 8)) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

uint64_t printMSTree(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, const char *a5, unsigned int a6, const char **a7, char *a8, _WORD *a9, char *a10, unsigned __int16 a11)
{
  if (!a4) {
    return 0;
  }
  uint64_t v15 = a4;
  unint64_t v16 = a3;
  uint64_t v18 = a10;
  kbsymtab_ConsSymString(a3, *(__int16 *)(a4 + 16), a10, a11);
  if (a6)
  {
    int v19 = 0;
    *a8 = 0;
    do
    {
      strcat(a8, "  ");
      ++v19;
    }
    while (a6 > (unsigned __int16)v19);
    uint64_t result = add2Str(a1, a7, a9, a8);
    uint64_t v18 = a10;
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  uint64_t result = add2Str(a1, a7, a9, v18);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = add2Str(a1, a7, a9, "(");
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int __dst = v18;
  if (*(__int16 *)(v15 + 24) < 1)
  {
LABEL_18:
    uint64_t result = add2Str(a1, a7, a9, ")");
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (!*(void *)(v15 + 8))
    {
      unsigned __int16 v27 = strlen(a5);
      int v28 = *(_DWORD *)(v15 + 56);
      if (v28 > v27)
      {
        *(_DWORD *)(v15 + 56) = v27;
        int v28 = v27;
      }
      uint64_t v29 = *(int *)(v15 + 52);
      if ((int)v29 > v27
        || v28 > v27
        || (BOOL v30 = __OFSUB__(v28, v29), v31 = v28 - v29, (v31 < 0) ^ v30 | (v31 == 0)))
      {
        unint64_t v36 = "<ERROR>";
        uint64_t v33 = a1;
        uint64_t v34 = a7;
        uint64_t v35 = a9;
      }
      else
      {
        uint64_t v32 = strncpy(__dst, &a5[v29], (unsigned __int16)(v31 - 1));
        v32[(unsigned __int16)(*(_DWORD *)(v15 + 56) + ~*(_WORD *)(v15 + 52))] = 0;
        sprintf(a8, " <%s>", v32);
        uint64_t v33 = a1;
        uint64_t v34 = a7;
        uint64_t v35 = a9;
        unint64_t v36 = a8;
      }
      uint64_t result = add2Str(v33, v34, v35, v36);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v24, v25, v26, (uint64_t)*a7);
    **a7 = 0;
    uint64_t v40 = *(void **)(v15 + 8);
    if (v40)
    {
      uint64_t v44 = v16;
      do
      {
        if (a6 && v40 != *(void **)(v15 + 8))
        {
          uint64_t v41 = a5;
          int v42 = 0;
          *a8 = 0;
          do
          {
            strcat(a8, "  ");
            ++v42;
          }
          while (a6 > (unsigned __int16)v42);
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s,", v37, v38, v39, (uint64_t)a8);
          **a7 = 0;
          a5 = v41;
          unint64_t v16 = v44;
        }
        LOWORD(v43) = a11;
        uint64_t result = printMSTree(a1, a2, v16, v40, a5, (unsigned __int16)(a6 + 1), a7, a8, a9, __dst, v43);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = 0;
        uint64_t v40 = (void *)*v40;
      }
      while (v40);
      return result;
    }
    return 0;
  }
  unsigned int v21 = 0;
  uint64_t v22 = v15 + 26;
  uint64_t v46 = v15;
  while (1)
  {
    if (v21)
    {
      uint64_t result = add2Str(a1, a7, a9, ",");
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    int v23 = *(__int16 *)(v22 + 2 * v21);
    if (v23 < 0)
    {
      uint64_t result = mosyntkbsymtab_AtomSymString(a2, v16, -v23, __dst, a11);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = add2Str(a1, a7, a9, __dst);
      uint64_t v15 = v46;
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      sprintf(a8, "?%d", *(__int16 *)(v22 + 2 * v21));
      uint64_t result = add2Str(a1, a7, a9, a8);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    if (*(__int16 *)(v15 + 24) <= (__int16)++v21) {
      goto LABEL_18;
    }
  }
}

uint64_t getStartAndEndFromMSTree(uint64_t a1, _WORD *a2, _WORD *a3, _DWORD *a4)
{
  if (a1)
  {
    BOOL v7 = *(void **)(a1 + 8);
    if (v7)
    {
      do
      {
        getStartAndEndFromMSTree(v7, a2, a3, a4);
        BOOL v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      if (!*a4)
      {
        *a2 = *(_DWORD *)(a1 + 52);
        *a4 = 1;
      }
      *a3 = *(_DWORD *)(a1 + 56);
    }
  }
  return 0;
}

uint64_t addMSNode(uint64_t a1, char *__s, __int16 a3, __int16 a4, uint64_t a5)
{
  if (!*(_WORD *)(a5 + 8))
  {
    uint64_t v17 = heap_Calloc(*(void **)(a1 + 8), 1, 513);
    *(void *)a5 = v17;
    if (v17)
    {
      __int16 v16 = 32;
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v20 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v12, v13, v14, v15, v24);
    return v20;
  }
  uint64_t v10 = *(unsigned __int16 *)(a5 + 10);
  if (*(unsigned __int16 *)(a5 + 8) + 1 < v10) {
    goto LABEL_8;
  }
  uint64_t v11 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)a5, 16 * v10 + 257);
  if (!v11) {
    goto LABEL_10;
  }
  *(void *)a5 = v11;
  __int16 v16 = *(_WORD *)(a5 + 10) + 16;
LABEL_7:
  *(_WORD *)(a5 + 10) = v16;
LABEL_8:
  int v18 = strlen(__s);
  int v19 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v18 + 1));
  *(void *)(*(void *)a5 + 16 * *(unsigned __int16 *)(a5 + 8)) = v19;
  if (!v19) {
    goto LABEL_10;
  }
  strcpy(v19, __s);
  uint64_t v20 = 0;
  uint64_t v21 = *(unsigned __int16 *)(a5 + 8);
  uint64_t v22 = *(void *)a5 + 16 * v21;
  *(_WORD *)(v22 + 8) = a3;
  *(_WORD *)(v22 + 10) = a4;
  *(_DWORD *)(v22 + 12) = 1;
  *(_WORD *)(a5 + 8) = v21 + 1;
  return v20;
}

uint64_t printMSNodes(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  uint64_t result = log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", a6, a7, a8, a5);
  if (*(_WORD *)(a4 + 8))
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = *(void *)a4 + v14;
      __int16 v17 = *(_WORD *)(v16 + 10);
      uint64_t v18 = *(unsigned __int16 *)(v16 + 8);
      unsigned int v19 = (unsigned __int16)(v17 - v18);
      size_t v20 = v19 >= 0x3FF ? 1023 : v19;
      uint64_t result = (uint64_t)strncpy(a2, (const char *)(a3 + v18), v20);
      a2[v20] = 0;
      if (v8 == 1) {
        break;
      }
      if (*(_DWORD *)(*(void *)a4 + v14 + 12) == 1)
      {
        uint64_t v24 = *(void *)(a1 + 32);
        goto LABEL_10;
      }
LABEL_11:
      ++v15;
      v14 += 16;
      if (v15 >= *(unsigned __int16 *)(a4 + 8)) {
        return result;
      }
    }
    uint64_t v24 = *(void *)(a1 + 32);
LABEL_10:
    uint64_t result = log_OutText(v24, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%d [%d] %s : <%d - %d> <%s>", v21, v22, v23, v15);
    goto LABEL_11;
  }
  return result;
}

uint64_t validateMSNodes(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    unsigned __int16 v9 = 0;
    uint64_t v10 = *a2;
    while (2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = (int *)(*a2 + 12 + 16 * v9);
      while (1)
      {
        int v13 = *v12;
        v12 += 4;
        if (v13) {
          break;
        }
        if (++v11 >= v8) {
          goto LABEL_12;
        }
      }
      unsigned __int16 v14 = v11;
      do
        ++v14;
      while (v8 > v14 && !*(_DWORD *)(v10 + 16 * v14 + 12));
      if (v14 + 1 < v8
        && *(unsigned __int16 *)(v10 + 16 * (unsigned __int16)v11 + 10) != *(unsigned __int16 *)(v10 + 16 * v14 + 8))
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not extract from MS tree : node=%d", a6, a7, a8, (unsigned __int16)v11);
        return 2315264000;
      }
LABEL_12:
      unsigned __int16 v9 = v11 + 1;
      if (v8 > (unsigned __int16)(v11 + 1)) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t getWordIdxForMSPhr(uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4, _WORD *a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  if (a2[4])
  {
    unsigned int v8 = 0;
    unsigned __int16 v9 = (unsigned __int16 *)(*(void *)a2 + 2);
    unint64_t v10 = 1;
    while (*(unsigned __int16 *)(*(void *)a2 + 224 * v8) != a3)
    {
      ++v8;
      ++v10;
      v9 += 112;
      if (v8 >= a2[4]) {
        goto LABEL_5;
      }
    }
    *a5 = v8;
    *a6 = v8;
    LODWORD(v12) = a2[4];
    if (v8 >= v12)
    {
LABEL_12:
      uint64_t v11 = 2315264000;
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant match MS terminal node with end word : start position=%d start word=%d unknown end=%d", (uint64_t)a6, a7, a8, a3);
    }
    else
    {
      while (1)
      {
        int v14 = *v9;
        v9 += 112;
        int v13 = v14;
        if (a4 - 1 == v14 || v10 == v12 && v13 == a4) {
          return 0;
        }
        *a6 = v10;
        unint64_t v12 = a2[4];
        if (v10++ >= v12) {
          goto LABEL_12;
        }
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v11 = 2315264000;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant match MS terminal node with start word : start position=%d", (uint64_t)a6, a7, a8, a3);
  }
  return v11;
}

uint64_t mapMSNodes2PHR(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v31 = 0;
  int v32 = 0;
  unsigned __int16 v8 = *(_WORD *)(a2 + 8);
  if (v8)
  {
    unsigned __int16 v11 = 0;
    uint64_t v12 = (uint64_t)(a1 + 1);
    int v13 = (unsigned __int16 *)(a1 + 84);
    while (2)
    {
      uint64_t v14 = v11;
      unint64_t v15 = (int *)(*(void *)a2 + 16 * v11 + 12);
      while (1)
      {
        int v16 = *v15;
        v15 += 4;
        if (v16) {
          break;
        }
        if (++v14 >= (unint64_t)v8) {
          goto LABEL_24;
        }
      }
      unint64_t v17 = 0;
      int v32 = 0;
      do
      {
        if (v17 >= *((unsigned __int16 *)a1 + 320)) {
          goto LABEL_19;
        }
        if (*(_DWORD *)(a1[79] + 4 * v17) == 1)
        {
          unsigned __int16 v18 = strlen(*(const char **)(*(void *)a2 + 16 * (unsigned __int16)v14));
          uint64_t result = do_pcre_exec(v12, *(unsigned __int16 *)(*(void *)(a1[78] + 8 * v17) + 2), *(char **)(*(void *)a2 + 16 * (unsigned __int16)v14), v18, 0, (uint64_t)&v32, v19, v20);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          int v22 = v32;
        }
        else if (!strcmp((const char *)(a1[67] + *(unsigned int *)(a1[68] + 4 * **(unsigned int **)(a1[78] + 8 * v17))), *(const char **)(*(void *)a2 + 16 * (unsigned __int16)v14)))
        {
          int v22 = 1;
          int v32 = 1;
        }
        else
        {
          int v22 = 0;
        }
        uint64_t v23 = (unsigned __int16)v17++;
      }
      while (!v22);
      if (v22 != 1)
      {
LABEL_19:
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no rules FIRE on \"%s\" -> \"%s\"", a6, a7, a8, *(void *)(*(void *)a2 + 16 * (unsigned __int16)v14));
        int v28 = "O";
        goto LABEL_21;
      }
      uint64_t v24 = a1[67];
      uint64_t v25 = a1[68];
      uint64_t v26 = *(void *)(a1[78] + 8 * v23);
      uint64_t v27 = *(void *)(*a1 + 32);
      if (*(_DWORD *)(a1[79] + 4 * v23) == 1)
      {
        int v28 = (char *)(v24 + *(unsigned int *)(v25 + 4 * *(unsigned int *)(v26 + 8)));
        log_OutText(v27, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"regex rule %d FIRED \"%s\" -> \"%s\"", a6, a7, a8, *(unsigned __int16 *)(v26 + 2));
      }
      else
      {
        int v28 = (char *)(v24 + *(unsigned int *)(v25 + 4 * *(unsigned int *)(v26 + 4)));
        log_OutText(v27, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"normal rule FIRED \"%s\" -> \"%s\"", a6, a7, a8, *(void *)(*(void *)a2 + 16 * (unsigned __int16)v14));
      }
LABEL_21:
      uint64_t result = getWordIdxForMSPhr(*a1, v13, *(unsigned __int16 *)(*(void *)a2 + 16 * (unsigned __int16)v14 + 8), *(unsigned __int16 *)(*(void *)a2 + 16 * (unsigned __int16)v14 + 10), (_WORD *)&v31 + 1, &v31, v29, v30);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = addPHRRange(*a1, HIWORD(v31), (unsigned __int16)v31, v28, v13);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned __int16 v8 = *(_WORD *)(a2 + 8);
LABEL_24:
      unsigned __int16 v11 = v14 + 1;
      if ((unsigned __int16)(v14 + 1) < v8) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t sortMSNodes(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v51 = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Sort MS Nodes Pass 1 : constrain nodes containing primitives", a6, a7, a8, 0);
  LODWORD(v13) = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    unsigned int v50 = 0;
    do
    {
      uint64_t v16 = *a2 + 16 * v14;
      if (*(_DWORD *)(v16 + 12) == 1)
      {
        unsigned int v17 = *(unsigned __int16 *)(v16 + 8);
        unsigned int v18 = *(unsigned __int16 *)(v16 + 10);
        if (*(unsigned __int16 *)(a1 + 16) >= 2u)
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"doing node %d", v10, v11, v12, v15);
          LODWORD(v13) = *((unsigned __int16 *)a2 + 4);
        }
        if (v13)
        {
          unint64_t v19 = 0;
          unsigned int v48 = v18;
          unsigned int v49 = v17;
          while (1)
          {
            if (v14 != v19)
            {
              uint64_t v20 = *a2 + 16 * v19;
              if (*(_DWORD *)(v20 + 12) == 1
                && *(unsigned __int16 *)(v20 + 8) >= v17
                && *(unsigned __int16 *)(*a2 + 16 * v19 + 10) <= v18)
              {
                break;
              }
            }
LABEL_32:
            ++v19;
            unint64_t v13 = *((unsigned __int16 *)a2 + 4);
            if (v19 >= v13) {
              goto LABEL_33;
            }
          }
          if (*(unsigned __int16 *)(a1 + 16) >= 2u) {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"checking node %d apply %d basicdef rules", v10, v11, v12, v19);
          }
          unint64_t v21 = 0;
          int v51 = 0;
          do
          {
            if (v21 >= *(unsigned __int16 *)(a1 + 616))
            {
              unsigned int v18 = v48;
              unsigned int v17 = v49;
              goto LABEL_32;
            }
            if (*(_DWORD *)(*(void *)(a1 + 608) + 4 * v21) == 1)
            {
              unsigned __int16 v22 = strlen(*(const char **)(*a2 + 16 * v19));
              uint64_t result = do_pcre_exec(a1 + 8, *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 600) + 8 * v21) + 2), *(char **)(*a2 + 16 * v19), v22, 0, (uint64_t)&v51, v23, v24);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              unsigned int v50 = result;
              if (*(unsigned __int16 *)(a1 + 16) >= 2u)
              {
                uint64_t v26 = "NOMATCH ";
                if (v51 == 1) {
                  uint64_t v26 = "FIRED ";
                }
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           %sbasicDef: rule %d : regexNum %d [%s] target %s", v10, v11, v12, (uint64_t)v26);
              }
            }
            else if (!strcmp((const char *)(*(void *)(a1 + 536)+ *(unsigned int *)(*(void *)(a1 + 544)+ 4 * **(unsigned int **)(*(void *)(a1 + 600) + 8 * v21))), *(const char **)(*a2 + 16 * v19)))
            {
              int v51 = 1;
              if (*(unsigned __int16 *)(a1 + 16) >= 2u) {
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           basicDef: rule %d %s matched string with rule %s", v10, v11, v12, v21);
              }
            }
            else if (*(unsigned __int16 *)(a1 + 16) >= 2u)
            {
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           basicDef: rule %d %s does not match string %s", v10, v11, v12, v21);
            }
            ++v21;
          }
          while (!v51);
          unsigned int v18 = v48;
          unsigned int v17 = v49;
          if (v51 != 1) {
            goto LABEL_32;
          }
          uint64_t v27 = *(void *)(*(void *)a1 + 32);
          if (*(unsigned __int16 *)(*a2 + 16 * v14 + 8) == *(unsigned __int16 *)(*a2 + 16 * v19 + 8))
          {
            log_OutText(v27, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK decrease node %d from %d to %d, since matches entire node", v10, v11, v12, v15);
            goto LABEL_32;
          }
          log_OutText(v27, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"decrease node %d from %d to %d", v10, v11, v12, v15);
          *(_WORD *)(*a2 + 16 * v14 + 10) = *(_WORD *)(*a2 + 16 * v19 + 8);
          LODWORD(v13) = *((unsigned __int16 *)a2 + 4);
        }
      }
LABEL_33:
      uint64_t v15 = ++v14;
    }
    while (v14 < v13);
  }
  else
  {
    unsigned int v50 = 0;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Sort MS Nodes Pass 2 : delete consumed nodes", v10, v11, v12, 0);
  uint64_t v28 = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a2;
    uint64_t v31 = *a2 + 12;
    do
    {
      uint64_t v32 = v30 + 16 * v29;
      if (*(_DWORD *)(v32 + 12) == 1)
      {
        uint64_t v33 = 0;
        unsigned int v34 = *(unsigned __int16 *)(v32 + 8);
        unsigned __int16 v35 = *(_WORD *)(v32 + 10);
        unint64_t v36 = (_DWORD *)v31;
        unsigned __int16 v37 = v29;
        uint64_t v38 = (_DWORD *)v31;
        do
        {
          int v39 = *v38;
          v38 += 4;
          if (v39 == 1 && *((unsigned __int16 *)v36 - 2) == v34)
          {
            unsigned int v40 = *((unsigned __int16 *)v36 - 1);
            if (v40 > v35)
            {
              unsigned __int16 v35 = v40;
              unsigned __int16 v37 = v33;
            }
          }
          ++v33;
          unint64_t v36 = v38;
        }
        while (v28 != v33);
        uint64_t v41 = v37;
        int v42 = (unsigned __int16 *)(v30 + 16 * v37 + 10);
        uint64_t v43 = v28;
        uint64_t v44 = (_DWORD *)v31;
        do
        {
          unsigned int v45 = *((unsigned __int16 *)v44 - 2);
          if (v45 == v34 && *v44 == 1 && v41 != 0) {
            *uint64_t v44 = 0;
          }
          if (v45 > v34 && *v44 == 1 && *((unsigned __int16 *)v44 - 1) <= *v42 && v41 != 0) {
            *uint64_t v44 = 0;
          }
          v44 += 4;
          --v41;
          --v43;
        }
        while (v43);
      }
      ++v29;
    }
    while (v29 != v28);
  }
  return v50;
}

void *freeMSNodes(void *result, uint64_t a2)
{
  unsigned __int16 v3 = result;
  int v4 = *(unsigned __int16 *)(a2 + 8);
  uint64_t v5 = *(void *)a2;
  if (v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      heap_Free((void *)v3[1], *(void *)(v5 + v6));
      uint64_t v5 = *(void *)a2;
      *(void *)(*(void *)a2 + v6) = 0;
      ++v7;
      v6 += 16;
    }
    while (v7 < *(unsigned __int16 *)(a2 + 8));
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    uint64_t result = heap_Free((void *)v3[1], v5);
    *(void *)a2 = 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t extractFromMSTree(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, unsigned __int16 a12)
{
  if (!a4) {
    return 0;
  }
  HIDWORD(v33) = a6;
  kbsymtab_ConsSymString(a3, *(__int16 *)(a4 + 16), a11, a12);
  unint64_t v17 = 0;
  int v38 = 0;
  while (v17 < *(unsigned __int16 *)(a1 + 592))
  {
    if (*(_DWORD *)(*(void *)(a1 + 584) + 4 * v17) == 1)
    {
      unsigned __int16 v18 = strlen(a11);
      uint64_t result = do_pcre_exec(a1 + 8, *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 576) + 8 * v17) + 2), a11, v18, 0, (uint64_t)&v38, v19, v20);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v22 = v38;
    }
    else if (!strcmp((const char *)(*(void *)(a1 + 536)+ *(unsigned int *)(*(void *)(a1 + 544)+ 4 * **(unsigned int **)(*(void *)(a1 + 576) + 8 * v17))), a11))
    {
      int v22 = 1;
      int v38 = 1;
    }
    else
    {
      int v22 = 0;
    }
    ++v17;
    if (v22)
    {
      if (v22 == 1)
      {
        int v36 = 0;
        int v37 = 0;
        getStartAndEndFromMSTree(a4, (_WORD *)&v37 + 1, &v37, &v36);
        uint64_t result = addMSNode(*(void *)a1, a11, SHIWORD(v37), v37, a10);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      break;
    }
  }
  uint64_t v23 = *(void **)(a4 + 8);
  if (v23)
  {
    uint64_t v24 = (unsigned __int16)(WORD2(v33) + 1);
    do
    {
      LOWORD(v33) = a12;
      uint64_t result = extractFromMSTree(a1, a2, a3, v23, a5, v24, a7, a8, a9, a10, a11, v33);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t v23 = (void *)*v23;
    }
    while (v23);
  }
  else
  {
    unsigned __int16 v25 = strlen(a5);
    int v29 = *(_DWORD *)(a4 + 56);
    if (v29 > v25)
    {
      *(_DWORD *)(a4 + 56) = v25;
      int v29 = v25;
    }
    uint64_t v30 = *(unsigned int *)(a4 + 52);
    if ((int)v30 > v25 || v29 > v25 || v29 <= (int)v30)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"error extracting from MS tree : OUTOFRANGE s32StartPos=%d s32EndPos=%d len=%d", v26, v27, v28, v30);
      return 2315264000;
    }
    else
    {
      if (v29 - v30 == 1)
      {
        int v31 = 0;
      }
      else
      {
        if (utf8_BelongsToSet(0, a5, v29 - 1, v25)) {
          int v31 = -1;
        }
        else {
          int v31 = 0;
        }
        LODWORD(v30) = *(_DWORD *)(a4 + 52);
        int v29 = *(_DWORD *)(a4 + 56);
      }
      strncpy(a11, &a5[(int)v30], (unsigned __int16)(v31 - v30 + v29));
      a11[*(_DWORD *)(a4 + 56) + v31 - *(_DWORD *)(a4 + 52)] = 0;
      uint64_t v32 = addMSNode(*(void *)a1, a11, *(_WORD *)(a4 + 52), *(_WORD *)(a4 + 56), a10);
      uint64_t result = 0;
      if ((v32 & 0x80000000) != 0) {
        return v32;
      }
    }
  }
  return result;
}

uint64_t setNNPausingDefault(uint64_t a1, char **a2, char *__s)
{
  uint64_t v6 = *(void **)(a1 + 8);
  int v7 = strlen(__s);
  unsigned __int16 v8 = (char *)heap_Calloc(v6, 1, (v7 + 1));
  *a2 = v8;
  if (v8)
  {
    strcpy(v8, __s);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v9, v10, v11, v12, v14);
    return 2315264010;
  }
}

uint64_t getStartOfOrthPunc(const char *a1, _DWORD *a2)
{
  unsigned __int16 v4 = strlen(a1);
  *a2 = 0;
  if (v4)
  {
    unsigned __int16 v5 = 0;
    while (1)
    {
      __int16 v6 = utf8_determineUTF8CharLength(a1[v5]);
      unsigned int v7 = a1[v5];
      if (v6 == 1 && v7 == 44) {
        break;
      }
      BOOL v8 = v7 > 0x3F;
      unint64_t v9 = (1 << v7) & 0x8C00430200000000;
      if (!v8 && v9 != 0) {
        break;
      }
      v5 += v6;
      if (v5 >= v4) {
        return v4;
      }
    }
    *a2 = 1;
  }
  else
  {
    return v4;
  }
  return v5;
}

uint64_t getSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  *(_DWORD *)uint64_t v206 = 0;
  __int16 v205 = 0;
  uint64_t v203 = 0;
  uint64_t v204 = 0;
  unsigned int v201 = 0;
  int v202 = 0;
  int v199 = 0;
  int v200 = 0;
  uint64_t v198 = 0;
  int v197 = 0;
  uint64_t v195 = 0;
  uint64_t v196 = 0;
  unsigned __int16 v193 = 0;
  int v192 = 0;
  v194[0] = 0;
  v194[1] = 0;
  *(_DWORD *)(a6 + 1108) = log_GetLogLevel(*(void *)(a1 + 32)) > 4;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 104))(a4, a5, 1, 0, &v206[1]);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a3 + 184))(a4, a5, v206[1], 0, &v205);
  if ((v17 & 0x80000000) == 0 && v205 == 1)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a3 + 176))(a4, a5, v206[1], 0, &v204, &v202);
    if ((v17 & 0x80000000) == 0 && (unsigned __int16)v202 >= 2u)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Method PandP : processing=\"%s\"", v18, v19, v20, (uint64_t)v204);
      uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), 1, 1024);
      *(void *)(a6 + 1088) = v21;
      if (v21
        && (*(_WORD *)(a6 + 1104) = 1024,
            uint64_t v26 = heap_Calloc(*(void **)(a1 + 8), 1, 1024),
            (*(void *)(a6 + 1096) = v26) != 0))
      {
        unsigned __int16 v27 = strlen(v204) + 1;
        uint64_t v32 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v27);
        if (v32)
        {
          unsigned __int16 v183 = v27;
          uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 104))(a4, a5, 2, v206[1], v206);
          if ((v33 & 0x80000000) == 0)
          {
            int v184 = 0;
            unsigned __int16 v181 = (const char **)(a6 + 1088);
            uint64_t v182 = (_WORD *)(a6 + 1104);
            uint64_t v17 = 2315271857;
            uint64_t v188 = a6 + 8;
            uint64_t v189 = (uint64_t *)(a6 + 672);
            uint64_t v185 = a2;
            unsigned __int16 v186 = v32;
            while (v206[0])
            {
              uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(a4, a5);
              if ((v33 & 0x80000000) != 0) {
                goto LABEL_60;
              }
              if (v201 <= 0xA && ((1 << v201) & 0x610) != 0)
              {
                uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a3 + 168))(a4, a5, v206[0], 1, 1, &v197, &v202);
                if ((v33 & 0x80000000) != 0) {
                  goto LABEL_60;
                }
                uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a3 + 168))(a4, a5, v206[0], 2, 1, (char *)&v197 + 2, &v202);
                if ((v33 & 0x80000000) != 0) {
                  goto LABEL_60;
                }
                if ((unsigned __int16)v197 > HIWORD(v197)) {
                  goto LABEL_61;
                }
                uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, int *))(a3 + 176))(a4, a5, v206[0], 3, &v199, &v202);
                if ((v33 & 0x80000000) != 0) {
                  goto LABEL_60;
                }
                strncpy(v32, &v204[(unsigned __int16)v197], HIWORD(v197) - (unint64_t)(unsigned __int16)v197);
                v32[HIWORD(v197) - (unsigned __int16)v197] = 0;
                if (HIWORD(v197) == (unsigned __int16)v197)
                {
                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v35, v36, v37, HIWORD(v197));
                }
                else
                {
                  unsigned int __s = 0;
                  __int16 v190 = 0;
                  size_t v38 = strlen(v32);
                  if (v38 && (unsigned int v39 = v32[v38 - 1], v39 <= 0x3B)) {
                    unint64_t v40 = (0x3FFEFFFFFFFFFFFuLL >> v39) & 1;
                  }
                  else {
                    LOBYTE(v40) = 1;
                  }
                  uint64_t v41 = addWord(a1, v186, &v197, v199, v188, (uint64_t)v189);
                  if ((v41 & 0x80000000) != 0)
                  {
LABEL_72:
                    uint64_t v17 = v41;
LABEL_166:
                    uint64_t v32 = v186;
                    goto LABEL_61;
                  }
                  int v42 = *(unsigned __int16 *)(a6 + 680);
                  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a3 + 184))(a4, a5, v206[0], 8, &v205) & 0x80000000) == 0&& v205 == 1)
                  {
                    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a3 + 168))(a4, a5, v206[0], 8, 1, &v190, &v202);
                    if ((v16 & 0x80000000) != 0) {
                      return v16;
                    }
                  }
                  if (v190) {
                    *(_DWORD *)(*(void *)(a6 + 672) + 224 * *(unsigned __int16 *)(a6 + 680) - 8) = 2;
                  }
                  if ((v40 & 1) == 0) {
                    *(_DWORD *)(*(void *)(a6 + 672) + 224 * *(unsigned __int16 *)(a6 + 680) - 196) = 1;
                  }
                  uint64_t POSString = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a3 + 184))(a4, a5, v206[0], 14, &v205);
                  if ((POSString & 0x80000000) != 0) {
                    goto LABEL_165;
                  }
                  unsigned __int16 v44 = v42 - 1;
                  if (v205)
                  {
                    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a3 + 176))(a4, a5, v206[0], 14, &__s, &v202) & 0x80000000) == 0)
                    {
                      int v192 = 1;
                      uint64_t POSString = parse_NLU_string((uint64_t *)a6, __s, (unsigned __int16)(v42 - 1), v42, &v192, a8);
                      if ((POSString & 0x80000000) != 0) {
                        goto LABEL_165;
                      }
                    }
                  }
                  uint64_t POSString = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a3 + 176))(a4, a5, v206[0], 5, &v198, &v202);
                  if ((POSString & 0x80000000) != 0) {
                    goto LABEL_165;
                  }
                  a2 = v185;
                  int v184 = v192;
                  if (!v192)
                  {
                    uint64_t v41 = addMSPOS(a1, v44, v198, v188, v189);
                    if ((v41 & 0x80000000) != 0) {
                      goto LABEL_72;
                    }
                  }
                  uint64_t v41 = checkMSPOSForCompound(a1, v44, v198, v188, v189);
                  if ((v41 & 0x80000000) != 0) {
                    goto LABEL_72;
                  }
                  uint64_t v32 = v186;
                }
              }
              uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 120))(a4, a5, v206[0], v206);
              if ((v33 & 0x80000000) != 0) {
                goto LABEL_60;
              }
            }
            expandAndValidateCompounds(a1, v189, v188);
            uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 104))(a4, a5, 2, v206[1], v206);
            if ((v33 & 0x80000000) != 0) {
              goto LABEL_60;
            }
            while (v206[0])
            {
              uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(a4, a5);
              if ((v33 & 0x80000000) != 0) {
                goto LABEL_60;
              }
              if (v201 == 6)
              {
                uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a3 + 168))(a4, a5, v206[0], 1, 1, &v197, &v202);
                a2 = v185;
                if ((v33 & 0x80000000) != 0) {
                  goto LABEL_60;
                }
                uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a3 + 168))(a4, a5, v206[0], 2, 1, (char *)&v197 + 2, &v202);
                if ((v33 & 0x80000000) != 0) {
                  goto LABEL_60;
                }
                if ((unsigned __int16)v197 > HIWORD(v197)) {
                  goto LABEL_61;
                }
                uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, int *))(a3 + 176))(a4, a5, v206[0], 4, &v200, &v202);
                if ((v33 & 0x80000000) != 0) {
                  goto LABEL_60;
                }
                unsigned int v48 = v200;
                if (strcmp(v200, "_PR_"))
                {
                  uint64_t v51 = addToken(a1, (unsigned __int16 *)&v197, v48, v188, v189, a8, v49, v50);
                  if ((v51 & 0x80000000) != 0 && v51 != -1979703296)
                  {
                    uint64_t v17 = v51;
                    a2 = v185;
                    goto LABEL_61;
                  }
                }
              }
              uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 120))(a4, a5, v206[0], v206);
              a2 = v185;
              if ((v33 & 0x80000000) != 0) {
                goto LABEL_60;
              }
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Added words from lingdb", v45, v46, v47, 0);
            uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a3 + 176))(a4, a5, v206[1], 1, &v203, (char *)&v202 + 2);
            if ((v17 & 0x80000000) != 0) {
              goto LABEL_61;
            }
            if (!v184 && *(_DWORD *)(a6 + 568) == 1)
            {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"USE MS - get PHR from MS tree", v54, v55, v56, 0);
              uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a3 + 176))(a4, a5, v206[1], 2, &v196, &v202);
              if ((v16 & 0x80000000) != 0) {
                return v16;
              }
              if (!a7)
              {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"empty symbol table for MS rules", v57, v58, v59, 0);
                return 2315264000;
              }
              mosynt_StringToSyntTree(v185, a7, v196, &v195);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              uint64_t POSString = printMSTree(a1, v185, a7, v195, v204, 0, v181, *(char **)(a6 + 1096), v182, v186, v183);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              uint64_t POSString = extractFromMSTree(a6, v185, a7, v195, v204, 0, (uint64_t)v181, *(void *)(a6 + 1096), (uint64_t)v182, (uint64_t)v194, v186, v183);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              printMSNodes(a1, *(char **)(a6 + 1096), (uint64_t)v204, (uint64_t)v194, (uint64_t)"START", 1, v60, v61);
              uint64_t POSString = sortMSNodes(a6, v194, v62, v63, v64, v65, v66, v67);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              printMSNodes(a1, *(char **)(a6 + 1096), (uint64_t)v204, (uint64_t)v194, (uint64_t)"END", 0, v68, v69);
              uint64_t POSString = validateMSNodes(a1, v194, v70, v71, v72, v73, v74, v75);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              uint64_t POSString = mapMSNodes2PHR((uint64_t *)a6, (uint64_t)v194, v76, v77, v78, v79, v80, v81);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              freeMSNodes((void *)a1, (uint64_t)v194);
              uint64_t v17 = 0;
            }
            uint64_t v82 = (void *)(a6 + 8);
            if (HIWORD(v202))
            {
              int v83 = 0;
              unsigned __int16 v84 = 0;
              do
              {
                if (*(_DWORD *)(v203 + 32 * v84) == 21
                  && getDomainFromPausingDefs((uint64_t)v82, *(char **)(v203 + 32 * v84 + 24), &v193) == 1)
                {
                  unsigned __int16 v85 = v84 + 1;
                  unsigned int v86 = HIWORD(v202);
                  if (HIWORD(v202) <= (unsigned __int16)(v84 + 1))
                  {
LABEL_94:
                    setDomainOnWord((unsigned __int16 **)v189, (unsigned __int16)(*(_WORD *)(v203 + 32 * v84 + 12) - *(_DWORD *)(v203 + 12)), *(unsigned __int16 *)(v203 + 16), v193);
                  }
                  else
                  {
                    uint64_t v87 = v203;
                    __int16 v187 = (const char **)(v203 + 32 * v84 + 24);
                    while (1)
                    {
                      uint64_t v88 = v85;
                      if (*(_DWORD *)(v87 + 32 * v85) == 21)
                      {
                        if (strcmp(*v187, *(const char **)(v87 + 32 * v85 + 24))) {
                          break;
                        }
                      }
                      unsigned __int16 v85 = v88 + 1;
                      if (v86 <= (unsigned __int16)(v88 + 1)) {
                        goto LABEL_94;
                      }
                    }
                    setDomainOnWord((unsigned __int16 **)v189, (unsigned __int16)(*(_WORD *)(v203 + 32 * v84 + 12) - *(_DWORD *)(v203 + 12)), (unsigned __int16)(*(_WORD *)(v203 + 32 * v88 + 12) - *(_DWORD *)(v203 + 12)), v193);
                    unsigned __int16 v84 = v88 - (v88 + 1 != v83);
                  }
                  uint64_t v82 = (void *)(a6 + 8);
                }
                int v83 = ++v84;
                unsigned __int16 v89 = HIWORD(v202);
              }
              while (v84 < HIWORD(v202));
              if (HIWORD(v202))
              {
                int v91 = 0;
                do
                {
                  uint64_t v92 = (unsigned __int16)v91;
                  if (*(_DWORD *)(v203 + 32 * (unsigned __int16)v91) == 34)
                  {
                    if ((unsigned __int16)++v91 >= v89) {
                      goto LABEL_113;
                    }
                    do
                    {
                      int v93 = *(_DWORD *)(v203 + 32 * (unsigned __int16)v91);
                      if (v93 != 21) {
                        ++v91;
                      }
                    }
                    while ((unsigned __int16)v91 < v89 && v93 != 21);
                    if (v93 == 21)
                    {
                      int v97 = *(_DWORD *)(v203 + 32 * v92 + 12);
                      int v98 = *(_DWORD *)(v203 + 12);
                      unsigned __int16 v96 = v97 - v98;
                      int v95 = *(_DWORD *)(v203 + 32 * (unsigned __int16)v91 + 12) - v98;
                    }
                    else
                    {
LABEL_113:
                      int v95 = *(_DWORD *)(v203 + 16);
                      unsigned __int16 v96 = *(_DWORD *)(v203 + 32 * v92 + 12) - *(_DWORD *)(v203 + 12);
                    }
                    setPhoneticRange((unsigned __int16 **)v189, v96, (unsigned __int16)v95);
                  }
                  ++v91;
                  unsigned __int16 v89 = HIWORD(v202);
                }
                while (HIWORD(v202) > (unsigned __int16)v91);
              }
            }
            if (a8 == 1)
            {
              if (*(_WORD *)(a6 + 680))
              {
                unint64_t v99 = 0;
                uint64_t v100 = 168;
                do
                {
                  uint64_t v101 = *v189;
                  uint64_t v102 = *(const char **)(*v189 + v100 + 8);
                  if (!v102) {
                    goto LABEL_126;
                  }
                  int v103 = strcmp(v102, "COMP]");
                  if (v100 != 168 && !v103)
                  {
                    uint64_t v104 = v101 + 224 * (v99 - 1);
                    uint64_t v105 = *(void *)(v104 + 176);
                    if (v105)
                    {
                      if (!strcmp(*(const char **)(v104 + 176), "COMP]"))
                      {
                        heap_Free(*(void **)(a1 + 8), v105);
                        uint64_t v106 = *v189 + 224 * (v99 - 1);
                        *(void *)(v106 + 176) = 0;
                        setNNPausingDefault(a1, (char **)(v106 + 176), "-");
                        uint64_t v101 = *v189;
                        if (!*(void *)(*v189 + v100 + 8))
                        {
LABEL_126:
                          setNNPausingDefault(a1, (char **)(v101 + v100 + 8), "-");
                          uint64_t v101 = *v189;
                        }
                      }
                    }
                  }
                  if (!*(void *)(v101 + v100))
                  {
                    setNNPausingDefault(a1, (char **)(v101 + v100), "-");
                    uint64_t v101 = *v189;
                  }
                  LODWORD(__s) = 0;
                  unsigned int StartOfOrthPunc = getStartOfOrthPunc(*(const char **)(*(void *)(v101 + v100 - 152)+ 8 * *(unsigned __int16 *)(a6 + 24)), &__s);
                  if (__s == 1)
                  {
                    unsigned int v108 = StartOfOrthPunc;
                    int v109 = strlen((const char *)(*(void *)(*(void *)(*(void *)(a6 + 672) + v100 - 152)
                                                           + 8 * *(unsigned __int16 *)(a6 + 24))
                                               + StartOfOrthPunc));
                    __int16 v110 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v109 + 1));
                    uint64_t v115 = *(void *)(a6 + 672) + v100;
                    *(void *)(v115 + 40) = v110;
                    if (!v110) {
                      goto LABEL_168;
                    }
                    strcpy(v110, (const char *)(*(void *)(*(void *)(v115 - 152) + 8 * *(unsigned __int16 *)(a6 + 24)) + v108));
                  }
                  else
                  {
                    unsigned __int16 v116 = (_WORD *)heap_Calloc(*(void **)(a1 + 8), 1, 2);
                    *(void *)(*v189 + v100 + 40) = v116;
                    if (!v116)
                    {
LABEL_168:
                      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v111, v112, v113, v114, v180);
                      return 2315264010;
                    }
                    *unsigned __int16 v116 = 88;
                  }
                  uint64_t v117 = *v189;
                  uint64_t v118 = *v189 + v100;
                  uint64_t v120 = *(void *)(v118 + 16);
                  uint64_t v119 = (char **)(v118 + 16);
                  if (!v120)
                  {
                    setNNPausingDefault(a1, v119, "X");
                    uint64_t v117 = *v189;
                  }
                  if (!*(void *)(v117 + v100 + 24))
                  {
                    setNNPausingDefault(a1, (char **)(v117 + v100 + 24), "X");
                    uint64_t v117 = *v189;
                  }
                  if (!*(void *)(v117 + v100 + 32)) {
                    setNNPausingDefault(a1, (char **)(v117 + v100 + 32), "X");
                  }
                  ++v99;
                  v100 += 224;
                }
                while (v99 < *(unsigned __int16 *)(a6 + 680));
              }
              uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v181, *(char **)(a6 + 1096), v182, v188, (uint64_t)v189, (uint64_t)"At Start of NN Phrasing", 1);
              if ((POSString & 0x80000000) == 0)
              {
                heap_Free(*(void **)(a1 + 8), (uint64_t)v186);
                return 0;
              }
              goto LABEL_165;
            }
            if (*v82)
            {
              uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v181, *(char **)(a6 + 1096), v182, (uint64_t)v82, (uint64_t)v189, (uint64_t)"At Start", a8);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              uint64_t POSString = resolvePHR((uint64_t)v204, a1, v188, (uint64_t)v189, a8, v121, v122, v123);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v181, *(char **)(a6 + 1096), v182, v188, (uint64_t)v189, (uint64_t)"Initialized data", a8);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              uint64_t POSString = createPOSString(a1, v188, (uint64_t)v189);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Created POS string for retagging : \"%s\"", v124, v125, v126, *(void *)(a6 + 688));
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"do retagging", v127, v128, v129, 0);
              uint64_t POSString = doRetagging(*(unsigned int *)(a6 + 1108), v181, v182, *(char **)(a6 + 1096), a1, v188, (uint64_t)v189, v130);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              uint64_t POSString = printAsChunks(*(unsigned int *)(a6 + 1108), v181, v182, v188, v189, v131, v132, v133);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"do subtagging", v134, v135, v136, 0);
              uint64_t POSString = doSubtagging(*(unsigned int *)(a6 + 1108), v181, v182, *(char **)(a6 + 1096), a1, v188, (uint64_t)v189, v137);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              uint64_t v138 = *(void *)(a6 + 688);
              if (v138)
              {
                heap_Free(*(void **)(a1 + 8), v138);
                *(void *)(a6 + 688) = 0;
                heap_Free(*(void **)(a1 + 8), *(void *)(a6 + 696));
                *(void *)(a6 + 696) = 0;
              }
              uint64_t POSString = createPOSString(a1, v188, (uint64_t)v189);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"set phrase type", v139, v140, v141, 0);
              uint64_t POSString = setPhraseType(*(unsigned int *)(a6 + 1108), v181, v182, *(char **)(a6 + 1096), a1, v188, (uint64_t)v189, (uint64_t)v204);
              if ((POSString & 0x80000000) != 0) {
                goto LABEL_165;
              }
              uint64_t v145 = *(void *)(a6 + 688);
              if (v145)
              {
                heap_Free(*(void **)(a1 + 8), v145);
                *(void *)(a6 + 688) = 0;
                heap_Free(*(void **)(a1 + 8), *(void *)(a6 + 696));
                *(void *)(a6 + 696) = 0;
              }
              if (*(void *)(a6 + 816) || *(void *)(a6 + 760))
              {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip extending PHR containing token tags", v142, v143, v144, 0);
              }
              else
              {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"extend PHR containing token tags", v142, v143, v144, 0);
                uint64_t POSString = extendPHRContainingTokenTags(a6, v172, v173, v174, v175, v176, v177, v178);
                if ((POSString & 0x80000000) != 0
                  || (uint64_t POSString = annotateTokenTypeOnEachWord(a6), (POSString & 0x80000000) != 0)
                  || (uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v181, *(char **)(a6 + 1096), v182, v188, (uint64_t)v189, (uint64_t)"After token tag extension", a8), (POSString & 0x80000000) != 0))
                {
LABEL_165:
                  uint64_t v17 = POSString;
                  a2 = v185;
                  goto LABEL_166;
                }
              }
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"assign token tags", v146, v147, v148, 0);
              uint64_t POSString = assignTokenTags(a6, v149, v150, v151, v152, v153, v154, v155);
              if ((POSString & 0x80000000) == 0)
              {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"assign token POS", v156, v157, v158, 0);
                uint64_t POSString = assignTokenPOS(a6, v159, v160, v161, v162, v163, v164, v165);
                if ((POSString & 0x80000000) == 0)
                {
                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"creating working lists (regex domains)", v166, v167, v168, 0);
                  uint64_t POSString = createLists(a1, v188, v189);
                  if ((POSString & 0x80000000) == 0)
                  {
                    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"get phon weights (nsyll)", v169, v170, v171, 0);
                    getPhonWeights((unsigned __int16 *)v189);
                    uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v181, *(char **)(a6 + 1096), v182, v188, (uint64_t)v189, (uint64_t)"AFTER GET PHON WEIGHTS", a8);
                  }
                }
              }
              goto LABEL_165;
            }
            heap_Free(*(void **)(a1 + 8), (uint64_t)v186);
            return v17;
          }
LABEL_60:
          uint64_t v17 = v33;
        }
        else
        {
          uint64_t v17 = 2315264010;
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v28, v29, v30, v31, v179);
        }
      }
      else
      {
        uint64_t v17 = 2315264010;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v179);
        uint64_t v32 = 0;
      }
LABEL_61:
      if (*(_DWORD *)(a6 + 568) == 1) {
        freeMSNodes((void *)a1, (uint64_t)v194);
      }
      if (v32) {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v32);
      }
      if (v195)
      {
        int v52 = mosyntdata_DisposeSyntTree(a2, &v195);
        if ((int)v17 >= 0 && v52 <= -1) {
          return v52;
        }
        else {
          return v17;
        }
      }
    }
  }
  return v17;
}

uint64_t parse_NLU_string(uint64_t *a1, char *__s, unsigned int a3, int a4, _DWORD *a5, int a6)
{
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v72 = 0u;
  uint64_t v12 = *(void **)(*a1 + 8);
  int v13 = strlen(__s);
  unsigned int v14 = (char *)heap_Calloc(v12, 1, (v13 + 1));
  if (!v14)
  {
LABEL_69:
    uint64_t inserted = 2315264010;
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v15, v16, v17, v18, v56);
    return inserted;
  }
  unint64_t v19 = (unint64_t)v14;
  unsigned int v67 = a3;
  int v59 = a6;
  int __sa = __s;
  uint64_t v20 = strcpy(v14, __s);
  for (uint64_t i = (unsigned __int8 *)(v19 + strlen(v20) - 1); (unint64_t)i >= v19; --i)
  {
    unsigned int v22 = *i;
    BOOL v23 = v22 > 0x3B;
    uint64_t v24 = (1 << v22) & 0x800000100002600;
    if (v23 || v24 == 0) {
      break;
    }
    *uint64_t i = 0;
  }
  uint64_t v57 = a5;
  uint64_t v26 = 0;
  uint64_t v71 = 0;
  uint64_t v69 = 0;
  long long v70 = 0uLL;
  uint64_t v68 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  long long v66 = 0uLL;
  unsigned __int16 v27 = 0;
  int v60 = a4;
  uint64_t v62 = a1 + 84;
  uint64_t v63 = (uint64_t)(a1 + 1);
  unsigned int v58 = (unsigned __int16)(a4 - 1);
  unint64_t v28 = v19;
  do
  {
    uint64_t v29 = strchr((char *)v28, 59);
    uint64_t v30 = v29;
    if (v29) {
      *uint64_t v29 = 0;
    }
    uint64_t v31 = strchr((char *)v28, 58);
    uint64_t v32 = v31;
    if (v31)
    {
      *uint64_t v31 = 0;
      uint64_t v33 = v31 + 1;
    }
    else
    {
      uint64_t v33 = "null";
    }
    if (!strcmp((const char *)v28, "POS"))
    {
      uint64_t inserted = 0;
      unsigned __int16 v27 = v33;
      goto LABEL_35;
    }
    if (!strcmp((const char *)v28, "PHR"))
    {
      uint64_t inserted = 0;
      uint64_t v26 = v33;
      goto LABEL_35;
    }
    if (!strcmp((const char *)v28, "BND"))
    {
      uint64_t inserted = 0;
      uint64_t v71 = v33;
      goto LABEL_35;
    }
    if (!strcmp((const char *)v28, "BNDSHAPE"))
    {
      uint64_t inserted = 0;
      uint64_t v69 = v33;
      goto LABEL_35;
    }
    if (!strcmp((const char *)v28, "S_POI"))
    {
      uint64_t inserted = 0;
      unsigned int v39 = "B";
LABEL_34:
      *(void *)&long long v70 = v33;
      *((void *)&v70 + 1) = v39;
      goto LABEL_35;
    }
    if (!strcmp((const char *)v28, "I_POI"))
    {
      uint64_t inserted = 0;
      unsigned int v39 = "I";
      goto LABEL_34;
    }
    if (!strcmp((const char *)v28, "E_POI"))
    {
      uint64_t inserted = 0;
      unsigned int v39 = "S";
      if (!*((void *)&v70 + 1)) {
        unsigned int v39 = "E";
      }
      goto LABEL_34;
    }
    if (!strcmp((const char *)v28, "PRM"))
    {
      uint64_t inserted = 0;
      uint64_t v68 = v33;
      goto LABEL_35;
    }
    int v37 = *((_DWORD *)a1 + 166);
    if (v37 == 1)
    {
      if (!strcmp((const char *)(v28 + 1), "_COMP"))
      {
        int v40 = strlen(v33);
        uint64_t v41 = heap_Calloc(*(void **)(*a1 + 8), 1, (v40 + 3));
        if (!v41) {
          goto LABEL_69;
        }
        int v42 = (char *)v41;
        int v43 = strcmp((const char *)v28, "S_COMP");
        unsigned __int16 v44 = "I-";
        if (!v43) {
          unsigned __int16 v44 = "B-";
        }
        *(_WORD *)int v42 = *(_WORD *)v44;
        _OWORD v42[2] = v44[2];
        strcat(v42, v33);
        uint64_t v45 = v42;
        uint64_t inserted = 0;
        *((void *)&v66 + 1) = v45;
        uint64_t v65 = (uint64_t)v45;
        goto LABEL_35;
      }
    }
    else if (!v37 && !strcmp((const char *)v28, "COMP"))
    {
      uint64_t inserted = 0;
      *((void *)&v66 + 1) = v33;
      goto LABEL_35;
    }
    if (v32 && (unint64_t)v32 > v28 + 1)
    {
      if (!strcmp((const char *)(v28 + 1), "_CLASS"))
      {
        uint64_t inserted = 0;
        uint64_t v64 = v33;
        goto LABEL_35;
      }
      if (v59 == 1 && !strcmp((const char *)v28, "PUNC"))
      {
        if ((void)v66)
        {
          uint64_t inserted = 0;
          goto LABEL_35;
        }
        int v48 = strlen(__sa);
        uint64_t v49 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, (v48 + 4));
        if (!v49) {
          goto LABEL_69;
        }
        uint64_t v50 = v49;
        strcpy(v49, "X_");
        uint64_t v51 = strcat(v49, (const char *)v28);
        *(_WORD *)&v50[strlen(v51)] = 58;
        *(void *)&long long v66 = v50;
        strcat(v50, v33);
        goto LABEL_56;
      }
      if (!strcmp((const char *)(v28 + 1), "_PUNC"))
      {
        uint64_t v46 = (const char *)v66;
        if (!(void)v66)
        {
          int v47 = strlen(__sa);
          uint64_t v46 = (const char *)heap_Calloc(*(void **)(*a1 + 8), 1, (v47 + 1));
          if (!v46) {
            goto LABEL_69;
          }
          *uint64_t v46 = 0;
        }
        *uint64_t v32 = 58;
        *(void *)&long long v66 = v46;
        hlp_NLUStrJoin(v46, (const char *)v28);
LABEL_56:
        uint64_t inserted = 0;
        goto LABEL_35;
      }
    }
    uint64_t inserted = addMarkerType(*a1, (const char *)v28, v33, v67, v58, v63, v62);
LABEL_35:
    if (!v30) {
      break;
    }
    unint64_t v28 = (unint64_t)(v30 + 1);
  }
  while ((inserted & 0x80000000) == 0);
  long long v75 = v66;
  *(void *)&long long v74 = v68;
  *((void *)&v74 + 1) = v64;
  long long v76 = v70;
  *(void *)&long long v73 = v71;
  *((void *)&v73 + 1) = v69;
  *(void *)&long long v72 = v27;
  *((void *)&v72 + 1) = v26;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"parsed NLU %s[%d,%d] -> POS=%s, PHR=%s, BND=%s, BNDSHAPE=%s, PRM=%s, CLASS=%s, PUNC=%s, COMP=%s, POIClass=%s, POIPosi=%s", v34, v35, v36, (uint64_t)__sa);
  if ((inserted & 0x80000000) == 0)
  {
    if (!v27)
    {
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"missing POS in NLU string: arg=%s", v52, v53, v54, v19);
      *uint64_t v57 = 0;
    }
    uint64_t inserted = insert_NLU_info(*a1, v67, v60, (uint64_t)&v72, v63, v62, v59);
  }
  heap_Free(*(void **)(*a1 + 8), v19);
  if ((void)v66) {
    heap_Free(*(void **)(*a1 + 8), v66);
  }
  if (v65) {
    heap_Free(*(void **)(*a1 + 8), v65);
  }
  return inserted;
}

double freeSentenceData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1088);
  if (v2)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v2);
    *(void *)(a1 + 1088) = 0;
    *(_WORD *)(a1 + 1104) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 1096);
  if (v3)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v3);
    *(void *)(a1 + 1096) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 672);
  if (*(_WORD *)(a1 + 680))
  {
    unint64_t v5 = 0;
    do
    {
      if (*(void *)(v4 + 224 * v5 + 80))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 80));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 80) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 112))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 112));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 112) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 120))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 120));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 120) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 152))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 152));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 152) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 160))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 160));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 160) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 184))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 184));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 184) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 192))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 192));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 192) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 200))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 200));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 200) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 208))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 208));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 208) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 168))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 168));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 168) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 88))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 88));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 88) = 0;
      }
      uint64_t v6 = *(void *)(v4 + 224 * v5 + 16);
      if (v6)
      {
        unsigned __int16 v7 = *(_WORD *)(a1 + 80);
        if (v7)
        {
          for (unint64_t i = 0; i < v7; ++i)
          {
            uint64_t v6 = *(void *)(v4 + 224 * v5 + 16);
            uint64_t v9 = *(void *)(v6 + 8 * i);
            if (v9)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v9);
              uint64_t v4 = *(void *)(a1 + 672);
              uint64_t v6 = *(void *)(v4 + 224 * v5 + 16);
              *(void *)(v6 + 8 * i) = 0;
              unsigned __int16 v7 = *(_WORD *)(a1 + 80);
            }
          }
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v6);
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 16) = 0;
      }
      uint64_t v10 = *(void *)(v4 + 224 * v5 + 56);
      if (v10)
      {
        unsigned __int16 v11 = *(_WORD *)(a1 + 80);
        if (v11)
        {
          unint64_t v12 = 0;
          uint64_t v13 = 16;
          do
          {
            uint64_t v10 = *(void *)(v4 + 224 * v5 + 56);
            uint64_t v14 = *(void *)(v10 + v13);
            if (v14)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v14);
              uint64_t v4 = *(void *)(a1 + 672);
              uint64_t v10 = *(void *)(v4 + 224 * v5 + 56);
              *(void *)(v10 + v13) = 0;
              unsigned __int16 v11 = *(_WORD *)(a1 + 80);
            }
            ++v12;
            v13 += 32;
          }
          while (v12 < v11);
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v10);
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 56) = 0;
      }
      uint64_t v15 = *(void *)(v4 + 224 * v5 + 64);
      if (v15)
      {
        unsigned __int16 v16 = *(_WORD *)(a1 + 80);
        if (v16)
        {
          for (unint64_t j = 0; j < v16; ++j)
          {
            uint64_t v15 = *(void *)(v4 + 224 * v5 + 64);
            uint64_t v18 = *(void *)(v15 + 8 * j);
            if (v18)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v18);
              uint64_t v4 = *(void *)(a1 + 672);
              uint64_t v15 = *(void *)(v4 + 224 * v5 + 64);
              *(void *)(v15 + 8 * j) = 0;
              unsigned __int16 v16 = *(_WORD *)(a1 + 80);
            }
          }
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v15);
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 64) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 8))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 8));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 8) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 96))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 96));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 96) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 176))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 176));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 176) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 128))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 128));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 128) = 0;
      }
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 680));
  }
  else if (!v4)
  {
    goto LABEL_62;
  }
  heap_Free(*(void **)(*(void *)a1 + 8), v4);
  *(void *)(a1 + 672) = 0;
LABEL_62:
  uint64_t v19 = *(void *)(a1 + 688);
  if (v19)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v19);
    *(void *)(a1 + 688) = 0;
  }
  uint64_t v20 = *(void *)(a1 + 696);
  if (v20)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v20);
    *(void *)(a1 + 696) = 0;
  }
  uint64_t v21 = *(void *)(a1 + 712);
  if (v21) {
    heap_Free(*(void **)(*(void *)a1 + 8), v21);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  return result;
}

uint64_t updateLingdb(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  __int16 v33 = 0;
  int v31 = 0;
  int v32 = 0;
  __int16 v30 = 0;
  unsigned int v29 = 0;
  uint64_t v28 = 0;
  __int16 v27 = 0;
  int v25 = 0;
  int v26 = 0;
  BOOL v23 = 0;
  int v22 = 0;
  *(_OWORD *)__s1 = 0u;
  long long v37 = 0u;
  PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v32 + 2);
  if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
    return PhraseStartingAtThisWord;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1 + 184))(a2, a3, HIWORD(v32), 0, &v33);
  if ((v9 & 0x80000000) == 0 && v33 == 1)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1 + 176))(a2, a3, HIWORD(v32), 0, &v23, &v31);
    if ((v9 & 0x80000000) == 0 && (unsigned __int16)v31 >= 2u)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v32), &v32);
      if ((v9 & 0x80000000) == 0)
      {
        int v24 = 0;
        __s[0] = 0;
        LOBYTE(v38) = 0;
        **(unsigned char **)(a4 + 1088) = 0;
        for (unsigned __int16 i = v32; (_WORD)v32; unsigned __int16 i = v32)
        {
          PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1 + 168))(a2, a3, i, 0, 1, &v29, &v31);
          if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
            return PhraseStartingAtThisWord;
          }
          if (v29 <= 0xA && ((1 << v29) & 0x610) != 0)
          {
            PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v32, 1, 1, &v26, &v31);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v32, 2, 1, (char *)&v26 + 2, &v31);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1 + 176))(a2, a3, (unsigned __int16)v32, 3, &v28, &v31);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            if ((unsigned __int16)v26 != HIWORD(v26))
            {
              PhraseStartingAtThisint Word = getPhraseStartingAtThisWord((uint64_t *)(a4 + 672), a4 + 8, (unsigned __int16)v26, (__int16 *)&v25 + 1, __s, &v27, (__int16 *)&v24 + 1, &v24);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              if (__s[0])
              {
                __strcpy_chk();
                LOWORD(v25) = 0;
                if (HIWORD(v25) <= 1u)
                {
                  if (HIWORD(v24)) {
                    setSilDurOnWord(a4 + 672, (void *)(a4 + 8), (unsigned __int16)(HIWORD(v24) - 1), &v25);
                  }
                  else {
                    LOWORD(v25) = 200;
                  }
                }
                PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1 + 88))(a2, a3, (unsigned __int16)v32, (char *)&v31 + 2);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                unsigned int v29 = 15;
                PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v31), 0, 1, &v29, &v30);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v31), 1, 1, &v26, &v30);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v31), 2, 1, &v27, &v30);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                __int16 v12 = strlen(__s);
                PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v31), 4, (unsigned __int16)(v12 + 1), __s, &v30);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v31), 7, 1, (char *)&v25 + 2, &v30);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v31), 8, 1, &v25, &v30);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
              }
              uint64_t v13 = HIWORD(v24);
              setSilDurOnWord(a4 + 672, (void *)(a4 + 8), HIWORD(v24), &v25);
              PhraseStartingAtThisint Word = checkForExternalSildur(a1, a2, a3, (unsigned __int16)v32, &v22);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              if (!v22)
              {
                PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v32, 8, 1, &v25, &v30);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
              }
              unsigned int v14 = *(unsigned __int8 *)(*(void *)(a4 + 672) + 224 * v13 + 72);
              get_phr_for_nlu_output(a4, v13, __s1);
              get_pos_for_nlu_output(a4, v13, __dst);
              PhraseStartingAtThisint Word = updateNLUField(a1, a2, a3, (unsigned __int16)v32, a4, v13, __dst, __s1, *(char **)(*(void *)(a4 + 672) + 224 * v13 + 96), *(char **)(*(void *)(a4 + 672) + 224 * v13 + 112));
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_PRM -> %d dur=%d", v15, v16, v17, (unsigned __int16)v32);
              LH_itoa(v14, v34, 0xAu);
              __int16 v18 = strlen(v34);
              PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v32, 13, (unsigned __int16)(v18 + 1), v34, &v30);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
            }
          }
          uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v32, &v32);
          if ((v9 & 0x80000000) != 0) {
            return v9;
          }
        }
        **(unsigned char **)(a4 + 1088) = 0;
        if (v38 != 89)
        {
          uint64_t v19 = v23;
          uint64_t v20 = strrchr(v23, 63);
          if (v20)
          {
            if (v20 != v19 && *(v20 - 1) != 32) {
              *uint64_t v20 = 46;
            }
          }
        }
      }
    }
  }
  return v9;
}

uint64_t getPhraseStartingAtThisWord(uint64_t *a1, uint64_t a2, uint64_t a3, __int16 *a4, char *__dst, _WORD *a6, __int16 *a7, _WORD *a8)
{
  *a4 = 0;
  if (!*((_WORD *)a1 + 4))
  {
LABEL_5:
    uint64_t v16 = 2315264000;
    if (a2) {
      log_OutText(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant align lingdb word : no word found with fromPos=%d", (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a3);
    }
    return v16;
  }
  unsigned int v13 = 0;
  uint64_t v14 = *a1;
  uint64_t v15 = (unsigned __int8 *)(*a1 + 73);
  while (*(unsigned __int16 *)(v14 + 224 * v13) != a3)
  {
    ++v13;
    v15 += 224;
    if (v13 >= *((unsigned __int16 *)a1 + 4)) {
      goto LABEL_5;
    }
  }
  unsigned int v17 = (unsigned __int16)*a8;
  *a7 = v13;
  if (v13 | v17) {
    BOOL v18 = v13 > v17;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    uint64_t v16 = 0;
    *int __dst = 0;
    return v16;
  }
  unsigned int v19 = *((unsigned __int16 *)a1 + 4);
  unsigned int v20 = v13;
  if (v13 < v19)
  {
    LOWORD(v20) = v13;
    while (1)
    {
      int v21 = *v15;
      v15 += 224;
      if ((v21 - 3) < 2) {
        break;
      }
      LOWORD(v20) = v20 + 1;
      if (v19 == (unsigned __int16)v20) {
        goto LABEL_19;
      }
    }
    unsigned int v20 = (unsigned __int16)v20;
  }
  if (v20 == v19)
  {
LABEL_19:
    *a6 = *(_WORD *)(v14 + 224 * *((unsigned __int16 *)a1 + 4) - 222);
    *a8 = *((_WORD *)a1 + 4);
  }
  else
  {
    *a8 = v20;
    *a6 = *(_WORD *)(v14 + 224 * v20 + 2);
    if (v20 + 1 != *((unsigned __int16 *)a1 + 4))
    {
      *a6 = *(_WORD *)(v14 + 224 * (v20 + 1));
      __int16 v23 = 80;
      goto LABEL_25;
    }
  }
  int v22 = (const char *)a1[5];
  if (!v22)
  {
    __int16 v23 = 84;
LABEL_25:
    *(_WORD *)int __dst = v23;
    goto LABEL_26;
  }
  strcpy(__dst, v22);
LABEL_26:
  __int16 v24 = *a7;
  if (*a7)
  {
    *a4 = 1;
    if (*(unsigned char *)(*a1 + 224 * (unsigned __int16)*a7 - 151) == 3) {
      __int16 v24 = 2;
    }
    else {
      __int16 v24 = 1;
    }
  }
  *a4 = v24;
  if (a2) {
    log_OutText(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Phrase lingdb=%d,%d PHRTYPE=%s BNDTYPE=%d internal word %d,%d", (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a3);
  }
  return 0;
}

size_t setSilDurOnWord(size_t result, void *a2, int a3, _WORD *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int v14 = 0;
  *a4 = 0;
  unsigned int v6 = *(unsigned __int16 *)(result + 8);
  uint64_t v7 = *(void *)result;
  if (a3 + 1 < v6 && *(_DWORD *)(v7 + 224 * (a3 + 1) + 220) == 1)
  {
    do
    {
      LOWORD(a3) = a3 + 1;
      int v8 = (unsigned __int16)a3;
      unsigned int v9 = (unsigned __int16)a3 + 1;
    }
    while (v9 < v6 && *(_DWORD *)(v7 + 224 * v9 + 220) == 1);
  }
  else
  {
    int v8 = a3;
  }
  unsigned int v10 = v6 - 1;
  if (*(unsigned char *)(v7 + 224 * (unsigned __int16)a3 + 73) == 4 && v10 != v8)
  {
    __int16 v12 = (unsigned int *)(a2[6] + 8 * *(unsigned int *)(v7 + 224 * (unsigned __int16)a3 + 52));
    *a4 = *((_WORD *)v12 + 2);
    strcpy(__s, "tnpausedur");
    size_t v13 = strlen((const char *)(a2[66] + *(unsigned int *)(a2[67] + 4 * *v12)));
    double result = strlen(__s);
    if (v13 < 255 - result)
    {
      __strcat_chk();
      double result = paramc_ParamGetUInt(*(void *)(*a2 + 40), (uint64_t)__s, &v14);
      if ((result & 0x80000000) == 0) {
        *a4 = v14;
      }
    }
  }
  return result;
}

unint64_t get_phr_for_nlu_output(unint64_t result, unsigned int a2, char *__s1)
{
  uint64_t v4 = *(void *)(*(void *)(result + 672) + 224 * a2 + 56);
  if (v4 && (v5 = result, uint64_t v6 = v4 + 32 * *(unsigned __int16 *)(result + 32), (v7 = *(const char **)(v6 + 16)) != 0))
  {
    if (!strcmp(*(const char **)(v6 + 16), "O") || !strcmp(v7, "O-P"))
    {
      strcpy(__s1, v7);
    }
    else
    {
      strcpy(__s1, "B-");
      strcat(__s1, *(const char **)(*(void *)(*(void *)(v5 + 672) + 224 * a2 + 56)+ 32 * *(unsigned __int16 *)(v5 + 32)+ 16));
    }
    double result = strlen(__s1);
    if (result >= 2)
    {
      unint64_t v9 = result;
      double result = strcmp(&__s1[result - 2], "-P");
      if (!result) {
        __s1[v9 - 2] = 0;
      }
    }
  }
  else if (*__s1)
  {
    double result = strcmp(__s1, "O");
    if (result) {
      char *__s1 = 73;
    }
  }
  return result;
}

char *get_pos_for_nlu_output(uint64_t a1, unsigned int a2, char *__dst)
{
  uint64_t v3 = *(void *)(a1 + 672);
  uint64_t v4 = *(const char **)(v3 + 224 * a2 + 88);
  if (!v4) {
    uint64_t v4 = *(const char **)(*(void *)(v3 + 224 * a2 + 16) + 8 * *(unsigned __int16 *)(a1 + 26));
  }
  return strcpy(__dst, v4);
}

uint64_t updateNLUField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char *a7, char *a8, char *a9, char *a10)
{
  int v35 = 0;
  __int16 v34 = 0;
  unsigned int __s = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 14, (char *)&v35 + 2);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (!HIWORD(v35))
  {
    uint64_t v32 = a3;
LABEL_7:
    BOOL v18 = &byte_20D5A22AE;
    unsigned int __s = &byte_20D5A22AE;
    goto LABEL_8;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(a1 + 176))(a2, a3, a4, 14, &__s, &v35);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v32 = a3;
  if ((unsigned __int16)v35 < 2u) {
    goto LABEL_7;
  }
  BOOL v18 = __s;
LABEL_8:
  size_t v19 = strlen(v18);
  if (a7) {
    size_t v20 = v19 + strlen(a7) + 6;
  }
  else {
    size_t v20 = v19 + 1;
  }
  if (a8) {
    v20 += strlen(a8) + 5;
  }
  if (a9 && !*(_DWORD *)(a5 + 664)) {
    v20 += strlen(a9) + 6;
  }
  if (a10) {
    v20 += strlen(a10) + 10;
  }
  if (v20 <= *(unsigned __int16 *)(a5 + 1104))
  {
    int v21 = *(char **)(a5 + 1088);
  }
  else
  {
    int v21 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a5 + 8), *(void *)(a5 + 1088), v20);
    if (!v21)
    {
      log_OutPublic(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v31);
      return 2315264010;
    }
    *(void *)(a5 + 1088) = v21;
    *(_WORD *)(a5 + 1104) = v20;
    BOOL v18 = __s;
  }
  strcpy(v21, v18);
  if (a7 && *a7) {
    hlp_NLUStrSet(*(char **)(a5 + 1088), "POS", a7);
  }
  if (a8 && *a8) {
    hlp_NLUStrSet(*(char **)(a5 + 1088), "PHR", a8);
  }
  if (a9 && !*(_DWORD *)(a5 + 664) && *a9) {
    hlp_NLUStrSet(*(char **)(a5 + 1088), "COMP", a9);
  }
  if (a10)
  {
    if (*a10) {
      hlp_NLUStrSet(*(char **)(a5 + 1088), "BNDSHAPE", a10);
    }
  }
  log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_NLU %s -> %s", v26, v27, v28, a4);
  unsigned int v29 = *(const char **)(a5 + 1088);
  __int16 v30 = strlen(v29);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(a1 + 160))(a2, v32, a4, 14, (unsigned __int16)(v30 + 1), v29, &v34);
}

uint64_t updateLingdbCrfPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  __int16 v40 = 0;
  int v38 = 0;
  int v39 = 0;
  __int16 v37 = 0;
  unsigned int v36 = 0;
  uint64_t v35 = 0;
  __int16 v34 = 0;
  int v32 = 0;
  int v33 = 0;
  uint64_t v29 = 0;
  __int16 v30 = 0;
  __int16 v28 = 0;
  int v27 = 0;
  *(_OWORD *)__s1 = 0u;
  long long v44 = 0u;
  PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v39 + 2);
  if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
    return PhraseStartingAtThisWord;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1 + 184))(a2, a3, HIWORD(v39), 0, &v40);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  if (v40 != 1) {
    return v9;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1 + 176))(a2, a3, HIWORD(v39), 0, &v30, &v38);
  if ((v9 & 0x80000000) != 0 || (unsigned __int16)v38 < 2u) {
    return v9;
  }
  PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, __int16 *))(a1 + 176))(a2, a3, HIWORD(v39), 1, &v29, &v28);
  if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
    return PhraseStartingAtThisWord;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v39), &v39);
  if ((v9 & 0x80000000) == 0)
  {
    int v31 = 0;
    __s[0] = 0;
    **(unsigned char **)(a4 + 1088) = 0;
    unsigned __int16 v10 = v39;
    if ((_WORD)v39)
    {
      uint64_t v26 = a4 + 8;
      do
      {
        PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1 + 168))(a2, a3, v10, 0, 1, &v36, &v38);
        if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
          return PhraseStartingAtThisWord;
        }
        if (v36 <= 0xA && ((1 << v36) & 0x610) != 0)
        {
          PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v39, 1, 1, &v33, &v38);
          if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
            return PhraseStartingAtThisWord;
          }
          PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v39, 2, 1, (char *)&v33 + 2, &v38);
          if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
            return PhraseStartingAtThisWord;
          }
          PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1 + 176))(a2, a3, (unsigned __int16)v39, 3, &v35, &v38);
          if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
            return PhraseStartingAtThisWord;
          }
          if ((unsigned __int16)v33 != HIWORD(v33))
          {
            PhraseStartingAtThisint Word = getPhraseStartingAtThisWord((uint64_t *)(a4 + 672), 0, (unsigned __int16)v33, (__int16 *)&v32 + 1, __s, &v34, (__int16 *)&v31 + 1, &v31);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            if (__s[0])
            {
              LOWORD(v32) = 0;
              if (HIWORD(v32) <= 1u)
              {
                if (HIWORD(v31)) {
                  setSilDurOnWordCrf(a4 + 672, v26, (unsigned __int16)(HIWORD(v31) - 1), (__int16 *)&v32, v12, v13, v14, v15);
                }
                else {
                  LOWORD(v32) = 200;
                }
              }
              PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1 + 88))(a2, a3, (unsigned __int16)v39, (char *)&v38 + 2);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              unsigned int v36 = 15;
              PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v38), 0, 1, &v36, &v37);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v38), 1, 1, &v33, &v37);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v38), 2, 1, &v34, &v37);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              __int16 v16 = strlen(__s);
              PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v38), 4, (unsigned __int16)(v16 + 1), __s, &v37);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v38), 7, 1, (char *)&v32 + 2, &v37);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v38), 8, 1, &v32, &v37);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
            }
            uint64_t v17 = HIWORD(v31);
            setSilDurOnWordCrf(a4 + 672, v26, HIWORD(v31), (__int16 *)&v32, v12, v13, v14, v15);
            PhraseStartingAtThisint Word = checkForExternalSildur(a1, a2, a3, (unsigned __int16)v39, &v27);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            if (!v27)
            {
              PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v39, 8, 1, &v32, &v37);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
            }
            unsigned int v18 = *(unsigned __int8 *)(*(void *)(a4 + 672) + 224 * v17 + 72);
            get_phr_for_nlu_output(a4, v17, __s1);
            get_pos_for_nlu_output(a4, v17, __dst);
            PhraseStartingAtThisint Word = updateNLUField(a1, a2, a3, (unsigned __int16)v39, a4, v17, __dst, __s1, *(char **)(*(void *)(a4 + 672) + 224 * v17 + 96), *(char **)(*(void *)(a4 + 672) + 224 * v17 + 112));
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_PRM -> %d dur=%d", v19, v20, v21, (unsigned __int16)v39);
            LH_itoa(v18, v41, 0xAu);
            __int16 v22 = strlen(v41);
            PhraseStartingAtThisint Word = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v39, 13, (unsigned __int16)(v22 + 1), v41, &v37);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
          }
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v39, &v39);
        if ((v9 & 0x80000000) != 0) {
          return v9;
        }
        unsigned __int16 v10 = v39;
      }
      while ((_WORD)v39);
    }
    **(unsigned char **)(a4 + 1088) = 0;
    if (*(unsigned __int16 *)__s == 87 || !(*(unsigned __int16 *)__s ^ 0x4641 | v46))
    {
      uint64_t v23 = v30;
      uint64_t v24 = strrchr(v30, 63);
      if (v24 && v24 != v23 && *(v24 - 1) != 32) {
        *uint64_t v24 = 46;
      }
    }
  }
  return v9;
}

size_t setSilDurOnWordCrf(size_t result, uint64_t a2, int a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10 = result;
  if (a2) {
    uint64_t result = log_OutText(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"the parameter %s is ready", a6, a7, a8, (uint64_t)"pandpRules");
  }
  *a4 = 0;
  unsigned int v11 = *(unsigned __int16 *)(v10 + 8);
  uint64_t v12 = *(void *)v10;
  if (a3 + 1 < v11 && *(_DWORD *)(v12 + 224 * (a3 + 1) + 220) == 1)
  {
    do
    {
      LOWORD(a3) = a3 + 1;
      int v13 = (unsigned __int16)a3;
      unsigned int v14 = (unsigned __int16)a3 + 1;
    }
    while (v14 < v11 && *(_DWORD *)(v12 + 224 * v14 + 220) == 1);
  }
  else
  {
    int v13 = a3;
  }
  unsigned int v15 = v11 - 1;
  if (*(unsigned char *)(v12 + 224 * (unsigned __int16)a3 + 73) == 4 && v15 != v13)
  {
    uint64_t v17 = **(const char ***)(v12 + 224 * (unsigned __int16)a3 + 16);
    uint64_t result = strlen(v17);
    int v18 = result;
    *a4 = 100;
    if (v17
      && (uint64_t result = strlen(v17)) != 0
      && ((unsigned int v19 = v17[result - 1], v20 = v19 > 0x3B, v21 = (1 << v19) & 0xC00100000000000, !v20)
        ? (BOOL v22 = v21 == 0)
        : (BOOL v22 = 1),
          !v22))
    {
      __int16 v23 = 300;
    }
    else
    {
      if (v17[v18 - 1] != 46) {
        return result;
      }
      __int16 v23 = 600;
    }
    *a4 = v23;
  }
  return result;
}

uint64_t heapAdjustDown(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = (2 * a2) | 1;
  if (v3 < a3)
  {
    uint64_t v4 = *(void *)(result + 8 * a2);
    uint64_t v5 = a2;
    do
    {
      unsigned int v6 = (unsigned __int16)v3;
      if ((unsigned __int16)v3 < a3 - 1)
      {
        if (*(__int16 *)(*(void *)(result + 8 * (unsigned __int16)v3) + 2) < *(__int16 *)(*(void *)(result + 8 * ((unsigned __int16)v3 + 1))
                                                                                               + 2))
          LOWORD(v3) = v3 + 1;
        unsigned int v6 = (unsigned __int16)v3;
      }
      uint64_t v7 = *(void *)(result + 8 * v6);
      if (*(__int16 *)(*(void *)(result + 8 * v5) + 2) >= *(__int16 *)(v7 + 2)) {
        break;
      }
      *(void *)(result + 8 * v5) = v7;
      *(void *)(result + 8 * v6) = v4;
      uint64_t v5 = (unsigned __int16)v3;
      unsigned int v3 = (2 * (unsigned __int16)v3) | 1;
    }
    while (v3 < a3);
  }
  return result;
}

uint64_t heapPop(uint64_t **a1)
{
  uint64_t v1 = *((unsigned __int16 *)a1 + 4);
  if (!*((_WORD *)a1 + 4)) {
    return 0;
  }
  if (v1 == 2)
  {
    uint64_t result = **a1;
    **a1 = (*a1)[1];
    *((_WORD *)a1 + 4) = 1;
  }
  else if (v1 == 1)
  {
    *((_WORD *)a1 + 4) = 0;
    return **a1;
  }
  else
  {
    uint64_t v4 = **a1;
    **a1 = (*a1)[(v1 - 1)];
    (*a1)[v1 - 1] = v4;
    heapAdjustDown((uint64_t)*a1, 0, (unsigned __int16)(v1 - 1));
    unsigned __int16 v5 = *((_WORD *)a1 + 4) - 1;
    *((_WORD *)a1 + 4) = v5;
    return (*a1)[v5];
  }
  return result;
}

uint64_t heapAdd(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(result + 8);
  *(void *)(*(void *)result + 8 * *(unsigned __int16 *)(result + 8)) = a2;
  *(_WORD *)(result + 8) = v2 + 1;
  if (v2) {
    BOOL v3 = v2 == 0xFFFF;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v4 = result;
    int v5 = (unsigned __int16)(v2 + 1) >> 1;
    do
    {
      unsigned int v6 = (unsigned __int16)v5--;
      uint64_t result = heapAdjustDown(*(void *)v4, (unsigned __int16)v5, *(unsigned __int16 *)(v4 + 8));
    }
    while (v6 > 1);
  }
  return result;
}

uint64_t astar_search(uint64_t a1, uint64_t *a2, __int16 a3, int a4, unsigned __int16 *a5, uint64_t *a6)
{
  v44[1] = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 8);
  unsigned __int16 v12 = a5[1] + 2;
  if (a5[1] == 0xFFFE)
  {
    uint64_t v17 = 16;
  }
  else
  {
    __int16 v13 = 2;
    unsigned __int16 v14 = 1;
    do
    {
      unsigned int v15 = v12;
      if (v12) {
        __int16 v16 = v13;
      }
      else {
        __int16 v16 = 1;
      }
      v14 *= v16;
      v12 >>= 1;
      v13 *= v13;
    }
    while (v15 > 1);
    uint64_t v17 = 16 * v14;
  }
  uint64_t v18 = 2315264010;
  uint64_t v19 = heap_Alloc(v11, v17);
  if (v19)
  {
    uint64_t v20 = v19;
    unsigned __int16 v21 = a5[1] + 2;
    if (a5[1] == 0xFFFE)
    {
      uint64_t v26 = 8;
    }
    else
    {
      __int16 v22 = 2;
      unsigned __int16 v23 = 1;
      do
      {
        unsigned int v24 = v21;
        if (v21) {
          __int16 v25 = v22;
        }
        else {
          __int16 v25 = 1;
        }
        v23 *= v25;
        v21 >>= 1;
        v22 *= v22;
      }
      while (v24 > 1);
      uint64_t v26 = 8 * v23;
    }
    int v27 = (uint64_t *)heap_Alloc(*(void *)(a1 + 8), v26);
    int v42 = v27;
    if (!v27) {
      goto LABEL_36;
    }
    uint64_t v28 = 0;
    *(_DWORD *)uint64_t v20 = 0xFFFF;
    uint64_t v43 = 0;
    *(_WORD *)(v20 + 4) = a3 - 1;
    *(_WORD *)(v20 + 6) = 0;
    *(_WORD *)(v20 + 12) = 0;
    *(_WORD *)(v20 + 14) = *a5;
    *(_DWORD *)(v20 + 8) = 0;
    v44[0] = 0x100000000;
    *int v27 = v20;
    unsigned int v29 = 1;
    LOWORD(v43) = 1;
    do
    {
      uint64_t v30 = heapPop(&v42);
      uint64_t v31 = v30;
      if (*(__int16 *)(v30 + 4) == a4 && (!v28 || *(__int16 *)(v30 + 2) > *(__int16 *)(v28 + 2))) {
        uint64_t v28 = v30;
      }
      uint64_t v40 = v28;
      uint64_t v32 = 0;
      char v33 = 1;
      do
      {
        char v34 = v33;
        if (generateNewState(a1, v31, v20 + 16 * v29, *((_DWORD *)v44 + v32), a2, a4, a5, a6))
        {
          *(_WORD *)(v20 + 16 * v29 + 6) = v29;
          heapAdd((uint64_t)&v42, v20 + 16 * v29++);
        }
        char v33 = 0;
        uint64_t v32 = 1;
      }
      while ((v34 & 1) != 0);
      uint64_t v28 = v40;
    }
    while ((_WORD)v43);
    if (v40 && *(__int16 *)(v40 + 6) >= 1)
    {
      uint64_t v35 = *(unsigned __int16 *)(v40 + 6);
      do
      {
        unsigned int v36 = (__int16 *)(v20 + 16 * v35);
        if (!*((_DWORD *)v36 + 2)) {
          *(unsigned char *)(*a2 + 224 * v36[2] + 73) = 4;
        }
        int v37 = *v36;
        uint64_t v35 = (unsigned __int16)*v36;
      }
      while (v37 > 0);
    }
    int v38 = v42;
    heap_Free(*(void **)(a1 + 8), v20);
    uint64_t v18 = 0;
    uint64_t v20 = (uint64_t)v38;
    if (v38) {
LABEL_36:
    }
      heap_Free(*(void **)(a1 + 8), v20);
  }
  return v18;
}

_WORD *generateNewState(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, int a6, unsigned __int16 *a7, uint64_t *a8)
{
  *(_WORD *)a3 = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a3 + 8) = a4;
  __int16 v8 = *(_WORD *)(a2 + 4) + 1;
  *(_WORD *)(a3 + 4) = v8;
  if (a6 >= v8)
  {
    uint64_t v9 = (_WORD *)a3;
    int v16 = 0;
    uint64_t v17 = *a5;
    do
    {
      uint64_t v18 = **(const char ***)(v17 + 224 * v8 + 16);
      __int16 v19 = strlen(v18);
      v16 += Utf8_LengthInUtf8chars((unint64_t)v18, v19);
      uint64_t v17 = *a5;
      int v20 = (__int16)v9[2];
      if (*(unsigned char *)(*a5 + 224 * (__int16)v9[2] + 73) == 3) {
        break;
      }
      __int16 v8 = v20 + 1;
      v9[2] = v20 + 1;
      int v20 = (__int16)(v20 + 1);
    }
    while (v20 <= a6);
    if (v20 > a6) {
      v9[2] = a6;
    }
    v9[7] = *(_WORD *)(a2 + 14) - v16;
    __int16 v21 = *(_WORD *)(a2 + 2);
    v9[1] = calculateScore(a1, a4, (uint64_t)v9, (unsigned __int16)(*(_WORD *)(a2 + 12) + v16), *a7, *(_DWORD *)(a2 + 8), a8, (uint64_t)a5)+ v21;
    if (a4)
    {
      if (a4 != 1) {
        return v9;
      }
      __int16 v22 = *(_WORD *)(a2 + 12) + v16;
    }
    else
    {
      __int16 v22 = 0;
    }
    v9[6] = v22;
    return v9;
  }
  return 0;
}

uint64_t calculateScore(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, uint64_t *a7, uint64_t a8)
{
  if (a2 == 1 && a4 < 6) {
    __int16 v10 = 5;
  }
  else {
    __int16 v10 = 0;
  }
  if (a2 == 0 && a4 > 7) {
    v10 += 5;
  }
  unsigned int v11 = *(unsigned __int16 *)(a3 + 14);
  if (a2 == 1 && v11 < 6) {
    v10 += 10;
  }
  if (a2 == 0 && 1000 * v11 / a5 - 400 < 0xC9) {
    __int16 v12 = v10 + 5;
  }
  else {
    __int16 v12 = v10;
  }
  if (a2 == 1 && applyRules(a1, a8, *(unsigned __int16 *)(a3 + 4), a7) == 1) {
    v12 += 20;
  }
  if (a6 | a2) {
    return v12;
  }
  else {
    return (__int16)(v12 - 10);
  }
}

uint64_t fe_phrasing_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = 0;
  int v42 = 0;
  uint64_t v40 = 0;
  uint64_t stress_models = 2315264010;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v37 = 0;
  unsigned int v36 = 0;
  __int16 v35 = -1;
  char v34 = 0;
  if (!a5) {
    return 2315264007;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v42);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v41);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v12 = heap_Calloc((void *)v42[1], 1, 1728);
      uint64_t v17 = v42;
      if (!v12
        || (uint64_t v18 = v12,
            __int16 v19 = (void *)heap_Calloc((void *)v42[1], 1, 1040),
            *(void *)(v18 + 48) = v19,
            uint64_t v17 = v42,
            !v19))
      {
        log_OutPublic(v17[4], (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, v32);
        goto LABEL_46;
      }
      *(void *)uint64_t v18 = v42;
      *(void *)(v18 + 8) = a3;
      uint64_t v20 = v41;
      *(void *)(v18 + 16) = a4;
      *(void *)(v18 + 24) = v20;
      *(void *)(v18 + 32) = a1;
      *(void *)(v18 + 40) = a2;
      *__int16 v19 = a3;
      v19[1] = a4;
      *(_DWORD *)(*(void *)(v18 + 48) + 1020) = 0;
      *(_DWORD *)(v18 + 1456) = 0;
      *(_DWORD *)(v18 + 1520) = 0;
      *(void *)(v18 + 1448) = 0;
      *(void *)(v18 + 1464) = 0;
      *(_OWORD *)(v18 + 144) = 0u;
      *(void *)(v18 + 136) = 0;
      *(_DWORD *)(v18 + 1680) = 0;
      *(_OWORD *)(v18 + 1664) = 0u;
      *(_OWORD *)(v18 + 1688) = 0u;
      *(void *)(v18 + 1704) = safeh_GetNullHandle();
      *(void *)(v18 + 1712) = v21;
      *(void *)(v18 + 1536) = 0;
      uint64_t Object = objc_GetObject(v42[6], (uint64_t)"LINGDB", &v40);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      *(void *)(v18 + 56) = *(void *)(v40 + 8);
      uint64_t Object = objc_GetObject(v42[6], (uint64_t)"FE_DEPES", &v39);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      uint64_t v23 = v39;
      *(void *)(v18 + 80) = *(void *)(v39 + 8);
      *(_OWORD *)(v18 + 64) = *(_OWORD *)(v23 + 16);
      uint64_t Object = objc_GetObject(v42[6], (uint64_t)"FE_DCTLKP", &v38);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      uint64_t v24 = v38;
      *(void *)(v18 + 104) = *(void *)(v38 + 8);
      *(_OWORD *)(v18 + 88) = *(_OWORD *)(v24 + 16);
      *(_DWORD *)(v18 + 1296) = 0;
      uint64_t Object = nn_phrasing_checkIfActive(a3, a4, (uint64_t)v42, (_DWORD *)(v18 + 1296));
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      if (*(_DWORD *)(v18 + 1296) == 1)
      {
        uint64_t Object = nn_phrasing_Load(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), (uint64_t)v42, *(void *)(v18 + 104), *(void *)(v18 + 88), *(void *)(v18 + 96), (unsigned __int16 *)(v18 + 1304));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_45;
        }
      }
      uint64_t Object = isCorpusAlignmentEnabled((uint64_t)v42, &v37);
      if ((Object & 0x80000000) != 0)
      {
LABEL_45:
        uint64_t stress_models = Object;
        goto LABEL_46;
      }
      if (v37 == 1)
      {
        *(_DWORD *)(v18 + 160) = 0;
        *(_DWORD *)(v18 + 116) = 0;
      }
      else
      {
        uint64_t Object = usePandP(v42, (_DWORD *)(v18 + 160));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_45;
        }
        if (*(_DWORD *)(v18 + 160))
        {
          uint64_t Object = paramc_ParamSetUInt(v42[5], (uint64_t)"prmigactive", 1u);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t Object = pandpIgtreeInit(a3, a4, a1, a2, (uint64_t)v42, v41, (void *)(v18 + 920));
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          *(void *)(v18 + 600) = 0;
          *(_DWORD *)(v18 + 608) = 0;
          uint64_t Object = nuance_pcre_ObjOpen(a3, a4, v18 + 600);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t Object = nuance_pcre_Init(*(void **)(v18 + 600), *(void *)(v18 + 608), 0x1Eu, 50);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          __int16 v25 = v42;
          *(void *)(v18 + 168) = v42;
          uint64_t Object = readPandPRules(a3, a4, (uint64_t)v25, v18 + 176);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
        }
        uint64_t Object = com_mosynt_UseMosynt(*(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), (BOOL *)(v18 + 116));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_45;
        }
        if (*(_DWORD *)(v18 + 116))
        {
LABEL_30:
          __s1 = 0;
          uint64_t Object = com_mosynt_GetCfgParamVal(*(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), (uint64_t)"mosynt_enablegraphsymcache", "yes", &__s1);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          BOOL v26 = strcmp(__s1, "yes") == 0;
          uint64_t Object = kbsymtab_LoadData(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), (uint64_t *)(v18 + 120), v26);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t Object = accphr_LoadData(a3, a4, (uint64_t *)(v18 + 128));
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
LABEL_33:
          uint64_t Object = com_IncludeCRF(*(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), (BOOL *)(v18 + 112));
          if ((Object & 0x80000000) == 0)
          {
            if (!*(_DWORD *)(v18 + 112)
              || (uint64_t v29 = v41,
                  uint64_t v28 = v42,
                  *(void *)(v18 + 168) = v42,
                  uint64_t Object = pandpCrfInit(a3, a4, a1, a2, (uint64_t)v28, v29, *(void *)(v18 + 104), v27, *(void *)(v18 + 88), *(void *)(v18 + 96), v18 + 920), (Object & 0x80000000) == 0))
            {
              (*(void (**)(void, void, const char *, const char *, const char ***, __int16 *, char *))(*(void *)(v18 + 104) + 96))(*(void *)(v18 + 88), *(void *)(v18 + 96), "fecfg", "statbnd_enable_nnets", &v36, &v35, &v34);
              if (v35 && v36)
              {
                (*v36)[strlen(*v36) - 1] = 0;
                *(_DWORD *)(v18 + 1456) = strcmp(*v36, "yes") == 0;
              }
              uint64_t Object = fe_phrasing_InitNNPhrasing(v18);
              if ((Object & 0x80000000) == 0)
              {
                uint64_t Object = hlp_useNLUPOSMap(*(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), (_DWORD *)(v18 + 1280));
                if ((Object & 0x80000000) == 0)
                {
                  if (*(_DWORD *)(v18 + 1280) != 1
                    || (uint64_t Object = hlp_loadNLUPOSMap((uint64_t)v42, *(void *)(v18 + 104), *(void *)(v18 + 88), *(void *)(v18 + 96), (uint64_t *)(v18 + 1288)), (Object & 0x80000000) == 0))
                  {
                    fe_phraseing_tryLoadingIGTree(*(_WORD **)(v18 + 8), *(void *)(v18 + 16), *(_WORD **)(v18 + 32), *(void *)(v18 + 40), *(void *)v18, (void *)(v18 + 1648));
                    uint64_t stress_models = load_stress_models(*(_WORD **)(v18 + 8), *(void *)(v18 + 16), *(void *)v18, *(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), a1, a2, (_DWORD *)(v18 + 1680), (void *)(v18 + 1696), (void *)(v18 + 1688), *(void *)(v18 + 1464), (void *)(v18 + 1472), (_OWORD *)(v18 + 1704), (_WORD *)(v18 + 1720), (BOOL *)(v18 + 1684));
                    if ((stress_models & 0x80000000) == 0)
                    {
                      int v30 = 62343;
LABEL_47:
                      *(void *)a5 = v18;
                      *(_DWORD *)(a5 + 8) = v30;
                      return stress_models;
                    }
LABEL_46:
                    fe_phrasing_ObjClose(*(void ***)a5, *(void *)(a5 + 8));
                    uint64_t v18 = 0;
                    int v30 = 0;
                    goto LABEL_47;
                  }
                }
              }
            }
          }
          goto LABEL_45;
        }
      }
      uint64_t Object = paramc_ParamSetUInt(v42[5], (uint64_t)"prmigactive", 1u);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      if (!*(_DWORD *)(v18 + 116)) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
  }
  return inited;
}

uint64_t isCorpusAlignmentEnabled(uint64_t a1, _DWORD *a2)
{
  unsigned int v5 = 0;
  *a2 = 0;
  uint64_t UInt = paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"statpos_do_corpus_alignment", &v5);
  uint64_t result = 0;
  if ((UInt & 0x1FFF) != 0x14)
  {
    uint64_t result = UInt;
    if ((UInt & 0x80000000) == 0)
    {
      uint64_t result = 0;
      if (v5 == 1) {
        *a2 = 1;
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_InitNNPhrasing(uint64_t a1)
{
  uint64_t result = 0;
  uint64_t v15 = 0;
  __int16 v14 = -1;
  char v13 = 0;
  if (*(_DWORD *)(a1 + 1456) == 1)
  {
    uint64_t result = ruleNNInit(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)a1, *(void *)(a1 + 104), *(void *)(a1 + 88), *(void *)(a1 + 96), a1 + 1544, a1 + 1560);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = initFiModel(*(void *)a1, *(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), (_DWORD *)(a1 + 1460), (void *)(a1 + 1448));
      if ((result & 0x80000000) == 0)
      {
        *(void *)(a1 + 1464) = 0;
        *(void *)(a1 + 1472) = safeh_GetNullHandle();
        *(void *)(a1 + 1480) = v3;
        *(_DWORD *)(a1 + 1520) = 1;
        uint64_t result = loadEmbedding(*(void *)(a1 + 8), *(void *)(a1 + 16), (void *)(a1 + 1464), (void *)(a1 + 1472), (uint64_t *)(a1 + 1488), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), (BOOL *)(a1 + 1520));
        if ((result & 0x80000000) == 0)
        {
          uint64_t v4 = (unsigned __int8 *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 1776);
          *(void *)(a1 + 1528) = v4;
          if (v4)
          {
            uint64_t result = load_pw_cfg(*(void *)(a1 + 104), *(void *)(a1 + 88), *(void *)(a1 + 96), v4, *(void *)a1);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = getphraseCfg(*(void *)a1, *(void *)(a1 + 104), *(void *)(a1 + 88), *(void *)(a1 + 96), (unsigned int *)(a1 + 1656), (char **)(a1 + 1664), (char **)(a1 + 1672));
              if ((result & 0x80000000) == 0)
              {
                int v12 = 0;
                *(_DWORD *)(a1 + 1524) = 0;
                uint64_t result = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, char *))(*(void *)(a1 + 104) + 96))(*(void *)(a1 + 88), *(void *)(a1 + 96), "fecfg", "statbnd_nopos", &v15, &v14, &v13);
                if ((result & 0x80000000) == 0)
                {
                  if (v14 == 1)
                  {
                    (*v15)[strlen(*v15) - 1] = 0;
                    if (!strcmp(*v15, "yes")) {
                      *(_DWORD *)(a1 + 1524) = 1;
                    }
                  }
                  uint64_t result = load_pw_igtree_cfg(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), &v12);
                  if ((result & 0x80000000) == 0)
                  {
                    if (v12)
                    {
                      unsigned int v5 = (uint64_t *)(a1 + 1536);
                      uint64_t result = load_pw_igtree(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)a1, (char **)(a1 + 1536));
                      if ((result & 0x80000000) != 0)
                      {
                        if (*v5)
                        {
                          igtree_Deinit(*(void *)a1, *v5, v6, v7, v8, v9, v10, v11);
                          uint64_t result = 0;
                          *(void *)(a1 + 1536) = 0;
                        }
                        else
                        {
                          return 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            return 2315264010;
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_useNLUPOSMap(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a3 + 96))(a1, a2, "fecfg", "nluposmap", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)&__c[1] != 1 || *(void *)&__c[3] == 0) {
      return 0;
    }
    uint64_t v7 = **(const char ***)&__c[3];
    uint64_t v8 = strchr(**(char ***)&__c[3], __c[0]);
    if (v8)
    {
      *uint64_t v8 = 0;
      uint64_t v7 = **(const char ***)&__c[3];
    }
    if (!strcmp(v7, "YES") || !strcmp(v7, "yes"))
    {
      uint64_t result = 0;
      *a4 = 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t hlp_loadNLUPOSMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a2 + 96))(a3, a4, "fecfg", "nluposmapcounter", &__c[3], &__c[1], __c);
  if ((v10 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3] != 0)
  {
    int v12 = **(const char ***)&__c[3];
    char v13 = strchr(**(char ***)&__c[3], __c[0]);
    if (v13)
    {
      *char v13 = 0;
      int v12 = **(const char ***)&__c[3];
    }
    int v14 = (unsigned __int16)atoi(v12);
    if (v14)
    {
      uint64_t v15 = *(void **)(a1 + 8);
      *(void *)uint64_t v27 = ssftmap_ElemCopyString;
      *(void *)&v27[8] = ssftmap_ElemFreeString;
      *(void *)&_OWORD v27[16] = ssftmap_ElemCompareKeysString;
      *(void *)&v27[24] = ssftmap_ElemCopyString;
      uint64_t v28 = ssftmap_ElemFreeString;
      uint64_t v16 = ssftmap_ObjOpen(v15, 0, (long long *)v27, a5);
      if ((v16 & 0x80000000) != 0)
      {
        return v16;
      }
      else
      {
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        int v24 = v14;
        do
        {
          memset(&v27[10], 0, 22);
          strcpy(v27, "nluposmap");
          LH_itoa(v17, v25, 0xAu);
          __strcat_chk();
          *(_WORD *)&__c[1] = -1;
          uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *))(a2 + 96))(a3, a4, "fecfg", v27, &__c[3], &__c[1], __c);
          if ((v10 & 0x80000000) != 0) {
            break;
          }
          if (*(_WORD *)&__c[1])
          {
            __int16 v19 = **(char ***)&__c[3];
            uint64_t v20 = strchr(**(char ***)&__c[3], __c[0]);
            if (v20)
            {
              *uint64_t v20 = 0;
              uint64_t v18 = (uint64_t)(v20 + 1);
            }
            if (v19)
            {
              while (1)
              {
                uint64_t v21 = strchr(v19, 124);
                __int16 v22 = v21;
                if (v21) {
                  *uint64_t v21 = 0;
                }
                uint64_t v10 = ssftmap_Insert(*a5, (uint64_t)v19, v18);
                if ((v10 & 0x80000000) != 0) {
                  return v10;
                }
                __int16 v19 = v22 + 1;
                if (!v22)
                {
                  int v14 = v24;
                  break;
                }
              }
            }
          }
          ++v17;
        }
        while (v17 != v14);
      }
    }
  }
  return v10;
}

uint64_t fe_phraseing_tryLoadingIGTree(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset(v19, 0, sizeof(v19));
  uint64_t v18 = 0;
  *a6 = 0;
  uint64_t result = nn_model_getBrokerString(a5, (char *)v19, (uint64_t)"wprules_", 0x100uLL);
  if ((result & 0x80000000) != 0) {
    goto LABEL_5;
  }
  uint64_t result = igtree_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, &v18, 2, (uint64_t)v19, (uint64_t)"IGTR", 1031, 0);
  if ((result & 0x80000000) != 0)
  {
    uint64_t result = log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 3, 0, (uint64_t)"failed to read IGtree phrasing model data - going on without", v13, v14, v15, v17);
LABEL_5:
    uint64_t v16 = 0;
    goto LABEL_6;
  }
  uint64_t v16 = v18;
LABEL_6:
  *a6 = v16;
  return result;
}

uint64_t fe_phrasing_ObjClose(void **a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62343, 1728);
  if ((result & 0x80000000) != 0) {
    return 2315264008;
  }
  if (a1)
  {
    if (*((_DWORD *)a1 + 40))
    {
      pandpIgtreeDeinit((uint64_t)a1[21], (uint64_t)a1[3], a1 + 115);
      freePandPRules(a1 + 22, v10, v11, v12, v13, v14, v15, v16);
    }
    if (*((_DWORD *)a1 + 364) == 1)
    {
      uint64_t v17 = (uint64_t **)a1[181];
      if (v17)
      {
        if (*v17)
        {
          fi_deinit((uint64_t)*a1, (uint64_t)a1[3], *v17);
          uint64_t v17 = (uint64_t **)a1[181];
        }
        if (!*((_DWORD *)a1 + 365))
        {
          fi_deinit((uint64_t)*a1, (uint64_t)a1[3], v17[1]);
          uint64_t v17 = (uint64_t **)a1[181];
        }
        heap_Free((void *)(*a1)[1], (uint64_t)v17);
        a1[181] = 0;
      }
      uint64_t v18 = a1[183];
      if (v18)
      {
        ((void (*)(void *, void *))v18[3])(a1[186], a1[187]);
        if (*((_DWORD *)a1 + 380)) {
          ((void (*)(void *, void *))a1[183][3])(a1[188], a1[189]);
        }
        if (!*((_DWORD *)a1 + 420))
        {
          a1[183] = 0;
          objc_UnregisterObject((*a1)[6], (uint64_t)"NNWRDLKP");
        }
      }
      uint64_t v19 = (uint64_t)a1[192];
      if (v19)
      {
        igtree_Deinit((uint64_t)*a1, v19, v4, v5, v6, v7, v8, v9);
        heap_Free((void *)(*a1)[1], (uint64_t)a1[192]);
        a1[192] = 0;
      }
      freeSpRules(*a1, (uint64_t)(a1 + 193));
      freePwInObjClose((uint64_t)*a1, (unsigned __int8 *)a1[191], v20, v21, v22, v23, v24, v25);
      freeSPPunc(*a1, (uint64_t)a1[208]);
      freeSPPunc(*a1, (uint64_t)a1[209]);
    }
    if (a1[15]) {
      kbsymtab_UnloadData(a1[1], (int)a1[2], a1[4], (int)a1[5], (uint64_t *)a1 + 15);
    }
    if (a1[16]) {
      accphr_UnloadData(a1[1], (int)a1[2], (uint64_t *)a1 + 16);
    }
    if (a1[7]) {
      objc_ReleaseObject((*a1)[6], (uint64_t)"LINGDB");
    }
    if (a1[10]) {
      objc_ReleaseObject((*a1)[6], (uint64_t)"FE_DEPES");
    }
    if (a1[13]) {
      objc_ReleaseObject((*a1)[6], (uint64_t)"FE_DCTLKP");
    }
    uint64_t v26 = (uint64_t)a1[6];
    if (v26) {
      heap_Free((void *)(*a1)[1], v26);
    }
    if (*((_DWORD *)a1 + 28)) {
      pandpCrfDeinit((uint64_t)a1[21], (uint64_t)a1[3], (uint64_t)(a1 + 115));
    }
    if (*((_DWORD *)a1 + 324) != 1
      || (uint64_t result = nn_phrasing_UnLoad((uint64_t)*a1, (uint64_t)a1[3], (uint64_t)(a1 + 163)), (result & 0x80000000) == 0))
    {
      if (*((_DWORD *)a1 + 320) == 1) {
        ssftmap_ObjClose((uint64_t)a1[161]);
      }
      uint64_t v27 = (uint64_t)a1[206];
      if (v27)
      {
        igtree_Deinit_ReadOnly_DereferenceCnt((uint64_t)*a1, (uint64_t)a1[3], v27);
        a1[206] = 0;
      }
      if (*((_DWORD *)a1 + 420))
      {
        free_stress_model((uint64_t)*a1, (uint64_t)a1[3], (uint64_t)a1[212], (uint64_t)a1[211], (uint64_t)a1[183], (uint64_t)a1[213], (uint64_t)a1[214], v9);
        a1[212] = 0;
        a1[183] = 0;
        objc_UnregisterObject((*a1)[6], (uint64_t)"NNWRDLKP");
      }
      heap_Free((void *)(*a1)[1], (uint64_t)a1);
      return 0;
    }
  }
  return result;
}

uint64_t fe_phrasing_ObjReopen(void **a1, int a2)
{
  uint64_t v3 = 2315264006;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62343, 1728) & 0x80000000) != 0) {
    return 2315264008;
  }
  if (a1)
  {
    if (*((_DWORD *)a1 + 324) == 1)
    {
      uint64_t nn_option = nn_phrasing_UnLoad((uint64_t)*a1, (uint64_t)a1[3], (uint64_t)(a1 + 163));
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
    }
    *((_DWORD *)a1 + 324) = 0;
    uint64_t nn_option = nn_phrasing_checkIfActive(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (_DWORD *)a1 + 324);
    if ((nn_option & 0x80000000) != 0) {
      return nn_option;
    }
    if (*((_DWORD *)a1 + 324) == 1)
    {
      uint64_t nn_option = nn_phrasing_Load(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, (uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], (unsigned __int16 *)a1 + 652);
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
    }
    if (*((_DWORD *)a1 + 28)) {
      pandpCrfDeinit((uint64_t)a1[21], (uint64_t)a1[3], (uint64_t)(a1 + 115));
    }
    uint64_t v5 = a1 + 182;
    if (*((_DWORD *)a1 + 364))
    {
      freeSpRules(*a1, (uint64_t)(a1 + 193));
      uint64_t v6 = (uint64_t)*a1;
      uint64_t v7 = (unsigned __int8 *)a1[191];
      *((void *)v7 + 138) = *a1;
      freePwInObjClose(v6, v7, v8, v9, v10, v11, v12, v13);
      freeSPPunc(*a1, (uint64_t)a1[208]);
      freeSPPunc(*a1, (uint64_t)a1[209]);
      uint64_t v20 = (uint64_t)a1[192];
      if (v20)
      {
        igtree_Deinit((uint64_t)*a1, v20, v14, v15, v16, v17, v18, v19);
        heap_Free((void *)(*a1)[1], (uint64_t)a1[192]);
        a1[192] = 0;
      }
      uint64_t v21 = (uint64_t)a1[206];
      if (v21)
      {
        igtree_Deinit_ReadOnly_DereferenceCnt((uint64_t)*a1, (uint64_t)a1[3], v21);
        a1[206] = 0;
      }
      if (*((_DWORD *)a1 + 420))
      {
        free_stress_model((uint64_t)*a1, (uint64_t)a1[3], (uint64_t)a1[212], (uint64_t)a1[211], (uint64_t)a1[183], (uint64_t)a1[213], (uint64_t)a1[214], v19);
        *(_OWORD *)(a1 + 211) = 0u;
      }
      uint64_t nn_option = load_nn_option(a1, (int *)a1 + 364);
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
      if (*v5)
      {
        uint64_t nn_option = nnEmbeddingReLoad((uint64_t)a1[1], (uint64_t)a1[2], a1 + 183, (uint64_t *)a1 + 184, (uint64_t *)a1 + 186, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (BOOL *)a1 + 380);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t nn_option = nnModelReload((uint64_t)*a1, a1[1], (uint64_t)a1[2], (uint64_t)a1[3], a1[4], (uint64_t)a1[5], (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (_DWORD *)a1 + 365, (uint64_t ***)a1 + 181);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t nn_option = ruleNNInit(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)(a1 + 193), (uint64_t)(a1 + 195));
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t v22 = (unsigned __int8 *)heap_Calloc((void *)(*a1)[1], 1, 1776);
        a1[191] = v22;
        uint64_t nn_option = load_pw_cfg((uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], v22, (uint64_t)*a1);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t nn_option = getphraseCfg((uint64_t)*a1, (uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], (unsigned int *)a1 + 414, (char **)a1 + 208, (char **)a1 + 209);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        int v51 = 0;
        uint64_t nn_option = load_pw_igtree_cfg((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], &v51);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        if (v51)
        {
          uint64_t v23 = (uint64_t *)(a1 + 192);
          if ((load_pw_igtree(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (char **)a1 + 192) & 0x80000000) != 0)
          {
            if (*v23)
            {
              igtree_Deinit((uint64_t)*a1, *v23, v24, v25, v26, v27, v28, v29);
              a1[192] = 0;
            }
          }
        }
        fe_phraseing_tryLoadingIGTree(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, a1 + 206);
      }
      else
      {
        uint64_t nn_option = releaseEmbedding((uint64_t)(a1 + 183), (uint64_t *)a1 + 184, a1 + 186, (_DWORD *)a1 + 380);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t nn_option = releaseFIModel((uint64_t)*a1, (uint64_t)a1[3], *((_DWORD *)a1 + 365), (uint64_t *)a1 + 181);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
      }
      a1[213] = (void *)safeh_GetNullHandle();
      a1[214] = v31;
      *((_DWORD *)a1 + 420) = 0;
      uint64_t nn_option = load_stress_models(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], a1[4], (uint64_t)a1[5], (_DWORD *)a1 + 420, a1 + 212, a1 + 211, (uint64_t)a1[183], a1 + 184, a1 + 213, (_WORD *)a1 + 860, (BOOL *)a1 + 421);
    }
    else
    {
      uint64_t nn_option = load_nn_option(a1, (int *)a1 + 364);
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
      if (!*v5) {
        goto LABEL_39;
      }
      uint64_t nn_option = fe_phrasing_InitNNPhrasing((uint64_t)a1);
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
      fe_phraseing_tryLoadingIGTree(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, a1 + 206);
      a1[213] = (void *)safeh_GetNullHandle();
      a1[214] = v30;
      *((_DWORD *)a1 + 420) = 0;
      uint64_t nn_option = load_stress_models(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], a1[4], (uint64_t)a1[5], (_DWORD *)a1 + 420, a1 + 212, a1 + 211, (uint64_t)a1[183], a1 + 184, a1 + 213, (_WORD *)a1 + 860, (BOOL *)a1 + 421);
    }
    if ((nn_option & 0x80000000) != 0) {
      return nn_option;
    }
LABEL_39:
    unsigned int v32 = a1 + 20;
    if (*((_DWORD *)a1 + 40) == 1)
    {
      pandpIgtreeDeinit((uint64_t)a1[21], (uint64_t)a1[3], a1 + 115);
      freePandPRules(a1 + 22, v33, v34, v35, v36, v37, v38, v39);
    }
    bzero(a1 + 22, 0x298uLL);
    uint64_t nn_option = usePandP(*a1, (_DWORD *)a1 + 40);
    if ((nn_option & 0x80000000) != 0) {
      return nn_option;
    }
    if (*v32 != 1) {
      goto LABEL_48;
    }
    uint64_t PandPRules = paramc_ParamSetUInt((*a1)[5], (uint64_t)"prmigactive", 1u);
    if ((PandPRules & 0x80000000) == 0)
    {
      uint64_t PandPRules = pandpIgtreeInit(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, (uint64_t)a1[3], a1 + 115);
      if ((PandPRules & 0x80000000) == 0)
      {
        a1[75] = 0;
        *((_DWORD *)a1 + 152) = 0;
        uint64_t PandPRules = nuance_pcre_ObjOpen(a1[1], (int)a1[2], (uint64_t)(a1 + 75));
        if ((PandPRules & 0x80000000) == 0)
        {
          uint64_t PandPRules = nuance_pcre_Init(a1[75], (int)a1[76], 0x1Eu, 50);
          if ((PandPRules & 0x80000000) == 0)
          {
            uint64_t v42 = (uint64_t)*a1;
            uint64_t v41 = a1[1];
            a1[21] = *a1;
            uint64_t PandPRules = readPandPRules(v41, (uint64_t)a1[2], v42, (uint64_t)(a1 + 22));
            if ((PandPRules & 0x80000000) == 0)
            {
LABEL_48:
              uint64_t v43 = (int *)a1 + 29;
              int v44 = *((_DWORD *)a1 + 29);
              uint64_t nn_option = com_mosynt_UseMosynt((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (BOOL *)a1 + 29);
              if ((nn_option & 0x80000000) != 0) {
                return nn_option;
              }
              int v45 = *v43;
              if (v44 == 1)
              {
                if (v45 == 1) {
                  goto LABEL_58;
                }
                if (!v45)
                {
                  uint64_t nn_option = paramc_ParamSetUInt((*a1)[5], (uint64_t)"prmigactive", 1u);
                  if ((nn_option & 0x80000000) != 0) {
                    return nn_option;
                  }
                  if (a1[15])
                  {
                    uint64_t nn_option = kbsymtab_UnloadData(a1[1], (int)a1[2], a1[4], (int)a1[5], (uint64_t *)a1 + 15);
                    a1[15] = 0;
                    if ((nn_option & 0x80000000) != 0) {
                      return nn_option;
                    }
                  }
                  if (a1[16])
                  {
                    uint64_t nn_option = accphr_UnloadData(a1[1], (int)a1[2], (uint64_t *)a1 + 16);
                    a1[16] = 0;
                    if ((nn_option & 0x80000000) != 0) {
                      return nn_option;
                    }
                  }
                  if (*v43 == 1)
                  {
LABEL_58:
                    __s1 = 0;
                    if (a1[15])
                    {
                      uint64_t nn_option = kbsymtab_UnloadData(a1[1], (int)a1[2], a1[4], (int)a1[5], (uint64_t *)a1 + 15);
                      a1[15] = 0;
                      if ((nn_option & 0x80000000) != 0) {
                        return nn_option;
                      }
                    }
                    if (a1[16])
                    {
                      uint64_t nn_option = accphr_UnloadData(a1[1], (int)a1[2], (uint64_t *)a1 + 16);
                      a1[16] = 0;
                      if ((nn_option & 0x80000000) != 0) {
                        return nn_option;
                      }
                    }
LABEL_66:
                    uint64_t nn_option = com_mosynt_GetCfgParamVal((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (uint64_t)"mosynt_enablegraphsymcache", "yes", &__s1);
                    if ((nn_option & 0x80000000) == 0)
                    {
                      BOOL v46 = strcmp(__s1, "yes") == 0;
                      uint64_t nn_option = kbsymtab_LoadData(a1[1], (int)a1[2], a1[4], (int)a1[5], (uint64_t *)a1 + 15, v46);
                      if ((nn_option & 0x80000000) == 0)
                      {
                        uint64_t nn_option = accphr_LoadData(a1[1], (uint64_t)a1[2], (uint64_t *)a1 + 16);
                        if ((nn_option & 0x80000000) == 0) {
                          goto LABEL_69;
                        }
                      }
                    }
                    return nn_option;
                  }
                }
              }
              else if (v45 == 1)
              {
                __s1 = 0;
                goto LABEL_66;
              }
LABEL_69:
              uint64_t nn_option = com_IncludeCRF((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (BOOL *)a1 + 28);
              if ((nn_option & 0x80000000) == 0)
              {
                if (!*((_DWORD *)a1 + 28)
                  || (uint64_t v47 = (uint64_t)*a1,
                      a1[21] = *a1,
                      pandpCrfDeinit(v47, (uint64_t)a1[3], (uint64_t)(a1 + 115)),
                      uint64_t nn_option = pandpCrfInit(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, (uint64_t)a1[3], (uint64_t)a1[13], v48, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)(a1 + 115)), (nn_option & 0x80000000) == 0))
                {
                  if (*((_DWORD *)a1 + 320) == 1) {
                    ssftmap_ObjClose((uint64_t)a1[161]);
                  }
                  uint64_t nn_option = hlp_useNLUPOSMap((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (_DWORD *)a1 + 320);
                  if ((nn_option & 0x80000000) == 0)
                  {
                    if (*((_DWORD *)a1 + 320) != 1) {
                      return 0;
                    }
                    return hlp_loadNLUPOSMap((uint64_t)*a1, (uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t *)a1 + 161);
                  }
                }
              }
              return nn_option;
            }
          }
        }
      }
    }
    uint64_t v3 = PandPRules;
    *unsigned int v32 = 0;
  }
  return v3;
}

uint64_t load_nn_option(void *a1, int *a2)
{
  uint64_t v8 = 0;
  unsigned __int16 v7 = -1;
  char v6 = 0;
  *a2 = 0;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, unsigned __int16 *, char *))(a1[13] + 96))(a1[11], a1[12], "fecfg", "statbnd_enable_nnets", &v8, &v7, &v6);
  if ((v3 & 0x80000000) == 0)
  {
    int v4 = v7;
    if (v7)
    {
      (*v8)[strlen(*v8) - 1] = 0;
      int v4 = strcmp(*v8, "yes") == 0;
    }
    *a2 = v4;
  }
  return v3;
}

uint64_t fe_phrasing_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62343, 1728);
  if ((result & 0x80000000) != 0) {
    return 2315264008;
  }
  if (*(_DWORD *)(a1 + 160))
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)(a1 + 96);
    uint64_t v6 = *(void *)(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 88);
    return setParams(v4, v7, v5, v6, a1 + 176);
  }
  return result;
}

uint64_t fe_phrasing_Process_PandP(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if ((safeh_HandleCheck(a1, a2, 62343, 1728) & 0x80000000) != 0) {
    return 2315264008;
  }
  *a5 = 1;
  uint64_t SentenceData = getSentenceData(*(void *)a1, *(void *)(a1 + 48), *(void *)(a1 + 56), a3, a4, a1 + 168, *(uint64_t **)(a1 + 120), 0);
  if ((SentenceData & 0x80000000) == 0 && *(_WORD *)(a1 + 848))
  {
    getProsodicStructure(a1 + 168, v9, v10, v11, v12, v13, v14, v15);
    if ((Prominence & 0x80000000) == 0)
    {
      uint64_t Prominence = getProminence(a1 + 168, v18, v19, v20, v21, v22, v23, v24);
      if ((Prominence & 0x80000000) == 0) {
        uint64_t Prominence = updateLingdb(*(void *)(a1 + 56), a3, a4, a1 + 168);
      }
    }
    uint64_t SentenceData = Prominence;
  }
  freeSentenceData(a1 + 168);
  freeProsodicStructure((void *)(a1 + 168));
  return SentenceData;
}

uint64_t fe_phrasing_Process_Mosynt(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __int16 v31 = 0;
  uint64_t PhrasingOutput = 2315264010;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62343, 1728) & 0x80000000) != 0) {
    return 2315264008;
  }
  uint64_t v33 = 0;
  unsigned int __s = 0;
  int v32 = 0;
  *a5 = 1;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a3, a4, 1, 0, (char *)&v32 + 2);
  if ((v10 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1[7] + 184))(a3, a4, HIWORD(v32), 0, &v31) & 0x80000000) == 0&& v31 == 1)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1[7] + 176))(a3, a4, HIWORD(v32), 0, &__s, &v32);
    if ((v10 & 0x80000000) == 0 && (unsigned __int16)v32 >= 2u)
    {
      unsigned __int16 v11 = strlen(__s);
      uint64_t v12 = (void *)heap_Alloc(*(void *)(*a1 + 8), v11 + 1);
      if (v12)
      {
        uint64_t v17 = (uint64_t)v12;
        memset(v12, 32, v11);
        *(unsigned char *)(v17 + v11) = 0;
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a3, a4, HIWORD(v32), 2, &v33, &v32);
        if ((v18 & 0x80000000) != 0)
        {
          uint64_t PhrasingOutput = v18;
          goto LABEL_29;
        }
        uint64_t v19 = (_OWORD *)heap_Alloc(*(void *)(*a1 + 8), 32);
        if (!v19)
        {
          log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v20, v21, v22, v23, v27);
          goto LABEL_29;
        }
        uint64_t v24 = (uint64_t)v19;
        *uint64_t v19 = 0u;
        v19[1] = 0u;
        uint64_t started = mosynt_StartAccentPhrasing(a1[6], a1[11], a1[12], a1[13], (uint64_t *)a1[15], a1[16], (uint64_t)v19);
        if ((started & 0x80000000) == 0)
        {
          uint64_t started = fe_phrasing_mosynt_SetupInput((uint64_t)a1, a3, a4, HIWORD(v32), v24);
          if ((started & 0x80000000) == 0)
          {
            mosynt_DoAccentPhrasing(a1[6], v24, v33);
            if ((started & 0x80000000) == 0)
            {
              uint64_t started = fe_phrasing_mosynt_SetProminenceValues((uint64_t)a1, a3, a4, HIWORD(v32), v24);
              if ((started & 0x80000000) == 0)
              {
                __int16 v30 = 0;
                uint64_t started = fe_phrasing_mosynt_DeleteAuxWords(a1, a3, a4, HIWORD(v32), v17, &v30);
                if ((started & 0x80000000) == 0)
                {
                  __int16 v28 = 0;
                  uint64_t started = fe_phrasing_mosynt_SplitWords(a1, a3, a4, HIWORD(v32), v17, &v28);
                  if ((started & 0x80000000) == 0)
                  {
                    __int16 v29 = 0;
                    uint64_t started = fe_phrasing_mosynt_MeltClitics(a1, a3, a4, HIWORD(v32), v17, &v29);
                    if ((started & 0x80000000) == 0)
                    {
                      uint64_t PhrasingOutput = fe_phrasing_mosynt_CreatePhrasingOutput((uint64_t)a1, a3, a4, HIWORD(v32), v24);
                      if ((PhrasingOutput & 0x80000000) != 0 || !v28 && !v30 && !v29) {
                        goto LABEL_23;
                      }
                      uint64_t started = fe_phrasing_mosynt_AdjustSentenceAndMarkers(a1, a3, a4, HIWORD(v32), v11, (unsigned __int16)(v28 + v11 - (v30 + v29)), v17);
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t PhrasingOutput = started;
LABEL_23:
        mosynt_FinishAccentPhrasing(a1[6], v24);
        heap_Free(*(void **)(*a1 + 8), v24);
LABEL_29:
        heap_Free(*(void **)(*a1 + 8), v17);
        return PhrasingOutput;
      }
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, v27);
      return 2315264010;
    }
  }
  return v10;
}

uint64_t fe_phrasing_mosynt_SetupInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v24 = 0;
  memset(v23, 0, sizeof(v23));
  __int16 v21 = 0;
  uint64_t v18 = 0;
  unsigned int __s = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, int *))(*(void *)(a1 + 56) + 176))(a2, a3, a4, 0, &v18, &v24);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, a4, (char *)&v24 + 2);
    if ((result & 0x80000000) == 0)
    {
      unsigned __int16 v22 = 0;
      unsigned __int16 v11 = HIWORD(v24);
      if (HIWORD(v24))
      {
        unsigned __int16 v12 = 0;
        int v13 = 0;
        int v20 = 0;
        while (1)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, _WORD *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v11, 0, 1, &v23[1], &v24);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (*(_DWORD *)&v23[1] > 0xAu || ((1 << SLOBYTE(v23[1])) & 0x610) == 0)
          {
            uint64_t v17 = HIWORD(v24);
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, _WORD *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v24), 1, 1, v23, &v24);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v24), 2, 1, &v22, &v24);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 56)
                                                                                                  + 176))(a2, a3, HIWORD(v24), 3, &__s, &v24);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (v12)
            {
              uint64_t result = hlp_ReadSildur(a1, a2, a3, v12, &v21, &v20);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              if (v20 && v21) {
                mosynt_InsertAccPhrPunct(*(void *)(a1 + 48), a5, v13 + 1, 44);
              }
            }
            mosynt_InsertAccPhrTermWord(*(void *)(a1 + 48), a5, v23[0], v22 + 1, HIWORD(v24), __s);
            if (v22)
            {
              char v15 = *(unsigned char *)(v18 + v22 - 1);
              if (mosynt_IsPunctChar(*(void *)(a1 + 48), a5, v15)) {
                mosynt_InsertAccPhrPunct(*(void *)(a1 + 48), a5, v22 + 1, v15);
              }
              int v13 = v22;
              if (v22)
              {
                if (!*(unsigned char *)(v18 + v22))
                {
                  BOOL IsPunctChar = mosynt_IsPunctChar(*(void *)(a1 + 48), a5, *(char *)(v18 + v22 - 1));
                  int v13 = v22;
                  if (!IsPunctChar)
                  {
                    mosynt_InsertAccPhrPunct(*(void *)(a1 + 48), a5, v22 + 1, 46);
                    int v13 = v22;
                  }
                }
              }
            }
            else
            {
              int v13 = 0;
            }
            uint64_t v17 = HIWORD(v24);
            unsigned __int16 v12 = HIWORD(v24);
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 120))(a2, a3, v17, (char *)&v24 + 2);
          if ((result & 0x80000000) == 0)
          {
            unsigned __int16 v11 = HIWORD(v24);
            if (HIWORD(v24)) {
              continue;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_mosynt_SetProminenceValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned __int16 v17 = 0;
  __int16 v16 = 0;
  int v14 = 0;
  unsigned int v15 = 0;
  __int16 v13 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56)
                                                                                             + 104))(a2, a3, 2, a4, &v17);
  if ((result & 0x80000000) == 0)
  {
    for (unsigned __int16 i = v17; v17; unsigned __int16 i = v17)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, i, 0, 1, &v15, &v16);
      if ((result & 0x80000000) != 0) {
        break;
      }
      if (v15 <= 0xA && ((1 << v15) & 0x610) != 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v17, 1, 1, (char *)&v14 + 2, &v16);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = mosynt_GetWordProminence(*(void *)(a1 + 48), a5, HIWORD(v14), &v14);
        if ((result & 0x80000000) != 0) {
          break;
        }
        LH_itoa((unsigned __int16)v14, __s, 0xAu);
        __int16 v12 = strlen(__s);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, v17, 13, (unsigned __int16)(v12 + 1), __s, &v13);
        if ((result & 0x80000000) != 0) {
          break;
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a2, a3, v17, &v17);
      if ((result & 0x80000000) != 0) {
        break;
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_mosynt_DeleteAuxWords(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  int v40 = 0;
  __int16 v39 = 0;
  int v37 = 0;
  unsigned int v38 = 0;
  uint64_t v35 = 0;
  __s1 = 0;
  int v34 = 0;
  *a6 = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, int *))(a1[7] + 176))(a2, a3, a4, 0, &v35, &v40);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, a4, (char *)&v40 + 2);
  if ((v13 & 0x80000000) == 0 && HIWORD(v40))
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
    if ((v12 & 0x80000000) == 0)
    {
      int v14 = 0;
      while (1)
      {
        if (v38 > 0xA || ((1 << v38) & 0x610) == 0) {
          goto LABEL_18;
        }
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[7] + 168))(a2, a3, HIWORD(v40), 1, 1, (char *)&v37 + 2, &v40);
        if ((v16 & 0x80000000) != 0
          || (uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a2, a3, HIWORD(v40), 2, 1, &v37, &v40), (v16 & 0x80000000) != 0)|| (uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v40), 3, &__s1, &v40), (v16 & 0x80000000) != 0))
        {
LABEL_37:
          uint64_t v13 = v16;
LABEL_38:
          if (!v14) {
            return v13;
          }
LABEL_39:
          heap_Free(*(void **)(*a1 + 8), (uint64_t)v14);
          return v13;
        }
        if (!strstr(__s1, "{DEL}")) {
          goto LABEL_18;
        }
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 312))(a2, a3, HIWORD(v37), &v34);
        if ((v16 & 0x80000000) != 0) {
          goto LABEL_37;
        }
        if (v34) {
          break;
        }
        uint64_t v26 = HIWORD(v37);
        uint64_t v27 = (unsigned __int16)v37;
        if (HIWORD(v37) < (unsigned __int16)v37)
        {
          __int16 v28 = (unsigned char *)(a5 + HIWORD(v37));
          unint64_t v29 = (unsigned __int16)v37 - (unint64_t)HIWORD(v37);
          do
          {
            *v28++ = 100;
            ++*a6;
            --v29;
          }
          while (v29);
        }
        uint64_t v25 = HIWORD(v40);
        int v30 = *(unsigned __int8 *)(v35 + v27);
        if (v30 != 32 && v30 != 95)
        {
          if (!v26) {
            goto LABEL_19;
          }
          int v31 = *(unsigned __int8 *)(v35 + (v26 - 1));
          if (v31 != 95 && v31 != 32) {
            goto LABEL_19;
          }
          uint64_t v27 = v26 - 1;
        }
        *(unsigned char *)(a5 + v27) = 100;
        ++*a6;
LABEL_19:
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a2, a3, HIWORD(v40), (char *)&v40 + 2);
        if ((v13 & 0x80000000) != 0) {
          goto LABEL_38;
        }
        if (v25)
        {
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[7] + 192))(a2, a3, v25);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_38;
          }
        }
        if (!HIWORD(v40)) {
          goto LABEL_38;
        }
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
        if ((v16 & 0x80000000) != 0) {
          goto LABEL_37;
        }
      }
      unsigned __int16 v17 = (char *)heap_Alloc(*(void *)(*a1 + 8), 5000);
      if (!v17)
      {
        log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v18, v19, v20, v21, v33);
        return 2315264010;
      }
      int v14 = v17;
      unsigned __int16 v22 = strcpy(v17, __s1);
      mosynt_RemoveAllSubstrOcc(v22, "{DEL}");
      __int16 v23 = strlen(v14);
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(a1[7] + 160))(a2, a3, HIWORD(v40), 3, (unsigned __int16)(v23 + 1), v14, &v39);
      if ((v24 & 0x80000000) != 0)
      {
        uint64_t v13 = v24;
        goto LABEL_39;
      }
LABEL_18:
      uint64_t v25 = 0;
      goto LABEL_19;
    }
    return v12;
  }
  return v13;
}

uint64_t fe_phrasing_mosynt_SplitWords(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  uint64_t v6 = a6;
  int v87 = 0;
  __int16 v86 = 0;
  int v84 = 0;
  unsigned int v85 = 0;
  int v83 = 0;
  uint64_t v82 = 0;
  unsigned __int16 v81 = 0;
  unsigned int v79 = 0;
  int v80 = 0;
  int v77 = 0;
  int v78 = 0;
  __int16 v76 = 0;
  unsigned int __s = 0;
  long long v75 = 0;
  *a6 = 0;
  if ((com_mosynt_GetCfgParamVal(a1[11], a1[12], a1[13], (uint64_t)"fephrase_max_utf8_sym", "5", &v75) & 0x80000000) != 0) {
    uint64_t v12 = 5;
  }
  else {
    uint64_t v12 = atoi(v75);
  }
  uint64_t v13 = heap_Alloc(*(void *)(*a1 + 8), v12);
  uint64_t v18 = *a1;
  if (v13)
  {
    uint64_t v19 = (char *)v13;
    uint64_t v20 = heap_Alloc(*(void *)(v18 + 8), 5000);
    if (!v20)
    {
      uint64_t v27 = 2315264010;
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v21, v22, v23, v24, v61);
LABEL_107:
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v19);
      return v27;
    }
    uint64_t v25 = (const char *)v20;
    uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, int *))(a1[7] + 176))(a2, a3, a4, 0, &v82, &v87);
    if ((UTF8Char & 0x80000000) == 0)
    {
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, a4, (char *)&v87 + 2);
      if ((v27 & 0x80000000) != 0) {
        goto LABEL_106;
      }
      unsigned __int16 v28 = HIWORD(v87);
      if (!HIWORD(v87)) {
        goto LABEL_106;
      }
      uint64_t v62 = a5;
      while (1)
      {
        uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1[7] + 168))(a2, a3, v28, 0, 1, &v85, &v87);
        if ((UTF8Char & 0x80000000) != 0) {
          break;
        }
        if (v85 <= 0xA && ((1 << v85) & 0x610) != 0)
        {
          uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[7] + 168))(a2, a3, HIWORD(v87), 1, 1, (char *)&v84 + 2, &v87);
          if ((UTF8Char & 0x80000000) != 0) {
            break;
          }
          uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a2, a3, HIWORD(v87), 2, 1, &v84, &v87);
          if ((UTF8Char & 0x80000000) != 0) {
            break;
          }
          uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v87), 3, &v83, &v87);
          if ((UTF8Char & 0x80000000) != 0) {
            break;
          }
          int v77 = 0;
          int v30 = (unsigned __int8 *)strstr(v83, "{SEP");
          if (v30)
          {
            uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 312))(a2, a3, HIWORD(v84), &v77);
            if ((UTF8Char & 0x80000000) != 0) {
              break;
            }
            uint64_t v63 = v6;
            unsigned int v31 = v30[4] - 48;
            if (v31 <= 9 && v30[5] == 125 && v30[6])
            {
              unsigned int v32 = (unsigned __int16)((_WORD)v30 - (_WORD)v83);
            }
            else
            {
              LOWORD(v31) = 0;
              unsigned int v32 = 0;
            }
            unsigned int v33 = HIWORD(v84);
            uint64_t UTF8Char = utf8_getUTF8Char(v82, HIWORD(v84), v19);
            if ((UTF8Char & 0x80000000) != 0) {
              break;
            }
            unsigned int v67 = v32;
            uint64_t v65 = v25;
            if (v33 < (unsigned __int16)v84)
            {
              unsigned __int16 v34 = 0;
              while (1)
              {
                if (*v19) {
                  BOOL v35 = v34 >= (unsigned __int16)v31;
                }
                else {
                  BOOL v35 = 1;
                }
                char v36 = v35;
                if (v35)
                {
LABEL_41:
                  __int16 v38 = v33;
                  goto LABEL_44;
                }
                v33 += strlen(v19);
                uint64_t v37 = utf8_getUTF8Char(v82, (unsigned __int16)v33, v19);
                if ((v37 & 0x80000000) != 0) {
                  break;
                }
                ++v34;
                while (!strcmp(v19, "-"))
                {
                  v33 += strlen(v19);
                  uint64_t v37 = utf8_getUTF8Char(v82, (unsigned __int16)v33, v19);
                  if ((v37 & 0x80000000) != 0) {
                    goto LABEL_109;
                  }
                }
                if ((unsigned __int16)v84 <= (unsigned __int16)v33) {
                  goto LABEL_41;
                }
              }
LABEL_109:
              uint64_t v27 = v37;
              uint64_t v25 = v65;
              goto LABEL_106;
            }
            unsigned __int16 v34 = 0;
            char v36 = 0;
            __int16 v38 = v33;
LABEL_44:
            if (v34 == (unsigned __int16)v31)
            {
              char v41 = v36 ^ 1;
              if (HIWORD(v84) >= (unsigned __int16)v33) {
                char v41 = 1;
              }
              __int16 v42 = v38 - HIWORD(v84);
              if (v41) {
                __int16 v39 = 0;
              }
              else {
                __int16 v39 = v42;
              }
            }
            else
            {
              __int16 v39 = 0;
            }
            uint64_t v6 = v63;
            uint64_t v25 = v65;
            unsigned int v40 = v67;
          }
          else
          {
            __int16 v39 = 0;
            unsigned int v40 = 0;
          }
          if (!v77 && v39 && v40)
          {
            long long v72 = 0;
            long long v73 = 0;
            unsigned __int16 v71 = 0;
            BOOL v43 = (*(int (**)(uint64_t, uint64_t, void, uint64_t, int *))(a1[7] + 184))(a2, a3, HIWORD(v87), 14, &v87) >= 0&& (unsigned __int16)v87 == 1;
            int v44 = v43;
            if (v43)
            {
              uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v87), 14, &v73, &v87);
              if ((UTF8Char & 0x80000000) != 0) {
                break;
              }
              hlp_NLUStrFind(v73, "POS", (uint64_t *)&v72, &v71);
            }
            unsigned int v68 = v40;
            HIWORD(v78) = HIWORD(v87);
            unsigned __int16 v45 = HIWORD(v87);
            LOWORD(v78) = HIWORD(v84);
            if (HIWORD(v87))
            {
              while (1)
              {
                unsigned __int16 v46 = v45;
                uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a2, a3, v45, (char *)&v78 + 2);
                if ((UTF8Char & 0x80000000) != 0) {
                  goto LABEL_105;
                }
                if (!HIWORD(v78)) {
                  goto LABEL_76;
                }
                uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
                if ((UTF8Char & 0x80000000) != 0) {
                  goto LABEL_105;
                }
                unsigned __int16 v45 = HIWORD(v78);
                if (!HIWORD(v78) || (unsigned __int16)v78 != HIWORD(v84)) {
                  goto LABEL_76;
                }
              }
            }
            unsigned __int16 v46 = 0;
LABEL_76:
            uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 80))(a2, a3, v46, &v81);
            if ((UTF8Char & 0x80000000) != 0) {
              break;
            }
            hlp_CopyWordRec((uint64_t)a1, a2, a3, HIWORD(v87), v81);
            unsigned int v48 = (unsigned __int16)v84;
            LOWORD(v84) = HIWORD(v84) + v39;
            uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1[7] + 160))(a2, a3, HIWORD(v87), 2, 1, &v84, &v86);
            if ((UTF8Char & 0x80000000) != 0) {
              break;
            }
            uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1[7] + 160))(a2, a3, v81, 1, 1, &v84, &v86);
            if ((UTF8Char & 0x80000000) != 0) {
              break;
            }
            unsigned int v66 = v48;
            if (v71) {
              int v49 = v44;
            }
            else {
              int v49 = 0;
            }
            unsigned int v50 = v68;
            if (v49 == 1)
            {
              *(void *)uint64_t v69 = 0;
              *(void *)long long v70 = 0;
              uint64_t UTF8Char = hlp_splitNLURangeTags(a1, v73, (unsigned __int8 **)v70, (unsigned __int8 **)v69);
              if ((UTF8Char & 0x80000000) != 0) {
                break;
              }
              uint64_t SubPosForSEPX = hlp_GetSubPosForSEPX((uint64_t)a1, HIWORD(v84), (unsigned __int16)v84, v82, v72, v71, 0, &__s);
              uint64_t v52 = __s;
              if ((SubPosForSEPX & 0x80000000) != 0) {
                goto LABEL_110;
              }
              uint64_t v53 = *(const char **)v70;
              hlp_NLUStrSet(*(char **)v70, "POS", __s);
              __int16 v54 = strlen(v53);
              uint64_t v64 = (uint64_t)v53;
              uint64_t SubPosForSEPX = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(a1[7] + 160))(a2, a3, HIWORD(v87), 14, (unsigned __int16)(v54 + 1), v53, &v86);
              if ((SubPosForSEPX & 0x80000000) != 0) {
                goto LABEL_110;
              }
              if (v52)
              {
                heap_Free(*(void **)(*a1 + 8), (uint64_t)v52);
                unsigned int __s = 0;
              }
              uint64_t SubPosForSEPX = hlp_GetSubPosForSEPX((uint64_t)a1, (unsigned __int16)v84, v66, v82, v72, v71, 1, &__s);
              uint64_t v52 = __s;
              if ((SubPosForSEPX & 0x80000000) != 0
                || (uint64_t v55 = *(const char **)v69,
                    hlp_NLUStrSet(*(char **)v69, "POS", __s),
                    __int16 v56 = strlen(v55),
                    uint64_t SubPosForSEPX = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(a1[7] + 160))(a2, a3, v81, 14, (unsigned __int16)(v56 + 1), v55, &v86), (SubPosForSEPX & 0x80000000) != 0))
              {
LABEL_110:
                uint64_t v27 = SubPosForSEPX;
                if (v52) {
                  heap_Free(*(void **)(*a1 + 8), (uint64_t)v52);
                }
                goto LABEL_106;
              }
              if (v52)
              {
                heap_Free(*(void **)(*a1 + 8), (uint64_t)v52);
                unsigned int __s = 0;
              }
              unsigned int v50 = v68;
              if (v64) {
                heap_Free(*(void **)(*a1 + 8), v64);
              }
              if (v55) {
                heap_Free(*(void **)(*a1 + 8), (uint64_t)v55);
              }
            }
            unsigned int v79 = 0;
            mosynt_App((uint64_t)v25, 5000, &v79, v83, &v80);
            v25[v50] = 0;
            __int16 v57 = strlen(v25);
            uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(a1[7] + 160))(a2, a3, HIWORD(v87), 3, (unsigned __int16)(v57 + 1), v25, &v86);
            if ((UTF8Char & 0x80000000) != 0) {
              break;
            }
            unsigned int v58 = &v83[v50 + 6];
            __int16 v59 = strlen(v58);
            uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(a1[7] + 160))(a2, a3, v81, 3, (unsigned __int16)(v59 + 1), v58, &v86);
            if ((UTF8Char & 0x80000000) != 0) {
              break;
            }
            uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1[7] + 160))(a2, a3, HIWORD(v87), 8, 1, &v76, &v86);
            if ((UTF8Char & 0x80000000) != 0) {
              break;
            }
            *(unsigned char *)(v62 + (unsigned __int16)v84) = 105;
            ++*v6;
          }
          else if (v30)
          {
            unsigned int v79 = 0;
            mosynt_App((uint64_t)v25, 5000, &v79, v83, &v80);
            unsigned int v79 = v40;
            mosynt_App((uint64_t)v25, 5000, &v79, v30 + 6, &v80);
            __int16 v47 = strlen(v25);
            uint64_t UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(a1[7] + 160))(a2, a3, HIWORD(v87), 3, (unsigned __int16)(v47 + 1), v25, &v86);
            if ((UTF8Char & 0x80000000) != 0) {
              break;
            }
          }
        }
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a2, a3, HIWORD(v87), (char *)&v87 + 2);
        if ((v27 & 0x80000000) == 0)
        {
          unsigned __int16 v28 = HIWORD(v87);
          if (HIWORD(v87)) {
            continue;
          }
        }
        goto LABEL_106;
      }
    }
LABEL_105:
    uint64_t v27 = UTF8Char;
LABEL_106:
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v25);
    goto LABEL_107;
  }
  uint64_t v27 = 2315264010;
  log_OutPublic(*(void *)(v18 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v61);
  return v27;
}

uint64_t fe_phrasing_mosynt_MeltClitics(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  int v55 = 0;
  __int16 v54 = 0;
  unsigned int v53 = 0;
  unsigned __int16 v52 = 0;
  unsigned __int16 v51 = 0;
  unsigned int v48 = 0;
  unsigned int __s = 0;
  uint64_t v47 = 0;
  int v46 = 0;
  uint64_t v45 = 0;
  *a6 = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, int *))(a1[7] + 176))(a2, a3, a4, 0, &v45, &v55);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  uint64_t v13 = heap_Alloc(*(void *)(*a1 + 8), 5000);
  if (v13)
  {
    uint64_t v18 = (char *)v13;
    __int16 v50 = 0;
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, a4, (char *)&v55 + 2);
    if ((v19 & 0x80000000) == 0)
    {
      uint64_t v41 = a5;
      __int16 v42 = a6;
      if (HIWORD(v55))
      {
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
        if ((v20 & 0x80000000) == 0)
        {
          uint64_t v43 = 0;
          uint64_t v21 = 0;
          int v22 = 0;
          do
          {
            if (v53 > 0xA || ((1 << v53) & 0x610) == 0)
            {
              uint64_t v32 = 0;
              uint64_t v33 = HIWORD(v55);
              uint64_t v34 = v21;
            }
            else
            {
              uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 168))(a2, a3, HIWORD(v55), 1, 1, &v52, &v55);
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 168))(a2, a3, HIWORD(v55), 2, 1, &v51, &v55);
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v55), 3, &__s, &v55);
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1[7] + 312))(a2, a3, v52, &v47);
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              uint64_t v24 = __s;
              if (strchr(__s, 123))
              {
                BOOL v25 = strstr(v24, "{LPC}") != 0;
                BOOL v26 = strstr(v24, "{LEC}") != 0;
                HIDWORD(v44) = strstr(v24, "{RPC}") != 0;
                LODWORD(v44) = strstr(v24, "{REC}") != 0;
                uint64_t v27 = strstr(v24, "{LPCC}");
                int v28 = v52;
                if (v27 && v52 && *(unsigned char *)(v45 + v52 - 1) == 95) {
                  BOOL v25 = 1;
                }
                if (strstr(v24, "{LECC}") && v28 && *(unsigned char *)(v45 + (v28 - 1)) == 95) {
                  BOOL v26 = 1;
                }
                if (strstr(v24, "{RPCC}"))
                {
                  int v29 = HIDWORD(v44);
                  if (*(unsigned char *)(v45 + v51) == 95) {
                    int v29 = 1;
                  }
                  HIDWORD(v44) = v29;
                }
                if (strstr(v24, "{RECC}"))
                {
                  int v30 = v44;
                  if (*(unsigned char *)(v45 + v51) == 95) {
                    int v30 = 1;
                  }
                  LODWORD(v44) = v30;
                }
                BOOL v31 = v26;
              }
              else
              {
                BOOL v25 = 0;
                BOOL v31 = 0;
                uint64_t v44 = 0;
              }
              if (WORD2(v43) && (int v35 = v25 | v22, v35 | v31 | v21))
              {
                BOOL v40 = v31;
                uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a1[7] + 168))(a2, a3, WORD2(v43), 1, 1, &v50, &v55);
                if ((v20 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned char **, int *))(a1[7] + 176))(a2, a3, WORD2(v43), 3, &v48, &v55);
                if ((v20 & 0x80000000) != 0) {
                  break;
                }
                if (v35 && !v43 && !v47) {
                  hlp_CopyWordRec((uint64_t)a1, a2, a3, HIWORD(v55), WORD2(v43));
                }
                HIDWORD(v47) = 0;
                mosynt_App((uint64_t)v18, 5000, (unsigned int *)&v47 + 1, v48, &v46);
                if (!(v43 | v47)) {
                  mosynt_App((uint64_t)v18, 5000, (unsigned int *)&v47 + 1, __s, &v46);
                }
                mosynt_RemoveAllSubstrOcc(v18, "{LEC}");
                mosynt_RemoveAllSubstrOcc(v18, "{LPC}");
                mosynt_RemoveAllSubstrOcc(v18, "{RPC}");
                mosynt_RemoveAllSubstrOcc(v18, "{REC}");
                mosynt_RemoveAllSubstrOcc(v18, "{LECC}");
                mosynt_RemoveAllSubstrOcc(v18, "{LPCC}");
                mosynt_RemoveAllSubstrOcc(v18, "{RPCC}");
                mosynt_RemoveAllSubstrOcc(v18, "{RECC}");
                __int16 v36 = strlen(v18);
                uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1[7] + 160))(a2, a3, WORD2(v43), 3, (unsigned __int16)(v36 + 1), v18, &v54);
                int v22 = HIDWORD(v44);
                if ((v20 & 0x80000000) != 0) {
                  break;
                }
                if (v43 | v47)
                {
                  uint64_t v32 = 0;
                  uint64_t v34 = v44;
                }
                else
                {
                  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1[7] + 160))(a2, a3, WORD2(v43), 1, 1, &v50, &v54);
                  uint64_t v34 = v44;
                  if ((v20 & 0x80000000) != 0) {
                    break;
                  }
                  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[7] + 160))(a2, a3, WORD2(v43), 2, 1, &v51, &v54);
                  if ((v20 & 0x80000000) != 0) {
                    break;
                  }
                  *(unsigned char *)(v52 + v41 - 1) = 100;
                  ++*v42;
                  uint64_t v32 = HIWORD(v55);
                }
                BOOL v31 = v40;
              }
              else
              {
                uint64_t v32 = 0;
                uint64_t v34 = v44;
                int v22 = HIDWORD(v44);
              }
              uint64_t v33 = v32;
              if (v32 != HIWORD(v55))
              {
                if ((v31 || v25) | v22 | v34)
                {
                  HIDWORD(v47) = 0;
                  mosynt_App((uint64_t)v18, 5000, (unsigned int *)&v47 + 1, __s, &v46);
                  mosynt_RemoveAllSubstrOcc(v18, "{LEC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{LPC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{RPC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{REC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{LECC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{LPCC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{RPCC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{RECC}");
                  __int16 v37 = strlen(v18);
                  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1[7] + 160))(a2, a3, HIWORD(v55), 3, (unsigned __int16)(v37 + 1), v18, &v54);
                  if ((v20 & 0x80000000) != 0) {
                    break;
                  }
                  uint64_t v33 = HIWORD(v55);
                  WORD2(v43) = HIWORD(v55);
                }
                else
                {
                  uint64_t v33 = HIWORD(v55);
                  WORD2(v43) = HIWORD(v55);
                }
              }
              LODWORD(v43) = v47;
            }
            uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(a1[7] + 120))(a2, a3, v33, (char *)&v55 + 2);
            if ((v19 & 0x80000000) != 0) {
              goto LABEL_65;
            }
            if (v32)
            {
              uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[7] + 192))(a2, a3, v32);
              if ((v19 & 0x80000000) != 0) {
                goto LABEL_65;
              }
            }
            if (!HIWORD(v55)) {
              goto LABEL_65;
            }
            uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
            uint64_t v21 = v34;
          }
          while ((v20 & 0x80000000) == 0);
        }
        uint64_t v19 = v20;
      }
    }
LABEL_65:
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v18);
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v39);
    return 2315264010;
  }
  return v19;
}

uint64_t fe_phrasing_mosynt_CreatePhrasingOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unsigned int v26 = 0;
  int v27 = 0;
  int v23 = 0;
  int v24 = 0;
  uint64_t v21 = 0;
  uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char **, int *))(*(void *)(a1 + 56)
                                                                                            + 176))(a2, a3, a4, 0, &v21, &v27);
  if ((PhraseInfo & 0x80000000) != 0) {
    return PhraseInfo;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, a4, (char *)&v27 + 2);
  if ((v11 & 0x80000000) == 0)
  {
    int v25 = 0;
    __s[0] = 0;
    unsigned __int16 v22 = 0;
    unsigned __int16 v12 = HIWORD(v27);
    if (HIWORD(v27))
    {
      unsigned __int16 v13 = 0;
      unsigned __int16 v14 = 0;
      while (1)
      {
        uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v12, 0, 1, &v26, &v27);
        if ((PhraseInfo & 0x80000000) != 0) {
          return PhraseInfo;
        }
        if (v26 <= 0xA && ((1 << v26) & 0x610) != 0)
        {
          uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v27), 1, 1, (char *)&v25 + 2, &v27);
          if ((PhraseInfo & 0x80000000) != 0) {
            return PhraseInfo;
          }
          uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v27), 2, 1, &v25, &v27);
          if ((PhraseInfo & 0x80000000) != 0) {
            return PhraseInfo;
          }
          unsigned __int16 v22 = 0;
          if (!v14)
          {
            unsigned __int16 v16 = 0;
            HIWORD(v24) = 0;
            __s[0] = 0;
LABEL_17:
            while (1)
            {
              uint64_t PhraseInfo = mosynt_GetPhraseInfo(*(void *)(a1 + 48), a5, v16, &v24, v28, 10);
              if ((PhraseInfo & 0x80000000) != 0) {
                return PhraseInfo;
              }
              if (v28[0])
              {
                __strcpy_chk();
                if ((unsigned __int16)(HIWORD(v24) - 1) >= (unsigned __int16)v24) {
                  HIWORD(v24) = v24;
                }
              }
              if (HIWORD(v25) < ++v16)
              {
                if (__s[0])
                {
                  if (v13)
                  {
                    uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v13, 2, 1, (char *)&v25 + 2, &v23);
                    if ((PhraseInfo & 0x80000000) != 0) {
                      return PhraseInfo;
                    }
                  }
                  uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 88))(a2, a3, HIWORD(v27), (char *)&v23 + 2);
                  if ((PhraseInfo & 0x80000000) != 0) {
                    return PhraseInfo;
                  }
                  unsigned __int16 v13 = HIWORD(v23);
                  unsigned int v26 = 15;
                  uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v23), 0, 1, &v26, &v23);
                  if ((PhraseInfo & 0x80000000) != 0) {
                    return PhraseInfo;
                  }
                  uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v23), 1, 1, (char *)&v25 + 2, &v23);
                  if ((PhraseInfo & 0x80000000) != 0) {
                    return PhraseInfo;
                  }
                  __int16 v17 = strlen(__s);
                  uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v23), 4, (unsigned __int16)(v17 + 1), __s, &v23);
                  if ((PhraseInfo & 0x80000000) != 0) {
                    return PhraseInfo;
                  }
                  uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v23), 7, 1, (char *)&v24 + 2, &v23);
                  if ((PhraseInfo & 0x80000000) != 0) {
                    return PhraseInfo;
                  }
                }
                goto LABEL_30;
              }
            }
          }
          uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v14, 2, 1, &v22, &v27);
          if ((PhraseInfo & 0x80000000) != 0) {
            return PhraseInfo;
          }
          unsigned __int16 v16 = v22;
          HIWORD(v24) = 0;
          __s[0] = 0;
          if (v22 <= HIWORD(v25)) {
            goto LABEL_17;
          }
LABEL_30:
          unsigned __int16 v14 = HIWORD(v27);
        }
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 120))(a2, a3);
        if ((v11 & 0x80000000) != 0) {
          return v11;
        }
        unsigned __int16 v12 = HIWORD(v27);
        if (!HIWORD(v27))
        {
          if (v13)
          {
            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v13, 2, 1, &v25, &v23);
            if ((v11 & 0x80000000) != 0) {
              return v11;
            }
          }
          break;
        }
      }
    }
    if (*(unsigned __int16 *)__s == 87 || !(*(unsigned __int16 *)__s ^ 0x4641 | v30))
    {
      uint64_t v18 = v21;
      uint64_t v19 = strrchr(v21, 63);
      if (v19 && v19 != v18 && *(v19 - 1) != 32) {
        *uint64_t v19 = 46;
      }
    }
  }
  return v11;
}

uint64_t fe_phrasing_mosynt_AdjustSentenceAndMarkers(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7)
{
  uint64_t v50 = 0;
  int v48 = 0;
  int v49 = 0;
  unsigned __int16 v47 = 0;
  uint64_t v46 = 0;
  unsigned __int16 v45 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, char *))(a1[7] + 176))(a2, a3, a4, 0, &v50, (char *)&v49 + 2);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(a1[7] + 176))(a2, a3, a4, 1, &v46, &v45);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  int v44 = a6;
  int v15 = *(_DWORD *)(v46 + 12);
  uint64_t v16 = heap_Alloc(*(void *)(*a1 + 8), 2 * a5 + 2);
  uint64_t v21 = *a1;
  if (!v16)
  {
    uint64_t v40 = 2315264010;
    log_OutPublic(*(void *)(v21 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v43);
    return v40;
  }
  uint64_t v22 = v16;
  uint64_t v27 = heap_Alloc(*(void *)(v21 + 8), 2 * a5 + 2);
  uint64_t v28 = *a1;
  if (v27)
  {
    unsigned int v43 = a5;
    int v29 = (const char *)heap_Alloc(*(void *)(v28 + 8), (v44 + 1));
    if (v29)
    {
      uint64_t v30 = (uint64_t)v29;
      LOWORD(v31) = v43;
      if (v43)
      {
        uint64_t v32 = 0;
        int v31 = 0;
        do
        {
          int v33 = *(unsigned __int8 *)(a7 + v32);
          if (v33 == 105)
          {
            v29[(unsigned __int16)v31] = 32;
            *(_WORD *)(v22 + 2 * v32) = v31 + 1;
            *(_WORD *)(v27 + 2 * v32) = v31;
            v29[(unsigned __int16)(v31 + 1)] = *(unsigned char *)(v50 + v32);
            v31 += 2;
          }
          else
          {
            *(_WORD *)(v22 + 2 * v32) = v31;
            *(_WORD *)(v27 + 2 * v32) = v31;
            if (v33 != 100) {
              v29[(unsigned __int16)v31++] = *(unsigned char *)(v50 + v32);
            }
          }
          ++v32;
        }
        while (v43 != v32);
      }
      v29[(unsigned __int16)v31] = 0;
      *(_WORD *)(v22 + 2 * v43) = v31;
      *(_WORD *)(v27 + 2 * v43) = v31;
      __int16 v34 = strlen(v29);
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, int *))(a1[7] + 160))(a2, a3, a4, 0, (unsigned __int16)(v34 + 1), v30, &v49);
      if ((v35 & 0x80000000) != 0)
      {
LABEL_39:
        uint64_t v40 = v35;
      }
      else
      {
        uint64_t v36 = v45;
        uint64_t v37 = v46;
        if (v45)
        {
          __int16 v38 = (_DWORD *)(v46 + 12);
          do
          {
            *__int16 v38 = v15 + *(unsigned __int16 *)(v22 + 2 * (unsigned __int16)(*v38 - v15));
            v38 += 8;
            --v36;
          }
          while (v36);
        }
        *(_DWORD *)(v37 + 16) = v44;
        uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, a4, (char *)&v48 + 2);
LABEL_19:
        uint64_t v40 = v39;
        if ((v39 & 0x80000000) == 0)
        {
          while (HIWORD(v48))
          {
            uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
            if ((v35 & 0x80000000) != 0) {
              goto LABEL_39;
            }
            uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a2, a3, HIWORD(v48), 2, 1, &v47, (char *)&v49 + 2);
            if ((v35 & 0x80000000) != 0) {
              goto LABEL_39;
            }
            LOWORD(v48) = *(_WORD *)(v22 + 2 * (unsigned __int16)v48);
            uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 160))(a2, a3, HIWORD(v48), 1, 1, &v48, &v49);
            if ((v35 & 0x80000000) != 0) {
              goto LABEL_39;
            }
            unsigned __int16 v47 = v47 <= v43 ? *(_WORD *)(v27 + 2 * v47) : v43;
            uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 160))(a2, a3, HIWORD(v48), 2, 1, &v47, &v49);
            if ((v35 & 0x80000000) != 0) {
              goto LABEL_39;
            }
            if (v47 == (unsigned __int16)v48) {
              uint64_t v41 = HIWORD(v48);
            }
            else {
              uint64_t v41 = 0;
            }
            uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 120))(a2, a3);
            if ((v40 & 0x80000000) != 0) {
              goto LABEL_40;
            }
            if (v41)
            {
              uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[7] + 192))(a2, a3, v41);
              goto LABEL_19;
            }
          }
        }
      }
      goto LABEL_40;
    }
    uint64_t v28 = *a1;
  }
  uint64_t v40 = 2315264010;
  log_OutPublic(*(void *)(v28 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v23, v24, v25, v26, v43);
  uint64_t v30 = 0;
LABEL_40:
  heap_Free(*(void **)(*a1 + 8), v22);
  if (v27) {
    heap_Free(*(void **)(*a1 + 8), v27);
  }
  if (v30) {
    heap_Free(*(void **)(*a1 + 8), v30);
  }
  return v40;
}

uint64_t fe_phrasing_Process_NN_Phrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7)
{
  *a5 = 1;
  unsigned __int16 v12 = (void *)(a1 + 168);
  uint64_t v13 = a1 + 176;
  if (!*(void *)(a1 + 176))
  {
    *(_WORD *)(a1 + 248) = 2;
    *(_DWORD *)(a1 + 192) = 0x10000;
  }
  uint64_t SentenceData = getSentenceData(*(void *)a1, *(void *)(a1 + 48), *(void *)(a1 + 56), a3, a4, (uint64_t)v12, *(uint64_t **)(a1 + 120), 1);
  if ((SentenceData & 0x80000000) == 0 && *(_WORD *)(a1 + 848)) {
    uint64_t SentenceData = nn_phrasing_ProcessSent(*(uint64_t **)a1, *(void *)(a1 + 56), a3, a4, a1 + 840, v13, a1 + 1304, a6, a7);
  }
  freeSentenceData((uint64_t)v12);
  freeProsodicStructure(v12);
  return SentenceData;
}

uint64_t fe_phrasing_Process_CRFPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v25 = 0;
  int v26 = 0;
  int v28 = 0;
  *a5 = 1;
  unint64_t v8 = a1 + 168;
  if (!*(void *)(a1 + 176))
  {
    *(_WORD *)(a1 + 248) = 2;
    *(_DWORD *)(a1 + 192) = 0x10000;
  }
  unsigned int __s = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t SentenceData = getSentenceData(*(void *)a1, *(void *)(a1 + 48), *(void *)(a1 + 56), a3, a4, v8, *(uint64_t **)(a1 + 120), 0);
  if ((SentenceData & 0x80000000) != 0) {
    goto LABEL_20;
  }
  uint64_t IsUpdatable = kaldi::nnet1::Component::IsUpdatable(*(kaldi::nnet1::Component **)a1);
  if ((IsUpdatable & 0x80000000) != 0 || !*(_WORD *)(a1 + 848)) {
    goto LABEL_21;
  }
  if (!v28
    && (uint64_t SentenceData = crfWeakPhrasing(*(void *)(a1 + 104), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)a1, 0, a1 + 840, 0, a1 + 920), (SentenceData & 0x80000000) != 0)|| (uint64_t SentenceData = puncPhrasing(*(void *)a1, (uint64_t *)(a1 + 840), a1 + 920, v10, v11, v12, v13, v14), (SentenceData & 0x80000000) != 0)|| (*(void *)(a1 + 176) = *(void *)a1, uint64_t SentenceData = updateLingdbCrfPhrasing(*(void *)(a1 + 56), a3, a4, v8), (SentenceData & 0x80000000) != 0))
  {
LABEL_20:
    uint64_t IsUpdatable = SentenceData;
    goto LABEL_21;
  }
  uint64_t IsUpdatable = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a3, a4, 1, 0, &v26);
  if ((IsUpdatable & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(*(void *)(a1 + 56) + 184))(a3, a4, (unsigned __int16)v26, 0, (char *)&v25 + 2) & 0x80000000) == 0&& HIWORD(v25) == 1)
  {
    uint64_t IsUpdatable = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(*(void *)(a1 + 56)
                                                                                              + 176))(a3, a4, (unsigned __int16)v26, 0, &__s, &v25);
    if ((IsUpdatable & 0x80000000) == 0 && (unsigned __int16)v25 >= 2u)
    {
      unsigned __int16 v16 = strlen(__s);
      uint64_t v17 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), v16 + 1);
      if (v17)
      {
        uint64_t v22 = (uint64_t)v17;
        memset(v17, 32, v16);
        *(unsigned char *)(v22 + v16) = 0;
        uint64_t IsUpdatable = fe_phrasing_mosynt_SplitWords((uint64_t *)a1, a3, a4, (unsigned __int16)v26, v22, (_WORD *)&v26 + 1);
        if ((IsUpdatable & 0x80000000) == 0 && HIWORD(v26)) {
          uint64_t IsUpdatable = fe_phrasing_mosynt_AdjustSentenceAndMarkers((void *)a1, a3, a4, (unsigned __int16)v26, v16, (unsigned __int16)(HIWORD(v26) + v16), v22);
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v22);
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v18, v19, v20, v21, v24);
        uint64_t IsUpdatable = 2315264010;
      }
    }
  }
LABEL_21:
  freeSentenceData(v8);
  return IsUpdatable;
}

uint64_t fe_phrasing_Process_NNPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v6 = (uint64_t *)a1;
  v99[0] = 0;
  __int16 v98 = 0;
  uint64_t v97 = 0;
  *a6 = 1;
  uint64_t v7 = *(unsigned __int16 *)(*(void *)(a1 + 1528) + 1072);
  if (*(_WORD *)(*(void *)(a1 + 1528) + 1072))
  {
    uint64_t v8 = 0;
    uint64_t v92 = *(unsigned __int16 *)(*(void *)(a1 + 1528) + 1072);
    do
    {
      uint64_t v9 = *(void *)(v6[191] + 1064);
      uint64_t v10 = *(const char **)(v9 + 184 * v8 + 56);
      unsigned __int16 v11 = strlen(v10);
      if (!v11) {
        break;
      }
      if (doesWordEndInCommaNN((uint64_t)v10, ",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#"))
      {
        uint64_t v12 = v11 - 1;
        if (memchr(",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#", v10[v12], 0x1EuLL))
        {
          unsigned __int16 v13 = 0;
          while (1)
          {
            unsigned __int8 v14 = Utf8_LengthInBytes((unsigned __int8 *)&v10[v13], 1);
            if (!utf8_IsChineseLetter(&v10[v13])) {
              break;
            }
LABEL_11:
            v13 += v14;
            if (v13 >= v11)
            {
              int v17 = 0;
              LOBYTE(v16) = v10[v12];
              goto LABEL_14;
            }
          }
          uint64_t v15 = 0;
          int v16 = v10[v13];
          while (v16 != asc_20D5CED0F[v15])
          {
            if (++v15 == 9) {
              goto LABEL_11;
            }
          }
          int v17 = 1;
LABEL_14:
          uint64_t v18 = v9 + 184 * v8;
          *(unsigned char *)(v18 + 104) = v16;
          *(_DWORD *)(v18 + 108) = v17;
          *(_DWORD *)(v18 + 100) = 1;
          uint64_t v7 = v92;
          uint64_t v6 = (uint64_t *)a1;
        }
      }
      if (v11 == 1)
      {
        uint64_t v19 = memchr(",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#", *v10, 0x1EuLL);
        if (v8)
        {
          if (v19 && *(_DWORD *)(*(void *)(v6[191] + 1064) + 184 * (v8 - 1) + 108)) {
            *(_DWORD *)(v9 + 184 * v8 + 108) = 1;
          }
        }
      }
      ++v8;
    }
    while (v8 != v7);
  }
  if (!*(void *)(a5 + 1104))
  {
    *(_WORD *)(a5 + 1176) = 2;
    *(_DWORD *)(a5 + 1120) = 0x10000;
  }
  *(void *)(a5 + 1104) = 0;
  NNuint64_t SentenceData = getNNSentenceData(*v6, v6[7], a3, a4, v6[191]);
  if ((NNSentenceData & 0x80000000) == 0)
  {
    if (*(void *)(a5 + 1088))
    {
      NNuint64_t SentenceData = doesNNCustermizedFE(*v6, v6[191], v99);
      if ((NNSentenceData & 0x80000000) == 0)
      {
        if (*(_WORD *)(a5 + 1072))
        {
          unsigned __int16 v96 = 0;
          if (v6[206])
          {
            uint64_t v21 = heap_Calloc(*(void **)(*v6 + 8), *(unsigned __int16 *)(v6[191] + 1072), 8);
            uint64_t v26 = *v6;
            if (!v21)
            {
              NNuint64_t SentenceData = 2315264010;
              log_OutPublic(*(void *)(v26 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v88);
              goto LABEL_111;
            }
            uint64_t v27 = v21;
            uint64_t v32 = heap_Calloc(*(void **)(v26 + 8), *(unsigned __int16 *)(v6[191] + 1072), 8);
            uint64_t v33 = *v6;
            if (!v32)
            {
              uint64_t v34 = 0;
              goto LABEL_88;
            }
            uint64_t v34 = heap_Calloc(*(void **)(v33 + 8), *(unsigned __int16 *)(v6[191] + 1072), 8);
            if (!v34)
            {
LABEL_87:
              uint64_t v33 = *v6;
              goto LABEL_88;
            }
          }
          else
          {
            uint64_t v27 = 0;
            uint64_t v32 = 0;
            uint64_t v34 = 0;
          }
          uint64_t v35 = v6[191];
          uint64_t v36 = *(unsigned __int16 *)(v35 + 1072);
          if (*(_WORD *)(v35 + 1072))
          {
            int v37 = 0;
            __int16 v38 = (_DWORD *)(*(void *)(v35 + 1064) + 176);
            do
            {
              uint64_t v39 = (const char *)*((void *)v38 - 3);
              if (v39)
              {
                if (!strcmp(*((const char **)v38 - 3), "B"))
                {
                  int v37 = strlen(*((const char **)v38 - 15));
                }
                else if (!strcmp(v39, "E"))
                {
                  v37 += strlen(*((const char **)v38 - 15));
                }
                else
                {
                  int v40 = strcmp(v39, "S");
                  int v41 = strlen(*((const char **)v38 - 15));
                  if (v40) {
                    int v42 = v37;
                  }
                  else {
                    int v42 = 0;
                  }
                  int v37 = v42 + v41;
                }
              }
              *__int16 v38 = v37;
              v38 += 46;
              --v36;
            }
            while (v36);
          }
          if (!v99[0] && *(_WORD *)(a5 + 1072))
          {
            unint64_t v65 = 0;
            uint64_t v66 = 76;
            do
            {
              uint64_t v67 = *(void *)(a5 + 1064);
              int v68 = *(_DWORD *)(v67 + v66 - 4);
              if (v68 == 1)
              {
                char v69 = 3;
              }
              else
              {
                if (v68) {
                  goto LABEL_71;
                }
                char v69 = 1;
              }
              *(unsigned char *)(v67 + v66) = v69;
LABEL_71:
              *(void *)(v67 + v66 - 28) = 0;
              hlp_NLUStrFind(*(char **)(v67 + v66 - 36), "POS", (uint64_t *)(v67 + v66 - 28), &v96);
              if (v27)
              {
                long long v70 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), v96 + 1);
                *(void *)(v27 + 8 * v65) = v70;
                if (!v70)
                {
                  uint64_t v6 = (uint64_t *)a1;
                  goto LABEL_87;
                }
                strncpy(v70, *(const char **)(*(void *)(a5 + 1064) + v66 - 28), v96);
                *(unsigned char *)(*(void *)(v27 + 8 * v65) + v96) = 0;
              }
              if (v32)
              {
                unsigned __int16 v71 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), v96 + 1);
                *(void *)(v32 + 8 * v65) = v71;
                if (!v71) {
                  goto LABEL_85;
                }
                strncpy(v71, *(const char **)(*(void *)(a5 + 1064) + v66 - 28), v96);
                *(unsigned char *)(*(void *)(v32 + 8 * v65) + v96) = 0;
              }
              if (v34)
              {
                unsigned __int16 v76 = strlen(*(const char **)(*(void *)(a5 + 1064) + v66 - 20));
                int v77 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), v76 + 1);
                *(void *)(v34 + 8 * v65) = v77;
                if (!v77)
                {
LABEL_85:
                  NNuint64_t SentenceData = 2315264010;
                  uint64_t v6 = (uint64_t *)a1;
                  log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v72, v73, v74, v75, v88);
                  goto LABEL_61;
                }
                strcpy(v77, *(const char **)(*(void *)(a5 + 1064) + v66 - 20));
              }
              ++v65;
              v66 += 184;
            }
            while (v65 < *(unsigned __int16 *)(a5 + 1072));
          }
          uint64_t v6 = (uint64_t *)a1;
          if (!v32 || !v27 || !v34)
          {
LABEL_53:
            uint64_t v50 = *(void *)a1;
            unsigned __int16 v51 = *(const char **)(a1 + 1664);
            unsigned __int16 v52 = *(char **)(a1 + 1672);
            uint64_t v53 = *(void *)(a1 + 1544);
            uint64_t v54 = *(void *)(a1 + 1552);
            long long v55 = *(_OWORD *)(a1 + 1608);
            char v94[2] = *(_OWORD *)(a1 + 1592);
            v94[3] = v55;
            v94[4] = *(_OWORD *)(a1 + 1624);
            __int16 v95 = *(_WORD *)(a1 + 1640);
            long long v56 = *(_OWORD *)(a1 + 1576);
            v94[0] = *(_OWORD *)(a1 + 1560);
            v94[1] = v56;
            uint64_t updated = nnpuncPhrasing(v50, a5, v53, v54, (unsigned __int16 *)v94, v51, v52);
            if ((updated & 0x80000000) != 0
              || (uint64_t updated = updateLingdbNNPhrasing(*(void *)a1, *(void *)(a1 + 56), a3, a4, *(void *)(a1 + 1528), *(_DWORD *)(a1 + 1656), *(const char **)(a1 + 1664), *(_DWORD *)(a1 + 1524)), (updated & 0x80000000) != 0))
            {
              NNuint64_t SentenceData = updated;
LABEL_61:
              uint64_t v64 = 0;
            }
            else
            {
              unsigned __int16 v58 = strlen(*(const char **)(*(void *)(a1 + 1528) + 1088));
              __int16 v59 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), v58 + 1);
              uint64_t v64 = (uint64_t)v59;
              if (v59)
              {
                memset(v59, 32, v58);
                *(unsigned char *)(v64 + v58) = 0;
                NNuint64_t SentenceData = fe_phrasing_mosynt_SplitWords((uint64_t *)a1, a3, a4, *(unsigned __int16 *)(a5 + 1096), v64, &v98);
                if ((NNSentenceData & 0x80000000) != 0 || !v98)
                {
                  uint64_t v6 = (uint64_t *)a1;
                }
                else
                {
                  uint64_t v6 = (uint64_t *)a1;
                  NNuint64_t SentenceData = fe_phrasing_mosynt_AdjustSentenceAndMarkers((void *)a1, a3, a4, *(unsigned __int16 *)(a5 + 1096), v58, (unsigned __int16)(v98 + v58), v64);
                }
              }
              else
              {
                NNuint64_t SentenceData = 2315264010;
                log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v60, v61, v62, v63, v88);
                uint64_t v6 = (uint64_t *)a1;
              }
            }
            if (!v27) {
              goto LABEL_95;
            }
            goto LABEL_89;
          }
          uint64_t v43 = heap_Calloc(*(void **)(*(void *)a1 + 8), *(unsigned __int16 *)(*(void *)(a1 + 1528) + 1072), 24);
          uint64_t v97 = v43;
          uint64_t v33 = *(void *)a1;
          if (v43)
          {
            if ((fe_phrasing_genLW(v33, *(void *)(a1 + 1528), v32, v34, v27, &v97) & 0x80000000) == 0) {
              fe_phrasing_ProcessIGTree((uint64_t *)a1, v43, v44, v45, v46, v47, v48, v49, v88);
            }
            freeIwInfo((void *)a1, v43);
            goto LABEL_53;
          }
LABEL_88:
          NNuint64_t SentenceData = 2315264010;
          log_OutPublic(*(void *)(v33 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v28, v29, v30, v31, v88);
          uint64_t v64 = 0;
LABEL_89:
          unsigned int v78 = *(unsigned __int16 *)(a5 + 1072);
          if (*(_WORD *)(a5 + 1072))
          {
            unint64_t v79 = 0;
            do
            {
              uint64_t v80 = *(void *)(v27 + 8 * v79);
              if (v80)
              {
                heap_Free(*(void **)(*v6 + 8), v80);
                unsigned int v78 = *(unsigned __int16 *)(a5 + 1072);
              }
              ++v79;
            }
            while (v79 < v78);
          }
          heap_Free(*(void **)(*v6 + 8), v27);
LABEL_95:
          if (v32)
          {
            unsigned int v81 = *(unsigned __int16 *)(a5 + 1072);
            if (*(_WORD *)(a5 + 1072))
            {
              unint64_t v82 = 0;
              do
              {
                uint64_t v83 = *(void *)(v32 + 8 * v82);
                if (v83)
                {
                  heap_Free(*(void **)(*v6 + 8), v83);
                  unsigned int v81 = *(unsigned __int16 *)(a5 + 1072);
                }
                ++v82;
              }
              while (v82 < v81);
            }
            heap_Free(*(void **)(*v6 + 8), v32);
          }
          if (v34)
          {
            unsigned int v84 = *(unsigned __int16 *)(a5 + 1072);
            if (*(_WORD *)(a5 + 1072))
            {
              unint64_t v85 = 0;
              do
              {
                uint64_t v86 = *(void *)(v34 + 8 * v85);
                if (v86)
                {
                  heap_Free(*(void **)(*v6 + 8), v86);
                  unsigned int v84 = *(unsigned __int16 *)(a5 + 1072);
                }
                ++v85;
              }
              while (v85 < v84);
            }
            heap_Free(*(void **)(*v6 + 8), v34);
          }
          if (v64) {
            heap_Free(*(void **)(*v6 + 8), v64);
          }
        }
      }
    }
  }
LABEL_111:
  freeSentenceDataNN((void *)*v6, v6[191]);
  return NNSentenceData;
}

uint64_t fe_phrasing_genLW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v38 = *(unsigned __int16 *)(a2 + 1072);
  if (!*(_WORD *)(a2 + 1072)) {
    return 0;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a1;
  unsigned int v8 = 0;
  uint64_t v9 = *a6;
  uint64_t v37 = a5;
  uint64_t v40 = a4;
  uint64_t v34 = *a6;
  while (1)
  {
    uint64_t v43 = 0;
    __lasts = 0;
    int v42 = 0;
    uint64_t v10 = *(char **)(a5 + 8 * v8);
    if (!v10) {
      return 2315264007;
    }
    uint64_t v11 = v8;
    if (!*(void *)(a4 + 8 * v8) || !*(void *)(v6 + 8 * v8)) {
      return 2315264007;
    }
    unsigned __int16 v12 = 0;
    if (strtok_r(v10, "-", &__lasts))
    {
      do
        ++v12;
      while (strtok_r(0, "-", &__lasts));
    }
    uint64_t v13 = heap_Calloc(*(void **)(v7 + 8), 1, 8 * v12);
    int v41 = (unsigned __int16 *)(v9 + 24 * v11);
    *((void *)v41 + 2) = v13;
    if (!v13) {
      break;
    }
    int v18 = strlen(*(const char **)(a2 + 1088));
    uint64_t v19 = v9 + 24 * v11;
    *(_DWORD *)(v19 + 4) = v18 + 1;
    uint64_t v20 = (_DWORD *)(v19 + 4);
    uint64_t v21 = heap_Calloc(*(void **)(v7 + 8), 1, (v18 + 1) * v12);
    *(void *)(v19 + 8) = v21;
    uint64_t v22 = (void *)(v19 + 8);
    if (!v21) {
      break;
    }
    uint64_t v23 = *(char **)(v6 + 8 * v11);
    uint64_t v24 = *(char **)(v40 + 8 * v11);
    *int v41 = v12;
    uint64_t v25 = strtok_r(v23, "-", &v43);
    uint64_t v26 = strtok_r(v24, "-", &v42);
    unsigned __int16 v27 = 0;
    BOOL v28 = v25 != 0;
    BOOL v29 = v26 != 0;
    if (v25)
    {
      uint64_t v30 = v26;
      if (v26)
      {
        unsigned __int16 v27 = 0;
        while (v27 <= v12)
        {
          strcpy((char *)(*((void *)v41 + 2) + 8 * v27), v25);
          strcpy((char *)(*v22 + *v20 * v27), v30);
          uint64_t v25 = strtok_r(0, "-", &v43);
          uint64_t v31 = strtok_r(0, "-", &v42);
          ++v27;
          BOOL v28 = v25 != 0;
          BOOL v29 = v31 != 0;
          if (v25)
          {
            uint64_t v30 = v31;
            if (v31) {
              continue;
            }
          }
          goto LABEL_16;
        }
        return 2315264015;
      }
    }
LABEL_16:
    if (v28 || v29) {
      return 2315264007;
    }
    if (*v41 != v27) {
      return 2315264015;
    }
    unsigned int v8 = v11 + 1;
    uint64_t v6 = a3;
    a5 = v37;
    a4 = v40;
    uint64_t v9 = v34;
    uint64_t v7 = a1;
    if ((int)v11 + 1 >= v38) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(v7 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v33);
  return 2315264010;
}

void *fe_phrasing_ProcessIGTree(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(unsigned __int16 *)(a1[191] + 1072);
  __s1 = 0;
  uint64_t v11 = a1[206];
  if (v11)
  {
    uint64_t v13 = a1;
    uint64_t result = (void *)heap_Alloc(*(void *)(v9 + 8), 8 * *(unsigned __int8 *)(v11 + 1296) - 8);
    if (!result) {
      return result;
    }
    uint64_t v15 = (uint64_t)result;
    if (*(unsigned char *)(v11 + 1296) == 1)
    {
LABEL_7:
      uint64_t v96 = a2;
      if (!v10)
      {
LABEL_226:
        if (*(unsigned char *)(v11 + 1296) != 1)
        {
          uint64_t v89 = (unsigned __int16)(*(unsigned __int8 *)(v11 + 1296) - 1);
          int v90 = (uint64_t *)v15;
          do
          {
            uint64_t v91 = *v90++;
            heap_Free(*(void **)(v9 + 8), v91);
            --v89;
          }
          while (v89);
        }
        return heap_Free(*(void **)(v9 + 8), v15);
      }
      unint64_t v23 = 0;
      uint64_t v93 = v10;
      uint64_t v94 = v13;
      uint64_t v95 = v11;
      while (1)
      {
        uint64_t v24 = *(void *)(v11 + 1312);
        unsigned int v25 = *(unsigned __int8 *)(v11 + 1296);
        uint64_t v26 = v13[191];
        __int16 v98 = 0;
        uint64_t v27 = heap_Calloc(*(void **)(v9 + 8), 1, 2048);
        if (!v27) {
          break;
        }
        BOOL v28 = (char *)v27;
        if (v25 < 2)
        {
          int v31 = 0;
        }
        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = v25 - 1;
          while (strcmp(*(const char **)(v24 + 8 * v29), "pw"))
          {
            if (v30 == ++v29)
            {
              int v31 = 0;
              goto LABEL_17;
            }
          }
          __int16 v98 = v29;
          uint64_t v32 = fe_phrasing_feat_word(v26, (unsigned __int16)v23, 0);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 0, v15, v32);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_17:
          uint64_t v33 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v33), "pwlen"))
          {
            if (v30 == ++v33) {
              goto LABEL_22;
            }
          }
          __int16 v98 = v33;
          char *v28 = 0;
          size_t v34 = strlen(v28);
          fe_phrasing_feat_wordlen((char *)v26, (unsigned __int16)v23, 0, &v28[v34]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 1, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_22:
          uint64_t v35 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v35), "lpwlen"))
          {
            if (v30 == ++v35) {
              goto LABEL_27;
            }
          }
          __int16 v98 = v35;
          char *v28 = 0;
          size_t v36 = strlen(v28);
          fe_phrasing_feat_wordlen((char *)v26, (unsigned __int16)v23, -1, &v28[v36]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 2, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_27:
          uint64_t v37 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v37), "llpwlen"))
          {
            if (v30 == ++v37) {
              goto LABEL_32;
            }
          }
          __int16 v98 = v37;
          char *v28 = 0;
          size_t v38 = strlen(v28);
          fe_phrasing_feat_wordlen((char *)v26, (unsigned __int16)v23, -2, &v28[v38]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 3, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_32:
          uint64_t v39 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v39), "rpwlen"))
          {
            if (v30 == ++v39) {
              goto LABEL_37;
            }
          }
          __int16 v98 = v39;
          char *v28 = 0;
          size_t v40 = strlen(v28);
          fe_phrasing_feat_wordlen((char *)v26, (unsigned __int16)v23, 1, &v28[v40]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 4, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_37:
          uint64_t v41 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v41), "rrpwlen"))
          {
            if (v30 == ++v41) {
              goto LABEL_42;
            }
          }
          char *v28 = 0;
          size_t v42 = strlen(v28);
          fe_phrasing_feat_wordlen((char *)v26, (unsigned __int16)v23, 2, &v28[v42]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 5, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_42:
          uint64_t v43 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v43), "pos"))
          {
            if (v30 == ++v43) {
              goto LABEL_49;
            }
          }
          __int16 v98 = v43;
          uint64_t v44 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v44 = *(const char **)(*(void *)(v26 + 1064) + 184 * v23 + 48);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 6, v15, v44);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_49:
          uint64_t v45 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v45), "lpos"))
          {
            if (v30 == ++v45) {
              goto LABEL_58;
            }
          }
          if (v23)
          {
            uint64_t v46 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              uint64_t v46 = *(const char **)(*(void *)(v26 + 1064) + 184 * (v23 - 1) + 48);
            }
          }
          else
          {
            uint64_t v46 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 7, v15, v46);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_58:
          uint64_t v47 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v47), "rpos"))
          {
            if (v30 == ++v47) {
              goto LABEL_65;
            }
          }
          __int16 v98 = v47;
          uint64_t v48 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v48 = *(const char **)(*(void *)(v26 + 1064) + 184 * (v23 + 1) + 48);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 8, v15, v48);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_65:
          uint64_t v49 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v49), "bpos"))
          {
            if (v30 == ++v49) {
              goto LABEL_72;
            }
          }
          uint64_t v50 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v50 = *(const char **)(v96 + 24 * v23 + 16);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 9, v15, v50);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_72:
          uint64_t v51 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v51), "blpos"))
          {
            if (v30 == ++v51) {
              goto LABEL_81;
            }
          }
          if (v23)
          {
            unsigned __int16 v52 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              unsigned __int16 v52 = *(const char **)(v96 + 24 * (v23 - 1) + 16);
            }
          }
          else
          {
            unsigned __int16 v52 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 10, v15, v52);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_81:
          uint64_t v53 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v53), "brpos"))
          {
            if (v30 == ++v53) {
              goto LABEL_88;
            }
          }
          uint64_t v54 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v54 = *(const char **)(v96 + 24 * (v23 + 1) + 16);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 11, v15, v54);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_88:
          uint64_t v55 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v55), "epos"))
          {
            if (v30 == ++v55) {
              goto LABEL_95;
            }
          }
          long long v56 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            long long v56 = (const char *)(*(void *)(v96 + 24 * v23 + 16) + 8 * *(unsigned __int16 *)(v96 + 24 * v23) - 8);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 12, v15, v56);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_95:
          uint64_t v57 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v57), "elpos"))
          {
            if (v30 == ++v57) {
              goto LABEL_104;
            }
          }
          __int16 v98 = v57;
          if (v23)
          {
            unsigned __int16 v58 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              unsigned __int16 v58 = (const char *)(*(void *)(v96 + 24 * (v23 - 1) + 16)
            }
                                 + 8 * *(unsigned __int16 *)(v96 + 24 * (v23 - 1))
                                 - 8);
          }
          else
          {
            unsigned __int16 v58 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 13, v15, v58);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_104:
          uint64_t v59 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v59), "erpos"))
          {
            if (v30 == ++v59) {
              goto LABEL_111;
            }
          }
          uint64_t v60 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v60 = (const char *)(*(void *)(v96 + 24 * (v23 + 1) + 16)
          }
                               + 8 * *(unsigned __int16 *)(v96 + 24 * (v23 + 1))
                               - 8);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 14, v15, v60);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_111:
          uint64_t v61 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v61), "bchar"))
          {
            if (v30 == ++v61) {
              goto LABEL_116;
            }
          }
          __int16 v98 = v61;
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, 0, 0, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 15, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_116:
          uint64_t v62 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v62), "echar"))
          {
            if (v30 == ++v62) {
              goto LABEL_121;
            }
          }
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, -1, 0, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 16, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_121:
          uint64_t v63 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v63), "elchar"))
          {
            if (v30 == ++v63) {
              goto LABEL_126;
            }
          }
          __int16 v98 = v63;
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, -1, -1, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 17, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_126:
          uint64_t v64 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v64), "erchar"))
          {
            if (v30 == ++v64) {
              goto LABEL_131;
            }
          }
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, -1, 1, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 18, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_131:
          uint64_t v65 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v65), "blwword"))
          {
            if (v30 == ++v65) {
              goto LABEL_138;
            }
          }
          __int16 v98 = v65;
          uint64_t v66 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v66 = *(const char **)(v96 + 24 * v23 + 8);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 19, v15, v66);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_138:
          uint64_t v67 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v67), "elwword"))
          {
            if (v30 == ++v67) {
              goto LABEL_145;
            }
          }
          int v68 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            int v68 = (const char *)(*(void *)(v96 + 24 * v23 + 8)
          }
                               + (*(unsigned __int16 *)(v96 + 24 * v23) - 1)
                               * *(_DWORD *)(v96 + 24 * v23 + 4));
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 20, v15, v68);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_145:
          uint64_t v69 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v69), "lpw"))
          {
            if (v30 == ++v69) {
              goto LABEL_150;
            }
          }
          long long v70 = fe_phrasing_feat_word(v26, (unsigned __int16)v23, -1);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 21, v15, v70);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_150:
          uint64_t v71 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v71), "rpw"))
          {
            if (v30 == ++v71) {
              goto LABEL_155;
            }
          }
          __int16 v98 = v71;
          uint64_t v72 = fe_phrasing_feat_word(v26, (unsigned __int16)v23, 1);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 22, v15, v72);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_155:
          uint64_t v73 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v73), "blchar"))
          {
            if (v30 == ++v73) {
              goto LABEL_160;
            }
          }
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, 0, -1, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 23, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_160:
          uint64_t v74 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v74), "brchar"))
          {
            if (v30 == ++v74) {
              goto LABEL_165;
            }
          }
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, 0, 1, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 24, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_165:
          uint64_t v75 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v75), "blpwword"))
          {
            if (v30 == ++v75) {
              goto LABEL_174;
            }
          }
          __int16 v98 = v75;
          if (v23)
          {
            unsigned __int16 v76 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              unsigned __int16 v76 = *(const char **)(v96 + 24 * (v23 - 1) + 8);
            }
          }
          else
          {
            unsigned __int16 v76 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 25, v15, v76);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_174:
          uint64_t v77 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v77), "brpwword"))
          {
            if (v30 == ++v77) {
              goto LABEL_181;
            }
          }
          unsigned int v78 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            unsigned int v78 = *(const char **)(v96 + 24 * (v23 + 1) + 8);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 26, v15, v78);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_181:
          uint64_t v79 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v79), "elpwword"))
          {
            if (v30 == ++v79) {
              goto LABEL_190;
            }
          }
          if (v23)
          {
            uint64_t v80 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              uint64_t v80 = (const char *)(*(void *)(v96 + 24 * (v23 - 1) + 8)
            }
                                 + (*(unsigned __int16 *)(v96 + 24 * (v23 - 1)) - 1)
                                 * *(_DWORD *)(v96 + 24 * (v23 - 1) + 4));
          }
          else
          {
            uint64_t v80 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 27, v15, v80);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_190:
          uint64_t v81 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v81), "erpwword"))
          {
            if (v30 == ++v81) {
              goto LABEL_197;
            }
          }
          unint64_t v82 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            unint64_t v82 = (const char *)(*(void *)(v96 + 24 * (v23 + 1) + 8)
          }
                               + (*(unsigned __int16 *)(v96 + 24 * (v23 + 1)) - 1)
                               * *(_DWORD *)(v96 + 24 * (v23 + 1) + 4));
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 28, v15, v82);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_197:
          uint64_t v83 = 0;
          while (strcmp(*(const char **)(v24 + 8 * v83), "isnum"))
          {
            if (v30 == ++v83) {
              goto LABEL_206;
            }
          }
          __int16 v98 = v83;
          unsigned int v84 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072))
          {
            if (**(unsigned __int8 **)(*(void *)(v26 + 1064) + 184 * v23 + 56) - 48 >= 0xA) {
              unsigned int v84 = "0";
            }
            else {
              unsigned int v84 = "1";
            }
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 29, v15, v84);
          if (v31 < 0)
          {
LABEL_234:
            heap_Free(*(void **)(v9 + 8), (uint64_t)v28);
            return heap_Free(*(void **)(v9 + 8), v15);
          }
        }
LABEL_206:
        if (fe_phrasing_isFeatureRequired(v24, v25, 30, &v98))
        {
          if (v23)
          {
            unint64_t v85 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072))
            {
              if (**(unsigned __int8 **)(*(void *)(v26 + 1064) + 184 * (v23 - 1) + 56)
                 - 48 >= 0xA)
                unint64_t v85 = "0";
              else {
                unint64_t v85 = "1";
              }
            }
          }
          else
          {
            unint64_t v85 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 30, v15, v85);
          if (v31 < 0) {
            goto LABEL_234;
          }
        }
        if (fe_phrasing_isFeatureRequired(v24, v25, 31, &v98))
        {
          uint64_t v86 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072))
          {
            if (**(unsigned __int8 **)(*(void *)(v26 + 1064) + 184 * (v23 + 1) + 56)
               - 48 >= 0xA)
              uint64_t v86 = "0";
            else {
              uint64_t v86 = "1";
            }
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 31, v15, v86);
        }
        heap_Free(*(void **)(v9 + 8), (uint64_t)v28);
        uint64_t v11 = v95;
        if (v31 < 0 || (igtree_Process(v95, v15, &__s1) & 0x80000000) != 0) {
          return heap_Free(*(void **)(v9 + 8), v15);
        }
        int v87 = __s1;
        uint64_t v13 = v94;
        if (strcmp(__s1, "NOMATCH"))
        {
          unsigned int v88 = atoi(v87);
          if (v88 <= 3) {
            *(unsigned char *)(*(void *)(v94[191] + 1064) + 184 * v23 + 76) = v88;
          }
        }
        if (++v23 == v93) {
          goto LABEL_226;
        }
      }
    }
    else
    {
      uint64_t v16 = (unsigned __int16)(*(unsigned __int8 *)(v11 + 1296) - 1);
      uint64_t v17 = result;
      while (1)
      {
        int v18 = (_WORD *)heap_Calloc(*(void **)(v9 + 8), 1, 65);
        void *v17 = v18;
        if (!v18) {
          break;
        }
        *int v18 = 61;
        ++v17;
        if (!--v16) {
          goto LABEL_7;
        }
      }
    }
    log_OutPublic(*(void *)(v9 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v19, v20, v21, v22, v93);
    return heap_Free(*(void **)(v9 + 8), v15);
  }
  uint64_t v92 = *(void *)(v9 + 32);
  return (void *)log_OutText(v92, (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"IGTree model for phrasing does not exist. Skip processing IGTree.", a6, a7, a8, a9);
}

void *freeIwInfo(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    if (*(_WORD *)(result[191] + 1072))
    {
      unint64_t v4 = 0;
      uint64_t v5 = (uint64_t *)(a2 + 16);
      do
      {
        heap_Free(*(void **)(*v3 + 8), *(v5 - 1));
        *(v5 - 1) = 0;
        heap_Free(*(void **)(*v3 + 8), *v5);
        *uint64_t v5 = 0;
        v5 += 3;
        ++v4;
      }
      while (v4 < *(unsigned __int16 *)(v3[191] + 1072));
    }
    uint64_t v6 = *(void **)(*v3 + 8);
    return heap_Free(v6, a2);
  }
  return result;
}

uint64_t fe_phrasing_Process(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v42 = 0;
  unsigned int v43 = 0;
  uint64_t v41 = 0;
  unsigned __int16 v40 = 0;
  uint64_t v39 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62343, 1728) & 0x80000000) != 0) {
    return 2315264008;
  }
  *(_DWORD *)&__c[1] = 0;
  uint64_t v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, unsigned char *))a1[7][13])(a3, a4, 1, 0, &__c[3]);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  if ((((uint64_t (*)(uint64_t, uint64_t, void, void, unsigned char *))a1[7][23])(a3, a4, *(unsigned __int16 *)&__c[3], 0, &__c[1]) & 0x80000000) != 0|| *(unsigned __int16 *)&__c[1] != 1)
  {
    uint64_t inserted = 0;
    *a5 = 1;
    return inserted;
  }
  if (*((_DWORD *)a1 + 364))
  {
    uint64_t v11 = a1[191];
    *((_WORD *)v11 + 548) = *(_WORD *)&__c[3];
    *((_WORD *)v11 + 549) = 1;
  }
  unsigned __int16 v12 = a1[12];
  uint64_t v13 = a1[13];
  uint64_t v14 = a1[11];
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v10 = ((uint64_t (*)(void *, void *, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))v13[12])(v14, v12, "fecfg", "usecompound", &__c[3], &__c[1], __c);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  char v15 = 1;
  if (*(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3])
  {
    uint64_t v16 = **(const char ***)&__c[3];
    uint64_t v17 = strchr(**(char ***)&__c[3], __c[0]);
    if (v17)
    {
      char *v17 = 0;
      uint64_t v16 = **(const char ***)&__c[3];
    }
    if (!strcmp("yes", v16) || !strcmp("YES", v16)) {
      char v15 = 0;
    }
  }
  BOOL v21 = (int)paramc_ParamGetInt((*a1)[5], (uint64_t)"nnpausingoverride", (int *)&v43) >= 0 && v43 == 1;
  int v22 = !v21;
  if (v21) {
    log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing Override enabled - NN pausing will skipped even if data loaded", v18, v19, v20, 0);
  }
  if ((paramc_ParamGetInt((*a1)[5], (uint64_t)"nnpausingminwordspan", (int *)&v43) & 0x80000000) != 0
    || (uint64_t v26 = v43, v43 > 0x270E))
  {
    uint64_t v26 = 0xFFFFFFFFLL;
    if (!v22) {
      goto LABEL_37;
    }
  }
  else
  {
    log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing min word span set to %d", v23, v24, v25, v43);
    if (!v22) {
      goto LABEL_37;
    }
  }
  if (*((_DWORD *)a1 + 324) == 1)
  {
    log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN Phrasing Enabled", v23, v24, v25, 0);
    uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v10 = hlp_Markup((uint64_t)a1, a3, a4);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v10 = fe_phrasing_Process_NN_Phrasing((uint64_t)a1, a2, a3, a4, a5, v26, &v42);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v10 = hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 1);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
  }
LABEL_37:
  if (!*((_DWORD *)a1 + 40))
  {
LABEL_56:
    if (*((_DWORD *)a1 + 364))
    {
      uint64_t v36 = pw_Process(a3, a4, (uint64_t)a1[7], (uint64_t)*a1, (uint64_t)a1[191], (uint64_t ****)a1[181], (uint64_t)a1[183], a1 + 186, *((_DWORD *)a1 + 365), &v39, (uint64_t)a1[192], *((_DWORD *)a1 + 381), *((_DWORD *)a1 + 380));
      if ((v36 & 0x80000000) != 0)
      {
        uint64_t inserted = v36;
        freeSentenceDataNN(*a1, (uint64_t)a1[191]);
        return inserted;
      }
      uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
      if ((v10 & 0x80000000) == 0)
      {
        setbndfromTN(*a1, v39, (uint64_t)a1[191]);
        uint64_t v10 = fe_phrasing_Process_NNPhrasing((uint64_t)a1, a2, a3, a4, (uint64_t)a1[191], a5);
        if ((v10 & 0x80000000) == 0)
        {
          uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
          if ((v10 & 0x80000000) == 0)
          {
            uint64_t v10 = hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 1);
            if ((v10 & 0x80000000) == 0)
            {
              uint64_t inserted = hlp_InsertWordPhraseBoundaries((uint64_t)a1, a3, a4, a1[206] != 0, 0, 0);
              if ((inserted & 0x80000000) != 0) {
                return inserted;
              }
              if (*((_DWORD *)a1 + 320) == 1)
              {
                uint64_t inserted = hlp_setNLUPOSMappings(a1, a3, a4);
                if ((inserted & 0x80000000) != 0) {
                  return inserted;
                }
              }
              if (!*((_DWORD *)a1 + 420)) {
                return inserted;
              }
              return fe_stress_process(*a1, a3, a4, (uint64_t)a1[7], (uint64_t)a1[212], (uint64_t)a1[183], (uint64_t)a1[213], (uint64_t)a1[214], (uint64_t ***)a1[211], *((_WORD *)a1 + 860), *((_DWORD *)a1 + 421));
            }
          }
        }
      }
    }
    else if (*((_DWORD *)a1 + 28))
    {
      log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FEPHRRES: CRF Phrasing Enabled", v23, v24, v25, 0);
      uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v10 = fe_phrasing_Process_CRFPhrasing((uint64_t)a1, a2, a3, a4, a5);
        if ((v10 & 0x80000000) == 0)
        {
          uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
          if ((v10 & 0x80000000) == 0)
          {
            uint64_t v10 = hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 1);
            if ((v10 & 0x80000000) == 0)
            {
              uint64_t inserted = hlp_InsertWordPhraseBoundaries((uint64_t)a1, a3, a4, 0, 0, 0);
              if ((inserted & 0x80000000) != 0 || *((_DWORD *)a1 + 320) != 1) {
                return inserted;
              }
              return hlp_setNLUPOSMappings(a1, a3, a4);
            }
          }
        }
      }
    }
    else
    {
      char v37 = v15 ^ 1;
      if (!*((_DWORD *)a1 + 29)) {
        char v37 = 1;
      }
      if (v37)
      {
        return fe_phrasing_Process_Depes(a1, a2, a3, a4, a5);
      }
      else
      {
        uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
        if ((v10 & 0x80000000) == 0)
        {
          uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
          if ((v10 & 0x80000000) == 0)
          {
            uint64_t v10 = fe_phrasing_Process_Mosynt((uint64_t *)a1, a2, a3, a4, a5);
            if ((v10 & 0x80000000) == 0) {
              return hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 0);
            }
          }
        }
      }
    }
    return v10;
  }
  uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  if ((fe_phrasing_Process_PandP((uint64_t)a1, a2, a3, a4, a5) & 0x80000000) != 0)
  {
    log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FEPHRRES: processing failed, fall back to alternative method", v28, v29, v30, 0);
    uint64_t v10 = paramc_ParamSetUInt((*a1)[5], (uint64_t)"prmigactive", 0);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    goto LABEL_56;
  }
  uint64_t v10 = hlp_Markup((uint64_t)a1, a3, a4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 0);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t inserted = paramc_ParamSetUInt((*a1)[5], (uint64_t)"prmigactive", 1u);
  if ((inserted & 0x80000000) == 0)
  {
    if (*((_DWORD *)a1 + 320) != 1 || (uint64_t inserted = hlp_setNLUPOSMappings(a1, a3, a4), (inserted & 0x80000000) == 0))
    {
      if (v22 && *((_DWORD *)a1 + 324) == 1 && *((_WORD *)a1 + 720) && v42 == 1)
      {
        uint64_t v31 = hlp_RemoveWordPhraseBoundaries(a1, a3, a4, *((unsigned __int16 *)a1 + 720), &v41, &v40);
        uint64_t v32 = v41;
        if ((v31 & 0x80000000) == 0)
        {
          uint64_t v31 = hlp_InsertWordPhraseBoundaries((uint64_t)a1, a3, a4, 1, v41, v40);
          if ((v31 & 0x80000000) == 0)
          {
            log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN Phrasing : cleanup lingdb (numwords=%d)", v33, v34, v35, *((unsigned __int16 *)a1 + 720));
            uint64_t v31 = NNPausing_cleanLingdb((uint64_t)*a1, (uint64_t)a1[7], a3, a4, (uint64_t)(a1 + 163));
          }
        }
        uint64_t inserted = v31;
        if (v32) {
          heap_Free((void *)(*a1)[1], v32);
        }
      }
    }
  }
  return inserted;
}

uint64_t hlp_MarkSildursExternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v14 = 0;
  int v15 = 0;
  unsigned int v12 = 0;
  int v13 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, (char *)&v14 + 2);
  if ((v6 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(*(void *)(a1 + 56) + 184))(a2, a3, HIWORD(v14), 0, (char *)&v15 + 2) & 0x80000000) == 0&& HIWORD(v15) == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, char *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v14), 0, &v11, (char *)&v13 + 2);
    if ((v6 & 0x80000000) == 0 && HIWORD(v13) >= 2u)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, HIWORD(v14), &v14);
      if ((v6 & 0x80000000) == 0)
      {
        unsigned __int16 v7 = v14;
        if ((_WORD)v14)
        {
          while (1)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v7, 0, 1, &v12, (char *)&v13 + 2);
            if ((v8 & 0x80000000) != 0) {
              break;
            }
            if (v12 <= 0xA && ((1 << v12) & 0x610) != 0)
            {
              uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(*(void *)(a1 + 56) + 184))(a2, a3, (unsigned __int16)v14, 8, (char *)&v15 + 2);
              if ((v8 & 0x80000000) != 0) {
                break;
              }
              if (HIWORD(v15))
              {
                uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v14, 8, 1, &v15, (char *)&v13 + 2);
                if ((v8 & 0x80000000) != 0) {
                  break;
                }
                if ((_WORD)v15)
                {
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v14, 18, 9, "external", &v13);
                  if ((v8 & 0x80000000) != 0) {
                    break;
                  }
                }
              }
            }
            uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a2, a3, (unsigned __int16)v14, &v14);
            if ((v6 & 0x80000000) == 0)
            {
              unsigned __int16 v7 = v14;
              if ((_WORD)v14) {
                continue;
              }
            }
            return v6;
          }
          return v8;
        }
      }
    }
  }
  return v6;
}

uint64_t hlp_Markup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v29 = 0;
  int v30 = 0;
  int v28 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  int v26 = 0;
  __int16 v24 = 1;
  unsigned int __s = 0;
  __int16 v22 = 0;
  uint64_t v21 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, (char *)&v28 + 2);
  if ((v6 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)(a1 + 56) + 184))(a2, a3, HIWORD(v28), 0, &v22) & 0x80000000) == 0&& v22 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, char *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v28), 0, &v21, (char *)&v30 + 2);
    if ((v6 & 0x80000000) == 0 && HIWORD(v30) >= 2u)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, HIWORD(v28), &v28);
      if ((v7 & 0x80000000) != 0) {
        return v7;
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v28), 1, &v27, (char *)&v26 + 2);
      if ((v6 & 0x80000000) == 0)
      {
        unsigned __int16 v8 = v28;
        if ((_WORD)v28)
        {
          uint64_t v9 = 0;
          unsigned __int16 v10 = 0;
          int v11 = 0;
          unsigned __int16 v12 = 0;
          int v13 = *(_DWORD *)(v27 + 12);
          while (1)
          {
            uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v8, 0, 1, &v29, (char *)&v30 + 2);
            if ((v7 & 0x80000000) != 0) {
              return v7;
            }
            if ((v29 - 9) < 2 || v29 == 4)
            {
              uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v28, 1, 1, &v26, (char *)&v30 + 2);
              if ((v7 & 0x80000000) != 0) {
                return v7;
              }
              uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v28, 2, 1, (char *)&v25 + 2, (char *)&v30 + 2);
              if ((v7 & 0x80000000) != 0) {
                return v7;
              }
              LOWORD(v25) = 0;
              uint64_t v15 = HIWORD(v26);
              if (v9 >= HIWORD(v26))
              {
                uint64_t v15 = v9;
              }
              else
              {
                __int16 v16 = 0;
                uint64_t v17 = v9;
                uint64_t v18 = (_WORD *)(v27 + 32 * v9 + 12);
                while ((__int16)(HIWORD(v25) - ((__int16)(HIWORD(v25) - v26) > 1)) > (__int16)(*v18 - v13))
                {
                  if (*((_DWORD *)v18 - 3) == 8)
                  {
                    v16 += v18[6];
                    LOWORD(v25) = v16;
                  }
                  ++v17;
                  v18 += 16;
                  if (HIWORD(v26) == v17) {
                    goto LABEL_34;
                  }
                }
                uint64_t v15 = (unsigned __int16)v17;
LABEL_34:
                if (v16 && v10)
                {
                  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v10, 8, 1, &v25, &v30);
                  if ((v7 & 0x80000000) != 0) {
                    return v7;
                  }
                  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v10, 18, 9, "external", &v30);
                  if ((v7 & 0x80000000) != 0) {
                    return v7;
                  }
                  __int16 v16 = v25;
                }
                if (v16 && v12)
                {
                  if (v11 && (unsigned __int16)v26 == v11)
                  {
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v12, 7, 1, &v24, &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v12, 8, 1, &v25, &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                  }
                  else if ((unsigned __int16)v26 != v11)
                  {
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 88))(a2, a3, (unsigned __int16)v28, &v28);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    int v29 = 15;
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v28, 0, 1, &v29, &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v28, 1, 1, &v26, &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v12, 2, 1, (char *)&v25 + 2, (char *)&v30 + 2);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v28, 2, 1, (char *)&v25 + 2, &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v12, 2, 1, &v26, &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a2, a3, v12, 4, &__s, (char *)&v30 + 2);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    __int16 v19 = strlen(__s);
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v28, 4, (unsigned __int16)(v19 + 1), __s, &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v12, 4, 2, "P", &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v28, 7, 1, &v24, &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v28, 8, 1, &v25, &v30);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    unsigned __int16 v12 = v28;
                    int v11 = (unsigned __int16)v26;
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a2, a3, (unsigned __int16)v28, &v28);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                  }
                }
              }
              unsigned __int16 v10 = v28;
              uint64_t v9 = v15;
            }
            else if (v29 == 15)
            {
              unsigned __int16 v12 = v28;
              uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v28, 1, 1, &v26, (char *)&v30 + 2);
              if ((v7 & 0x80000000) != 0) {
                return v7;
              }
              int v11 = (unsigned __int16)v26;
            }
            uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a2, a3, (unsigned __int16)v28, &v28);
            if ((v6 & 0x80000000) == 0)
            {
              unsigned __int16 v8 = v28;
              if ((_WORD)v28) {
                continue;
              }
            }
            return v6;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t hlp_SetExternalSildurs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int v54 = 0;
  int v55 = 0;
  int v52 = 0;
  unsigned int v53 = 0;
  int v51 = 0;
  HIWORD(v50) = 0;
  uint64_t v49 = 0;
  unsigned __int16 v48 = 0;
  int v44 = 0;
  uint64_t v43 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, &v55);
  if ((v6 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(*(void *)(a1 + 56) + 184))(a2, a3, (unsigned __int16)v55, 0, (char *)&v55 + 2) & 0x80000000) == 0&& HIWORD(v55) == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(*(void *)(a1 + 56) + 176))(a2, a3, (unsigned __int16)v55, 0, &v43, &v54);
    if ((v6 & 0x80000000) == 0 && (unsigned __int16)v54 >= 2u)
    {
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 56) + 176))(a2, a3, (unsigned __int16)v55, 1, &v49, &v48);
      if ((updated & 0x80000000) != 0)
      {
        return updated;
      }
      else
      {
        int v8 = *(_DWORD *)(v49 + 12);
        uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, (unsigned __int16)v55, (char *)&v54 + 2);
        if ((v6 & 0x80000000) == 0)
        {
          int v52 = 0;
          HIWORD(v51) = 0;
          unsigned __int16 v47 = 0;
          unsigned __int16 v46 = 0;
          strcpy(__s1, "normal");
          strcpy(v57, "normal");
          int v45 = 0;
          int v50 = 0;
          unsigned __int16 v9 = HIWORD(v54);
          if (HIWORD(v54))
          {
            uint64_t v10 = 0;
            unsigned int v11 = 0;
            uint64_t v12 = 0;
            unsigned __int16 v13 = 0;
            while (1)
            {
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v9, 0, 1, &v53, &v54);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              if (v53 > 0xA || ((1 << v53) & 0x610) == 0)
              {
                uint64_t v31 = HIWORD(v54);
                uint64_t v20 = v12;
                goto LABEL_76;
              }
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v54), 1, 1, (char *)&v52 + 2, &v54);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v54), 2, 1, &v52, &v54);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              HIWORD(v50) = 0;
              if (v13)
              {
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v13, 2, 1, (char *)&v50 + 2, &v54);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
              }
              __strcpy_chk();
              uint64_t updated = hlp_UpdateDomain(a1, a2, a3, (unsigned __int16)v55, &v47, HIWORD(v52), (unsigned __int16)v52, &v46, v57);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              if (v46)
              {
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a2, a3);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
                int v15 = HIWORD(v51);
              }
              else
              {
                int v15 = (unsigned __int16)v52;
                HIWORD(v51) = v52;
              }
              unsigned __int16 v42 = v13;
              if (v15 && v11 < v48)
              {
                uint64_t v16 = v10;
                int v17 = (__int16)(v15 - 1);
                uint64_t v18 = v11;
                uint64_t v19 = v49 + 32 * v11;
                uint64_t v20 = v12;
                if (v17 >= (__int16)(*(_WORD *)(v19 + 12) - v8))
                {
                  uint64_t v21 = (unsigned int *)(v19 + 24);
                  uint64_t v20 = v12;
                  while (1)
                  {
                    if (*(v21 - 6) == 31) {
                      uint64_t v20 = *v21;
                    }
                    if (v48 - 1 == v18) {
                      break;
                    }
                    int v22 = v21[5] - v8;
                    v21 += 8;
                    ++v18;
                    if (v17 < (__int16)v22)
                    {
                      unsigned int v11 = (unsigned __int16)v18;
                      goto LABEL_34;
                    }
                  }
                  unsigned int v11 = v48;
                }
              }
              else
              {
                uint64_t v16 = v10;
                uint64_t v20 = v12;
              }
LABEL_34:
              hlp_GetDomainPauseDur(a1, "spell", &v45, &v44);
              uint64_t v23 = strstr(__s1, "spell");
              __int16 v24 = strstr(v57, "spell");
              uint64_t v10 = v16;
              if (v23)
              {
                if (v24)
                {
                  unsigned __int16 v25 = v42;
                  if (!HIWORD(v50)
                    || ((unsigned int v26 = *(unsigned __int8 *)(v43 + HIWORD(v50) - 1),
                         BOOL v27 = v26 > 0x3F,
                         unint64_t v28 = (1 << v26) & 0x8C00500200000000,
                         !v27)
                      ? (BOOL v29 = v28 == 0)
                      : (BOOL v29 = 1),
                        v29))
                  {
                    LOWORD(v12) = 0;
                    int v30 = 1;
                  }
                  else
                  {
                    int v30 = 0;
                    if (!v12) {
                      LOWORD(v12) = v45;
                    }
                  }
                  goto LABEL_55;
                }
                unsigned __int16 v25 = v42;
                if (!v12)
                {
LABEL_51:
                  int v30 = 0;
                  if (v44) {
                    LOWORD(v12) = v45;
                  }
                  else {
                    LOWORD(v12) = 200;
                  }
                  goto LABEL_55;
                }
                int v30 = 0;
              }
              else if (v24)
              {
                unsigned __int16 v25 = v42;
                if (!v20) {
                  goto LABEL_51;
                }
                int v30 = 0;
                LOWORD(v12) = v20;
              }
              else
              {
                LOWORD(v12) = 0;
                int v30 = 1;
                unsigned __int16 v25 = v42;
              }
LABEL_55:
              if (v16 >= v48)
              {
                __int16 v32 = 0;
              }
              else
              {
                __int16 v32 = 0;
                uint64_t v33 = v16;
                uint64_t v34 = v49 + 32 * v16 + 12;
                uint64_t v35 = (int *)v34;
                while (1)
                {
                  int v36 = *v35;
                  v35 += 8;
                  if ((__int16)(v52 - ((__int16)(v52 - HIWORD(v52)) > 1)) <= (__int16)(v36 - v8)) {
                    break;
                  }
                  if (*(_DWORD *)(v34 - 12) == 8) {
                    v32 += *(_WORD *)(v34 + 12);
                  }
                  ++v33;
                  uint64_t v34 = (uint64_t)v35;
                  if (v48 == v33)
                  {
                    uint64_t v10 = v48;
                    goto LABEL_64;
                  }
                }
                uint64_t v10 = (unsigned __int16)v33;
              }
LABEL_64:
              if (v30) {
                __int16 v37 = 0;
              }
              else {
                __int16 v37 = v12;
              }
              int v38 = v30 ^ 1;
              BOOL v39 = v32 == 0;
              if (!v32) {
                __int16 v32 = v37;
              }
              LOWORD(v50) = v32;
              if (!v39) {
                int v38 = 1;
              }
              if (v25)
              {
                if (v38)
                {
                  uint64_t v40 = v25;
                  uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v40, 8, 1, &v50, &v51);
                  if ((updated & 0x80000000) != 0) {
                    return updated;
                  }
                  uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v40, 18, 9, "external", &v51);
                  if ((updated & 0x80000000) != 0) {
                    return updated;
                  }
                }
              }
              uint64_t v31 = HIWORD(v54);
              unsigned __int16 v13 = HIWORD(v54);
LABEL_76:
              uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 120))(a2, a3, v31, (char *)&v54 + 2);
              if ((v6 & 0x80000000) == 0)
              {
                unsigned __int16 v9 = HIWORD(v54);
                uint64_t v12 = v20;
                if (HIWORD(v54)) {
                  continue;
                }
              }
              return v6;
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t hlp_SetInternalSildurs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v30 = 0;
  int v31 = 0;
  int v28 = 0;
  int v29 = 0;
  int v27 = 0;
  HIWORD(v26) = 0;
  int v22 = 0;
  uint64_t v19 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, &v31);
  if ((v8 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(*(void *)(a1 + 56) + 184))(a2, a3, (unsigned __int16)v31, 0, (char *)&v31 + 2) & 0x80000000) == 0&& HIWORD(v31) == 1)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(*(void *)(a1 + 56) + 176))(a2, a3, (unsigned __int16)v31, 0, &v19, &v30);
    if ((v8 & 0x80000000) == 0 && (unsigned __int16)v30 >= 2u)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, (unsigned __int16)v31, (char *)&v30 + 2);
      if ((v8 & 0x80000000) == 0)
      {
        LOWORD(v27) = 0;
        int v25 = 0;
        int v26 = 0;
        int v28 = 0;
        int v23 = 0;
        strcpy(__s, "normal");
        strcpy(v33, "normal");
        unsigned __int16 v9 = HIWORD(v30);
        if (HIWORD(v30))
        {
          LOWORD(v10) = 0;
          unsigned __int16 v11 = 0;
          while (1)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v9, 0, 1, &v29, &v30);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            if ((v29 - 9) < 2 || v29 == 4) {
              break;
            }
            if (v29 == 15)
            {
              uint64_t v10 = HIWORD(v30);
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v30), 1, 1, &v27, &v30);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v10, 7, 1, (char *)&v26 + 2, &v30);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
            }
LABEL_43:
            uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 120))(a2, a3, HIWORD(v30), (char *)&v30 + 2);
            if ((v8 & 0x80000000) != 0) {
              return v8;
            }
            unsigned __int16 v9 = HIWORD(v30);
            if (!HIWORD(v30))
            {
              if (!v11) {
                return v8;
              }
              HIWORD(v25) = 0;
              return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, v11, 8, 1, (char *)&v25 + 2, (char *)&v27 + 2);
            }
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v30), 1, 1, (char *)&v28 + 2, &v30);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v30), 2, 1, &v28, &v30);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          LOWORD(v26) = 0;
          if (v11)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v11, 2, 1, &v26, &v30);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            LOWORD(v25) = 0;
            int v24 = 0;
            uint64_t updated = hlp_ReadSildur(a1, a2, a3, v11, &v25, &v24);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            if (v24)
            {
              int v14 = 1;
            }
            else
            {
              if (a4) {
                BOOL v15 = (unsigned __int16)v25 == 0;
              }
              else {
                BOOL v15 = 1;
              }
              int v14 = !v15;
            }
          }
          else
          {
            int v14 = 0;
            LOWORD(v25) = 0;
            int v24 = 0;
          }
          __strcpy_chk();
          uint64_t updated = hlp_UpdateDomain(a1, a2, a3, (unsigned __int16)v31, (unsigned __int16 *)&v23 + 1, HIWORD(v28), (unsigned __int16)v28, (unsigned __int16 *)&v23, v33);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          hlp_GetDomainPauseDur(a1, __s, &v22, &v20);
          hlp_GetDomainPauseDur(a1, v33, &v21, &v20);
          __int16 v16 = v22;
          HIWORD(v25) = 0;
          BOOL v17 = (unsigned __int16)v10 != 0;
          if (v14)
          {
            __int16 v16 = v25;
          }
          else if (!HIWORD(v28) || !(_WORD)v10 || (BOOL v17 = 1, (unsigned __int16)v27 != HIWORD(v28)) || HIWORD(v26) > 1u)
          {
LABEL_37:
            if (v11)
            {
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, v11, 8, 1, (char *)&v25 + 2, (char *)&v27 + 2);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
            }
            if (v17 && (unsigned __int16)v27 == HIWORD(v28))
            {
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v10, 8, 1, (char *)&v25 + 2, (char *)&v27 + 2);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
            }
            unsigned __int16 v11 = HIWORD(v30);
            goto LABEL_43;
          }
          HIWORD(v25) = v16;
          goto LABEL_37;
        }
      }
    }
  }
  return v8;
}

uint64_t hlp_setNLUPOSMappings(void *a1, uint64_t a2, uint64_t a3)
{
  int v40 = 0;
  int v41 = 0;
  unsigned int v39 = 0;
  *(void *)int v38 = 0;
  __int16 v37 = 0;
  *(void *)&__n[1] = 0;
  __n[0] = 0;
  uint64_t v34 = 0;
  unsigned int __s = 0;
  __int16 v32 = 0;
  uint64_t v33 = 0;
  if ((com_mosynt_GetCfgParamVal(a1[11], a1[12], a1[13], (uint64_t)"fephrase_max_search_key", "64", &v32) & 0x80000000) != 0) {
    uint64_t v6 = 64;
  }
  else {
    uint64_t v6 = atoi(v32);
  }
  uint64_t v7 = heap_Calloc(*(void **)(*a1 + 8), 1, v6);
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a2, a3, 1, 0, (char *)&v41 + 2);
    if ((v13 & 0x80000000) != 0)
    {
LABEL_33:
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1[7] + 184))(a2, a3, HIWORD(v41), 0, &v37);
      if ((v14 & 0x80000000) == 0 && v37 == 1)
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, char *))(a1[7] + 176))(a2, a3, HIWORD(v41), 0, &v33, (char *)&v40 + 2);
        if ((v14 & 0x80000000) == 0 && HIWORD(v40) >= 2u)
        {
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a2, a3, 2, HIWORD(v41), &v41);
          if ((v14 & 0x80000000) == 0)
          {
            unsigned __int16 v15 = v41;
            if ((_WORD)v41)
            {
              while (1)
              {
                uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1[7] + 168))(a2, a3, v15, 0, 1, &v39, (char *)&v40 + 2);
                if ((v13 & 0x80000000) != 0) {
                  goto LABEL_33;
                }
                if (v39 <= 0xA && ((1 << v39) & 0x610) != 0)
                {
                  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v41, 5, &__s, (char *)&v40 + 2);
                  if ((v13 & 0x80000000) != 0) {
                    goto LABEL_33;
                  }
                  if (strlen(__s) != 1)
                  {
                    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1[7] + 184))(a2, a3, (unsigned __int16)v41, 14, &v37);
                    if ((v13 & 0x80000000) != 0) {
                      goto LABEL_33;
                    }
                    if (v37)
                    {
                      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v41, 14, v38, (char *)&v40 + 2);
                      if ((v13 & 0x80000000) != 0) {
                        goto LABEL_33;
                      }
                      if (!HIWORD(v40))
                      {
                        *(unsigned char *)uint64_t v12 = *__s;
                        *(unsigned char *)(v12 + 1) = 0;
                        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NLUPOSMAP from %s to %s (default in lieu of NLU field)", v17, v18, v19, (uint64_t)__s);
                        int v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(a1[7] + 160);
                        uint64_t v25 = (unsigned __int16)(strlen((const char *)v12) + 1);
                        uint64_t v26 = a2;
                        uint64_t v27 = a3;
                        uint64_t v28 = (unsigned __int16)v41;
                        int v29 = (char *)v12;
                        goto LABEL_28;
                      }
                      hlp_NLUStrFind(*(char **)v38, "POS", (uint64_t *)&__n[1], __n);
                      strncpy((char *)v12, *(const char **)&__n[1], __n[0]);
                      *(unsigned char *)(v12 + __n[0]) = 0;
                      if ((ssftmap_FindReadOnly(a1[161], v12, &v34) & 0x1FFF) != 0x14)
                      {
                        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NLUPOSMAP from %s (NLU %s) to %s", v20, v21, v22, (uint64_t)__s);
                        int v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(a1[7] + 160);
                        uint64_t v25 = (unsigned __int16)(strlen(v34) + 1);
                        uint64_t v26 = a2;
                        uint64_t v27 = a3;
                        uint64_t v28 = (unsigned __int16)v41;
                        int v29 = v34;
LABEL_28:
                        uint64_t v13 = v24(v26, v27, v28, 5, v25, v29, &v40);
                        if ((v13 & 0x80000000) != 0) {
                          goto LABEL_33;
                        }
                        goto LABEL_29;
                      }
                      *(unsigned char *)(v12 + 1) = 0;
                      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NLUPOSMAP from %s (NLU %s) to %s", v20, v21, v22, (uint64_t)__s);
                      __int16 v23 = strlen((const char *)v12);
                      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, int *))(a1[7] + 160))(a2, a3, (unsigned __int16)v41, 5, (unsigned __int16)(v23 + 1), v12, &v40);
                      if ((v13 & 0x80000000) != 0) {
                        goto LABEL_33;
                      }
                    }
                  }
                }
LABEL_29:
                uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 120))(a2, a3, (unsigned __int16)v41, &v41);
                if ((v14 & 0x80000000) == 0)
                {
                  unsigned __int16 v15 = v41;
                  if ((_WORD)v41) {
                    continue;
                  }
                }
                break;
              }
            }
          }
        }
      }
    }
    heap_Free(*(void **)(*a1 + 8), v12);
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v8, v9, v10, v11, v31);
    return 2315264010;
  }
  return v14;
}

uint64_t hlp_RemoveWordPhraseBoundaries(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, _WORD *a6)
{
  unsigned int v26 = 0;
  int v27 = 0;
  int v24 = 0;
  int v25 = 0;
  int v23 = 0;
  *a6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a2, a3, 1, 0, (char *)&v27 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 152))(a2, a3, 2, HIWORD(v27), &v23);
    if ((result & 0x80000000) == 0)
    {
      if (!(_WORD)v23) {
        goto LABEL_26;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a2, a3, 2, HIWORD(v27), &v27);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned __int16 v13 = v27;
      if ((_WORD)v27)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 4 * a4;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1[7] + 168))(a2, a3, v13, 0, 1, &v26, (char *)&v25 + 2);
          if ((result & 0x80000000) != 0) {
            break;
          }
          uint64_t v16 = (unsigned __int16)v27;
          if (v26 <= 0xA && ((1 << v26) & 0x610) != 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v27, 1, 1, &v24, (char *)&v25 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v27, 2, 1, (char *)&v23 + 2, (char *)&v25 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            if (*a6 && v14) {
              *(_WORD *)(v14 + 4 * ((unsigned __int16)*a6 - 1) + 2) = HIWORD(v23);
            }
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 120))(a2, a3, (unsigned __int16)v27, &v27);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (v26 == 15)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v16, 1, 1, &v25, (char *)&v25 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, v16, 2, 1, (char *)&v24 + 2, (char *)&v25 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            if (!v14)
            {
              uint64_t v14 = heap_Calloc(*(void **)(*a1 + 8), 1, v15);
              if (!v14)
              {
                log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v18, v19, v20, v21, v22);
                uint64_t result = 2315264010;
                break;
              }
            }
            *(_WORD *)(v14 + 4 * (unsigned __int16)*a6) = v25;
            *(_WORD *)(v14 + 4 * (unsigned __int16)(*a6)++ + 2) = HIWORD(v24);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[7] + 192))(a2, a3, v16);
          }
          unsigned __int16 v13 = v27;
        }
        while ((_WORD)v27);
      }
      else
      {
LABEL_26:
        uint64_t v14 = 0;
      }
      *a5 = v14;
    }
  }
  return result;
}

uint64_t hlp_InsertWordPhraseBoundaries(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  v40[0] = 0;
  int v38 = 0;
  int v39 = 0;
  int v36 = 0;
  int v37 = 0;
  unsigned __int16 v35 = 0;
  uint64_t v33 = 0;
  unsigned int __s = 0;
  __s1 = 0;
  int v31 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, _WORD *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, v40);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 152))(a2, a3, 2, v40[0], &v31);
    if ((result & 0x80000000) == 0)
    {
      if (!(_WORD)v31
        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, v40[0], (char *)&v39 + 2), (result & 0x80000000) == 0))
      {
        unsigned __int16 v13 = HIWORD(v39);
        if (HIWORD(v39))
        {
          int v14 = 0;
          BOOL v30 = 0;
          if (a4 == 1) {
            __int16 v15 = 0;
          }
          else {
            __int16 v15 = 200;
          }
          __int16 v29 = v15;
          int v16 = -1;
          uint64_t v17 = "*?";
          while (1)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v13, 0, 1, &v38, (char *)&v37 + 2);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if ((v38 - 9) < 2 || v38 == 4) {
              break;
            }
            if (v38 == 15) {
              LOWORD(v39) = HIWORD(v39);
            }
LABEL_71:
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 120))(a2, a3, HIWORD(v39), (char *)&v39 + 2);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            unsigned __int16 v13 = HIWORD(v39);
            if (!HIWORD(v39)) {
              goto LABEL_83;
            }
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v39), 1, 1, (char *)&v36 + 2, (char *)&v37 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v39), 2, 1, &v36, (char *)&v37 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v39), 8, 1, &v35, (char *)&v37 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(*(void *)(a1 + 56) + 184))(a2, a3, HIWORD(v39), 18, (char *)&v31 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          LOWORD(v31) = 0;
          if (a6)
          {
            uint64_t v20 = (unsigned __int16 *)(a5 + 2);
            uint64_t v19 = a6;
            do
            {
              int v21 = *v20;
              v20 += 2;
              if (v21 == (unsigned __int16)v36) {
                LOWORD(v31) = 1;
              }
              --v19;
            }
            while (v19);
          }
          if (HIWORD(v31))
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v39), 18, &__s1, (char *)&v37 + 2);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            BOOL v30 = strcmp(__s1, "external") == 0;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56)
                                                                                                 + 176))(a2, a3, HIWORD(v39), 3, &v33, (char *)&v37 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (strstr(v33, v17)) {
            int v14 = 1;
          }
          __int16 v22 = HIWORD(v36);
          __int16 v23 = v36;
          if (HIWORD(v36) > (unsigned __int16)v36) {
            return 2315271857;
          }
          if (!(_WORD)v39)
          {
            uint64_t result = hlp_InsertWordPhrase(a1, a2, a3, HIWORD(v39), SHIWORD(v36), v36, 0, v29, (unsigned __int16 *)&v39);
            if ((result & 0x80000000) != 0) {
              return result;
            }
LABEL_48:
            if (v35)
            {
              int v24 = v17;
              unsigned __int16 v42 = HIWORD(v39);
              int v41 = 0;
              v40[1] = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 120))(a2, a3) & 0x80000000) == 0)
              {
                int v25 = 0;
                while (v42
                     && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a2, a3) & 0x80000000) == 0)
                {
                  if (v41 == 15)
                  {
                    int v25 = 1;
                  }
                  else if ((v41 - 9) < 2 || v41 == 4)
                  {
                    if (v25) {
                      break;
                    }
                    int v16 = v35;
                    uint64_t v17 = v24;
                    if (v35 <= 0x1Du && !v30)
                    {
                      unsigned __int16 v35 = 0;
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v39), 8, 1, &v35, &v37);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      int v16 = v35;
                    }
                    goto LABEL_71;
                  }
                  if (((*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56)
                                                                                                + 120))(a2, a3, v42, &v42) & 0x80000000) != 0)break;
                }
              }
              uint64_t v17 = v24;
            }
            else if ((unsigned __int16)v31 == 1 && a4 == 1)
            {
              int v16 = 0;
            }
            goto LABEL_71;
          }
          if (v16 < 1)
          {
            if (v16)
            {
LABEL_45:
              if (!a4)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v39, 2, 1, &v36, &v37);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              int v16 = -1;
              goto LABEL_48;
            }
            if (a4 == 1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 160))(a2, a3);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              __int16 v22 = HIWORD(v36);
              __int16 v23 = v36;
            }
            uint64_t result = hlp_InsertWordPhrase(a1, a2, a3, HIWORD(v39), v22, v23, 2, 0, (unsigned __int16 *)&v39);
          }
          else
          {
            if (a4 == 1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 160))(a2, a3);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              __int16 v22 = HIWORD(v36);
              __int16 v23 = v36;
            }
            uint64_t result = hlp_InsertWordPhrase(a1, a2, a3, HIWORD(v39), v22, v23, 1, v16, (unsigned __int16 *)&v39);
          }
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_45;
        }
        int v14 = 0;
LABEL_83:
        if (a4 == 1 && (_WORD)v39)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v39, 2, 1, &v36, &v37);
          if ((result & 0x80000000) != 0 || !(_WORD)v39) {
            return result;
          }
        }
        else if (!(_WORD)v39)
        {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(*(void *)(a1 + 56)
                                                                                              + 176))(a2, a3, v40[0], 0, &__s, (char *)&v37 + 2);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (__s && *__s)
        {
          if (__s[strlen(__s) - 1] == 63 || v14 != 0) {
            return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v39, 4, 2, "Y", &v37);
          }
        }
        else if (v14)
        {
          return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v39, 4, 2, "Y", &v37);
        }
        return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v39, 4, 2, "T", &v37);
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_Process_Depes(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v59 = 0;
  int v57 = 0;
  int v58 = 0;
  int v56 = 0;
  unsigned __int16 v55 = 0;
  unsigned int v54 = 0;
  uint64_t v52 = 0;
  unsigned int __s = 0;
  int v51 = 0;
  __int16 v50 = 0;
  __s1 = 0;
  int v48 = 0;
  *a5 = 1;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a3, a4, 1, 0, (char *)&v58 + 2);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1[7] + 184))(a3, a4, HIWORD(v58), 0, &v50) & 0x80000000) != 0)return v8; {
  if (v50 != 1)
  }
    return v8;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(a1[7] + 176))(a3, a4, HIWORD(v58), 0, &v59, (char *)&v56 + 2);
  if ((v8 & 0x80000000) != 0 || HIWORD(v56) < 2u) {
    return v8;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1[7] + 176))(a3, a4, HIWORD(v58), 1, &v52, (char *)&v51 + 2);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  int v10 = *(_DWORD *)(v52 + 12);
  uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a3, a4, 2, HIWORD(v58), &v58);
  if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
    goto LABEL_25;
  }
  int v12 = 1;
  int v13 = 1;
  while (1)
  {
    if (!(_WORD)v58)
    {
      int v21 = (unsigned char *)heap_Alloc(*(void *)(*a1 + 8), (unsigned __int16)v12 + 128);
      a1[17] = v21;
      if (!v21
        || (*int v21 = 0, v26 = (unsigned char *)heap_Alloc(*(void *)(*a1 + 8), (unsigned __int16)v12), (a1[18] = v26) == 0)
        || (*v26 = 0, int v27 = (unsigned char *)heap_Alloc(*(void *)(*a1 + 8), (unsigned __int16)v12), (a1[19] = v27) == 0))
      {
        uint64_t v8 = 2315264010;
        log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v45);
        goto LABEL_26;
      }
      *int v27 = 0;
      uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a3, a4, 2, HIWORD(v58), &v58);
      if ((LastTnMarkerUpToPos & 0x80000000) == 0)
      {
        LOWORD(v28) = v58;
        HIWORD(v57) = v58;
        if ((_WORD)v58)
        {
          int v29 = 0;
          do
          {
            uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1[7] + 168))(a3, a4, (unsigned __int16)v28, 0, 1, &v54, (char *)&v56 + 2);
            if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
              goto LABEL_25;
            }
            if (v54 - 9 < 2 || v54 == 4)
            {
              *(_WORD *)uint64_t v60 = 0;
              __int16 v47 = 0;
              __int16 v50 = 0;
              uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a3, a4, HIWORD(v57), 1, 1, &v56, (char *)&v56 + 2);
              if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                goto LABEL_25;
              }
              uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a3, a4, HIWORD(v57), 2, 1, &v55, (char *)&v56 + 2);
              if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                goto LABEL_25;
              }
              if ((__int16)(v55 - v56) <= 1) {
                __int16 v31 = 0;
              }
              else {
                __int16 v31 = -1;
              }
              *(_WORD *)uint64_t v60 = 0;
              unint64_t v32 = (unsigned __int16)v51;
              unsigned __int16 v33 = HIWORD(v51);
              if ((unsigned __int16)v51 < HIWORD(v51))
              {
                int v46 = v29;
                uint64_t v34 = (unsigned __int16)v57;
                uint64_t v35 = 32 * (unsigned __int16)v51;
                do
                {
                  if ((__int16)(*(_DWORD *)(v52 + v35 + 12) - v10) >= (__int16)(v55 + v31)) {
                    break;
                  }
                  if (*(_DWORD *)(v52 + v35) == 8 && v34 != 0)
                  {
                    *(_WORD *)v60 += *(_WORD *)(v52 + v35 + 24);
                    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a1[7] + 160))(a3, a4, v34, 8, 1, v60, &v47);
                    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                      goto LABEL_25;
                    }
                    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(a1[7] + 160))(a3, a4, v34, 18, 9, "external", &v47);
                    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                      goto LABEL_25;
                    }
                    unsigned __int16 v33 = HIWORD(v51);
                  }
                  ++v32;
                  v35 += 32;
                }
                while (v32 < v33);
                int v29 = v46;
              }
              LOWORD(v51) = v32;
              *(_WORD *)uint64_t v60 = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1[7] + 184))(a3, a4, HIWORD(v57), 8, &v50) & 0x80000000) != 0|| !v50)
              {
                uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1[7] + 160))(a3, a4, HIWORD(v57), 8, 1, v60, &v47);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
              }
              unsigned __int16 v37 = HIWORD(v57);
              LOWORD(v57) = HIWORD(v57);
            }
            else if (v54 == 5)
            {
              int v38 = HIWORD(v57);
              unsigned __int16 v37 = v29;
              if (HIWORD(v57) != (unsigned __int16)v29)
              {
                uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a3, a4, HIWORD(v57), 4, &__s1, (char *)&v56 + 2);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a3, a4, HIWORD(v57), 1, 1, &v56, (char *)&v56 + 2);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a3, a4, HIWORD(v57), 2, 1, &v55, (char *)&v56 + 2);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                uint64_t LastTnMarkerUpToPos = hlp_GetLastTnMarkerUpToPos((uint64_t)a1, a3, a4, HIWORD(v58), v56, v61);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                int v39 = __s1;
                if (!strcmp(__s1, "phon"))
                {
                  int v39 = v61;
                  __s1 = v61;
                }
                uint64_t LastTnMarkerUpToPos = hlp_Remap(a1, a3, a4, HIWORD(v58), HIWORD(v57), v39, &v55);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                int v48 = 0;
                strcpy(v60, "tnpausedur");
                size_t v40 = strlen(__s1);
                if (v40 < 255 - strlen(v60))
                {
                  __strcat_chk();
                  if ((paramc_ParamGetUInt(*(void *)(*a1 + 40), (uint64_t)v60, (unsigned int *)&v48) & 0x80000000) != 0) {
                    int v48 = 0;
                  }
                }
                int v41 = __s1;
                if (strstr(__s1, "spell"))
                {
                  unsigned int v42 = v55;
                  uint64_t v43 = v52;
                  if (HIWORD(v51))
                  {
                    uint64_t v44 = 0;
                    do
                    {
                      if ((__int16)v55 <= (__int16)(*(_WORD *)(v52 + v44 + 12) - v10)) {
                        break;
                      }
                      if (*(_DWORD *)(v52 + v44) == 31) {
                        int v48 = *(_DWORD *)(v52 + v44 + 24);
                      }
                      v44 += 32;
                    }
                    while (32 * HIWORD(v51) != v44);
                  }
                }
                else
                {
                  unsigned int v42 = v55;
                  uint64_t v43 = v52;
                }
                uint64_t LastTnMarkerUpToPos = hlp_Phrasing((uint64_t)a1, v59, v42, v41, a3, a4, (unsigned __int16 *)&v58, v43, &v51, (unsigned __int16 *)&v51 + 1, v10, v48, (unsigned __int16 *)&v57, v12);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                int v28 = (unsigned __int16)v58;
                HIWORD(v57) = v58;
                int v29 = v38;
                if (!(_WORD)v58) {
                  break;
                }
                continue;
              }
            }
            else
            {
              unsigned __int16 v37 = HIWORD(v57);
            }
            uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a3, a4, v37, (char *)&v57 + 2);
            if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
              goto LABEL_25;
            }
            int v28 = HIWORD(v57);
            if (!(_WORD)v58) {
              break;
            }
          }
          while (v28);
        }
        uint64_t LastTnMarkerUpToPos = hlp_InsertWordPhraseBoundaries((uint64_t)a1, a3, a4, 0, 0, 0);
      }
LABEL_25:
      uint64_t v8 = LastTnMarkerUpToPos;
      goto LABEL_26;
    }
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a3, a4);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
    if (v54 > 0xA || ((1 << v54) & 0x610) == 0) {
      goto LABEL_24;
    }
    if (!v13) {
      ++v12;
    }
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a3, a4, (unsigned __int16)v58, 1, 1, &v56, (char *)&v56 + 2);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a3, a4, (unsigned __int16)v58, 2, 1, &v55, (char *)&v56 + 2);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a3, a4, (unsigned __int16)v58, 5, &__s, (char *)&v56 + 2);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
    __int16 v15 = v55 - v56;
    if (v55 < (unsigned __int16)v56) {
      break;
    }
    int v13 = 0;
    int v16 = (__int16)strlen(__s);
    if (v16 <= v15) {
      int v16 = v15;
    }
    v12 += v16;
LABEL_24:
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 120))(a3, a4, (unsigned __int16)v58, &v58);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
  }
  uint64_t v8 = 2315271857;
LABEL_26:
  uint64_t v17 = a1[17];
  if (v17) {
    heap_Free(*(void **)(*a1 + 8), v17);
  }
  a1[17] = 0;
  uint64_t v18 = a1[18];
  if (v18) {
    heap_Free(*(void **)(*a1 + 8), v18);
  }
  a1[18] = 0;
  uint64_t v19 = a1[19];
  if (v19) {
    heap_Free(*(void **)(*a1 + 8), v19);
  }
  a1[19] = 0;
  return v8;
}

uint64_t fe_phrasing_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62343, 1728);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2315264008;
  }
}

uint64_t fe_phrasing_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2315264001;
  }
  uint64_t result = 0;
  *a2 = &IFePhrasing;
  return result;
}

uint64_t hlp_ReadSildur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, _DWORD *a6)
{
  *a5 = 0;
  *a6 = 0;
  if (!a4) {
    return 0;
  }
  __int16 v17 = 0;
  __s1 = 0;
  __int16 v15 = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)(a1 + 56) + 184))(a2, a3, a4, 8, &v17);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  if (v17)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, a4, 8, 1, a5, &v15);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)(a1 + 56) + 184))(a2, a3, a4, 18, &v17);
  if ((v13 & 0x80000000) == 0)
  {
    if (v17)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(*(void *)(a1 + 56)
                                                                                              + 176))(a2, a3, a4, 18, &__s1, &v15);
      if ((v13 & 0x80000000) == 0 && !strcmp(__s1, "external")) {
        *a6 = 1;
      }
    }
  }
  return v13;
}

uint64_t hlp_CopyWordRec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = 0;
  unsigned __int8 v11 = 0;
  int v18 = 0;
  unsigned int __s = 0;
  int v16 = 0;
  __int16 v15 = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 184))(a2, a3, a4, v11, (char *)&v18 + 2);
    if ((result & 0x80000000) != 0) {
      break;
    }
    if (HIWORD(v18))
    {
      if (v11 <= 0x11u && ((1 << v11) & 0x20186) != 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, a4, v11, 1, &v18, (char *)&v16 + 2);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (v11 == 8 && *(_DWORD *)(a1 + 112) && (_WORD)v18)
        {
          __int16 v15 = 0;
          int v10 = 1;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56)
                                                                                                + 160))(a2, a3, a4, 8, 1, &v15, &v16);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, a5, v11, 1, &v18, &v16);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 176))(a2, a3, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        __int16 v14 = strlen(__s);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, a5, v11, (unsigned __int16)(v14 + 1), __s, &v16);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
    unsigned int v13 = v11++;
    if (v13 >= 0x15)
    {
      if (v10 == 1)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 184))(a2, a3, a4, 7, (char *)&v18 + 2);
        if ((result & 0x80000000) == 0)
        {
          __int16 v15 = 3;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, a4, 7, 1, &v15, &v16);
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t hlp_splitNLURangeTags(uint64_t *a1, char *__s, unsigned __int8 **a3, unsigned __int8 **a4)
{
  uint64_t v4 = 2315264010;
  if (!__s) {
    return 2315264007;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*a1 + 8);
  size_t v10 = strlen(__s);
  unsigned __int8 v11 = (char *)heap_Calloc(v9, 1, v10 + 1);
  if (v11)
  {
    uint64_t v12 = (unsigned __int8 *)v11;
    strcpy(v11, __s);
    size_t v13 = strlen(__s);
    __int16 v14 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, v13 + 1);
    if (!v14)
    {
      uint64_t v97 = *(void **)(v8 + 8);
      uint64_t v98 = (uint64_t)v12;
LABEL_235:
      heap_Free(v97, v98);
      return v4;
    }
    uint64_t v123 = (unsigned __int8 *)v14;
    strcpy(v14, __s);
    unsigned __int16 v15 = 0;
    int v16 = __s;
    do
    {
      if (hlp_NLUStrKeyLen(v16) >= 3)
      {
        unsigned int v17 = *v16 - 69;
        BOOL v18 = v17 > 0xE;
        int v19 = (1 << v17) & 0x4011;
        BOOL v20 = v18 || v19 == 0;
        if (!v20 && v16[1] == 95) {
          ++v15;
        }
      }
      int v16 = hlp_NLUStrNext(v16);
    }
    while (v16);
    if (!v15) {
      goto LABEL_236;
    }
    uint64_t v21 = heap_Calloc(*(void **)(v8 + 8), 8, v15);
    if (!v21)
    {
LABEL_234:
      heap_Free(*(void **)(v8 + 8), (uint64_t)v12);
      uint64_t v97 = *(void **)(v8 + 8);
      uint64_t v98 = (uint64_t)v123;
      goto LABEL_235;
    }
    uint64_t v22 = v21;
    uint64_t v112 = a3;
    uint64_t v114 = a4;
    uint64_t v23 = __s;
    uint64_t v24 = 0;
    int __sa = v23;
    do
    {
      unsigned int v25 = hlp_NLUStrKeyLen(v23);
      if (v25 >= 3)
      {
        unsigned int v26 = *v23 - 69;
        BOOL v18 = v26 > 0xE;
        int v27 = (1 << v26) & 0x4011;
        BOOL v28 = v18 || v27 == 0;
        if (!v28 && v23[1] == 95)
        {
          unsigned int v29 = v25;
          BOOL v30 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, v25 - 1);
          if (!v30)
          {
            a4 = v114;
            goto LABEL_228;
          }
          __int16 v31 = v30;
          unint64_t v32 = v12;
          strncpy(v30, v23 + 2, v29 - 2);
          if ((_WORD)v24)
          {
            uint64_t v33 = v24;
            uint64_t v24 = (unsigned __int16)v24;
            uint64_t v34 = (const char **)v22;
            uint64_t v35 = (unsigned __int16)v24;
            while (1)
            {
              if (!*v34)
              {
LABEL_28:
                uint64_t v4 = 2315264010;
                goto LABEL_30;
              }
              if (!strcmp(*v34, v31)) {
                break;
              }
              ++v34;
              if (!--v35) {
                goto LABEL_28;
              }
            }
            heap_Free(*(void **)(v8 + 8), (uint64_t)v31);
            uint64_t v24 = v33;
            uint64_t v12 = v32;
            uint64_t v4 = 2315264010;
          }
          else
          {
            LODWORD(v33) = v24;
            uint64_t v24 = 0;
LABEL_30:
            *(void *)(v22 + 8 * v24) = v31;
            uint64_t v24 = (v33 + 1);
            uint64_t v12 = v32;
          }
        }
      }
      uint64_t v23 = hlp_NLUStrNext(v23);
    }
    while (v23);
    int v36 = *(uint64_t **)(v8 + 8);
    a4 = v114;
    if (!(_WORD)v24)
    {
      heap_Free(v36, v22);
      goto LABEL_236;
    }
    unsigned int v119 = -1979703286;
    uint64_t v37 = heap_Realloc(v36, v22, 8 * (unsigned __int16)v24);
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v122 = (unsigned __int16)v24;
      uint64_t v39 = heap_Calloc(*(void **)(v8 + 8), 2, (unsigned __int16)v24);
      if (v39)
      {
        uint64_t v111 = v39;
        size_t v40 = __sa;
        do
        {
          unsigned int v41 = hlp_NLUStrKeyLen(v40);
          if (v41 >= 3)
          {
            unsigned int v42 = *v40 - 69;
            BOOL v18 = v42 > 0xE;
            int v43 = (1 << v42) & 0x4011;
            BOOL v44 = v18 || v43 == 0;
            if (!v44 && v40[1] == 95)
            {
              uint64_t v45 = 0;
              size_t v46 = (unsigned __int16)(v41 - 2);
              do
              {
                __int16 v47 = *(const char **)(v38 + 8 * v45);
                if (!v47) {
                  break;
                }
                if (!strncmp(v47, v40 + 2, v46))
                {
                  if ((v45 & 0x8000) == 0) {
                    ++*(_WORD *)(v111 + 2 * v45);
                  }
                  break;
                }
                ++v45;
              }
              while ((unsigned __int16)v24 != v45);
            }
          }
          size_t v40 = hlp_NLUStrNext(v40);
        }
        while (v40);
        uint64_t v48 = heap_Calloc(*(void **)(v8 + 8), 8, (unsigned __int16)v24);
        if (v48)
        {
          uint64_t v49 = v48;
          unsigned __int16 v110 = v24;
          uint64_t v50 = 0;
          a4 = v114;
          a3 = v112;
          do
          {
            uint64_t v51 = heap_Calloc(*(void **)(v8 + 8), 8, *(unsigned __int16 *)(v111 + 2 * v50));
            *(void *)(v49 + 8 * v50) = v51;
            if (!v51) {
              goto LABEL_210;
            }
            ++v50;
          }
          while (v122 != v50);
          uint64_t v52 = heap_Calloc(*(void **)(v8 + 8), 2, v122);
          if (!v52)
          {
LABEL_210:
            uint64_t v67 = 0;
            LOWORD(v24) = v110;
            goto LABEL_211;
          }
          uint64_t v116 = v49;
          uint64_t v117 = v52;
          uint64_t v118 = v38;
          unsigned int v53 = __sa;
          LOWORD(v24) = v110;
          do
          {
            unsigned int v54 = hlp_NLUStrKeyLen(v53);
            if (v54 >= 3)
            {
              unsigned int v55 = *v53 - 69;
              BOOL v18 = v55 > 0xE;
              int v56 = (1 << v55) & 0x4011;
              if (!v18 && v56 != 0 && v53[1] == 95)
              {
                int KeyIdx = hlp_getKeyIdx(v118, v110, v53 + 2, (unsigned __int16)(v54 - 2));
                if ((KeyIdx & 0x80000000) == 0)
                {
                  uint64_t v59 = (unsigned __int16)KeyIdx;
                  uint64_t v60 = *(void *)(v116 + 8 * (unsigned __int16)KeyIdx);
                  uint64_t v61 = hlp_NLUStrKeyValue(v53);
                  uint64_t v62 = (const char *)v61;
                  unsigned int v63 = v61 ? hlp_NLUStrLength((char *)v61) : 0;
                  if (!hlp_checkValExist(v60, *(unsigned __int16 *)(v117 + 2 * v59), v62, v63))
                  {
                    uint64_t v64 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, v63 + 1);
                    if (!v64)
                    {
                      a4 = v114;
                      a3 = v112;
                      uint64_t v67 = v117;
                      uint64_t v38 = v118;
LABEL_203:
                      uint64_t v49 = v116;
                      goto LABEL_211;
                    }
                    if (v62) {
                      uint64_t v64 = strncpy(v64, v62, v63);
                    }
                    uint64_t v65 = *(unsigned __int16 *)(v117 + 2 * v59);
                    *(void *)(v60 + 8 * v65) = v64;
                    *(_WORD *)(v117 + 2 * v59) = v65 + 1;
                  }
                }
              }
            }
            unsigned int v53 = hlp_NLUStrNext(v53);
          }
          while (v53);
          uint64_t v66 = 0;
          a4 = v114;
          a3 = v112;
          uint64_t v49 = v116;
          uint64_t v67 = v117;
          while (1)
          {
            uint64_t v68 = heap_Realloc(*(uint64_t **)(v8 + 8), *(void *)(v116 + 8 * v66), 8 * *(unsigned __int16 *)(v117 + 2 * v66));
            if (!v68) {
              break;
            }
            *(void *)(v116 + 8 * v66++) = v68;
            if (v122 == v66)
            {
              uint64_t v69 = 0;
              uint64_t v113 = v12;
              uint64_t v38 = v118;
              while (!*(_WORD *)(v67 + 2 * v69))
              {
LABEL_201:
                if (++v69 == v122)
                {
                  unsigned int v119 = 0;
                  a4 = v114;
                  a3 = v112;
                  LOWORD(v24) = v110;
                  goto LABEL_203;
                }
              }
              unint64_t v70 = 0;
              uint64_t v120 = v69;
              while (2)
              {
                uint64_t v71 = *(const char **)(v38 + 8 * v69);
                uint64_t v72 = *(const char **)(*(void *)(v116 + 8 * v69) + 8 * v70);
                unsigned __int16 v125 = 0;
                uint64_t v124 = 0;
                if (v72) {
                  unsigned int v73 = (unsigned __int16)strlen(v72);
                }
                else {
                  unsigned int v73 = 0;
                }
                size_t v74 = strlen(v71);
                uint64_t v75 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, v74 + 3);
                if (!v75)
                {
                  int v87 = 0;
                  uint64_t v89 = 0;
                  goto LABEL_157;
                }
                unsigned __int16 v76 = v75;
                strcpy(v75, "S_");
                strcat(v75, v71);
                size_t v77 = strlen(v71);
                unsigned int v78 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, v77 + 3);
                uint64_t v79 = v78;
                if (!v78)
                {
                  int v87 = 0;
                  uint64_t v89 = 0;
                  goto LABEL_121;
                }
                strcpy(v78, "I_");
                strcat(v78, v71);
                size_t v80 = strlen(v71);
                uint64_t v81 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, v80 + 3);
                unint64_t v82 = v81;
                if (!v81)
                {
                  int v87 = 0;
                  uint64_t v89 = 0;
                  goto LABEL_152;
                }
                strcpy(v81, "E_");
                strcat(v81, v71);
                if (!hlp_NLUStrFind(__sa, v76, (uint64_t *)&v124, &v125)
                  || ((int v83 = v125, !v72) || v125 || strcmp(v72, " ")) && (!v72 || v83 != v73 || strncmp(v72, v124, v73)))
                {
                  heap_Free(*(void **)(v8 + 8), (uint64_t)v76);
                  unsigned __int16 v76 = 0;
                }
                if (!hlp_NLUStrFind(__sa, v79, (uint64_t *)&v124, &v125)
                  || ((int v84 = v125, !v72) || v125 || strcmp(v72, " ")) && (!v72 || v84 != v73 || strncmp(v72, v124, v73)))
                {
                  heap_Free(*(void **)(v8 + 8), (uint64_t)v79);
                  uint64_t v79 = 0;
                }
                if (!hlp_NLUStrFind(__sa, v82, (uint64_t *)&v124, &v125)
                  || ((int v85 = v125, !v72) || v125 || strcmp(v72, " ")) && (!v72 || v85 != v73 || strncmp(v72, v124, v73)))
                {
                  heap_Free(*(void **)(v8 + 8), (uint64_t)v82);
                  unint64_t v82 = 0;
                }
                size_t v86 = strlen(__sa);
                int v87 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, v86 + 1);
                if (v87)
                {
                  unsigned int v115 = v73;
                  size_t v88 = strlen(__sa);
                  uint64_t v89 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, v88 + 1);
                  if (v89)
                  {
                    uint64_t v12 = v113;
                    if (v76 && !v79 && !v82)
                    {
                      strcpy(v87, "S_");
                      strcat(v87, v71);
                      if (v115)
                      {
                        *(_WORD *)&v87[strlen(v87)] = 58;
                        if (v72) {
                          strcat(v87, v72);
                        }
                        strcpy(v89, "I_");
                        strcat(v89, v71);
                        *(_WORD *)&v89[strlen(v89)] = 58;
                        int v90 = v72;
                        if (!v72)
                        {
                          unint64_t v82 = 0;
                          uint64_t v79 = 0;
                          goto LABEL_152;
                        }
LABEL_151:
                        strcat(v89, v90);
LABEL_152:
                        heap_Free(*(void **)(v8 + 8), (uint64_t)v76);
LABEL_153:
                        if (v79) {
LABEL_154:
                        }
                          heap_Free(*(void **)(v8 + 8), (uint64_t)v79);
                        if (v82) {
                          goto LABEL_156;
                        }
LABEL_157:
                        if (v72 && !strcmp(v72, " ")) {
                          uint64_t v72 = 0;
                        }
                        hlp_NLUStrRemoveRangeKey(v12, v71, v72);
                        hlp_NLUStrRemoveRangeKey(v123, v71, v72);
                        int v94 = (unsigned __int16)strlen((const char *)v12);
                        if (v94 && v12[v94 - 1] != 59) {
                          *(_WORD *)&v12[strlen((const char *)v12)] = 59;
                        }
                        strcat((char *)v12, v87);
                        int v95 = (unsigned __int16)strlen((const char *)v123);
                        if (v95 && v123[v95 - 1] != 59) {
                          *(_WORD *)&v123[strlen((const char *)v123)] = 59;
                        }
                        strcat((char *)v123, v89);
                        if (v87) {
                          heap_Free(*(void **)(v8 + 8), (uint64_t)v87);
                        }
                        if (v89) {
                          heap_Free(*(void **)(v8 + 8), (uint64_t)v89);
                        }
                        ++v70;
                        uint64_t v67 = v117;
                        uint64_t v38 = v118;
                        uint64_t v69 = v120;
                        if (v70 >= *(unsigned __int16 *)(v117 + 2 * v120)) {
                          goto LABEL_201;
                        }
                        continue;
                      }
                      unint64_t v82 = 0;
                      uint64_t v79 = 0;
LABEL_149:
                      v89[2] = 0;
                      __int16 v93 = 24393;
LABEL_150:
                      *(_WORD *)uint64_t v89 = v93;
                      int v90 = v71;
                      goto LABEL_151;
                    }
                    if (v76) {
                      BOOL v91 = 1;
                    }
                    else {
                      BOOL v91 = v79 == 0;
                    }
                    char v92 = !v91;
                    if (!v91 && !v82)
                    {
                      strcpy(v87, "I_");
                      strcat(v87, v71);
                      if (v115)
                      {
                        *(_WORD *)&v87[strlen(v87)] = 58;
                        if (v72) {
                          strcat(v87, v72);
                        }
                        strcpy(v89, "I_");
                        strcat(v89, v71);
                        *(_WORD *)&v89[strlen(v89)] = 58;
                        if (!v72)
                        {
                          unint64_t v82 = 0;
                          goto LABEL_154;
                        }
                        goto LABEL_147;
                      }
                      unint64_t v82 = 0;
                      strcpy(v89, "I_");
LABEL_180:
                      strcat(v89, v71);
                      goto LABEL_154;
                    }
                    if (!v76 && !v79 && v82)
                    {
                      strcpy(v87, "I_");
                      strcat(v87, v71);
                      if (!v115)
                      {
                        strcpy(v89, "E_");
                        strcat(v89, v71);
                        goto LABEL_156;
                      }
                      *(_WORD *)&v87[strlen(v87)] = 58;
                      if (v72) {
                        strcat(v87, v72);
                      }
                      strcpy(v89, "E_");
                      strcat(v89, v71);
                      *(_WORD *)&v89[strlen(v89)] = 58;
                      if (!v72)
                      {
LABEL_156:
                        heap_Free(*(void **)(v8 + 8), (uint64_t)v82);
                        goto LABEL_157;
                      }
                      goto LABEL_147;
                    }
                    if (v76 && v82)
                    {
                      strcpy(v87, "S_");
                      strcat(v87, v71);
                      if (v115)
                      {
                        *(_WORD *)&v87[strlen(v87)] = 58;
                        if (v72) {
                          strcat(v87, v72);
                        }
                        strcpy(v89, "E_");
                        strcat(v89, v71);
                        *(_WORD *)&v89[strlen(v89)] = 58;
                        int v90 = v72;
                        if (v72) {
                          goto LABEL_151;
                        }
                        goto LABEL_152;
                      }
                      v89[2] = 0;
                      __int16 v93 = 24389;
                      goto LABEL_150;
                    }
                    if (v76 && v79 && !v82)
                    {
                      strcpy(v87, "S_");
                      strcat(v87, v71);
                      if (!v115)
                      {
                        unint64_t v82 = 0;
                        goto LABEL_149;
                      }
                      *(_WORD *)&v87[strlen(v87)] = 58;
                      if (v72) {
                        strcat(v87, v72);
                      }
                      strcpy(v89, "I_");
                      strcat(v89, v71);
                      *(_WORD *)&v89[strlen(v89)] = 58;
                      if (v72)
                      {
                        int v90 = v72;
                        goto LABEL_151;
                      }
LABEL_121:
                      unint64_t v82 = 0;
                      goto LABEL_152;
                    }
                    char v96 = v92 ^ 1;
                    if (!v82) {
                      char v96 = 1;
                    }
                    if ((v96 & 1) == 0)
                    {
                      strcpy(v87, "I_");
                      strcat(v87, v71);
                      if (!v115)
                      {
                        strcpy(v89, "E_");
                        goto LABEL_180;
                      }
                      *(_WORD *)&v87[strlen(v87)] = 58;
                      if (v72) {
                        strcat(v87, v72);
                      }
                      strcpy(v89, "E_");
                      strcat(v89, v71);
                      *(_WORD *)&v89[strlen(v89)] = 58;
                      if (!v72) {
                        goto LABEL_154;
                      }
LABEL_147:
                      strcat(v89, v72);
                      goto LABEL_153;
                    }
LABEL_125:
                    if (v76) {
                      goto LABEL_152;
                    }
                    goto LABEL_153;
                  }
                }
                else
                {
                  uint64_t v89 = 0;
                }
                break;
              }
              uint64_t v12 = v113;
              goto LABEL_125;
            }
          }
          LOWORD(v24) = v110;
          uint64_t v38 = v118;
LABEL_211:
          uint64_t v99 = 0;
          if ((v24 & 0xFFFE) != 0) {
            uint64_t v100 = (unsigned __int16)v24;
          }
          else {
            uint64_t v100 = 1;
          }
          do
          {
            uint64_t v101 = *(void *)(v49 + 8 * v99);
            if (v101)
            {
              if (v67)
              {
                unsigned __int16 v102 = *(_WORD *)(v67 + 2 * v99);
                if (v102)
                {
                  uint64_t v103 = v67;
                  for (unint64_t i = 0; i < v102; ++i)
                  {
                    uint64_t v105 = *(void *)(*(void *)(v49 + 8 * v99) + 8 * i);
                    if (v105)
                    {
                      heap_Free(*(void **)(v8 + 8), v105);
                      unsigned __int16 v102 = *(_WORD *)(v103 + 2 * v99);
                    }
                  }
                  uint64_t v101 = *(void *)(v49 + 8 * v99);
                  uint64_t v67 = v103;
                  a4 = v114;
                }
              }
              heap_Free(*(void **)(v8 + 8), v101);
            }
            ++v99;
          }
          while (v99 != v100);
          heap_Free(*(void **)(v8 + 8), v49);
          uint64_t v106 = v111;
          if (v67) {
            heap_Free(*(void **)(v8 + 8), v67);
          }
        }
        else
        {
          a4 = v114;
          uint64_t v106 = v111;
          a3 = v112;
        }
        heap_Free(*(void **)(v8 + 8), v106);
        uint64_t v22 = v38;
        uint64_t v4 = v119;
LABEL_228:
        if (!(_WORD)v24) {
          goto LABEL_233;
        }
LABEL_229:
        uint64_t v107 = 0;
        do
        {
          uint64_t v108 = *(void *)(v22 + 8 * v107);
          if (v108) {
            heap_Free(*(void **)(v8 + 8), v108);
          }
          ++v107;
        }
        while ((unsigned __int16)v24 != v107);
LABEL_233:
        heap_Free(*(void **)(v8 + 8), v22);
        if (v4) {
          goto LABEL_234;
        }
LABEL_236:
        uint64_t v4 = 0;
        *a3 = v12;
        *a4 = v123;
        return v4;
      }
      uint64_t v22 = v38;
    }
    uint64_t v4 = 2315264010;
    goto LABEL_229;
  }
  return v4;
}

uint64_t hlp_GetSubPosForSEPX(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5, unsigned int a6, int a7, char **a8)
{
  unsigned __int16 v15 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, a6 + 1);
  *a8 = v15;
  if (!v15) {
    return 2315264010;
  }
  if (a2 >= a3)
  {
    __int16 v18 = 1;
    if (a7) {
      goto LABEL_8;
    }
LABEL_17:
    LOWORD(v22) = 0;
    if (a6 && v18)
    {
      uint64_t v22 = 0;
      while (a5[v22] != 45 || --v18)
      {
        if (++v22 >= (unint64_t)a6) {
          goto LABEL_27;
        }
      }
      __int16 v18 = 0;
    }
LABEL_27:
    if ((a6 - 1 == (unsigned __int16)v22) == v18)
    {
      size_t v24 = (unsigned __int16)v22;
LABEL_30:
      uint64_t v23 = a5;
      goto LABEL_31;
    }
LABEL_29:
    size_t v24 = a6;
    goto LABEL_30;
  }
  int v16 = (unsigned __int8 *)(a4 + a2);
  unint64_t v17 = a3 - (unint64_t)a2;
  __int16 v18 = 1;
  do
  {
    int v19 = *v16++;
    if (v19 == 45) {
      ++v18;
    }
    --v17;
  }
  while (v17);
  if (!a7) {
    goto LABEL_17;
  }
LABEL_8:
  LOWORD(v20) = a6 - 1;
  if ((_WORD)a6 != 1 && v18)
  {
    uint64_t v20 = (unsigned __int16)(a6 - 1);
    while (a5[v20] != 45 || --v18)
    {
      if (!(_WORD)--v20) {
        goto LABEL_24;
      }
    }
    goto LABEL_25;
  }
LABEL_24:
  if (v18) {
    goto LABEL_29;
  }
LABEL_25:
  uint64_t v23 = &a5[(unsigned __int16)v20 + 1];
  size_t v24 = (int)((~(_WORD)v20 | 0xFFFF0000) + a6);
LABEL_31:
  strncpy(v15, v23, v24);
  return 0;
}

uint64_t hlp_UpdateDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, unsigned int a6, unsigned int a7, unsigned __int16 *a8, char *a9)
{
  unsigned int v13 = a4;
  unsigned __int16 v31 = 0;
  int v30 = 0;
  __int16 v29 = 0;
  __src = 0;
  *a8 = 0;
  unsigned __int16 v17 = *a5;
  if (*a5)
  {
    unsigned int v25 = a4;
    unsigned __int16 v31 = *a5;
    unsigned __int16 v28 = 0;
    unsigned __int16 v27 = 0;
    goto LABEL_3;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, a4, &v31);
  if ((v21 & 0x80000000) == 0)
  {
    unsigned int v25 = v13;
    unsigned __int16 v17 = v31;
    unsigned __int16 v28 = 0;
    unsigned __int16 v27 = 0;
    if (v31)
    {
      do
      {
LABEL_3:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v17, 0, 1, &v30, &v29);
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
        uint64_t v19 = v31;
        if (v30 == 5)
        {
          *a5 = v31;
          uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a2, a3);
          if ((v18 & 0x80000000) != 0) {
            return v18;
          }
          uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v31, 2, 1, &v27, &v29);
          if ((v18 & 0x80000000) != 0) {
            return v18;
          }
          char v20 = 0;
          uint64_t v19 = v31;
          if (v28 <= a6 && v27 >= a7)
          {
            *a8 = v31;
            char v20 = 1;
          }
        }
        else
        {
          char v20 = 0;
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a2, a3, v19, &v31);
        if ((v21 & 0x80000000) != 0) {
          return v21;
        }
        unsigned __int16 v17 = v31;
        if (v31) {
          char v22 = v20;
        }
        else {
          char v22 = 1;
        }
      }
      while ((v22 & 1) == 0 && v28 <= a6);
      if ((v20 & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(*(void *)(a1 + 56)
                                                                                             + 176))(a2, a3, *a8, 4, &__src, &v29);
      if ((v21 & 0x80000000) == 0)
      {
        uint64_t v23 = strncpy(a9, __src, 0x100uLL);
        a9[256] = 0;
        if (!strcmp(v23, "phon")) {
          return hlp_GetLastTnMarkerUpToPos(a1, a2, a3, v25, v28, a9);
        }
      }
    }
    else
    {
LABEL_24:
      strncpy(a9, "normal", 0x100uLL);
      a9[256] = 0;
    }
  }
  return v21;
}

uint64_t hlp_GetDomainPauseDur(uint64_t a1, char *__s, int *a3, _DWORD *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *a3 = 0;
  *a4 = 0;
  strcpy(__sa, "tnpausedur");
  size_t v8 = strlen(__s);
  uint64_t result = strlen(__sa);
  if (v8 < 255 - result)
  {
    int v11 = 0;
    __strcat_chk();
    uint64_t result = paramc_ParamGetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)__sa, (unsigned int *)&v11);
    if ((result & 0x80000000) != 0 || !v11)
    {
      uint64_t result = (uint64_t)strstr(__s, "spell");
      if (result) {
        int v10 = 100;
      }
      else {
        int v10 = 200;
      }
      *a3 = v10;
    }
    else
    {
      *a3 = v11;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t hlp_GetLastTnMarkerUpToPos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, char *a6)
{
  uint64_t v15 = 0;
  unsigned __int16 v14 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 56) + 176))(a2, a3, a4, 1, &v15, &v14);
  if ((result & 0x80000000) == 0)
  {
    int v10 = (_DWORD *)(v15 + 12);
    int v9 = *(_DWORD *)(v15 + 12);
    strncpy(a6, "normal", 0xFFuLL);
    a6[255] = 0;
    uint64_t v11 = v14;
    if (v14)
    {
      uint64_t v12 = v10;
      do
      {
        int v13 = *v12;
        v12 += 8;
        if (a5 < (__int16)(v13 - v9)) {
          break;
        }
        if (*(v10 - 3) == 21)
        {
          strncpy(a6, *(const char **)(v10 + 3), 0xFFuLL);
          a6[255] = 0;
        }
        int v10 = v12;
        --v11;
      }
      while (v11);
    }
    return 0;
  }
  return result;
}

uint64_t hlp_Remap(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, const char *a6, _WORD *a7)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned __int16 v30 = a5;
  __int16 v29 = 0;
  int v28 = 0;
  __s1 = 0;
  int v26 = 0;
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  size_t v24 = 0;
  __int16 v23 = -1;
  v32[0] = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[7] + 120))(a2, a3, a5, &v30);
  if ((v12 & 0x80000000) == 0)
  {
    unsigned __int16 v13 = v30;
    if (v30)
    {
      while (1)
      {
        uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(a1[7] + 168))(a2, a3, v13, 0, 1, &v28, &v29);
        if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
          break;
        }
        if (v28 == 5)
        {
          uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(a1[7] + 176))(a2, a3, v30, 4, &__s1, &v29);
          if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
            return LastTnMarkerUpToPos;
          }
          uint64_t v15 = __s1;
          if (!strcmp(__s1, "phon"))
          {
            uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1[7] + 168))(a2, a3, v30, 1, 1, (char *)&v26 + 2, &v29);
            if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
              return LastTnMarkerUpToPos;
            }
            uint64_t LastTnMarkerUpToPos = hlp_GetLastTnMarkerUpToPos((uint64_t)a1, a2, a3, a4, SHIWORD(v26), v31);
            if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
              return LastTnMarkerUpToPos;
            }
            uint64_t v15 = v31;
            __s1 = v31;
          }
          strcpy(v32, "phrasing_");
          strlen(v15);
          __strcat_chk();
          uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *))(a1[13] + 96))(a1[11], a1[12], "fecfg", v32, &__c[3], &__c[1], __c);
          if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
            return LastTnMarkerUpToPos;
          }
          strcpy(v32, "phrasing_");
          strlen(a6);
          __strcat_chk();
          uint64_t v12 = (*(uint64_t (**)(void, void, const char *, char *, char ***, __int16 *, unsigned char *))(a1[13] + 96))(a1[11], a1[12], "fecfg", v32, &v24, &v23, __c);
          if ((v12 & 0x80000000) != 0) {
            return v12;
          }
          if (*(_WORD *)&__c[1])
          {
            int v16 = strchr(**(char ***)&__c[3], __c[0]);
            if (v16) {
              *int v16 = 0;
            }
          }
          if (v23)
          {
            unsigned __int16 v17 = strchr(*v24, __c[0]);
            if (v17) {
              char *v17 = 0;
            }
          }
          uint64_t v18 = __s1;
          if (strcmp(a6, __s1))
          {
            if (*(unsigned __int16 *)&__c[1] != 1 || v23)
            {
              if (*(_WORD *)&__c[1] || v23 != 1)
              {
                if (*(unsigned __int16 *)&__c[1] != 1 || v23 != 1) {
                  return v12;
                }
                char v20 = **(const char ***)&__c[3];
                uint64_t v19 = *v24;
              }
              else
              {
                uint64_t v19 = *v24;
                char v20 = v18;
              }
            }
            else
            {
              uint64_t v19 = **(const char ***)&__c[3];
              char v20 = a6;
            }
            if (strcmp(v20, v19)) {
              return v12;
            }
          }
          uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1[7] + 168))(a2, a3, v30, 2, 1, &v26, &v29);
          if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
            return LastTnMarkerUpToPos;
          }
          *a7 = v26;
        }
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 120))(a2, a3, v30, &v30);
        if ((v12 & 0x80000000) == 0)
        {
          unsigned __int16 v13 = v30;
          if (v30) {
            continue;
          }
        }
        return v12;
      }
      return LastTnMarkerUpToPos;
    }
  }
  return v12;
}

uint64_t hlp_Phrasing(uint64_t a1, char *a2, unsigned int a3, const char *a4, uint64_t a5, uint64_t a6, unsigned __int16 *a7, uint64_t a8, _WORD *a9, unsigned __int16 *a10, __int16 a11, int a12, unsigned __int16 *a13, unsigned __int16 a14)
{
  uint64_t v15 = a7;
  uint64_t v106 = *MEMORY[0x263EF8340];
  int v102 = 0;
  int v103 = 0;
  unsigned int v101 = 0;
  uint64_t v99 = 0;
  __s2 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  int v96 = 0;
  __int16 v95 = 0;
  int v94 = 0;
  unsigned __int16 v93 = 0;
  unsigned __int16 v92 = *a7;
  uint64_t v21 = v92;
  strcpy(__s, "phrasing");
  unsigned __int16 v22 = strlen(__s);
  **(unsigned char **)(a1 + 136) = 0;
  **(unsigned char **)(a1 + 144) = 0;
  **(unsigned char **)(a1 + 152) = 0;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56)
                                                                                               + 168))(a5, a6, v21, 1, 1, (char *)&v102 + 2, (char *)&v103 + 2);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  uint64_t v89 = v15;
  uint64_t v88 = a8;
  int v90 = HIWORD(v102);
  if (v21 && HIWORD(v102) < a3)
  {
    int v24 = 1;
    do
    {
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, (unsigned __int16)v21, 0, 1, &v101, (char *)&v103 + 2);
      if ((v23 & 0x80000000) != 0) {
        return v23;
      }
      if (v101 <= 0xA && ((1 << v101) & 0x610) != 0)
      {
        uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v92, 2, 1, &v102, (char *)&v103 + 2);
        if ((v23 & 0x80000000) != 0) {
          return v23;
        }
        uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56)
                                                                                            + 176))(a5, a6, v92, 5, &__s2, (char *)&v103 + 2);
        if ((v23 & 0x80000000) != 0) {
          return v23;
        }
        uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56)
                                                                                            + 176))(a5, a6, v92, 9, &v99, (char *)&v103 + 2);
        if ((v23 & 0x80000000) != 0) {
          return v23;
        }
        if (!v24)
        {
          __int16 v26 = HIWORD(v102);
          __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)a2, HIWORD(v102));
          strncat(*(char **)(a1 + 136), &a2[HIWORD(v102) - (unsigned __int16)(v26 - PreviousUtf8Offset)], (unsigned __int16)(v26 - PreviousUtf8Offset));
          *(_WORD *)(*(void *)(a1 + 144) + strlen(*(const char **)(a1 + 144))) = 32;
          *(_WORD *)(*(void *)(a1 + 152) + strlen(*(const char **)(a1 + 152))) = 32;
        }
        if (HIWORD(v102) > (unsigned __int16)v102) {
          return 2315271857;
        }
        strncat(*(char **)(a1 + 136), &a2[HIWORD(v102)], (unsigned __int16)v102 - (unint64_t)HIWORD(v102));
        strcat(*(char **)(a1 + 144), __s2);
        strncat(*(char **)(a1 + 152), v99, 1uLL);
        int v28 = __s2;
        size_t v29 = strlen(__s2);
        int v30 = (unsigned __int16)v102 - HIWORD(v102);
        if ((__int16)v29 <= (__int16)(v102 - HIWORD(v102)))
        {
          if ((__int16)v30 > (__int16)v29)
          {
            int v33 = Utf8_LengthInUtf8chars((unint64_t)&a2[HIWORD(v102)], v30);
            int v34 = v33 - strlen(__s2);
            if (v34 >= 1)
            {
              int v35 = (unsigned __int16)v34;
              if ((_WORD)v34)
              {
                do
                {
                  *(_WORD *)(*(void *)(a1 + 144) + strlen(*(const char **)(a1 + 144))) = 126;
                  --v35;
                }
                while (v35);
              }
            }
            int v36 = Utf8_LengthInUtf8chars((unint64_t)&a2[HIWORD(v102)], (unsigned __int16)v102 - HIWORD(v102));
            if (v36 > 1)
            {
              int v37 = (unsigned __int16)(v36 - 1);
              if ((_WORD)v36 != 1)
              {
                do
                {
                  strncat(*(char **)(a1 + 152), v99, 1uLL);
                  --v37;
                }
                while (v37);
              }
            }
          }
        }
        else
        {
          if (v29 - (unsigned __int16)v102 + HIWORD(v102))
          {
            int v31 = 0;
            do
            {
              *(_WORD *)(*(void *)(a1 + 136) + strlen(*(const char **)(a1 + 136))) = 126;
              ++v31;
              int v28 = __s2;
            }
            while (strlen(__s2) - (unsigned __int16)v102 + HIWORD(v102) > (unsigned __int16)v31);
          }
          if (strlen(v28) != 1)
          {
            int v32 = 0;
            do
            {
              strncat(*(char **)(a1 + 152), v99, 1uLL);
              ++v32;
            }
            while (strlen(__s2) - 1 > (unsigned __int16)v32);
          }
        }
        int v24 = 0;
      }
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a5, a6, v92, &v92);
      if ((v23 & 0x80000000) != 0) {
        return v23;
      }
      if (!v92) {
        break;
      }
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
      if ((v23 & 0x80000000) != 0) {
        return v23;
      }
      LOWORD(v21) = v92;
      if (!v92) {
        break;
      }
    }
    while (HIWORD(v102) < a3);
  }
  uint64_t v23 = (*(uint64_t (**)(void, void, const char *, void, void))(*(void *)(a1 + 104) + 104))(*(void *)(a1 + 88), *(void *)(a1 + 96), a4, *(void *)(a1 + 136), a14);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s L1: %s", v38, v39, v40, (uint64_t)__s);
  unsigned __int16 v41 = strlen(*(const char **)(a1 + 136));
  uint64_t v23 = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 80) + 120))(*(void *)(a1 + 64), *(void *)(a1 + 72), 0, *(void *)(a1 + 136), v41);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s L2: %s", v42, v43, v44, (uint64_t)__s);
  unsigned __int16 v45 = strlen(*(const char **)(a1 + 144));
  uint64_t v23 = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 80) + 120))(*(void *)(a1 + 64), *(void *)(a1 + 72), 1, *(void *)(a1 + 144), v45);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s L5: %s", v46, v47, v48, (uint64_t)__s);
  unsigned __int16 v49 = strlen(*(const char **)(a1 + 152));
  uint64_t v23 = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 80) + 120))(*(void *)(a1 + 64), *(void *)(a1 + 72), 4, *(void *)(a1 + 152), v49);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  if (strcmp(a4, "normal") && strlen(a4) + v22 + 2 <= 0xFF)
  {
    __strcat_chk();
    __strcat_chk();
  }
  if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 80) + 80))(*(void *)(a1 + 64), *(void *)(a1 + 72), __s) & 0x80000000) != 0)
  {
    __s[v22] = 0;
    (*(void (**)(void, void, char *))(*(void *)(a1 + 80) + 80))(*(void *)(a1 + 64), *(void *)(a1 + 72), __s);
  }
  uint64_t v23 = (*(uint64_t (**)(void, void, void, unsigned char **, char *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), 0, &v98, (char *)&v96 + 2);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  v98[HIWORD(v96)] = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s O1: %s", v50, v51, v52, (uint64_t)__s);
  uint64_t v23 = (*(uint64_t (**)(void, void, uint64_t, char **, char *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), 2, &v97, (char *)&v96 + 2);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  v97[HIWORD(v96)] = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s O3: %s", v53, v54, v55, (uint64_t)__s);
  if (!v90)
  {
    if (strchr(v97, 87))
    {
      uint64_t v59 = strrchr(a2, 63);
      if (v59)
      {
        if (v59 != a2 && *(v59 - 1) != 32) {
          *uint64_t v59 = 46;
        }
      }
    }
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56)
                                                                                              + 168))(a5, a6, *v15, 1, 1, (char *)&v102 + 2, (char *)&v103 + 2);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 136))(a5, a6, *v15, &v93);
  if ((v56 & 0x80000000) == 0)
  {
    if (!v93) {
      goto LABEL_70;
    }
    uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
    if ((v56 & 0x80000000) != 0) {
      return v56;
    }
    unsigned __int16 v57 = v93;
    if (v93)
    {
      do
      {
        if (v101 <= 0xA && ((1 << v101) & 0x610) != 0) {
          goto LABEL_71;
        }
        uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 136))(a5, a6, v57, &v93);
        if ((v56 & 0x80000000) != 0) {
          return v56;
        }
        if (!v93) {
          break;
        }
        uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
        if ((v56 & 0x80000000) != 0) {
          return v56;
        }
        unsigned __int16 v57 = v93;
      }
      while (v93);
      unsigned __int16 v57 = 0;
    }
    else
    {
LABEL_70:
      unsigned __int16 v57 = 0;
    }
LABEL_71:
    uint64_t v60 = v98;
    if (*v98 == 35)
    {
      memset(v104, 0, 11);
      LOWORD(v96) = 200;
      ++v98;
      if (v60[1] == 91)
      {
        uint64_t v98 = v60 + 2;
        int v61 = v60[2];
        if (v60[2])
        {
          unint64_t v62 = 0;
          unsigned __int16 v63 = 0;
          uint64_t v64 = v60 + 3;
          while (v61 != 93 && v62 <= 9)
          {
            v104[v62] = v61;
            uint64_t v98 = &v64[v62];
            int v61 = v64[v62++];
            ++v63;
            if (!v61) {
              goto LABEL_81;
            }
          }
          unsigned __int16 v63 = v62;
        }
        else
        {
          unsigned __int16 v63 = 0;
        }
LABEL_81:
        v104[v63] = 0;
      }
      __int16 v65 = a12;
      if (!a12) {
        __int16 v65 = atoi(v104);
      }
      LOWORD(v96) = v65;
      if (v57)
      {
        uint64_t v56 = hlp_ReadSildur(a1, a5, a6, v57, &v95, &v94);
        if ((v56 & 0x80000000) != 0) {
          return v56;
        }
        if (!v94)
        {
          uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v93, 8, 1, &v96, &v103);
          if ((v56 & 0x80000000) != 0) {
            return v56;
          }
        }
      }
    }
    unsigned __int16 v66 = *v15;
    if (*v15) {
      BOOL v67 = HIWORD(v102) >= a3;
    }
    else {
      BOOL v67 = 1;
    }
    if (!v67)
    {
      do
      {
        uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v66, 0, 1, &v101, (char *)&v103 + 2);
        if ((v23 & 0x80000000) != 0) {
          return v23;
        }
        if (v101 <= 0xA && ((1 << v101) & 0x610) != 0)
        {
          uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, *v15, 1, 1, (char *)&v102 + 2, (char *)&v103 + 2);
          if ((v23 & 0x80000000) != 0) {
            return v23;
          }
          uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, *v15, 2, 1, &v102, (char *)&v103 + 2);
          if ((v23 & 0x80000000) != 0) {
            return v23;
          }
          uint64_t v69 = v98 + 1;
          for (unint64_t i = v98 + 3; ; ++i)
          {
            unsigned int v71 = *(v69 - 1);
            if (v71 <= 0x22)
            {
              if (!*(v69 - 1) || v71 == 32)
              {
LABEL_110:
                *(_WORD *)uint64_t v104 = 0;
                LOWORD(v96) = 0;
                if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(*(void *)(a1 + 56) + 184))(a5, a6, *v15, 8, v104) & 0x80000000) == 0&& *(unsigned __int16 *)v104 == 1)
                {
                  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, *v15, 8, 1, &v96, (char *)&v103 + 2);
                  if ((v23 & 0x80000000) != 0) {
                    return v23;
                  }
                }
                if (!(_WORD)v96)
                {
LABEL_114:
                  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, *v15, 8, 1, &v96, &v103);
                  if ((v23 & 0x80000000) != 0) {
                    return v23;
                  }
                }
LABEL_131:
                unsigned int v78 = v98;
                int v79 = *v98;
                while (1)
                {
                  size_t v80 = v78;
                  if (((v79 - 93) > 0x21 || ((1 << (v79 - 93)) & 0x200000005) == 0)
                    && v79 != 32)
                  {
                    break;
                  }
                  ++v78;
                  uint64_t v98 = v80 + 1;
                  int v79 = v80[1];
                  if (v79 == 35)
                  {
                    uint64_t v81 = v80 + 2;
                    do
                    {
                      if (v79 == 32) {
                        break;
                      }
                      if (v79 == 95) {
                        break;
                      }
                      uint64_t v98 = v81;
                      int v82 = *v81++;
                      int v79 = v82;
                    }
                    while (v82);
                    unsigned int v78 = v81 - 1;
                  }
                }
                if ((__int16)(v102 - HIWORD(v102)) <= 1) {
                  __int16 v83 = 0;
                }
                else {
                  __int16 v83 = -1;
                }
                LOWORD(v96) = 0;
                unsigned int v84 = (unsigned __int16)*a9;
                uint64_t v85 = v88;
                if (v84 < *a10)
                {
                  while ((__int16)(*(_DWORD *)(v85 + 32 * (unsigned __int16)v84 + 12) - a11) < (__int16)(v102 + v83))
                  {
                    if (*(_DWORD *)(v85 + 32 * (unsigned __int16)v84) == 8 && v93 != 0)
                    {
                      LOWORD(v96) = v96 + *(_WORD *)(v88 + 32 * (unsigned __int16)v84 + 24);
                      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 160))(a5, a6);
                      if ((v23 & 0x80000000) != 0) {
                        return v23;
                      }
                      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v93, 18, 9, "external", &v103);
                      if ((v23 & 0x80000000) != 0) {
                        return v23;
                      }
                      LOWORD(v84) = *a9;
                    }
                    LOWORD(v84) = v84 + 1;
                    *a9 = v84;
                    uint64_t v85 = v88;
                    if (*a10 <= (unsigned __int16)v84) {
                      break;
                    }
                  }
                }
                uint64_t v15 = v89;
                uint64_t v72 = *v89;
                unsigned __int16 v93 = *v89;
                goto LABEL_155;
              }
            }
            else
            {
              if (v71 == 35)
              {
                memset(v104, 0, 11);
                LOWORD(v96) = 200;
                uint64_t v98 = v69;
                if (*v69 == 91)
                {
                  uint64_t v98 = v69 + 1;
                  int v73 = v69[1];
                  if (v69[1])
                  {
                    unint64_t v74 = 0;
                    uint64_t v75 = 0;
                    while (v73 != 93 && v74 <= 9)
                    {
                      v104[v74++] = v73;
                      ++v75;
                      uint64_t v98 = i;
                      int v76 = *i++;
                      int v73 = v76;
                      if (!v76) {
                        goto LABEL_126;
                      }
                    }
                    uint64_t v75 = (unsigned __int16)v74;
                  }
                  else
                  {
                    uint64_t v75 = 0;
                  }
LABEL_126:
                  v104[v75] = 0;
                }
                __int16 v77 = a12;
                if (!a12) {
                  __int16 v77 = atoi(v104);
                }
                LOWORD(v96) = v77;
                uint64_t v23 = hlp_ReadSildur(a1, a5, a6, *v15, &v95, &v94);
                if ((v23 & 0x80000000) == 0)
                {
                  if (!v94) {
                    goto LABEL_114;
                  }
                  goto LABEL_131;
                }
                return v23;
              }
              if (v71 == 95 || v71 == 126) {
                goto LABEL_110;
              }
            }
            uint64_t v98 = v69++;
          }
        }
        uint64_t v72 = *v15;
LABEL_155:
        uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a5, a6, v72, v15);
        if ((v56 & 0x80000000) != 0) {
          return v56;
        }
        if (!*v15) {
          break;
        }
        uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
        if ((v56 & 0x80000000) != 0) {
          return v56;
        }
        unsigned __int16 v66 = *v15;
        if (!*v15) {
          break;
        }
      }
      while (HIWORD(v102) < a3);
    }
    *a13 = v93;
  }
  return v56;
}

uint64_t hlp_InsertWordPhrase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, unsigned __int16 *a9)
{
  __int16 v18 = a5;
  __int16 v17 = a6;
  __int16 v16 = a7;
  __int16 v15 = a8;
  int v14 = 15;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56) + 88))(a2, a3, a4, a9);
  if ((result & 0x80000000) == 0)
  {
    __int16 v13 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 0, 1, &v14, &v13);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 1, 1, &v18, &v13);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 2, 1, &v17, &v13);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 4, 2, "P", &v13);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 7, 1, &v16, &v13);
            if ((result & 0x80000000) == 0) {
              return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 8, 1, &v15, &v13);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  size_t v8 = g_featureNames_3[a3];
  while (strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6) {
      return 0;
    }
  }
  *a4 = v6;
  return 1;
}

uint64_t fe_phrasing_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, const char *a6)
{
  unsigned __int16 v18 = -1;
  uint64_t result = fe_phrasing_isFeatureRequired(a2, a3, a4, &v18);
  if (result)
  {
    if (!*a6)
    {
      uint64_t result = 0;
      **(_WORD **)(a5 + 8 * v18) = 61;
      return result;
    }
    size_t v10 = strlen(a6);
    uint64_t v11 = v18;
    if (v10 <= 0x40)
    {
      uint64_t v12 = *(char **)(a5 + 8 * v18);
      goto LABEL_8;
    }
    uint64_t v12 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a5 + 8 * v18), (unsigned __int16)v10 + 1);
    if (v12)
    {
      *(void *)(a5 + 8 * v11) = v12;
LABEL_8:
      strcpy(v12, a6);
      return 0;
    }
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, v17);
    return 2315264010;
  }
  return result;
}

const char *fe_phrasing_feat_word(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = a3 + a2;
  if (a3 + a2 < 0 || v3 >= *(unsigned __int16 *)(a1 + 1072)) {
    return "=";
  }
  uint64_t v4 = *(const char **)(*(void *)(a1 + 1064) + 184 * v3 + 56);
  int v5 = (unsigned __int16)strlen(v4);
  if (v5)
  {
    if (doesWordEndInCommaNN((uint64_t)v4, ",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#"))
    {
      uint64_t v6 = (v5 - 1);
      if (memchr(",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#", v4[v6], 0x1EuLL)) {
        v4[v6] = 0;
      }
    }
  }
  return v4;
}

char *fe_phrasing_feat_wordlen(char *result, int a2, int a3, char *a4)
{
  *a4 = 0;
  unsigned int v5 = a3 + a2;
  if (a3 + a2 < 0 || v5 >= *((unsigned __int16 *)result + 536))
  {
    *(_WORD *)a4 = 61;
  }
  else
  {
    unsigned int v6 = Utf8_Utf8NbrOfSymbols(*(const char **)(*((void *)result + 133) + 184 * v5 + 56)) - 1;
    return LH_itoa(v6, a4, 0xAu);
  }
  return result;
}

uint64_t fe_phrasing_feat_character(uint64_t a1, int a2, int a3, int a4, _WORD *a5)
{
  bzero(a5, 0x800uLL);
  size_t v10 = (char *)fe_phrasing_feat_word(a1, a2, a4);
  uint64_t result = strcmp(v10, "=");
  if (!result) {
    goto LABEL_5;
  }
  uint64_t result = strlen(v10);
  __int16 v12 = result;
  unsigned int v13 = (unsigned __int16)result;
  if (!(_WORD)result) {
    goto LABEL_5;
  }
  if (a3)
  {
    uint64_t result = utf8_GetPreviousUtf8Offset((uint64_t)v10, (unsigned __int16)result);
    if ((unsigned __int16)result > v13)
    {
LABEL_5:
      *a5 = 61;
      return result;
    }
    uint64_t v16 = &v10[(unsigned __int16)result];
    size_t NextUtf8Offset = (unsigned __int16)(v12 - result);
    uint64_t v15 = (char *)a5;
  }
  else
  {
    size_t NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset(v10, 0);
    uint64_t v15 = (char *)a5;
    uint64_t v16 = v10;
  }
  return (uint64_t)strncpy(v15, v16, NextUtf8Offset);
}

uint64_t fe_phrasing_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2315264007;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_phrasing_ClassClose()
{
  return 0;
}

uint64_t statcomp_isDctFeature(char *__s1, _WORD *a2, uint64_t *a3)
{
  uint64_t v3 = *((unsigned __int16 *)a3 + 4);
  if (!*((_WORD *)a3 + 4)) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *a3;
  while (strcmp(__s1, *(const char **)(v7 + 8 * v6)))
  {
    if (v3 == ++v6) {
      return 0;
    }
  }
  *a2 = v6;
  return 1;
}

uint64_t statcomp_isDctMappedFeature(char *__s1, _WORD *a2, unsigned __int16 *a3)
{
  uint64_t v3 = a3[4];
  if (!a3[4]) {
    return 0;
  }
  uint64_t v6 = 0;
  for (unint64_t i = (const char **)(*(void *)a3 + 8); strcmp(__s1, *i); i += 2)
  {
    if (v3 == ++v6) {
      return 0;
    }
  }
  *a2 = v6;
  return 1;
}

uint64_t statcomp_isDynamicFeature(char *__s1, _WORD *a2)
{
  uint64_t v4 = 0;
  while (1)
  {
    unsigned int v5 = g_statcomp_FeatureNames[v4];
    if (!strcmp(__s1, v5)) {
      break;
    }
    unsigned __int16 v6 = strlen(v5);
    unsigned int v7 = (unsigned __int16)strlen(__s1);
    if (v7 > v6 && !strcmp(&__s1[v7 - v6], v5)) {
      break;
    }
    if (++v4 == 7) {
      return 0;
    }
  }
  *a2 = v4;
  return 1;
}

uint64_t statcomp_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char *__s)
{
  size_t v10 = strlen(__s);
  if (v10 <= 0x20)
  {
    uint64_t v11 = *(char **)(a4 + 8 * a3);
  }
  else
  {
    uint64_t v11 = (char *)heap_Realloc(*(uint64_t **)(a2 + 8), *(void *)(a4 + 8 * a3), (unsigned __int16)v10 + 1);
    if (!v11)
    {
      log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_POS", 35000, 0, v12, v13, v14, v15, v33);
      return 2313166858;
    }
    *(void *)(a4 + 8 * a3) = v11;
  }
  strcpy(v11, __s);
  unsigned int v16 = *(_DWORD *)(a1 + 1336);
  if (!v16) {
    return 0;
  }
  unsigned int v17 = *(char **)(a4 + 8 * a3);
  unsigned __int16 v18 = *(const char **)(*(void *)(a1 + 1312) + 8 * a3);
  unsigned __int16 v19 = strlen(v18);
  unsigned __int16 v20 = 0;
  uint64_t v21 = *(void *)(a1 + 1328);
  size_t v22 = v19;
  while (1)
  {
    uint64_t v23 = v20;
    if (!strncmp(*(const char **)(v21 + 16 * v20), v18, v22)) {
      break;
    }
    unsigned __int16 v20 = v23 + 1;
    if (v16 <= (unsigned __int16)(v23 + 1)) {
      return 0;
    }
  }
  unsigned int v25 = *(char **)(v21 + 16 * v23 + 8);
  __int16 v26 = strstr(v25, v17);
  if (v26)
  {
    unsigned __int16 v27 = v26;
    unsigned __int16 v28 = strlen(v17);
    unsigned __int16 v29 = strlen(v25);
    unsigned int v30 = v29;
    unint64_t v31 = (unint64_t)&v25[v29];
    while (v27 != v25 || v30 != v28 && (v30 <= v28 + 1 || v25[v28] != 32))
    {
      if (v27 > v25)
      {
        int v32 = &v27[v28];
        if (v31 > (unint64_t)(v32 + 1) && *v32 == 32)
        {
          uint64_t result = 0;
          if ((char *)v31 == v32 || *(v27 - 1) == 32) {
            return result;
          }
        }
        else if ((char *)v31 == v32)
        {
          return 0;
        }
      }
      unsigned __int16 v27 = strstr(&v27[v28], v17);
      if (!v27) {
        goto LABEL_24;
      }
    }
    return 0;
  }
LABEL_24:
  uint64_t result = 0;
  *(_WORD *)unsigned int v17 = 61;
  return result;
}

uint64_t statcomp_setDynamicFeature(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, const char **a6, const char **a7, int a8, unsigned __int16 a9)
{
  LODWORD(v9) = a8;
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v15 = g_statcomp_FeatureNames[a3];
  int v16 = strcmp(v15, "CW_SYLLABLE_LEN");
  if (v16 && strcmp(v15, "SYLLABLE_LEN_AS_FRACTION"))
  {
    if (!strcmp(v15, "CW_ORTH_LEN"))
    {
      if (v9)
      {
LABEL_16:
        int v19 = 0;
        uint64_t v9 = v9;
        size_t v22 = a6;
        do
        {
          uint64_t v23 = *v22++;
          v19 += strlen(v23);
          --v9;
        }
        while (v9);
        goto LABEL_18;
      }
    }
    else if (!strcmp(v15, "ORTH_LEN_AS_FRACTION") && v9 != 0)
    {
      goto LABEL_16;
    }
    LOWORD(v18) = 0;
    LOWORD(v19) = 0;
    goto LABEL_20;
  }
  if (!v9)
  {
    LOWORD(v19) = 0;
LABEL_18:
    LOWORD(v18) = 0;
    goto LABEL_19;
  }
  int v18 = 0;
  uint64_t v9 = v9;
  unsigned __int16 v20 = a7;
  do
  {
    uint64_t v21 = *v20++;
    v18 += strlen(v21);
    --v9;
  }
  while (v9);
  LOWORD(v19) = 0;
LABEL_19:
  unsigned __int16 v24 = v18;
  if (v16)
  {
LABEL_20:
    unsigned __int16 v24 = v18;
    LOWORD(v18) = v19;
    if (strcmp(v15, "CW_ORTH_LEN")) {
      goto LABEL_22;
    }
  }
  LH_itoa((unsigned __int16)v18, __s, 0xAu);
LABEL_22:
  if (!strcmp(v15, "SYLLABLE_LEN"))
  {
    unsigned __int16 v27 = a7[a9];
LABEL_33:
    unsigned int v28 = (unsigned __int16)strlen(v27);
    goto LABEL_34;
  }
  if (!strcmp(v15, "SYLLABLE_LEN_AS_FRACTION"))
  {
    if (v24)
    {
      unsigned int v25 = (unsigned __int16)strlen(a7[a9]);
      unsigned int v26 = v24;
      goto LABEL_31;
    }
LABEL_38:
    unsigned int v28 = 0;
    goto LABEL_34;
  }
  if (!strcmp(v15, "ORTH_LEN"))
  {
    unsigned __int16 v27 = a6[a9];
    goto LABEL_33;
  }
  if (strcmp(v15, "ORTH_LEN_AS_FRACTION")) {
    goto LABEL_35;
  }
  if (!(_WORD)v19) {
    goto LABEL_38;
  }
  unsigned int v25 = (unsigned __int16)strlen(a6[a9]);
  unsigned int v26 = (unsigned __int16)v19;
LABEL_31:
  unsigned int v28 = v25 / v26;
LABEL_34:
  LH_itoa(v28, __s, 0xAu);
LABEL_35:
  if (!strcmp(v15, "ORTH")) {
    __strcpy_chk();
  }
  return statcomp_setFeature(a2, a1, a4, a5, __s);
}

uint64_t statcomp_initFeatureVector(uint64_t a1, void *a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    unsigned __int16 v6 = (_WORD *)heap_Calloc(*(void **)(a1 + 8), 1, 33);
    *a2 = v6;
    if (!v6) {
      break;
    }
    *unsigned __int16 v6 = 61;
    ++a2;
    if (!--v5) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v12);
  return 2313166858;
}

void *statcomp_freeFeatureVector(void *result, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *a2++;
      uint64_t result = heap_Free((void *)v4[1], v6);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t statcomp_dumpFeatureVectorAndResult(uint64_t a1, int a2, const char **a3, _WORD *a4, char *__s, char *a6, uint64_t a7, uint64_t a8, char *__sa)
{
  if (!a2) {
    return 0;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, __s);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, a6);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  if (*(unsigned __int8 *)(a7 + 1296) >= 2u)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, *(char **)(*(void *)(a7 + 1312) + 8 * v16));
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, "=");
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, *(char **)(a8 + 8 * v16));
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
    }
    while (*(unsigned __int8 *)(a7 + 1296) - 1 > (unsigned __int16)++v16);
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, "PRED=");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, __sa);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v17, v18, v19, (uint64_t)*a3);
  **a3 = 0;
  if (*(unsigned __int8 *)(a7 + 1296) >= 2u)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, *(char **)(a8 + 8 * v20));
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
    }
    while (*(unsigned __int8 *)(a7 + 1296) - 1 > (unsigned __int16)++v20);
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, "PRED=");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, __sa);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v24 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v24 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v21, v22, v23, (uint64_t)*a3);
    **a3 = 0;
  }
  return v24;
}

uint64_t statpos_checkIfActive(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, _DWORD *a7, _DWORD *a8, int *a9, _DWORD *a10, _DWORD *a11)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v60 = 0;
  memset(v63, 0, sizeof(v63));
  unsigned int v59 = 0;
  unsigned __int16 v57 = 0;
  int v58 = 0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  uint64_t v17 = a7 + 354;
  *(_OWORD *)(a7 + 354) = 0u;
  a7[358] = 0;
  uint64_t result = paramc_ParamGetUInt(*(void *)(a6 + 40), (uint64_t)"statpos_do_corpus_alignment", &v59);
  if ((result & 0x1FFF) != 0x14)
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v59 == 1) {
      _DWORD *v17 = 1;
    }
  }
  uint64_t result = paramc_ParamGetUInt(*(void *)(a6 + 40), (uint64_t)"nluactive", &v59);
  if ((result & 0x1FFF) != 0x14)
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v59 == 1) {
      a7[358] = 1;
    }
  }
  uint64_t result = statpos_igtrees_getBrkStrs(a6, v62, v61, 0x100uLL);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = ssftriff_reader_ObjOpen(a4, a5, 2, v62, "IGTR", 1031, (uint64_t *)&v57);
    if ((result & 0x80000000) != 0)
    {
      if ((result & 0x1FFF) == 0xA) {
        return result;
      }
      log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statPOS %s tree not found", v23, v24, v25, (uint64_t)v62);
    }
    else
    {
      uint64_t result = ssftriff_reader_ObjClose(v57, v19, v20, v21, v22, v23, v24, v25);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      a7[356] = 1;
    }
    uint64_t result = ssftriff_reader_ObjOpen(a4, a5, 2, v61, "IGTR", 1031, (uint64_t *)&v57);
    if ((result & 0x80000000) != 0)
    {
      if ((result & 0x1FFF) == 0xA) {
        return result;
      }
      log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statPOS %s tree not found", v30, v31, v32, (uint64_t)v61);
    }
    else
    {
      uint64_t result = ssftriff_reader_ObjClose(v57, v26, v27, v28, v29, v30, v31, v32);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      a7[356] = 1;
    }
    uint64_t result = statpos_get_broker_string(a6, &v58);
    if ((result & 0x80000000) == 0)
    {
      unsigned int v33 = ssftriff_reader_ObjOpen(a4, a5, 2, v58, "CRPH", 1031, (uint64_t *)&v57);
      if ((v33 & 0x80000000) != 0)
      {
        unsigned int v42 = v33;
        if ((v33 & 0x1FFF) == 0xA)
        {
LABEL_47:
          if (v58) {
            heap_Free(*(void **)(a6 + 8), (uint64_t)v58);
          }
          if ((v42 & 0x1FFF) == 0xA) {
            return v42;
          }
          else {
            return 0;
          }
        }
        log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statPOS %s CRF not found", v38, v39, v40, (uint64_t)v58);
      }
      else
      {
        unsigned int info_from_dct = ssftriff_reader_ObjClose(v57, v34, v35, v36, v37, v38, v39, v40);
        if ((info_from_dct & 0x80000000) != 0)
        {
LABEL_46:
          unsigned int v42 = info_from_dct;
          goto LABEL_47;
        }
        a7[357] = 1;
      }
      if (!a7[356] && !a7[357] && !*v17)
      {
        unsigned int v42 = 0;
        goto LABEL_47;
      }
      unsigned int info_from_dct = statpos_get_info_from_dct(a6, a1, a2, a3, "fecfg", (uint64_t)"mdesegpos_morpheme_processing", 0, a9, "BOOL");
      if ((info_from_dct & 0x80000000) != 0) {
        goto LABEL_46;
      }
      unsigned int info_from_dct = statpos_get_info_from_dct(a6, a1, a2, a3, "fecfg", (uint64_t)"statphr_kok_force_igtree", 0, a10, "BOOL");
      if ((info_from_dct & 0x80000000) != 0) {
        goto LABEL_46;
      }
      if (*a10 == 1) {
        log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Key statphr_kok_force_igtree is set, use statphr IGTree data instead of hardcoded values", v43, v44, v45, 0);
      }
      unsigned int info_from_dct = statpos_get_info_from_dct(a6, a1, a2, a3, "fecfg", (uint64_t)"statphr_kok_remove_unaligned_phrase_boundaries", 0, a11, "BOOL");
      if ((info_from_dct & 0x80000000) != 0) {
        goto LABEL_46;
      }
      if (*a11 == 1) {
        log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Key statphr_kok_remove_unaligned_phrase_boundaries is set, IGTree prediction overridden if phrase boundary is inside eojeol", v46, v47, v48, 0);
      }
      if (*v17 == 1)
      {
        int v49 = a7[356];
        if (v49 != 1) {
          int v49 = a7[357] == 1;
        }
      }
      else if (a7[357] != 1 || (int v49 = *a9, *a9 != 1))
      {
LABEL_42:
        unsigned int info_from_dct = getBrokerString_0(a6, (char *)v63, 0x80uLL);
        if ((info_from_dct & 0x80000000) == 0)
        {
          unsigned int v50 = brk_DataOpenEx(*(void *)(a6 + 24), (uint64_t)v63, 1, (uint64_t)&v60);
          if ((v50 & 0x80000000) != 0)
          {
            unsigned int v42 = v50;
            if (a7[358] == 1) {
              uint64_t v54 = "openNLP statPOS rules not found";
            }
            else {
              uint64_t v54 = "MS statPOS rules not found";
            }
            log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v54, v51, v52, v53, 0);
          }
          else
          {
            a7[355] = 1;
            unsigned int v42 = brk_DataClose(*(void *)(a6 + 24), v60);
            if ((v42 & 0x80000000) == 0) {
              *a8 = 1;
            }
          }
          goto LABEL_47;
        }
        goto LABEL_46;
      }
      *a8 = v49;
      goto LABEL_42;
    }
  }
  return result;
}

uint64_t statpos_load_resources(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, _WORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11, uint64_t a12, int a13, _DWORD *a14, int a15)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v32 = 0;
  *(void *)a12 = a8;
  *(_OWORD *)(a12 + 1448) = a10;
  *(void *)(a12 + 1464) = a11;
  *(void *)(a12 + 1472) = a1;
  *(void *)(a12 + 1480) = a2;
  *(void *)(a12 + 1488) = a3;
  if (!a13)
  {
    *(void *)(a12 + 200) = 0;
    *(_DWORD *)(a12 + 208) = 0;
    uint64_t inited = nuance_pcre_ObjOpen(a4, a5, a12 + 200);
    if ((inited & 0x80000000) == 0)
    {
      AddRefCounteduint64_t Object = nuance_pcre_Init(*(void **)(a12 + 200), *(void *)(a12 + 208), 0x1Eu, 50);
      if ((AddRefCountedObject & 0x80000000) != 0) {
        return AddRefCountedObject;
      }
      if (*(_DWORD *)(a12 + 1424) == 1)
      {
        uint64_t v31 = 0;
        uint64_t inited = InitRsrcFunction(a6, a7, &v31);
        if ((inited & 0x80000000) != 0) {
          return inited;
        }
        uint64_t inited = statpos_igtrees_getBrkStrs(a8, v35, v34, 0x100uLL);
        if ((inited & 0x80000000) != 0) {
          return inited;
        }
        __strcpy_chk();
        __strcat_chk();
        ObjcForThisApunint64_t i = getObjcForThisApi(a8, v31);
        AddRefCounteduint64_t Object = objc_GetAddRefCountedObject(ObjcForThisApi, (uint64_t)v33, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))statpos_igtrees_ObjcLoad, (void (*)(void, void, long long *))statpos_igtrees_ObjcClose, a8, &v32);
        if ((AddRefCountedObject & 0x80000000) != 0) {
          return AddRefCountedObject;
        }
        memcpy((void *)(a12 + 784), *(const void **)(v32 + 32), 0x218uLL);
      }
      if (*(_DWORD *)(a12 + 1428) == 1)
      {
        AddRefCounteduint64_t Object = statpos_crf_load(a4, a5, a6, a7, a8, a9, *(void *)(a12 + 1448), *(void *)(a12 + 1456), *(void *)(a12 + 1464), a12 + 1320, a12 + 8, (uint64_t *)(a12 + 1384), a15);
        if ((AddRefCountedObject & 0x80000000) != 0) {
          return AddRefCountedObject;
        }
      }
      if (a15)
      {
        *(void *)(a12 + 8) = a8;
        *(_WORD *)(a12 + 384) = 5;
      }
      else
      {
        AddRefCounteduint64_t Object = statpos_rules_load(a4, a5, a8, *(void *)(a12 + 1448), *(void *)(a12 + 1456), *(void *)(a12 + 1464), a12 + 8, v29);
        if ((AddRefCountedObject & 0x80000000) != 0) {
          return AddRefCountedObject;
        }
      }
      if (*(_DWORD *)(a12 + 1424) == 1 && *(_DWORD *)(a12 + 800) != *(_DWORD *)(a12 + 160))
      {
        *a14 = 0;
        log_OutText(*(void *)(a8 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"set UseStatPOS to FALSE; OOV model differs in igtrees(%d) versus rules(%d)",
          v27,
          v28,
          v29,
          *(unsigned int *)(a12 + 800));
      }
      return AddRefCountedObject;
    }
    return inited;
  }
  if (*(_DWORD *)(a12 + 1420) != 1)
  {
    AddRefCounteduint64_t Object = 0;
    goto LABEL_21;
  }
  *(void *)(a12 + 200) = 0;
  *(_DWORD *)(a12 + 208) = 0;
  uint64_t inited = nuance_pcre_ObjOpen(a4, a5, a12 + 200);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  AddRefCounteduint64_t Object = nuance_pcre_Init(*(void **)(a12 + 200), *(void *)(a12 + 208), 0x1Eu, 50);
  if ((AddRefCountedObject & 0x80000000) != 0) {
    return AddRefCountedObject;
  }
  if (a15)
  {
LABEL_21:
    *(void *)(a12 + 8) = a8;
    *(_WORD *)(a12 + 384) = 5;
    return AddRefCountedObject;
  }
  uint64_t v21 = *(void *)(a12 + 1464);
  uint64_t v22 = *(void *)(a12 + 1448);
  uint64_t v23 = *(void *)(a12 + 1456);
  return statpos_rules_load(a4, a5, a8, v22, v23, v21, a12 + 8, v19);
}

uint64_t statpos_unload_resources(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = 0;
  if (a5)
  {
    if (*(_DWORD *)(a4 + 1420) == 1)
    {
      statpos_rules_unload((uint64_t *)(a4 + 8), a2, a3, a4, a5, a6, a7, a8);
      uint64_t NullHandle = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(*(void *)(a4 + 200), *(void *)(a4 + 208), NullHandle, v10))
      {
        nuance_pcre_DeInit(*(void **)(a4 + 200), *(void *)(a4 + 208));
        nuance_pcre_ObjClose(*(void *)(a4 + 200), *(void *)(a4 + 208));
      }
    }
    return 0;
  }
  else
  {
    int v13 = a6;
    uint64_t inited = InitRsrcFunction(a1, a2, &v25);
    if ((inited & 0x80000000) == 0)
    {
      statpos_crf_unload(a3, v25, a4 + 1320, a4 + 8, (uint64_t *)(a4 + 1384), v13);
      if (*(_DWORD *)(a4 + 1424))
      {
        ObjcForThisApunint64_t i = getObjcForThisApi(a3, v25);
        objc_ReleaseObject(ObjcForThisApi, a4 + 808);
      }
      statpos_rules_unload((uint64_t *)(a4 + 8), v15, v16, v17, v18, v19, v20, v21);
      uint64_t v23 = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(*(void *)(a4 + 200), *(void *)(a4 + 208), v23, v24))
      {
        nuance_pcre_DeInit(*(void **)(a4 + 200), *(void *)(a4 + 208));
        nuance_pcre_ObjClose(*(void *)(a4 + 200), *(void *)(a4 + 208));
      }
    }
  }
  return inited;
}

uint64_t statpos_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, int a14, unsigned int a15)
{
  BOOL v23 = a12 == 1 && (*(_DWORD *)(a10 + 1436) | a13) == 0 && a14 == 1;
  *(void *)(a10 + 752) = a7;
  *(void *)(a10 + 760) = a8;
  *(void *)(a10 + 768) = a9;
  uint64_t SentenceData = statpos_getSentenceData(a6, a4, a5, a10, a15);
  if ((SentenceData & 0x80000000) == 0 && *(_WORD *)(a10 + 656))
  {
    if (a11 || (uint64_t updated = statpos_disambiguatePOSTags(a10), (updated & 0x80000000) == 0))
    {
      if (*(_DWORD *)(a10 + 1416) == 1)
      {
        uint64_t updated = statpos_updateNLULingdbField(a6, a4, a5, a10);
      }
      else if (a15 != 1 || (uint64_t updated = statpos_setMorphemePRON(a1, a2, a3, a10), (updated & 0x80000000) == 0))
      {
        uint64_t updated = statpos_alignDisambiguatedPOSToLingdb(a10, a15, v24, v25, v26, v27, v28, v29);
        if ((updated & 0x80000000) == 0) {
          uint64_t updated = statpos_updatePOSLingdbWithDisambiguatedPOS(a6, a4, a5, (uint64_t *)a10, v23, a15);
        }
      }
    }
    uint64_t SentenceData = updated;
  }
  statpos_freeSentenceData((uint64_t *)a10);
  return SentenceData;
}

uint64_t statPOS_call_one_word(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char **a5, const char **a6, char **a7, uint64_t a8)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  unsigned __int16 v52 = 0;
  unsigned int v50 = 0;
  unsigned int __s = 0;
  strcpy(v53, "one_word");
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L1: %s", (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v53);
  uint64_t v15 = *a5;
  unsigned __int16 v16 = strlen(v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, const char *, void))(a4 + 120))(a2, a3, 0, v15, v16);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L2: %s", v18, v19, v20, (uint64_t)v53);
  unsigned __int16 v21 = strlen(*a6);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void))(a4 + 120))(a2, a3, 1, *a6, v21);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a4 + 80))(a2, a3, v53);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, char **, unsigned __int16 *))(a4 + 128))(a2, a3, 0, &__s, &v52);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  __s[v52] = 0;
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, char **, unsigned __int16 *))(a4 + 128))(a2, a3, 0, &v50, &v52);
  if ((v22 & 0x80000000) == 0)
  {
    v50[v52] = 0;
    BOOL v23 = __s;
    if (*__s)
    {
      uint64_t v24 = 0;
      unsigned __int16 v25 = 0;
      do
      {
        if (v23[v24] == 126)
        {
          uint64_t v26 = &v23[v25 + 1];
          uint64_t v27 = &v23[v25 + 2];
          size_t v28 = strlen(v27);
          memmove(v26, v27, v28 + 1);
          __s[v24] = 126;
          BOOL v23 = __s;
        }
        uint64_t v24 = ++v25;
        size_t v29 = strlen(v23);
      }
      while (v29 > v25);
      uint64_t v30 = v29 + 1;
    }
    else
    {
      uint64_t v30 = 1;
    }
    uint64_t v32 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v30);
    *a7 = v32;
    if (v32)
    {
      strcpy(v32, __s);
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s O1 (phonetics) : %s", v37, v38, v39, (uint64_t)v53);
      uint64_t v43 = v50;
      if (*v50)
      {
        uint64_t v44 = 0;
        unsigned __int16 v45 = 0;
        do
        {
          if (v43[v44] == 126)
          {
            uint64_t v46 = &v43[v45 + 1];
            uint64_t v47 = &v43[v45 + 2];
            size_t v48 = strlen(v47);
            memmove(v46, v47, v48 + 1);
            v50[v44] = 126;
            uint64_t v43 = v50;
          }
          uint64_t v44 = ++v45;
        }
        while (strlen(v43) > v45);
      }
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s O3 (POS code): %s (ignored)", v40, v41, v42, (uint64_t)v53);
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v33, v34, v35, v36, v49);
      return 2313166858;
    }
  }
  return v22;
}

uint64_t statphr_setFeature(uint64_t a1, char *__s1, uint64_t a3, const char *a4)
{
  uint64_t v8 = 0;
  while (strcmp(__s1, g_statphr_FeatureNames[v8]))
  {
    if (++v8 == 8) {
      return 0;
    }
  }
  if (*a4)
  {
    size_t v9 = strlen(a4);
    if (v9 < 0x41
      || (uint64_t result = resizeNFeature(a1, (uint64_t *)(a3 + v8 * 8), (unsigned __int16)(v9 + 1)), (result & 0x80000000) == 0))
    {
      strcpy(*(char **)(a3 + v8 * 8), a4);
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    **(_WORD **)(a3 + v8 * 8) = 95;
  }
  return result;
}

uint64_t statphr_setNFeature(uint64_t a1, char *__s1, uint64_t a3, const char *a4, unsigned int a5)
{
  unint64_t v10 = 0;
  while (strcmp(__s1, g_statphr_FeatureNames[v10 / 8]))
  {
    v10 += 8;
    if (v10 == 64) {
      return 0;
    }
  }
  if (!a5 || *a4)
  {
    if (a5 < 0x41
      || (uint64_t result = resizeNFeature(a1, (uint64_t *)(a3 + v10), (unsigned __int16)(a5 + 1)), (result & 0x80000000) == 0))
    {
      strncpy(*(char **)(a3 + v10), a4, a5);
      uint64_t result = 0;
      *(unsigned char *)(*(void *)(a3 + v10) + a5) = 0;
    }
  }
  else
  {
    uint64_t result = 0;
    **(_WORD **)(a3 + v10) = 95;
  }
  return result;
}

uint64_t resizeNFeature(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = heap_Realloc(*(uint64_t **)(a1 + 8), *a2, a3);
  if (v5)
  {
    uint64_t v10 = v5;
    uint64_t result = 0;
    *a2 = v10;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v6, v7, v8, v9, v12);
    return 2313166858;
  }
  return result;
}

uint64_t statphr_initFeatureVector(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 8 * a3 - 8;
  while (1)
  {
    uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *(void *)(a2 + v5) = v7;
    if (!v7) {
      break;
    }
    uint64_t result = statphr_setFeature(a1, g_statphr_FeatureNames[v5 / 8], a2, "_");
    if ((result & 0x80000000) == 0)
    {
      BOOL v13 = v6 == v5;
      v5 += 8;
      if (!v13) {
        continue;
      }
    }
    return result;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v8, v9, v10, v11, v14);
  return 2313166858;
}

uint64_t statphr_dumpFeatureVectorAndResult(uint64_t a1, uint64_t a2, char *__src)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  strncpy(__dst, __src, 0x100uLL);
  uint64_t v5 = 0;
  __dst[255] = 0;
  do
  {
    size_t v6 = strlen(*(const char **)(a2 + v5));
    if (v6 + strlen(__dst) + 2 > 0xFF) {
      break;
    }
    __strcat_chk();
    __strcat_chk();
    v5 += 8;
  }
  while (v5 != 64);
  return log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v7, v8, v9, (uint64_t)__dst);
}

uint64_t statphr_getIgtreeBrkStr(uint64_t a1, char *a2, unint64_t a3)
{
  *(void *)uint64_t v7 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v7);
  if ((result & 0x80000000) == 0) {
    return brokeraux_ComposeBrokerString(a1, "statphr_igtree", 1, 1, *(char **)v7, 0, 0, a2, a3);
  }
  return result;
}

uint64_t statphr_readIGTree(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, void *a6, _DWORD *a7)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *a7 = 0;
  uint64_t result = statphr_getIgtreeBrkStr(a5, v14, 0x100uLL);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = igtree_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, a6, 2, (uint64_t)v14, (uint64_t)"IGTR", 1031, 0);
    if ((result & 0x80000000) != 0)
    {
      uint64_t result = 0;
      *a6 = 0;
    }
    else
    {
      *a7 = 1;
    }
  }
  return result;
}

uint64_t statphr_searchInIGTreeParamDefs(uint64_t a1, char *__s2, const char *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 1336);
  if (!v3) {
    return 0;
  }
  unsigned __int16 v6 = 0;
  uint64_t v7 = *(void *)(a1 + 1328);
  while (1)
  {
    uint64_t v8 = v6;
    if (!strcmp(*(const char **)(v7 + 16 * v6), __s2))
    {
      uint64_t v9 = strstr(*(char **)(v7 + 16 * v8 + 8), a3);
      if (v9) {
        break;
      }
    }
LABEL_4:
    unsigned __int16 v6 = v8 + 1;
    if (v3 <= (unsigned __int16)(v8 + 1)) {
      return 0;
    }
  }
  uint64_t v10 = v9;
  while (*(v10 - 1) != 32 || v10[strlen(a3)] != 32)
  {
    uint64_t v10 = strstr(v10 + 1, a3);
    if (!v10) {
      goto LABEL_4;
    }
  }
  return 1;
}

uint64_t statphr_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  int v215 = 0;
  int v216 = 0;
  __int16 v214 = 0;
  unsigned int v213 = 0;
  unsigned __int16 v211 = 0;
  unsigned __int16 v212 = 0;
  int v210 = 0;
  memset(v217, 0, sizeof(v217));
  __src = 0;
  unsigned __int16 v208 = -1;
  uint64_t v207 = 0;
  __int16 v205 = 0;
  int v204 = 0;
  BOOL v15 = (int)paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompwidescope", &v204) >= 0 && v204 == 0;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v216);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a2 + 184))(a3, a4, (unsigned __int16)v216, 0, (char *)&v216 + 2);
  if ((v17 & 0x80000000) == 0 && HIWORD(v216) == 1)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a2 + 176))(a3, a4, (unsigned __int16)v216, 0, &v212, &v215);
    if ((v17 & 0x80000000) == 0 && (unsigned __int16)v215 >= 2u)
    {
      uint64_t v18 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 32);
      if (!v18
        || (BOOL v23 = v18,
            int v199 = a6,
            *uint64_t v18 = 0,
            unsigned __int16 v24 = strlen(v212),
            (unsigned __int16 v25 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v24 + 1)) == 0))
      {
        uint64_t v17 = 2313166858;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v19, v20, v21, v22, v171);
        return v17;
      }
      int __dst = v25;
      strcpy(v25, v212);
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v216, (char *)&v215 + 2);
      if ((v26 & 0x80000000) != 0)
      {
        uint64_t v17 = v26;
        uint64_t v31 = 0;
        unsigned __int16 v36 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        goto LABEL_31;
      }
      int v193 = a7;
      int v197 = v23;
      int v201 = 0;
      unsigned __int16 v27 = -1;
      while (HIWORD(v215))
      {
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a3, a4);
        if ((v28 & 0x80000000) != 0) {
          goto LABEL_27;
        }
        if (v213 <= 0xA && ((1 << v213) & 0x610) != 0)
        {
          uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v215), 1, 1, (char *)&v210 + 2, &v215);
          if ((v28 & 0x80000000) != 0) {
            goto LABEL_27;
          }
          int v30 = v201;
          if (HIWORD(v210) != v27) {
            int v30 = v201 + 1;
          }
          int v201 = v30;
          unsigned __int16 v27 = HIWORD(v210);
        }
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v215), (char *)&v215 + 2);
        if ((v28 & 0x80000000) != 0)
        {
LABEL_27:
          uint64_t v17 = v28;
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          unsigned __int16 v36 = v201;
          goto LABEL_32;
        }
      }
      uint64_t v198 = heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)v201 << 6);
      if (!v198)
      {
        uint64_t v17 = 2313166858;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v43, v44, v45, v46, v171);
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        unsigned __int16 v36 = v201;
        goto LABEL_32;
      }
      if ((_WORD)v201)
      {
        unsigned __int16 v47 = 0;
        while (1)
        {
          uint64_t inited = statphr_initFeatureVector(a1, v198 + 8 * v47, 8u);
          if ((inited & 0x80000000) != 0) {
            break;
          }
          v47 += 8;
          if (8 * (unsigned __int16)v201 <= v47) {
            goto LABEL_55;
          }
        }
LABEL_123:
        uint64_t v17 = inited;
        uint64_t v31 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        unsigned __int16 v36 = v201;
        uint64_t v32 = v198;
        goto LABEL_32;
      }
LABEL_55:
      uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v216, (char *)&v215 + 2);
      if ((inited & 0x80000000) != 0) {
        goto LABEL_123;
      }
      unsigned int v178 = 8 * (unsigned __int16)v201;
      int v192 = 0;
      int v52 = 0;
      int v194 = 0;
      unsigned __int16 v53 = -1;
      while (HIWORD(v215))
      {
        uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a3, a4);
        if ((v54 & 0x80000000) != 0) {
          goto LABEL_120;
        }
        if (v213 - 9 < 2) {
          goto LABEL_62;
        }
        if (v213 != 6)
        {
          if (v213 != 4) {
            goto LABEL_119;
          }
LABEL_62:
          uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v215), 1, 1, (char *)&v210 + 2, &v215);
          if ((v54 & 0x80000000) != 0) {
            goto LABEL_120;
          }
          if (HIWORD(v210) != v53)
          {
            uint64_t v203 = 0;
            unsigned __int16 v202 = 0;
            HIWORD(v216) = 0;
            uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a2 + 184))(a3, a4, HIWORD(v215), 14, (char *)&v216 + 2);
            if ((v17 & 0x80000000) != 0) {
              goto LABEL_125;
            }
            if (HIWORD(v216) != 1) {
              goto LABEL_125;
            }
            uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v215), 14, &v211, &v215);
            if ((v17 & 0x80000000) != 0) {
              goto LABEL_125;
            }
            if (!hlp_NLUStrFind(v211, "POS", (uint64_t *)&v203, &v202))
            {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statPHR: internal ERROR - found a WordRecord %d without POS (NLU=%s), bailing out", v55, v56, v57, HIWORD(v215));
LABEL_125:
              unsigned __int16 v36 = v201;
              uint64_t v32 = v198;
              uint64_t v33 = (uint64_t)v192;
              goto LABEL_272;
            }
            int __s1 = v52;
            if ((_WORD)v52 && !v194)
            {
              uint64_t v58 = 0;
              uint64_t v186 = v198 + 8 * (unsigned __int16)v52 - 64;
              do
                unsigned int v59 = &g_statphr_FeatureNames[v58++];
              while (strcmp("pos", v59[1]));
              uint64_t v60 = *(char **)(v186 + 8 * v58);
              int v61 = strstr(v60, "_BVB");
              if (v61) {
                *int v61 = 0;
              }
              uint64_t v62 = statphr_setFeature(a1, "Lpos", v198 + 8 * (unsigned __int16)v52, v60);
              if ((v62 & 0x80000000) != 0) {
                goto LABEL_124;
              }
              uint64_t v62 = statphr_setNFeature(a1, "Rpos", v186, v203, v202);
              if ((v62 & 0x80000000) != 0) {
                goto LABEL_124;
              }
            }
            if ((unsigned __int16)v52 >= 9u && !v194)
            {
              uint64_t v62 = statphr_setNFeature(a1, "RRpos", v198 + 8 * (unsigned __int16)v52 - 128, v203, v202);
              if ((v62 & 0x80000000) != 0) {
                goto LABEL_124;
              }
            }
            uint64_t v63 = v198 + 8 * (unsigned __int16)v52;
            uint64_t v62 = statphr_setNFeature(a1, "pos", v63, v203, v202);
            if ((v62 & 0x80000000) != 0) {
              goto LABEL_124;
            }
            unsigned int v179 = (char *)(v198 + 8 * (unsigned __int16)v52);
            if (HIWORD(v210) > v208 && v207)
            {
              char v64 = v207[3];
              v207[3] = 0;
              statphr_setFeature(a1, "Lpos", v63, v207 + 1);
              uint64_t v62 = statphr_setFeature(a1, "Lchunk", v63, v207 + 1);
              if ((v62 & 0x80000000) != 0) {
                goto LABEL_124;
              }
              v207[3] = v64;
              if ((unsigned __int16)__s1 >= 9u)
              {
                char v65 = v207[3];
                v207[3] = 0;
                uint64_t v62 = statphr_setFeature(a1, "Rpos", v198 + 8 * (unsigned __int16)__s1 - 128, v207 + 1);
                if ((v62 & 0x80000000) != 0) {
                  goto LABEL_124;
                }
                v207[3] = v65;
                uint64_t v63 = (uint64_t)v179;
                if ((unsigned __int16)__s1 >= 0x11u)
                {
                  char v66 = v207[3];
                  v207[3] = 0;
                  uint64_t v62 = statphr_setFeature(a1, "RRpos", v198 + 8 * (unsigned __int16)__s1 - 192, v207 + 1);
                  if ((v62 & 0x80000000) != 0) {
                    goto LABEL_124;
                  }
                  v207[3] = v66;
                }
              }
              unsigned __int16 v208 = -1;
              uint64_t v207 = 0;
            }
            uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v215), 2, 1, &v210, &v215);
            if ((v62 & 0x80000000) != 0
              || (uint64_t v62 = statphr_set_WBND_feature(a1, v63, v212, HIWORD(v210), 1), (v62 & 0x80000000) != 0)
              || (uint64_t v62 = statphr_set_WBND_feature(a1, v63, v212, (unsigned __int16)v210, 0), (v62 & 0x80000000) != 0))
            {
LABEL_124:
              uint64_t v17 = v62;
              goto LABEL_125;
            }
            int v67 = (unsigned __int16)v210 - HIWORD(v210);
            uint64_t v68 = v192;
            uint64_t v69 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v192, (unsigned __int16)(v210 - HIWORD(v210)) + 1);
            if (!v69)
            {
LABEL_270:
              uint64_t v17 = 2313166858;
              log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v70, v71, v72, v73, v171);
              goto LABEL_271;
            }
            unsigned __int16 v74 = HIWORD(v210);
            unsigned __int16 v75 = v210;
            if (HIWORD(v210) >= (unsigned __int16)v210)
            {
              unsigned __int16 v187 = 0;
              int v192 = (const char *)v69;
              int v194 = 0;
            }
            else
            {
              int v194 = 0;
              unsigned __int16 v187 = 0;
              int v192 = (const char *)v69;
              int v182 = v67;
              do
              {
                uint64_t v76 = v74;
                __int16 v77 = &v212[v74];
                int v78 = *v77;
                if (memchr(",:;.?!'\"", v78, 9uLL))
                {
                  int v79 = memchr(",:;.?!", v78, 7uLL);
                  int v80 = v194;
                  if (v79) {
                    int v80 = 1;
                  }
                  int v194 = v80;
                  unsigned __int16 v74 = v76 + 1;
                }
                else
                {
                  unsigned __int16 NextUtf8Offset = utf8_GetNextUtf8Offset(v77, 0);
                  BOOL v23 = v197;
                  if (utf8_ToLower(v212, v76, (uint64_t)__s))
                  {
                    if (strlen(__s) <= NextUtf8Offset)
                    {
                      strcpy((char *)&v192[v187], __s);
                      unsigned __int16 v187 = strlen(v192);
                    }
                    else
                    {
                      v182 += 5;
                      uint64_t v68 = v192;
                      uint64_t v82 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v192, (unsigned __int16)v182 + 1);
                      if (!v82) {
                        goto LABEL_270;
                      }
                      int v192 = (const char *)v82;
                    }
                  }
                  else
                  {
                    strncpy((char *)&v192[v187], &v212[v76], NextUtf8Offset);
                    v187 += NextUtf8Offset;
                  }
                  unsigned __int16 v74 = v76 + NextUtf8Offset;
                  unsigned __int16 v75 = v210;
                }
              }
              while (v74 < v75);
            }
            uint64_t v68 = v192;
            v192[v187] = 0;
            if (*v192)
            {
              if (statphr_searchInIGTreeParamDefs(a5, "orthtokeep", v192))
              {
                uint64_t v83 = statphr_setFeature(a1, "orth", (uint64_t)v179, v192);
                if ((v83 & 0x80000000) != 0)
                {
                  uint64_t v17 = v83;
                  BOOL v23 = v197;
LABEL_271:
                  unsigned __int16 v36 = v201;
                  uint64_t v32 = v198;
                  uint64_t v33 = (uint64_t)v68;
LABEL_272:
                  uint64_t v31 = 0;
LABEL_31:
                  uint64_t v34 = 0;
                  uint64_t v35 = 0;
                  goto LABEL_32;
                }
              }
            }
            int v52 = __s1 + 8;
            unsigned __int16 v53 = HIWORD(v210);
            BOOL v23 = v197;
          }
          goto LABEL_119;
        }
        uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a2 + 168))(a3, a4, HIWORD(v215), 2, 1, &v208, &v215);
        if ((v54 & 0x80000000) != 0
          || (uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v215), 4, &v207, &v215), (v54 & 0x80000000) != 0))
        {
LABEL_120:
          uint64_t v17 = v54;
          uint64_t v31 = 0;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_121:
          unsigned __int16 v36 = v201;
          uint64_t v32 = v198;
          uint64_t v33 = (uint64_t)v192;
          goto LABEL_32;
        }
        if (strlen(v207) < 4 || !strcmp(v207, "_PR_"))
        {
          uint64_t v207 = 0;
          unsigned __int16 v208 = -1;
        }
LABEL_119:
        uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v215), (char *)&v215 + 2);
        if ((v54 & 0x80000000) != 0) {
          goto LABEL_120;
        }
      }
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Predicting PHR with IGtree", v49, v50, v51, v171);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v216, (char *)&v215 + 2);
      if ((v17 & 0x80000000) != 0 || (unsigned __int16 v84 = HIWORD(v215)) == 0)
      {
        uint64_t v31 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        goto LABEL_121;
      }
      uint64_t v183 = 0;
      __s1a = 0;
      uint64_t v176 = 0;
      unsigned __int16 v177 = 0;
      BOOL v180 = 0;
      int v188 = 0;
      BOOL v175 = 0;
      __s2 = 0;
      uint64_t v174 = 0;
      int v85 = 0xFFFF;
      while (2)
      {
        uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v84, 0, 1, &v213, &v215);
        if ((v86 & 0x80000000) != 0)
        {
LABEL_274:
          uint64_t v17 = v86;
LABEL_275:
          unsigned __int16 v36 = v201;
          uint64_t v32 = v198;
          uint64_t v33 = (uint64_t)v192;
          uint64_t v31 = (uint64_t)v174;
          uint64_t v34 = v183;
          goto LABEL_276;
        }
        if (v213 > 0xA || ((1 << v213) & 0x610) == 0) {
          goto LABEL_267;
        }
        uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v215), 1, 1, (char *)&v210 + 2, &v215);
        if ((v86 & 0x80000000) != 0) {
          goto LABEL_274;
        }
        uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v215), 2, 1, &v210, &v215);
        if ((v86 & 0x80000000) != 0) {
          goto LABEL_274;
        }
        uint64_t v88 = strncpy(__dst, &v212[HIWORD(v210)], (unsigned __int16)v210 - (unint64_t)HIWORD(v210));
        v88[(unsigned __int16)v210 - HIWORD(v210)] = 0;
        if (HIWORD(v210) == (unsigned __int16)v85)
        {
LABEL_251:
          if (__src)
          {
            int v196 = v85;
            uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v215), 14, &v211, &v215);
            if ((v86 & 0x80000000) != 0) {
              goto LABEL_274;
            }
            uint64_t v150 = *(uint64_t **)(a1 + 8);
            if (v188)
            {
              int v151 = strlen(v23);
              int v152 = strlen(v211);
              uint64_t v153 = __s1a;
              uint64_t v154 = (char *)heap_Realloc(v150, (uint64_t)__s1a, (v151 + v152 + 8));
              if (!v154) {
                goto LABEL_283;
              }
              uint64_t v159 = v154;
              uint64_t v160 = strcpy(v154, v211);
              uint64_t v161 = v23;
            }
            else
            {
              int v162 = strlen(__src);
              int v163 = strlen(v211);
              uint64_t v153 = __s1a;
              uint64_t v164 = (char *)heap_Realloc(v150, (uint64_t)__s1a, (v162 + v163 + 8));
              if (!v164)
              {
LABEL_283:
                uint64_t v17 = 2313166858;
                log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v155, v156, v157, v158, v172);
                unsigned __int16 v36 = v201;
                uint64_t v32 = v198;
                uint64_t v33 = (uint64_t)v192;
                uint64_t v31 = (uint64_t)v174;
                uint64_t v34 = v183;
                uint64_t v35 = (uint64_t)v153;
                goto LABEL_32;
              }
              uint64_t v159 = v164;
              uint64_t v160 = strcpy(v164, v211);
              uint64_t v161 = __src;
            }
            uint64_t v165 = hlp_NLUStrSet(v160, "PHR", v161);
            __s1a = (char *)v159;
            if (v180)
            {
              char v169 = 66;
            }
            else
            {
              if (!HIDWORD(v176))
              {
LABEL_263:
                if (!v188) {
                  strcpy(v23, __src);
                }
                log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"STATPHR : word=%s NLU=%s", v166, v167, v168, (uint64_t)__dst);
                __int16 v170 = strlen(v159);
                uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(a2 + 160))(a3, a4, HIWORD(v215), 14, (unsigned __int16)(v170 + 1), v159, &v214);
                if ((v86 & 0x80000000) != 0) {
                  goto LABEL_274;
                }
                int v85 = v196;
                goto LABEL_267;
              }
              char v169 = 73;
            }
            v165[4] = v169;
            goto LABEL_263;
          }
LABEL_267:
          uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v215), (char *)&v215 + 2);
          if ((v17 & 0x80000000) != 0) {
            goto LABEL_275;
          }
          unsigned __int16 v84 = HIWORD(v215);
          if (!HIWORD(v215)) {
            goto LABEL_275;
          }
          continue;
        }
        break;
      }
      uint64_t v89 = 0;
      uint64_t v195 = (const char **)(v198 + 8 * v177);
      do
      {
        if (!strcmp("pos", g_statphr_FeatureNames[v89]))
        {
          int v90 = v195[v89];
          goto LABEL_142;
        }
        ++v89;
      }
      while (v89 != 8);
      int v90 = 0;
LABEL_142:
      if (statphr_searchInIGTreeParamDefs(a5, "preppos", v90))
      {
        unsigned __int16 v91 = v177 + 8;
        unsigned int v92 = v177 + 40;
        if (v92 > (unsigned __int16)(v177 + 8))
        {
          unsigned __int16 v93 = v177 + 8;
          if (v178 > (unsigned __int16)(v177 + 8))
          {
            unsigned __int16 v181 = (char *)v90;
            if (v92 >= v178) {
              unsigned int v92 = 8 * (unsigned __int16)v201;
            }
            unsigned int v189 = v92;
            do
            {
              int v94 = (const char **)(v198 + 8 * v91);
              if (strcmp(*v94, "_"))
              {
                uint64_t v95 = 0;
                while (strcmp("pos", g_statphr_FeatureNames[v95]))
                {
                  if (++v95 == 8)
                  {
                    int v96 = 0;
                    goto LABEL_154;
                  }
                }
                int v96 = v94[v95];
LABEL_154:
                BOOL v23 = v197;
                if (!statphr_searchInIGTreeParamDefs(a5, "verbpos", v96))
                {
                  unsigned __int16 v91 = v93 + 8;
                  goto LABEL_160;
                }
                int v97 = strlen(v181);
                uint64_t v98 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), v183, (v97 + 5));
                if (!v98)
                {
                  uint64_t v17 = 2313166858;
                  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v99, v100, v101, v102, v172);
                  unsigned __int16 v36 = v201;
                  uint64_t v32 = v198;
                  uint64_t v33 = (uint64_t)v192;
                  uint64_t v31 = (uint64_t)v174;
                  uint64_t v34 = v183;
                  goto LABEL_276;
                }
                int v103 = v98;
                uint64_t v104 = strcpy(v98, v181);
                strcpy((char *)&v103[strlen(v104)], "_BVB");
                uint64_t v105 = statphr_setFeature(a1, "pos", (uint64_t)v195, v103);
                if ((v105 & 0x80000000) != 0)
                {
                  uint64_t v17 = v105;
                  uint64_t v34 = (uint64_t)v103;
                  unsigned __int16 v36 = v201;
                  uint64_t v32 = v198;
                  uint64_t v33 = (uint64_t)v192;
                  uint64_t v31 = (uint64_t)v174;
LABEL_276:
                  uint64_t v35 = (uint64_t)__s1a;
LABEL_32:
                  heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
                  heap_Free(*(void **)(a1 + 8), (uint64_t)__dst);
                  if (v31) {
                    heap_Free(*(void **)(a1 + 8), v31);
                  }
                  if (v35) {
                    heap_Free(*(void **)(a1 + 8), v35);
                  }
                  if (v34) {
                    heap_Free(*(void **)(a1 + 8), v34);
                  }
                  if (v33) {
                    heap_Free(*(void **)(a1 + 8), v33);
                  }
                  if (v32)
                  {
                    int v37 = v36;
                    if (v36)
                    {
                      unsigned __int16 v38 = 0;
                      unsigned int v39 = 8 * v37;
                      do
                      {
                        for (uint64_t i = 0; i != 64; i += 8)
                        {
                          uint64_t v41 = *(void *)(v32 + 8 * v38 + i);
                          if (v41) {
                            heap_Free(*(void **)(a1 + 8), v41);
                          }
                        }
                        v38 += 8;
                      }
                      while (v39 > v38);
                    }
                    heap_Free(*(void **)(a1 + 8), v32);
                  }
                  return v17;
                }
                uint64_t v183 = (uint64_t)v103;
              }
              unsigned __int16 v91 = 8 * v201;
LABEL_160:
              unsigned __int16 v93 = v91;
            }
            while (v91 < v189);
          }
        }
      }
      __int16 v190 = __src;
      if (__src)
      {
        uint64_t v106 = 0;
        do
          uint64_t v107 = &g_statphr_FeatureNames[v106++];
        while (strcmp("Lchunk", v107[1]));
        if (!strcmp(v195[v106], "_") && strcmp(*v195, "_")) {
          statphr_setFeature(a1, "Lchunk", (uint64_t)v195, v190);
        }
      }
      if (v199 == 1)
      {
        uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v215), 14, &v211, &v215);
        if ((v86 & 0x80000000) != 0) {
          goto LABEL_274;
        }
        uint64_t v108 = v211;
        if (v211) {
          BOOL v109 = v15;
        }
        else {
          BOOL v109 = 0;
        }
        if (v109)
        {
          unsigned __int16 v110 = strstr(v211, "COMP:");
          if (v110)
          {
            int v111 = v176;
            if (v110[5] == 66) {
              int v111 = 1;
            }
            BOOL v175 = v110[5] == 66;
            LODWORD(v176) = v111;
            BOOL v112 = 1;
LABEL_191:
            BOOL v191 = v112;
LABEL_192:
            if (*(unsigned __int8 *)(a5 + 1296) >= 2u)
            {
              uint64_t v120 = 0;
              do
              {
                uint64_t v121 = 0;
                uint64_t v122 = *(void *)(a5 + 1312);
                uint64_t v123 = *(const char **)(v122 + 8 * v120);
                while (strcmp(v123, g_statphr_FeatureNames[v121]))
                {
                  if (++v121 == 8)
                  {
                    uint64_t v127 = 0;
                    goto LABEL_199;
                  }
                }
                uint64_t v127 = v195[v121];
LABEL_199:
                *((void *)v217 + v120) = v127;
                log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Feature %s is %s", v124, v125, v126, *(void *)(v122 + 8 * v120++));
              }
              while (*(unsigned __int8 *)(a5 + 1296) - 1 > (unsigned __int16)v120);
            }
            uint64_t v128 = igtree_Process(a5, (uint64_t)v217, &__src);
            if ((v128 & 0x80000000) != 0)
            {
LABEL_281:
              uint64_t v17 = v128;
LABEL_282:
              BOOL v23 = v197;
              goto LABEL_275;
            }
            statphr_dumpFeatureVectorAndResult(a1, (uint64_t)v195, __src);
            int v132 = *__src;
            if (__s1a)
            {
              if (v132 != 73 || strstr(__s1a, __src + 1)) {
                goto LABEL_204;
              }
            }
            else if (v132 != 73)
            {
LABEL_204:
              BOOL v180 = 0;
              int v133 = 1;
LABEL_207:
              if (v199)
              {
                if (v191)
                {
                  int v134 = *__src;
                  if (v134 == 66)
                  {
                    if (v176 != 1)
                    {
                      uint64_t v176 = 0;
                      goto LABEL_229;
                    }
                  }
                  else
                  {
                    if (!v180)
                    {
                      int v188 = 0;
                      BOOL v180 = 0;
                      HIDWORD(v176) = 0;
                      goto LABEL_249;
                    }
                    if (v134 != 73 || v176 != 1)
                    {
                      HIDWORD(v176) = 0;
                      int v188 = 0;
                      BOOL v180 = 1;
                      BOOL v23 = v197;
                      if (!v193) {
                        goto LABEL_250;
                      }
                      goto LABEL_236;
                    }
                  }
                  if (v175)
                  {
                    HIDWORD(v176) = 0;
                  }
                  else
                  {
                    if (strcmp("O", v197))
                    {
                      *int v197 = 73;
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"STATPHR : Force PHR to %s as bisects compound", v147, v148, v149, (uint64_t)v197);
                      BOOL v175 = 0;
                      if (v180)
                      {
                        HIDWORD(v176) = 0;
                        BOOL v180 = *__src != 73;
                      }
                      else
                      {
                        BOOL v180 = 0;
                        HIDWORD(v176) = 0;
                      }
                      LODWORD(v176) = 1;
                      int v188 = 1;
                      goto LABEL_249;
                    }
                    HIDWORD(v176) = 0;
                    BOOL v175 = 0;
                  }
                  LODWORD(v176) = 1;
                  goto LABEL_229;
                }
                uint64_t v176 = 0;
                BOOL v175 = 0;
LABEL_229:
                if (v193)
                {
                  if (!v133)
                  {
                    BOOL v180 = 1;
                    BOOL v23 = v197;
                    goto LABEL_236;
                  }
                  if (__src)
                  {
                    BOOL v180 = 0;
                    int v188 = 0;
                    BOOL v23 = v197;
                    if (*__src != 66) {
                      goto LABEL_250;
                    }
LABEL_236:
                    if (statphr_isWBND((uint64_t)v195))
                    {
                      int v188 = 0;
                    }
                    else
                    {
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"STATPHR : Force PHR from %s to I-* as it bisects eojeol", v144, v145, v146, (uint64_t)__src);
                      int v188 = 0;
                      BOOL v180 = 0;
                      HIDWORD(v176) = 1;
                    }
                    goto LABEL_250;
                  }
                  int v188 = 0;
                  BOOL v180 = 0;
                }
                else
                {
                  int v188 = 0;
                }
LABEL_249:
                BOOL v23 = v197;
LABEL_250:
                v177 += 8;
                int v85 = HIWORD(v210);
                goto LABEL_251;
              }
              uint64_t v128 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v215), 5, &v205, &v215);
              if ((v128 & 0x80000000) != 0) {
                goto LABEL_281;
              }
              HIDWORD(v176) = 0;
              uint64_t v135 = v205;
              if (!__s1a || !__s2)
              {
LABEL_228:
                __s2 = strstr(v135, ",COMP");
                goto LABEL_229;
              }
              if (!strstr(v205, __s2) || *__src == 73 || (uint64_t v136 = strstr(__s1a, "PHR:"), (__src = v136) == 0))
              {
                HIDWORD(v176) = 0;
                goto LABEL_228;
              }
              __src = v136 + 4;
              int v137 = v136[4];
              int v138 = strlen(v136 + 4);
              uint64_t v139 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v174, (v138 + 1));
              if (v139)
              {
                HIDWORD(v176) = v137 == 66;
                __src = strcpy(v139, __src);
                uint64_t v135 = v205;
                uint64_t v174 = __src;
                goto LABEL_228;
              }
              uint64_t v17 = 2313166858;
              log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v140, v141, v142, v143, v172);
              goto LABEL_282;
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Forcing consistency of IOB tags", v129, v130, v131, v172);
            int v133 = 0;
            BOOL v180 = 1;
            goto LABEL_207;
          }
        }
        if (v108) {
          char v113 = v15;
        }
        else {
          char v113 = 1;
        }
        if ((v113 & 1) == 0)
        {
          uint64_t v114 = strstr(v108, "S_COMP:");
          if (v114) {
            int v115 = 1;
          }
          else {
            int v115 = v175;
          }
          uint64_t v116 = strstr(v108, "I_COMP:");
          int v117 = v176;
          if ((unint64_t)v116 | (unint64_t)v114) {
            int v117 = 1;
          }
          LODWORD(v176) = v117;
          uint64_t v118 = strstr(v108, "E_COMP:");
          if ((unint64_t)v118 | (unint64_t)v116) {
            int v119 = 0;
          }
          else {
            int v119 = v115;
          }
          BOOL v175 = v119;
          BOOL v112 = ((unint64_t)v118 | (unint64_t)v116 | (unint64_t)v114) != 0;
          goto LABEL_191;
        }
      }
      BOOL v191 = 0;
      goto LABEL_192;
    }
  }
  return v17;
}

uint64_t statphr_set_WBND_feature(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, int a5)
{
  if (a4) {
    BOOL v8 = a5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  __int16 v9 = !v8;
  if (a4 && (__int16 v10 = a4, strlen(__s) > a4) && __s[(unsigned __int16)(v10 - v9)] != 32) {
    uint64_t v12 = "0";
  }
  else {
    uint64_t v12 = "1";
  }
  if (a5) {
    BOOL v13 = "Lwbnd";
  }
  else {
    BOOL v13 = "Rwbnd";
  }
  return statphr_setFeature(a1, v13, a2, v12);
}

BOOL statphr_isWBND(uint64_t a1)
{
  uint64_t v2 = 0;
  while (strcmp("Lwbnd", g_statphr_FeatureNames[v2]))
  {
    if (++v2 == 8) {
      return 0;
    }
  }
  unsigned int v3 = *(const char **)(a1 + v2 * 8);
  return v3 && !strcmp(v3, "1");
}

uint64_t statphr_MorphemeProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v29 = 0;
  int v30 = 0;
  unsigned int v27 = 0;
  int v28 = 0;
  unsigned int __s = 0;
  uint64_t v26 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v30);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a2 + 184))(a3, a4, (unsigned __int16)v30, 0, (char *)&v30 + 2);
  if ((v9 & 0x80000000) == 0 && HIWORD(v30) == 1)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a2 + 176))(a3, a4, (unsigned __int16)v30, 0, &v26, &v29);
    if ((v9 & 0x80000000) == 0 && (unsigned __int16)v29 >= 2u)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v30, (char *)&v29 + 2);
      if ((v9 & 0x80000000) == 0)
      {
        unsigned __int16 v10 = HIWORD(v29);
        if (HIWORD(v29))
        {
          uint64_t v11 = 0;
          while (1)
          {
            uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v10, 0, 1, &v27, &v29);
            if ((v12 & 0x80000000) != 0)
            {
LABEL_31:
              uint64_t v9 = v12;
              goto LABEL_34;
            }
            if (v27 <= 0xA && ((1 << v27) & 0x610) != 0)
            {
              uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a2 + 184))(a3, a4, HIWORD(v29), 14, (char *)&v30 + 2);
              if ((v9 & 0x80000000) != 0 || HIWORD(v30) != 1) {
                goto LABEL_34;
              }
              uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v29), 14, &__s, &v29);
              if ((v12 & 0x80000000) != 0) {
                goto LABEL_31;
              }
              size_t v14 = strlen(__s);
              BOOL v15 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), v11, v14 + 10);
              if (!v15)
              {
                log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v16, v17, v18, v19, __s);
                uint64_t v9 = 2313166858;
LABEL_34:
                uint64_t v20 = (const char *)v11;
                if (!v11) {
                  return v9;
                }
LABEL_35:
                heap_Free(*(void **)(a1 + 8), (uint64_t)v20);
                return v9;
              }
              uint64_t v20 = v15;
              strcpy(v15, __s);
              uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v29), 1, 1, &v28, &v29);
              if ((v21 & 0x80000000) != 0
                || (!(_WORD)v28
                  ? (uint64_t v22 = "PHR:B-WP")
                  : *(unsigned char *)(v26 + (unsigned __int16)v28 - 1) != 95
                  ? (uint64_t v22 = "PHR:B-WP")
                  : (uint64_t v22 = "PHR:I-WP"),
                    hlp_NLUStrJoin(v20, v22),
                    __int16 v23 = strlen(v20),
                    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, char *))(a2 + 160))(a3, a4, HIWORD(v29), 14, (unsigned __int16)(v23 + 1), v20, (char *)&v28 + 2), (v21 & 0x80000000) != 0))
              {
                uint64_t v9 = v21;
                goto LABEL_35;
              }
              uint64_t v11 = (uint64_t)v20;
            }
            uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v29), (char *)&v29 + 2);
            if ((v9 & 0x80000000) == 0)
            {
              unsigned __int16 v10 = HIWORD(v29);
              if (HIWORD(v29)) {
                continue;
              }
            }
            goto LABEL_34;
          }
        }
      }
    }
  }
  return v9;
}

uint64_t statcomp_setParams(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompdetailtrace", &v5) & 0x80000000) == 0) {
    *(_WORD *)(a2 + 8) = v5;
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompsrctrace", &v5) & 0x80000000) == 0) {
    *(_WORD *)(a2 + 10) = v5;
  }
  *(_DWORD *)(a2 + 12) = 1;
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompwidescope", &v5) & 0x80000000) == 0 && !v5) {
    *(_DWORD *)(a2 + 12) = 0;
  }
  return 0;
}

uint64_t statcomp_rules_unload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 272);
  if (v10)
  {
    heap_Free(*(void **)(v9 + 8), v10);
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v11 = *(void **)(a1 + 288);
  if (v11)
  {
    uint64_t v12 = ssftriff_reader_ReleaseChunkData(v11, v10, a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    *(void *)(a1 + 288) = 0;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(a1 + 312);
  if (v13)
  {
    heap_Free(*(void **)(v9 + 8), v13);
    *(void *)(a1 + 312) = 0;
  }
  size_t v14 = *(void **)(a1 + 328);
  if (v14)
  {
    uint64_t v12 = ssftriff_reader_ReleaseChunkData(v14, v13, a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    *(void *)(a1 + 328) = 0;
  }
  uint64_t v15 = *(void *)(a1 + 232);
  if (v15)
  {
    heap_Free(*(void **)(v9 + 8), v15);
    *(void *)(a1 + 232) = 0;
  }
  uint64_t v16 = *(void **)(a1 + 248);
  if (v16)
  {
    uint64_t v12 = ssftriff_reader_ReleaseChunkData(v16, v15, a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    *(void *)(a1 + 248) = 0;
  }
  if (*(_WORD *)(a1 + 72))
  {
    unint64_t v17 = 0;
    uint64_t v18 = 104;
    do
    {
      uint64_t v19 = *(void *)(a1 + 64);
      if (v19)
      {
        heap_Free(*(void **)(v9 + 8), *(void *)(v19 + v18 - 96));
        uint64_t v20 = *(void *)(a1 + 64) + v18;
        *(void *)(v20 - 96) = 0;
        freeRULEREGEXES((void *)v9, v20 - 80);
        freeRULEREGEXES((void *)v9, *(void *)(a1 + 64) + v18 - 64);
        uint64_t v21 = *(void *)(a1 + 64);
        uint64_t v22 = *(void *)(v21 + v18 - 48);
        if (v22 && *(_WORD *)(v21 + v18 - 40))
        {
          heap_Free(*(void **)(v9 + 8), v22);
          uint64_t v21 = *(void *)(a1 + 64);
          *(void *)(v21 + v18 - 48) = 0;
        }
        freeRULEREGEXES((void *)v9, v21 + v18 - 32);
        heap_Free(*(void **)(v9 + 8), *(void *)(*(void *)(a1 + 64) + v18 - 16));
        __int16 v23 = (uint64_t *)(*(void *)(a1 + 64) + v18);
        *(v23 - 2) = 0;
        heap_Free(*(void **)(v9 + 8), *v23);
        *(void *)(*(void *)(a1 + 64) + v18) = 0;
      }
      if (*(_WORD *)(a1 + 88))
      {
        heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 80));
        *(void *)(a1 + 80) = 0;
        *(_WORD *)(a1 + 88) = 0;
      }
      if (*(_WORD *)(a1 + 104))
      {
        heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 96));
        *(void *)(a1 + 96) = 0;
        *(_WORD *)(a1 + 104) = 0;
      }
      ++v17;
      v18 += 120;
    }
    while (v17 < *(unsigned __int16 *)(a1 + 72));
    if (*(_WORD *)(a1 + 72))
    {
      heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 64));
      *(void *)(a1 + 64) = 0;
      *(_WORD *)(a1 + 72) = 0;
    }
  }
  uint64_t v24 = *(void *)(a1 + 32);
  if (v24)
  {
    heap_Free(*(void **)(v9 + 8), v24);
    *(void *)(a1 + 32) = 0;
  }
  *(_WORD *)(a1 + 40) = 0;
  uint64_t v25 = *(void *)(a1 + 48);
  if (v25)
  {
    if (*(_WORD *)(a1 + 56))
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        heap_Free(*(void **)(v9 + 8), *(void *)(v25 + v26));
        uint64_t v25 = *(void *)(a1 + 48);
        uint64_t v28 = v25 + v26;
        *(void *)uint64_t v28 = 0;
        *(_WORD *)(v28 + 8) = 0;
        ++v27;
        v26 += 16;
      }
      while (v27 < *(unsigned __int16 *)(a1 + 56));
    }
    heap_Free(*(void **)(v9 + 8), v25);
    *(void *)(a1 + 48) = 0;
  }
  *(_WORD *)(a1 + 56) = 0;
  unsigned int v29 = *(unsigned __int16 *)(a1 + 340);
  if (*(_WORD *)(a1 + 340))
  {
    unint64_t v30 = 0;
    do
    {
      uint64_t v31 = *(void *)(a1 + 344);
      if (v31)
      {
        heap_Free(*(void **)(v9 + 8), *(void *)(v31 + 8 * v30));
        *(void *)(*(void *)(a1 + 344) + 8 * v30) = 0;
        unsigned int v29 = *(unsigned __int16 *)(a1 + 340);
      }
      ++v30;
    }
    while (v30 < v29);
    heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 344));
    *(void *)(a1 + 344) = 0;
    *(_WORD *)(a1 + 340) = 0;
  }
  uint64_t v32 = *(void *)(a1 + 352);
  if (v32)
  {
    heap_Free(*(void **)(v9 + 8), v32);
    *(void *)(a1 + 352) = 0;
  }
  uint64_t v33 = *(void *)(a1 + 360);
  if (v33)
  {
    heap_Free(*(void **)(v9 + 8), v33);
    *(void *)(a1 + 360) = 0;
  }
  if (*(_WORD *)(a1 + 136))
  {
    unint64_t v34 = 0;
    do
    {
      uint64_t v35 = *(void *)(a1 + 152);
      if (v35)
      {
        heap_Free(*(void **)(v9 + 8), *(void *)(v35 + 8 * v34));
        *(void *)(*(void *)(a1 + 152) + 8 * v34) = 0;
      }
      uint64_t v36 = *(void *)(a1 + 160);
      if (v36)
      {
        uint64_t v37 = *(void *)(v36 + 8 * v34);
        if (v37)
        {
          uint64_t v12 = igtree_Deinit(v9, v37, a3, a4, a5, a6, a7, a8);
          if ((v12 & 0x80000000) != 0) {
            return v12;
          }
          heap_Free(*(void **)(v9 + 8), *(void *)(*(void *)(a1 + 160) + 8 * v34));
          *(void *)(*(void *)(a1 + 160) + 8 * v34) = 0;
        }
      }
      uint64_t v38 = *(void *)(a1 + 168);
      if (v38)
      {
        uint64_t v39 = *(void *)(v38 + 8 * v34);
        if (v39)
        {
          if (*(_WORD *)(v39 + 8))
          {
            unint64_t v40 = 0;
            do
            {
              uint64_t v41 = *(void *)v39;
              if (v41)
              {
                heap_Free(*(void **)(v9 + 8), *(void *)(v41 + 8 * v40));
                *(void *)(**(void **)(*(void *)(a1 + 168) + 8 * v34) + 8 * v40) = 0;
                uint64_t v38 = *(void *)(a1 + 168);
              }
              ++v40;
              uint64_t v39 = *(void *)(v38 + 8 * v34);
            }
            while (v40 < *(unsigned __int16 *)(v39 + 8));
          }
          heap_Free(*(void **)(v9 + 8), *(void *)v39);
          uint64_t v42 = *(void *)(a1 + 168);
          **(void **)(v42 + 8 * v34) = 0;
          heap_Free(*(void **)(v9 + 8), *(void *)(v42 + 8 * v34));
          *(void *)(*(void *)(a1 + 168) + 8 * v34) = 0;
        }
      }
      uint64_t v43 = *(void *)(a1 + 176);
      if (v43)
      {
        uint64_t v44 = *(void *)(v43 + 8 * v34);
        if (v44)
        {
          heap_Free(*(void **)(v9 + 8), v44);
          *(void *)(*(void *)(a1 + 176) + 8 * v34) = 0;
        }
      }
      uint64_t v45 = *(void *)(a1 + 184);
      if (v45)
      {
        uint64_t v46 = *(uint64_t **)(v45 + 8 * v34);
        if (v46)
        {
          heap_Free(*(void **)(v9 + 8), *v46);
          uint64_t v47 = *(void *)(a1 + 184);
          **(void **)(v47 + 8 * v34) = 0;
          heap_Free(*(void **)(v9 + 8), *(void *)(v47 + 8 * v34));
          *(void *)(*(void *)(a1 + 184) + 8 * v34) = 0;
        }
      }
      ++v34;
    }
    while (v34 < *(unsigned __int16 *)(a1 + 136));
    heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 144));
    *(void *)(a1 + 144) = 0;
    heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 152));
    *(void *)(a1 + 152) = 0;
    heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 160));
    *(void *)(a1 + 160) = 0;
    heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 168));
    *(void *)(a1 + 168) = 0;
    heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 176));
    *(void *)(a1 + 176) = 0;
    heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 184));
    *(void *)(a1 + 184) = 0;
    *(_WORD *)(a1 + 136) = 0;
  }
  unsigned int v48 = *(unsigned __int16 *)(a1 + 128);
  if (*(_WORD *)(a1 + 128))
  {
    uint64_t v49 = 0;
    unint64_t v50 = 0;
    uint64_t v51 = *(void *)(a1 + 120);
    uint64_t v52 = v51;
    do
    {
      if (v52)
      {
        heap_Free(*(void **)(v9 + 8), *(void *)(v52 + v49));
        unsigned __int16 v53 = (void *)(*(void *)(a1 + 120) + v49);
        *unsigned __int16 v53 = 0;
        heap_Free(*(void **)(v9 + 8), v53[1]);
        uint64_t v51 = *(void *)(a1 + 120);
        *(void *)(v51 + v49 + 8) = 0;
        unsigned int v48 = *(unsigned __int16 *)(a1 + 128);
        uint64_t v52 = v51;
      }
      ++v50;
      v49 += 16;
    }
    while (v50 < v48);
    *(_WORD *)(a1 + 128) = 0;
    heap_Free(*(void **)(v9 + 8), v51);
    *(void *)(a1 + 120) = 0;
  }
  return v12;
}

void *freeRULEREGEXES(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)a2;
    if (v3)
    {
      uint64_t v4 = result;
      if (*(_WORD *)(a2 + 8))
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = *(void *)a2;
          uint64_t v8 = *(void *)(*(void *)a2 + v5);
          if (v8)
          {
            if (*(_WORD *)(v8 + 8))
            {
              heap_Free((void *)v4[1], *(void *)v8);
              *(void *)uint64_t v8 = 0;
              uint64_t v8 = *(void *)(v7 + v5);
            }
            heap_Free((void *)v4[1], v8);
            *(void *)(v7 + v5) = 0;
          }
          uint64_t v9 = v7 + v5;
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10)
          {
            if (*(_WORD *)(v10 + 8))
            {
              heap_Free((void *)v4[1], *(void *)v10);
              *(void *)uint64_t v10 = 0;
              uint64_t v10 = *(void *)(v9 + 8);
            }
            heap_Free((void *)v4[1], v10);
            *(void *)(v9 + 8) = 0;
          }
          uint64_t v11 = *(void *)(v9 + 16);
          if (v11)
          {
            if (*(_WORD *)(v11 + 8))
            {
              heap_Free((void *)v4[1], *(void *)v11);
              *(void *)uint64_t v11 = 0;
              uint64_t v11 = *(void *)(v9 + 16);
            }
            heap_Free((void *)v4[1], v11);
            *(void *)(v9 + 16) = 0;
          }
          ++v6;
          v5 += 24;
        }
        while (v6 < *(unsigned __int16 *)(a2 + 8));
        uint64_t v3 = *(void *)a2;
      }
      uint64_t result = heap_Free((void *)v4[1], v3);
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t statcomp_rules_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a7;
  v246[17] = *MEMORY[0x263EF8340];
  uint64_t v242 = 0;
  unsigned __int8 v241 = 0;
  unsigned int v239 = 0;
  int v240 = 0;
  uint64_t v237 = 0;
  uint64_t v238 = 0;
  memset(v245, 0, sizeof(v245));
  *(void *)a4 = a3;
  *(_WORD *)(a4 + 338) = 5;
  log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"loading StatCOMP rules", a6, a7, a8, 0);
  unsigned int __s = 0;
  memset(v246, 0, 128);
  *(_DWORD *)__s2 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", &__s);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v235 = a1;
  uint64_t v236 = a2;
  uint64_t v16 = __s;
  if (*__s)
  {
    size_t v17 = 0;
    do
    {
      unint64_t v18 = v17;
      __s2[v17] = __tolower(v16[v17]);
      ++v17;
      uint64_t v16 = __s;
      size_t v19 = strlen(__s);
    }
    while (v18 <= 1 && v17 < v19);
  }
  else
  {
    size_t v17 = 0;
  }
  __s2[v17] = 0;
  if (strcmp(v16, __s2))
  {
    uint64_t Str = paramc_ParamSetStr(*(void *)(a3 + 40), (uint64_t)"langcode", __s2);
    if ((Str & 0x80000000) != 0) {
      return Str;
    }
    unsigned int __s = __s2;
  }
  __strcpy_chk();
  __strcat_chk();
  __strcat_chk();
  uint64_t Str = brokeraux_ComposeBrokerString(a3, (const char *)v246, 0, 1, __s, 0, 0, (char *)v245, 0x80uLL);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = brk_DataOpenEx(*(void *)(a3 + 24), (uint64_t)v245, 1, (uint64_t)&v237);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = brk_DataClose(*(void *)(a3 + 24), v237);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = ssftriff_reader_ObjOpen(v235, a2, 0, (const char *)v245, "SCMP", 1031, (uint64_t *)&v242);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v230 = a6;
  uint64_t v228 = a5;
  do
  {
    LODWORD(v27) = ssftriff_reader_OpenChunk((uint64_t)v242, &v240, &v239, &v238, v20, v21, v22, v23);
    if ((v27 & 0x80000000) != 0) {
      break;
    }
    if (v240 ^ 0x47494643 | v241)
    {
      if (!(v240 ^ 0x54455353 | v241))
      {
        unint64_t v34 = v238;
        uint64_t v35 = *v238;
        *(_WORD *)(a4 + 40) = v35;
        uint64_t v36 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * v35) | 1);
        *(void *)(a4 + 32) = v36;
        if (!v36) {
          goto LABEL_130;
        }
        if (*(_WORD *)(a4 + 40))
        {
          uint64_t v41 = 0;
          unint64_t v42 = 0;
          unsigned int v43 = 2;
          do
          {
            *(_DWORD *)(*(void *)(a4 + 32) + v41) = *(_DWORD *)((char *)v34 + v43);
            unsigned int v44 = v43 + 4;
            *(_DWORD *)(*(void *)(a4 + 32) + v41 + 4) = *(_DWORD *)((char *)v34 + v44);
            unsigned int v43 = v44 + 4;
            ++v42;
            v41 += 8;
          }
          while (v42 < *(unsigned __int16 *)(a4 + 40));
        }
        LODWORD(v27) = 0;
        goto LABEL_96;
      }
      if (v240 ^ 0x50414D53 | v241)
      {
        if (v240 ^ 0x4C555243 | v241)
        {
          if (!(v240 ^ 0x58474552 | v241))
          {
            int v78 = v242;
            int v79 = v238;
            v246[0] = v238;
            int v80 = *(_DWORD *)v238;
            *(_DWORD *)(a4 + 216) = *(_DWORD *)v238;
            if (v80)
            {
              uint64_t v81 = (*((_DWORD *)v79 + 1) + 8);
              *(void *)(a4 + 224) = (char *)v79 + v81;
              uint64_t v82 = (v81 + v80);
            }
            else
            {
              uint64_t v82 = 4;
            }
            uint64_t v88 = *(unsigned __int16 *)((char *)v79 + v82);
            *(_WORD *)(a4 + 240) = v88;
            uint64_t v89 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * v88) | 1);
            *(void *)(a4 + 232) = v89;
            if (!v89) {
              goto LABEL_130;
            }
            if (*(_WORD *)(a4 + 240))
            {
              unint64_t v91 = 0;
              unsigned int v92 = v82 + 2;
              do
              {
                *(_DWORD *)(*(void *)(a4 + 232) + 4 * v91) = *(_DWORD *)((char *)v79 + v92);
                v92 += 4;
                ++v91;
              }
              while (v91 < *(unsigned __int16 *)(a4 + 240));
            }
            uint64_t v93 = (uint64_t)v78;
            int v94 = (uint64_t *)(a4 + 248);
            goto LABEL_95;
          }
          if (!(v240 ^ 0x53525453 | v241))
          {
            uint64_t v83 = v242;
            unsigned __int16 v84 = v238;
            v246[0] = v238;
            int v85 = *(_DWORD *)v238;
            *(_DWORD *)(a4 + 296) = *(_DWORD *)v238;
            if (v85)
            {
              uint64_t v86 = (*((_DWORD *)v84 + 1) + 8);
              *(void *)(a4 + 304) = (char *)v84 + v86;
              uint64_t v87 = (v86 + v85);
            }
            else
            {
              uint64_t v87 = 4;
            }
            uint64_t v95 = *(unsigned __int16 *)((char *)v84 + v87);
            *(_WORD *)(a4 + 320) = v95;
            uint64_t v96 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * v95) | 1);
            *(void *)(a4 + 312) = v96;
            if (!v96) {
              goto LABEL_130;
            }
            if (*(_WORD *)(a4 + 320))
            {
              unint64_t v97 = 0;
              unsigned int v98 = v87 + 2;
              do
              {
                *(_DWORD *)(*(void *)(a4 + 312) + 4 * v97) = *(_DWORD *)((char *)v84 + v98);
                v98 += 4;
                ++v97;
              }
              while (v97 < *(unsigned __int16 *)(a4 + 320));
            }
            uint64_t v93 = (uint64_t)v83;
            int v94 = (uint64_t *)(a4 + 328);
            goto LABEL_95;
          }
          if (!(v240 ^ 0x54534552 | v241))
          {
            uint64_t v28 = v242;
            unsigned int v29 = v238;
            v246[0] = v238;
            int v30 = *(_DWORD *)v238;
            *(_DWORD *)(a4 + 256) = *(_DWORD *)v238;
            if (v30)
            {
              uint64_t v31 = (*((_DWORD *)v29 + 1) + 8);
              *(void *)(a4 + 264) = (char *)v29 + v31;
              uint64_t v32 = (v31 + v30);
            }
            else
            {
              uint64_t v32 = 4;
            }
            uint64_t v99 = *(unsigned __int16 *)((char *)v29 + v32);
            *(_WORD *)(a4 + 280) = v99;
            uint64_t v100 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * v99) | 1);
            *(void *)(a4 + 272) = v100;
            if (!v100) {
              goto LABEL_130;
            }
            if (*(_WORD *)(a4 + 280))
            {
              unint64_t v101 = 0;
              unsigned int v102 = v32 + 2;
              do
              {
                *(_DWORD *)(*(void *)(a4 + 272) + 4 * v101) = *(_DWORD *)((char *)v29 + v102);
                v102 += 4;
                ++v101;
              }
              while (v101 < *(unsigned __int16 *)(a4 + 280));
            }
            uint64_t v93 = (uint64_t)v28;
            int v94 = (uint64_t *)(a4 + 288);
LABEL_95:
            uint64_t v27 = ssftriff_reader_DetachChunkData(v93, v94, v246, v90, v37, v38, v39, v40);
            if ((v27 & 0x80000000) != 0) {
              return v27;
            }
          }
        }
        else
        {
          uint64_t v53 = (uint64_t)v238;
          uint64_t v54 = *v238;
          *(_WORD *)(a4 + 72) = v54;
          uint64_t v55 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (120 * v54) | 1);
          *(void *)(a4 + 64) = v55;
          if (!v55) {
            goto LABEL_130;
          }
          if (*(_WORD *)(a4 + 72))
          {
            uint64_t v56 = 0;
            unsigned int v57 = 2;
            do
            {
              uint64_t v58 = 120 * v56;
              *(_DWORD *)(v55 + 120 * v56) = *(_DWORD *)(v53 + v57);
              *(_DWORD *)(*(void *)(a4 + 64) + 120 * v56 + 4) = *(_DWORD *)(v53 + v57 + 4);
              *(_WORD *)(*(void *)(a4 + 64) + 120 * v56 + 16) = *(_WORD *)(v53 + v57 + 8);
              uint64_t v59 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * *(unsigned __int16 *)(*(void *)(a4 + 64) + 120 * v56 + 16)) | 1);
              uint64_t v60 = *(void *)(a4 + 64);
              *(void *)(v60 + 120 * v56 + 8) = v59;
              if (!v59) {
                goto LABEL_130;
              }
              unsigned int v61 = v57 + 10;
              if (*(_WORD *)(v60 + 120 * v56 + 16))
              {
                unint64_t v62 = 0;
                do
                {
                  *(_DWORD *)(*(void *)(v60 + v58 + 8) + 4 * v62) = *(unsigned __int16 *)(v53 + v61);
                  v61 += 2;
                  ++v62;
                  uint64_t v60 = *(void *)(a4 + 64);
                }
                while (v62 < *(unsigned __int16 *)(v60 + v58 + 16));
              }
              LODWORD(v246[0]) = v61;
              uint64_t Str = readRULEREGEXES(*(void *)a4, v53, (unsigned int *)v246, (uint64_t *)(v60 + 120 * v56 + 24));
              if ((Str & 0x80000000) != 0) {
                return Str;
              }
              uint64_t Str = readRULEREGEXES(*(void *)a4, v53, (unsigned int *)v246, (uint64_t *)(*(void *)(a4 + 64) + 120 * v56 + 40));
              if ((Str & 0x80000000) != 0) {
                return Str;
              }
              int v63 = v246[0];
              *(_WORD *)(*(void *)(a4 + 64) + v58 + 64) = *(_WORD *)(v53 + LODWORD(v246[0]));
              uint64_t v64 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(*(void *)(a4 + 64) + v58 + 64)) | 1);
              uint64_t v65 = *(void *)(a4 + 64);
              *(void *)(v65 + v58 + 56) = v64;
              if (!v64) {
                goto LABEL_130;
              }
              if (*(_WORD *)(v65 + 120 * v56 + 64))
              {
                uint64_t v66 = 0;
                unint64_t v67 = 0;
                do
                {
                  *(_DWORD *)(*(void *)(v65 + v58 + 56) + v66) = *(_DWORD *)(v53 + (v63 + v66 + 2));
                  *(_DWORD *)(*(void *)(*(void *)(a4 + 64) + v58 + 56) + v66 + 4) = *(_DWORD *)(v53
                                                                                                  + (v63 + v66 + 6));
                  ++v67;
                  uint64_t v65 = *(void *)(a4 + 64);
                  v66 += 8;
                }
                while (v67 < *(unsigned __int16 *)(v65 + v58 + 64));
                int v68 = v63 + v66 + 2;
              }
              else
              {
                int v68 = v63 + 2;
              }
              LODWORD(v246[0]) = v68;
              uint64_t Str = readRULEREGEXES(*(void *)a4, v53, (unsigned int *)v246, (uint64_t *)(v65 + 120 * v56 + 72));
              if ((Str & 0x80000000) != 0) {
                return Str;
              }
              int v69 = v246[0];
              *(_WORD *)(*(void *)(a4 + 64) + v58 + 96) = *(_WORD *)(v53 + LODWORD(v246[0]));
              uint64_t v70 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(*(void *)(a4 + 64) + v58 + 96)) | 1);
              uint64_t v71 = *(void *)(a4 + 64);
              *(void *)(v71 + v58 + 88) = v70;
              if (!v70) {
                goto LABEL_130;
              }
              if (*(_WORD *)(v71 + 120 * v56 + 96))
              {
                uint64_t v72 = 0;
                unint64_t v73 = 0;
                do
                {
                  *(_DWORD *)(*(void *)(v71 + v58 + 88) + v72) = *(_DWORD *)(v53 + (v69 + v72 + 2));
                  *(_DWORD *)(*(void *)(*(void *)(a4 + 64) + v58 + 88) + v72 + 4) = *(_DWORD *)(v53
                                                                                                  + (v69 + v72 + 6));
                  ++v73;
                  uint64_t v71 = *(void *)(a4 + 64);
                  v72 += 8;
                }
                while (v73 < *(unsigned __int16 *)(v71 + v58 + 96));
                unsigned int v74 = v69 + v72 + 2;
              }
              else
              {
                unsigned int v74 = v69 + 2;
              }
              *(_WORD *)(v71 + v58 + 112) = *(_WORD *)(v53 + v74);
              uint64_t v75 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(*(void *)(a4 + 64) + v58 + 112)) | 1);
              uint64_t v55 = *(void *)(a4 + 64);
              *(void *)(v55 + v58 + 104) = v75;
              if (!v75) {
                goto LABEL_130;
              }
              if (*(_WORD *)(v55 + 120 * v56 + 112))
              {
                uint64_t v76 = 0;
                unint64_t v77 = 0;
                do
                {
                  *(_DWORD *)(*(void *)(v55 + v58 + 104) + v76) = *(_DWORD *)(v53 + v74 + v76 + 2);
                  *(_DWORD *)(*(void *)(*(void *)(a4 + 64) + v58 + 104) + v76 + 4) = *(_DWORD *)(v53 + v74 + v76 + 6);
                  ++v77;
                  uint64_t v55 = *(void *)(a4 + 64);
                  v76 += 8;
                }
                while (v77 < *(unsigned __int16 *)(v55 + v58 + 112));
                unsigned int v57 = v74 + v76 + 2;
              }
              else
              {
                unsigned int v57 = v74 + 2;
              }
              LODWORD(v246[0]) = v57;
            }
            while (++v56 < (unint64_t)*(unsigned __int16 *)(a4 + 72));
          }
          LODWORD(v27) = 0;
        }
      }
      else
      {
        uint64_t v45 = v238;
        uint64_t v46 = *v238;
        *(_WORD *)(a4 + 56) = v46;
        uint64_t v47 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (16 * v46) | 1);
        *(void *)(a4 + 48) = v47;
        if (!v47) {
          goto LABEL_130;
        }
        if (*(_WORD *)(a4 + 56))
        {
          uint64_t v48 = 0;
          unsigned int v49 = 2;
          while (1)
          {
            *(_WORD *)(v47 + 16 * v48 + 8) = *(unsigned __int16 *)((char *)v45 + v49);
            uint64_t v50 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(*(void *)(a4 + 48) + 16 * v48 + 8)) | 1);
            uint64_t v47 = *(void *)(a4 + 48);
            *(void *)(v47 + 16 * v48) = v50;
            if (!v50) {
              break;
            }
            if (*(_WORD *)(v47 + 16 * v48 + 8))
            {
              uint64_t v51 = 0;
              unint64_t v52 = 0;
              do
              {
                *(_DWORD *)(*(void *)(v47 + 16 * v48) + v51) = *(_DWORD *)((char *)v45 + v49 + v51 + 2);
                *(_DWORD *)(*(void *)(*(void *)(a4 + 48) + 16 * v48) + v51 + 4) = *(_DWORD *)((char *)v45
                                                                                                + v49
                                                                                                + v51
                                                                                                + 6);
                ++v52;
                uint64_t v47 = *(void *)(a4 + 48);
                v51 += 8;
              }
              while (v52 < *(unsigned __int16 *)(v47 + 16 * v48 + 8));
              v49 += v51 + 2;
            }
            else
            {
              v49 += 2;
            }
            if (++v48 >= (unint64_t)*(unsigned __int16 *)(a4 + 56)) {
              goto LABEL_42;
            }
          }
LABEL_130:
          uint64_t v27 = 2313166858;
          goto LABEL_131;
        }
LABEL_42:
        LODWORD(v27) = 0;
      }
    }
    else
    {
      LODWORD(v27) = 0;
      uint64_t v33 = v238;
      *(_WORD *)(a4 + 16) = *v238;
      *(_WORD *)(a4 + 18) = v33[1];
      *(_WORD *)(a4 + 20) = v33[2];
    }
LABEL_96:
    int v103 = ssftriff_reader_CloseChunk((uint64_t)v242);
    if (v103 < 0) {
      LODWORD(v27) = v103;
    }
  }
  while ((v27 & 0x80000000) == 0);
  int v104 = v27 & 0x1FFF;
  uint64_t v27 = 2313166858;
  if (v104 == 10) {
    return v27;
  }
  ssftriff_reader_ObjClose(v242, v24, v25, v26, v20, v21, v22, v23);
  uint64_t v242 = 0;
  *(_WORD *)(a4 + 104) = 0;
  *(_DWORD *)(a4 + 22) = 0x10000;
  *(_WORD *)(a4 + 26) = 2;
  *(_WORD *)(a4 + 336) = 0;
  *(_WORD *)(a4 + 88) = 0;
  uint64_t v105 = *(unsigned __int16 *)(a4 + 72);
  if (!*(_WORD *)(a4 + 72))
  {
    unsigned int v123 = 0;
    uint64_t v119 = v230;
    goto LABEL_135;
  }
  uint64_t v224 = v8;
  unsigned __int16 v231 = 0;
  int v233 = 0;
  unsigned int v106 = 0;
  unsigned __int16 v227 = 0;
  int v226 = (unsigned __int16 *)(a4 + 104);
  uint64_t v107 = *(void *)(a4 + 304);
  uint64_t v108 = *(void *)(a4 + 312);
  BOOL v109 = *(unsigned int **)(a4 + 64);
  while (2)
  {
    size_t v110 = strlen((const char *)(v107 + *(unsigned int *)(v108 + 4 * v109[1])));
    if (v110 <= (unsigned __int16)v233) {
      int v111 = v233;
    }
    else {
      int v111 = v110;
    }
    int v233 = v111;
    BOOL v112 = (const char *)(v107 + *(unsigned int *)(v108 + 4 * *v109));
    size_t v113 = strlen(v112);
    if (v113 >= 7)
    {
      unint64_t v115 = v113;
      if (!strncmp(v112, "HYPHEN", 6uLL))
      {
        __int16 v117 = v231 + 1;
        uint64_t v116 = (__int16 *)(a4 + 88);
        ++v231;
LABEL_111:
        *uint64_t v116 = v117;
      }
      else if (v115 >= 9 && !strncmp(v112, "COMPOUND", 8uLL))
      {
        uint64_t v116 = (__int16 *)(a4 + 104);
        __int16 v117 = ++v227;
        goto LABEL_111;
      }
    }
    unsigned int v118 = *((unsigned __int16 *)v109 + 8);
    if (v118 > v106)
    {
      *(_WORD *)(a4 + 336) = v118;
      unsigned int v106 = v118;
      if (v118 >= 0x11)
      {
        log_OutPublic(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 35007, "%s%s", v114, v38, v39, v40, "maximum words");
        return 2313166848;
      }
    }
    v109 += 30;
    if (--v105) {
      continue;
    }
    break;
  }
  uint64_t v119 = v230;
  uint64_t v8 = v224;
  unsigned __int16 v120 = v227;
  if (v231)
  {
    uint64_t v121 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (2 * v231) | 1);
    *(void *)(a4 + 80) = v121;
    if (!v121) {
      goto LABEL_131;
    }
    unsigned __int16 v120 = *v226;
  }
  if (v120)
  {
    uint64_t v122 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (2 * v120) | 1);
    *(void *)(a4 + 96) = v122;
    if (!v122)
    {
LABEL_131:
      uint64_t v136 = *(void *)a4;
      goto LABEL_132;
    }
  }
  unsigned int v123 = *(unsigned __int16 *)(a4 + 72);
  *(_WORD *)(a4 + 88) = 0;
  *(_WORD *)(a4 + 104) = 0;
  if (v123)
  {
    unint64_t v124 = 0;
    uint64_t v125 = *(void *)(a4 + 304);
    uint64_t v126 = *(void *)(a4 + 312);
    uint64_t v127 = *(unsigned int **)(a4 + 64);
    do
    {
      unsigned int v128 = *v127;
      v127 += 30;
      uint64_t v129 = (const char *)(v125 + *(unsigned int *)(v126 + 4 * v128));
      size_t v130 = strlen(v129);
      if (v130 >= 7)
      {
        unint64_t v131 = v130;
        int v132 = strncmp(v129, "HYPHEN", 6uLL);
        int v133 = (void *)(a4 + 80);
        int v134 = (_WORD *)(a4 + 88);
        if (!v132
          || v131 >= 9
          && (v135 = strncmp(v129, "COMPOUND", 8uLL), v133 = (void *)(a4 + 96), int v134 = (_WORD *)(a4 + 104), !v135))
        {
          *(_WORD *)(*v133 + 2 * (unsigned __int16)(*v134)++) = v124;
        }
      }
      ++v124;
    }
    while (v124 < *(unsigned __int16 *)(a4 + 72));
    unsigned int v123 = *v226;
    uint64_t v119 = v230;
  }
  LOWORD(v105) = v233;
LABEL_135:
  log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%d OPEN RULES", v38, v39, v40, v123);
  if (*(_WORD *)(a4 + 104))
  {
    unint64_t v141 = 0;
    do
      log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"label=%s (%d words)", v138, v139, v140, *(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4* *(unsigned int *)(*(void *)(a4 + 64)+ 120 * *(unsigned __int16 *)(*(void *)(a4 + 96) + 2 * v141++))));
    while (v141 < *(unsigned __int16 *)(a4 + 104));
  }
  log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%d HYPHENATED RULES", v138, v139, v140, *(unsigned __int16 *)(a4 + 88));
  if (*(_WORD *)(a4 + 88))
  {
    unint64_t v145 = 0;
    do
      log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"label=%s (%d words)", v142, v143, v144, *(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4* *(unsigned int *)(*(void *)(a4 + 64)+ 120 * *(unsigned __int16 *)(*(void *)(a4 + 80) + 2 * v145++))));
    while (v145 < *(unsigned __int16 *)(a4 + 88));
  }
  v246[0] = 0;
  LOWORD(__s) = -1;
  __s2[0] = 0;
  uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, void *, char **, char *))(v8 + 96))(v228, v119, "fecfg", "compoundabbrendingstrip", v246, &__s, __s2);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  *(_WORD *)(a4 + 340) = 0;
  *(void *)(a4 + 344) = 0;
  if ((unsigned __int16)__s == 1 && v246[0])
  {
    uint64_t v146 = strchr(*(char **)v246[0], 44);
    if (v146)
    {
      int v147 = 0;
      do
      {
        __int16 v148 = v147++;
        *(_WORD *)(a4 + 340) = v147;
        uint64_t v146 = strchr(v146 + 1, 44);
      }
      while (v146);
      unsigned __int16 v149 = v148 + 2;
    }
    else
    {
      unsigned __int16 v149 = 1;
    }
    *(_WORD *)(a4 + 340) = v149;
    uint64_t v150 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * v149) | 1);
    *(void *)(a4 + 344) = v150;
    if (!v150) {
      goto LABEL_131;
    }
    *(_WORD *)(a4 + 340) = 0;
    int v151 = *(char **)v246[0];
    int v152 = strchr(*(char **)v246[0], __s2[0]);
    if (v152)
    {
      *int v152 = 0;
      int v151 = *(char **)v246[0];
    }
    if (v151)
    {
      uint64_t v153 = strchr(v151, 44);
      if (v153)
      {
        uint64_t v154 = v153;
        do
        {
          *uint64_t v154 = 0;
          int v155 = strlen(v151);
          uint64_t v156 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (v155 + 1));
          uint64_t v157 = *(unsigned __int16 *)(a4 + 340);
          *(void *)(*(void *)(a4 + 344) + 8 * v157) = v156;
          uint64_t v158 = *(char **)(*(void *)(a4 + 344) + 8 * v157);
          if (!v158) {
            goto LABEL_131;
          }
          strcpy(v158, v151);
          int v151 = v154 + 1;
          ++*(_WORD *)(a4 + 340);
          uint64_t v154 = strchr(v154 + 1, 44);
        }
        while (v154);
      }
      int v159 = strlen(v151);
      uint64_t v160 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (v159 + 1));
      uint64_t v161 = *(unsigned __int16 *)(a4 + 340);
      *(void *)(*(void *)(a4 + 344) + 8 * v161) = v160;
      int v162 = *(char **)(*(void *)(a4 + 344) + 8 * v161);
      if (!v162) {
        goto LABEL_131;
      }
      strcpy(v162, v151);
      ++*(_WORD *)(a4 + 340);
    }
  }
  if (!(_WORD)v105)
  {
LABEL_163:
    *(_WORD *)(a4 + 136) = 0;
    *(_DWORD *)(a4 + 368) = 0;
    uint64_t v229 = *(unsigned __int16 *)(a4 + 72);
    if (!*(_WORD *)(a4 + 72)) {
      return 0;
    }
    uint64_t v225 = v8;
    int v165 = 0;
    uint64_t v166 = 0;
    unsigned __int16 v167 = 0;
    uint64_t v168 = *(void *)(a4 + 64);
    uint64_t v232 = v168;
    do
    {
      uint64_t v169 = *(unsigned __int16 *)(v168 + 120 * v166 + 64);
      uint64_t v234 = v166;
      if (*(_WORD *)(v168 + 120 * v166 + 64))
      {
        uint64_t v170 = *(void *)(a4 + 304);
        uint64_t v171 = *(void *)(a4 + 312);
        uint64_t v172 = (unsigned int *)(*(void *)(v168 + 120 * v166 + 56) + 4);
        do
        {
          if (!strcmp((const char *)(v170 + *(unsigned int *)(v171 + 4 * *(v172 - 1))), "IGTREE"))
          {
            *(_WORD *)(a4 + 136) = ++v165;
            size_t v173 = strlen((const char *)(v170 + *(unsigned int *)(v171 + 4 * *v172)));
            if (v173 > v167) {
              unsigned __int16 v167 = v173;
            }
          }
          v172 += 2;
          --v169;
        }
        while (v169);
      }
      uint64_t v174 = v232 + 120 * v234;
      uint64_t v175 = *(unsigned __int16 *)(v174 + 96);
      if (*(_WORD *)(v174 + 96))
      {
        uint64_t v176 = *(void *)(a4 + 304);
        uint64_t v177 = *(void *)(a4 + 312);
        unsigned int v178 = (unsigned int *)(*(void *)(v232 + 120 * v234 + 88) + 4);
        do
        {
          if (!strcmp((const char *)(v176 + *(unsigned int *)(v177 + 4 * *(v178 - 1))), "IGTREE"))
          {
            *(_WORD *)(a4 + 136) = ++v165;
            size_t v179 = strlen((const char *)(v176 + *(unsigned int *)(v177 + 4 * *v178)));
            if (v179 > v167) {
              unsigned __int16 v167 = v179;
            }
          }
          v178 += 2;
          --v175;
        }
        while (v175);
      }
      uint64_t v180 = v232 + 120 * v234;
      uint64_t v181 = *(unsigned __int16 *)(v180 + 112);
      if (*(_WORD *)(v180 + 112))
      {
        uint64_t v182 = *(void *)(a4 + 304);
        uint64_t v183 = *(void *)(a4 + 312);
        int v184 = (unsigned int *)(*(void *)(v232 + 120 * v234 + 104) + 4);
        do
        {
          if (!strcmp((const char *)(v182 + *(unsigned int *)(v183 + 4 * *(v184 - 1))), "IGTREE"))
          {
            *(_WORD *)(a4 + 136) = ++v165;
            size_t v185 = strlen((const char *)(v182 + *(unsigned int *)(v183 + 4 * *v184)));
            if (v185 > v167) {
              unsigned __int16 v167 = v185;
            }
          }
          v184 += 2;
          --v181;
        }
        while (v181);
      }
      uint64_t v168 = v232;
      uint64_t v166 = v234 + 1;
    }
    while (v234 + 1 != v229);
    if (!(_WORD)v165) {
      return 0;
    }
    *(_DWORD *)(a4 + 116) = 0;
    *(_DWORD *)(a4 + 112) = 0;
    uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(v225 + 72))(v228, v230, "compounds_feature_map");
    if ((Str & 0x80000000) == 0)
    {
      uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(v225 + 72))(v228, v230, "compounds_feature_key", a4 + 112);
      if ((Str & 0x80000000) == 0)
      {
        uint64_t DctIgtreeMappings = getDctIgtreeMappings((_DWORD *)a4, v228, v230, v225, a4 + 120);
        if ((DctIgtreeMappings & 0x80000000) == 0)
        {
          uint64_t v187 = heap_Calloc(*(void **)(a3 + 8), 1, 20 * *(unsigned __int16 *)(a4 + 136));
          *(void *)(a4 + 144) = v187;
          if (!v187) {
            goto LABEL_243;
          }
          uint64_t v188 = heap_Calloc(*(void **)(a3 + 8), 1, 8 * *(unsigned __int16 *)(a4 + 136));
          *(void *)(a4 + 152) = v188;
          if (!v188) {
            goto LABEL_243;
          }
          LODWORD(v189) = *(unsigned __int16 *)(a4 + 136);
          if (*(_WORD *)(a4 + 136))
          {
            unint64_t v190 = 0;
            do
            {
              *(void *)(*(void *)(a4 + 152) + 8 * v190) = heap_Calloc(*(void **)(a3 + 8), 1, v167 + 1);
              if (!*(void *)(*(void *)(a4 + 152) + 8 * v190)) {
                goto LABEL_243;
              }
              ++v190;
              unint64_t v189 = *(unsigned __int16 *)(a4 + 136);
            }
            while (v190 < v189);
          }
          uint64_t v191 = heap_Calloc(*(void **)(a3 + 8), 1, 8 * v189);
          *(void *)(a4 + 160) = v191;
          if (!v191)
          {
LABEL_243:
            uint64_t v137 = *(void *)(a3 + 32);
            goto LABEL_133;
          }
          if (*(_WORD *)(a4 + 136))
          {
            unint64_t v192 = 0;
            while (1)
            {
              *(void *)(*(void *)(a4 + 160) + 8 * v192) = heap_Calloc(*(void **)(a3 + 8), 1, 1600);
              if (!*(void *)(*(void *)(a4 + 160) + 8 * v192)) {
                goto LABEL_243;
              }
              ++v192;
              unint64_t v193 = *(unsigned __int16 *)(a4 + 136);
              if (v192 >= v193)
              {
                uint64_t v194 = 8 * v193;
                goto LABEL_204;
              }
            }
          }
          uint64_t v194 = 0;
LABEL_204:
          uint64_t v196 = heap_Calloc(*(void **)(a3 + 8), 1, v194);
          *(void *)(a4 + 168) = v196;
          if (!v196) {
            goto LABEL_243;
          }
          if (*(_WORD *)(a4 + 136))
          {
            unint64_t v197 = 0;
            while (1)
            {
              *(void *)(*(void *)(a4 + 168) + 8 * v197) = heap_Calloc(*(void **)(a3 + 8), 1, 16);
              if (!*(void *)(*(void *)(a4 + 168) + 8 * v197)) {
                goto LABEL_243;
              }
              ++v197;
              unint64_t v198 = *(unsigned __int16 *)(a4 + 136);
              if (v197 >= v198)
              {
                uint64_t v199 = 8 * v198;
                goto LABEL_211;
              }
            }
          }
          uint64_t v199 = 0;
LABEL_211:
          uint64_t v200 = heap_Calloc(*(void **)(a3 + 8), 1, v199);
          *(void *)(a4 + 176) = v200;
          if (!v200) {
            goto LABEL_243;
          }
          uint64_t v201 = heap_Calloc(*(void **)(a3 + 8), 1, 8 * *(unsigned __int16 *)(a4 + 136));
          *(void *)(a4 + 184) = v201;
          if (!v201) {
            goto LABEL_243;
          }
          LODWORD(v202) = *(unsigned __int16 *)(a4 + 136);
          if (*(_WORD *)(a4 + 136))
          {
            unint64_t v203 = 0;
            do
            {
              *(void *)(*(void *)(a4 + 184) + 8 * v203) = heap_Calloc(*(void **)(a3 + 8), 1, 8);
              if (!*(void *)(*(void *)(a4 + 184) + 8 * v203)) {
                goto LABEL_243;
              }
              ++v203;
              unint64_t v202 = *(unsigned __int16 *)(a4 + 136);
            }
            while (v203 < v202);
          }
          if (*(_WORD *)(a4 + 72))
          {
            unint64_t v204 = 0;
            int v205 = 0;
            uint64_t v206 = *(void *)(a4 + 64);
            do
            {
              if (*(_WORD *)(v206 + 120 * v204 + 64))
              {
                uint64_t v207 = 0;
                unint64_t v208 = 0;
                do
                {
                  uint64_t v210 = *(void *)(a4 + 304);
                  uint64_t v209 = *(void *)(a4 + 312);
                  uint64_t v211 = *(void *)(v206 + 120 * v204 + 56);
                  if (!strcmp((const char *)(v210 + *(unsigned int *)(v209 + 4 * *(unsigned int *)(v211 + v207))), "IGTREE"))
                  {
                    uint64_t DctIgtreeMappings = setIGTreeInfo(v235, v236, (uint64_t *)a4, (unsigned __int16)v205, (char *)(v210+ *(unsigned int *)(v209 + 4 * *(unsigned int *)(v211 + v207 + 4))), v228, v230, v225);
                    if ((DctIgtreeMappings & 0x80000000) != 0) {
                      return DctIgtreeMappings;
                    }
                    ++v205;
                    uint64_t v206 = *(void *)(a4 + 64);
                  }
                  ++v208;
                  v207 += 8;
                }
                while (v208 < *(unsigned __int16 *)(v206 + 120 * v204 + 64));
              }
              if (*(_WORD *)(v206 + 120 * v204 + 96))
              {
                uint64_t v212 = 0;
                unint64_t v213 = 0;
                do
                {
                  uint64_t v215 = *(void *)(a4 + 304);
                  uint64_t v214 = *(void *)(a4 + 312);
                  uint64_t v216 = *(void *)(v206 + 120 * v204 + 88);
                  if (!strcmp((const char *)(v215 + *(unsigned int *)(v214 + 4 * *(unsigned int *)(v216 + v212))), "IGTREE"))
                  {
                    uint64_t DctIgtreeMappings = setIGTreeInfo(v235, v236, (uint64_t *)a4, (unsigned __int16)v205, (char *)(v215+ *(unsigned int *)(v214 + 4 * *(unsigned int *)(v216 + v212 + 4))), v228, v230, v225);
                    if ((DctIgtreeMappings & 0x80000000) != 0) {
                      return DctIgtreeMappings;
                    }
                    ++v205;
                    uint64_t v206 = *(void *)(a4 + 64);
                  }
                  ++v213;
                  v212 += 8;
                }
                while (v213 < *(unsigned __int16 *)(v206 + 120 * v204 + 96));
              }
              if (*(_WORD *)(v206 + 120 * v204 + 112))
              {
                uint64_t v217 = 0;
                unint64_t v218 = 0;
                do
                {
                  uint64_t v220 = *(void *)(a4 + 304);
                  uint64_t v219 = *(void *)(a4 + 312);
                  uint64_t v221 = *(void *)(v206 + 120 * v204 + 104);
                  if (!strcmp((const char *)(v220 + *(unsigned int *)(v219 + 4 * *(unsigned int *)(v221 + v217))), "IGTREE"))
                  {
                    uint64_t DctIgtreeMappings = setIGTreeInfo(v235, v236, (uint64_t *)a4, (unsigned __int16)v205, (char *)(v220+ *(unsigned int *)(v219 + 4 * *(unsigned int *)(v221 + v217 + 4))), v228, v230, v225);
                    if ((DctIgtreeMappings & 0x80000000) != 0) {
                      return DctIgtreeMappings;
                    }
                    ++v205;
                    uint64_t v206 = *(void *)(a4 + 64);
                  }
                  ++v218;
                  v217 += 8;
                }
                while (v218 < *(unsigned __int16 *)(v206 + 120 * v204 + 112));
              }
              ++v204;
            }
            while (v204 < *(unsigned __int16 *)(a4 + 72));
            LODWORD(v202) = *(unsigned __int16 *)(a4 + 136);
          }
          if (v202)
          {
            int v222 = 0;
            do
              setIGTreeWord2Nindex((char *)a4, (unsigned __int16)v222++);
            while (*(unsigned __int16 *)(a4 + 136) > (unsigned __int16)v222);
          }
        }
        return DctIgtreeMappings;
      }
    }
    return Str;
  }
  uint64_t v163 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (unsigned __int16)v105 + 11);
  *(void *)(a4 + 352) = v163;
  uint64_t v136 = *(void *)a4;
  if (v163)
  {
    uint64_t v164 = heap_Calloc(*(void **)(v136 + 8), 1, (unsigned __int16)v105 + 11);
    *(void *)(a4 + 360) = v164;
    if (!v164) {
      goto LABEL_131;
    }
    goto LABEL_163;
  }
LABEL_132:
  uint64_t v137 = *(void *)(v136 + 32);
LABEL_133:
  log_OutPublic(v137, (uint64_t)"FE_POS", 35000, 0, v37, v38, v39, v40, v223);
  return v27;
}

uint64_t getDctIgtreeMappings(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = 0;
  __int16 v36 = -1;
  if (a1[92] == 1 || !a1[29]) {
    return 0;
  }
  char v35 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a4 + 96))(a2, a3, "compounds_feature_map", "numMappings", &v37, &v36, &v35);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  if (v36 != 1 || v37 == 0)
  {
    unsigned __int16 v14 = *(_WORD *)(a5 + 8);
  }
  else
  {
    unsigned __int16 v14 = atoi(*v37);
    *(_WORD *)(a5 + 8) = v14;
  }
  uint64_t v15 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (16 * v14) | 1);
  *(void *)a5 = v15;
  if (!v15)
  {
LABEL_26:
    uint64_t v12 = 2313166858;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 35000, 0, v16, v17, v18, v19, v34);
    return v12;
  }
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      LH_itoa(v21, (char *)&v34 + 1, 0xAu);
      __int16 v36 = -1;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, const char ***, __int16 *, char *))(a4 + 96))(a2, a3, "compounds_feature_map", (char *)&v34 + 1, &v37, &v36, &v35);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
      BOOL v26 = v36 != 1 || v37 == 0;
      if (v26 || (uint64_t v27 = *v37, (v28 = strchr((char *)*v37, 43)) == 0))
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 35005, 0, v22, v23, v24, v25, v34);
        return 2313166848;
      }
      unsigned int v29 = v28;
      char *v28 = 0;
      int v30 = strlen(v27);
      uint64_t v31 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v30 + 1));
      *(void *)(*(void *)a5 + v20 + 8) = v31;
      if (!v31) {
        goto LABEL_26;
      }
      strcpy(v31, v27);
      int v32 = strlen(v29 + 1);
      uint64_t v33 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v32 + 1));
      *(void *)(*(void *)a5 + v20) = v33;
      if (!v33) {
        goto LABEL_26;
      }
      strcpy(v33, v29 + 1);
      ++v21;
      v20 += 16;
    }
    while (v21 < *(unsigned __int16 *)(a5 + 8));
  }
  uint64_t v12 = 0;
  a1[92] = 1;
  return v12;
}

uint64_t setIGTreeInfo(_WORD *a1, uint64_t a2, uint64_t *a3, unsigned int a4, char *__src, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v54[17] = *MEMORY[0x263EF8340];
  uint64_t v8 = 2313166855;
  memset(&__c[1], 0, 256);
  if (a3)
  {
    uint64_t v10 = a3[19];
    if (v10)
    {
      *(void *)uint64_t v51 = 0;
      uint64_t v12 = *(char **)(v10 + 8 * a4);
      if (v12)
      {
        strcpy(v12, __src);
        uint64_t v18 = *a3;
        *(void *)unint64_t v52 = 0;
        memset(v54, 0, 128);
        uint64_t Str = paramc_ParamGetStr(*(void *)(v18 + 40), (uint64_t)"langcode", v52);
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        __strcat_chk();
        __strcat_chk();
        uint64_t Str = brokeraux_ComposeBrokerString(v18, (const char *)v54, 1, 1, *(char **)v52, 0, 0, &__c[1], 0x100uLL);
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        if ((ssftriff_reader_ObjOpen(a1, a2, 2, &__c[1], "IGTR", 1031, (uint64_t *)v51) & 0x80000000) != 0)
        {
          log_OutPublic(*(void *)(*a3 + 32), (uint64_t)"FE_POS", 35004, 0, v20, v21, v22, v23, v49);
          return 2313166848;
        }
        uint64_t Str = igtree_Init(a1, a2, *(uint64_t *)v51, *(char **)(a3[20] + 8 * a4));
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        uint64_t Str = ssftriff_reader_ObjClose(*(void **)v51, v24, v25, v26, v27, v28, v29, v30);
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        uint64_t v31 = *(void *)(a3[21] + 8 * a4);
        v54[0] = 0;
        LOWORD(v52[0]) = -1;
        if (*((_DWORD *)a3 + 28))
        {
          __c[0] = 0;
          uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, void *, int *, unsigned char *))(a8 + 96))(a6, a7, "compounds_feature_key", __src, v54, v52, __c);
          if ((Str & 0x80000000) != 0) {
            return Str;
          }
          if (LOWORD(v52[0]) == 1 && v54[0])
          {
            int v32 = *(char **)v54[0];
            uint64_t v33 = strchr(*(char **)v54[0], __c[0]);
            unsigned int v34 = v33;
            if (v33) {
              *uint64_t v33 = 0;
            }
            unsigned __int16 v35 = atoi(v32);
            *(_WORD *)(v31 + 8) = v35;
            uint64_t v36 = heap_Calloc(*(void **)(*a3 + 8), 1, (8 * v35) | 1u);
            *(void *)uint64_t v31 = v36;
            if (!v36)
            {
LABEL_33:
              log_OutPublic(*(void *)(*a3 + 32), (uint64_t)"FE_POS", 35000, 0, v37, v38, v39, v40, v49);
              return 2313166858;
            }
            if (*(_WORD *)(v31 + 8))
            {
              unint64_t v41 = 0;
              if (v34) {
                int v32 = v34 + 1;
              }
              do
              {
                unint64_t v42 = strchr(v32, __c[0]);
                unsigned int v43 = v42;
                if (v42) {
                  *unint64_t v42 = 0;
                }
                int v44 = strlen(v32);
                *(void *)(*(void *)v31 + 8 * v41) = heap_Calloc(*(void **)(*a3 + 8), 1, (v44 + 1));
                uint64_t v45 = *(char **)(*(void *)v31 + 8 * v41);
                if (!v45) {
                  goto LABEL_33;
                }
                strcpy(v45, v32);
                ++v41;
                unint64_t v46 = *(unsigned __int16 *)(v31 + 8);
                if (v41 != v46 && v43 != 0) {
                  int v32 = v43 + 1;
                }
              }
              while (v41 < v46);
            }
          }
        }
        *(void *)(a3[22] + 8 * a4) = heap_Calloc(*(void **)(*a3 + 8), 1, (2 * *(unsigned __int16 *)(*(void *)(a3[21] + 8 * a4) + 8)) | 1);
        if (!*(void *)(a3[22] + 8 * a4)) {
          return 2313166858;
        }
        return setIgtreeFVLookups((uint64_t)a3, *(uint64_t **)(a3[23] + 8 * a4), a4);
      }
    }
  }
  return v8;
}

char *setIGTreeWord2Nindex(char *result, unsigned int a2)
{
  uint64_t v2 = *((unsigned __int16 *)result + 20);
  if (*((_WORD *)result + 20))
  {
    uint64_t v3 = result;
    uint64_t v4 = *((void *)result + 38);
    uint64_t v5 = *((void *)result + 39);
    uint64_t v6 = a2;
    for (uint64_t i = (unsigned int *)(*((void *)result + 4) + 4); ; i += 2)
    {
      uint64_t v8 = (const char *)(v4 + *(unsigned int *)(v5 + 4 * *(i - 1)));
      uint64_t result = (char *)strncmp(v8, "IGTREE_", 7uLL);
      if (!result)
      {
        uint64_t result = (char *)strcmp(v8 + 7, *(const char **)(*((void *)v3 + 19) + 8 * v6));
        if (!result) {
          break;
        }
      }
      if (!--v2) {
        return result;
      }
    }
    uint64_t v9 = (char *)(v4 + *(unsigned int *)(v5 + 4 * *i));
    uint64_t result = strchr(v9, 95);
    unint64_t v10 = (unint64_t)result;
    if (result)
    {
      int v11 = 0;
      do
      {
        *(unsigned char *)unint64_t v10 = 0;
        unsigned __int16 v12 = v11 + 1;
        *(_WORD *)(*((void *)v3 + 18) + 20 * v6 + 2 * (unsigned __int16)v11) = atoi(v9);
        uint64_t v9 = (char *)(v10 + 1);
        uint64_t result = strchr((char *)(v10 + 1), 95);
        unint64_t v10 = (unint64_t)result;
        ++v11;
      }
      while (result);
      unint64_t v10 = v12;
    }
    if (*v9)
    {
      uint64_t result = (char *)atoi(v9);
      *(_WORD *)(*((void *)v3 + 18) + 20 * v6 + 2 * v10) = (_WORD)result;
    }
  }
  return result;
}

uint64_t statcomp_add2Str(uint64_t a1, const char **a2, _WORD *a3, char *__s)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = (unsigned __int16)*a3;
  unint64_t v10 = (char *)*a2;
  size_t v11 = strlen(*a2);
  if (v8 >= v9 - v11)
  {
    if ((unsigned __int16)(v8 - v9 + v11) <= 0x80u) {
      uint64_t v12 = 128;
    }
    else {
      uint64_t v12 = (unsigned __int16)(v8 - v9 + v11);
    }
    uint64_t v13 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v10, v9 + v12 + 1);
    if (!v13)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v14, v15, v16, v17, v19);
      return 2313166858;
    }
    unint64_t v10 = (char *)v13;
    *a2 = (const char *)v13;
    *a3 += v12;
  }
  if (*v10) {
    strcat(v10, __s);
  }
  else {
    strcpy(v10, __s);
  }
  return 0;
}

uint64_t matchSTATCOMPCONTEXT_TRule(uint64_t a1, const char **a2, _WORD *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned int *a8, int *a9, _WORD *a10, unsigned int a11)
{
  size_t v11 = a7;
  uint64_t v12 = a6;
  uint64_t v14 = a9;
  uint64_t v54 = *MEMORY[0x263EF8340];
  *a9 = 0;
  *(unsigned int *)((char *)a8 + 6) = 0;
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t v20 = logSTATCOMPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, a7);
    if ((v20 & 0x80000000) != 0) {
      return v20;
    }
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"         %s %s", v17, v18, v19, a1);
    **a2 = 0;
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (!*((_WORD *)v11 + 4))
  {
    int v43 = 1;
    goto LABEL_75;
  }
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v23 = a11;
  uint64_t v24 = a8;
  uint64_t v50 = v12;
  uint64_t v51 = v11;
  while (1)
  {
    uint64_t v25 = *v11;
    int v26 = *((unsigned __int16 *)v24 + 2);
    if (*(_WORD *)(a5 + 8))
    {
      uint64_t v27 = v12;
      uint64_t v28 = v23;
      log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           regex %d", a6, (uint64_t)a7, (uint64_t)a8, *(unsigned __int16 *)(v25 + v21 + 2));
      int v29 = *(unsigned char *)(v25 + v21 + 4) & 1;
      if (*(unsigned __int16 *)(a5 + 8) >= 2u)
      {
        int v30 = *(unsigned char *)(v25 + v21 + 4) & 1;
        log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           ruleDef[domain=%s(%d) wordIdx=%d left_window=%d right_window=%d] defMapIdx=%s(%d) bNegateMatch=%d", a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)STATCOMPDOMAIN2STRING[*a8]);
        int v29 = v30;
      }
      uint64_t v23 = v28;
      uint64_t v12 = v27;
      uint64_t v24 = a8;
    }
    else
    {
      int v29 = *(unsigned char *)(v25 + v21 + 4) & 1;
    }
    if (*v24 == 2)
    {
      int v31 = *(unsigned __int16 *)(v25 + v21);
      if (v31 == 2)
      {
        int v32 = v29;
        uint64_t v33 = *(char **)(v12 + 40);
        if (!v33)
        {
          unsigned int v34 = "           ERROR : no TOK string to match";
          goto LABEL_48;
        }
      }
      else if (v31 == 1)
      {
        int v32 = v29;
        uint64_t v33 = *(char **)(v12 + 32);
        if (!v33) {
          goto LABEL_47;
        }
      }
      else
      {
        if (*(_WORD *)(v25 + v21))
        {
LABEL_25:
          if (!*(_WORD *)(a5 + 8))
          {
            uint64_t v20 = 0;
            if (!v29) {
              goto LABEL_66;
            }
            goto LABEL_54;
          }
          int v32 = v29;
          log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           NULL STR FOUND - no match", a6, (uint64_t)a7, (uint64_t)a8, 0);
          goto LABEL_49;
        }
        int v32 = v29;
        uint64_t v33 = *(char **)(v12 + 24);
        if (!v33)
        {
          unsigned int v34 = "           ERROR : no ORT string to match";
          goto LABEL_48;
        }
      }
    }
    else
    {
      if (*v24 != 1) {
        goto LABEL_25;
      }
      if (v23)
      {
        if (v23 == 2)
        {
          if (v26 + *((unsigned __int16 *)v24 + 4) + 1 >= *(unsigned __int16 *)(v12 + 8)) {
            goto LABEL_67;
          }
        }
        else if (v23 != 1 || ~*((unsigned __int16 *)v24 + 3) + v26 < 0)
        {
LABEL_67:
          uint64_t v20 = 0;
          if (!*(_WORD *)(a5 + 8)) {
            goto LABEL_73;
          }
          int v44 = "           context not found. rule not applicable. RETURN LH_FALSE";
          goto LABEL_72;
        }
      }
      uint64_t v33 = *(char **)(*(void *)v12 + 96 * *((unsigned __int16 *)v24 + 2) + 32);
      if (!v33)
      {
        int v32 = v29;
LABEL_47:
        unsigned int v34 = "           ERROR : no POS string to match";
LABEL_48:
        log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v34, a6, (uint64_t)a7, (uint64_t)a8, 0);
LABEL_49:
        uint64_t v20 = 0;
        goto LABEL_50;
      }
      int v32 = v29;
      unsigned int v34 = "           ERROR : expected POS(idx) rule";
      if (*(unsigned __int16 *)(v25 + v21) != *(unsigned __int16 *)(a5 + 24)) {
        goto LABEL_48;
      }
    }
    if (*(_WORD *)(a5 + 8)) {
      log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           STR=\"%s\"", a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)v33);
    }
    unsigned __int16 v35 = strlen(v33);
    if (!v35)
    {
      log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"invalid arg for regex", v36, v37, v38, 0);
      return 2313166855;
    }
    unsigned int v39 = nuance_pcre_exec(*(void **)(a5 + 200), *(void *)(a5 + 208), *(void *)(a5 + 224)+ *(unsigned int *)(*(void *)(a5 + 232) + 4 * *(unsigned __int16 *)(v25 + v21 + 2)), 0, v33, v35, 0, 0, v53, 30);
    if ((v39 & 0x80000000) == 0) {
      break;
    }
    uint64_t v41 = nuance_pcre_ErrorToLhError(v39);
    uint64_t v20 = v41;
    if (v41 >> 20 == 2213)
    {
      if ((v41 & 0x1FFF) != 0x14)
      {
        if ((v41 & 0x1FFF) == 0xA)
        {
          uint64_t v46 = *(void *)(*(void *)a5 + 32);
          uint64_t v47 = 11002;
          uint64_t v48 = 0;
        }
        else
        {
          uint64_t v46 = *(void *)(*(void *)a5 + 32);
          unsigned int v49 = "lhError";
          uint64_t v48 = "%s%x";
          uint64_t v47 = 11027;
        }
        log_OutPublic(v46, (uint64_t)"FE_POS", v47, v48, v42, a6, (uint64_t)a7, (uint64_t)a8, v49);
        return v20;
      }
      goto LABEL_60;
    }
    uint64_t v12 = v50;
    size_t v11 = v51;
    if ((v41 & 0x80000000) != 0) {
      return v20;
    }
LABEL_50:
    if (*(_WORD *)(a5 + 8))
    {
      log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           REGEX FAILED", a6, (uint64_t)a7, (uint64_t)a8, 0);
      if (!v32)
      {
        int v43 = *(unsigned __int16 *)(a5 + 8);
        if (!*(_WORD *)(a5 + 8)) {
          goto LABEL_74;
        }
        int v44 = "           return LH_FALSE";
LABEL_72:
        uint64_t v14 = a9;
        log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v44, a6, (uint64_t)a7, (uint64_t)a8, 0);
        int v43 = 0;
        goto LABEL_75;
      }
    }
    else if (!v32)
    {
LABEL_66:
      int v43 = 0;
      goto LABEL_74;
    }
LABEL_54:
    *a10 = *(_WORD *)(v25 + v21 + 2);
    uint64_t v40 = "           negate match - return LH_TRUE";
    if (*(_WORD *)(a5 + 8)) {
      goto LABEL_55;
    }
LABEL_56:
    ++v22;
    v21 += 6;
    if (v22 >= *((unsigned __int16 *)v11 + 4))
    {
      int v43 = 1;
      goto LABEL_74;
    }
  }
  if (!v39)
  {
LABEL_60:
    uint64_t v20 = 0;
    uint64_t v12 = v50;
    size_t v11 = v51;
    goto LABEL_50;
  }
  if (*(_WORD *)(a5 + 8)) {
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           REGEX FIRED", a6, (uint64_t)a7, (uint64_t)a8, 0);
  }
  size_t v11 = v51;
  uint64_t v20 = 0;
  if (!v32)
  {
    *a10 = *(_WORD *)(v25 + v21 + 2);
    uint64_t v40 = "           return LH_TRUE";
    uint64_t v12 = v50;
    if (!*(_WORD *)(a5 + 8)) {
      goto LABEL_56;
    }
LABEL_55:
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v40, a6, (uint64_t)a7, (uint64_t)a8, 0);
    goto LABEL_56;
  }
  if (*(_WORD *)(a5 + 8))
  {
    int v44 = "           negate match - return LH_FALSE";
    goto LABEL_72;
  }
LABEL_73:
  int v43 = 0;
LABEL_74:
  uint64_t v14 = a9;
LABEL_75:
  *uint64_t v14 = v43;
  return v20;
}

uint64_t logSTATCOMPCONTEXT_TRule(const char **a1, _WORD *a2, char *__s, uint64_t *a4, uint64_t *a5)
{
  if (!*((_WORD *)a5 + 4)) {
    return 0;
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *a5;
    uint64_t v13 = (unsigned __int16 *)(*a5 + v10);
    if (*((unsigned char *)v13 + 4))
    {
      if (v13[2]) {
        *(_WORD *)unsigned int __s = 33;
      }
      uint64_t result = statcomp_add2Str(*a4, a1, a2, __s);
      if ((result & 0x80000000) != 0) {
        break;
      }
    }
    uint64_t result = statcomp_add2Str(*a4, a1, a2, "[");
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t result = statcomp_add2Str(*a4, a1, a2, (char *)(a4[38] + *(unsigned int *)(a4[39] + 4 * *v13)));
    if ((result & 0x80000000) != 0) {
      break;
    }
    sprintf(__s, " %d(", *(unsigned __int16 *)(v12 + v10 + 2));
    uint64_t result = statcomp_add2Str(*a4, a1, a2, __s);
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t result = statcomp_add2Str(*a4, a1, a2, (char *)(a4[33] + *(unsigned int *)(a4[34] + 4 * *(unsigned __int16 *)(v12 + v10 + 2))));
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t result = statcomp_add2Str(*a4, a1, a2, ")] ");
    if ((result & 0x80000000) != 0) {
      break;
    }
    ++v11;
    v10 += 6;
    if (v11 >= *((unsigned __int16 *)a5 + 4)) {
      return 0;
    }
  }
  return result;
}

uint64_t statcomp_matchRule(int a1, const char **a2, _WORD *a3, char *__s, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8, int *a9)
{
  int v25 = 1;
  if (*(_WORD *)(a5 + 8))
  {
    if (!a1) {
      goto LABEL_14;
    }
    if (*(void *)a8)
    {
      uint64_t v16 = logSTATCOMPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, *(uint64_t **)a8);
      if ((v16 & 0x80000000) != 0) {
        return v16;
      }
    }
    *(_DWORD *)unsigned int __s = 2121504;
    uint64_t v16 = statcomp_add2Str(*(void *)a5, a2, a3, __s);
    if ((v16 & 0x80000000) != 0) {
      return v16;
    }
    uint64_t v17 = *(uint64_t **)(a8 + 8);
    if (v17)
    {
      uint64_t v16 = logSTATCOMPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, v17);
      if ((v16 & 0x80000000) != 0) {
        return v16;
      }
    }
    *(_DWORD *)unsigned int __s = 2121504;
    uint64_t v16 = statcomp_add2Str(*(void *)a5, a2, a3, __s);
    if ((v16 & 0x80000000) != 0) {
      return v16;
    }
    uint64_t v18 = *(uint64_t **)(a8 + 16);
    if (v18)
    {
      uint64_t matched = logSTATCOMPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, v18);
      if ((matched & 0x80000000) != 0) {
        return matched;
      }
    }
    else
    {
LABEL_14:
      uint64_t matched = 0;
    }
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"       <%s>", a6, (uint64_t)a7, a8, (uint64_t)*a2);
    **a2 = 0;
  }
  else
  {
    uint64_t matched = 0;
  }
  *a9 = 0;
  if (*(void *)a8)
  {
    uint64_t matched = matchSTATCOMPCONTEXT_TRule((uint64_t)"LEFT", a2, a3, __s, a5, a6, *(uint64_t **)a8, a7, &v25, &v24, 1u);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v20 = v25;
    if (v25 != 1) {
      goto LABEL_26;
    }
  }
  uint64_t v21 = *(uint64_t **)(a8 + 8);
  if (v21)
  {
    int v25 = 0;
    uint64_t matched = matchSTATCOMPCONTEXT_TRule((uint64_t)"CUR", a2, a3, __s, a5, a6, v21, a7, &v25, &v24, 0);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v20 = v25;
    if (v25 != 1)
    {
LABEL_26:
      *a9 = v20;
      return matched;
    }
  }
  unint64_t v22 = *(uint64_t **)(a8 + 16);
  if (!v22)
  {
    int v20 = 1;
    goto LABEL_26;
  }
  int v25 = 0;
  uint64_t matched = matchSTATCOMPCONTEXT_TRule((uint64_t)"RIGHT", a2, a3, __s, a5, a6, v22, a7, &v25, &v24, 2u);
  if ((matched & 0x80000000) == 0)
  {
    int v20 = v25;
    goto LABEL_26;
  }
  return matched;
}

uint64_t readRULEREGEXES(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v8 = *(unsigned __int16 *)(a2 + *a3);
  *((_WORD *)a4 + 4) = v8;
  *a3 += 2;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), 1, (24 * v8) | 1);
  *a4 = v9;
  if (v9)
  {
    uint64_t v14 = 0;
    uint64_t v15 = -1;
    while (++v15 < (unint64_t)*((unsigned __int16 *)a4 + 4))
    {
      uint64_t v16 = *a4;
      uint64_t v17 = (uint64_t *)(*a4 + v14);
      uint64_t result = readCONTEXT_0(a1, a2, a3, v17);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = readCONTEXT_0(a1, a2, a3, v17 + 1);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = readCONTEXT_0(a1, a2, a3, (uint64_t *)(v16 + v14 + 16));
          v14 += 24;
          if ((result & 0x80000000) == 0) {
            continue;
          }
        }
      }
      return result;
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v10, v11, v12, v13, v19);
    return 2313166858;
  }
}

uint64_t readCONTEXT_0(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(unsigned __int16 *)(a2 + v4);
  *a3 = v4 + 2;
  if (!v5) {
    return 0;
  }
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), 1, 17);
  if (!v10)
  {
    uint64_t v23 = 2313166858;
LABEL_11:
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v25);
    return v23;
  }
  uint64_t v15 = v10;
  *(_WORD *)(v10 + 8) = v5;
  uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), 1, (6 * v5) | 1);
  *(void *)uint64_t v15 = v16;
  if (!v16)
  {
    uint64_t v23 = 2313166858;
    heap_Free(*(void **)(a1 + 8), v15);
    goto LABEL_11;
  }
  if (*(_WORD *)(v15 + 8))
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    unsigned int v19 = *a3;
    do
    {
      *(_WORD *)(v16 + v17) = *(_WORD *)(a2 + v19);
      unsigned int v20 = *a3 + 2;
      *a3 = v20;
      *(_WORD *)(*(void *)v15 + v17 + 2) = *(_WORD *)(a2 + v20);
      unsigned int v21 = *a3;
      unsigned int v22 = *a3 + 2;
      *a3 = v22;
      LOBYTE(v22) = *(unsigned char *)(a2 + v22);
      unsigned int v19 = v21 + 4;
      *a3 = v19;
      uint64_t v16 = *(void *)v15;
      *(unsigned char *)(*(void *)v15 + v17 + 4) = v22;
      ++v18;
      v17 += 6;
    }
    while (v18 < *(unsigned __int16 *)(v15 + 8));
  }
  uint64_t v23 = 0;
  *a4 = v15;
  return v23;
}

uint64_t setIgtreeFVLookups(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 160) + 8 * a3);
  uint64_t v7 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 12 * *(unsigned __int8 *)(v6 + 1296) - 11);
  *a2 = v7;
  if (!v7)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 35000, 0, v8, v9, v10, v11, v24);
    return 2313166858;
  }
  if (*(unsigned __int8 *)(v6 + 1296) < 2u) {
    return 0;
  }
  uint64_t v12 = v7;
  uint64_t v13 = 0;
  int v25 = 0;
  while (1)
  {
    uint64_t v14 = *(char **)(*(void *)(v6 + 1312) + 8 * v13);
    if (!strncmp(v14, "N1_", 3uLL))
    {
      __int16 v15 = 1;
    }
    else if (!strncmp(v14, "N2_", 3uLL))
    {
      __int16 v15 = 2;
    }
    else
    {
      __int16 v15 = 3;
      if (strncmp(v14, "N3_", 3uLL))
      {
        if (!strncmp(v14, "N4_", 3uLL))
        {
          __int16 v15 = 4;
        }
        else if (!strncmp(v14, "N5_", 3uLL))
        {
          __int16 v15 = 5;
        }
        else if (!strncmp(v14, "N6_", 3uLL))
        {
          __int16 v15 = 6;
        }
        else if (!strncmp(v14, "N7_", 3uLL))
        {
          __int16 v15 = 7;
        }
        else if (!strncmp(v14, "N8_", 3uLL))
        {
          __int16 v15 = 8;
        }
        else if (!strncmp(v14, "N9_", 3uLL))
        {
          __int16 v15 = 9;
        }
        else
        {
          if (strncmp(v14, "N10_", 4uLL)) {
            goto LABEL_24;
          }
          __int16 v15 = 10;
        }
      }
    }
    *(_WORD *)(v12 + 12 * v13) = v15;
LABEL_24:
    if (statcomp_isDynamicFeature(v14, (_WORD *)&v25 + 1) != 1) {
      break;
    }
    uint64_t v12 = *a2;
    *(_DWORD *)(*a2 + 12 * v13 + 4) = 0;
LABEL_31:
    *(_WORD *)(v12 + 12 * v13++ + 8) = HIWORD(v25);
    if (*(unsigned __int8 *)(v6 + 1296) - 1 <= (unsigned __int16)v13) {
      return 0;
    }
  }
  if (statcomp_isDctFeature(*(char **)(*(void *)(v6 + 1312) + 8 * v13), (_WORD *)&v25 + 1, *(uint64_t **)(*(void *)(a1 + 168) + 8 * a3)) == 1)
  {
    uint64_t v12 = *a2;
    *(_DWORD *)(*a2 + 12 * v13 + 4) = 1;
    goto LABEL_31;
  }
  if (statcomp_isDctMappedFeature(*(char **)(*(void *)(v6 + 1312) + 8 * v13), &v25, (unsigned __int16 *)(a1 + 120)) != 1)
  {
    uint64_t v20 = 2313166848;
    uint64_t v21 = *(void *)(*(void *)a1 + 32);
    unsigned int v22 = "featurename";
    goto LABEL_36;
  }
  *(_DWORD *)(*a2 + 12 * v13 + 4) = 2;
  if (statcomp_isDctFeature(*(char **)(*(void *)(a1 + 120) + 16 * (unsigned __int16)v25), (_WORD *)&v25 + 1, *(uint64_t **)(*(void *)(a1 + 168) + 8 * a3)) == 1)
  {
    uint64_t v12 = *a2;
    goto LABEL_31;
  }
  uint64_t v20 = 2313166848;
  uint64_t v21 = *(void *)(*(void *)a1 + 32);
  unsigned int v22 = "featurename (mapped)";
LABEL_36:
  log_OutPublic(v21, (uint64_t)"FE_POS", 35006, "%s%s", v16, v17, v18, v19, v22);
  return v20;
}

uint64_t statpos_igtrees_getBrkStrs(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  *(void *)uint64_t v9 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v9);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = brokeraux_ComposeBrokerString(a1, "OOVigtree", 1, 1, *(char **)v9, 0, 0, a2, a4);
    if ((result & 0x80000000) == 0) {
      return brokeraux_ComposeBrokerString(a1, "KNOWNigtree", 1, 1, *(char **)v9, 0, 0, a3, a4);
    }
  }
  return result;
}

uint64_t statpos_igtrees_load(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t *a5)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v40 = 0;
  uint64_t BrkStrs = statpos_igtrees_getBrkStrs(a3, v42, v41, 0x100uLL);
  if ((BrkStrs & 0x80000000) != 0) {
    return BrkStrs;
  }
  *a5 = 0;
  uint64_t v11 = heap_Calloc(*(void **)(a3 + 8), 1, 536);
  if (!v11)
  {
    uint64_t v36 = 2313166858;
    uint64_t v37 = *(void *)(a3 + 32);
    uint64_t v21 = 0;
LABEL_16:
    log_OutPublic(v37, (uint64_t)"FE_POS", 35000, v21, v12, v13, v14, v15, v39);
    return v36;
  }
  uint64_t v16 = v11;
  strcpy((char *)(v11 + 24), a4);
  if ((ssftriff_reader_ObjOpen(a1, a2, 2, v41, "IGTR", 1031, (uint64_t *)v40) & 0x80000000) != 0)
  {
    *(void *)(v16 + 8) = 0;
    log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_POS", 63000, "%s%x", v17, v18, v19, v20, "treename:");
    return 2313166848;
  }
  uint64_t v21 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
  *(void *)(v16 + 8) = v21;
  if (!v21)
  {
LABEL_15:
    uint64_t v36 = 2313166858;
    uint64_t v37 = *(void *)(a3 + 32);
    goto LABEL_16;
  }
  uint64_t BrkStrs = igtree_Init(a1, a2, *(uint64_t *)v40, v21);
  if ((BrkStrs & 0x80000000) != 0) {
    return BrkStrs;
  }
  uint64_t BrkStrs = ssftriff_reader_ObjClose(*(void **)v40, v22, v23, v24, v25, v26, v27, v28);
  if ((BrkStrs & 0x80000000) != 0) {
    return BrkStrs;
  }
  if ((ssftriff_reader_ObjOpen(a1, a2, 2, v42, "IGTR", 1031, (uint64_t *)v40) & 0x80000000) == 0)
  {
    uint64_t v21 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
    *(void *)uint64_t v16 = v21;
    if (v21)
    {
      uint64_t BrkStrs = igtree_Init(a1, a2, *(uint64_t *)v40, v21);
      if ((BrkStrs & 0x80000000) == 0)
      {
        uint64_t v36 = ssftriff_reader_ObjClose(*(void **)v40, v29, v30, v31, v32, v33, v34, v35);
        if ((v36 & 0x80000000) != 0) {
          return v36;
        }
        goto LABEL_19;
      }
      return BrkStrs;
    }
    goto LABEL_15;
  }
  uint64_t v36 = 0;
  *(void *)uint64_t v16 = 0;
  *(_DWORD *)(v16 + 16) = 1;
LABEL_19:
  if (*(void *)(v16 + 8) || *(void *)v16) {
    *(_DWORD *)(v16 + 20) = 1;
  }
  *a5 = v16;
  return v36;
}

uint64_t statpos_igtrees_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v11);
  if ((result & 0x80000000) == 0) {
    return statpos_igtrees_unload(v11, *(uint64_t **)(a3 + 32), v5, v6, v7, v8, v9, v10);
  }
  return result;
}

uint64_t statpos_igtrees_unload(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *a2;
  if (v10)
  {
    uint64_t v11 = igtree_Deinit(a1, v10, a3, a4, a5, a6, a7, a8);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    heap_Free(*(void **)(a1 + 8), *a2);
    *a2 = 0;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = a2[1];
  if (!v12)
  {
LABEL_8:
    heap_Free(*(void **)(a1 + 8), (uint64_t)a2);
    return v11;
  }
  uint64_t v11 = igtree_Deinit(a1, v12, a3, a4, a5, a6, a7, a8);
  if ((v11 & 0x80000000) == 0)
  {
    heap_Free(*(void **)(a1 + 8), a2[1]);
    a2[1] = 0;
    goto LABEL_8;
  }
  return v11;
}

uint64_t statpos_igtrees_ObjcLoad(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v12);
  if ((result & 0x80000000) == 0)
  {
    memcpy(v11, v12, sizeof(v11));
    *(_OWORD *)&v11[32] = *(_OWORD *)(a5 + 32);
    return statpos_igtrees_load(a1, a2, (uint64_t)v11, a3, (uint64_t *)(a4 + 32));
  }
  return result;
}

uint64_t statpos_igtrees_label(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  unsigned int __s = 0;
  unsigned __int16 v8 = *(unsigned __int8 *)(*(void *)(a4 + 8) + 1296) - 1;
  if (!*(_DWORD *)(a4 + 16) && *(unsigned __int8 *)(*(void *)a4 + 1296) - 1 > v8) {
    unsigned __int16 v8 = *(unsigned __int8 *)(*(void *)a4 + 1296) - 1;
  }
  HIDWORD(v61) = 0;
  uint64_t v9 = statpos_fv_new(a1, v8, &v60);
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t inited = v9;
LABEL_44:
    crf_mde_seg_fv_dealloc((void *)a1, (uint64_t)&v60);
    return inited;
  }
  uint64_t v10 = (uint64_t *)heap_Calloc(*(void **)(a1 + 8), 1, 8 * v8);
  if (!v10)
  {
    uint64_t inited = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v56);
    goto LABEL_44;
  }
  uint64_t v15 = v10;
  uint64_t inited = initFeatureVector(a1, v10, v8);
  if ((inited & 0x80000000) == 0 && *(_WORD *)(a3 + 8))
  {
    unint64_t v21 = 0;
    unsigned int v57 = (_WORD *)(a3 + 96);
    uint64_t v58 = (const char **)(a3 + 80);
    uint64_t v22 = 112;
    do
    {
      if (*(_DWORD *)(a2 + 188) == 1)
      {
        if (*(_DWORD *)(a4 + 16) == 1 || !*(_DWORD *)(*(void *)a3 + v22 - 104))
        {
          uint64_t features = statpos_get_features(a1, a3, a2, (unsigned __int16)v21, *(void *)(*(void *)(a4 + 8) + 1312), (*(unsigned char *)(*(void *)(a4 + 8) + 1296) - 1), &v60, *(void *)(a4 + 8));
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t features = statpos_get_features_for_igtree(a1, (uint64_t)v15, (uint64_t)&v60);
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t v24 = *(void *)(a4 + 8);
        }
        else
        {
          uint64_t features = statpos_get_features(a1, a3, a2, (unsigned __int16)v21, *(void *)(*(void *)a4 + 1312), (*(unsigned char *)(*(void *)a4 + 1296) - 1), &v60, *(void *)a4);
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t features = statpos_get_features_for_igtree(a1, (uint64_t)v15, (uint64_t)&v60);
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t v24 = *(void *)a4;
        }
        uint64_t inited = igtree_Process(v24, (uint64_t)v15, &__s);
        if ((inited & 0x80000000) != 0) {
          break;
        }
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Disambiguate OOV Word[%d] %s %s -> %s", v38, v39, v40, v21);
        unsigned __int16 v41 = strlen(__s);
        uint64_t v42 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v41 + 1);
        *(void *)(*(void *)a3 + v22 - 24) = v42;
        if (!v42)
        {
LABEL_46:
          uint64_t inited = 2313166858;
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v30, v31, v32, v33, v56);
          break;
        }
        strcpy(v42, __s);
      }
      else
      {
        uint64_t v25 = *(void *)a3;
        int v26 = *(_DWORD *)(*(void *)a3 + v22 - 104);
        if (v26 == 1)
        {
          if (*(_DWORD *)(a4 + 16))
          {
LABEL_28:
            uint64_t features = statpos_get_features(a1, a3, a2, (unsigned __int16)v21, *(void *)(*(void *)(a4 + 8) + 1312), (*(unsigned char *)(*(void *)(a4 + 8) + 1296) - 1), &v60, *(void *)(a4 + 8));
            if ((features & 0x80000000) != 0) {
              goto LABEL_45;
            }
            uint64_t features = statpos_get_features_for_igtree(a1, (uint64_t)v15, (uint64_t)&v60);
            if ((features & 0x80000000) != 0) {
              goto LABEL_45;
            }
            uint64_t features = igtree_Process(*(void *)(a4 + 8), (uint64_t)v15, &__s);
            if ((features & 0x80000000) != 0) {
              goto LABEL_45;
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Disambiguate Word[%d] %s %s -> %s", v43, v44, v45, v21);
            uint64_t v46 = __s;
            int v47 = checkPOSIsLegal(__s, (unsigned __int16)v21, (void *)a3, a2);
            uint64_t features = statpos_dumpFeatureVectorAndResult(a1, *(_DWORD *)(a3 + 100), v58, v57, "KNOWNWORD", **(char ***)(*(void *)a3 + v22 - 64), *(void *)(a4 + 8), &v60, v46, v47, *(char **)(*(void *)(*(void *)a3 + v22 - 64) + 24), *(char **)(*(void *)a3 + v22));
          }
          else
          {
            uint64_t features = statpos_get_features(a1, a3, a2, (unsigned __int16)v21, *(void *)(*(void *)a4 + 1312), (*(unsigned char *)(*(void *)a4 + 1296) - 1), &v60, *(void *)a4);
            if ((features & 0x80000000) != 0
              || (uint64_t features = statpos_get_features_for_igtree(a1, (uint64_t)v15, (uint64_t)&v60),
                  (features & 0x80000000) != 0)
              || (uint64_t features = igtree_Process(*(void *)a4, (uint64_t)v15, &__s), (features & 0x80000000) != 0))
            {
LABEL_45:
              uint64_t inited = features;
              break;
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Disambiguate OOV Word[%d] %s %s -> %s", v50, v51, v52, v21);
            uint64_t v53 = __s;
            int v54 = checkPOSIsLegal(__s, (unsigned __int16)v21, (void *)a3, a2);
            uint64_t features = statpos_dumpFeatureVectorAndResult(a1, *(_DWORD *)(a3 + 100), v58, v57, "OOVWORD", **(char ***)(*(void *)a3 + v22 - 64), *(void *)a4, &v60, v53, v54, *(char **)(*(void *)(*(void *)a3 + v22 - 64) + 24), *(char **)(*(void *)a3 + v22));
          }
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          unsigned __int16 v48 = strlen(__s);
          unsigned int v49 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v48 + 1);
          *(void *)(*(void *)a3 + v22 - 24) = v49;
          if (!v49) {
            goto LABEL_46;
          }
          strcpy(v49, __s);
          uint64_t inited = statpos_fv_clear((uint64_t)&v60);
          if ((inited & 0x80000000) != 0) {
            break;
          }
          clearFeatureVector((_WORD **)v15, v8);
          goto LABEL_36;
        }
        if (v26 || *(unsigned __int16 *)(v25 + v22 - 40) > 1u) {
          goto LABEL_28;
        }
        uint64_t v27 = *(const char **)(v25 + v22 - 32);
        if (!v27)
        {
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35008, "%s%s", v16, v17, v18, v19, "word=");
          return 2313166848;
        }
        unsigned __int16 v28 = strlen(v27);
        uint64_t v29 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v28 + 1);
        uint64_t v34 = *(void *)a3 + v22;
        *(void *)(v34 - 24) = v29;
        if (!v29) {
          goto LABEL_46;
        }
        strcpy(v29, *(const char **)(v34 - 32));
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Skip disambiguation on Word[%d] %s %s", v35, v36, v37, v21);
      }
LABEL_36:
      ++v21;
      v22 += 160;
    }
    while (v21 < *(unsigned __int16 *)(a3 + 8));
  }
  crf_mde_seg_fv_dealloc((void *)a1, (uint64_t)&v60);
  freeFeatureVector((void *)a1, v15, v8);
  heap_Free(*(void **)(a1 + 8), (uint64_t)v15);
  return inited;
}

uint64_t checkPOSIsLegal(char *__s1, unsigned int a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *a3 + 160 * a2;
  uint64_t v5 = *(unsigned __int16 *)(v4 + 72);
  if (!*(_WORD *)(v4 + 72)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a4 + 296);
  uint64_t v8 = *(void *)(a4 + 304);
  uint64_t v9 = *(unsigned int **)(*a3 + 160 * a2 + 64);
  while (1)
  {
    unsigned int v10 = *v9;
    v9 += 6;
    if (!strcmp(__s1, (const char *)(v7 + *(unsigned int *)(v8 + 4 * v10)))) {
      break;
    }
    if (!--v5) {
      return 0;
    }
  }
  return 1;
}

uint64_t com_useStatHmogrphMosyntOff(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, const char *a5)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "stathmogrph_fepos_mosyntoff", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      a5 = **(const char ***)&__c[3];
      uint64_t v11 = strchr(**(char ***)&__c[3], __c[0]);
      if (v11)
      {
        *uint64_t v11 = 0;
        a5 = **(const char ***)&__c[3];
      }
    }
    BOOL v12 = !strcmp(a5, "yes") || strcmp(a5, "YES") == 0;
    *a4 = v12;
    *(_WORD *)&__c[1] = -1;
    int v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "statwordhmogrph_step", &__c[3], &__c[1], __c);
    uint64_t result = 0;
    if ((v13 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1)
    {
      uint64_t result = 0;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t checkUsePKUPOS(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "mosynt_usepkupos", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    int v6 = *(unsigned __int16 *)&__c[1];
    if (*(_WORD *)&__c[1])
    {
      uint64_t v7 = **(const char ***)&__c[3];
      uint64_t v8 = strchr(**(char ***)&__c[3], __c[0]);
      if (v8)
      {
        *uint64_t v8 = 0;
        uint64_t v7 = **(const char ***)&__c[3];
      }
      int v6 = !strcmp(v7, "yes") || strcmp(v7, "YES") == 0;
    }
    uint64_t result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t checkReplaceAsterisk(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "statpos_replaceasterisk", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    int v6 = *(unsigned __int16 *)&__c[1];
    if (*(_WORD *)&__c[1])
    {
      uint64_t v7 = **(const char ***)&__c[3];
      uint64_t v8 = strchr(**(char ***)&__c[3], __c[0]);
      if (v8)
      {
        *uint64_t v8 = 0;
        uint64_t v7 = **(const char ***)&__c[3];
      }
      int v6 = strcmp(v7, "1") == 0;
    }
    uint64_t result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t fe_pos_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Str = 2313166855;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int __s1 = &byte_20D5A22AE;
  uint64_t v33 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v36);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v12 = heap_Calloc(*(void **)(v36 + 8), 1, 2240);
      uint64_t v17 = v36;
      if (v12)
      {
        uint64_t v18 = v12;
        uint64_t v19 = (void *)heap_Calloc(*(void **)(v36 + 8), 1, 1040);
        *(void *)(v18 + 48) = v19;
        if (v19)
        {
          *uint64_t v19 = a3;
          v19[1] = a4;
          *(void *)uint64_t v18 = v36;
          *(void *)(v18 + 8) = a3;
          *(void *)(v18 + 32) = a1;
          *(void *)(v18 + 40) = a2;
          *(void *)(v18 + 16) = a4;
          *(void *)(v18 + 24) = a1;
          uint64_t Object = objc_GetObject(*(void *)(v36 + 48), (uint64_t)"LINGDB", &v35);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          *(void *)(v18 + 56) = *(void *)(v35 + 8);
          uint64_t Object = objc_GetObject(*(void *)(v36 + 48), (uint64_t)"FE_DEPES", &v34);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          uint64_t v21 = v34;
          *(void *)(v18 + 80) = *(void *)(v34 + 8);
          *(_OWORD *)(v18 + 64) = *(_OWORD *)(v21 + 16);
          uint64_t Object = objc_GetObject(*(void *)(v36 + 48), (uint64_t)"FE_DCTLKP", &v33);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          uint64_t v22 = v33;
          uint64_t v23 = *(void *)(v33 + 8);
          *(void *)(v18 + 128) = v23;
          *(_OWORD *)(v18 + 112) = *(_OWORD *)(v22 + 16);
          *(_DWORD *)(v18 + 180) = 0;
          uint64_t Object = statpos_checkIfActive(*(void *)(v18 + 112), *(void *)(v18 + 120), v23, a3, a4, v36, (_DWORD *)(v18 + 200), (_DWORD *)(v18 + 176), (int *)(v18 + 192), (_DWORD *)(v18 + 2232), (_DWORD *)(v18 + 2236));
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          uint64_t Object = com_useStatHmogrphMosyntOff(*(void *)(v18 + 128), *(void *)(v18 + 112), *(void *)(v18 + 120), (BOOL *)(v18 + 188), "no");
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          int v24 = *(_DWORD *)(v18 + 176);
          if (*(_DWORD *)(v18 + 1616) == 1)
          {
            if (!v24) {
              *(void *)(v18 + 176) = 0x100000001;
            }
          }
          else if (!v24)
          {
LABEL_19:
            uint64_t Object = statphr_readIGTree(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), v36, (void *)(v18 + 1728), (_DWORD *)(v18 + 1720));
            if ((Object & 0x80000000) == 0)
            {
              int v26 = (_DWORD *)(v18 + 1736);
              *(_DWORD *)(v18 + 1736) = 0;
              uint64_t Object = statcomp_useStatCOMP(*(void *)(v18 + 112), *(void *)(v18 + 120), *(void *)(v18 + 128), (_DWORD *)(v18 + 1736));
              if ((Object & 0x80000000) == 0)
              {
                if (*v26 != 1) {
                  goto LABEL_25;
                }
                *(void *)(v18 + 1744) = v36;
                *(_OWORD *)(v18 + 2128) = *(_OWORD *)(v18 + 112);
                *(void *)(v18 + 2144) = *(void *)(v18 + 128);
                *(void *)(v18 + 1952) = 0;
                *(_DWORD *)(v18 + 1960) = 0;
                uint64_t Object = nuance_pcre_ObjOpen(a3, a4, v18 + 1952);
                if ((Object & 0x80000000) == 0)
                {
                  uint64_t Object = nuance_pcre_Init(*(void **)(v18 + 1952), *(void *)(v18 + 1960), 0x1Eu, 50);
                  if ((Object & 0x80000000) == 0)
                  {
                    uint64_t Object = statcomp_rules_load(a3, a4, v36, v18 + 1752, *(void *)(v18 + 112), *(void *)(v18 + 120), *(void *)(v18 + 128), v27);
                    if ((Object & 0x80000000) == 0)
                    {
LABEL_25:
                      uint64_t Object = checkUsePKUPOS(*(void *)(v18 + 128), *(void *)(v18 + 112), *(void *)(v18 + 120), (_DWORD *)(v18 + 184));
                      if ((Object & 0x80000000) == 0)
                      {
                        *(void *)(v18 + 136) = 0;
                        unsigned __int16 v28 = (_DWORD *)(v18 + 136);
                        *(void *)(v18 + 144) = 0;
                        uint64_t Str = paramc_ParamGetStr(*(void *)(v36 + 40), (uint64_t)"fecfg", &__s1);
                        if ((Str & 0x80000000) != 0) {
                          goto LABEL_41;
                        }
                        if (!strcmp(__s1, "cfg4")) {
                          *(_DWORD *)(v18 + 148) = 1;
                        }
                        if (*v26 || *(_DWORD *)(v18 + 184)) {
                          goto LABEL_31;
                        }
                        uint64_t Object = wgram_CheckIfExists(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), (_DWORD *)(v18 + 144));
                        if ((Object & 0x80000000) == 0)
                        {
                          uint64_t Str = sgram_CheckIfExists(a3, a4, (_DWORD *)(v18 + 140));
                          if ((Str & 0x80000000) != 0) {
                            goto LABEL_41;
                          }
                          if (!*(_DWORD *)(v18 + 140))
                          {
                            _DWORD *v28 = 0;
LABEL_34:
                            *(void *)(v18 + 88) = 0;
                            *(void *)(v18 + 96) = 0;
                            int v29 = 62341;
                            *(void *)(v18 + 104) = 0;
LABEL_42:
                            *(void *)a5 = v18;
                            *(_DWORD *)(a5 + 8) = v29;
                            return Str;
                          }
                          uint64_t Str = com_mosynt_UseMosynt(*(void *)(v18 + 112), *(void *)(v18 + 120), *(void *)(v18 + 128), (BOOL *)(v18 + 136));
                          if ((Str & 0x80000000) != 0)
                          {
LABEL_41:
                            fe_pos_ObjClose(*(uint64_t **)a5, *(void *)(a5 + 8));
                            uint64_t v18 = 0;
                            int v29 = 0;
                            goto LABEL_42;
                          }
LABEL_31:
                          if (!*v28) {
                            goto LABEL_34;
                          }
                          if (*(_DWORD *)(v18 + 188)) {
                            goto LABEL_34;
                          }
                          uint64_t Str = fe_pos_LoadMosyntData(a3, a4, v18);
                          if ((Str & 0x80000000) == 0) {
                            goto LABEL_34;
                          }
                          goto LABEL_41;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_40:
            uint64_t Str = Object;
            goto LABEL_41;
          }
          int v25 = *(_DWORD *)(v18 + 192);
          *(_DWORD *)(v18 + 1636) = *(_DWORD *)(v18 + 188);
          uint64_t Object = statpos_load_resources(*(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), *(_WORD **)(v18 + 8), *(void *)(v18 + 16), *(_WORD **)(v18 + 32), *(void *)(v18 + 40), v36, *(void *)(v18 + 24), *(_OWORD *)(v18 + 112), *(void *)(v18 + 128), v18 + 200, *(_DWORD *)(v18 + 180), (_DWORD *)(v18 + 176), v25);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          uint64_t Object = checkReplaceAsterisk(*(void *)(v18 + 128), *(void *)(v18 + 112), *(void *)(v18 + 120), (_DWORD *)(v18 + 1640));
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          goto LABEL_19;
        }
        uint64_t v17 = v36;
      }
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"FE_POS", 35000, 0, v13, v14, v15, v16, v31);
      uint64_t Str = 2313166858;
      goto LABEL_41;
    }
    return inited;
  }
  return Str;
}

uint64_t fe_pos_LoadMosyntData(_WORD *a1, uint64_t a2, uint64_t a3)
{
  int __s1 = 0;
  uint64_t result = com_mosynt_GetCfgParamVal(*(void *)(a3 + 112), *(void *)(a3 + 120), *(void *)(a3 + 128), (uint64_t)"mosynt_enablegraphsymcache", "yes", &__s1);
  if ((result & 0x80000000) == 0)
  {
    BOOL v7 = strcmp(__s1, "yes") == 0;
    uint64_t result = kbsymtab_LoadData(a1, a2, *(_WORD **)(a3 + 32), *(void *)(a3 + 40), (uint64_t *)(a3 + 152), v7);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = fst_LoadData(a1, a2, (uint64_t *)(a3 + 168));
      if ((result & 0x80000000) == 0) {
        return sgram_LoadData(a1, a2, (uint64_t *)(a3 + 160));
      }
    }
  }
  return result;
}

uint64_t fe_pos_ObjClose(uint64_t *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62341, 2240);
  if ((result & 0x80000000) != 0) {
    return 2313166856;
  }
  if (a1)
  {
    if (*((_DWORD *)a1 + 44)) {
      statpos_unload_resources((_WORD *)a1[4], a1[5], *a1, (uint64_t)(a1 + 25), *((unsigned int *)a1 + 45), *((unsigned int *)a1 + 48), v9, v10);
    }
    if (*((_DWORD *)a1 + 434))
    {
      statcomp_rules_unload((uint64_t)(a1 + 219), v4, v5, v6, v7, v8, v9, v10);
      uint64_t NullHandle = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(a1[244], a1[245], NullHandle, v12))
      {
        nuance_pcre_DeInit((void *)a1[244], a1[245]);
        nuance_pcre_ObjClose(a1[244], a1[245]);
      }
    }
    if (*((_DWORD *)a1 + 430)) {
      statphr_freeIGTree(*a1, a1[3], a1[216]);
    }
    fe_pos_UnloadMosyntData((uint64_t)a1);
    if (a1[7]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"LINGDB");
    }
    if (a1[10]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DEPES");
    }
    if (a1[16]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    }
    uint64_t v13 = a1[6];
    if (v13) {
      heap_Free(*(void **)(*a1 + 8), v13);
    }
    heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t fe_pos_UnloadMosyntData(uint64_t a1)
{
  if (*(void *)(a1 + 152))
  {
    int v2 = kbsymtab_UnloadData(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 152));
    *(void *)(a1 + 152) = 0;
    uint64_t v3 = v2 & (v2 >> 31);
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (*(void *)(a1 + 160))
  {
    int v4 = sgram_UnloadData(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), (uint64_t *)(a1 + 160));
    *(void *)(a1 + 160) = 0;
    if (v4 >= 0 || (int)v3 <= -1) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = v4;
    }
  }
  if (*(void *)(a1 + 168))
  {
    int v6 = fst_UnloadData(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), (uint64_t *)(a1 + 168));
    *(void *)(a1 + 168) = 0;
    if (v6 >= 0 || (int)v3 <= -1) {
      return v3;
    }
    else {
      return v6;
    }
  }
  return v3;
}

uint64_t fe_pos_ObjReopen(void *a1, int a2)
{
  uint64_t v3 = 2313166854;
  int __s1 = &byte_20D5A22AE;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62341, 2240) & 0x80000000) != 0) {
    return 2313166856;
  }
  if (a1)
  {
    if (*((_DWORD *)a1 + 44) == 1)
    {
      uint64_t IGTree = statpos_unload_resources((_WORD *)a1[4], a1[5], *a1, (uint64_t)(a1 + 25), *((unsigned int *)a1 + 45), *((unsigned int *)a1 + 48), v4, v5);
      if ((IGTree & 0x80000000) != 0) {
        return IGTree;
      }
    }
    *((_DWORD *)a1 + 45) = 0;
    uint64_t IGTree = statpos_checkIfActive(a1[14], a1[15], a1[16], (_WORD *)a1[1], a1[2], *a1, (_DWORD *)a1 + 50, (_DWORD *)a1 + 44, (int *)a1 + 48, (_DWORD *)a1 + 558, (_DWORD *)a1 + 559);
    if ((IGTree & 0x80000000) != 0) {
      return IGTree;
    }
    uint64_t IGTree = com_useStatHmogrphMosyntOff(a1[16], a1[14], a1[15], (BOOL *)a1 + 47, "no");
    if ((IGTree & 0x80000000) != 0) {
      return IGTree;
    }
    int v14 = *((_DWORD *)a1 + 44);
    if (*((_DWORD *)a1 + 404) != 1 || v14)
    {
      if (v14 != 1)
      {
LABEL_15:
        if (*((_DWORD *)a1 + 434) == 1)
        {
          uint64_t IGTree = statcomp_rules_unload((uint64_t)(a1 + 219), v7, v8, v9, v10, v11, v12, v13);
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
          uint64_t NullHandle = safeh_GetNullHandle();
          if (!safeh_HandlesEqual(a1[244], a1[245], NullHandle, v18))
          {
            nuance_pcre_DeInit((void *)a1[244], a1[245]);
            nuance_pcre_ObjClose(a1[244], a1[245]);
          }
        }
        uint64_t v19 = a1 + 217;
        *((_DWORD *)a1 + 434) = 0;
        uint64_t IGTree = statcomp_useStatCOMP(a1[14], a1[15], a1[16], (_DWORD *)a1 + 434);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        if (*v19 == 1)
        {
          uint64_t v20 = (_WORD *)a1[1];
          a1[218] = *a1;
          *((_OWORD *)a1 + 133) = *((_OWORD *)a1 + 7);
          a1[268] = a1[16];
          a1[244] = 0;
          *((_DWORD *)a1 + 490) = 0;
          uint64_t IGTree = nuance_pcre_ObjOpen(v20, a1[2], (uint64_t)(a1 + 244));
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
          uint64_t IGTree = nuance_pcre_Init((void *)a1[244], a1[245], 0x1Eu, 50);
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
          uint64_t IGTree = statcomp_rules_load((_WORD *)a1[1], a1[2], *a1, (uint64_t)(a1 + 219), a1[14], a1[15], a1[16], v21);
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
        }
        if (*((_DWORD *)a1 + 430) == 1) {
          statphr_freeIGTree(*a1, a1[3], a1[216]);
        }
        *((_DWORD *)a1 + 430) = 0;
        uint64_t IGTree = statphr_readIGTree((_WORD *)a1[1], a1[2], (_WORD *)a1[4], a1[5], *a1, a1 + 216, (_DWORD *)a1 + 430);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        uint64_t IGTree = fe_pos_UnloadMosyntData((uint64_t)a1);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        a1[17] = 0;
        uint64_t v22 = a1 + 17;
        a1[18] = 0;
        uint64_t IGTree = paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"fecfg", &__s1);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        if (!strcmp(__s1, "cfg4")) {
          *((_DWORD *)a1 + 37) = 1;
        }
        uint64_t IGTree = checkUsePKUPOS(a1[16], a1[14], a1[15], (_DWORD *)a1 + 46);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        if (*v19 || *((_DWORD *)a1 + 46))
        {
          uint64_t v3 = 0;
        }
        else
        {
          uint64_t IGTree = wgram_CheckIfExists((_WORD *)a1[1], a1[2], (_WORD *)a1[4], a1[5], (_DWORD *)a1 + 36);
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
          uint64_t v3 = sgram_CheckIfExists((_WORD *)a1[1], a1[2], (_DWORD *)a1 + 35);
          if ((v3 & 0x80000000) != 0) {
            return v3;
          }
          if (!*((_DWORD *)a1 + 35))
          {
            *uint64_t v22 = 0;
            return v3;
          }
          uint64_t v3 = com_mosynt_UseMosynt(a1[14], a1[15], a1[16], (BOOL *)a1 + 34);
          if ((v3 & 0x80000000) != 0) {
            return v3;
          }
        }
        if (*v22) {
          return fe_pos_LoadMosyntData((_WORD *)a1[1], a1[2], (uint64_t)a1);
        }
        return v3;
      }
      int v15 = *((_DWORD *)a1 + 45);
    }
    else
    {
      a1[22] = 0x100000001;
      int v15 = 1;
    }
    int v16 = *((_DWORD *)a1 + 48);
    *((_DWORD *)a1 + 409) = *((_DWORD *)a1 + 47);
    uint64_t IGTree = statpos_load_resources(a1[8], a1[9], a1[10], (_WORD *)a1[1], a1[2], (_WORD *)a1[4], a1[5], *a1, a1[3], *((_OWORD *)a1 + 7), a1[16], (uint64_t)(a1 + 25), v15, (_DWORD *)a1 + 44, v16);
    if ((IGTree & 0x80000000) != 0) {
      return IGTree;
    }
    uint64_t IGTree = checkReplaceAsterisk(a1[16], a1[14], a1[15], (_DWORD *)a1 + 410);
    if ((IGTree & 0x80000000) != 0) {
      return IGTree;
    }
    goto LABEL_15;
  }
  return v3;
}

uint64_t fe_pos_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62341, 2240);
  if ((result & 0x80000000) != 0) {
    return 2313166856;
  }
  if (*(_DWORD *)(a1 + 176)) {
    uint64_t result = statpos_setParams(*(void *)a1, a1 + 208);
  }
  if (*(_DWORD *)(a1 + 1736))
  {
    uint64_t v4 = *(void *)a1;
    return statcomp_setParams(v4, a1 + 1752);
  }
  return result;
}

uint64_t fe_Process_UserCOMPMarkup(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62341, 2240);
  if ((result & 0x80000000) != 0) {
    return 2313166856;
  }
  *a5 = 1;
  if (*(_DWORD *)(a1 + 1764) == 1)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    return statcomp_processUserMarkup(v10, a3, a4, a1 + 1744);
  }
  return result;
}

uint64_t fe_pos_Process_StatCOMP(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v17 = 0;
  if ((safeh_HandleCheck(a1, a2, 62341, 2240) & 0x80000000) != 0) {
    return 2313166856;
  }
  *a5 = 1;
  uint64_t SentenceData = statcomp_getSentenceData(*(void *)(a1 + 56), a3, a4, (_DWORD *)(a1 + 1744));
  if ((SentenceData & 0x80000000) == 0)
  {
    if (!*(_WORD *)(a1 + 2184)
      || (int v17 = 0,
          uint64_t SentenceData = statcomp_processCompounds((void **)(a1 + 1744), &v17, v9, v10, v11, v12, v13, v14),
          (SentenceData & 0x80000000) == 0)
      && (v17 != 1
       || (uint64_t SentenceData = statcomp_saveCompoundsToLingdb(*(void *)(a1 + 56), a3, a4, a1 + 1744),
           (SentenceData & 0x80000000) == 0)))
    {
      statcomp_freeSentenceData(a1 + 1744);
    }
  }
  return SentenceData;
}

uint64_t fe_pos_Process_Mosynt(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __int16 v36 = 0;
  uint64_t v9 = 2313166858;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62341, 2240) & 0x80000000) != 0) {
    return 2313166856;
  }
  uint64_t v46 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  memset(v34, 0, sizeof(v34));
  *a5 = 1;
  uint64_t v10 = heap_Alloc(*(void *)(*a1 + 8), 5000);
  if (v10)
  {
    int v15 = (char *)v10;
    int v44 = 0;
    int v45 = 0;
    int v43 = 0;
    __int16 v42 = 0;
    unsigned int v41 = 0;
    unsigned __int16 v37 = 0;
    int v35 = 0;
    uint64_t v20 = (char *)heap_Alloc(*(void *)(*a1 + 8), 20000);
    if (v20)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a3, a4, 1, 0, (char *)&v45 + 2);
      if ((v9 & 0x80000000) == 0
        && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1[7] + 184))(a3, a4, HIWORD(v45), 0, &v36) & 0x80000000) == 0&& v36 == 1)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a1[7] + 176))(a3, a4, HIWORD(v45), 0, &v46, &v44);
        if ((v9 & 0x80000000) == 0 && (unsigned __int16)v44 >= 2u)
        {
          uint64_t started = mosynt_StartSentenceAnalysis(a1[6], a1[14], a1[15], a1[16], a1[19], a1[20], (uint64_t *)v34);
          if ((started & 0x80000000) == 0)
          {
            uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a3, a4, 2, HIWORD(v45), &v45);
            if ((started & 0x80000000) == 0)
            {
              while ((_WORD)v45)
              {
                uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a3, a4);
                if ((started & 0x80000000) != 0) {
                  goto LABEL_51;
                }
                if (v41 <= 0xA && ((1 << v41) & 0x610) != 0)
                {
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a3, a4, (unsigned __int16)v45, 1, 1, &v43, &v44);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a1[7] + 168))(a3, a4, (unsigned __int16)v45, 2, 1, &v42, &v44);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int8 **, int *))(a1[7] + 176))(a3, a4, (unsigned __int16)v45, 3, &v38, &v44);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1[7] + 176))(a3, a4, (unsigned __int16)v45, 5, &v40, &v44);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1[7] + 176))(a3, a4, (unsigned __int16)v45, 6, &v39, &v44);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 168))(a3, a4, (unsigned __int16)v45, 7, 1, &v37, &v44);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  mosynt_InsertTerminals(a1[6], (uint64_t)v34, (unsigned __int16)v43, (unsigned __int16)(v42 + 1), v40, v37, (unsigned __int16)v45, v46, v38);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                }
                uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 120))(a3, a4, (unsigned __int16)v45, &v45);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_29;
                }
              }
              mosynt_ParseSentence(a1[6], (uint64_t)v34);
              if ((started & 0x80000000) == 0)
              {
                uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a3, a4, 1, 0, (char *)&v45 + 2);
                if ((started & 0x80000000) == 0)
                {
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a3, a4, 2, HIWORD(v45), &v45);
                  if ((started & 0x80000000) == 0)
                  {
                    unsigned __int16 v24 = v45;
                    if ((_WORD)v45)
                    {
                      while (1)
                      {
                        uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a3, a4, v24, (char *)&v44 + 2);
                        if ((started & 0x80000000) != 0) {
                          break;
                        }
                        uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1[7] + 168))(a3, a4, (unsigned __int16)v45, 0, 1, &v41, &v44);
                        if ((started & 0x80000000) != 0) {
                          break;
                        }
                        if (v41 <= 0xA && ((1 << v41) & 0x610) != 0)
                        {
                          uint64_t started = mosynt_GetTerminalInfoById(a1[6], (uint64_t)v34, (unsigned __int16)v45, &v35, v15, 5000);
                          if ((started & 0x80000000) != 0) {
                            break;
                          }
                          uint64_t v26 = a1[7];
                          if (v35)
                          {
                            uint64_t v27 = *(void (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(v26 + 160);
                            __int16 v28 = strlen(v15);
                            v27(a3, a4, (unsigned __int16)v45, 5, (unsigned __int16)(v28 + 1), v15, (char *)&v43 + 2);
                            uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int8 **, int *))(a1[7] + 176))(a3, a4, (unsigned __int16)v45, 3, &v38, &v44);
                            if ((started & 0x80000000) != 0) {
                              break;
                            }
                            log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"(sgram) keep lingdb record %d : POS=%s PHON=%s", v29, v30, v31, (unsigned __int16)v45);
                          }
                          else
                          {
                            uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void))(v26 + 192))(a3, a4, (unsigned __int16)v45);
                            if ((started & 0x80000000) != 0) {
                              break;
                            }
                          }
                        }
                        unsigned __int16 v24 = HIWORD(v44);
                        LOWORD(v45) = HIWORD(v44);
                        if (!HIWORD(v44)) {
                          goto LABEL_48;
                        }
                      }
                    }
                    else
                    {
LABEL_48:
                      uint64_t started = mosynt_SyntTreeToString(a1[6], (uint64_t)v34, v20, 20000);
                      if ((started & 0x80000000) == 0)
                      {
                        __int16 v32 = strlen(v20);
                        uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(a1[7] + 160))(a3, a4, HIWORD(v45), 2, (unsigned __int16)(v32 + 1), v20, (char *)&v43 + 2);
                        if ((started & 0x80000000) == 0) {
                          uint64_t started = mosynt_FinishSentenceAnalysis(a1[6], (uint64_t)v34);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_51:
          uint64_t v9 = started;
        }
      }
    }
    else
    {
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 35000, 0, v16, v17, v18, v19, v33);
    }
LABEL_29:
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v15);
    if (v20) {
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v20);
    }
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v33);
  }
  return v9;
}

uint64_t fe_pos_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v170 = *MEMORY[0x263EF8340];
  __int16 v155 = 0;
  if ((safeh_HandleCheck(a1, a2, 62341, 2240) & 0x80000000) != 0) {
    return 2313166856;
  }
  *a5 = 1;
  if (*(_DWORD *)(a1 + 176))
  {
    uint64_t v10 = statpos_process(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), a3, a4, *(void *)(a1 + 56), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), a1 + 200, *(_DWORD *)(a1 + 180), *(_DWORD *)(a1 + 144), *(_DWORD *)(a1 + 140), *(_DWORD *)(a1 + 148), *(_DWORD *)(a1 + 192));
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
  }
  if (*(_DWORD *)(a1 + 136) && !*(_DWORD *)(a1 + 188)) {
    fe_pos_Process_Mosynt((uint64_t *)a1, a2, a3, a4, a5);
  }
  uint64_t v11 = fe_Process_UserCOMPMarkup(a1, a2, a3, a4, a5);
  if ((v11 & 0x80000000) == 0)
  {
    if (!*(_DWORD *)(a1 + 1736)
      || *(_DWORD *)(a1 + 1616)
      || (uint64_t v11 = fe_pos_Process_StatCOMP(a1, a2, a3, a4, a5), (v11 & 0x80000000) == 0))
    {
      unsigned int __s = 0;
      uint64_t v160 = 0;
      int __s1 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      if (!*(_DWORD *)(a1 + 176)
        || *(_DWORD *)(a1 + 1720)
        && !*(_DWORD *)(a1 + 1616)
        && (*(_DWORD *)(a1 + 192) && !*(_DWORD *)(a1 + 2232)
          ? (uint64_t v12 = statphr_MorphemeProcess(*(void *)a1, *(void *)(a1 + 56), a3, a4))
          : (v12 = statphr_Process(*(void *)a1, *(void *)(a1 + 56), a3, a4, *(void *)(a1 + 1728), *(_DWORD *)(a1 + 1736), *(_DWORD *)(a1 + 2236))), (uint64_t v11 = v12, (v12 & 0x80000000) == 0) && !*(_DWORD *)(a1 + 176)))
      {
        if (!*(_DWORD *)(a1 + 136))
        {
          int v164 = 0;
          int v165 = 0;
          unsigned int v162 = 0;
          int v163 = 0;
          __int16 v159 = 0;
          unsigned __int16 v156 = 0;
          strcpy(v168, "partofspeech");
          *a5 = 1;
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a3, a4, 1, 0, (char *)&v165 + 2);
          if ((v11 & 0x80000000) == 0
            && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)(a1 + 56) + 184))(a3, a4, HIWORD(v165), 0, &v155) & 0x80000000) == 0&& v155 == 1)
          {
            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(*(void *)(a1 + 56)
                                                                                               + 176))(a3, a4, HIWORD(v165), 0, &__s, (char *)&v164 + 2);
            if ((v11 & 0x80000000) == 0 && HIWORD(v164) >= 2u)
            {
              memset(v167, 0, sizeof(v167));
              int v14 = strlen(__s);
              int v15 = (unsigned char *)heap_Alloc(*(void *)(*(void *)a1 + 8), (v14 + 129));
              *(void *)(a1 + 88) = v15;
              if (!v15) {
                goto LABEL_154;
              }
              *int v15 = 0;
              int v20 = strlen(__s);
              uint64_t v21 = (unsigned char *)heap_Alloc(*(void *)(*(void *)a1 + 8), (v20 + 129));
              *(void *)(a1 + 96) = v21;
              if (!v21
                || (*uint64_t v21 = 0,
                    int v22 = strlen(__s),
                    uint64_t v23 = (unsigned char *)heap_Alloc(*(void *)(*(void *)a1 + 8), (v22 + 129)),
                    (*(void *)(a1 + 104) = v23) == 0))
              {
LABEL_154:
                log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 35000, 0, v16, v17, v18, v19, v142);
                unsigned __int16 v83 = 8202;
LABEL_155:
                uint64_t v11 = v83 | 0x89E00000;
                goto LABEL_156;
              }
              *uint64_t v23 = 0;
              __int16 v24 = strlen(__s);
              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a3, a4, 2, HIWORD(v165), &v165);
              if ((v25 & 0x80000000) != 0) {
                goto LABEL_257;
              }
              unsigned __int16 v29 = 0;
              unsigned __int16 v145 = 0;
              int v30 = 0;
              int v150 = 0;
              __int16 v31 = 0;
              uint64_t v151 = (unsigned __int16)(v24 + 1);
              uint64_t v152 = 0;
              int v32 = 1;
              uint64_t v146 = 1;
              while (1)
              {
                if (!(_WORD)v165)
                {
                  if (!v32)
                  {
                    ssft_qsort((uint64_t)__s2, (unsigned __int16)v152, 82, (uint64_t (*)(unint64_t, unint64_t))compare_1);
                    if ((_WORD)v152)
                    {
                      uint64_t v70 = 0;
                      do
                      {
                        if (v70)
                        {
                          if (__s2[v70]) {
                            *(_WORD *)(*(void *)(a1 + 96) + strlen(*(const char **)(a1 + 96))) = 92;
                          }
                          strcat(*(char **)(a1 + 96), &__s2[v70]);
                          if (__s2[v70 + 40])
                          {
                            uint64_t v71 = *(unsigned char **)(a1 + 104);
                            if (*v71) {
                              *(_WORD *)&v71[strlen(*(const char **)(a1 + 104))] = 92;
                            }
                          }
                        }
                        else
                        {
                          strcat(*(char **)(a1 + 96), __s2);
                        }
                        strcat(*(char **)(a1 + 104), &__s2[v70 + 40]);
                        v70 += 82;
                      }
                      while (82 * (unsigned __int16)v152 != v70);
                    }
                  }
                  unsigned __int16 v149 = v30;
                  int v72 = (unsigned __int16)v30;
                  if ((unsigned __int16)v30 <= v145 && (unsigned __int16)v150 <= v145)
                  {
                    int v87 = v145 - (unsigned __int16)v30;
                    if (v87 >= 1)
                    {
                      int v88 = 0;
                      do
                      {
                        *(_WORD *)(*(void *)(a1 + 96) + strlen(*(const char **)(a1 + 96))) = 126;
                        ++v88;
                      }
                      while (v87 > (unsigned __int16)v88);
                    }
                    if (v145 - (unsigned __int16)v150 >= 1)
                    {
                      int v89 = 0;
                      do
                      {
                        *(_WORD *)(*(void *)(a1 + 104) + strlen(*(const char **)(a1 + 104))) = 126;
                        ++v89;
                      }
                      while (v145 - (unsigned __int16)v150 > (unsigned __int16)v89);
                    }
                  }
                  else
                  {
                    if ((unsigned __int16)v30 <= (unsigned __int16)v150) {
                      int v73 = (unsigned __int16)v150;
                    }
                    else {
                      int v73 = (unsigned __int16)v30;
                    }
                    int v74 = v73 - v145;
                    if (v74 >= 1)
                    {
                      int v75 = 0;
                      unsigned __int8 v76 = v146;
                      do
                      {
                        if (v76 << 7 == v31)
                        {
                          uint64_t v77 = v151 + ((unint64_t)++v76 << 7);
                          uint64_t v78 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), v77);
                          if (!v78) {
                            goto LABEL_154;
                          }
                          *(void *)(a1 + 88) = v78;
                          uint64_t v79 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 96), v77);
                          if (!v79) {
                            goto LABEL_154;
                          }
                          *(void *)(a1 + 96) = v79;
                          uint64_t v80 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 104), v77);
                          if (!v80) {
                            goto LABEL_154;
                          }
                          *(void *)(a1 + 104) = v80;
                        }
                        *(_WORD *)(*(void *)(a1 + 88) + strlen(*(const char **)(a1 + 88))) = 126;
                        ++v75;
                        ++v31;
                      }
                      while (v74 > (unsigned __int16)v75);
                    }
                    if ((unsigned __int16)v150 <= v149)
                    {
                      int v90 = v72 - (unsigned __int16)v150;
                      if (v90 >= 1)
                      {
                        int v91 = 0;
                        do
                        {
                          *(_WORD *)(*(void *)(a1 + 104) + strlen(*(const char **)(a1 + 104))) = 126;
                          ++v91;
                        }
                        while (v90 > (unsigned __int16)v91);
                      }
                    }
                    else
                    {
                      int v81 = (unsigned __int16)v150 - v72;
                      if (v81 >= 1)
                      {
                        int v82 = 0;
                        do
                        {
                          *(_WORD *)(*(void *)(a1 + 96) + strlen(*(const char **)(a1 + 96))) = 126;
                          ++v82;
                        }
                        while (v81 > (unsigned __int16)v82);
                      }
                    }
                  }
                  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L1: %s", v26, v27, v28, (uint64_t)v168);
                  unsigned __int16 v92 = strlen(*(const char **)(a1 + 88));
                  uint64_t v25 = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 80) + 120))(*(void *)(a1 + 64), *(void *)(a1 + 72), 0, *(void *)(a1 + 88), v92);
                  if ((v25 & 0x80000000) != 0) {
                    goto LABEL_257;
                  }
                  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L2: %s", v93, v94, v95, (uint64_t)v168);
                  unsigned __int16 v96 = strlen(*(const char **)(a1 + 96));
                  uint64_t v25 = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 80) + 120))(*(void *)(a1 + 64), *(void *)(a1 + 72), 1, *(void *)(a1 + 96), v96);
                  if ((v25 & 0x80000000) != 0) {
                    goto LABEL_257;
                  }
                  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L3: %s", v97, v98, v99, (uint64_t)v168);
                  unsigned __int16 v100 = strlen(*(const char **)(a1 + 104));
                  uint64_t v25 = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 80) + 120))(*(void *)(a1 + 64), *(void *)(a1 + 72), 2, *(void *)(a1 + 104), v100);
                  if ((v25 & 0x80000000) != 0
                    || (uint64_t v25 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 80) + 80))(*(void *)(a1 + 64), *(void *)(a1 + 72), v168), (v25 & 0x80000000) != 0)|| (uint64_t v25 = (*(uint64_t (**)(void, void, uint64_t, const char **, unsigned __int16 *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), 1, &v158, &v156), (v25 & 0x80000000) != 0)|| (v158[v156] = 0, log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s O2: %s", v101,
                          v102,
                          v103,
                          (uint64_t)v168),
                        uint64_t v25 = (*(uint64_t (**)(void, void, uint64_t, const char **, unsigned __int16 *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), 2, &v157, &v156), (v25 & 0x80000000) != 0))
                  {
LABEL_257:
                    uint64_t v11 = v25;
                  }
                  else
                  {
                    v157[v156] = 0;
                    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s O3: %s", v104, v105, v106, (uint64_t)v168);
                    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56)
                                                                                              + 104))(a3, a4, 2, HIWORD(v165), &v165);
                    if ((v11 & 0x80000000) == 0)
                    {
                      unsigned __int16 v107 = v165;
                      if ((_WORD)v165)
                      {
                        unsigned __int8 v108 = 0;
                        LODWORD(v109) = 0;
                        size_t v110 = 0;
                        int v111 = 0;
                        int v112 = 0;
                        int v113 = 1;
                        while (1)
                        {
                          uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, v107, 0, 1, &v162, (char *)&v164 + 2);
                          if ((v25 & 0x80000000) != 0) {
                            goto LABEL_257;
                          }
                          if (v162 <= 0xA && ((1 << v162) & 0x610) != 0)
                          {
                            uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, (unsigned __int16)v165, 1, 1, (char *)&v163 + 2, (char *)&v164 + 2);
                            if ((v25 & 0x80000000) != 0) {
                              goto LABEL_257;
                            }
                            uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, (unsigned __int16)v165, 5, &__s1, (char *)&v164 + 2);
                            if ((v25 & 0x80000000) != 0) {
                              goto LABEL_257;
                            }
                            if (v113 == 1 || v112 != HIWORD(v163))
                            {
                              int v111 = v158;
                              for (uint64_t i = v158 + 1; ; ++i)
                              {
                                int v116 = *(unsigned __int8 *)v111;
                                if (v116 != 32 && v116 != 126) {
                                  break;
                                }
                                uint64_t v158 = ++v111;
                              }
                              while ((_BYTE)v116)
                              {
                                if (v116 == 32 || v116 == 126)
                                {
                                  uint64_t v158 = i;
                                  *((unsigned char *)i - 1) = 0;
                                  break;
                                }
                                uint64_t v158 = i;
                                char v117 = *i++;
                                LOBYTE(v116) = v117;
                              }
                              size_t v110 = v157;
                              for (unint64_t j = v157 + 1; ; ++j)
                              {
                                int v119 = *(unsigned __int8 *)v110;
                                if (v119 != 32 && v119 != 126) {
                                  break;
                                }
                                uint64_t v157 = ++v110;
                              }
                              while ((_BYTE)v119)
                              {
                                if (v119 == 32 || v119 == 126)
                                {
                                  uint64_t v157 = j;
                                  *((unsigned char *)j - 1) = 0;
                                  break;
                                }
                                uint64_t v157 = j;
                                char v120 = *j++;
                                LOBYTE(v119) = v120;
                              }
                            }
                            if (v112 != HIWORD(v163))
                            {
                              if (v109 == 1)
                              {
                                if (v108)
                                {
                                  uint64_t v109 = v108;
                                  uint64_t v127 = (unsigned __int16 *)v167;
                                  while (1)
                                  {
                                    unsigned int v128 = *v127++;
                                    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56)
                                                                                              + 192))(a3, a4, v128);
                                    if ((v25 & 0x80000000) != 0) {
                                      goto LABEL_257;
                                    }
                                    if (!--v109) {
                                      goto LABEL_227;
                                    }
                                  }
                                }
                              }
                              else if (v108)
                              {
                                uint64_t v121 = v108;
                                uint64_t v122 = (unsigned __int16 *)v167;
                                do
                                {
                                  uint64_t v154 = 0;
                                  unsigned int v124 = *v122++;
                                  uint64_t v123 = v124;
                                  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, v124, 5, &v154, (char *)&v164 + 2);
                                  if ((v25 & 0x80000000) != 0) {
                                    goto LABEL_257;
                                  }
                                  uint64_t v125 = strchr(v154, 92);
                                  if (v125) {
                                    *uint64_t v125 = 0;
                                  }
                                  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, v123, 6, &v160, (char *)&v164 + 2);
                                  if ((v25 & 0x80000000) != 0) {
                                    goto LABEL_257;
                                  }
                                  uint64_t v126 = strchr(v160, 92);
                                  if (v126) {
                                    *uint64_t v126 = 0;
                                  }
                                }
                                while (--v121);
                              }
                              LODWORD(v109) = 0;
LABEL_227:
                              unsigned __int8 v108 = 0;
                            }
                            if (v111
                              && v110
                              && ((uint64_t v129 = __s1, strstr(__s1, v111)) || !strcmp(v111, "*") || !strcmp(v129, "*")))
                            {
                              __int16 v130 = strlen(v111);
                              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160))(a3, a4, (unsigned __int16)v165, 5, (unsigned __int16)(v130 + 1), v111, &v164);
                              if ((v25 & 0x80000000) != 0) {
                                goto LABEL_257;
                              }
                              __int16 v131 = strlen(v110);
                              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160))(a3, a4, (unsigned __int16)v165, 6, (unsigned __int16)(v131 + 1), v110, &v164);
                              if ((v25 & 0x80000000) != 0) {
                                goto LABEL_257;
                              }
                              LODWORD(v109) = 1;
                            }
                            else
                            {
                              *((_WORD *)v167 + v108++) = v165;
                            }
                            int v113 = 0;
                            int v112 = HIWORD(v163);
                          }
                          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a3, a4, (unsigned __int16)v165, &v165);
                          if ((v11 & 0x80000000) != 0) {
                            break;
                          }
                          unsigned __int16 v107 = v165;
                          if (!(_WORD)v165)
                          {
                            if (v109 == 1)
                            {
                              if (v108)
                              {
                                uint64_t v132 = v108 - 1;
                                int v133 = (unsigned __int16 *)v167;
                                do
                                {
                                  uint64_t v134 = v132;
                                  unsigned int v135 = *v133++;
                                  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56)
                                                                                            + 192))(a3, a4, v135);
                                  if ((v11 & 0x80000000) != 0) {
                                    break;
                                  }
                                  uint64_t v132 = v134 - 1;
                                }
                                while (v134);
                              }
                              break;
                            }
                            if (!v108) {
                              break;
                            }
                            uint64_t v136 = v108;
                            uint64_t v137 = (unsigned __int16 *)v167;
                            while (1)
                            {
                              unsigned int v139 = *v137++;
                              uint64_t v138 = v139;
                              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, v139, 5, &__s1, (char *)&v164 + 2);
                              if ((v25 & 0x80000000) != 0) {
                                goto LABEL_257;
                              }
                              uint64_t v140 = strchr(__s1, 92);
                              if (v140) {
                                *uint64_t v140 = 0;
                              }
                              uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, v138, 6, &v160, (char *)&v164 + 2);
                              if ((v11 & 0x80000000) == 0)
                              {
                                unint64_t v141 = strchr(v160, 92);
                                if (v141) {
                                  *unint64_t v141 = 0;
                                }
                                if (--v136) {
                                  continue;
                                }
                              }
                              goto LABEL_156;
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_156:
                  uint64_t v84 = *(void *)(a1 + 88);
                  if (v84) {
                    heap_Free(*(void **)(*(void *)a1 + 8), v84);
                  }
                  *(void *)(a1 + 88) = 0;
                  uint64_t v85 = *(void *)(a1 + 96);
                  if (v85) {
                    heap_Free(*(void **)(*(void *)a1 + 8), v85);
                  }
                  *(void *)(a1 + 96) = 0;
                  uint64_t v86 = *(void *)(a1 + 104);
                  if (v86) {
                    heap_Free(*(void **)(*(void *)a1 + 8), v86);
                  }
                  *(void *)(a1 + 104) = 0;
                  return v11;
                }
                uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a3, a4);
                if ((v25 & 0x80000000) != 0) {
                  goto LABEL_257;
                }
                if (v162 <= 0xA && ((1 << v162) & 0x610) != 0) {
                  break;
                }
LABEL_123:
                uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a3, a4, (unsigned __int16)v165, &v165);
                if ((v11 & 0x80000000) != 0) {
                  goto LABEL_156;
                }
              }
              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, (unsigned __int16)v165, 1, 1, (char *)&v163 + 2, (char *)&v164 + 2);
              if ((v25 & 0x80000000) != 0) {
                goto LABEL_257;
              }
              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, (unsigned __int16)v165, 2, 1, &v163, (char *)&v164 + 2);
              if ((v25 & 0x80000000) != 0) {
                goto LABEL_257;
              }
              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56)
                                                                                                  + 176))(a3, a4, (unsigned __int16)v165, 5, &__s1, (char *)&v164 + 2);
              if ((v25 & 0x80000000) != 0) {
                goto LABEL_257;
              }
              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56)
                                                                                                  + 176))(a3, a4, (unsigned __int16)v165, 6, &v160, (char *)&v164 + 2);
              if ((v25 & 0x80000000) != 0) {
                goto LABEL_257;
              }
              uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, (unsigned __int16)v165, 7, 1, &v159, (char *)&v164 + 2);
              if ((v25 & 0x80000000) != 0) {
                goto LABEL_257;
              }
              uint64_t v34 = v152;
              if (v32 != 1 && HIWORD(v163) == v29)
              {
LABEL_98:
                if ((_WORD)v34)
                {
                  int v148 = v30;
                  int v59 = 0;
                  int v60 = 0;
                  unint64_t v62 = v160;
                  uint64_t v61 = __s1;
                  uint64_t v152 = v34;
                  uint64_t v63 = (unsigned __int16)v34;
                  uint64_t v64 = __s2;
                  int v144 = (unsigned __int16)v34;
                  do
                  {
                    if (!strcmp(v61, v64)) {
                      int v60 = 1;
                    }
                    if (!strcmp(v62, v64 + 40)) {
                      int v59 = 1;
                    }
                    v64 += 82;
                    --v63;
                  }
                  while (v63);
                  BOOL v65 = v59 == 0;
                  if (v60 && v59)
                  {
                    int v30 = v148;
LABEL_122:
                    int v32 = 0;
                    unsigned __int16 v29 = HIWORD(v163);
                    goto LABEL_123;
                  }
                  int v30 = v148;
                  if (v60)
                  {
                    __s2[82 * v144] = 0;
                    int v66 = v152;
                    if (v59)
                    {
LABEL_111:
                      int v67 = (unsigned __int16)v66;
                      __s2[82 * (unsigned __int16)v66 + 40] = 0;
LABEL_121:
                      uint64_t v152 = (v66 + 1);
                      *(_WORD *)&__s2[82 * v67 + 80] = v159;
                      goto LABEL_122;
                    }
LABEL_117:
                    int v67 = (unsigned __int16)v66;
                    __strcpy_chk();
                    if ((_WORD)v150) {
                      int v69 = v150 + 1;
                    }
                    else {
                      int v69 = 0;
                    }
                    int v150 = v69 + strlen(v160);
                    goto LABEL_121;
                  }
                  LODWORD(v34) = v152;
                }
                else
                {
                  BOOL v65 = 1;
                }
                int v66 = v34;
                __strcpy_chk();
                if ((_WORD)v30) {
                  int v68 = v30 + 1;
                }
                else {
                  int v68 = 0;
                }
                int v30 = v68 + strlen(__s1);
                if (!v65) {
                  goto LABEL_111;
                }
                goto LABEL_117;
              }
              int v143 = v32;
              if (!v32)
              {
                ssft_qsort((uint64_t)__s2, (unsigned __int16)v152, 82, (uint64_t (*)(unint64_t, unint64_t))compare_1);
                if ((_WORD)v152)
                {
                  uint64_t v35 = 0;
                  do
                  {
                    if (v35)
                    {
                      __int16 v36 = *(char **)(a1 + 96);
                      if (__s2[v35] && *v36 && v36[strlen(*(const char **)(a1 + 96)) - 1] != 32)
                      {
                        *(_WORD *)&v36[strlen(v36)] = 92;
                        __int16 v36 = *(char **)(a1 + 96);
                      }
                      strcat(v36, &__s2[v35]);
                      if (__s2[v35 + 40])
                      {
                        unsigned __int16 v37 = *(const char **)(a1 + 104);
                        if (*v37)
                        {
                          if (v37[strlen(*(const char **)(a1 + 104)) - 1] != 32) {
                            *(_WORD *)&v37[strlen(v37)] = 92;
                          }
                        }
                      }
                    }
                    else
                    {
                      strcat(*(char **)(a1 + 96), __s2);
                    }
                    strcat(*(char **)(a1 + 104), &__s2[v35 + 40]);
                    v35 += 82;
                  }
                  while (82 * (unsigned __int16)v152 != v35);
                }
                uint64_t v34 = 0;
              }
              int v38 = (unsigned __int16)v30;
              uint64_t v39 = v146;
              uint64_t v153 = v34;
              if ((unsigned __int16)v30 <= v145 && (unsigned __int16)v150 <= v145)
              {
                int v51 = v145 - (unsigned __int16)v30;
                if (v51 >= 1)
                {
                  int v52 = 0;
                  do
                  {
                    *(_WORD *)(*(void *)(a1 + 96) + strlen(*(const char **)(a1 + 96))) = 126;
                    ++v52;
                  }
                  while (v51 > (unsigned __int16)v52);
                }
                if (v145 - (unsigned __int16)v150 >= 1)
                {
                  int v53 = 0;
                  int v54 = v143;
                  do
                  {
                    *(_WORD *)(*(void *)(a1 + 104) + strlen(*(const char **)(a1 + 104))) = 126;
                    ++v53;
                  }
                  while (v145 - (unsigned __int16)v150 > (unsigned __int16)v53);
                  uint64_t v39 = v146;
                  goto LABEL_94;
                }
                uint64_t v39 = v146;
              }
              else
              {
                unsigned __int16 v147 = v30;
                if ((unsigned __int16)v30 <= (unsigned __int16)v150) {
                  int v40 = (unsigned __int16)v150;
                }
                else {
                  int v40 = (unsigned __int16)v30;
                }
                int v41 = v40 - v145;
                if (v41 >= 1)
                {
                  int v42 = 0;
                  do
                  {
                    if (v39 << 7 == v31)
                    {
                      uint64_t v43 = (v39 + 1);
                      uint64_t v44 = v151 + ((unint64_t)(v39 + 1) << 7);
                      uint64_t v45 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), v44);
                      if (!v45) {
                        goto LABEL_154;
                      }
                      *(void *)(a1 + 88) = v45;
                      uint64_t v46 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 96), v44);
                      if (!v46) {
                        goto LABEL_154;
                      }
                      *(void *)(a1 + 96) = v46;
                      uint64_t v47 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 104), v44);
                      if (!v47) {
                        goto LABEL_154;
                      }
                      *(void *)(a1 + 104) = v47;
                    }
                    else
                    {
                      uint64_t v43 = v39;
                    }
                    *(_WORD *)(*(void *)(a1 + 88) + strlen(*(const char **)(a1 + 88))) = 126;
                    ++v42;
                    ++v31;
                    uint64_t v39 = v43;
                  }
                  while (v41 > (unsigned __int16)v42);
                }
                if ((unsigned __int16)v150 <= v147)
                {
                  int v55 = v38 - (unsigned __int16)v150;
                  if (v55 >= 1)
                  {
                    uint64_t v49 = v39;
                    int v56 = 0;
                    do
                    {
                      *(_WORD *)(*(void *)(a1 + 104) + strlen(*(const char **)(a1 + 104))) = 126;
                      ++v56;
                    }
                    while (v55 > (unsigned __int16)v56);
                    goto LABEL_91;
                  }
                }
                else
                {
                  int v48 = (unsigned __int16)v150 - v38;
                  if (v48 >= 1)
                  {
                    uint64_t v49 = v39;
                    int v50 = 0;
                    do
                    {
                      *(_WORD *)(*(void *)(a1 + 96) + strlen(*(const char **)(a1 + 96))) = 126;
                      ++v50;
                    }
                    while (v48 > (unsigned __int16)v50);
LABEL_91:
                    uint64_t v39 = v49;
                  }
                }
              }
              int v54 = v143;
LABEL_94:
              if (HIWORD(v163) > (unsigned __int16)v163)
              {
                unsigned __int16 v83 = 16049;
                goto LABEL_155;
              }
              uint64_t v146 = v39;
              unsigned __int16 v145 = Utf8_LengthInUtf8chars((unint64_t)&__s[HIWORD(v163)], (unsigned __int16)v163 - HIWORD(v163));
              if (!v54)
              {
                __int16 v57 = HIWORD(v163);
                __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, HIWORD(v163));
                strncat(*(char **)(a1 + 88), &__s[HIWORD(v163) - (unsigned __int16)(v57 - PreviousUtf8Offset)], (unsigned __int16)(v57 - PreviousUtf8Offset));
                *(_WORD *)(*(void *)(a1 + 96) + strlen(*(const char **)(a1 + 96))) = 32;
                *(_WORD *)(*(void *)(a1 + 104) + strlen(*(const char **)(a1 + 104))) = 32;
              }
              strncat(*(char **)(a1 + 88), &__s[HIWORD(v163)], (unsigned __int16)v163 - (unint64_t)HIWORD(v163));
              int v30 = 0;
              int v150 = 0;
              uint64_t v34 = v153;
              goto LABEL_98;
            }
          }
        }
      }
    }
  }
  return v11;
}

uint64_t compare_1(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 80) - *(unsigned __int16 *)(a1 + 80);
}

uint64_t fe_pos_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62341, 2240);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2313166856;
  }
}

uint64_t fe_pos_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2313166849;
  }
  uint64_t result = 0;
  *a2 = &IFePos;
  return result;
}

uint64_t fe_pos_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2313166855;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_pos_ClassClose()
{
  return 0;
}

uint64_t statcomp_getDctInfo(void *a1, const char *a2, uint64_t a3, const char **a4, unsigned __int8 *a5, _DWORD *a6)
{
  uint64_t v18 = 0;
  unsigned __int16 v17 = 0;
  *a6 = 0;
  uint64_t v10 = (*(uint64_t (**)(void, void, const char *, uint64_t, char ***, unsigned __int16 *, unsigned __int8 *))(a1[50] + 96))(a1[48], a1[49], "compounds_feature_info", a3, &v18, &v17, a5);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = v17;
    if (v17)
    {
      uint64_t v12 = v18;
      int v13 = *a5;
      while (1)
      {
        int v14 = *v12;
        int v15 = strchr(*v12, v13);
        if (v15)
        {
          if (!strncmp(v14, a2, (unsigned __int16)((_WORD)v15 - (_WORD)v14))) {
            break;
          }
        }
        ++v12;
        if (!--v11) {
          return v10;
        }
      }
      *a4 = v14;
      *a6 = 1;
    }
  }
  return v10;
}

uint64_t setStatCOMPFeatureVector(unsigned int a1, uint64_t *a2, unsigned int a3, __int16 a4, uint64_t a5)
{
  uint64_t v9 = a2[19];
  uint64_t v10 = a2[20];
  uint64_t v11 = a2[22];
  uint64_t v12 = a2[23];
  __int16 v57 = *(uint64_t **)(a2[24] + 8 * a1);
  uint64_t v58 = *(void *)(a2[21] + 8 * a1);
  unsigned __int8 v61 = 0;
  int v56 = *(_WORD **)(v12 + 8 * a1);
  int v60 = 0;
  int v59 = 0;
  uint64_t v13 = (unsigned __int16)(a4 - a3 + 1);
  uint64_t v18 = (const char **)heap_Calloc(*(void **)(*a2 + 8), 1, 8 * v13 + 8);
  uint64_t v19 = *a2;
  if (!v18)
  {
    uint64_t v20 = 0;
    goto LABEL_13;
  }
  uint64_t v20 = heap_Calloc(*(void **)(v19 + 8), 1, 8 * v13 + 8);
  if (!v20)
  {
LABEL_11:
    uint64_t v19 = *a2;
LABEL_13:
    log_OutPublic(*(void *)(v19 + 32), (uint64_t)"FE_POS", 35000, 0, v14, v15, v16, v17, v47);
    uint64_t DctInfo = 2313166858;
    goto LABEL_14;
  }
  if (v13)
  {
    uint64_t v51 = v11;
    uint64_t v52 = a5;
    uint64_t v21 = 0;
    uint64_t v53 = v10;
    uint64_t v54 = a1;
    uint64_t v22 = 96 * a3;
    uint64_t v23 = v13 - 1;
    while (1)
    {
      __int16 v24 = (char *)heap_Calloc(*(void **)(*a2 + 8), 1, (unsigned __int16)(*(_WORD *)(a2[54] + v22 + 2) - *(_WORD *)(a2[54] + v22)) + 1);
      v18[v21] = v24;
      if (!v24) {
        goto LABEL_11;
      }
      strncpy(v24, (const char *)(a2[60] + *(unsigned __int16 *)(a2[54] + v22)), *(unsigned __int16 *)(a2[54] + v22 + 2) - (unint64_t)*(unsigned __int16 *)(a2[54] + v22));
      v18[v21][*(unsigned __int16 *)(a2[54] + v22 + 2) - *(unsigned __int16 *)(a2[54] + v22)] = 0;
      unsigned __int16 v25 = strlen(*(const char **)(a2[54] + v22 + 56));
      uint64_t v26 = (char *)heap_Calloc(*(void **)(*a2 + 8), 1, v25 + 1);
      *(void *)(v20 + 8 * v21) = v26;
      if (!v26) {
        goto LABEL_11;
      }
      strcpy(v26, *(const char **)(a2[54] + v22 + 56));
      if (v23 == v21)
      {
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(a2[50] + 144))(a2[48], a2[49], "normal", v18[v21], 128);
        if ((v27 & 0x80000000) != 0)
        {
          uint64_t DctInfo = v27;
          goto LABEL_14;
        }
        if (v23 == v21)
        {
          uint64_t v30 = 0;
          uint64_t v49 = v13;
          uint64_t v50 = v9 + 20 * a1;
          int v48 = (const char **)v20;
          while (1)
          {
            int v31 = *(unsigned __int16 *)(v50 + 2 * v30);
            uint64_t DctInfo = statcomp_getDctInfo(a2, *(const char **)(v53 + 8 * v54), (uint64_t)v18[v30], (const char **)&v60, &v61, &v59);
            if ((DctInfo & 0x80000000) != 0) {
              goto LABEL_14;
            }
            uint64_t v55 = v30;
            int v32 = v59;
            if (v59 == 1)
            {
              unsigned int v33 = v60;
              int v34 = v61;
              uint64_t v35 = *(unsigned __int16 *)(*(void *)(v51 + 8 * v54) + 8);
              __int16 v36 = strchr(v60, v61);
              unsigned __int16 v37 = v33;
              if (v36)
              {
                *__int16 v36 = 0;
                unsigned __int16 v37 = v36 + 1;
              }
              if (v35)
              {
                int v38 = v56;
                do
                {
                  uint64_t v39 = strchr(v37, v34);
                  if (v39) {
                    *v39++ = 0;
                  }
                  *v38++ = (_WORD)v37 - (_WORD)v33;
                  unsigned __int16 v37 = v39;
                  --v35;
                }
                while (v35);
              }
            }
            if (*(unsigned __int8 *)(v58 + 1296) >= 2u) {
              break;
            }
            uint64_t v20 = (uint64_t)v48;
            uint64_t v13 = v49;
LABEL_42:
            uint64_t v30 = v55 + 1;
            if (v55 + 1 == v13) {
              goto LABEL_14;
            }
          }
          unsigned __int16 v40 = 0;
          int v41 = v60;
          uint64_t v20 = (uint64_t)v48;
          uint64_t v13 = v49;
          while (2)
          {
            unsigned int v42 = v40;
            if (strcmp(*(const char **)(v52 + 8 * v40), "=")
              || (uint64_t v43 = *v57, *(unsigned __int16 *)(*v57 + 12 * v42) != v31)
              || *(_DWORD *)(v43 + 12 * v42 + 4))
            {
              if (v32 == 1)
              {
                uint64_t v44 = *v57;
                if (*(unsigned __int16 *)(*v57 + 12 * v42) == v31)
                {
                  int v45 = *(_DWORD *)(v44 + 12 * v42 + 4);
                  if (v45 == 2 || v45 == 1)
                  {
                    uint64_t v46 = statcomp_setFeature(v58, *a2, v42, v52, &v41[(unsigned __int16)v56[*(unsigned __int16 *)(v44 + 12 * v42 + 8)]]);
LABEL_38:
                    uint64_t DctInfo = v46;
                    if ((v46 & 0x80000000) != 0) {
                      goto LABEL_14;
                    }
                  }
                }
              }
              unsigned __int16 v40 = v42 + 1;
              if (*(unsigned __int8 *)(v58 + 1296) - 1 <= (unsigned __int16)(v42 + 1)) {
                goto LABEL_42;
              }
              continue;
            }
            break;
          }
          uint64_t v46 = statcomp_setDynamicFeature(*a2, v58, *(unsigned __int16 *)(v43 + 12 * v42 + 8), v42, v52, v18, v48, v49, v55);
          goto LABEL_38;
        }
      }
      v22 += 96;
      ++v21;
    }
  }
  uint64_t DctInfo = 0;
LABEL_14:
  freeWordList(*(void **)(*a2 + 8), v13, (uint64_t)v18);
  freeWordList(*(void **)(*a2 + 8), v13, v20);
  return DctInfo;
}

void *freeWordList(void *result, unsigned int a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    unsigned __int16 v6 = 0;
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a3 + 8 * v6);
      if (v8)
      {
        heap_Free(v5, v8);
        *(void *)(a3 + 8 * v7) = 0;
      }
      unsigned __int16 v6 = v7 + 1;
    }
    while (a2 >= (unsigned __int16)(v7 + 1));
    return heap_Free(v5, a3);
  }
  return result;
}

uint64_t statcomp_useStatCOMP(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a3 + 96))(a1, a2, "fecfg", "usecompound", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)&__c[1] != 1 || *(void *)&__c[3] == 0) {
      return 0;
    }
    uint64_t v7 = **(const char ***)&__c[3];
    uint64_t v8 = strchr(**(char ***)&__c[3], __c[0]);
    if (v8)
    {
      *uint64_t v8 = 0;
      uint64_t v7 = **(const char ***)&__c[3];
    }
    if (!strcmp(v7, "YES") || !strcmp(v7, "yes"))
    {
      uint64_t result = 0;
      *a4 = 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t statcomp_processUserMarkup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  int v59 = 0;
  int v60 = 0;
  __int16 v58 = 0;
  int v56 = 0;
  unsigned int v57 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  unsigned __int16 v52 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v60 + 2);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a1 + 184))(a2, a3, HIWORD(v60), 0, (char *)&v59 + 2);
  if ((v9 & 0x80000000) == 0 && HIWORD(v59) == 1)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a1 + 176))(a2, a3, HIWORD(v60), 0, &v55, &v59);
    if ((v9 & 0x80000000) == 0 && (unsigned __int16)v59 >= 2u)
    {
      uint64_t v10 = (_WORD *)(a4 + 424);
      *(_WORD *)(a4 + 424) = 0;
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v60), &v60);
      if ((v9 & 0x80000000) != 0) {
        goto LABEL_65;
      }
      unsigned __int16 v11 = v60;
      if (!(_WORD)v60) {
        goto LABEL_65;
      }
      uint64_t v12 = (char **)(a4 + 408);
      while (1)
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1 + 168))(a2, a3, v11, 0, 1, &v57, &v59);
        if ((v13 & 0x80000000) != 0)
        {
LABEL_64:
          uint64_t v9 = v13;
          goto LABEL_65;
        }
        if (v57 <= 0xA && ((1 << v57) & 0x610) != 0)
        {
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v60, 1, 1, &v56, &v59);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_64;
          }
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v60, 2, 1, (char *)&v56 + 2, &v59);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_64;
          }
          if ((unsigned __int16)v56 > HIWORD(v56))
          {
            unsigned __int16 v50 = 16049;
            goto LABEL_69;
          }
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1 + 184))(a2, a3, (unsigned __int16)v60, 14, (char *)&v59 + 2);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_64;
          }
          if (HIWORD(v59) == 1)
          {
            uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v60, 14, &v54, &v59);
            if ((v13 & 0x80000000) != 0) {
              goto LABEL_64;
            }
            if (hlp_NLUStrFind(v54, "S_COMP", &v53, &v52))
            {
              if (!*v10)
              {
                uint64_t v15 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
                *(void *)(a4 + 408) = v15;
                if (!v15) {
                  goto LABEL_68;
                }
                *uint64_t v10 = 1024;
              }
              uint64_t v8 = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), (_WORD *)(a4 + 424), v54);
              if ((v8 & 0x80000000) != 0) {
                return v8;
              }
              uint64_t v20 = v52;
              if (v52)
              {
                uint64_t v21 = 0;
                uint64_t v22 = v53 + 1;
                uint64_t v23 = v62;
                while (1)
                {
                  int v24 = *(unsigned __int8 *)(v22 - 1);
                  if (v24 == 43) {
                    break;
                  }
                  *v23++ = v24;
                  ++v22;
                  --v21;
                  if (!(v20 + v21)) {
                    goto LABEL_29;
                  }
                }
                *uint64_t v23 = 0;
                __strncpy_chk();
                __s[v21 - 1 + v52] = 0;
                hlp_NLUStrSet(*v12, "S_COMPPOS", __s);
              }
              else
              {
LABEL_29:
                v62[v20] = 0;
              }
              hlp_NLUStrSet(*(char **)(a4 + 408), "S_COMP", v62);
              log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing NLU=%s", v25, v26, v27, (uint64_t)v54);
              __int16 v28 = strlen(*(const char **)(a4 + 408));
              uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v60, 14, (unsigned __int16)(v28 + 1), *(void *)(a4 + 408), &v58);
              if ((v13 & 0x80000000) != 0) {
                goto LABEL_64;
              }
              *const void *v12 = 0;
            }
            if (hlp_NLUStrFind(v54, "E_COMP", &v53, &v52))
            {
              if (!*v10)
              {
                uint64_t v29 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
                *(void *)(a4 + 408) = v29;
                if (!v29) {
                  goto LABEL_68;
                }
                *uint64_t v10 = 1024;
              }
              uint64_t v8 = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), (_WORD *)(a4 + 424), v54);
              if ((v8 & 0x80000000) != 0) {
                return v8;
              }
              uint64_t v30 = v52;
              if (v52)
              {
                uint64_t v31 = 0;
                uint64_t v32 = v53 + 1;
                unsigned int v33 = v62;
                while (1)
                {
                  int v34 = *(unsigned __int8 *)(v32 - 1);
                  if (v34 == 43) {
                    break;
                  }
                  *v33++ = v34;
                  ++v32;
                  --v31;
                  if (!(v30 + v31)) {
                    goto LABEL_42;
                  }
                }
                *unsigned int v33 = 0;
                __strncpy_chk();
                __s[v31 - 1 + v52] = 0;
                hlp_NLUStrSet(*v12, "E_COMPPOS", __s);
              }
              else
              {
LABEL_42:
                v62[v30] = 0;
              }
              hlp_NLUStrSet(*(char **)(a4 + 408), "E_COMP", v62);
              log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing NLU=%s", v35, v36, v37, (uint64_t)v54);
              __int16 v38 = strlen(*(const char **)(a4 + 408));
              uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v60, 14, (unsigned __int16)(v38 + 1), *(void *)(a4 + 408), &v58);
              if ((v13 & 0x80000000) != 0) {
                goto LABEL_64;
              }
              *const void *v12 = 0;
            }
            if (hlp_NLUStrFind(v54, "I_COMP", &v53, &v52))
            {
              if (!*v10)
              {
                uint64_t v39 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
                *(void *)(a4 + 408) = v39;
                if (!v39)
                {
LABEL_68:
                  log_OutPublic(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 35000, 0, v16, v17, v18, v19, v51);
                  unsigned __int16 v50 = 8202;
LABEL_69:
                  uint64_t v9 = v50 | 0x89E00000;
LABEL_65:
                  if (*v10)
                  {
                    heap_Free(*(void **)(*(void *)a4 + 8), *(void *)(a4 + 408));
                    *(void *)(a4 + 408) = 0;
                    *(_WORD *)(a4 + 424) = 0;
                  }
                  return v9;
                }
                *uint64_t v10 = 1024;
              }
              uint64_t v8 = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), (_WORD *)(a4 + 424), v54);
              if ((v8 & 0x80000000) != 0) {
                return v8;
              }
              uint64_t v40 = v52;
              if (v52)
              {
                uint64_t v41 = 0;
                uint64_t v42 = v53 + 1;
                uint64_t v43 = v62;
                while (1)
                {
                  int v44 = *(unsigned __int8 *)(v42 - 1);
                  if (v44 == 43) {
                    break;
                  }
                  *v43++ = v44;
                  ++v42;
                  --v41;
                  if (!(v40 + v41)) {
                    goto LABEL_55;
                  }
                }
                *uint64_t v43 = 0;
                __strncpy_chk();
                __s[v41 - 1 + v52] = 0;
                hlp_NLUStrSet(*v12, "I_COMPPOS", __s);
              }
              else
              {
LABEL_55:
                v62[v40] = 0;
              }
              hlp_NLUStrSet(*(char **)(a4 + 408), "I_COMP", v62);
              log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing NLU=%s", v45, v46, v47, (uint64_t)v54);
              __int16 v48 = strlen(*(const char **)(a4 + 408));
              uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v60, 14, (unsigned __int16)(v48 + 1), *(void *)(a4 + 408), &v58);
              if ((v13 & 0x80000000) != 0) {
                goto LABEL_64;
              }
              *const void *v12 = 0;
            }
          }
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v60, &v60);
        if ((v9 & 0x80000000) == 0)
        {
          unsigned __int16 v11 = v60;
          if ((_WORD)v60) {
            continue;
          }
        }
        goto LABEL_65;
      }
    }
  }
  return v9;
}

uint64_t statcomp_getSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v101 = 0;
  int v100 = 0;
  unsigned int v99 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v95 = 0;
  unsigned int __s = 0;
  int v94 = 0;
  unsigned __int16 v93 = 0;
  a4[107] = log_GetLogLevel(*(void *)(*(void *)a4 + 32)) > 4;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v101 + 2);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a1 + 184))(a2, a3, HIWORD(v101), 0, (char *)&v100 + 2);
  if ((v9 & 0x80000000) == 0 && HIWORD(v100) == 1)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1 + 176))(a2, a3, HIWORD(v101), 0, &__s, &v100);
    if ((v9 & 0x80000000) == 0 && (unsigned __int16)v100 >= 2u)
    {
      unsigned __int16 v10 = strlen(__s);
      int v11 = v10;
      uint64_t v12 = (char *)heap_Calloc(*(void **)(*(void *)a4 + 8), 1, v10 + 1);
      *((void *)a4 + 60) = v12;
      if (v12)
      {
        strcpy(v12, __s);
        log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statCOMP : start processing=\"%s\"", v17, v18, v19, *((void *)a4 + 60));
        uint64_t v20 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
        *((void *)a4 + 51) = v20;
        if (v20)
        {
          *((_WORD *)a4 + 212) = 1024;
          uint64_t v21 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
          *((void *)a4 + 52) = v21;
          if (v21)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v101), &v101);
            if ((v8 & 0x80000000) == 0)
            {
              unsigned __int16 v88 = v10;
              uint64_t v22 = (unsigned __int16 *)(a4 + 108);
              while ((_WORD)v101)
              {
                uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
                if ((v8 & 0x80000000) != 0) {
                  return v8;
                }
                if (v99 <= 0xA && ((1 << v99) & 0x610) != 0)
                {
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v101, 1, 1, &v94, &v100);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v101, 2, 1, (char *)&v94 + 2, &v100);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  if ((unsigned __int16)v94 > HIWORD(v94)) {
                    return 2313174705;
                  }
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1 + 184))(a2, a3, (unsigned __int16)v101, 17, (char *)&v100 + 2);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  if (HIWORD(v100) == 1)
                  {
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v101, 17, 1, &v93, &v100);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                  }
                  else
                  {
                    unsigned __int16 v93 = v99 - 9 <= 1;
                  }
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v101, 3, &v95, &v100);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  if (HIWORD(v94) == (unsigned __int16)v94)
                  {
                    log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v24, v25, v26, HIWORD(v94));
                  }
                  else
                  {
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v101, 14, &v98, &v100);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                    uint64_t v27 = v98;
                    int v28 = v93;
                    __src = v95;
                    uint64_t v105 = 0;
                    unsigned __int16 v104 = 0;
                    uint64_t v103 = 0;
                    unsigned __int16 v102 = 0;
                    int v29 = strlen(v98);
                    uint64_t v30 = (char *)heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (v29 + 1));
                    if (!v30) {
                      goto LABEL_69;
                    }
                    unsigned __int16 v92 = v30;
                    strcpy(v30, v27);
                    uint64_t v34 = *((unsigned __int16 *)a4 + 220);
                    if (*((_WORD *)a4 + 220))
                    {
                      uint64_t v35 = 0;
                      uint64_t v36 = (unsigned __int16 *)(*(void *)v22 + 2);
                      while (1)
                      {
                        unsigned int v37 = *(v36 - 1);
                        if (__PAIR64__(*v36, v37) == __PAIR64__(HIWORD(v94), (unsigned __int16)v94)) {
                          break;
                        }
                        if ((unsigned __int16)v94 >= v37 && HIWORD(v94) <= *v36)
                        {
                          log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip subsumed word %d,%d (subsumed by word %d)", v31, v32, v33, (unsigned __int16)v94);
                          break;
                        }
                        ++v35;
                        v36 += 48;
                        if (v34 == v35) {
                          goto LABEL_36;
                        }
                      }
                    }
                    else
                    {
LABEL_36:
                      if (*((_WORD *)a4 + 221))
                      {
                        uint64_t v38 = *(void *)v22;
                        if ((int)v34 + 2 > *((unsigned __int16 *)a4 + 221))
                        {
                          uint64_t v39 = heap_Realloc(*(uint64_t **)(*(void *)a4 + 8), v38, 96 * *((unsigned __int16 *)a4 + 221) + 2016);
                          if (!v39) {
                            goto LABEL_83;
                          }
                          *((void *)a4 + 54) = v39;
                          bzero((void *)(v39 + 96 * *((unsigned __int16 *)a4 + 220)), 0x780uLL);
                          *((_WORD *)a4 + 221) += 20;
                          uint64_t v38 = *((void *)a4 + 54);
                        }
                      }
                      else
                      {
                        uint64_t v44 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 4801);
                        *((void *)a4 + 54) = v44;
                        if (!v44) {
                          goto LABEL_83;
                        }
                        uint64_t v38 = v44;
                        *((_WORD *)a4 + 221) = 50;
                      }
                      uint64_t v45 = v92;
                      uint64_t v46 = (_DWORD *)(v38 + 96 * *((unsigned __int16 *)a4 + 220));
                      *uint64_t v46 = v94;
                      v46[1] = v28 == 1;
                      if (hlp_NLUStrFind(v92, "POS", (uint64_t *)&v105, &v104))
                      {
                        int v47 = strlen(v105);
                        __int16 v48 = (char *)heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (v47 + 1));
                        *(void *)(*((void *)a4 + 54) + 96 * *((unsigned __int16 *)a4 + 220) + 32) = v48;
                        if (!v48) {
                          goto LABEL_83;
                        }
                        strcpy(v48, v105);
                        *(unsigned char *)(*(void *)(*((void *)a4 + 54) + 96 * *((unsigned __int16 *)a4 + 220) + 32) + v104) = 0;
                        uint64_t v45 = v92;
                      }
                      if (hlp_NLUStrFind(v45, "S_COMP", (uint64_t *)&v103, &v102))
                      {
                        int v49 = strlen(v103);
                        unsigned __int16 v50 = (char *)heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (v49 + 1));
                        *(void *)(*((void *)a4 + 54) + 96 * *((unsigned __int16 *)a4 + 220) + 40) = v50;
                        if (!v50) {
                          goto LABEL_83;
                        }
                        strcpy(v50, v103);
                        *(unsigned char *)(*(void *)(*((void *)a4 + 54) + 96 * *((unsigned __int16 *)a4 + 220) + 40) + v102) = 0;
                        uint64_t v45 = v92;
                      }
                      if (hlp_NLUStrFind(v45, "E_COMP", (uint64_t *)&v103, &v102))
                      {
                        int v51 = strlen(v103);
                        unsigned __int16 v52 = (char *)heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (v51 + 1));
                        *(void *)(*((void *)a4 + 54) + 96 * *((unsigned __int16 *)a4 + 220) + 48) = v52;
                        if (!v52) {
                          goto LABEL_83;
                        }
                        strcpy(v52, v103);
                        *(unsigned char *)(*(void *)(*((void *)a4 + 54) + 96 * *((unsigned __int16 *)a4 + 220) + 48) + v102) = 0;
                      }
                      int v89 = v22;
                      int v90 = v11;
                      uint64_t v53 = *((void *)a4 + 54);
                      unsigned int v54 = *((unsigned __int16 *)a4 + 220);
                      uint64_t v55 = v53 + 96 * *((unsigned __int16 *)a4 + 220);
                      *(_DWORD *)(v55 + 12) = 0;
                      int v56 = (_DWORD *)(v55 + 12);
                      v56[2] = 0;
                      unsigned int v57 = v56 + 2;
                      uint64_t v58 = HIWORD(v94);
                      int v59 = (const char *)*((void *)a4 + 60);
                      size_t v60 = strlen(v59);
                      int v61 = 0;
                      if (v60 > HIWORD(v94))
                      {
                        if (v59[HIWORD(v94)] == 95)
                        {
                          int v61 = 1;
                          *int v56 = 1;
                        }
                        else
                        {
                          int v61 = 0;
                        }
                      }
                      if ((_WORD)v94)
                      {
                        if (v59[(unsigned __int16)v94 - 1] == 95)
                        {
                          *unsigned int v57 = 1;
                          if (v61)
                          {
                            *int v56 = 0;
                            *unsigned int v57 = 0;
                          }
                        }
                      }
                      unsigned int v62 = v59[v58 - 1];
                      BOOL v63 = v62 <= 0x3B && ((1 << v62) & 0xC00100000000000) != 0;
                      int v11 = v90;
                      uint64_t v22 = v89;
                      *(_DWORD *)(v53 + 96 * v54 + 24) = v63;
                      int v64 = strlen(__src);
                      BOOL v65 = (char *)heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (v64 + 1));
                      *(void *)(*((void *)a4 + 54) + 96 * *((unsigned __int16 *)a4 + 220) + 56) = v65;
                      if (!v65)
                      {
LABEL_83:
                        uint64_t v9 = 2313166858;
                        log_OutPublic(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 35000, 0, v40, v41, v42, v43, v87);
                        heap_Free(*(void **)(*(void *)a4 + 8), (uint64_t)v92);
                        return v9;
                      }
                      strcpy(v65, __src);
                      ++*((_WORD *)a4 + 220);
                    }
                    heap_Free(*(void **)(*(void *)a4 + 8), (uint64_t)v92);
                  }
                }
                uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v101, &v101);
                if ((v9 & 0x80000000) != 0) {
                  return v9;
                }
              }
              uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v101), &v101);
              if ((v8 & 0x80000000) == 0)
              {
                while ((_WORD)v101)
                {
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  if (v99 == 6)
                  {
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v101, 1, 1, &v94, &v100);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v101, 2, 1, (char *)&v94 + 2, &v100);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                    if ((unsigned __int16)v94 > HIWORD(v94)) {
                      return 2313174705;
                    }
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1 + 176))(a2, a3, (unsigned __int16)v101, 4, &v97, &v100);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                    uint64_t v76 = addStatCOMPToken(*(void *)a4, (unsigned __int16 *)&v94, v97, v22, v72, v73, v74, v75);
                    if ((v76 & 0x80000000) != 0)
                    {
                      uint64_t v9 = v76;
                      if (v76 != -1981800448) {
                        return v9;
                      }
                    }
                  }
                  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v101, &v101);
                  if ((v9 & 0x80000000) != 0) {
                    return v9;
                  }
                }
                uint64_t v8 = validateUserCompoundWords((uint64_t *)a4, v66, 0, v67, v68, v69, v70, v71);
                if ((v8 & 0x80000000) == 0)
                {
                  if (v11)
                  {
                    uint64_t v80 = 0;
                    do
                    {
                      uint64_t v81 = *((void *)a4 + 60);
                      if (*(unsigned char *)(v81 + v80) == 95) {
                        *(unsigned char *)(v81 + v80) = 32;
                      }
                      ++v80;
                    }
                    while (v88 != v80);
                  }
                  uint64_t v82 = *((unsigned __int16 *)a4 + 220);
                  if (*((_WORD *)a4 + 220))
                  {
                    int v83 = 0;
                    uint64_t v84 = (int *)(*(void *)v22 + 20);
                    do
                    {
                      if (*(v84 - 2) == 1) {
                        int v83 = 1;
                      }
                      *(v84 - 1) = v83;
                      int v85 = *v84;
                      v84 += 24;
                      if (v85 == 1) {
                        int v83 = 0;
                      }
                      --v82;
                    }
                    while (v82);
                  }
                  log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statCOMP : internal processing=\"%s\"", v77, v78, v79, *((void *)a4 + 60));
                  return printstatCOMPSent(*(void *)a4, a4[107], (const char **)a4 + 51, *((char **)a4 + 52), (_WORD *)a4 + 212, (uint64_t)v22, *((void *)a4 + 60), (uint64_t)"after statcomp_getSentenceData()", 0);
                }
              }
            }
            return v8;
          }
        }
      }
LABEL_69:
      uint64_t v9 = 2313166858;
      log_OutPublic(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 35000, 0, v13, v14, v15, v16, v87);
    }
  }
  return v9;
}

uint64_t addStatCOMPToken(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a4[4];
  int v11 = *a2;
  if (!a4[4]) {
    goto LABEL_14;
  }
  uint64_t v12 = 0;
  int v13 = v10 + 1;
  uint64_t v14 = *(void *)a4;
  unsigned int v15 = a2[1];
  uint64_t v16 = (unsigned __int16 *)(*(void *)a4 + 2);
  while (1)
  {
    unsigned int v17 = *(v16 - 1);
    if (v11 == v17) {
      int v13 = v12;
    }
    unsigned int v18 = *v16;
    if (v15 == v18) {
      break;
    }
    if (v15 >= v17 && v15 < v18) {
      break;
    }
    v16 += 48;
    ++v12;
    int v11 = *a2;
    if (v10 == v12) {
      goto LABEL_14;
    }
  }
  if (v10 + 1 != (unsigned __int16)v13)
  {
    for (; (unsigned __int16)v13 <= (unsigned __int16)v12; ++v13)
      *(_DWORD *)(v14 + 96 * (unsigned __int16)v13 + 8) = 1;
    return 0;
  }
  else
  {
LABEL_14:
    uint64_t v20 = 2313166848;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"could not resolve token positions (find start and end) : token=%s from=%d to=%d", a6, a7, a8, a3);
    if (a4[4])
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"word[%d] %d,%d", v21, v22, v23, v25++);
        v24 += 96;
      }
      while (v25 < a4[4]);
    }
  }
  return v20;
}

uint64_t validateUserCompoundWords(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v25, 0, sizeof(v25));
  if (*((_WORD *)a1 + 220))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unsigned __int16 v11 = 0;
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = a1[54];
      if (*(void *)(v13 + v9 + 40))
      {
        if (v12 == 1)
        {
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : found consecutive S_COMP, assume %s on word %d is incorrect, try to continue...", a6, a7, a8, *(void *)(v13 + 96 * v11 + 40));
          uint64_t v13 = a1[54];
        }
        int v12 = 1;
        unsigned __int16 v11 = v10;
      }
      if (!*(void *)(v13 + v9 + 48)) {
        goto LABEL_13;
      }
      if (v12 != 1) {
        break;
      }
      uint64_t v14 = *(char **)(v13 + 96 * v11 + 40);
      if (strcmp(v14, *(const char **)(v13 + v9 + 48)))
      {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip user compound word as S_COMP(%s) and E_COMP(%s) fields differ", v15, v16, v17, (uint64_t)v14);
LABEL_12:
        int v12 = 0;
        goto LABEL_13;
      }
      unsigned int v18 = strchr(v14, 43);
      if (!v18)
      {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip user compound word as invalid fields in \"%s\"", v19, v20, v21, (uint64_t)v14);
        goto LABEL_12;
      }
      *unsigned int v18 = 0;
      uint64_t v22 = v18 + 1;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"VALID USER COMPOUND WORD ADD from %d to %d", v19, v20, v21, v11);
      uint64_t v23 = a1[54];
      *(unsigned char *)(v23 + 96 * v11 + 88) = 1;
      *(unsigned char *)(v23 + v9 + 89) = 1;
      uint64_t result = setCOMPValues(a1, v11, (unsigned __int16)v10, v25, v22, v14, 0, "MARKUP", "USER");
      int v12 = 0;
      if ((result & 0x80000000) != 0) {
        return result;
      }
LABEL_13:
      ++v10;
      v9 += 96;
      if (v10 >= *((unsigned __int16 *)a1 + 220)) {
        return 0;
      }
    }
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip user compound word as E_COMP(%s) found without starting S_COMP", a6, a7, a8, *(void *)(v13 + v9 + 48));
    goto LABEL_12;
  }
  return 0;
}

uint64_t printstatCOMPSent(uint64_t a1, int a2, const char **a3, char *a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  if (!a2) {
    return 0;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Sentence :%s", a6, a7, a8, a8);
  if (!*(_WORD *)(a6 + 8)) {
    return 0;
  }
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  if (a9 != 1)
  {
    uint64_t v17 = "[%2d] ";
    goto LABEL_6;
  }
  uint64_t v17 = "statCOMP [%2d] ";
  sprintf(a4, "statCOMP [%2d] ");
  while (1)
  {
    uint64_t v18 = statcomp_add2Str(a1, a3, a5, a4);
    if ((v18 & 0x80000000) != 0) {
      break;
    }
    strncpy(a4, (const char *)(a7 + *(unsigned __int16 *)(*(void *)a6 + v15)), *(unsigned __int16 *)(*(void *)a6 + v15 + 2) - (unint64_t)*(unsigned __int16 *)(*(void *)a6 + v15));
    a4[*(unsigned __int16 *)(*(void *)a6 + v15 + 2) - *(unsigned __int16 *)(*(void *)a6 + v15)] = 0;
    uint64_t v18 = statcomp_add2Str(a1, a3, a5, a4);
    if ((v18 & 0x80000000) != 0) {
      break;
    }
    uint64_t v18 = statcomp_add2Str(a1, a3, a5, " ");
    if ((v18 & 0x80000000) != 0) {
      break;
    }
    uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 32));
    if ((v22 & 0x80000000) != 0) {
      return v22;
    }
    uint64_t v23 = *(void *)a6;
    if (*(_DWORD *)(*(void *)a6 + v15 + 12) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " <HYPHEN");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(_DWORD *)(v23 + v15 + 20) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " HYPHEN>");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(_DWORD *)(v23 + v15 + 24) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " ENDINPUNC");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(_DWORD *)(v23 + v15 + 8) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " TOK");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(unsigned char *)(v23 + v15 + 88) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " <CW");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(void *)(v23 + v15 + 72))
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a5, " POS:");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 72));
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(void *)(v23 + v15 + 80))
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a5, " PROM:");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 80));
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(unsigned char *)(v23 + v15 + 89) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " CW>");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(void *)(v23 + v15 + 56))
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a5, " PRON:");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 56));
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(void *)(v23 + v15 + 64))
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a5, " PRON(new):");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 64));
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v19, v20, v21, (uint64_t)*a3);
    **a3 = 0;
    ++v16;
    v15 += 96;
    if (v16 >= *(unsigned __int16 *)(a6 + 8)) {
      return v22;
    }
LABEL_6:
    sprintf(a4, v17, v16);
  }
  return v18;
}

double statcomp_freeSentenceData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 408);
  if (v2)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v2);
    *(void *)(a1 + 408) = 0;
    *(_WORD *)(a1 + 424) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 416);
  if (v3)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v3);
    *(void *)(a1 + 416) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 432);
  if (*(_WORD *)(a1 + 440))
  {
    unint64_t v5 = 0;
    uint64_t v6 = 80;
    do
    {
      if (*(void *)(v4 + v6 - 48))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 48));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 48) = 0;
      }
      if (*(void *)(v4 + v6 - 8))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 8));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 8) = 0;
      }
      if (*(void *)(v4 + v6))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6) = 0;
      }
      if (*(void *)(v4 + v6 - 24))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 24));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 24) = 0;
      }
      if (*(void *)(v4 + v6 - 16))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 16));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 16) = 0;
      }
      if (*(void *)(v4 + v6 - 40))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 40));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 40) = 0;
      }
      if (*(void *)(v4 + v6 - 32))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 32));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 32) = 0;
      }
      ++v5;
      v6 += 96;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 440));
  }
  else if (!v4)
  {
    goto LABEL_25;
  }
  heap_Free(*(void **)(*(void *)a1 + 8), v4);
  *(void *)(a1 + 432) = 0;
LABEL_25:
  uint64_t v7 = *(void *)(a1 + 480);
  if (v7)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v7);
    *(void *)(a1 + 480) = 0;
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  return result;
}

uint64_t statcomp_processCompounds(void **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v348 = *MEMORY[0x263EF8340];
  unint64_t v10 = a1[9];
  unsigned __int16 v11 = (const char *)a1[39];
  int v12 = a1[40];
  uint64_t v14 = (char *)a1[45];
  uint64_t v13 = (char *)a1[46];
  unsigned __int16 v341 = 0;
  unsigned int v337 = 0;
  uint64_t v338 = 0;
  unsigned __int16 v335 = 0;
  *a2 = 0;
  int v336 = 0;
  v339 = 0;
  unsigned int v340 = 0;
  log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"Compound Processing : with multi-word window=%d", a6, a7, a8, *((unsigned __int16 *)a1 + 172));
  uint64_t v15 = (const char *)a1[60];
  a1[56] = v15;
  int v16 = strlen(v15);
  uint64_t v17 = heap_Calloc((void *)(*a1)[1], 1, (v16 + 1));
  a1[57] = (void *)v17;
  if (!v17) {
    goto LABEL_328;
  }
  uint64_t v307 = a2;
  int __dst = v13;
  v334 = a1 + 54;
  uint64_t v22 = *((unsigned __int16 *)a1 + 220);
  if (*((_WORD *)a1 + 220))
  {
    int v23 = 0;
    uint64_t v24 = (const char **)(*v334 + 32);
    do
    {
      unint64_t v25 = *v24;
      v24 += 12;
      v23 += strlen(v25) + 1;
      --v22;
    }
    while (v22);
  }
  else
  {
    LOWORD(v23) = 0;
  }
  uint64_t v26 = heap_Calloc((void *)(*a1)[1], 1, (unsigned __int16)v23 + 1);
  a1[58] = (void *)v26;
  if (!v26)
  {
LABEL_328:
    uint64_t v99 = 2313166858;
    log_OutPublic((*a1)[4], (uint64_t)"FE_POS", 35000, 0, v18, v19, v20, v21, v284);
    return v99;
  }
  uint64_t v306 = v11;
  unsigned int v27 = *((unsigned __int16 *)a1 + 220);
  if (!*((_WORD *)a1 + 220))
  {
LABEL_329:
    uint64_t v99 = printstatCOMPSent((uint64_t)*a1, *((_DWORD *)a1 + 107), (const char **)a1 + 51, (char *)a1[52], (_WORD *)a1 + 212, (uint64_t)v334, (uint64_t)a1[60], (uint64_t)"after statcomp_processCompounds()", 1);
    if ((v99 & 0x80000000) == 0) {
      goto LABEL_338;
    }
    return v99;
  }
  uint64_t v28 = 0;
  int v289 = 0;
  uint64_t v29 = 0;
  uint64_t v299 = v14;
  uint64_t v300 = v12;
  while (1)
  {
    uint64_t v30 = *v334;
    uint64_t v31 = (unsigned __int16)v29;
    if (*(_DWORD *)(*v334 + 96 * (unsigned __int16)v29 + 8) == 1)
    {
      LODWORD(v32) = v29;
      if ((unsigned __int16)v29 < (unsigned __int16)v27)
      {
        uint64_t v33 = (int *)(v30 + 96 * (unsigned __int16)v29 + 8);
        uint64_t v32 = (unsigned __int16)v29;
        while (1)
        {
          int v34 = *v33;
          v33 += 24;
          if (v34 != 1) {
            break;
          }
          if ((unsigned __int16)v27 == ++v32)
          {
            LODWORD(v32) = v27;
            break;
          }
        }
      }
      unsigned int v35 = (unsigned __int16)v29;
      if ((unsigned __int16)v29 != (unsigned __int16)v32)
      {
        LODWORD(v29) = (__PAIR64__(v32, *(_DWORD *)(v30 + 96 * (unsigned __int16)v32 + 8)) - 1) >> 32;
        unsigned int v35 = (unsigned __int16)(v32 - (*(_DWORD *)(v30 + 96 * (unsigned __int16)v32 + 8) == 0));
      }
      __int16 v36 = *(_WORD *)(v30 + 96 * v35 + 2);
      uint64_t v37 = *(unsigned __int16 *)(v30 + 96 * v31);
      unsigned __int16 v38 = v36 - v37;
      if ((v38 & 0xFF00) != 0) {
        size_t v39 = 256;
      }
      else {
        size_t v39 = v38;
      }
      strncpy((char *)a1[52], (const char *)a1[60] + v37, v39);
      *((unsigned char *)a1[52] + v39) = 0;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"skip TOK word \"%s\" from word %d to %d", v40, v41, v42, (uint64_t)a1[52]);
      goto LABEL_64;
    }
    if (*(unsigned char *)(v30 + 96 * (unsigned __int16)v29 + 88) == 1)
    {
      unsigned int v43 = (unsigned __int16)v29;
      if ((unsigned __int16)v29 < (unsigned __int16)v27)
      {
        unsigned int v43 = (unsigned __int16)v27;
        uint64_t v44 = (unsigned __int8 *)(v30 + 96 * (unsigned __int16)v29 + 89);
        uint64_t v29 = (unsigned __int16)v29;
        while (1)
        {
          int v45 = *v44;
          v44 += 96;
          if (v45) {
            break;
          }
          if ((unsigned __int16)v27 == ++v29)
          {
            LODWORD(v29) = v27;
            goto LABEL_60;
          }
        }
        unsigned int v43 = (unsigned __int16)v29;
      }
LABEL_60:
      __int16 v57 = *(_WORD *)(v30 + 96 * v43 + 2);
      uint64_t v58 = *(unsigned __int16 *)(v30 + 96 * v31);
      unsigned __int16 v59 = v57 - v58;
      if ((v59 & 0xFF00) != 0) {
        size_t v60 = 256;
      }
      else {
        size_t v60 = v59;
      }
      strncpy((char *)a1[52], (const char *)a1[60] + v58, v60);
      *((unsigned char *)a1[52] + v60) = 0;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"skip user marked compound word \"%s\" from word %d to %d", v61, v62, v63, (uint64_t)a1[52]);
      goto LABEL_64;
    }
    *(unsigned char *)a1[58] = 0;
    *(unsigned char *)a1[57] = 0;
    int v342 = 0;
    uint64_t v46 = *((unsigned __int16 *)a1 + 220);
    unsigned __int16 v47 = v46 + 1;
    __int16 v48 = a1[54];
    if (v46 <= (unsigned __int16)v29)
    {
      LODWORD(v51) = v29;
    }
    else
    {
      int v49 = 0;
      unsigned __int16 v50 = &v48[12 * (unsigned __int16)v29 + 11];
      uint64_t v51 = (unsigned __int16)v29;
      while (*((_DWORD *)v50 - 16) != 1 && *v50 != 1 && 1 - (int)v28 + (int)v51 < *((unsigned __int16 *)a1 + 172))
      {
        int v52 = *((_DWORD *)v50 - 19);
        int v53 = *((_DWORD *)v50 - 17);
        v50 += 96;
        if (v52 == 1)
        {
          int v49 = 1;
          unsigned __int16 v47 = v51;
        }
        if (v53 == 1) {
          int v49 = 0;
        }
        if (v46 == ++v51)
        {
          LODWORD(v51) = *((unsigned __int16 *)a1 + 220);
          break;
        }
      }
      if ((unsigned __int16)v51 > (unsigned __int16)v29) {
        LODWORD(v51) = v51 - (LOBYTE(v48[12 * (unsigned __int16)v51 + 11]) == 1);
      }
      if ((unsigned __int16)v51 > (unsigned __int16)v29) {
        LODWORD(v51) = v51 - (HIDWORD(v48[12 * (unsigned __int16)v51 + 1]) == 1);
      }
      if (v49 == 1 && !HIDWORD(v48[12 * (unsigned __int16)v51 + 2])) {
        LODWORD(v51) = v29;
      }
    }
    uint64_t v54 = v51 - (v46 == (unsigned __int16)v51);
    if (HIDWORD(v48[12 * (unsigned __int16)v54 + 2]) == 1 && v46 + 1 == v47) {
      goto LABEL_64;
    }
    if ((unsigned __int16)v29 <= (unsigned __int16)v54)
    {
      int v55 = 0;
      unsigned __int16 v56 = v29;
      do
      {
        if (HIDWORD(v48[12 * v56 + 1]) == 1) {
          int v55 = 1;
        }
        ++v56;
      }
      while (v56 <= (unsigned __int16)v54);
      if ((unsigned __int16)v29 <= (unsigned __int16)v54) {
        break;
      }
    }
LABEL_56:
    if (v336 == 1)
    {
      int v336 = 0;
      heap_Free((void *)(*a1)[1], (uint64_t)v339);
      v339 = 0;
      if (v340)
      {
        heap_Free((void *)(*a1)[1], (uint64_t)v340);
        unsigned int v340 = 0;
      }
    }
LABEL_64:
    uint64_t v29 = (v29 + 1);
    uint64_t v28 = (unsigned __int16)v29;
    unsigned int v27 = *((unsigned __int16 *)a1 + 220);
    if ((unsigned __int16)v29 >= v27) {
      goto LABEL_329;
    }
  }
  uint64_t v296 = 0;
  int v64 = 0;
  uint64_t v65 = v54;
  uint64_t v330 = (unsigned __int16)v29;
  unsigned int v298 = v10;
  do
  {
    BOOL v66 = (unsigned __int16)v65 != (unsigned __int16)v29 && v64 == 0;
    if (!v66) {
      break;
    }
    uint64_t v67 = 12 * v31;
    uint64_t v316 = (unsigned __int16)v65;
    uint64_t v331 = v65;
    uint64_t v68 = 3 * (unsigned __int16)v65;
    strncpy((char *)a1[52], (const char *)a1[60] + LOWORD(a1[54][12 * v31]), WORD1(a1[54][4 * v68]) - (unint64_t)LOWORD(a1[54][12 * v31]));
    uint64_t v72 = a1[54];
    uint64_t v73 = &v72[4 * v68];
    uint64_t v65 = v331;
    *((unsigned char *)a1[52] + *((unsigned __int16 *)v73 + 1) - LOWORD(v72[v67])) = 0;
    if ((unsigned __int16)v29 <= (unsigned __int16)v331)
    {
      unsigned __int16 v75 = 0;
      int v74 = 0;
      int v76 = 0;
      unsigned __int16 v77 = v29;
      do
      {
        uint64_t v78 = *v334 + 96 * v77;
        if (*(_DWORD *)(v78 + 12) == 1)
        {
          int v76 = 1;
          int v74 = 1;
          ++v75;
        }
        BOOL v79 = v76 == 0;
        if (*(_DWORD *)(v78 + 20) == 1)
        {
          int v76 = 0;
          int v74 = v79;
        }
        ++v77;
      }
      while (v77 <= (unsigned __int16)v331);
    }
    else
    {
      int v74 = 0;
      unsigned __int16 v75 = 0;
    }
    if (v74 == 1 || v75 >= 2u)
    {
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"skip bisected \"%s\"", v69, v70, v71, (uint64_t)a1[52]);
      goto LABEL_86;
    }
    unsigned __int16 v335 = 0;
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"processing [%d] \"%s\"", v69, v70, v71, v28);
    uint64_t v313 = v28;
    while (1)
    {
LABEL_89:
      if (v55 == 1)
      {
        uint64_t inited = isCompoundWordMember((uint64_t)a1, 1, (unsigned __int16)v29, (unsigned __int16)v65, &v342, &v341, &v335);
        uint64_t v82 = "HYPHEN";
        if ((inited & 0x80000000) != 0) {
          goto LABEL_331;
        }
      }
      else
      {
        uint64_t inited = isCompoundWordMember((uint64_t)a1, 0, (unsigned __int16)v29, (unsigned __int16)v65, &v342, &v341, &v335);
        uint64_t v82 = "OPEN";
        if ((inited & 0x80000000) != 0) {
          goto LABEL_331;
        }
      }
      ++v335;
      if (v342 == 1) {
        break;
      }
      if (!v342)
      {
        uint64_t v296 = v82;
        if (*(_DWORD *)(*v334 + 96 * v316 + 20) == 1)
        {
          for (; (unsigned __int16)v65 >= (unsigned __int16)v29; uint64_t v65 = (v65 - 1))
          {
            if (*(_DWORD *)(*v334 + 96 * (unsigned __int16)v65 + 12)) {
              break;
            }
          }
          int v64 = 0;
          goto LABEL_87;
        }
LABEL_86:
        int v64 = 0;
        uint64_t v65 = (v65 - 1);
        goto LABEL_87;
      }
    }
    uint64_t v296 = v82;
    unsigned int v83 = v341;
    uint64_t v84 = 15 * v341;
    int v85 = strcpy(v299, &v306[*((unsigned int *)v300 + HIDWORD(v10[v84]))]);
    strcpy(&v299[strlen(v85)], "_firstword");
    uint64_t v86 = strcpy(__dst, &v306[*((unsigned int *)v300 + HIDWORD(v10[v84]))]);
    strcpy(&__dst[strlen(v86)], "_lastword");
    unsigned int v87 = a1[9];
    unsigned __int16 v88 = (const char *)a1[39];
    uint64_t v322 = a1[40];
    int v342 = 0;
    uint64_t v28 = v313;
    uint64_t v89 = 12 * v330;
    strncpy((char *)a1[52], (const char *)a1[60] + LOWORD(a1[54][v89]), WORD1(a1[54][12 * v316]) - (unint64_t)LOWORD(a1[54][v89]));
    *((unsigned char *)a1[52] + WORD1(a1[54][12 * v316]) - LOWORD(a1[54][v89])) = 0;
    unsigned int v297 = v83;
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [FILTER] Checking Compound Word Membership Filter for [%d] word \"%s\" compound rule %d", v90, v91, v92, v313);
    unsigned __int16 v96 = &v87[v84];
    int v308 = &v87[v84 + 8];
    if (!*v308)
    {
      uint64_t v99 = 0;
      uint64_t v65 = v331;
LABEL_264:
      int v97 = 0;
      int v342 = 0;
      unsigned __int16 v227 = "  [FILTER] FAIL";
      goto LABEL_265;
    }
    unsigned int v324 = v88;
    int v97 = 0;
    uint64_t v98 = 0;
    int v286 = 0;
    int v288 = 0;
    LODWORD(v99) = 0;
    unsigned __int16 v287 = (int *)v96;
    int v100 = v96 + 7;
    uint64_t v101 = v96[7];
    uint64_t v311 = v96 + 7;
    uint64_t v309 = v29;
    do
    {
      unsigned int v326 = v99;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"  check filter \"%s\"", v93, v94, v95, (uint64_t)&v324[*((unsigned int *)v322 + *(unsigned int *)(v101 + 8 * v98))]);
      unsigned __int16 v102 = v100;
      uint64_t v103 = *v100;
      uint64_t v314 = 8 * v98;
      unsigned __int16 v104 = &v324[*((unsigned int *)v322 + *(unsigned int *)(v103 + 8 * v98))];
      uint64_t v315 = v98;
      if (!strcmp("ALGO_INLEXICON", v104))
      {
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call ALGO_INLEXICON with ARG %s", v105, v106, v107, (uint64_t)&v324[*((unsigned int *)v322 + *(unsigned int *)(v103 + 8 * v98 + 4))]);
        uint64_t v123 = *((unsigned int *)v322 + *(unsigned int *)(*v102 + 8 * v98 + 4));
        unsigned int v124 = a1[9];
        uint64_t v125 = a1[39];
        uint64_t v126 = a1[40];
        uint64_t v345 = 0;
        unsigned __int8 v343 = 0;
        int v342 = 0;
        strncpy((char *)a1[57], (const char *)a1[60] + LOWORD(a1[54][12 * v330]), WORD1(a1[54][12 * v316]) - (unint64_t)LOWORD(a1[54][12 * v330]));
        *((unsigned char *)a1[57] + WORD1(a1[54][12 * v316]) - LOWORD(a1[54][12 * v330])) = 0;
        strncpy(__s1, (const char *)a1[57], 0x7FuLL);
        char v347 = 0;
        uint64_t inited = ((uint64_t (*)(void *, void *, const char *, char *, uint64_t))a1[50][18])(a1[48], a1[49], "normal", __s1, 128);
        if ((inited & 0x80000000) != 0)
        {
LABEL_331:
          uint64_t v99 = inited;
          goto LABEL_338;
        }
        __int16 v344 = -1;
        uint64_t v99 = ((uint64_t (*)(void *, void *, char *, char *, char ***, __int16 *, unsigned __int8 *))a1[50][12])(a1[48], a1[49], (char *)v125 + *((unsigned int *)v126 + HIDWORD(v124[15 * v297])), __s1, &v345, &v344, &v343);
        uint64_t v29 = v309;
        if ((v99 & 0x80000000) != 0) {
          goto LABEL_338;
        }
        if (v344 != 1 || !v345)
        {
          int v97 = 0;
          int v342 = 0;
          uint64_t v65 = v331;
          int v100 = v311;
          uint64_t v28 = v313;
          uint64_t v166 = v314;
          goto LABEL_242;
        }
        uint64_t v127 = strchr(*v345, v343);
        uint64_t v28 = v313;
        if (v127)
        {
          uint64_t v132 = v127;
          *uint64_t v127 = 0;
          int v133 = strcmp(*v345, &v324[v123]);
          int v97 = 0;
          if (!v133)
          {
            int v97 = 1;
            int v342 = 1;
          }
          uint64_t v134 = v132 + 1;
          unsigned int v135 = strchr(v134, v343);
          if (v135)
          {
            uint64_t v136 = v135;
            *unsigned int v135 = 0;
            if (!v133)
            {
              int v200 = strlen(v134);
              uint64_t v201 = (char *)heap_Calloc((void *)(*a1)[1], 1, (v200 + 1));
              v339 = v201;
              if (!v201) {
                goto LABEL_335;
              }
              strcpy(v201, v134);
              int v336 = 1;
              unint64_t v202 = v136 + 1;
              unint64_t v203 = strchr(v136 + 1, v343);
              if (v203)
              {
                *unint64_t v203 = 0;
                size_t v204 = strlen(v136 + 1);
                uint64_t v65 = v331;
                int v100 = v311;
                if (v204)
                {
                  int v205 = (char *)heap_Calloc((void *)(*a1)[1], 1, (v204 + 1));
                  unsigned int v340 = v205;
                  if (!v205) {
                    goto LABEL_335;
                  }
                  strcpy(v205, v202);
                  int v336 = 1;
                }
              }
              else
              {
                uint64_t v65 = v331;
                int v100 = v311;
              }
              int v217 = *v287;
              uint64_t v218 = *v100;
              uint64_t v166 = v314;
              goto LABEL_241;
            }
            uint64_t v137 = strchr(v135 + 1, v343);
            if (v137) {
              *uint64_t v137 = 0;
            }
            goto LABEL_199;
          }
LABEL_333:
          uint64_t v279 = 35003;
        }
        else
        {
LABEL_332:
          uint64_t v279 = 35002;
        }
        uint64_t v99 = 2313166848;
        goto LABEL_336;
      }
      if (!strcmp("ALGO_EXTENDEDLEXMATCH", v104))
      {
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call ALGO_EXTENDEDLEXMATCH with ARG %s", v108, v109, v110, (uint64_t)&v324[*((unsigned int *)v322 + *(unsigned int *)(v103 + 8 * v98 + 4))]);
        int v327 = 0;
        uint64_t v290 = 0;
        int v301 = 0;
        uint64_t v138 = 0;
        int v310 = 0;
        int v305 = 0;
        int v319 = 0;
        uint64_t v139 = *((unsigned int *)v322 + *(unsigned int *)(*v311 + 8 * v98 + 4));
        int v304 = a1[45];
        unsigned int v302 = 0;
        unsigned __int16 v303 = a1[46];
        uint64_t v345 = 0;
        __s2 = (char *)&v324[v139];
        unsigned __int8 v343 = 0;
        int v342 = 0;
        char v140 = 1;
        uint64_t v29 = v309;
        while (1)
        {
          char v141 = v140;
          __int16 v344 = -1;
          unsigned int v142 = (char *)a1[57];
          int v143 = (const char *)a1[60];
          int v144 = a1[54];
          if (v141)
          {
            strncpy(v142, &v143[LOWORD(v144[12 * v330])], WORD1(v144[12 * v330]) - (unint64_t)LOWORD(v144[12 * v330]));
            *((unsigned char *)a1[57] + WORD1(a1[54][12 * v330]) - LOWORD(a1[54][12 * v330])) = 0;
            uint64_t v99 = ((uint64_t (*)(void *, void *, void *, void *, char ***, __int16 *, unsigned __int8 *))a1[50][12])(a1[48], a1[49], v304, a1[57], &v345, &v344, &v343);
            if ((v99 & 0x80000000) != 0) {
              goto LABEL_338;
            }
            if (v344 != 1) {
              goto LABEL_130;
            }
            int v148 = "MATCH ON FIRST WORD";
            if (!v345) {
              goto LABEL_130;
            }
          }
          else
          {
            strncpy(v142, &v143[LOWORD(v144[12 * v316])], WORD1(v144[12 * v316]) - (unint64_t)LOWORD(v144[12 * v316]));
            *((unsigned char *)a1[57] + WORD1(a1[54][12 * v316]) - LOWORD(a1[54][12 * v316])) = 0;
            strncpy(__s1, (const char *)a1[57], 0x7FuLL);
            char v347 = 0;
            uint64_t inited = ((uint64_t (*)(void *, void *, const char *, char *, uint64_t))a1[50][18])(a1[48], a1[49], "normal", __s1, 128);
            if ((inited & 0x80000000) != 0) {
              goto LABEL_331;
            }
            uint64_t v99 = ((uint64_t (*)(void *, void *, void *, char *, char ***, __int16 *, unsigned __int8 *))a1[50][12])(a1[48], a1[49], v303, __s1, &v345, &v344, &v343);
            if ((v99 & 0x80000000) != 0) {
              goto LABEL_338;
            }
            if (v344 != 1 || (int v148 = "MATCH ON LAST WORD", !v345))
            {
              uint64_t v154 = v138;
LABEL_223:
              uint64_t v165 = 0;
              BOOL v215 = v319 == 1;
              if (v319 != 1)
              {
                uint64_t v138 = v154;
                uint64_t v154 = v302;
                goto LABEL_234;
              }
              uint64_t v65 = v331;
              uint64_t v166 = v314;
              if (!v305)
              {
                int v342 = 1;
                v339 = v154;
                int v216 = v310;
                goto LABEL_238;
              }
              uint64_t v138 = v154;
              uint64_t v154 = v302;
LABEL_235:
              if (!v319 && v305 == 1)
              {
                int v342 = 1;
                v339 = v154;
                int v216 = v301;
LABEL_238:
                int v336 = v216;
                uint64_t v28 = v313;
LABEL_239:
                int v100 = v311;
LABEL_240:
                int v217 = *v287;
                uint64_t v218 = *v100;
LABEL_241:
                unsigned int v219 = *(_DWORD *)(v218 + v166);
                LODWORD(v338) = v217;
                unsigned int v337 = v219;
                int v97 = 1;
                goto LABEL_242;
              }
              if (v305 != 1) {
                BOOL v215 = 0;
              }
              if (!v215)
              {
                int v97 = 0;
                int v342 = 0;
                uint64_t v28 = v313;
                int v100 = v311;
                goto LABEL_242;
              }
              int v342 = 1;
              if (!strcmp(v138, v154))
              {
                v339 = v138;
                int v336 = v310;
                heap_Free((void *)(*a1)[1], (uint64_t)v154);
                goto LABEL_259;
              }
              if (v290 > v165)
              {
                v339 = v138;
                int v336 = v310;
                heap_Free((void *)(*a1)[1], (uint64_t)v154);
                log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCH in FIRST and LAST word PRM; chose FIRST on frequency (%d > %d) set PRM=%s",
                  v220,
                  v221,
                  v222,
                  v290);
                goto LABEL_259;
              }
              if (v165 > v290)
              {
                v339 = v154;
                int v336 = v301;
                heap_Free((void *)(*a1)[1], (uint64_t)v138);
                log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCH in FIRST and LAST word PRM; chose LAST on frequency (%d > %d) set PRM=%s",
                  v223,
                  v224,
                  v225,
                  v165);
LABEL_259:
                int v97 = v342;
                uint64_t v28 = v313;
                uint64_t v166 = v314;
                int v100 = v311;
                if (v342 != 1) {
                  goto LABEL_242;
                }
                goto LABEL_240;
              }
              heap_Free((void *)(*a1)[1], (uint64_t)v138);
              heap_Free((void *)(*a1)[1], (uint64_t)v154);
              int v226 = (char *)heap_Calloc((void *)(*a1)[1], 1, 3);
              v339 = v226;
              if (v226)
              {
                strcpy(v226, "LS");
                int v336 = 1;
                int v342 = 1;
                log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MISMATCH in FIRST and LAST word PRM; set default=%s",
                  v129,
                  v130,
                  v131,
                  (uint64_t)v226);
                uint64_t v28 = v313;
                uint64_t v166 = v314;
                goto LABEL_239;
              }
LABEL_335:
              uint64_t v279 = 35000;
              uint64_t v99 = 2313166858;
LABEL_336:
              uint64_t v280 = (*a1)[4];
LABEL_337:
              log_OutPublic(v280, (uint64_t)"FE_POS", v279, 0, v128, v129, v130, v131, v285);
              goto LABEL_338;
            }
          }
          log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)v148, v145, v146, v147, 0);
          unsigned __int16 v149 = strchr(*v345, v343);
          if (!v149) {
            goto LABEL_332;
          }
          *unsigned __int16 v149 = 0;
          int v150 = v149 + 1;
          uint64_t v151 = strchr(v149 + 1, v343);
          if (!v151) {
            goto LABEL_333;
          }
          uint64_t v152 = v151;
          int v153 = strcmp(*v345, __s2);
          *uint64_t v152 = 0;
          if (v153 && v327 != 1)
          {
LABEL_130:
            uint64_t v154 = v138;
            goto LABEL_151;
          }
          int v155 = strlen(v150);
          unsigned __int16 v156 = (char *)heap_Calloc((void *)(*a1)[1], 1, (v155 + 1));
          if (!v156) {
            goto LABEL_335;
          }
          uint64_t v154 = v156;
          uint64_t v157 = v302;
          if ((v141 & 1) == 0) {
            uint64_t v157 = v156;
          }
          uint64_t v295 = v157;
          int v158 = v301;
          if ((v141 & 1) == 0) {
            int v158 = 1;
          }
          int v294 = v158;
          if (v141) {
            __int16 v159 = v156;
          }
          else {
            __int16 v159 = v138;
          }
          int v293 = v159;
          if (v141) {
            int v160 = 1;
          }
          else {
            int v160 = v310;
          }
          int v161 = v305;
          if ((v141 & 1) == 0) {
            int v161 = 1;
          }
          int v291 = v161;
          int v292 = v160;
          if (v141) {
            int v162 = 1;
          }
          else {
            int v162 = v319;
          }
          strcpy(v156, v150);
          int v163 = strchr(v152 + 1, v343);
          if (v163)
          {
            char *v163 = 0;
            unsigned __int16 v164 = (unsigned __int16)LH_atoi(v152 + 1);
            uint64_t v165 = v164;
            if ((v141 & 1) == 0)
            {
              BOOL v215 = v319 == 1;
              int v305 = 1;
              int v301 = 1;
LABEL_234:
              uint64_t v65 = v331;
              uint64_t v166 = v314;
              goto LABEL_235;
            }
            int v327 = 1;
            int v319 = 1;
            int v310 = 1;
            uint64_t v290 = v164;
          }
          else
          {
            int v327 = 1;
            int v319 = v162;
            int v305 = v291;
            int v310 = v292;
            uint64_t v154 = v293;
            int v301 = v294;
            unsigned int v302 = v295;
          }
LABEL_151:
          char v140 = 0;
          uint64_t v138 = v154;
          if ((v141 & 1) == 0) {
            goto LABEL_223;
          }
        }
      }
      uint64_t v29 = v309;
      if (!strcmp("ALGO_EXTENDEDFIRSTWORDLEXMATCH", v104))
      {
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call ALGO_EXTENDEDFIRSTWORDLEXMATCH with ARG %s", v111, v112, v113, (uint64_t)&v324[*((unsigned int *)v322 + *(unsigned int *)(v103 + 8 * v98 + 4))]);
        uint64_t v167 = *((unsigned int *)v322 + *(unsigned int *)(*v311 + 8 * v98 + 4));
        uint64_t v168 = a1[45];
        *(void *)int __s1 = 0;
        LOBYTE(v344) = 0;
        int v342 = 0;
        LOWORD(v345) = -1;
        strncpy((char *)a1[57], (const char *)a1[60] + LOWORD(a1[54][12 * v330]), WORD1(a1[54][12 * v330]) - (unint64_t)LOWORD(a1[54][12 * v330]));
        *((unsigned char *)a1[57] + WORD1(a1[54][12 * v330]) - LOWORD(a1[54][12 * v330])) = 0;
        uint64_t v99 = ((uint64_t (*)(void *, void *, void *, void *, char *, char ***, __int16 *))a1[50][12])(a1[48], a1[49], v168, a1[57], __s1, &v345, &v344);
        uint64_t v28 = v313;
        if ((v99 & 0x80000000) != 0) {
          goto LABEL_338;
        }
        if ((unsigned __int16)v345 == 1 && *(void *)__s1)
        {
          log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCH ON FIRST WORD", v169, v170, v171, 0);
          uint64_t v172 = strchr(**(char ***)__s1, v344);
          if (v172)
          {
            size_t v173 = v172;
            *uint64_t v172 = 0;
            int v174 = strcmp(**(const char ***)__s1, &v324[v167]);
            int v97 = 0;
            if (!v174)
            {
              int v97 = 1;
              int v342 = 1;
            }
            uint64_t v175 = v173 + 1;
            uint64_t v176 = strchr(v175, v344);
            if (v176)
            {
              *uint64_t v176 = 0;
              if (!v174)
              {
                int v177 = strlen(v175);
                unsigned int v178 = (char *)heap_Calloc((void *)(*a1)[1], 1, (v177 + 1));
                v339 = v178;
                int v100 = v311;
                if (v178)
                {
                  strcpy(v178, v175);
                  int v97 = 1;
                  LODWORD(v338) = *v287;
                  uint64_t v166 = v314;
                  unsigned int v179 = *(_DWORD *)(*v311 + v314);
                  int v336 = 1;
                  unsigned int v337 = v179;
                  uint64_t v65 = v331;
                  goto LABEL_242;
                }
                goto LABEL_335;
              }
              goto LABEL_199;
            }
            uint64_t v279 = 35003;
          }
          else
          {
            uint64_t v279 = 35002;
          }
          uint64_t v99 = 2313166848;
          goto LABEL_336;
        }
        int v97 = 0;
        int v342 = 0;
LABEL_199:
        uint64_t v65 = v331;
        goto LABEL_200;
      }
      uint64_t v28 = v313;
      if (strcmp("FILTER_NO_TOKEN_NO_ABBREVIATION", v104))
      {
        uint64_t v65 = v331;
        if (strcmp("FILTER_BLOCK_ACROSS_TOKEN_BOUNDARIES", v104))
        {
          if (!strcmp("ELSE_IGNORE", v104)) {
            int v286 = 1;
          }
          else {
            log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    UNIMPLEMENTED filter %s - skip", v120, v121, v122, (uint64_t)v104);
          }
          int v100 = v311;
          uint64_t v166 = v314;
          uint64_t v99 = v326;
          goto LABEL_242;
        }
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call FILTER_BLOCK_ACROSS_TOKEN_BOUNDARIES", v117, v118, v119, 0);
        int v342 = 1;
        unsigned __int16 v209 = v309;
        while (1)
        {
          unsigned int v210 = v209;
          uint64_t v211 = 3 * v209;
          log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    word %d token=%d", v206, v207, v208, v209);
          uint64_t v212 = a1[54];
          unint64_t v213 = &v212[4 * v211];
          uint64_t v65 = v331;
          if (*((_DWORD *)v213 + 2) == 1
            && (v210 != (unsigned __int16)v309 && !LODWORD(v212[12 * v210 - 11])
             || v210 != (unsigned __int16)v331 && !LODWORD(v212[12 * v210 + 13])))
          {
            break;
          }
          unsigned __int16 v209 = v210 + 1;
          if ((unsigned __int16)(v210 + 1) > (unsigned __int16)v331)
          {
            uint64_t v99 = 0;
            int v97 = 1;
            int v288 = 1;
            goto LABEL_200;
          }
        }
        int v97 = 0;
        uint64_t v99 = 0;
        int v342 = 0;
LABEL_200:
        int v100 = v311;
        uint64_t v166 = v314;
        goto LABEL_242;
      }
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call FILTER_NO_TOKEN_NO_ABBREVIATION", v114, v115, v116, 0);
      int __s2a = 0;
      int v320 = 0;
      BOOL v328 = 0;
      uint64_t v99 = 0;
      uint64_t v183 = *((unsigned __int16 *)a1 + 174);
      int v184 = a1[44];
      int v342 = 1;
      unsigned __int16 v185 = v309;
      uint64_t v65 = v331;
      do
      {
        uint64_t v186 = v185;
        uint64_t v187 = 3 * v185;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    word %d token=%d singleChar=%d hyphen=%d", v180, v181, v182, v185);
        uint64_t v188 = a1[54];
        if (LODWORD(v188[4 * v187 + 1]) == 1)
        {
          int v97 = 0;
          int v342 = 0;
          goto LABEL_215;
        }
        if (LODWORD(v188[12 * v186 + 2]) == 1) {
          int v189 = v320 + 1;
        }
        else {
          int v189 = v320;
        }
        int v320 = v189;
        if (v186 != (unsigned __int16)v65)
        {
          if (LOWORD(v188[12 * v186]) + 1 != WORD1(v188[12 * v186])) {
            goto LABEL_195;
          }
LABEL_190:
          int v198 = __s2a;
          if (LODWORD(v188[12 * v186 + 2]) == 1) {
            int v198 = __s2a + 1;
          }
          int __s2a = v198;
          int v199 = v328;
          if (v186 == (unsigned __int16)v309) {
            int v199 = 1;
          }
          BOOL v328 = v199;
          goto LABEL_195;
        }
        strncpy((char *)a1[52], (const char *)a1[60] + LOWORD(v188[12 * v186]), WORD1(v188[12 * v186]) - (unint64_t)LOWORD(v188[12 * v186]));
        *((unsigned char *)a1[52] + WORD1(a1[54][12 * v186]) - LOWORD(a1[54][12 * v186])) = 0;
        strncpy(__s1, (const char *)a1[52], 0x7FuLL);
        char v347 = 0;
        uint64_t v99 = ((uint64_t (*)(void *, void *, const char *, char *, uint64_t))a1[50][18])(a1[48], a1[49], "normal", __s1, 128);
        if ((v99 & 0x80000000) != 0) {
          goto LABEL_338;
        }
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    check canonical form %s for last word (in case abbreviation)", v190, v191, v192, (uint64_t)__s1);
        if (!v183) {
          goto LABEL_187;
        }
        uint64_t v193 = 0;
        char v194 = 1;
        do
        {
          while (1)
          {
            uint64_t v195 = strstr(__s1, (const char *)v184[v193]);
            if (!v195 || v195 - __s1 != 1) {
              break;
            }
            char v194 = 0;
            *uint64_t v195 = 0;
            int v197 = __s2a;
            if (*(_DWORD *)(*v334 + 96 * v186 + 16) == 1) {
              int v197 = __s2a + 1;
            }
            int __s2a = v197;
            BOOL v328 = v328;
            BOOL v66 = v183 - 1 == v193++;
            if (v66) {
              goto LABEL_188;
            }
          }
          ++v193;
        }
        while (v183 != v193);
        if (v194) {
LABEL_187:
        }
          BOOL v328 = 0;
LABEL_188:
        uint64_t v188 = (void *)*v334;
        if (*(unsigned __int16 *)(*v334 + 96 * v186) + 1 == *(unsigned __int16 *)(*v334
                                                                                                 + 96
                                                                                                 * v186
                                                                                                 + 2)
          || strlen(__s1) == 1)
        {
          goto LABEL_190;
        }
LABEL_195:
        unsigned __int16 v185 = v186 + 1;
        uint64_t v65 = v331;
      }
      while ((unsigned __int16)(v186 + 1) <= (unsigned __int16)v331);
      if (v328)
      {
        int v342 = 0;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    found abbreviation", v180, v181, v182, 0);
        int v97 = 0;
LABEL_215:
        uint64_t v28 = v313;
        goto LABEL_216;
      }
      uint64_t v28 = v313;
      if ((unsigned __int16)__s2a == (unsigned __int16)v320)
      {
        int v342 = 0;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    found abbreviation (countHyphenSingleChar=%d,countHyphen=%d)", v180, v181, v182, (unsigned __int16)v320);
        int v97 = 0;
      }
      else
      {
        int v97 = 1;
      }
LABEL_216:
      int v100 = v311;
      uint64_t v166 = v314;
      if ((v99 & 0x80000000) != 0) {
        goto LABEL_338;
      }
      int v214 = v288;
      if (v97) {
        int v214 = 1;
      }
      int v288 = v214;
LABEL_242:
      uint64_t v101 = *v100;
      if (!strncmp(&v324[*((unsigned int *)v322 + *(unsigned int *)(*v100 + v166))], "FILTER_", 7uLL))
      {
        if (v97) {
          goto LABEL_246;
        }
        unsigned __int16 v227 = "  [FILTER] FAIL";
LABEL_265:
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)v227, v93, v94, v95, 0);
        if ((v99 & 0x80000000) != 0) {
          goto LABEL_338;
        }
        BOOL v66 = v97 == 1;
        unint64_t v10 = v298;
        if (v66)
        {
          int v64 = 1;
          int v289 = v65;
          goto LABEL_87;
        }
        goto LABEL_89;
      }
      if (v97 == 1)
      {
        unsigned __int16 v227 = "  [FILTER] SUCCESS";
        goto LABEL_265;
      }
LABEL_246:
      uint64_t v98 = v315 + 1;
    }
    while (v315 + 1 < (unint64_t)(unsigned __int16)*v308);
    if (v288 != 1)
    {
      uint64_t v65 = v331;
      goto LABEL_264;
    }
    uint64_t v65 = v331;
    if (v286 == 1)
    {
      int v97 = 0;
      int v342 = 0;
      unsigned __int16 v227 = "  [FILTER] SUCCESS but ELSE_IGNORE set so FAIL";
      goto LABEL_265;
    }
    int v64 = 1;
    int v342 = 1;
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [FILTER] SUCCESS", v93, v94, v95, 0);
    int v289 = v331;
    if ((v99 & 0x80000000) != 0) {
      goto LABEL_338;
    }
LABEL_87:
    unint64_t v10 = v298;
    uint64_t v31 = v330;
  }
  while ((unsigned __int16)v65 >= (unsigned __int16)v29);
  if (v64 != 1) {
    goto LABEL_56;
  }
  log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"COMPOUND WORD SUCCESSFULLY PROCESSED %d to %d", v19, v20, v21, v28);
  unsigned __int16 v231 = a1[9];
  unsigned int v332 = v341;
  uint64_t v232 = &v231[15 * v341];
  int v234 = *((unsigned __int16 *)v232 + 48);
  int v233 = (unsigned __int16 *)(v232 + 12);
  if (v234)
  {
    uint64_t v235 = 0;
    unint64_t v236 = 0;
    uint64_t v237 = a1[39];
    uint64_t v238 = a1[40];
    unsigned int v239 = &v231[15 * v341 + 11];
    while (1)
    {
      uint64_t v240 = *v239;
      unsigned __int8 v241 = (char *)v237 + *((unsigned int *)v238 + *(unsigned int *)(*v239 + v235));
      if (!strcmp("SETDEFAULT", v241)) {
        break;
      }
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"UNIMPLEMENTED POS rule %s %s - skip", v242, v243, v244, (uint64_t)v241);
      ++v236;
      v235 += 8;
      if (v236 >= *v233) {
        goto LABEL_286;
      }
    }
    unsigned int v323 = (char *)v237 + *((unsigned int *)v238 + *(unsigned int *)(v240 + v235 + 4));
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET SETDEFAULT POS = %s", v242, v243, v244, (uint64_t)v323);
  }
  else
  {
LABEL_286:
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET HARDCODED DEFAULT POS %s", v228, v229, v230, (uint64_t)"NN");
    unsigned int v323 = "NN";
  }
  uint64_t v248 = a1[9];
  unint64_t v249 = &v248[15 * v332];
  unsigned __int16 v250 = *((_WORD *)v249 + 56);
  unsigned int v325 = (unsigned __int16 *)(v249 + 14);
  if (!v250)
  {
LABEL_305:
    uint64_t v267 = "LS";
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET HARDCODED DEFAULT PROM %s", v245, v246, v247, (uint64_t)"LS");
LABEL_306:
    uint64_t v268 = 0;
    __int16 v269 = "DEFAULT";
LABEL_307:
    unint64_t v10 = v298;
    uint64_t v261 = a1[54];
    LOBYTE(v261[12 * v330 + 11]) = 1;
    BYTE1(v261[12 * (unsigned __int16)v289 + 11]) = 1;
    unsigned int v262 = (unsigned __int16)v29;
    LODWORD(v29) = v289;
    uint64_t inited = setCOMPValues((uint64_t *)a1, v262, (unsigned __int16)v289, &v336, v323, v267, v268, v269, v296);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_331;
    }
    *uint64_t v307 = 1;
    goto LABEL_56;
  }
  uint64_t v251 = 0;
  unint64_t v252 = 0;
  uint64_t v321 = a1[20];
  uint64_t v253 = (const char *)a1[39];
  unsigned __int16 v254 = a1[40];
  unsigned int v255 = &v248[15 * v332 + 13];
  int v333 = v336;
  uint64_t v329 = v337;
  while (2)
  {
    uint64_t v256 = *v255;
    unsigned int v257 = &v253[*((unsigned int *)v254 + *(unsigned int *)(*v255 + v251))];
    if (!strcmp("MATCHED_ALGO_INLEXICON", v257))
    {
      if (v333 == 1 && !strcmp("ALGO_INLEXICON", &v253[*((unsigned int *)v254 + v329)]))
      {
        uint64_t v267 = v339;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCHED_ALGO_INLEXICON : CACHED(ALGO_INLEXICON) PROM = %s", v245, v246, v247, (uint64_t)v339);
        uint64_t v268 = v340;
        __int16 v269 = "LEX";
        goto LABEL_307;
      }
LABEL_304:
      ++v252;
      v251 += 8;
      if (v252 >= v250) {
        goto LABEL_305;
      }
      continue;
    }
    break;
  }
  if (!strcmp("MATCHED_ALGO_EXTENDEDLEXMATCH", v257))
  {
    if (v333 == 1 && !strcmp("ALGO_EXTENDEDLEXMATCH", &v253[*((unsigned int *)v254 + v329)]))
    {
      uint64_t v267 = v339;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCHED_ALGO_EXTENDEDLEXMATCH : CACHED(ALGO_EXTENDEDLEXMATCH) PROM = %s", v245, v246, v247, (uint64_t)v339);
      uint64_t v268 = 0;
      __int16 v269 = "EXTENDEDLEX";
      goto LABEL_307;
    }
    goto LABEL_304;
  }
  if (!strcmp("MATCHED_ALGO_EXTENDEDFIRSTWORDLEXMATCH", v257))
  {
    if (v333 == 1 && !strcmp("ALGO_EXTENDEDFIRSTWORDLEXMATCH", &v253[*((unsigned int *)v254 + v329)]))
    {
      uint64_t v267 = v339;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCHED_ALGO_EXTENDEDFIRSTWORDLEXMATCH : CACHED(ALGO_EXTENDEDFIRSTWORDLEXMATCH) PROM = %s", v245, v246, v247, (uint64_t)v339);
      uint64_t v268 = 0;
      __int16 v269 = "EXTENDEDFIRSTWORDLEX";
      goto LABEL_307;
    }
    goto LABEL_304;
  }
  if (strcmp("IGTREE", v257))
  {
    if (!strcmp("SETDEFAULT", v257))
    {
      uint64_t v267 = &v253[*((unsigned int *)v254 + *(unsigned int *)(v256 + v251 + 4))];
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET SETDEFAULT PROM = %s", v258, v259, v260, (uint64_t)v267);
      goto LABEL_306;
    }
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"UNIMPLEMENTED PROM rule %s - skip", v258, v259, v260, (uint64_t)v257);
    unsigned __int16 v250 = *v325;
    goto LABEL_304;
  }
  uint64_t v263 = *((unsigned __int16 *)a1 + 72);
  uint64_t v264 = a1[20];
  if (*((_WORD *)a1 + 72))
  {
    uint64_t v265 = 0;
    uint64_t v266 = &v253[*((unsigned int *)v254 + *(unsigned int *)(v256 + v251 + 4))];
    while (strcmp((const char *)v264[v265], v266))
    {
      if (v263 == ++v265) {
        goto LABEL_314;
      }
    }
  }
  else
  {
LABEL_314:
    LOWORD(v265) = 0;
  }
  uint64_t v270 = a1[21][(unsigned __int16)v265];
  unsigned __int16 v271 = (uint64_t *)heap_Calloc((void *)(*a1)[1], 1, 8 * *(unsigned __int8 *)(v270 + 1296) - 8);
  uint64_t v272 = (uint64_t)*a1;
  if (!v271)
  {
    uint64_t v99 = 2313166858;
    uint64_t v280 = *(void *)(v272 + 32);
    uint64_t v279 = 35000;
    goto LABEL_337;
  }
  uint64_t inited = statcomp_initFeatureVector(v272, v271, (unsigned __int16)(*(unsigned __int8 *)(v270 + 1296) - 1));
  if ((inited & 0x80000000) != 0) {
    goto LABEL_331;
  }
  *(void *)int __s1 = 0;
  uint64_t v273 = setStatCOMPFeatureVector((unsigned __int16)v265, (uint64_t *)a1, (unsigned __int16)v29, v289, (uint64_t)v271);
  if ((v273 & 0x80000000) != 0 || (uint64_t v273 = igtree_Process(v270, (uint64_t)v271, __s1), (v273 & 0x80000000) != 0))
  {
    uint64_t v99 = v273;
    uint64_t v267 = 0;
  }
  else
  {
    uint64_t v267 = *(const char **)__s1;
    uint64_t v99 = statcomp_dumpFeatureVectorAndResult((uint64_t)*a1, *((_DWORD *)a1 + 107), (const char **)a1 + 51, (_WORD *)a1 + 212, "IGTREE RESULT=", (char *)v264[(unsigned __int16)v265], v270, (uint64_t)v271, *(char **)__s1);
  }
  statcomp_freeFeatureVector(*a1, v271, (unsigned __int16)(*(unsigned __int8 *)(v270 + 1296) - 1));
  heap_Free((void *)(*a1)[1], (uint64_t)v271);
  if ((v99 & 0x80000000) == 0)
  {
    __int16 v269 = (const char *)v321[(unsigned __int16)v265];
    int v277 = strcmp(v267, "=");
    uint64_t v278 = (*a1)[4];
    if (v277)
    {
      log_OutText(v278, (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET IGTREE %s PROM = %s", v274, v275, v276, (uint64_t)v269);
    }
    else
    {
      uint64_t v267 = "LS";
      log_OutText(v278, (uint64_t)"FE_POS", 5, 0, (uint64_t)"OVERRIDE IGTEE NULL VALUE : SET DEFAULT PROM %s", v274, v275, v276, (uint64_t)"LS");
    }
    uint64_t v268 = 0;
    goto LABEL_307;
  }
LABEL_338:
  if (v339)
  {
    heap_Free((void *)(*a1)[1], (uint64_t)v339);
    if (v340) {
      heap_Free((void *)(*a1)[1], (uint64_t)v340);
    }
  }
  uint64_t v281 = (uint64_t)a1[57];
  if (v281)
  {
    heap_Free((void *)(*a1)[1], v281);
    a1[57] = 0;
  }
  uint64_t v282 = (uint64_t)a1[58];
  if (v282)
  {
    heap_Free((void *)(*a1)[1], v282);
    a1[58] = 0;
  }
  return v99;
}

uint64_t isCompoundWordMember(uint64_t a1, int a2, unsigned int a3, unsigned int a4, _DWORD *a5, _WORD *a6, unsigned __int16 *a7)
{
  memcpy(__dst, (const void *)(a1 + 8), 0x178uLL);
  unsigned __int16 v13 = a4 - a3 + 1;
  long long v87 = 0uLL;
  *a5 = 0;
  uint64_t v14 = a3;
  uint64_t v15 = 96 * a3;
  unsigned int v81 = a4;
  uint64_t v16 = 3 * a4;
  strncpy(*(char **)(a1 + 416), (const char *)(*(void *)(a1 + 480) + *(unsigned __int16 *)(*(void *)(a1 + 432) + v15)), *(unsigned __int16 *)(*(void *)(a1 + 432) + 32 * v16 + 2)- (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 432) + v15));
  *(unsigned char *)(*(void *)(a1 + 416)
           - *(unsigned __int16 *)(*(void *)(a1 + 432) + v15)
           + *(unsigned __int16 *)(*(void *)(a1 + 432) + 32 * v16 + 2)) = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [MEMBERSHIP] Check word[%d] \"%s\" %d words", v17, v18, v19, a3);
  uint64_t matched = 0;
  uint64_t v24 = &__dst[12];
  unint64_t v25 = &__dst[13];
  if (a2)
  {
    uint64_t v24 = &__dst[10];
    unint64_t v25 = &__dst[11];
  }
  uint64_t v80 = a7;
  uint64_t v26 = *a7;
  uint64_t v83 = *(unsigned __int16 *)v25;
  if (v26 >= v83) {
    goto LABEL_51;
  }
  uint64_t matched = 0;
  unsigned int v27 = (uint64_t *)(a1 + 432);
  unint64_t v28 = v13;
  uint64_t v82 = *v24;
  int v85 = (_WORD *)(a1 + 424);
  uint64_t v86 = (const char **)(a1 + 408);
  unsigned int v74 = a3 + 1;
  uint64_t v77 = 96 * a3;
  uint64_t v78 = a5;
  int v76 = a2;
  unint64_t v75 = v28;
  while (1)
  {
    uint64_t v29 = *(unsigned __int16 *)(v82 + 2 * v26);
    if (v28 != *(unsigned __int16 *)(__dst[8] + 120 * v29 + 32)) {
      goto LABEL_50;
    }
    uint64_t v84 = v26;
    log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"    TRYING RULE label=%s (%d words) compound word rule idx=%d", v20, v21, v22, __dst[38] + *(unsigned int *)(__dst[39] + 4 * *(unsigned int *)(__dst[8] + 120 * v29)));
    if (!v28) {
      break;
    }
    unint64_t v30 = 0;
    int v31 = 0;
    uint64_t v32 = *v27;
    uint64_t v33 = v77;
    do
    {
      if (*(_DWORD *)(v32 + v33 + 12) == 1) {
        int v34 = 1;
      }
      else {
        int v34 = v31;
      }
      if (a2)
      {
        int v35 = *(_DWORD *)(*(void *)(__dst[8] + 120 * v29 + 8) + 4 * v30);
        BOOL v36 = v35 == 1 && v34 == 0;
        uint64_t v37 = "      Membership fails on wordType. Word %d is not hyphenated";
        if (v36
          || (!v35 ? (BOOL v38 = v34 == 1) : (BOOL v38 = 0),
              uint64_t v37 = "      Membership fails on wordType. Word %d should not be hyphenated)",
              v38))
        {
LABEL_21:
          log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v37, v20, v21, v22, v14 + v30);
          int v39 = 0;
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v37 = "      Membership fails on wordType. Word %d is hyphenated";
        if (v34 == 1) {
          goto LABEL_21;
        }
      }
      int v39 = 1;
LABEL_24:
      uint64_t v32 = *v27;
      if (*(_DWORD *)(*v27 + v33 + 20) == 1) {
        int v31 = 0;
      }
      else {
        int v31 = v34;
      }
      if (!v39) {
        break;
      }
      ++v30;
      v33 += 96;
    }
    while (v30 < v28);
    if (v39) {
      break;
    }
    a5 = v78;
    uint64_t v26 = v84;
LABEL_50:
    if (++v26 == v83)
    {
LABEL_51:
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [MEMBERSHIP] FAIL", v20, v21, v22, 0);
      *a5 = 0;
      return matched;
    }
  }
  if (*(_WORD *)(__dst[8] + 120 * v29 + 32))
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = v77 + 32;
    while (1)
    {
      strncpy(*(char **)(a1 + 456), (const char *)(*(void *)(a1 + 480) + *(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 32)), *(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 30)- (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 32));
      *(unsigned char *)(*(void *)(a1 + 456)
               - *(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 32)
               + *(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 30)) = 0;
      strcpy(*(char **)(a1 + 464), *(const char **)(*(void *)(a1 + 432) + v42));
      unsigned int v43 = " ";
      if (*(_DWORD *)(*(void *)(a1 + 432) + v42 - 24) == 1) {
        unsigned int v43 = "1";
      }
      *(void *)(a1 + 472) = v43;
      WORD2(v87) = v14 + v41;
      LODWORD(v87) = 2;
      *(_DWORD *)((char *)&v87 + 6) = 0;
      HIDWORD(v87) = 0;
      uint64_t matched = statcomp_matchRule(*(_DWORD *)(a1 + 428), v86, v85, *(char **)(a1 + 416), (uint64_t)__dst, a1 + 432, (unsigned int *)&v87, *(void *)(__dst[8] + 120 * v29 + 24) + v40, (int *)&v87 + 3);
      if ((matched & 0x80000000) != 0) {
        break;
      }
      uint64_t v47 = *(void *)(__dst[0] + 32);
      if (HIDWORD(v87) != 1)
      {
        log_OutText(v47, (uint64_t)"FE_POS", 5, 0, (uint64_t)"      Membership rule %d FAILS", v44, v45, v46, v41);
        log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"    Membership FAIL on WORDN criteria - try extra rules...", v48, v49, v50, 0);
        if (!*(_WORD *)(__dst[8] + 120 * v29 + 48))
        {
          log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"      no extra membership rules - FAIL", v51, v52, v53, 0);
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [MEMBERSHIP] FAIL", v64, v65, v66, 0);
          a5 = v78;
          uint64_t v26 = v84;
          a2 = v76;
          unint64_t v28 = v75;
          goto LABEL_50;
        }
        strncpy(*(char **)(a1 + 456), (const char *)(*(void *)(a1 + 480) + *(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v14)), *(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v81 + 2)- (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v14));
        *(unsigned char *)(*(void *)(a1 + 456)
                 - *(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v14)
                 + *(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v81 + 2)) = 0;
        strcpy(*(char **)(a1 + 464), *(const char **)(*(void *)(a1 + 432) + 96 * v14 + 32));
        a2 = v76;
        if (v81 >= (unsigned __int16)v74)
        {
          unsigned int v57 = v74;
          do
          {
            *(_WORD *)(*(void *)(a1 + 464) + strlen(*(const char **)(a1 + 464))) = 32;
            strcat(*(char **)(a1 + 464), *(const char **)(*(void *)(a1 + 432) + 96 * (unsigned __int16)v57++ + 32));
          }
          while (v81 >= (unsigned __int16)v57);
        }
        log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"      apply %d extra membership rules on ORT \"%s\" and POS \"%s\"", v54, v55, v56, *(unsigned __int16 *)(__dst[8] + 120 * v29 + 48));
        uint64_t v58 = __dst[8];
        a5 = v78;
        uint64_t v26 = v84;
        unint64_t v28 = v75;
        if (*(_WORD *)(__dst[8] + 120 * v29 + 48))
        {
          uint64_t v59 = 0;
          unint64_t v60 = 0;
          while (1)
          {
            WORD2(v87) = v14;
            LODWORD(v87) = 2;
            *(_DWORD *)((char *)&v87 + 6) = 0;
            HIDWORD(v87) = 0;
            uint64_t matched = statcomp_matchRule(*(_DWORD *)(a1 + 428), v86, v85, *(char **)(a1 + 416), (uint64_t)__dst, a1 + 432, (unsigned int *)&v87, *(void *)(v58 + 120 * v29 + 40) + v59, (int *)&v87 + 3);
            if ((matched & 0x80000000) != 0) {
              return matched;
            }
            if (HIDWORD(v87) == 1)
            {
              log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"        membership extra rule %d SUCCEEDS. Membership SUCCEEDS", v61, v62, v63, v60);
              *uint64_t v78 = 1;
              *a6 = v29;
              *uint64_t v80 = v84;
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [MEMBERSHIP] SUCCESS", v71, v72, v73, 0);
              return matched;
            }
            log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"        membership extra rule %d FAIL", v61, v62, v63, v60++);
            uint64_t v58 = __dst[8];
            v59 += 24;
            uint64_t v26 = v84;
            if (v60 >= *(unsigned __int16 *)(__dst[8] + 120 * v29 + 48)) {
              goto LABEL_50;
            }
          }
        }
        goto LABEL_50;
      }
      log_OutText(v47, (uint64_t)"FE_POS", 5, 0, (uint64_t)"      Membership rule %d SUCCEEDS", v44, v45, v46, v41++);
      v40 += 24;
      v42 += 96;
      if (v41 >= *(unsigned __int16 *)(__dst[8] + 120 * v29 + 32)) {
        goto LABEL_52;
      }
    }
  }
  else
  {
LABEL_52:
    log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"    Membership SUCCESS on WORDN criteria", v20, v21, v22, 0);
    *uint64_t v78 = 1;
    *a6 = v29;
    *uint64_t v80 = v84;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [MEMBERSHIP] SUCCESS", v67, v68, v69, 0);
  }
  return matched;
}

uint64_t setCOMPValues(uint64_t *a1, unsigned int a2, unsigned int a3, _DWORD *a4, const char *a5, const char *a6, char *a7, const char *a8, const char *a9)
{
  if (a2 > a3) {
    return 0;
  }
  if (a8) {
    BOOL v13 = *((unsigned __int16 *)a1 + 9) == 1;
  }
  else {
    BOOL v13 = 0;
  }
  int v15 = v13 && a9 != 0;
  uint64_t v38 = a1[40];
  uint64_t v39 = a1[39];
  unsigned __int16 v16 = a2;
  while (1)
  {
    if (v15)
    {
      __int16 v17 = strlen(a8);
      unsigned __int16 v18 = v17 + strlen(a9) + 4;
      if (*a4 == 1) {
        v18 += strlen((const char *)(v39 + *(unsigned int *)(v38 + 4 * a4[2]))) + 2;
      }
    }
    else
    {
      unsigned __int16 v18 = 0;
    }
    int v19 = strlen(a6);
    uint64_t v20 = heap_Calloc(*(void **)(*a1 + 8), 1, v19 + v18 + 3);
    *(void *)(a1[54] + 96 * v16 + 80) = v20;
    uint64_t v25 = *a1;
    if (!v20) {
      break;
    }
    uint64_t v26 = *(void **)(v25 + 8);
    int v27 = strlen(a5);
    uint64_t v28 = heap_Calloc(v26, 1, (v27 + 3));
    *(void *)(a1[54] + 96 * v16 + 72) = v28;
    if (!v28) {
      goto LABEL_32;
    }
    if (a7)
    {
      uint64_t v29 = strchr(a7, 32);
      unint64_t v30 = v29;
      if (v29) {
        *uint64_t v29 = 0;
      }
      int v31 = strlen(a7);
      uint64_t v32 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, (v31 + 1));
      *(void *)(a1[54] + 96 * v16 + 64) = v32;
      if (!v32)
      {
LABEL_32:
        uint64_t v25 = *a1;
        break;
      }
      strcpy(v32, a7);
      if (v30) {
        a7 = v30 + 1;
      }
    }
    uint64_t v33 = *(void *)(a1[54] + 96 * v16 + 80);
    *(unsigned char *)(v33 + 2) = 0;
    if (a2 == v16) {
      __int16 v34 = 11586;
    }
    else {
      __int16 v34 = 11593;
    }
    *(_WORD *)uint64_t v33 = v34;
    uint64_t v35 = *(void *)(a1[54] + 96 * v16 + 72);
    *(unsigned char *)(v35 + 2) = 0;
    *(_WORD *)uint64_t v35 = v34;
    strcat(*(char **)(a1[54] + 96 * v16 + 80), a6);
    if (v15)
    {
      *(_WORD *)(*(void *)(a1[54] + 96 * v16 + 80) + strlen(*(const char **)(a1[54] + 96 * v16 + 80))) = 43;
      strcat(*(char **)(a1[54] + 96 * v16 + 80), a9);
      *(_WORD *)(*(void *)(a1[54] + 96 * v16 + 80) + strlen(*(const char **)(a1[54] + 96 * v16 + 80))) = 43;
      strcat(*(char **)(a1[54] + 96 * v16 + 80), a8);
      if (*a4 == 1)
      {
        *(_WORD *)(*(void *)(a1[54] + 96 * v16 + 80) + strlen(*(const char **)(a1[54] + 96 * v16 + 80))) = 43;
        strcat(*(char **)(a1[54] + 96 * v16 + 80), (const char *)(v39 + *(unsigned int *)(v38 + 4 * a4[2])));
      }
    }
    strcat(*(char **)(a1[54] + 96 * v16++ + 72), a5);
    if (a3 < v16) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(v25 + 32), (uint64_t)"FE_POS", 35000, 0, v21, v22, v23, v24, v37);
  return 2313166858;
}

uint64_t statcomp_saveCompoundsToLingdb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v70 = 0;
  __int16 v69 = 0;
  uint64_t v68 = 0;
  __int16 v67 = 0;
  unsigned int __s = 0;
  __int16 v65 = 0;
  int v8 = *(_DWORD *)(a4 + 20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v70 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v70), &v70);
    if ((result & 0x80000000) == 0)
    {
      unsigned __int16 v10 = v70;
      if ((_WORD)v70)
      {
        unsigned __int16 v11 = (char *)&v68 + 2;
        int v12 = (unsigned char **)(a4 + 408);
        uint64_t v64 = (_WORD *)(a4 + 424);
        while (1)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, __int16 *))(a1 + 168))(a2, a3, v10, 0, 1, (char *)&v68 + 4, &v69);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (HIDWORD(v68) <= 0xA && ((1 << SBYTE4(v68)) & 0x610) != 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, __int16 *))(a1 + 168))(a2, a3, (unsigned __int16)v70, 1, 1, &v68, &v69);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1 + 168))(a2, a3, (unsigned __int16)v70, 2, 1, v11, &v69);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (*(_WORD *)(a4 + 440)) {
              break;
            }
          }
LABEL_17:
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v70, &v70);
          if ((result & 0x80000000) == 0)
          {
            unsigned __int16 v10 = v70;
            if ((_WORD)v70) {
              continue;
            }
          }
          return result;
        }
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        unsigned int v19 = WORD1(v68);
        uint64_t v20 = *(void *)(a4 + 432);
        int v21 = 1;
        while (*(unsigned __int16 *)(v20 + v17) != (unsigned __int16)v68 || !*(void *)(v20 + v17 + 80))
        {
          ++v18;
          ++v21;
          v17 += 96;
          if (96 * *(unsigned __int16 *)(a4 + 440) == v17) {
            goto LABEL_17;
          }
        }
        uint64_t v22 = 0;
        int v23 = 0;
        do
        {
          if (*(void *)(v20 + v22 + 40)) {
            int v24 = 1;
          }
          else {
            int v24 = v23;
          }
          if (*(void *)(v20 + v22 + 48)) {
            int v23 = 0;
          }
          else {
            int v23 = v24;
          }
          v22 += 96;
        }
        while (v17 + 96 != v22);
        if ((unsigned __int16)v68 > v19) {
          return 2313174705;
        }
        if (v19 == (unsigned __int16)v68)
        {
          log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v14, v15, v16, (unsigned __int16)v68);
          goto LABEL_17;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1 + 184))(a2, a3, (unsigned __int16)v70, 14, &v67);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (v67 == 1)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(a1 + 176))(a2, a3, (unsigned __int16)v70, 14, &__s, &v69);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v31 = *(void *)(a4 + 432) + v17;
          if (*(void *)(v31 + 40) || *(void *)(v31 + 48) || v23 == 1) {
            goto LABEL_64;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, __s);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, ";");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (v8 == 1)
          {
            uint64_t v35 = *(void *)(a4 + 432);
            int v36 = **(unsigned __int8 **)(v35 + v17 + 80);
            if (v36 == 73)
            {
              unsigned int v60 = *(unsigned __int16 *)(a4 + 440);
              if (96 * v60 - 96 != v17
                && ((int)v18 + 1 >= v60 || (uint64_t v61 = *(unsigned char **)(v35 + v17 + 176)) != 0 && *v61 == 73))
              {
                unsigned int v37 = (_WORD *)(a4 + 424);
                uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, "I_COMP:");
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, (char *)(*(void *)(*(void *)(a4 + 432) + v17 + 80) + 2));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t v38 = *(void *)a4;
                uint64_t v39 = (const char **)(a4 + 408);
                uint64_t v40 = (_WORD *)(a4 + 424);
                unint64_t v41 = ";I_COMPPOS:";
              }
              else
              {
                unsigned int v37 = (_WORD *)(a4 + 424);
                uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, "E_COMP:");
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, (char *)(*(void *)(*(void *)(a4 + 432) + v17 + 80) + 2));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t v38 = *(void *)a4;
                uint64_t v39 = (const char **)(a4 + 408);
                uint64_t v40 = (_WORD *)(a4 + 424);
                unint64_t v41 = ";E_COMPPOS:";
              }
            }
            else
            {
              if (v36 != 66)
              {
LABEL_88:
                log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing Word[%d] (appended) NLU=%s", v32, v33, v34, v18);
                __int16 v62 = strlen(*(const char **)(a4 + 408));
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v70, 14, (unsigned __int16)(v62 + 1), *(void *)(a4 + 408), &v65);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                *void *v12 = 0;
LABEL_64:
                if (*(void *)(*(void *)(a4 + 432) + 96 * v18 + 64))
                {
                  log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"updating Word[%d] compound word pronunciation from %s to %s", v28, v29, v30, v18);
                  uint64_t v55 = *(const char **)(*(void *)(a4 + 432) + 96 * v18 + 64);
                  __int16 v56 = strlen(v55);
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v70, 3, (unsigned __int16)(v56 + 1), v55, &v69);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                }
                goto LABEL_17;
              }
              unsigned int v37 = (_WORD *)(a4 + 424);
              uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, "S_COMP:");
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, (char *)(*(void *)(*(void *)(a4 + 432) + v17 + 80) + 2));
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v38 = *(void *)a4;
              uint64_t v39 = (const char **)(a4 + 408);
              uint64_t v40 = (_WORD *)(a4 + 424);
              unint64_t v41 = ";S_COMPPOS:";
            }
            uint64_t result = statcomp_add2Str(v38, v39, v40, v41);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v57 = *(void *)a4;
            uint64_t v58 = (char *)(*(void *)(*(void *)(a4 + 432) + v17 + 72) + 2);
          }
          else
          {
            unsigned int v37 = (_WORD *)(a4 + 424);
            uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, "COMP:");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, *(char **)(*(void *)(a4 + 432) + v17 + 80));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, ";COMPPOS:");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v57 = *(void *)a4;
            uint64_t v58 = *(char **)(*(void *)(a4 + 432) + v17 + 72);
          }
          uint64_t result = statcomp_add2Str(v57, (const char **)(a4 + 408), v37, v58);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_88;
        }
        uint64_t v63 = v11;
        if (v8 != 1)
        {
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, "COMP:");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, *(char **)(*(void *)(a4 + 432) + v17 + 80));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, ";COMPPOS:");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v49 = *(void *)a4;
          uint64_t v50 = *(char **)(*(void *)(a4 + 432) + v17 + 72);
          uint64_t v51 = (const char **)(a4 + 408);
          uint64_t v52 = (_WORD *)(a4 + 424);
          goto LABEL_61;
        }
        uint64_t v42 = *(void *)(a4 + 432);
        int v43 = **(unsigned __int8 **)(v42 + v17 + 80);
        if (v43 == 73)
        {
          unsigned int v53 = *(unsigned __int16 *)(a4 + 440);
          uint64_t v44 = (_WORD *)(a4 + 424);
          if (96 * v53 - 96 == v17
            || (int)v18 + 1 < v53 && ((uint64_t v59 = *(unsigned char **)(v42 + v17 + 176)) == 0 || *v59 != 73))
          {
            uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, "E_COMP:");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, (char *)(*(void *)(*(void *)(a4 + 432) + v17 + 80) + 2));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v45 = *(void *)a4;
            uint64_t v46 = (const char **)(a4 + 408);
            uint64_t v47 = (_WORD *)(a4 + 424);
            uint64_t v48 = ";E_COMPPOS:";
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v44 = (_WORD *)(a4 + 424);
          if (v43 == 66)
          {
            uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, "S_COMP:");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v64, (char *)(*(void *)(*(void *)(a4 + 432) + v17 + 80) + 2));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v45 = *(void *)a4;
            uint64_t v46 = (const char **)(a4 + 408);
            uint64_t v47 = (_WORD *)(a4 + 424);
            uint64_t v48 = ";S_COMPPOS:";
LABEL_59:
            uint64_t result = statcomp_add2Str(v45, v46, v47, v48);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v49 = *(void *)a4;
            uint64_t v50 = (char *)(*(void *)(*(void *)(a4 + 432) + v17 + 72) + 2);
            uint64_t v51 = (const char **)(a4 + 408);
            uint64_t v52 = v44;
LABEL_61:
            uint64_t result = statcomp_add2Str(v49, v51, v52, v50);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
        }
        log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing Word[%d] NLU=%s", v25, v26, v27, v18);
        __int16 v54 = strlen(*(const char **)(a4 + 408));
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v70, 14, (unsigned __int16)(v54 + 1), *(void *)(a4 + 408), &v65);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        *void *v12 = 0;
        unsigned __int16 v11 = v63;
        goto LABEL_64;
      }
    }
  }
  return result;
}

uint64_t statpos_get_info_from_dct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, char **a7, _DWORD *a8, const char *a9)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a4 + 96))(a2, a3, a5, a6, &__c[3], &__c[1], __c);
  if ((v14 & 0x80001FFF) == 0x8000000A) {
    goto LABEL_2;
  }
  uint64_t v19 = v14;
  if ((v14 & 0x80000000) != 0) {
    return 0;
  }
  if (*(_WORD *)&__c[1])
  {
    uint64_t v20 = strchr(**(char ***)&__c[3], __c[0]);
    if (v20) {
      *uint64_t v20 = 0;
    }
    if (!strcmp(a9, "STR"))
    {
      int v22 = strlen(**(const char ***)&__c[3]);
      int v23 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v22 + 1));
      *a7 = v23;
      if (!v23)
      {
LABEL_2:
        uint64_t v19 = 2313166858;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 34000, 0, v15, v16, v17, v18, v27);
        return v19;
      }
      strcpy(v23, **(const char ***)&__c[3]);
      if (!strcmp("fecfg", a5)) {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"set mde seg param %s = %s", v24, v25, v26, a6);
      }
    }
    else if (!strcmp(a9, "BOOL"))
    {
      *a8 = 0;
      *a8 = strcmp(**(const char ***)&__c[3], "1") == 0;
    }
  }
  return v19;
}

uint64_t _crfpos_concat_strings(uint64_t a1, uint64_t *a2, char **a3)
{
  unsigned int v6 = *((_DWORD *)a2 + 2);
  if (v6)
  {
    int v7 = 0;
    LODWORD(v8) = 0;
    uint64_t v9 = *a2;
    do
      uint64_t v8 = v8 + strlen(*(const char **)(v9 + 16 * v7++)) + 2;
    while (v6 > v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), 1, v8);
  *a3 = (char *)v10;
  if (v10)
  {
    if (*((_DWORD *)a2 + 2))
    {
      unsigned int v15 = 0;
      unsigned __int8 v16 = 0;
      do
      {
        strcat(*a3, *(const char **)(*a2 + 16 * v16));
        unsigned int v17 = *((_DWORD *)a2 + 2);
        if (v17 - 1 > v15)
        {
          *(_WORD *)&(*a3)[strlen(*a3)] = 32;
          unsigned int v17 = *((_DWORD *)a2 + 2);
        }
        unsigned int v15 = ++v16;
      }
      while (v17 > v16);
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v19);
    return 2313166858;
  }
}

uint64_t _crfpos_get_potential_tags(uint64_t a1, unsigned __int16 *a2, void *a3, uint64_t *a4, uint64_t *a5, int a6)
{
  unint64_t v8 = a2[4];
  if (!a2[4]) {
    goto LABEL_38;
  }
  if (*(_WORD *)(*(void *)a2 + 72))
  {
    BOOL v12 = 0;
    if (!a6) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v13 = (unsigned __int16 *)(*(void *)a2 + 232);
    uint64_t v14 = 1;
    do
    {
      unint64_t v15 = v14;
      if (v8 == v14) {
        break;
      }
      int v16 = *v13;
      v13 += 80;
      ++v14;
    }
    while (!v16);
    BOOL v12 = v15 >= v8;
    if (!a6) {
      goto LABEL_38;
    }
  }
  if (v12)
  {
LABEL_38:
    uint64_t v39 = 0;
    *a4 = 0;
    *a5 = 0;
    return v39;
  }
  uint64_t v17 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * v8);
  if (!v17 || (uint64_t v22 = v17, (v23 = heap_Calloc(*(void **)(a1 + 8), 1, 4 * a2[4])) == 0))
  {
    uint64_t v39 = 2313166858;
    uint64_t v40 = *(void *)(a1 + 32);
    goto LABEL_40;
  }
  uint64_t v24 = v23;
  int v43 = a4;
  uint64_t v44 = a1;
  if (!a2[4])
  {
LABEL_37:
    uint64_t v39 = 0;
    *int v43 = v22;
    *a5 = v24;
    return v39;
  }
  uint64_t v25 = 0;
  while (1)
  {
    uint64_t v26 = *(void *)a2;
    if (!*(unsigned char *)(*(void *)a2 + 160 * v25 + 128)) {
      break;
    }
    unsigned int v27 = *(const char **)(v26 + 160 * v25 + 136);
    if (!v27 || !*v27) {
      break;
    }
    uint64_t v28 = (char *)a3[42];
    if (!v28 || (uint64_t v29 = "ns", !strstr(v28, *(const char **)(v26 + 160 * v25 + 136))))
    {
      uint64_t v30 = (char *)a3[43];
      if (!v30 || (uint64_t v29 = "nt", !strstr(v30, v27)))
      {
        uint64_t v31 = (char *)a3[44];
        if (!v31 || (uint64_t v29 = "nz", !strstr(v31, v27)))
        {
          uint64_t v32 = (char *)a3[45];
          if (!v32 || (uint64_t v29 = "nx", !strstr(v32, v27)))
          {
            uint64_t v33 = (char *)a3[46];
            if (!v33) {
              break;
            }
            uint64_t v29 = "nr";
            if (!strstr(v33, v27)) {
              break;
            }
          }
        }
      }
    }
    *(_DWORD *)(v24 + 4 * v25) = 1;
    uint64_t v34 = (void *)heap_Calloc(*(void **)(v44 + 8), 1, 8);
    *(void *)(v22 + 8 * v25) = v34;
    if (!v34) {
      goto LABEL_42;
    }
    *uint64_t v34 = v29;
LABEL_36:
    if (++v25 >= (unint64_t)a2[4]) {
      goto LABEL_37;
    }
  }
  uint64_t v35 = *(unsigned __int16 *)(v26 + 160 * v25 + 72);
  *(_DWORD *)(v24 + 4 * v25) = v35;
  if (!v35)
  {
    *(void *)(v22 + 8 * v25) = 0;
    goto LABEL_36;
  }
  uint64_t v36 = heap_Calloc(*(void **)(v44 + 8), 1, 8 * v35);
  *(void *)(v22 + 8 * v25) = v36;
  if (v36)
  {
    unsigned int v37 = *(_DWORD *)(v24 + 4 * v25);
    if (v37)
    {
      int v38 = 0;
      do
      {
        *(void *)(*(void *)(v22 + 8 * v25) + 8 * (unsigned __int16)v38) = a3[37]
                                                                              + *(unsigned int *)(a3[38]
                                                                                                + 4
                                                                                                * *(unsigned int *)(*(void *)(*(void *)a2 + 160 * v25 + 64) + 24 * (unsigned __int16)v38));
        ++v38;
      }
      while (v37 > (unsigned __int16)v38);
    }
    goto LABEL_36;
  }
LABEL_42:
  uint64_t v39 = 2313166858;
  uint64_t v40 = *(void *)(v44 + 32);
LABEL_40:
  log_OutPublic(v40, (uint64_t)"FE_POS", 35000, 0, v18, v19, v20, v21, v42);
  return v39;
}

uint64_t statpos_get_broker_string(uint64_t a1, char **a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v11 = &byte_20D5A22AE;
  *(void *)BOOL v12 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v12);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v11);
    if ((result & 0x80000000) == 0)
    {
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      unint64_t v5 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 1024);
      *a2 = v5;
      if (v5)
      {
        return brokeraux_ComposeBrokerString(a1, (const char *)v13, 1, 1, *(char **)v12, 0, 0, v5, 0x400uLL);
      }
      else
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v6, v7, v8, v9, v10);
        return 2313166858;
      }
    }
  }
  return result;
}

uint64_t _crfpos_parse_params(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (!*(_DWORD *)(v2 + 40)) {
    return 0;
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(v2 + 32);
    if (!strcmp(*(const char **)(v6 + 16 * v5), "features")) {
      break;
    }
LABEL_23:
    if (++v5 >= (unint64_t)*(unsigned int *)(v2 + 40)) {
      return 0;
    }
  }
  uint64_t v7 = *(const char **)(v6 + 16 * v5 + 8);
  unsigned int v8 = strlen(v7);
  unsigned int v9 = v8;
  *(unsigned char *)(a2 + 32) = 0;
  unsigned __int8 v10 = 0;
  if (v8)
  {
    BOOL v11 = 0;
    uint64_t v12 = v8;
    uint64_t v13 = v7;
    do
    {
      if (v11)
      {
        BOOL v11 = *(unsigned __int8 *)v13 != 32;
      }
      else if (*v13 == 32)
      {
        BOOL v11 = 0;
      }
      else
      {
        *(unsigned char *)(a2 + 32) = ++v10;
        BOOL v11 = 1;
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * v10 + 8);
  *(void *)(a2 + 24) = v14;
  if (v14)
  {
    int v19 = 0;
    unsigned int v20 = 0;
    unsigned int v21 = 0;
    unsigned int v22 = 0;
    do
    {
      uint64_t v23 = v22;
      int v24 = v7[v22];
      if (v24 == 32)
      {
        LOBYTE(v24) = 0;
        unsigned int v25 = 0;
        int v19 = 0;
        uint64_t v26 = *(void *)(*(void *)(a2 + 24) + 8 * v21++);
      }
      else
      {
        if (v19)
        {
          uint64_t v26 = *(void *)(*(void *)(a2 + 24) + 8 * v21);
        }
        else
        {
          *(void *)(*(void *)(a2 + 24) + 8 * v21) = heap_Alloc(*(void *)(a1 + 8), 64);
          uint64_t v26 = *(void *)(*(void *)(a2 + 24) + 8 * v21);
          if (!v26) {
            goto LABEL_25;
          }
          LOBYTE(v24) = v7[v23];
        }
        unsigned int v25 = v20 + 1;
        int v19 = 1;
      }
      *(unsigned char *)(v26 + v20) = v24;
      unsigned int v22 = v23 + 1;
      unsigned int v20 = v25;
    }
    while ((int)v23 + 1 <= v9);
    uint64_t v2 = *(void *)(a2 + 8);
    goto LABEL_23;
  }
LABEL_25:
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v15, v16, v17, v18, v28);
  return 2313166858;
}

uint64_t statpos_crf_load(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, int a13)
{
  uint64_t broker_string = statpos_get_broker_string(a5, (char **)a10);
  if ((broker_string & 0x80000000) != 0) {
    goto LABEL_12;
  }
  uint64_t broker_string = crf_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, (void *)(a10 + 8), 2, *(void *)a10, (uint64_t)"CRPH", 1031, 0, 0);
  if ((broker_string & 0x80000000) != 0) {
    goto LABEL_12;
  }
  uint64_t info_from_dct = _crfpos_parse_params(a5, a10);
  if ((info_from_dct & 0x80000000) == 0)
  {
    *(_DWORD *)(a10 + 16) = 1;
    if (a13 == 1)
    {
      uint64_t v23 = heap_Calloc(*(void **)(a5 + 8), 1, 512);
      *(void *)(a11 + 296) = v23;
      if (!v23
        || (*(_DWORD *)(a11 + 316) = 512,
            uint64_t v28 = heap_Calloc(*(void **)(a5 + 8), 1, 128),
            (*(void *)(a11 + 304) = v28) == 0))
      {
LABEL_20:
        uint64_t info_from_dct = 2313166858;
        log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_POS", 35000, 0, v24, v25, v26, v27, v33);
        goto LABEL_13;
      }
      *(_DWORD *)(a11 + 320) = 32;
      *(_WORD *)(a11 + 312) = 0;
      *(_WORD *)(a11 + 324) = 0;
      uint64_t broker_string = statpos_get_info_from_dct(a5, a7, a8, a9, "fecfg", (uint64_t)"mdesegpos_nonfinalpunc", (char **)(a11 + 168), 0, "STR");
      if ((broker_string & 0x80000000) == 0)
      {
        uint64_t info_from_dct = statpos_get_info_from_dct(a5, a7, a8, a9, "fecfg", (uint64_t)"mdesegpos_finalpunc", (char **)(a11 + 176), 0, "STR");
        if ((info_from_dct & 0x80000000) != 0) {
          goto LABEL_13;
        }
        uint64_t v29 = heap_Calloc(*(void **)(a5 + 8), 1, 128);
        *a12 = v29;
        if (v29)
        {
          a12[2] = 128;
          uint64_t v30 = heap_Calloc(*(void **)(a5 + 8), 1, 128);
          a12[1] = v30;
          if (v30)
          {
            a12[3] = 128;
            goto LABEL_13;
          }
        }
        goto LABEL_20;
      }
LABEL_12:
      uint64_t info_from_dct = broker_string;
    }
  }
LABEL_13:
  if (*(void *)a10)
  {
    heap_Free(*(void **)(a5 + 8), *(void *)a10);
    *(void *)a10 = 0;
  }
  if ((info_from_dct & 0x80000000) != 0)
  {
    uint64_t v31 = *(void *)(a10 + 8);
    if (v31) {
      crf_Deinit_ReadOnly_DereferenceCnt(a5, a6, v31);
    }
    *(void *)(a10 + 8) = 0;
  }
  return info_from_dct;
}

uint64_t statpos_crf_unload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6)
{
  if (*(void *)a3)
  {
    heap_Free(*(void **)(a1 + 8), *(void *)a3);
    *(void *)a3 = 0;
  }
  if (*(_DWORD *)(a3 + 16) == 1)
  {
    uint64_t Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(a1, a2, *(void *)(a3 + 8));
    if ((Only_DereferenceCnt & 0x80000000) != 0) {
      return Only_DereferenceCnt;
    }
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t Only_DereferenceCnt = 0;
  }
  uint64_t v13 = *(void *)(a3 + 24);
  if (v13)
  {
    int v14 = *(unsigned __int8 *)(a3 + 32);
    if (v14 != 255)
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(*(void *)(a3 + 24) + 8 * v15);
        if (v16)
        {
          heap_Free(*(void **)(a1 + 8), v16);
          LOBYTE(v14) = *(unsigned char *)(a3 + 32);
        }
        ++v15;
      }
      while (v15 < (v14 + 1));
      uint64_t v13 = *(void *)(a3 + 24);
    }
    heap_Free(*(void **)(a1 + 8), v13);
    *(void *)(a3 + 24) = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  if (a6 == 1)
  {
    uint64_t v17 = *(void *)(a4 + 296);
    if (v17)
    {
      heap_Free(*(void **)(a1 + 8), v17);
      *(void *)(a4 + 296) = 0;
      *(_DWORD *)(a4 + 316) = 0;
    }
    uint64_t v18 = *(void *)(a4 + 304);
    if (v18)
    {
      heap_Free(*(void **)(a1 + 8), v18);
      *(void *)(a4 + 304) = 0;
      *(_DWORD *)(a4 + 320) = 0;
    }
    *(_WORD *)(a4 + 312) = 0;
    *(_WORD *)(a4 + 324) = 0;
    uint64_t v19 = *(void *)(a4 + 168);
    if (v19)
    {
      heap_Free(*(void **)(a1 + 8), v19);
      *(void *)(a4 + 168) = 0;
    }
    uint64_t v20 = *(void *)(a4 + 176);
    if (v20)
    {
      heap_Free(*(void **)(a1 + 8), v20);
      *(void *)(a4 + 176) = 0;
    }
    if (*a5)
    {
      heap_Free(*(void **)(a1 + 8), *a5);
      *a5 = 0;
    }
    uint64_t v21 = a5[1];
    if (v21)
    {
      heap_Free(*(void **)(a1 + 8), v21);
      a5[1] = 0;
    }
  }
  return Only_DereferenceCnt;
}

uint64_t statpos_crf_label(uint64_t a1, uint64_t a2, unsigned __int16 *a3, void *a4, uint64_t a5)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  v74[0] = 0;
  v74[1] = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  unsigned int v71 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * a3[4]);
  if (!v10)
  {
    uint64_t v44 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v67);
    return v44;
  }
  unint64_t v15 = (void *)v10;
  uint64_t features = statpos_fv_new(a1, *(unsigned __int8 *)(a2 + 32), v74);
  if ((features & 0x80000000) == 0)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FEATURE VECTOR", v17, v18, v19, 0);
    if (*(unsigned char *)(a2 + 32))
    {
      unint64_t v23 = 0;
      do
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v20, v21, v22, *(void *)(*(void *)(a2 + 24) + 8 * v23++));
      while (v23 < *(unsigned __int8 *)(a2 + 32));
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FEATURE VECTOR ENTRIES", v20, v21, v22, 0);
    if (a3[4])
    {
      uint64_t v24 = 0;
      while (1)
      {
        uint64_t features = statpos_get_features(a1, (uint64_t)a3, (uint64_t)a4, (unsigned __int16)v24, *(void *)(a2 + 24), *(unsigned __int8 *)(a2 + 32), v74, 0);
        if ((features & 0x80000000) != 0) {
          break;
        }
        uint64_t features = _crfpos_concat_strings(a1, v74, &v73);
        if ((features & 0x80000000) != 0) {
          break;
        }
        uint64_t v28 = v73;
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"features: %s", v25, v26, v27, (uint64_t)v73);
        v15[v24] = v28;
        uint64_t v73 = 0;
        if (++v24 >= (unint64_t)a3[4]) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      uint64_t features = _crfpos_get_potential_tags(a1, a3, a4, &v69, &v70, a5);
      if ((features & 0x80000000) == 0)
      {
        uint64_t v33 = v69;
        uint64_t v32 = v70;
        BOOL v34 = v70 != 0 && v69 != 0;
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Existing tags on words (ConstrainedDecoding:Keyword=%d:Actual=%s)", v29, v30, v31, a5);
        LODWORD(v38) = a3[4];
        if (v34 && a3[4])
        {
          unint64_t v39 = 0;
          do
          {
            v75[0] = 0;
            if (*(_DWORD *)(v32 + 4 * v39))
            {
              unint64_t v40 = 0;
              do
              {
                __strcat_chk();
                __strcat_chk();
                ++v40;
              }
              while (v40 < *(unsigned int *)(v32 + 4 * v39));
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v35, v36, v37, (uint64_t)v75);
            ++v39;
            unint64_t v38 = a3[4];
          }
          while (v39 < v38);
        }
        uint64_t v44 = crf_Process_Constrained(*(void *)(a2 + 8), v15, v38, &v72, &v71, v33, v32);
        if ((v44 & 0x80000000) == 0 && v71)
        {
          unint64_t v45 = 0;
          uint64_t v46 = 88;
          while (1)
          {
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"predicted label: %s on word %d", v41, v42, v43, *(void *)(v72 + 8 * v45));
            uint64_t v47 = *(char **)(v72 + 8 * v45);
            uint64_t v48 = strchr(v47, 32);
            if (v48)
            {
              *uint64_t v48 = 0;
              uint64_t v47 = *(char **)(v72 + 8 * v45);
            }
            int v49 = strlen(v47);
            uint64_t v50 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v49 + 100));
            *(void *)(*(void *)a3 + v46) = v50;
            if (!v50) {
              break;
            }
            strcpy(v50, *(const char **)(v72 + 8 * v45++));
            v46 += 160;
            if (v45 >= v71) {
              goto LABEL_28;
            }
          }
          uint64_t v44 = 2313166858;
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v51, v52, v53, v54, v68);
        }
        goto LABEL_28;
      }
    }
  }
  uint64_t v44 = features;
LABEL_28:
  crf_mde_seg_fv_dealloc((void *)a1, (uint64_t)v74);
  unsigned int v55 = a3[4];
  if (a3[4])
  {
    unint64_t v56 = 0;
    do
    {
      uint64_t v57 = v15[v56];
      if (v57)
      {
        heap_Free(*(void **)(a1 + 8), v57);
        unsigned int v55 = a3[4];
      }
      ++v56;
    }
    while (v56 < v55);
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v15);
  uint64_t v58 = v72;
  if (v72)
  {
    unint64_t v59 = v71;
    if (v71)
    {
      unint64_t v60 = 0;
      do
      {
        uint64_t v61 = *(void *)(v72 + 8 * v60);
        if (v61)
        {
          heap_Free(*(void **)(a1 + 8), v61);
          unint64_t v59 = v71;
        }
        ++v60;
      }
      while (v60 < v59);
      uint64_t v58 = v72;
    }
    heap_Free(*(void **)(a1 + 8), v58);
  }
  uint64_t v62 = v69;
  if (v69)
  {
    unsigned int v63 = a3[4];
    if (a3[4])
    {
      unint64_t v64 = 0;
      do
      {
        uint64_t v65 = *(void *)(v62 + 8 * v64);
        if (v65)
        {
          heap_Free(*(void **)(a1 + 8), v65);
          unsigned int v63 = a3[4];
        }
        *(void *)(v62 + 8 * v64++) = 0;
      }
      while (v64 < v63);
    }
    heap_Free(*(void **)(a1 + 8), v62);
  }
  if (v70) {
    heap_Free(*(void **)(a1 + 8), v70);
  }
  return v44;
}

uint64_t statpos_getSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v93 = 0;
  __int16 v92 = 0;
  uint64_t v91 = 0;
  uint64_t v90 = 0;
  unsigned int v88 = 0;
  int v89 = 0;
  uint64_t v86 = 0;
  long long v87 = 0;
  int v85 = 0;
  int v83 = 0;
  unsigned int v84 = 0;
  uint64_t v10 = *(void *)a4;
  *(_DWORD *)(a4 + 748) = log_GetLogLevel(*(void *)(*(void *)a4 + 32)) > 4;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v93 + 2);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1 + 184))(a2, a3, HIWORD(v93), 0, &v92);
  if ((v12 & 0x80000000) == 0 && v92 == 1)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1 + 176))(a2, a3, HIWORD(v93), 0, &v91, &v89);
    if ((v12 & 0x80000000) == 0 && (unsigned __int16)v89 >= 2u)
    {
      uint64_t v16 = (void *)(a4 + 648);
      log_OutText(*(void *)(v10 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"new POS : processing=\"%s\"", v13, v14, v15, (uint64_t)v91);
      uint64_t v17 = heap_Calloc(*(void **)(v10 + 8), 1, 128);
      if (v17)
      {
        uint64_t v22 = v17;
        for (uint64_t i = 0; i != 128; i += 8)
        {
          uint64_t v24 = heap_Calloc(*(void **)(v10 + 8), 1, 16);
          *(void *)(v22 + i) = v24;
          if (!v24) {
            goto LABEL_54;
          }
        }
        uint64_t v29 = heap_Calloc(*(void **)(v10 + 8), 1, 1024);
        *(void *)(a4 + 728) = v29;
        if (!v29
          || (*(_WORD *)(a4 + 744) = 1024,
              uint64_t v30 = heap_Calloc(*(void **)(v10 + 8), 1, 1024),
              (*(void *)(a4 + 736) = v30) == 0))
        {
LABEL_54:
          uint64_t v12 = 2313166858;
          log_OutPublic(*(void *)(v10 + 32), (uint64_t)"FE_POS", 35000, 0, v25, v26, v27, v28, v78);
          uint64_t v36 = 0;
          goto LABEL_55;
        }
        __int16 v31 = strlen(v91);
        uint64_t v36 = (char *)heap_Calloc(*(void **)(v10 + 8), 1, (unsigned __int16)(v31 + 1));
        if (v36)
        {
          uint64_t v81 = a4 + 8;
          statpos_initCache(a4 + 648);
          uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v93), &v93);
          if ((AddPOI & 0x80000000) == 0)
          {
            uint64_t v12 = 2313174705;
            uint64_t v80 = v36;
            while ((_WORD)v93)
            {
              uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
              if ((AddPOI & 0x80000000) != 0) {
                goto LABEL_119;
              }
              if (v88 <= 0xA && ((1 << v88) & 0x610) != 0)
              {
                uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v93, 1, 1, &v84, &v89);
                if ((AddPOI & 0x80000000) != 0) {
                  goto LABEL_119;
                }
                uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v93, 2, 1, (char *)&v84 + 2, &v89);
                if ((AddPOI & 0x80000000) != 0) {
                  goto LABEL_119;
                }
                if ((unsigned __int16)v84 > HIWORD(v84)) {
                  goto LABEL_55;
                }
                uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1 + 184))(a2, a3, (unsigned __int16)v93, 17, &v92);
                if ((v11 & 0x80000000) != 0) {
                  return v11;
                }
                if (v92 == 1)
                {
                  uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v93, 17, 1, (char *)&v83 + 2, &v89);
                  if ((AddPOI & 0x80000000) != 0) {
                    goto LABEL_119;
                  }
                }
                else
                {
                  HIWORD(v83) = v88 - 9 <= 1;
                }
                strncpy(v36, &v91[(unsigned __int16)v84], HIWORD(v84) - (unint64_t)(unsigned __int16)v84);
                v36[HIWORD(v84) - (unsigned __int16)v84] = 0;
                if (HIWORD(v84) == (unsigned __int16)v84)
                {
                  log_OutText(*(void *)(v10 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v39, v40, v41, HIWORD(v84));
                }
                else
                {
                  uint64_t AddPOI = addWord_0(v10, v81, a4 + 648, v36, (unsigned __int16 *)&v84, HIWORD(v83), &v83, v41);
                  if ((AddPOI & 0x80000000) != 0) {
                    goto LABEL_119;
                  }
                  size_t v42 = strlen(v36);
                  if (v42)
                  {
                    unsigned int v43 = v36[v42 - 1];
                    if (v43 <= 0x3B && ((1 << v43) & 0xC00100000000000) != 0) {
                      *(_DWORD *)(*(void *)(a4 + 648) + 160 * *(unsigned __int16 *)(a4 + 656) - 148) = 1;
                    }
                  }
                  uint64_t v44 = *(void *)(a4 + 648) + 160 * *(unsigned __int16 *)(a4 + 656);
                  *(_DWORD *)(v44 - 136) = 0;
                  *(_DWORD *)(v44 - 136) = v88 == 4;
                  uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v93, 3, &v85, &v89);
                  if ((AddPOI & 0x80000000) != 0) {
                    goto LABEL_119;
                  }
                  uint64_t v45 = *(void *)(a4 + 648);
                  int v46 = *(unsigned __int16 *)(a4 + 656) - 1;
                  if (*v85) {
                    *(_DWORD *)(v45 + 160 * v46 + 24) = 1;
                  }
                  uint64_t v47 = v91;
                  unsigned int v48 = HIWORD(v84);
                  *(_DWORD *)(v45 + 160 * v46 + 16) = v91[HIWORD(v84)] == 95;
                  *(_DWORD *)(*(void *)(a4 + 648) + 160 * *(unsigned __int16 *)(a4 + 656) - 140) = isFollowedbySpace(v81, v47, v48);
                  uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v93, 5, &v86, &v89);
                  if ((v49 & 0x80000000) != 0
                    || (uint64_t v49 = addPOS(v10, v81, a4 + 648, (unsigned __int16)(*(_WORD *)(a4 + 656) - 1), v86, v93, v22, &v83, a5), (v49 & 0x80000000) != 0))
                  {
                    uint64_t v12 = v49;
                    uint64_t v36 = v80;
                    goto LABEL_55;
                  }
                  uint64_t AddPOI = readAddPOI(a1, a2, a3, v10, (void *)(a4 + 648), (unsigned __int16)(*(_WORD *)(a4 + 656) - 1), (unsigned __int16)v93);
                  uint64_t v36 = v80;
                  if ((AddPOI & 0x80000000) != 0) {
                    goto LABEL_119;
                  }
                  if (*(_DWORD *)(a4 + 1416) == 1)
                  {
                    uint64_t v82 = 0;
                    uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1 + 184))(a2, a3, (unsigned __int16)v93, 14, &v92);
                    if ((AddPOI & 0x80000000) != 0) {
                      goto LABEL_119;
                    }
                    if (v92)
                    {
                      uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v93, 14, &v82, &v89);
                      if ((AddPOI & 0x80000000) != 0) {
                        goto LABEL_119;
                      }
                      if ((unsigned __int16)v89 >= 2u)
                      {
                        uint64_t AddPOI = readPOSandPHRfromNLU(v10, v81, (uint64_t *)(a4 + 648), v82, (unsigned __int16)(*(_WORD *)(a4 + 656) - 1));
                        if ((AddPOI & 0x80000000) != 0) {
                          goto LABEL_119;
                        }
                      }
                    }
                    else
                    {
                      unint64_t v79 = v79 & 0xFFFFFFFF00000000 | v84;
                      uint64_t AddPOI = readPOSandPHRfromNLUMarkers(v10, v81, (uint64_t *)(a4 + 648), a2, a3, a1, HIWORD(v93), v91, v79, *(_WORD *)(a4 + 656) - 1);
                      if ((AddPOI & 0x80000000) != 0) {
                        goto LABEL_119;
                      }
                    }
                  }
                }
              }
              uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v93, &v93);
              if ((AddPOI & 0x80000000) != 0) {
                goto LABEL_119;
              }
            }
            uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v93), &v93);
            if ((AddPOI & 0x80000000) == 0)
            {
              while ((_WORD)v93)
              {
                uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
                if ((AddPOI & 0x80000000) != 0) {
                  goto LABEL_119;
                }
                if (v88 != 6) {
                  goto LABEL_122;
                }
                uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v93, 1, 1, &v84, &v89);
                if ((AddPOI & 0x80000000) == 0)
                {
                  uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v93, 2, 1, (char *)&v84 + 2, &v89);
                  if ((AddPOI & 0x80000000) == 0)
                  {
                    if ((unsigned __int16)v84 > HIWORD(v84)) {
                      goto LABEL_55;
                    }
                    uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v93, 4, &v87, &v89);
                    if ((AddPOI & 0x80000000) == 0)
                    {
                      uint64_t AddPOI = addToken_0(v10, (uint64_t *)(a4 + 648), v81, (unsigned __int16 *)&v84, v87, v54, v55, v56);
                      if ((AddPOI & 0x80000000) == 0 || AddPOI == -1981800448)
                      {
LABEL_122:
                        uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v93, &v93);
                        if ((AddPOI & 0x80000000) == 0) {
                          continue;
                        }
                      }
                    }
                  }
                }
                goto LABEL_119;
              }
              uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1 + 176))(a2, a3, HIWORD(v93), 1, &v90, (char *)&v89 + 2);
              if ((AddPOI & 0x80000000) == 0)
              {
                unsigned __int16 v57 = HIWORD(v89);
                if (HIWORD(v89))
                {
                  int v58 = 0;
                  do
                  {
                    uint64_t v59 = (unsigned __int16)v58;
                    if (*(_DWORD *)(v90 + 32 * (unsigned __int16)v58) == 34)
                    {
                      if ((unsigned __int16)++v58 >= v57) {
                        goto LABEL_93;
                      }
                      do
                      {
                        int v60 = *(_DWORD *)(v90 + 32 * (unsigned __int16)v58);
                        if (v60 != 21) {
                          ++v58;
                        }
                      }
                      while ((unsigned __int16)v58 < v57 && v60 != 21);
                      if (v60 == 21)
                      {
                        int v63 = *(_DWORD *)(v90 + 32 * v59 + 12);
                        int v64 = *(_DWORD *)(v90 + 12);
                        LOWORD(v63) = v63 - v64;
                        int v62 = *(_DWORD *)(v90 + 32 * (unsigned __int16)v58 + 12) - v64;
                      }
                      else
                      {
LABEL_93:
                        int v62 = *(_DWORD *)(v90 + 16);
                        int v63 = *(_DWORD *)(v90 + 32 * v59 + 12) - *(_DWORD *)(v90 + 12);
                      }
                      setPhoneticRange_0((unsigned __int16 **)(a4 + 648), (unsigned __int16)v63, (unsigned __int16)v62);
                    }
                    ++v58;
                    unsigned __int16 v57 = HIWORD(v89);
                  }
                  while (HIWORD(v89) > (unsigned __int16)v58);
                }
                uint64_t AddPOI = markPhoneticRegions(v10, (uint64_t *)(a4 + 648));
                if ((AddPOI & 0x80000000) == 0)
                {
                  if (*(_DWORD *)(a4 + 1416) != 1) {
                    goto LABEL_117;
                  }
                  unsigned int v69 = *(unsigned __int16 *)(a4 + 656);
                  if (*(_WORD *)(a4 + 656))
                  {
                    unint64_t v70 = 0;
                    do
                    {
                      if (!HIWORD(v89)) {
                        goto LABEL_113;
                      }
                      unint64_t v71 = 0;
                      do
                      {
                        while (*(_DWORD *)(v90 + 32 * v71) != 1)
                        {
                          if (++v71 >= HIWORD(v89)) {
                            goto LABEL_113;
                          }
                        }
                        int v72 = *(_DWORD *)(v90 + 32 * v71 + 12) - *(_DWORD *)(v90 + 12);
                        int v73 = *(unsigned __int16 *)(*v16 + 160 * v70);
                        ++v71;
                      }
                      while (v72 != v73 && v71 < HIWORD(v89));
                      if (v72 != v73)
                      {
LABEL_113:
                        uint64_t v75 = *(void *)(*v16 + 160 * v70 + 104);
                        if (v75)
                        {
                          heap_Free(*(void **)(v10 + 8), v75);
                          *(void *)(*(void *)(a4 + 648) + 160 * v70 + 104) = 0;
                          unsigned int v69 = *(unsigned __int16 *)(a4 + 656);
                        }
                      }
                      ++v70;
                    }
                    while (v70 < v69);
                  }
                  uint64_t AddPOI = resolvePHR_0((uint64_t)v91, v10, v81, (_WORD *)(a4 + 648), v65, v66, v67, v68);
                  if ((AddPOI & 0x80000000) == 0)
                  {
LABEL_117:
                    uint64_t AddPOI = setPotentialPOSTags(v10, v81, (uint64_t *)(a4 + 648));
                    if ((AddPOI & 0x80000000) == 0) {
                      uint64_t AddPOI = printSent_0(v10, v81, (const char **)(a4 + 648), (uint64_t)"Initialized data", *(_DWORD *)(a4 + 1416), a5, v76, v77);
                    }
                  }
                }
              }
            }
          }
LABEL_119:
          uint64_t v12 = AddPOI;
        }
        else
        {
          uint64_t v12 = 2313166858;
          log_OutPublic(*(void *)(v10 + 32), (uint64_t)"FE_POS", 35000, 0, v32, v33, v34, v35, v78);
        }
LABEL_55:
        for (uint64_t j = 0; j != 128; j += 8)
        {
          uint64_t v52 = *(void *)(v22 + j);
          if (v52)
          {
            heap_Free(*(void **)(v10 + 8), v52);
            *(void *)(v22 + j) = 0;
          }
        }
        heap_Free(*(void **)(v10 + 8), v22);
        statpos_freeCache(v10, a4 + 648);
        if (v36) {
          heap_Free(*(void **)(v10 + 8), (uint64_t)v36);
        }
      }
      else
      {
        uint64_t v12 = 2313166858;
        log_OutPublic(*(void *)(v10 + 32), (uint64_t)"FE_POS", 35000, 0, v18, v19, v20, v21, v78);
        statpos_freeCache(v10, a4 + 648);
      }
      if (*v16)
      {
        if (*(_WORD *)(a4 + 656))
        {
          uint64_t v53 = *(void *)(*(void *)(*v16 + 160 * (*(unsigned __int16 *)(a4 + 656) - 1) + 48) + 24);
          if (v53)
          {
            heap_Free(*(void **)(v10 + 8), v53);
            *(void *)(*(void *)(*(void *)(a4 + 648) + 160 * *(unsigned __int16 *)(a4 + 656) - 112) + 24) = 0;
          }
        }
      }
    }
  }
  return v12;
}

uint64_t addWord_0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, unsigned __int16 *a5, uint64_t a6, _WORD *a7, uint64_t a8)
{
  int v43 = a6;
  uint64_t v46 = *MEMORY[0x263EF8340];
  unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
  if (!*(_WORD *)(a3 + 8))
  {
    int v16 = 0;
LABEL_11:
    if (*(_WORD *)(a3 + 10))
    {
      uint64_t v19 = *(void *)a3;
      if (v13 + 2 > *(unsigned __int16 *)(a3 + 10))
      {
        uint64_t v20 = heap_Realloc(*(uint64_t **)(a1 + 8), v19, 160 * *(unsigned __int16 *)(a3 + 10) + 3360);
        if (!v20) {
          goto LABEL_28;
        }
        *(void *)a3 = v20;
        bzero((void *)(v20 + 160 * *(unsigned __int16 *)(a3 + 8)), 0xC80uLL);
        *(_WORD *)(a3 + 10) += 20;
        uint64_t v19 = *(void *)a3;
      }
    }
    else
    {
      uint64_t v25 = heap_Calloc(*(void **)(a1 + 8), 1, 8001);
      *(void *)a3 = v25;
      if (!v25) {
        goto LABEL_28;
      }
      uint64_t v19 = v25;
      *(_WORD *)(a3 + 10) = 50;
    }
    uint64_t v26 = (_DWORD *)(v19 + 160 * *(unsigned __int16 *)(a3 + 8));
    v26[11] = v16;
    *uint64_t v26 = *(_DWORD *)a5;
    uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), 1, (8 * *(unsigned __int16 *)(a2 + 376)) | 1);
    *(void *)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 48) = v27;
    if (!v27
      || (int v32 = strlen(a4),
          uint64_t v33 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v32 + 1)),
          (**(void **)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 48) = v33) == 0))
    {
      uint64_t v40 = 2313166858;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v28, v29, v30, v31, v42);
      uint64_t v39 = *(uint64_t **)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 48);
      if (v39 && *v39)
      {
        heap_Free(*(void **)(a1 + 8), *v39);
        **(void **)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 48) = 0;
      }
      return v40;
    }
    strcpy(v33, a4);
    strncpy(__dst, a4, 0x80uLL);
    __dst[127] = 0;
    uint64_t v40 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t))(*(void *)(a3 + 120) + 144))(*(void *)(a3 + 104), *(void *)(a3 + 112), "normal", __dst, 128);
    if ((v40 & 0x80000000) != 0) {
      return v40;
    }
    size_t v34 = strlen(__dst);
    if (!v34 || (int v35 = v34, !strcmp(a4, __dst)))
    {
LABEL_24:
      unsigned __int16 v37 = *(_WORD *)(a3 + 8);
      uint64_t v38 = *(void *)a3 + 160 * v37;
      *(_DWORD *)(v38 + 72) = 0;
      *(void *)(v38 + 64) = 0;
      *(_DWORD *)(v38 + 8) = v43 == 1;
      *(_WORD *)(a3 + 8) = v37 + 1;
      *a7 = 0;
      return v40;
    }
    uint64_t v36 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v35 + 1));
    *(void *)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 120) = v36;
    if (v36)
    {
      strcpy(v36, __dst);
      goto LABEL_24;
    }
LABEL_28:
    uint64_t v40 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v21, v22, v23, v24, v42);
    return v40;
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  int v16 = 0;
  while (1)
  {
    unsigned int v17 = *(unsigned __int16 *)(*(void *)a3 + v14);
    uint64_t v18 = *a5;
    if (__PAIR64__(*(unsigned __int16 *)(*(void *)a3 + v14 + 2), v17) == __PAIR64__(a5[1], v18)) {
      return 0;
    }
    if (v18 >= v17 && a5[1] <= *(unsigned __int16 *)(*(void *)a3 + v14 + 2))
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip subsumed word %d,%d (subsumed by word %d)", a6, (uint64_t)a7, a8, v18);
      unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
      int v16 = 1;
    }
    ++v15;
    v14 += 160;
    if (v15 >= v13) {
      goto LABEL_11;
    }
  }
}

BOOL isFollowedbySpace(uint64_t a1, char *__s, unsigned int a3)
{
  unsigned int v6 = (unsigned __int16)strlen(__s);
  if (v6 > a3)
  {
    while (1)
    {
      uint64_t v7 = &__s[(unsigned __int16)a3];
      unsigned int v8 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)v7);
      if (_statpos_char_check(*(const char **)(a1 + 168), v7, v8) != 1
        && _statpos_char_check(*(const char **)(a1 + 176), &__s[(unsigned __int16)a3], v8) != 1)
      {
        break;
      }
      a3 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v7);
      if (v6 <= (unsigned __int16)a3)
      {
        a3 = (unsigned __int16)a3;
        return v6 == a3;
      }
    }
    return *v7 == 32;
  }
  return v6 == a3;
}

uint64_t addPOS(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, __int16 a6, uint64_t a7, _WORD *a8, int a9)
{
  int v46 = -1;
  if (*a5) {
    unint64_t v15 = a5;
  }
  else {
    unint64_t v15 = "NULL";
  }
  int v16 = *(void **)(a1 + 8);
  int v17 = strlen(v15);
  uint64_t v18 = (char *)heap_Calloc(v16, 1, (v17 + 1));
  if (v18)
  {
    uint64_t v23 = v18;
    uint64_t v24 = strcpy(v18, v15);
    uint64_t v25 = strchr(v24, 92);
    unsigned int __s = (char *)v23;
    if (v25)
    {
      uint64_t v29 = v25;
      while (1)
      {
        *uint64_t v29 = 0;
        uint64_t v30 = *v23 ? (char *)v23 : "*";
        if ((*(void *)(a3 + 48) = v30, *(void *)(a3 + 56) = v30, !a9) && !*(_WORD *)(a2 + 104)
          || *(_DWORD *)(a2 + 184))
        {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"retag POS \"%s\"", v26, v27, v28, (uint64_t)v30);
          uint64_t UniqDynamicPOS = statpos_retagPOS(a1, a2, a3, a4, &v46, a8, a7, v31);
          if ((UniqDynamicPOS & 0x80000000) != 0) {
            break;
          }
        }
        if (a9 == 1)
        {
          uint64_t UniqDynamicPOS = statpos_getUniqDynamicPOS(a1, a2, *(char **)(a3 + 48), &v46);
          if ((UniqDynamicPOS & 0x80000000) != 0) {
            break;
          }
        }
        if (*(_WORD *)(a2 + 104))
        {
          uint64_t UniqDynamicPOS = statpos_getPOSOffset(a1, a2, *(void *)(a3 + 48), &v46);
          if ((UniqDynamicPOS & 0x80000000) != 0) {
            break;
          }
        }
        uint64_t UniqDynamicPOS = statPOSAddUniqueTagOffset2Word(a1, (uint64_t *)a3, a4, v46, a6);
        if ((UniqDynamicPOS & 0x80000000) != 0) {
          break;
        }
        uint64_t v23 = v29 + 1;
        uint64_t v29 = strchr(v29 + 1, 92);
        if (!v29)
        {
          if (*v23) {
            uint64_t v33 = v23;
          }
          else {
            uint64_t v33 = "*";
          }
          goto LABEL_27;
        }
      }
    }
    else
    {
      if (*v23) {
        uint64_t v33 = v23;
      }
      else {
        uint64_t v33 = "*";
      }
LABEL_27:
      *(void *)(a3 + 48) = v33;
      *(void *)(a3 + 56) = v33;
      if ((a9 || *(_WORD *)(a2 + 104)) && !*(_DWORD *)(a2 + 184)
        || (log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"retag POS \"%s\"", v26, v27, v28, (uint64_t)v33), uint64_t UniqDynamicPOS = statpos_retagPOS(a1, a2, a3, a4, &v46, a8, a7, v35), (UniqDynamicPOS & 0x80000000) == 0))
      {
        if (a9 != 1
          || (uint64_t UniqDynamicPOS = statpos_getUniqDynamicPOS(a1, a2, *(char **)(a3 + 48), &v46),
              (UniqDynamicPOS & 0x80000000) == 0))
        {
          if (!*(_WORD *)(a2 + 104)
            || (uint64_t UniqDynamicPOS = statpos_getPOSOffset(a1, a2, *(void *)(a3 + 48), &v46),
                (UniqDynamicPOS & 0x80000000) == 0))
          {
            uint64_t v34 = statPOSAddUniqueTagOffset2Word(a1, (uint64_t *)a3, a4, v46, a6);
            if ((v34 & 0x80000000) == 0 && !*(void *)(*(void *)(*(void *)a3 + 160 * a4 + 48) + 24))
            {
              int v36 = strlen(__s);
              unsigned __int16 v37 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v36 + 1));
              *(void *)(*(void *)(*(void *)a3 + 160 * a4 + 48) + 24) = v37;
              if (v37)
              {
                strcpy(v37, __s);
              }
              else
              {
                uint64_t v34 = 2313166858;
                log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v38, v39, v40, v41, v43);
              }
            }
            goto LABEL_40;
          }
        }
      }
    }
    uint64_t v34 = UniqDynamicPOS;
LABEL_40:
    heap_Free(*(void **)(a1 + 8), (uint64_t)__s);
    return v34;
  }
  uint64_t v34 = 2313166858;
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v19, v20, v21, v22, v43);
  return v34;
}

uint64_t readAddPOI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned int a6, uint64_t a7)
{
  int v34 = 0;
  *(void *)uint64_t v33 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a7, 14, (char *)&v34 + 2);
  if ((v14 & 0x80000000) == 0)
  {
    if (HIWORD(v34))
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, int *))(a1 + 176))(a2, a3, a7, 14, v33, &v34);
      if ((v14 & 0x80000000) == 0 && (unsigned __int16)v34 >= 2u)
      {
        int v32 = 0;
        unsigned __int16 v31 = 0;
        unint64_t v15 = hlp_NLUStrFind(*(char **)v33, "S_POI", (uint64_t *)&v32, &v31);
        if (v15) {
          int v16 = v32;
        }
        else {
          int v16 = 0;
        }
        if (v15) {
          int v17 = 66;
        }
        else {
          int v17 = 0;
        }
        if (hlp_NLUStrFind(*(char **)v33, "I_POI", (uint64_t *)&v32, &v31))
        {
          int v16 = v32;
          int v17 = 73;
        }
        uint64_t v18 = hlp_NLUStrFind(*(char **)v33, "E_POI", (uint64_t *)&v32, &v31);
        if (v17 == 66) {
          char v19 = 83;
        }
        else {
          char v19 = 69;
        }
        if (v18) {
          int v16 = v32;
        }
        else {
          char v19 = v17;
        }
        uint64_t v20 = *a5 + 160 * a6;
        *(unsigned char *)(v20 + 128) = v19;
        uint64_t v21 = (void *)(v20 + 136);
        if (v16)
        {
          if (!*v21)
          {
            size_t v22 = strlen(v16);
            uint64_t v23 = (_WORD *)heap_Calloc(*(void **)(a4 + 8), 1, v22 + 3);
            *(void *)(*a5 + 160 * a6 + 136) = v23;
            if (v23)
            {
              *uint64_t v23 = 44;
              strcat(*(char **)(*a5 + 160 * a6 + 136), v16);
              uint64_t v28 = *(const char **)(*a5 + 160 * a6 + 136);
              *(_WORD *)&v28[strlen(v28)] = 44;
            }
            else
            {
              log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_POS", 35000, 0, v24, v25, v26, v27, v30);
              return 2313166858;
            }
          }
        }
        else
        {
          *uint64_t v21 = 0;
        }
      }
    }
  }
  return v14;
}

uint64_t readPOSandPHRfromNLU(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4, unsigned int a5)
{
  long long v13 = 0uLL;
  int v12 = 0;
  hlp_NLUStrFind(a4, "POS", (uint64_t *)&v13 + 1, (unsigned __int16 *)&v12 + 1);
  hlp_NLUStrFind(a4, "PHR", (uint64_t *)&v13, (unsigned __int16 *)&v12);
  if (v13 != 0) {
    return addPOSandPHR(a1, a2, a3, a5, a5, *((const char **)&v13 + 1), HIWORD(v12), (const char *)v13, v12);
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"missing POS/PHR in NLU field: %s", *((uint64_t *)&v13 + 1), v10, v13, (uint64_t)a4);
  return 2313166848;
}

uint64_t readPOSandPHRfromNLUMarkers(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *__s, uint64_t a9, unsigned __int16 a10)
{
  uint64_t v35 = 0;
  unsigned __int16 v34 = 0;
  long long v33 = 0uLL;
  int v31 = 0;
  int v32 = 0;
  int v30 = 0;
  strlen(__s);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a6 + 104))(a4, a5, 2, a7, &v30);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v29 = a1;
  uint64_t v28 = a3;
  while ((_WORD)v30)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 168))(a4, a5);
    if ((v17 & 0x80000000) == 0)
    {
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a6 + 120))(a4, a5, (unsigned __int16)v30, &v30);
      if ((v17 & 0x80000000) == 0) {
        continue;
      }
    }
    return v17;
  }
  int v31 = a9;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(a6 + 176))(a4, a5, a7, 1, &v35, &v34);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  if (v34)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    while (1)
    {
      if (*(_DWORD *)(v35 + v21) == 51)
      {
        unsigned int v23 = *(_DWORD *)(v35 + v21 + 12) - *(_DWORD *)(v35 + 12);
        if (v23 >= (unsigned __int16)v31 && v23 < HIWORD(v31)) {
          break;
        }
      }
      uint64_t v22 = (v22 + 1);
      v21 += 32;
      if (32 * v34 == v21) {
        goto LABEL_17;
      }
    }
    hlp_NLUStrFind(*(char **)(v35 + v21 + 24), "POS", (uint64_t *)&v33 + 1, (unsigned __int16 *)&v32 + 1);
    hlp_NLUStrFind(*(char **)(v35 + v21 + 24), "PHR", (uint64_t *)&v33, (unsigned __int16 *)&v32);
    if (v33 == 0)
    {
      uint64_t v25 = 2313166848;
      log_OutText(*(void *)(v29 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"missing POS/PHR in (NLU) marker number: %d", *((uint64_t *)&v33 + 1), v26, v33, v22);
      return v25;
    }
    return addPOSandPHR(v29, a2, v28, a10, a10, *((const char **)&v33 + 1), HIWORD(v32), (const char *)v33, v32);
  }
LABEL_17:
  uint64_t v25 = 2313166848;
  log_OutText(*(void *)(v29 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"couldnt recover from missing NLU field on word record %d,%d", v18, v19, v20, (unsigned __int16)a9);
  return v25;
}

uint64_t addToken_0(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int16 *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *((unsigned __int16 *)a2 + 4);
  int v12 = *a4;
  if (*((_WORD *)a2 + 4))
  {
    uint64_t v14 = 0;
    unsigned __int16 v15 = 0;
    unsigned __int16 v16 = v11 + 1;
    uint64_t v17 = *a2;
    unsigned int v18 = a4[1];
    while (1)
    {
      unsigned int v19 = *(unsigned __int16 *)(v17 + v14);
      if (v12 == v19) {
        unsigned __int16 v16 = v15;
      }
      unsigned int v20 = *(unsigned __int16 *)(v17 + v14 + 2);
      if (v18 == v20) {
        break;
      }
      if (v18 >= v19 && v18 < v20) {
        break;
      }
      ++v15;
      int v12 = *a4;
      v14 += 160;
      if (160 * v11 == v14) {
        goto LABEL_14;
      }
    }
    if (v11 + 1 != v16)
    {
      uint64_t v28 = checkSpan_0(a1, a3, (uint64_t *)(v17 + 160 * v16 + 56));
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v28 = checkSpan_0(a1, a3, (uint64_t *)(*a2 + v14 + 56));
        if ((v28 & 0x80000000) == 0)
        {
          uint64_t v29 = *a2;
          uint64_t v30 = *(void *)(*a2 + 160 * v16 + 56);
          *(_DWORD *)(v30 + 48) = 1;
          *(_WORD *)(v30 + 56) = v16;
          *(_WORD *)(v30 + 58) = v15;
          uint64_t v31 = *(void *)(v29 + v14 + 56);
          *(_DWORD *)(v31 + 52) = 1;
          *(_WORD *)(v31 + 56) = v16;
          int v32 = strlen(a5);
          uint64_t v33 = heap_Calloc(*(void **)(a1 + 8), 1, (v32 - 1));
          *(void *)(*(void *)(*a2 + 160 * v16 + 56) + 64) = v33;
          if (!v33)
          {
            log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v34, v35, v36, v37, v48);
            return 2313166858;
          }
          uint64_t v38 = (char *)v33;
          size_t v39 = strlen(a5 + 1);
          strncpy(v38, a5 + 1, v39 - 1);
          int v40 = strlen(a5);
          uint64_t v28 = checkAllocAndZero(a1, (uint64_t *)(*(void *)(*a2 + 160 * v16 + 48) + 16), v40 + 1);
          if ((v28 & 0x80000000) == 0)
          {
            strcat(*(char **)(*(void *)(*a2 + 160 * v16 + 48) + 16), "B-");
            size_t v41 = strlen(a5 + 1);
            strncpy((char *)(*(void *)(*(void *)(*a2 + 160 * v16 + 48) + 16) + 2), a5 + 1, v41 - 1);
            uint64_t v22 = 0;
            unsigned __int16 v42 = v16 + 1;
            if ((unsigned __int16)(v16 + 1) > v15) {
              return v22;
            }
            while (1)
            {
              uint64_t v43 = v42;
              uint64_t v44 = (uint64_t *)(*(void *)(*a2 + 160 * v42 + 48) + 16);
              int v45 = strlen(a5);
              uint64_t v28 = checkAllocAndZero(a1, v44, v45 + 1);
              if ((v28 & 0x80000000) != 0) {
                break;
              }
              strcat(*(char **)(*(void *)(*a2 + 160 * v43 + 48) + 16), "I-");
              size_t v46 = strlen(a5 + 1);
              strncpy((char *)(*(void *)(*(void *)(*a2 + 160 * v43 + 48) + 16) + 2), a5 + 1, v46 - 1);
              uint64_t v22 = 0;
              unsigned __int16 v42 = v43 + 1;
              if ((unsigned __int16)(v43 + 1) > v15) {
                return v22;
              }
            }
          }
        }
      }
      return v28;
    }
  }
LABEL_14:
  uint64_t v22 = 2313166848;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"could not resolve token positions (find start and end) : token=%s from=%d to=%d", a6, a7, a8, (uint64_t)a5);
  if (*((_WORD *)a2 + 4))
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    do
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"word[%d] %d,%d", v23, v24, v25, v27++);
      v26 += 160;
    }
    while (v27 < *((unsigned __int16 *)a2 + 4));
  }
  return v22;
}

unsigned __int16 **setPhoneticRange_0(unsigned __int16 **result, unsigned int a2, unsigned int a3)
{
  if (*((_WORD *)result + 4))
  {
    uint64_t v3 = *result;
    uint64_t v4 = *((unsigned __int16 *)result + 4) - 1;
    do
    {
      unsigned int v5 = *v3;
      if (v5 >= a2 && v3[1] <= a3) {
        *((_DWORD *)v3 + 10) = 1;
      }
      BOOL v6 = v5 > a3 || v4-- == 0;
      v3 += 80;
    }
    while (!v6);
  }
  return result;
}

uint64_t markPhoneticRegions(uint64_t a1, uint64_t *a2)
{
  LOWORD(v2) = *((_WORD *)a2 + 4);
  if (!(_WORD)v2) {
    return 0;
  }
  int v5 = 0;
  while (1)
  {
    if (*(_DWORD *)(*a2 + 160 * (unsigned __int16)v5 + 40) == 1
      && (unsigned __int16)v5 < (unsigned __int16)v2)
    {
      uint64_t v6 = *a2;
      if (*(_DWORD *)(*a2 + 160 * (unsigned __int16)v5 + 40) == 1) {
        break;
      }
    }
    int v8 = v5;
LABEL_18:
    int v5 = v8 + 1;
    if ((unsigned __int16)(v8 + 1) >= (unsigned __int16)v2) {
      return 0;
    }
  }
  uint64_t v7 = 160 * (unsigned __int16)v5;
  int v8 = v5;
  while (1)
  {
    uint64_t v9 = *(void *)(*(void *)(v6 + v7 + 48) + 24);
    if (v9)
    {
      heap_Free(*(void **)(a1 + 8), v9);
      uint64_t v10 = *a2 + v7;
      *(void *)(*(void *)(v10 + 48) + 24) = 0;
      heap_Free(*(void **)(a1 + 8), *(void *)(v10 + 104));
      *(void *)(*a2 + v7 + 104) = 0;
    }
    uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), 1, 5);
    *(void *)(*a2 + v7 + 104) = v11;
    if (!v11) {
      break;
    }
    unsigned __int16 v16 = (unsigned __int16)v8 == (unsigned __int16)v5 ? "B-PH" : "I-PH";
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v16;
    *(unsigned char *)(v11 + 4) = v16[4];
    uint64_t v17 = (_DWORD *)heap_Calloc(*(void **)(a1 + 8), 1, 4);
    *(void *)(*(void *)(*a2 + v7 + 48) + 24) = v17;
    if (!v17) {
      break;
    }
    _DWORD *v17 = 4935253;
    ++v8;
    unsigned int v2 = *((unsigned __int16 *)a2 + 4);
    if (v2 > (unsigned __int16)v8)
    {
      uint64_t v6 = *a2;
      v7 += 160;
      if (*(_DWORD *)(*a2 + 160 * (unsigned __int16)v8 + 40) == 1) {
        continue;
      }
    }
    goto LABEL_18;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v12, v13, v14, v15, v19);
  return 2313166858;
}

uint64_t resolvePHR_0(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  if (!a4[4]) {
    return 0;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  do
  {
    if (v11)
    {
      uint64_t v13 = (unsigned __int16 *)(*(void *)a4 + v11);
      if (!*((void *)v13 + 13))
      {
        unsigned int v14 = v12 - 1;
        uint64_t v15 = *(const char **)(*(void *)a4 + 160 * (v12 - 1) + 104);
        if (v15)
        {
          unint64_t v16 = *v13;
          if (v16 >= 2 && *(unsigned char *)(a1 + (v16 - 1)) == 95)
          {
            int v17 = strlen(v15);
            unsigned int v18 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v17 + 3));
            uint64_t v23 = *(void *)a4;
            *(void *)(*(void *)a4 + v11 + 104) = v18;
            if (!v18) {
              goto LABEL_70;
            }
            strcpy(v18, *(const char **)(v23 + 160 * v14 + 104));
            uint64_t v24 = *(void *)a4;
            uint64_t v25 = *(char **)(*(void *)a4 + v11 + 104);
            if (strcmp(v25, "O"))
            {
              *uint64_t v25 = 73;
              uint64_t v24 = *(void *)a4;
            }
            uint64_t v26 = *(void *)(*(void *)(v24 + v11 + 48) + 24);
            if (v26)
            {
              heap_Free(*(void **)(a2 + 8), v26);
              uint64_t v24 = *(void *)a4;
              *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = 0;
            }
            int v27 = strlen(*(const char **)(*(void *)(v24 + 160 * v14 + 48) + 24));
            uint64_t v28 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v27 + 3));
            uint64_t v29 = *(void *)a4;
            *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = v28;
            if (!v28) {
              goto LABEL_70;
            }
            strcpy(v28, *(const char **)(*(void *)(v29 + 160 * v14 + 48) + 24));
            log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"[1] set missing PHR on word : word index=%d to %s (also copy POS %s)", v30, v31, v32, v12);
          }
          else
          {
            int v33 = *(unsigned __int8 *)v15;
            if (v33 == 66)
            {
              int v45 = strlen(v15);
              size_t v46 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v45 + 3));
              uint64_t v47 = *(void *)a4;
              *(void *)(*(void *)a4 + v11 + 104) = v46;
              if (!v46) {
                goto LABEL_70;
              }
              strcpy(v46, *(const char **)(v47 + 160 * v14 + 104));
              **(unsigned char **)(*(void *)a4 + v11 + 104) = 73;
              uint64_t v48 = *(void *)a4;
              uint64_t v49 = *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24);
              if (v49)
              {
                heap_Free(*(void **)(a2 + 8), v49);
                uint64_t v48 = *(void *)a4;
                *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = 0;
              }
              int v50 = strlen(*(const char **)(*(void *)(v48 + 160 * v14 + 48) + 24));
              uint64_t v51 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v50 + 3));
              uint64_t v52 = *(void *)a4;
              *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = v51;
              if (!v51)
              {
LABEL_70:
                uint64_t v96 = 2313166858;
                log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_POS", 35000, 0, v19, v20, v21, v22, v98);
                return v96;
              }
              strcpy(v51, *(const char **)(*(void *)(v52 + 160 * v14 + 48) + 24));
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"[3] set missing PHR on word : word index=%d to %s (also copy POS %s)", v53, v54, v55, v12);
            }
            else if (v33 == 79 || v33 == 73)
            {
              int v34 = strlen(v15);
              uint64_t v35 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v34 + 3));
              uint64_t v36 = *(void *)a4;
              *(void *)(*(void *)a4 + v11 + 104) = v35;
              if (!v35) {
                goto LABEL_70;
              }
              strcpy(v35, *(const char **)(v36 + 160 * v14 + 104));
              uint64_t v37 = *(void *)a4;
              uint64_t v38 = *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24);
              if (v38)
              {
                heap_Free(*(void **)(a2 + 8), v38);
                uint64_t v37 = *(void *)a4;
                *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = 0;
              }
              int v39 = strlen(*(const char **)(*(void *)(v37 + 160 * v14 + 48) + 24));
              int v40 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v39 + 3));
              uint64_t v41 = *(void *)a4;
              *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = v40;
              if (!v40) {
                goto LABEL_70;
              }
              strcpy(v40, *(const char **)(*(void *)(v41 + 160 * v14 + 48) + 24));
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"[2] set missing PHR on word : word index=%d to %s (also copy POS %s)", v42, v43, v44, v12);
            }
          }
        }
      }
    }
    ++v12;
    unint64_t v56 = (unsigned __int16)a4[4];
    v11 += 160;
  }
  while (v12 < v56);
  if (!a4[4]) {
    return 0;
  }
  uint64_t v57 = 0;
  int v58 = (void *)(*(void *)a4 + 104);
  do
  {
    if (!*v58)
    {
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"could not work out PHR on word : word index=%d", a6, a7, a8, v57);
      return 2313166848;
    }
    ++v57;
    v58 += 20;
  }
  while (v56 != v57);
  unint64_t v59 = 0;
  uint64_t v60 = 104;
  do
  {
    uint64_t v61 = *(void *)a4;
    int v62 = *(char **)(*(void *)a4 + v60);
    if (!strncmp(v62, "I-", 2uLL))
    {
      if (v59)
      {
        if (strcmp(*(const char **)(v61 + 160 * (v59 - 1) + 104), v62))
        {
          __strcpy_chk();
          __s2[0] = 66;
          uint64_t v66 = *(void *)a4;
          if (strcmp(*(const char **)(*(void *)a4 + 160 * (v59 - 1) + 104), __s2))
          {
            **(unsigned char **)(v66 + v60) = 66;
            log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v67, v68, v69, v59);
          }
        }
      }
      else
      {
        *int v62 = 66;
        log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v63, v64, v65, 0);
      }
    }
    ++v59;
    v60 += 160;
  }
  while (v59 < (unsigned __int16)a4[4]);
  if (!a4[4]) {
    return 0;
  }
  uint64_t v70 = 0;
  unsigned int v71 = 0;
  do
  {
    uint64_t v72 = (unsigned __int16)v71;
    __strcpy_chk();
    if (*(unsigned __int16 *)__s2 == 11586) {
      __strcpy_chk();
    }
    unsigned int v76 = (unsigned __int16)a4[4];
    unsigned int v77 = v71;
    if (v76 > (unsigned __int16)v71)
    {
      uint64_t v78 = *(void *)a4;
      unint64_t v79 = (unsigned __int16 *)(*(void *)a4 + 160 * (unsigned __int16)v71 + 4);
      unsigned int v77 = v71;
      while (1)
      {
        uint64_t v80 = v78 + 160 * (unsigned __int16)v77;
        uint64_t v81 = *(const char **)(v80 + 104);
        if (!v81
          || (strlen(*(const char **)(v80 + 104)) < 3 || strcmp(v81 + 2, __s2) || strncmp(v81, "I-", 2uLL))
          && *(unsigned __int16 *)(v78 + 160 * (unsigned __int16)v77 + 4) != *v79)
        {
          break;
        }
        if (v76 <= (unsigned __int16)++v77)
        {
          unsigned int v77 = v76;
          break;
        }
      }
      uint64_t v72 = (unsigned __int16)v71;
    }
    unsigned __int16 v82 = v77 - 1;
    log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"[3] add syn chunk %s from %d to %d", v73, v74, v75, (uint64_t)__s2);
    unsigned int v86 = (unsigned __int16)a4[4];
    if ((unsigned __int16)v71 > (unsigned __int16)(v77 - 1) || v86 <= (unsigned __int16)v71 || v86 <= v82)
    {
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"syntactic chunks out of order: fromWordIdx=%d toWordIdx=%d numWords=%d", v83, v84, v85, v70);
      return 2313166848;
    }
    uint64_t v87 = checkSpan_0(a2, a3, (uint64_t *)(*(void *)a4 + 160 * v72 + 56));
    if ((v87 & 0x80000000) != 0) {
      return v87;
    }
    uint64_t v87 = checkSpan_0(a2, a3, (uint64_t *)(*(void *)a4 + 160 * (unsigned __int16)(v77 - 1) + 56));
    if ((v87 & 0x80000000) != 0) {
      return v87;
    }
    uint64_t v88 = *(void *)a4;
    uint64_t v89 = *(void *)(*(void *)a4 + 160 * v72 + 56);
    *(_DWORD *)(v89 + 96) = 1;
    *(_WORD *)(v89 + 104) = v71;
    *(_WORD *)(v89 + 106) = v82;
    uint64_t v90 = *(void *)(v88 + 160 * (unsigned __int16)(v77 - 1) + 56);
    *(_DWORD *)(v90 + 100) = 1;
    *(_WORD *)(v90 + 104) = v71;
    int v91 = strlen(__s2);
    __int16 v92 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, (v91 + 1));
    *(void *)(*(void *)(*(void *)a4 + 160 * v72 + 56) + 112) = v92;
    if (!v92) {
      goto LABEL_70;
    }
    strcpy(v92, __s2);
    if ((unsigned __int16)v71 == (unsigned __int16)v77) {
      unsigned int v71 = v77 + 1;
    }
    else {
      unsigned int v71 = v77;
    }
    uint64_t v70 = (unsigned __int16)v71;
  }
  while ((unsigned __int16)v71 < (unsigned __int16)a4[4]);
  if (!a4[4]) {
    return 0;
  }
  unint64_t v93 = 0;
  uint64_t v94 = *(void *)a4;
  uint64_t v95 = 104;
  do
  {
    heap_Free(*(void **)(a2 + 8), *(void *)(v94 + v95));
    uint64_t v96 = 0;
    uint64_t v94 = *(void *)a4;
    *(void *)(*(void *)a4 + v95) = 0;
    ++v93;
    v95 += 160;
  }
  while (v93 < (unsigned __int16)a4[4]);
  return v96;
}

uint64_t setPotentialPOSTags(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  __s2[0] = *(unsigned char *)(a2 + 120);
  __s2[1] = 0;
  if (*((_WORD *)a3 + 4))
  {
    unint64_t v4 = 0;
    uint64_t v5 = *a3;
    do
    {
      uint64_t v6 = v5 + 160 * v4;
      uint64_t v7 = *(unsigned __int16 *)(v6 + 72);
      if (*(_WORD *)(v6 + 72))
      {
        int v8 = 0;
        uint64_t v9 = *(unsigned int **)(v5 + 160 * v4 + 64);
        uint64_t v10 = *(unsigned __int16 *)(v6 + 72);
        do
        {
          unsigned int v11 = *v9;
          v9 += 6;
          v8 += strlen((const char *)(*(void *)(a2 + 296) + *(unsigned int *)(*(void *)(a2 + 304) + 4 * v11)));
          --v10;
        }
        while (v10);
        *(void *)(v5 + 160 * v4 + 80) = 0;
        if ((_WORD)v8)
        {
          uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), 1, 2 * v7 + (unsigned __int16)v8 + 1);
          uint64_t v17 = *a3;
          *(void *)(*a3 + 160 * v4 + 80) = v12;
          if (!v12)
          {
            log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v13, v14, v15, v16, v33);
            return 2313166858;
          }
          if (*(_WORD *)(v17 + 160 * v4 + 72))
          {
            uint64_t v18 = 0;
            unint64_t v19 = 0;
            uint64_t v20 = *(void *)(a2 + 296);
            uint64_t v21 = *(void *)(a2 + 304);
            uint64_t v22 = *a3;
            uint64_t v23 = (unsigned __int16 *)(*a3 + 160 * v4 + 72);
            uint64_t v24 = __dst;
            do
            {
              uint64_t v25 = strcpy(v24, (const char *)(v20+ *(unsigned int *)(v21+ 4 * *(unsigned int *)(*(void *)(v17 + 160 * v4 + 64) + v18))));
              ++v19;
              unint64_t v26 = *v23;
              uint64_t v24 = v25 + 16;
              v18 += 24;
              uint64_t v17 = v22;
            }
            while (v19 < v26);
          }
          else
          {
            unint64_t v26 = 0;
          }
          ssft_qsort((uint64_t)__dst, v26, 16, (uint64_t (*)(unint64_t, unint64_t))string_cmp);
          strcpy(*(char **)(*a3 + 160 * v4 + 80), __dst);
          uint64_t v5 = *a3;
          if (*(unsigned __int16 *)(*a3 + 160 * v4 + 72) >= 2u)
          {
            int v27 = v33;
            unint64_t v28 = 1;
            do
            {
              strcat(*(char **)(v5 + 160 * v4 + 80), __s2);
              strcat(*(char **)(*a3 + 160 * v4 + 80), v27);
              ++v28;
              uint64_t v5 = *a3;
              v27 += 16;
            }
            while (v28 < *(unsigned __int16 *)(*a3 + 160 * v4 + 72));
          }
        }
      }
      else
      {
        *(void *)(v5 + 160 * v4 + 80) = 0;
      }
      ++v4;
    }
    while (v4 < *((unsigned __int16 *)a3 + 4));
  }
  return 0;
}

uint64_t printSent_0(uint64_t a1, uint64_t a2, const char **a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)a3 + 25))
  {
    int v8 = a6;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Sentence :%s", a6, a7, a8, a4);
    if (*((_WORD *)a3 + 4))
    {
      int v42 = a5;
      int v43 = v8;
      uint64_t v13 = 0;
      while (1)
      {
        sprintf((char *)a3[11], "[%2d] ", v13);
        uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, (char *)a3[11]);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v15 = *a3;
        if (*(_DWORD *)&(*a3)[160 * v13 + 44] == 1)
        {
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "*DUMMY* ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v15 = *a3;
        }
        if (*(_DWORD *)&v15[160 * v13 + 8] == 1)
        {
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "*OOV* ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v15 = *a3;
        }
        if (*(unsigned __int16 *)&v15[160 * v13 + 72] >= 2u)
        {
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "*AMB* ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v15 = *a3;
        }
        strncpy((char *)a3[11], **(const char ***)&v15[160 * v13 + 48], 0x14uLL);
        unsigned int v16 = (unsigned __int16)strlen(**(const char ***)&(*a3)[160 * v13 + 48]);
        if (v16 <= 0x13)
        {
          do
            *(_WORD *)&a3[11][strlen(a3[11])] = 32;
          while (v16++ < 0x13);
        }
        uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, (char *)a3[11]);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, " ");
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (*(void *)&(*a3)[160 * v13 + 120])
        {
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "canon=");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, *(char **)&(*a3)[160 * v13 + 120]);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, " ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        if (v43 == 1)
        {
          uint64_t v18 = *a3;
          if (*(_DWORD *)&(*a3)[160 * v13 + 24] == 1)
          {
            uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "DCTWORD ");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v18 = *a3;
          }
          if (*(_DWORD *)&v18[160 * v13 + 16] == 1)
          {
            uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "FollowedByUnderscore ");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v18 = *a3;
          }
          if (*(_DWORD *)&v18[160 * v13 + 20] == 1)
          {
            uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "FollowedBySpace ");
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
        }
        uint64_t v19 = (uint64_t)&(*a3)[160 * v13];
        if (v42 == 1) {
          break;
        }
        if (*(void *)(v19 + 88))
        {
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "PREDICTEDPOS=");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v21 = *(char **)&(*a3)[160 * v13 + 88];
LABEL_39:
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, v21);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        uint64_t v22 = *a3;
        if (*(void *)&(*a3)[160 * v13 + 104])
        {
          sprintf((char *)a3[11], "tmphr=%4s ", *(const char **)&(*a3)[160 * v13 + 104]);
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, (char *)a3[11]);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v22 = *a3;
        }
        if (*(void *)&v22[160 * v13 + 112])
        {
          sprintf((char *)a3[11], "retag=%4s ", *(const char **)&v22[160 * v13 + 112]);
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, (char *)a3[11]);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v22 = *a3;
        }
        uint64_t v23 = *(const char **)(*(void *)&v22[160 * v13 + 48] + 16);
        if (!v23) {
          uint64_t v23 = " ";
        }
        sprintf((char *)a3[11], " %6s ", v23);
        uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, (char *)a3[11]);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v24 = *a3;
        if (*(_DWORD *)&(*a3)[160 * v13 + 12])
        {
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "_HASCOMMA ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v24 = *a3;
        }
        if (*(_DWORD *)&v24[160 * v13 + 40])
        {
          uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, " bPHONETIC ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        if (*(_WORD *)(a2 + 376))
        {
          uint64_t v25 = 0;
          unint64_t v26 = 0;
          do
          {
            int v27 = *a3;
            uint64_t v28 = *(void *)&(*a3)[160 * v13 + 56];
            if (v28)
            {
              if (*(_DWORD *)(v28 + v25) != 1) {
                goto LABEL_95;
              }
              sprintf((char *)a3[11], "<%s ", *(const char **)(v28 + v25 + 16));
              uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, (char *)a3[11]);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              int v27 = *a3;
              uint64_t v28 = *(void *)&(*a3)[160 * v13 + 56];
              if (v28)
              {
LABEL_95:
                uint64_t v29 = v28 + v25;
                if (*(_DWORD *)(v29 + 4) == 1)
                {
                  sprintf((char *)a3[11], "%s> ", *(const char **)(*(void *)&v27[160 * *(unsigned __int16 *)(v29 + 8) + 56] + v25 + 16));
                  uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, (char *)a3[11]);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                }
              }
            }
            ++v26;
            v25 += 24;
          }
          while (v26 < *(unsigned __int16 *)(a2 + 376));
        }
        uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, " uniqueTagRecs:");
        if ((result & 0x80000000) != 0) {
          return result;
        }
        int v33 = *a3;
        if (*(_WORD *)&(*a3)[160 * v13 + 72])
        {
          unint64_t v34 = 0;
          uint64_t v41 = a2;
          while (1)
          {
            uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "<RETAG=");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, (char *)(*(void *)(a2 + 296)+ *(unsigned int *)(*(void *)(a2 + 304)+ 4 * *(unsigned int *)(*(void *)&(*a3)[160 * v13 + 64] + 24 * v34))));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, ",");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v35 = *(void *)&(*a3)[160 * v13 + 64];
            if (*(_WORD *)(v35 + 24 * v34 + 16))
            {
              uint64_t v36 = 0;
              unint64_t v37 = 0;
              do
              {
                uint64_t v38 = (unsigned __int16 *)(*(void *)(v35 + 24 * v34 + 8) + v36);
                int v39 = "*KEEP*";
                if (*((_DWORD *)v38 + 1) != 1) {
                  int v39 = &byte_20D5A22AE;
                }
                int v40 = "*SPLIT*";
                if (*((_DWORD *)v38 + 2) != 1) {
                  int v40 = &byte_20D5A22AE;
                }
                sprintf((char *)a3[11], "[%s%s%d,", v39, v40, *v38);
                uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, (char *)a3[11]);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, *(char **)(*(void *)(*(void *)&(*a3)[160 * v13 + 64] + 24 * v34 + 8) + v36 + 16));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "]");
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                ++v37;
                uint64_t v35 = *(void *)&(*a3)[160 * v13 + 64];
                v36 += 24;
              }
              while (v37 < *(unsigned __int16 *)(v35 + 24 * v34 + 16));
            }
            uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "> ");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            ++v34;
            int v33 = *a3;
            a2 = v41;
            if (v34 >= *(unsigned __int16 *)&(*a3)[160 * v13 + 72])
            {
              if (!*(_WORD *)&(*a3)[160 * v13 + 72] || !*(void *)&v33[160 * v13 + 80]) {
                break;
              }
              uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "<POTENTIALTAGS=");
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, *(char **)&(*a3)[160 * v13 + 80]);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "> ");
                  if ((result & 0x80000000) == 0)
                  {
                    int v33 = *a3;
                    break;
                  }
                }
              }
              return result;
            }
          }
        }
        if (!*(void *)&v33[160 * v13 + 88]
          || (uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, "PREDICTEDPOS="), (result & 0x80000000) == 0)
          && (uint64_t result = statcomp_add2Str(a1, a3 + 10, (_WORD *)a3 + 48, *(char **)&(*a3)[160 * v13 + 88]),
              (result & 0x80000000) == 0))
        {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v30, v31, v32, (uint64_t)a3[10]);
          uint64_t result = 0;
          *a3[10] = 0;
          if (++v13 < (unint64_t)*((unsigned __int16 *)a3 + 4)) {
            continue;
          }
        }
        return result;
      }
      uint64_t v20 = *(const char **)(*(void *)(v19 + 48) + 24);
      if (!v20) {
        uint64_t v20 = " ";
      }
      sprintf((char *)a3[11], "%4s ", v20);
      uint64_t v21 = (char *)a3[11];
      goto LABEL_39;
    }
  }
  return 0;
}

double statpos_freeSentenceData(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[91];
  if (v3)
  {
    heap_Free(*(void **)(v2 + 8), v3);
    a1[91] = 0;
    *((_WORD *)a1 + 372) = 0;
  }
  uint64_t v4 = a1[92];
  if (v4)
  {
    heap_Free(*(void **)(v2 + 8), v4);
    a1[92] = 0;
  }
  uint64_t v5 = a1 + 81;
  uint64_t v6 = a1[81];
  if (*((_WORD *)a1 + 328))
  {
    unint64_t v7 = 0;
    do
    {
      if (*(void *)(v6 + 160 * v7 + 104))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 104));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 104) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 136))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 136));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 136) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 112))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 112));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 112) = 0;
      }
      uint64_t v8 = *(void *)(v6 + 160 * v7 + 48);
      if (v8)
      {
        unsigned __int16 v9 = *((_WORD *)a1 + 192);
        if (v9)
        {
          for (unint64_t i = 0; i < v9; ++i)
          {
            uint64_t v8 = *(void *)(v6 + 160 * v7 + 48);
            if (*(void *)(v8 + 8 * i))
            {
              heap_Free(*(void **)(v2 + 8), *(void *)(v8 + 8 * i));
              uint64_t v6 = a1[81];
              uint64_t v8 = *(void *)(v6 + 160 * v7 + 48);
              *(void *)(v8 + 8 * i) = 0;
              unsigned __int16 v9 = *((_WORD *)a1 + 192);
            }
          }
        }
        heap_Free(*(void **)(v2 + 8), v8);
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 48) = 0;
      }
      uint64_t v11 = *(void *)(v6 + 160 * v7 + 56);
      if (v11)
      {
        unsigned __int16 v12 = *((_WORD *)a1 + 192);
        if (v12)
        {
          unint64_t v13 = 0;
          uint64_t v14 = 16;
          do
          {
            uint64_t v11 = *(void *)(v6 + 160 * v7 + 56);
            if (*(void *)(v11 + v14))
            {
              heap_Free(*(void **)(v2 + 8), *(void *)(v11 + v14));
              uint64_t v6 = a1[81];
              uint64_t v11 = *(void *)(v6 + 160 * v7 + 56);
              *(void *)(v11 + v14) = 0;
              unsigned __int16 v12 = *((_WORD *)a1 + 192);
            }
            ++v13;
            v14 += 24;
          }
          while (v13 < v12);
        }
        heap_Free(*(void **)(v2 + 8), v11);
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 56) = 0;
      }
      if (*(_WORD *)(v6 + 160 * v7 + 72))
      {
        unint64_t v15 = 0;
        do
        {
          uint64_t v16 = *(void *)(v6 + 160 * v7 + 64);
          if (*(_WORD *)(v16 + 24 * v15 + 16))
          {
            unint64_t v17 = 0;
            uint64_t v18 = 16;
            do
            {
              uint64_t v19 = *(void *)(*(void *)(v16 + 24 * v15 + 8) + v18);
              if (v19)
              {
                heap_Free(*(void **)(v2 + 8), v19);
                uint64_t v16 = *(void *)(*v5 + 160 * v7 + 64);
                *(void *)(*(void *)(v16 + 24 * v15 + 8) + v18) = 0;
              }
              ++v17;
              v18 += 24;
            }
            while (v17 < *(unsigned __int16 *)(v16 + 24 * v15 + 16));
            heap_Free(*(void **)(v2 + 8), *(void *)(v16 + 24 * v15 + 8));
            uint64_t v6 = *v5;
            uint64_t v20 = *(void *)(*v5 + 160 * v7 + 64) + 24 * v15;
            *(void *)(v20 + 8) = 0;
            *(_DWORD *)(v20 + 16) = 0;
          }
          ++v15;
        }
        while (v15 < *(unsigned __int16 *)(v6 + 160 * v7 + 72));
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 64));
        uint64_t v6 = *v5;
        uint64_t v21 = *v5 + 160 * v7;
        *(void *)(v21 + 64) = 0;
        *(_DWORD *)(v21 + 72) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 80))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 80));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 80) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 88))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 88));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 88) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 120))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 120));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 120) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 32))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 32));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 32) = 0;
      }
      ++v7;
    }
    while (v7 < *((unsigned __int16 *)a1 + 328));
    goto LABEL_48;
  }
  if (v6) {
LABEL_48:
  }
    heap_Free(*(void **)(v2 + 8), v6);
  a1[97] = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 93) = 0u;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)(a1 + 87) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  return result;
}

uint64_t statpos_updateNLULingdbField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v27 = 0;
  unsigned int v28 = 0;
  uint64_t v25 = 0;
  uint64_t v8 = (unsigned __int16 *)(a4 + 648);
  uint64_t v9 = *(void *)a4;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 656);
  if (*(_WORD *)(a4 + 656))
  {
    uint64_t v11 = (_DWORD *)(*(void *)v8 + 152);
    do
    {
      *uint64_t v11 = 0;
      v11 += 40;
      --v10;
    }
    while (v10);
  }
  int v30 = 0;
  int v31 = 0;
  unsigned __int16 v29 = 0;
  v32[0] = *(unsigned char *)(a4 + 128);
  v32[1] = 0;
  *(_OWORD *)unsigned int __s = 0u;
  long long v34 = 0u;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 1, 0, &v31);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a1 + 184))(a2, a3, (unsigned __int16)v31, 0, (char *)&v31 + 2);
    if ((result & 0x80000000) == 0 && HIWORD(v31) == 1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, unsigned __int16 *))(a1 + 176))(a2, a3, (unsigned __int16)v31, 0, &v25, &v29);
      if ((result & 0x80000000) == 0 && v29 >= 2u)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v31, (char *)&v30 + 2);
        if ((result & 0x80000000) == 0)
        {
          unsigned __int16 v26 = 0;
          **(unsigned char **)(a4 + 728) = 0;
          unsigned __int16 v13 = HIWORD(v30);
          if (HIWORD(v30))
          {
            uint64_t v14 = a4 + 8;
            while (1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, v13, &v30);
              if ((result & 0x80000000) != 0) {
                break;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, unsigned __int16 *))(a1 + 168))(a2, a3, HIWORD(v30), 0, 1, &v28, &v29);
              if ((result & 0x80000000) != 0) {
                break;
              }
              if (v28 <= 0xA && ((1 << v28) & 0x610) != 0)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(a1 + 168))(a2, a3, HIWORD(v30), 1, 1, &v27, &v29);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(a1 + 168))(a2, a3, HIWORD(v30), 2, 1, (char *)&v27 + 2, &v29);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                if ((unsigned __int16)v27 != HIWORD(v27))
                {
                  uint64_t result = getWordIdx_0(v9, v8, (unsigned __int16)v27, HIWORD(v27), &v26, v16, v17, v18);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t v19 = *(void *)v8;
                  unsigned int v20 = v26;
                  if (*(_DWORD *)(*(void *)v8 + 160 * v26 + 44) || *(_DWORD *)(v19 + 160 * v26 + 152))
                  {
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, HIWORD(v30));
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                  }
                  else
                  {
                    uint64_t v24 = v14;
                    uint64_t v21 = *(void *)(v19 + 160 * v26 + 56);
                    if (v21 && (uint64_t v22 = *(const char **)(v21 + 112)) != 0)
                    {
                      if (!strcmp(v22, "O"))
                      {
                        __strcpy_chk();
                      }
                      else
                      {
                        strcpy(__s, "B-");
                        __strcat_chk();
                        uint64_t v23 = &__s[strlen(__s) - 2];
                        if (!strcmp(v23, "-P")) {
                          *uint64_t v23 = 0;
                        }
                      }
                    }
                    else if (__s[0] && *(unsigned __int16 *)__s != 79)
                    {
                      __s[0] = 73;
                    }
                    uint64_t v14 = v24;
                    uint64_t result = updateNLUField_0(v9, a1, a2, a3, HIWORD(v30), v24, (uint64_t *)v8, v20, *(char **)(*(void *)(*(void *)v8 + 160 * v20 + 48) + 24), __s, v32, 1);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                    *(_DWORD *)(*(void *)v8 + 160 * v20 + 152) = 1;
                  }
                }
              }
              unsigned __int16 v13 = v30;
              HIWORD(v30) = v30;
              if (!(_WORD)v30) {
                goto LABEL_38;
              }
            }
          }
          else
          {
LABEL_38:
            **(unsigned char **)(a4 + 728) = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t getWordIdx_0(uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2[4])
  {
    uint64_t v8 = 0;
    uint64_t v9 = (unsigned __int16 *)(*(void *)a2 + 2);
    while (*(v9 - 1) != a3 || *v9 != a4)
    {
      ++v8;
      v9 += 80;
      if (a2[4] == v8) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    *a5 = v8;
  }
  else
  {
LABEL_6:
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"cant align lingdb word : no word found with pos=%d,%d", a6, a7, a8, a3);
    return 2313166848;
  }
  return result;
}

uint64_t updateNLUField_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned int a8, char *a9, char *a10, char *a11, int a12)
{
  uint64_t v15 = a5;
  uint64_t v16 = a4;
  uint64_t v18 = a2;
  v56[0] = 0;
  __int16 v55 = 0;
  uint64_t v54 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a2 + 184))(a3, a4, a5, 14, (char *)v56 + 2);
  if ((result & 0x80000000) == 0)
  {
    if (!HIWORD(v56[0])) {
      goto LABEL_5;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, _DWORD *))(v18 + 176))(a3, v16, v15, 14, &v54, v56);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (LOWORD(v56[0]) >= 2u)
    {
      uint64_t v21 = v54;
    }
    else
    {
LABEL_5:
      uint64_t v21 = &byte_20D5A22AE;
      uint64_t v54 = &byte_20D5A22AE;
    }
    size_t v22 = strlen(v21);
    if (a9) {
      size_t v23 = v22 + strlen(a9) + 6;
    }
    else {
      size_t v23 = v22 + 1;
    }
    if (a10) {
      v23 += strlen(a10) + 5;
    }
    uint64_t v53 = v18;
    uint64_t v52 = a1;
    if (a11 && a12 == 1)
    {
      uint64_t v50 = v16;
      unsigned int v24 = a8;
      size_t v25 = v23 + 9;
      uint64_t v26 = *a7;
      unsigned int v49 = v24;
      uint64_t v27 = *(unsigned __int16 *)(*a7 + 160 * v24 + 72);
      unsigned int v51 = v24;
      if (*(_WORD *)(*a7 + 160 * v24 + 72))
      {
        unsigned int v28 = *(unsigned int **)(v26 + 160 * v24 + 64);
        size_t v29 = strlen(a11);
        do
        {
          unsigned int v30 = *v28;
          v28 += 6;
          v25 += strlen((const char *)(*(void *)(a6 + 296) + *(unsigned int *)(*(void *)(a6 + 304) + 4 * v30)))
               + v29;
          --v27;
        }
        while (v27);
      }
      uint64_t v31 = v26 + 160 * v51;
      if (*(_DWORD *)(v31 + 8) == 1) {
        size_t v23 = v25 + 6;
      }
      else {
        size_t v23 = v25;
      }
      uint64_t v32 = *(const char **)(v31 + 120);
      if (v32) {
        v23 += strlen(v32) + 11;
      }
      uint64_t v15 = v15;
      uint64_t v16 = v50;
      uint64_t v18 = v53;
      a1 = v52;
      a8 = v49;
    }
    if (v23 <= *((unsigned __int16 *)a7 + 48))
    {
      int v33 = (char *)a7[10];
      uint64_t v38 = v21;
    }
    else
    {
      int v33 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), a7[10], v23);
      if (!v33)
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v34, v35, v36, v37, v48);
        return 2313166858;
      }
      *((_WORD *)a7 + 48) = v23;
      a7[10] = (uint64_t)v33;
      uint64_t v38 = v54;
    }
    strcpy(v33, v38);
    if (a9) {
      hlp_NLUStrSet((char *)a7[10], "POS", a9);
    }
    if (a10) {
      hlp_NLUStrSet((char *)a7[10], "PHR", a10);
    }
    uint64_t v42 = a8;
    if (a12 == 1)
    {
      uint64_t v43 = *a7;
      if (*(_WORD *)(*a7 + 160 * a8 + 72))
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          hlp_NLUStrAppend((char *)a7[10], "MAPTAGS", (char *)(*(void *)(a6 + 296)+ *(unsigned int *)(*(void *)(a6 + 304)+ 4 * *(unsigned int *)(*(void *)(v43 + 160 * v42 + 64) + v44))), a11);
          ++v45;
          uint64_t v43 = *a7;
          v44 += 24;
        }
        while (v45 < *(unsigned __int16 *)(*a7 + 160 * v42 + 72));
      }
      a1 = v52;
      uint64_t v18 = v53;
      if (*(_DWORD *)(v43 + 160 * v42 + 8) == 1)
      {
        hlp_NLUStrSet((char *)a7[10], "OOV", "1");
        uint64_t v43 = *a7;
      }
      size_t v46 = *(char **)(v43 + 160 * v42 + 120);
      if (v46) {
        hlp_NLUStrSet((char *)a7[10], "CANONICAL", v46);
      }
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_NLU %s -> %s", v39, v40, v41, v15);
    __int16 v47 = strlen((const char *)a7[10]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, __int16 *))(v18 + 160))(a3, v16, v15, 14, (unsigned __int16)(v47 + 1), a7[10], &v55);
  }
  return result;
}

uint64_t checkWordRecPOS(uint64_t *a1, unsigned int a2, int a3, _DWORD *a4)
{
  *a4 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned __int16 *)(*a1 + 160 * a2 + 72);
  if (!*(_WORD *)(*a1 + 160 * a2 + 72)) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t result = 0;
  uint64_t v8 = *(void *)(v4 + 160 * a2 + 64);
  do
  {
    uint64_t v9 = *(unsigned __int16 *)(v8 + 24 * v6 + 16);
    if (*(_WORD *)(v8 + 24 * v6 + 16))
    {
      uint64_t v10 = *(unsigned __int16 **)(v8 + 24 * v6 + 8);
      do
      {
        if (*((_DWORD *)v10 + 2) == 1 && *v10 == a3) {
          *a4 = 1;
        }
        if (*((_DWORD *)v10 + 1) == 1)
        {
          if (*v10 == a3) {
            uint64_t result = 1;
          }
          else {
            uint64_t result = result;
          }
        }
        v10 += 12;
        --v9;
      }
      while (v9);
    }
    ++v6;
  }
  while (v6 != v5);
  return result;
}

uint64_t getNewPOS(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, char **a5)
{
  uint64_t v8 = *a2 + 160 * a3;
  uint64_t v9 = *(unsigned __int16 *)(v8 + 72);
  if (*(_WORD *)(v8 + 72))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = *(void *)(*a2 + 160 * a3 + 64);
    do
    {
      uint64_t v13 = v12 + 24 * v10;
      uint64_t v14 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        uint64_t v15 = *(const char ***)(v12 + 24 * v10 + 8);
        uint64_t v16 = v15;
        do
        {
          int v17 = *(unsigned __int16 *)v16;
          v16 += 3;
          if (v17 == a4 && *((_DWORD *)v15 + 1) == 1)
          {
            if ((_WORD)v11) {
              int v18 = v11 + 1;
            }
            else {
              int v18 = 0;
            }
            int v11 = v18 + strlen(v15[2]);
          }
          uint64_t v15 = v16;
          --v14;
        }
        while (v14);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    LOWORD(v11) = 0;
  }
  uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)v11 + 2);
  if (v19)
  {
    unsigned int v24 = (char *)v19;
    uint64_t v25 = *a2;
    if (*(_WORD *)(*a2 + 160 * a3 + 72))
    {
      unint64_t v26 = 0;
      __int16 v27 = 0;
      do
      {
        uint64_t v28 = *(void *)(v25 + 160 * a3 + 64);
        if (*(_WORD *)(v28 + 24 * v26 + 16))
        {
          uint64_t v29 = 0;
          unint64_t v30 = 0;
          do
          {
            uint64_t v31 = *(void *)(v28 + 24 * v26 + 8);
            if (*(unsigned __int16 *)(v31 + v29) == a4 && *(_DWORD *)(v31 + v29 + 4) == 1)
            {
              if (v27)
              {
                *(_WORD *)&v24[strlen(v24)] = 92;
                strcat(v24, *(const char **)(*(void *)(*(void *)(*a2 + 160 * a3 + 64) + 24 * v26 + 8) + v29 + 16));
              }
              else
              {
                strcpy(v24, *(const char **)(v31 + v29 + 16));
              }
              ++v27;
              uint64_t v25 = *a2;
            }
            ++v30;
            uint64_t v28 = *(void *)(v25 + 160 * a3 + 64);
            v29 += 24;
          }
          while (v30 < *(unsigned __int16 *)(v28 + 24 * v26 + 16));
        }
        ++v26;
      }
      while (v26 < *(unsigned __int16 *)(v25 + 160 * a3 + 72));
    }
    uint64_t result = 0;
    *a5 = v24;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v20, v21, v22, v23, a5);
    return 2313166858;
  }
  return result;
}

uint64_t wordRecSplit(void *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *(unsigned __int16 *)(*a1 + 160 * a2 + 72);
  if (!*(_WORD *)(*a1 + 160 * a2 + 72)) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(*a1 + 160 * a2 + 64);
  while (1)
  {
    uint64_t v7 = v6 + 24 * v5;
    uint64_t v8 = *(unsigned __int16 *)(v7 + 16);
    if (*(_WORD *)(v7 + 16)) {
      break;
    }
LABEL_10:
    if (++v5 == v4) {
      return 0;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = 24 * v8;
  while (v5 == a3 && 24 * a4 == v9
       || __PAIR64__(*(_DWORD *)(*(void *)(v6 + 24 * v5 + 8) + v9 + 4), *(unsigned __int16 *)(*(void *)(v6 + 24 * v5 + 8) + v9)) != *(unsigned __int16 *)(*(void *)(v6 + 24 * a3 + 8)+ 24 * a4))
  {
    v9 += 24;
    if (v10 == v9) {
      goto LABEL_10;
    }
  }
  return 1;
}

uint64_t statpos_alignDisambiguatedPOSToLingdb(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (const char **)(a1 + 648);
  uint64_t v54 = *(void *)a1;
  if (!*(_WORD *)(a1 + 656)) {
    goto LABEL_57;
  }
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  int v64 = 0;
  int v11 = *(const char **)(a1 + 648);
  do
  {
    uint64_t v56 = v10;
    unint64_t v57 = v9;
    int v58 = v11;
    uint64_t v12 = &v11[160 * v9];
    uint64_t v13 = *((unsigned __int16 *)v12 + 36);
    if (*((_WORD *)v12 + 36))
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a1 + 304);
      uint64_t v16 = *(void *)(a1 + 312);
      int v17 = &v11[160 * v9];
      uint64_t v18 = *((void *)v17 + 8);
      uint64_t v19 = (const char *)*((void *)v17 + 11);
      uint64_t v20 = v17 + 96;
      do
      {
        if (!strcmp((const char *)(v15 + *(unsigned int *)(v16 + 4 * *(unsigned int *)(v18 + 24 * v14))), v19))
        {
          *uint64_t v20 = 1;
          uint64_t v21 = *(unsigned __int16 *)(v18 + 24 * v14 + 16);
          if (*(_WORD *)(v18 + 24 * v14 + 16))
          {
            uint64_t v22 = (_DWORD *)(*(void *)(v18 + 24 * v14 + 8) + 4);
            do
            {
              *uint64_t v22 = 1;
              v22 += 6;
              --v21;
            }
            while (v21);
          }
        }
        ++v14;
      }
      while (v14 != v13);
    }
    int v11 = v58;
    unint64_t v23 = v57;
    int v24 = *(_DWORD *)&v58[160 * v57 + 96];
    if (*(_DWORD *)(a1 + 144) == 1)
    {
      if (v24) {
        goto LABEL_41;
      }
      if (v13)
      {
        uint64_t v25 = 0;
        LOWORD(v26) = 0;
        uint64_t v62 = *(void *)(a1 + 304);
        uint64_t v60 = *(void *)&v58[160 * v57 + 64];
        uint64_t v61 = *(void *)(a1 + 312);
        unsigned int v27 = (unsigned __int16)strlen(*(const char **)&v58[160 * v57 + 88]);
        do
        {
          unsigned int v28 = (unsigned __int16)strlen((const char *)(v62
                                                      + *(unsigned int *)(v61 + 4 * *(unsigned int *)(v60 + 24 * v25))));
          unsigned __int16 v29 = 0;
          if (v27 < v28) {
            unsigned int v28 = v27;
          }
          if (v28)
          {
            while (*(unsigned __int8 *)(v62 + *(unsigned int *)(v61 + 4 * *(unsigned int *)(v60 + 24 * v25)) + v29) == *(unsigned __int8 *)(*(void *)&v58[160 * v57 + 88] + v29))
            {
              if (v28 <= ++v29)
              {
                unsigned __int16 v29 = v28;
                break;
              }
            }
          }
          BOOL v30 = v29 > (unsigned __int16)v26;
          if (v29 <= (unsigned __int16)v26) {
            int v26 = (unsigned __int16)v26;
          }
          else {
            int v26 = v29;
          }
          if (v30) {
            int v31 = v25;
          }
          else {
            int v31 = v64;
          }
          int v64 = v31;
          ++v25;
        }
        while (v25 != v13);
        if (v26)
        {
          log_OutText(*(void *)(v54 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Word[%d] %s select word record with POS %s, (closest to predicted POS %s using longest match)", a6, a7, a8, v56);
          int v11 = *(const char **)(a1 + 648);
          uint64_t v32 = &v11[160 * v57];
          *((_DWORD *)v32 + 24) = 1;
          uint64_t v33 = *((void *)v32 + 8);
          uint64_t v34 = *(unsigned __int16 *)(v33 + 24 * (unsigned __int16)v64 + 16);
          if (*(_WORD *)(v33 + 24 * (unsigned __int16)v64 + 16))
          {
            uint64_t v35 = (_DWORD *)(*(void *)(v33 + 24 * (unsigned __int16)v64 + 8) + 4);
            do
            {
              *uint64_t v35 = 1;
              v35 += 6;
              --v34;
            }
            while (v34);
            unint64_t v23 = v57;
          }
          else
          {
            unint64_t v23 = v57;
          }
          goto LABEL_41;
        }
        int v11 = v58;
      }
    }
    else if (v24)
    {
      goto LABEL_41;
    }
    if (!a2)
    {
      log_OutText(*(void *)(v54 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning : no matching tags for word[%d] %s (predicted=%s, lexicon=%s)", a6, a7, a8, v56);
      int v11 = *v8;
    }
    uint64_t v36 = &v11[160 * v57];
    *((_DWORD *)v36 + 24) = 1;
    uint64_t v37 = *((unsigned __int16 *)v36 + 36);
    if (v37)
    {
      uint64_t v38 = 0;
      uint64_t v39 = *(void *)&v11[160 * v57 + 64];
      do
      {
        uint64_t v40 = *(unsigned __int16 *)(v39 + 24 * v38 + 16);
        if (*(_WORD *)(v39 + 24 * v38 + 16))
        {
          uint64_t v41 = (_DWORD *)(*(void *)(v39 + 24 * v38 + 8) + 4);
          do
          {
            *uint64_t v41 = 1;
            v41 += 6;
            --v40;
          }
          while (v40);
        }
        ++v38;
      }
      while (v38 != v37);
    }
LABEL_41:
    unint64_t v9 = v23 + 1;
    unint64_t v42 = *(unsigned __int16 *)(a1 + 656);
    uint64_t v10 = v9;
  }
  while (v9 < v42);
  if (*(_WORD *)(a1 + 656))
  {
    uint64_t v43 = 0;
    uint64_t v65 = *v8;
    do
    {
      unint64_t v63 = v42;
      uint64_t v44 = &v65[160 * v43];
      uint64_t v45 = *((unsigned __int16 *)v44 + 36);
      if (*((_WORD *)v44 + 36))
      {
        uint64_t v46 = 0;
        uint64_t v47 = *(void *)&v65[160 * v43 + 64];
        do
        {
          uint64_t v48 = v47 + 24 * v46;
          uint64_t v49 = *(unsigned __int16 *)(v48 + 16);
          if (*(_WORD *)(v48 + 16))
          {
            uint64_t v50 = 0;
            unsigned int v51 = (_DWORD *)(*(void *)(v47 + 24 * v46 + 8) + 8);
            do
            {
              if (*(v51 - 1) == 1
                && wordRecSplit(v8, (unsigned __int16)v43, (unsigned __int16)v46, (unsigned __int16)v50))
              {
                _DWORD *v51 = 1;
              }
              v51 += 6;
              ++v50;
            }
            while (v49 != v50);
          }
          ++v46;
        }
        while (v46 != v45);
      }
      ++v43;
      unint64_t v42 = v63;
    }
    while (v43 != v63);
  }
LABEL_57:
  int v52 = *(_DWORD *)(a1 + 1416);
  return printSent_0(v54, a1 + 8, v8, (uint64_t)"after statpos_alignDisambiguatedPOSToLingdb()", v52, a2, a7, a8);
}

uint64_t statpos_updatePOSLingdbWithDisambiguatedPOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  uint64_t v8 = a4;
  v116[33] = *(char **)MEMORY[0x263EF8340];
  int v113 = 0;
  int v114 = 0;
  unsigned int v111 = 0;
  int v112 = 0;
  int v110 = 0;
  int __s1 = 0;
  uint64_t v108 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  int v104 = 0;
  uint64_t v13 = (uint64_t)(a4 + 1);
  uint64_t v12 = *a4;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 1, 0, &v114);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a1 + 184))(a2, a3, (unsigned __int16)v114, 0, (char *)&v114 + 2);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  if (HIWORD(v114) != 1) {
    return v15;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, char *))(a1 + 176))(a2, a3, (unsigned __int16)v114, 0, &v108, (char *)&v112 + 2);
  if ((v15 & 0x80000000) != 0 || HIWORD(v112) < 2u) {
    return v15;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v114, (char *)&v113 + 2);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  int v99 = a5;
  uint64_t v16 = (unsigned __int16 *)(v8 + 81);
  unsigned __int16 v109 = 0;
  uint64_t v102 = v12;
  *(unsigned char *)v8[91] = 0;
  while (HIWORD(v113))
  {
    uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
    if ((WordIdx_0 & 0x80000000) != 0) {
      goto LABEL_44;
    }
    if (v111 > 0xA || ((1 << v111) & 0x610) == 0) {
      goto LABEL_43;
    }
    uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, HIWORD(v113), 1, 1, &v110, (char *)&v112 + 2);
    if ((WordIdx_0 & 0x80000000) != 0) {
      goto LABEL_44;
    }
    uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1 + 168))(a2, a3, HIWORD(v113), 2, 1, (char *)&v110 + 2, (char *)&v112 + 2);
    if ((WordIdx_0 & 0x80000000) != 0) {
      goto LABEL_44;
    }
    if ((unsigned __int16)v110 == HIWORD(v110)) {
      goto LABEL_43;
    }
    uint64_t WordIdx_0 = getWordIdx_0(*v8, v16, (unsigned __int16)v110, HIWORD(v110), &v109, v19, v20, v21);
    if ((WordIdx_0 & 0x80000000) != 0) {
      goto LABEL_44;
    }
    int v22 = *((_DWORD *)v8 + 359);
    uint64_t v23 = v109;
    if (!v22)
    {
      if (subsumedWordRec((uint64_t)v16, v109)) {
        goto LABEL_43;
      }
    }
    int v104 = 0;
    uint64_t v24 = HIWORD(v113);
    if (!(checkWordRecPOS((uint64_t *)v16, v23, HIWORD(v113), &v104) | v22)) {
      goto LABEL_43;
    }
    uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1 + 176))(a2, a3, v24, 5, &__s1, (char *)&v112 + 2);
    if ((WordIdx_0 & 0x80000000) != 0) {
      goto LABEL_44;
    }
    uint64_t v25 = v102;
    if (a6 == 1 && v111 == 4)
    {
      uint64_t updated = updateNLUField_0(v102, a1, a2, a3, HIWORD(v113), v13, (uint64_t *)v16, v23, __s1, 0, 0, 0);
      if ((updated & 0x80000000) != 0) {
        goto LABEL_138;
      }
      *(void *)int v100 = v8;
      BOOL v30 = v16;
      log_OutText(*(void *)(v102 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET DCT WORD Word[%d] %s POS %s to NLU POS", v27, v28, v29, v23);
LABEL_37:
      __int16 v55 = v30;
      if (*(_DWORD *)(*(void *)v30 + 160 * v23 + 24))
      {
        log_OutText(*(void *)(v25 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"keep Word[%d] PHON", v31, v32, v33, v23);
        uint64_t v16 = v30;
        uint64_t v8 = *(uint64_t **)v100;
      }
      else
      {
        uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1 + 176))(a2, a3, HIWORD(v113), 3, &v106, (char *)&v112 + 2);
        uint64_t v8 = *(uint64_t **)v100;
        if ((updated & 0x80000000) != 0) {
          goto LABEL_138;
        }
        uint64_t v16 = v55;
        __int16 v56 = strlen(*(const char **)(*(void *)v55 + 160 * v23 + 32));
        uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, int *))(a1 + 160))(a2, a3, HIWORD(v113), 3, (unsigned __int16)(v56 + 1), *(void *)(*(void *)v55 + 160 * v23 + 32), &v112);
        if ((WordIdx_0 & 0x80000000) != 0) {
          goto LABEL_44;
        }
        log_OutText(*(void *)(v102 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"set Word[%d] PHON to %s", v57, v58, v59, v23);
      }
      a6 = 1;
      goto LABEL_43;
    }
    if (v104 == 1)
    {
      uint64_t updated = getNewPOS(v102, (uint64_t *)v16, v23, HIWORD(v113), &v105);
      if ((updated & 0x80000000) != 0) {
        goto LABEL_138;
      }
      log_OutText(*(void *)(v102 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"REPLACE Word[%d] %s POS %s", v34, v35, v36, v23);
      uint64_t v37 = v105;
      log_OutText(*(void *)(v102 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"\twith %s", v38, v39, v40, (uint64_t)v105);
      __int16 v41 = strlen(v37);
      uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(a1 + 160))(a2, a3, HIWORD(v113), 5, (unsigned __int16)(v41 + 1), v37, &v112);
      if ((v42 & 0x80000000) != 0)
      {
        uint64_t v15 = v42;
        uint64_t v25 = v102;
        goto LABEL_46;
      }
      heap_Free(*(void **)(v102 + 8), (uint64_t)v37);
      uint64_t v105 = 0;
    }
    else if (*((_DWORD *)v8 + 360))
    {
      if (!strcmp(__s1, "*"))
      {
        log_OutText(*(void *)(v102 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"REPLACE Word[%d] %s POS %s", v43, v44, v45, v23);
        log_OutText(*(void *)(v102 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"\twith %s", v46, v47, v48, *(void *)(*(void *)v16 + 160 * v23 + 88));
        __int16 v49 = strlen(*(const char **)(*(void *)v16 + 160 * v23 + 88));
        uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, int *))(a1 + 160))(a2, a3, HIWORD(v113), 5, (unsigned __int16)(v49 + 1), *(void *)(*(void *)v16 + 160 * v23 + 88), &v112);
        if ((WordIdx_0 & 0x80000000) != 0) {
          goto LABEL_44;
        }
      }
    }
    uint64_t v25 = v102;
    uint64_t updated = updateNLUField_0(v102, a1, a2, a3, HIWORD(v113), v13, (uint64_t *)v16, v23, *(char **)(*(void *)v16 + 160 * v23 + 88), 0, 0, 0);
    if ((updated & 0x80000000) != 0) {
      goto LABEL_138;
    }
    if (a6 == 1)
    {
      *(void *)int v100 = v8;
      uint64_t v25 = v102;
      log_OutText(*(void *)(v102 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"set Word[%d] POS to %s", v50, v51, v52, v23);
      __int16 v53 = strlen(*(const char **)(*(void *)v16 + 160 * v23 + 88));
      BOOL v30 = v16;
      uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, int *))(a1 + 160))(a2, a3, HIWORD(v113), 5, (unsigned __int16)(v53 + 1), *(void *)(*(void *)v16 + 160 * v23 + 88), &v112);
      if ((v54 & 0x80000000) != 0)
      {
        uint64_t v15 = v54;
        uint64_t v8 = *(uint64_t **)v100;
        goto LABEL_46;
      }
      goto LABEL_37;
    }
LABEL_43:
    uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1 + 120))(a2, a3, HIWORD(v113), (char *)&v113 + 2);
    if ((WordIdx_0 & 0x80000000) != 0) {
      goto LABEL_44;
    }
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v114, (char *)&v113 + 2);
  uint64_t v25 = v102;
  if ((v15 & 0x80000000) != 0) {
    goto LABEL_46;
  }
  unsigned __int16 v64 = HIWORD(v113);
  if (!HIWORD(v113))
  {
LABEL_72:
    if (v99 != 1) {
      goto LABEL_46;
    }
    unsigned __int16 v103 = 0;
    log_OutText(*(void *)(v25 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"No SGRAM : removing duplicate tags on lingdb words", v61, v62, v63, 0);
    memset(v115, 0, sizeof(v115));
    memset(v116, 0, 256);
    unsigned __int16 v109 = 0;
    uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v114, (char *)&v113 + 2);
    if ((WordIdx_0 & 0x80000000) == 0)
    {
      uint64_t v101 = v16;
      unsigned __int16 v73 = HIWORD(v113);
      if (HIWORD(v113))
      {
        LODWORD(v74) = 0;
        uint64_t v75 = 0xFFFFLL;
        while (1)
        {
          uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, v73, &v113);
          if ((WordIdx_0 & 0x80000000) != 0) {
            goto LABEL_44;
          }
          uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1 + 168))(a2, a3, HIWORD(v113), 0, 1, &v111, (char *)&v112 + 2);
          if ((WordIdx_0 & 0x80000000) != 0) {
            goto LABEL_44;
          }
          if (v111 > 0xA || ((1 << v111) & 0x610) == 0) {
            goto LABEL_85;
          }
          uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, HIWORD(v113), 1, 1, &v110, (char *)&v112 + 2);
          if ((WordIdx_0 & 0x80000000) != 0) {
            goto LABEL_44;
          }
          uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1 + 168))(a2, a3, HIWORD(v113), 2, 1, (char *)&v110 + 2, (char *)&v112 + 2);
          if ((WordIdx_0 & 0x80000000) != 0) {
            goto LABEL_44;
          }
          if ((unsigned __int16)v110 == HIWORD(v110))
          {
LABEL_85:
            uint64_t v80 = v75;
          }
          else
          {
            uint64_t WordIdx_0 = getWordIdx_0(*v8, v101, (unsigned __int16)v110, HIWORD(v110), &v109, v77, v78, v79);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            uint64_t v80 = v109;
            if (subsumedWordRec((uint64_t)v101, v109))
            {
              uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, HIWORD(v113));
              if ((WordIdx_0 & 0x80000000) != 0) {
                goto LABEL_44;
              }
              goto LABEL_111;
            }
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1 + 176))(a2, a3, HIWORD(v113), 5, &__s1, (char *)&v112 + 2);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1 + 176))(a2, a3, HIWORD(v113), 3, &v106, (char *)&v112 + 2);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1 + 168))(a2, a3, HIWORD(v113), 7, 1, &v103, (char *)&v112 + 2);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            if ((_WORD)v75 == 0xFFFF || v80 == (unsigned __int16)v75)
            {
              if (v74 > 0x7F) {
                goto LABEL_111;
              }
            }
            else
            {
              if (v74 >= 2)
              {
                uint64_t v81 = 0;
                unsigned __int16 v82 = -1;
                unsigned __int16 v83 = -1;
                uint64_t v74 = v74;
                do
                {
                  unsigned int v84 = *((unsigned __int16 *)v115 + v81);
                  if (v84 <= v82) {
                    unsigned __int16 v83 = v81;
                  }
                  if (v84 < v82) {
                    unsigned __int16 v82 = *((_WORD *)v115 + v81);
                  }
                  ++v81;
                }
                while (v74 != v81);
                uint64_t v85 = v83;
                unsigned int v86 = v116;
                while (1)
                {
                  if (v85)
                  {
                    uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, *(unsigned __int16 *)v86);
                    if ((WordIdx_0 & 0x80000000) != 0) {
                      goto LABEL_44;
                    }
                  }
                  unsigned int v86 = (char **)((char *)v86 + 2);
                  --v85;
                  if (!--v74) {
                    goto LABEL_110;
                  }
                }
              }
              LODWORD(v74) = 0;
            }
LABEL_110:
            *((_WORD *)v116 + v74) = HIWORD(v113);
            *((_WORD *)v115 + v74) = v103;
            LODWORD(v74) = v74 + 1;
          }
LABEL_111:
          unsigned __int16 v73 = v113;
          HIWORD(v113) = v113;
          uint64_t v75 = v80;
          if (!(_WORD)v113)
          {
            if (v74 < 2) {
              break;
            }
            uint64_t v87 = 0;
            unsigned __int16 v88 = -1;
            unsigned __int16 v89 = -1;
            uint64_t v74 = v74;
            do
            {
              unsigned int v90 = *((unsigned __int16 *)v115 + v87);
              if (v90 <= v88) {
                unsigned __int16 v89 = v87;
              }
              if (v90 < v88) {
                unsigned __int16 v88 = *((_WORD *)v115 + v87);
              }
              ++v87;
            }
            while (v74 != v87);
            uint64_t v91 = v89;
            __int16 v92 = v116;
            while (1)
            {
              if (v91)
              {
                uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, *(unsigned __int16 *)v92);
                if ((WordIdx_0 & 0x80000000) != 0) {
                  goto LABEL_44;
                }
              }
              __int16 v92 = (char **)((char *)v92 + 2);
              --v91;
              if (!--v74) {
                goto LABEL_123;
              }
            }
          }
        }
      }
LABEL_123:
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v114, (char *)&v113 + 2);
      if ((v15 & 0x80000000) != 0 || (unsigned __int16 v93 = HIWORD(v113)) == 0)
      {
LABEL_45:
        uint64_t v25 = v102;
        goto LABEL_46;
      }
      uint64_t v94 = 0;
      while (1)
      {
        uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1 + 168))(a2, a3, v93, 0, 1, &v111, (char *)&v112 + 2);
        if ((WordIdx_0 & 0x80000000) != 0) {
          break;
        }
        if (v111 <= 0xA && ((1 << v111) & 0x610) != 0)
        {
          uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1 + 176))(a2, a3, HIWORD(v113), 5, &__s1, (char *)&v112 + 2);
          if ((WordIdx_0 & 0x80000000) != 0) {
            break;
          }
          uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1 + 176))(a2, a3, HIWORD(v113), 3, &v106, (char *)&v112 + 2);
          if ((WordIdx_0 & 0x80000000) != 0) {
            break;
          }
          if (v94 < *((unsigned __int16 *)v8 + 328))
          {
            log_OutText(*(void *)(v102 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"(no sgram) word %d %s POS=%s PHON=%s recId=%d", v96, v97, v98, v94);
            uint64_t v94 = (v94 + 1);
          }
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, HIWORD(v113), &v113);
        if ((v15 & 0x80000000) == 0)
        {
          unsigned __int16 v93 = v113;
          HIWORD(v113) = v113;
          if ((_WORD)v113) {
            continue;
          }
        }
        goto LABEL_45;
      }
    }
LABEL_44:
    uint64_t v15 = WordIdx_0;
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, v64, &v113);
    if ((updated & 0x80000000) != 0) {
      break;
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1 + 168))(a2, a3, HIWORD(v113), 0, 1, &v111, (char *)&v112 + 2);
    if ((v15 & 0x80000000) != 0) {
      goto LABEL_46;
    }
    if (v111 <= 0xA && ((1 << v111) & 0x610) != 0)
    {
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1 + 176))(a2, a3, HIWORD(v113), 5, &__s1, (char *)&v112 + 2);
      if ((updated & 0x80000000) != 0) {
        break;
      }
      uint64_t v66 = __s1;
      int v67 = strlen(__s1);
      int v68 = *__s1;
      uint64_t v69 = __s1;
      while (v68 == 92)
      {
        --v67;
        int v70 = *++v69;
        int v68 = v70;
      }
      memmove(__s1, v69, (v67 + 1));
      unsigned int v71 = strchr(v66, 92);
      if (v71) {
        *unsigned int v71 = 0;
      }
      __int16 v72 = strlen(__s1);
      uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(a1 + 160))(a2, a3, HIWORD(v113), 5, (unsigned __int16)(v72 + 1), __s1, &v112);
      if ((WordIdx_0 & 0x80000000) != 0) {
        goto LABEL_44;
      }
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1 + 184))(a2, a3, HIWORD(v113), 14, (char *)&v114 + 2);
      uint64_t v25 = v102;
      if ((updated & 0x80000000) != 0) {
        break;
      }
      if (HIWORD(v114) != 1) {
        goto LABEL_143;
      }
      v116[0] = 0;
      *(void *)&v115[0] = 0;
      unsigned __int16 v103 = 0;
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1 + 176))(a2, a3, HIWORD(v113), 14, v116, (char *)&v112 + 2);
      if ((v15 & 0x80000000) != 0) {
        goto LABEL_46;
      }
      if (HIWORD(v112) < 2u || !hlp_NLUStrFind(v116[0], "POS", (uint64_t *)v115, &v103))
      {
LABEL_143:
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, HIWORD(v113));
        if ((v15 & 0x80000000) != 0) {
          goto LABEL_46;
        }
      }
    }
    unsigned __int16 v64 = v113;
    HIWORD(v113) = v113;
    if (!(_WORD)v113) {
      goto LABEL_72;
    }
  }
LABEL_138:
  uint64_t v15 = updated;
LABEL_46:
  *(unsigned char *)v8[91] = 0;
  if (v105) {
    heap_Free(*(void **)(v25 + 8), (uint64_t)v105);
  }
  return v15;
}

uint64_t subsumedWordRec(uint64_t a1, unsigned int a2)
{
  if (!*(_WORD *)(a1 + 8)) {
    return 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    if (160 * a2 != v2)
    {
      uint64_t v3 = (unsigned __int16 *)(*(void *)a1 + 160 * a2);
      if (*v3 >= *(unsigned __int16 *)(*(void *)a1 + v2)
        && v3[1] <= *(unsigned __int16 *)(*(void *)a1 + v2 + 2))
      {
        break;
      }
    }
    v2 += 160;
    if (160 * *(unsigned __int16 *)(a1 + 8) == v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t statpos_disambiguatePOSTags(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 1024);
  *(void *)(a1 + 776) = v3;
  if (!v3)
  {
    log_OutPublic(*(void *)(v2 + 32), (uint64_t)"FE_POS", 35000, 0, v4, v5, v6, v7, v13);
    return 2313166858;
  }
  uint64_t v8 = (unsigned __int16 *)(a1 + 648);
  if (*(_DWORD *)(a1 + 1336) == 1)
  {
    uint64_t v9 = statpos_crf_label(v2, a1 + 1320, v8, (void *)(a1 + 8), 1);
LABEL_7:
    uint64_t v10 = v9;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 804) == 1)
  {
    uint64_t v9 = statpos_igtrees_label(v2, a1 + 8, (uint64_t)v8, a1 + 784);
    goto LABEL_7;
  }
  uint64_t v10 = 0;
LABEL_9:
  uint64_t v11 = *(void *)(a1 + 776);
  if (v11)
  {
    heap_Free(*(void **)(v2 + 8), v11);
    *(void *)(a1 + 776) = 0;
  }
  return v10;
}

uint64_t statpos_setMorphemePRON(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_WORD *)(a4 + 656))
  {
    unint64_t v5 = 0;
    uint64_t v35 = (const char **)(a4 + 1384);
    uint64_t v6 = *(void *)a4;
    uint64_t v7 = (uint64_t *)(a4 + 728);
    uint64_t v31 = (void *)(a4 + 1408);
    uint64_t v32 = (void *)(a4 + 1400);
    uint64_t v8 = 120;
    while (1)
    {
      **(unsigned char **)(a4 + 728) = 0;
      uint64_t v9 = *(void *)(a4 + 648);
      uint64_t v10 = *(char **)(v9 + v8);
      if (!v10) {
        uint64_t v10 = **(char ***)(v9 + v8 - 72);
      }
      uint64_t v11 = statcomp_add2Str(v6, (const char **)(a4 + 728), (_WORD *)(a4 + 744), v10);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      uint64_t v15 = *(void *)(a4 + 648) + v8;
      if (*(_DWORD *)(v15 - 96) == 1) {
        break;
      }
      if (!*(void *)(v15 - 32)) {
        goto LABEL_14;
      }
      uint64_t v11 = statcomp_add2Str(v6, (const char **)(a4 + 728), (_WORD *)(a4 + 744), "/");
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      uint64_t v11 = statcomp_add2Str(v6, (const char **)(a4 + 728), (_WORD *)(a4 + 744), *(char **)(*(void *)(a4 + 648) + v8 - 32));
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      uint64_t info_from_dct = statpos_get_info_from_dct(v6, *(void *)(a4 + 752), *(void *)(a4 + 760), *(void *)(a4 + 768), "morph_pos", *(void *)(a4 + 728), (char **)(*(void *)(a4 + 648) + v8 - 88), 0, "STR");
      if ((info_from_dct & 0x80000000) != 0) {
        return info_from_dct;
      }
      uint64_t v20 = *(void *)(v6 + 32);
      if (*(void *)(*(void *)(a4 + 648) + v8 - 88))
      {
        log_OutText(v20, (uint64_t)"FE_POS", 5, 0, (uint64_t)"lookup %s ; transcription %s",
          v16,
          v17,
          v18,
          *(void *)(a4 + 728));
      }
      else
      {
        log_OutText(v20, (uint64_t)"FE_POS", 5, 0, (uint64_t)"lookup %s ; FAILED",
          v16,
          v17,
          v18,
          *(void *)(a4 + 728));
        int v21 = strlen(v10);
        unsigned __int16 v22 = Utf8_LengthInUtf8chars((unint64_t)v10, v21);
        int v23 = strlen(*(const char **)(*(void *)(a4 + 648) + v8 - 32));
        if ((unsigned __int16)Utf8_LengthInUtf8chars(*(void *)(*(void *)(a4 + 648) + v8 - 32), v23) > v22)
        {
          int v24 = strlen(*(const char **)(*(void *)(a4 + 648) + v8 - 32));
          unsigned __int16 v22 = Utf8_LengthInUtf8chars(*(void *)(*(void *)(a4 + 648) + v8 - 32), v24);
        }
        uint64_t v11 = statpos_growAndSetLayer(v6, v35, v32, v10, v22);
        if ((v11 & 0x80000000) != 0) {
          return v11;
        }
        uint64_t v11 = statpos_growAndSetLayer(v6, (const char **)(a4 + 1392), v31, *(char **)(*(void *)(a4 + 648) + v8 - 32), v22);
        if ((v11 & 0x80000000) != 0) {
          return v11;
        }
        uint64_t info_from_dct = statPOS_call_one_word(v6, a1, a2, a3, v35, (const char **)(a4 + 1392), (char **)(*(void *)(a4 + 648) + v8 - 88), v25);
        if ((info_from_dct & 0x80000000) != 0) {
          return info_from_dct;
        }
        log_OutText(*(void *)(v6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s ; one_word transcription %s",
          v26,
          v27,
          v28,
          (uint64_t)v10);
      }
LABEL_21:
      ++v5;
      v8 += 160;
      if (v5 >= *(unsigned __int16 *)(a4 + 656)) {
        goto LABEL_24;
      }
    }
    log_OutText(*(void *)(v6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"SKIP DCT LOOKUP WORD %s", v12, v13, v14, *v7);
LABEL_14:
    uint64_t info_from_dct = 0;
    goto LABEL_21;
  }
  uint64_t info_from_dct = 0;
LABEL_24:
  **(unsigned char **)(a4 + 728) = 0;
  return info_from_dct;
}

uint64_t statpos_growAndSetLayer(uint64_t a1, const char **a2, void *a3, char *__src, unsigned int a5)
{
  uint64_t v8 = (char *)*a2;
  if (*(unsigned __int16 *)a3 < a5)
  {
    uint64_t v11 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v8, a5 + 2);
    if (!v11)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v12, v13, v14, v15, v18);
      return 2313166858;
    }
    uint64_t v8 = (char *)v11;
    *a2 = (const char *)v11;
    *a3 = a5 + 2;
  }
  strcpy(v8, __src);
  for (unsigned int i = (unsigned __int16)strlen(__src); i < a5; ++i)
    *(_WORD *)&(*a2)[strlen(*a2)] = 126;
  return 0;
}

uint64_t statpos_getUniqDynamicPOS(uint64_t a1, uint64_t a2, char *__s, _DWORD *a4)
{
  *a4 = -1;
  uint64_t v8 = *(unsigned __int16 *)(a2 + 312);
  if (!*(_WORD *)(a2 + 312))
  {
LABEL_5:
    unsigned __int16 v12 = strlen(__s);
    unsigned __int16 v13 = v12;
    int v14 = v12;
    int v15 = *(_DWORD *)(a2 + 316);
    if (*(unsigned __int16 *)(a2 + 324) + v12 >= (unsigned __int16)v15)
    {
      if (v12 >= 0x80u) {
        int v16 = (unsigned __int16)(v12 + 32);
      }
      else {
        int v16 = 128;
      }
      uint64_t v17 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 296), (v16 + v15));
      if (!v17) {
        goto LABEL_17;
      }
      *(void *)(a2 + 296) = v17;
      *(_DWORD *)(a2 + 316) += v16;
      LODWORD(v8) = *(unsigned __int16 *)(a2 + 312);
    }
    int v22 = *(_DWORD *)(a2 + 320);
    if (v8 < (unsigned __int16)v22)
    {
LABEL_14:
      int v24 = *(char **)(a2 + 296);
      if (*(_WORD *)(a2 + 324)) {
        strcat(&v24[*(unsigned __int16 *)(a2 + 324)], __s);
      }
      else {
        strcpy(v24, __s);
      }
      uint64_t v25 = 0;
      *(unsigned char *)(*(void *)(a2 + 296) + (v14 + 1) + (unint64_t)*(unsigned __int16 *)(a2 + 324)) = 0;
      int v26 = *(unsigned __int16 *)(a2 + 324);
      int v27 = *(unsigned __int16 *)(a2 + 312);
      *(_DWORD *)(*(void *)(a2 + 304) + 4 * *(unsigned __int16 *)(a2 + 312)) = v26;
      *(_WORD *)(a2 + 324) = v13 + v26 + 1;
      *a4 = v27;
      *(_WORD *)(a2 + 312) = v27 + 1;
      return v25;
    }
    uint64_t v23 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 304), 4 * (v22 + 16));
    if (v23)
    {
      *(void *)(a2 + 304) = v23;
      *(_DWORD *)(a2 + 320) += 16;
      goto LABEL_14;
    }
LABEL_17:
    uint64_t v25 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v18, v19, v20, v21, v29);
    return v25;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)(a2 + 296);
  uint64_t v11 = *(void *)(a2 + 304);
  while (strcmp(__s, (const char *)(v10 + *(unsigned int *)(v11 + 4 * v9))))
  {
    if (v8 == ++v9) {
      goto LABEL_5;
    }
  }
  uint64_t v25 = 0;
  *a4 = v9;
  return v25;
}

uint64_t addPOSandPHR(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, const char *a6, unsigned int a7, const char *a8, unsigned __int16 a9)
{
  __int16 v11 = a4;
  if (a4 == a5)
  {
    if (a4 + 1 == *((unsigned __int16 *)a3 + 4)) {
      LOWORD(a5) = a4 + 1;
    }
    else {
      LOWORD(a5) = a4;
    }
  }
  if (a4 >= (unsigned __int16)a5) {
    return 0;
  }
  size_t __n = a7;
  uint64_t v15 = a7 + 1;
  uint64_t v16 = a4;
  uint64_t v31 = (unsigned __int16)a5;
  uint64_t v17 = *a3;
  for (uint64_t i = 160 * a4 + 104; ; i += 160)
  {
    uint64_t v19 = *(void *)(*(void *)(v17 + i - 56) + 24);
    if (v19)
    {
      heap_Free(*(void **)(a1 + 8), v19);
      uint64_t v20 = (uint64_t *)(*a3 + i);
      *(void *)(*(v20 - 7) + 24) = 0;
      heap_Free(*(void **)(a1 + 8), *v20);
      *(void *)(*a3 + i) = 0;
    }
    uint64_t v21 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v15);
    *(void *)(*(void *)(*a3 + i - 56) + 24) = v21;
    if (!v21) {
      break;
    }
    if (a6)
    {
      strncat(v21, a6, __n);
      uint64_t v21 = *(char **)(*(void *)(*a3 + i - 56) + 24);
    }
    a3[6] = (uint64_t)v21;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"retag REF POS %s", v23, v24, v25, (uint64_t)v21);
    uint64_t v26 = statpos_retagREFPOS(a1, a2, a3, (unsigned __int16)v16);
    if ((v26 & 0x80000000) != 0) {
      return v26;
    }
    int v27 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, a9 + 1);
    uint64_t v17 = *a3;
    *(void *)(*a3 + i) = v27;
    if (!v27) {
      break;
    }
    if (a8)
    {
      strncat(v27, a8, a9);
      uint64_t v17 = *a3;
    }
    *(_WORD *)(v17 + i - 100) = v11;
    if (v31 == ++v16) {
      return v26;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v22, v23, v24, v25, v29);
  return 2313166858;
}

uint64_t checkSpan_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*a3) {
    return 0;
  }
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, (24 * *(unsigned __int16 *)(a2 + 376)) | 1);
  if (v6)
  {
    uint64_t v11 = v6;
    uint64_t result = 0;
    *a3 = v11;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v12);
    return 2313166858;
  }
  return result;
}

uint64_t checkAllocAndZero(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  size_t v7 = a3;
  if (v5)
  {
    uint64_t v8 = (void *)heap_Realloc(v6, v5, a3);
    if (v8)
    {
      uint64_t v13 = (uint64_t)v8;
      bzero(v8, v7);
LABEL_5:
      uint64_t result = 0;
      *a2 = v13;
      return result;
    }
  }
  else
  {
    uint64_t v13 = heap_Calloc(v6, 1, a3);
    if (v13) {
      goto LABEL_5;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v9, v10, v11, v12, v15);
  return 2313166858;
}

uint64_t loc_CopyValue(_DWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2313166855;
  if (a1 && a2 && a3)
  {
    uint64_t v6 = (_DWORD *)heap_Alloc(a2, 5);
    if (v6)
    {
      uint64_t v3 = 0;
      *uint64_t v6 = *a1;
      *a3 = v6;
    }
    else
    {
      return 2313166858;
    }
  }
  return v3;
}

void *loc_FreeValue(void *result, void *a2)
{
  if (result) {
    return heap_Free(a2, (uint64_t)result);
  }
  return result;
}

uint64_t logSTATPOSRULE_TRule(uint64_t result, const char **a2, _WORD *a3, char *__s, uint64_t *a5, uint64_t **a6)
{
  if (result)
  {
    if (!*a6 || (uint64_t result = logSTATPOSCONTEXT_TRule(a2, a3, __s, a5, *a6), (result & 0x80000000) == 0))
    {
      *(_DWORD *)unsigned int __s = 2121504;
      uint64_t result = statcomp_add2Str(*a5, a2, a3, __s);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v11 = a6[1];
        if (!v11 || (uint64_t result = logSTATPOSCONTEXT_TRule(a2, a3, __s, a5, v11), (result & 0x80000000) == 0))
        {
          *(_DWORD *)unsigned int __s = 2121504;
          uint64_t result = statcomp_add2Str(*a5, a2, a3, __s);
          if ((result & 0x80000000) == 0)
          {
            uint64_t v12 = a6[2];
            if (v12)
            {
              return logSTATPOSCONTEXT_TRule(a2, a3, __s, a5, v12);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t logSTATPOSCONTEXT_TRule(const char **a1, _WORD *a2, char *__s, uint64_t *a4, uint64_t *a5)
{
  if (*((_WORD *)a5 + 4))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *a5;
      uint64_t v13 = (unsigned __int16 *)(*a5 + v10);
      if (*((unsigned char *)v13 + 4)) {
        break;
      }
LABEL_17:
      uint64_t result = statcomp_add2Str(*a4, a1, a2, "[");
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = statcomp_add2Str(*a4, a1, a2, (char *)(a4[37] + *(unsigned int *)(a4[38] + 4 * *v13)));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      sprintf(__s, " %d(", *(unsigned __int16 *)(v12 + v10 + 2));
      uint64_t result = statcomp_add2Str(*a4, a1, a2, __s);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = statcomp_add2Str(*a4, a1, a2, (char *)(a4[32] + *(unsigned int *)(a4[33] + 4 * *(unsigned __int16 *)(v12 + v10 + 2))));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = statcomp_add2Str(*a4, a1, a2, ")] ");
LABEL_22:
      if ((result & 0x80000000) == 0)
      {
        ++v11;
        v10 += 6;
        if (v11 < *((unsigned __int16 *)a5 + 4)) {
          continue;
        }
      }
      return result;
    }
    if (v13[2])
    {
      *(_WORD *)unsigned int __s = 33;
    }
    else
    {
      if ((v13[2] & 2) != 0)
      {
        int v14 = 0;
        strcpy(__s, "HASCOMMA ");
        goto LABEL_15;
      }
      if ((v13[2] & 4) != 0)
      {
        int v14 = 0;
        strcpy(__s, "DIRECTIVE_MOVE2NEXT ");
        goto LABEL_15;
      }
      if ((v13[2] & 8) != 0)
      {
        int v14 = 0;
        strcpy(__s, "ISLASTINPHR ");
        goto LABEL_15;
      }
      if ((v13[2] & 0x10) != 0)
      {
        int v14 = 0;
        strcpy(__s, "ISFIRSTINPHR ");
LABEL_15:
        uint64_t result = statcomp_add2Str(*a4, a1, a2, __s);
        if (!v14 || (result & 0x80000000) != 0) {
          goto LABEL_22;
        }
        goto LABEL_17;
      }
    }
    int v14 = 1;
    goto LABEL_15;
  }
  return 0;
}

uint64_t statpos_rules_unload(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[33];
  if (v10)
  {
    heap_Free(*(void **)(v9 + 8), v10);
    a1[33] = 0;
  }
  unint64_t v11 = (void *)a1[35];
  if (v11)
  {
    uint64_t v12 = ssftriff_reader_ReleaseChunkData(v11, v10, a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    a1[35] = 0;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = a1[38];
  if (v13)
  {
    heap_Free(*(void **)(v9 + 8), v13);
    a1[38] = 0;
  }
  int v14 = (void *)a1[41];
  if (v14)
  {
    uint64_t v12 = ssftriff_reader_ReleaseChunkData(v14, v13, a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    a1[41] = 0;
  }
  uint64_t v15 = a1[28];
  if (v15)
  {
    heap_Free(*(void **)(v9 + 8), v15);
    a1[28] = 0;
  }
  uint64_t v16 = (void *)a1[30];
  if (v16)
  {
    uint64_t v12 = ssftriff_reader_ReleaseChunkData(v16, v15, a3, a4, a5, a6, a7, a8);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    a1[30] = 0;
  }
  uint64_t v17 = a1[42];
  if (v17)
  {
    heap_Free(*(void **)(v9 + 8), v17);
    a1[42] = 0;
  }
  uint64_t v18 = a1[43];
  if (v18)
  {
    heap_Free(*(void **)(v9 + 8), v18);
    a1[43] = 0;
  }
  uint64_t v19 = a1[44];
  if (v19)
  {
    heap_Free(*(void **)(v9 + 8), v19);
    a1[44] = 0;
  }
  uint64_t v20 = a1[45];
  if (v20)
  {
    heap_Free(*(void **)(v9 + 8), v20);
    a1[45] = 0;
  }
  uint64_t v21 = a1[46];
  if (v21)
  {
    heap_Free(*(void **)(v9 + 8), v21);
    a1[46] = 0;
  }
  uint64_t v22 = a1[6];
  if (v22)
  {
    if (*((_WORD *)a1 + 28))
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      do
      {
        freeMAPRULE2STR_TRule((void *)v9, (void *)(a1[6] + v23));
        ++v24;
        v23 += 32;
      }
      while (v24 < *((unsigned __int16 *)a1 + 28));
      uint64_t v22 = a1[6];
    }
    heap_Free(*(void **)(v9 + 8), v22);
    a1[6] = 0;
  }
  *((_WORD *)a1 + 28) = 0;
  uint64_t v25 = a1[8];
  if (v25)
  {
    if (*((_WORD *)a1 + 36))
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        freeMAPRULE2STR_TRule((void *)v9, (void *)(a1[8] + v26));
        ++v27;
        v26 += 32;
      }
      while (v27 < *((unsigned __int16 *)a1 + 36));
      uint64_t v25 = a1[8];
    }
    heap_Free(*(void **)(v9 + 8), v25);
    a1[8] = 0;
  }
  *((_WORD *)a1 + 36) = 0;
  uint64_t v28 = a1[10];
  if (v28)
  {
    unsigned int v29 = *((unsigned __int16 *)a1 + 44);
    if (*((_WORD *)a1 + 44))
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      do
      {
        if (*(_WORD *)(v28 + v30 + 16))
        {
          heap_Free(*(void **)(v9 + 8), *(void *)(v28 + v30 + 8));
          uint64_t v28 = a1[10];
          uint64_t v32 = v28 + v30;
          *(void *)(v32 + 8) = 0;
          *(_WORD *)(v32 + 16) = 0;
          unsigned int v29 = *((unsigned __int16 *)a1 + 44);
        }
        ++v31;
        v30 += 24;
      }
      while (v31 < v29);
    }
    heap_Free(*(void **)(v9 + 8), v28);
    a1[10] = 0;
  }
  *((_WORD *)a1 + 44) = 0;
  if (*((_WORD *)a1 + 52))
  {
    heap_Free(*(void **)(v9 + 8), a1[12]);
    a1[12] = 0;
    *((_WORD *)a1 + 52) = 0;
    ssftmap_ObjClose(a1[14]);
  }
  if (a1[18])
  {
    uint64_t v33 = 0;
    uint64_t v34 = a1 + 48;
    do
    {
      heap_Free(*(void **)(v9 + 8), v34[v33]);
      v34[v33++] = 0;
    }
    while (v33 != 32);
    uint64_t v35 = a1[18];
    if (v35)
    {
      ssftmap_ObjClose(v35);
      a1[18] = 0;
    }
  }
  uint64_t v36 = a1[4];
  if (v36)
  {
    heap_Free(*(void **)(v9 + 8), v36);
    a1[4] = 0;
  }
  *((_WORD *)a1 + 20) = 0;
  return v12;
}

void *freeMAPRULE2STR_TRule(void *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = a2[1];
  if (v4)
  {
    if (*(_WORD *)(v4 + 8))
    {
      heap_Free((void *)result[1], *(void *)v4);
      *(void *)uint64_t v4 = 0;
      uint64_t v4 = a2[1];
    }
    uint64_t result = heap_Free((void *)v3[1], v4);
    a2[1] = 0;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    if (*(_WORD *)(v5 + 8))
    {
      heap_Free((void *)v3[1], *(void *)v5);
      *(void *)uint64_t v5 = 0;
      uint64_t v5 = a2[2];
    }
    uint64_t result = heap_Free((void *)v3[1], v5);
    a2[2] = 0;
  }
  uint64_t v6 = a2[3];
  if (v6)
  {
    if (*(_WORD *)(v6 + 8))
    {
      heap_Free((void *)v3[1], *(void *)v6);
      *(void *)uint64_t v6 = 0;
      uint64_t v6 = a2[3];
    }
    uint64_t result = heap_Free((void *)v3[1], v6);
    a2[3] = 0;
  }
  return result;
}

uint64_t matchSTATPOSCONTEXT_TRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, int *a6, uint64_t a7, uint64_t a8)
{
  int v26 = 1;
  uint64_t v14 = *(void *)a2;
  *a6 = 0;
  *(unsigned int *)((char *)a5 + 6) = 0;
  if (*(_WORD *)(a2 + 8))
  {
    uint64_t v16 = (unsigned char **)(a3 + 80);
    uint64_t matched = logSTATPOSCONTEXT_TRule((const char **)(a3 + 80), (_WORD *)(a3 + 96), *(char **)(a3 + 88), (uint64_t *)a2, (uint64_t *)a4);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    log_OutText(*(void *)(v14 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"         %s %s", v17, v18, v19, a1);
    **uint64_t v16 = 0;
  }
  else
  {
    uint64_t matched = 0;
  }
  if (*(_WORD *)(a4 + 8))
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t matched = matchREGEX_TRule_0((uint64_t *)a2, (uint64_t *)a3, (unsigned __int16 *)(*(void *)a4 + v21), a5, &v26, a7, a8, a8);
      if ((matched & 0x80000000) != 0) {
        break;
      }
      int v23 = v26;
      if (v26 != 1) {
        goto LABEL_11;
      }
      ++v22;
      v21 += 6;
      if (v22 >= *(unsigned __int16 *)(a4 + 8)) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    int v23 = 1;
LABEL_11:
    *a6 = v23;
  }
  return matched;
}

uint64_t matchREGEX_TRule_0(uint64_t *a1, uint64_t *a2, unsigned __int16 *a3, unsigned int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  uint64_t v62 = *MEMORY[0x263EF8340];
  int v15 = *((unsigned __int16 *)a4 + 2);
  uint64_t v16 = *a1;
  *a5 = 0;
  if (*((_WORD *)a1 + 4)) {
    log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           regex %d", a6, a7, a8, a3[1]);
  }
  unsigned int v17 = *((unsigned __int8 *)a3 + 4);
  if (*((unsigned char *)a3 + 4))
  {
    if ((v17 & 4) != 0)
    {
      if (v8 == 2)
      {
        ++*((_WORD *)a4 + 4);
      }
      else if (v8 == 1)
      {
        ++*((_WORD *)a4 + 3);
      }
      if (*((_WORD *)a1 + 4)) {
        log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           DIRECTIVE_MOVE2NEXT - window increased (ruleDef->left_window=%d ruleDef->right_window=%d)", a6, a7, a8, *((unsigned __int16 *)a4 + 3));
      }
      uint64_t v21 = 0;
      goto LABEL_29;
    }
    uint64_t v60 = (_WORD *)a6;
    int v18 = (v17 >> 1) & 1;
    int v19 = v17 & 1;
  }
  else
  {
    uint64_t v60 = (_WORD *)a6;
    int v19 = 0;
    int v18 = 0;
  }
  if (*((unsigned __int16 *)a1 + 4) >= 2u) {
    log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           ruleDef[domain=%s(%d) wordIdx=%d left_window=%d right_window=%d] defMapIdx=%s(%d) bNegateMatch=%d bHasComma=%d", a6, a7, a8, (uint64_t)STATPOSDOMAIN2STRING[*a4]);
  }
  if (!v18)
  {
    if (*a4 - 1 <= 2 && v8 != 0)
    {
      if (v8 == 2)
      {
        v15 += *((unsigned __int16 *)a4 + 4) + 1;
        if (v15 >= *((unsigned __int16 *)a2 + 4)) {
          goto LABEL_37;
        }
      }
      else if (v8 != 1 || (v15 += ~*((unsigned __int16 *)a4 + 3), v15 < 0))
      {
LABEL_37:
        if (*((_WORD *)a1 + 4))
        {
          uint64_t v26 = *(void *)(v16 + 32);
          unint64_t v27 = "           context not found. rule not applicable. RETURN LH_FALSE";
LABEL_39:
          log_OutText(v26, (uint64_t)"FE_POS", 5, 0, (uint64_t)v27, a6, a7, a8, (uint64_t)v59);
          goto LABEL_134;
        }
        goto LABEL_134;
      }
    }
    switch(*a4)
    {
      case 1u:
        unint64_t v24 = *(char **)(*(void *)(*a2 + 160 * (unsigned __int16)v15 + 48) + 8 * *a3);
        goto LABEL_58;
      case 2u:
        unint64_t v24 = *(char **)(*(void *)(*a2 + 160 * (unsigned __int16)v15 + 56) + 24 * *a3 + 16);
        goto LABEL_58;
      case 3u:
        uint64_t v28 = *a3;
        if (v28 != *((unsigned __int16 *)a1 + 9)) {
          goto LABEL_56;
        }
        unint64_t v24 = (char *)(a2[2] + *(unsigned __int16 *)(a2[3] + 2 * (unsigned __int16)v15));
        goto LABEL_58;
      case 4u:
        uint64_t v29 = *a2;
        int v30 = *((unsigned __int16 *)a4 + 2);
        uint64_t v31 = *(void *)(*a2 + 160 * *((unsigned __int16 *)a4 + 2) + 56);
        if (!v31 || !*(_DWORD *)(v31 + 24 * *((unsigned __int16 *)a1 + 12))) {
          goto LABEL_134;
        }
        uint64_t v32 = *a1;
        if (v8 == 2)
        {
          unsigned int v49 = *((unsigned __int16 *)a2 + 4);
          if (v30 + 1 != v49)
          {
            int v55 = *((unsigned __int16 *)a4 + 4) + 1;
            if ((v55 & 0x10000) != 0)
            {
              unsigned __int16 v56 = *((_WORD *)a4 + 2);
LABEL_112:
              unsigned int v58 = *((unsigned __int16 *)a1 + 4);
              if (v49 > v56)
              {
                if (v58 >= 2) {
                  log_OutText(*(void *)(v32 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           [3] _RIGHT wordIdx=%d", a6, a7, a8, *((unsigned __int16 *)a4 + 2));
                }
                LOWORD(v30) = v56;
                goto LABEL_116;
              }
            }
            else
            {
              unsigned __int16 v56 = *((_WORD *)a4 + 2);
              while (v49 > v56)
              {
                unsigned __int16 v56 = *(_WORD *)(*(void *)(v29 + 160 * v56 + 56) + 24 * *((unsigned __int16 *)a1 + 12) + 10) + 1;
                if (!(_WORD)--v55) {
                  goto LABEL_112;
                }
              }
              unsigned int v58 = *((unsigned __int16 *)a1 + 4);
            }
            if (v58 >= 2)
            {
              uint64_t v26 = *(void *)(v32 + 32);
              unint64_t v27 = "           [2] _RIGHT doesnt exist, return LH_FALSE";
              goto LABEL_39;
            }
LABEL_134:
            uint64_t v21 = 0;
            goto LABEL_135;
          }
          if (*((unsigned __int16 *)a1 + 4) < 2u) {
            goto LABEL_134;
          }
          uint64_t v50 = *(void *)(v32 + 32);
          uint64_t v51 = "           [1] _RIGHT doesnt exist, return LH_FALSE";
        }
        else
        {
          if (v8 != 1)
          {
            if (!v8 && *((unsigned __int16 *)a1 + 4) >= 2u)
            {
              log_OutText(*(void *)(v32 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           _CUR wordIdx=%d", a6, a7, a8, *((unsigned __int16 *)a4 + 2));
              LOWORD(v30) = *((_WORD *)a4 + 2);
            }
            goto LABEL_116;
          }
          if (*((_WORD *)a4 + 2))
          {
            int v52 = *((unsigned __int16 *)a4 + 3) + 1;
            if ((v52 & 0x10000) != 0)
            {
              unsigned int v53 = *((unsigned __int16 *)a1 + 4);
              __int16 v54 = *((_WORD *)a4 + 2);
            }
            else
            {
              __int16 v54 = *((_WORD *)a4 + 2);
              do
              {
                uint64_t v57 = *(void *)(v29 + 160 * (unsigned __int16)(v54 - 1) + 56);
                if (!*(_DWORD *)(v57 + 24 * *((unsigned __int16 *)a1 + 12) + 4))
                {
                  uint64_t v21 = 2313166848;
                  log_OutText(*(void *)(v32 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"wordindex=%d does not end previous phrase", a6, a7, a8, (unsigned __int16)(v54 - 1));
                  return v21;
                }
                __int16 v54 = *(_WORD *)(v57 + 24 * *((unsigned __int16 *)a1 + 12) + 8);
                --v52;
              }
              while ((_WORD)v52 && *(_WORD *)(v57 + 24 * *((unsigned __int16 *)a1 + 12) + 8));
              unsigned int v53 = *((unsigned __int16 *)a1 + 4);
              if ((_WORD)v52)
              {
                if (v53 < 2) {
                  goto LABEL_134;
                }
                uint64_t v50 = *(void *)(v32 + 32);
                uint64_t v51 = "           [2] _LEFT doesnt exist, return LH_FALSE";
                goto LABEL_108;
              }
            }
            if (v53 >= 2) {
              log_OutText(*(void *)(v32 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           [3] _LEFT wordIdx=%d", a6, a7, a8, *((unsigned __int16 *)a4 + 2));
            }
            LOWORD(v30) = v54;
LABEL_116:
            unint64_t v24 = *(char **)(*(void *)(*a2 + 160 * (unsigned __int16)v30 + 144) + 8 * *a3);
            if (!v24)
            {
              if (*((_WORD *)a1 + 4))
              {
                uint64_t v48 = "           NULL STR FOUND - no match";
LABEL_119:
                log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v48, a6, a7, a8, (uint64_t)v59);
              }
              uint64_t v21 = 0;
              *a5 = 0;
              goto LABEL_121;
            }
LABEL_59:
            if (*((_WORD *)a1 + 4)) {
              log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           STR=\"%s\"", a6, a7, a8, (uint64_t)v24);
            }
            uint64_t v33 = a3[1];
            unsigned __int16 v34 = strlen(v24);
            if (!v34)
            {
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"invalid arg for regex", v35, v36, v37, (uint64_t)v59);
              return 2313166855;
            }
            *a5 = 0;
            unsigned int v38 = nuance_pcre_exec((void *)a1[24], a1[25], a1[27] + *(unsigned int *)(a1[28] + 4 * v33), 0, v24, v34, 0, 0, v61, 30);
            if ((v38 & 0x80000000) != 0)
            {
              uint64_t v43 = nuance_pcre_ErrorToLhError(v38);
              uint64_t v21 = v43;
              if ((v43 & 0xFFF00000) != 0x8A500000)
              {
                if ((v43 & 0x80000000) != 0) {
                  return v21;
                }
LABEL_68:
                if (*a5 == 1)
                {
                  if (*((_WORD *)a1 + 4)) {
                    log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           REGEX FIRED", a6, a7, a8, (uint64_t)v59);
                  }
                  if (!v19)
                  {
                    *uint64_t v60 = a3[1];
                    if (*((_WORD *)a1 + 4))
                    {
                      uint64_t v41 = *(void *)(v16 + 32);
                      uint64_t v42 = "           return LH_TRUE";
LABEL_126:
                      log_OutText(v41, (uint64_t)"FE_POS", 5, 0, (uint64_t)v42, a6, a7, a8, (uint64_t)v59);
                    }
LABEL_29:
                    int v22 = 1;
                    goto LABEL_30;
                  }
                  if (*((_WORD *)a1 + 4))
                  {
                    uint64_t v39 = *(void *)(v16 + 32);
                    uint64_t v40 = "           negate match - return LH_FALSE";
LABEL_129:
                    log_OutText(v39, (uint64_t)"FE_POS", 5, 0, (uint64_t)v40, a6, a7, a8, (uint64_t)v59);
                  }
LABEL_135:
                  *a5 = 0;
                  return v21;
                }
LABEL_121:
                if (*((_WORD *)a1 + 4)) {
                  log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           REGEX FAILED", a6, a7, a8, (uint64_t)v59);
                }
LABEL_123:
                if (v19)
                {
                  *uint64_t v60 = a3[1];
                  if (*((_WORD *)a1 + 4))
                  {
                    uint64_t v41 = *(void *)(v16 + 32);
                    uint64_t v42 = "           negate match - return LH_TRUE";
                    goto LABEL_126;
                  }
                  goto LABEL_29;
                }
                if (*((_WORD *)a1 + 4))
                {
                  uint64_t v39 = *(void *)(v16 + 32);
                  uint64_t v40 = "           return LH_FALSE";
                  goto LABEL_129;
                }
                goto LABEL_135;
              }
              if ((v43 & 0x1FFF) != 0x14)
              {
                if ((v43 & 0x1FFF) == 0xA)
                {
                  uint64_t v45 = *(void *)(*a1 + 32);
                  uint64_t v46 = 11002;
                  uint64_t v47 = 0;
                }
                else
                {
                  uint64_t v45 = *(void *)(*a1 + 32);
                  uint64_t v59 = "lhError";
                  uint64_t v47 = "%s%x";
                  uint64_t v46 = 11027;
                }
                log_OutPublic(v45, (uint64_t)"FE_POS", v46, v47, v44, a6, a7, a8, v59);
                return v21;
              }
            }
            else if (v38)
            {
              *a5 = 1;
            }
LABEL_67:
            uint64_t v21 = 0;
            goto LABEL_68;
          }
          if (*((unsigned __int16 *)a1 + 4) < 2u) {
            goto LABEL_134;
          }
          uint64_t v50 = *(void *)(v32 + 32);
          uint64_t v51 = "           [1] _LEFT doesnt exist, return LH_FALSE";
        }
LABEL_108:
        log_OutText(v50, (uint64_t)"FE_POS", 5, 0, (uint64_t)v51, a6, a7, a8, 0);
        goto LABEL_134;
      case 5u:
        if (*a3 == *((unsigned __int16 *)a1 + 9)) {
          unint64_t v24 = (char *)a2[2];
        }
        else {
          unint64_t v24 = (char *)a2[4];
        }
        goto LABEL_58;
      case 6u:
        unint64_t v24 = (char *)a2[6];
        if (!v24)
        {
          uint64_t v48 = "           ERROR : no POS string to match";
          goto LABEL_119;
        }
        uint64_t v28 = *a3;
        if (v28 == *((unsigned __int16 *)a1 + 9)) {
          goto LABEL_59;
        }
        if (v28 != *((unsigned __int16 *)a1 + 8))
        {
          uint64_t v48 = "           ERROR : unknown DEF index for POS/ORT rule";
          goto LABEL_119;
        }
LABEL_56:
        unint64_t v24 = *(char **)(*(void *)(*a2 + 160 * (unsigned __int16)v15 + 48) + 8 * v28);
LABEL_58:
        if (v24) {
          goto LABEL_59;
        }
LABEL_65:
        *a5 = 0;
        if (*((_WORD *)a1 + 4))
        {
          log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           NULL STR FOUND - no match", a6, a7, a8, (uint64_t)v59);
          goto LABEL_67;
        }
        uint64_t v21 = 0;
        goto LABEL_123;
      default:
        goto LABEL_65;
    }
  }
  unsigned int v20 = *((unsigned __int16 *)a4 + 2);
  if (*((_WORD *)a1 + 4))
  {
    log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           pSent->words[%d].bHasComma = %d", a6, a7, a8, *((unsigned __int16 *)a4 + 2));
    unsigned int v20 = *((unsigned __int16 *)a4 + 2);
  }
  if (*(_DWORD *)(*a2 + 160 * v20 + 12) == 1)
  {
    uint64_t v21 = 0;
    int v22 = v19 ^ 1;
LABEL_30:
    *a5 = v22;
    return v21;
  }
  uint64_t v21 = 0;
  *a5 = v19;
  return v21;
}

uint64_t matchSTATPOSRULE_TRule(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int *a5)
{
  int v21 = 1;
  if (*(_WORD *)(a1 + 8))
  {
    uint64_t v10 = *(void *)a1;
    unint64_t v11 = (uint64_t *)(a2 + 80);
    uint64_t matched = logSTATPOSRULE_TRule(*(unsigned int *)(a2 + 100), (const char **)(a2 + 80), (_WORD *)(a2 + 96), *(char **)(a2 + 88), (uint64_t *)a1, (uint64_t **)a3);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    log_OutText(*(void *)(v10 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"       <%s>", v12, v13, v14, *v11);
    *(unsigned char *)*unint64_t v11 = 0;
  }
  else
  {
    uint64_t matched = 0;
  }
  *a5 = 0;
  if (*(void *)a3)
  {
    uint64_t matched = matchSTATPOSCONTEXT_TRule((uint64_t)"LEFT", a1, a2, *(void *)a3, a4, &v21, (uint64_t)v20, 1);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v16 = v21;
    if (v21 != 1) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = *(void *)(a3 + 8);
  if (v17)
  {
    int v21 = 0;
    uint64_t matched = matchSTATPOSCONTEXT_TRule((uint64_t)"CUR", a1, a2, v17, a4, &v21, (uint64_t)v20, 0);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v16 = v21;
    if (v21 != 1)
    {
LABEL_15:
      *a5 = v16;
      return matched;
    }
  }
  uint64_t v18 = *(void *)(a3 + 16);
  if (!v18)
  {
    int v16 = 1;
    goto LABEL_15;
  }
  int v21 = 0;
  uint64_t matched = matchSTATPOSCONTEXT_TRule((uint64_t)"RIGHT", a1, a2, v18, a4, &v21, (uint64_t)v20, 2);
  if ((matched & 0x80000000) == 0)
  {
    int v16 = v21;
    goto LABEL_15;
  }
  return matched;
}

uint64_t getBrokerString_0(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned int __s = 0;
  memset(v13, 0, sizeof(v13));
  *(_DWORD *)__s2 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s);
  if ((result & 0x80000000) == 0)
  {
    size_t v7 = __s;
    if (*__s)
    {
      size_t v8 = 0;
      do
      {
        unint64_t v9 = v8;
        __s2[v8] = __tolower(v7[v8]);
        ++v8;
        size_t v7 = __s;
        size_t v10 = strlen(__s);
      }
      while (v9 <= 1 && v8 < v10);
    }
    else
    {
      size_t v8 = 0;
    }
    __s2[v8] = 0;
    if (strcmp(v7, __s2))
    {
      uint64_t result = paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)"langcode", __s2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int __s = __s2;
    }
    __strcpy_chk();
    __strcat_chk();
    __strcat_chk();
    return brokeraux_ComposeBrokerString(a1, (const char *)v13, 0, 1, __s, 0, 0, a2, a3);
  }
  return result;
}

uint64_t statpos_setParams(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statposdetailtrace", &v4) & 0x80000000) == 0) {
    *(_WORD *)(a2 + 8) = v4;
  }
  return 0;
}

uint64_t statPOSAddUniqueTagOffset2Word(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, __int16 a5)
{
  if (a4 == -1) {
    return 0;
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a3;
  uint64_t v12 = *(unsigned __int16 *)(*a2 + 160 * a3 + 72);
  if (!*(_WORD *)(*a2 + 160 * a3 + 72))
  {
LABEL_6:
    if (*(_WORD *)(v10 + 160 * a3 + 74))
    {
      if ((int)v12 + 2 <= *(unsigned __int16 *)(v10 + 160 * a3 + 74)) {
        goto LABEL_17;
      }
      uint64_t v16 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(v10 + 160 * a3 + 64), 24 * *(unsigned __int16 *)(v10 + 160 * a3 + 74) + 144);
      if (v16)
      {
        uint64_t v21 = *a2 + 160 * v11;
        *(void *)(v21 + 64) = v16;
        uint64_t v22 = v16 + 24 * *(unsigned __int16 *)(v21 + 74);
        *(void *)(v22 + 112) = 0;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        *(_OWORD *)(v22 + 48) = 0u;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 16) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)uint64_t v22 = 0u;
        uint64_t v10 = *a2;
        uint64_t v23 = *a2 + 160 * v11;
        __int16 v24 = *(_WORD *)(v23 + 74) + 5;
LABEL_16:
        *(_WORD *)(v23 + 74) = v24;
LABEL_17:
        uint64_t v28 = v10 + 160 * v11;
        unsigned int v29 = *(unsigned __int16 *)(v28 + 72);
        *(_DWORD *)(*(void *)(v28 + 64) + 24 * *(unsigned __int16 *)(v28 + 72)) = a4;
        uint64_t v30 = statPOSAddWordRec(a1, (uint64_t)a2, a3, v29, a5);
        if ((v30 & 0x80000000) != 0) {
          return v30;
        }
        uint64_t v25 = 0;
        ++*(_WORD *)(*a2 + 160 * v11 + 72);
        return v25;
      }
    }
    else
    {
      uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), 1, 241);
      uint64_t v10 = *a2;
      *(void *)(*a2 + 160 * v11 + 64) = v27;
      if (v27)
      {
        uint64_t v23 = v10 + 160 * v11;
        __int16 v24 = 10;
        goto LABEL_16;
      }
    }
    uint64_t v25 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v17, v18, v19, v20, v31);
    return v25;
  }
  uint64_t v13 = 0;
  uint64_t v14 = *(int **)(v10 + 160 * a3 + 64);
  while (1)
  {
    int v15 = *v14;
    v14 += 6;
    if (v15 == a4) {
      break;
    }
    if (v12 == ++v13) {
      goto LABEL_6;
    }
  }
  return statPOSAddWordRec(a1, (uint64_t)a2, a3, (unsigned __int16)v13, a5);
}

uint64_t statPOSAddWordRec(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, __int16 a5)
{
  uint64_t v8 = a3;
  uint64_t v9 = *(void *)(*(void *)a2 + 160 * a3 + 64);
  uint64_t v10 = a4;
  if (!*(_WORD *)(v9 + 24 * a4 + 18))
  {
    uint64_t v20 = heap_Calloc(*(void **)(a1 + 8), 1, 121);
    uint64_t v9 = *(void *)(*(void *)a2 + 160 * v8 + 64);
    *(void *)(v9 + 24 * v10 + 8) = v20;
    if (v20)
    {
      uint64_t v18 = v9 + 24 * v10;
      __int16 v19 = 5;
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v24 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v12, v13, v14, v15, v27);
    return v24;
  }
  if (*(unsigned __int16 *)(v9 + 24 * a4 + 16) + 2 <= *(unsigned __int16 *)(v9 + 24 * a4 + 18)) {
    goto LABEL_8;
  }
  uint64_t v11 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(v9 + 24 * a4 + 8), 24 * *(unsigned __int16 *)(v9 + 24 * a4 + 18) + 144);
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v16 = *(void *)(*(void *)a2 + 160 * v8 + 64) + 24 * v10;
  *(void *)(v16 + 8) = v11;
  uint64_t v17 = v11 + 24 * *(unsigned __int16 *)(v16 + 18);
  *(void *)(v17 + 112) = 0;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  uint64_t v9 = *(void *)(*(void *)a2 + 160 * v8 + 64);
  uint64_t v18 = v9 + 24 * v10;
  __int16 v19 = *(_WORD *)(v18 + 18) + 5;
LABEL_7:
  *(_WORD *)(v18 + 18) = v19;
LABEL_8:
  *(_WORD *)(*(void *)(v9 + 24 * v10 + 8) + 24 * *(unsigned __int16 *)(v9 + 24 * v10 + 16)) = a5;
  int v21 = strlen(*(const char **)(a2 + 56));
  uint64_t v22 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v21 + 1));
  uint64_t v23 = *(void *)(*(void *)a2 + 160 * v8 + 64) + 24 * v10;
  *(void *)(*(void *)(v23 + 8) + 24 * *(unsigned __int16 *)(v23 + 16) + 16) = v22;
  if (!v22) {
    goto LABEL_10;
  }
  strcpy(v22, *(const char **)(a2 + 56));
  uint64_t v24 = 0;
  uint64_t v25 = *(void *)(*(void *)a2 + 160 * v8 + 64) + 24 * v10;
  ++*(_WORD *)(v25 + 16);
  return v24;
}

uint64_t statpos_initCache(uint64_t result)
{
  *(_DWORD *)(result + 72) = 0;
  *(void *)(result + 64) = 0;
  return result;
}

uint64_t statpos_freeCache(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 72))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 64);
    do
    {
      heap_Free(*(void **)(a1 + 8), *(void *)(v6 + v4));
      uint64_t v6 = *(void *)(a2 + 64);
      *(void *)(v6 + v4) = 0;
      ++v5;
      v4 += 16;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 72));
  }
  heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 64));
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  return 0;
}

uint64_t statpos_retagPOS(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _DWORD *a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  int v83 = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  if (!v9)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"missing statpos data => must be included in CLC to train a POS model", (uint64_t)a6, a7, a8, v76);
    return 2313166848;
  }
  memset(v82, 0, 12);
  int v14 = *(unsigned __int16 *)(v9 + 16);
  if (!*(_WORD *)(v9 + 16))
  {
LABEL_7:
    uint64_t v78 = a5;
    uint64_t v79 = a1;
    if (*(_WORD *)(a2 + 88))
    {
      uint64_t v23 = 0;
      while (**(unsigned __int8 **)(a3 + 48) != *(unsigned __int8 *)(*(void *)(a2 + 80) + 24 * v23))
      {
LABEL_34:
        if (++v23 >= (unint64_t)*(unsigned __int16 *)(a2 + 88)) {
          goto LABEL_35;
        }
      }
      if (v14)
      {
        LOWORD(v24) = 0;
      }
      else
      {
        uint64_t v39 = 0;
        unint64_t v24 = 0;
        do
        {
          uint64_t v40 = *(void *)(a2 + 80);
          if (v24 >= *(unsigned __int16 *)(v40 + 24 * v23 + 16)) {
            break;
          }
          uint64_t v41 = *(void *)(v40 + 24 * v23 + 8);
          if (*(_DWORD *)(v41 + v39 + 4)) {
            break;
          }
          uint64_t v34 = *(unsigned __int16 *)(v41 + v39);
          WORD2(v82[0]) = a4;
          LODWORD(v82[0]) = 6;
          *(_DWORD *)((char *)v82 + 6) = 0;
          uint64_t v42 = *(void *)(a2 + 64);
          int v84 = 0;
          uint64_t matched = matchSTATPOSRULE_TRule(a2, a3, v42 + 32 * v34 + 8, (unsigned int *)v82, &v84);
          if ((matched & 0x80000000) != 0) {
            return matched;
          }
          if (v84 == 1)
          {
            uint64_t v52 = 32 * v34;
            log_OutText(*(void *)(v79 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE %d %s RETAG POS %s to %s on word[%d]=%s", v43, v44, v45, v34);
            *(void *)(a3 + 48) = *(void *)(a2 + 296)
                                 + *(unsigned int *)(*(void *)(a2 + 304)
                                                   + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v34));
            uint64_t v53 = v79;
            goto LABEL_66;
          }
          ++v24;
          v39 += 8;
        }
        while (!v84);
      }
      int v84 = 0;
      if (!*(_WORD *)(a3 + 72)
        || (statpos_getBracketlessString(__s1, *(char **)(a3 + 48)),
            uint64_t v25 = *(unsigned __int16 *)(a3 + 72),
            !*(_WORD *)(a3 + 72)))
      {
LABEL_17:
        uint64_t v30 = -1;
        uint64_t v31 = 4;
        while (1)
        {
          uint64_t v32 = *(void *)(a2 + 80);
          if (++v30 >= (unint64_t)*(unsigned __int16 *)(v32 + 24 * v23 + 16))
          {
            int v14 = 0;
            goto LABEL_34;
          }
          uint64_t v33 = *(void *)(v32 + 24 * v23 + 8);
          if (*(_DWORD *)(v33 + v31) == 1)
          {
            uint64_t v34 = *(unsigned __int16 *)(v33 + v31 - 4);
            WORD2(v82[0]) = a4;
            LODWORD(v82[0]) = 6;
            *(_DWORD *)((char *)v82 + 6) = 0;
            uint64_t v35 = *(void *)(a2 + 64);
            int v84 = 0;
            uint64_t matched = matchSTATPOSRULE_TRule(a2, a3, v35 + 32 * v34 + 8, (unsigned int *)v82, &v84);
            if ((matched & 0x80000000) != 0) {
              return matched;
            }
            int v14 = v84;
            if (v84 == 1)
            {
              uint64_t v52 = 32 * v34;
              log_OutText(*(void *)(v79 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE %d %s RETAG POS %s to %s on word[%d]=%s", v36, v37, v38, v34);
              if (*(_DWORD *)(*(void *)(*(void *)(a2 + 80) + 24 * v23 + 8) + v31) == 1)
              {
                statpos_addToCache(v79, a3, v34, v65, v66, v67, v68, v69, v77);
                if ((unsigned __int16)*a6 <= 0xEu)
                {
                  statpos_getBracketlessString(__s1, *(char **)(a3 + 48));
                  uint64_t v70 = (unsigned __int16)*a6;
                  if (!*a6) {
                    goto LABEL_63;
                  }
                  int v71 = 0;
                  uint64_t v72 = (unsigned __int16)*a6;
                  unsigned __int16 v73 = (const char **)a7;
                  do
                  {
                    uint64_t v74 = *v73++;
                    if (!strcmp(__s1, v74)) {
                      int v71 = 1;
                    }
                    --v72;
                  }
                  while (v72);
                  if (!v71)
                  {
LABEL_63:
                    strncpy(*(char **)(a7 + 8 * v70), __s1, 0x10uLL);
                    ++*a6;
                  }
                }
              }
              *(void *)(a3 + 48) = *(void *)(a2 + 296)
                                   + *(unsigned int *)(*(void *)(a2 + 304)
                                                     + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v34));
              uint64_t v53 = v79;
              goto LABEL_66;
            }
          }
          else
          {
            int v14 = 0;
          }
          v31 += 8;
          if (v14) {
            goto LABEL_34;
          }
        }
      }
      uint64_t v26 = (const char **)(*(void *)(a3 + 64) + 8);
      while (strcmp(__s1, *(v26 - 1)))
      {
        v26 += 2;
        if (!--v25) {
          goto LABEL_17;
        }
      }
      uint64_t v34 = *(unsigned __int16 *)v26;
      uint64_t v52 = 32 * v34;
      log_OutText(*(void *)(v79 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE FROM CACHE %d RETAG POS %s to %s on word[%d]=%s", v27, v28, v29, v34);
      if (*(_DWORD *)(*(void *)(*(void *)(a2 + 80) + 24 * v23 + 8) + 8 * (unsigned __int16)v24 + 4) == 1
        && (unsigned __int16)*a6 <= 0xEu)
      {
        statpos_getBracketlessString(__s1, *(char **)(a3 + 48));
        uint64_t v60 = (unsigned __int16)*a6;
        if (!*a6) {
          goto LABEL_51;
        }
        int v61 = 0;
        uint64_t v62 = (unsigned __int16)*a6;
        uint64_t v63 = (const char **)a7;
        do
        {
          unsigned __int16 v64 = *v63++;
          if (!strcmp(__s1, v64)) {
            int v61 = 1;
          }
          --v62;
        }
        while (v62);
        if (!v61)
        {
LABEL_51:
          strncpy(*(char **)(a7 + 8 * v60), __s1, 0x10uLL);
          ++*a6;
        }
      }
      *(void *)(a3 + 48) = *(void *)(a2 + 296)
                           + *(unsigned int *)(*(void *)(a2 + 304)
                                             + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v34));
      uint64_t v53 = v79;
LABEL_66:
      uint64_t v54 = a2;
      int v55 = (void *)a3;
      unsigned int v56 = a4;
      uint64_t v57 = v78;
      unsigned int v58 = v78;
      unsigned int v59 = v34;
    }
    else
    {
LABEL_35:
      uint64_t v46 = *(unsigned __int16 *)(a2 + 90);
      WORD2(v82[0]) = a4;
      LODWORD(v82[0]) = 6;
      *(_DWORD *)((char *)v82 + 6) = 0;
      uint64_t v47 = *(void *)(a2 + 64);
      int v84 = 0;
      uint64_t v51 = matchSTATPOSRULE_TRule(a2, a3, v47 + 32 * v46 + 8, (unsigned int *)v82, &v84);
      if ((v51 & 0x80000000) != 0) {
        return v51;
      }
      if (v84 != 1)
      {
        if (!*(_WORD *)(a2 + 104)) {
          log_OutText(*(void *)(v79 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"ERROR? NO MS1 RETAGGING OF %s", v48, v49, v50, *(void *)(a3 + 48));
        }
        return v51;
      }
      uint64_t v52 = 32 * v46;
      log_OutText(*(void *)(v79 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE %d RETAG POS %s to %s on word[%d]=%s", v48, v49, v50, v46);
      *(void *)(a3 + 48) = *(void *)(a2 + 296)
                           + *(unsigned int *)(*(void *)(a2 + 304)
                                             + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v46));
      uint64_t v53 = v79;
      uint64_t v54 = a2;
      int v55 = (void *)a3;
      unsigned int v56 = a4;
      uint64_t v57 = a5;
      unsigned int v58 = a5;
      unsigned int v59 = v46;
    }
    uint64_t v51 = statpos_doFurtherRetagging(v53, v54, v55, v56, v58, v59, &v83);
    if ((v51 & 0x80000000) == 0 && v83 != 1) {
      *uint64_t v57 = *(_DWORD *)(*(void *)(a2 + 64) + v52);
    }
    return v51;
  }
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  while (1)
  {
    uint64_t v17 = *(unsigned __int16 *)(*(void *)(v9 + 8) + v15);
    WORD2(v82[0]) = a4;
    LODWORD(v82[0]) = 6;
    *(_DWORD *)((char *)v82 + 6) = 0;
    uint64_t v18 = *(void *)(a2 + 64);
    int v84 = 0;
    uint64_t matched = matchSTATPOSRULE_TRule(a2, a3, v18 + 32 * v17 + 8, (unsigned int *)v82, &v84);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v14 = v84;
    if (v84 == 1) {
      break;
    }
    ++v16;
    uint64_t v9 = *(void *)(a2 + 80);
    v15 += 8;
    if (v16 >= *(unsigned __int16 *)(v9 + 16)) {
      goto LABEL_7;
    }
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE %d %s RETAG POS %s to %s on word[%d]=%s", v20, v21, v22, v17);
  *(void *)(a3 + 48) = *(void *)(a2 + 296)
                       + *(unsigned int *)(*(void *)(a2 + 304)
                                         + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v17));
  uint64_t v51 = statpos_doFurtherRetagging(a1, a2, (void *)a3, a4, a5, v17, &v83);
  if ((v51 & 0x80000000) == 0 && v83 != 1) {
    *a5 = *(_DWORD *)(*(void *)(a2 + 64) + 32 * v17);
  }
  return v51;
}

uint64_t statpos_doFurtherRetagging(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, _DWORD *a5, unsigned int a6, int *a7)
{
  __int16 v9 = a4;
  *a7 = 0;
  int v13 = *(_DWORD *)(*a3 + 160 * a4 + 8);
  if (v13)
  {
    uint64_t matched = 0;
    if (v13 != 1) {
      return matched;
    }
    int v15 = *(_DWORD *)(a2 + 124);
  }
  else
  {
    int v15 = *(_DWORD *)(a2 + 128);
  }
  if (v15 != 1) {
    return 0;
  }
  *(_DWORD *)&v27[2] = 0;
  if (!*(_WORD *)(a2 + 56)) {
    return 0;
  }
  uint64_t v16 = 0;
  for (unint64_t i = 0; i < *(unsigned __int16 *)(a2 + 56); ++i)
  {
    __int16 v26 = v9;
    unsigned int v25 = 6;
    *(_DWORD *)uint64_t v27 = 0;
    uint64_t v18 = *(void *)(a2 + 48);
    *a7 = 0;
    uint64_t matched = matchSTATPOSRULE_TRule(a2, (uint64_t)a3, v18 + v16 + 8, &v25, a7);
    if ((matched & 0x80000000) != 0) {
      break;
    }
    if (*a7)
    {
      if (*a7 == 1)
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"RETAGGING MS1 %s to %s", v19, v20, v21, *(void *)(a2 + 296)+ *(unsigned int *)(*(void *)(a2 + 304) + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * a6)));
        uint64_t v23 = *(unsigned int *)(*(void *)(a2 + 48) + v16);
        a3[6] = *(void *)(a2 + 296) + *(unsigned int *)(*(void *)(a2 + 304) + 4 * v23);
        *a5 = v23;
      }
      return matched;
    }
    v16 += 32;
  }
  return matched;
}

char *statpos_getBracketlessString(char *a1, char *__s)
{
  unsigned __int16 v4 = strlen(__s);
  if (v4 <= 0x10uLL) {
    unsigned __int16 v5 = v4;
  }
  else {
    unsigned __int16 v5 = 16;
  }
  uint64_t result = strncpy(a1, __s, v5);
  if (v5)
  {
    unsigned __int16 v7 = 0;
    do
    {
      if (a1[v7] == 40)
      {
        a1[v7] = 0;
        unsigned __int16 v7 = v5;
      }
      ++v7;
    }
    while (v7 < v5);
  }
  return result;
}

char *statpos_addToCache(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unsigned int v12 = *(unsigned __int16 *)(a2 + 74);
  if (!*(_WORD *)(a2 + 74))
  {
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 1, 801);
    *(void *)(a2 + 64) = v13;
    if (!v13) {
      goto LABEL_9;
    }
    unsigned int v12 = 50;
    *(_WORD *)(a2 + 74) = 50;
  }
  if (*(unsigned __int16 *)(a2 + 72) + 1 < v12) {
    goto LABEL_7;
  }
  uint64_t v18 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 64), 16 * v12 + 320);
  if (v18)
  {
    *(void *)(a2 + 64) = v18;
    *(_WORD *)(a2 + 74) += 20;
LABEL_7:
    statpos_getBracketlessString(__s, *(char **)(a2 + 48));
    unsigned __int16 v19 = strlen(__s);
    uint64_t v20 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v19 + 1);
    *(void *)(*(void *)(a2 + 64) + 16 * *(unsigned __int16 *)(a2 + 72)) = v20;
    if (!v20) {
      return (char *)log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v21, v22, v23, v24, v28);
    }
    uint64_t result = strcpy(v20, __s);
    uint64_t v26 = *(unsigned __int16 *)(a2 + 72);
    *(_WORD *)(*(void *)(a2 + 64) + 16 * v26 + 8) = a3;
    *(_WORD *)(a2 + 72) = v26 + 1;
    return result;
  }
LABEL_9:
  uint64_t v27 = *(void *)(a1 + 32);
  return (char *)log_OutPublic(v27, (uint64_t)"FE_POS", 35000, 0, v14, v15, v16, v17, a9);
}

uint64_t statpos_retagREFPOS(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  *(_DWORD *)&_OWORD v25[2] = 0;
  if (!*(_WORD *)(a2 + 56)) {
    return 0;
  }
  uint64_t v8 = 0;
  for (unint64_t i = 0; i < *(unsigned __int16 *)(a2 + 56); ++i)
  {
    __int16 v24 = a4;
    unsigned int v23 = 6;
    *(_DWORD *)unsigned int v25 = 0;
    uint64_t v10 = *(void *)(a2 + 48);
    int v26 = 0;
    uint64_t matched = matchSTATPOSRULE_TRule(a2, (uint64_t)a3, v10 + v8 + 8, &v23, &v26);
    if ((matched & 0x80000000) != 0) {
      break;
    }
    if (v26)
    {
      if (v26 == 1)
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"REFRETAG : FIRED RETAGGING RULE %d RETAG REF POS %s to %s on word[%d]=%s", v11, v12, v13, i);
        int v15 = strlen((const char *)(*(void *)(a2 + 296)
                                  + *(unsigned int *)(*(void *)(a2 + 304)
                                                    + 4 * *(unsigned int *)(*(void *)(a2 + 48) + v8))));
        uint64_t v16 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v15 + 1));
        *(void *)(*a3 + 160 * a4 + 112) = v16;
        if (v16)
        {
          strcpy(v16, (const char *)(*(void *)(a2 + 296)+ *(unsigned int *)(*(void *)(a2 + 304) + 4 * *(unsigned int *)(*(void *)(a2 + 48) + v8))));
        }
        else
        {
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v17, v18, v19, v20, v22);
          return 2313166858;
        }
      }
      return matched;
    }
    v8 += 32;
  }
  return matched;
}

uint64_t statpos_getPOSOffset(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v11 = 0;
  *a4 = -1;
  if (!*(_WORD *)(a2 + 104)) {
    return 0;
  }
  uint64_t result = ssftmap_FindReadOnly(*(void *)(a2 + 112), a3, &v11);
  if ((result & 0x1FFF) == 0x14)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"ERROR? NO LISTOFPOS RETAGGING OF %s", v8, v9, v10, a3);
    return 0;
  }
  *a4 = *v11;
  return result;
}

uint64_t statpos_getStrSetting(uint64_t a1, char *__s1)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 40);
  if (!*(_WORD *)(a1 + 40)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(void *)(a1 + 304);
  for (unint64_t i = (unsigned int *)(*(void *)(a1 + 32) + 4);
        strcmp(__s1, (const char *)(v4 + *(unsigned int *)(v5 + 4 * *(i - 1))));
        i += 2)
  {
    if (!--v2) {
      return 0;
    }
  }
  return v4 + *(unsigned int *)(v5 + 4 * *i);
}

uint64_t statpos_splitMSMappingRulesIntoTables(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_WORD *)(a3 + 8)) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v6 = (_WORD *)heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (24 * *(unsigned __int16 *)(a3 + 8)) | 1);
  *(void *)(v4 + 80) = v6;
  if (v6
    && (*(_DWORD *)(v4 + 88) = 655294464,
        *uint64_t v6 = 33,
        *(_WORD *)(*(void *)(v4 + 80) + 16) = 0,
        uint64_t v11 = heap_Calloc(*(void **)(*(void *)v4 + 8), 1, (8 * *(unsigned __int16 *)(a3 + 8)) | 1),
        uint64_t v12 = *(void *)(v4 + 80),
        (*(void *)(v12 + 8) = v11) != 0))
  {
    *(_WORD *)(v4 + 88) = 1;
    unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
    if (*(_WORD *)(a3 + 8))
    {
      uint64_t v85 = a1;
      unint64_t v14 = 0;
      uint64_t v88 = v4;
      do
      {
        uint64_t v15 = *(void *)a3 + 32 * v14;
        if (!*(void *)(v15 + 8))
        {
          uint64_t v16 = *(uint64_t **)(v15 + 16);
          if (v16)
          {
            unsigned int v86 = v13;
            __s2[0] = 0;
            unint64_t v17 = *((unsigned __int16 *)v16 + 4);
            if (*((_WORD *)v16 + 4))
            {
              uint64_t v87 = 0;
              unint64_t v18 = 0;
              int v19 = 0;
              int v20 = 0;
              int v21 = 0;
              int v22 = 0;
              uint64_t v89 = *(void *)(v88 + 264);
              uint64_t v90 = *(void *)(v88 + 256);
              uint64_t v23 = *v16;
              do
              {
                __int16 v24 = (_WORD *)(v23 + 6 * v18);
                if (*v24 == 3) {
                  int v21 = 1;
                }
                else {
                  int v20 = 1;
                }
                if (v21 == 1 && v22 == 0)
                {
                  uint64_t v26 = v90 + *(unsigned int *)(v89 + 4 * (unsigned __int16)v24[1]);
                  if (!strcmp((const char *)v26, "\\S"))
                  {
                    int v22 = 0;
                    *(_WORD *)(v88 + 90) = v14;
                    HIDWORD(v87) = 1;
                  }
                  else if (*(unsigned char *)v26 == 94 && (unsigned __int16 v27 = strlen((const char *)v26), v27 >= 2u))
                  {
                    uint64_t v28 = 0;
                    LODWORD(v87) = *(unsigned __int8 *)(v26 + 1);
                    __s2[0] = *(unsigned char *)(v26 + 1);
                    __s2[1] = 0;
                    do
                    {
                      int v29 = *(unsigned __int8 *)(v26 + v28++);
                      if (v28 < v27 && v29 == 40) {
                        int v19 = 1;
                      }
                    }
                    while (v27 != v28);
                    int v22 = v87;
                  }
                  else
                  {
                    int v22 = 0;
                  }
                }
                ++v18;
              }
              while (v18 < v17);
            }
            else
            {
              uint64_t v87 = 0;
              int v21 = 0;
              int v20 = 0;
              int v19 = 0;
            }
            if (v21 == 1 && v87 > 0x40 && v87 <= 0x5A)
            {
              uint64_t v31 = 0;
              uint64_t v4 = v88;
              uint64_t v32 = *(unsigned __int16 *)(v88 + 88);
              uint64_t v33 = *(const char **)(v88 + 80);
              uint64_t v34 = v33;
              while (v32 != v31)
              {
                int v35 = strcmp(v34, __s2);
                ++v31;
                v34 += 24;
                if (!v35)
                {
                  uint64_t v36 = v31 - 1;
                  uint64_t v37 = *((void *)v34 - 2);
                  goto LABEL_49;
                }
              }
              __strcpy_chk();
              *(_WORD *)(*(void *)(v88 + 80) + 24 * *(unsigned __int16 *)(v88 + 88) + 16) = 0;
              uint64_t v37 = heap_Calloc(*(void **)(*(void *)v88 + 8), 1, (8 * *(unsigned __int16 *)(a3 + 8)) | 1);
              uint64_t v33 = *(const char **)(v88 + 80);
              uint64_t v36 = *(unsigned __int16 *)(v88 + 88);
              *(void *)&v33[24 * v36 + 8] = v37;
              if (!v37) {
                goto LABEL_56;
              }
              *(_WORD *)(v88 + 88) = v36 + 1;
LABEL_49:
              uint64_t v41 = &v33[24 * v36];
              uint64_t v42 = *((unsigned __int16 *)v41 + 8);
              uint64_t v43 = v37 + 8 * v42;
              *(_WORD *)uint64_t v43 = v14;
              BOOL v45 = v20 != 1 && v19 != 1;
              *(_DWORD *)(v43 + 4) = v45;
              *((_WORD *)v41 + 8) = v42 + 1;
              unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
            }
            else
            {
              uint64_t v4 = v88;
              if (!HIDWORD(v87))
              {
                uint64_t v38 = *(void *)(v88 + 80);
                uint64_t v39 = *(unsigned __int16 *)(v38 + 16);
                uint64_t v40 = *(void *)(v38 + 8) + 8 * v39;
                *(_WORD *)uint64_t v40 = v14;
                *(_DWORD *)(v40 + 4) = 0;
                *(_WORD *)(v38 + 16) = v39 + 1;
              }
              unsigned int v13 = v86;
            }
          }
        }
        ++v14;
      }
      while (v14 < v13);
      uint64_t v48 = *(unsigned __int16 *)(v4 + 88);
      uint64_t v12 = *(void *)(v4 + 80);
      a1 = v85;
      if (v48 >= 2)
      {
        for (uint64_t i = 1; i != v48; ++i)
        {
          uint64_t v50 = *(unsigned __int16 *)(v12 + 24 * i + 16);
          if (*(_WORD *)(v12 + 24 * i + 16))
          {
            uint64_t v51 = 0;
            uint64_t v52 = (uint64_t *)(v12 + 24 * i + 8);
            do
            {
              uint64_t v53 = 0;
              do
              {
                if (v51 != v53)
                {
                  uint64_t v54 = *v52;
                  uint64_t v55 = *(void *)(*(void *)a3 + 32 * *(unsigned __int16 *)(*v52 + 8 * v51) + 16);
                  uint64_t v56 = *(unsigned __int16 *)(v55 + 8);
                  if (*(_WORD *)(v55 + 8))
                  {
                    uint64_t v57 = 0;
                    uint64_t v58 = *(void *)(*(void *)a3 + 32 * *(unsigned __int16 *)(v54 + 8 * v53) + 16);
                    uint64_t v59 = *(unsigned __int16 *)(v58 + 8);
                    uint64_t v60 = (_DWORD *)(v54 + 8 * v51 + 4);
                    int v61 = (_DWORD *)(v54 + 8 * v53 + 4);
                    do
                    {
                      if (v59)
                      {
                        uint64_t v62 = 0;
                        uint64_t v63 = (unsigned __int16 *)(*(void *)v55 + 6 * v57);
                        int v66 = *v63;
                        unsigned __int16 v64 = v63 + 1;
                        int v65 = v66;
                        do
                        {
                          if (v65 == 3 && *v64 == *(unsigned __int16 *)(*(void *)v58 + v62 + 2))
                          {
                            if (*v60 == 1) {
                              *uint64_t v60 = 0;
                            }
                            if (*v61 == 1) {
                              *int v61 = 0;
                            }
                          }
                          v62 += 6;
                        }
                        while (6 * v59 != v62);
                      }
                      ++v57;
                    }
                    while (v57 != v56);
                  }
                }
                ++v53;
              }
              while (v53 != v50);
              ++v51;
            }
            while (v51 != v50);
          }
        }
        unint64_t v67 = 1;
        do
        {
          if (*(_WORD *)(v12 + 24 * v67 + 16))
          {
            uint64_t v68 = 0;
            unint64_t v69 = 0;
            int v70 = 0;
            do
            {
              if (v68)
              {
                uint64_t v71 = *(void *)(v12 + 24 * v67 + 8);
                if (!*(_DWORD *)(v71 + v68 + 4))
                {
                  __int16 v72 = *(_WORD *)(v71 + v68);
                  memmove((void *)(v71 + 8 * ((unsigned __int16)v70 + 1)), (const void *)(v71 + 8 * (unsigned __int16)v70), v68 - 8 * (unsigned __int16)v70);
                  uint64_t v12 = *(void *)(v4 + 80);
                  uint64_t v73 = *(void *)(v12 + 24 * v67 + 8) + 8 * (unsigned __int16)v70;
                  *(_DWORD *)(v73 + 4) = 0;
                  *(_WORD *)uint64_t v73 = v72;
                  ++v70;
                }
              }
              ++v69;
              v68 += 8;
            }
            while (v69 < *(unsigned __int16 *)(v12 + 24 * v67 + 16));
            LODWORD(v48) = *(unsigned __int16 *)(v4 + 88);
          }
          ++v67;
        }
        while (v67 < v48);
      }
    }
    else
    {
      LODWORD(v48) = 1;
    }
    uint64_t v74 = heap_Realloc(*(uint64_t **)(*(void *)v4 + 8), v12, (24 * v48) | 1);
    if (v74)
    {
      uint64_t v75 = v74;
      *(void *)(v4 + 80) = v74;
      if (*(_WORD *)(v4 + 88))
      {
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        do
        {
          uint64_t v78 = v75 + v76;
          if (*(_WORD *)(v75 + v76 + 16))
          {
            uint64_t v79 = heap_Realloc(*(uint64_t **)(*(void *)v4 + 8), *(void *)(v78 + 8), (8 * *(unsigned __int16 *)(v75 + v76 + 16)) | 1);
            if (!v79) {
              goto LABEL_104;
            }
          }
          else
          {
            heap_Free(*(void **)(a1 + 8), *(void *)(v78 + 8));
            uint64_t v79 = 0;
          }
          uint64_t v75 = *(void *)(v4 + 80);
          *(void *)(v75 + v76 + 8) = v79;
          ++v77;
          unint64_t v80 = *(unsigned __int16 *)(v4 + 88);
          v76 += 24;
        }
        while (v77 < v80);
        if (*(_WORD *)(v4 + 90) == 9999)
        {
          if (*(_WORD *)(v4 + 88))
          {
            uint64_t v81 = 0;
            unint64_t v82 = 0;
            do
            {
              if (*(_WORD *)(v75 + v81 + 16))
              {
                heap_Free(*(void **)(a1 + 8), *(void *)(v75 + v81 + 8));
                uint64_t v75 = *(void *)(v4 + 80);
                unint64_t v80 = v75 + v81;
                *(void *)(v80 + 8) = 0;
                *(_WORD *)(v80 + 16) = 0;
                LOWORD(v80) = *(_WORD *)(v4 + 88);
              }
              ++v82;
              v81 += 24;
            }
            while (v82 < (unsigned __int16)v80);
          }
          goto LABEL_107;
        }
      }
      else if (*(_WORD *)(v4 + 90) == 9999)
      {
LABEL_107:
        heap_Free(*(void **)(a1 + 8), v75);
        uint64_t v46 = 0;
        *(void *)(v4 + 80) = 0;
        *(_WORD *)(v4 + 88) = 0;
        return v46;
      }
      return 0;
    }
LABEL_104:
    uint64_t v46 = 2313166858;
    uint64_t v47 = *(void *)(a1 + 32);
  }
  else
  {
LABEL_56:
    uint64_t v46 = 2313166858;
    uint64_t v47 = *(void *)(*(void *)v4 + 32);
  }
  log_OutPublic(v47, (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v84);
  return v46;
}

uint64_t statpos_rules_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v186 = *MEMORY[0x263EF8340];
  uint64_t v180 = 0;
  unsigned __int8 v179 = 0;
  unsigned int v177 = 0;
  int v178 = 0;
  uint64_t v175 = 0;
  uint64_t v176 = 0;
  memset(v185, 0, sizeof(v185));
  int v174 = 0;
  *(void *)a7 = a3;
  *(_WORD *)(a7 + 376) = 5;
  log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"loading MS StatPOS rules", a6, a7, a8, v169);
  uint64_t BrokerString_0 = getBrokerString_0(a3, (char *)v185, 0x80uLL);
  if ((BrokerString_0 & 0x80000000) != 0) {
    return BrokerString_0;
  }
  uint64_t BrokerString_0 = brk_DataOpenEx(*(void *)(a3 + 24), (uint64_t)v185, 1, (uint64_t)&v175);
  if ((BrokerString_0 & 0x80000000) != 0) {
    return BrokerString_0;
  }
  uint64_t BrokerString_0 = brk_DataClose(*(void *)(a3 + 24), v175);
  if ((BrokerString_0 & 0x80000000) != 0) {
    return BrokerString_0;
  }
  uint64_t BrokerString_0 = ssftriff_reader_ObjOpen(a1, a2, 0, (const char *)v185, "PANP", 1031, (uint64_t *)&v180);
  if ((BrokerString_0 & 0x80000000) != 0) {
    return BrokerString_0;
  }
  while (1)
  {
    LODWORD(info_from_dct) = ssftriff_reader_OpenChunk((uint64_t)v180, &v178, &v177, &v176, v16, v17, v18, v19);
    if ((info_from_dct & 0x80000000) != 0)
    {
LABEL_67:
      if ((info_from_dct & 0x1FFF) == 0xA) {
        return 2313166858;
      }
      ssftriff_reader_ObjClose(v180, v20, v21, v22, v16, v17, v18, v19);
      uint64_t v180 = 0;
      if (*(_WORD *)(a7 + 104))
      {
        uint64_t v85 = 0;
        unint64_t v86 = 0;
        do
        {
          uint64_t BrokerString_0 = ssftmap_Insert(*(void *)(a7 + 112), *(void *)(a7 + 296)+ *(unsigned int *)(*(void *)(a7 + 304)+ 4 * *(unsigned int *)(*(void *)(a7 + 96) + v85)), *(void *)(a7 + 96) + v85);
          if ((BrokerString_0 & 0x80000000) != 0) {
            return BrokerString_0;
          }
          ++v86;
          v85 += 4;
        }
        while (v86 < *(unsigned __int16 *)(a7 + 104));
      }
      *(_WORD *)(a7 + 88) = 0;
      uint64_t v87 = statpos_splitMSMappingRulesIntoTables(a3, a7, a7 + 64);
      if ((v87 & 0x1FFF) == 0xA) {
        return 2313166858;
      }
      uint64_t info_from_dct = v87;
      *(void *)(a7 + 16) = 0x2000100030000;
      *(_WORD *)(a7 + 24) = 4;
      uint64_t StrSetting = (char *)statpos_getStrSetting(a7, "POSsep");
      if (StrSetting)
      {
        char v92 = *StrSetting;
      }
      else
      {
        log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning : POSsep not defined in data file, using default '/'", v89, v90, v91, v170);
        char v92 = 47;
      }
      *(unsigned char *)(a7 + 120) = v92;
      unsigned __int16 v93 = (const char *)statpos_getStrSetting(a7, "HYPHEN_CHAR");
      if (!v93)
      {
        log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning : HYPHEN_CHAR not defined in data file, using default '-'", v94, v95, v96, v170);
        unsigned __int16 v93 = "-";
      }
      *(void *)(a7 + 160) = v93;
      uint64_t v97 = statpos_getStrSetting(a7, "PUNCT_CHAR");
      if (v97) {
        uint64_t v98 = (char *)v97;
      }
      else {
        uint64_t v98 = &byte_20D5A22AE;
      }
      *(void *)(a7 + 168) = v98;
      uint64_t v99 = statpos_getStrSetting(a7, "TERMPUNCT_CHAR");
      if (v99) {
        uint64_t v106 = (char *)v99;
      }
      else {
        uint64_t v106 = &byte_20D5A22AE;
      }
      *(void *)(a7 + 176) = v106;
      *(_DWORD *)(a7 + 124) = statpos_getStrSettingAsNumber(a7, "ApplyRetaggingToOOV", v100, v101, v102, v103, v104, v105) == 1;
      *(_DWORD *)(a7 + 128) = statpos_getStrSettingAsNumber(a7, "ApplyRetaggingToKnownAmbiguous", v107, v108, v109, v110, v111, v112) == 1;
      *(_DWORD *)(a7 + 152) = statpos_getStrSettingAsNumber(a7, "NOOOVMODEL", v113, v114, v115, v116, v117, v118) == 1;
      *(_DWORD *)(a7 + 184) = statpos_getStrSettingAsNumber(a7, "DOMSMAPPINGBEFORELISTOFPOS", v119, v120, v121, v122, v123, v124) == 1;
      *(_DWORD *)(a7 + 188) = statpos_getStrSettingAsNumber(a7, "ReEstimateEachWord", v125, v126, v127, v128, v129, v130) == 1;
      uint64_t v131 = (char *)statpos_getStrSetting(a7, "POITOPOS_ns");
      *(void *)(a7 + 336) = v131;
      if (v131)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v131, (char **)(a7 + 336));
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      uint64_t v132 = (char *)statpos_getStrSetting(a7, "POITOPOS_nt");
      *(void *)(a7 + 344) = v132;
      if (v132)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v132, (char **)(a7 + 344));
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      int v133 = (char *)statpos_getStrSetting(a7, "POITOPOS_nz");
      *(void *)(a7 + 352) = v133;
      if (v133)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v133, (char **)(a7 + 352));
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      uint64_t v134 = (char *)statpos_getStrSetting(a7, "POITOPOS_nx");
      *(void *)(a7 + 360) = v134;
      if (v134)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v134, (char **)(a7 + 360));
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      unsigned int v135 = (char *)statpos_getStrSetting(a7, "POITOPOS_nr");
      *(void *)(a7 + 368) = v135;
      if (v135)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v135, (char **)(a7 + 368));
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      *(_DWORD *)(a7 + 136) = statpos_getStrSettingAsNumber(a7, "lexMismatchUseStringMatch", v136, v137, v138, v139, v140, v141) == 1;
      int StrSettingAsNumber = statpos_getStrSettingAsNumber(a7, "mapTagsetFromDctMappingFile", v142, v143, v144, v145, v146, v147);
      *(_DWORD *)(a7 + 132) = StrSettingAsNumber == 1;
      if (StrSettingAsNumber == 1)
      {
        uint64_t info_from_dct = statpos_get_info_from_dct(a3, a4, a5, a6, "fecfg", (uint64_t)"mde_tag_mappings_dic", &v174, 0, "STR");
        if ((info_from_dct & 0x80000000) != 0) {
          return info_from_dct;
        }
        if (v174)
        {
          int v173 = 0;
          uint64_t info_from_dct = (*(uint64_t (**)(uint64_t, uint64_t, char *, int *))(a6 + 72))(a4, a5, v174, &v173);
          if ((info_from_dct & 0x80000000) != 0) {
            goto LABEL_126;
          }
          if (v173)
          {
            *(void *)&__c[1] = 0;
            __c[0] = 0;
            int v158 = *(void **)(*(void *)a7 + 8);
            *(void *)&long long v181 = ssftmap_ElemCopyString;
            *((void *)&v181 + 1) = ssftmap_ElemFreeString;
            uint64_t v182 = ssftmap_ElemCompareKeysString;
            uint64_t v183 = ssftmap_ElemCopyString;
            int v184 = ssftmap_ElemFreeString;
            uint64_t info_from_dct = ssftmap_ObjOpen(v158, 0, &v181, (uint64_t *)(a7 + 144));
            if ((info_from_dct & 0x80000000) != 0) {
              goto LABEL_126;
            }
            if (*(_WORD *)(a7 + 104))
            {
              uint64_t v159 = 0;
              do
              {
                __int16 v172 = -1;
                uint64_t info_from_dct = (*(uint64_t (**)(uint64_t, uint64_t, char *, void, unsigned char *, __int16 *, unsigned char *))(a6 + 96))(a4, a5, v174, *(void *)(a7 + 296)+ *(unsigned int *)(*(void *)(a7 + 304)+ 4 * *(unsigned int *)(*(void *)(a7 + 96) + 4 * v159)), &__c[1], &v172, __c);
                if ((info_from_dct & 0x80000000) != 0) {
                  return info_from_dct;
                }
                if (v172 == 1)
                {
                  uint64_t v160 = **(void **)&__c[1];
                  int v161 = strchr(**(char ***)&__c[1], __c[0]);
                  if (v161)
                  {
                    *int v161 = 0;
                    uint64_t v160 = **(void **)&__c[1];
                  }
                  uint64_t info_from_dct = ssftmap_Insert(*(void *)(a7 + 144), *(void *)(a7 + 296)+ *(unsigned int *)(*(void *)(a7 + 304)+ 4 * *(unsigned int *)(*(void *)(a7 + 96) + 4 * v159)), v160);
                  if ((info_from_dct & 0x80000000) != 0) {
                    goto LABEL_126;
                  }
                  log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"POS mapping %s->%s", v162, v163, v164, *(void *)(a7 + 296)+ *(unsigned int *)(*(void *)(a7 + 304) + 4 * *(unsigned int *)(*(void *)(a7 + 96) + 4 * v159)));
                }
              }
              while (++v159 < (unint64_t)*(unsigned __int16 *)(a7 + 104));
            }
          }
          else
          {
            log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning: mde_tag_mappings dictionary %s does not exist", v155, v156, v157, (uint64_t)v174);
          }
        }
        else
        {
          log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning: mde_tag_mappings dictionary does not exist", v152, v153, v154, 0);
        }
      }
      if (*(void *)(a7 + 144))
      {
        uint64_t v166 = 0;
        while (1)
        {
          uint64_t v167 = heap_Calloc(*(void **)(a3 + 8), 1, 32);
          *(void *)(a7 + 384 + v166) = v167;
          if (!v167) {
            break;
          }
          v166 += 8;
          if (v166 == 256) {
            goto LABEL_125;
          }
        }
        log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_POS", 35000, 0, v168, v149, v150, v151, v170);
        return 2313166858;
      }
LABEL_125:
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statpos data file : ambigPOSSep=%c ApplyRetaggingToOOV=%d ApplyRetaggingToKnownAmbiguous=%d NOOOVMODEL=%d ReEstimateEachWord=%d, poi_ns=%s,poi_nt=%s,poi_nz=%s,poi_nx=%s,poi_nr=%s", v149, v150, v151, *(unsigned __int8 *)(a7 + 120));
LABEL_126:
      if (v174) {
        heap_Free(*(void **)(a3 + 8), (uint64_t)v174);
      }
      return info_from_dct;
    }
    if (!(v178 ^ 0x47494643 | v179))
    {
      LODWORD(info_from_dct) = 0;
      int v29 = v176;
      *(_WORD *)(a7 + 10) = *v176;
      *(_WORD *)(a7 + 12) = v29[1];
      *(_WORD *)(a7 + 14) = v29[2];
      goto LABEL_64;
    }
    if (!(v178 ^ 0x45535453 | v179))
    {
      uint64_t v30 = v176;
      uint64_t v31 = (unsigned __int16)*v176;
      *(_WORD *)(a7 + 40) = v31;
      uint64_t v32 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (8 * v31) | 1);
      *(void *)(a7 + 32) = v32;
      if (!v32) {
        goto LABEL_74;
      }
      if (*(_WORD *)(a7 + 40))
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        unsigned int v39 = 2;
        do
        {
          *(_DWORD *)(*(void *)(a7 + 32) + v37) = *(_DWORD *)((char *)v30 + v39);
          unsigned int v40 = v39 + 4;
          *(_DWORD *)(*(void *)(a7 + 32) + v37 + 4) = *(_DWORD *)((char *)v30 + v40);
          unsigned int v39 = v40 + 4;
          ++v38;
          v37 += 8;
        }
        while (v38 < *(unsigned __int16 *)(a7 + 40));
      }
LABEL_21:
      LODWORD(info_from_dct) = 0;
      goto LABEL_64;
    }
    if (!(v178 ^ 0x47415452 | v179)) {
      break;
    }
    if (!(v178 ^ 0x4754524D | v179))
    {
      uint64_t v47 = (uint64_t)v176;
      uint64_t v48 = (unsigned __int16)*v176;
      *(_WORD *)(a7 + 72) = v48;
      LODWORD(v181) = 2;
      uint64_t v49 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (32 * v48) | 1);
      *(void *)(a7 + 64) = v49;
      if (!v49) {
        goto LABEL_74;
      }
      if (*(_WORD *)(a7 + 72))
      {
        uint64_t v50 = 0;
        unint64_t v51 = 0;
        while (1)
        {
          int v52 = v181;
          *(_DWORD *)(*(void *)(a7 + 64) + v50) = *(_DWORD *)(v47 + v181);
          LODWORD(v181) = v52 + 4;
          uint64_t BrokerString_0 = readRULE_0(*(void *)a7, v47, (unsigned int *)&v181, (uint64_t *)(*(void *)(a7 + 64) + v50 + 8));
          if ((BrokerString_0 & 0x80000000) != 0) {
            return BrokerString_0;
          }
          ++v51;
          v50 += 32;
          if (v51 >= *(unsigned __int16 *)(a7 + 72)) {
            goto LABEL_33;
          }
        }
      }
      goto LABEL_33;
    }
    if (v178 ^ 0x5053494C | v179)
    {
      if (!(v178 ^ 0x58474552 | v179))
      {
        uint64_t v59 = v180;
        uint64_t v60 = v176;
        *(void *)&long long v181 = v176;
        int v61 = *(_DWORD *)v176;
        *(_DWORD *)(a7 + 208) = *(_DWORD *)v176;
        if (v61)
        {
          uint64_t v62 = (*((_DWORD *)v60 + 1) + 8);
          *(void *)(a7 + 216) = (char *)v60 + v62;
          uint64_t v63 = (v62 + v61);
        }
        else
        {
          uint64_t v63 = 4;
        }
        uint64_t v69 = *(unsigned __int16 *)((char *)v60 + v63);
        *(_WORD *)(a7 + 232) = v69;
        uint64_t v70 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (4 * v69) | 1);
        *(void *)(a7 + 224) = v70;
        if (!v70) {
          goto LABEL_74;
        }
        if (*(_WORD *)(a7 + 232))
        {
          unint64_t v72 = 0;
          unsigned int v73 = v63 + 2;
          do
          {
            *(_DWORD *)(*(void *)(a7 + 224) + 4 * v72) = *(_DWORD *)((char *)v60 + v73);
            v73 += 4;
            ++v72;
          }
          while (v72 < *(unsigned __int16 *)(a7 + 232));
        }
        uint64_t v74 = (uint64_t)v59;
        uint64_t v75 = (uint64_t *)(a7 + 240);
        goto LABEL_63;
      }
      if (!(v178 ^ 0x53525453 | v179))
      {
        unsigned __int16 v64 = v180;
        int v65 = v176;
        *(void *)&long long v181 = v176;
        int v66 = *(_DWORD *)v176;
        *(_DWORD *)(a7 + 288) = *(_DWORD *)v176;
        if (v66)
        {
          uint64_t v67 = (*((_DWORD *)v65 + 1) + 8);
          *(void *)(a7 + 296) = (char *)v65 + v67;
          uint64_t v68 = (v67 + v66);
        }
        else
        {
          uint64_t v68 = 4;
        }
        uint64_t v76 = *(unsigned __int16 *)((char *)v65 + v68);
        *(_WORD *)(a7 + 312) = v76;
        uint64_t v77 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (4 * v76) | 1);
        *(void *)(a7 + 304) = v77;
        if (!v77) {
          goto LABEL_74;
        }
        if (*(_WORD *)(a7 + 312))
        {
          unint64_t v78 = 0;
          unsigned int v79 = v68 + 2;
          do
          {
            *(_DWORD *)(*(void *)(a7 + 304) + 4 * v78) = *(_DWORD *)((char *)v65 + v79);
            v79 += 4;
            ++v78;
          }
          while (v78 < *(unsigned __int16 *)(a7 + 312));
        }
        uint64_t v74 = (uint64_t)v64;
        uint64_t v75 = (uint64_t *)(a7 + 328);
        goto LABEL_63;
      }
      if (!(v178 ^ 0x54534552 | v179))
      {
        __int16 v24 = v180;
        unsigned int v25 = v176;
        *(void *)&long long v181 = v176;
        int v26 = *(_DWORD *)v176;
        *(_DWORD *)(a7 + 248) = *(_DWORD *)v176;
        if (v26)
        {
          uint64_t v27 = (*((_DWORD *)v25 + 1) + 8);
          *(void *)(a7 + 256) = (char *)v25 + v27;
          uint64_t v28 = (v27 + v26);
        }
        else
        {
          uint64_t v28 = 4;
        }
        uint64_t v80 = *(unsigned __int16 *)((char *)v25 + v28);
        *(_WORD *)(a7 + 272) = v80;
        uint64_t v81 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (4 * v80) | 1);
        *(void *)(a7 + 264) = v81;
        if (!v81) {
          goto LABEL_74;
        }
        if (*(_WORD *)(a7 + 272))
        {
          unint64_t v82 = 0;
          unsigned int v83 = v28 + 2;
          do
          {
            *(_DWORD *)(*(void *)(a7 + 264) + 4 * v82) = *(_DWORD *)((char *)v25 + v83);
            v83 += 4;
            ++v82;
          }
          while (v82 < *(unsigned __int16 *)(a7 + 272));
        }
        uint64_t v74 = (uint64_t)v24;
        uint64_t v75 = (uint64_t *)(a7 + 280);
LABEL_63:
        uint64_t info_from_dct = ssftriff_reader_DetachChunkData(v74, v75, &v181, v71, v33, v34, v35, v36);
        if ((info_from_dct & 0x80000000) != 0) {
          return info_from_dct;
        }
      }
    }
    else
    {
      uint64_t v53 = v176;
      int v54 = (unsigned __int16)*v176;
      *(_WORD *)(a7 + 104) = v54;
      if (!v54) {
        goto LABEL_21;
      }
      uint64_t v55 = *(void **)(*(void *)a7 + 8);
      *(void *)&long long v181 = ssftmap_ElemCopyString;
      *((void *)&v181 + 1) = ssftmap_ElemFreeString;
      uint64_t v182 = ssftmap_ElemCompareKeysString;
      uint64_t v183 = loc_CopyValue;
      int v184 = loc_FreeValue;
      uint64_t info_from_dct = ssftmap_ObjOpen(v55, 0, &v181, (uint64_t *)(a7 + 112));
      if ((info_from_dct & 0x80000000) != 0) {
        return info_from_dct;
      }
      uint64_t v56 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (4 * *(unsigned __int16 *)(a7 + 104)) | 1);
      *(void *)(a7 + 96) = v56;
      if (!v56)
      {
LABEL_74:
        uint64_t info_from_dct = 2313166858;
        log_OutPublic(*(void *)(*(void *)a7 + 32), (uint64_t)"FE_POS", 35000, 0, v33, v34, v35, v36, v170);
        return info_from_dct;
      }
      if (*(_WORD *)(a7 + 104))
      {
        unint64_t v57 = 0;
        unsigned int v58 = 1;
        do
        {
          *(_DWORD *)(*(void *)(a7 + 96) + 4 * v57) = *(_DWORD *)&v53[v58];
          v58 += 2;
          ++v57;
        }
        while (v57 < *(unsigned __int16 *)(a7 + 104));
      }
    }
LABEL_64:
    int v84 = ssftriff_reader_CloseChunk((uint64_t)v180);
    if (v84 < 0) {
      LODWORD(info_from_dct) = v84;
    }
    if ((info_from_dct & 0x80000000) != 0) {
      goto LABEL_67;
    }
  }
  uint64_t v41 = (uint64_t)v176;
  uint64_t v42 = (unsigned __int16)*v176;
  *(_WORD *)(a7 + 56) = v42;
  LODWORD(v181) = 2;
  uint64_t v43 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (32 * v42) | 1);
  *(void *)(a7 + 48) = v43;
  if (!v43) {
    goto LABEL_74;
  }
  if (!*(_WORD *)(a7 + 56))
  {
LABEL_33:
    LODWORD(info_from_dct) = 0;
    goto LABEL_64;
  }
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  while (1)
  {
    int v46 = v181;
    *(_DWORD *)(*(void *)(a7 + 48) + v44) = *(_DWORD *)(v41 + v181);
    LODWORD(v181) = v46 + 4;
    uint64_t BrokerString_0 = readRULE_0(*(void *)a7, v41, (unsigned int *)&v181, (uint64_t *)(*(void *)(a7 + 48) + v44 + 8));
    if ((BrokerString_0 & 0x80000000) != 0) {
      return BrokerString_0;
    }
    ++v45;
    v44 += 32;
    if (v45 >= *(unsigned __int16 *)(a7 + 56)) {
      goto LABEL_33;
    }
  }
}

uint64_t statpos_getStrSettingAsNumber(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(unsigned __int16 *)(a1 + 40);
  if (*(_WORD *)(a1 + 40))
  {
    uint64_t v11 = *(void *)(a1 + 296);
    uint64_t v12 = *(void *)(a1 + 304);
    unsigned int v13 = (unsigned int *)(*(void *)(a1 + 32) + 4);
    while (strcmp(__s1, (const char *)(v11 + *(unsigned int *)(v12 + 4 * *(v13 - 1)))))
    {
      v13 += 2;
      if (!--v10) {
        goto LABEL_5;
      }
    }
    uint64_t v15 = (const char *)(v11 + *(unsigned int *)(v12 + 4 * *v13));
    return atoi(v15);
  }
  else
  {
LABEL_5:
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning : key=%s not defined, setting to 0", a6, a7, a8, (uint64_t)__s1);
    return 0;
  }
}

uint64_t statpos_format_POI_param(uint64_t a1, char *__s, char **a3)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v6 + 3);
  if (v7)
  {
    uint64_t v12 = v7;
    if (v6)
    {
      uint64_t v13 = 0;
      *(_WORD *)uint64_t v7 = 44;
      int v14 = 1;
      while ((_WORD)v14)
      {
        uint64_t v15 = (unsigned __int16)v14;
        if (v7[(unsigned __int16)v14 - 1] != 44 || __s[v13] != 44) {
          goto LABEL_9;
        }
        --v14;
LABEL_10:
        ++v13;
        ++v14;
        if (v6 <= (unsigned __int16)v13)
        {
          v7[(unsigned __int16)v14] = 0;
          *(_WORD *)&v7[strlen(v7)] = 44;
          goto LABEL_14;
        }
      }
      uint64_t v15 = 0;
LABEL_9:
      v7[v15] = __s[v13];
      goto LABEL_10;
    }
    *uint64_t v7 = 0;
LABEL_14:
    uint64_t result = 0;
    *a3 = v12;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v8, v9, v10, v11, v17);
    return 2313166858;
  }
  return result;
}

uint64_t readRULE_0(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t result = readCONTEXT_1(a1, a2, a3, a4);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = readCONTEXT_1(a1, a2, a3, a4 + 1);
    if ((result & 0x80000000) == 0)
    {
      return readCONTEXT_1(a1, a2, a3, a4 + 2);
    }
  }
  return result;
}

uint64_t readCONTEXT_1(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(unsigned __int16 *)(a2 + v4);
  *a3 = v4 + 2;
  if (!v5) {
    return 0;
  }
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), 1, 17);
  if (v10
    && (uint64_t v15 = v10,
        *(_WORD *)(v10 + 8) = v5,
        uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), 1, (6 * v5) | 1),
        (*(void *)uint64_t v15 = v16) != 0))
  {
    if (*(_WORD *)(v15 + 8))
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      unsigned int v19 = *a3;
      do
      {
        *(_WORD *)(v16 + v17) = *(_WORD *)(a2 + v19);
        unsigned int v20 = *a3 + 2;
        *a3 = v20;
        *(_WORD *)(*(void *)v15 + v17 + 2) = *(_WORD *)(a2 + v20);
        unsigned int v21 = *a3;
        unsigned int v22 = *a3 + 2;
        *a3 = v22;
        LOBYTE(v22) = *(unsigned char *)(a2 + v22);
        unsigned int v19 = v21 + 4;
        *a3 = v19;
        uint64_t v16 = *(void *)v15;
        *(unsigned char *)(*(void *)v15 + v17 + 4) = v22;
        ++v18;
        v17 += 6;
      }
      while (v18 < *(unsigned __int16 *)(v15 + 8));
    }
    uint64_t v23 = 0;
    *a4 = v15;
  }
  else
  {
    uint64_t v23 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v25);
  }
  return v23;
}

uint64_t _statpos_char_check(const char *a1, const char *a2, unsigned int a3)
{
  int v6 = strlen(a1);
  int v7 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a1, v6);
  if (!v7) {
    return 0;
  }
  int v8 = 0;
  while (1)
  {
    uint64_t v9 = &a1[(unsigned __int16)v8];
    size_t v10 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)v9);
    if (v10 >= a3 && !strncmp(&a1[(unsigned __int16)v8], a2, v10)) {
      break;
    }
    v8 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v9);
    if (!--v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t statpos_fv_new(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, 16 * a2);
  *a3 = v6;
  if (!v6)
  {
LABEL_7:
    uint64_t v14 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v16);
    return v14;
  }
  *((_DWORD *)a3 + 3) = a2;
  if (a2)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (_WORD *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
      uint64_t v13 = *a3;
      *(void *)(*a3 + v11) = v12;
      if (!v12) {
        goto LABEL_7;
      }
      *(_DWORD *)(v13 + v11 + 8) = 65;
      _WORD *v12 = 61;
      v11 += 16;
    }
    while (16 * a2 != v11);
  }
  uint64_t v14 = 0;
  *((_DWORD *)a3 + 2) = a2;
  return v14;
}

uint64_t statpos_fv_clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v1 = 0;
    unint64_t v2 = 0;
    do
    {
      **(_WORD **)(*(void *)a1 + v1) = 61;
      ++v2;
      v1 += 16;
    }
    while (v2 < *(unsigned int *)(a1 + 8));
  }
  return 0;
}

uint64_t statpos_fv_add(uint64_t a1, void *a2, unsigned int a3, char *__s, char *a5, uint64_t a6)
{
  if (a6)
  {
    unsigned int v10 = *(_DWORD *)(a6 + 1336);
    if (v10)
    {
      unsigned __int16 v11 = strlen(a5);
      unsigned __int16 v12 = 0;
      uint64_t v13 = *(void *)(a6 + 1328);
      uint64_t v14 = *(const char **)(*(void *)(a6 + 1312) + 8 * (unsigned __int16)a3);
      size_t v15 = v11;
      while (1)
      {
        uint64_t v16 = v12;
        if (!strncmp(*(const char **)(v13 + 16 * v12), v14, v15)) {
          break;
        }
        unsigned __int16 v12 = v16 + 1;
        if (v10 <= (unsigned __int16)(v16 + 1)) {
          goto LABEL_22;
        }
      }
      uint64_t v17 = *(char **)(v13 + 16 * v16 + 8);
      unint64_t v18 = strstr(v17, __s);
      if (v18)
      {
        unsigned int v19 = v18;
        unsigned __int16 v20 = strlen(__s);
        unsigned __int16 v21 = strlen(v17);
        unsigned int v22 = v21;
        unint64_t v23 = (unint64_t)&v17[v21];
        while (v19 != v17 || v22 != v20 && (v22 <= v20 + 1 || v17[v20] != 32))
        {
          if (v19 > v17)
          {
            __int16 v24 = &v19[v20];
            if (v23 > (unint64_t)(v24 + 1) && *v24 == 32)
            {
              if ((char *)v23 == v24 || *(v19 - 1) == 32) {
                break;
              }
            }
            else if ((char *)v23 == v24)
            {
              break;
            }
          }
          unsigned int v19 = strstr(&v19[v20], __s);
          if (!v19) {
            goto LABEL_21;
          }
        }
      }
      else
      {
LABEL_21:
        *(_WORD *)unsigned int __s = 61;
      }
    }
  }
LABEL_22:
  unsigned int v25 = strlen(__s);
  uint64_t v26 = *a2 + 16 * a3;
  if (*(_DWORD *)(v26 + 8) > v25)
  {
    uint64_t v27 = *(char **)v26;
LABEL_26:
    strcpy(v27, __s);
    return 0;
  }
  uint64_t v28 = v25 + 1;
  uint64_t v27 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)v26, v28);
  if (v27)
  {
    uint64_t v33 = *a2 + 16 * a3;
    *(void *)uint64_t v33 = v27;
    *(_DWORD *)(v33 + 8) = v28;
    goto LABEL_26;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v29, v30, v31, v32, v35);
  return 2313166858;
}

uint64_t statpos_get_features(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, void *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a6;
    while (2)
    {
      size_t v15 = *(const char **)(a5 + 8 * v13);
      uint64_t v16 = &byte_26C21B3F8;
      uint64_t v17 = "PREVPOS";
      while (strcmp(v15, v17))
      {
        uint64_t v17 = (const char *)*((void *)v16 + 1);
        v16 += 24;
        if (!v17) {
          goto LABEL_9;
        }
      }
      uint64_t result = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))v16 - 1))(a1, a2, a3, a4, *v16, *(void *)(a2 + 128));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = statpos_fv_add(a1, a7, v13, *(char **)(a2 + 128), *(char **)(a5 + 8 * v13), a8);
      if ((result & 0x80000000) != 0) {
        return result;
      }
LABEL_9:
      if (++v13 != v14) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t statpos_dumpFeatureVectorAndResult(uint64_t a1, int a2, const char **a3, _WORD *a4, char *__s, char *a6, uint64_t a7, void *a8, char *a9, int a10, char *a11, char *__s1)
{
  if (!a2) {
    return 0;
  }
  uint64_t v18 = statcomp_add2Str(a1, a3, a4, __s);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statcomp_add2Str(a1, a3, a4, a6);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  if (*(unsigned __int8 *)(a7 + 1296) >= 2u)
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a4, *(char **)(*a8 + 16 * v19));
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v18 = statcomp_add2Str(a1, a3, a4, " ");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
    }
    while (*(unsigned __int8 *)(a7 + 1296) - 1 > (unsigned __int16)++v19);
  }
  if (!a11)
  {
    uint64_t v18 = statcomp_add2Str(a1, a3, a4, "PRED=");
    if ((v18 & 0x80000000) == 0)
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a4, a9);
      if ((v18 & 0x80000000) == 0)
      {
        __int16 v24 = " ";
LABEL_26:
        uint64_t v20 = statcomp_add2Str(a1, a3, a4, v24);
        if ((v20 & 0x80000000) != 0) {
          return v20;
        }
        goto LABEL_27;
      }
    }
    return v18;
  }
  uint64_t v18 = statcomp_add2Str(a1, a3, a4, "REF=");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statcomp_add2Str(a1, a3, a4, a11);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statcomp_add2Str(a1, a3, a4, "PRED=");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statcomp_add2Str(a1, a3, a4, a9);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v20 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
  if (strcmp(a11, a9) && (!__s1 || strcmp(__s1, a9)))
  {
    __int16 v24 = "*TAGERROR ";
    goto LABEL_26;
  }
LABEL_27:
  if (a10 || (uint64_t v20 = statcomp_add2Str(a1, a3, a4, "*BADTAG "), (v20 & 0x80000000) == 0))
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v21, v22, v23, (uint64_t)*a3);
    **a3 = 0;
  }
  return v20;
}

uint64_t initFeatureVector(uint64_t a1, void *a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v6 = (_WORD *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *a2 = v6;
    if (!v6) {
      break;
    }
    *uint64_t v6 = 61;
    ++a2;
    if (!--v5) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v12);
  return 2313166858;
}

_WORD **clearFeatureVector(_WORD **result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *result++;
      *uint64_t v3 = 61;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *freeFeatureVector(void *result, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3;
    do
    {
      if (*a2)
      {
        uint64_t result = heap_Free((void *)v4[1], *a2);
        *a2 = 0;
      }
      ++a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t statpos_get_features_for_igtree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 8)) {
    return 0;
  }
  unsigned __int8 v6 = 0;
  while (1)
  {
    uint64_t v7 = v6;
    uint64_t v8 = 16 * v6;
    uint64_t v9 = *(const char **)(*(void *)a3 + v8);
    size_t v10 = strlen(v9);
    if (v10 <= 0x40)
    {
      unsigned __int16 v11 = *(char **)(a2 + 8 * v7);
      goto LABEL_7;
    }
    unsigned __int16 v11 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 8 * v7), (unsigned __int16)v10 + 1);
    if (!v11) {
      break;
    }
    *(void *)(a2 + 8 * v7) = v11;
    uint64_t v9 = *(const char **)(*(void *)a3 + v8);
LABEL_7:
    strcpy(v11, v9);
    unsigned __int8 v6 = v7 + 1;
    if (*(_DWORD *)(a3 + 8) <= (v7 + 1)) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v12, v13, v14, v15, v17);
  return 2313166858;
}

uint64_t statpos_fe_prdctd_pos(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 == -1)
  {
    __dst[2] = 0;
    __int16 v7 = 16979;
    goto LABEL_7;
  }
  if ((v6 & 0x80000000) != 0 || v6 >= *(unsigned __int16 *)(a2 + 8))
  {
    __int16 v7 = 61;
LABEL_7:
    *(_WORD *)int __dst = v7;
    return 0;
  }
  strcpy(__dst, *(const char **)(*(void *)a2 + 160 * v6 + 88));
  return 0;
}

uint64_t statpos_fe_pssbl_tags(int a1, uint64_t a2, uint64_t a3, int a4, int a5, char *__dst)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  unsigned int v7 = a5 + a4;
  if (a5 + a4 >= 0
    && (uint64_t v9 = *(const char **)(*(void *)a2 + 160 * (int)v7 + 80)) != 0
    && v7 < *(unsigned __int16 *)(a2 + 8))
  {
    if (*(void *)(a3 + 144))
    {
      __int16 v24 = 0;
      unsigned __int16 v23 = 0;
      unsigned __int16 v11 = __s;
      __strcpy_chk();
      __s2[0] = *(unsigned char *)(a3 + 120);
      __s2[1] = 0;
      uint64_t v12 = strchr(__s, 47);
      if (v12)
      {
        uint64_t v13 = v12;
        unsigned __int16 v11 = __s;
        do
        {
          *uint64_t v13 = 0;
          if ((ssftmap_FindReadOnly(*(void *)(a3 + 144), (uint64_t)v11, &v24) & 0x1FFF) == 0x14) {
            uint64_t v14 = v11;
          }
          else {
            uint64_t v14 = v24;
          }
          statpos_getPOSTags(v14, (const char **)(a3 + 384), &v23);
          unsigned __int16 v11 = v13 + 1;
          uint64_t v13 = strchr(v13 + 1, 47);
        }
        while (v13);
      }
      if ((ssftmap_FindReadOnly(*(void *)(a3 + 144), (uint64_t)v11, &v24) & 0x1FFF) == 0x14)
      {
        uint64_t v15 = (const char **)(a3 + 384);
        uint64_t v16 = v11;
      }
      else
      {
        uint64_t v16 = v24;
        uint64_t v15 = (const char **)(a3 + 384);
      }
      statpos_getPOSTags(v16, v15, &v23);
      unint64_t v18 = v23;
      ssft_qsort(a3 + 384, v23, 8, (uint64_t (*)(unint64_t, unint64_t))string_cmp_0);
      strcpy(__dst, *(const char **)(a3 + 384));
      if (v18 >= 2)
      {
        unint64_t v19 = v18 - 1;
        uint64_t v20 = (const char **)(a3 + 392);
        do
        {
          uint64_t v21 = strcat(__dst, __s2);
          uint64_t v22 = *v20++;
          strcat(v21, v22);
          --v19;
        }
        while (v19);
      }
    }
    else
    {
      strcpy(__dst, v9);
    }
  }
  else
  {
    *(_WORD *)int __dst = 61;
  }
  return 0;
}

uint64_t statpos_fe_word(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *(unsigned __int16 *)(a2 + 8)) {
    *(_WORD *)int __dst = 61;
  }
  else {
    strcpy(__dst, **(const char ***)(*(void *)a2 + 160 * v6 + 48));
  }
  return 0;
}

uint64_t statpos_fe_cword(int a1, uint64_t *a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *((unsigned __int16 *)a2 + 4))
  {
    *(_WORD *)int __dst = 61;
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *(const char **)(*a2 + 160 * v6 + 120);
    if (!v8) {
      uint64_t v8 = **(const char ***)(v7 + 160 * v6 + 48);
    }
    strcpy(__dst, v8);
  }
  return 0;
}

uint64_t statpos_fe_token(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 >= 0
    && v6 < *(unsigned __int16 *)(a2 + 8)
    && (uint64_t v7 = *(const char **)(*(void *)(*(void *)a2 + 160 * v6 + 48) + 16)) != 0)
  {
    strcpy(__dst, v7);
  }
  else
  {
    *(_WORD *)int __dst = 61;
  }
  return 0;
}

uint64_t statpos_fe_ends_in_aposs(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, _WORD *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    size_t v10 = "=";
  }
  else
  {
    uint64_t v8 = **(const char ***)(*(void *)a2 + 160 * v7 + 48);
    size_t v9 = strlen(v8);
    if (v9 >= 3 && !strcmp("'s", &v8[v9 - 2])) {
      size_t v10 = "1";
    }
    else {
      size_t v10 = "0";
    }
  }
  *a6 = *(_WORD *)v10;
  return 0;
}

uint64_t statpos_fe_wrd_len(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    *(_WORD *)a6 = 61;
  }
  else
  {
    int v8 = Utf8_Utf8NbrOfSymbols(**(const char ***)(*(void *)a2 + 160 * v7 + 48));
    sprintf(a6, "%d", v8 - 1);
  }
  return 0;
}

uint64_t statpos_fe_prefix(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, int a5, char *a6)
{
  int v8 = *(unsigned __int8 **)(*a2 + 160 * a4 + 120);
  if (!v8) {
    int v8 = **(unsigned __int8 ***)(*a2 + 160 * a4 + 48);
  }
  if (a5 >= (unsigned __int16)(Utf8_Utf8NbrOfSymbols((const char *)v8) - 1))
  {
    *(_WORD *)a6 = 61;
  }
  else
  {
    int v9 = Utf8_LengthInBytes(v8, a5);
    strncpy(a6, (const char *)v8, v9);
    a6[v9] = 0;
  }
  return 0;
}

uint64_t statpos_fe_suffix(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, int a5, char *a6)
{
  int v8 = *(char **)(*a2 + 160 * a4 + 120);
  if (!v8) {
    int v8 = **(char ***)(*a2 + 160 * a4 + 48);
  }
  int v9 = (unsigned __int16)(Utf8_Utf8NbrOfSymbols(v8) - 1);
  if (v9 <= a5)
  {
    *(_WORD *)a6 = 61;
  }
  else
  {
    int v10 = Utf8_LengthInBytes((unsigned __int8 *)v8, v9 - a5);
    strcpy(a6, &v8[v10]);
  }
  return 0;
}

uint64_t statpos_fe_fllw_by_punc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, _WORD *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    uint64_t v14 = "=";
  }
  else
  {
    int v9 = **(char ***)(*(void *)a2 + 160 * v7 + 48);
    int v10 = Utf8_Utf8NbrOfSymbols(v9);
    int v11 = Utf8_LengthInBytes((unsigned __int8 *)v9, v10 - 2);
    if ((v10 - 3) <= 0xFFFFFFFD
      && (v12 = &v9[v11], unsigned int v13 = strlen(v12), _statpos_char_check(*(const char **)(a3 + 168), v12, v13)))
    {
      uint64_t v14 = "1";
    }
    else
    {
      uint64_t v14 = "0";
    }
  }
  *a6 = *(_WORD *)v14;
  return 0;
}

uint64_t statpos_fe_fllw_by_termpunc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, _WORD *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    uint64_t v14 = "=";
  }
  else
  {
    int v9 = **(char ***)(*(void *)a2 + 160 * v7 + 48);
    int v10 = Utf8_Utf8NbrOfSymbols(v9);
    int v11 = Utf8_LengthInBytes((unsigned __int8 *)v9, v10 - 2);
    if ((v10 - 3) <= 0xFFFFFFFD
      && (v12 = &v9[v11], unsigned int v13 = strlen(v12), _statpos_char_check(*(const char **)(a3 + 176), v12, v13)))
    {
      uint64_t v14 = "1";
    }
    else
    {
      uint64_t v14 = "0";
    }
  }
  *a6 = *(_WORD *)v14;
  return 0;
}

uint64_t statpos_fe_has_hyphen(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, _WORD *a6)
{
  *a6 = 48;
  int v8 = **(const char ***)(*a2 + 160 * (a5 + a4) + 48);
  unsigned int v9 = Utf8_Utf8NbrOfSymbols(v8) - 1;
  if (v9 >= 2)
  {
    int v10 = 0;
    while (1)
    {
      unsigned int v11 = utf8_determineUTF8CharLength(v8[v10]);
      if (_statpos_char_check(*(const char **)(a3 + 160), &v8[v10], v11)) {
        break;
      }
      v10 += v11;
      if (!--v9) {
        return 0;
      }
    }
    *a6 = 49;
  }
  return 0;
}

uint64_t statpos_fe_allupper(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, _WORD *a6)
{
  *a6 = 49;
  unsigned int v7 = **(char ***)(*a2 + 160 * (a5 + a4) + 48);
  int v8 = Utf8_Utf8NbrOfSymbols(v7);
  int v9 = v8 - 1;
  if (v8 != 1)
  {
    unsigned int v10 = 0;
    while (1)
    {
      unsigned int v11 = utf8_determineUTF8CharLength(v7[v10]);
      if (utf8_BelongsToSet(0x12u, v7, v10, v11) != 1
        && utf8_BelongsToSet(0x15u, v7, v10, v11) != 1
        && utf8_BelongsToSet(0x18u, v7, v10, v11) != 1
        && utf8_BelongsToSet(0x1Bu, v7, v10, v11) != 1
        && utf8_BelongsToSet(0x1Eu, v7, v10, v11) != 1)
      {
        break;
      }
      v10 += v11;
      if (!--v9) {
        return 0;
      }
    }
    *a6 = 48;
  }
  return 0;
}

uint64_t statpos_fe_leadingcap(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, _WORD *a6)
{
  int v8 = *(unsigned __int8 ***)(*a2 + 160 * (a5 + a4) + 48);
  int v9 = *v8;
  unsigned int v10 = utf8_determineUTF8CharLength(**v8);
  if (a4
    && ((unsigned int v11 = v10, utf8_BelongsToSet(0x12u, v9, 0, v10) == 1)
     || utf8_BelongsToSet(0x15u, v9, 0, v11) == 1
     || utf8_BelongsToSet(0x18u, v9, 0, v11) == 1
     || utf8_BelongsToSet(0x1Bu, v9, 0, v11) == 1
     || utf8_BelongsToSet(0x1Eu, v9, 0, v11) == 1))
  {
    uint64_t v12 = "1";
  }
  else
  {
    uint64_t v12 = "0";
  }
  *a6 = *(_WORD *)v12;
  return 0;
}

uint64_t statpos_fe_single_char(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, __int16 *a6)
{
  if (Utf8_Utf8NbrOfSymbols(**(const char ***)(*a2 + 160 * (a5 + a4) + 48)) == 2) {
    __int16 v7 = 49;
  }
  else {
    __int16 v7 = 48;
  }
  *a6 = v7;
  return 0;
}

uint64_t statpos_fe_contains_digit(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, _WORD *a6)
{
  *a6 = 48;
  __int16 v7 = **(char ***)(*a2 + 160 * (a5 + a4) + 48);
  int v8 = Utf8_Utf8NbrOfSymbols(v7);
  int v9 = v8 - 1;
  if (v8 != 1)
  {
    unsigned int v10 = 0;
    while (1)
    {
      unsigned int v11 = utf8_determineUTF8CharLength(v7[v10]);
      if (utf8_BelongsToSet(6u, v7, v10, v11) == 1) {
        break;
      }
      v10 += v11;
      if (!--v9) {
        return 0;
      }
    }
    *a6 = 49;
  }
  return 0;
}

uint64_t statpos_fe_hphn_wrd(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, int a5, char *a6)
{
  int v9 = *(const char **)(*a2 + 160 * a4 + 120);
  if (!v9) {
    int v9 = **(const char ***)(*a2 + 160 * a4 + 48);
  }
  int v10 = Utf8_Utf8NbrOfSymbols(v9);
  int v11 = v10 - 1;
  if (v10 == 1) {
    goto LABEL_20;
  }
  int v25 = a5;
  int __dst = a6;
  int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = v10 - 1;
  do
  {
    unsigned int v17 = utf8_determineUTF8CharLength(v9[v15]);
    if (v11 != 1)
    {
      int v18 = _statpos_char_check(*(const char **)(a3 + 160), &v9[v15], v17);
      unsigned int v19 = v14 ? v14 : v15;
      if (v18)
      {
        unsigned int v14 = v19;
        unsigned int v13 = v17 + v15;
        int v12 = 1;
      }
    }
    v15 += v17;
    --v16;
  }
  while (v16);
  a6 = __dst;
  if (v12 && v14)
  {
    if (v25 == -1)
    {
      unsigned int v22 = (unsigned __int16)strlen(v9);
      if (v22 - v13 > 0x10) {
        unsigned int v22 = v13 + 16;
      }
      unsigned __int16 v23 = &v9[v13];
      unsigned int v24 = v22 - v13;
      strncpy(__dst, v23, v22 - v13);
      __dst[v24] = 0;
    }
    else if (v25 == 1)
    {
      if (v14 >= 0x10) {
        size_t v20 = 16;
      }
      else {
        size_t v20 = v14;
      }
      strncpy(__dst, v9, v20);
      __dst[v20] = 0;
    }
  }
  else
  {
LABEL_20:
    *(_WORD *)a6 = 61;
  }
  return 0;
}

uint64_t statpos_fe_char(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unsigned char *a6)
{
  LOBYTE(v7) = a5;
  if (a5 <= 0)
  {
    int v14 = -1;
    if (a5 && a4)
    {
      do
      {
        unsigned int v15 = a4 + v14;
        LOBYTE(v7) = v7 + Utf8_Utf8NbrOfSymbols(**(const char ***)(*(void *)a2 + 160 * (a4 + v14--) + 48)) - 1;
      }
      while ((v7 & 0x80) != 0 && ((v15 - 1) & 0x80000000) == 0);
    }
    LODWORD(v10) = v14 + ((v7 & 0x80) == 0);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 160 * a4 + 208;
    uint64_t v12 = a4 + 1;
    while (v12 + v10 < (unint64_t)*(unsigned __int16 *)(a2 + 8))
    {
      char v13 = Utf8_Utf8NbrOfSymbols(**(const char ***)(*(void *)a2 + v11));
      int v7 = (char)(v7 - v13 + 1);
      ++v10;
      v11 += 160;
      if (v7 <= 0)
      {
        LOBYTE(v7) = v13 + v7 - 2;
        goto LABEL_12;
      }
    }
    LODWORD(v10) = v10 + 1;
  }
LABEL_12:
  unsigned int v16 = v10 + a4;
  if ((int)(v10 + a4) < 0 || v16 >= *(unsigned __int16 *)(a2 + 8))
  {
    *(_WORD *)a6 = 61;
  }
  else
  {
    unsigned int v17 = **(unsigned __int8 ***)(*(void *)a2 + 160 * v16 + 48);
    uint64_t v18 = (unsigned __int16)Utf8_LengthInBytes(v17, (char)v7);
    int v19 = strlen((const char *)v17) - v18;
    if (v19 >= (int)Utf8_LengthInBytes(&v17[v18], 1)) {
      utf8_getUTF8Char((uint64_t)v17, v18, a6);
    }
  }
  return 0;
}

uint64_t statpos_fe_wrd_prfx1(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 >= 0
    && v7 < *(unsigned __int16 *)(a2 + 8)
    && (int v8 = **(const char ***)(*(void *)a2 + 160 * v7 + 48),
        (((unsigned __int16)Utf8_Utf8NbrOfSymbols(v8) - 1) & 0xFFFE) != 0))
  {
    utf8_getUTF8Char((uint64_t)v8, 0, a6);
  }
  else
  {
    *(_WORD *)a6 = 61;
  }
  return 0;
}

uint64_t statpos_fe_wrd_prfx2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0
    || v7 >= *(unsigned __int16 *)(a2 + 8)
    || (int v8 = **(unsigned __int8 ***)(*(void *)a2 + 160 * v7 + 48),
        (unsigned __int16)(Utf8_Utf8NbrOfSymbols((const char *)v8) - 1) < 3u))
  {
    *(_WORD *)a6 = 61;
  }
  else
  {
    unsigned int v9 = Utf8_LengthInBytes(v8, 2);
    strncpy(a6, (const char *)v8, v9);
    a6[v9] = 0;
  }
  return 0;
}

uint64_t statpos_fe_wrd_sffx1(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 >= 0
    && v7 < *(unsigned __int16 *)(a2 + 8)
    && (int v8 = **(char ***)(*(void *)a2 + 160 * v7 + 48),
        (((unsigned __int16)Utf8_Utf8NbrOfSymbols(v8) - 1) & 0xFFFE) != 0))
  {
    unsigned int v9 = strlen(v8);
    utf8_GetUtf8Symbol(v8, v9 - 1, v9, a6);
  }
  else
  {
    *(_WORD *)a6 = 61;
  }
  return 0;
}

uint64_t statpos_fe_wrd_sffx2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0
    || v7 >= *(unsigned __int16 *)(a2 + 8)
    || (int v8 = **(unsigned __int8 ***)(*(void *)a2 + 160 * v7 + 48),
        unsigned int v9 = (unsigned __int16)(Utf8_Utf8NbrOfSymbols((const char *)v8) - 1),
        v9 < 3))
  {
    *(_WORD *)a6 = 61;
  }
  else
  {
    int v10 = Utf8_LengthInBytes(v8, v9 - 2);
    strcpy(a6, (const char *)&v8[v10]);
  }
  return 0;
}

uint64_t statpos_fe_startofword(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, _WORD *a6)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *(unsigned __int16 *)(a2 + 8))
  {
    unsigned int v7 = "=";
  }
  else
  {
    unsigned int v7 = "1";
    if (v6 && *(_DWORD *)(*(void *)a2 + 160 * (v6 - 1) + 20) != 1) {
      unsigned int v7 = "0";
    }
  }
  *a6 = *(_WORD *)v7;
  return 0;
}

uint64_t statpos_fe_fllw_by_sp(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, __int16 *a6)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *(unsigned __int16 *)(a2 + 8))
  {
    __int16 v7 = 61;
  }
  else if (*(_DWORD *)(*(void *)a2 + 160 * v6 + 20) == 1)
  {
    __int16 v7 = 49;
  }
  else
  {
    __int16 v7 = 48;
  }
  *a6 = v7;
  return 0;
}

uint64_t statpos_fe_fllw_by_anypunc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, _WORD *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    unsigned int v17 = "=";
  }
  else
  {
    uint64_t v11 = **(char ***)(*(void *)a2 + 160 * v7 + 48);
    int v12 = Utf8_Utf8NbrOfSymbols(v11);
    int v13 = Utf8_LengthInBytes((unsigned __int8 *)v11, v12 - 2);
    if (a4 + 1 == *(unsigned __int16 *)(a2 + 8)
      || (v12 - 3) <= 0xFFFFFFFD
      && ((int v14 = &v11[v13], v15 = strlen(v14), _statpos_char_check(*(const char **)(a3 + 168), v14, v15))
       || (unsigned int v16 = strlen(v14), _statpos_char_check(*(const char **)(a3 + 176), v14, v16))))
    {
      unsigned int v17 = "1";
    }
    else
    {
      unsigned int v17 = "0";
    }
  }
  *a6 = *(_WORD *)v17;
  return 0;
}

uint64_t statpos_fe_cword_ambig(int a1, uint64_t *a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *((unsigned __int16 *)a2 + 4))
  {
    *(_WORD *)int __dst = 61;
  }
  else
  {
    uint64_t v7 = *a2;
    if (*(_WORD *)(*a2 + 160 * v6 + 72) == 1) {
      int v8 = *(const char **)(v7 + 160 * v6 + 80);
    }
    else {
      int v8 = **(const char ***)(v7 + 160 * v6 + 48);
    }
    strcpy(__dst, v8);
  }
  return 0;
}

char *statpos_getPOSTags(char *a1, const char **a2, unsigned __int16 *a3)
{
  uint64_t v5 = a1;
  uint64_t result = strchr(a1, 92);
  if (result)
  {
    uint64_t v7 = result;
    unsigned __int16 v8 = *a3;
    do
    {
      unsigned int v9 = a2;
      uint64_t v10 = v8;
      while (v10)
      {
        uint64_t v11 = *v9++;
        --v10;
        if (!strncmp(v11, v5, v7 - v5)) {
          goto LABEL_8;
        }
      }
      strncpy((char *)a2[v8], v5, v7 - v5);
      a2[*a3][v7 - v5] = 0;
      unsigned __int16 v8 = *a3 + 1;
      *a3 = v8;
LABEL_8:
      uint64_t v5 = v7 + 1;
      uint64_t v7 = strchr(v7 + 1, 92);
    }
    while (v7);
  }
  else if (!v5)
  {
    return result;
  }
  uint64_t v12 = *a3;
  int v13 = a2;
  for (uint64_t i = v12; i; --i)
  {
    unsigned int v15 = *v13++;
    uint64_t result = (char *)strcmp(v15, v5);
    if (!result) {
      return result;
    }
  }
  uint64_t result = strcpy((char *)a2[v12], v5);
  ++*a3;
  return result;
}

uint64_t string_cmp_0(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t statpunc_setFeature(uint64_t a1, uint64_t a2, char *__s1, uint64_t *a4, const char *a5)
{
  unint64_t v5 = *(unsigned __int8 *)(a1 + 1296);
  if (v5 < 2) {
    return 0;
  }
  uint64_t v10 = (v5 - 1);
  for (uint64_t i = *(const char ***)(a1 + 1312); strcmp(__s1, *i); ++i)
  {
    ++a4;
    if (!--v10) {
      return 0;
    }
  }
  if (!*a5)
  {
    uint64_t result = 0;
    *(_WORD *)*a4 = 95;
    return result;
  }
  size_t v12 = strlen(a5);
  if (v12 <= 0x40)
  {
    int v13 = (char *)*a4;
    goto LABEL_12;
  }
  int v13 = (char *)heap_Realloc(*(uint64_t **)(a2 + 8), *a4, (unsigned __int16)v12 + 1);
  if (v13)
  {
    *a4 = (uint64_t)v13;
LABEL_12:
    strcpy(v13, a5);
    return 0;
  }
  log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v14, v15, v16, v17, v19);
  return 2311069706;
}

uint64_t statpunc_initFeatureVector(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  unint64_t v7 = 0;
  uint64_t v8 = 8 * a4 - 8;
  while (1)
  {
    if (!a3[v7 / 8])
    {
      uint64_t v9 = heap_Calloc(*(void **)(a2 + 8), 1, 65);
      a3[v7 / 8] = v9;
      if (!v9) {
        break;
      }
    }
    uint64_t result = statpunc_setFeature(a1, a2, *(char **)(*(void *)(a1 + 1312) + v7), a3, "_");
    if ((result & 0x80000000) == 0)
    {
      BOOL v15 = v8 == v7;
      v7 += 8;
      if (!v15) {
        continue;
      }
    }
    return result;
  }
  log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v10, v11, v12, v13, v16);
  return 2311069706;
}

uint64_t statpunc_dumpFeatureVectorAndResult(uint64_t a1, uint64_t a2, uint64_t a3, char *__src)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  strncpy(__dst, __src, 0x100uLL);
  __dst[255] = 0;
  if (*(unsigned __int8 *)(a1 + 1296) >= 2u)
  {
    uint64_t v10 = 0;
    do
    {
      size_t v11 = strlen(*(const char **)(a3 + 8 * v10));
      if (v11 + strlen(__dst) + 2 > 0xFF) {
        break;
      }
      __strcat_chk();
      __strcat_chk();
      ++v10;
    }
    while (*(unsigned __int8 *)(a1 + 1296) - 1 > (unsigned __int16)v10);
  }
  return log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"traceFeatureVector %s", v7, v8, v9, (uint64_t)__dst);
}

uint64_t statpunc_getIgtreeBrkStr(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v8 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v8);
  if ((result & 0x80000000) == 0)
  {
    strcpy(v9, "statpunc_");
    __strcat_chk();
    LODWORD(result) = brokeraux_ComposeBrokerString(a1, v9, 0, 1, *(char **)v8, 0, 0, a3, a4);
    if ((int)result >= 0) {
      return result;
    }
    else {
      return result | 0x89C02000;
    }
  }
  return result;
}

uint64_t statpunc_readIGTree(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v31 = 0;
  IgtreeBrkuint64_t Str = statpunc_getIgtreeBrkStr(a3, a4, v32, 0x100uLL);
  if ((IgtreeBrkStr & 0x80000000) != 0) {
    return IgtreeBrkStr;
  }
  IgtreeBrkuint64_t Str = ssftriff_reader_ObjOpen(a1, a2, 2, v32, "IGTR", 1031, (uint64_t *)v31);
  if ((IgtreeBrkStr & 0x80000000) != 0) {
    return IgtreeBrkStr;
  }
  uint64_t v10 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
  *(void *)(a5 + 8) = v10;
  if (!v10)
  {
    log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PUNCSPTN", 35000, 0, v11, v12, v13, v14, v30);
    return 2311069706;
  }
  IgtreeBrkuint64_t Str = igtree_Init(a1, a2, *(uint64_t *)v31, v10);
  if ((IgtreeBrkStr & 0x80000000) != 0) {
    return IgtreeBrkStr;
  }
  uint64_t v22 = ssftriff_reader_ObjClose(*(void **)v31, v15, v16, v17, v18, v19, v20, v21);
  if ((v22 & 0x80000000) == 0)
  {
    *(void *)(a5 + 16) = 0;
    *(void *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 32) = 393219;
    *(void *)(a5 + 40) = ":;.!?()[]{}#\"',-<>";
    uint64_t v23 = *(void *)(a5 + 8);
    unsigned int v24 = *(_DWORD *)(v23 + 1336);
    if (v24)
    {
      unsigned __int16 v25 = 0;
      uint64_t v26 = *(void *)(v23 + 1328);
      do
      {
        uint64_t v27 = v25;
        uint64_t v28 = *(const char **)(v26 + 16 * v25);
        if (!strcmp(v28, "leftcollocation"))
        {
          *(void *)(a5 + 16) = *(void *)(v26 + 16 * v27 + 8);
        }
        else if (!strcmp(v28, "rightcollocation"))
        {
          *(void *)(a5 + 24) = *(void *)(v26 + 16 * v27 + 8);
        }
        else if (!strcmp(v28, "dist2endmaxshort"))
        {
          *(_WORD *)(a5 + 32) = atoi(*(const char **)(v26 + 16 * v27 + 8));
        }
        else if (!strcmp(v28, "dist2endminlong"))
        {
          *(_WORD *)(a5 + 34) = atoi(*(const char **)(v26 + 16 * v27 + 8));
        }
        else if (!strcmp(v28, "punctuation"))
        {
          *(void *)(a5 + 40) = *(void *)(v26 + 16 * v27 + 8);
        }
        unsigned __int16 v25 = v27 + 1;
      }
      while (v24 > (unsigned __int16)(v27 + 1));
    }
  }
  return v22;
}

uint64_t statpunc_freeIGTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0;
  }
  uint64_t v10 = igtree_Deinit(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v10 & 0x80000000) == 0) {
    heap_Free(*(void **)(a1 + 8), a2);
  }
  return v10;
}

BOOL bstartword(char *__s, char *a2, char *a3)
{
  if (a3 == a2) {
    return 1;
  }
  unint64_t v5 = a3 - 1;
  unsigned int v6 = a3 - 1;
  do
  {
    int v8 = *v6--;
    char v7 = v8;
    uint64_t v9 = strchr(__s, v8);
    if (v5 <= a2) {
      break;
    }
    unint64_t v5 = v6;
  }
  while (v9);
  BOOL v11 = v6 + 1 == a2 && v9 != 0;
  return v7 == 32 || v11;
}

uint64_t statpunc_extractFeatures(uint64_t a1, uint64_t a2, char *a3, char *a4, const char *a5, uint64_t *a6)
{
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(const char **)(a1 + 16);
  if (v10 && (BOOL v11 = strchr(*(char **)(a1 + 16), 124)) != 0)
  {
    uint64_t v12 = v11;
    uint64_t v13 = 0;
    do
    {
      char *v12 = 0;
      uint64_t v14 = strstr(a3, v10);
      if (v14 && v14 < a4) {
        uint64_t v13 = statpunc_setFeature(v9, a2, "collocation", a6, "left");
      }
      char *v12 = 124;
      uint64_t v10 = v12 + 1;
      uint64_t v12 = strchr(v12 + 1, 124);
    }
    while (v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v15 = *(const char **)(a1 + 24);
  if (v15)
  {
    uint64_t v16 = strchr(*(char **)(a1 + 24), 124);
    if (v16)
    {
      uint64_t v17 = v16;
      do
      {
        char *v17 = 0;
        if (strstr(a3, v15) > a4) {
          uint64_t v13 = statpunc_setFeature(v9, a2, "collocation", a6, "right");
        }
        char *v17 = 124;
        uint64_t v15 = v17 + 1;
        uint64_t v17 = strchr(v17 + 1, 124);
      }
      while (v17);
    }
  }
  uint64_t v18 = a4;
  if (a4 > a3)
  {
    uint64_t v18 = a4;
    while (*v18 != 32)
    {
      if (--v18 <= a3)
      {
        uint64_t v18 = a3;
        break;
      }
    }
  }
  if (v18 > a3)
  {
    while (*v18 == 32)
    {
      if (--v18 <= a3)
      {
        uint64_t v18 = a3;
        break;
      }
    }
  }
  int v19 = *v18;
  if (strchr(*(char **)(a1 + 40), v19))
  {
    uint64_t v20 = "punc";
  }
  else
  {
    if (!memchr("0123456789", v19, 0xBuLL)) {
      goto LABEL_30;
    }
    uint64_t v20 = "digit";
  }
  uint64_t v13 = statpunc_setFeature(v9, a2, "lwordendchar", a6, v20);
LABEL_30:
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  for (uint64_t i = a4; (*i | 0x20) != 0x20; ++i)
    ;
  do
  {
    int v23 = *i++;
    int v22 = v23;
  }
  while (v23 == 32);
  if (strchr(*(char **)(a1 + 40), v22))
  {
    unsigned int v24 = "punc";
  }
  else
  {
    if (!memchr("0123456789", v22, 0xBuLL)) {
      goto LABEL_40;
    }
    unsigned int v24 = "digit";
  }
  uint64_t v13 = statpunc_setFeature(v9, a2, "rwordbegchar", a6, v24);
LABEL_40:
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  unsigned __int16 v25 = *(char **)(a1 + 40);
  if (a4 > a3)
  {
    int v26 = *(a4 - 1);
    if (strchr(*(char **)(a1 + 40), v26))
    {
      uint64_t v27 = "punc";
    }
    else
    {
      if (!memchr("0123456789", v26, 0xBuLL)) {
        goto LABEL_48;
      }
      uint64_t v27 = "digit";
    }
    uint64_t v13 = statpunc_setFeature(v9, a2, "lchar", a6, v27);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    unsigned __int16 v25 = *(char **)(a1 + 40);
  }
LABEL_48:
  int v28 = a4[1];
  if (strchr(v25, v28))
  {
    uint64_t v29 = "punc";
  }
  else
  {
    if (!memchr("0123456789", v28, 0xBuLL)) {
      goto LABEL_54;
    }
    uint64_t v29 = "digit";
  }
  uint64_t v13 = statpunc_setFeature(v9, a2, "rchar", a6, v29);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  unsigned __int16 v25 = *(char **)(a1 + 40);
LABEL_54:
  __s2 = (char *)(a1 + 4);
  if (a4 == a3) {
    goto LABEL_60;
  }
  unsigned int v30 = a4 - 1;
  uint64_t v31 = a4 - 1;
  do
  {
    int v32 = *v31--;
    uint64_t v33 = strchr(v25, v32);
    if (v30 <= a3) {
      break;
    }
    unsigned int v30 = v31;
  }
  while (v33);
  if (v31 + 1 == a3 && v33)
  {
LABEL_60:
    uint64_t v34 = a4 + 1;
    unsigned int v35 = "isolated";
    while (1)
    {
      int v37 = *v34++;
      int v36 = v37;
      if (!v37) {
        goto LABEL_80;
      }
      unint64_t v38 = strchr(v25, v36);
      if (v36 != 32 && v38 == 0)
      {
        if (strcmp(a5, (const char *)a1)) {
          goto LABEL_81;
        }
        uint64_t v13 = statpunc_setFeature(v9, a2, "sentpos", a6, "start");
        if ((v13 & 0x80000000) == 0) {
          goto LABEL_81;
        }
        return v13;
      }
    }
  }
  unsigned int v40 = a4 + 1;
  while (1)
  {
    int v42 = *v40++;
    int v41 = v42;
    if (!v42) {
      break;
    }
    uint64_t v43 = strchr(v25, v41);
    if (v41 != 32 && v43 == 0) {
      goto LABEL_81;
    }
  }
  if (!strcmp(a5, (const char *)(a1 + 4)))
  {
    unsigned int v35 = "end";
LABEL_80:
    uint64_t v13 = statpunc_setFeature(v9, a2, "sentpos", a6, v35);
  }
LABEL_81:
  unint64_t v45 = *(char **)(a1 + 40);
  if (bstartword(v45, a3, a4))
  {
    uint64_t v46 = 1;
    do
    {
      int v47 = a4[v46];
      if (!a4[v46]) {
        goto LABEL_101;
      }
    }
    while (strchr(v45, a4[v46++]));
    if ((v47 & 0xFFFFFFDF) == 0)
    {
LABEL_101:
      unint64_t v57 = "pos";
      unsigned int v58 = "isolated";
      goto LABEL_102;
    }
    if (!strcmp(a5, (const char *)a1))
    {
      uint64_t v13 = statpunc_setFeature(v9, a2, "pos", a6, "start");
      if ((v13 & 0x80000000) == 0)
      {
        uint64_t v49 = strstr(a4 + 1, __s2);
        if (v49)
        {
          uint64_t v50 = v49;
          unint64_t v51 = *(char **)(a1 + 40);
          if (!bstartword(v51, a3, v49))
          {
            uint64_t v52 = 1;
            while (1)
            {
              int v53 = v50[v52];
              if (!v50[v52]) {
                break;
              }
              if (!strchr(v51, v50[v52++]))
              {
                if ((v53 & 0xFFFFFFDF) != 0) {
                  return v13;
                }
                break;
              }
            }
            if (v50 <= a4)
            {
              unsigned __int16 v55 = 0;
            }
            else
            {
              unsigned __int16 v55 = 0;
              do
              {
                if (*a4 == 32)
                {
                  ++v55;
                  do
                    int v56 = *++a4;
                  while (v56 == 32);
                }
                ++a4;
              }
              while (a4 < v50);
            }
            if (*(unsigned __int16 *)(a1 + 32) <= v55)
            {
              unint64_t v57 = "dist2end";
              if (*(unsigned __int16 *)(a1 + 34) <= v55) {
                unsigned int v58 = "long";
              }
              else {
                unsigned int v58 = "medium";
              }
            }
            else
            {
              unint64_t v57 = "dist2end";
              unsigned int v58 = "short";
            }
            goto LABEL_102;
          }
        }
      }
    }
    return v13;
  }
  uint64_t v60 = a4 + 1;
  while (1)
  {
    int v62 = *v60++;
    int v61 = v62;
    if (!v62) {
      break;
    }
    if (!strchr(v45, v61))
    {
      if ((v61 & 0xFFFFFFDF) != 0) {
        return v13;
      }
      break;
    }
  }
  if (strcmp(a5, __s2)) {
    return v13;
  }
  unint64_t v57 = "pos";
  unsigned int v58 = "end";
LABEL_102:
  return statpunc_setFeature(v9, a2, v57, a6, v58);
}

uint64_t statpunc_insertMarker(uint64_t a1, unsigned int a2, const char *a3, uint64_t *a4, _WORD *a5, uint64_t *a6, _WORD *a7, uint64_t *a8)
{
  uint64_t v15 = a1;
  int v16 = *(_DWORD *)(*a8 + 12);
  int v17 = (unsigned __int16)*a5;
  if ((unsigned __int16)((unsigned __int16)((((-13107 * v17) & 0xFFFCu) >> 1) | ((_WORD)v17 << 15)) >> 1) < 0xCCDu)
  {
    uint64_t v26 = heap_Realloc(*(uint64_t **)(a1 + 8), *a4, 8 * (unsigned __int16)*a5 + 80);
    if (!v26
      || (*a4 = v26, (uint64_t v18 = heap_Realloc(*(uint64_t **)(v15 + 8), *a6, 20 * ((unsigned __int16)*a5 / 0xAu + 1))) == 0))
    {
LABEL_34:
      uint64_t v44 = 2311069706;
      uint64_t v53 = *(void *)(v15 + 32);
LABEL_35:
      log_OutPublic(v53, (uint64_t)"FE_PUNCSPTN", 33000, 0, v27, v28, v29, v30, v55);
      return v44;
    }
    uint64_t v59 = a4;
    uint64_t v60 = a5;
    *a6 = v18;
    LOWORD(v17) = *a5;
  }
  else
  {
    uint64_t v59 = a4;
    uint64_t v60 = a5;
    uint64_t v18 = *a6;
  }
  *(_WORD *)(v18 + 2 * (unsigned __int16)v17) = a2;
  uint64_t v19 = (unsigned __int16)*a7;
  unsigned int v58 = a7;
  if (!*a7)
  {
    unsigned __int16 v21 = 0;
    goto LABEL_32;
  }
  uint64_t v56 = v15;
  unint64_t v57 = (char *)a3;
  int v20 = *(_DWORD *)(*a8 + 12);
  if (v20 - v16 <= a2)
  {
    unsigned __int16 v21 = 0;
    unsigned __int16 v22 = 0;
    int v23 = 0;
    int v24 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = *a8 + 24;
    do
    {
      int v33 = *(_DWORD *)(v32 - 24);
      if (v33 == 1)
      {
        unsigned __int16 v21 = v31;
        int v23 = v20;
      }
      if (v33 == 51)
      {
        uint64_t v34 = *(char **)v32;
        unsigned int v35 = strstr(*(char **)v32, "PUNC");
        BOOL v25 = v35 && (v35 == v34 || *(v35 - 1) != 95);
        unsigned __int16 v22 = v31;
        int v24 = v20;
      }
      else
      {
        BOOL v25 = 0;
      }
      if (v19 == ++v31) {
        break;
      }
      int v20 = *(_DWORD *)(v32 + 20);
      v32 += 32;
    }
    while (v20 - v16 <= a2);
  }
  else
  {
    unsigned __int16 v21 = 0;
    unsigned __int16 v22 = 0;
    int v23 = 0;
    int v24 = 0;
    BOOL v25 = 0;
  }
  if (!v22)
  {
    uint64_t v15 = v56;
    a3 = v57;
    goto LABEL_32;
  }
  BOOL v36 = v23 == v24;
  uint64_t v15 = v56;
  a3 = v57;
  if (!v36)
  {
LABEL_32:
    uint64_t v45 = v21 + 1;
    memmove((void *)(*a8 + 32 * (v21 + 2)), (const void *)(*a8 + 32 * v45), 32 * (int)(v19 + ~v21));
    uint64_t v46 = *a8;
    uint64_t v47 = *a8 + 32 * v45;
    *(_DWORD *)uint64_t v47 = 51;
    uint64_t v48 = v46 + 32 * v21;
    *(void *)(v47 + 4) = *(void *)(v48 + 4);
    *(void *)(v47 + 12) = *(unsigned int *)(v48 + 12);
    int v49 = strlen(a3);
    *(void *)(*a8 + 32 * v45 + 24) = heap_Alloc(*(void *)(v15 + 8), (v49 + 1));
    uint64_t v50 = *(void *)(*a8 + 32 * v45 + 24);
    if (v50)
    {
      uint64_t v51 = *v59;
      uint64_t v52 = (unsigned __int16)*v60;
      *uint64_t v60 = v52 + 1;
      *(void *)(v51 + 8 * v52) = v50;
      strcpy(*(char **)(*a8 + 32 * v45 + 24), a3);
      uint64_t v44 = 0;
      ++*v58;
      return v44;
    }
    goto LABEL_34;
  }
  if (v25 && !strstr(v57, "S_PUNC") && !strstr(v57, "E_PUNC")) {
    return 0;
  }
  int v37 = strlen(v57);
  int v38 = strlen(*(const char **)(*a8 + 32 * v22 + 24));
  unsigned int v39 = (char *)heap_Alloc(*(void *)(v56 + 8), (v37 + v38 + 2));
  if (!v39)
  {
    uint64_t v44 = 2311069706;
    uint64_t v53 = *(void *)(v56 + 32);
    goto LABEL_35;
  }
  unsigned int v40 = v39;
  uint64_t v41 = *v59;
  uint64_t v42 = (unsigned __int16)*v60;
  *uint64_t v60 = v42 + 1;
  *(void *)(v41 + 8 * v42) = v39;
  uint64_t v43 = strcpy(v39, *(const char **)(*a8 + 32 * v22 + 24));
  *(_WORD *)&v40[strlen(v43)] = 59;
  strcat(v40, v57);
  uint64_t v44 = 0;
  *(void *)(*a8 + 32 * v22 + 24) = v40;
  return v44;
}

char *statpunc_Strpunc(char *a1, const char *a2, const char *a3, const char **a4)
{
  int v8 = strstr(a1, a2);
  uint64_t result = strstr(a1, a3);
  if (v8)
  {
    if (v8 <= result) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = a3;
    }
    if (v8 <= result) {
      BOOL v11 = v8;
    }
    else {
      BOOL v11 = result;
    }
    if (result) {
      a3 = v10;
    }
    else {
      a3 = a2;
    }
    if (result) {
      uint64_t result = v11;
    }
    else {
      uint64_t result = v8;
    }
  }
  else if (!result)
  {
    return result;
  }
  *a4 = a3;
  return result;
}

uint64_t statpunc_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  LODWORD(v8) = a6;
  uint64_t v10 = a4;
  uint64_t v12 = a2;
  int v104 = 0;
  int v105 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  __src = 0;
  uint64_t v101 = 0;
  uint64_t v99 = 0;
  int v98 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v105);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_57;
  }
  uint64_t v15 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(v12 + 184))(a3, v10, (unsigned __int16)v105, 0, (char *)&v105 + 2) & 0x80000000) != 0)goto LABEL_58; {
  if (HIWORD(v105) != 1)
  }
    goto LABEL_58;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(v12 + 176))(a3, v10, (unsigned __int16)v105, 0, &v103, (char *)&v104 + 2);
  uint64_t v15 = 0;
  if ((v14 & 0x80000000) != 0 || HIWORD(v104) < 2u) {
    goto LABEL_58;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void **, char *))(v12 + 176))(a3, v10, (unsigned __int16)v105, 1, &__src, (char *)&v98 + 2);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_57;
  }
  int v94 = *((_DWORD *)__src + 3);
  int v16 = (const char *)(a5 + 4);
  int v17 = statpunc_Strpunc(v103, (const char *)a5, (const char *)(a5 + 4), &v101);
  if (!v17) {
    goto LABEL_57;
  }
  unsigned __int16 v18 = 0;
  do
  {
    ++v18;
    int v17 = statpunc_Strpunc(v17 + 1, (const char *)a5, (const char *)(a5 + 4), &v101);
  }
  while (v17);
  if (!v18)
  {
LABEL_57:
    uint64_t v15 = 0;
    goto LABEL_58;
  }
  uint64_t v19 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 32 * (HIWORD(v98) + (unint64_t)v18));
  uint64_t v99 = v19;
  if (!v19)
  {
LABEL_56:
    uint64_t v14 = 2311069706;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v20, v21, v22, v23, v84);
    goto LABEL_57;
  }
  uint64_t v90 = a7;
  uint64_t v95 = a3;
  memcpy(v19, __src, 32 * HIWORD(v98));
  int v24 = v103;
  BOOL v25 = statpunc_Strpunc(v103, (const char *)a5, (const char *)(a5 + 4), &v101);
  uint64_t v91 = v10;
  if (!v25)
  {
    unint64_t v86 = 0;
LABEL_73:
    int v51 = strlen(v24);
    uint64_t v52 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v51 + 1));
    uint64_t v15 = v52;
    if (v52)
    {
      strcpy(v52, v103);
      uint64_t v85 = a5;
      if (v8 && (_WORD)v98)
      {
        uint64_t v57 = 0;
        unsigned __int16 v93 = 0;
        uint64_t v8 = v8;
        uint64_t v58 = v90;
        uint64_t v88 = v8;
        uint64_t v89 = a1;
        uint64_t v87 = v12;
        while (2)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            uint64_t v60 = (const char *)(v58 + (i << 9));
            if (!strcmp((const char *)v97[v57], v60))
            {
              int v61 = v60 + 256;
              unsigned __int16 v62 = strlen(v60 + 256);
              int v63 = strlen(v15);
              unsigned __int16 v64 = (const char *)heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v15, v62 + v63 + 1);
              if (!v64)
              {
                uint64_t v14 = 2311069706;
                log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v65, v66, v67, v68, v84);
                goto LABEL_64;
              }
              uint64_t v69 = v64;
              uint64_t v70 = v96;
              uint64_t v71 = *(unsigned __int16 *)(v96 + 2 * v57);
              int v72 = v71 + v93;
              int __dst = (char *)&v64[v72 + v62];
              unsigned int v73 = &v64[v72 + 1];
              size_t v74 = strlen(v64);
              uint64_t v75 = v73;
              uint64_t v12 = v87;
              memmove(__dst, v75, v74 - (v71 + v93));
              memcpy((void *)&v69[*(unsigned __int16 *)(v70 + 2 * v57) + v93], v61, v62);
              uint64_t v76 = HIWORD(v98);
              uint64_t v58 = v90;
              if (HIWORD(v98))
              {
                unsigned int v77 = *(unsigned __int16 *)(v70 + 2 * v57) + v93;
                unint64_t v78 = v99 + 12;
                do
                {
                  if (v77 < (unsigned __int16)(*v78 - v94)) {
                    *v78 += v62 - 1;
                  }
                  v78 += 8;
                  --v76;
                }
                while (v76);
              }
              unsigned __int16 v93 = v93 + v62 - 1;
              uint64_t v15 = v69;
              uint64_t v8 = v88;
              a1 = v89;
              uint64_t v10 = v91;
            }
          }
          if (++v57 < (unint64_t)(unsigned __int16)v98) {
            continue;
          }
          break;
        }
      }
      uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(v12 + 160))(v95, v10, (unsigned __int16)v105, 1, HIWORD(v98), v99, &v104);
      if ((v79 & 0x80000000) != 0)
      {
        uint64_t v14 = v79;
      }
      else
      {
        __int16 v80 = strlen(v15);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, const char *, int *))(v12 + 160))(v95, v10, (unsigned __int16)v105, 0, (unsigned __int16)(v80 + 1), v15, &v104);
        if ((v14 & 0x80000000) == 0)
        {
          uint64_t v81 = (unsigned __int16)v98;
          uint64_t v48 = (uint64_t)v86;
          if ((_WORD)v98)
          {
            unint64_t v82 = v97;
            do
            {
              uint64_t v83 = *v82++;
              heap_Free(*(void **)(a1 + 8), v83);
              --v81;
            }
            while (v81);
          }
          a5 = v85;
          if (v96) {
            heap_Free(*(void **)(a1 + 8), v96);
          }
          if (v97) {
            heap_Free(*(void **)(a1 + 8), (uint64_t)v97);
          }
          goto LABEL_65;
        }
      }
LABEL_64:
      a5 = v85;
      uint64_t v48 = (uint64_t)v86;
      goto LABEL_65;
    }
    uint64_t v14 = 2311069706;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v53, v54, v55, v56, v84);
LABEL_98:
    uint64_t v48 = (uint64_t)v86;
LABEL_65:
    if (!v48) {
      goto LABEL_58;
    }
    goto LABEL_66;
  }
  uint64_t v26 = v25;
  uint64_t v27 = 0;
  uint64_t v85 = a5;
  unint64_t v86 = 0;
  while (1)
  {
    __int16 v28 = (__int16)v103;
    int v107 = 0;
    v108[0] = 0;
    int v106 = 0;
    uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(v12 + 104))(v95, v10, 3, (unsigned __int16)v105, (char *)&v107 + 2);
    if ((inserted & 0x80000000) != 0) {
      goto LABEL_63;
    }
    unsigned __int16 v33 = HIWORD(v107);
    if (HIWORD(v107))
    {
      int v34 = 0;
      unsigned int v35 = (unsigned __int16)((_WORD)v26 - v28);
      while (1)
      {
        uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(v12 + 168))(v95, v10, v33, 0, 1, v108, &v107);
        if ((inserted & 0x80000000) != 0) {
          break;
        }
        uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(v12 + 168))(v95, v10, HIWORD(v107), 1, 1, (char *)&v106 + 2, &v107);
        if ((inserted & 0x80000000) != 0) {
          break;
        }
        uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(v12 + 168))(v95, v10, HIWORD(v107), 2, 1, &v106, &v107);
        if ((inserted & 0x80000000) != 0) {
          break;
        }
        if ((unsigned __int16)v106 > v35 && HIWORD(v106) <= v35 && (v108[0] & 0xFFFFFFFD) == 4) {
          int v34 = 1;
        }
        uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(v12 + 120))(v95, v10, HIWORD(v107), (char *)&v107 + 2);
        uint64_t v14 = v38;
        if ((v38 & 0x80000000) == 0)
        {
          unsigned __int16 v33 = HIWORD(v107);
          if (HIWORD(v107)) {
            continue;
          }
        }
        a5 = v85;
        if ((v38 & 0x80000000) != 0)
        {
          uint64_t v15 = 0;
          goto LABEL_98;
        }
        if (v34) {
          goto LABEL_54;
        }
        goto LABEL_35;
      }
LABEL_63:
      uint64_t v14 = inserted;
      uint64_t v15 = 0;
      goto LABEL_64;
    }
    a5 = v85;
LABEL_35:
    unsigned int v39 = v86;
    if (!v86)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"traceFeatureVector %s", v30, v31, v32, (uint64_t)v103);
      unsigned int v39 = (uint64_t *)heap_Calloc(*(void **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(*(void *)(a5 + 8) + 1296) - 8);
      if (!v39) {
        goto LABEL_56;
      }
    }
    uint64_t inited = statpunc_initFeatureVector(*(void *)(a5 + 8), a1, v39, (unsigned __int16)(*(unsigned __int8 *)(*(void *)(a5 + 8) + 1296) - 1));
    if ((inited & 0x80000000) != 0)
    {
LABEL_101:
      uint64_t v14 = inited;
      uint64_t v15 = 0;
      uint64_t v48 = (uint64_t)v39;
      goto LABEL_66;
    }
    unint64_t v86 = v39;
    uint64_t Features = statpunc_extractFeatures(a5, a1, v103, v26, v101, v39);
    if ((Features & 0x80000000) != 0) {
      break;
    }
    if (v27)
    {
      uint64_t inited = statpunc_setFeature(*(void *)(a5 + 8), a1, "startpred", v39, v27);
      if ((inited & 0x80000000) != 0) {
        goto LABEL_101;
      }
    }
    uint64_t inited = igtree_Process(*(void *)(a5 + 8), (uint64_t)v39, &v102);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_101;
    }
    if (!strcmp((const char *)*v39, "start")) {
      uint64_t v27 = v102;
    }
    statpunc_dumpFeatureVectorAndResult(*(void *)(a5 + 8), a1, (uint64_t)v39, v102);
    uint64_t v42 = v102;
    if (!strstr(v102, "IGNORE"))
    {
      uint64_t v43 = v103;
      unsigned __int16 v44 = (_WORD)v26 - (_WORD)v103;
      if (!strstr(v42, "S_PUNC"))
      {
        uint64_t v45 = v44;
        if (v44)
        {
          while (1)
          {
            int v46 = v43[v45 - 1];
            if (v46 != 32 && !strchr(*(char **)(v85 + 40), v46)) {
              break;
            }
            if (!(_WORD)--v45)
            {
              unsigned __int16 v44 = 0;
              goto LABEL_52;
            }
          }
          unsigned __int16 v44 = v45;
        }
      }
LABEL_52:
      uint64_t inserted = statpunc_insertMarker(a1, v44, v42, (uint64_t *)&v97, &v98, &v96, (_WORD *)&v98 + 1, (uint64_t *)&v99);
      if ((inserted & 0x80000000) != 0) {
        goto LABEL_63;
      }
      a5 = v85;
      uint64_t v10 = v91;
    }
LABEL_54:
    uint64_t v26 = statpunc_Strpunc(v26 + 1, (const char *)a5, v16, &v101);
    if (!v26)
    {
      int v24 = v103;
      goto LABEL_73;
    }
  }
  uint64_t v14 = Features;
  uint64_t v15 = 0;
  uint64_t v48 = (uint64_t)v39;
LABEL_66:
  if (*(unsigned char *)(*(void *)(a5 + 8) + 1296) != 1)
  {
    uint64_t v49 = (unsigned __int16)(*(unsigned __int8 *)(*(void *)(a5 + 8) + 1296) - 1);
    uint64_t v50 = (uint64_t *)v48;
    do
    {
      if (*v50) {
        heap_Free(*(void **)(a1 + 8), *v50);
      }
      ++v50;
      --v49;
    }
    while (v49);
  }
  heap_Free(*(void **)(a1 + 8), v48);
LABEL_58:
  if (v99) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v99);
  }
  if (v15) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v15);
  }
  return v14;
}

uint64_t fe_puncsptn_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v5 = 2311069703;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (!a5) {
    return v5;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v24);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = objc_GetObject(v24[6], (uint64_t)"LINGDB", &v23);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t Object = objc_GetObject(v24[6], (uint64_t)"FE_DEPES", &v22);
  uint64_t v11 = v24[6];
  if ((Object & 0x80000000) != 0)
  {
LABEL_11:
    objc_ReleaseObject(v11, (uint64_t)"LINGDB");
    return Object;
  }
  uint64_t v12 = objc_GetObject(v11, (uint64_t)"FE_DCTLKP", &v21);
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t Object = v12;
    objc_ReleaseObject(v24[6], (uint64_t)"FE_DEPES");
    uint64_t v11 = v24[6];
    goto LABEL_11;
  }
  uint64_t v13 = heap_Alloc(v24[1], 168);
  if (v13)
  {
    *(void *)(v13 + 160) = 0;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(void *)a5 = v13;
    *(_DWORD *)(a5 + 8) = 62339;
    *(void *)uint64_t v13 = v24;
    *(void *)(v13 + 8) = a3;
    *(void *)(v13 + 16) = a4;
    *(void *)(v13 + 24) = *(void *)(v23 + 8);
    uint64_t v18 = v22;
    *(void *)(v13 + 48) = *(void *)(v22 + 8);
    *(_OWORD *)(v13 + 32) = *(_OWORD *)(v18 + 16);
    uint64_t v19 = v21;
    *(void *)(v13 + 72) = *(void *)(v21 + 8);
    *(_OWORD *)(v13 + 56) = *(_OWORD *)(v19 + 16);
    *(_WORD *)(v13 + 112) = 0;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    uint64_t v5 = hlp_open((void *)v13);
    if ((v5 & 0x80000000) != 0)
    {
      fe_puncsptn_ObjClose(*(uint64_t **)a5, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
  }
  else
  {
    log_OutPublic(v24[4], (uint64_t)"FE_PUNCSPTN", 33000, 0, v14, v15, v16, v17, v21);
    objc_ReleaseObject(v24[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v24[6], (uint64_t)"FE_DEPES");
    objc_ReleaseObject(v24[6], (uint64_t)"FE_DCTLKP");
    return 2311069706;
  }
  return v5;
}

uint64_t hlp_open(void *a1)
{
  uint64_t v1 = 2311069706;
  uint64_t v51 = 0;
  __int16 v48 = -1;
  char v47 = 0;
  if (!a1) {
    return 2311069702;
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v3 = (*(uint64_t (**)(void, void, char *, uint64_t *))(a1[9] + 88))(a1[7], a1[8], (char *)&v51 + 4, &v51);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  BOOL v5 = v51 == 1 && HIDWORD(v51) == 1;
  a1[15] = 0;
  *((_DWORD *)a1 + 29) = v5;
  if ((paramc_ParamGet(*(void *)(*a1 + 40), (uint64_t)"fecfg", &v50, 0) & 0x80000000) == 0
    && (!LH_stricmp(v50, "mpthree") || !LH_stricmp(v50, "vadvde")))
  {
    *((_DWORD *)a1 + 30) = 1;
  }
  __int16 v48 = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char ***, __int16 *, char *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "puncsptneos", &v49, &v48, &v47);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (v48 == 1 && v49 && **v49 == 49) {
    *((_DWORD *)a1 + 31) = 1;
  }
  LOBYTE(v54) = 0;
  LOWORD(__s1) = -1;
  uint64_t v6 = a1[16];
  if (v6) {
    heap_Free(*(void **)(*a1 + 8), v6);
  }
  uint64_t v55 = 0;
  a1[16] = 0;
  uint64_t v7 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, char **, unsigned __int16 *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "esctn", &v55, &__s1, &v54);
  uint64_t IGTree = v7;
  if ((v7 & 0x80000000) != 0 || !(_WORD)__s1)
  {
    if ((v7 & 0x80000000) != 0) {
      return IGTree;
    }
  }
  else
  {
    int v15 = strlen(*v55);
    uint64_t v16 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, (v15 + 1));
    a1[16] = v16;
    if (!v16)
    {
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 34000, 0, v17, v18, v19, v20, v46);
      return 2311069706;
    }
    strcpy(v16, *v55);
    *(unsigned char *)(strlen(*v55) + a1[16] - 1) = 124;
  }
  unsigned __int16 v54 = 0;
  uint64_t v55 = 0;
  char v53 = 0;
  uint64_t v21 = a1[17];
  if (*((_WORD *)a1 + 72))
  {
    unint64_t v22 = 0;
    uint64_t v23 = 8;
    do
    {
      statpunc_freeIGTree(*a1, *(void *)(v21 + v23), v8, v9, v10, v11, v12, v13);
      uint64_t v21 = a1[17];
      *(void *)(v21 + v23) = 0;
      ++v22;
      v23 += 48;
    }
    while (v22 < *((unsigned __int16 *)a1 + 72));
  }
  else if (!v21)
  {
    goto LABEL_33;
  }
  heap_Free(*(void **)(*a1 + 8), v21);
LABEL_33:
  a1[17] = 0;
  *((_WORD *)a1 + 72) = 0;
  uint64_t IGTree = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, unsigned __int16 *, char *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "statpunc", &v55, &v54, &v53);
  if ((IGTree & 0x80000000) == 0 && v54)
  {
    int __s1 = 0;
    paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"fevoice", &__s1);
    uint64_t v24 = heap_Alloc(*(void *)(*a1 + 8), 48 * v54);
    a1[17] = v24;
    if (!v24) {
      goto LABEL_63;
    }
    if (v54)
    {
      for (unint64_t i = 0; i < v54; ++i)
      {
        if (__s1)
        {
          uint64_t v30 = strstr(__s1, "uni");
          uint64_t v31 = v55;
          if (v30)
          {
            uint64_t v32 = (char *)v55[i];
LABEL_43:
            unsigned __int16 v33 = strchr(v32, 124);
            if (v33)
            {
              *unsigned __int16 v33 = 0;
              int v34 = v33 + 1;
              __strcpy_chk();
              unsigned int v35 = strchr(v34, 124);
              if (v35)
              {
                *unsigned int v35 = 0;
                BOOL v36 = v35 + 1;
                __strcpy_chk();
                int v37 = strchr(v36, 124);
                if (v37)
                {
                  *int v37 = 0;
                  uint64_t IGTree = statpunc_readIGTree((_WORD *)a1[1], a1[2], *a1, (uint64_t)v36, a1[17] + 48 * *((unsigned __int16 *)a1 + 72));
                  if ((IGTree & 0x80000000) != 0) {
                    return IGTree;
                  }
                  ++*((_WORD *)a1 + 72);
                }
              }
            }
            continue;
          }
        }
        else
        {
          uint64_t v31 = v55;
        }
        uint64_t v32 = (char *)v31[i];
        if (!strstr(v32, "extended")) {
          goto LABEL_43;
        }
      }
    }
  }
  if ((IGTree & 0x80000000) == 0)
  {
    LOBYTE(v54) = 0;
    LOWORD(__s1) = 0;
    uint64_t v38 = a1[19];
    if (v38) {
      heap_Free(*(void **)(*a1 + 8), v38);
    }
    uint64_t v55 = 0;
    a1[19] = 0;
    *((_WORD *)a1 + 80) = 0;
    uint64_t v39 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, char **, unsigned __int16 *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "statpuncorthmap", &v55, &__s1, &v54);
    if ((v39 & 0x80000000) != 0 || !(_WORD)__s1) {
      return v39;
    }
    uint64_t v40 = heap_Alloc(*(void *)(*a1 + 8), (unint64_t)(unsigned __int16)__s1 << 9);
    a1[19] = v40;
    if (v40)
    {
      if ((_WORD)__s1)
      {
        unint64_t v41 = 0;
        do
        {
          uint64_t v42 = strchr((char *)v55[v41], 124);
          if (v42)
          {
            *uint64_t v42 = 0;
            uint64_t v43 = v42 + 1;
            __strcpy_chk();
            unsigned __int16 v44 = strchr(v43, 124);
            if (v44)
            {
              *unsigned __int16 v44 = 0;
              strcpy((char *)(a1[19] + ((unint64_t)*((unsigned __int16 *)a1 + 80) << 9) + 256), v43);
              ++*((_WORD *)a1 + 80);
            }
          }
          ++v41;
        }
        while (v41 < (unsigned __int16)__s1);
      }
      return v39;
    }
LABEL_63:
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 34000, 0, v25, v26, v27, v28, v46);
    return v1;
  }
  return IGTree;
}

uint64_t fe_puncsptn_ObjClose(uint64_t *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62339, 168);
  if ((result & 0x80000000) != 0) {
    return 2311069704;
  }
  if (!a1) {
    return result;
  }
  uint64_t v10 = a1[13];
  if (v10) {
    heap_Free(*(void **)(*a1 + 8), v10);
  }
  a1[13] = 0;
  uint64_t v11 = a1[10];
  if (v11) {
    heap_Free(*(void **)(*a1 + 8), v11);
  }
  a1[10] = 0;
  uint64_t v12 = a1[11];
  if (v12) {
    heap_Free(*(void **)(*a1 + 8), v12);
  }
  a1[11] = 0;
  uint64_t v13 = a1[12];
  if (v13) {
    heap_Free(*(void **)(*a1 + 8), v13);
  }
  a1[12] = 0;
  uint64_t v14 = a1[16];
  if (v14) {
    heap_Free(*(void **)(*a1 + 8), v14);
  }
  a1[16] = 0;
  uint64_t v15 = a1[17];
  if (*((_WORD *)a1 + 72))
  {
    unint64_t v16 = 0;
    uint64_t v17 = 8;
    do
    {
      statpunc_freeIGTree(*a1, *(void *)(v15 + v17), v4, v5, v6, v7, v8, v9);
      uint64_t v15 = a1[17];
      *(void *)(v15 + v17) = 0;
      ++v16;
      v17 += 48;
    }
    while (v16 < *((unsigned __int16 *)a1 + 72));
    goto LABEL_19;
  }
  if (v15)
  {
LABEL_19:
    heap_Free(*(void **)(*a1 + 8), v15);
    a1[17] = 0;
  }
  uint64_t v18 = a1[19];
  if (v18)
  {
    heap_Free(*(void **)(*a1 + 8), v18);
    a1[19] = 0;
  }
  objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"LINGDB");
  objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DEPES");
  objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
  heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
  return 0;
}

uint64_t fe_puncsptn_ObjReopen(void *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 168) & 0x80000000) != 0) {
    return 2311069704;
  }
  return hlp_open(a1);
}

uint64_t fe_puncsptn_ProcessStart(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62339, 168);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2311069704;
  }
}

uint64_t fe_puncsptn_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned __int16 v88 = 0;
  unsigned __int16 v87 = 0;
  int __s1 = 0;
  unsigned __int16 v83 = 0;
  __int16 v81 = 0;
  if ((safeh_HandleCheck(a1, a2, 62339, 168) & 0x80000000) != 0) {
    return 2311069704;
  }
  unsigned __int16 v93 = 0;
  int v92 = 0;
  unsigned __int16 v91 = 0;
  __int16 v90 = 0;
  unsigned __int16 v89 = 0;
  int v86 = 0;
  uint64_t v84 = 0;
  int v82 = 0;
  *a5 = 1;
  uint64_t v9 = *(void *)(a1 + 24);
  LOWORD(v80) = 0;
  int v95 = 0;
  __int16 v94 = 0;
  *(_DWORD *)__src = 0;
  uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(v9 + 104))(a3, a4, 1, 0, (char *)&v95 + 2);
  if ((updated & 0x80000000) != 0) {
    return updated;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(v9 + 184))(a3, a4, HIWORD(v95), 0, &v94);
  if ((v11 & 0x80000000) == 0 && v94 == 1)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v9 + 104))(a3, a4, 3, HIWORD(v95), &v95);
    if ((v11 & 0x80000000) == 0)
    {
      unsigned __int16 v12 = v95;
      if ((_WORD)v95)
      {
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned __int16 *, int *))(v9 + 168))(a3, a4, v12, 0, 1, __src, &v80);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          if (*(_DWORD *)__src > 3u)
          {
            uint64_t v14 = (unsigned __int16)v95;
          }
          else
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void))(v9 + 192))(a3, a4, (unsigned __int16)v95);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            LOWORD(v95) = v13;
            uint64_t v14 = v13;
          }
          if ((_WORD)v14)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(v9 + 120))(a3, a4, (unsigned __int16)v14, &v95);
            uint64_t v13 = v14;
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
          }
          else
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v9 + 104))(a3, a4, 3, HIWORD(v95), &v95);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
          }
          unsigned __int16 v12 = v95;
          if (!(_WORD)v95) {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
LABEL_21:
  if (*(_WORD *)(a1 + 144))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      uint64_t updated = statpunc_Process(*(void *)a1, *(void *)(a1 + 24), a3, a4, *(void *)(a1 + 136) + v15, *(unsigned __int16 *)(a1 + 160), *(void *)(a1 + 152));
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      ++v16;
      v15 += 48;
    }
    while (v16 < *(unsigned __int16 *)(a1 + 144));
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 24) + 104))(a3, a4, 1, 0, (char *)&v92 + 2);
  if ((v11 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)(a1 + 24) + 184))(a3, a4, HIWORD(v92), 0, &v81) & 0x80000000) == 0&& v81 == 1)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, const char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(a3, a4, HIWORD(v92), 0, &v93, &v91);
    if ((v11 & 0x80000000) == 0 && v91 >= 2u)
    {
      uint64_t v17 = (const char **)(a1 + 104);
      int v18 = strlen(v93);
      uint64_t v19 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 104), (v18 + 101));
      if (!v19)
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v20, v21, v22, v23, v77);
        return 2311069706;
      }
      *(void *)(a1 + 104) = v19;
      strcpy(v19, v93);
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(a3, a4, HIWORD(v92), 1, &v84, &v83);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      uint64_t v24 = (int *)(v84 + 12);
      int v25 = *(_DWORD *)(v84 + 12);
      *(_WORD *)(a1 + 112) = 0;
      unsigned int v26 = v83;
      if (v83)
      {
        uint64_t v27 = 0;
        while (1)
        {
          int v28 = *v24;
          v24 += 8;
          if (v28 != v25) {
            break;
          }
          if (v83 == ++v27) {
            goto LABEL_39;
          }
        }
        unsigned int v26 = (unsigned __int16)v27;
      }
LABEL_39:
      HIWORD(v95) = v26;
      uint64_t updated = (*(uint64_t (**)(void, void, int *, void))(*(void *)(a1 + 48) + 112))(*(void *)(a1 + 32), *(void *)(a1 + 40), &v82, 0);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      __src[0] = 0;
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 104))(a3, a4, 3, HIWORD(v92), &v92);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      unsigned __int16 v29 = v92;
      if ((_WORD)v92)
      {
        unsigned int v30 = 0;
        int v31 = 0;
        do
        {
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v29, 0, 1, &v86, &v91);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, (unsigned __int16)v92, 1, 1, &v88, &v91);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, (unsigned __int16)v92, 2, 1, &v87, &v91);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          if (v86 == 5)
          {
            if (v88 <= v30 || (unsigned int v32 = __src[0], v88 >= __src[0]))
            {
              uint64_t v36 = 0;
              int v31 = (unsigned __int16)v92;
            }
            else
            {
              int v33 = v31;
              unsigned int v34 = v87;
              int v78 = v33;
              uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 24) + 160))(a3, a4, (unsigned __int16)v33, 2, 1, __src, &v90);
              uint64_t v11 = v35;
              if (v34 > v32)
              {
                if ((v35 & 0x80000000) != 0) {
                  return v11;
                }
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 24) + 160))(a3, a4, (unsigned __int16)v92, 1, 1, __src, &v90);
                int v31 = v78;
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
LABEL_56:
                uint64_t v36 = 0;
                goto LABEL_57;
              }
              if ((v35 & 0x80000000) != 0) {
                return v11;
              }
              uint64_t v36 = (unsigned __int16)v92;
              int v31 = v78;
            }
          }
          else
          {
            if ((v86 & 0xFFFFFFFD) != 4) {
              goto LABEL_56;
            }
            uint64_t v36 = 0;
            unsigned int v30 = v88;
            __src[0] = v87;
          }
LABEL_57:
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(a3, a4, (unsigned __int16)v92, &v92);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          if (v36)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 24) + 192))(a3, a4, v36);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
          }
          unsigned __int16 v29 = v92;
        }
        while ((_WORD)v92);
      }
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 104))(a3, a4, 3, HIWORD(v92), &v92);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      unsigned __int16 v89 = v92;
      unsigned __int16 v37 = v92;
      if (!(_WORD)v92) {
        goto LABEL_81;
      }
      while (1)
      {
        uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v37, 0, 1, &v86, &v91);
        if ((updated & 0x80000000) != 0) {
          return updated;
        }
        uint64_t v38 = *(void *)(a1 + 24);
        if (v86 == 5)
        {
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(v38 + 168))(a3, a4, v89, 1, 1, &v88, &v91);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v89, 2, 1, &v87, &v91);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(a3, a4, v89, 4, &__s1, &v91);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          if (v87 >= v88)
          {
            uint64_t updated = hlp_Normalize(a1, (const char **)(a1 + 104), v93, v88, v87, __s1, a3, a4, (unsigned __int16 *)&v92, v84, (_WORD *)&v95 + 1, &v83, v25);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            unsigned __int16 v89 = v92;
            goto LABEL_78;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24)
                                                                                            + 120))(a3, a4, v89, &v89);
        }
        else
        {
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(v38 + 120))(a3, a4, v89, &v89);
        }
        if ((updated & 0x80000000) != 0) {
          return updated;
        }
LABEL_78:
        if ((_WORD)v92)
        {
          unsigned __int16 v37 = v89;
          if (v89) {
            continue;
          }
        }
        unsigned int v26 = HIWORD(v95);
LABEL_81:
        unsigned __int16 v39 = v83;
        if (v26 < v83)
        {
          int v40 = v25 + strlen(*v17);
          unint64_t v41 = (_DWORD *)(v84 + 32 * v26 + 12);
          uint64_t v42 = v83 - (unint64_t)v26;
          do
          {
            *unint64_t v41 = v40;
            v41 += 8;
            --v42;
          }
          while (v42);
          LOWORD(v26) = v39;
        }
        HIWORD(v95) = v26;
        uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 104))(a3, a4, 3, HIWORD(v92), &v92);
        if ((updated & 0x80000000) == 0)
        {
          for (unsigned __int16 i = v92; (_WORD)v92; unsigned __int16 i = v92)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, i, 0, 1, &v86, &v91);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            uint64_t v44 = (unsigned __int16)v92;
            if (v86 != 5)
            {
LABEL_126:
              uint64_t v58 = 0;
              goto LABEL_127;
            }
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, (unsigned __int16)v92, 1, 1, &v88, &v91);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, (unsigned __int16)v92, 2, 1, &v87, &v91);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            unsigned int v45 = v88;
            if (v88)
            {
              unsigned int v46 = *v17;
              if (v88 < (unsigned __int16)strlen(*v17))
              {
                unsigned int v47 = v88 - 1;
                do
                {
                  int v48 = v46[v47];
                  if (v48 == 32) {
                    break;
                  }
                  if (v48 == 95) {
                    break;
                  }
                  unsigned __int16 v88 = ++v45;
                  ++v47;
                }
                while (v45 < (unsigned __int16)strlen(v46));
              }
            }
            unsigned int v49 = v87;
            if (v87)
            {
              uint64_t v50 = *v17;
              if (v87 < (unsigned __int16)strlen(*v17))
              {
                unsigned int v51 = v87 - 1;
                do
                {
                  int v52 = v50[v51];
                  if (v52 == 32) {
                    break;
                  }
                  if (v52 == 95) {
                    break;
                  }
                  unsigned __int16 v87 = ++v49;
                  ++v51;
                }
                while (v49 < (unsigned __int16)strlen(v50));
              }
              if (v49 < (unsigned __int16)strlen(v50)
                && (*(unsigned int (**)(void, void, const char *))(*(void *)(a1 + 72) + 128))(*(void *)(a1 + 56), *(void *)(a1 + 64), &v50[v49]))
              {
                unsigned __int16 v53 = v87;
                LOWORD(v95) = 0;
                int v80 = 0;
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(a3, a4, (unsigned __int16)v92, &v95);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
                if (!(_WORD)v95)
                {
                  int v80 = 2;
LABEL_115:
                  unsigned int v54 = strlen(*v17);
                  unsigned int Utf8Symbol = utf8_GetUtf8Symbol(*v17, v87, v54, (char *)__src);
                  do
                    unsigned __int16 v56 = v53--;
                  while (v53 && (*v17)[v53] == 32);
                  if (v87 > v56)
                  {
                    size_t v57 = Utf8Symbol;
                    memmove((void *)&(*v17)[v56 + Utf8Symbol], &(*v17)[v56], v87 - (unint64_t)v56);
                    strncpy((char *)&(*v17)[v56], (const char *)__src, v57);
                  }
                  goto LABEL_120;
                }
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 168))(a3, a4);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
                if (v80 != 5) {
                  goto LABEL_115;
                }
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(a3, a4, (unsigned __int16)v95, 4, &__s1, &v91);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
                if (v80 != 5 || !__s1 || strcmp(__s1, "phon")) {
                  goto LABEL_115;
                }
              }
            }
LABEL_120:
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 24) + 160))(a3, a4, (unsigned __int16)v92, 1, 1, &v88, &v90);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 24) + 160))(a3, a4, (unsigned __int16)v92, 2, 1, &v87, &v90);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            uint64_t v44 = (unsigned __int16)v92;
            if (v86 != 5) {
              goto LABEL_126;
            }
            if (v88 == v87) {
              uint64_t v58 = (unsigned __int16)v92;
            }
            else {
              uint64_t v58 = 0;
            }
LABEL_127:
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)(a1 + 24) + 120))(a3, a4, v44, &v92);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            if (v58)
            {
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 24) + 192))(a3, a4, v58);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
            }
          }
          if (*(_DWORD *)(a1 + 116) != 1
            || (uint64_t updated = updateTokenDomainLanguageTags((void *)a1, a3, a4, HIWORD(v92), *(const char **)(a1 + 104)),
                (updated & 0x80000000) == 0))
          {
            hlp_AdjustMarkersToWordBoundaries(*(void *)(a1 + 104), v84, v83);
            hlp_AdjustUserTnToWordBoundaries(*(const char **)(a1 + 104), a3, a4, *(void *)(a1 + 24));
            uint64_t v59 = *(const char **)(a1 + 104);
            if ((unsigned __int16)strlen(v59))
            {
              __int16 v60 = 0;
              int v61 = 1;
              unsigned __int16 v62 = 1;
              while (1)
              {
                uint64_t v63 = v61 - 1;
                int v64 = v59[v63];
                if (v64 == 44)
                {
                  if (v59[v62] == 44)
                  {
                    v59[v62] = 32;
                    uint64_t v59 = *v17;
                    int v64 = (*v17)[v63];
                  }
                  else
                  {
                    int v64 = 44;
                  }
                }
                if (memchr(" _", (char)v64, 3uLL)
                  && (v62 == 1 || v62 == (unsigned __int16)strlen(v59) || memchr(" _", v59[v62], 3uLL)))
                {
                  if (v62 != (unsigned __int16)strlen(v59))
                  {
                    if (v64 == 32 && v59[v62] == 95)
                    {
                      v59[v62] = 32;
                      uint64_t v59 = *v17;
                    }
                    size_t v65 = strlen(v59);
                    memmove((void *)&v59[v62 - 1], &v59[v62], v65 - v62);
                    uint64_t v59 = *v17;
                  }
                  v59[strlen(v59) - 1] = 0;
                  uint64_t updated = hlp_UpdateLingDBTokensForDeletion(a3, a4, *(void *)(a1 + 24), (unsigned __int16)v63);
                  if ((updated & 0x80000000) != 0) {
                    return updated;
                  }
                  hlp_UpdateMarkersForDeletion(v84, v83, (unsigned __int16)v63);
                  --v60;
                  uint64_t v59 = *v17;
                }
                else
                {
                  ++v62;
                }
                int v61 = v62;
                if (v62 > (unsigned __int16)strlen(v59)) {
                  goto LABEL_154;
                }
              }
            }
            __int16 v60 = 0;
LABEL_154:
            __int16 v66 = *(_WORD *)(a1 + 112) + v60;
            *(_WORD *)(a1 + 112) = v66;
            v82 += v66;
            uint64_t updated = (*(uint64_t (**)(void, void))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 32), *(void *)(a1 + 40));
            if ((updated & 0x80000000) == 0)
            {
              uint64_t v67 = *(const char **)(a1 + 104);
              *(_DWORD *)(v84 + 16) = strlen(v67);
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Space normalization: |%s|", v68, v69, v70, (uint64_t)v67);
              hlp_AdjustPuncMarkers(*(const char **)(a1 + 104), v84, v83);
              __int16 v71 = strlen(*(const char **)(a1 + 104));
              uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, __int16 *))(*(void *)(a1 + 24) + 160))(a3, a4, HIWORD(v92), 0, (unsigned __int16)(v71 + 1), *(void *)(a1 + 104), &v90);
              if ((v11 & 0x80000000) == 0)
              {
                __int16 v81 = 0;
                if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __int16 *))(*(void *)(a1 + 24)
                                                                                              + 152))(a3, a4, 3, HIWORD(v92), &v81) & 0x80000000) == 0)
                {
                  if (v81)
                  {
                    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24)
                                                                                              + 104))(a3, a4, 3, HIWORD(v92), &v92);
                    if ((v11 & 0x80000000) == 0)
                    {
                      unsigned __int16 v72 = v92;
                      if ((_WORD)v92)
                      {
                        uint64_t v73 = 0;
                        while (1)
                        {
                          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v72, 0, 1, &v86, &v91);
                          if ((updated & 0x80000000) != 0) {
                            break;
                          }
                          if (v86 == 4)
                          {
                            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 24) + 192))(a3, a4, (unsigned __int16)v92);
                            if ((updated & 0x80000000) != 0) {
                              return updated;
                            }
                            LOWORD(v92) = v73;
                            uint64_t v74 = v73;
                          }
                          else
                          {
                            uint64_t v74 = (unsigned __int16)v92;
                          }
                          uint64_t v75 = *(void *)(a1 + 24);
                          if ((_WORD)v74)
                          {
                            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(v75 + 120))(a3, a4, (unsigned __int16)v74, &v92);
                            uint64_t v73 = v74;
                            if ((v11 & 0x80000000) != 0) {
                              return v11;
                            }
                          }
                          else
                          {
                            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v75 + 104))(a3, a4, 3, HIWORD(v92), &v92);
                            if ((v11 & 0x80000000) != 0) {
                              return v11;
                            }
                          }
                          unsigned __int16 v72 = v92;
                          if (!(_WORD)v92) {
                            return v11;
                          }
                        }
                        return updated;
                      }
                    }
                  }
                }
              }
              return v11;
            }
          }
        }
        return updated;
      }
    }
  }
  return v11;
}

uint64_t hlp_Normalize(uint64_t a1, const char **a2, const char *a3, unsigned int a4, unsigned int a5, char *a6, uint64_t a7, uint64_t a8, unsigned __int16 *a9, uint64_t a10, _WORD *a11, unsigned __int16 *a12, int a13)
{
  unsigned int v16 = a4;
  uint64_t v246 = *MEMORY[0x263EF8340];
  unsigned __int16 v244 = 0;
  unsigned __int16 v243 = a4;
  unsigned __int16 v242 = a4;
  int v240 = 0;
  unsigned __int16 v236 = 0;
  unsigned __int16 v235 = *a9;
  unsigned __int16 v234 = a4;
  unsigned __int16 v19 = strlen(*a2);
  uint64_t v232 = 0;
  int v230 = 0;
  int v231 = 0;
  int v229 = 0;
  strcpy(__s, "disambiguate_punctuation");
  unsigned __int16 v224 = strlen(__s);
  uint64_t v20 = (int)(a5 - v16 + 129);
  uint64_t v21 = (unsigned char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 80), v20);
  if (!v21) {
    goto LABEL_106;
  }
  *(void *)(a1 + 80) = v21;
  *uint64_t v21 = 0;
  unsigned int v26 = (unsigned char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), v20);
  if (!v26) {
    goto LABEL_106;
  }
  *(void *)(a1 + 88) = v26;
  *unsigned int v26 = 0;
  uint64_t v27 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 96), v20);
  if (!v27) {
    goto LABEL_106;
  }
  uint64_t v220 = a2;
  int __s1 = a6;
  uint64_t v226 = a7;
  unsigned __int16 v219 = v19;
  uint64_t v28 = 0;
  unsigned __int8 v241 = 0;
  uint64_t v238 = 0;
  unsigned int v239 = 0;
  uint64_t v237 = 0;
  int v233 = 0;
  *(void *)(a1 + 96) = v27;
  unsigned __int8 v223 = 1;
  unsigned __int16 v29 = *a9;
  if (*a9)
  {
    unsigned __int16 v30 = v16;
    LOWORD(v222) = 0;
    int v31 = 0;
    if (a5 > v16)
    {
      int v31 = 0;
      int v222 = 0;
      uint64_t v218 = (unsigned __int16)(a5 - v16) + 1;
      unsigned __int8 v223 = 1;
      unsigned __int16 v30 = v16;
      do
      {
        uint64_t v32 = a8;
        uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v226, a8, v29, 0, 1, &v240, &v244);
        if ((v33 & 0x80000000) != 0) {
          return v33;
        }
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v226, a8, *a9, 1, 1, &v243, &v244);
        if ((v28 & 0x80000000) != 0) {
          return v28;
        }
        unsigned int v34 = v243;
        if (v243 < a5 && (v240 & 0xFFFFFFFD) == 4)
        {
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v226, a8, *a9, 2, 1, &v242, &v244);
          if (v240 == 6)
          {
            uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(v226, a8, *a9, 4, &v241, &v244);
            uint64_t v35 = v226;
            if ((v33 & 0x80000000) != 0) {
              return v33;
            }
          }
          else
          {
            unsigned __int8 v241 = "_DT_";
            uint64_t v35 = v226;
          }
          uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(v35, a8, *a9, 3, &v233, &v244);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          unsigned int v216 = a5;
          uint64_t v36 = v233;
          uint64_t v37 = v242;
          int v31 = v31 + strlen(v233) - v242 + v243;
          while (1)
          {
            uint64_t v38 = strstr(v36, "â–²");
            if (!v38) {
              break;
            }
            if (!v38[3]) {
              goto LABEL_244;
            }
            int v43 = v31 - 3;
            uint64_t v36 = v38 + 6;
            while (strncmp(v36 - 3, "â–¼", 3uLL))
            {
              --v43;
              int v44 = *(v36 - 2);
              ++v36;
              if (!v44) {
                goto LABEL_244;
              }
            }
            int v31 = v43 - 3;
            int v233 = v36;
          }
          strncat(*(char **)(a1 + 80), &(*a2)[v30 + *(__int16 *)(a1 + 112)], v37 - v30);
          if (v243 > v30)
          {
            for (int i = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)&(*a2)[v30 + *(__int16 *)(a1 + 112)], v243 - v30); i; --i)
              *(_WORD *)(*(void *)(a1 + 88) + strlen(*(const char **)(a1 + 88))) = 32;
          }
          unsigned __int16 v46 = Utf8_LengthInUtf8chars((unint64_t)&(*a2)[v243 + *(__int16 *)(a1 + 112)], v242 - v243);
          size_t v47 = strlen(v241);
          if ((__int16)v46 >= (__int16)(2 * v47 - 2))
          {
            *(_WORD *)(*(void *)(a1 + 88) + strlen(*(const char **)(a1 + 88))) = 88;
            size_t v50 = strlen(v241);
            strncat(*(char **)(a1 + 88), v241 + 1, v50 - 2);
            uint64_t v51 = v46 + 2;
            if (v51 != 2 * strlen(v241))
            {
              int v52 = 0;
              do
              {
                *(_WORD *)(*(void *)(a1 + 88) + strlen(*(const char **)(a1 + 88))) = 126;
                ++v52;
              }
              while (v51 - 2 * strlen(v241) > (unsigned __int16)v52);
            }
          }
          else
          {
            uint64_t v48 = -2 - v46;
            if (v48 + 2 * v47)
            {
              int v53 = 0;
              int v49 = v222;
              while (1)
              {
                unsigned __int8 v54 = v223;
                int v55 = v49;
                if (v223 << 7 == (unsigned __int16)v49)
                {
                  ++v223;
                  uint64_t v56 = v218 + ((unint64_t)(v54 + 1) << 7);
                  uint64_t v57 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 80), v56);
                  if (!v57) {
                    goto LABEL_106;
                  }
                  *(void *)(a1 + 80) = v57;
                  uint64_t v58 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), v56);
                  if (!v58) {
                    goto LABEL_106;
                  }
                  *(void *)(a1 + 88) = v58;
                  uint64_t v59 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 96), v56);
                  if (!v59) {
                    goto LABEL_106;
                  }
                  *(void *)(a1 + 96) = v59;
                }
                *(_WORD *)(*(void *)(a1 + 80) + strlen(*(const char **)(a1 + 80))) = 126;
                ++v53;
                int v49 = v55 + 1;
                if (v48 + 2 * strlen(v241) <= (unsigned __int16)v53) {
                  goto LABEL_47;
                }
              }
            }
            int v49 = v222;
LABEL_47:
            int v222 = v49;
            *(_WORD *)(*(void *)(a1 + 88) + strlen(*(const char **)(a1 + 88))) = 88;
            size_t v60 = strlen(v241);
            strncat(*(char **)(a1 + 88), v241 + 1, v60 - 2);
          }
          *(_WORD *)(*(void *)(a1 + 88) + strlen(*(const char **)(a1 + 88))) = 89;
          size_t v61 = strlen(v241);
          strncat(*(char **)(a1 + 88), v241 + 1, v61 - 2);
          unsigned __int16 v30 = v242;
          unsigned __int16 v234 = v242;
          unsigned int v34 = v243;
          a5 = v216;
          uint64_t v32 = a8;
        }
        if (v34 < a5)
        {
          uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24) + 120))(v226, v32, *a9, a9);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          unsigned int v34 = v243;
        }
        unsigned __int16 v29 = *a9;
      }
      while (*a9 && v34 < a5);
    }
  }
  else
  {
    unsigned __int16 v30 = v16;
    LOWORD(v222) = 0;
    int v31 = 0;
  }
  if (a5 > v30)
  {
    strncat(*(char **)(a1 + 80), &(*a2)[v30 + *(__int16 *)(a1 + 112)], (int)(a5 - v30));
    for (int j = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)&(*a2)[v30 + *(__int16 *)(a1 + 112)], a5 - v30);
          j;
          --j)
    {
      *(_WORD *)(*(void *)(a1 + 88) + strlen(*(const char **)(a1 + 88))) = 32;
    }
  }
  if (strstr(__s1, "spell"))
  {
    int v63 = (unsigned __int16)strlen(*(const char **)(a1 + 80));
    if (v63)
    {
      do
      {
        uint64_t v64 = *(void *)(a1 + 80);
        uint64_t v65 = (v63 - 1);
        if (*(unsigned char *)(v64 + v65) != 32) {
          break;
        }
        *(unsigned char *)(v64 + v65) = 0;
        *(unsigned char *)(*(void *)(a1 + 88) + (unsigned __int16)Utf8_LengthInUtf8chars(*(void *)(a1 + 80), v65)) = 0;
        --v31;
        int v63 = (unsigned __int16)v65;
      }
      while ((_WORD)v65);
    }
  }
  if (v223 << 7 < (unsigned __int16)v222) {
    goto LABEL_58;
  }
  int v68 = strlen(*(const char **)(a1 + 80));
  unsigned __int16 v69 = Utf8_LengthInUtf8chars(*(void *)(a1 + 80), v68);
  unsigned __int16 v70 = v69;
  if (v69)
  {
    uint64_t v71 = 0;
    do
      *(unsigned char *)(*(void *)(a1 + 96) + v71++) = 1;
    while (v69 != v71);
  }
  unsigned __int16 v72 = *(char **)(a1 + 88);
  unsigned __int16 v73 = strlen(v72);
  uint64_t v74 = v73;
  if (v73)
  {
    __int16 v75 = 0;
    __int16 v76 = 0;
    unsigned int v77 = *(unsigned __int8 **)(a1 + 88);
    do
    {
      int v79 = *v77++;
      int v78 = v79;
      if (v79 == 88) {
        ++v76;
      }
      if (v78 == 89) {
        ++v75;
      }
      --v74;
    }
    while (v74);
  }
  else
  {
    unsigned __int16 v73 = 0;
    __int16 v76 = 0;
    __int16 v75 = 0;
  }
  unsigned __int16 v234 = v73;
  if (*(_DWORD *)(a1 + 124))
  {
    if (!v16 && *v72 == 32) {
      char *v72 = 40;
    }
    if (a5 == (unsigned __int16)strlen(a3))
    {
      int v80 = *(const char **)(a1 + 88);
      uint64_t v81 = (unsigned __int16)strlen(v80) - 1;
      if (v80[v81] == 32) {
        v80[v81] = 41;
      }
    }
  }
  if (!strcmp(__s1, "internal-nuance-system-norm")
    || !strcmp(__s1, "phon")
    || *(_DWORD *)(a1 + 120) && strcmp(__s1, "spell") && !ToNorm(*(unsigned __int8 **)(a1 + 80)))
  {
    uint64_t v85 = *(char **)(a1 + 80);
    uint64_t v238 = *(char **)(a1 + 88);
    unsigned int v239 = v85;
    uint64_t v237 = *(unsigned __int8 **)(a1 + 96);
    goto LABEL_85;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s L1: %s", v82, v83, v84, (uint64_t)__s);
  unsigned __int16 v182 = strlen(*(const char **)(a1 + 80));
  uint64_t v33 = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 48) + 120))(*(void *)(a1 + 32), *(void *)(a1 + 40), 0, *(void *)(a1 + 80), v182);
  if ((v33 & 0x80000000) != 0) {
    return v33;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s L2: %s", v183, v184, v185, (uint64_t)__s);
  unsigned __int16 v186 = strlen(*(const char **)(a1 + 88));
  uint64_t v33 = (*(uint64_t (**)(void, void, uint64_t, void, void))(*(void *)(a1 + 48) + 120))(*(void *)(a1 + 32), *(void *)(a1 + 40), 1, *(void *)(a1 + 88), v186);
  if ((v33 & 0x80000000) != 0) {
    return v33;
  }
  uint64_t v33 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 88))(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 96), v70);
  if ((v33 & 0x80000000) != 0) {
    return v33;
  }
  if (strcmp(__s1, "normal") && strlen(__s1) + v224 + 2 <= 0x7F)
  {
    __strcat_chk();
    __strcat_chk();
  }
  if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 48) + 80))(*(void *)(a1 + 32), *(void *)(a1 + 40), __s) & 0x80000000) != 0)
  {
    __s[v224] = 0;
    uint64_t v33 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 48) + 80))(*(void *)(a1 + 32), *(void *)(a1 + 40), __s);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
  }
  uint64_t v33 = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 48) + 128))(*(void *)(a1 + 32), *(void *)(a1 + 40), 0, &v239, &v236);
  if ((v33 & 0x80000000) != 0) {
    return v33;
  }
  if (strstr(__s1, "spell"))
  {
    uint64_t v190 = v236++;
    v239[v190] = 32;
  }
  v239[v236] = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s O1: %s", v187, v188, v189, (uint64_t)__s);
  uint64_t v33 = (*(uint64_t (**)(void, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 48) + 128))(*(void *)(a1 + 32), *(void *)(a1 + 40), 1, &v238, &v236);
  if ((v33 & 0x80000000) != 0) {
    return v33;
  }
  if (strstr(__s1, "spell"))
  {
    uint64_t v191 = v236++;
    v238[v191] = 32;
  }
  v238[v236] = 0;
  int v192 = strlen(v239);
  __int16 v193 = Utf8_LengthInUtf8chars((unint64_t)v239, v192);
  int v194 = strlen(v238);
  __int16 v195 = Utf8_LengthInUtf8chars((unint64_t)v238, v194) ^ v193;
  uint64_t v66 = *(void *)(*(void *)a1 + 32);
  if (v195)
  {
    uint64_t v28 = 2311069696;
    goto LABEL_59;
  }
  log_OutText(v66, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s O2: %s", v40, v41, v42, (uint64_t)__s);
  unsigned __int16 v197 = strlen(v238);
  if (v197)
  {
    __int16 v198 = 0;
    uint64_t v199 = v197;
    int v200 = v238;
    do
    {
      int v201 = *v200++;
      if (v201 == 88) {
        ++v198;
      }
      --v199;
    }
    while (v199);
    unsigned __int16 v234 = v197;
    if (v198 != v76) {
      goto LABEL_58;
    }
    uint64_t v202 = 0;
    __int16 v203 = 0;
    do
    {
      if (v238[v202] == 89) {
        ++v203;
      }
      ++v202;
    }
    while (v197 != v202);
  }
  else
  {
    if (v76)
    {
LABEL_58:
      uint64_t v28 = 2311069696;
      uint64_t v66 = *(void *)(*(void *)a1 + 32);
LABEL_59:
      uint64_t v67 = 33002;
      goto LABEL_245;
    }
    LOWORD(v202) = 0;
    __int16 v203 = 0;
  }
  unsigned __int16 v234 = v202;
  if (v203 != v75) {
    goto LABEL_58;
  }
  uint64_t v28 = (*(uint64_t (**)(void, void, unsigned __int8 **, unsigned __int16 *))(*(void *)(a1 + 48) + 96))(*(void *)(a1 + 32), *(void *)(a1 + 40), &v237, &v236);
  if ((v28 & 0x80000000) != 0) {
    return v28;
  }
  if (strstr(__s1, "spell"))
  {
    uint64_t v204 = v236++;
    v237[v204] = 0;
  }
LABEL_85:
  int v86 = *(const char **)(a1 + 80);
  if (*v86 != 32)
  {
    uint64_t v87 = 0;
    int v88 = 0;
    while (v239[v87] == 32)
    {
      uint64_t v87 = ++v88;
      if (v86[v88] == 32) {
        goto LABEL_91;
      }
    }
    LODWORD(v87) = v88;
LABEL_91:
    if (v87)
    {
      unint64_t v89 = *a12;
      if (v89 >= 2)
      {
        unsigned int v90 = *(_DWORD *)(a10 + 12) + v16 + *(__int16 *)(a1 + 112);
        unsigned int v91 = v90 + v87;
        int v92 = (unsigned int *)(a10 + 44);
        unint64_t v93 = v89 - 1;
        do
        {
          BOOL v94 = v90 > *v92 || *v92 >= v91;
          if (!v94) {
            *int v92 = v91;
          }
          v92 += 8;
          --v93;
        }
        while (v93);
      }
    }
  }
  int v95 = v31 + strlen(v239);
  int v96 = (__int16)(v95 - strlen(v86));
  if (v96 <= 0)
  {
    if (v96 < 0)
    {
      for (unsigned __int16 k = *(_WORD *)(a1 + 112) + a5; k <= (unsigned __int16)strlen(*v220); ++k)
        (*v220)[k + v96] = (*v220)[k];
    }
    goto LABEL_109;
  }
  uint64_t v97 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)*v220, (unsigned __int16)(v219 + v96 + 101));
  if (!v97)
  {
LABEL_106:
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v22, v23, v24, v25, v205);
    return 2311069706;
  }
  char *v220 = (const char *)v97;
  bzero((void *)(v97 + v219), (unsigned __int16)(v96 + 101));
  int v98 = strlen(*v220);
  if ((int)(*(__int16 *)(a1 + 112) + a5) <= (unsigned __int16)v98)
  {
    unsigned int v99 = (unsigned __int16)v98;
    do
    {
      (*v220)[v99 + (unint64_t)v96] = (*v220)[(unsigned __int16)v98--];
      unsigned int v99 = (unsigned __int16)v98;
    }
    while ((int)(*(__int16 *)(a1 + 112) + a5) <= (unsigned __int16)v98);
  }
LABEL_109:
  unsigned int v101 = 0;
  uint64_t v102 = 0;
  unsigned __int16 v243 = v16;
  unsigned __int16 v234 = 0;
  LOWORD(v229) = 0;
  unsigned __int16 v103 = *(_WORD *)(a1 + 112) + v16;
  unsigned __int16 v104 = v235;
  if (!v235 || a5 <= v16)
  {
    LOWORD(v214) = 0;
    LODWORD(v105) = 0;
    goto LABEL_247;
  }
  int v211 = *(unsigned __int16 *)(a1 + 112) + v16;
  uint64_t v105 = 0;
  int v214 = 0;
  uint64_t v208 = a10 + 12;
  uint64_t v106 = a8;
  int v107 = v220;
  while (1)
  {
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v226, v106, v104, 0, 1, &v240, &v244);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
    if (v240 != 7)
    {
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v226, v106, v235, 1, 1, &v243, &v244);
      if ((v33 & 0x80000000) != 0) {
        return v33;
      }
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v226, v106, v235, 2, 1, &v242, &v244);
      if ((v33 & 0x80000000) != 0) {
        return v33;
      }
    }
    if (v243 >= a5) {
      goto LABEL_240;
    }
    if ((v240 & 0xFFFFFFFD) == 4) {
      break;
    }
    if (v240 == 5)
    {
      __int16 v111 = *(_WORD *)(a1 + 112);
      HIWORD(v231) = v111 + v243;
      LOWORD(v231) = v111 + v96 + v242;
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 24)
                                                                                                  + 160))(v226, v106, v235, 1, 1, (char *)&v231 + 2, (char *)&v230 + 2);
      if ((v33 & 0x80000000) != 0) {
        return v33;
      }
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 24)
                                                                                                 + 160))(v226, v106, v235, 2, 1, &v231, (char *)&v230 + 2);
      if ((v33 & 0x80000000) != 0) {
        return v33;
      }
    }
LABEL_240:
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24) + 120))(v226, v106, v235, &v235);
    if ((v28 & 0x80000000) != 0) {
      return v28;
    }
    unsigned __int16 v104 = v235;
    if (!v235 || v243 >= a5)
    {
      unsigned int v101 = v234;
      uint64_t v102 = (unsigned __int16)v229;
      unsigned __int16 v103 = v211;
LABEL_247:
      int v171 = v105;
      do
        unsigned __int16 v172 = v171;
      while (v238[(unsigned __int16)v171++]);
      hlp_updateBytePositions(v172, (unsigned __int8 *)v239, v237, *(unsigned __int8 **)(a1 + 80), &v234, &v229);
      if ((int)(v234 - v101 + v103) <= v96 + v219 + 100)
      {
        memcpy((void *)&(*v220)[v103], &v239[v101], v234 - (unint64_t)v101);
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Normalizing to: |%s|", v174, v175, v176, (uint64_t)*v220);
        unsigned int v177 = (unsigned __int16)*a11;
        if (v177 < *a12)
        {
          int v178 = a13 + (unsigned __int16)v16;
          do
          {
            uint64_t v179 = a10 + 32 * (unsigned __int16)v177;
            int v181 = *(_DWORD *)(v179 + 12);
            uint64_t v180 = (_DWORD *)(v179 + 12);
            if ((int)a5 < (__int16)(v181 - a13)) {
              break;
            }
            hlp_updateMarkerPosition(*(void *)(a1 + 80) + v102, (uint64_t)&v237[(unsigned __int16)v105], (unsigned __int8 *)&v239[v101], v178, (unsigned __int16)(v172 - v105), *(__int16 *)(a1 + 112) + (__int16)v214, v180);
            LOWORD(v177) = *a11 + 1;
            *a11 = v177;
          }
          while (*a12 > (unsigned __int16)v177);
        }
        *(_WORD *)(a1 + 112) += v96;
        return v28;
      }
      goto LABEL_58;
    }
  }
  uint64_t v108 = v234;
  uint64_t v109 = (unsigned __int16)v229;
  for (uint64_t m = v105; v238[(unsigned __int16)m] && v238[(unsigned __int16)m] != 88; uint64_t m = (m + 1))
    ;
  int v210 = v96;
  unsigned int v217 = a5;
  hlp_updateBytePositions((unsigned __int16)m, (unsigned __int8 *)v239, v237, *(unsigned __int8 **)(a1 + 80), &v234, &v229);
  int v112 = v234;
  memcpy((void *)&(*v107)[(unsigned __int16)v211], &v239[v108], v234 - v108);
  unsigned int v113 = (unsigned __int16)*a11;
  if (v113 < *a12)
  {
    uint64_t v114 = (unsigned __int16)v105;
    unsigned __int16 v115 = m - v105;
    do
    {
      uint64_t v116 = a10 + 32 * (unsigned __int16)v113;
      int v118 = *(_DWORD *)(v116 + 12);
      uint64_t v117 = (_DWORD *)(v116 + 12);
      if (v243 <= (__int16)(v118 - a13)) {
        break;
      }
      hlp_updateMarkerPosition(*(void *)(a1 + 80) + v109, (uint64_t)&v237[v114], (unsigned __int8 *)&v239[v108], a13 + (unsigned __int16)v16, v115, *(__int16 *)(a1 + 112) + (__int16)v214, v117);
      LOWORD(v113) = *a11 + 1;
      *a11 = v113;
    }
    while (*a12 > (unsigned __int16)v113);
  }
  unsigned __int16 v119 = 0;
  int v209 = v112 - v108 + v211;
  int v215 = v16 + v214 + v112 - v108 - v243;
  unsigned int v16 = v242;
  while (2)
  {
    int v120 = v238[(unsigned __int16)m];
    if (v120 == 88)
    {
      unsigned __int16 v119 = m;
LABEL_136:
      uint64_t m = (m + 1);
      continue;
    }
    break;
  }
  if (v238[(unsigned __int16)m] && v120 != 89) {
    goto LABEL_136;
  }
  int v121 = 2 * (unsigned __int16)m;
  if (v120 != 89) {
    int v121 = 0;
  }
  int v122 = v121 - v119;
  uint64_t v105 = m;
  a5 = v217;
  int v107 = v220;
  uint64_t v123 = a8;
  do
  {
    if (v120 == 41 && *(_DWORD *)(a1 + 124)) {
      break;
    }
    if (!v120) {
      break;
    }
    if (v120 == 32) {
      break;
    }
    if (v120 == 126) {
      break;
    }
    if (v122 == (unsigned __int16)v105) {
      break;
    }
    uint64_t v105 = (v105 + 1);
    int v120 = v238[(unsigned __int16)v105];
  }
  while (v120 != 88);
  hlp_updateBytePositions((unsigned __int16)v105, (unsigned __int8 *)v239, v237, *(unsigned __int8 **)(a1 + 80), &v234, &v229);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24)
                                                                                                  + 176))(v226, a8, v235, 3, &v233, &v244);
  if ((v33 & 0x80000000) != 0) {
    return v33;
  }
  LOWORD(v230) = 0;
  HIWORD(v229) = 0;
  if (v240 == 6
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)(a1 + 24) + 184))(v226, a8, v235, 5, &v230) & 0x80000000) == 0&& (unsigned __int16)v230 == 1)
  {
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(*(void *)(a1 + 24) + 176))(v226, a8, v235, 5, &v232, (char *)&v229 + 2);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
  }
  uint64_t v124 = strstr(v233, "â–²");
  if (!v124)
  {
LABEL_200:
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v226, v123, v235, 0, 1, &v240, &v244);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
    LOWORD(v230) = 0;
    uint64_t v143 = v226;
    if (v240 == 6
      && ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)(a1 + 24) + 184))(v226, v123, v235, 5, &v230) & 0x80000000) == 0&& (unsigned __int16)v230 == 1)
    {
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(v226, v123, v235, 5, &v232, &v244);
      if ((v33 & 0x80000000) != 0) {
        return v33;
      }
      uint64_t v144 = v243;
      uint64_t v145 = (char *)&a3[v243];
      uint64_t v146 = strchr(v145, 32);
      LOWORD(v147) = 0;
      unsigned int v148 = (unsigned __int16)*a11;
      LODWORD(v149) = *a12;
      int v206 = v144;
      if (v146 && v244 >= 2u)
      {
        uint64_t v147 = 0;
        uint64_t v213 = v244 - 1;
        uint64_t v207 = v144 - (void)v145;
        uint64_t v150 = v232;
        int v151 = a13 + (__int16)v215 + v144;
        do
        {
          if (v148 < v149 && (uint64_t)&v146[v207] > (__int16)(*(_WORD *)(a10 + 32 * v148 + 12) - a13))
          {
            uint64_t v152 = (int *)(a10 + 44 + 32 * v148);
            unint64_t v153 = v148 + 1;
            do
            {
              *(v152 - 8) = v151 + *(__int16 *)(a1 + 112) + *(unsigned __int16 *)(v150 + 2 * v147);
              unsigned int v148 = (unsigned __int16)v153;
              *a11 = v153;
              unint64_t v149 = *a12;
              if (v153 >= v149) {
                break;
              }
              int v154 = *v152;
              v152 += 8;
              ++v153;
            }
            while ((uint64_t)&v146[v207] > (__int16)(v154 - a13));
          }
          uint64_t v155 = v146 - 1;
          do
            int v156 = *++v155;
          while (v156 == 32);
          uint64_t v146 = strchr(v155, 32);
          ++v147;
        }
        while (v146 && v147 < v213);
      }
      BOOL v94 = v148 >= v149;
      uint64_t v143 = v226;
      if (!v94)
      {
        int v157 = v242;
        uint64_t v158 = v232;
        unint64_t v159 = v148;
        uint64_t v160 = (_WORD *)(v208 + 32 * v148);
        do
        {
          if (v157 <= (__int16)(*v160 - a13)) {
            break;
          }
          *(_DWORD *)uint64_t v160 = a13
                          + (__int16)v215
                          + v206
                          + *(__int16 *)(a1 + 112)
                          + *(unsigned __int16 *)(v158 + 2 * (unsigned __int16)v147);
          v160 += 16;
          *a11 = ++v159;
        }
        while (v159 < *a12);
      }
    }
    else if (!strcmp(__s1, "prompt") || !strcmp(__s1, "internal-nuance-system-norm"))
    {
      unint64_t v165 = (unsigned __int16)*a11;
      if (v165 < *a12)
      {
        unsigned int v166 = v242;
        uint64_t v167 = (_DWORD *)(v208 + 32 * v165);
        do
        {
          if (v166 <= (unsigned __int16)(*v167 - a13)) {
            break;
          }
          *v167 += (__int16)v215 + *(__int16 *)(a1 + 112);
          v167 += 8;
          *a11 = ++v165;
        }
        while (v165 < *a12);
      }
    }
    else
    {
      unint64_t v161 = (unsigned __int16)*a11;
      if (v161 < *a12)
      {
        int v162 = v242;
        int v163 = a13 + (__int16)v215 + v243;
        uint64_t v164 = (_WORD *)(v208 + 32 * v161);
        do
        {
          if (v162 <= (__int16)(*v164 - a13)) {
            break;
          }
          *(_DWORD *)uint64_t v164 = v163 + *(__int16 *)(a1 + 112);
          v164 += 16;
          *a11 = ++v161;
        }
        while (v161 < *a12);
      }
    }
    size_t v168 = strlen(v233);
    memcpy((void *)&(*v107)[(unsigned __int16)v209], v233, v168);
    int v169 = strlen(v233);
    if (v240 == 6) {
      HIWORD(v231) = v243 + v215 + *(_WORD *)(a1 + 112);
    }
    int v211 = v209 + v169;
    int v170 = v215 + strlen(v233);
    int v214 = v170 - v242 + v243;
    int v96 = v210;
    if (v240 == 6)
    {
      LOWORD(v231) = v170 + v243 + *(_WORD *)(a1 + 112);
      uint64_t v106 = a8;
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 24)
                                                                                                  + 160))(v143, a8, v235, 1, 1, (char *)&v231 + 2, (char *)&v230 + 2);
      if ((v33 & 0x80000000) != 0) {
        return v33;
      }
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 24)
                                                                                                 + 160))(v143, a8, v235, 2, 1, &v231, (char *)&v230 + 2);
      if ((v33 & 0x80000000) != 0) {
        return v33;
      }
    }
    else
    {
      uint64_t v106 = a8;
    }
    goto LABEL_240;
  }
  uint64_t v125 = v124;
  char v212 = 0;
  while (1)
  {
    int v228 = 0;
    v125[2] = 0;
    *(_WORD *)uint64_t v125 = 0;
    if (!v125[3]) {
      break;
    }
    uint64_t v126 = 0;
    while (1)
    {
      uint64_t v127 = &v125[v126];
      if (!strncmp(&v125[v126 + 3], "â–¼", 3uLL)) {
        break;
      }
      ++v126;
      if (!v127[4]) {
        goto LABEL_244;
      }
    }
    *(_WORD *)(v127 + 3) = 0;
    v127[5] = 0;
    unsigned __int16 v128 = HIWORD(v229);
    if (HIWORD(v229))
    {
      unint64_t v129 = 0;
      uint64_t v130 = v232;
      uint64_t v131 = v125 - v233 + v126 + 3;
      do
      {
        if (v130)
        {
          uint64_t v132 = *(unsigned __int16 *)(v130 + 2 * v129);
          if (v131 < v132)
          {
            *(_WORD *)(v130 + 2 * v129) = v132 + -6 - v126;
            unsigned __int16 v128 = HIWORD(v229);
          }
        }
        ++v129;
      }
      while (v129 < v128);
    }
    LOWORD(v228) = v235;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 168))(v226, a8);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
    unsigned __int16 v133 = v228;
    if (HIWORD(v228) == v243 && (unsigned __int16)v228 != 0)
    {
      uint64_t v137 = v226;
      while (1)
      {
        unsigned __int16 v135 = v133;
        uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(v137, a8, v133, &v228);
        if ((v33 & 0x80000000) != 0) {
          return v33;
        }
        if (!(_WORD)v228) {
          goto LABEL_172;
        }
        uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 168))(v226, a8);
        if ((v33 & 0x80000000) != 0) {
          return v33;
        }
        unsigned __int16 v133 = v228;
        BOOL v138 = HIWORD(v228) != v243 || (unsigned __int16)v228 == 0;
        uint64_t v137 = v226;
        if (v138) {
          goto LABEL_173;
        }
      }
    }
    unsigned __int16 v135 = 0;
LABEL_172:
    uint64_t v137 = v226;
LABEL_173:
    LOWORD(v228) = v135;
    unsigned __int16 v136 = v135;
    if (v212)
    {
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(v137, a8, v135, &v228);
      if ((v33 & 0x80000000) != 0) {
        return v33;
      }
      unsigned __int16 v136 = v228;
      uint64_t v137 = v226;
    }
    if (v136)
    {
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v137, a8, v136, 0, 1, &v240, &v244);
      if ((v33 & 0x80000000) != 0) {
        return v33;
      }
      while ((_WORD)v228)
      {
        uint64_t v137 = v226;
        if (v240 != 7) {
          goto LABEL_194;
        }
        unsigned __int16 v135 = v228;
        uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(v226, a8, (unsigned __int16)v228, &v228);
        if ((v33 & 0x80000000) != 0) {
          return v33;
        }
        if (!(_WORD)v228) {
          break;
        }
        uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 168))(v226, a8);
        if ((v33 & 0x80000000) != 0) {
          return v33;
        }
      }
      uint64_t v137 = v226;
    }
LABEL_194:
    LOWORD(v228) = v135;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 80))(v137, a8, v135, &v228);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
    int v240 = 7;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 24)
                                                                                              + 160))(v137, a8, (unsigned __int16)v228, 0, 1, &v240, (char *)&v230 + 2);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
    HIWORD(v228) = v243 + v215 + *(_WORD *)(a1 + 112) + (_WORD)v125 - (_WORD)v233;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 24)
                                                                                                + 160))(v137, a8, (unsigned __int16)v228, 1, 1, (char *)&v228 + 2, (char *)&v230 + 2);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 24)
                                                                                                + 160))(v137, a8, (unsigned __int16)v228, 2, 1, (char *)&v228 + 2, (char *)&v230 + 2);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
    __int16 v139 = strlen(v125 + 3);
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))(*(void *)(a1 + 24)
                                                                                               + 160))(v137, a8, (unsigned __int16)v228, 4, (unsigned __int16)(v139 + 1), v125 + 3, (char *)&v230 + 2);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
    uint64_t v140 = &v233[strlen(v233)];
    uint64_t v141 = &v125[v126 + 6];
    size_t v142 = strlen(v141);
    memmove(v140, v141, v142 + 1);
    uint64_t v125 = strstr(v233, "â–²");
    char v212 = 1;
    int v107 = v220;
    uint64_t v123 = a8;
    if (!v125) {
      goto LABEL_200;
    }
  }
LABEL_244:
  uint64_t v28 = 2311069696;
  uint64_t v66 = *(void *)(*(void *)a1 + 32);
  uint64_t v67 = 33003;
LABEL_245:
  log_OutPublic(v66, (uint64_t)"FE_PUNCSPTN", v67, 0, v39, v40, v41, v42, v205);
  return v28;
}