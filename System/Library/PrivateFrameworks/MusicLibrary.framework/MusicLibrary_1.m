void sub_1B031F1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__shared_weak_count *v33;

  if (a30 < 0) {
    operator delete(__p);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, long long *a2)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    long long v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_DWORD *)(a1 + 24) = 3;
    *(unsigned char *)(a1 + 32) = 1;
    return a1;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 == -1)
  {
LABEL_9:
    *(_DWORD *)(a1 + 24) = -1;
    long long v7 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v7;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_DWORD *)(a1 + 24) = 3;
    return a1;
  }
  if (v4 != 3)
  {
    ((void (*)(char *, uint64_t))off_1F08D3BF0[v4])(&v9, a1);
    goto LABEL_9;
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F08D3BF0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>::operator=[abi:ne180100]<long long,0,long long,0ul,0>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 == -1) {
    goto LABEL_5;
  }
  if (v4)
  {
    ((void (*)(char *, uint64_t))off_1F08D3BF0[v4])(&v6, a1);
LABEL_5:
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 24) = 0;
    return a1;
  }
  *(void *)a1 = *a2;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJxfbSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJxfbSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t ML3DatabaseImportDataSource::getRowCount(ML3DatabaseImportDataSource *this)
{
  return (*((void *)this + 7) - *((void *)this + 6)) >> 4;
}

id ML3ContainerBaseDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerBaseDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  uint64_t v4 = a2;
  long long v5 = a3;
  if ([(NSString *)v4 isEqualToString:@"container"]) {
    [NSString stringWithFormat:@"%@ LEFT OUTER JOIN container ON %@.ROWID = container.container_pid", v5, v5];
  }
  else {
  char v6 = [NSString stringWithFormat:@"%@ LEFT OUTER JOIN container ON %@.ROWID = container.container_pid LEFT OUTER JOIN %@ ON %@.ROWID = %@.container_pid", v5, v5, v4, v5, v4];
  }

  return v6;
}

void sub_1B031F550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ML3ContainerBaseDatabaseImportDataSource::identityPropertyForSource(ML3ContainerBaseDatabaseImportDataSource *this, uint64_t a2)
{
  return ML3ContainerRulesIdentityPropertyForSource(a2);
}

id ML3CollectionBaseDatabaseImportDataSource::generateVTableInsertionFromClause(ML3CollectionBaseDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  uint64_t v4 = a2;
  long long v5 = a3;
  char v6 = NSString;
  BOOL v7 = [(NSString *)v4 isEqualToString:@"genre"];
  v8 = @"_pid";
  if (v7) {
    v8 = @"_id";
  }
  char v9 = [v6 stringWithFormat:@"%@ LEFT OUTER JOIN %@ ON %@.ROWID = %@.%@%@", v5, v4, v5, v4, v4, v8];

  return v9;
}

void sub_1B031F61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3DatabaseImportDataSource::setImportItems(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2 = a1 + 6;
  if (a1 + 6 != (uint64_t *)a2)
  {
    long long v5 = *a2;
    uint64_t v4 = (char *)a2[1];
    uint64_t v6 = v4 - (char *)*a2;
    unint64_t v7 = v6 >> 4;
    v8 = a1 + 8;
    char v9 = (void *)a1[6];
    if (v6 >> 4 > (unint64_t)((a1[8] - (uint64_t)v9) >> 4))
    {
      std::vector<std::shared_ptr<ML3ImportItem>>::__vdeallocate(a1 + 6);
      if (v6 < 0) {
        goto LABEL_20;
      }
      uint64_t v10 = *v8 - *v2;
      uint64_t v11 = v10 >> 3;
      if (v10 >> 3 <= v7) {
        uint64_t v11 = v6 >> 4;
      }
      unint64_t v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v11;
      if (v12 >> 60) {
LABEL_20:
      }
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v12);
      a1[6] = (uint64_t)v13;
      a1[7] = (uint64_t)v13;
      a1[8] = (uint64_t)&v13[2 * v14];
      uint64_t v15 = (uint64_t)v8;
      v16 = v5;
      goto LABEL_13;
    }
    unint64_t v17 = (a1[7] - (uint64_t)v9) >> 4;
    if (v17 < v7)
    {
      v18 = &v5[2 * v17];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *>(*a2, v18, v9);
      v13 = (void *)a1[7];
      uint64_t v15 = (uint64_t)v8;
      v16 = v18;
LABEL_13:
      a1[7] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>,std::shared_ptr<ML3ImportItem>*,std::shared_ptr<ML3ImportItem>*,std::shared_ptr<ML3ImportItem>*>(v15, v16, v4, v13);
      return;
    }
    v19 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *>(*a2, a2[1], v9);
    for (i = (void *)a1[7]; i != v19; i -= 2)
    {
      v21 = (std::__shared_weak_count *)*(i - 1);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
    a1[7] = (uint64_t)v19;
  }
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>,std::shared_ptr<ML3ImportItem>*,std::shared_ptr<ML3ImportItem>*,std::shared_ptr<ML3ImportItem>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  for (result = a4; a2 != a3; a2 += 2)
  {
    uint64_t v5 = a2[1];
    void *result = *a2;
    result[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    result += 2;
  }
  return result;
}

void std::vector<std::shared_ptr<ML3ImportItem>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<ML3ImportItem>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t (*ML3MigrationFunctionForLibraryVersion(int a1))(void *a1, void *a2)
{
  result = 0;
  if (a1 <= 1280279)
  {
    if (a1 <= 1150019)
    {
      if (a1 <= 1114939)
      {
        if (a1 <= 1046931)
        {
          if (a1 <= 1006188)
          {
            if (a1 > 1002979)
            {
              if (a1 > 1003963)
              {
                if (a1 == 1003964) {
                  return ML3MigrationFunction1003964to1005492;
                }
                if (a1 == 1005492) {
                  return ML3MigrationFunction1005492to1006189;
                }
              }
              else
              {
                if (a1 == 1002980) {
                  return ML3MigrationFunction1002980to1003342;
                }
                if (a1 == 1003342) {
                  return ML3MigrationFunction1003342to1003964;
                }
              }
            }
            else if (a1 > 992141)
            {
              if (a1 == 992142) {
                return ML3MigrationFunction992142to1002980;
              }
              if (a1 == 1002402) {
                return ML3MigrationFunction1002402to1002980;
              }
            }
            else
            {
              if (a1 == 992140) {
                return ML3MigrationFunction992140to992141;
              }
              if (a1 == 992141) {
                return ML3MigrationFunction992141to992142;
              }
            }
          }
          else if (a1 <= 1016426)
          {
            if (a1 > 1011334)
            {
              if (a1 == 1011335) {
                return ML3MigrationFunction1011335to1015139;
              }
              if (a1 == 1015139) {
                return ML3MigrationFunction1015139to1016427;
              }
            }
            else
            {
              if (a1 == 1006189) {
                return ML3MigrationFunction1006189to1007541;
              }
              if (a1 == 1007541) {
                return ML3MigrationFunction1007541to1011335;
              }
            }
          }
          else if (a1 <= 1026200)
          {
            if (a1 == 1016427) {
              return ML3MigrationFunction1016427to1021756;
            }
            if (a1 == 1021756) {
              return ML3MigrationFunction1021756to1026201;
            }
          }
          else
          {
            switch(a1)
            {
              case 1026201:
                return ML3MigrationFunction1026201to1028771;
              case 1028771:
                return ML3MigrationFunction1028771to1033275;
              case 1033275:
                return ML3MigrationFunction1033275to1046932;
            }
          }
        }
        else if (a1 > 1062999)
        {
          if (a1 <= 1108290)
          {
            if (a1 > 1096157)
            {
              if (a1 == 1096158) {
                return ML3MigrationFunction1096158to1102819;
              }
              if (a1 == 1102819) {
                return ML3MigrationFunction1102819to1108291;
              }
            }
            else
            {
              if (a1 == 1063000) {
                return ML3MigrationFunction1063000to1079529;
              }
              if (a1 == 1079529) {
                return ML3MigrationFunction1079529to1096158;
              }
            }
          }
          else if (a1 <= 1111152)
          {
            if (a1 == 1108291) {
              return ML3MigrationFunction1108291to1111152;
            }
            if (a1 == 1111152) {
              return ML3MigrationFunction1111152to1111153;
            }
          }
          else
          {
            switch(a1)
            {
              case 1111153:
                return ML3MigrationFunction1111153to1113775;
              case 1113775:
                return ML3MigrationFunction1113775to1114502;
              case 1114502:
                return ML3MigrationFunction1114502to1114940;
            }
          }
        }
        else if (a1 <= 1058984)
        {
          if (a1 > 1053826)
          {
            if (a1 == 1053827) {
              return ML3MigrationFunction1053827to1055456;
            }
            if (a1 == 1055456) {
              return ML3MigrationFunction1055456to1058985;
            }
          }
          else
          {
            if (a1 == 1046932) {
              return ML3MigrationFunction1046932to1050919;
            }
            if (a1 == 1050919) {
              return ML3MigrationFunction1050919to1053827;
            }
          }
        }
        else if (a1 <= 1061158)
        {
          if (a1 == 1058985) {
            return ML3MigrationFunction1058985to1061040;
          }
          if (a1 == 1061040) {
            return ML3MigrationFunction1061040to1061159;
          }
        }
        else
        {
          switch(a1)
          {
            case 1061159:
              return ML3MigrationFunction1061159to1061350;
            case 1061350:
              return ML3MigrationFunction1061350to1062137;
            case 1062137:
              return ML3MigrationFunction1062137to1063000;
          }
        }
      }
      else if (a1 > 1140139)
      {
        if (a1 > 1140229)
        {
          if (a1 <= 1140299)
          {
            if (a1 > 1140249)
            {
              if (a1 == 1140250) {
                return ML3MigrationFunction1140250to1140260;
              }
              if (a1 == 1140260) {
                return ML3MigrationFunction1140260to1140300;
              }
            }
            else
            {
              if (a1 == 1140230) {
                return ML3MigrationFunction1140230to1140240;
              }
              if (a1 == 1140240) {
                return ML3MigrationFunction1140240to1140250;
              }
            }
          }
          else if (a1 <= 1140319)
          {
            if (a1 == 1140300) {
              return ML3MigrationFunction1140300to1140310;
            }
            if (a1 == 1140310) {
              return ML3MigrationFunction1140310to1140320;
            }
          }
          else
          {
            switch(a1)
            {
              case 1140320:
                return ML3MigrationFunction1140320to1150000;
              case 1150000:
                return ML3MigrationFunction1150000to1150010;
              case 1150010:
                return ML3MigrationFunction1150010to1150020;
            }
          }
        }
        else if (a1 <= 1140179)
        {
          if (a1 > 1140159)
          {
            if (a1 == 1140160) {
              return ML3MigrationFunction1140160to1140170;
            }
            if (a1 == 1140170) {
              return ML3MigrationFunction1140170to1140180;
            }
          }
          else
          {
            if (a1 == 1140140) {
              return ML3MigrationFunction1140140to1140150;
            }
            if (a1 == 1140150) {
              return ML3MigrationFunction1140150to1140160;
            }
          }
        }
        else if (a1 <= 1140199)
        {
          if (a1 == 1140180) {
            return ML3MigrationFunction1140180to1140190;
          }
          if (a1 == 1140190) {
            return ML3MigrationFunction1140190to1140200;
          }
        }
        else
        {
          switch(a1)
          {
            case 1140200:
              return ML3MigrationFunction1140200to1140210;
            case 1140210:
              return ML3MigrationFunction1140210to1140230;
            case 1140220:
              return (uint64_t (*)(void *, void *))ML3MigrationFunction1140220to1140230;
          }
        }
      }
      else
      {
        if (a1 > 1138218)
        {
          switch(a1)
          {
            case 1140115:
              return ML3MigrationFunction1140115to1140116;
            case 1140116:
              return ML3MigrationFunction1140116to1140117;
            case 1140117:
              return ML3MigrationFunction1140117to1140118;
            case 1140118:
              return ML3MigrationFunction1140118to1140119;
            case 1140119:
              return ML3MigrationFunction1140119to1140120;
            case 1140120:
              return ML3MigrationFunction1140120to1140130;
            case 1140121:
            case 1140122:
            case 1140123:
            case 1140124:
            case 1140125:
            case 1140126:
            case 1140127:
            case 1140128:
            case 1140129:
              return result;
            case 1140130:
              return ML3MigrationFunction1140130to1140140;
            default:
              if (a1 == 1138219)
              {
                v3 = ML3MigrationFunction1138219to1138254;
              }
              else
              {
                if (a1 != 1138254) {
                  return result;
                }
                v3 = ML3MigrationFunction1138254to1140115;
              }
              break;
          }
          return v3;
        }
        if (a1 <= 1120345)
        {
          if (a1 > 1115481)
          {
            if (a1 == 1115482) {
              return ML3MigrationFunction1115482to1118969;
            }
            if (a1 == 1118969) {
              return ML3MigrationFunction1118969to1120346;
            }
          }
          else
          {
            if (a1 == 1114940) {
              return ML3MigrationFunction1114940to1115195;
            }
            if (a1 == 1115195) {
              return ML3MigrationFunction1115195to1115482;
            }
          }
        }
        else if (a1 <= 1124263)
        {
          if (a1 == 1120346) {
            return ML3MigrationFunction1120346to1121591;
          }
          if (a1 == 1121591) {
            return ML3MigrationFunction1121591to1124264;
          }
        }
        else
        {
          switch(a1)
          {
            case 1124264:
              return ML3MigrationFunction1124264to1132637;
            case 1132637:
              return ML3MigrationFunction1132637to1138219;
            case 1134019:
              return ML3MigrationFunction1134019to1138219;
          }
        }
      }
    }
    else if (a1 > 1163069)
    {
      if (a1 > 1280099)
      {
        if (a1 > 1280189)
        {
          if (a1 <= 1280229)
          {
            if (a1 > 1280209)
            {
              if (a1 == 1280210) {
                return ML3MigrationFunction1280210to1280220;
              }
              if (a1 == 1280220) {
                return ML3MigrationFunction1280220to1280230;
              }
            }
            else
            {
              if (a1 == 1280190) {
                return ML3MigrationFunction1280190to1280200;
              }
              if (a1 == 1280200) {
                return ML3MigrationFunction1280200to1280210;
              }
            }
          }
          else if (a1 <= 1280249)
          {
            if (a1 == 1280230) {
              return ML3MigrationFunction1280230to1280240;
            }
            if (a1 == 1280240) {
              return ML3MigrationFunction1280240to1280250;
            }
          }
          else
          {
            switch(a1)
            {
              case 1280250:
                return ML3MigrationFunction1280250to1280260;
              case 1280260:
                return ML3MigrationFunction1280260to1280270;
              case 1280270:
                return ML3MigrationFunction1280270to1280280;
            }
          }
        }
        else if (a1 <= 1280139)
        {
          if (a1 > 1280119)
          {
            if (a1 == 1280120) {
              return ML3MigrationFunction1280120to1280130;
            }
            if (a1 == 1280130) {
              return ML3MigrationFunction1280130to1280140;
            }
          }
          else
          {
            if (a1 == 1280100) {
              return ML3MigrationFunction1280100to1280110;
            }
            if (a1 == 1280110) {
              return ML3MigrationFunction1280110to1280120;
            }
          }
        }
        else if (a1 <= 1280159)
        {
          if (a1 == 1280140) {
            return ML3MigrationFunction1280140to1280150;
          }
          if (a1 == 1280150) {
            return ML3MigrationFunction1280150to1280160;
          }
        }
        else
        {
          switch(a1)
          {
            case 1280160:
              return ML3MigrationFunction1280160to1280170;
            case 1280170:
              return ML3MigrationFunction1280170to1280180;
            case 1280180:
              return ML3MigrationFunction1280180to1280190;
          }
        }
      }
      else if (a1 > 1280009)
      {
        if (a1 <= 1280049)
        {
          if (a1 > 1280029)
          {
            if (a1 == 1280030) {
              return ML3MigrationFunction1280030to1280040;
            }
            if (a1 == 1280040) {
              return ML3MigrationFunction1280040to1280050;
            }
          }
          else
          {
            if (a1 == 1280010) {
              return ML3MigrationFunction1280010to1280020;
            }
            if (a1 == 1280020) {
              return ML3MigrationFunction1280020to1280030;
            }
          }
        }
        else if (a1 <= 1280069)
        {
          if (a1 == 1280050) {
            return ML3MigrationFunction1280050to1280060;
          }
          if (a1 == 1280060) {
            return ML3MigrationFunction1280060to1280070;
          }
        }
        else
        {
          switch(a1)
          {
            case 1280070:
              return ML3MigrationFunction1280070to1280080;
            case 1280080:
              return ML3MigrationFunction1280080to1280090;
            case 1280090:
              return ML3MigrationFunction1280090to1280100;
          }
        }
      }
      else if (a1 <= 1240019)
      {
        if (a1 > 1239999)
        {
          if (a1 == 1240000) {
            return ML3MigrationFunction1240000to1240010;
          }
          if (a1 == 1240010) {
            return ML3MigrationFunction1240010to1240020;
          }
        }
        else
        {
          if (a1 == 1163070) {
            return ML3MigrationFunction1163070to1164010;
          }
          if (a1 == 1164010) {
            return ML3MigrationFunction1164010to1240000;
          }
        }
      }
      else if (a1 <= 1240039)
      {
        if (a1 == 1240020) {
          return ML3MigrationFunction1240020to1240030;
        }
        if (a1 == 1240030) {
          return ML3MigrationFunction1240030to1240040;
        }
      }
      else
      {
        switch(a1)
        {
          case 1240040:
            return ML3MigrationFunction1240040to1260000;
          case 1260000:
            return ML3MigrationFunction1260000to1280000;
          case 1280000:
            return ML3MigrationFunction1280000to1280010;
        }
      }
    }
    else if (a1 > 1160099)
    {
      if (a1 > 1162029)
      {
        if (a1 <= 1162069)
        {
          if (a1 > 1162049)
          {
            if (a1 == 1162050) {
              return ML3MigrationFunction1162050to1162060;
            }
            if (a1 == 1162060) {
              return ML3MigrationFunction1162060to1162070;
            }
          }
          else
          {
            if (a1 == 1162030) {
              return ML3MigrationFunction1162030to1162040;
            }
            if (a1 == 1162040) {
              return ML3MigrationFunction1162040to1162050;
            }
          }
        }
        else if (a1 <= 1162089)
        {
          if (a1 == 1162070) {
            return ML3MigrationFunction1162070to1162080;
          }
          if (a1 == 1162080) {
            return ML3MigrationFunction1162080to1162090;
          }
        }
        else
        {
          switch(a1)
          {
            case 1162090:
              return ML3MigrationFunction1162090to1162100;
            case 1162100:
              return ML3MigrationFunction1162100to1162110;
            case 1162110:
              return ML3MigrationFunction1162110to1240000;
          }
        }
      }
      else if (a1 <= 1160139)
      {
        if (a1 > 1160119)
        {
          if (a1 == 1160120) {
            return ML3MigrationFunction1160120to1160130;
          }
          if (a1 == 1160130) {
            return ML3MigrationFunction1160130to1160140;
          }
        }
        else
        {
          if (a1 == 1160100) {
            return ML3MigrationFunction1160100to1160110;
          }
          if (a1 == 1160110) {
            return ML3MigrationFunction1160110to1160120;
          }
        }
      }
      else if (a1 <= 1160159)
      {
        if (a1 == 1160140) {
          return ML3MigrationFunction1160140to1160150;
        }
        if (a1 == 1160150) {
          return ML3MigrationFunction1160150to1160160;
        }
      }
      else
      {
        switch(a1)
        {
          case 1160160:
            return ML3MigrationFunction1160160to1162010;
          case 1162010:
            return ML3MigrationFunction1162010to1162020;
          case 1162020:
            return ML3MigrationFunction1162020to1162030;
        }
      }
    }
    else if (a1 > 1160009)
    {
      if (a1 <= 1160049)
      {
        if (a1 > 1160029)
        {
          if (a1 == 1160030) {
            return ML3MigrationFunction1160030to1160040;
          }
          if (a1 == 1160040) {
            return ML3MigrationFunction1160040to1160050;
          }
        }
        else
        {
          if (a1 == 1160010) {
            return ML3MigrationFunction1160010to1160020;
          }
          if (a1 == 1160020) {
            return ML3MigrationFunction1160020to1160030;
          }
        }
      }
      else if (a1 <= 1160069)
      {
        if (a1 == 1160050) {
          return ML3MigrationFunction1160050to1160060;
        }
        if (a1 == 1160060) {
          return ML3MigrationFunction1160060to1160070;
        }
      }
      else
      {
        switch(a1)
        {
          case 1160070:
            return ML3MigrationFunction1160070to1160080;
          case 1160080:
            return ML3MigrationFunction1160080to1160090;
          case 1160090:
            return ML3MigrationFunction1160090to1160100;
        }
      }
    }
    else if (a1 <= 1150059)
    {
      if (a1 > 1150039)
      {
        if (a1 == 1150040) {
          return ML3MigrationFunction1150040to1150050;
        }
        if (a1 == 1150050) {
          return ML3MigrationFunction1150050to1150060;
        }
      }
      else
      {
        if (a1 == 1150020) {
          return ML3MigrationFunction1150020to1150030;
        }
        if (a1 == 1150030) {
          return ML3MigrationFunction1150030to1150040;
        }
      }
    }
    else if (a1 <= 1150079)
    {
      if (a1 == 1150060) {
        return ML3MigrationFunction1150060to1150070;
      }
      if (a1 == 1150070) {
        return ML3MigrationFunction1150070to1150080;
      }
    }
    else
    {
      switch(a1)
      {
        case 1150080:
          return ML3MigrationFunction1150080to1150090;
        case 1150090:
          return ML3MigrationFunction1150090to1160000;
        case 1160000:
          return ML3MigrationFunction1160000to1160010;
      }
    }
  }
  else if (a1 > 1710049)
  {
    if (a1 > 2099999)
    {
      if (a1 > 2120009)
      {
        if (a1 > 2200009)
        {
          if (a1 <= 2200049)
          {
            if (a1 > 2200029)
            {
              if (a1 == 2200030)
              {
                return ML3MigrationFunction2200030to2200040;
              }
              else
              {
                if (a1 != 2200040) {
                  return result;
                }
                return ML3MigrationFunction2200040to2200050;
              }
            }
            else if (a1 == 2200010)
            {
              return ML3MigrationFunction2200010to2200020;
            }
            else
            {
              if (a1 != 2200020) {
                return result;
              }
              return ML3MigrationFunction2200020to2200030;
            }
          }
          else if (a1 <= 2200069)
          {
            if (a1 == 2200050)
            {
              return ML3MigrationFunction2200050to2200060;
            }
            else
            {
              if (a1 != 2200060) {
                return result;
              }
              return ML3MigrationFunction2200060to2200070;
            }
          }
          else
          {
            switch(a1)
            {
              case 2200070:
                return ML3MigrationFunction2200070to2220000;
              case 2220000:
                return ML3MigrationFunction2220000to2220010;
              case 2220010:
                return ML3MigrationFunction2220010to2220020;
              default:
                return result;
            }
          }
        }
        else if (a1 <= 2120049)
        {
          if (a1 > 2120029)
          {
            if (a1 == 2120030)
            {
              return ML3MigrationFunction2120030to2120040;
            }
            else
            {
              if (a1 != 2120040) {
                return result;
              }
              return ML3MigrationFunction2120040to2120050;
            }
          }
          else if (a1 == 2120010)
          {
            return ML3MigrationFunction2120010to2120020;
          }
          else
          {
            if (a1 != 2120020) {
              return result;
            }
            return ML3MigrationFunction2120020to2120030;
          }
        }
        else if (a1 <= 2149999)
        {
          if (a1 == 2120050)
          {
            return ML3MigrationFunction2120050to2120060;
          }
          else
          {
            if (a1 != 2120060) {
              return result;
            }
            return ML3MigrationFunction2120060to2150000;
          }
        }
        else
        {
          switch(a1)
          {
            case 2150000:
              return ML3MigrationFunction2150000to2160000;
            case 2160000:
              return ML3MigrationFunction2160000to2200000;
            case 2200000:
              return ML3MigrationFunction2200000to2200010;
            default:
              return result;
          }
        }
      }
      else
      {
        if (a1 <= 2100089)
        {
          if (a1 <= 2100039)
          {
            if (a1 > 2100019)
            {
              if (a1 == 2100020) {
                return ML3MigrationFunction2100020to2100030;
              }
              if (a1 == 2100030) {
                return ML3MigrationFunction2100030to2100040;
              }
            }
            else
            {
              if (a1 == 2100000) {
                return ML3MigrationFunction2100000to2100010;
              }
              if (a1 == 2100010) {
                return ML3MigrationFunction2100010to2100020;
              }
            }
          }
          else if (a1 <= 2100059)
          {
            if (a1 == 2100040) {
              return ML3MigrationFunction2100040to2100050;
            }
            if (a1 == 2100050) {
              return ML3MigrationFunction2100050to2100060;
            }
          }
          else
          {
            switch(a1)
            {
              case 2100060:
                return ML3MigrationFunction2100060to2100070;
              case 2100070:
                return ML3MigrationFunction2100070to2100080;
              case 2100080:
                return ML3MigrationFunction2100080to2100090;
            }
          }
          return result;
        }
        if (a1 <= 2100129)
        {
          if (a1 <= 2100109)
          {
            if (a1 == 2100090) {
              return ML3MigrationFunction2100090to2100100;
            }
            if (a1 == 2100100) {
              return ML3MigrationFunction2100100to2100110;
            }
            return result;
          }
          if (a1 == 2100110)
          {
            return ML3MigrationFunction2100110to2100120;
          }
          else
          {
            if (a1 != 2100120) {
              return result;
            }
            return ML3MigrationFunction2100120to2100130;
          }
        }
        else if (a1 <= 2100149)
        {
          if (a1 == 2100130)
          {
            return ML3MigrationFunction2100130to2100140;
          }
          else
          {
            if (a1 != 2100140) {
              return result;
            }
            return ML3MigrationFunction2100140to2100150;
          }
        }
        else
        {
          switch(a1)
          {
            case 2100150:
              return ML3MigrationFunction2100150to2110000;
            case 2110000:
              return ML3MigrationFunction2110000to2120000;
            case 2120000:
              return ML3MigrationFunction2120000to2120010;
            default:
              return result;
          }
        }
      }
    }
    if (a1 > 1949999)
    {
      if (a1 > 2049999)
      {
        if (a1 <= 2050039)
        {
          if (a1 > 2050019)
          {
            if (a1 == 2050020) {
              return ML3MigrationFunction2050020to2050030;
            }
            if (a1 == 2050030) {
              return ML3MigrationFunction2050030to2050040;
            }
          }
          else
          {
            if (a1 == 2050000) {
              return ML3MigrationFunction2050000to2050010;
            }
            if (a1 == 2050010) {
              return ML3MigrationFunction2050010to2050020;
            }
          }
        }
        else if (a1 <= 2050059)
        {
          if (a1 == 2050040) {
            return ML3MigrationFunction2050040to2050050;
          }
          if (a1 == 2050050) {
            return ML3MigrationFunction2050050to2050060;
          }
        }
        else
        {
          switch(a1)
          {
            case 2050060:
              return ML3MigrationFunction2050060to2050070;
            case 2050070:
              return ML3MigrationFunction2050070to2050080;
            case 2050080:
              return ML3MigrationFunction2050080to2100000;
          }
        }
      }
      else if (a1 <= 1950039)
      {
        if (a1 > 1950019)
        {
          if (a1 == 1950020) {
            return ML3MigrationFunction1950020to1950030;
          }
          if (a1 == 1950030) {
            return ML3MigrationFunction1950030to1950040;
          }
        }
        else
        {
          if (a1 == 1950000) {
            return ML3MigrationFunction1950000to1950010;
          }
          if (a1 == 1950010) {
            return ML3MigrationFunction1950010to1950020;
          }
        }
      }
      else if (a1 <= 2000009)
      {
        if (a1 == 1950040) {
          return ML3MigrationFunction1950040to2000000;
        }
        if (a1 == 2000000) {
          return ML3MigrationFunction2000000to2000010;
        }
      }
      else
      {
        switch(a1)
        {
          case 2000010:
            return ML3MigrationFunction2000010to2000020;
          case 2000020:
            return ML3MigrationFunction2000020to2030000;
          case 2030000:
            return ML3MigrationFunction2030000to2050000;
        }
      }
    }
    else if (a1 > 1850009)
    {
      if (a1 <= 1850049)
      {
        if (a1 > 1850029)
        {
          if (a1 == 1850030) {
            return ML3MigrationFunction1850030to1850040;
          }
          if (a1 == 1850040) {
            return ML3MigrationFunction1850040to1850050;
          }
        }
        else
        {
          if (a1 == 1850010) {
            return ML3MigrationFunction1850010to1850020;
          }
          if (a1 == 1850020) {
            return ML3MigrationFunction1850020to1850030;
          }
        }
      }
      else if (a1 <= 1910009)
      {
        if (a1 == 1850050) {
          return ML3MigrationFunction1850050to1910000;
        }
        if (a1 == 1910000) {
          return ML3MigrationFunction1910000to1910010;
        }
      }
      else
      {
        switch(a1)
        {
          case 1910010:
            return ML3MigrationFunction1910010to1910020;
          case 1910020:
            return ML3MigrationFunction1910020to1910030;
          case 1910030:
            return ML3MigrationFunction1910030to1950000;
        }
      }
    }
    else if (a1 <= 1749999)
    {
      if (a1 > 1710059)
      {
        if (a1 == 1710060) {
          return ML3MigrationFunction1710060to1710061;
        }
        if (a1 == 1710061) {
          return ML3MigrationFunction1710061to1750000;
        }
      }
      else
      {
        if (a1 == 1710050) {
          return ML3MigrationFunction1710050to1710051;
        }
        if (a1 == 1710051) {
          return ML3MigrationFunction1710051to1710060;
        }
      }
    }
    else if (a1 <= 1799999)
    {
      if (a1 == 1750000) {
        return ML3MigrationFunction1750000to1770000;
      }
      if (a1 == 1770000) {
        return ML3MigrationFunction1770000to1800000;
      }
    }
    else
    {
      switch(a1)
      {
        case 1800000:
          return ML3MigrationFunction1800000to1810000;
        case 1810000:
          return ML3MigrationFunction1810000to1850000;
        case 1850000:
          return ML3MigrationFunction1850000to1850010;
      }
    }
  }
  else if (a1 > 1410169)
  {
    if (a1 > 1510019)
    {
      if (a1 > 1609999)
      {
        if (a1 <= 1709999)
        {
          if (a1 > 1610019)
          {
            if (a1 == 1610020) {
              return ML3MigrationFunction1610020to1610030;
            }
            if (a1 == 1610030) {
              return ML3MigrationFunction1610030to1710000;
            }
          }
          else
          {
            if (a1 == 1610000) {
              return ML3MigrationFunction1610000to1610010;
            }
            if (a1 == 1610010) {
              return ML3MigrationFunction1610010to1610020;
            }
          }
        }
        else if (a1 <= 1710019)
        {
          if (a1 == 1710000) {
            return ML3MigrationFunction1710000to1710010;
          }
          if (a1 == 1710010) {
            return ML3MigrationFunction1710010to1710020;
          }
        }
        else
        {
          switch(a1)
          {
            case 1710020:
              return ML3MigrationFunction1710020to1710030;
            case 1710030:
              return ML3MigrationFunction1710030to1710040;
            case 1710040:
              return ML3MigrationFunction1710040to1710050;
          }
        }
      }
      else if (a1 <= 1510059)
      {
        if (a1 > 1510039)
        {
          if (a1 == 1510040) {
            return ML3MigrationFunction1510040to1510050;
          }
          if (a1 == 1510050) {
            return ML3MigrationFunction1510050to1510060;
          }
        }
        else
        {
          if (a1 == 1510020) {
            return ML3MigrationFunction1510020to1510030;
          }
          if (a1 == 1510030) {
            return ML3MigrationFunction1510030to1510040;
          }
        }
      }
      else if (a1 <= 1549999)
      {
        if (a1 == 1510060) {
          return ML3MigrationFunction1510060to1510070;
        }
        if (a1 == 1510070) {
          return ML3MigrationFunction1510070to1550000;
        }
      }
      else
      {
        switch(a1)
        {
          case 1550000:
            return ML3MigrationFunction1550000to1550010;
          case 1550010:
            return ML3MigrationFunction1550010to1560000;
          case 1560000:
            return ML3MigrationFunction1560000to1610000;
        }
      }
    }
    else if (a1 > 1450029)
    {
      if (a1 <= 1450069)
      {
        if (a1 > 1450049)
        {
          if (a1 == 1450050) {
            return ML3MigrationFunction1450050to1450060;
          }
          if (a1 == 1450060) {
            return ML3MigrationFunction1450060to1450070;
          }
        }
        else
        {
          if (a1 == 1450030) {
            return ML3MigrationFunction1450030to1450040;
          }
          if (a1 == 1450040) {
            return ML3MigrationFunction1450040to1450050;
          }
        }
      }
      else if (a1 <= 1450089)
      {
        if (a1 == 1450070) {
          return ML3MigrationFunction1450070to1450080;
        }
        if (a1 == 1450080) {
          return ML3MigrationFunction1450080to1450090;
        }
      }
      else
      {
        switch(a1)
        {
          case 1450090:
            return ML3MigrationFunction1450090to1510000;
          case 1510000:
            return ML3MigrationFunction1510000to1510010;
          case 1510010:
            return ML3MigrationFunction1510010to1510020;
        }
      }
    }
    else if (a1 <= 1410209)
    {
      if (a1 > 1410189)
      {
        if (a1 == 1410190) {
          return ML3MigrationFunction1410190to1410200;
        }
        if (a1 == 1410200) {
          return ML3MigrationFunction1410200to1410210;
        }
      }
      else
      {
        if (a1 == 1410170) {
          return ML3MigrationFunction1410170to1410180;
        }
        if (a1 == 1410180) {
          return ML3MigrationFunction1410180to1410190;
        }
      }
    }
    else if (a1 <= 1449999)
    {
      if (a1 == 1410210) {
        return ML3MigrationFunction1410210to1430000;
      }
      if (a1 == 1430000) {
        return ML3MigrationFunction1430000to1450000;
      }
    }
    else
    {
      switch(a1)
      {
        case 1450000:
          return ML3MigrationFunction1450000to1450010;
        case 1450010:
          return ML3MigrationFunction1450010to1450020;
        case 1450020:
          return ML3MigrationFunction1450020to1450030;
      }
    }
  }
  else if (a1 > 1360009)
  {
    if (a1 > 1410079)
    {
      if (a1 <= 1410119)
      {
        if (a1 > 1410099)
        {
          if (a1 == 1410100) {
            return ML3MigrationFunction1410100to1410110;
          }
          if (a1 == 1410110) {
            return ML3MigrationFunction1410110to1410120;
          }
        }
        else
        {
          if (a1 == 1410080) {
            return ML3MigrationFunction1410080to1410090;
          }
          if (a1 == 1410090) {
            return ML3MigrationFunction1410090to1410100;
          }
        }
      }
      else if (a1 <= 1410139)
      {
        if (a1 == 1410120) {
          return ML3MigrationFunction1410120to1410130;
        }
        if (a1 == 1410130) {
          return ML3MigrationFunction1410130to1410140;
        }
      }
      else
      {
        switch(a1)
        {
          case 1410140:
            return ML3MigrationFunction1410140to1410150;
          case 1410150:
            return ML3MigrationFunction1410150to1410160;
          case 1410160:
            return ML3MigrationFunction1410160to1410170;
        }
      }
    }
    else if (a1 <= 1410029)
    {
      if (a1 > 1410009)
      {
        if (a1 == 1410010) {
          return ML3MigrationFunction1410010to1410020;
        }
        if (a1 == 1410020) {
          return ML3MigrationFunction1410020to1410030;
        }
      }
      else
      {
        if (a1 == 1360010) {
          return ML3MigrationFunction1360010to1410000;
        }
        if (a1 == 1410000) {
          return ML3MigrationFunction1410000to1410010;
        }
      }
    }
    else if (a1 <= 1410049)
    {
      if (a1 == 1410030) {
        return ML3MigrationFunction1410030to1410040;
      }
      if (a1 == 1410040) {
        return ML3MigrationFunction1410040to1410050;
      }
    }
    else
    {
      switch(a1)
      {
        case 1410050:
          return ML3MigrationFunction1410050to1410060;
        case 1410060:
          return ML3MigrationFunction1410060to1410070;
        case 1410070:
          return ML3MigrationFunction1410070to1410080;
      }
    }
  }
  else if (a1 > 1330009)
  {
    if (a1 <= 1350029)
    {
      if (a1 > 1350009)
      {
        if (a1 == 1350010) {
          return ML3MigrationFunction1350010to1350020;
        }
        if (a1 == 1350020) {
          return ML3MigrationFunction1350020to1350030;
        }
      }
      else
      {
        if (a1 == 1330010) {
          return ML3MigrationFunction1330010to1350010;
        }
        if (a1 == 1350000) {
          return ML3MigrationFunction1350000to1350010;
        }
      }
    }
    else if (a1 <= 1350049)
    {
      if (a1 == 1350030) {
        return ML3MigrationFunction1350030to1350040;
      }
      if (a1 == 1350040) {
        return ML3MigrationFunction1350040to1350050;
      }
    }
    else
    {
      switch(a1)
      {
        case 1350050:
          return ML3MigrationFunction1350050to1350060;
        case 1350060:
          return ML3MigrationFunction1350060to1360000;
        case 1360000:
          return ML3MigrationFunction1360000to1360010;
      }
    }
  }
  else if (a1 <= 1310029)
  {
    if (a1 > 1290009)
    {
      if (a1 == 1290010) {
        return ML3MigrationFunction1290010to1310020;
      }
      if (a1 == 1310020) {
        return ML3MigrationFunction1310020to1310030;
      }
    }
    else
    {
      if (a1 == 1280280) {
        return ML3MigrationFunction1280280to1290000;
      }
      if (a1 == 1290000) {
        return ML3MigrationFunction1290000to1290010;
      }
    }
  }
  else if (a1 <= 1310049)
  {
    if (a1 == 1310030) {
      return ML3MigrationFunction1310030to1310040;
    }
    if (a1 == 1310040) {
      return ML3MigrationFunction1310040to1310050;
    }
  }
  else
  {
    switch(a1)
    {
      case 1310050:
        return ML3MigrationFunction1310050to1320000;
      case 1320000:
        return ML3MigrationFunction1320000to1330000;
      case 1330000:
        return ML3MigrationFunction1330000to1330010;
    }
  }
  return result;
}

uint64_t ML3MigrationFunction992140to992141(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:992141];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 992141;"];

  return v4;
}

uint64_t ML3MigrationFunction992141to992142(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item ADD COLUMN base_location_id INTEGER DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:992142];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 992142;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction992142to1002980(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE entity_revision (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL UNIQUE, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0)"])
  {
    [v4 setCurrentUserVersion:1002980];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1002980;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1002402to1002980(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE entity_revision ADD COLUMN deleted INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE entity_revision ADD COLUMN class INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1002980];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1002980;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1002980to1003342(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN store_xid TEXT"]
    && [v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN store_flavor TEXT"])
  {
    [v4 setCurrentUserVersion:1003342];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1003342;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1003342to1003964(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1003964];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1003964;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1003964to1005492(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN integrity BLOB"])
  {
    [v4 setCurrentUserVersion:1005492];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1005492;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1005492to1006189(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE genius_config (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER DEFAULT 0, min_num_results INTEGER DEFAULT 0, data BLOB)"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE genius_metadata (genius_id INTEGER PRIMARY KEY, revision_level INTEGER, version INTEGER, checksum INTEGER, data BLOB)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE genius_similarities (genius_id INTEGER PRIMARY KEY, data BLOB)"))
  {
    [v4 setCurrentUserVersion:1006189];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1006189;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1006189to1007541(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_items (container_pid INTEGER PRIMARY KEY, item_pid_data BLOB)"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_to_container")&& objc_msgSend(v3, "executeUpdate:", @"CREATE VIRTUAL TABLE item_to_container USING ML3ContainerItemToContainer (item_pid INTEGER NOT NULL DEFAULT 0, container_pid INTEGER NOT NULL DEFAULT 0, physical_order INTEGER NOT NULL DEFAULT 0, shuffle_order INTEGER NOT NULL DEFAULT 0)"))
  {
    [v4 setCurrentUserVersion:1007541];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1007541;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1007541to1011335(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN store_saga_id INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1011335];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1011335;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1011335to1015139(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE artwork_info (cache_id TEXT NOT NULL, format_id INTEGER NOT NULL, length INTEGER, offset INTEGER, extra_length INTEGER NOT NULL DEFAULT 0, UNIQUE (cache_id, format_id))"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE artwork_free_list (offset INTEGER PRIMARY KEY, length INTEGER)"))
  {
    [v4 setCurrentUserVersion:1015139];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1015139;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1015139to1016427(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN description TEXT"])
  {
    [v4 setCurrentUserVersion:1016427];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1016427;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1016427to1021756(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN store_cloud_id INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1021756];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1021756;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1021756to1026201(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN artwork_cache_id INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album_artist SET artwork_cache_id = IFNULL((SELECT artwork_cache_id FROM item JOIN item_extra USING (item_pid) WHERE item.album_artist_pid = album_artist.album_artist_pid), 0)")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album_artist SET representative_item_pid = IFNULL((SELECT item_pid FROM item WHERE item.album_artist_pid = album_artist.album_artist_pid), 0)"))
  {
    [v4 setCurrentUserVersion:1026201];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1026201;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1026201to1028771(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToUpdateSortMap:1];
  [v3 setCurrentUserVersion:1028771];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1028771;"];
  return v5;
}

uint64_t ML3MigrationFunction1028771to1033275(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE ubiquitous_bookmarks (key TEXT PRIMARY KEY, bookmark_time_ms REAL, timestamp REAL)"])
  {
    [v4 setCurrentUserVersion:1033275];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1033275;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1033275to1046932(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN grouping_key BLOB"]
    && [v3 executeUpdate:@"UPDATE album SET feed_url = NULL WHERE feed_url = ''"]
    && [v3 executeUpdate:@"ALTER TABLE item_artist ADD COLUMN grouping_key BLOB"]
    && [v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN grouping_key BLOB"]
    && [v3 executeUpdate:@"ALTER TABLE composer ADD COLUMN grouping_key BLOB"]
    && [v3 executeUpdate:@"ALTER TABLE genre ADD COLUMN grouping_key BLOB"])
  {
    [v4 setNeedsToUpdateSortMap:1];
    [v4 setCurrentUserVersion:1046932];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1046932;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1046932to1050919(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1050919];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1050919;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1050919to1053827(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE artwork_info ADD COLUMN extra_length INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1053827];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1053827;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1053827to1055456(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN store_matched_status INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN store_redownloaded_status INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1055456];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1055456;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1055456to1058985(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, representative_item_pid, grouping_key) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, (CASE sort_series_name WHEN '' THEN NULL ELSE sort_series_name END), representative_item_pid, grouping_key FROM item_artist")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_artist_new RENAME TO item_artist"))
  {
    [v4 setCurrentUserVersion:1058985];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1058985;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1058985to1061040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_artist ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_artist ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE composer ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE genre ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1061040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1061040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1061040to1061159(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:1061159];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1061159;"];
  return v5;
}

uint64_t ML3MigrationFunction1061159to1061350(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToUpdateSortMap:1];
  [v3 setCurrentUserVersion:1061350];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1061350;"];
  return v5;
}

uint64_t ML3MigrationFunction1061350to1062137(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN pending_genius_checksum INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1062137];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1062137;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1062137to1063000(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1063000];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1063000;"];

  return v4;
}

uint64_t ML3MigrationFunction1063000to1079529(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"PRAGMA auto_vacuum = 2;"])
  {
    [v4 setCurrentUserVersion:1079529];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1079529;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1079529to1096158(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN is_streaming_quality INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1096158];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1096158;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1096158to1102819(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN store_bookmark_timestamp REAL DEFAULT NULL"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN store_bookmark_entity_revision INTEGER DEFAULT NULL"))
  {
    [v4 setCurrentUserVersion:1102819];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1102819;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1102819to1108291(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item ADD COLUMN exclude_from_shuffle INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item SET exclude_from_shuffle=1 WHERE item_pid IN (SELECT item_pid FROM item_extra WHERE exclude_from_shuffle=1)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, artwork_cache_id INTEGER NOT NULL DEFAULT 0, location_type INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', extension INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, file_size INTEGER NOT NULL DEFAULT 0, file_creator INTEGER NOT NULL DEFAULT 0, file_type INTEGER NOT NULL DEFAULT 0, num_dir_levels_file INTEGER NOT NULL DEFAULT 0, num_dir_levels_lib INTEGER NOT NULL DEFAULT 0, integrity BLOB, media_kind INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, total_burn_time_ms REAL NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, relative_volume INTEGER, eq_preset TEXT, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, is_ota_purchased INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_itunes_u INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, copyright TEXT, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, is_podcast INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, store_kind INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, audio_format INTEGER NOT NULL DEFAULT 0, sample_rate REAL NOT NULL DEFAULT 0, duration INTEGER NOT NULL DEFAULT 0, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, analysis_inhibit_flags INTEGER NOT NULL DEFAULT 0, audio_fingerprint INTEGER NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, is_hd INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, subtitle_track_id INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', bit_rate INTEGER NOT NULL DEFAULT 0, pending_genius_checksum INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_extra_new (item_pid, title, sort_title, disc_count, track_count, artwork_cache_id, location_type, location, extension, date_created, file_size, file_creator, file_type, num_dir_levels_file, num_dir_levels_lib, integrity, media_kind, date_modified, year, content_rating, content_rating_level, is_user_disabled, remember_bookmark, start_time_ms, stop_time_ms, total_time_ms, total_burn_time_ms, bpm, relative_volume, eq_preset, genius_id, comment, grouping, description, description_long, collection_description, is_ota_purchased, is_compilation, is_itunes_u, is_audible_audio_book, copyright, chosen_by_auto_fill, is_temporary_cloud_download, is_streaming_quality, store_bookmark_timestamp, store_bookmark_entity_revision, is_podcast, external_guid, feed_url, store_kind, date_purchased, date_released, account_id, key_versions, key_platform_id, key_id, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, artwork_url, store_xid, store_flavor, store_saga_id, store_matched_status, store_redownloaded_status, audio_format, sample_rate, duration, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, analysis_inhibit_flags, audio_fingerprint, volume_normalization_energy, is_rental, is_demo, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, has_alternate_audio, has_subtitles, is_hd, season_number, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, subtitle_track_id, episode_id, network_name, extended_content_rating, movie_info, bit_rate, pending_genius_checksum) SELECT item_pid, title, sort_title, disc_count, track_count, artwork_cache_id, location_type, location, extension, date_created, file_size, file_creator, file_type, num_dir_levels_file, num_dir_levels_lib, integrity, media_kind, date_modified, year, content_rating, content_rating_level, is_user_disabled, remember_bookmark, start_time_ms, stop_time_ms, total_time_ms, total_burn_time_ms, bpm, relative_volume, eq_preset, genius_id, comment, grouping, description, description_long, collection_description, is_ota_purchased, is_compilation, is_itunes_u, is_audible_audio_book, copyright, chosen_by_auto_fill, is_temporary_cloud_download, is_streaming_quality, store_bookmark_timestamp, store_bookmark_entity_revision, is_podcast, external_guid, feed_url, store_kind, date_purchased, date_released, account_id, key_versions, key_platform_id, key_id, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, artwork_url, store_xid, store_flavor, store_saga_id, store_matched_status, store_redownloaded_status, audio_format, sample_rate, duration, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, analysis_inhibit_flags, audio_fingerprint, volume_normalization_energy, is_rental, is_demo, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, has_alternate_audio, has_subtitles, is_hd, season_number, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, subtitle_track_id, episode_id, network_name, extended_content_rating, movie_info, bit_rate, pending_genius_checksum FROM item_extra")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_extra")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra_new RENAME TO item_extra"))
  {
    [v4 setCurrentUserVersion:1108291];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1108291;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1108291to1111152(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP INDEX IF EXISTS ItemTitle"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemTitle_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbum"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbumArtist"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbumArtist_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbum_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemItemArtist_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemComposer_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemGenre_Section"]
    && [v3 executeUpdate:@"CREATE TABLE entity_revision_new (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0, revision_type INTEGER NOT NULL DEFAULT 0, UNIQUE(entity_pid, revision_type))"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO entity_revision_new (revision, entity_pid, deleted, class) SELECT revision, entity_pid, deleted, class FROM entity_revision")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE entity_revision")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE entity_revision_new RENAME TO entity_revision"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1111152];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1111152;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1111152to1111153(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:1111153];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1111153;"];
  return v5;
}

uint64_t ML3MigrationFunction1111153to1113775(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE item_extra SET location = \"\" WHERE location = \"/\""])
  {
    [v4 setCurrentUserVersion:1113775];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1113775;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1113775to1114502(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((int)[v4 originalUserVersion] < 1108291
    || (int)[v4 originalUserVersion] > 1124264
    || +[ML3MusicLibrary updateTrackIntegrityOnConnection:v3])
  {
    [v4 setCurrentUserVersion:1114502];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1114502;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1114502to1114940(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN has_cloud_play_order INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1114940];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1114940;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1114940to1115195(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE composer ADD COLUMN artwork_cache_id INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE composer SET artwork_cache_id = IFNULL((SELECT artwork_cache_id FROM item JOIN item_extra USING (item_pid) WHERE item.item_pid = composer.representative_item_pid), 0)"))
  {
    [v4 setCurrentUserVersion:1115195];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1115195;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1115195to1115482(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:1115482];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1115482;"];
  return v5;
}

uint64_t ML3MigrationFunction1115482to1118969(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE artwork_info_new(cache_id TEXT NOT NULL, format_id INTEGER NOT NULL, length INTEGER, offset INTEGER, extra_length INTEGER NOT NULL DEFAULT 0, UNIQUE (cache_id, format_id))"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO artwork_info_new SELECT cache_id, format_id, length, offset, extra_length FROM artwork_info")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE artwork_info")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE artwork_info_new RENAME TO artwork_info"))
  {
    [v4 setCurrentUserVersion:1118969];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1118969;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1118969to1120346(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE purgeable_list (item_pid INTEGER PRIMARY KEY,is_purgeable INTEGER NOT NULL DEFAULT 0)"])
  {
    [v4 setCurrentUserVersion:1120346];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1120346;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1120346to1121591(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE purgeable_list_new (item_pid INTEGER PRIMARY KEY, is_purgeable INTEGER NOT NULL DEFAULT 1, date_last_used INTEGER DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO purgeable_list_new (item_pid, is_purgeable) SELECT item_pid, is_purgeable FROM purgeable_list")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE purgeable_list")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE purgeable_list_new RENAME TO purgeable_list")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO purgeable_list (item_pid, date_last_used) SELECT item_pid, date_played FROM item_stats"))
  {
    [v4 setCurrentUserVersion:1121591];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1121591;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1121591to1124264(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE purgeable_list_new (item_pid INTEGER PRIMARY KEY, is_alarm INTEGER NOT NULL DEFAULT 0, date_last_used INTEGER DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO purgeable_list_new (item_pid, is_alarm, date_last_used) SELECT item_pid, is_purgeable, date_last_used FROM purgeable_list")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE purgeable_list")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE purgeable_list_new RENAME TO purgeable_list"))
  {
    [v4 setCurrentUserVersion:1124264];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1124264;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1124264to1132637(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_search (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT OR REPLACE INTO item_search (item_pid, search_title) SELECT item_extra.item_pid, sort_map.name_order from sort_map JOIN item_extra ON item_extra.title = sort_map.name")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_search SET search_album = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album ON album.album = sort_map.name JOIN item ON item.album_pid = album.album_pid WHERE item.item_pid = item_search.item_pid), 0)")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_search SET search_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN item_artist ON item_artist.item_artist = sort_map.name JOIN item ON item.item_artist_pid = item_artist.item_artist_pid WHERE item.item_pid = item_search.item_pid), 0)")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_search SET search_composer = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN composer ON composer.composer = sort_map.name JOIN item ON item.composer_pid = composer.composer_pid WHERE item.item_pid = item_search.item_pid), 0)"))
  {
    [v4 setCurrentUserVersion:1132637];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1132637;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1132637to1138219(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRemoveLocationsForItemsMissingAssets:1];
  [v3 setCurrentUserVersion:1138219];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1138219;"];
  return v5;
}

uint64_t ML3MigrationFunction1134019to1138219(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRemoveLocationsForItemsMissingAssets:1];
  [v3 setCurrentUserVersion:1138219];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1138219;"];
  return v5;
}

uint64_t ML3MigrationFunction1138219to1138254(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_search_new (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_search_new (item_pid, search_title, search_album, search_artist, search_composer) SELECT item_pid, search_title, search_album, search_artist, search_composer FROM item_search")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_search_new SET search_album_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album_artist ON album_artist.album_artist = sort_map.name JOIN item ON item.album_artist_pid = album_artist.album_artist_pid WHERE item.item_pid = item_search_new.item_pid), 0)")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_search")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_search_new RENAME TO item_search"))
  {
    [v4 setCurrentUserVersion:1138254];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1138254;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1138254to1140115(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN smart_evaluation_order INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1140115];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140115;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140115to1140116(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN jalisco_token INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN codec_type INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN codec_subtype INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN format TEXT")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN data_kind INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN data_url TEXT")&& objc_msgSend(v3,
                       "executeUpdate:",
                       @"ALTER TABLE item_extra ADD COLUMN has_video INTEGER NOT NULL DEFAULT 0")
    && [v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN key_id_2 INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN has_chapter_data INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1140116];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140116;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140116to1140117(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN purchase_history_id INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1140117];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140117;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140117to1140118(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (ML3MigrationModifyTableWithResultingSchema(v3, @"item_extra", 0, 0, &cfstr_ItemPidInteger)&& ML3MigrationExecuteSQLArray(v3, &unk_1F090EA70))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1140118];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140118;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140118to1140119(void *a1, void *a2)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_store (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_store (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, store_saga_id, purchase_history_id, purchase_history_token, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, store_saga_id, purchase_history_id, jalisco_token, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status FROM item_extra")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_playback (item_pid INTEGER PRIMARY KEY, audio_format INTEGER NOT NULL DEFAULT 0, bit_rate INTEGER NOT NULL DEFAULT 0, codec_type INTEGER NOT NULL DEFAULT 0, codec_subtype INTEGER NOT NULL DEFAULT 0, data_kind INTEGER NOT NULL DEFAULT 0, data_url TEXT, duration INTEGER NOT NULL DEFAULT 0, eq_preset TEXT, format TEXT, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, has_video INTEGER NOT NULL DEFAULT 0, relative_volume INTEGER, sample_rate REAL NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_playback (item_pid, audio_format, bit_rate, codec_type, codec_subtype, data_kind, data_url, duration, eq_preset, format, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, has_video, relative_volume, sample_rate, start_time_ms, stop_time_ms, volume_normalization_energy) SELECT item_pid, audio_format, bit_rate, codec_type, codec_subtype, data_kind, data_url, duration, eq_preset, format, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, has_video, relative_volume, sample_rate, start_time_ms, stop_time_ms, volume_normalization_energy FROM item_extra")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_video (item_pid INTEGER PRIMARY KEY, video_quality INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, has_chapter_data INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0)")
    && [v3 executeUpdate:@"INSERT INTO item_video (item_pid, video_quality, is_rental, has_chapter_data, season_number, episode_id, network_name, extended_content_rating, movie_info, has_alternate_audio, has_subtitles, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, is_demo) SELECT item_pid, is_hd, is_rental, has_chapter_data, season_number, episode_id, network_name, extended_content_rating, movie_info, has_alternate_audio, has_subtitles, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, is_demo FROM item_extra"])
  {
    uint64_t v5 = [[ML3MigrationAddedColumn alloc] initWithName:@"date_accessed" foreignTable:@"purgeable_list" foreignColumn:@"date_last_used" joinColumn:@"item_pid"];
    uint64_t v6 = [[ML3MigrationAddedColumn alloc] initWithName:@"is_alarm", @"purgeable_list", @"is_alarm", @"item_pid", v5 foreignTable foreignColumn joinColumn];
    v11[1] = v6;
    uint64_t v7 = [[ML3MigrationAddedColumn alloc] initWithName:@"chosen_by_auto_fill" foreignTable:@"item_extra" foreignColumn:@"chosen_by_auto_fill" joinColumn:@"item_pid"];
    v11[2] = v7;
    v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:3];

    if (ML3MigrationModifyTableWithResultingSchema(v3, @"item_stats", 0, v8, @"item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, is_downloading INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0")&& ML3MigrationModifyTableWithResultingSchema(v3, @"item_extra", 0, 0, @"item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, artwork_cache_id INTEGER NOT NULL DEFAULT 0, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0")&& [v3 executeUpdate:@"DROP TABLE purgeable_list"])
    {
      [v4 setNeedsToRecreateIndexes:1];
      [v4 setNeedsToRecreateTriggers:1];
      [v4 setCurrentUserVersion:1140119];
      uint64_t v9 = [v3 executeUpdate:@"PRAGMA user_version = 1140119;"];
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t ML3MigrationFunction1140119to1140120(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET sync_id = item_pid WHERE item_pid IN (SELECT item_pid from item JOIN base_location USING (base_location_id) WHERE base_location_id != 0 AND path != 'Purchases' AND path != 'CloudAssets')"))
  {
    [v4 setCurrentUserVersion:1140120];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140120;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140120to1140130(void *a1, void *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE item SET base_location_id = 200 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'CloudAssets')"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE base_location SET base_location_id = 200 WHERE path = 'CloudAssets'")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item SET base_location_id = 300 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'Purchases')")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item SET base_location_id = 300 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = '/var/mobile/Media/Purchases')")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE base_location SET base_location_id = 300 WHERE path = 'Purchases'"))
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", @"UPDATE item SET base_location_id = %d WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'iTunes_Control/Music/F%02d')", v5 | 0xF00, v5);
      int v7 = [v3 executeUpdate:v6];

      if (!v7) {
        break;
      }
      v8 = objc_msgSend(NSString, "stringWithFormat:", @"UPDATE base_location SET base_location_id = %d WHERE path = 'iTunes_Control/Music/F%02d'", v5 | 0xF00, v5);
      char v9 = [v3 executeUpdate:v8];

      if ((v9 & 1) == 0) {
        break;
      }
      uint64_t v5 = (v5 + 1);
      if (v5 == 50)
      {
        uint64_t v10 = [MEMORY[0x1E4F28CB8] defaultManager];
        uint64_t v11 = MLMobileUserHomeDirectory();
        unint64_t v12 = [v11 stringByAppendingPathComponent:@"Media/LoFiCloudAssets"];
        int v13 = [v10 createDirectoryAtPath:v12 withIntermediateDirectories:1 attributes:0 error:0];

        if (!v13) {
          break;
        }
        uint64_t v14 = [MEMORY[0x1E4F1CA48] array];
        uint64_t v15 = [v3 executeQuery:@"SELECT location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE is_streaming_quality = 1 AND path = 'CloudAssets' AND LENGTH(location) > 0"];
        v52[0] = MEMORY[0x1E4F143A8];
        v52[1] = 3221225472;
        v52[2] = __ML3MigrationFunction1140120to1140130_block_invoke;
        v52[3] = &unk_1E5FB83F8;
        id v16 = v14;
        id v53 = v16;
        [v15 enumerateRowsWithBlock:v52];
        if ([v3 executeUpdate:@"UPDATE item SET base_location_id = 100 WHERE item_pid IN (SELECT item_pid from item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE is_streaming_quality = 1 AND path = 'CloudAssets')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO base_location VALUES (100, 'LoFiCloudAssets')"))
        {
          v44 = v15;
          v45 = v4;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          id v43 = v16;
          id obj = v16;
          uint64_t v17 = [obj countByEnumeratingWithState:&v48 objects:v61 count:16];
          if (v17)
          {
            uint64_t v18 = v17;
            uint64_t v47 = *(void *)v49;
            do
            {
              for (uint64_t i = 0; i != v18; ++i)
              {
                if (*(void *)v49 != v47) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v20 = *(void *)(*((void *)&v48 + 1) + 8 * i);
                v21 = MLMobileUserHomeDirectory();
                v22 = [v21 stringByAppendingPathComponent:@"Media/CloudAssets"];
                v23 = [v22 stringByAppendingPathComponent:v20];

                v24 = MLMobileUserHomeDirectory();
                v25 = [v24 stringByAppendingPathComponent:@"Media/LoFiCloudAssets"];
                v26 = [v25 stringByAppendingPathComponent:v20];

                v27 = [v23 stringByDeletingPathExtension];
                v28 = [v27 stringByAppendingPathExtension:@".plist"];

                v29 = [v26 stringByDeletingPathExtension];
                v30 = [v29 stringByAppendingPathExtension:@".plist"];

                v31 = os_log_create("com.apple.amp.medialibrary", "Migration");
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543618;
                  v58 = v23;
                  __int16 v59 = 2114;
                  v60 = v26;
                  _os_log_impl(&dword_1B022D000, v31, OS_LOG_TYPE_ERROR, "Moving %{public}@ to %{public}@", buf, 0x16u);
                }

                v32 = [MEMORY[0x1E4F28CB8] defaultManager];
                [v32 moveItemAtPath:v23 toPath:v26 error:0];

                v33 = [MEMORY[0x1E4F28CB8] defaultManager];
                [v33 moveItemAtPath:v28 toPath:v30 error:0];
              }
              uint64_t v18 = [obj countByEnumeratingWithState:&v48 objects:v61 count:16];
            }
            while (v18);
          }

          if (ML3MigrationModifyTableWithResultingSchema(v3, @"item_stats", &unk_1F09125C8, 0, @"item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0"))
          {
            v34 = [[ML3MigrationAddedColumn alloc] initWithName:@"store_link_id" foreignTable:@"item" foreignColumn:@"store_link_id" joinColumn:@"item_pid"];
            v56 = v34;
            v35 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v56 count:1];

            id v4 = v45;
            if (ML3MigrationModifyTableWithResultingSchema(v3, @"item_store", &unk_1F09125F0, v35, @"item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0"))
            {
              v36 = [[ML3MigrationAddedColumn alloc] initWithName:@"category_id" foreignTable:@"item" foreignColumn:@"category_id" joinColumn:@"item_pid"];
              v55[0] = v36;
              v37 = [[ML3MigrationAddedColumn alloc] initWithName:@"location_kind_id" foreignTable:@"item" foreignColumn:@"location_kind_id" joinColumn:@"item_pid"];
              v55[1] = v37;
              v38 = [MEMORY[0x1E4F1C978] arrayWithObjects:v55 count:2];

              if (ML3MigrationModifyTableWithResultingSchema(v3, @"item_extra", 0, v38, @"item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, artwork_cache_id INTEGER NOT NULL DEFAULT 0, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0"))
              {
                v39 = [[ML3MigrationAddedColumn alloc] initWithName:@"remote_location_id" foreignTable:@"item_store" foreignColumn:@"(CASE WHEN store_saga_id != 0 THEN 200 ELSE (CASE WHEN purchase_history_id != 0 THEN 100 ELSE 0 END) END)" joinColumn:@"item_pid"];
                v54 = v39;
                v40 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v54 count:1];

                if (ML3MigrationModifyTableWithResultingSchema(v3, @"item", &unk_1F0912618, v40, @"item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER DEFAULT 0, track_number INTEGER DEFAULT 0, episode_sort_id INTEGER DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, is_video INTEGER NOT NULL DEFAULT 0, is_podcast INTEGER NOT NULL DEFAULT 0, is_itunes_u INTEGER NOT NULL DEFAULT 0")&& +[ML3MusicLibrary updateTrackIntegrityOnConnection:v3])
                {
                  [v45 setNeedsToRecreateIndexes:1];
                  [v45 setNeedsToRecreateTriggers:1];
                  [v45 setCurrentUserVersion:1140130];
                  uint64_t v41 = [v3 executeUpdate:@"PRAGMA user_version = 1140130;"];
                }
                else
                {
                  uint64_t v41 = 0;
                }
                id v16 = v43;
                uint64_t v15 = v44;
              }
              else
              {
                uint64_t v41 = 0;
                id v16 = v43;
                uint64_t v15 = v44;
              }
            }
            else
            {
              uint64_t v41 = 0;
              id v16 = v43;
              uint64_t v15 = v44;
            }
          }
          else
          {
            uint64_t v41 = 0;
            uint64_t v15 = v44;
            id v4 = v45;
            id v16 = v43;
          }
        }
        else
        {
          uint64_t v41 = 0;
        }

        goto LABEL_29;
      }
    }
  }
  uint64_t v41 = 0;
LABEL_29:

  return v41;
}

void __ML3MigrationFunction1140120to1140130_block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 stringForColumnIndex:0];
  [*(id *)(a1 + 32) addObject:v3];
}

uint64_t ML3MigrationFunction1140130to1140140(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_storebookmark_identifier (item_pid INTEGER PRIMARY KEY, storebookmark_identifier TEXT NOT NULL)"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1140140];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140140;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140140to1140150(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_update_item_setIsMediaColumns"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn")&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1140150];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140150;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140150to1140160(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN contained_media_type INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE container_item_media_type (container_pid INTEGER NOT NULL, media_type INTEGER NOT NULL, count INTEGER NOT NULL DEFAULT 0, UNIQUE(container_pid, media_type))"))
  {
    [v4 setCurrentUserVersion:1140160];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140160;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140160to1140170(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_upp (item_pid INTEGER PRIMARY KEY, bookkeeper_identifier TEXT NOT NULL, metadata_timestamp REAL DEFAULT NULL, metadata_entity_revision INTEGER DEFAULT NULL)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_upp (item_pid, bookkeeper_identifier, metadata_timestamp, metadata_entity_revision) SELECT item_pid, storebookmark_identifier, store_bookmark_timestamp, store_bookmark_entity_revision FROM item JOIN item_storebookmark_identifier USING(item_pid) JOIN item_stats USING(item_pid);")
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemStorebookmarkIdentifier_identifier"]&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemBookkeeperItemLookup")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE IF EXISTS item_storebookmark_identifier")&& ML3MigrationModifyTableWithResultingSchema(v3, @"item_stats", 0, 0, @"item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setNeedsToReloadStoreBookmarkMetadataIdentifiers:1];
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1140170];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140170;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140170to1140180(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_artist ADD COLUMN artist_artwork_cache_id TEXT NOT NULL DEFAULT ''"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_artist ADD COLUMN artist_artwork_cache_id TEXT NOT NULL DEFAULT ''"))
  {
    [v4 setCurrentUserVersion:1140180];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140180;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140180to1140190(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN is_ignorable_itunes_playlist INTEGER DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET is_ignorable_itunes_playlist = 1 WHERE (is_hidden = 1 AND distinguished_kind NOT IN (19, 20, 32))"))
  {
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1140190];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140190;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140190to1140200(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1140200];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1140200;"];

  return v4;
}

uint64_t ML3MigrationFunction1140200to1140210(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_update_container_setIsIgnorableITunesPlaylist"])
  {
    [v4 setCurrentUserVersion:1140210];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140210;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140210to1140230(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN screenshot_cache_id TEXT"])
  {
    [v4 setCurrentUserVersion:1140230];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140230;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140220to1140230()
{
  return 0;
}

uint64_t ML3MigrationFunction1140230to1140240(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE item SET base_location_id = 400 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'Podcasts')"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE base_location SET base_location_id = 400 WHERE path = 'Podcasts'")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item SET base_location_id = 400 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = '/var/mobile/Media/Podcasts')"))
  {
    [v4 setCurrentUserVersion:1140240];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140240;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140240to1140250(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setCurrentUserVersion:1140250];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1140250;"];
  return v5;
}

uint64_t ML3MigrationFunction1140250to1140260(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1140260];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1140260;"];

  return v4;
}

uint64_t ML3MigrationFunction1140260to1140300(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP INDEX IF EXISTS ItemLocation"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemTitle"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbum"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbumArtist"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemItemArtist"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemComposer"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemGenre"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1140300];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1140300;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140300to1140310(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1140310];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1140310;"];

  return v4;
}

uint64_t ML3MigrationFunction1140310to1140320(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 1;
  uint64_t v5 = [v3 executeQuery:@"select item_pid, item_extra.title, item_extra.total_time_ms from item_store join item_extra using (item_pid) where item_pid in (select sync_id from item_store where sync_id != 0) and sync_id = 0"];
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 3221225472;
  uint64_t v11 = __ML3MigrationFunction1140310to1140320_block_invoke;
  unint64_t v12 = &unk_1E5FB7618;
  id v6 = v3;
  id v13 = v6;
  uint64_t v14 = &v15;
  [v5 enumerateRowsWithBlock:&v9];
  objc_msgSend(v6, "executeUpdate:", @"update _MLDatabaseProperties set value=0 where key='MLSyncClientSyncAnchor'", v9, v10, v11, v12);
  if (*((unsigned char *)v16 + 24))
  {
    [v4 setCurrentUserVersion:1140320];
    uint64_t v7 = [v6 executeUpdate:@"PRAGMA user_version = 1140320;"];
  }
  else
  {
    uint64_t v7 = 0;
  }

  _Block_object_dispose(&v15, 8);
  return v7;
}

void sub_1B0325678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction1140310to1140320_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 int64ForColumnIndex:0];
  uint64_t v5 = [v3 stringForColumnIndex:1];
  id v6 = [v3 numberForColumnIndex:2];

  uint64_t v7 = *(void **)(a1 + 32);
  v8 = (void *)MEMORY[0x1E4F1C978];
  uint64_t v9 = [NSNumber numberWithLongLong:v4];
  uint64_t v10 = objc_msgSend(v8, "arrayWithObjects:", v9, v5, v6, 0);
  uint64_t v11 = [v7 executeQuery:@"select item_pid from item_store join item_extra using (item_pid) where item_store.sync_id = ? and (item_extra.title = ? or item_extra.total_time_ms = ?)" withParameters:v10];
  uint64_t v12 = [v11 int64ValueForFirstRowAndColumn];

  if (v12)
  {
    v23 = v5;
    id v13 = *(void **)(a1 + 32);
    uint64_t v14 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v15 = [NSNumber numberWithLongLong:v4];
    id v16 = [NSNumber numberWithLongLong:v4];
    uint64_t v17 = objc_msgSend(v14, "arrayWithObjects:", v15, v16, 0);
    LOBYTE(v13) = [v13 executeUpdate:@"update item_store set sync_id = ? where item_pid = ?" withParameters:v17 error:0];

    if (v13)
    {
      char v18 = (void *)MEMORY[0x1E4F1C978];
      v19 = [NSNumber numberWithLongLong:v12];
      uint64_t v20 = [v18 arrayWithObject:v19];

      uint64_t v5 = v23;
      if (![*(id *)(a1 + 32) executeUpdate:@"delete from item where item_pid = ?" withParameters:v20 error:0]|| !objc_msgSend(*(id *)(a1 + 32), "executeUpdate:withParameters:error:", @"delete from item_extra where item_pid = ?", v20, 0)|| !objc_msgSend(*(id *)(a1 + 32), "executeUpdate:withParameters:error:", @"delete from item_store where item_pid = ?", v20, 0)|| !objc_msgSend(*(id *)(a1 + 32),
                            "executeUpdate:withParameters:error:",
                            @"delete from item_stats where item_pid = ?",
                            v20,
                            0)
        || ![*(id *)(a1 + 32) executeUpdate:@"delete from item_playback where item_pid = ?" withParameters:v20 error:0]|| !objc_msgSend(*(id *)(a1 + 32), "executeUpdate:withParameters:error:", @"delete from item_search where item_pid = ?", v20, 0)|| !objc_msgSend(*(id *)(a1 + 32), "executeUpdate:withParameters:error:", @"delete from item_video where item_pid = ?", v20, 0)|| (objc_msgSend(*(id *)(a1 + 32),
              "executeUpdate:withParameters:error:",
              @"delete from entity_revision where entity_pid = ?",
              v20,
              0) & 1) == 0)
      {
        v21 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          uint64_t v25 = v4;
          _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_ERROR, "failed to delete duplicate item for %lld", buf, 0xCu);
        }

        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      }
    }
    else
    {
      v22 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v25 = v4;
        _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_ERROR, "failed to merge duplicate items for %lld", buf, 0xCu);
      }

      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      uint64_t v5 = v23;
    }
  }
}

uint64_t ML3MigrationFunction1140320to1150000(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1150000];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1150000;"];

  return v4;
}

uint64_t ML3MigrationFunction1150000to1150010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DELETE FROM entity_revision where class = 7"])
  {
    [v4 setCurrentUserVersion:1150010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1150010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150010to1150020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_insert_item_setIsMediaColumns;"]
    && [v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_update_item_setIsMediaColumns;"]
    && ML3MigrationModifyTableWithResultingSchema(v3, @"item", 0, 0, @"item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER DEFAULT 0, track_number INTEGER DEFAULT 0, episode_sort_id INTEGER DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1150020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1150020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150020to1150030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE item SET media_type = ML3StandardizedMediaType(media_type);"])
  {
    [v4 setNeedsToReloadContainerMediaTypes:1];
    [v4 setCurrentUserVersion:1150030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1150030;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150030to1150040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"update item_store set store_item_id = 0 where store_item_id = -1"])
  {
    [v4 setCurrentUserVersion:1150040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1150040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150040to1150050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN album_year INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album SET album_year = (SELECT IFNULL(MAX(year), 0) FROM item_extra JOIN item USING(item_pid) WHERE item.album_pid = album.album_pid)"))
  {
    [v4 setCurrentUserVersion:1150050];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1150050;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150050to1150060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item SET remote_location_id = (SELECT CASE WHEN home_sharing_id != 0 THEN 300 ELSE (CASE WHEN IFNULL(match_redownload_params, '') != '' THEN 200 ELSE (CASE WHEN IFNULL(purchase_history_redownload_params, '') != '' AND purchase_history_id != 0 THEN 100 ELSE 0 END) END) END FROM item_store WHERE item.item_pid = item_store.item_pid)"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1150060];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1150060;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150060to1150070(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1150070];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1150070;"];

  return v4;
}

uint64_t ML3MigrationFunction1150070to1150080(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (MGGetBoolAnswer()
    && ([v3 executeQuery:@"SELECT 1 FROM item WHERE media_type IN (4, 256) LIMIT 1"],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        int v6 = [v5 hasAtLeastOneRow],
        v5,
        v6)
    && ![v3 executeUpdate:@"INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'NeedToRemovePodcastsFromSiri')"])
  {
    uint64_t v7 = 0;
  }
  else
  {
    [v4 setCurrentUserVersion:1150080];
    uint64_t v7 = [v3 executeUpdate:@"PRAGMA user_version = 1150080;"];
  }

  return v7;
}

uint64_t ML3MigrationFunction1150080to1150090(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v22 = a2;
  id v4 = MLMobileUserHomeDirectory();
  uint64_t v5 = [v4 stringByAppendingPathComponent:@"Media"];

  int v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v7 = [v3 executeQuery:@"SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id != 0 AND item_extra.file_size = 0"];
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = __ML3MigrationFunction1150080to1150090_block_invoke;
  v27[3] = &unk_1E5FB6A00;
  id v20 = v5;
  id v28 = v20;
  id v19 = v6;
  id v29 = v19;
  id v9 = v8;
  id v30 = v9;
  v21 = v7;
  [v7 enumerateRowsWithBlock:v27];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v10 = v9;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        if ((objc_msgSend(v3, "executeUpdate:", v15, v19, v20) & 1) == 0)
        {
          id v16 = os_log_create("com.apple.amp.medialibrary", "Migration");
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v32 = v15;
            _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_ERROR, "Failed to update file size. %@", buf, 0xCu);
          }
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v23 objects:v33 count:16];
    }
    while (v12);
  }

  [v22 setCurrentUserVersion:1150090];
  uint64_t v17 = [v3 executeUpdate:@"PRAGMA user_version = 1150090;"];

  return v17;
}

void __ML3MigrationFunction1150080to1150090_block_invoke(uint64_t a1, void *a2)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 int64ForColumnIndex:0];
  uint64_t v5 = [v3 stringForColumnIndex:1];
  int v6 = [v3 stringForColumnIndex:2];

  uint64_t v7 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v16 = v4;
    _os_log_impl(&dword_1B022D000, v7, OS_LOG_TYPE_ERROR, "Found an item (%lld) that has a location in the database, but no file size.", buf, 0xCu);
  }

  id v8 = NSString;
  v19[0] = *(void *)(a1 + 32);
  v19[1] = v5;
  v19[2] = v6;
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:3];
  id v10 = [v8 pathWithComponents:v9];

  if ([*(id *)(a1 + 40) fileExistsAtPath:v10 isDirectory:0])
  {
    uint64_t v11 = [*(id *)(a1 + 40) attributesOfItemAtPath:v10 error:0];
    uint64_t v12 = [v11 fileSize];

    uint64_t v13 = objc_msgSend(NSString, "stringWithFormat:", @"UPDATE item_extra SET file_size = %zu WHERE item_pid = %lld", v12, v4);
    uint64_t v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v16 = v12;
      __int16 v17 = 2048;
      uint64_t v18 = v4;
      _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Computed %zu file size for item %lld.", buf, 0x16u);
    }

    [*(id *)(a1 + 48) addObject:v13];
  }
  else
  {
    uint64_t v13 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v16 = v4;
      _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_ERROR, "WARNING: item with pid %lld has a location in the database but no file on disk.", buf, 0xCu);
    }
  }
}

uint64_t ML3MigrationFunction1150090to1160000(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v5 = [&unk_1F090EA88 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v18;
    id v16 = v4;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(&unk_1F090EA88);
        }
        uint64_t v9 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        id v10 = [NSString stringWithFormat:@"ALTER TABLE %@ ADD COLUMN keep_local INTEGER NOT NULL DEFAULT 0", v9];
        int v11 = [v3 executeUpdate:v10];

        if (v11)
        {
          uint64_t v12 = [NSString stringWithFormat:@"ALTER TABLE %@ ADD COLUMN keep_local_status INTEGER NOT NULL DEFAULT 0", v9];
          int v13 = [v3 executeUpdate:v12];

          if (v13) {
            continue;
          }
        }
        uint64_t v14 = 0;
        id v4 = v16;
        goto LABEL_20;
      }
      uint64_t v6 = [&unk_1F090EA88 countByEnumeratingWithState:&v17 objects:v21 count:16];
      id v4 = v16;
      if (v6) {
        continue;
      }
      break;
    }
  }
  if ([v3 executeUpdate:@"CREATE INDEX IF NOT EXISTS ItemKeepLocal ON item (keep_local)"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ItemArtistKeepLocal ON item_artist (keep_local)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS AlbumKeepLocal ON album (keep_local)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS AlbumArtistKeepLocal ON album_artist (keep_local)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ContainerKeepLocal ON container (keep_local)")
    && [v3 executeUpdate:@"CREATE INDEX IF NOT EXISTS GenreKeepLocal ON genre (keep_local)"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ComposerKeepLocal ON composer (keep_local)"))
  {
    [v4 setCurrentUserVersion:1160000];
    uint64_t v14 = [v3 executeUpdate:@"PRAGMA user_version = 1160000;"];
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_20:

  return v14;
}

uint64_t ML3MigrationFunction1160000to1160010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN reserved TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:1160010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160010to1160020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN version TEXT NOT NULL DEFAULT ''"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN display_version TEXT NOT NULL DEFAULT ''")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_playback ADD COLUMN progression_direction INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store ADD COLUMN vpp_is_licensed INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store ADD COLUMN vpp_org_id INTEGER NOT NULL DEFAULT 0")
    && [v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN vpp_org_name TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:1160020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160020to1160030(void *a1, void *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_artwork (item_pid INTEGER PRIMARY KEY, best_artwork_token TEXT NOT NULL DEFAULT '', best_artwork_source_type INTEGER NOT NULL DEFAULT 0, cloud_artwork_token TEXT NOT NULL DEFAULT '', sync_artwork_token TEXT NOT NULL DEFAULT '', purchase_history_artwork_token TEXT NOT NULL DEFAULT '', store_artwork_token TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_screenshot (item_pid INTEGER PRIMARY KEY, best_screenshot_token TEXT NOT NULL DEFAULT '', best_screenshot_source_type INTEGER NOT NULL DEFAULT 0, cloud_screenshot_token TEXT NOT NULL DEFAULT '', sync_screenshot_token TEXT NOT NULL DEFAULT '', purchase_history_screenshot_token TEXT NOT NULL DEFAULT '', store_screenshot_token TEXT NOT NULL DEFAULT '')")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE artwork (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, relative_path TEXT NOT NULL DEFAULT '', artwork_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_token, artwork_source_type))")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_artwork (item_pid, cloud_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id != 0")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_artwork (item_pid, sync_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id = 0 AND sync_id != 0 AND artwork_cache_id < 10001")
    && [v3 executeUpdate:@"INSERT INTO item_artwork (item_pid, purchase_history_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id = 0 AND purchase_history_id != 0 AND sync_id = 0"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_screenshot (item_pid, cloud_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id != 0")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_screenshot (item_pid, sync_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id = 0 AND sync_id != 0 AND screenshot_cache_id < 10001")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_screenshot (item_pid, purchase_history_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id = 0 AND purchase_history_id != 0 AND sync_id = 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_artwork SET best_artwork_token = (CASE WHEN cloud_artwork_token != '' THEN cloud_artwork_token ELSE (CASE WHEN sync_artwork_token != '' THEN sync_artwork_token ELSE (CASE WHEN purchase_history_artwork_token != '' THEN purchase_history_artwork_token ELSE (CASE WHEN store_artwork_token != '' THEN store_artwork_token ELSE '' END) END) END) END), best_artwork_source_type = (CASE WHEN cloud_artwork_token != '' THEN 1 ELSE (CASE WHEN sync_artwork_token != '' THEN 2 ELSE (CASE WHEN purchase_history_artwork_token != '' THEN 3 ELSE (CASE WHEN store_artwork_token != '' THEN 4 ELSE 0 END) END) END) END)")
    && [v3 executeUpdate:@"UPDATE item_screenshot SET best_screenshot_token = (CASE WHEN cloud_screenshot_token != '' THEN cloud_screenshot_token ELSE (CASE WHEN sync_screenshot_token != '' THEN sync_screenshot_token ELSE (CASE WHEN purchase_history_screenshot_token != '' THEN purchase_history_screenshot_token ELSE (CASE WHEN store_screenshot_token != '' THEN store_screenshot_token ELSE '' END) END) END) END), best_screenshot_source_type = (CASE WHEN cloud_screenshot_token != '' THEN 1 ELSE (CASE WHEN sync_screenshot_token != '' THEN 2 ELSE (CASE WHEN purchase_history_screenshot_token != '' THEN 3 ELSE (CASE WHEN store_screenshot_token != '' THEN 4 ELSE 0 END) END) END) END)"])
  {
    uint64_t v5 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
    uint64_t v6 = ML3MigrationTemporaryPathFromPath(v5);
    uint64_t v7 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v58 = 0;
    [v7 createDirectoryAtPath:v6 withIntermediateDirectories:1 attributes:0 error:&v58];
    id v8 = v58;
    if (v8)
    {
      uint64_t v9 = _ML3LogCategoryMigration();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        id v60 = v8;
        _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_ERROR, "Failed to create temporary new artwork directory with error: %{public}@", buf, 0xCu);
      }
      uint64_t v10 = 0;
      goto LABEL_62;
    }
    v39 = v5;
    uint64_t v12 = [v3 executeQuery:@"SELECT DISTINCT(best_artwork_token), best_artwork_source_type FROM item_artwork WHERE best_artwork_token != ''"];
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 3221225472;
    v54[2] = __ML3MigrationFunction1160020to1160030_block_invoke;
    v54[3] = &unk_1E5FB6A00;
    v37 = v7;
    id v13 = v7;
    id v55 = v13;
    v38 = v6;
    id v14 = v6;
    id v56 = v14;
    id v15 = v3;
    id v57 = v15;
    uint64_t v34 = v12;
    [v12 enumerateRowsWithBlock:v54];
    id v16 = [v15 executeQuery:@"SELECT DISTINCT(best_screenshot_token), best_screenshot_source_type FROM item_screenshot WHERE best_screenshot_token != ''"];
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 3221225472;
    v50[2] = __ML3MigrationFunction1160020to1160030_block_invoke_993;
    v50[3] = &unk_1E5FB6A00;
    id v17 = v13;
    id v51 = v17;
    id v18 = v14;
    id v52 = v18;
    id v19 = v15;
    id v53 = v19;
    v36 = v16;
    [v16 enumerateRowsWithBlock:v50];
    long long v20 = [v19 executeQuery:@"SELECT item_pid, chapter_data FROM chapter JOIN item USING (item_pid) WHERE chapter_data IS NOT NULL"];
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 3221225472;
    v46[2] = __ML3MigrationFunction1160020to1160030_block_invoke_997;
    v46[3] = &unk_1E5FB6A00;
    id v21 = v17;
    id v47 = v21;
    id v22 = v18;
    id v48 = v22;
    id v23 = v19;
    id v49 = v23;
    v35 = v20;
    [v20 enumerateRowsWithBlock:v46];
    long long v24 = [v23 executeQuery:@"SELECT DISTINCT(artist_artwork_cache_id) FROM album_artist WHERE artist_artwork_cache_id != ''"];
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = __ML3MigrationFunction1160020to1160030_block_invoke_1009;
    v42[3] = &unk_1E5FB6A00;
    id v25 = v21;
    id v43 = v25;
    id v26 = v22;
    id v44 = v26;
    id v27 = v23;
    id v45 = v27;
    [v24 enumerateRowsWithBlock:v42];
    id v28 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
    LODWORD(v23) = [v25 fileExistsAtPath:v28];

    if (v23
      && (+[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", @"iTunes_Control/iTunes/Artwork"), v29 = objc_claimAutoreleasedReturnValue(), id v41 = 0, [v25 removeItemAtPath:v29 error:&v41], v30 = v41, v29, v30))
    {
      v31 = _ML3LogCategoryMigration();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        id v60 = v30;
        uint64_t v32 = "Failed to delete old artwork directory during migration with error: %{public}@";
LABEL_26:
        _os_log_impl(&dword_1B022D000, v31, OS_LOG_TYPE_ERROR, v32, buf, 0xCu);
      }
    }
    else
    {
      if (![v25 fileExistsAtPath:v26]
        || (id v40 = 0, [v25 moveItemAtPath:v26 toPath:v39 error:&v40],
                       (id v33 = v40) == 0))
      {
        if ([v27 executeUpdate:@"CREATE TABLE new_album (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v27, "executeUpdate:", @"INSERT INTO new_album (album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, artwork_cache_id, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album")&& objc_msgSend(v27, "executeUpdate:", @"UPDATE new_album SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'")&& objc_msgSend(v27, "executeUpdate:", @"DROP TABLE album")&& objc_msgSend(v27, "executeUpdate:", @"ALTER TABLE new_album RENAME TO album")&& objc_msgSend(v27, "executeUpdate:", @"CREATE TABLE new_item_artist (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', artist_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v27,
                             "executeUpdate:",
                             @"INSERT INTO new_item_artist (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, representative_item_pid, artist_artwork_token, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, representative_item_pid, artist_artwork_cache_id, keep_local, keep_local_status FROM item_artist")
          && [v27 executeUpdate:@"UPDATE new_item_artist SET representative_item_artwork_token = IFNULL( (SELECT best_artwork_token FROM item_artwork WHERE item_pid = representative_item_pid), '')"]&& objc_msgSend(v27, "executeUpdate:", @"DROP TABLE item_artist")&& objc_msgSend(v27, "executeUpdate:", @"ALTER TABLE new_item_artist RENAME TO item_artist")&& objc_msgSend(v27, "executeUpdate:", @"CREATE TABLE new_album_artist (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v27, "executeUpdate:", @"INSERT INTO new_album_artist (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_cache_id, representative_item_pid, artwork_cache_id, keep_local, keep_local_status FROM album_artist")&& objc_msgSend(v27, "executeUpdate:",
                             @"UPDATE new_album_artist SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'")
          && [v27 executeUpdate:@"DROP TABLE album_artist"]
          && [v27 executeUpdate:@"ALTER TABLE new_album_artist RENAME TO album_artist"]&& objc_msgSend(v27, "executeUpdate:", @"CREATE TABLE new_composer (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v27, "executeUpdate:", @"INSERT INTO new_composer (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, artwork_cache_id, keep_local, keep_local_status FROM composer")&& objc_msgSend(v27, "executeUpdate:", @"UPDATE new_composer SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'")&& objc_msgSend(v27, "executeUpdate:", @"DROP TABLE composer")&& objc_msgSend(v27, "executeUpdate:", @"ALTER TABLE new_composer RENAME TO composer")&& objc_msgSend(v27,
                             "executeUpdate:",
                             @"CREATE TABLE new_genre (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL UNIQUE, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")
          && [v27 executeUpdate:@"INSERT INTO new_genre (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM genre"]&& objc_msgSend(v27, "executeUpdate:", @"UPDATE new_genre SET representative_item_artwork_token = IFNULL( (SELECT best_artwork_token FROM item_artwork WHERE item_pid = representative_item_pid), '')")&& objc_msgSend(v27, "executeUpdate:", @"DROP TABLE genre")&& objc_msgSend(v27, "executeUpdate:", @"ALTER TABLE new_genre RENAME TO genre")&& objc_msgSend(v27, "executeUpdate:", @"CREATE TABLE new_item_extra (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '')")&& objc_msgSend(v27, "executeUpdate:", @"INSERT INTO new_item_extra (item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_compilation, is_audible_audio_book, date_created, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version) SELECT item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_compilation, is_audible_audio_book, date_created, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version FROM item_extra")&& objc_msgSend(v27, "executeUpdate:", @"DROP TABLE item_extra")&& objc_msgSend(v27, "executeUpdate:", @"ALTER TABLE new_item_extra RENAME TO item_extra")
          && [v27 executeUpdate:@"DROP TABLE artwork_info"]
          && [v27 executeUpdate:@"DROP TABLE IF EXISTS artwork_conversion"])
        {
          [v4 setNeedsToAutogenerateArtworkVariants:1];
          [v4 setNeedsToRecreateIndexes:1];
          [v4 setNeedsToRecreateTriggers:1];
          [v4 setCurrentUserVersion:1160030];
          uint64_t v10 = [v27 executeUpdate:@"PRAGMA user_version = 1160030;"];
LABEL_61:
          uint64_t v6 = v38;
          uint64_t v5 = v39;
          id v8 = 0;
          uint64_t v7 = v37;
          uint64_t v9 = v34;

LABEL_62:
          goto LABEL_17;
        }
LABEL_60:
        uint64_t v10 = 0;
        goto LABEL_61;
      }
      id v30 = v33;
      v31 = _ML3LogCategoryMigration();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        id v60 = v30;
        uint64_t v32 = "Failed to rename new temp artwork directory during migration with error: %{public}@";
        goto LABEL_26;
      }
    }

    goto LABEL_60;
  }
  uint64_t v10 = 0;
LABEL_17:

  return v10;
}

void __ML3MigrationFunction1160020to1160030_block_invoke(uint64_t a1, void *a2)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 stringForColumnIndex:0];
  int v5 = [v3 intForColumnIndex:1];

  uint64_t v6 = ML3MigrationPathFromArtworkCacheIDAsOf1160030(v4);
  if ([*(id *)(a1 + 32) fileExistsAtPath:v6])
  {
    uint64_t v7 = v5;
    id v8 = ML3MigrationRelativePathFromArtworkComponentsAsOf1160030((uint64_t)v4, 1, v5);
    uint64_t v9 = [*(id *)(a1 + 40) stringByAppendingPathComponent:v8];
    uint64_t v10 = [v9 stringByDeletingLastPathComponent];
    if (([*(id *)(a1 + 32) fileExistsAtPath:v10] & 1) == 0) {
      [*(id *)(a1 + 32) createDirectoryAtPath:v10 withIntermediateDirectories:1 attributes:0 error:0];
    }
    int v11 = *(void **)(a1 + 32);
    id v19 = 0;
    [v11 moveItemAtPath:v6 toPath:v9 error:&v19];
    id v12 = v19;
    if (v12)
    {
      id v13 = v12;
      id v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543874;
        id v21 = v6;
        __int16 v22 = 2114;
        id v23 = v9;
        __int16 v24 = 2114;
        id v25 = v13;
        _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Failed to migrate artwork from '%{public}@' to '%{public}@' with error: %{public}@", buf, 0x20u);
      }
    }
    else
    {
      id v15 = *(void **)(a1 + 48);
      v26[0] = v4;
      id v14 = [NSNumber numberWithInteger:v7];
      v26[1] = v14;
      v26[2] = v8;
      id v16 = [NSNumber numberWithInteger:1];
      v26[3] = v16;
      id v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:4];
      id v18 = 0;
      [v15 executeUpdate:@"INSERT INTO artwork (artwork_token, artwork_source_type, relative_path, artwork_type) VALUES (?,?,?,?)", v17, &v18 withParameters error];
      id v13 = v18;
    }
  }
}

void __ML3MigrationFunction1160020to1160030_block_invoke_993(uint64_t a1, void *a2)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 stringForColumnIndex:0];
  int v5 = [v3 intForColumnIndex:1];

  uint64_t v6 = ML3MigrationPathFromArtworkCacheIDAsOf1160030(v4);
  if ([*(id *)(a1 + 32) fileExistsAtPath:v6])
  {
    uint64_t v7 = v5;
    id v8 = ML3MigrationRelativePathFromArtworkComponentsAsOf1160030((uint64_t)v4, 2, v5);
    uint64_t v9 = [*(id *)(a1 + 40) stringByAppendingPathComponent:v8];
    uint64_t v10 = [v9 stringByDeletingLastPathComponent];
    if (([*(id *)(a1 + 32) fileExistsAtPath:v10] & 1) == 0) {
      [*(id *)(a1 + 32) createDirectoryAtPath:v10 withIntermediateDirectories:1 attributes:0 error:0];
    }
    int v11 = *(void **)(a1 + 32);
    id v19 = 0;
    [v11 moveItemAtPath:v6 toPath:v9 error:&v19];
    id v12 = v19;
    if (v12)
    {
      id v13 = v12;
      id v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543874;
        id v21 = v6;
        __int16 v22 = 2114;
        id v23 = v9;
        __int16 v24 = 2114;
        id v25 = v13;
        _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Failed to migrate screenshot from '%{public}@' to '%{public}@' with error: %{public}@", buf, 0x20u);
      }
    }
    else
    {
      id v15 = *(void **)(a1 + 48);
      v26[0] = v4;
      id v14 = [NSNumber numberWithInteger:v7];
      v26[1] = v14;
      v26[2] = v8;
      id v16 = [NSNumber numberWithInteger:2];
      v26[3] = v16;
      id v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:4];
      id v18 = 0;
      [v15 executeUpdate:@"INSERT INTO artwork (artwork_token, artwork_source_type, relative_path, artwork_type) VALUES (?,?,?,?)", v17, &v18 withParameters error];
      id v13 = v18;
    }
  }
}

void __ML3MigrationFunction1160020to1160030_block_invoke_997(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 int64ForColumnIndex:0];
  int v5 = [v3 dataForColumnIndex:1];

  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __ML3MigrationFunction1160020to1160030_block_invoke_2;
  v6[3] = &unk_1E5FAF700;
  id v7 = a1[4];
  uint64_t v10 = v4;
  id v8 = a1[5];
  id v9 = a1[6];
  +[MLITChapterTOC enumerateArtworkCacheIDsInFlattenedChapterData:v5 usingBlock:v6];
}

void __ML3MigrationFunction1160020to1160030_block_invoke_1009(uint64_t a1, void *a2)
{
  v23[4] = *MEMORY[0x1E4F143B8];
  id v3 = [a2 stringForColumnIndex:0];
  uint64_t v4 = ML3MigrationPathFromArtworkCacheIDAsOf1160030(v3);
  if ([*(id *)(a1 + 32) fileExistsAtPath:v4])
  {
    int v5 = ML3MigrationRelativePathFromArtworkComponentsAsOf1160030((uint64_t)v3, 4, 500);
    uint64_t v6 = [*(id *)(a1 + 40) stringByAppendingPathComponent:v5];
    id v7 = [v6 stringByDeletingLastPathComponent];
    if (([*(id *)(a1 + 32) fileExistsAtPath:v7] & 1) == 0) {
      [*(id *)(a1 + 32) createDirectoryAtPath:v7 withIntermediateDirectories:1 attributes:0 error:0];
    }
    id v8 = *(void **)(a1 + 32);
    id v16 = 0;
    [v8 moveItemAtPath:v4 toPath:v6 error:&v16];
    id v9 = v16;
    if (v9)
    {
      id v10 = v9;
      int v11 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543874;
        id v18 = v4;
        __int16 v19 = 2114;
        long long v20 = v6;
        __int16 v21 = 2114;
        id v22 = v10;
        _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_ERROR, "Failed to migrate artist hero artwork from '%{public}@' to '%{public}@' with error: %{public}@", buf, 0x20u);
      }
    }
    else
    {
      id v12 = *(void **)(a1 + 48);
      v23[0] = v3;
      int v11 = [NSNumber numberWithInteger:500];
      v23[1] = v11;
      v23[2] = v5;
      id v13 = [NSNumber numberWithInteger:4];
      v23[3] = v13;
      id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:4];
      id v15 = 0;
      [v12 executeUpdate:@"INSERT INTO artwork (artwork_token, artwork_source_type, relative_path, artwork_type) VALUES (?,?,?,?)", v14, &v15 withParameters error];
      id v10 = v15;
    }
  }
}

void __ML3MigrationFunction1160020to1160030_block_invoke_2(uint64_t a1, void *a2)
{
  void v27[4] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 length])
  {
    uint64_t v4 = ML3MigrationPathFromArtworkCacheIDAsOf1160030(v3);
    if ([*(id *)(a1 + 32) fileExistsAtPath:v4])
    {
      int v5 = objc_msgSend(NSString, "stringWithFormat:", @"chapter=%llu", *(void *)(a1 + 56));
      uint64_t v6 = [v3 rangeOfString:@"-"];
      if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      {
        id v7 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          id v22 = v3;
          _os_log_impl(&dword_1B022D000, v7, OS_LOG_TYPE_ERROR, "Encountered invalid chapter artwork_cache_id '%{public}@', skipping...", buf, 0xCu);
        }
      }
      else
      {
        id v7 = -[NSObject stringByReplacingCharactersInRange:withString:](v3, "stringByReplacingCharactersInRange:withString:", 0, v6, v5);
        id v8 = ML3MigrationRelativePathFromArtworkComponentsAsOf1160030((uint64_t)v7, 3, 0);
        id v9 = [*(id *)(a1 + 40) stringByAppendingPathComponent:v8];
        id v10 = [v9 stringByDeletingLastPathComponent];
        if (([*(id *)(a1 + 32) fileExistsAtPath:v10] & 1) == 0) {
          [*(id *)(a1 + 32) createDirectoryAtPath:v10 withIntermediateDirectories:1 attributes:0 error:0];
        }
        int v11 = *(void **)(a1 + 32);
        id v20 = 0;
        [v11 moveItemAtPath:v4 toPath:v9 error:&v20];
        id v12 = v20;
        if (v12)
        {
          id v13 = v12;
          id v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543874;
            id v22 = v4;
            __int16 v23 = 2114;
            __int16 v24 = v9;
            __int16 v25 = 2114;
            id v26 = v13;
            _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Failed to migrate chapter artwork from '%{public}@' to '%{public}@' with error: %{public}@", buf, 0x20u);
          }
        }
        else
        {
          id v15 = *(void **)(a1 + 48);
          v27[0] = v7;
          id v14 = [NSNumber numberWithInteger:0];
          v27[1] = v14;
          v27[2] = v8;
          [NSNumber numberWithInteger:3];
          id v16 = v18 = v8;
          v27[3] = v16;
          id v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:4];
          id v19 = 0;
          [v15 executeUpdate:@"INSERT INTO artwork (artwork_token, artwork_source_type, relative_path, artwork_type) VALUES (?,?,?,?)", v17, &v19 withParameters error];
          id v13 = v19;

          id v8 = v18;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B022D000, v4, OS_LOG_TYPE_ERROR, "Encountered missing chapter artwork_cache_id, skipping...", buf, 2u);
    }
  }
}

uint64_t ML3MigrationFunction1160030to1160040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"INSERT OR IGNORE INTO item_artwork (item_pid) SELECT item_pid FROM item"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT OR IGNORE INTO item_screenshot (item_pid) SELECT item_pid FROM item"))
  {
    [v4 setCurrentUserVersion:1160040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160040to1160050(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v22 = a2;
  id v4 = MLMobileUserHomeDirectory();
  uint64_t v5 = [v4 stringByAppendingPathComponent:@"Media"];

  uint64_t v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v7 = [v3 executeQuery:@"SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id != 0 AND item_extra.file_size = 0"];
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = __ML3MigrationFunction1160040to1160050_block_invoke;
  v27[3] = &unk_1E5FB6A00;
  id v20 = v5;
  id v28 = v20;
  id v19 = v6;
  id v29 = v19;
  id v9 = v8;
  id v30 = v9;
  __int16 v21 = v7;
  [v7 enumerateRowsWithBlock:v27];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v10 = v9;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        if ((objc_msgSend(v3, "executeUpdate:", v15, v19, v20) & 1) == 0)
        {
          id v16 = os_log_create("com.apple.amp.medialibrary", "Migration");
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            uint64_t v32 = v15;
            _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_ERROR, "Failed to update file size. %{public}@", buf, 0xCu);
          }
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v23 objects:v33 count:16];
    }
    while (v12);
  }

  [v22 setCurrentUserVersion:1160050];
  uint64_t v17 = [v3 executeUpdate:@"PRAGMA user_version = 1160050;"];

  return v17;
}

void __ML3MigrationFunction1160040to1160050_block_invoke(uint64_t a1, void *a2)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 int64ForColumnIndex:0];
  uint64_t v5 = [v3 stringForColumnIndex:1];
  uint64_t v6 = [v3 stringForColumnIndex:2];

  id v7 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v16 = v4;
    _os_log_impl(&dword_1B022D000, v7, OS_LOG_TYPE_ERROR, "Found an item (%lld) that has a location in the database, but no file size.", buf, 0xCu);
  }

  id v8 = NSString;
  v19[0] = *(void *)(a1 + 32);
  v19[1] = v5;
  v19[2] = v6;
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:3];
  id v10 = [v8 pathWithComponents:v9];

  if ([*(id *)(a1 + 40) fileExistsAtPath:v10 isDirectory:0])
  {
    uint64_t v11 = [*(id *)(a1 + 40) attributesOfItemAtPath:v10 error:0];
    uint64_t v12 = [v11 fileSize];

    uint64_t v13 = objc_msgSend(NSString, "stringWithFormat:", @"UPDATE item_extra SET file_size = %zu WHERE item_pid = %lld", v12, v4);
    id v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v16 = v12;
      __int16 v17 = 2048;
      uint64_t v18 = v4;
      _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Computed %zu file size for item %lld.", buf, 0x16u);
    }

    [*(id *)(a1 + 48) addObject:v13];
  }
  else
  {
    uint64_t v13 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v16 = v4;
      _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_ERROR, "WARNING: item with pid %lld has a location in the database but no file on disk.", buf, 0xCu);
    }
  }
}

uint64_t ML3MigrationFunction1160050to1160060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DELETE FROM artwork WHERE artwork_token=''"])
  {
    [v4 setCurrentUserVersion:1160060];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160060;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160060to1160070(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!ML3MigrationColumnExistsInTable(v3, @"extras_url", @"item_store")
    || [v3 executeUpdate:@"CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, reserved TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_store_new (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name FROM item_store")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_store")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store_new RENAME TO item_store"))
  {
    [v4 setCurrentUserVersion:1160070];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160070;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160070to1160080(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE item SET remote_location_id = (SELECT (CASE WHEN home_sharing_id != 0 THEN 300 ELSE (CASE WHEN IFNULL(match_redownload_params, '') != '' THEN 200 ELSE (CASE WHEN IFNULL(purchase_history_redownload_params, '') != '' AND purchase_history_id != 0 THEN 100 ELSE 0 END) END) END) FROM item_store WHERE item_store.item_pid = item.item_pid)"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1160080];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160080;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160080to1160090(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (MGGetBoolAnswer()
    && (int)[v4 originalUserVersion] > 1159999
    && ![v3 executeUpdate:@"INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'ResetSyncToRemoveMultiverseIdentifiersFromSiri')"])
  {
    uint64_t v5 = 0;
  }
  else
  {
    [v4 setCurrentUserVersion:1160090];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160090;"];
  }

  return v5;
}

uint64_t ML3MigrationFunction1160090to1160100(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0.0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill) SELECT item_pid, IFNULL(user_rating, 0), IFNULL(needs_restore, 0), download_identifier, IFNULL(play_count_user, 0), IFNULL(play_count_recent, 0), IFNULL(has_been_played, 0), IFNULL(date_played, 0), IFNULL(date_skipped, 0), IFNULL(date_accessed, 0), IFNULL(is_alarm, 0), IFNULL(skip_count_user, 0), IFNULL(skip_count_recent, 0), IFNULL(remember_bookmark, 0), IFNULL(bookmark_time_ms, 0.0), IFNULL(hidden, 0), IFNULL(chosen_by_auto_fill, 0) FROM item_stats")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_stats")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_stats_new RENAME TO item_stats"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1160100];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160100;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160100to1160110(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, reserved TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_store_new (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name FROM item_store")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store_new SET downloader_account_id = account_id WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id > 0 AND base_location_id <= 3840)"))
  {
    uint64_t v18 = v4;
    uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
    uint64_t v6 = [v3 executeQuery:@"SELECT item_pid, location FROM item JOIN item_extra USING (item_pid) WHERE base_location_id = 300"];
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __ML3MigrationFunction1160100to1160110_block_invoke;
    v23[3] = &unk_1E5FB83F8;
    id v7 = v5;
    id v24 = v7;
    __int16 v17 = v6;
    [v6 enumerateRowsWithBlock:v23];
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v8 = v7;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v19 objects:v27 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v20 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*((void *)&v19 + 1) + 8 * i);
          if (([v3 executeUpdate:v13] & 1) == 0)
          {
            id v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              uint64_t v26 = v13;
              _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Failed to update is_protected in item_store_new. %{public}@", buf, 0xCu);
            }
          }
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v19 objects:v27 count:16];
      }
      while (v10);
    }

    if ([v3 executeUpdate:@"UPDATE item_store_new SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item WHERE base_location_id IN (100, 200))"])
    {
      id v4 = v18;
      if ([v3 executeUpdate:@"UPDATE item_store_new SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id >= 3840 AND key_id > 0)"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_store")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store_new RENAME TO item_store"))
      {
        [v18 setNeedsToRecreateIndexes:1];
        [v18 setNeedsToRecreateTriggers:1];
        [v18 setCurrentUserVersion:1160110];
        uint64_t v15 = [v3 executeUpdate:@"PRAGMA user_version = 1160110;"];
      }
      else
      {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
      id v4 = v18;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void __ML3MigrationFunction1160100to1160110_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 int64ForColumnIndex:0];
  id v9 = [v3 stringForColumnIndex:1];

  uint64_t v5 = [v9 pathExtension];
  uint64_t v6 = [v5 lowercaseString];
  int v7 = [v6 isEqualToString:@"m4p"];

  if (v7)
  {
    id v8 = objc_msgSend(NSString, "stringWithFormat:", @"UPDATE item_store_new SET is_protected = 1 WHERE item_pid = %lld", v4);
    [*(id *)(a1 + 32) addObject:v8];
  }
}

uint64_t ML3MigrationFunction1160110to1160120(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE item_stats SET play_count_recent = 0 WHERE item_pid IN (SELECT item_pid from item WHERE remote_location_id = 200)"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_stats SET skip_count_recent = 0 WHERE item_pid IN (SELECT item_pid from item WHERE remote_location_id = 200)"))
  {
    [v4 setCurrentUserVersion:1160120];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160120;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160120to1160130(void *a1, void *a2)
{
  v114[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [MEMORY[0x1E4F1CA60] dictionary];
  v84 = v3;
  uint64_t v6 = [v3 executeQuery:@"SELECT artwork_token, relative_path FROM artwork"];
  v108[0] = MEMORY[0x1E4F143A8];
  v108[1] = 3221225472;
  v108[2] = __ML3MigrationFunction1160120to1160130_block_invoke;
  v108[3] = &unk_1E5FB83F8;
  id v7 = v5;
  id v109 = v7;
  [v6 enumerateRowsWithBlock:v108];
  if (![v7 count]) {
    goto LABEL_23;
  }
  v76 = v4;
  id v77 = v7;
  v75 = v6;
  id v8 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
  uint64_t v9 = ML3MigrationTemporaryPathFromPath(v8);
  uint64_t v10 = ML3MigrationArtworkCacheDirectoryAsOf1160130();
  uint64_t v11 = ML3MigrationTemporaryPathFromPath(v10);
  v74 = v8;
  v81 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v8 isDirectory:1];
  v73 = (void *)v9;
  v82 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v9 isDirectory:1];
  v72 = v10;
  uint64_t v12 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v10 isDirectory:1];
  v71 = (void *)v11;
  v80 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v11 isDirectory:1];
  uint64_t v13 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v14 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v15 = *MEMORY[0x1E4F1C628];
  v114[0] = *MEMORY[0x1E4F1C628];
  uint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v114 count:1];
  v78 = (void *)v12;
  v79 = v13;
  __int16 v17 = [v13 contentsOfDirectoryAtURL:v12 includingPropertiesForKeys:v16 options:4 error:0];

  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  id v18 = v17;
  uint64_t v19 = [v18 countByEnumeratingWithState:&v104 objects:v113 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v105;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v105 != v21) {
          objc_enumerationMutation(v18);
        }
        long long v23 = *(void **)(*((void *)&v104 + 1) + 8 * i);
        id v103 = 0;
        int v24 = [v23 getResourceValue:&v103 forKey:v15 error:0];
        id v25 = v103;
        uint64_t v26 = v25;
        if (v24 && [v25 BOOLValue]) {
          [v14 addObject:v23];
        }
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v104 objects:v113 count:16];
    }
    while (v20);
  }

  id v102 = 0;
  id v27 = v79;
  [v79 createDirectoryAtURL:v82 withIntermediateDirectories:1 attributes:0 error:&v102];
  id v28 = v102;
  if (v28)
  {
    id v29 = v28;
    id v30 = os_log_create("com.apple.amp.medialibrary", "Migration");
    v31 = v80;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v112 = v29;
      _os_log_impl(&dword_1B022D000, v30, OS_LOG_TYPE_ERROR, "Failed to create temporary new artwork directory with error: %{public}@", buf, 0xCu);
    }
    uint64_t v32 = v30;
    int v33 = 1;
    uint64_t v6 = v75;
    id v4 = v76;
    goto LABEL_16;
  }
  id v101 = 0;
  v31 = v80;
  [v79 createDirectoryAtURL:v80 withIntermediateDirectories:1 attributes:0 error:&v101];
  id v35 = v101;
  if (!v35)
  {
    id v40 = [MEMORY[0x1E4F1CA80] set];
    id v41 = [MEMORY[0x1E4F1CA48] array];
    v93[0] = MEMORY[0x1E4F143A8];
    v93[1] = 3221225472;
    v93[2] = __ML3MigrationFunction1160120to1160130_block_invoke_1202;
    v93[3] = &unk_1E5FAF728;
    id v42 = v81;
    id v94 = v42;
    id v43 = v79;
    id v95 = v43;
    id v44 = v82;
    id v96 = v44;
    id v70 = v40;
    id v97 = v70;
    id v98 = v14;
    id v83 = v80;
    id v99 = v83;
    id v45 = v41;
    v100 = v45;
    [v7 enumerateKeysAndObjectsUsingBlock:v93];
    v46 = [v42 path];
    LODWORD(v41) = [v43 fileExistsAtPath:v46];

    v69 = v45;
    if (v41
      && (v92 = 0, [v43 removeItemAtURL:v42 error:&v92], (id v47 = v92) != 0))
    {
      id v48 = v47;
      id v49 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v112 = v48;
        long long v50 = "Failed to delete original artwork directory during migration with error: %{public}@";
LABEL_33:
        _os_log_impl(&dword_1B022D000, v49, OS_LOG_TYPE_ERROR, v50, buf, 0xCu);
      }
    }
    else
    {
      id v51 = [v44 path];
      int v52 = [v43 fileExistsAtPath:v51];

      if (!v52
        || (v91 = 0, [v43 moveItemAtURL:v44 toURL:v42 error:&v91], (id v53 = v91) == 0))
      {
        v54 = [v78 path];
        int v55 = [v43 fileExistsAtPath:v54];

        if (!v55
          || (v90 = 0, [v43 removeItemAtURL:v78 error:&v90], (id v56 = v90) == 0))
        {
          id v58 = [v83 path];
          int v59 = [v43 fileExistsAtPath:v58];

          if (v59)
          {
            id v89 = 0;
            [v43 moveItemAtURL:v83 toURL:v78 error:&v89];
            id v68 = v89;
          }
          else
          {
            id v68 = 0;
          }
          id v60 = v84;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          uint64_t v61 = v45;
          uint64_t v62 = [v61 countByEnumeratingWithState:&v85 objects:v110 count:16];
          if (v62)
          {
            uint64_t v63 = v62;
            uint64_t v64 = *(void *)v86;
            do
            {
              for (uint64_t j = 0; j != v63; ++j)
              {
                if (*(void *)v86 != v64) {
                  objc_enumerationMutation(v61);
                }
                v66 = *(void **)(*((void *)&v85 + 1) + 8 * j);
                if (([v60 executeUpdate:v66] & 1) == 0)
                {
                  v67 = os_log_create("com.apple.amp.medialibrary", "Migration");
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138543362;
                    v112 = v66;
                    _os_log_impl(&dword_1B022D000, v67, OS_LOG_TYPE_ERROR, "Failed to update relative_path in artwork. %{public}@", buf, 0xCu);
                  }

                  id v60 = v84;
                }
              }
              uint64_t v63 = [v61 countByEnumeratingWithState:&v85 objects:v110 count:16];
            }
            while (v63);
          }

          id v4 = v76;
          [v76 setNeedsToAutogenerateArtworkVariants:1];
          int v33 = 0;
          uint64_t v6 = v75;
          id v27 = v79;
          id v48 = v68;
          goto LABEL_56;
        }
        id v48 = v56;
        id v57 = _ML3LogCategoryMigration();
        uint64_t v6 = v75;
        id v4 = v76;
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v112 = v48;
          _os_log_impl(&dword_1B022D000, v57, OS_LOG_TYPE_ERROR, "Failed to delete artwork cache directory during migration with error: %{public}@", buf, 0xCu);
        }

        int v33 = 1;
LABEL_40:
        id v27 = v79;
LABEL_56:

        v31 = v80;
        uint64_t v32 = v69;
        id v29 = v70;
LABEL_16:
        uint64_t v34 = v81;
        goto LABEL_21;
      }
      id v48 = v53;
      id v49 = _ML3LogCategoryMigration();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v112 = v48;
        long long v50 = "Failed to rename new temp artwork directory during migration with error: %{public}@";
        goto LABEL_33;
      }
    }

    int v33 = 1;
    uint64_t v6 = v75;
    id v4 = v76;
    goto LABEL_40;
  }
  id v29 = v35;
  v36 = os_log_create("com.apple.amp.medialibrary", "Migration");
  uint64_t v6 = v75;
  id v4 = v76;
  uint64_t v34 = v81;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v112 = v29;
    _os_log_impl(&dword_1B022D000, v36, OS_LOG_TYPE_ERROR, "Failed to create temporary new artwork cache directory with error: %{public}@", buf, 0xCu);
  }
  uint64_t v32 = v36;
  int v33 = 1;
  id v7 = v77;
LABEL_21:

  if (!v33)
  {
LABEL_23:
    [v4 setCurrentUserVersion:1160130];
    v38 = v84;
    uint64_t v37 = [v84 executeUpdate:@"PRAGMA user_version = 1160130;"];
    goto LABEL_24;
  }
  uint64_t v37 = 0;
  v38 = v84;
LABEL_24:

  return v37;
}

void __ML3MigrationFunction1160120to1160130_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = [v3 stringForColumnIndex:0];
  id v4 = [v3 stringForColumnIndex:1];

  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v5];
}

void __ML3MigrationFunction1160120to1160130_block_invoke_1202(uint64_t a1, void *a2, void *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v43 = v5;
  id v44 = ML3MigrationRelativePathFromArtworkTokenAsOf1160130(v5);
  id v7 = [*(id *)(a1 + 32) URLByAppendingPathComponent:v6];
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = [v7 path];
  LODWORD(v8) = [v8 fileExistsAtPath:v9];

  if (v8)
  {
    uint64_t v10 = [*(id *)(a1 + 48) URLByAppendingPathComponent:v44];
    uint64_t v11 = [v10 URLByDeletingLastPathComponent];
    if (([*(id *)(a1 + 56) containsObject:v11] & 1) == 0)
    {
      uint64_t v12 = *(void **)(a1 + 40);
      uint64_t v13 = [v11 path];
      LOBYTE(v12) = [v12 fileExistsAtPath:v13];

      if ((v12 & 1) == 0)
      {
        id v14 = *(void **)(a1 + 40);
        id v54 = 0;
        [v14 createDirectoryAtURL:v11 withIntermediateDirectories:1 attributes:0 error:&v54];
        id v15 = v54;
        if (v15)
        {
          uint64_t v16 = os_log_create("com.apple.amp.medialibrary", "Default");
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543618;
            id v57 = v11;
            __int16 v58 = 2114;
            id v59 = v15;
            _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_ERROR, "Failed to create artwork directory '%{public}@' with error: %{public}@", buf, 0x16u);
          }
        }
        else
        {
          [*(id *)(a1 + 56) addObject:v11];
        }
      }
    }
    __int16 v17 = *(void **)(a1 + 40);
    id v53 = 0;
    [v17 moveItemAtURL:v7 toURL:v10 error:&v53];
    id v18 = v53;
    if (v18)
    {
      uint64_t v19 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543874;
        id v57 = v7;
        __int16 v58 = 2114;
        id v59 = v10;
        __int16 v60 = 2114;
        id v61 = v18;
        _os_log_impl(&dword_1B022D000, v19, OS_LOG_TYPE_ERROR, "Failed to move original artwork from '%{public}@' to '%{public}@' with error: %{public}@", buf, 0x20u);
      }
    }
  }
  id v42 = v7;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = *(id *)(a1 + 64);
  uint64_t v20 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v50;
    do
    {
      uint64_t v23 = 0;
      uint64_t v45 = v21;
      do
      {
        if (*(void *)v50 != v22) {
          objc_enumerationMutation(obj);
        }
        int v24 = *(void **)(*((void *)&v49 + 1) + 8 * v23);
        id v25 = [v24 lastPathComponent];
        uint64_t v26 = [v24 URLByAppendingPathComponent:v6];
        id v27 = *(void **)(a1 + 40);
        id v28 = [v26 path];
        LODWORD(v27) = [v27 fileExistsAtPath:v28];

        if (v27)
        {
          id v29 = v6;
          id v30 = [*(id *)(a1 + 72) URLByAppendingPathComponent:v25];
          v31 = [v30 URLByAppendingPathComponent:v44];

          uint64_t v32 = [v31 URLByDeletingLastPathComponent];
          if (([*(id *)(a1 + 56) containsObject:v32] & 1) == 0)
          {
            int v33 = *(void **)(a1 + 40);
            uint64_t v34 = [v32 path];
            LOBYTE(v33) = [v33 fileExistsAtPath:v34];

            if ((v33 & 1) == 0)
            {
              id v35 = *(void **)(a1 + 40);
              id v48 = 0;
              [v35 createDirectoryAtURL:v32 withIntermediateDirectories:1 attributes:0 error:&v48];
              id v36 = v48;
              if (v36)
              {
                uint64_t v37 = os_log_create("com.apple.amp.medialibrary", "Default");
                if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543618;
                  id v57 = v32;
                  __int16 v58 = 2114;
                  id v59 = v36;
                  _os_log_impl(&dword_1B022D000, v37, OS_LOG_TYPE_ERROR, "Failed to create artwork cache directory '%{public}@' with error: %{public}@", buf, 0x16u);
                }
              }
              else
              {
                [*(id *)(a1 + 56) addObject:v32];
              }
            }
          }
          v38 = *(void **)(a1 + 40);
          id v47 = 0;
          [v38 moveItemAtURL:v26 toURL:v31 error:&v47];
          id v39 = v47;
          if (v39)
          {
            id v40 = os_log_create("com.apple.amp.medialibrary", "Default");
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543874;
              id v57 = v26;
              __int16 v58 = 2114;
              id v59 = v31;
              __int16 v60 = 2114;
              id v61 = v39;
              _os_log_impl(&dword_1B022D000, v40, OS_LOG_TYPE_ERROR, "Failed to move cached artwork from '%{public}@' to '%{public}@' with error: %{public}@", buf, 0x20u);
            }
          }
          id v6 = v29;
          uint64_t v21 = v45;
        }

        ++v23;
      }
      while (v21 != v23);
      uint64_t v21 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
    }
    while (v21);
  }

  id v41 = [NSString stringWithFormat:@"UPDATE artwork SET relative_path = '%@' WHERE artwork_token = '%@'", v44, v43];
  [*(id *)(a1 + 80) addObject:v41];
}

uint64_t ML3MigrationFunction1160130to1160140(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE container SET play_order = 40 WHERE store_cloud_id != 0 AND play_order = 37"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET play_order = 41 WHERE store_cloud_id != 0 AND play_order = 38")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET play_order = 43 WHERE store_cloud_id != 0 AND play_order = 39")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET play_order =  1 WHERE store_cloud_id != 0 AND play_order = 40")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET play_order = 44 WHERE store_cloud_id != 0 AND play_order = 41")
    && [v3 executeUpdate:@"UPDATE container SET play_order = 45 WHERE store_cloud_id != 0 AND play_order = 42"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET play_order = 46 WHERE store_cloud_id != 0 AND play_order = 43")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET play_order = 47 WHERE store_cloud_id != 0 AND play_order = 44")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET play_order = play_order + 4 WHERE store_cloud_id != 0 AND play_order >= 45 AND play_order <= 58")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET play_order = play_order + 5 WHERE store_cloud_id != 0 AND play_order >= 59"))
  {
    [v4 setCurrentUserVersion:1160140];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1160140;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160140to1160150(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [MEMORY[0x1E4F1CA60] dictionary];
  id v6 = [v3 executeQuery:@"SELECT location_kind_id, kind FROM location_kind"];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __ML3MigrationFunction1160140to1160150_block_invoke;
  v18[3] = &unk_1E5FB83F8;
  id v7 = v5;
  id v19 = v7;
  [v6 enumerateRowsWithBlock:v18];
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 1;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __ML3MigrationFunction1160140to1160150_block_invoke_2;
  v11[3] = &unk_1E5FAF750;
  id v8 = v3;
  id v12 = v8;
  uint64_t v13 = &v14;
  [v7 enumerateKeysAndObjectsUsingBlock:v11];
  if (*((unsigned char *)v15 + 24) && [v8 executeUpdate:@"DROP TABLE location_kind"])
  {
    [v4 setCurrentUserVersion:1160150];
    uint64_t v9 = [v8 executeUpdate:@"PRAGMA user_version = 1160150;"];
  }
  else
  {
    uint64_t v9 = 0;
  }

  _Block_object_dispose(&v14, 8);
  return v9;
}

void sub_1B0329D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction1160140to1160150_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = [v3 numberForColumnIndex:0];
  id v4 = [v3 stringForColumnIndex:1];

  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v5];
}

void __ML3MigrationFunction1160140to1160150_block_invoke_2(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if ([v8 length])
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = [NSNumber numberWithLongLong:ML3KindForString(v8)];
    v12[0] = v10;
    v12[1] = v7;
    uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:2];
    LOBYTE(v9) = [v9 executeUpdate:@"UPDATE item_extra set location_kind_id = ? WHERE location_kind_id = ?" withParameters:v11 error:0];

    if ((v9 & 1) == 0)
    {
      *a4 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
  }
}

uint64_t ML3MigrationFunction1160150to1160160(void *a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v6 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
  uint64_t v7 = ML3MigrationTemporaryPathFromPath(v6);
  id v8 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v6 isDirectory:1];
  uint64_t v37 = (void *)v7;
  uint64_t v9 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v7 isDirectory:1];
  uint64_t v10 = [v8 path];
  int v11 = [v5 fileExistsAtPath:v10];

  v38 = (void *)v9;
  if (!v11
    || (id v42 = 0,
        [v5 moveItemAtURL:v8 toURL:v9 error:&v42],
        (id v12 = v42) == 0))
  {
    id v36 = v4;
    uint64_t v16 = (void *)MEMORY[0x1E4F1CB10];
    char v17 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Originals"];
    uint64_t v13 = [v16 fileURLWithPath:v17 isDirectory:1];

    id v18 = [v13 URLByDeletingLastPathComponent];
    id v41 = 0;
    [v5 createDirectoryAtURL:v18 withIntermediateDirectories:1 attributes:0 error:&v41];
    uint64_t v14 = v41;

    if (v14)
    {
      id v19 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        id v44 = v14;
        _os_log_impl(&dword_1B022D000, v19, OS_LOG_TYPE_ERROR, "Failed to create intermediate directories for new original artwork directory during migration with error: %{public}@", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v20 = [v38 path];
      int v21 = [v5 fileExistsAtPath:v20];

      if (!v21
        || (id v40 = 0,
            [v5 moveItemAtURL:v38 toURL:v13 error:&v40],
            (uint64_t v22 = v40) == 0))
      {
        id v34 = v3;
        int v24 = (void *)MEMORY[0x1E4F1CB10];
        id v25 = ML3MigrationArtworkCacheDirectoryBefore1160160();
        id v19 = [v24 fileURLWithPath:v25 isDirectory:1];

        uint64_t v26 = (void *)MEMORY[0x1E4F1CB10];
        id v27 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
        id v28 = [v26 fileURLWithPath:v27 isDirectory:1];

        id v29 = [v19 path];
        LODWORD(v27) = [v5 fileExistsAtPath:v29];

        if (v27
          && (id v39 = 0,
              [v5 moveItemAtURL:v19 toURL:v28 error:&v39],
              (id v30 = v39) != 0))
        {
          v31 = v30;
          uint64_t v32 = os_log_create("com.apple.amp.medialibrary", "Migration");
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            id v44 = v31;
            _os_log_impl(&dword_1B022D000, v32, OS_LOG_TYPE_ERROR, "Failed to move to new cache artwork directory during migration with error: %{public}@", buf, 0xCu);
          }

          uint64_t v15 = 0;
          id v3 = v34;
        }
        else
        {
          objc_msgSend(v36, "setCurrentUserVersion:", 1160160, v34);
          id v3 = v35;
          uint64_t v15 = [v35 executeUpdate:@"PRAGMA user_version = 1160160;"];
        }

        goto LABEL_22;
      }
      id v19 = v22;
      uint64_t v23 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        id v44 = v19;
        _os_log_impl(&dword_1B022D000, v23, OS_LOG_TYPE_ERROR, "Failed to move to new original artwork directory during migration with error: %{public}@", buf, 0xCu);
      }
    }
    uint64_t v15 = 0;
LABEL_22:

    id v4 = v36;
    goto LABEL_23;
  }
  uint64_t v13 = v12;
  uint64_t v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    id v44 = v13;
    _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Failed to create new temp original artwork directory during migration with error: %{public}@", buf, 0xCu);
  }
  uint64_t v15 = 0;
LABEL_23:

  return v15;
}

uint64_t ML3MigrationFunction1160160to1162010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN sync_redownload_params TEXT NOT NULL DEFAULT ''"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn")&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1162010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1162010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162010to1162020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP INDEX IF EXISTS ItemTitle_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbum_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemItemArtist_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbumArtist_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemComposer_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemGenre_Section"])
  {
    [v4 setNeedsToUpdateSortMap:1];
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1162020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1162020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162020to1162030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP INDEX IF EXISTS ItemExtraDateModified"])
  {
    [v4 setNeedsToUpdateSortMap:1];
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1162030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1162030;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162030to1162040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP INDEX IF EXISTS ItemComposer"])
  {
    [v4 setNeedsToUpdateSortMap:1];
    [v4 setForceUpdateOriginals:1];
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1162040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1162040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162040to1162050(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:1162050];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1162050;"];
  return v5;
}

uint64_t ML3MigrationFunction1162050to1162060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_artwork (container_pid INTEGER PRIMARY KEY, best_artwork_token TEXT NOT NULL DEFAULT '', best_artwork_source_type INTEGER NOT NULL DEFAULT 0, cloud_artwork_token TEXT NOT NULL DEFAULT '', sync_artwork_token TEXT NOT NULL DEFAULT '', purchase_history_artwork_token TEXT NOT NULL DEFAULT '', store_artwork_token TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT OR IGNORE INTO container_artwork (container_pid) SELECT container_pid FROM container")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', reserved1 INTEGER NOT NULL DEFAULT 0, reserved2 TEXT NOT NULL DEFAULT '', reserved3 INTEGER NOT NULL DEFAULT 0, reserved4 INTEGER NOT NULL DEFAULT 0, reserved5 INTEGER NOT NULL DEFAULT 0, reserved6 TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, keep_local, keep_local_status FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container")&& objc_msgSend(v3,
                       "executeUpdate:",
                       @"CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0.0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0)")
    && [v3 executeUpdate:@"INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill) SELECT item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill FROM item_stats"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_stats")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_stats_new RENAME TO item_stats"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1162060];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1162060;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162060to1162070(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE local_playback_event (id INTEGER PRIMARY KEY AUTOINCREMENT, item_pid INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0)"])
  {
    [v4 setCurrentUserVersion:1162070];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1162070;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162070to1162080(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!ML3MigrationColumnExistsInTable(v3, @"store_item_pid", @"local_playback_event")
    || [v3 executeUpdate:@"CREATE TABLE local_playback_event_new (id INTEGER PRIMARY KEY AUTOINCREMENT, item_pid INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO local_playback_event_new (id, item_pid, store_item_id, date_played) SELECT id, item_pid, store_item_pid, date_played FROM local_playback_event")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE local_playback_event")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE local_playback_event_new RENAME TO local_playback_event"))
  {
    [v4 setCurrentUserVersion:1162080];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1162080;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162080to1162090(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', reserved1 INTEGER NOT NULL DEFAULT 0, reserved2 TEXT NOT NULL DEFAULT '', reserved3 INTEGER NOT NULL DEFAULT 0, reserved4 INTEGER NOT NULL DEFAULT 0, reserved5 INTEGER NOT NULL DEFAULT 0, reserved6 TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, reserved6, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, reserved6, keep_local, keep_local_status FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET is_editable = 1 WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND smart_is_genius = 0 AND is_hidden = 0 AND is_src_remote = 0"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1162090];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1162090;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162090to1162100(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status FROM item_artist")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_artist_new RENAME TO item_artist")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_artist SET store_id = IFNULL((SELECT store_artist_id FROM item JOIN item_store USING (item_pid) WHERE purchase_history_id != 0 AND item.item_artist_pid = item_artist.item_artist_pid), 0)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3,
                       "executeUpdate:",
                       @"INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token,representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token,representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status FROM album_artist")
    && [v3 executeUpdate:@"DROP TABLE album_artist"]
    && [v3 executeUpdate:@"ALTER TABLE album_artist_new RENAME TO album_artist"]
    && [v3 executeUpdate:@"UPDATE album_artist SET store_id = IFNULL((SELECT store_artist_id FROM item JOIN item_store USING (item_pid) WHERE purchase_history_id = 0 AND item.album_artist_pid = album_artist.album_artist_pid), 0)"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '')")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name, IFNULL(sync_redownload_params, '') FROM item_store")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_store")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store_new RENAME TO item_store"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1162100];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1162100;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162100to1162110(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:1162110];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1162110;"];
  return v5;
}

uint64_t ML3MigrationFunction1162110to1240000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN is_foreign INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, keep_local, keep_local_status FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1240000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1240000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1163070to1164010(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1164010];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1164010;"];

  return v4;
}

uint64_t ML3MigrationFunction1164010to1240000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN is_foreign INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_subscriber_count, cloud_subscriber_play_count, cloud_subscriber_like_count, keep_local, keep_local_status FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1240000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1240000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1240000to1240010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', is_playlist_only INTEGER NOT NULL DEFAULT 0, needs_reporting INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, is_playlist_only) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, is_foreign FROM item_store")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_store")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store_new RENAME TO item_store"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1240010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1240010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1240010to1240020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN matched_store_item_id INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3,
                       "executeUpdate:",
                       @"INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album")
    && [v3 executeUpdate:@"DROP TABLE album"]
    && [v3 executeUpdate:@"ALTER TABLE album_new RENAME TO album"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1240020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1240020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1240020to1240030(void *a1, void *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v28 = a2;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v32 = v3;
  id v27 = [v3 executeQuery:@"SELECT item.album_pid, album.album_artist_pid FROM item JOIN album USING (album_pid) GROUP BY item.album_pid HAVING COUNT(DISTINCT item.album_artist_pid) > 1"];
  v55[0] = MEMORY[0x1E4F143A8];
  v55[1] = 3221225472;
  void v55[2] = __ML3MigrationFunction1240020to1240030_block_invoke;
  v55[3] = &unk_1E5FB83F8;
  id v29 = v4;
  id v56 = v29;
  [v27 enumerateRowsWithBlock:v55];
  if (![v29 count]) {
    goto LABEL_25;
  }
  uint64_t v5 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = [v29 count];
    uint64_t v7 = [v29 allKeys];
    *(_DWORD *)buf = 134218242;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v7;
    _os_log_impl(&dword_1B022D000, v5, OS_LOG_TYPE_ERROR, "Repairing %lu misgrouped albums: %{public}@", buf, 0x16u);
  }
  uint64_t v26 = [v29 allKeys];
  id v25 = [v26 componentsJoinedByString:@", "];
  int v24 = [NSString stringWithFormat:@"SELECT ROWID, album_artist_pid, album_pid FROM item WHERE album_pid IN (%@)", v25];
  uint64_t v23 = [v32 executeQuery:v24];
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 3221225472;
  v53[2] = __ML3MigrationFunction1240020to1240030_block_invoke_1437;
  v53[3] = &unk_1E5FB83F8;
  id v8 = v29;
  id v54 = v8;
  [v23 enumerateRowsWithBlock:v53];
  [v8 allValues];
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v33 = [obj countByEnumeratingWithState:&v49 objects:v62 count:16];
  if (!v33)
  {

LABEL_25:
    [v28 setNeedsToUpdateSortMap:1];
    [v28 setForceUpdateOriginals:1];
    [v28 setCurrentUserVersion:1240030];
    uint64_t v21 = [v32 executeUpdate:@"PRAGMA user_version = 1240030;"];
    goto LABEL_26;
  }
  uint64_t v31 = *(void *)v50;
  int v35 = 1;
  do
  {
    uint64_t v9 = 0;
    do
    {
      if (*(void *)v50 != v31)
      {
        uint64_t v10 = v9;
        objc_enumerationMutation(obj);
        uint64_t v9 = v10;
      }
      uint64_t v34 = v9;
      id v36 = *(void **)(*((void *)&v49 + 1) + 8 * v9);
      id v11 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      id v12 = [v36 misgroupedTracks];
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      id v13 = v12;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v45 objects:v61 count:16];
      if (v14)
      {
        uint64_t v15 = *(void *)v46;
        do
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v46 != v15) {
              objc_enumerationMutation(v13);
            }
            char v17 = *(void **)(*((void *)&v45 + 1) + 8 * i);
            id v18 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v17, "albumArtistPID"));
            id v19 = [v11 objectForKeyedSubscript:v18];
            if (!v19)
            {
              id v19 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
              [v11 setObject:v19 forKeyedSubscript:v18];
            }
            [v19 addObject:v17];
          }
          uint64_t v14 = [v13 countByEnumeratingWithState:&v45 objects:v61 count:16];
        }
        while (v14);
      }

      uint64_t v41 = 0;
      id v42 = &v41;
      uint64_t v43 = 0x2020000000;
      char v44 = 0;
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      __int16 v58 = __Block_byref_object_copy__2386;
      id v59 = __Block_byref_object_dispose__2387;
      id v60 = 0;
      v37[0] = MEMORY[0x1E4F143A8];
      v37[1] = 3221225472;
      v37[2] = __ML3MigrationFunction1240020to1240030_block_invoke_1439;
      v37[3] = &unk_1E5FAF778;
      v37[4] = v36;
      id v39 = &v41;
      id v38 = v32;
      id v40 = buf;
      [v11 enumerateKeysAndObjectsUsingBlock:v37];
      int v20 = v35;
      if (!*((unsigned char *)v42 + 24)) {
        int v20 = 0;
      }
      int v35 = v20;

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(&v41, 8);

      uint64_t v9 = v34 + 1;
    }
    while (v34 + 1 != v33);
    uint64_t v33 = [obj countByEnumeratingWithState:&v49 objects:v62 count:16];
  }
  while (v33);

  if (v35) {
    goto LABEL_25;
  }
  uint64_t v21 = 0;
LABEL_26:

  return v21;
}

void sub_1B032B7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction1240020to1240030_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 int64ForColumnIndex:0];
  uint64_t v5 = [v3 int64ForColumnIndex:1];

  id v8 = [[ML3MigrationMisgroupedAlbum alloc] initWithAlbumPID:v4 albumArtistPID:v5];
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [NSNumber numberWithLongLong:v4];
  [v6 setObject:v8 forKeyedSubscript:v7];
}

void __ML3MigrationFunction1240020to1240030_block_invoke_1437(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 int64ForColumnIndex:0];
  uint64_t v5 = [v3 int64ForColumnIndex:1];
  id v8 = [v3 numberForColumnIndex:2];

  uint64_t v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v8];
  uint64_t v7 = [[ML3MigrationMisgroupedTrack alloc] initWithPersistentID:v4 albumArtistPID:v5];
  [v6 addMisgroupedTrack:v7];
}

uint64_t __Block_byref_object_copy__2386(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2387(uint64_t a1)
{
}

void __ML3MigrationFunction1240020to1240030_block_invoke_1439(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  uint64_t v8 = [a2 longLongValue];
  if (v8 != [*(id *)(a1 + 32) albumArtistPID])
  {
    uint64_t v9 = *(void **)(a1 + 40);
    uint64_t v10 = [*(id *)(a1 + 32) albumPID];
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    id obj = *(id *)(v11 + 40);
    LOBYTE(v9) = ML3MigrationCreateNewAlbumForMisgroupedTracks(v9, v10, v7, &obj);
    objc_storeStrong((id *)(v11 + 40), obj);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)v9;
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      id v12 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138543362;
        uint64_t v16 = v13;
        _os_log_impl(&dword_1B022D000, v12, OS_LOG_TYPE_ERROR, "Error while splitting misgrouped track into new album. %{public}@", buf, 0xCu);
      }

      *a4 = 1;
    }
  }
}

uint64_t ML3MigrationFunction1240030to1240040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE album SET sort_album = NULL WHERE sort_album = ''"])
  {
    [v4 setNeedsToUpdateSortMap:1];
    [v4 setForceUpdateOriginals:1];
    [v4 setCurrentUserVersion:1240040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1240040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1240040to1260000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE lyrics_new (item_pid INTEGER PRIMARY KEY, checksum INTEGER NOT NULL DEFAULT 0, pending_checksum INTEGER NOT NULL DEFAULT 0, lyrics TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO lyrics_new (item_pid, checksum, pending_checksum, lyrics) SELECT item_pid, IFNULL(checksum, 0), IFNULL(checksum, 0), IFNULL(lyrics, '') FROM lyrics")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE lyrics")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE lyrics_new RENAME TO lyrics"))
  {
    [v4 setCurrentUserVersion:1260000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1260000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1260000to1280000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN playback_endpoint_type INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store ADD COLUMN is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1280000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280000to1280010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, @"pending_checksum", @"lyrics") & 1) != 0
    || [v3 executeUpdate:@"CREATE TABLE lyrics_new (item_pid INTEGER PRIMARY KEY, checksum INTEGER NOT NULL DEFAULT 0, pending_checksum INTEGER NOT NULL DEFAULT 0, lyrics TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO lyrics_new (item_pid, checksum, pending_checksum, lyrics) SELECT item_pid, IFNULL(checksum, 0), IFNULL(checksum, 0), IFNULL(lyrics, '') FROM lyrics")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE lyrics")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE lyrics_new RENAME TO lyrics"))
  {
    [v4 setCurrentUserVersion:1280010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280010to1280020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE artwork_token (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type))"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE best_artwork_token (entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, available_artwork_token TEXT NOT NULL DEFAULT '', fetchable_artwork_token TEXT NOT NULL DEFAULT '', fetchable_artwork_source_type INTEGER NOT NULL DEFAULT 0, UNIQUE (entity_pid, entity_type, artwork_type))")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX ArtworkTokenArtworkToken ON artwork_token (artwork_token)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX ArtworkTokenEntityPIDEntityType ON artwork_token (entity_pid, entity_type)")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE artwork ADD COLUMN interest_data BLOB")&& objc_msgSend(v3, "executeUpdate:",
                       @"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT cloud_artwork_token, 1, 1, item_pid, 0 FROM item_artwork WHERE cloud_artwork_token != ''")
    && [v3 executeUpdate:@"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT sync_artwork_token, 2, 1, item_pid, 0 FROM item_artwork WHERE sync_artwork_token != ''"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT purchase_history_artwork_token, 3, 1, item_pid, 0 FROM item_artwork WHERE purchase_history_artwork_token != ''")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT store_artwork_token, 4, 1, item_pid, 0 FROM item_artwork WHERE store_artwork_token != ''")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT cloud_screenshot_token, 1, 2, item_pid, 0 FROM item_screenshot WHERE cloud_screenshot_token != ''")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT sync_screenshot_token, 2, 2, item_pid, 0 FROM item_screenshot WHERE sync_screenshot_token != ''")
    && [v3 executeUpdate:@"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT purchase_history_screenshot_token, 3, 2, item_pid, 0 FROM item_screenshot WHERE purchase_history_screenshot_token != ''"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT store_screenshot_token, 4, 2, item_pid, 0 FROM item_screenshot WHERE store_screenshot_token != ''")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT artist_artwork_token, 4, 4, item_artist_pid, 2 FROM item_artist WHERE artist_artwork_token != ''")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT artist_artwork_token, 4, 4, album_artist_pid, 7 FROM album_artist WHERE artist_artwork_token != ''")&& (ML3MigrationUpdateAllBestArtworkTokens(v3), objc_msgSend(v3, "executeUpdate:",
                        @"CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))
    && [v3 executeUpdate:@"INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE album")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_new RENAME TO album")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status FROM item_artist")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_artist_new RENAME TO item_artist")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0,  store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")
    && [v3 executeUpdate:@"INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status FROM album_artist"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE album_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_artist_new RENAME TO album_artist")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM composer")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE composer")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE composer_new RENAME TO composer")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL UNIQUE, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")
    && [v3 executeUpdate:@"INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM genre"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE genre")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE genre_new RENAME TO genre")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container_artwork")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_artwork")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_screenshot"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280020to1280030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 schemaDeleteColumn:@"is_playlist_only" inTable:@"item_store"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280030;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280030to1280040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 schemaRenameColumn:@"matched_store_item_id" inTable:@"item_store" toNewColumnName:@"subscription_store_item_id"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    __int16 v14 = 0;
    id v7 = "Failed to rename matched_store_item_id column.";
    uint64_t v8 = (uint8_t *)&v14;
LABEL_17:
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_18;
  }
  if (([v3 schemaAddColumnDefinition:@"playlist_author_id TEXT NOT NULL DEFAULT ''" toTable:@"container"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    __int16 v13 = 0;
    id v7 = "Failed to add playlist_author_id column.";
    uint64_t v8 = (uint8_t *)&v13;
    goto LABEL_17;
  }
  if (([v3 schemaAddColumnDefinition:@"radio_station_id TEXT NOT NULL DEFAULT ''" toTable:@"item_store"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    __int16 v12 = 0;
    id v7 = "Failed to add radio_station_id column.";
    uint64_t v8 = (uint8_t *)&v12;
    goto LABEL_17;
  }
  if (([v3 schemaAddColumnDefinition:@"advertisement_unique_id INTEGER NOT NULL DEFAULT 0" toTable:@"item_store"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    __int16 v11 = 0;
    id v7 = "Failed to add advertisement_unique_id column.";
    uint64_t v8 = (uint8_t *)&v11;
    goto LABEL_17;
  }
  if (([v3 schemaAddColumnDefinition:@"advertisement_type INTEGER NOT NULL DEFAULT 0" toTable:@"item_store"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      id v7 = "Failed to add advertisement_type column.";
      uint64_t v8 = (uint8_t *)&v10;
      goto LABEL_17;
    }
LABEL_18:

    uint64_t v5 = 0;
    goto LABEL_19;
  }
  [v4 setNeedsToRecreateIndexes:1];
  [v4 setNeedsToRecreateTriggers:1];
  [v4 setCurrentUserVersion:1280040];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280040;"];
LABEL_19:

  return v5;
}

uint64_t ML3MigrationFunction1280040to1280050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0,date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1,is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0,is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0,play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0,smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0,smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0,smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0,album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0,filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0,container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0,has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0,cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_id TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0,cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280050];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280050;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280050to1280060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE artwork_token SET artwork_source_type = 200 WHERE artwork_source_type = 1"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE best_artwork_token SET fetchable_artwork_source_type = 200 WHERE fetchable_artwork_source_type = 1")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE artwork SET artwork_source_type = 200 WHERE artwork_source_type = 1")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE artwork_token SET artwork_source_type = 300 WHERE artwork_source_type = 2")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE best_artwork_token SET fetchable_artwork_source_type = 300 WHERE fetchable_artwork_source_type = 2")
    && [v3 executeUpdate:@"UPDATE artwork SET artwork_source_type = 300 WHERE artwork_source_type = 2"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE artwork_token SET artwork_source_type = 400 WHERE artwork_source_type = 3")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE best_artwork_token SET fetchable_artwork_source_type = 400 WHERE fetchable_artwork_source_type = 3")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE artwork SET artwork_source_type = 400 WHERE artwork_source_type = 3")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE artwork_token SET artwork_source_type = 500 WHERE artwork_source_type = 4")
    && [v3 executeUpdate:@"UPDATE best_artwork_token SET fetchable_artwork_source_type = 500 WHERE fetchable_artwork_source_type = 4"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE artwork SET artwork_source_type = 500 WHERE artwork_source_type = 4")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE artwork_token_new (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_source_type, artwork_type, entity_pid, entity_type))")&& objc_msgSend(v3, "executeUpdate:", @"INSERT OR REPLACE INTO artwork_token_new SELECT * FROM artwork_token")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE artwork_token")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE artwork_token_new RENAME TO artwork_token"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280060];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280060;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280060to1280070(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToUpdateSortMap:1];
  [v3 setForceUpdateOriginals:1];
  [v3 setCurrentUserVersion:1280070];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1280070;"];
  return v5;
}

uint64_t ML3MigrationFunction1280070to1280080(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, @"radio_station_id", @"item_store") & 1) != 0
    || [v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN radio_station_id TEXT NOT NULL DEFAULT ''"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store ADD COLUMN advertisement_unique_id INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store ADD COLUMN advertisement_type INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1280080];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280080;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280080to1280090(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToUpdateSortMap:1];
  [v3 setForceUpdateOriginals:1];
  [v3 setCurrentUserVersion:1280090];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1280090;"];
  return v5;
}

uint64_t ML3MigrationFunction1280090to1280100(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP INDEX IF EXISTS ItemMediaType"])
  {
    [v4 setNeedsToUpdateSortMap:1];
    [v4 setForceUpdateOriginals:1];
    [v4 setCurrentUserVersion:1280100];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280100;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280100to1280110(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280110];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280110;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280110to1280120(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"PRAGMA auto_vacuum = 0;"])
  {
    [v4 setCurrentUserVersion:1280120];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280120;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280120to1280130(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_seed_new (container_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, seed_order INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_seed_new (container_pid, item_pid, seed_order) SELECT container_pid, item_pid, seed_order FROM container_seed")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container_seed")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_seed_new RENAME TO container_seed"))
  {
    [v4 setCurrentUserVersion:1280130];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280130;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280130to1280140(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1280140];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280140;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280140to1280150(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', needs_reporting INTEGER NOT NULL DEFAULT 0, subscription_store_item_id INTEGER NOT NULL DEFAULT 0, playback_endpoint_type INTEGER NOT NULL DEFAULT 0, is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0, radio_station_id TEXT NOT NULL DEFAULT '', advertisement_unique_id TEXT NOT NULL DEFAULT '', advertisement_type INTEGER NOT NULL DEFAULT 0, is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0, cloud_asset_available INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_type, is_artist_uploaded_content) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_type, is_artist_uploaded_content FROM item_store")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_store")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store_new RENAME TO item_store"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280150];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280150;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280150to1280160(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP INDEX IF EXISTS ItemTitle"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemTitle_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbum"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbum_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemItemArtist"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemItemArtist_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbumArtist"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemAlbumArtist_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemComposer"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemComposer_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemGenre"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemGenre_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemSeries"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemSeries_Section"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemExtraDateCreated"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemExtraIsCompilation"]
    && [v3 executeUpdate:@"ALTER TABLE item ADD COLUMN in_my_library INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item ADD COLUMN is_compilation INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item ADD COLUMN date_added INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item SET in_my_library = (remote_location_id != 250), is_compilation = (SELECT is_compilation FROM item_extra WHERE item.item_pid = item_extra.item_pid), date_added = (SELECT date_created FROM item_extra WHERE item.item_pid = item_extra.item_pid)")&& objc_msgSend(v3, "schemaDeleteColumns:inTable:", &unk_1F090EAA0, @"item_extra"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280160];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280160;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280160to1280170(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1280170];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1280170;"];

  return v4;
}

uint64_t ML3MigrationFunction1280170to1280180(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_artist ADD COLUMN app_data BLOB"]
    && [v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN app_data BLOB"])
  {
    [v4 setCurrentUserVersion:1280180];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280180;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280180to1280190(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN is_subscription INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn")&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280190];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280190;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280190to1280200(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE item_store SET store_saga_id = 0 WHERE store_saga_id = -3"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn")&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item SET remote_location_id = 50 WHERE (remote_location_id = 250 OR remote_location_id  = 201) AND (SELECT 1 FROM item_store WHERE item.item_pid = item_store.item_pid AND subscription_store_item_id != 0)")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET cloud_asset_available = 1 WHERE IFNULL(purchase_history_redownload_params, '') != '' OR IFNULL(match_redownload_params, '') != ''"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280200];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280200;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280200to1280210(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TABLE local_playback_event"])
  {
    [v4 setCurrentUserVersion:1280210];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280210;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280210to1280220(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280220];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280220;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280220to1280230(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE item SET keep_local = 1 WHERE base_location_id >= 300"])
  {
    [v4 setCurrentUserVersion:1280230];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280230;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280230to1280240(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET distinguished_kind = 10000 WHERE distinguished_kind = 35"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280240];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280240;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280240to1280250(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:1280250];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1280250;"];
  return v5;
}

uint64_t ML3MigrationFunction1280250to1280260(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container"))
  {
    [v3 executeUpdate:@"UPDATE _MLDatabaseProperties SET value = 0 WHERE key = 'MLSyncClientSyncAnchor'"];
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280260];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280260;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280260to1280270(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_seed_new (container_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, seed_order INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_seed_new (container_pid, item_pid, seed_order) SELECT container_pid, item_pid, seed_order FROM container_seed")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container_seed")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_seed_new RENAME TO container_seed"))
  {
    [v4 setCurrentUserVersion:1280270];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280270;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280270to1280280(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET store_saga_id=store_saga_id"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1280280];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1280280;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280280to1290000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_stats ADD COLUMN liked_state_changed INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1290000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1290000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1290000to1290010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP INDEX IF EXISTS ItemArtistRepresentativeItemPID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS AlbumArtistRepresentativeItemPID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS GenreRepresentativeItemPID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ComposerRepresentativeItemPID"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1290010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1290010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1290010to1310020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store ADD COLUMN sync_in_my_library INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET sync_in_my_library = 1 WHERE sync_id != 0"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1310020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1310020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1310020to1310030(void *a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 executeQuery:@"SELECT item_pid FROM item WHERE (media_type & 8 != 0) AND album_pid = 0"];
  uint64_t v6 = [v5 objectsInColumn:0];

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = v6;
  uint64_t v7 = [obj countByEnumeratingWithState:&v32 objects:v43 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v31 = *(void *)v33;
    id v29 = v4;
    while (2)
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v33 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v32 + 1) + 8 * v9);
        uint64_t valuePtr = ML3CreateIntegerUUID();
        for (CFNumberRef i = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr); ; CFNumberRef i = v15)
        {
          CFNumberRef v42 = i;
          __int16 v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v42 count:1];
          __int16 v13 = [v3 executeQuery:@"SELECT 1 FROM album WHERE album_pid = ?" withParameters:v12];
          int v14 = [v13 hasAtLeastOneRow];

          if (!v14) {
            break;
          }
          uint64_t valuePtr = ML3CreateIntegerUUID();
          CFNumberRef v15 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
        }
        v41[0] = i;
        v41[1] = v10;
        uint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v41 count:2];
        int v17 = [v3 executeUpdate:@"INSERT INTO album (album_pid, representative_item_pid) VALUES(?, ?)", v16, 0 withParameters error];

        if (!v17) {
          goto LABEL_17;
        }
        v40[0] = i;
        v40[1] = v10;
        id v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:v40 count:2];
        int v19 = [v3 executeUpdate:@"UPDATE item SET album_pid = ? WHERE item_pid = ?" withParameters:v18 error:0];

        if (!v19) {
          goto LABEL_17;
        }
        uint64_t v39 = v10;
        int v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v39 count:1];
        int v21 = [v3 executeUpdate:@"INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 0, 0)", v20, 0 withParameters error];

        if (!v21
          || (uint64_t v38 = v10,
              [MEMORY[0x1E4F1C978] arrayWithObjects:&v38 count:1],
              uint64_t v22 = objc_claimAutoreleasedReturnValue(),
              int v23 = [v3 executeUpdate:@"DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > 0" withParameters:v22 error:0], v22, !v23))
        {
LABEL_17:

LABEL_18:
          uint64_t v26 = obj;

          uint64_t v27 = 0;
          id v4 = v29;
          goto LABEL_19;
        }
        CFNumberRef v37 = i;
        int v24 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v37 count:1];
        int v25 = [v3 executeUpdate:@"INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 4, 0)", v24, 0 withParameters error];

        if (!v25) {
          goto LABEL_18;
        }
        ++v9;
      }
      while (v9 != v8);
      uint64_t v8 = [obj countByEnumeratingWithState:&v32 objects:v43 count:16];
      id v4 = v29;
      if (v8) {
        continue;
      }
      break;
    }
  }
  uint64_t v26 = obj;

  [v4 setCurrentUserVersion:1310030];
  uint64_t v27 = [v3 executeUpdate:@"PRAGMA user_version = 1310030;"];
LABEL_19:

  return v27;
}

uint64_t ML3MigrationFunction1310030to1310040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DELETE FROM best_artwork_token WHERE available_artwork_token = '' AND fetchable_artwork_token = ''"])
  {
    [v4 setCurrentUserVersion:1310040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1310040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1310040to1310050(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1310050];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1310050;"];

  return v4;
}

uint64_t ML3MigrationFunction1310050to1320000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET playback_endpoint_type = 1 WHERE store_saga_id = 0 AND purchase_history_id != 0 AND playback_endpoint_type = 3"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1320000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1320000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1320000to1330000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE item_store SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id >= 3840 AND is_protected = 0 AND key_id != 0)"])
  {
    [v4 setCurrentUserVersion:1330000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1330000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1330000to1330010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item ADD COLUMN show_composer INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1330010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1330010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1330010to1350010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN app_data BLOB"])
  {
    [v4 setCurrentUserVersion:1350010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1350010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350000to1350010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE album SET app_data = NULL WHERE LENGTH(app_data) = 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_artist SET app_data = NULL WHERE LENGTH(app_data) = 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album_artist SET app_data = NULL WHERE LENGTH(app_data) = 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album SET grouping_key = NULL WHERE LENGTH(grouping_key) = 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET smart_criteria = NULL WHERE LENGTH(smart_criteria) = 0")
    && [v3 executeUpdate:@"UPDATE container_items SET item_pid_data = NULL WHERE LENGTH(item_pid_data) = 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE chapter SET chapter_data = NULL WHERE LENGTH(chapter_data) = 0"))
  {
    [v4 setCurrentUserVersion:1350010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1350010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350010to1350020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, IFNULL(disc_number, 0), IFNULL(track_number, 0), IFNULL(episode_sort_id, 0), base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, IFNULL(show_composer, 0) FROM item")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_new RENAME TO item"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1350020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1350020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350020to1350030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store ADD COLUMN cloud_in_my_library INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET cloud_in_my_library = 1 WHERE store_saga_id != 0"))
  {
    ML3MigrationRemoveNonLibraryItemsFromContainers(v3);
    [v4 setNeedsToReloadContainerMediaTypes:1];
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1350030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1350030;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350030to1350040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_remove_source_setNeedsReporting"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET needs_reporting = 0 WHERE store_saga_id = 0"))
  {
    [v4 setCurrentUserVersion:1350040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1350040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350040to1350050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN external_vendor_identifier TEXT NOT NULL DEFAULT ''"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN external_vendor_display_name TEXT NOT NULL DEFAULT ''")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN external_vendor_container_tag TEXT NOT NULL DEFAULT ''")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1350050];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1350050;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350050to1350060(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToReloadCollectionRepresentativeItems:1];
  [v3 setCurrentUserVersion:1350060];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1350060;"];
  return v5;
}

uint64_t ML3MigrationFunction1350060to1360000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET playback_endpoint_type = (CASE WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) WHERE store_saga_id = 0"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1360000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1360000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1360000to1360010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET is_subscription = 0 WHERE playback_endpoint_type = 2")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET is_subscription = 1 WHERE playback_endpoint_type = 3"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1360010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1360010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1360010to1410000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN classical_work TEXT NOT NULL DEFAULT ''"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN classical_movement TEXT NOT NULL DEFAULT ''")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN classical_movement_count INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra ADD COLUMN classical_movement_number INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1410000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410000to1410010(void *a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v26 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_item (container_item_pid INTEGER PRIMARY KEY, container_pid INTEGER NOT NULL DEFAULT 0, item_pid INTEGER NOT NULL DEFAULT 0, position INTEGER NOT NULL DEFAULT 0)"])
  {
    id v4 = [MEMORY[0x1E4F1CA48] array];
    int v25 = [v3 executeQuery:@"SELECT container_pid FROM container WHERE smart_criteria IS NULL OR smart_is_genius"];
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 3221225472;
    v44[2] = __ML3MigrationFunction1410000to1410010_block_invoke;
    v44[3] = &unk_1E5FB83F8;
    id v5 = v4;
    id v45 = v5;
    [v25 enumerateRowsWithBlock:v44];
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id obj = v5;
    uint64_t v29 = [obj countByEnumeratingWithState:&v40 objects:v48 count:16];
    if (v29)
    {
      uint64_t v28 = *(void *)v41;
      uint64_t v32 = 1;
      while (2)
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v41 != v28)
          {
            uint64_t v7 = v6;
            objc_enumerationMutation(obj);
            uint64_t v6 = v7;
          }
          uint64_t v30 = v6;
          uint64_t v8 = *(void *)(*((void *)&v40 + 1) + 8 * v6);
          uint64_t v34 = 0;
          long long v35 = &v34;
          uint64_t v36 = 0x3032000000;
          CFNumberRef v37 = __Block_byref_object_copy__2386;
          uint64_t v38 = __Block_byref_object_dispose__2387;
          id v39 = 0;
          uint64_t v47 = v8;
          uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v47 count:1];
          uint64_t v31 = [v3 executeQuery:@"SELECT item_pid_data FROM container_items WHERE container_pid = ?" withParameters:v9];

          v33[0] = MEMORY[0x1E4F143A8];
          v33[1] = 3221225472;
          v33[2] = __ML3MigrationFunction1410000to1410010_block_invoke_2;
          v33[3] = &unk_1E5FB77B8;
          v33[4] = &v34;
          [v31 enumerateRowsWithBlock:v33];
          uint64_t v10 = (void *)v35[5];
          if (v10
            && (uint64_t v11 = [v10 bytes],
                unint64_t v12 = [(id)v35[5] length],
                v12 >= 8))
          {
            uint64_t v14 = 0;
            uint64_t v15 = (v12 >> 3) - 1;
            do
            {
              uint64_t v16 = *(void *)(v11 + 8 * v14);
              int v17 = [NSNumber numberWithLongLong:v32 + v14];
              v46[0] = v17;
              v46[1] = v8;
              id v18 = [NSNumber numberWithLongLong:v16];
              v46[2] = v18;
              int v19 = [NSNumber numberWithUnsignedInteger:v14];
              v46[3] = v19;
              int v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v46 count:4];
              int v13 = [v3 executeUpdate:@"INSERT INTO container_item (container_item_pid, container_pid, item_pid, position) VALUES (?, ?, ?, ?)", v20, 0 withParameters error];

              uint64_t v21 = v14 + 1;
              if (v15 == v14) {
                char v22 = 0;
              }
              else {
                char v22 = v13;
              }
              ++v14;
            }
            while ((v22 & 1) != 0);
            v32 += v21;
          }
          else
          {
            int v13 = 1;
          }

          _Block_object_dispose(&v34, 8);
          if (!v13)
          {

            goto LABEL_23;
          }
          uint64_t v6 = v30 + 1;
        }
        while (v30 + 1 != v29);
        uint64_t v29 = [obj countByEnumeratingWithState:&v40 objects:v48 count:16];
        if (v29) {
          continue;
        }
        break;
      }
    }

    if ([v3 executeUpdate:@"DROP TABLE IF EXISTS container_items"])
    {
      [v26 setNeedsToRecreateIndexes:1];
      [v26 setNeedsToRecreateTriggers:1];
      [v26 setCurrentUserVersion:1410010];
      uint64_t v23 = [v3 executeUpdate:@"PRAGMA user_version = 1410010;"];
    }
    else
    {
LABEL_23:
      uint64_t v23 = 0;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }

  return v23;
}

void sub_1B032EAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void __ML3MigrationFunction1410000to1410010_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 numberForColumnIndex:0];
  [v2 addObject:v3];
}

uint64_t __ML3MigrationFunction1410000to1410010_block_invoke_2(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [a2 dataForColumnIndex:0];

  return MEMORY[0x1F41817F8]();
}

uint64_t ML3MigrationFunction1410010to1410020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN has_hls INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE lyrics ADD COLUMN store_lyrics_available INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1410020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410020to1410030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET playback_endpoint_type = (CASE WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) WHERE store_saga_id = 0"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1410030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410030;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410030to1410040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE container_item SET position = position - 1 WHERE container_pid IN (SELECT DISTINCT(container_pid) FROM container_item WHERE container_pid IN (SELECT DISTINCT(container_pid) FROM container_item WHERE position > 0) AND container_pid NOT IN (SELECT container_pid FROM container_item WHERE position = 0))"])
  {
    [v4 setCurrentUserVersion:1410040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410040to1410050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE play_event (play_event_pid INTEGER PRIMARY KEY, date_played INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, container_pid INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO play_event (date_played, container_pid) SELECT date_played, container_pid FROM container WHERE is_hidden = 0 AND date_played > 0 ORDER BY date_played DESC"))
  {
    [v4 setCurrentUserVersion:1410050];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410050;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410050to1410060(void *a1, void *a2)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (MGGetBoolAnswer()
    && ![v3 executeUpdate:@"INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'MLArtworkShouldConvertToASTC')"])
  {
    uint64_t v22 = 0;
  }
  else
  {
    int v25 = v4;
    id v26 = v3;
    uint64_t v5 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v6 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v7 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
    uint64_t v8 = [v6 fileURLWithPath:v7 isDirectory:1];

    uint64_t v9 = *MEMORY[0x1E4F1C628];
    v34[0] = *MEMORY[0x1E4F1C628];
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v34 count:1];
    uint64_t v27 = v5;
    int v24 = (void *)v8;
    uint64_t v11 = [v5 enumeratorAtURL:v8 includingPropertiesForKeys:v10 options:4 errorHandler:0];

    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v12 = v11;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v30;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v30 != v15) {
            objc_enumerationMutation(v12);
          }
          int v17 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          id v28 = 0;
          [v17 getResourceValue:&v28 forKey:v9 error:0];
          id v18 = v28;
          if (([v18 BOOLValue] & 1) == 0)
          {
            int v19 = [v17 pathExtension];
            int v20 = [v19 isEqualToString:@"jpeg"];

            if (v20)
            {
              uint64_t v21 = [v17 URLByDeletingPathExtension];
              [v27 moveItemAtURL:v17 toURL:v21 error:0];
            }
          }
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }
      while (v14);
    }

    id v3 = v26;
    if ([v26 executeUpdate:@"UPDATE artwork SET relative_path = SUBSTR(relative_path, 0, 41)"])
    {
      id v4 = v25;
      [v25 setCurrentUserVersion:1410060];
      uint64_t v22 = [v26 executeUpdate:@"PRAGMA user_version = 1410060;"];
    }
    else
    {
      uint64_t v22 = 0;
      id v4 = v25;
    }
  }
  return v22;
}

uint64_t ML3MigrationFunction1410060to1410070(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN cloud_album_id TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:1410070];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410070;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410070to1410080(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET sync_id=container_pid WHERE is_src_remote=1 AND store_cloud_id=0"))
  {
    [v4 setCurrentUserVersion:1410080];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410080;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410080to1410090(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET is_subscription = 0 WHERE playback_endpoint_type = 2")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET is_subscription = 1 WHERE playback_endpoint_type = 3"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1410090];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410090;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410090to1410100(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN contains_classical_work INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album SET contains_classical_work=1 WHERE album_pid IN (SELECT DISTINCT(album_pid) FROM item JOIN item_extra USING (item_pid) WHERE classical_work!='' OR (show_composer=1 AND grouping!=''))"))
  {
    [v4 setCurrentUserVersion:1410100];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410100;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410100to1410110(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToReloadCollectionRepresentativeItems:1];
  [v3 setCurrentUserVersion:1410110];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1410110;"];
  return v5;
}

uint64_t ML3MigrationFunction1410110to1410120(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP INDEX IF EXISTS SortMapSortKeys"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemArtistGrouping"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS AlbumArtistGrouping"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS AlbumGrouping"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ComposerGrouping"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS GenreGrouping"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS AlbumRepresentativeItemPID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemArtistRepresentativeItemPID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS AlbumArtistRepresentativeItemPID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS GenreRepresentativeItemPID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ComposerRepresentativeItemPID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemArtistKeepLocal"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS AlbumKeepLocal"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS AlbumArtistKeepLocal"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ContainerKeepLocal"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS GenreKeepLocal"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ComposerKeepLocal"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ArtworkTokenArtworkToken"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ArtworkTokenEntityPIDEntityType"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS BestArtworkTokenEntityPIDEntityType"]&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ContainerItemItemPid")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ContainerItemPosition")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemTitleInAlbum")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemTitleInAlbumArtist")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemTitleInItemArtist")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemTitleInComposer")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemTitleInGenre")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemTitle")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemAlbum")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemAlbumByAlbumArtist")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemItemArtist")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemAlbumArtist")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemComposer")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemGenre")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemSeries")&& objc_msgSend(v3, "executeUpdate:", @"DROP INDEX IF EXISTS ItemDateCreated")
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemExtraGeniusID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemStoreSagaID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemStoreItemID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemSubscriptionStoreItemID"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemStatsPlayCount"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemStatsPlayDate"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemStatsUserRating"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemStatsRememberBookmark"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemUPP_BookkeeperItemLookup"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemUPP_BookkeeperIdentifier"]
    && [v3 executeUpdate:@"DROP INDEX IF EXISTS ItemKeepLocal"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1410120];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410120;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410120to1410130(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN cloud_version_hash TEXT NOT NULL DEFAULT ''"))
  {
    [v4 setCurrentUserVersion:1410130];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410130;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410130to1410140(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE genius_config_new (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER NOT NULL DEFAULT 0, min_num_results INTEGER NOT NULL DEFAULT 0, data BLOB)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO genius_config_new (id, version, default_num_results, min_num_results, data) SELECT id, version, IFNULL(default_num_results, 0), IFNULL(min_num_results, 0), data FROM genius_config")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE genius_config")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE genius_config_new RENAME TO genius_config")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE genius_metadata_new (genius_id INTEGER PRIMARY KEY, revision_level INTEGER NOT NULL DEFAULT 0, version INTEGER NOT NULL DEFAULT 0, checksum INTEGER NOT NULL DEFAULT 0, data BLOB)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO genius_metadata_new (genius_id, revision_level, version, checksum, data) SELECT genius_id, IFNULL(revision_level, 0), IFNULL(version, 0), IFNULL(checksum, 0), data FROM genius_metadata")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE genius_metadata")&& objc_msgSend(
                       v3,
                       "executeUpdate:",
                       @"ALTER TABLE genius_metadata_new RENAME TO genius_metadata")
    && [v3 executeUpdate:@"CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, IFNULL(season_number, 0), album_year, keep_local, keep_local_status, app_data, contains_classical_work FROM album")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE album")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_new RENAME TO album")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER NOT NULL DEFAULT 0, track_count INTEGER NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER NOT NULL DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER NOT NULL DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '', classical_work TEXT NOT NULL DEFAULT '', classical_movement TEXT NOT NULL DEFAULT '', classical_movement_count INTEGER NOT NULL DEFAULT 0, classical_movement_number INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_extra_new (item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_audible_audio_book, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version, classical_work, classical_movement, classical_movement_count, classical_movement_number) SELECT item_pid, title, sort_title, IFNULL(disc_count, 0), IFNULL(track_count, 0), total_time_ms, IFNULL(year, 0), location, file_size, integrity, is_audible_audio_book, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, IFNULL(bpm, 0), genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, IFNULL(category_id, 0), location_kind_id, version, display_version, classical_work, classical_movement, classical_movement_count, classical_movement_number FROM item_extra")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_extra")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra_new RENAME TO item_extra")
    && [v3 executeUpdate:@"CREATE TABLE entity_changes (class INTEGER NOT NULL, entity_pid INTEGER NOT NULL, source_pid INTEGER NOT NULL, change_type INTEGER NOT NULL, changes TEXT NOT NULL DEFAULT '', UNIQUE (class, entity_pid, source_pid, change_type))"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE source (source_pid INTEGER PRIMARY KEY, source_name TEXT, last_sync_date INTEGER NOT NULL DEFAULT 0, last_sync_revision INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE library_property (property_pid INTEGER PRIMARY KEY, source_id INTEGER, key TEXT, value TEXT, UNIQUE (source_id, key))"))
  {
    [v4 setNeedsToUpdateSortMap:1];
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1410140];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410140;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410140to1410150(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN date_played_local NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN date_played_local NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album SET date_played_local = IFNULL((SELECT date_played FROM play_event WHERE play_event.album_pid = album.album_pid), 0)")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE container SET date_played_local = IFNULL((SELECT date_played FROM play_event WHERE play_event.container_pid = container.container_pid), 0)")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE play_event"))
  {
    [v4 setCurrentUserVersion:1410150];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410150;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410150to1410160(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"UPDATE container SET distinguished_kind = 0 WHERE cloud_is_curator_playlist OR is_external_vendor_playlist"])
  {
    [v4 setCurrentUserVersion:1410160];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410160;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410160to1410170(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN audio_track_locale TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:1410170];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410170;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410170to1410180(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_stats ADD COLUMN user_rating_is_derived INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album ADD COLUMN user_rating_is_derived INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1410180];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410180;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410180to1410190(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN cloud_playback_endpoint_type INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET cloud_playback_endpoint_type = playback_endpoint_type")&& objc_msgSend(v3, "executeUpdate:", @"DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"))
  {
    [v4 setNeedsToUpdateSortMap:1];
    [v4 setForceUpdateOriginals:1];
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1410190];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410190;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410190to1410200(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE item_store SET playback_endpoint_type = (CASE WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) WHERE store_saga_id = 0"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1410200];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1410200;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410200to1410210(void *a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F1CB10];
  id v4 = a2;
  id v5 = a1;
  uint64_t v6 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
  uint64_t v7 = [v3 fileURLWithPath:v6 isDirectory:1];

  uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  [v8 removeItemAtURL:v7 error:0];

  [v4 setNeedsToAutogenerateArtworkVariants:1];
  [v4 setCurrentUserVersion:1410210];

  uint64_t v9 = [v5 executeUpdate:@"PRAGMA user_version = 1410210;"];
  return v9;
}

uint64_t ML3MigrationFunction1410210to1430000(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v6 = [v3 executeQuery:@"SELECT item_pid, (CASE WHEN store_item_id != 0 THEN store_item_id ELSE subscription_store_item_id END) AS adam_id FROM item_store JOIN item_upp USING (item_pid) WHERE adam_id != 0 AND adam_id != bookkeeper_identifier"];
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __ML3MigrationFunction1410210to1430000_block_invoke;
  v25[3] = &unk_1E5FB83F8;
  id v7 = v5;
  id v26 = v7;
  [v6 enumerateRowsWithBlock:v25];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v22;
    while (2)
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v22 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v21 + 1) + 8 * v12);
        id v20 = 0;
        char v14 = [v3 executeUpdate:@"UPDATE item_upp SET bookkeeper_identifier = ? WHERE item_pid = ?" withParameters:v13 error:&v20];
        id v15 = v20;
        uint64_t v16 = v15;
        if ((v14 & 1) == 0)
        {
          id v18 = os_log_create("com.apple.amp.medialibrary", "Migration");
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v28 = v16;
            _os_log_impl(&dword_1B022D000, v18, OS_LOG_TYPE_ERROR, "Failed to update item_upp with error: %@", buf, 0xCu);
          }

          uint64_t v17 = 0;
          goto LABEL_13;
        }

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }

  [v4 setCurrentUserVersion:1430000];
  uint64_t v17 = [v3 executeUpdate:@"PRAGMA user_version = 1430000;"];
LABEL_13:

  return v17;
}

void __ML3MigrationFunction1410210to1430000_block_invoke(uint64_t a1, void *a2)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 numberForColumnIndex:0];
  id v5 = [v3 numberForColumnIndex:1];

  uint64_t v6 = *(void **)(a1 + 32);
  v8[0] = v4;
  v8[1] = v5;
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:2];
  [v6 addObject:v7];
}

uint64_t ML3MigrationFunction1430000to1450000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE cloud_kvs (key TEXT PRIMARY KEY, play_count_user INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, bookmark_sync_timestamp INTEGER NOT NULL DEFAULT 0, bookmark_sync_revision INTEGER NOT NULL DEFAULT 0)"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1450000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1450000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1450000to1450010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE IF NOT EXISTS item_upp (item_pid INTEGER PRIMARY KEY, bookkeeper_identifier TEXT NOT NULL DEFAULT '', metadata_timestamp REAL, metadata_entity_revision INTEGER)"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:1450010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1450010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1450010to1450020(void *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = ML3MigrationStoreBookeeperDatabaseFilePathAsOf1450020();
  uint64_t v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  int v7 = [v6 fileExistsAtPath:v5];

  if (!v7) {
    goto LABEL_18;
  }
  id v8 = [[ML3DatabaseConnection alloc] initWithDatabasePath:v5];
  [(ML3DatabaseConnection *)v8 setReadOnly:1];
  [(ML3DatabaseConnection *)v8 open];
  uint64_t v9 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v10 = [(ML3DatabaseConnection *)v8 executeQuery:@"SELECT key, propertyValuesBlob, timestamp FROM ubiquitous_bookmarks" withParameters:0];
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = __ML3MigrationFunction1450010to1450020_block_invoke;
  v33[3] = &unk_1E5FB83F8;
  id v11 = v9;
  id v34 = v11;
  [v10 enumerateRowsWithBlock:v33];
  uint64_t v27 = 0;
  id v28 = &v27;
  uint64_t v29 = 0x3032000000;
  uint64_t v30 = __Block_byref_object_copy__2386;
  long long v31 = __Block_byref_object_dispose__2387;
  id v32 = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __ML3MigrationFunction1450010to1450020_block_invoke_2382;
  v24[3] = &unk_1E5FAF7A0;
  id v12 = v3;
  id v25 = v12;
  id v26 = &v27;
  [v11 enumerateKeysAndObjectsUsingBlock:v24];
  if (!v28[5])
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v38 = 0x3032000000;
    id v39 = __Block_byref_object_copy__2386;
    long long v40 = __Block_byref_object_dispose__2387;
    id v41 = 0;
    uint64_t v16 = [(ML3DatabaseConnection *)v8 executeQuery:@"SELECT key, value FROM ubiquitous_database_properties" withParameters:0];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __ML3MigrationFunction1450010to1450020_block_invoke_2399;
    v21[3] = &unk_1E5FB7618;
    id v22 = v12;
    p_long long buf = &buf;
    [v16 enumerateRowsWithBlock:v21];
    if (*(void *)(*((void *)&buf + 1) + 40))
    {
      uint64_t v17 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *(void *)(*((void *)&buf + 1) + 40);
        *(_DWORD *)long long v35 = 138543362;
        uint64_t v36 = v18;
        _os_log_impl(&dword_1B022D000, v17, OS_LOG_TYPE_ERROR, "There was an error when migrating SBK table while inserting data from SBK properties table, %{public}@", v35, 0xCu);
      }
      int v15 = 1;
    }
    else
    {
      if ([(ML3DatabaseConnection *)v8 close])
      {
        int v15 = 0;
LABEL_16:

        _Block_object_dispose(&buf, 8);
        goto LABEL_17;
      }
      uint64_t v17 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v35 = 0;
        _os_log_impl(&dword_1B022D000, v17, OS_LOG_TYPE_ERROR, "There was an error closing the SBK database file. Migration step will continue, but StoreBookkeeper database files might not be deleted.", v35, 2u);
      }
      int v15 = 0;
    }

    goto LABEL_16;
  }
  uint64_t v13 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = v28[5];
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v14;
    _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_ERROR, "There was an error when migrating SBK table while inserting data from SBK %{public}@", (uint8_t *)&buf, 0xCu);
  }

  int v15 = 1;
LABEL_17:

  _Block_object_dispose(&v27, 8);
  if (v15)
  {
LABEL_25:
    uint64_t v19 = 0;
    goto LABEL_26;
  }
LABEL_18:
  if (![v3 executeUpdate:@"UPDATE cloud_kvs SET bookmark_sync_revision = IFNULL((SELECT metadata_entity_revision FROM item_upp WHERE cloud_kvs.key = item_upp.bookkeeper_identifier), 0)"]|| !objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_kvs (item_pid INTEGER PRIMARY KEY, key TEXT NOT NULL DEFAULT '')")|| !objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_kvs (item_pid, key) SELECT item_pid, bookkeeper_identifier FROM item_upp")|| !objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_upp")|| !objc_msgSend(v3, "executeUpdate:", @"DROP TABLE IF EXISTS ubiquitous_bookmarks")|| !objc_msgSend(v3, "executeUpdate:", @"DROP TABLE IF EXISTS item_storebookmark_identifier"))
  {
    goto LABEL_25;
  }
  [v4 setNeedsToRecreateIndexes:1];
  [v4 setNeedsToRecreateTriggers:1];
  [v4 setCurrentUserVersion:1450020];
  uint64_t v19 = [v3 executeUpdate:@"PRAGMA user_version = 1450020;"];
LABEL_26:

  return v19;
}

void sub_1B03308E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose((const void *)(v14 - 176), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction1450010to1450020_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a2;
  int v7 = [v6 stringForColumnIndex:0];
  id v8 = [v6 dataForColumnIndex:1];
  [v6 doubleForColumnIndex:2];
  double v10 = v9;

  id v11 = (void *)MEMORY[0x1E4F28DC0];
  id v12 = MSVPropertyListDataClasses();
  id v18 = 0;
  uint64_t v13 = [v11 unarchivedObjectOfClasses:v12 fromData:v8 error:&v18];
  id v14 = v18;
  int v15 = (void *)[v13 mutableCopy];

  if (v15)
  {
    uint64_t v16 = [NSNumber numberWithDouble:v10];
    [v15 setObject:v16 forKey:@"timestamp"];

    [*(id *)(a1 + 32) setObject:v15 forKey:v7];
  }
  else
  {
    uint64_t v17 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v20 = v5;
      _os_log_impl(&dword_1B022D000, v17, OS_LOG_TYPE_ERROR, "Failed to decode sbk property values. err=%{public}@", buf, 0xCu);
    }
  }
}

void __ML3MigrationFunction1450010to1450020_block_invoke_2382(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  void v27[5] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a2;
  double v9 = [v7 objectForKey:@"item_stats.play_count_user"];
  uint64_t v10 = [v9 longLongValue];

  id v11 = [v7 objectForKey:@"item_stats.has_been_played"];
  uint64_t v12 = [v11 longLongValue];

  uint64_t v13 = [v7 objectForKey:@"item_stats.bookmark_time_ms"];
  [v13 doubleValue];
  double v15 = v14;

  uint64_t v16 = [v7 objectForKey:@"timestamp"];

  uint64_t v17 = [v16 longLongValue];
  v27[0] = v8;
  id v18 = [NSNumber numberWithLongLong:v10];
  v27[1] = v18;
  uint64_t v19 = [NSNumber numberWithLongLong:v12];
  v27[2] = v19;
  id v20 = [NSNumber numberWithDouble:v15];
  v27[3] = v20;
  uint64_t v21 = [NSNumber numberWithLongLong:v17];
  void v27[4] = v21;
  id v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:5];

  long long v23 = *(void **)(a1 + 32);
  uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v24 + 40);
  [v23 executeUpdate:@"INSERT OR REPLACE INTO cloud_kvs (key, play_count_user, has_been_played, bookmark_time_ms, bookmark_sync_timestamp) VALUES (?, ?, ?, ?, ?)", v22, &obj withParameters error];
  objc_storeStrong((id *)(v24 + 40), obj);
  uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  if (v25) {
    *a4 = 1;
  }
}

void __ML3MigrationFunction1450010to1450020_block_invoke_2399(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
  else
  {
    double v9 = [v7 stringForColumnIndex:0];
    uint64_t v10 = [v7 stringForColumnIndex:1];
    id v11 = *(void **)(a1 + 32);
    v15[0] = v9;
    v15[1] = v10;
    uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:2];
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
    id obj = *(id *)(v13 + 40);
    LOBYTE(v11) = [v11 executeUpdate:@"INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES (?, ?)", v12, &obj withParameters error];
    objc_storeStrong((id *)(v13 + 40), obj);

    if ((v11 & 1) == 0) {
      *a4 = 1;
    }
  }
}

uint64_t ML3MigrationFunction1450020to1450030(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  TCCAccessReset();
  [v3 setCurrentUserVersion:1450030];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1450030;"];
  return v5;
}

uint64_t ML3MigrationFunction1450030to1450040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN show_sort_type INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_video ADD COLUMN episode_type INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_video ADD COLUMN episode_type_display_name TEXT NOT NULL DEFAULT ''")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_video ADD COLUMN episode_sub_sort_order INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1450040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1450040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1450040to1450050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item ADD COLUMN is_music_show INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1450050];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1450050;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1450050to1450060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"DELETE FROM _MLDatabaseProperties WHERE key = 'MLArtworkShouldConvertToASTC'"])
  {
    if (MSVDeviceOSIsInternalInstall() && MGGetBoolAnswer())
    {
      uint64_t v5 = (void *)MEMORY[0x1E4F1CB10];
      id v6 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
      id v7 = [v5 fileURLWithPath:v6 isDirectory:1];

      id v8 = [MEMORY[0x1E4F28CB8] defaultManager];
      [v8 removeItemAtURL:v7 error:0];

      [v4 setNeedsToAutogenerateArtworkVariants:1];
    }
    [v4 setCurrentUserVersion:1450060];
    uint64_t v9 = [v3 executeUpdate:@"PRAGMA user_version = 1450060;"];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t ML3MigrationFunction1450060to1450070(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  ML3MigrationRemoveInvalidContainerItems(@"SELECT container_pid, position FROM container_item LEFT OUTER JOIN item USING (item_pid) WHERE item.item_pid IS NULL", v4);
  [v3 setNeedsToReloadContainerMediaTypes:1];
  [v3 setCurrentUserVersion:1450070];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1450070;"];
  return v5;
}

uint64_t ML3MigrationFunction1450070to1450080(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  ML3MigrationRemoveInvalidContainerItems(@"SELECT container_item.container_pid, position FROM container JOIN container_item USING (container_pid) JOIN item USING (item_pid) WHERE distinguished_kind IN (19, 20) AND in_my_library = 0", v4);
  [v3 setNeedsToReloadContainerMediaTypes:1];
  [v3 setCurrentUserVersion:1450080];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1450080;"];
  return v5;
}

uint64_t ML3MigrationFunction1450080to1450090(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!MSVDeviceOSIsInternalInstall()) {
    goto LABEL_5;
  }
  if (!MGGetBoolAnswer()) {
    goto LABEL_5;
  }
  if (MGGetBoolAnswer()) {
    goto LABEL_5;
  }
  uint64_t v5 = (void *)MEMORY[0x1E4F1CB10];
  id v6 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
  id v7 = [v5 fileURLWithPath:v6 isDirectory:1];

  id v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  [v8 removeItemAtURL:v7 error:0];

  [v4 setNeedsToAutogenerateArtworkVariants:1];
  LODWORD(v8) = [v3 executeUpdate:@"INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'MLMigrationHasDisabledAstcOnErie')"];

  if (!v8)
  {
    uint64_t v9 = 0;
  }
  else
  {
LABEL_5:
    [v4 setCurrentUserVersion:1450090];
    uint64_t v9 = [v3 executeUpdate:@"PRAGMA user_version = 1450090;"];
  }

  return v9;
}

uint64_t ML3MigrationFunction1450090to1510000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN cloud_author_handle TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:1510000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1510000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510000to1510010(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  ML3MigrationRemoveInvalidContainerItems(@"SELECT container_pid, position FROM container_item LEFT OUTER JOIN item USING (item_pid) WHERE item.item_pid IS NULL", v4);
  [v3 setNeedsToReloadContainerMediaTypes:1];
  [v3 setCurrentUserVersion:1510010];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1510010;"];
  return v5;
}

uint64_t ML3MigrationFunction1510010to1510020(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  ML3MigrationRemoveInvalidContainerItems(@"SELECT container_item.container_pid, position FROM container JOIN container_item USING (container_pid) JOIN item USING (item_pid) WHERE distinguished_kind IN (19, 20) AND in_my_library = 0", v4);
  [v3 setNeedsToReloadContainerMediaTypes:1];
  [v3 setCurrentUserVersion:1510020];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1510020;"];
  return v5;
}

uint64_t ML3MigrationFunction1510020to1510030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!MSVDeviceOSIsInternalInstall() || !MGGetBoolAnswer() || (MGGetBoolAnswer() & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t v5 = [v3 executeQuery:@"SELECT 1 FROM _MLDatabaseProperties WHERE key = 'MLMigrationHasDisabledAstcOnErie'"];
  id v6 = [v5 objectForFirstRowAndColumn];
  char v7 = [v6 BOOLValue];

  if ((v7 & 1) == 0)
  {
    id v8 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v9 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
    uint64_t v10 = [v8 fileURLWithPath:v9 isDirectory:1];

    id v11 = [MEMORY[0x1E4F28CB8] defaultManager];
    [v11 removeItemAtURL:v10 error:0];

    [v4 setNeedsToAutogenerateArtworkVariants:1];
  }
  if (![v3 executeUpdate:@"DELETE FROM _MLDatabaseProperties WHERE key ='MLMigrationHasDisabledAstcOnErie'"])
  {
    uint64_t v12 = 0;
  }
  else
  {
LABEL_7:
    [v4 setCurrentUserVersion:1510030];
    uint64_t v12 = [v3 executeUpdate:@"PRAGMA user_version = 1510030;"];
  }

  return v12;
}

uint64_t ML3MigrationFunction1510030to1510040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN hls_offline_playback_keys BLOB"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_video ADD COLUMN is_premium INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_video ADD COLUMN color_capability INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_video ADD COLUMN hls_color_capability INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_video ADD COLUMN hls_video_quality INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1510040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1510040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510040to1510050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1510050];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1510050;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510050to1510060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''"))
  {
    [v4 setCurrentUserVersion:1510060];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1510060;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510060to1510070(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_artist ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_artist ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE composer ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE genre ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1510070];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1510070;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510070to1550000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN hls_playlist_url TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:1550000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1550000;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1550000to1550010(void *a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 executeQuery:@"SELECT item_pid FROM item WHERE (media_type & 8 != 0) AND album_order = 0 and album_pid != 0"];
  id v6 = [v5 objectsInColumn:0];

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = v6;
  uint64_t v7 = [obj countByEnumeratingWithState:&v32 objects:v43 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v31 = *(void *)v33;
    id v29 = v4;
    while (2)
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v33 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v32 + 1) + 8 * v9);
        uint64_t valuePtr = ML3CreateIntegerUUID();
        for (CFNumberRef i = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr); ; CFNumberRef i = v15)
        {
          CFNumberRef v42 = i;
          uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v42 count:1];
          uint64_t v13 = [v3 executeQuery:@"SELECT 1 FROM album WHERE album_pid = ?" withParameters:v12];
          int v14 = [v13 hasAtLeastOneRow];

          if (!v14) {
            break;
          }
          uint64_t valuePtr = ML3CreateIntegerUUID();
          CFNumberRef v15 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
        }
        v41[0] = i;
        v41[1] = v10;
        void v41[2] = v10;
        uint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v41 count:3];
        int v17 = [v3 executeUpdate:@"INSERT INTO album (album_pid, representative_item_pid, album_artist_pid, cloud_status, user_rating, all_compilations, album_year, keep_local, keep_local_status, contains_classical_work, date_played_local, user_rating_is_derived) SELECT ?, ?, album_artist_pid, cloud_status, user_rating, all_compilations, album_year, keep_local, keep_local_status, contains_classical_work, date_played_local, user_rating_is_derived FROM album WHERE album_pid=(SELECT album_pid FROM item WHERE item_pid=?)", v16, 0 withParameters error];

        if (!v17) {
          goto LABEL_17;
        }
        v40[0] = i;
        v40[1] = v10;
        id v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:v40 count:2];
        int v19 = [v3 executeUpdate:@"UPDATE item SET album_pid = ? WHERE item_pid = ?" withParameters:v18 error:0];

        if (!v19) {
          goto LABEL_17;
        }
        uint64_t v39 = v10;
        id v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v39 count:1];
        int v21 = [v3 executeUpdate:@"INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 0, 0)", v20, 0 withParameters error];

        if (!v21
          || (uint64_t v38 = v10,
              [MEMORY[0x1E4F1C978] arrayWithObjects:&v38 count:1],
              id v22 = objc_claimAutoreleasedReturnValue(),
              int v23 = [v3 executeUpdate:@"DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > 0" withParameters:v22 error:0], v22, !v23))
        {
LABEL_17:

LABEL_18:
          id v26 = obj;

          uint64_t v27 = 0;
          id v4 = v29;
          goto LABEL_19;
        }
        CFNumberRef v37 = i;
        uint64_t v24 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v37 count:1];
        int v25 = [v3 executeUpdate:@"INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 4, 0)", v24, 0 withParameters error];

        if (!v25) {
          goto LABEL_18;
        }
        ++v9;
      }
      while (v9 != v8);
      uint64_t v8 = [obj countByEnumeratingWithState:&v32 objects:v43 count:16];
      id v4 = v29;
      if (v8) {
        continue;
      }
      break;
    }
  }
  id v26 = obj;

  [v4 setCurrentUserVersion:1550010];
  uint64_t v27 = [v3 executeUpdate:@"PRAGMA user_version = 1550010;"];
LABEL_19:

  return v27;
}

uint64_t ML3MigrationFunction1550010to1560000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (MGGetBoolAnswer()
    && ![v3 executeUpdate:@"INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'ForceSiriResetSync')"])
  {
    uint64_t v5 = 0;
  }
  else
  {
    [v4 setCurrentUserVersion:1560000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1560000;"];
  }

  return v5;
}

uint64_t ML3MigrationFunction1560000to1610000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE account (dsid INTEGER PRIMARY KEY DEFAULT 0, apple_id TEXT NOT NULL DEFAULT '', alt_dsid TEXT NOT NULL DEFAULT '')"])
  {
    uint64_t v5 = MLMobileUserHomeDirectory();
    id v6 = [v5 stringByAppendingPathComponent:@"Library/MusicLibrary/AccountCache.sqlitedb"];
    uint64_t v7 = objc_msgSend(v6, "msv_stringByResolvingRealPath");

    uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
    LODWORD(v6) = [v8 fileExistsAtPath:v7];

    if (v6)
    {
      uint64_t v9 = [[ML3DatabaseConnection alloc] initWithDatabasePath:v7];
      if ([(ML3DatabaseConnection *)v9 open])
      {
        uint64_t v10 = [(ML3DatabaseConnection *)v9 executeQuery:@"SELECT dsid, apple_id FROM account"];
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 3221225472;
        v13[2] = __ML3MigrationFunction1560000to1610000_block_invoke;
        v13[3] = &unk_1E5FB83F8;
        id v14 = v3;
        [v10 enumerateRowsWithBlock:v13];
        [(ML3DatabaseConnection *)v9 close];
      }
    }
    [v4 setCurrentUserVersion:1610000];
    uint64_t v11 = [v3 executeUpdate:@"PRAGMA user_version = 1610000;"];
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void __ML3MigrationFunction1560000to1610000_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (!a3)
    {
      id v4 = a2;
      uint64_t v5 = [v4 numberForColumnIndex:0];
      id v6 = [v4 stringForColumnIndex:1];

      uint64_t v7 = *(void **)(a1 + 32);
      v9[0] = v5;
      v9[1] = v6;
      uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:2];
      [v7 executeUpdate:@"INSERT OR REPLACE INTO account (dsid, apple_id) VALUES(?, ?)", v8, 0 withParameters error];
    }
  }
}

uint64_t ML3MigrationFunction1610000to1610010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN audio_capability INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_video ADD COLUMN hls_audio_capability INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:1610010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1610010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1610010to1610020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE person (person_pid INTEGER PRIMARY KEY, cloud_id TEXT NOT NULL UNIQUE, handle TEXT NOT NULL DEFAULT '', name TEXT NOT NULL DEFAULT '', image_url TEXT NOT NULL DEFAULT '', image_token TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE container_item_person (container_item_person_pid INTEGER PRIMARY KEY, container_item_pid INTEGER NOT NULL DEFAULT 0, person_pid INTEGER NOT NULL DEFAULT 0, UNIQUE (container_item_pid, person_pid))")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS PersonPID ON person (person_pid ASC)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS PersonCloudID ON person (cloud_id ASC)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ContainerItemPerson ON container_item_person (container_item_pid ASC)")
    && [v3 executeUpdate:@"ALTER TABLE container ADD COLUMN should_display_index INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1610020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1610020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1610020to1610030(void *a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F28CB8];
  id v4 = a2;
  id v5 = a1;
  id v6 = [v3 defaultManager];
  uint64_t v7 = MLMobileUserHomeDirectory();
  uint64_t v8 = [v7 stringByAppendingPathComponent:@"Library/MusicLibrary/AccountCache.sqlitedb"];

  [v6 removeItemAtPath:v8 error:0];
  uint64_t v9 = [v8 stringByAppendingString:@"-shm"];
  [v6 removeItemAtPath:v9 error:0];

  uint64_t v10 = [v8 stringByAppendingString:@"-wal"];
  [v6 removeItemAtPath:v10 error:0];

  [v4 setCurrentUserVersion:1610030];
  uint64_t v11 = [v5 executeUpdate:@"PRAGMA user_version = 1610030;"];

  return v11;
}

uint64_t ML3MigrationFunction1610030to1710000(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item ADD COLUMN date_downloaded INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN date_downloaded INTEGER NOT NULL DEFAULT 0"))
  {
    id v5 = MLMobileUserHomeDirectory();
    id v6 = [v5 stringByAppendingPathComponent:@"Media"];

    uint64_t v7 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v8 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_DEFAULT, "Start back filling date_downloaded", buf, 2u);
    }

    uint64_t v9 = [v3 executeQuery:@"SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id >= 300 "];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __ML3MigrationFunction1610030to1710000_block_invoke;
    v19[3] = &unk_1E5FB6278;
    id v20 = v6;
    id v10 = v7;
    id v21 = v10;
    id v11 = v6;
    [v9 enumerateRowsWithBlock:v19];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __ML3MigrationFunction1610030to1710000_block_invoke_2625;
    v17[3] = &unk_1E5FAF7C8;
    id v12 = v3;
    id v18 = v12;
    [v10 enumerateKeysAndObjectsUsingBlock:v17];
    uint64_t v13 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = [v10 count];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v23 = v14;
      _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_DEFAULT, "Finished back filling date_downloaded for %ld items", buf, 0xCu);
    }

    [v4 setCurrentUserVersion:1710000];
    uint64_t v15 = [v12 executeUpdate:@"PRAGMA user_version = 1710000;"];
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void __ML3MigrationFunction1610030to1710000_block_invoke(uint64_t a1, void *a2)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 int64ForColumnIndex:0];
  id v5 = [v3 stringForColumnIndex:1];
  id v6 = [v3 stringForColumnIndex:2];

  uint64_t v7 = NSString;
  v21[0] = *(void *)(a1 + 32);
  v21[1] = v5;
  v21[2] = v6;
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:3];
  uint64_t v9 = [v7 pathWithComponents:v8];

  id v10 = [MEMORY[0x1E4F28CB8] defaultManager];
  if ([v10 fileExistsAtPath:v9])
  {
    id v16 = 0;
    id v11 = [v10 attributesOfItemAtPath:v9 error:&v16];
    id v12 = v16;
    if (v12 || !v11)
    {
      uint64_t v13 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543618;
        id v18 = v9;
        __int16 v19 = 2114;
        id v20 = v12;
        _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_ERROR, "Could not get attributes for item at %{public}@, error=%{public}@", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v13 = [v11 objectForKey:*MEMORY[0x1E4F282C0]];
      if (v13)
      {
        uint64_t v14 = *(void **)(a1 + 40);
        uint64_t v15 = [NSNumber numberWithLongLong:v4];
        [v14 setObject:v13 forKey:v15];
      }
      else
      {
        uint64_t v15 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543362;
          id v18 = v9;
          _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_ERROR, "Could not get creation date for item at %{public}@", buf, 0xCu);
        }
      }
    }
  }
}

void __ML3MigrationFunction1610030to1710000_block_invoke_2625(uint64_t a1, void *a2, void *a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  v18[0] = v6;
  v18[1] = v5;
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:2];
  id v13 = 0;
  char v9 = [v7 executeUpdate:@"UPDATE item SET date_downloaded = ? WHERE item_pid = ?" withParameters:v8 error:&v13];
  id v10 = v13;

  if ((v9 & 1) == 0)
  {
    id v11 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = [v5 longLongValue];
      *(_DWORD *)long long buf = 134218242;
      uint64_t v15 = v12;
      __int16 v16 = 2114;
      id v17 = v10;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_ERROR, "Could not update date downloaded for item_pid %lld, error=%{public}@", buf, 0x16u);
    }
  }
}

uint64_t ML3MigrationFunction1710000to1710010(void *a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = a1;
  int v5 = [v3 originalUserVersion];
  id v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5 <= 1709999)
  {
    if (v7)
    {
      int v10 = 136446466;
      id v11 = "ML3MigrationFunction1710000to1710010";
      __int16 v12 = 1024;
      int v13 = v5;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s: Found original user version %d, which pre-dates any work specific to iOS 13.0. Leaving subscription status cache intact.", (uint8_t *)&v10, 0x12u);
    }
  }
  else
  {
    if (v7)
    {
      int v10 = 136446466;
      id v11 = "ML3MigrationFunction1710000to1710010";
      __int16 v12 = 1024;
      int v13 = v5;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s: Found original user version %d, which indicates a pre-release version of iOS 13.0 was previously installed. Clearing subscription status cache.", (uint8_t *)&v10, 0x12u);
    }

    id v6 = [objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.itunescloud"];
    [v6 removeObjectForKey:@"ICDefaultsCachedSubscriptionStatus"];
    [v6 synchronize];
  }

  [v3 setCurrentUserVersion:1710010];
  uint64_t v8 = [v4 executeUpdate:@"PRAGMA user_version = 1710010;"];

  return v8;
}

uint64_t ML3MigrationFunction1710010to1710020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:1710020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1710020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1710020to1710030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item ADD COLUMN download_source_container_pid INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1710030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1710030;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1710030to1710040(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
  id v6 = [v3 executeQuery:@"select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) FROM container where distinguished_kind = 10000 AND is_container_type_active_target)"];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __ML3MigrationFunction1710030to1710040_block_invoke;
  v19[3] = &unk_1E5FB83F8;
  id v7 = v5;
  id v20 = v7;
  [v6 enumerateRowsWithBlock:v19];
  uint64_t v8 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    id v22 = v7;
    _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_DEFAULT, "Will remove duplicate plaback history playlists=%{public}@", buf, 0xCu);
  }

  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 3221225472;
  __int16 v16 = __ML3MigrationFunction1710030to1710040_block_invoke_2658;
  id v17 = &unk_1E5FB49E8;
  id v9 = v3;
  id v18 = v9;
  [v7 enumerateObjectsUsingBlock:&v14];
  if ((objc_msgSend(v9, "executeUpdate:", @"delete from container_item where container_pid in (select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) FROM container where distinguished_kind = 10000 AND is_container_type_active_target))", v14, v15, v16, v17) & 1) == 0)
  {
    int v10 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_ERROR, "Could not delete duplicate container_pids from container_item", buf, 2u);
    }
  }
  if (([v9 executeUpdate:@"delete from container where container_pid in (select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) from container where distinguished_kind = 10000 AND is_container_type_active_target))"] & 1) == 0)
  {
    id v11 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_ERROR, "Could not delete duplicate container_pids from container", buf, 2u);
    }
  }
  [v4 setCurrentUserVersion:1710040];
  uint64_t v12 = [v9 executeUpdate:@"PRAGMA user_version = 1710040;"];

  return v12;
}

void __ML3MigrationFunction1710030to1710040_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 int64ForColumnIndex:0];
  id v4 = *(void **)(a1 + 32);
  id v5 = [NSNumber numberWithLongLong:v3];
  [v4 addObject:v5];
}

void __ML3MigrationFunction1710030to1710040_block_invoke_2658(uint64_t a1, void *a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v14[0] = v3;
  v14[1] = &unk_1F0910C18;
  v14[2] = &unk_1F0910C30;
  v14[3] = &unk_1F0910C48;
  id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:4];
  id v9 = 0;
  char v6 = [v4 executeUpdate:@"INSERT OR REPLACE INTO entity_revision (entity_pid, revision_type, deleted, class) VALUES(?, ?, ?, ?)", v5, &v9 withParameters error];
  id v7 = v9;

  if ((v6 & 1) == 0)
  {
    uint64_t v8 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      id v11 = v3;
      __int16 v12 = 2114;
      id v13 = v7;
      _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_ERROR, "Could not update entity_revision table for containerPID=%{public}@, error=%{public}@", buf, 0x16u);
    }
  }
}

uint64_t ML3MigrationFunction1710040to1710050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, @"download_source_container_pid", @"item") & 1) != 0
    || [v3 executeUpdate:@"ALTER TABLE item ADD COLUMN download_source_container_pid INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1710050];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1710050;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1710050to1710051(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  _ML3MigrationFunctionPatchUpIncorrectDateDownloaded(v4);
  [v3 setCurrentUserVersion:1710051];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1710051;"];
  return v5;
}

void _ML3MigrationFunctionPatchUpIncorrectDateDownloaded(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = MLMobileUserHomeDirectory();
  id v3 = [v2 stringByAppendingPathComponent:@"Media"];

  id v4 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B022D000, v4, OS_LOG_TYPE_DEFAULT, "Starting to patch up date_downloaded", buf, 2u);
  }

  uint64_t v5 = [MEMORY[0x1E4F1CA60] dictionary];
  char v6 = [v1 executeQuery:@"SELECT item.ROWID, base_location.path, item_extra.location, item.date_downloaded FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id >= 300 AND item.date_downloaded != 0"];
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = ___ML3MigrationFunctionPatchUpIncorrectDateDownloaded_block_invoke;
  v14[3] = &unk_1E5FB6278;
  id v15 = v3;
  id v7 = v5;
  id v16 = v7;
  id v8 = v3;
  [v6 enumerateRowsWithBlock:v14];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = ___ML3MigrationFunctionPatchUpIncorrectDateDownloaded_block_invoke_2690;
  void v12[3] = &unk_1E5FAF7C8;
  id v13 = v1;
  id v9 = v1;
  [v7 enumerateKeysAndObjectsUsingBlock:v12];
  int v10 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = [v7 count];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v18 = v11;
    _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_DEFAULT, "Finished patching up date_downloaded for %ld items", buf, 0xCu);
  }
}

uint64_t ML3MigrationFunction1710051to1710060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((MSVDeviceSupportsSideLoadedMediaContent() & 1) == 0)
  {
    if (([v3 executeUpdate:@"DELETE FROM _MLDatabaseProperties WHERE key ='MLLastKnownActiveLockerAccountDSID'"] & 1) == 0)
    {
      uint64_t v5 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1B022D000, v5, OS_LOG_TYPE_ERROR, "Could not remove last known locker account ID", buf, 2u);
      }
    }
    if (([v3 executeUpdate:@"DELETE FROM _MLDatabaseProperties WHERE key ='MLCloudLibraryPrefersToMerge'"] & 1) == 0)
    {
      char v6 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "Could not remove cloud library merge preference", v9, 2u);
      }
    }
  }
  [v4 setCurrentUserVersion:1710060];
  uint64_t v7 = [v3 executeUpdate:@"PRAGMA user_version = 1710060;"];

  return v7;
}

uint64_t ML3MigrationFunction1710060to1710061(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  _ML3MigrationFunctionPatchUpIncorrectDateDownloaded(v4);
  [v3 setCurrentUserVersion:1710061];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1710061;"];
  return v5;
}

uint64_t ML3MigrationFunction1710061to1750000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B022D000, v5, OS_LOG_TYPE_DEFAULT, "Merging split is_compilation albums", buf, 2u);
  }

  char v6 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v7 = [MEMORY[0x1E4F1CA48] array];
  id v8 = [v3 executeQuery:@"SELECT album_artist_pid, album FROM album GROUP BY album, album_artist_pid HAVING MIN(all_compilations) = 0 AND MAX(all_compilations) = 1"];
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __ML3MigrationFunction1710061to1750000_block_invoke;
  v23[3] = &unk_1E5FB83F8;
  id v24 = v7;
  id v9 = v7;
  [v8 enumerateRowsWithBlock:v23];
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = __ML3MigrationFunction1710061to1750000_block_invoke_2;
  v20[3] = &unk_1E5FAF7F0;
  id v10 = v3;
  id v21 = v10;
  id v22 = v6;
  id v11 = v6;
  [v9 enumerateObjectsUsingBlock:v20];
  uint64_t v15 = MEMORY[0x1E4F143A8];
  uint64_t v16 = 3221225472;
  id v17 = __ML3MigrationFunction1710061to1750000_block_invoke_2724;
  uint64_t v18 = &unk_1E5FB49E8;
  id v19 = v10;
  id v12 = v10;
  [v11 enumerateObjectsUsingBlock:&v15];
  objc_msgSend(v4, "setCurrentUserVersion:", 1750000, v15, v16, v17, v18);

  uint64_t v13 = [v12 executeUpdate:@"PRAGMA user_version = 1750000;"];
  return v13;
}

void __ML3MigrationFunction1710061to1750000_block_invoke(uint64_t a1, void *a2)
{
  v7[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v3 numberForColumnIndex:0];
  v7[0] = v4;
  uint64_t v5 = [v3 stringForColumnIndex:1];

  v7[1] = v5;
  char v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:2];
  [v2 addObject:v6];
}

void __ML3MigrationFunction1710061to1750000_block_invoke_2(uint64_t a1, void *a2)
{
  v49[1] = *MEMORY[0x1E4F143B8];
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 executeQuery:@"SELECT album_pid FROM album WHERE all_compilations = 0 AND album_artist_pid = ? AND album = ?" withParameters:v4];
  uint64_t v6 = [v5 int64ValueForFirstRowAndColumn];

  uint64_t v7 = [*(id *)(a1 + 32) executeQuery:@"SELECT album_pid FROM album WHERE all_compilations = 1 AND album_artist_pid = ? AND album = ?" withParameters:v4];

  uint64_t v8 = [v7 int64ValueForFirstRowAndColumn];
  id v9 = *(void **)(a1 + 32);
  id v10 = [NSNumber numberWithLongLong:v8];
  v49[0] = v10;
  id v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v49 count:1];
  id v12 = [v9 executeQuery:@"SELECT item_pid FROM item WHERE album_pid = ?" withParameters:v11];

  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = __ML3MigrationFunction1710061to1750000_block_invoke_3;
  v38[3] = &unk_1E5FB83F8;
  id v39 = *(id *)(a1 + 40);
  [v12 enumerateRowsWithBlock:v38];
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = [NSNumber numberWithLongLong:v8];
  v48[0] = v14;
  v48[1] = &unk_1F0910C18;
  v48[2] = &unk_1F0910C30;
  v48[3] = &unk_1F0910C60;
  uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v48 count:4];
  id v37 = 0;
  LOBYTE(v13) = [v13 executeUpdate:@"INSERT OR REPLACE INTO entity_revision (entity_pid, revision_type, deleted, class) VALUES(?, ?, ?, ?)", v15, &v37 withParameters error];
  id v16 = v37;

  if ((v13 & 1) == 0)
  {
    id v17 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = [NSNumber numberWithLongLong:v8];
      *(_DWORD *)long long buf = 138543618;
      CFNumberRef v42 = v18;
      __int16 v43 = 2114;
      id v44 = v16;
      _os_log_impl(&dword_1B022D000, v17, OS_LOG_TYPE_ERROR, "Could not update entity_revision table for album_pid=%{public}@, error=%{public}@", buf, 0x16u);
    }
  }
  id v19 = *(void **)(a1 + 32);
  id v20 = [NSNumber numberWithLongLong:v6];
  v47[0] = v20;
  id v21 = [NSNumber numberWithLongLong:v8];
  v47[1] = v21;
  id v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v47 count:2];
  id v36 = v16;
  char v23 = [v19 executeUpdate:@"UPDATE item SET album_pid = ? WHERE album_pid = ?" withParameters:v22 error:&v36];
  id v24 = v36;

  if ((v23 & 1) == 0)
  {
    int v25 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      id v26 = [NSNumber numberWithLongLong:v6];
      uint64_t v27 = [NSNumber numberWithLongLong:v8];
      *(_DWORD *)long long buf = 138543874;
      CFNumberRef v42 = v26;
      __int16 v43 = 2114;
      id v44 = v27;
      __int16 v45 = 2114;
      id v46 = v24;
      _os_log_impl(&dword_1B022D000, v25, OS_LOG_TYPE_ERROR, "Could not update item album_pid from %{public}@ to %{public}@ error=%{public}@", buf, 0x20u);
    }
  }
  id v28 = *(void **)(a1 + 32);
  id v29 = [NSNumber numberWithLongLong:v8];
  long long v40 = v29;
  uint64_t v30 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v40 count:1];
  id v35 = v24;
  char v31 = [v28 executeUpdate:@"DELETE FROM album WHERE album_pid = ?" withParameters:v30 error:&v35];
  id v32 = v35;

  if ((v31 & 1) == 0)
  {
    long long v33 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      long long v34 = [NSNumber numberWithLongLong:v8];
      *(_DWORD *)long long buf = 138543618;
      CFNumberRef v42 = v34;
      __int16 v43 = 2114;
      id v44 = v32;
      _os_log_impl(&dword_1B022D000, v33, OS_LOG_TYPE_ERROR, "Could not delete album with pid=%{public}@, error=%{public}@", buf, 0x16u);
    }
  }
}

void __ML3MigrationFunction1710061to1750000_block_invoke_2724(uint64_t a1, void *a2)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v14[0] = v3;
  v14[1] = &unk_1F0910C18;
  v14[2] = &unk_1F0910C18;
  v14[3] = &unk_1F0910C78;
  uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:4];
  id v9 = 0;
  char v6 = [v4 executeUpdate:@"INSERT OR REPLACE INTO entity_revision (entity_pid, revision_type, deleted, class) VALUES(?, ?, ?, ?)", v5, &v9 withParameters error];
  id v7 = v9;

  if ((v6 & 1) == 0)
  {
    uint64_t v8 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      id v11 = v3;
      __int16 v12 = 2114;
      id v13 = v7;
      _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_ERROR, "Could not update entity_revision table for item_pid=%{public}@, error=%{public}@", buf, 0x16u);
    }
  }
}

void __ML3MigrationFunction1710061to1750000_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 numberForColumnIndex:0];
  [v2 addObject:v3];
}

uint64_t ML3MigrationFunction1750000to1770000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B022D000, v5, OS_LOG_TYPE_DEFAULT, "Patch up podcasts synced with incorrect composite media type", buf, 2u);
  }

  if ([v3 executeUpdate:@"UPDATE item SET media_type=4 WHERE media_type=12"])
  {
    [v4 setCurrentUserVersion:1770000];
    uint64_t v6 = [v3 executeUpdate:@"PRAGMA user_version = 1770000;"];
  }
  else
  {
    id v7 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl(&dword_1B022D000, v7, OS_LOG_TYPE_ERROR, "Could not patch up composite media_type for synced podcasts", v9, 2u);
    }

    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t ML3MigrationFunction1770000to1800000(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1800000];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1800000;"];

  return v4;
}

uint64_t ML3MigrationFunction1800000to1810000(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:1810000];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 1810000;"];

  return v4;
}

uint64_t ML3MigrationFunction1810000to1850000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN is_personalized_mix INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = 0;
      id v7 = "Could not update container table to support personalized type";
      uint64_t v8 = (uint8_t *)&v11;
LABEL_8:
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    }
LABEL_9:

    uint64_t v5 = 0;
    goto LABEL_10;
  }
  if (([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN personalized_mix_sort_key TEXT NOT NULL DEFAULT ''"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      id v7 = "Could not update container table to support personalized sort key";
      uint64_t v8 = (uint8_t *)&v10;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  [v4 setCurrentUserVersion:1850000];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1850000;"];
LABEL_10:

  return v5;
}

uint64_t ML3MigrationFunction1850000to1850010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_stats ADD COLUMN liked_state_changed_date INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1850010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1850010;"];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "Could not update item_stats table to support liked state change date", v8, 2u);
    }

    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1850010to1850020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_extra ADD COLUMN is_preorder INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1850020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1850020;"];
  }
  else
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "Failed to add is_preorder column to item_extra table", v8, 2u);
    }

    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1850020to1850030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, is_personalized_mix, personalized_mix_sort_key FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container"))
  {
    [v4 setCurrentUserVersion:1850030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1850030;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1850030to1850040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN hls_asset_traits INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    __int16 v12 = 0;
    id v7 = "Failed to add hls_key_server_url column to item_video table";
    uint64_t v8 = (uint8_t *)&v12;
LABEL_11:
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_12;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN hls_key_server_url TEXT NOT NULL DEFAULT ''"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    __int16 v11 = 0;
    id v7 = "Failed to add hls_key_server_url column to item_video table";
    uint64_t v8 = (uint8_t *)&v11;
    goto LABEL_11;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN hls_key_cert_url TEXT NOT NULL DEFAULT ''"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      id v7 = "Failed to add hls_key_cert_url column to item_video table";
      uint64_t v8 = (uint8_t *)&v10;
      goto LABEL_11;
    }
LABEL_12:

    uint64_t v5 = 0;
    goto LABEL_13;
  }
  [v4 setCurrentUserVersion:1850040];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1850040;"];
LABEL_13:

  return v5;
}

uint64_t ML3MigrationFunction1850040to1850050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN reporting_store_item_id INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = 0;
      id v7 = "Failed to add reporting_store_item_id column to item_store table";
      uint64_t v8 = (uint8_t *)&v11;
LABEL_8:
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    }
LABEL_9:

    uint64_t v5 = 0;
    goto LABEL_10;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN asset_store_item_id INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      id v7 = "Failed to add asset_store_item_id column to item_store table";
      uint64_t v8 = (uint8_t *)&v10;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  [v4 setCurrentUserVersion:1850050];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1850050;"];
LABEL_10:

  return v5;
}

uint64_t ML3MigrationFunction1850050to1910000(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  if (MGGetBoolAnswer() && MGGetBoolAnswer())
  {
    uint64_t v5 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v6 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
    id v7 = [v5 fileURLWithPath:v6 isDirectory:1];

    uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
    [v8 removeItemAtURL:v7 error:0];

    [v3 setNeedsToAutogenerateArtworkVariants:1];
  }
  [v3 setCurrentUserVersion:1910000];
  uint64_t v9 = [v4 executeUpdate:@"PRAGMA user_version = 1910000;"];

  return v9;
}

uint64_t ML3MigrationFunction1910000to1910010(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  CFLocaleRef v5 = CFLocaleCopyCurrent();
  CFStringRef v6 = (const __CFString *)MEMORY[0x1B3E92A70]();
  int HasPrefix = CFStringHasPrefix(v6, @"ja");
  CFRelease(v5);
  [v3 setNeedsToUpdateSortMap:1];
  if (HasPrefix) {
    [v3 setForceUpdateOriginals:1];
  }
  [v3 setCurrentUserVersion:1910010];
  uint64_t v8 = [v4 executeUpdate:@"PRAGMA user_version = 1910010;"];

  return v8;
}

uint64_t ML3MigrationFunction1910010to1910020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE lyrics ADD COLUMN time_synced_lyrics_available INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:1910020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1910020;"];
  }
  else
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "Failed to add time_synced_lyrics_available column to item_lyrics table", v8, 2u);
    }

    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1910020to1910030(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  CFLocaleRef v5 = CFLocaleCopyCurrent();
  CFStringRef v6 = (const __CFString *)MEMORY[0x1B3E92A70]();
  int HasPrefix = CFStringHasPrefix(v6, @"ja");
  CFRelease(v5);
  [v3 setNeedsToUpdateSortMap:1];
  if (HasPrefix) {
    [v3 setForceUpdateOriginals:1];
  }
  [v3 setCurrentUserVersion:1910030];
  uint64_t v8 = [v4 executeUpdate:@"PRAGMA user_version = 1910030;"];

  return v8;
}

uint64_t ML3MigrationFunction1910030to1950000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"ALTER TABLE item_video ADD COLUMN hls_key_server_protocol TEXT NOT NULL DEFAULT ''"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = 0;
      id v7 = "Failed to add hls_key_server_protocol column to item_video table";
      uint64_t v8 = (uint8_t *)&v11;
LABEL_8:
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    }
LABEL_9:

    uint64_t v5 = 0;
    goto LABEL_10;
  }
  if (([v3 executeUpdate:@"UPDATE item_video SET hls_key_server_protocol = 'simplified' WHERE item_video.hls_key_server_url != '' AND item_video.hls_asset_traits != 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      id v7 = "Failed to back-fill hls_key_server_protocol column";
      uint64_t v8 = (uint8_t *)&v10;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  [v4 setCurrentUserVersion:1950000];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1950000;"];
LABEL_10:

  return v5;
}

uint64_t ML3MigrationFunction1950000to1950010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE booklet (booklet_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', store_item_id INTEGER NOT NULL DEFAULT 0, redownload_params TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS BookletItemPersistentID ON booklet (item_pid ASC)"))
  {
    [v4 setCurrentUserVersion:1950010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1950010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1950010to1950020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0, is_music_show INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, download_source_container_pid INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid FROM item")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_new RENAME TO item")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id FROM album")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE album")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_new RENAME TO album")
    && [v3 executeUpdate:@"CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id FROM item_artist")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_artist_new RENAME TO item_artist")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '')")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id, cloud_universal_library_id) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id, cloud_universal_library_id FROM album_artist")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE album_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_artist_new RENAME TO album_artist")
    && [v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id FROM genre")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE genre")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE genre_new RENAME TO genre")
    && [v3 executeUpdate:@"CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id FROM composer")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE composer")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE composer_new RENAME TO composer"))
  {
    [v4 setCurrentUserVersion:1950020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1950020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1950020to1950030(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:1950030];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 1950030;"];
  return v5;
}

uint64_t ML3MigrationFunction1950030to1950040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    __int16 v12 = 0;
    id v7 = "Failed to add classical_experience_available column to album table";
    uint64_t v8 = (uint8_t *)&v12;
LABEL_11:
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_12;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    __int16 v11 = 0;
    id v7 = "Failed to add classical_experience_available column to album_artist table";
    uint64_t v8 = (uint8_t *)&v11;
    goto LABEL_11;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_artist ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      id v7 = "Failed to add classical_experience_available column to item_artist table";
      uint64_t v8 = (uint8_t *)&v10;
      goto LABEL_11;
    }
LABEL_12:

    uint64_t v5 = 0;
    goto LABEL_13;
  }
  [v4 setCurrentUserVersion:1950040];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 1950040;"];
LABEL_13:

  return v5;
}

uint64_t ML3MigrationFunction1950040to2000000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN extended_playback_attribute INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:2000000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2000000;"];
  }
  else
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "Failed to add extended_playback_attribute column to item_store", v8, 2u);
    }

    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2000000to2000010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0, is_music_show INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, download_source_container_pid INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, keep_local_constraints, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, keep_local_constraints, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid FROM item")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_new RENAME TO item")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available FROM album")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE album")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_new RENAME TO album")
    && [v3 executeUpdate:@"CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, classical_experience_available) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, classical_experience_available FROM item_artist")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_artist_new RENAME TO item_artist")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', classical_experience_available INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE album_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_artist_new RENAME TO album_artist")
    && [v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id FROM genre")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE genre")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE genre_new RENAME TO genre")
    && [v3 executeUpdate:@"CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id FROM composer")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE composer")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE composer_new RENAME TO composer"))
  {
    [v4 setCurrentUserVersion:2000010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2000010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2000010to2000020(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:2000020];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2000020;"];
  return v5;
}

uint64_t ML3MigrationFunction2000020to2030000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN extended_lyrics_attribute INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:2030000];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2030000;"];
  }
  else
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "Failed to add extended_lyrics_attribute column to item_store", v8, 2u);
    }

    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2030000to2050000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"ALTER TABLE item_stats ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to add is favorite column to item_stats";
LABEL_32:
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v9, 2u);
    goto LABEL_33;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_stats ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to add date favorited column to item_stats";
    goto LABEL_32;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to add is_favorite column to album";
    goto LABEL_32;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to add date favorited column to album";
    goto LABEL_32;
  }
  if (([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to add is favorite column to container";
    goto LABEL_32;
  }
  if (([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to add date favorited column to container";
    goto LABEL_32;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_artist ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to add is favorite column to item_artist";
    goto LABEL_32;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_artist ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to add date favorited column to item_artist";
    goto LABEL_32;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to add is favorite column to album_artist";
    goto LABEL_32;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      id v7 = "Failed to add date favorited column to album_artist";
      goto LABEL_32;
    }
LABEL_33:

    uint64_t v5 = 0;
    goto LABEL_34;
  }
  [v4 setCurrentUserVersion:2050000];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2050000;"];
LABEL_34:

  return v5;
}

uint64_t ML3MigrationFunction2050000to2050010(void *a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F1CB10];
  id v4 = a2;
  id v5 = a1;
  CFStringRef v6 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
  id v7 = [v3 fileURLWithPath:v6 isDirectory:1];

  uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  [v8 removeItemAtURL:v7 error:0];

  [v4 setNeedsToAutogenerateArtworkVariants:1];
  [v4 setCurrentUserVersion:2050010];

  uint64_t v9 = [v5 executeUpdate:@"PRAGMA user_version = 2050010;"];
  return v9;
}

uint64_t ML3MigrationFunction2050010to2050020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN store_id INTEGER NOT NULL DEFAULT 0"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    __int16 v15 = 0;
    id v7 = "Failed to add store id column to album";
    uint64_t v8 = (uint8_t *)&v15;
LABEL_20:
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_21;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN cloud_library_id TEXT NOT NULL DEFAULT ''"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    __int16 v14 = 0;
    id v7 = "Failed to add cloud library id column to album";
    uint64_t v8 = (uint8_t *)&v14;
    goto LABEL_20;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    __int16 v13 = 0;
    id v7 = "Failed to add universal library id column to album";
    uint64_t v8 = (uint8_t *)&v13;
    goto LABEL_20;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_artist ADD COLUMN cloud_library_id TEXT NOT NULL DEFAULT ''"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    __int16 v12 = 0;
    id v7 = "Failed to add cloud library id column to item_artist";
    uint64_t v8 = (uint8_t *)&v12;
    goto LABEL_20;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_artist ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    __int16 v11 = 0;
    id v7 = "Failed to add universal library id column to item_artist";
    uint64_t v8 = (uint8_t *)&v11;
    goto LABEL_20;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN cloud_library_id TEXT NOT NULL DEFAULT ''"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      id v7 = "Failed to add cloud library id column to album_artist";
      uint64_t v8 = (uint8_t *)&v10;
      goto LABEL_20;
    }
LABEL_21:

    uint64_t v5 = 0;
    goto LABEL_22;
  }
  [v4 setCurrentUserVersion:2050020];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2050020;"];
LABEL_22:

  return v5;
}

uint64_t ML3MigrationFunction2050020to2050030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, @"extended_lyrics_attribute", @"item_store") & 1) != 0
    || ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN extended_lyrics_attribute INTEGER NOT NULL DEFAULT 0"] & 1) != 0)
  {
    [v4 setCurrentUserVersion:2050030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2050030;"];
  }
  else
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "Failed to add extended_lyrics_attribute column to item_store", v8, 2u);
    }

    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050030to2050040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, cloud_library_id TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status,  keep_local_status_reason, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available, favorite_state, date_favorited, store_id, cloud_library_id, cloud_universal_library_id) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available, is_favorite, date_favorited, store_id, cloud_library_id, cloud_universal_library_id FROM album")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE album")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_new RENAME TO album")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, cloud_library_id TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '')")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, classical_experience_available, favorite_state, date_favorited, cloud_library_id, cloud_universal_library_id) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, classical_experience_available, is_favorite, date_favorited, cloud_library_id, cloud_universal_library_id FROM item_artist")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_artist_new RENAME TO item_artist")
    && [v3 executeUpdate:@"CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', classical_experience_available INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, cloud_library_id TEXT NOT NULL DEFAULT '')"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available, favorite_state, date_favorited, cloud_library_id) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available, is_favorite, date_favorited, cloud_library_id FROM album_artist")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE album_artist")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_artist_new RENAME TO album_artist")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, liked_state_changed INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill, liked_state, liked_state_changed, user_rating_is_derived, liked_state_changed_date, favorite_state, date_favorited) SELECT item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill, liked_state, liked_state_changed, user_rating_is_derived, liked_state_changed_date, is_favorite, date_favorited FROM item_stats")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_stats")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_stats_new RENAME TO item_stats")
    && [v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, favorite_state, date_favorited) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, is_favorite, date_favorited FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container"))
  {
    [v4 setCurrentUserVersion:2050040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2050040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050040to2050050(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:2050050];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2050050;"];
  return v5;
}

uint64_t ML3MigrationFunction2050050to2050060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, traits INTEGER NOT NULL DEFAULT 0)"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, favorite_state, date_favorited) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, favorite_state, date_favorited FROM container")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_new RENAME TO container"))
  {
    [v4 setCurrentUserVersion:2050060];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2050060;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050060to2050070(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, liked_state_changed INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_stats_new SELECT * FROM item_stats")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_stats")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_stats_new RENAME TO item_stats")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER NOT NULL DEFAULT 0, track_count INTEGER NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER NOT NULL DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER NOT NULL DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '', classical_work TEXT NOT NULL DEFAULT '', classical_movement TEXT NOT NULL DEFAULT '', classical_movement_count INTEGER NOT NULL DEFAULT 0, classical_movement_number INTEGER NOT NULL DEFAULT 0, is_preorder INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_extra_new SELECT * FROM item_extra")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_extra")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_extra_new RENAME TO item_extra")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_kvs_new (item_pid INTEGER PRIMARY KEY, key TEXT NOT NULL DEFAULT '', FOREIGN KEY(item_pid) REFERENCES item(item_pid))")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_kvs_new SELECT * FROM item_kvs")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_kvs")
    && [v3 executeUpdate:@"ALTER TABLE item_kvs_new RENAME TO item_kvs"]
    && [v3 executeUpdate:@"CREATE TABLE item_playback_new (item_pid INTEGER PRIMARY KEY, audio_format INTEGER NOT NULL DEFAULT 0, bit_rate INTEGER NOT NULL DEFAULT 0, codec_type INTEGER NOT NULL DEFAULT 0, codec_subtype INTEGER NOT NULL DEFAULT 0, data_kind INTEGER NOT NULL DEFAULT 0, data_url TEXT, duration INTEGER NOT NULL DEFAULT 0, eq_preset TEXT, format TEXT, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, has_video INTEGER NOT NULL DEFAULT 0, relative_volume INTEGER, sample_rate REAL NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0, progression_direction INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_playback_new SELECT * FROM item_playback")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_playback")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_playback_new RENAME TO item_playback")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE item_search_new (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))")&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_search_new SELECT * FROM item_search")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_search")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_search_new RENAME TO item_search")&& objc_msgSend(v3, "executeUpdate:",
                       @"CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', needs_reporting INTEGER NOT NULL DEFAULT 0, subscription_store_item_id INTEGER NOT NULL DEFAULT 0, playback_endpoint_type INTEGER NOT NULL DEFAULT 0, is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0, radio_station_id TEXT NOT NULL DEFAULT '', advertisement_unique_id TEXT NOT NULL DEFAULT '', advertisement_type INTEGER NOT NULL DEFAULT 0, is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0, cloud_asset_available INTEGER NOT NULL DEFAULT 0, is_subscription INTEGER NOT NULL DEFAULT 0, sync_in_my_library INTEGER NOT NULL DEFAULT 0, cloud_in_my_library INTEGER NOT NULL DEFAULT 0, cloud_album_id TEXT NOT NULL DEFAULT '', cloud_playback_endpoint_type INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', reporting_store_item_id INTEGER NOT NULL DEFAULT 0, asset_store_item_id INTEGER NOT NULL DEFAULT 0, extended_playback_attribute INTEGER NOT NULL DEFAULT 0, extended_lyrics_attribute INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))")
    && [v3 executeUpdate:@"INSERT INTO item_store_new SELECT * FROM item_store"]
    && [v3 executeUpdate:@"DROP TABLE item_store"]
    && [v3 executeUpdate:@"ALTER TABLE item_store_new RENAME TO item_store"]
    && [v3 executeUpdate:@"CREATE TABLE item_video_new (item_pid INTEGER PRIMARY KEY, video_quality INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, has_chapter_data INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0, has_hls INTEGER NOT NULL DEFAULT 0, audio_track_locale TEXT NOT NULL DEFAULT '', show_sort_type INTEGER NOT NULL DEFAULT 0, episode_type INTEGER NOT NULL DEFAULT 0, episode_type_display_name TEXT NOT NULL DEFAULT '', episode_sub_sort_order INTEGER NOT NULL DEFAULT 0, hls_offline_playback_keys BLOB, is_premium INTEGER NOT NULL DEFAULT 0, color_capability INTEGER NOT NULL DEFAULT 0, hls_color_capability INTEGER NOT NULL DEFAULT 0, hls_video_quality INTEGER NOT NULL DEFAULT 0, hls_playlist_url TEXT NOT NULL DEFAULT '', audio_capability INTEGER NOT NULL DEFAULT 0, hls_audio_capability INTEGER NOT NULL DEFAULT 0, hls_asset_traits INTEGER NOT NULL DEFAULT 0, hls_key_server_url TEXT NOT NULL DEFAULT '', hls_key_cert_url TEXT NOT NULL DEFAULT '', hls_key_server_protocol TEXT NOT NULL DEFAULT '', FOREIGN KEY(item_pid) REFERENCES item(item_pid))"]&& objc_msgSend(v3, "executeUpdate:", @"INSERT INTO item_video_new SELECT * FROM item_video")&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE item_video")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_video_new RENAME TO item_video"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:2050070];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2050070;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050070to2050080(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (+[ML3MusicLibrary updateTrackIntegrityOnConnection:v3])
  {
    [v4 setCurrentUserVersion:2050080];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2050080;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050080to2100000(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, cloud_library_id TEXT NOT NULL DEFAULT '', liked_state_changed_date INTEGER NOT NULL DEFAULT 0)"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to create album table";
LABEL_86:
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v9, 2u);
    goto LABEL_87;
  }
  if (([v3 executeUpdate:@"INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available, store_id, cloud_library_id) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available, store_id, cloud_library_id FROM album"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to populate new album table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"DROP TABLE album"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to drop album table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album_new RENAME TO album"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to rename album table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)"] & 1) == 0)
  {
    CFStringRef v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to create artist table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, classical_experience_available) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, classical_experience_available FROM item_artist"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to populate artist table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"DROP TABLE item_artist"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to drop artist table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_artist_new RENAME TO item_artist"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to rename artist table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', classical_experience_available INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0)"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to create album artist table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to populate album artist table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"DROP TABLE album_artist"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to drop album artist table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"ALTER TABLE album_artist_new RENAME TO album_artist"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to rename album artist table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', traits INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0)"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to create continer table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits FROM container"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to populate container table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"DROP TABLE container"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to drop container table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"ALTER TABLE container_new RENAME TO container"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to rename container table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, liked_state_changed INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to create item stats table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill, liked_state, liked_state_changed, user_rating_is_derived, liked_state_changed_date) SELECT item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill, liked_state, liked_state_changed, user_rating_is_derived, liked_state_changed_date FROM item_stats"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to populate item stats table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"DROP TABLE item_stats"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to drop item stats table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_stats_new RENAME TO item_stats"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to rename item stats table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"UPDATE album SET store_id = (SELECT store_playlist_id FROM item_store WHERE item_store.item_pid=album.representative_item_pid) WHERE album.representative_item_pid != 0"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to update album store id ";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"UPDATE album SET cloud_library_id = (SELECT cloud_album_id FROM item_store WHERE item_store.item_pid=album.representative_item_pid) WHERE album.representative_item_pid != 0"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to update album cloud id ";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"DROP TABLE store_link"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to drop store_link table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', needs_reporting INTEGER NOT NULL DEFAULT 0, subscription_store_item_id INTEGER NOT NULL DEFAULT 0, playback_endpoint_type INTEGER NOT NULL DEFAULT 0, is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0, radio_station_id TEXT NOT NULL DEFAULT '', advertisement_unique_id TEXT NOT NULL DEFAULT '', advertisement_type INTEGER NOT NULL DEFAULT 0, is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0, cloud_asset_available INTEGER NOT NULL DEFAULT 0, is_subscription INTEGER NOT NULL DEFAULT 0, sync_in_my_library INTEGER NOT NULL DEFAULT 0, cloud_in_my_library INTEGER NOT NULL DEFAULT 0, cloud_album_id TEXT NOT NULL DEFAULT '', cloud_playback_endpoint_type INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', reporting_store_item_id INTEGER NOT NULL DEFAULT 0, asset_store_item_id INTEGER NOT NULL DEFAULT 0, extended_playback_attribute INTEGER NOT NULL DEFAULT 0, extended_lyrics_attribute INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to create item_store_new table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_unique_id, advertisement_type, is_artist_uploaded_content, cloud_asset_available, is_subscription, sync_in_my_library, cloud_in_my_library, cloud_album_id, cloud_playback_endpoint_type, cloud_universal_library_id, reporting_store_item_id, asset_store_item_id, extended_playback_attribute, extended_lyrics_attribute) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_unique_id, advertisement_type, is_artist_uploaded_content, cloud_asset_available, is_subscription, sync_in_my_library, cloud_in_my_library, cloud_album_id, cloud_playback_endpoint_type, cloud_universal_library_id, reporting_store_item_id, asset_store_item_id, extended_playback_attribute, extended_lyrics_attribute FROM item_store"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to populate item_store_new table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"DROP TABLE item_store"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to drop item store table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"ALTER TABLE item_store_new RENAME TO item_store"] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_87;
    }
    *(_WORD *)uint64_t v9 = 0;
    id v7 = "Failed to rename item store table";
    goto LABEL_86;
  }
  if (([v3 executeUpdate:@"DELETE FROM entity_revision WHERE class=?" withParameters:&unk_1F090EAB8 error:0] & 1) == 0)
  {
    CFStringRef v6 = _ML3LogCategoryDefault();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      id v7 = "Failed to remove all entries for class ML3EntityTypeStoreLink";
      goto LABEL_86;
    }
LABEL_87:

    uint64_t v5 = 0;
    goto LABEL_88;
  }
  [v4 setCurrentUserVersion:2100000];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2100000;"];
LABEL_88:

  return v5;
}

uint64_t ML3MigrationFunction2100000to2100010(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:2100010];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2100010;"];
  return v5;
}

uint64_t ML3MigrationFunction2100010to2100020(void *a1, void *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v42 = a2;
  uint64_t v64 = 0;
  v65 = &v64;
  uint64_t v66 = 0x2020000000;
  char v67 = 1;
  id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
  CFStringRef v6 = [MEMORY[0x1E4F1CA48] array];
  id v7 = [v3 executeQuery:@"SELECT item_pid, media_type, base_location_id, path, location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE location != ''"];
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 3221225472;
  v56[2] = __ML3MigrationFunction2100010to2100020_block_invoke;
  v56[3] = &unk_1E5FAF818;
  uint64_t v63 = &v64;
  id v8 = v5;
  id v57 = v8;
  id v9 = v3;
  id v58 = v9;
  id v10 = v4;
  id v59 = v10;
  id v11 = v6;
  id v60 = v11;
  id v61 = @"NewLocation";
  uint64_t v62 = @"OldLocation";
  [v7 enumerateRowsWithBlock:v56];
  id v41 = v7;
  __int16 v12 = [ML3MusicLibrary alloc];
  __int16 v13 = [v9 databasePath];
  __int16 v14 = [(ML3MusicLibrary *)v12 initWithPath:v13];

  if (v14)
  {
    if (*((unsigned char *)v65 + 24))
    {
      char v15 = [v9 executeUpdate:@"INSERT INTO base_location (base_location_id, path) VALUES (?, ?)", &unk_1F090EAD0, 0 withParameters error];
      *((unsigned char *)v65 + 24) = v15;
      if (v15)
      {
        id v16 = [v9 executeQuery:@"SELECT base_location_id FROM base_location"];
        v52[0] = MEMORY[0x1E4F143A8];
        v52[1] = 3221225472;
        v52[2] = __ML3MigrationFunction2100010to2100020_block_invoke_3206;
        v52[3] = &unk_1E5FAF8B8;
        id v53 = v14;
        int v55 = &v64;
        id v54 = v9;
        [v16 enumerateRowsWithBlock:v52];
      }
      else
      {
        id v19 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1B022D000, v19, OS_LOG_TYPE_ERROR, "Error adding base_location_id=250 to base_location table", buf, 2u);
        }
      }
    }
  }
  else
  {
    id v17 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = [v9 databasePath];
      *(_DWORD *)long long buf = 138412290;
      id v69 = v18;
      _os_log_impl(&dword_1B022D000, v17, OS_LOG_TYPE_ERROR, "Could not find library with connection path=%@", buf, 0xCu);
    }
    *((unsigned char *)v65 + 24) = 0;
  }
  if (*((unsigned char *)v65 + 24))
  {
    BOOL v20 = +[ML3Track clearLocationFromLibrary:v14 persistentIDs:v8 disableKeepLocal:0 usingConnection:v9];
    *((unsigned char *)v65 + 24) = v20;
    if (v20) {
      goto LABEL_46;
    }
    id v21 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_ERROR, "Failed to clear location from cached tracks", buf, 2u);
    }

    if (*((unsigned char *)v65 + 24))
    {
LABEL_46:
      if (MSVDeviceSupportsMultipleLibraries())
      {
        id v22 = +[ML3MusicLibrary cloudAssetsSharedCacheFolderPath];
        int v23 = [v10 fileExistsAtPath:v22];

        if (v23)
        {
          id v24 = +[ML3MusicLibrary cloudAssetsSharedCacheFolderPath];
          id v51 = 0;
          char v25 = [v10 removeItemAtPath:v24 error:&v51];
          id v26 = v51;
          *((unsigned char *)v65 + 24) = v25;

          if (!*((unsigned char *)v65 + 24))
          {
            uint64_t v27 = os_log_create("com.apple.amp.medialibrary", "Migration");
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              id v69 = v26;
              _os_log_impl(&dword_1B022D000, v27, OS_LOG_TYPE_ERROR, "Encountered error removing cloudAssetsSharedCacheFolder. error=%@", buf, 0xCu);
            }
          }
        }
        else
        {
          id v26 = 0;
        }
        id v28 = [(ML3MusicLibrary *)v14 pathForResourceFileOrFolder:9];
        id v29 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v69 = v28;
          _os_log_impl(&dword_1B022D000, v29, OS_LOG_TYPE_DEFAULT, "Deleting Multi-user lofi-cache at path %@", buf, 0xCu);
        }

        if ([v10 fileExistsAtPath:v28])
        {
          id v50 = v26;
          char v30 = [v10 removeItemAtPath:v28 error:&v50];
          id v31 = v50;

          *((unsigned char *)v65 + 24) = v30;
          if ((v30 & 1) == 0)
          {
            id v32 = os_log_create("com.apple.amp.medialibrary", "Migration");
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412546;
              id v69 = v28;
              __int16 v70 = 2112;
              id v71 = v31;
              _os_log_impl(&dword_1B022D000, v32, OS_LOG_TYPE_ERROR, "Encountered error deleting %@. error=%@", buf, 0x16u);
            }
          }
        }
        else
        {
          id v31 = v26;
        }
        long long v33 = [(ML3MusicLibrary *)v14 pathForResourceFileOrFolder:8];
        long long v34 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v69 = v33;
          _os_log_impl(&dword_1B022D000, v34, OS_LOG_TYPE_DEFAULT, "Deleting Multi-user cache at path %@", buf, 0xCu);
        }

        if ([v10 fileExistsAtPath:v33])
        {
          id v49 = v31;
          char v35 = [v10 removeItemAtPath:v33 error:&v49];
          id v36 = v49;

          *((unsigned char *)v65 + 24) = v35;
          if ((v35 & 1) == 0)
          {
            id v37 = os_log_create("com.apple.amp.medialibrary", "Migration");
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412546;
              id v69 = v33;
              __int16 v70 = 2112;
              id v71 = v36;
              _os_log_impl(&dword_1B022D000, v37, OS_LOG_TYPE_ERROR, "Encountered error deleting %@. error=%@", buf, 0x16u);
            }
          }
        }
        else
        {
          id v36 = v31;
        }
      }
    }
  }
  uint64_t v38 = [MEMORY[0x1E4F1CA48] array];
  if (!*((unsigned char *)v65 + 24)) {
    goto LABEL_42;
  }
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = __ML3MigrationFunction2100010to2100020_block_invoke_3211;
  v43[3] = &unk_1E5FAF840;
  id v44 = @"OldLocation";
  __int16 v45 = @"NewLocation";
  id v46 = v10;
  long long v48 = &v64;
  id v47 = v38;
  [v11 enumerateObjectsUsingBlock:v43];

  if (!*((unsigned char *)v65 + 24)) {
LABEL_42:
  }
    [MEMORY[0x1E4F77950] snapshotWithDomain:*MEMORY[0x1E4F778D0] type:@"Bug" subType:@"Migration Error" context:@"Encountered Error Migrating Downloads" triggerThresholdValues:0 events:0 completion:0];
  [v42 setCurrentUserVersion:2100020];
  uint64_t v39 = [v9 executeUpdate:@"PRAGMA user_version = 2100020;"];

  _Block_object_dispose(&v64, 8);
  return v39;
}

void sub_1B03378CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction2100010to2100020_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  v44[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if (!v8)
  {
    id v10 = [v7 objectAtIndexedSubscript:0];
    uint64_t v11 = [v10 longLongValue];

    __int16 v12 = [v7 objectAtIndexedSubscript:1];
    char v13 = [v12 integerValue];

    __int16 v14 = [v7 objectAtIndexedSubscript:2];
    uint64_t v15 = [v14 integerValue];

    id v16 = [v7 objectAtIndexedSubscript:3];
    id v17 = [v7 objectAtIndexedSubscript:4];
    if ((MSVDeviceSupportsMultipleLibraries() & 1) != 0 || v15 == 100) {
      goto LABEL_9;
    }
    if (v15 != 300)
    {
      if (v15 != 200)
      {
LABEL_10:

        goto LABEL_11;
      }
LABEL_9:
      uint64_t v18 = *(void **)(a1 + 32);
      id v19 = [NSNumber numberWithLongLong:v11];
      [v18 addObject:v19];

      goto LABEL_10;
    }
    if ((v13 & 8) == 0) {
      goto LABEL_10;
    }
    BOOL v20 = *(void **)(a1 + 40);
    v44[0] = &unk_1F0910CA8;
    id v21 = [NSNumber numberWithLongLong:v11];
    v44[1] = v21;
    id v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v44 count:2];
    id v36 = 0;
    [v20 executeUpdate:@"UPDATE item SET base_location_id = ? WHERE item_pid = ?" withParameters:v22 error:&v36];
    id v23 = v36;

    if (v23)
    {
      id v24 = _ML3LogCategoryMigration();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218242;
        uint64_t v41 = v11;
        __int16 v42 = 2112;
        id v43 = v23;
        _os_log_impl(&dword_1B022D000, v24, OS_LOG_TYPE_ERROR, "Encountered error updating item.base_location_id to 250 for item_pid=%lld. error=%@", buf, 0x16u);
      }
    }
    else
    {
      id v24 = +[ML3MusicLibrary pathForBaseLocationPath:250];
      if ([*(id *)(a1 + 48) fileExistsAtPath:v24])
      {
        id v23 = 0;
      }
      else
      {
        char v25 = *(void **)(a1 + 48);
        id v35 = 0;
        char v26 = [v25 createDirectoryAtPath:v24 withIntermediateDirectories:1 attributes:0 error:&v35];
        id v23 = v35;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v26;
        if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
        {
          id v32 = _ML3LogCategoryMigration();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            uint64_t v41 = (uint64_t)v24;
            __int16 v42 = 2112;
            id v43 = v23;
            _os_log_impl(&dword_1B022D000, v32, OS_LOG_TYPE_ERROR, "Encountered error creating directory at path %@. error=%@", buf, 0x16u);
          }

          *a4 = 1;
          goto LABEL_20;
        }
      }
      long long v33 = *(void **)(a1 + 56);
      v38[0] = *(void *)(a1 + 64);
      long long v34 = [v24 stringByAppendingPathComponent:v17];
      v38[1] = *(void *)(a1 + 72);
      v39[0] = v34;
      uint64_t v27 = NSString;
      id v28 = +[ML3MusicLibrary mediaFolderPath];
      v37[0] = v28;
      v37[1] = v16;
      v37[2] = v17;
      id v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:v37 count:3];
      char v30 = [v27 pathWithComponents:v29];
      v39[1] = v30;
      id v31 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:2];
      [v33 addObject:v31];
    }
LABEL_20:

    goto LABEL_10;
  }
  id v9 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v41 = (uint64_t)v8;
    _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_ERROR, "Encountered error with initial query. error=%@", buf, 0xCu);
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
  *a4 = 1;
LABEL_11:
}

void __ML3MigrationFunction2100010to2100020_block_invoke_3206(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = [v6 objectAtIndexedSubscript:0];
  uint64_t v8 = [v7 integerValue];

  if (v8)
  {
    id v9 = [*(id *)(a1 + 32) pathForBaseLocationPath:v8];
    id v10 = [*(id *)(a1 + 32) mediaFolderRelativePath:v9];
    uint64_t v11 = os_log_create("com.apple.amp.medialibrary", "Migration");
    __int16 v12 = v11;
    if (v10)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134218242;
        uint64_t v21 = v8;
        __int16 v22 = 2112;
        id v23 = v10;
        _os_log_impl(&dword_1B022D000, v12, OS_LOG_TYPE_DEBUG, "Updating base_location table. base_location_id=%lld path=%@", buf, 0x16u);
      }

      char v13 = *(void **)(a1 + 40);
      v26[0] = v10;
      __int16 v14 = [NSNumber numberWithLongLong:v8];
      v26[1] = v14;
      uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:2];
      id v19 = 0;
      char v16 = [v13 executeUpdate:@"UPDATE base_location SET path = ? where base_location_id = ?" withParameters:v15 error:&v19];
      __int16 v12 = v19;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v16;

      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
      {
        id v17 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134218498;
          uint64_t v21 = v8;
          __int16 v22 = 2112;
          id v23 = v10;
          __int16 v24 = 2112;
          char v25 = v12;
          _os_log_impl(&dword_1B022D000, v17, OS_LOG_TYPE_ERROR, "Encountered error updating base_location table. base_location_id=%lld path=%@ error=%@", buf, 0x20u);
        }

        *a4 = 1;
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = [v6 stringForColumnIndex:1];
      *(_DWORD *)long long buf = 134218242;
      uint64_t v21 = v8;
      __int16 v22 = 2114;
      id v23 = v18;
      _os_log_impl(&dword_1B022D000, v12, OS_LOG_TYPE_ERROR, "Failed to form a base for base_location %lld, path=%{public}@", buf, 0x16u);
    }
  }
}

void __ML3MigrationFunction2100010to2100020_block_invoke_3211(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];
  uint64_t v8 = [v6 objectForKeyedSubscript:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 48) fileExistsAtPath:v7])
  {
    id v9 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v18 = v7;
      __int16 v19 = 2112;
      BOOL v20 = v8;
      _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_DEBUG, "Moving %@ to %@", buf, 0x16u);
    }

    id v10 = *(void **)(a1 + 48);
    id v16 = 0;
    char v11 = [v10 moveItemAtPath:v7 toPath:v8 error:&v16];
    id v12 = v16;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v11;
    int v13 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    __int16 v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
    uint64_t v15 = v14;
    if (v13)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v18 = v7;
        __int16 v19 = 2112;
        BOOL v20 = v8;
        _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_DEFAULT, "Moved asset from %@ to %@", buf, 0x16u);
      }

      [*(id *)(a1 + 56) addObject:v6];
    }
    else
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        uint64_t v18 = v7;
        __int16 v19 = 2112;
        BOOL v20 = v8;
        __int16 v21 = 2112;
        id v22 = v12;
        _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_ERROR, "Encountered error moving file from %@ to %@. error=%@", buf, 0x20u);
      }

      *a4 = 1;
    }
  }
}

uint64_t ML3MigrationFunction2100020to2100030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"update _MLDatabaseProperties set value=0 where key='MLSyncClientSyncAnchor'"])
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:2100030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2100030;"];
  }
  else
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "Failed to clear MLSyncClientSyncAnchor from the database", v8, 2u);
    }

    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100030to2100040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (+[ML3MusicLibrary updateTrackIntegrityOnConnection:v3])
  {
    [v4 setCurrentUserVersion:2100040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2100040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100040to2100050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN cover_artwork_recipe BLOB"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN is_collaborative INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN collaborator_invite_options INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN collaborator_permissions INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container_item ADD COLUMN uuid TEXT NOT NULL DEFAULT ''")
    && [v3 executeUpdate:@"ALTER TABLE container_item ADD COLUMN position_uuid TEXT NOT NULL DEFAULT ''"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE container_author (container_author_pid INTEGER PRIMARY KEY, container_pid INTEGER NOT NULL DEFAULT 0, person_pid INTEGER NOT NULL DEFAULT 0, role INTEGER NOT NULL DEFAULT 0, UNIQUE (container_pid, person_pid))")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ContainerAuthorContainerPID ON container_author (container_pid ASC)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE TABLE container_item_reaction (container_item_reaction_pid INTEGER PRIMARY KEY, container_item_pid INTEGER NOT NULL DEFAULT 0, person_pid INTEGER NOT NULL DEFAULT 0, reaction TEXT NOT NULL DEFAULT '', date INTEGER NOT NULL DEFAULT 0)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ContainerItemReactionContainerItemPID ON container_item_reaction (container_item_pid ASC)"))
  {
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
    [v4 setCurrentUserVersion:2100050];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2100050;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100050to2100060(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (MSVDeviceOSIsInternalInstall()
    && (MSVDeviceIsWatch() & 1) == 0
    && (MSVDeviceSupportsMultipleLibraries() & 1) == 0)
  {
    uint64_t v5 = [ML3MusicLibrary alloc];
    id v6 = [v3 databasePath];
    id v7 = [(ML3MusicLibrary *)v5 initWithPath:v6];

    uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v9 = [v3 executeQuery:@"SELECT base_location_id, path, location FROM item JOIN item_extra USING(item_pid) join base_location USING (base_location_id) WHERE base_location_id >= ? AND base_location_id <= ?", &unk_1F090EAE8 withParameters];
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = __ML3MigrationFunction2100050to2100060_block_invoke;
    v28[3] = &unk_1E5FAF868;
    id v29 = @"Music/iTunes";
    id v10 = v7;
    char v30 = v10;
    id v11 = v8;
    id v31 = v11;
    id v32 = @"iTunes_Control/Music";
    [v9 enumerateRowsWithBlock:v28];
    id v12 = [v3 executeQuery:@"SELECT base_location_id FROM base_location WHERE base_location_id >= ? AND base_location_id <= ?" withParameters:&unk_1F090EB00];
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __ML3MigrationFunction2100050to2100060_block_invoke_3287;
    v25[3] = &unk_1E5FB6278;
    int v13 = v10;
    char v26 = v13;
    id v14 = v3;
    id v27 = v14;
    [v12 enumerateRowsWithBlock:v25];
    uint64_t v15 = [MEMORY[0x1E4F1CA48] array];
    id v16 = [v14 executeQuery:@"SELECT item_pid, base_location_id FROM item WHERE base_location_id < ? OR base_location_id > ? ", &unk_1F090EB18 withParameters];
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __ML3MigrationFunction2100050to2100060_block_invoke_2;
    v23[3] = &unk_1E5FB83F8;
    id v17 = v15;
    id v24 = v17;
    [v16 enumerateRowsWithBlock:v23];
    +[ML3Track clearLocationFromLibrary:v13 persistentIDs:v17 disableKeepLocal:0 usingConnection:v14];
    id v22 = 0;
    [v14 executeUpdate:@"DELETE FROM base_location where base_location_id < ? OR base_location_id > ? " withParameters:&unk_1F090EB30 error:&v22];
    id v18 = v22;
    if (v18)
    {
      __int16 v19 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v34 = v18;
        _os_log_impl(&dword_1B022D000, v19, OS_LOG_TYPE_ERROR, "SyncLocationRollback: Encountered error deleting invalid base_location_ids error=%@", buf, 0xCu);
      }
    }
    [v4 setNeedsToRecreateIndexes:1];
    [v4 setNeedsToRecreateTriggers:1];
  }
  [v4 setCurrentUserVersion:2100060];
  uint64_t v20 = [v3 executeUpdate:@"PRAGMA user_version = 2100060;"];

  return v20;
}

void __ML3MigrationFunction2100050to2100060_block_invoke(uint64_t a1, void *a2)
{
  v43[3] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 objectAtIndexedSubscript:0];
  uint64_t v5 = [v4 integerValue];

  id v6 = [v3 objectAtIndexedSubscript:1];
  id v7 = [v3 objectAtIndexedSubscript:2];

  if ([v6 hasPrefix:*(void *)(a1 + 32)])
  {
    uint64_t v8 = NSString;
    id v9 = [*(id *)(a1 + 40) mediaFolderPath];
    v43[0] = v9;
    v43[1] = v6;
    v43[2] = v7;
    id v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v43 count:3];
    id v11 = [v8 pathWithComponents:v10];

    id v12 = [*(id *)(a1 + 40) pathForBaseLocationPath:v5];
    int v13 = [v12 stringByAppendingPathComponent:v7];
    if ([*(id *)(a1 + 48) fileExistsAtPath:v13])
    {
      id v14 = *(void **)(a1 + 48);
      id v36 = 0;
      int v15 = [v14 removeItemAtPath:v13 error:&v36];
      id v16 = v36;
      id v17 = v16;
      if (v15)
      {
        id v18 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v38 = v13;
          _os_log_impl(&dword_1B022D000, v18, OS_LOG_TYPE_ERROR, "SyncLocationRollback: Removed existing file at path=%@", buf, 0xCu);
        }

        if (v17) {
          goto LABEL_28;
        }
      }
      else if (v16)
      {
        char v25 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          uint64_t v38 = v13;
          __int16 v39 = 2112;
          long long v40 = v17;
          char v26 = "SyncLocationRollback: Failed to remove existing file at path=%@ error=%@";
          id v27 = v25;
          os_log_type_t v28 = OS_LOG_TYPE_ERROR;
LABEL_26:
          _os_log_impl(&dword_1B022D000, v27, v28, v26, buf, 0x16u);
        }
LABEL_27:

LABEL_28:
        goto LABEL_29;
      }
    }
    if (([*(id *)(a1 + 48) fileExistsAtPath:v12] & 1) == 0)
    {
      id v29 = *(void **)(a1 + 48);
      id v35 = 0;
      char v30 = [v29 createDirectoryAtPath:v12 withIntermediateDirectories:1 attributes:0 error:&v35];
      id v17 = v35;
      if ((v30 & 1) == 0)
      {
        id v31 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          uint64_t v38 = v12;
          __int16 v39 = 2112;
          long long v40 = v17;
          _os_log_impl(&dword_1B022D000, v31, OS_LOG_TYPE_ERROR, "SyncLocationRollback: Encountered error creating directory at path: %@ error=%@", buf, 0x16u);
        }
      }
      if (v17) {
        goto LABEL_28;
      }
    }
    id v32 = *(void **)(a1 + 48);
    id v34 = 0;
    int v33 = [v32 moveItemAtPath:v11 toPath:v13 error:&v34];
    id v17 = v34;
    if (!v33) {
      goto LABEL_28;
    }
    char v25 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v38 = v11;
      __int16 v39 = 2112;
      long long v40 = v13;
      char v26 = "SyncLocationRollback: Successfully moved item from %@ to %@";
      id v27 = v25;
      os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  int v19 = [v6 hasPrefix:*(void *)(a1 + 56)];
  uint64_t v20 = os_log_create("com.apple.amp.medialibrary", "Migration");
  id v17 = v20;
  if (v19)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v38 = v6;
      __int16 v39 = 2112;
      long long v40 = v7;
      __int16 v21 = "SyncLocationRollback: Asset location is %@/%@. Nothing to do";
      id v22 = v17;
      os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
      uint32_t v24 = 22;
LABEL_13:
      _os_log_impl(&dword_1B022D000, v22, v23, v21, buf, v24);
    }
  }
  else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412802;
    uint64_t v38 = v6;
    __int16 v39 = 2112;
    long long v40 = v7;
    __int16 v41 = 2048;
    uint64_t v42 = v5;
    __int16 v21 = "SyncLocationRollback: encountered unexpected path %@/%@ for item with base_location %llu";
    id v22 = v17;
    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    uint32_t v24 = 32;
    goto LABEL_13;
  }
LABEL_29:
}

void __ML3MigrationFunction2100050to2100060_block_invoke_3287(uint64_t a1, void *a2)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  id v3 = [a2 objectAtIndexedSubscript:0];
  uint64_t v4 = [v3 longLongValue];

  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = [v5 pathForBaseLocationPath:v4];
  id v7 = [v5 mediaFolderRelativePath:v6];

  uint64_t v8 = *(void **)(a1 + 40);
  v11[0] = v7;
  id v9 = [NSNumber numberWithLongLong:v4];
  v11[1] = v9;
  id v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:2];
  [v8 executeUpdate:@"UPDATE base_location SET path = ? WHERE base_location_id = ?" withParameters:v10 error:0];
}

void __ML3MigrationFunction2100050to2100060_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 objectAtIndexedSubscript:0];
  uint64_t v5 = [v4 longLongValue];

  id v6 = [v3 objectAtIndexedSubscript:1];

  uint64_t v7 = [v6 longLongValue];
  uint64_t v8 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134218240;
    uint64_t v12 = v5;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_DEFAULT, "SyncLocationRollback: Clearing location for pid=%lld with base_location_id %lld", (uint8_t *)&v11, 0x16u);
  }

  id v9 = *(void **)(a1 + 32);
  id v10 = [NSNumber numberWithLongLong:v5];
  [v9 addObject:v10];
}

uint64_t ML3MigrationFunction2100060to2100070(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToAutogenerateArtworkVariants:1];
  [v3 setCurrentUserVersion:2100070];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2100070;"];
  return v5;
}

uint64_t ML3MigrationFunction2100070to2100080(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN collaboration_invitation_link TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:2100080];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2100080;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100080to2100090(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container DROP COLUMN cover_artwork_recipe"]
    && [v3 executeUpdate:@"ALTER TABLE container ADD COLUMN cover_artwork_recipe TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:2100090];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2100090;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100090to2100100(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!MSVDeviceIsWatch()) {
    goto LABEL_12;
  }
  uint64_t v25 = 0;
  char v26 = &v25;
  uint64_t v27 = 0x2020000000;
  char v28 = 1;
  uint64_t v5 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v6 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v7 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"Music/Downloads"];
  uint64_t v8 = [v3 executeQuery:@"SELECT item_pid, location FROM item JOIN item_extra USING(item_pid) WHERE base_location_id=300 AND (media_type & 8) != 0"];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __ML3MigrationFunction2100090to2100100_block_invoke;
  v19[3] = &unk_1E5FAF890;
  uint32_t v24 = &v25;
  id v9 = v7;
  id v20 = v9;
  id v10 = v5;
  id v21 = v10;
  id v11 = v3;
  id v22 = v11;
  id v12 = v6;
  id v23 = v12;
  [v8 enumerateRowsWithBlock:v19];
  if (!*((unsigned char *)v26 + 24)) {
    goto LABEL_7;
  }
  int v13 = ML3MigrationClearLocationFromLibraryAsOf2100100(v12, 0, v11, 0);
  *((unsigned char *)v26 + 24) = v13;
  if (v13)
  {
    uint64_t v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_DEFAULT, "Cleared all orphaned mismatched pids", v18, 2u);
    }
    char v15 = 0;
  }
  else
  {
LABEL_7:
    uint64_t v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Could not update mismatched track downloads. Failing migration.", v18, 2u);
    }
    char v15 = 1;
  }

  _Block_object_dispose(&v25, 8);
  if (v15)
  {
    uint64_t v16 = 0;
  }
  else
  {
LABEL_12:
    [v4 setCurrentUserVersion:2100100];
    uint64_t v16 = [v3 executeUpdate:@"PRAGMA user_version = 2100100;"];
  }

  return v16;
}

void sub_1B0339414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction2100090to2100100_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if (v8)
  {
    id v9 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v22 = v8;
      _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_ERROR, "Encountered error enumerating mismatched tracks. error=%{public}@", buf, 0xCu);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    *a4 = 1;
  }
  id v10 = [v7 objectAtIndexedSubscript:0];
  id v11 = [v7 objectAtIndexedSubscript:1];
  id v12 = [*(id *)(a1 + 32) stringByAppendingPathComponent:v11];
  if ([*(id *)(a1 + 40) fileExistsAtPath:v12])
  {
    int v13 = *(void **)(a1 + 48);
    id v20 = v10;
    uint64_t v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v20 count:1];
    id v19 = 0;
    int v15 = [v13 executeUpdate:@"UPDATE item SET base_location_id = 250 WHERE item_pid = ?" withParameters:v14 error:&v19];
    id v16 = v19;

    id v17 = os_log_create("com.apple.amp.medialibrary", "Migration");
    id v18 = v17;
    if (v15)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v22 = v10;
        _os_log_impl(&dword_1B022D000, v18, OS_LOG_TYPE_DEFAULT, "Updated base_location_id for mismatched pid %{public}@", buf, 0xCu);
      }
    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v22 = v16;
        _os_log_impl(&dword_1B022D000, v18, OS_LOG_TYPE_ERROR, "Encountered error updating mismatched tracks. error=%{public}@", buf, 0xCu);
      }

      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
      *a4 = 1;
    }
  }
  else
  {
    [*(id *)(a1 + 56) addObject:v10];
  }
}

uint64_t ML3MigrationFunction2100100to2100110(void *a1, void *a2)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"ManagedPurchases/TVApp"];
  uint64_t v25 = 0;
  char v26 = &v25;
  uint64_t v27 = 0x3032000000;
  char v28 = __Block_byref_object_copy__2386;
  id v29 = __Block_byref_object_dispose__2387;
  id v30 = 0;
  v35[0] = &unk_1F0910CF0;
  v35[1] = @"ManagedPurchases/TVApp";
  id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v35 count:2];
  id v7 = (id *)(v26 + 5);
  id obj = (id)v26[5];
  char v8 = [v3 executeUpdate:@"INSERT INTO base_location (base_location_id, path) VALUES (?, ?)", v6, &obj withParameters error];
  objc_storeStrong(v7, obj);

  if (v8)
  {
    id v9 = [MEMORY[0x1E4F28CB8] defaultManager];
    char v10 = [v9 fileExistsAtPath:v5];

    if ((v10 & 1) != 0
      || ([MEMORY[0x1E4F28CB8] defaultManager],
          id v11 = objc_claimAutoreleasedReturnValue(),
          id v12 = (id *)(v26 + 5),
          id v23 = (id)v26[5],
          char v13 = [v11 createDirectoryAtPath:v5 withIntermediateDirectories:1 attributes:0 error:&v23], objc_storeStrong(v12, v23), v11, (v13 & 1) != 0))
    {
      uint64_t v14 = [v3 executeQuery:@"SELECT item_pid, path, location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE ((item.media_type & (? | ?)) != 0) AND base_location_id = ? AND location != ''", &unk_1F090EB48 withParameters];
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __ML3MigrationFunction2100100to2100110_block_invoke;
      v20[3] = &unk_1E5FAF8B8;
      void v20[4] = v5;
      id v22 = &v25;
      id v21 = v3;
      [v14 enumerateRowsWithBlock:v20];
    }
    else
    {
      uint64_t v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = v26[5];
        *(_DWORD *)long long buf = 138412546;
        id v32 = v5;
        __int16 v33 = 2112;
        uint64_t v34 = v19;
        _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Encountered error creating directory at path %@. error=%@", buf, 0x16u);
      }
    }

    [v4 setCurrentUserVersion:2100110];
    uint64_t v15 = [v3 executeUpdate:@"PRAGMA user_version = 2100110;"];
  }
  else
  {
    id v16 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = (void *)v26[5];
      *(_DWORD *)long long buf = 138412290;
      id v32 = v17;
      _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_ERROR, "Error adding base_location_id=500 to base_location table: %@", buf, 0xCu);
    }

    uint64_t v15 = 0;
  }
  _Block_object_dispose(&v25, 8);

  return v15;
}

void sub_1B0339A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction2100100to2100110_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  v45[3] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if (!v8)
  {
    char v10 = [v7 objectAtIndexedSubscript:0];
    uint64_t v11 = [v10 longLongValue];

    id v12 = [v7 objectAtIndexedSubscript:1];
    char v13 = [v7 objectAtIndexedSubscript:2];
    if (![v12 length] || !objc_msgSend(v13, "length")) {
      goto LABEL_23;
    }
    uint64_t v14 = NSString;
    uint64_t v15 = +[ML3MusicLibrary mediaFolderPath];
    v45[0] = v15;
    v45[1] = v12;
    v45[2] = v13;
    id v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v45 count:3];
    id v17 = [v14 pathWithComponents:v16];

    id v35 = [*(id *)(a1 + 32) stringByAppendingPathComponent:v13];
    id v18 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v19 = [v18 fileExistsAtPath:v17];

    id v20 = os_log_create("com.apple.amp.medialibrary", "Migration");
    id v21 = v20;
    if (v19)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v39 = (uint64_t)v17;
        __int16 v40 = 2112;
        __int16 v41 = v35;
        _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_DEFAULT, "Moving TV App download %@ to %@", buf, 0x16u);
      }

      id v22 = [MEMORY[0x1E4F28CB8] defaultManager];
      uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8);
      id obj = *(id *)(v23 + 40);
      int v24 = [v22 moveItemAtPath:v17 toPath:v35 error:&obj];
      objc_storeStrong((id *)(v23 + 40), obj);

      uint64_t v25 = os_log_create("com.apple.amp.medialibrary", "Migration");
      id v21 = v25;
      if (v24)
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412546;
          uint64_t v39 = (uint64_t)v17;
          __int16 v40 = 2112;
          __int16 v41 = v35;
          _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_DEFAULT, "Successfully moved TV App download from %@ to %@", buf, 0x16u);
        }

        uint64_t v34 = *(void **)(a1 + 40);
        v44[0] = &unk_1F0910CF0;
        char v26 = [NSNumber numberWithLongLong:v11];
        v44[1] = v26;
        uint64_t v27 = [MEMORY[0x1E4F1C978] arrayWithObjects:v44 count:2];
        uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 8);
        id v36 = *(id *)(v28 + 40);
        [v34 executeUpdate:@"UPDATE item SET base_location_id = ? WHERE item_pid = ?" withParameters:v27 error:&v36];
        objc_storeStrong((id *)(v28 + 40), v36);

        if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) {
          goto LABEL_22;
        }
        id v21 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          id v29 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          *(_DWORD *)long long buf = 134218242;
          uint64_t v39 = v11;
          __int16 v40 = 2112;
          __int16 v41 = v29;
          id v30 = "Encountered error updating item.base_location_id to 500 for item_pid=%lld. error=%@";
          id v31 = v21;
          uint32_t v32 = 22;
LABEL_20:
          _os_log_impl(&dword_1B022D000, v31, OS_LOG_TYPE_ERROR, v30, buf, v32);
        }
      }
      else if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v39 = (uint64_t)v17;
        __int16 v40 = 2112;
        __int16 v41 = v35;
        __int16 v42 = 2112;
        uint64_t v43 = v33;
        id v30 = "Encountered error moving file from %@ to %@. error=%@";
        id v31 = v21;
        uint32_t v32 = 32;
        goto LABEL_20;
      }
    }
    else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v39 = (uint64_t)v17;
      id v30 = "Unable to move TV App download at %@ because it does not exist";
      id v31 = v21;
      uint32_t v32 = 12;
      goto LABEL_20;
    }

LABEL_22:
LABEL_23:

    goto LABEL_24;
  }
  id v9 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v39 = (uint64_t)v8;
    _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_ERROR, "Encountered error with local purchase tracks query. error=%@", buf, 0xCu);
  }

  *a4 = 1;
LABEL_24:
}

uint64_t ML3MigrationFunction2100110to2100120(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container_author ADD COLUMN is_pending INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ContainerAuthorRole ON container_author (role ASC)")&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ContainerAuthorIsPending ON container_author (is_pending ASC)"))
  {
    [v4 setCurrentUserVersion:2100120];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2100120;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100120to2100130(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN collaboration_invitation_url_expiration_date INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE container ADD COLUMN collaboration_join_request_pending INTEGER NOT NULL DEFAULT 0"))
  {
    [v4 setCurrentUserVersion:2100130];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2100130;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100130to2100140(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE person ADD COLUMN lightweight_profile INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:2100140];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2100140;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100140to2100150(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setNeedsToRecreateTriggers:1];
  [v3 setCurrentUserVersion:2100150];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2100150;"];
  return v5;
}

uint64_t ML3MigrationFunction2100150to2110000(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN sort_order INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE album_artist ADD COLUMN sort_order_section INTEGER NOT NULL DEFAULT 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album_artist SET sort_order = (SELECT album_artist_order FROM item WHERE item.item_pid=album_artist.representative_item_pid) WHERE album_artist.representative_item_pid != 0")&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album_artist SET sort_order_section = (SELECT album_artist_order_section FROM item WHERE item.item_pid=album_artist.representative_item_pid) WHERE album_artist.representative_item_pid != 0"))
  {
    id v10 = 0;
    char v5 = [v3 executeUpdate:@"UPDATE album SET liked_state=? WHERE (liked_state=? AND NOT EXISTS (SELECT 1 FROM item WHERE in_my_library AND item.album_pid = album.album_pid))" withParameters:&unk_1F090EB60 error:&v10];
    id v6 = v10;
    if ((v5 & 1) == 0)
    {
      id v7 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v12 = v6;
        _os_log_impl(&dword_1B022D000, v7, OS_LOG_TYPE_ERROR, "Failed to patch up orphaned albums with incorrect liked_state. error=%{public}@", buf, 0xCu);
      }
    }
    [v4 setCurrentUserVersion:2110000];
    uint64_t v8 = [v3 executeUpdate:@"PRAGMA user_version = 2110000;"];
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t ML3MigrationFunction2110000to2120000(void *a1, void *a2)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  char v5 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"ManagedPurchases/Books"];
  uint64_t v25 = 0;
  char v26 = &v25;
  uint64_t v27 = 0x3032000000;
  uint64_t v28 = __Block_byref_object_copy__2386;
  id v29 = __Block_byref_object_dispose__2387;
  id v30 = 0;
  v35[0] = &unk_1F0910D50;
  v35[1] = @"ManagedPurchases/Books";
  id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v35 count:2];
  id v7 = (id *)(v26 + 5);
  id obj = (id)v26[5];
  char v8 = [v3 executeUpdate:@"INSERT INTO base_location (base_location_id, path) VALUES (?, ?)", v6, &obj withParameters error];
  objc_storeStrong(v7, obj);

  if (v8)
  {
    id v9 = [MEMORY[0x1E4F28CB8] defaultManager];
    char v10 = [v9 fileExistsAtPath:v5];

    if ((v10 & 1) != 0
      || ([MEMORY[0x1E4F28CB8] defaultManager],
          uint64_t v11 = objc_claimAutoreleasedReturnValue(),
          id v12 = (id *)(v26 + 5),
          id v23 = (id)v26[5],
          char v13 = [v11 createDirectoryAtPath:v5 withIntermediateDirectories:1 attributes:0 error:&v23], objc_storeStrong(v12, v23), v11, (v13 & 1) != 0))
    {
      uint64_t v14 = [v3 executeQuery:@"SELECT item_pid, path, location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE (item.media_type & ? != 0) AND base_location_id = ? AND location != ''", &unk_1F090EB78 withParameters];
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __ML3MigrationFunction2110000to2120000_block_invoke;
      v20[3] = &unk_1E5FAF8B8;
      void v20[4] = v5;
      id v22 = &v25;
      id v21 = v3;
      [v14 enumerateRowsWithBlock:v20];
    }
    else
    {
      uint64_t v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = v26[5];
        *(_DWORD *)long long buf = 138412546;
        uint32_t v32 = v5;
        __int16 v33 = 2112;
        uint64_t v34 = v19;
        _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "Encountered error creating directory at path %@. error=%@", buf, 0x16u);
      }
    }

    [v4 setCurrentUserVersion:2120000];
    uint64_t v15 = [v3 executeUpdate:@"PRAGMA user_version = 2120000;"];
  }
  else
  {
    id v16 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = (void *)v26[5];
      *(_DWORD *)long long buf = 138412290;
      uint32_t v32 = v17;
      _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_ERROR, "Error adding base_location_id=600 to base_location table: %@", buf, 0xCu);
    }

    uint64_t v15 = 0;
  }
  _Block_object_dispose(&v25, 8);

  return v15;
}

void sub_1B033A638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction2110000to2120000_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  v59[3] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if (!v8)
  {
    char v10 = [v7 objectAtIndexedSubscript:0];
    uint64_t v11 = [v10 longLongValue];

    id v12 = [v7 objectAtIndexedSubscript:1];
    char v13 = [v7 objectAtIndexedSubscript:2];
    if (![v12 length] || !objc_msgSend(v13, "length")) {
      goto LABEL_33;
    }
    uint64_t v14 = NSString;
    uint64_t v15 = +[ML3MusicLibrary mediaFolderPath];
    v59[0] = v15;
    v59[1] = v12;
    v59[2] = v13;
    id v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v59 count:3];
    id v17 = [v14 pathWithComponents:v16];

    id v18 = [*(id *)(a1 + 32) stringByAppendingPathComponent:v13];
    uint64_t v19 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v20 = [v19 fileExistsAtPath:v17];

    id v21 = os_log_create("com.apple.amp.medialibrary", "Migration");
    id v22 = v21;
    if (!v20)
    {
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
LABEL_31:

LABEL_32:
LABEL_33:
        uint64_t v45 = *(void *)(*(void *)(a1 + 48) + 8);
        id v46 = *(void **)(v45 + 40);
        *(void *)(v45 + 40) = 0;

        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 138412290;
      uint64_t v53 = (uint64_t)v17;
      uint64_t v39 = "Unable to move audiobook download at %@ because it does not exist";
      __int16 v40 = v22;
      os_log_type_t v41 = OS_LOG_TYPE_ERROR;
      uint32_t v42 = 12;
LABEL_28:
      _os_log_impl(&dword_1B022D000, v40, v41, v39, buf, v42);
      goto LABEL_31;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v53 = (uint64_t)v17;
      __int16 v54 = 2112;
      int v55 = v18;
      _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_DEFAULT, "Moving audiobook download %@ to %@", buf, 0x16u);
    }

    id v23 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8);
    id obj = *(id *)(v24 + 40);
    long long v48 = v18;
    int v25 = [v23 moveItemAtPath:v17 toPath:v18 error:&obj];
    objc_storeStrong((id *)(v24 + 40), obj);

    char v26 = os_log_create("com.apple.amp.medialibrary", "Migration");
    id v22 = v26;
    if (v25)
    {
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v53 = (uint64_t)v17;
        __int16 v54 = 2112;
        int v55 = v48;
        _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_DEFAULT, "Successfully moved audiobook download from %@ to %@", buf, 0x16u);
      }

      uint64_t v27 = *(void **)(a1 + 40);
      v58[0] = &unk_1F0910D50;
      uint64_t v28 = [NSNumber numberWithLongLong:v11];
      v58[1] = v28;
      id v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:v58 count:2];
      id v47 = v17;
      uint64_t v30 = *(void *)(*(void *)(a1 + 48) + 8);
      id v50 = *(id *)(v30 + 40);
      [v27 executeUpdate:@"UPDATE item SET base_location_id = ? WHERE item_pid = ?" withParameters:v29 error:&v50];
      id v31 = (id *)(v30 + 40);
      id v17 = v47;
      objc_storeStrong(v31, v50);

      id v18 = v48;
      if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) {
        goto LABEL_32;
      }
      uint32_t v32 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        __int16 v33 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        *(_DWORD *)long long buf = 134218242;
        uint64_t v53 = v11;
        __int16 v54 = 2112;
        int v55 = v33;
        _os_log_impl(&dword_1B022D000, v32, OS_LOG_TYPE_ERROR, "Encountered error updating item.base_location_id to 600 for item_pid=%lld. error=%@", buf, 0x16u);
      }

      uint64_t v34 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v53 = (uint64_t)v48;
        __int16 v54 = 2112;
        int v55 = v47;
        _os_log_impl(&dword_1B022D000, v34, OS_LOG_TYPE_DEFAULT, "Moving audiobook download back from %@ to %@", buf, 0x16u);
      }

      id v35 = [MEMORY[0x1E4F28CB8] defaultManager];
      uint64_t v36 = *(void *)(*(void *)(a1 + 48) + 8);
      id v49 = *(id *)(v36 + 40);
      int v37 = [v35 moveItemAtPath:v48 toPath:v47 error:&v49];
      objc_storeStrong((id *)(v36 + 40), v49);

      uint64_t v38 = os_log_create("com.apple.amp.medialibrary", "Migration");
      id v22 = v38;
      if (v37)
      {
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412546;
          id v17 = v47;
          id v18 = v48;
          uint64_t v53 = (uint64_t)v48;
          __int16 v54 = 2112;
          int v55 = v47;
          uint64_t v39 = "Successfully moved audiobook download back from %@ to %@";
          __int16 v40 = v22;
          os_log_type_t v41 = OS_LOG_TYPE_DEFAULT;
          uint32_t v42 = 22;
          goto LABEL_28;
        }
        goto LABEL_29;
      }
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
LABEL_29:
        id v17 = v47;
        goto LABEL_30;
      }
      uint64_t v44 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)long long buf = 138412802;
      id v17 = v47;
      id v18 = v48;
      uint64_t v53 = (uint64_t)v48;
      __int16 v54 = 2112;
      int v55 = v47;
      __int16 v56 = 2112;
      uint64_t v57 = v44;
      uint64_t v39 = "Encountered error moving file back from %@ to %@. error=%@";
    }
    else
    {
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
LABEL_30:
        id v18 = v48;
        goto LABEL_31;
      }
      uint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v53 = (uint64_t)v17;
      __int16 v54 = 2112;
      id v18 = v48;
      int v55 = v48;
      __int16 v56 = 2112;
      uint64_t v57 = v43;
      uint64_t v39 = "Encountered error moving file from %@ to %@. error=%@";
    }
    __int16 v40 = v22;
    os_log_type_t v41 = OS_LOG_TYPE_ERROR;
    uint32_t v42 = 32;
    goto LABEL_28;
  }
  id v9 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v53 = (uint64_t)v8;
    _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_ERROR, "Encountered error with local purchase tracks query. error=%@", buf, 0xCu);
  }

  *a4 = 1;
LABEL_34:
}

uint64_t ML3MigrationFunction2120000to2120010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container ADD COLUMN collaborator_status INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:2120010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2120010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2120010to2120020(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToUpdateSortMap:1];
  [v3 setForceUpdateOriginals:1];
  [v3 setCurrentUserVersion:2120020];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2120020;"];
  return v5;
}

uint64_t ML3MigrationFunction2120020to2120030(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, @"collaborator_status", @"container") & 1) != 0
    || [v3 executeUpdate:@"ALTER TABLE container ADD COLUMN collaborator_status INTEGER NOT NULL DEFAULT 0"])
  {
    [v4 setCurrentUserVersion:2120030];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2120030;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2120030to2120040(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container_author ADD COLUMN position INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ContainerAuthorPosition ON container_author (position ASC)"))
  {
    [v4 setCurrentUserVersion:2120040];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2120040;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2120040to2120050(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local INTEGER NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', traits INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, is_collaborative INTEGER NOT NULL DEFAULT 0, collaborator_invite_options INTEGER NOT NULL DEFAULT 0, collaborator_permissions INTEGER NOT NULL DEFAULT 0, collaboration_invitation_link TEXT NOT NULL DEFAULT '', cover_artwork_recipe TEXT NOT NULL DEFAULT '', collaboration_invitation_url_expiration_date INTEGER NOT NULL DEFAULT 0 ,collaboration_join_request_pending INTEGER NOT NULL DEFAULT 0 ,collaborator_status INTEGER NOT NULL DEFAULT 0)"] & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    __int16 v13 = 0;
    id v7 = "Failed to create continer_new table";
    id v8 = (uint8_t *)&v13;
LABEL_14:
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_15;
  }
  if (([v3 executeUpdate:@"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits, liked_state_changed_date, is_collaborative, collaborator_invite_options, collaborator_permissions, collaboration_invitation_link, cover_artwork_recipe, collaboration_invitation_url_expiration_date, collaboration_join_request_pending, collaborator_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits, liked_state_changed_date, is_collaborative, collaborator_invite_options, collaborator_permissions, collaboration_invitation_link, cover_artwork_recipe, collaboration_invitation_url_expiration_date, collaboration_join_request_pending, collaborator_status FROM container"] & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    __int16 v12 = 0;
    id v7 = "Failed to populate container table";
    id v8 = (uint8_t *)&v12;
    goto LABEL_14;
  }
  if (([v3 executeUpdate:@"DROP TABLE container"] & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    __int16 v11 = 0;
    id v7 = "Failed to drop container table";
    id v8 = (uint8_t *)&v11;
    goto LABEL_14;
  }
  if (([v3 executeUpdate:@"ALTER TABLE container_new RENAME TO container"] & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      id v7 = "Failed to rename container table";
      id v8 = (uint8_t *)&v10;
      goto LABEL_14;
    }
LABEL_15:

    uint64_t v5 = 0;
    goto LABEL_16;
  }
  [v4 setCurrentUserVersion:2120050];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2120050;"];
LABEL_16:

  return v5;
}

uint64_t ML3MigrationFunction2120050to2120060(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToMarkArtworkPurgeable:1];
  [v3 setCurrentUserVersion:2120060];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2120060;"];
  return v5;
}

uint64_t ML3MigrationFunction2120060to2150000(void *a1, void *a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [MEMORY[0x1E4F1C9C8] date];
  id v6 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  id v7 = [v6 dateByAddingUnit:4 value:2 toDate:v5 options:1];

  [v7 timeIntervalSinceReferenceDate];
  id v8 = objc_msgSend(NSNumber, "numberWithDouble:");
  v18[0] = v8;
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1];
  id v15 = 0;
  char v10 = [v3 executeUpdate:@"UPDATE container SET date_modified=(date_modified-978307200.0) WHERE is_owner=1 AND date_modified > ?" withParameters:v9 error:&v15];
  id v11 = v15;

  if (v10)
  {
    [v4 setCurrentUserVersion:2150000];
    uint64_t v12 = [v3 executeUpdate:@"PRAGMA user_version = 2150000;"];
  }
  else
  {
    __int16 v13 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v17 = v11;
      _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_ERROR, "Failed to update date_modified for container table. error=%{public}@", buf, 0xCu);
    }

    uint64_t v12 = 0;
  }

  return v12;
}

uint64_t ML3MigrationFunction2150000to2160000(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToMarkArtworkPurgeable:1];
  [v3 setCurrentUserVersion:2160000];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2160000;"];
  return v5;
}

uint64_t ML3MigrationFunction2160000to2200000(void *a1, void *a2)
{
  id v3 = a1;
  [a2 setCurrentUserVersion:2200000];
  uint64_t v4 = [v3 executeUpdate:@"PRAGMA user_version = 2200000;"];

  return v4;
}

uint64_t ML3MigrationFunction2200000to2200010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, @"position", @"container_author") & 1) != 0
    || [v3 executeUpdate:@"ALTER TABLE container_author ADD COLUMN position INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"CREATE INDEX IF NOT EXISTS ContainerAuthorPosition ON container_author (position ASC)"))
  {
    [v4 setCurrentUserVersion:2200010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2200010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2200010to2200020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 executeUpdate:@"CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local INTEGER NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', traits INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, is_collaborative INTEGER NOT NULL DEFAULT 0, collaborator_invite_options INTEGER NOT NULL DEFAULT 0, collaborator_permissions INTEGER NOT NULL DEFAULT 0, collaboration_invitation_link TEXT NOT NULL DEFAULT '', cover_artwork_recipe TEXT NOT NULL DEFAULT '', collaboration_invitation_url_expiration_date INTEGER NOT NULL DEFAULT 0, collaboration_join_request_pending INTEGER NOT NULL DEFAULT 0, collaborator_status INTEGER NOT NULL DEFAULT 0)"] & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    __int16 v13 = 0;
    id v7 = "Failed to create continer_new table";
    id v8 = (uint8_t *)&v13;
LABEL_14:
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_15;
  }
  if (([v3 executeUpdate:@"INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits, liked_state_changed_date, is_collaborative, collaborator_invite_options, collaborator_permissions, collaboration_invitation_link, cover_artwork_recipe, collaboration_invitation_url_expiration_date, collaboration_join_request_pending, collaborator_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits, liked_state_changed_date, is_collaborative, collaborator_invite_options, collaborator_permissions, collaboration_invitation_link, cover_artwork_recipe, collaboration_invitation_url_expiration_date, collaboration_join_request_pending, collaborator_status FROM container"] & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    __int16 v12 = 0;
    id v7 = "Failed to populate container table";
    id v8 = (uint8_t *)&v12;
    goto LABEL_14;
  }
  if (([v3 executeUpdate:@"DROP TABLE container"] & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    __int16 v11 = 0;
    id v7 = "Failed to drop container table";
    id v8 = (uint8_t *)&v11;
    goto LABEL_14;
  }
  if (([v3 executeUpdate:@"ALTER TABLE container_new RENAME TO container"] & 1) == 0)
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v10 = 0;
      id v7 = "Failed to rename container table";
      id v8 = (uint8_t *)&v10;
      goto LABEL_14;
    }
LABEL_15:

    uint64_t v5 = 0;
    goto LABEL_16;
  }
  [v4 setCurrentUserVersion:2200020];
  uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2200020;"];
LABEL_16:

  return v5;
}

uint64_t ML3MigrationFunction2200020to2200030(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v24 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE container_item ADD COLUMN occurrence_id TEXT NOT NULL DEFAULT ''"])
  {
    id v23 = [v3 executeQuery:@"SELECT container_pid, container_item_pid, item_pid, subscription_store_item_id, cloud_universal_library_id, store_item_id, cloud_status, in_my_library, playback_endpoint_type FROM container_item LEFT OUTER JOIN item USING (item_pid) LEFT OUTER JOIN item_store USING (item_pid) ORDER BY container_pid, position"];
    id v4 = [MEMORY[0x1E4F28BD0] set];
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x2020000000;
    v30[3] = 0;
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = __ML3MigrationFunction2200020to2200030_block_invoke;
    void v26[3] = &unk_1E5FAF8B8;
    id v29 = v30;
    id v22 = v4;
    id v27 = v22;
    id v6 = v5;
    id v28 = v6;
    [v23 enumerateRowsWithBlock:v26];
    if (![v6 count]) {
      goto LABEL_19;
    }
    if (([v3 executeUpdate:@"CREATE TEMPORARY TABLE container_item_temp (container_item_pid INTEGER NOT NULL, occurrence_id TEXT NOT NULL)"] & 1) == 0)goto LABEL_20; {
    unint64_t v7 = [v6 count];
    }
    unint64_t v8 = 0;
    *(void *)&long long v9 = 138412290;
    long long v21 = v9;
    while (v7 > v8)
    {
      __int16 v10 = (void *)MEMORY[0x1B3E93C70]();
      if (v7 - v8 >= 5) {
        uint64_t v11 = 5;
      }
      else {
        uint64_t v11 = v7 - v8;
      }
      __int16 v12 = +[ML3DatabaseStatementRenderer defaultRenderer];
      __int16 v13 = [v12 statementWithPrefix:@"INSERT INTO container_item_temp (container_item_pid, occurrence_id) VALUES", 2, v11 inParameterCount valueCount];

      uint64_t v14 = objc_msgSend(v6, "subarrayWithRange:", v8, v11);
      id v15 = objc_msgSend(v14, "msv_flatMap:", &__block_literal_global_2410);

      id v25 = 0;
      char v16 = [v3 executeUpdate:v13 withParameters:v15 error:&v25];
      id v17 = v25;
      if (v16)
      {
        v8 += v11;
      }
      else
      {
        id v18 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = v21;
          id v32 = v17;
          _os_log_impl(&dword_1B022D000, v18, OS_LOG_TYPE_ERROR, "Encountered error backfilling container_item.occurrence_id. error=%@", buf, 0xCu);
        }
      }
      if ((v16 & 1) == 0) {
        goto LABEL_20;
      }
    }
    if ([v3 executeUpdate:@"UPDATE container_item SET occurrence_id = (SELECT occurrence_id FROM container_item_temp WHERE container_item_temp.container_item_pid = container_item.container_item_pid)"]&& objc_msgSend(v3, "executeUpdate:", @"DROP TABLE container_item_temp"))
    {
LABEL_19:
      objc_msgSend(v24, "setCurrentUserVersion:", 2200030, v21);
      uint64_t v19 = [v3 executeUpdate:@"PRAGMA user_version = 2200030;"];
    }
    else
    {
LABEL_20:
      uint64_t v19 = 0;
    }

    _Block_object_dispose(v30, 8);
  }
  else
  {
    uint64_t v19 = 0;
  }

  return v19;
}

void sub_1B033B9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction2200020to2200030_block_invoke(uint64_t a1, void *a2)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 int64ForColumnIndex:0];
  uint64_t v18 = [v3 int64ForColumnIndex:1];
  uint64_t v5 = [v3 int64ForColumnIndex:2];
  uint64_t v6 = [v3 int64ForColumnIndex:3];
  unint64_t v7 = [v3 stringForColumnIndex:4];
  uint64_t v8 = [v3 int64ForColumnIndex:5];
  uint64_t v9 = [v3 int64ForColumnIndex:6];
  uint64_t v10 = [v3 int64ForColumnIndex:7];
  uint64_t v11 = [v3 int64ForColumnIndex:8];

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) != v4)
  {
    [*(id *)(a1 + 32) removeAllObjects];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v4;
  }
  __int16 v12 = ML3ContainerItemOccurrencePrefix(v6, v7, v8, v5, v9, v10 != 0, v11);
  uint64_t v13 = [*(id *)(a1 + 32) countForObject:v12];
  [*(id *)(a1 + 32) addObject:v12];
  uint64_t v14 = objc_msgSend(v12, "stringByAppendingFormat:", @"_%lld", v13);
  id v15 = *(void **)(a1 + 40);
  char v16 = [NSNumber numberWithLongLong:v18];
  v19[0] = v16;
  v19[1] = v14;
  id v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:2];
  [v15 addObject:v17];
}

id __ML3MigrationFunction2200020to2200030_block_invoke_2(int a1, id a2)
{
  return a2;
}

uint64_t ML3MigrationFunction2200030to2200040(void *a1, void *a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v6 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  unint64_t v7 = [v6 dateByAddingUnit:4 value:2 toDate:v5 options:1];

  [v7 timeIntervalSinceReferenceDate];
  uint64_t v8 = objc_msgSend(NSNumber, "numberWithDouble:");
  v18[0] = v8;
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1];
  id v15 = 0;
  char v10 = [v3 executeUpdate:@"UPDATE container SET date_modified=(date_modified-978307200.0) WHERE is_owner=1 AND date_modified > ?" withParameters:v9 error:&v15];
  id v11 = v15;

  if (v10)
  {
    [v4 setCurrentUserVersion:2200040];
    uint64_t v12 = [v3 executeUpdate:@"PRAGMA user_version = 2200040;"];
  }
  else
  {
    uint64_t v13 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v17 = v11;
      _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_ERROR, "Failed to update date_modified for container table. error=%{public}@", buf, 0xCu);
    }

    uint64_t v12 = 0;
  }

  return v12;
}

uint64_t ML3MigrationFunction2200040to2200050(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToRecreateIndexes:1];
  [v3 setCurrentUserVersion:2200050];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2200050;"];
  return v5;
}

uint64_t ML3MigrationFunction2200050to2200060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN store_canonical_id TEXT NOT NULL DEFAULT ''"])
  {
    [v4 setCurrentUserVersion:2200060];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2200060;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2200060to2200070(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 setNeedsToMarkArtworkPurgeable:1];
  [v3 setCurrentUserVersion:2200070];

  uint64_t v5 = [v4 executeUpdate:@"PRAGMA user_version = 2200070;"];
  return v5;
}

uint64_t ML3MigrationFunction2200070to2220000(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x3032000000;
  long long v21 = __Block_byref_object_copy__2386;
  id v22 = __Block_byref_object_dispose__2387;
  id v23 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v5 = [v3 executeQuery:@"SELECT item_pid FROM item_store WHERE (store_saga_id = 0 AND cloud_universal_library_id != '')"];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __ML3MigrationFunction2200070to2220000_block_invoke;
  v17[3] = &unk_1E5FB77B8;
  void v17[4] = &v18;
  [v5 enumerateRowsWithBlock:v17];
  uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default_Oversize");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = v19[5];
    *(_DWORD *)long long buf = 138543362;
    uint64_t v25 = v7;
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "Clearing match properties for trackPIDS=%{public}@", buf, 0xCu);
  }

  uint64_t v8 = (void *)v19[5];
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 3221225472;
  uint64_t v14 = __ML3MigrationFunction2200070to2220000_block_invoke_3528;
  id v15 = &unk_1E5FB7858;
  id v9 = v3;
  id v16 = v9;
  [v8 enumerateObjectsUsingBlock:&v12];
  objc_msgSend(v4, "setCurrentUserVersion:", 2220000, v12, v13, v14, v15);
  uint64_t v10 = [v9 executeUpdate:@"PRAGMA user_version = 2220000;"];

  _Block_object_dispose(&v18, 8);
  return v10;
}

void sub_1B033C17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationFunction2200070to2220000_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(a2, "int64ForColumnIndex:", 0));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 addObject:v3];
}

void __ML3MigrationFunction2200070to2220000_block_invoke_3528(uint64_t a1, void *a2)
{
  v15[8] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v15[0] = &stru_1F08D4D70;
  v15[1] = &unk_1F0910C18;
  v15[2] = &unk_1F0910D68;
  void v15[3] = &unk_1F0910C18;
  v15[4] = &unk_1F0910C18;
  v15[5] = &stru_1F08D4D70;
  v15[6] = &stru_1F08D4D70;
  v15[7] = v3;
  uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:8];
  id v10 = 0;
  char v6 = [v4 executeUpdate:@"UPDATE item_store SET match_redownload_params=?, needs_reporting=?, playback_endpoint_type=?, cloud_playback_endpoint_type=?, cloud_in_my_library=?, cloud_album_id=?, cloud_universal_library_id=? WHERE item_pid=?", v5, &v10 withParameters error];
  id v7 = v10;

  if ((v6 & 1) == 0)
  {
    uint64_t v8 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = [v3 longLongValue];
      *(_DWORD *)long long buf = 134218242;
      uint64_t v12 = v9;
      __int16 v13 = 2114;
      id v14 = v7;
      _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_ERROR, "Failed to clear match source properties for track_pid=%lld, error=%{public}@", buf, 0x16u);
    }
  }
}

uint64_t ML3MigrationFunction2220000to2220010(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE item_store ADD COLUMN tv_show_canonical_id TEXT NOT NULL DEFAULT ''"]&& objc_msgSend(v3, "executeUpdate:", @"ALTER TABLE item_store ADD COLUMN tv_season_canonical_id TEXT NOT NULL DEFAULT ''"))
  {
    [v4 setCurrentUserVersion:2220010];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2220010;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2220010to2220020(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 executeUpdate:@"ALTER TABLE album_artist ADD COLUMN name_order INTEGER NOT NULL DEFAULT 0"]&& objc_msgSend(v3, "executeUpdate:", @"UPDATE album_artist SET name_order = (SELECT IFNULL(name_order, 0) FROM sort_map WHERE sort_map.name=album_artist.album_artist) WHERE album_artist.representative_item_pid != 0"))
  {
    [v4 setCurrentUserVersion:2220020];
    uint64_t v5 = [v3 executeUpdate:@"PRAGMA user_version = 2220020;"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1B033C7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B033CD38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2480(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2481(uint64_t a1)
{
}

void sub_1B033D274(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_1B033DC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B033FEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0340E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose((const void *)(v40 - 192), 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

uint64_t __UpdateBestArtworkToken_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [a2 stringForColumnIndex:0];

  return MEMORY[0x1F41817F8]();
}

void sub_1B03417A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0341EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

id GetP7BPath()
{
  v0 = MLMobileUserHomeDirectory();
  char v1 = [v0 stringByAppendingPathComponent:@"/Media/iTunes_Control/iTunes/MediaLibrary.p7b"];

  return v1;
}

void sub_1B0343AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0344FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03450C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03451F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0345368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03454D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t InsertOrReplaceIntoArtworkToken(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v35[5] = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a1;
  if ([v11 length])
  {
    v35[0] = v11;
    __int16 v13 = [NSNumber numberWithInteger:a3];
    v35[1] = v13;
    id v14 = [NSNumber numberWithInteger:a4];
    v35[2] = v14;
    id v15 = [NSNumber numberWithLongLong:a5];
    void v35[3] = v15;
    id v16 = [NSNumber numberWithInteger:a6];
    uint8_t v35[4] = v16;
    id v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v35 count:5];
    id v31 = 0;
    char v18 = [v12 executeUpdate:@"INSERT OR REPLACE INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) VALUES (?, ?, ?, ?, ?)", v17, &v31 withParameters error];

    id v19 = v31;
    if ((v18 & 1) == 0)
    {
      uint64_t v20 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v34 = v19;
        long long v21 = "Failed to update artwork_token with error: %{public}@";
LABEL_9:
        _os_log_impl(&dword_1B022D000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  else
  {
    id v22 = [NSNumber numberWithLongLong:a5];
    v32[0] = v22;
    id v23 = [NSNumber numberWithInteger:a6];
    v32[1] = v23;
    id v24 = [NSNumber numberWithInteger:a4];
    v32[2] = v24;
    uint64_t v25 = [NSNumber numberWithInteger:a3];
    v32[3] = v25;
    uint64_t v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:v32 count:4];
    id v30 = 0;
    char v27 = [v12 executeUpdate:@"DELETE FROM artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ? AND artwork_source_type = ?" withParameters:v26 error:&v30];

    id v19 = v30;
    if ((v27 & 1) == 0)
    {
      uint64_t v20 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v34 = v19;
        long long v21 = "Failed to delete artwork_token with error: %{public}@";
        goto LABEL_9;
      }
LABEL_10:

      uint64_t v28 = 0;
      goto LABEL_11;
    }
  }
  uint64_t v28 = 1;
LABEL_11:

  return v28;
}

void sub_1B0345FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose((const void *)(v51 - 160), 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_1B0346810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0346F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Block_object_dispose((const void *)(v31 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B0347C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1B03488D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0349DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034A784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034A8B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1B034AB64(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B034B940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034C004(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B034C47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034C8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034CDDC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t WriteDictionaryToPathWithGrappaID(void *a1, void *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = (void *)MEMORY[0x1B3E93C70]();
  id v27 = 0;
  uint64_t v8 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v5 format:200 options:0 error:&v27];
  id v9 = v27;
  id v10 = v9;
  if (v8)
  {
    id v26 = v9;
    char v11 = [v8 writeToFile:v6 options:1 error:&v26];
    id v12 = v26;

    if (v11)
    {
      if (a3)
      {
        uint64_t v25 = 0;
        unsigned int v24 = 0;
        id v13 = v8;
        jumT7rcoieclCtxS2rgJ(a3, [v13 bytes], objc_msgSend(v13, "length"), (uint64_t)&v25);
        if (v14)
        {
          id v10 = v12;
        }
        else
        {
          char v18 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v25 length:v24];
          id v19 = [v6 stringByAppendingPathExtension:@"cig"];
          id v23 = v12;
          char v20 = [v18 writeToFile:v19 options:1 error:&v23];
          id v10 = v23;

          if ((v20 & 1) == 0)
          {
            long long v21 = os_log_create("com.apple.amp.medialibrary", "Library");
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543618;
              id v29 = v6;
              __int16 v30 = 2114;
              id v31 = v10;
              _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_ERROR, "Could not write to %{public}@: %{public}@", buf, 0x16u);
            }
          }
          X5EvIJWqdcALcjaxX6Pl(v25);
        }
        uint64_t v16 = 1;
        goto LABEL_20;
      }
      uint64_t v16 = 1;
    }
    else
    {
      id v17 = os_log_create("com.apple.amp.medialibrary", "Library");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543618;
        id v29 = v6;
        __int16 v30 = 2114;
        id v31 = v12;
        _os_log_impl(&dword_1B022D000, v17, OS_LOG_TYPE_ERROR, "Could not write to %{public}@: %{public}@", buf, 0x16u);
      }

      uint64_t v16 = 0;
    }
    id v10 = v12;
    goto LABEL_20;
  }
  id v15 = os_log_create("com.apple.amp.medialibrary", "Library");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138543618;
    id v29 = v5;
    __int16 v30 = 2114;
    id v31 = v10;
    _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_ERROR, "Could not encode %{public}@: %{public}@", buf, 0x16u);
  }

  uint64_t v16 = 0;
LABEL_20:

  return v16;
}

void sub_1B034EC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034EF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034F194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034F398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034F48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034F7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B034F8F0(_Unwind_Exception *a1)
{
}

void sub_1B034F910(void *a1)
{
}

void sub_1B034F9C0(_Unwind_Exception *a1)
{
}

void sub_1B034F9E0(void *a1)
{
}

void sub_1B034FDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B035056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0350918(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B0351088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03525FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B035316C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3766(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3767(uint64_t a1)
{
}

void sub_1B03533B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0353B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03541EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

sqlite3_value *MLDBArgumentAsString(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(sqlite3_value **)(a1 + 8 * a2);
  if (v2)
  {
    uint64_t v2 = (sqlite3_value *)sqlite3_value_text(v2);
    if (v2) {
      uint64_t v2 = (sqlite3_value *)[[NSString alloc] initWithUTF8String:v2];
    }
  }

  return v2;
}

id SBKIdentifierStringByMD5HashingString(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = [a1 dataUsingEncoding:4];
  if ([v1 length]
    && (memset(&c, 0, sizeof(c)), CC_MD5_Init(&c))
    && (id v2 = v1,
        CC_MD5_Update(&c, (const void *)[v2 bytes], objc_msgSend(v2, "length")))
    && CC_MD5_Final(md, &c))
  {
    id v3 = [MEMORY[0x1E4F1C9B8] dataWithBytes:md length:16];
    uint64_t v4 = [v3 length];
    id v5 = v3;
    uint64_t v6 = [v5 bytes];
    id v7 = [MEMORY[0x1E4F28E78] stringWithCapacity:2 * v4];
    if (v4 >= 1)
    {
      uint64_t v8 = 0;
      unsigned int v9 = 1;
      do
      {
        objc_msgSend(v7, "appendFormat:", @"%02x", *(unsigned __int8 *)(v6 + v8));
        uint64_t v8 = v9;
      }
      while (v4 > v9++);
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_1B0354EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1B035543C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1B0355EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0356578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03566C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id _containmentPredicateForIsMediaTypePredicate(void *a1, unsigned int a2)
{
  id v3 = a1;
  int v4 = [v3 comparison];
  id v5 = [v3 value];

  LODWORD(v3) = [v5 BOOLValue];
  uint64_t v6 = _containmentMediaTypeMasksPredicateForMediaTypeMask(((int)(((v4 != 2) ^ v3) << 31) >> 31) ^ a2);

  return v6;
}

id _containmentMediaTypeMasksPredicateForMediaTypeMask(uint64_t a1)
{
  if (_containmentMediaTypeMasksPredicateForMediaTypeMask_onceToken != -1) {
    dispatch_once(&_containmentMediaTypeMasksPredicateForMediaTypeMask_onceToken, &__block_literal_global_4293);
  }
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = __Block_byref_object_copy__3766;
  id v15 = __Block_byref_object_dispose__3767;
  id v16 = 0;
  id v2 = [NSNumber numberWithUnsignedInt:a1];
  id v3 = _containmentMediaTypeMasksPredicateForMediaTypeMask_queue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___containmentMediaTypeMasksPredicateForMediaTypeMask_block_invoke_2;
  block[3] = &unk_1E5FB26E8;
  id v8 = v2;
  unsigned int v9 = &v11;
  int v10 = a1;
  id v4 = v2;
  dispatch_sync(v3, block);
  id v5 = (id)v12[5];

  _Block_object_dispose(&v11, 8);

  return v5;
}

void sub_1B03573E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___containmentMediaTypeMasksPredicateForMediaTypeMask_block_invoke_2(uint64_t a1)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [(id)_containmentMediaTypeMasksPredicateForMediaTypeMask_cache objectForKey:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v5 = [MEMORY[0x1E4F1CA48] array];
    for (uint64_t i = 0; i != 25; ++i)
    {
      if ((*(_DWORD *)(a1 + 48) & _containmentMediaTypeMasksPredicateForMediaTypeMask_validMediaTypesMasks[i]) != 0)
      {
        id v7 = objc_msgSend(NSNumber, "numberWithUnsignedInt:");
        [v5 addObject:v7];
      }
    }
    if ([v5 count])
    {
      [v5 sortUsingSelector:sel_compare_];
      id v8 = [MEMORY[0x1E4F1CAD0] setWithArray:v5];
      uint64_t v9 = +[ML3ContainmentPredicate predicateWithProperty:@"media_type" values:v8];
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      id v12 = [v5 objectAtIndexedSubscript:0];
      unint64_t v13 = [v12 unsignedIntegerValue];

      if (v13 >= 0x200)
      {
        uint64_t v14 = [NSNumber numberWithUnsignedInteger:v13];
        id v15 = +[ML3ComparisonPredicate predicateWithProperty:@"media_type" value:v14 comparison:4];

        uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        v24[0] = v15;
        v24[1] = v16;
        id v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:2];
        uint64_t v18 = +[ML3CompoundPredicate predicateMatchingPredicates:v17];
        uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
        char v20 = *(void **)(v19 + 40);
        *(void *)(v19 + 40) = v18;
      }
    }
    else
    {
      uint64_t v21 = +[ML3TruthPredicate truePredicate];
      uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8);
      id v23 = *(void **)(v22 + 40);
      *(void *)(v22 + 40) = v21;
    }
    [(id)_containmentMediaTypeMasksPredicateForMediaTypeMask_cache setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKey:*(void *)(a1 + 32)];
  }
}

uint64_t ___containmentMediaTypeMasksPredicateForMediaTypeMask_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F77998]) initWithMaximumCapacity:16];
  uint64_t v1 = (void *)_containmentMediaTypeMasksPredicateForMediaTypeMask_cache;
  _containmentMediaTypeMasksPredicateForMediaTypeMask_cache = v0;

  _containmentMediaTypeMasksPredicateForMediaTypeMask_queue = (uint64_t)dispatch_queue_create(0, 0);

  return MEMORY[0x1F41817F8]();
}

BOOL MIPPodcastReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        id v17 = objc_alloc_init(MIPArtist);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (MIPArtistReadFrom(v17, a2)) {
          goto LABEL_26;
        }
        goto LABEL_34;
      case 2u:
        id v17 = objc_alloc_init(MIPSeries);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (MIPSeriesReadFrom((uint64_t)v17, a2))
        {
LABEL_26:
          PBReaderRecallMark();
LABEL_30:

LABEL_31:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_34:

        return 0;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_29;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_29:
        id v17 = *(MIPArtist **)(a1 + v19);
        *(void *)(a1 + v19) = v18;
        goto LABEL_30;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_31;
    }
  }
}

void sub_1B03586FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, std::__shared_weak_count *a13)
{
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);

  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3PurchaseHistoryImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3PurchaseHistoryImportItem>,std::allocator<ML3PurchaseHistoryImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_28ML3PurchaseHistoryImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3PurchaseHistoryImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3PurchaseHistoryImportItem>,std::allocator<ML3PurchaseHistoryImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3PurchaseHistoryImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3PurchaseHistoryImportItem>,std::allocator<ML3PurchaseHistoryImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B0358AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1B0358B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B0358DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0358E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncImportItem::getDescription@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = a2;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id obj = [this[10] libraryIdentifiers];
  uint64_t v3 = [obj countByEnumeratingWithState:&v14 objects:v22 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v15 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v7 = objc_msgSend(v6, "libraryName", v12);
        [v6 libraryId];
        if (v7)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)" [", 2);
          char v8 = (const char *)[v7 UTF8String];
          size_t v9 = strlen(v8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)v8, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)" : ", 3);
        }
        else
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)" [<null> : ", 11);
        }
        *(_DWORD *)((char *)v19 + *(void *)(v18 - 24)) = *(_DWORD *)((unsigned char *)v19 + *(void *)(v18 - 24)) & 0xFFFFFFB5 | 2;
        unint64_t v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v14 objects:v22 count:16];
    }
    while (v3);
  }

  std::stringbuf::str();
  uint64_t v18 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v19[-1] + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[0] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v21);
}

void sub_1B035A758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(id *this)
{
  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

id ML3ProtoSyncTrackImportItem::getDeduplicationPredicates(id *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v37 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:1];
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id obj = [this[10] libraryIdentifiers];
  uint64_t v2 = [obj countByEnumeratingWithState:&v38 objects:v44 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v39 != v3) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        uint64_t v6 = [v5 libraryName];
        uint64_t v7 = [v5 libraryId];
        if (v6)
        {
          char v8 = [this[9] libraryUID];
          int v9 = [v6 isEqualToString:v8];

          if (v9)
          {
            unint64_t v10 = +[ML3ComparisonPredicate predicateWithProperty:@"ROWID" equalToInt64:v7];
            [v37 addObject:v10];
          }
          else
          {
            long long v15 = [this[9] syncLibraryID];
            int v16 = [v6 isEqualToString:v15];

            if (!v16) {
              goto LABEL_13;
            }
            unint64_t v10 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.sync_id" equalToInt64:v7];
            [v37 addObject:v10];
          }
        }
        else
        {
          uint64_t v11 = (void *)MEMORY[0x1E4F1C978];
          unint64_t v10 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.sync_id" equalToInt64:v7];
          uint64_t v12 = +[ML3ComparisonPredicate predicateWithProperty:@"ROWID" equalToInt64:v7];
          uint64_t v13 = objc_msgSend(v11, "arrayWithObjects:", v10, v12, 0);
          long long v14 = +[ML3CompoundPredicate predicateMatchingPredicates:v13];
          [v37 addObject:v14];
        }
LABEL_13:
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v38 objects:v44 count:16];
    }
    while (v2);
  }

  if (!*((unsigned char *)this + 64))
  {
    uint64_t v17 = [this[9] syncIdFromMultiverseId:this[10]];
    uint64_t v18 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663305);
    uint64_t v19 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663302);
    uint64_t v20 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663337);
    uint64_t v21 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663297);
    uint64_t v22 = ML3ProtoSyncTrackImportItem::_getProtoStringValue(this, 100663350);
    if (v18)
    {
      uint64_t v23 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.store_saga_id" equalToInt64:v18];
      [v37 addObject:v23];
    }
    if (v19)
    {
      unsigned int v24 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.purchase_history_id" equalToInt64:v19];
      [v37 addObject:v24];
    }
    if (v20)
    {
      if (!v17)
      {
        uint64_t v33 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.subscription_store_item_id" equalToInt64:v20];
        [v37 addObject:v33];

        if (v21) {
          goto LABEL_27;
        }
        goto LABEL_29;
      }
      uint64_t v25 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.subscription_store_item_id" equalToInt64:v20];
      v43[0] = v25;
      id v26 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.sync_id" equalToInt64:0];
      v43[1] = v26;
      id v27 = [MEMORY[0x1E4F1C978] arrayWithObjects:v43 count:2];
      uint64_t v28 = +[ML3CompoundPredicate predicateMatchingPredicates:v27];
      [v37 addObject:v28];
    }
    if (v21)
    {
      if (v17)
      {
        id v29 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.store_item_id" equalToInt64:v21];
        v42[0] = v29;
        __int16 v30 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.sync_id" equalToInt64:0];
        v42[1] = v30;
        id v31 = [MEMORY[0x1E4F1C978] arrayWithObjects:v42 count:2];
        uint64_t v32 = +[ML3CompoundPredicate predicateMatchingPredicates:v31];
        [v37 addObject:v32];

LABEL_28:
        goto LABEL_29;
      }
LABEL_27:
      id v29 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.store_item_id" equalToInt64:v21];
      [v37 addObject:v29];
      goto LABEL_28;
    }
LABEL_29:
    if ([v22 length])
    {
      id v34 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.cloud_universal_library_id" equalToValue:v22];
      [v37 addObject:v34];
    }
  }

  return v37;
}

void sub_1B035AE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

id ML3ProtoSyncTrackImportItem::_getProtoStringValue(id *this, int a2)
{
  uint64_t v4 = 0;
  if (a2 <= 117440516)
  {
    if (a2 <= 83886082)
    {
      if (a2 <= 50331653)
      {
        switch(a2)
        {
          case 33554433:
            uint64_t v5 = [this[11] title];
            goto LABEL_84;
          case 33554434:
            uint64_t v5 = [this[11] sortTitle];
            goto LABEL_84;
          case 33554435:
          case 33554436:
          case 33554437:
          case 33554438:
          case 33554440:
          case 33554441:
          case 33554442:
          case 33554443:
          case 33554444:
          case 33554445:
          case 33554446:
          case 33554447:
          case 33554448:
          case 33554449:
          case 33554456:
          case 33554457:
          case 33554458:
          case 33554459:
            goto LABEL_75;
          case 33554439:
          case 33554454:
          case 33554460:
          case 33554461:
          case 33554462:
          case 33554463:
            goto LABEL_85;
          case 33554450:
            uint64_t v5 = [this[11] comment];
            goto LABEL_84;
          case 33554451:
            uint64_t v5 = [this[11] grouping];
            goto LABEL_84;
          case 33554452:
            uint64_t v5 = [this[11] shortDescription];
            goto LABEL_84;
          case 33554453:
            uint64_t v5 = [this[11] longDescription];
            goto LABEL_84;
          case 33554455:
            uint64_t v5 = [this[11] copyright];
            goto LABEL_84;
          default:
            if (a2 != 16777239) {
              goto LABEL_75;
            }
            uint64_t v5 = [this[14] episodeSortId];
            goto LABEL_84;
        }
      }
      switch(a2)
      {
        case 50331654:
          uint64_t v5 = [this[21] dataUrl];
          goto LABEL_84;
        case 50331656:
          uint64_t v5 = [this[21] eqPreset];
          goto LABEL_84;
        case 50331657:
          uint64_t v5 = [this[21] playbackFormat];
          goto LABEL_84;
      }
    }
    else
    {
      if (a2 > 100663321)
      {
        switch(a2)
        {
          case 100663322:
            uint64_t v5 = [this[15] externalGuid];
            goto LABEL_84;
          case 100663323:
            uint64_t v5 = [this[15] feedUrl];
            goto LABEL_84;
          case 100663324:
            uint64_t v5 = [this[11] chapterMetadataUrl];
            goto LABEL_84;
          case 100663325:
            uint64_t v5 = [this[11] storeXID];
            goto LABEL_84;
          case 100663326:
            uint64_t v5 = [this[11] storeAssetFlavor];
            goto LABEL_84;
          case 100663330:
            uint64_t v5 = [this[11] extrasUrl];
            goto LABEL_84;
          case 100663333:
          case 100663340:
          case 100663341:
          case 100663355:
          case 100663356:
          case 100663357:
            goto LABEL_85;
          case 100663334:
            uint64_t v5 = ML3ProtoSyncTrackImportItem::_getSyncRedownloadParams(this);
            goto LABEL_84;
          case 100663348:
            uint64_t v5 = [this[17] cloudId];
            goto LABEL_84;
          case 100663350:
            char v8 = [this[10] cloudUniversalLibraryId];
            if (v8) {
              [this[10] cloudUniversalLibraryId];
            }
            else {
            uint64_t v9 = [this[11] cloudUniversalLibraryId];
            }
            goto LABEL_89;
          default:
            goto LABEL_75;
        }
        goto LABEL_85;
      }
      switch(a2)
      {
        case 83886083:
          goto LABEL_85;
        case 100663304:
          uint64_t v5 = [this[11] purchaseHistoryRedownloadParams];
          goto LABEL_84;
        case 100663306:
          uint64_t v5 = [this[11] sagaRedownloadParams];
          goto LABEL_84;
      }
    }
LABEL_75:
    int v16 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v17 = [NSString stringWithUTF8String:"NSString *ML3ProtoSyncTrackImportItem::_getProtoStringValue(MLImportPropertyKey) const"];
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, @"ML3ProtoSyncImportItem.mm", 781, @"getStringValue called with unknown property key %lx", a2);

    goto LABEL_76;
  }
  if (a2 <= 167772160)
  {
    if ((a2 - 117440534) <= 0x10)
    {
      if (((1 << (a2 - 22)) & 0x1C009) != 0) {
        goto LABEL_85;
      }
      if (a2 == 117440544)
      {
        id v7 = this[12];
        if (v7 || (id v7 = this[16]) != 0)
        {
          uint64_t v5 = [v7 hlsPlaylistURL];
LABEL_84:
          uint64_t v4 = (void *)v5;
          goto LABEL_85;
        }
LABEL_76:
        uint64_t v4 = 0;
        goto LABEL_85;
      }
    }
    switch(a2)
    {
      case 117440517:
        uint64_t v5 = [this[14] episodeId];
        goto LABEL_84;
      case 117440518:
        uint64_t v5 = [this[14] networkName];
        goto LABEL_84;
      case 117440519:
        uint64_t v5 = [this[13] extendedContentName];
        goto LABEL_84;
      case 117440520:
        uint64_t v5 = [this[13] movieInfo];
        goto LABEL_84;
      default:
        if (a2 != 150994947) {
          goto LABEL_75;
        }
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 167772161:
        id v6 = this[18];
        goto LABEL_80;
      case 167772162:
        id v10 = this[15];
        if (v10) {
          [v10 series];
        }
        else {
          [this[14] series];
        }
        goto LABEL_36;
      case 167772163:
        id v11 = this[15];
        if (v11) {
          [v11 artist];
        }
        else {
          [this[17] artist];
        }
        char v8 = LABEL_36:;
        uint64_t v9 = [v8 name];
        goto LABEL_89;
      case 167772164:
        id v12 = this[15];
        if (v12)
        {
          char v8 = [v12 series];
          uint64_t v9 = [v8 name];
          goto LABEL_89;
        }
        id v6 = this[17];
LABEL_80:
        uint64_t v5 = [v6 name];
        goto LABEL_84;
      case 167772165:
        id v6 = this[19];
        goto LABEL_80;
      case 167772166:
        id v6 = this[20];
        goto LABEL_80;
      case 167772167:
        id v13 = this[18];
        goto LABEL_83;
      case 167772168:
        id v14 = this[15];
        if (v14) {
          [v14 series];
        }
        else {
        char v8 = [this[14] series];
        }
        uint64_t v9 = [v8 sortName];
        goto LABEL_89;
      case 167772169:
        char v8 = [this[17] artist];
        uint64_t v9 = [v8 sortName];
        goto LABEL_89;
      case 167772170:
        id v15 = this[15];
        if (!v15)
        {
          id v13 = this[17];
LABEL_83:
          uint64_t v5 = [v13 sortName];
          goto LABEL_84;
        }
        char v8 = [v15 series];
        uint64_t v9 = [v8 sortName];
LABEL_89:
        uint64_t v4 = (void *)v9;

        break;
      case 167772171:
        id v13 = this[19];
        goto LABEL_83;
      case 167772172:
      case 167772173:
      case 167772174:
      case 167772175:
      case 167772176:
      case 167772177:
      case 167772178:
      case 167772179:
      case 167772180:
      case 167772181:
      case 167772182:
      case 167772185:
      case 167772186:
        goto LABEL_75;
      case 167772183:
        uint64_t v5 = [this[11] artworkId];
        goto LABEL_84;
      case 167772184:
        break;
      case 167772187:
        uint64_t v5 = [this[11] secondaryArtworkId];
        goto LABEL_84;
      default:
        if (a2 != 301989899) {
          goto LABEL_75;
        }
        char v8 = [this[17] artist];
        uint64_t v9 = [v8 cloudUniversalLibraryId];
        goto LABEL_89;
    }
  }
LABEL_85:

  return v4;
}

void sub_1B035B5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *ML3ProtoSyncTrackImportItem::_getSyncRedownloadParams(id *this)
{
  if ([this[11] hasLocalAsset])
  {
    uint64_t v2 = (void *)ML3SyncRedownloadParamLocal;
LABEL_8:
    uint64_t v5 = v2;
    goto LABEL_9;
  }
  uint64_t v3 = [this[11] purchaseHistoryRedownloadParams];
  if ([v3 length]) {
    goto LABEL_6;
  }
  uint64_t v4 = [this[11] sagaRedownloadParams];
  if ([v4 length])
  {

LABEL_6:
LABEL_7:
    uint64_t v2 = (void *)ML3SyncRedownloadParamRedownload;
    goto LABEL_8;
  }
  if ([this[11] subscriptionStoreItemId])
  {
    char v7 = [this[11] cloudAssetAvailable];

    if (v7) {
      goto LABEL_7;
    }
  }
  else
  {
  }
  uint64_t v5 = &stru_1F08D4D70;
LABEL_9:

  return v5;
}

void sub_1B035B850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncTrackImportItem::getSourceIdentifiers@<X0>(id *this@<X0>, BOOL *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  std::vector<long long>::vector(a3);
  *a2 = 1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v6 = objc_msgSend(this[10], "libraryIdentifiers", 0);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v11 = [v10 libraryName];
        uint64_t v12 = [v10 libraryId];
        id v13 = [this[9] libraryUID];
        int v14 = [v11 isEqualToString:v13];

        if (v14)
        {
          id v15 = *a3;
        }
        else
        {
          int v16 = [this[9] syncLibraryID];
          int v17 = [v11 isEqualToString:v16];

          if (!v17) {
            goto LABEL_11;
          }
          id v15 = *a3 + 1;
        }
        *id v15 = v12;
LABEL_11:
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v7);
  }

  uint64_t v18 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663305);
  if (v18) {
    (*a3)[2] = v18;
  }
  uint64_t result = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663302);
  if (result) {
    (*a3)[4] = result;
  }
  return result;
}

void sub_1B035BA80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ProtoSyncTrackImportItem::getDescription(id *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"<ML3ProtoSyncTrackImportItem ", 29);
  *(_DWORD *)((char *)&v7[1] + *(void *)(v7[0] - 24)) = *(_DWORD *)((unsigned char *)&v7[1] + *(void *)(v7[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  ML3ProtoSyncImportItem::getDescription(this, (uint64_t)__p);
  if ((v6 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v3 = v6;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v9);
}

void sub_1B035BCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncTrackImportItem::hasValue(ML3ProtoSyncTrackImportItem *this, int a2)
{
  if ((a2 - 0x1000000) >> 25 > 4) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a2 <= 100663296)
  {
    if (a2 > 50331648)
    {
      switch(a2)
      {
        case 83886081:
          v100 = (void *)*((void *)this + 12);
          if (v100 && ([v100 hasUserRating] & 1) != 0) {
            return 1;
          }
          id v37 = (void *)*((void *)this + 16);
          if (!v37) {
            return 0;
          }
LABEL_321:
          uint64_t result = [v37 hasUserRating];
          break;
        case 83886082:
        case 83886083:
        case 83886090:
        case 83886096:
        case 83886099:
          return v5;
        case 83886084:
          if (*((unsigned char *)this + 64)) {
            return 0;
          }
          goto LABEL_325;
        case 83886085:
          id v102 = (void *)*((void *)this + 11);
          return [v102 hasPlayCountDelta];
        case 83886086:
LABEL_325:
          id v101 = (void *)*((void *)this + 11);
          return [v101 hasPlayCount];
        case 83886087:
        case 83886089:
          id v11 = (void *)*((void *)this + 11);
          return [v11 hasLastPlayedDateTime];
        case 83886088:
          id v103 = (void *)*((void *)this + 11);
          return [v103 hasLastSkippedDateTime];
        case 83886091:
          if (*((unsigned char *)this + 64)) {
            return 0;
          }
          long long v104 = (void *)*((void *)this + 11);
          return [v104 hasSkipCount];
        case 83886092:
          long long v105 = (void *)*((void *)this + 11);
          return [v105 hasSkipCountDelta];
        case 83886093:
          long long v106 = (void *)*((void *)this + 11);
          return [v106 hasRememberBookmark];
        case 83886094:
          long long v107 = (void *)*((void *)this + 11);
          return [v107 hasBookmarkTimeMilliseconds];
        case 83886095:
          v108 = (void *)*((void *)this + 11);
          return [v108 hasHidden];
        case 83886097:
          int v109 = *((unsigned __int8 *)this + 64);
          unsigned int v110 = [*((id *)this + 11) hasLikedState];
          if (v109) {
            uint64_t v5 = 0;
          }
          else {
            uint64_t v5 = v110;
          }
          if (!v109 || !v110) {
            return v5;
          }
          if (![*((id *)this + 11) hasLikedStateChanged]) {
            return 0;
          }
          v111 = (void *)*((void *)this + 11);
          return [v111 likedStateChanged];
        case 83886098:
          v112 = (void *)*((void *)this + 11);
          return [v112 hasLikedStateChanged];
        case 83886100:
          if (*((unsigned char *)this + 16)) {
            return 0;
          }
          v113 = (void *)*((void *)this + 11);
          return [v113 hasLikedStateChangedDate];
        default:
          if ((a2 - 67108865) >= 5) {
            goto LABEL_42;
          }
          return v5;
      }
    }
    else
    {
      switch(a2)
      {
        case 16777217:
LABEL_27:
          uint64_t v12 = (void *)*((void *)this + 11);
          return [v12 hasMediaType];
        case 16777218:
        case 16777219:
        case 16777220:
        case 16777221:
        case 16777222:
        case 16777223:
        case 16777224:
        case 16777225:
        case 16777226:
        case 16777227:
        case 16777228:
        case 16777229:
        case 16777230:
        case 16777231:
        case 16777232:
        case 16777233:
        case 16777234:
        case 16777235:
        case 16777236:
        case 16777240:
        case 16777241:
        case 16777243:
        case 16777244:
        case 16777248:
        case 16777249:
        case 16777250:
        case 16777251:
        case 16777252:
        case 16777253:
          return v5;
        case 16777237:
          char v8 = (void *)*((void *)this + 12);
          if (v8 && ([v8 hasDiscNumber] & 1) != 0) {
            return 1;
          }
          uint64_t v9 = (void *)*((void *)this + 16);
          if (!v9) {
            return 0;
          }
          uint64_t result = [v9 hasDiscNumber];
          break;
        case 16777238:
          id v92 = (void *)*((void *)this + 12);
          if (v92 && ([v92 hasTrackNumber] & 1) != 0) {
            return 1;
          }
          v93 = (void *)*((void *)this + 14);
          if (v93)
          {
            if ([v93 hasEpisodeId]) {
              return 1;
            }
          }
          id v94 = (void *)*((void *)this + 16);
          if (!v94) {
            return 0;
          }
          uint64_t result = [v94 hasTrackNumber];
          break;
        case 16777239:
          id v95 = (void *)*((void *)this + 14);
          if (!v95) {
            return 0;
          }
          return [v95 hasEpisodeSortId];
        case 16777242:
          id v96 = (void *)*((void *)this + 12);
          if (v96 && ([v96 hasExcludeFromShuffle] & 1) != 0) {
            return 1;
          }
          id v97 = (void *)*((void *)this + 16);
          if (!v97) {
            return 0;
          }
          uint64_t result = [v97 hasExcludeFromShuffle];
          break;
        case 16777245:
LABEL_46:
          uint64_t v18 = (void *)*((void *)this + 11);
          return [v18 hasIsInUsersLibrary];
        case 16777246:
          id v98 = (void *)*((void *)this + 17);
          if (!v98) {
            return 0;
          }
          return [v98 hasCompilation];
        case 16777247:
          id v99 = (void *)*((void *)this + 11);
          return [v99 hasCreationDateTime];
        default:
          switch(a2)
          {
            case 33554433:
              long long v40 = (void *)*((void *)this + 11);
              uint64_t result = [v40 hasTitle];
              break;
            case 33554434:
              long long v41 = (void *)*((void *)this + 11);
              uint64_t result = [v41 hasSortTitle];
              break;
            case 33554435:
              uint32_t v42 = (void *)*((void *)this + 17);
              if (!v42) {
                return 0;
              }
              uint64_t result = [v42 hasNumDiscs];
              break;
            case 33554436:
              uint64_t v43 = (void *)*((void *)this + 17);
              if (!v43) {
                return 0;
              }
              uint64_t result = [v43 hasNumTracks];
              break;
            case 33554437:
              uint64_t v44 = (void *)*((void *)this + 11);
              uint64_t result = [v44 hasDuration];
              break;
            case 33554438:
              uint64_t v45 = (void *)*((void *)this + 11);
              uint64_t result = [v45 hasYear];
              break;
            case 33554439:
            case 33554441:
            case 33554454:
            case 33554456:
            case 33554457:
            case 33554460:
            case 33554461:
            case 33554462:
            case 33554463:
            case 33554464:
            case 33554465:
              return v5;
            case 33554440:
              id v46 = (void *)*((void *)this + 11);
              uint64_t result = [v46 hasFileSize];
              break;
            case 33554442:
            case 33554444:
              goto LABEL_27;
            case 33554443:
              id v47 = (void *)*((void *)this + 11);
              uint64_t result = [v47 hasModificationDateTime];
              break;
            case 33554445:
              long long v48 = (void *)*((void *)this + 11);
              uint64_t result = [v48 hasContentRating];
              break;
            case 33554446:
              id v49 = (void *)*((void *)this + 11);
              uint64_t result = [v49 hasContentRatingLevel];
              break;
            case 33554447:
              id v50 = (void *)*((void *)this + 11);
              uint64_t result = [v50 hasUserDisabled];
              break;
            case 33554448:
              uint64_t v51 = (void *)*((void *)this + 21);
              if (!v51) {
                return 0;
              }
              uint64_t result = [v51 hasBeatsPerMinute];
              break;
            case 33554449:
              long long v52 = (void *)*((void *)this + 12);
              if (!v52) {
                return 0;
              }
              uint64_t result = [v52 hasGeniusId];
              break;
            case 33554450:
              uint64_t v53 = (void *)*((void *)this + 11);
              uint64_t result = [v53 hasComment];
              break;
            case 33554451:
              __int16 v54 = (void *)*((void *)this + 11);
              uint64_t result = [v54 hasGrouping];
              break;
            case 33554452:
              int v55 = (void *)*((void *)this + 11);
              uint64_t result = [v55 hasShortDescription];
              break;
            case 33554453:
              __int16 v56 = (void *)*((void *)this + 11);
              uint64_t result = [v56 hasLongDescription];
              break;
            case 33554455:
              uint64_t v57 = (void *)*((void *)this + 11);
              uint64_t result = [v57 hasCopyright];
              break;
            case 33554458:
              id v58 = (void *)*((void *)this + 11);
              uint64_t result = [v58 hasFileKind];
              break;
            case 33554466:
              id v59 = (void *)*((void *)this + 11);
              uint64_t result = [v59 hasIsPreorder];
              break;
            default:
              goto LABEL_42;
          }
          return result;
      }
    }
  }
  else
  {
    if (a2 > 117440512)
    {
      if (a2 <= 150994945)
      {
        switch(a2)
        {
          case 117440513:
            unsigned __int8 v6 = (void *)*((void *)this + 13);
            if (!v6) {
              return 0;
            }
            return [v6 hasVideoQuality];
          case 117440514:
            v114 = (void *)*((void *)this + 13);
            if (!v114) {
              return 0;
            }
            return [v114 hasRental];
          case 117440515:
            v115 = (void *)*((void *)this + 11);
            return [v115 hasHasChapterData];
          case 117440516:
            v116 = (void *)*((void *)this + 14);
            if (!v116) {
              return 0;
            }
            return [v116 hasSeasonNumber];
          case 117440517:
            v117 = (void *)*((void *)this + 14);
            if (!v117) {
              return 0;
            }
            return [v117 hasEpisodeId];
          case 117440518:
            v118 = (void *)*((void *)this + 14);
            if (!v118) {
              return 0;
            }
            return [v118 hasNetworkName];
          case 117440519:
            v119 = (void *)*((void *)this + 13);
            if (!v119) {
              return 0;
            }
            return [v119 hasExtendedContentName];
          case 117440520:
            v120 = (void *)*((void *)this + 13);
            if (!v120) {
              return 0;
            }
            return [v120 hasMovieInfo];
          case 117440521:
            v121 = (void *)*((void *)this + 13);
            if (!v121) {
              return 0;
            }
            return [v121 hasHasAlternateAudio];
          case 117440522:
            v122 = (void *)*((void *)this + 13);
            if (!v122) {
              return 0;
            }
            return [v122 hasHasSubtitles];
          case 117440523:
            v123 = (void *)*((void *)this + 13);
            if (!v123) {
              return 0;
            }
            return [v123 hasAudioLanguage];
          case 117440524:
            v124 = (void *)*((void *)this + 13);
            if (!v124) {
              return 0;
            }
            return [v124 hasAudioTrackIndex];
          case 117440525:
            v125 = (void *)*((void *)this + 13);
            if (!v125) {
              return 0;
            }
            return [v125 hasAudioTrackId];
          case 117440526:
            v126 = (void *)*((void *)this + 13);
            if (!v126) {
              return 0;
            }
            return [v126 hasSubtitleLanguage];
          case 117440527:
            v127 = (void *)*((void *)this + 13);
            if (!v127) {
              return 0;
            }
            return [v127 hasSubtitleTrackIndex];
          case 117440528:
            v128 = (void *)*((void *)this + 13);
            if (!v128) {
              return 0;
            }
            return [v128 hasRentalDuration];
          case 117440529:
            v129 = (void *)*((void *)this + 13);
            if (!v129) {
              return 0;
            }
            return [v129 hasRentalPlaybackDuration];
          case 117440530:
            v130 = (void *)*((void *)this + 13);
            if (!v130) {
              return 0;
            }
            return [v130 hasRentalPlaybackStartedDateTime];
          case 117440531:
            v131 = (void *)*((void *)this + 13);
            if (!v131) {
              return 0;
            }
            return [v131 hasRentalStartedDateTime];
          case 117440532:
          case 117440533:
          case 117440534:
          case 117440535:
          case 117440536:
          case 117440537:
          case 117440538:
          case 117440539:
          case 117440540:
          case 117440541:
          case 117440542:
          case 117440543:
          case 117440545:
          case 117440546:
          case 117440547:
          case 117440548:
          case 117440549:
          case 117440550:
            return v5;
          case 117440544:
            v132 = (void *)*((void *)this + 12);
            if (v132 && ([v132 hasHlsPlaylistURL] & 1) != 0) {
              return 1;
            }
            v144 = (void *)*((void *)this + 16);
            if (!v144) {
              return 0;
            }
            return [v144 hasHlsPlaylistURL];
          default:
            if (a2 == 134217729)
            {
              v133 = (void *)*((void *)this + 11);
              return [v133 hasFlattenedChapterData];
            }
            if (a2 == 150994945) {
              return v5;
            }
            break;
        }
LABEL_42:
        id v15 = [MEMORY[0x1E4F28B00] currentHandler];
        int v16 = [NSString stringWithUTF8String:"virtual BOOL ML3ProtoSyncTrackImportItem::hasValue(MLImportPropertyKey) const"];
        objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, @"ML3ProtoSyncImportItem.mm", 701, @"hasValue called with unknown property key %lx", a2);

        return 0;
      }
      switch(a2)
      {
        case 167772161:
          id v13 = (void *)*((void *)this + 18);
          if (!v13) {
            return 0;
          }
          goto LABEL_71;
        case 167772162:
          long long v23 = (void *)*((void *)this + 15);
          if (v23 && [v23 hasSeries])
          {
            uint64_t v2 = [*((id *)this + 15) series];
            int v24 = 1;
            uint64_t v25 = 1;
            if ([v2 hasName]) {
              goto LABEL_454;
            }
          }
          else
          {
            int v24 = 0;
          }
          v134 = (void *)*((void *)this + 14);
          if (!v134 || ![v134 hasSeries]) {
            goto LABEL_453;
          }
          v135 = [*((id *)this + 14) series];
          uint64_t v136 = [v135 hasName];
          goto LABEL_451;
        case 167772163:
          id v26 = (void *)*((void *)this + 15);
          if (v26 && [v26 hasArtist])
          {
            uint64_t v2 = [*((id *)this + 15) artist];
            int v24 = 1;
            uint64_t v25 = 1;
            if ([v2 hasName]) {
              goto LABEL_454;
            }
          }
          else
          {
            int v24 = 0;
          }
          v137 = (void *)*((void *)this + 17);
          if (v137 && [v137 hasArtist])
          {
            v135 = [*((id *)this + 17) artist];
            uint64_t v136 = [v135 hasName];
LABEL_451:
            uint64_t v25 = v136;

            uint64_t v5 = v25;
            if (!v24) {
              return v5;
            }
          }
          else
          {
LABEL_453:
            uint64_t v25 = 0;
            uint64_t v5 = 0;
            if ((v24 & 1) == 0) {
              return v5;
            }
          }
LABEL_454:

          return v25;
        case 167772164:
          id v27 = (void *)*((void *)this + 15);
          if (v27 && [v27 hasSeries])
          {
            uint64_t v2 = [*((id *)this + 15) series];
            int v28 = 1;
            uint64_t v5 = 1;
            if ([v2 hasName]) {
              goto LABEL_469;
            }
          }
          else
          {
            int v28 = 0;
          }
          v138 = (void *)*((void *)this + 17);
          if (!v138) {
            goto LABEL_467;
          }
          uint64_t v139 = [v138 hasName];
          goto LABEL_466;
        case 167772165:
          id v13 = (void *)*((void *)this + 19);
          if (!v13) {
            return 0;
          }
          goto LABEL_71;
        case 167772166:
          id v13 = (void *)*((void *)this + 20);
          if (!v13) {
            return 0;
          }
LABEL_71:
          return [v13 hasName];
        case 167772167:
          id v29 = (void *)*((void *)this + 18);
          if (!v29) {
            return 0;
          }
          goto LABEL_88;
        case 167772168:
          __int16 v30 = (void *)*((void *)this + 15);
          if (v30 && [v30 hasSeries])
          {
            uint64_t v2 = [*((id *)this + 15) series];
            int v31 = 1;
            BOOL v32 = 1;
            if ([v2 hasSortName]) {
              goto LABEL_477;
            }
          }
          else
          {
            int v31 = 0;
          }
          v140 = (void *)*((void *)this + 14);
          if (v140 && [v140 hasSeries])
          {
            v141 = [*((id *)this + 14) series];
            v142 = [v141 sortName];
            BOOL v32 = v142 != 0;

            uint64_t v5 = v32;
            if (!v31) {
              return v5;
            }
          }
          else
          {
            BOOL v32 = 0;
            uint64_t v5 = 0;
            if ((v31 & 1) == 0) {
              return v5;
            }
          }
LABEL_477:

          return v32;
        case 167772169:
          uint64_t v33 = (void *)*((void *)this + 17);
          if (!v33 || ![v33 hasArtist]) {
            return 0;
          }
          uint64_t v2 = [*((id *)this + 17) artist];
          uint64_t v22 = [v2 hasSortName];
          goto LABEL_98;
        case 167772170:
          id v34 = (void *)*((void *)this + 15);
          if (v34 && [v34 hasSeries])
          {
            uint64_t v2 = [*((id *)this + 15) series];
            int v28 = 1;
            uint64_t v5 = 1;
            if ([v2 hasSortName]) {
              goto LABEL_469;
            }
          }
          else
          {
            int v28 = 0;
          }
          v143 = (void *)*((void *)this + 17);
          if (v143)
          {
            uint64_t v139 = [v143 hasSortName];
LABEL_466:
            uint64_t v5 = v139;
          }
          else
          {
LABEL_467:
            uint64_t v5 = 0;
          }
          if (!v28) {
            return v5;
          }
LABEL_469:

          return v5;
        case 167772171:
          id v29 = (void *)*((void *)this + 19);
          if (!v29) {
            return 0;
          }
LABEL_88:
          return [v29 hasSortName];
        case 167772172:
          goto LABEL_42;
        case 167772173:
        case 167772174:
        case 167772182:
        case 167772184:
        case 167772186:
          return v5;
        case 167772175:
          uint64_t v19 = (void *)*((void *)this + 17);
          if (!v19) {
            return 0;
          }
          goto LABEL_100;
        case 167772176:
          uint64_t v19 = (void *)*((void *)this + 18);
          if (!v19) {
            return 0;
          }
          goto LABEL_100;
        case 167772177:
          id v35 = (void *)*((void *)this + 17);
          if (!v35 || ![v35 hasArtist]) {
            return 0;
          }
          uint64_t v2 = [*((id *)this + 17) artist];
          uint64_t v22 = [v2 hasPersistentId];
          goto LABEL_98;
        case 167772178:
          uint64_t v19 = (void *)*((void *)this + 19);
          if (!v19) {
            return 0;
          }
          goto LABEL_100;
        case 167772179:
          uint64_t v19 = (void *)*((void *)this + 20);
          if (!v19) {
            return 0;
          }
LABEL_100:
          return [v19 hasPersistentId];
        case 167772180:
          long long v20 = (void *)*((void *)this + 18);
          if (!v20) {
            return 0;
          }
          goto LABEL_183;
        case 167772181:
          long long v21 = (void *)*((void *)this + 17);
          if (!v21 || ![v21 hasArtist]) {
            return 0;
          }
          uint64_t v2 = [*((id *)this + 17) artist];
          uint64_t v22 = [v2 hasStoreId];
LABEL_98:
          uint64_t v5 = v22;
          goto LABEL_469;
        case 167772183:
          uint64_t v36 = (void *)*((void *)this + 11);
          return [v36 hasArtworkId];
        case 167772185:
          id v37 = (void *)*((void *)this + 17);
          if (!v37) {
            return 0;
          }
          goto LABEL_321;
        case 167772187:
          long long v38 = (void *)*((void *)this + 11);
          return [v38 hasSecondaryArtworkId];
        case 167772188:
          long long v39 = (void *)*((void *)this + 11);
          return [v39 hasSecondaryArtworkSourceType];
        default:
          if ((a2 - 150994947) < 3) {
            return v5;
          }
          if (a2 != 150994946) {
            goto LABEL_42;
          }
          int v14 = (void *)*((void *)this + 12);
          return [v14 hasLyricsChecksum];
      }
    }
    switch(a2)
    {
      case 100663297:
        if ([*((id *)this + 10) hasStoreId]) {
          return 1;
        }
        long long v20 = (void *)*((void *)this + 11);
        goto LABEL_183;
      case 100663298:
        long long v20 = (void *)*((void *)this + 19);
        if (!v20) {
          return 0;
        }
        goto LABEL_183;
      case 100663299:
        long long v20 = (void *)*((void *)this + 20);
        if (!v20) {
          return 0;
        }
LABEL_183:
        return [v20 hasStoreId];
      case 100663300:
        id v60 = (void *)*((void *)this + 11);
        return [v60 hasStorePlaylistId];
      case 100663301:
        id v61 = (void *)*((void *)this + 11);
        return [v61 hasStorefrontId];
      case 100663302:
        if ([*((id *)this + 10) hasPurchaseHistoryId]) {
          return 1;
        }
        uint64_t v62 = (void *)*((void *)this + 11);
        return [v62 hasPurchaseHistoryId];
      case 100663303:
        uint64_t v63 = (void *)*((void *)this + 11);
        return [v63 hasPurchaseHistoryToken];
      case 100663304:
        uint64_t v64 = (void *)*((void *)this + 11);
        return [v64 hasPurchaseHistoryRedownloadParams];
      case 100663305:
        if ([*((id *)this + 10) hasSagaId]) {
          return 1;
        }
        v65 = (void *)*((void *)this + 11);
        return [v65 hasSagaId];
      case 100663306:
        uint64_t v66 = (void *)*((void *)this + 11);
        return [v66 hasSagaRedownloadParams];
      case 100663307:
        char v67 = (void *)*((void *)this + 11);
        return [v67 hasCloudStatus];
      case 100663308:
        return [*((id *)this + 9) syncIdFromMultiverseId:*((void *)this + 10)] != 0;
      case 100663309:
      case 100663310:
      case 100663313:
      case 100663328:
      case 100663331:
      case 100663332:
      case 100663333:
      case 100663339:
      case 100663340:
      case 100663341:
      case 100663342:
      case 100663343:
      case 100663353:
      case 100663354:
      case 100663355:
      case 100663356:
      case 100663357:
        return v5;
      case 100663311:
      case 100663316:
        id v10 = (void *)*((void *)this + 11);
        return [v10 hasDrmVersionsCode];
      case 100663312:
        if ([*((id *)this + 10) hasAccountId]) {
          return 1;
        }
        id v68 = (void *)*((void *)this + 11);
        return [v68 hasAccountId];
      case 100663314:
        id v69 = (void *)*((void *)this + 11);
        return [v69 hasFamilyAccountId];
      case 100663315:
        __int16 v70 = (void *)*((void *)this + 11);
        return [v70 hasStoreProtectionType];
      case 100663317:
        id v71 = (void *)*((void *)this + 11);
        return [v71 hasDrmPlatformIdCode];
      case 100663318:
        uint64_t v72 = (void *)*((void *)this + 11);
        return [v72 hasDrmKey1IdCode];
      case 100663319:
        v73 = (void *)*((void *)this + 11);
        return [v73 hasDrmKey2IdCode];
      case 100663320:
        v74 = (void *)*((void *)this + 11);
        return [v74 hasPurchaseDateTime];
      case 100663321:
        v75 = (void *)*((void *)this + 11);
        return [v75 hasReleaseDateTime];
      case 100663322:
        v76 = (void *)*((void *)this + 15);
        if (!v76) {
          return 0;
        }
        return [v76 hasExternalGuid];
      case 100663323:
        id v77 = (void *)*((void *)this + 15);
        if (!v77) {
          return 0;
        }
        return [v77 hasFeedUrl];
      case 100663324:
        v78 = [*((id *)this + 11) chapterMetadataUrl];
        uint64_t v5 = v78 != 0;

        return v5;
      case 100663325:
        v79 = (void *)*((void *)this + 11);
        return [v79 hasStoreXID];
      case 100663326:
        v80 = (void *)*((void *)this + 11);
        return [v80 hasStoreAssetFlavor];
      case 100663327:
        v81 = (void *)*((void *)this + 11);
        return [v81 hasCloudMatchedStatus];
      case 100663330:
        v82 = (void *)*((void *)this + 11);
        return [v82 hasExtrasUrl];
      case 100663334:
        if (*((unsigned char *)this + 64)) {
          return 0;
        }
        if (([*((id *)this + 11) hasHasLocalAsset] & 1) != 0
          || ([*((id *)this + 11) hasPurchaseHistoryRedownloadParams] & 1) != 0
          || ([*((id *)this + 11) hasSagaRedownloadParams] & 1) != 0)
        {
          return 1;
        }
        if (![*((id *)this + 11) hasSubscriptionStoreItemId]) {
          return 0;
        }
LABEL_264:
        id v83 = (void *)*((void *)this + 11);
        uint64_t result = [v83 hasCloudAssetAvailable];
        break;
      case 100663336:
        v84 = (void *)*((void *)this + 11);
        return [v84 hasNeedsReporting];
      case 100663337:
        long long v85 = (void *)*((void *)this + 11);
        return [v85 hasSubscriptionStoreItemId];
      case 100663338:
      case 100663345:
        int v17 = (void *)*((void *)this + 11);
        return [v17 hasPlaybackEndpointType];
      case 100663344:
        goto LABEL_264;
      case 100663346:
        goto LABEL_46;
      case 100663347:
        long long v86 = (void *)*((void *)this + 11);
        return [v86 hasInUsersCloudLibrary];
      case 100663348:
        long long v87 = (void *)*((void *)this + 17);
        if (!v87) {
          return 0;
        }
        return [v87 hasCloudId];
      case 100663349:
        long long v88 = (void *)*((void *)this + 11);
        return [v88 hasCloudPlaybackEndpointType];
      case 100663350:
        if ([*((id *)this + 10) hasCloudUniversalLibraryId]) {
          return 1;
        }
        id v89 = (void *)*((void *)this + 11);
        return [v89 hasCloudUniversalLibraryId];
      case 100663351:
        id v90 = (void *)*((void *)this + 11);
        return [v90 hasReportingStoreItemId];
      case 100663352:
        id v91 = (void *)*((void *)this + 11);
        return [v91 hasAssetStoreItemId];
      default:
        goto LABEL_42;
    }
  }
  return result;
}

void sub_1B035D9EC(_Unwind_Exception *a1)
{
  if (v3) {
  _Unwind_Resume(a1);
  }
}

void sub_1B035DA60()
{
  if ((v0 & 1) == 0) {
    JUMPOUT(0x1B035DA58);
  }
  JUMPOUT(0x1B035DA54);
}

void ML3ProtoSyncTrackImportItem::getDataValue(id *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (a2 != 33554441 && a2 != 117440539)
  {
    if (a2 == 134217729)
    {
      uint64_t v6 = [this[11] flattenedChapterData];
      if (v6)
      {
        id v12 = 0;
        uint64_t v7 = [MEMORY[0x1E4F28F98] propertyListWithData:v6 options:0 format:0 error:&v12];
        id v8 = v12;
        if (v7)
        {
          id v9 = +[ML3Track flattenedChapterDataFromDAAPInfoDictionary:v7 trackPersistentID:this[1]];
          [v9 bytes];
          [v9 length];
          operator new();
        }
        operator new();
      }
    }
    else
    {
      id v11 = [MEMORY[0x1E4F28B00] currentHandler];
      id v10 = [NSString stringWithUTF8String:"virtual ML3CPPDataRef ML3ProtoSyncTrackImportItem::getDataValue(MLImportPropertyKey) const"];
      objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v10, @"ML3ProtoSyncImportItem.mm", 426, @"getDataValue called with unknown property key %lx", a2);
    }
  }
}

void sub_1B035E060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  MEMORY[0x1B3E93610](v14, 0x1091C40934DB768);

  _Unwind_Resume(a1);
}

double ML3ProtoSyncTrackImportItem::getFloatValue(id *this, int a2)
{
  if (a2 <= 50331664)
  {
    if (a2 == 33554437)
    {
      uint64_t v3 = [this[11] duration];
      goto LABEL_12;
    }
    if (a2 == 50331664)
    {
      *(float *)&double result = (float)(int)[this[21] sampleRate];
      return result;
    }
  }
  else
  {
    switch(a2)
    {
      case 50331665:
        uint64_t v3 = [this[21] startTime];
        goto LABEL_12;
      case 50331666:
        uint64_t v3 = [this[21] stopTime];
        goto LABEL_12;
      case 83886094:
        uint64_t v3 = [this[11] bookmarkTimeMilliseconds];
LABEL_12:
        *(float *)&double result = (float)v3;
        return result;
    }
  }
  uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v6 = [NSString stringWithUTF8String:"virtual float ML3ProtoSyncTrackImportItem::getFloatValue(MLImportPropertyKey) const"];
  objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"ML3ProtoSyncImportItem.mm", 388, @"getFloatValue called with unknown property key %lx", a2);

  return 0.0;
}

void sub_1B035E22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncTrackImportItem::getIntegerValue(ML3ProtoSyncTrackImportItem *this, int a2)
{
  uint64_t v4 = 0;
  if (a2 <= 100663296)
  {
    if (a2 > 33554434)
    {
      switch(a2)
      {
        case 83886081:
          id v13 = (void *)*((void *)this + 12);
          if (v13) {
            return (int)[v13 userRating];
          }
          id v13 = (void *)*((void *)this + 16);
          if (v13) {
            return (int)[v13 userRating];
          }
          return 0;
        case 83886082:
        case 83886090:
        case 83886096:
        case 83886099:
          return v4;
        case 83886083:
          goto LABEL_189;
        case 83886084:
          return (int)[*((id *)this + 11) playCount];
        case 83886085:
          return (int)[*((id *)this + 11) playCountDelta];
        case 83886086:
          return (int)[*((id *)this + 11) playCount] > 0;
        case 83886087:
        case 83886089:
          uint64_t v5 = (void *)*((void *)this + 11);
          return [v5 lastPlayedDateTime];
        case 83886088:
          BOOL v32 = (void *)*((void *)this + 11);
          return [v32 lastSkippedDateTime];
        case 83886091:
          return (int)[*((id *)this + 11) skipCount];
        case 83886092:
          return (int)[*((id *)this + 11) skipCountDelta];
        case 83886093:
          unsigned int v12 = [*((id *)this + 11) rememberBookmark];
          goto LABEL_169;
        case 83886094:
          uint64_t v33 = (void *)*((void *)this + 11);
          return [v33 bookmarkTimeMilliseconds];
        case 83886095:
          unsigned int v12 = [*((id *)this + 11) hidden];
          goto LABEL_169;
        case 83886097:
          return (int)[*((id *)this + 11) likedState];
        case 83886098:
          unsigned int v12 = [*((id *)this + 11) likedStateChanged];
          goto LABEL_169;
        case 83886100:
          id v34 = (void *)*((void *)this + 11);
          return [v34 likedStateChangedDate];
        default:
          switch(a2)
          {
            case 50331649:
              id v10 = (void *)*((void *)this + 12);
              if (!v10)
              {
                id v10 = (void *)*((void *)this + 16);
                if (!v10) {
                  return 0;
                }
              }
              return (int)[v10 audioFormat];
            case 50331650:
              return (int)[*((id *)this + 21) bitRate];
            case 50331651:
              return (int)[*((id *)this + 21) codecType];
            case 50331652:
              return (int)[*((id *)this + 21) codecSubType];
            case 50331653:
              return (int)[*((id *)this + 21) dataKind];
            case 50331655:
              long long v38 = (void *)*((void *)this + 21);
              return [v38 durationInSamples];
            case 50331658:
              long long v41 = (void *)*((void *)this + 21);
              return [v41 gaplessHeuristicCode];
            case 50331659:
              long long v39 = (void *)*((void *)this + 21);
              return [v39 gaplessHeuristicDelayCode];
            case 50331660:
              long long v40 = (void *)*((void *)this + 21);
              return [v40 gaplessEncodingDrainCode];
            case 50331661:
              uint32_t v42 = (void *)*((void *)this + 21);
              return [v42 gaplessFrameResyncCode];
            case 50331662:
              uint64_t v43 = (void *)*((void *)this + 12);
              if (!v43)
              {
                uint64_t v43 = (void *)*((void *)this + 16);
                if (!v43) {
                  return 0;
                }
              }
              unsigned int v12 = [v43 hasVideo];
              goto LABEL_169;
            case 50331663:
              return (int)[*((id *)this + 21) relativeVolume];
            case 50331664:
              return (int)[*((id *)this + 21) sampleRate];
            case 50331667:
              uint64_t v44 = (void *)*((void *)this + 21);
              return [v44 volumeNormalizationEnergy];
            case 50331668:
              return (int)[*((id *)this + 21) progressionDirection];
            default:
              goto LABEL_189;
          }
      }
    }
    switch(a2)
    {
      case 16777217:
        unsigned int v11 = [*((id *)this + 11) mediaType] - 1;
        if (v11 > 0xC) {
          return 0;
        }
        return dword_1B04DD33C[v11];
      case 16777218:
      case 16777219:
      case 16777220:
      case 16777221:
      case 16777222:
      case 16777223:
      case 16777224:
      case 16777225:
      case 16777226:
      case 16777227:
      case 16777228:
      case 16777229:
      case 16777230:
      case 16777231:
      case 16777232:
      case 16777233:
      case 16777234:
      case 16777235:
      case 16777236:
      case 16777240:
      case 16777241:
      case 16777243:
      case 16777244:
      case 16777248:
      case 16777249:
      case 16777250:
      case 16777251:
      case 16777252:
      case 16777253:
        return v4;
      case 16777237:
        id v8 = (void *)*((void *)this + 12);
        if (!v8)
        {
          id v8 = (void *)*((void *)this + 16);
          if (!v8) {
            return 0;
          }
        }
        return (int)[v8 discNumber];
      case 16777238:
        id v37 = (void *)*((void *)this + 12);
        if (v37) {
          return (int)[v37 trackNumber];
        }
        id v37 = (void *)*((void *)this + 16);
        if (v37) {
          return (int)[v37 trackNumber];
        }
        uint64_t v51 = (void *)*((void *)this + 14);
        if (!v51) {
          return 0;
        }
        uint64_t v14 = [v51 episodeId];
        uint64_t v15 = [v14 integerValue];
        break;
      case 16777239:
        uint64_t v14 = ML3ProtoSyncTrackImportItem::_getProtoStringValue((id *)this, 16777239);
        uint64_t v15 = [v14 integerValue];
        break;
      case 16777242:
        id v35 = (void *)*((void *)this + 12);
        if (!v35)
        {
          id v35 = (void *)*((void *)this + 16);
          if (!v35) {
            return 0;
          }
        }
        unsigned int v12 = [v35 excludeFromShuffle];
        goto LABEL_169;
      case 16777245:
        goto LABEL_32;
      case 16777246:
        unsigned int v12 = [*((id *)this + 17) compilation];
        goto LABEL_169;
      case 16777247:
        uint64_t v36 = (void *)*((void *)this + 11);
        return [v36 creationDateTime];
      default:
        goto LABEL_189;
    }
LABEL_166:
    uint64_t v4 = v15;

    return v4;
  }
  if (a2 <= 117440512)
  {
    switch(a2)
    {
      case 100663297:
        if ([*((id *)this + 10) storeId]) {
          int v16 = (void *)*((void *)this + 10);
        }
        else {
          int v16 = (void *)*((void *)this + 11);
        }
        goto LABEL_197;
      case 100663298:
        int v16 = (void *)*((void *)this + 19);
        goto LABEL_197;
      case 100663299:
        int v16 = (void *)*((void *)this + 20);
LABEL_197:
        return [v16 storeId];
      case 100663300:
        int v17 = (void *)*((void *)this + 11);
        return [v17 storePlaylistId];
      case 100663301:
        uint64_t v18 = (void *)*((void *)this + 11);
        return [v18 storefrontId];
      case 100663302:
        if ([*((id *)this + 10) purchaseHistoryId]) {
          uint64_t v19 = (void *)*((void *)this + 10);
        }
        else {
          uint64_t v19 = (void *)*((void *)this + 11);
        }
        return [v19 purchaseHistoryId];
      case 100663303:
        return (int)[*((id *)this + 11) purchaseHistoryToken];
      case 100663305:
        if ([*((id *)this + 10) sagaId]) {
          id v29 = (void *)*((void *)this + 10);
        }
        else {
          id v29 = (void *)*((void *)this + 11);
        }
        return [v29 sagaId];
      case 100663307:
        return (int)[*((id *)this + 11) cloudStatus];
      case 100663308:
        long long v20 = (void *)*((void *)this + 9);
        uint64_t v21 = *((void *)this + 10);
        return [v20 syncIdFromMultiverseId:v21];
      case 100663309:
      case 100663310:
      case 100663313:
      case 100663327:
      case 100663331:
      case 100663332:
      case 100663339:
      case 100663342:
      case 100663343:
      case 100663353:
      case 100663354:
        return v4;
      case 100663311:
      case 100663316:
        return (int)[*((id *)this + 11) drmVersionsCode];
      case 100663312:
        if ([*((id *)this + 10) hasAccountId]) {
          uint64_t v22 = (void *)*((void *)this + 10);
        }
        else {
          uint64_t v22 = (void *)*((void *)this + 11);
        }
        return [v22 accountId];
      case 100663314:
        __int16 v30 = (void *)*((void *)this + 11);
        return [v30 familyAccountId];
      case 100663315:
        return (int)[*((id *)this + 11) storeProtectionType];
      case 100663317:
        long long v23 = (void *)*((void *)this + 11);
        return [v23 drmPlatformIdCode];
      case 100663318:
        int v24 = (void *)*((void *)this + 11);
        return [v24 drmKey1IdCode];
      case 100663319:
        uint64_t v25 = (void *)*((void *)this + 11);
        return [v25 drmKey2IdCode];
      case 100663320:
        unsigned int v12 = [*((id *)this + 11) hasPurchaseDateTime];
        goto LABEL_169;
      case 100663321:
        id v26 = (void *)*((void *)this + 11);
        return [v26 releaseDateTime];
      case 100663328:
        return (int)[*((id *)this + 11) cloudMatchedStatus];
      case 100663336:
        unsigned int v12 = [*((id *)this + 11) needsReporting];
        goto LABEL_169;
      case 100663337:
        int v31 = (void *)*((void *)this + 11);
        return [v31 subscriptionStoreItemId];
      case 100663338:
        return (int)[*((id *)this + 11) playbackEndpointType];
      case 100663344:
        if ([*((id *)this + 11) hasCloudAssetAvailable])
        {
          unsigned int v12 = [*((id *)this + 11) cloudAssetAvailable];
LABEL_169:
          uint64_t v4 = v12;
        }
        else
        {
          uint64_t v4 = 1;
        }
        break;
      case 100663345:
        return [*((id *)this + 11) playbackEndpointType] == 3;
      case 100663346:
LABEL_32:
        unsigned int v12 = [*((id *)this + 11) isInUsersLibrary];
        goto LABEL_169;
      case 100663347:
        unsigned int v12 = [*((id *)this + 11) inUsersCloudLibrary];
        goto LABEL_169;
      case 100663349:
        return (int)[*((id *)this + 11) cloudPlaybackEndpointType];
      case 100663351:
        id v27 = (void *)*((void *)this + 11);
        return [v27 reportingStoreItemId];
      case 100663352:
        int v28 = (void *)*((void *)this + 11);
        return [v28 assetStoreItemId];
      default:
        goto LABEL_189;
    }
    return v4;
  }
  if (a2 <= 150994947)
  {
    switch(a2)
    {
      case 117440513:
        return (int)[*((id *)this + 13) videoQuality];
      case 117440514:
        unsigned int v12 = [*((id *)this + 13) rental];
        goto LABEL_169;
      case 117440515:
        unsigned int v12 = [*((id *)this + 11) hasChapterData];
        goto LABEL_169;
      case 117440516:
        return (int)[*((id *)this + 14) seasonNumber];
      case 117440517:
        uint64_t v14 = [*((id *)this + 14) episodeId];
        uint64_t v15 = [v14 integerValue];
        goto LABEL_166;
      case 117440518:
      case 117440519:
      case 117440520:
      case 117440534:
      case 117440537:
      case 117440539:
      case 117440544:
        goto LABEL_189;
      case 117440521:
        unsigned int v12 = [*((id *)this + 13) hasAlternateAudio];
        goto LABEL_169;
      case 117440522:
        unsigned int v12 = [*((id *)this + 13) hasSubtitles];
        goto LABEL_169;
      case 117440523:
        return (int)[*((id *)this + 13) audioLanguage];
      case 117440524:
        return (int)[*((id *)this + 13) audioTrackIndex];
      case 117440525:
        return (int)[*((id *)this + 13) audioTrackId];
      case 117440526:
        return (int)[*((id *)this + 13) subtitleLanguage];
      case 117440527:
        return (int)[*((id *)this + 13) subtitleTrackIndex];
      case 117440528:
        long long v48 = (void *)*((void *)this + 13);
        return [v48 rentalDuration];
      case 117440529:
        uint64_t v45 = (void *)*((void *)this + 13);
        return [v45 rentalPlaybackDuration];
      case 117440530:
        id v46 = (void *)*((void *)this + 13);
        return [v46 rentalPlaybackStartedDateTime];
      case 117440531:
        id v47 = (void *)*((void *)this + 13);
        return [v47 rentalStartedDateTime];
      case 117440532:
      case 117440533:
      case 117440535:
      case 117440536:
      case 117440538:
      case 117440540:
      case 117440541:
      case 117440542:
      case 117440543:
      case 117440545:
      case 117440546:
      case 117440547:
        return v4;
      default:
        if (a2 == 150994945) {
          return v4;
        }
        if (a2 != 150994946) {
          goto LABEL_189;
        }
        int v7 = [*((id *)this + 12) lyricsChecksum];
        break;
    }
    return v7;
  }
  if (a2 > 285212692)
  {
    if (a2 != 285212693 && a2 != 301989901 && a2 != 318767118)
    {
LABEL_189:
      id v49 = [MEMORY[0x1E4F28B00] currentHandler];
      id v50 = [NSString stringWithUTF8String:"virtual int64_t ML3ProtoSyncTrackImportItem::getIntegerValue(MLImportPropertyKey) const"];
      objc_msgSend(v49, "handleFailureInFunction:file:lineNumber:description:", v50, @"ML3ProtoSyncImportItem.mm", 370, @"getIntegerValue called with unknown property key %lx", a2);

      return 0;
    }
    return v4;
  }
  switch(a2)
  {
    case 167772174:
    case 167772182:
    case 167772186:
      return v4;
    case 167772175:
      id v9 = (void *)*((void *)this + 17);
      break;
    case 167772176:
      id v9 = (void *)*((void *)this + 18);
      break;
    case 167772177:
      uint64_t v14 = [*((id *)this + 17) artist];
      uint64_t v15 = [v14 persistentId];
      goto LABEL_166;
    case 167772178:
      id v9 = (void *)*((void *)this + 19);
      break;
    case 167772179:
      id v9 = (void *)*((void *)this + 20);
      break;
    case 167772180:
      int v16 = (void *)*((void *)this + 18);
      goto LABEL_197;
    case 167772181:
      uint64_t v14 = [*((id *)this + 17) artist];
      uint64_t v15 = [v14 storeId];
      goto LABEL_166;
    case 167772183:
    case 167772184:
    case 167772187:
      goto LABEL_189;
    case 167772185:
      id v13 = (void *)*((void *)this + 17);
      return (int)[v13 userRating];
    case 167772188:
      return (int)[*((id *)this + 11) secondaryArtworkSourceType];
    default:
      if ((a2 - 150994948) >= 2) {
        goto LABEL_189;
      }
      return v4;
  }

  return [v9 persistentId];
}

void sub_1B035EEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ProtoSyncTrackImportItem::getStringValue(id *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = ML3ProtoSyncTrackImportItem::_getProtoStringValue(this, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v4 UTF8String]);
    *(void *)a3 = &unk_1F08C3230;
    *(unsigned char *)(a3 + 8) = 1;
    uint64_t v6 = (std::string *)(a3 + 16);
    if (SHIBYTE(v8) < 0)
    {
      std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (SHIBYTE(v8) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *(void *)(a3 + 32) = v8;
    }
  }
  else
  {
    *(void *)a3 = &unk_1F08C3230;
    *(unsigned char *)(a3 + 8) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void sub_1B035F36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ML3ProtoSyncTrackImportItem::~ML3ProtoSyncTrackImportItem(id *this)
{
  ML3ProtoSyncTrackImportItem::~ML3ProtoSyncTrackImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  uint64_t vars8;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
}

void ML3ProtoSyncDeleteImportItem::~ML3ProtoSyncDeleteImportItem(id *this)
{
  ML3ProtoSyncTrackImportItem::~ML3ProtoSyncTrackImportItem(this);

  JUMPOUT(0x1B3E93610);
}

id ML3ProtoSyncContainerImportItem::getDeduplicationPredicates(id *this)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v3 = [this[9] syncIdFromMultiverseId:this[10]];
  if (!v3) {
    uint64_t v3 = (uint64_t)this[1];
  }
  uint64_t v4 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:v3];
  [v2 addObject:v4];

  uint64_t v5 = +[ML3ComparisonPredicate predicateWithProperty:@"container_pid" equalToInt64:this[1]];
  [v2 addObject:v5];

  uint64_t v6 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 184549408);
  if (v6)
  {
    int v7 = +[ML3ComparisonPredicate predicateWithProperty:@"store_cloud_id" equalToInt64:v6];
    [v2 addObject:v7];
  }
  (*((void (**)(void **__return_ptr, id *, uint64_t))*this + 3))(&v13, this, 184549417);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    id v13 = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v15 = __p;
  }
  std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  char v9 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    id v10 = ML3CPPBridgeString((const UInt8 *)&v15, 1);
    unsigned int v11 = +[ML3ComparisonPredicate predicateWithProperty:@"cloud_global_id" equalToValue:v10];
    [v2 addObject:v11];

    char v9 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  if (v9 < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }

  return v2;
}

void sub_1B035F6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerImportItem::getDescription(id *this)
{
  (*((void (**)(void *__return_ptr))*this + 3))(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v8[0] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v13 = __p;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<ML3ProtoSyncContainerImportItem ", 33);
  *(_DWORD *)((char *)&v8[1] + *(void *)(v8[0] - 24)) = *(_DWORD *)((unsigned char *)&v8[1] + *(void *)(v8[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" name='", 7);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v2 = &v13;
  }
  else {
    uint64_t v2 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v2, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"'", 1);
  ML3ProtoSyncImportItem::getDescription(this, (uint64_t)v6);
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v6;
  }
  else {
    uint64_t v4 = (void **)v6[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v5 = v7;
  }
  else {
    uint64_t v5 = (uint64_t)v6[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v4, v5);
  if ((char)v7 < 0) {
    operator delete(v6[0]);
  }
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete(v10);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3E935B0](&v12);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1B035FA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ML3ProtoSyncContainerImportItem::getImportItemArrayValue(id *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((a2 - 218103813) >= 2)
  {
    if (a2 == 218103812)
    {
      uint64_t v5 = [this[11] itemsCount];
      if (v5)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          unsigned __int8 v7 = [this[11] itemsAtIndex:i];
          if ([this[9] syncIdFromMultiverseId:v7]) {
            operator new();
          }
        }
      }
    }
    else
    {
      char v9 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v8 = [NSString stringWithUTF8String:"virtual std::vector<std::shared_ptr<ML3ImportItem>> ML3ProtoSyncContainerImportItem::getImportItemArrayValue(MLImportPropertyKey) const"];
      objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v8, @"ML3ProtoSyncImportItem.mm", 1029, @"getImportItemArrayValue called with unknown property key %x", a2);
    }
  }
}

void sub_1B035FD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerTrackItemImportItem>,std::allocator<ML3ProtoSyncContainerTrackItemImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_40ML3ProtoSyncContainerTrackItemImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerTrackItemImportItem>,std::allocator<ML3ProtoSyncContainerTrackItemImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ProtoSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerTrackItemImportItem>,std::allocator<ML3ProtoSyncContainerTrackItemImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t ML3ProtoSyncContainerTrackItemImportItem::getDescription(ML3ProtoSyncContainerTrackItemImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3ProtoSyncContainerTrackItemImportItem ", 42);
  *(_DWORD *)((char *)&v5[1] + *(void *)(v5[0] - 24)) = *(_DWORD *)((unsigned char *)&v5[1] + *(void *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (void *)std::ostream::operator<<();
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v3 = (void *)std::ostream::operator<<();
  char v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v7);
}

void sub_1B0360024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ML3ProtoSyncContainerTrackItemImportItem::hasValue(ML3ProtoSyncContainerTrackItemImportItem *this, int a2)
{
  return a2 == 234881030;
}

uint64_t ML3ProtoSyncContainerTrackItemImportItem::getIntegerValue(ML3ProtoSyncContainerTrackItemImportItem *this, uint64_t a2)
{
  if (a2 == 234881030) {
    return *((void *)this + 8);
  }
  uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v5 = [NSString stringWithUTF8String:"virtual int64_t ML3ProtoSyncContainerTrackItemImportItem::getIntegerValue(MLImportPropertyKey) const"];
  objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3ProtoSyncImportItem.mm", 1231, @"ML3ProtoSyncContainerTrackItemImportItem::getIntegerValue called with unknown property key %x", a2);

  return 0;
}

void sub_1B03600F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerTrackItemImportItem::getStringValue(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F08C3230;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if ((a1 - 234881028) > 6 || ((1 << (a1 - 4)) & 0x43) == 0)
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"virtual ML3ImportStringValue ML3ProtoSyncContainerTrackItemImportItem::getStringValue(MLImportPropertyKey) const"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3ProtoSyncImportItem.mm", 1216, @"ML3ProtoSyncContainerTrackItemImportItem::getStringValue called with unknown property key %x", a1);
  }
}

void sub_1B0360228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  *(void *)uint64_t v10 = v11;
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v13);
  }
  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerTrackItemImportItem::~ML3ProtoSyncContainerTrackItemImportItem(ML3ProtoSyncContainerTrackItemImportItem *this)
{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);

  JUMPOUT(0x1B3E93610);
}

{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

uint64_t ML3ProtoSyncContainerImportItem::hasValue(ML3ProtoSyncContainerImportItem *this, uint64_t a2)
{
  if ((a2 - 184549376) >> 24 > 2)
  {
    return 0;
  }
  else if ((int)a2 > 201326592)
  {
    switch((int)a2)
    {
      case 218103810:
        uint64_t v5 = (void *)*((void *)this + 11);
        return [v5 hasSecondaryArtworkId];
      case 218103811:
        id v68 = (void *)*((void *)this + 11);
        return [v68 hasSecondaryArtworkSourceType];
      case 218103812:
        id v69 = [*((id *)this + 11) items];
        BOOL v3 = v69 != 0;

        return v3;
      case 218103813:
      case 218103814:
        return 0;
      default:
        if (a2 != 201326593)
        {
          if (a2 != 201326594)
          {
LABEL_12:
            id v6 = [MEMORY[0x1E4F28B00] currentHandler];
            uint64_t v7 = [NSString stringWithUTF8String:"virtual BOOL ML3ProtoSyncContainerImportItem::hasValue(MLImportPropertyKey) const"];
            objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"ML3ProtoSyncImportItem.mm", 1144, @"hasValue called with unknown property key %x", a2);
          }
          return 0;
        }
        __int16 v70 = (void *)*((void *)this + 11);
        uint64_t result = [v70 hasGeniusSeedTrackIdentifier];
        break;
    }
  }
  else
  {
    BOOL v3 = 1;
    switch((int)a2)
    {
      case 184549377:
      case 184549378:
      case 184549413:
        return v3;
      case 184549379:
        char v9 = (void *)*((void *)this + 11);
        uint64_t result = [v9 hasDistinguishedKind];
        break;
      case 184549380:
        long long v38 = (void *)*((void *)this + 11);
        uint64_t result = [v38 hasCreationDateTime];
        break;
      case 184549381:
        uint64_t v10 = (void *)*((void *)this + 11);
        uint64_t result = [v10 hasModificationDateTime];
        break;
      case 184549382:
        uint64_t v11 = (void *)*((void *)this + 11);
        uint64_t result = [v11 hasLastPlayedDateTime];
        break;
      case 184549383:
      case 184549385:
      case 184549390:
      case 184549393:
      case 184549394:
      case 184549412:
      case 184549415:
      case 184549416:
      case 184549432:
      case 184549434:
      case 184549435:
      case 184549436:
      case 184549437:
      case 184549438:
      case 184549439:
      case 184549440:
      case 184549441:
      case 184549442:
      case 184549449:
      case 184549453:
      case 184549454:
      case 184549457:
      case 184549458:
      case 184549464:
        return 0;
      case 184549384:
        uint64_t v12 = (void *)*((void *)this + 11);
        uint64_t result = [v12 hasName];
        break;
      case 184549386:
        long long v39 = (void *)*((void *)this + 11);
        uint64_t result = [v39 hasPlaylistDescription];
        break;
      case 184549387:
        long long v40 = (void *)*((void *)this + 11);
        uint64_t result = [v40 hasOwner];
        break;
      case 184549388:
        std::string v13 = (void *)*((void *)this + 11);
        uint64_t result = [v13 hasEditable];
        break;
      case 184549389:
        long long v41 = (void *)*((void *)this + 11);
        uint64_t result = [v41 hasPlayCount];
        break;
      case 184549391:
        return [*((id *)this + 11) likedState] != 0;
      case 184549392:
        uint64_t v14 = (void *)*((void *)this + 11);
        uint64_t result = [v14 hasParentIdentifier];
        break;
      case 184549395:
        uint32_t v42 = (void *)*((void *)this + 11);
        uint64_t result = [v42 hasHidden];
        break;
      case 184549396:
        uint64_t v43 = (void *)*((void *)this + 12);
        if (!v43) {
          return 0;
        }
        uint64_t result = [v43 hasEvaluationOrder];
        break;
      case 184549397:
      case 184549414:
        char v8 = (void *)*((void *)this + 11);
        uint64_t result = [v8 hasType];
        break;
      case 184549398:
        std::string v15 = (void *)*((void *)this + 12);
        if (!v15) {
          return 0;
        }
        uint64_t result = [v15 hasDynamic];
        break;
      case 184549399:
        uint64_t v44 = (void *)*((void *)this + 12);
        if (!v44) {
          return 0;
        }
        uint64_t result = [v44 hasFiltered];
        break;
      case 184549400:
        uint64_t v45 = (void *)*((void *)this + 12);
        if (!v45) {
          return 0;
        }
        uint64_t result = [v45 hasGenius];
        break;
      case 184549401:
        id v46 = (void *)*((void *)this + 12);
        if (!v46) {
          return 0;
        }
        uint64_t result = [v46 hasEnabledItemsOnly];
        break;
      case 184549402:
        int v16 = (void *)*((void *)this + 12);
        if (!v16) {
          return 0;
        }
        uint64_t result = [v16 hasLimited];
        break;
      case 184549403:
        id v47 = (void *)*((void *)this + 12);
        if (!v47) {
          return 0;
        }
        uint64_t result = [v47 hasLimitKind];
        break;
      case 184549404:
        int v17 = (void *)*((void *)this + 12);
        if (!v17) {
          return 0;
        }
        uint64_t result = [v17 hasLimitOrder];
        break;
      case 184549405:
        uint64_t v18 = (void *)*((void *)this + 12);
        if (!v18) {
          return 0;
        }
        uint64_t result = [v18 hasLimitValue];
        break;
      case 184549406:
        uint64_t v19 = (void *)*((void *)this + 12);
        if (!v19) {
          return 0;
        }
        uint64_t result = [v19 hasReverseLimitOrder];
        break;
      case 184549407:
        long long v20 = (void *)*((void *)this + 12);
        if (!v20) {
          return 0;
        }
        uint64_t result = [v20 hasSmartCriteria];
        break;
      case 184549408:
        long long v48 = (void *)*((void *)this + 11);
        uint64_t result = [v48 hasStoreId];
        break;
      case 184549409:
        uint64_t v21 = (void *)*((void *)this + 11);
        uint64_t result = [v21 hasSortType];
        break;
      case 184549410:
        id v49 = (void *)*((void *)this + 11);
        uint64_t result = [v49 hasReversedSorting];
        break;
      case 184549417:
        uint64_t v22 = (void *)*((void *)this + 11);
        uint64_t result = [v22 hasCloudGlobalId];
        break;
      case 184549418:
        long long v23 = (void *)*((void *)this + 11);
        uint64_t result = [v23 hasSubscriberURL];
        break;
      case 184549419:
        int v24 = (void *)*((void *)this + 11);
        uint64_t result = [v24 hasShared];
        break;
      case 184549420:
        id v50 = (void *)*((void *)this + 11);
        uint64_t result = [v50 hasVisible];
        break;
      case 184549422:
        uint64_t v51 = (void *)*((void *)this + 11);
        uint64_t result = [v51 hasAuthorStoreId];
        break;
      case 184549423:
        uint64_t v25 = (void *)*((void *)this + 11);
        uint64_t result = [v25 hasAuthorDisplayName];
        break;
      case 184549424:
        long long v52 = (void *)*((void *)this + 11);
        uint64_t result = [v52 hasAuthorStoreURL];
        break;
      case 184549425:
        id v26 = (void *)*((void *)this + 11);
        uint64_t result = [v26 hasMinRefreshInterval];
        break;
      case 184549426:
        id v27 = (void *)*((void *)this + 11);
        uint64_t result = [v27 hasCloudLastUpdateTime];
        break;
      case 184549427:
        uint64_t v53 = (void *)*((void *)this + 11);
        uint64_t result = [v53 hasSubscriberCount];
        break;
      case 184549428:
        __int16 v54 = (void *)*((void *)this + 11);
        uint64_t result = [v54 hasSubscriberPlayCount];
        break;
      case 184549429:
        int v55 = (void *)*((void *)this + 11);
        uint64_t result = [v55 hasSubscriberLikedCount];
        break;
      case 184549430:
        int v28 = (void *)*((void *)this + 11);
        uint64_t result = [v28 hasCloudIsSubscribed];
        break;
      case 184549431:
        __int16 v56 = (void *)*((void *)this + 11);
        uint64_t result = [v56 hasCloudIsCuratorPlaylist];
        break;
      case 184549443:
        id v29 = (void *)*((void *)this + 11);
        uint64_t result = [v29 hasExternalVendorIdentifier];
        break;
      case 184549444:
        uint64_t v57 = (void *)*((void *)this + 11);
        uint64_t result = [v57 hasExternalVendorDisplayName];
        break;
      case 184549445:
        __int16 v30 = (void *)*((void *)this + 11);
        uint64_t result = [v30 hasExternalVendorTag];
        break;
      case 184549446:
        id v58 = (void *)*((void *)this + 11);
        uint64_t result = [v58 hasExternalVendorPlaylist];
        break;
      case 184549447:
        int v31 = (void *)*((void *)this + 11);
        uint64_t result = [v31 hasCloudIsSharingDisabled];
        break;
      case 184549448:
        id v59 = (void *)*((void *)this + 11);
        uint64_t result = [v59 hasCloudVersionHash];
        break;
      case 184549450:
        id v60 = (void *)*((void *)this + 11);
        uint64_t result = [v60 hasArtworkId];
        break;
      case 184549451:
        BOOL v32 = (void *)*((void *)this + 11);
        uint64_t result = [v32 hasAuthorHandle];
        break;
      case 184549452:
        id v61 = (void *)*((void *)this + 11);
        uint64_t result = [v61 hasCloudUniversalLibraryId];
        break;
      case 184549455:
        uint64_t v33 = (void *)*((void *)this + 11);
        uint64_t result = [v33 hasPlaylistCategoryTypeMask];
        break;
      case 184549456:
        uint64_t v62 = (void *)*((void *)this + 11);
        uint64_t result = [v62 hasPlaylistGroupingSortKey];
        break;
      case 184549459:
        uint64_t v63 = (void *)*((void *)this + 11);
        uint64_t result = [v63 hasTraits];
        break;
      case 184549460:
        id v34 = (void *)*((void *)this + 11);
        uint64_t result = [v34 hasLikedStateChangedDate];
        break;
      case 184549461:
        id v35 = (void *)*((void *)this + 11);
        uint64_t result = [v35 hasCoverArtworkRecipe];
        break;
      case 184549462:
        uint64_t v36 = (void *)*((void *)this + 11);
        uint64_t result = [v36 hasIsCollaborative];
        break;
      case 184549463:
        uint64_t v64 = (void *)*((void *)this + 11);
        uint64_t result = [v64 hasCollaborationMode];
        break;
      case 184549465:
        v65 = (void *)*((void *)this + 11);
        uint64_t result = [v65 hasCollaborationInvitationURL];
        break;
      case 184549466:
        id v37 = (void *)*((void *)this + 11);
        uint64_t result = [v37 hasCollaborationInvitationURLExpirationDate];
        break;
      case 184549467:
        uint64_t v66 = (void *)*((void *)this + 11);
        uint64_t result = [v66 hasCollaborationJoinRequestPending];
        break;
      case 184549468:
        char v67 = (void *)*((void *)this + 11);
        uint64_t result = [v67 hasCollaboratorStatus];
        break;
      default:
        goto LABEL_12;
    }
  }
  return result;
}

void sub_1B0360E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerImportItem::getDataValue(id *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (a2 == 184549407)
  {
    [this[12] smartCriteria];
    if (objc_claimAutoreleasedReturnValue()) {
      operator new();
    }
  }
  else
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"virtual ML3CPPDataRef ML3ProtoSyncContainerImportItem::getDataValue(MLImportPropertyKey) const"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3ProtoSyncImportItem.mm", 1002, @"getDataValue called with unknown property key %x", a2);
  }
}

void sub_1B036116C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double ML3ProtoSyncContainerImportItem::getFloatValue(ML3ProtoSyncContainerImportItem *this, uint64_t a2)
{
  BOOL v3 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v4 = [NSString stringWithUTF8String:"virtual float ML3ProtoSyncContainerImportItem::getFloatValue(MLImportPropertyKey) const"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3ProtoSyncImportItem.mm", 981, @"getFloatValue called with unknown property key %x", a2);

  return 0.0;
}

void sub_1B0361248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ML3ProtoSyncContainerImportItem::getIntegerValue(id *this, uint64_t a2)
{
  uint64_t v4 = 0;
  if ((int)a2 > 201326592)
  {
    switch(a2)
    {
      case 0xC000001:
        uint64_t v12 = [this[11] geniusSeedTrackIdentifier];
        if (v12)
        {
          id v19 = this[9];
          long long v20 = [this[11] geniusSeedTrackIdentifier];
          uint64_t v4 = [v19 syncIdFromMultiverseId:v20];
        }
        else
        {
          uint64_t v4 = 0;
        }
LABEL_79:

        break;
      case 0xC000002:
        break;
      case 0xD000003:
        return (id)(int)[this[11] secondaryArtworkSourceType];
      default:
LABEL_77:
        uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v22 = [NSString stringWithUTF8String:"virtual int64_t ML3ProtoSyncContainerImportItem::getIntegerValue(MLImportPropertyKey) const"];
        objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, @"ML3ProtoSyncImportItem.mm", 969, @"getIntegerValue called with unknown property key %x", a2);

        return 0;
    }
  }
  else
  {
    switch((int)a2)
    {
      case 184549377:
        return this[1];
      case 184549378:
        uint64_t v4 = [this[9] syncIdFromMultiverseId:this[10]];
        if (v4) {
          return (id)v4;
        }
        return this[1];
      case 184549379:
        return (id)(int)[this[11] distinguishedKind];
      case 184549380:
        id v6 = this[11];
        return (id)[v6 creationDateTime];
      case 184549381:
        id v8 = this[11];
        return (id)[v8 modificationDateTime];
      case 184549382:
        id v9 = this[11];
        return (id)[v9 lastPlayedDateTime];
      case 184549383:
      case 184549390:
      case 184549393:
      case 184549394:
      case 184549412:
      case 184549415:
      case 184549432:
      case 184549434:
      case 184549435:
      case 184549436:
      case 184549437:
      case 184549438:
      case 184549440:
      case 184549441:
      case 184549442:
      case 184549449:
      case 184549453:
      case 184549454:
      case 184549457:
      case 184549458:
      case 184549464:
        return (id)v4;
      case 184549387:
        unsigned int v10 = [this[11] owner];
        goto LABEL_71;
      case 184549388:
        unsigned int v10 = [this[11] editable];
        goto LABEL_71;
      case 184549389:
        return (id)(int)[this[11] playCount];
      case 184549391:
        return (id)(int)[this[11] likedState];
      case 184549392:
        id v11 = this[9];
        uint64_t v12 = [this[11] parentIdentifier];
        uint64_t v4 = [v11 syncIdFromMultiverseId:v12];
        goto LABEL_79;
      case 184549395:
        unsigned int v10 = [this[11] hidden];
        goto LABEL_71;
      case 184549396:
        unsigned int v10 = [this[12] evaluationOrder];
        goto LABEL_71;
      case 184549397:
        return (id)([this[11] type] == 4);
      case 184549398:
        unsigned int v10 = [this[12] dynamic];
        goto LABEL_71;
      case 184549399:
        unsigned int v10 = [this[12] filtered];
        goto LABEL_71;
      case 184549400:
        unsigned int v10 = [this[12] genius];
        goto LABEL_71;
      case 184549401:
        unsigned int v10 = [this[12] enabledItemsOnly];
        goto LABEL_71;
      case 184549402:
        unsigned int v10 = [this[12] limited];
        goto LABEL_71;
      case 184549403:
        return (id)(int)[this[12] limitKind];
      case 184549404:
        unsigned int v10 = [this[12] limitOrder];
        goto LABEL_71;
      case 184549405:
        unsigned int v10 = [this[12] limitValue];
        goto LABEL_71;
      case 184549406:
        unsigned int v10 = [this[12] reverseLimitOrder];
        goto LABEL_71;
      case 184549408:
        id v13 = this[11];
        return (id)[v13 storeId];
      case 184549409:
        unsigned int v10 = +[ML3Container trackOrderFromProtocolSortType:](ML3Container, "trackOrderFromProtocolSortType:", [this[11] sortType]);
        goto LABEL_71;
      case 184549410:
        unsigned int v10 = [this[11] reversedSorting];
        goto LABEL_71;
      case 184549413:
        return (id)(int)[this[11] remoteSourceType];
      case 184549414:
        return (id)(int)[this[11] type];
      case 184549416:
        [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
        return (id)(uint64_t)v14;
      case 184549419:
        unsigned int v10 = [this[11] shared];
        goto LABEL_71;
      case 184549420:
        unsigned int v10 = [this[11] visible];
        goto LABEL_71;
      case 184549422:
        id v15 = this[11];
        return (id)[v15 authorStoreId];
      case 184549425:
        id v16 = this[11];
        return (id)[v16 minRefreshInterval];
      case 184549426:
        unsigned int v10 = [this[11] hasCloudLastUpdateTime];
        goto LABEL_71;
      case 184549427:
        return (id)(int)[this[11] subscriberCount];
      case 184549428:
        return (id)(int)[this[11] subscriberPlayCount];
      case 184549429:
        return (id)(int)[this[11] subscriberLikedCount];
      case 184549430:
        unsigned int v10 = [this[11] cloudIsSubscribed];
        goto LABEL_71;
      case 184549431:
        unsigned int v10 = [this[11] cloudIsCuratorPlaylist];
        goto LABEL_71;
      case 184549446:
        unsigned int v10 = [this[11] externalVendorPlaylist];
        goto LABEL_71;
      case 184549447:
        unsigned int v10 = [this[11] cloudIsSharingDisabled];
        goto LABEL_71;
      case 184549455:
        return (id)(int)[this[11] playlistCategoryTypeMask];
      case 184549459:
        return (id)(int)[this[11] traits];
      case 184549460:
        id v17 = this[11];
        return (id)[v17 likedStateChangedDate];
      case 184549462:
        unsigned int v10 = [this[11] isCollaborative];
        goto LABEL_71;
      case 184549463:
        return (id)(int)[this[11] collaborationMode];
      case 184549466:
        id v18 = this[11];
        return (id)[v18 collaborationInvitationURLExpirationDate];
      case 184549467:
        unsigned int v10 = [this[11] collaborationJoinRequestPending];
LABEL_71:
        uint64_t v4 = v10;
        break;
      case 184549468:
        return (id)(int)[this[11] collaboratorStatus];
      default:
        goto LABEL_77;
    }
  }
  return (id)v4;
}

void sub_1B0361738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerImportItem::getStringValue(id *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((int)a2 > 184549438)
  {
    switch((int)a2)
    {
      case 184549439:
        goto LABEL_44;
      case 184549440:
      case 184549441:
      case 184549442:
      case 184549446:
      case 184549447:
      case 184549449:
      case 184549453:
      case 184549454:
      case 184549455:
      case 184549457:
      case 184549458:
      case 184549459:
      case 184549460:
      case 184549462:
      case 184549463:
      case 184549464:
        goto LABEL_15;
      case 184549443:
        id v5 = [this[11] externalVendorIdentifier];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
      case 184549444:
        id v5 = [this[11] externalVendorDisplayName];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
      case 184549445:
        id v5 = [this[11] externalVendorTag];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
      case 184549448:
        id v5 = [this[11] cloudVersionHash];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
      case 184549450:
        id v5 = [this[11] artworkId];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
      case 184549451:
        id v5 = [this[11] authorHandle];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
      case 184549452:
        id v5 = [this[11] cloudUniversalLibraryId];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
      case 184549456:
        id v5 = [this[11] playlistGroupingSortKey];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
      case 184549461:
        id v5 = [this[11] coverArtworkRecipe];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
      case 184549465:
        id v5 = [this[11] collaborationInvitationURL];
        if (v5) {
          goto LABEL_39;
        }
        goto LABEL_44;
      default:
        if (a2 != 218103810) {
          goto LABEL_15;
        }
        id v5 = [this[11] secondaryArtworkId];
        if (!v5) {
          goto LABEL_44;
        }
        goto LABEL_39;
    }
  }
  switch((int)a2)
  {
    case 184549417:
      id v5 = [this[11] cloudGlobalId];
      if (v5) {
        goto LABEL_39;
      }
      goto LABEL_44;
    case 184549418:
      id v5 = [this[11] subscriberURL];
      if (!v5) {
        goto LABEL_44;
      }
      goto LABEL_39;
    case 184549419:
    case 184549420:
    case 184549421:
    case 184549422:
      goto LABEL_15;
    case 184549423:
      id v5 = [this[11] authorDisplayName];
      if (!v5) {
        goto LABEL_44;
      }
      goto LABEL_39;
    case 184549424:
      id v5 = [this[11] authorStoreURL];
      if (!v5) {
        goto LABEL_44;
      }
      goto LABEL_39;
    default:
      if (a2 == 184549384)
      {
        id v5 = [this[11] name];
        if (v5) {
          goto LABEL_39;
        }
LABEL_44:
        id v8 = 0;
        *(void *)a3 = &unk_1F08C3230;
        *(unsigned char *)(a3 + 8) = 0;
        *(void *)(a3 + 24) = 0;
        *(void *)(a3 + 32) = 0;
        *(void *)(a3 + 16) = 0;
        goto LABEL_45;
      }
      if (a2 != 184549386)
      {
LABEL_15:
        id v6 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v7 = [NSString stringWithUTF8String:"NSString *ML3ProtoSyncContainerImportItem::_getProtoStringValue(MLImportPropertyKey) const"];
        objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"ML3ProtoSyncImportItem.mm", 1174, @"_getProtoStringValue called with unknown property key %x", a2);

        goto LABEL_44;
      }
      id v5 = [this[11] playlistDescription];
      if (!v5) {
        goto LABEL_44;
      }
LABEL_39:
      id v8 = v5;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v8 UTF8String]);
      *(void *)a3 = &unk_1F08C3230;
      *(unsigned char *)(a3 + 8) = 1;
      id v9 = (std::string *)(a3 + 16);
      if (SHIBYTE(v11) < 0)
      {
        std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        if (SHIBYTE(v11) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        *(void *)(a3 + 32) = v11;
      }
LABEL_45:

      return;
  }
}

void sub_1B0361C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerImportItem::~ML3ProtoSyncContainerImportItem(id *this)
{
  ML3ProtoSyncContainerImportItem::~ML3ProtoSyncContainerImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  uint64_t vars8;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
}

uint64_t ML3ProtoSyncAlbumImportItem::propertyKeyForSortPropertyKey(ML3ProtoSyncAlbumImportItem *this, int a2)
{
  if (a2 == 285212674) {
    return 285212673;
  }
  else {
    return 0;
  }
}

uint64_t ML3ProtoSyncAlbumImportItem::sortPropertyKeyForPropertyKey(ML3ProtoSyncAlbumImportItem *this, int a2)
{
  if (a2 == 285212673) {
    return 285212674;
  }
  else {
    return 0;
  }
}

id ML3ProtoSyncAlbumImportItem::getDeduplicationPredicates(ML3ProtoSyncAlbumImportItem *this)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  id v74 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2) {
    [v2 libraryIdentifiers];
  }
  else {
  __int16 v70 = [*((id *)this + 15) libraryIdentifiers];
  }
  if (!*((unsigned char *)this + 64))
  {
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    id obj = v70;
    uint64_t v8 = [obj countByEnumeratingWithState:&v81 objects:v94 count:16];
    if (!v8) {
      goto LABEL_27;
    }
    uint64_t v9 = *(void *)v82;
    while (1)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v82 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v81 + 1) + 8 * i);
        uint64_t v12 = [v11 libraryName];
        uint64_t v13 = [v11 libraryId];
        if (v12)
        {
          double v14 = [*((id *)this + 9) libraryUID];
          int v15 = [v12 isEqualToString:v14];

          if (v15)
          {
            id v16 = +[ML3ComparisonPredicate predicateWithProperty:@"ROWID" equalToInt64:v13];
            [v74 addObject:v16];
          }
          else
          {
            uint64_t v21 = [*((id *)this + 9) syncLibraryID];
            int v22 = [v12 isEqualToString:v21];

            if (!v22) {
              goto LABEL_25;
            }
            id v16 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:v13];
            [v74 addObject:v16];
          }
        }
        else
        {
          id v17 = (void *)MEMORY[0x1E4F1C978];
          id v16 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:v13];
          id v18 = +[ML3ComparisonPredicate predicateWithProperty:@"ROWID" equalToInt64:v13];
          id v19 = objc_msgSend(v17, "arrayWithObjects:", v16, v18, 0);
          long long v20 = +[ML3CompoundPredicate predicateMatchingPredicates:v19];
          [v74 addObject:v20];
        }
LABEL_25:
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v81 objects:v94 count:16];
      if (!v8) {
        goto LABEL_27;
      }
    }
  }
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  id v3 = v70;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v85 objects:v95 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v86;
    do
    {
      for (uint64_t j = 0; j != v4; ++j)
      {
        if (*(void *)v86 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", @"ROWID", [*(id *)(*((void *)&v85 + 1) + 8 * j) libraryId]);
        [v74 addObject:v7];
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v85 objects:v95 count:16];
    }
    while (v4);
  }
LABEL_27:

  if (!*((unsigned char *)this + 64))
  {
    uint64_t v23 = (*(uint64_t (**)(ML3ProtoSyncAlbumImportItem *, uint64_t))(*(void *)this + 32))(this, 285212696);
    id obja = (id)(*(uint64_t (**)(ML3ProtoSyncAlbumImportItem *, uint64_t))(*(void *)this + 32))(this, 285212683);
    (*(void (**)(void *__return_ptr, ML3ProtoSyncAlbumImportItem *, uint64_t))(*(void *)this + 24))(v78, this, 285212673);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v80, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v78[0] = &unk_1F08C3230;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v80 = __p;
    }
    (*(void (**)(void *__return_ptr))(*(void *)this + 24))(v78);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v77, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v78[0] = &unk_1F08C3230;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v77 = __p;
    }
    (*(void (**)(void *__return_ptr))(*(void *)this + 24))(v78);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v76, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v78[0] = &unk_1F08C3230;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v76 = __p;
    }
    (*(void (**)(void *__return_ptr))(*(void *)this + 24))(v78);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v75, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v78[0] = &unk_1F08C3230;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v75 = __p;
    }
    std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v75.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v25 = ML3CPPBridgeString((const UInt8 *)&v75, 1);
      id v26 = +[ML3ComparisonPredicate predicateWithProperty:@"cloud_library_id" equalToValue:v25];
      [v74 addObject:v26];
    }
    std::string::size_type v27 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v27 = v80.__r_.__value_.__l.__size_;
    }
    if (v27)
    {
      int v28 = (void *)*((void *)this + 9);
      id v29 = ML3CPPBridgeString((const UInt8 *)&v80, 1);
      __int16 v30 = [v28 groupingKeyForString:v29];
    }
    else
    {
      __int16 v30 = 0;
    }
    std::string::size_type v31 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v31 = v77.__r_.__value_.__l.__size_;
    }
    if (v31)
    {
      BOOL v32 = (void *)*((void *)this + 9);
      uint64_t v33 = ML3CPPBridgeString((const UInt8 *)&v77, 1);
      id v34 = [v32 groupingKeyForString:v33];

      if (!v23) {
        goto LABEL_64;
      }
    }
    else
    {
      id v34 = 0;
      if (!v23) {
        goto LABEL_64;
      }
    }
    if ([v30 length] && objc_msgSend(v34, "length"))
    {
      id v35 = +[ML3ComparisonPredicate predicateWithProperty:@"store_id" equalToInt64:v23];
      v93[0] = v35;
      uint64_t v36 = +[ML3ComparisonPredicate predicateWithProperty:@"cloud_library_id" value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
      v93[1] = v36;
      id v37 = +[ML3ComparisonPredicate predicateWithProperty:@"album_artist.grouping_key" equalToValue:v34];
      v93[2] = v37;
      long long v38 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" equalToValue:v30];
      v93[3] = v38;
      long long v39 = +[ML3ComparisonPredicate predicateWithProperty:@"season_number" equalToInt64:obja];
      void v93[4] = v39;
      long long v40 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:0];
      v93[5] = v40;
      long long v41 = [MEMORY[0x1E4F1C978] arrayWithObjects:v93 count:6];
      uint32_t v42 = +[ML3CompoundPredicate predicateMatchingPredicates:v41];

      [v74 addObject:v42];
    }
    else
    {
      uint64_t v43 = +[ML3ComparisonPredicate predicateWithProperty:@"store_id" equalToInt64:v23];
      v92[0] = v43;
      uint64_t v44 = +[ML3ComparisonPredicate predicateWithProperty:@"cloud_library_id" value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
      v92[1] = v44;
      uint64_t v45 = +[ML3ComparisonPredicate predicateWithProperty:@"album_artist.grouping_key" value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
      v92[2] = v45;
      id v46 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
      v92[3] = v46;
      id v47 = +[ML3ComparisonPredicate predicateWithProperty:@"season_number" equalToInt64:obja];
      v92[4] = v47;
      long long v48 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:0];
      v92[5] = v48;
      id v49 = [MEMORY[0x1E4F1C978] arrayWithObjects:v92 count:6];
      uint32_t v42 = +[ML3CompoundPredicate predicateMatchingPredicates:v49];

      [v74 addObject:v42];
    }

LABEL_64:
    if ([v30 length] && objc_msgSend(v34, "length"))
    {
      id v50 = +[ML3ComparisonPredicate predicateWithProperty:@"album_artist.grouping_key" equalToValue:v34];
      v91[0] = v50;
      uint64_t v51 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" equalToValue:v30];
      v91[1] = v51;
      long long v52 = +[ML3ComparisonPredicate predicateWithProperty:@"season_number" equalToInt64:obja];
      v91[2] = v52;
      uint64_t v53 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:0];
      v91[3] = v53;
      __int16 v54 = +[ML3ComparisonPredicate predicateWithProperty:@"cloud_library_id" value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
      v91[4] = v54;
      int v55 = [MEMORY[0x1E4F1C978] arrayWithObjects:v91 count:5];
      __int16 v56 = +[ML3CompoundPredicate predicateMatchingPredicates:v55];

      [v74 addObject:v56];
    }
    if (![v30 length]) {
      goto LABEL_74;
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v76.__r_.__value_.__l.__size_) {
        goto LABEL_74;
      }
      uint64_t v57 = (std::string *)v76.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&v76.__r_.__value_.__s + 23)) {
        goto LABEL_74;
      }
      uint64_t v57 = &v76;
    }
    id v58 = [NSString stringWithUTF8String:v57];
    id v59 = +[ML3ComparisonPredicate predicateWithProperty:@"feed_url" equalToValue:v58];
    v90[0] = v59;
    id v60 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" equalToValue:v30];
    v90[1] = v60;
    id v61 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:0];
    v90[2] = v61;
    uint64_t v62 = [MEMORY[0x1E4F1C978] arrayWithObjects:v90 count:3];
    uint64_t v63 = +[ML3CompoundPredicate predicateMatchingPredicates:v62];

    [v74 addObject:v63];
LABEL_74:
    uint64_t v64 = (*(uint64_t (**)(ML3ProtoSyncAlbumImportItem *, uint64_t))(*(void *)this + 32))(this, 16777217);
    if ((MLMediaTypeByStandardizingMediaType(v64) & 0x10042) != 0 && !v30 && v34)
    {
      v65 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
      v89[0] = v65;
      uint64_t v66 = +[ML3ComparisonPredicate predicateWithProperty:@"album_artist.grouping_key" equalToValue:v34];
      v89[1] = v66;
      char v67 = [MEMORY[0x1E4F1C978] arrayWithObjects:v89 count:2];
      id v68 = +[ML3CompoundPredicate predicateMatchingPredicates:v67];

      [v74 addObject:v68];
    }

    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
  }

  return v74;
}

void sub_1B0362B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, _Unwind_Exception *exception_object, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a48 < 0) {
    operator delete(a43);
  }

  _Unwind_Resume(a1);
}

void ML3ProtoSyncAlbumImportItem::getDescription(id *this)
{
  (*((void (**)(void **__return_ptr))*this + 3))(&v12);
  (*((void (**)(id *, uint64_t))*this + 4))(this, 285212696);
  if (this[11]) {
    (*((void (**)(id *, uint64_t))*this + 4))(this, 167772175);
  }
  else {
    [this[9] syncIdFromMultiverseId:this[10]];
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<ML3ProtoSyncAlbumImportItem ", 29);
  *(_DWORD *)((char *)&v9[1] + *(void *)(v9[0] - 24)) = *(_DWORD *)((unsigned char *)&v9[1] + *(void *)(v9[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" name=", 6);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v13;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" storeID=", 9);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v5 = (void *)std::ostream::operator<<();
  id v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" syncID=", 8);
  *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v7 = (void *)std::ostream::operator<<();
  char v14 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v14, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3E935B0](&v11);
  uint64_t v12 = &unk_1F08C3230;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1B03632CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  *(void *)(v15 - 96) = &unk_1F08C3230;
  if (*(char *)(v15 - 57) < 0) {
    operator delete(*(void **)(v15 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncAlbumImportItem::hasValue(ML3ProtoSyncAlbumImportItem *this, int a2)
{
  uint64_t v4 = 0;
  switch(a2)
  {
    case 285212673:
      uint64_t v5 = (void *)*((void *)this + 14);
      if (v5 && [v5 hasSeries])
      {
        uint64_t v2 = [*((id *)this + 14) series];
        int v6 = 1;
        uint64_t v4 = 1;
        if ([v2 hasName]) {
          goto LABEL_71;
        }
      }
      else
      {
        int v6 = 0;
      }
      int v22 = (void *)*((void *)this + 15);
      if (!v22) {
        goto LABEL_68;
      }
      uint64_t v23 = [v22 hasName];
      goto LABEL_61;
    case 285212674:
      uint64_t v9 = (void *)*((void *)this + 14);
      if (v9 && [v9 hasSeries])
      {
        uint64_t v2 = [*((id *)this + 14) series];
        int v6 = 1;
        uint64_t v4 = 1;
        if ([v2 hasSortName]) {
          goto LABEL_71;
        }
      }
      else
      {
        int v6 = 0;
      }
      int v24 = (void *)*((void *)this + 15);
      if (!v24)
      {
LABEL_68:
        uint64_t v4 = 0;
        if (!v6) {
          return v4;
        }
        goto LABEL_71;
      }
      uint64_t v23 = [v24 hasSortName];
LABEL_61:
      uint64_t v4 = v23;
      if (v6) {
LABEL_71:
      }

      return v4;
    case 285212675:
    case 285212676:
    case 285212677:
    case 285212678:
    case 285212685:
    case 285212686:
    case 285212687:
    case 285212688:
    case 285212689:
    case 285212690:
    case 285212691:
    case 285212692:
    case 285212693:
    case 285212694:
    case 285212698:
      return v4;
    case 285212679:
      char v10 = (void *)*((void *)this + 15);
      if (!v10) {
        return 0;
      }
      return [v10 hasUserRating];
    case 285212680:
      uint64_t v11 = (void *)*((void *)this + 15);
      if (!v11) {
        return 0;
      }
      return [v11 hasLikedState];
    case 285212681:
      uint64_t v12 = (void *)*((void *)this + 15);
      if (!v12) {
        return 0;
      }
      return [v12 hasCompilation];
    case 285212682:
      std::string v13 = (void *)*((void *)this + 14);
      return [v13 hasFeedUrl];
    case 285212683:
      char v14 = (void *)*((void *)this + 13);
      return [v14 hasSeasonNumber];
    case 285212684:
      uint64_t v15 = (void *)*((void *)this + 11);
      return [v15 hasYear];
    case 285212695:
      id v16 = (void *)*((void *)this + 15);
      if (!v16) {
        return 0;
      }
      return [v16 hasLikedStateChangedDate];
    case 285212696:
      id v17 = (void *)*((void *)this + 15);
      if (!v17) {
        return 0;
      }
      return [v17 hasStoreId];
    case 285212697:
      id v18 = (void *)*((void *)this + 15);
      if (v18 && ([v18 hasCloudId] & 1) != 0) {
        return 1;
      }
      uint64_t v25 = (void *)*((void *)this + 10);
      if (!v25) {
        return 0;
      }
      return [v25 hasCloudLibraryId];
    case 285212699:
      id v19 = (void *)*((void *)this + 15);
      if (!v19) {
        return 0;
      }
      uint64_t v2 = [v19 artist];
      if (v2)
      {
        long long v20 = [*((id *)this + 15) artist];
        uint64_t v4 = [v20 hasName];
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_71;
    default:
      if (a2 != 16777217)
      {
        if (a2 != 167772175) {
          return v4;
        }
        uint64_t v7 = (void *)*((void *)this + 15);
        if (v7)
        {
          return [v7 hasPersistentId];
        }
        return 0;
      }
      uint64_t v21 = (void *)*((void *)this + 11);
      if (!v21) {
        return 0;
      }
      return [v21 hasMediaType];
  }
}

void sub_1B036366C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncAlbumImportItem::getIntegerValue(ML3ProtoSyncAlbumImportItem *this, int a2)
{
  uint64_t result = 0;
  if (a2 <= 285212678)
  {
    if (a2 == 16777217)
    {
      uint64_t result = *((void *)this + 11);
      if (result)
      {
        [(id)result mediaType];
        return 0;
      }
    }
    else if (a2 == 167772175)
    {
      uint64_t result = *((void *)this + 15);
      if (result)
      {
        return [(id)result persistentId];
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 285212679:
        uint64_t result = *((void *)this + 15);
        if (result)
        {
          LODWORD(result) = [(id)result userRating];
          goto LABEL_25;
        }
        break;
      case 285212680:
        uint64_t result = *((void *)this + 15);
        if (result)
        {
          LODWORD(result) = [(id)result likedState];
          goto LABEL_25;
        }
        break;
      case 285212681:
        uint64_t result = *((void *)this + 15);
        if (result) {
          uint64_t result = [(id)result compilation];
        }
        break;
      case 285212682:
        return result;
      case 285212683:
        uint64_t result = *((void *)this + 13);
        if (result)
        {
          LODWORD(result) = [(id)result seasonNumber];
          goto LABEL_25;
        }
        break;
      case 285212684:
        uint64_t result = *((void *)this + 11);
        if (result)
        {
          LODWORD(result) = [(id)result year];
LABEL_25:
          uint64_t result = (int)result;
        }
        break;
      default:
        if (a2 == 285212695)
        {
          uint64_t result = *((void *)this + 15);
          if (result)
          {
            uint64_t result = [(id)result likedStateChangedDate];
          }
        }
        else if (a2 == 285212696)
        {
          uint64_t result = *((void *)this + 15);
          if (result)
          {
            uint64_t result = [(id)result storeId];
          }
        }
        break;
    }
  }
  return result;
}

void ML3ProtoSyncAlbumImportItem::getStringValue(id *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 > 285212696)
  {
    switch(a2)
    {
      case 285212697:
        if (this[10])
        {
          uint64_t v5 = [this[10] cloudLibraryId];
        }
        else
        {
          id v12 = this[15];
          if (!v12) {
            goto LABEL_31;
          }
          uint64_t v5 = [v12 cloudId];
        }
        goto LABEL_28;
      case 285212699:
        id v9 = this[15];
        if (!v9) {
          goto LABEL_31;
        }
        uint64_t v7 = [v9 artist];
        uint64_t v8 = [v7 name];
        break;
      case 301989890:
        id v6 = this[15];
        if (!v6) {
          goto LABEL_31;
        }
        uint64_t v7 = [v6 artist];
        uint64_t v8 = [v7 sortName];
        break;
      default:
        goto LABEL_31;
    }
  }
  else
  {
    switch(a2)
    {
      case 285212673:
        if (!this[14])
        {
          id v11 = this[15];
          if (!v11) {
            goto LABEL_31;
          }
          uint64_t v5 = [v11 name];
          goto LABEL_28;
        }
        uint64_t v7 = [this[14] series];
        uint64_t v8 = [v7 name];
        break;
      case 285212674:
        if (!this[14])
        {
          id v13 = this[15];
          if (!v13) {
            goto LABEL_31;
          }
          uint64_t v5 = [v13 sortName];
          goto LABEL_28;
        }
        uint64_t v7 = [this[14] series];
        uint64_t v8 = [v7 sortName];
        break;
      case 285212682:
        id v4 = this[14];
        if (!v4) {
          goto LABEL_31;
        }
        uint64_t v5 = [v4 feedUrl];
LABEL_28:
        char v10 = (void *)v5;
        if (v5) {
          goto LABEL_29;
        }
LABEL_31:
        *(void *)a3 = &unk_1F08C3230;
        *(unsigned char *)(a3 + 8) = 0;
        *(void *)(a3 + 24) = 0;
        *(void *)(a3 + 32) = 0;
        *(void *)(a3 + 16) = 0;
        return;
      default:
        goto LABEL_31;
    }
  }
  char v10 = (void *)v8;

  if (!v10) {
    goto LABEL_31;
  }
LABEL_29:
  id v14 = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v14 UTF8String]);
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  uint64_t v15 = (std::string *)(a3 + 16);
  if (SHIBYTE(v17) < 0)
  {
    std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(void *)(a3 + 32) = v17;
  }
}

void sub_1B0363AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void ML3ProtoSyncAlbumImportItem::~ML3ProtoSyncAlbumImportItem(id *this)
{
  ML3ProtoSyncAlbumImportItem::~ML3ProtoSyncAlbumImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  uint64_t vars8;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
}

uint64_t ML3ProtoSyncArtistImportItem::propertyKeyForSortPropertyKey(ML3ProtoSyncArtistImportItem *this, int a2)
{
  if (a2 == 318767106) {
    int v2 = 318767105;
  }
  else {
    int v2 = 0;
  }
  if (a2 == 318767108) {
    unsigned int v3 = 318767107;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a2 == 301989890) {
    return 301989889;
  }
  else {
    return v3;
  }
}

uint64_t ML3ProtoSyncArtistImportItem::sortPropertyKeyForPropertyKey(ML3ProtoSyncArtistImportItem *this, int a2)
{
  if (a2 == 318767105) {
    int v2 = 318767106;
  }
  else {
    int v2 = 0;
  }
  if (a2 == 318767107) {
    unsigned int v3 = 318767108;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a2 == 301989889) {
    return 301989890;
  }
  else {
    return v3;
  }
}

void ML3ProtoSyncArtistImportItem::getEffectiveSortSeriesName(ML3ProtoSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 24))(&v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v16 = v15;
  }
  (*(void (**)(long long *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(&v14, this, 318767108);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v13 = v15;
  }
  int v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  std::string::size_type v7 = v15.__r_.__value_.__s.__data_[7];
  int v8 = v15.__r_.__value_.__s.__data_[7];
  std::string::size_type size = *((void *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0) {
    uint64_t v10 = v15.__r_.__value_.__s.__data_[7];
  }
  else {
    uint64_t v10 = *((void *)&v14 + 1);
  }
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    std::string::size_type v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v7 = size;
  }
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (uint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  id v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(void *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0) {
LABEL_31:
  }
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1B0363EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v27 < 0) {
    operator delete(a13);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ML3ProtoSyncArtistImportItem::getEffectiveSortArtist(ML3ProtoSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  memset(&v15, 0, sizeof(v15));
  (*(void (**)(long long *__return_ptr))(*(void *)this + 24))(&v12);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    *(void *)&long long v12 = &unk_1F08C3230;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v14 = v13;
  }
  (*(void (**)(long long *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(&v12, this, 318767106);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    *(void *)&long long v12 = &unk_1F08C3230;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v11 = v13;
  }
  std::string::operator=(&v15, &v11);
  std::string::size_type v6 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  std::string::value_type v7 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v15.__r_.__value_.__l.__size_;
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v15.__r_.__value_.__l.__size_;
  }
  if (!v9)
  {
    ML3CPPSortableString((std::string *)&v12, (const UInt8 *)&v14);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    v15.__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
    std::string::size_type v6 = v13.__r_.__value_.__s.__data_[7];
    std::string::size_type size = *((void *)&v12 + 1);
    std::string::value_type v7 = v13.__r_.__value_.__s.__data_[7];
  }
  if (v7 < 0) {
    std::string::size_type v6 = size;
  }
  if (v6 && a2)
  {
    ML3CPPSanitizeString((std::string *)&v12, (uint64_t)&v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    v15.__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
    std::string::value_type v7 = v13.__r_.__value_.__s.__data_[7];
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  uint64_t v10 = (std::string *)(a3 + 16);
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external(v10, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    *(void *)(a3 + 32) = *((void *)&v15.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1B0364220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ML3ProtoSyncArtistImportItem::getEffectiveSortAlbumArtist(ML3ProtoSyncArtistImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989889);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v23 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989890);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v20 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767105);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v19 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767106);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v18 = v22;
  }
  int v7 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v20;
  }
  std::string::size_type v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v8 = v17.__r_.__value_.__l.__size_;
  }
  if (v8)
  {
    if (v6) {
      goto LABEL_56;
    }
    goto LABEL_28;
  }
  ML3CPPSortableString((std::string *)&v21, (const UInt8 *)&v23);
  if (v9 < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
  LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  std::string::size_type size = *((void *)&v21 + 1);
  if (!v6)
  {
LABEL_28:
    if ((v9 & 0x80u) == 0) {
      std::string::size_type v11 = v9;
    }
    else {
      std::string::size_type v11 = size;
    }
    if (!v11)
    {
      std::string::size_type v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v12 = v23.__r_.__value_.__l.__size_;
      }
      if (!v12)
      {
        (*(void (**)(long long *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 168))(&v21, this, a2);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        }
        else {
          std::string v16 = v22;
        }
        if ((v9 & 0x80) != 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        std::string v17 = v16;
        *(void *)&long long v21 = &unk_1F08C3230;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        std::string::size_type v13 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        int v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v13 = v17.__r_.__value_.__l.__size_;
        }
        if (!v13)
        {
          std::string::size_type v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v14 = v19.__r_.__value_.__l.__size_;
          }
          if (!v14)
          {
            (*(void (**)(long long *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 176))(&v21, this, a2);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
            }
            else {
              std::string v16 = v22;
            }
            if (v9 < 0) {
              operator delete(v17.__r_.__value_.__l.__data_);
            }
            std::string v17 = v16;
            *(void *)&long long v21 = &unk_1F08C3230;
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v22.__r_.__value_.__l.__data_);
            }
            LOBYTE(v9) = *((unsigned char *)&v17.__r_.__value_.__s + 23);
            std::string::size_type size = v17.__r_.__value_.__l.__size_;
          }
        }
      }
    }
  }
LABEL_56:
  if ((v9 & 0x80u) == 0) {
    std::string::size_type size = v9;
  }
  if (size && a2)
  {
    ML3CPPSanitizeString((std::string *)&v21, (uint64_t)&v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
    LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  std::string v15 = (std::string *)(a3 + 16);
  if ((v9 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(void *)(a3 + 32) = *((void *)&v17.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_71;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
LABEL_71:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1B0364838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  *(void *)(v39 - 136) = &unk_1F08C3230;
  if (*(char *)(v39 - 97) < 0) {
    operator delete(*(void **)(v39 - 120));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  _Unwind_Resume(exception_object);
}

void ML3ProtoSyncArtistImportItem::getEffectiveAlbumArtist(ML3ProtoSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767105);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(void *)&long long v18 = &unk_1F08C3230;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string __str = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767107);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(void *)&long long v18 = &unk_1F08C3230;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v17 = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 301989889);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(void *)&long long v18 = &unk_1F08C3230;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v16 = v19;
  }
  int v7 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v18, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v18 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[0] = v16.__r_.__value_.__r.__words[2];
  }
  if (!v6)
  {
    uint64_t v8 = v19.__r_.__value_.__s.__data_[7];
    std::string::value_type v9 = v19.__r_.__value_.__s.__data_[7];
    uint64_t v10 = *((void *)&v18 + 1);
    if (v19.__r_.__value_.__s.__data_[7] >= 0) {
      uint64_t v11 = v19.__r_.__value_.__s.__data_[7];
    }
    else {
      uint64_t v11 = *((void *)&v18 + 1);
    }
    if (!v11)
    {
      std::string::operator=((std::string *)&v18, &__str);
      uint64_t v8 = v19.__r_.__value_.__s.__data_[7];
      uint64_t v10 = *((void *)&v18 + 1);
      std::string::value_type v9 = v19.__r_.__value_.__s.__data_[7];
    }
    if (v9 < 0) {
      uint64_t v8 = v10;
    }
    if (!v8) {
      std::string::operator=((std::string *)&v18, &v17);
    }
  }
  uint64_t v12 = v19.__r_.__value_.__s.__data_[7];
  std::string::value_type v13 = v19.__r_.__value_.__s.__data_[7];
  if (v19.__r_.__value_.__s.__data_[7] < 0) {
    uint64_t v12 = *((void *)&v18 + 1);
  }
  if (v12 && a2)
  {
    ML3CPPSanitizeString(&v15, (uint64_t)&v18);
    if (v19.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v18);
    }
    v19.__r_.__value_.__r.__words[0] = v15.__r_.__value_.__r.__words[2];
    long long v18 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    std::string::value_type v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  std::string::size_type v14 = (std::string *)(a3 + 16);
  if ((v13 & 0x80) == 0)
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
    *(void *)(a3 + 32) = v19.__r_.__value_.__r.__words[0];
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  if ((v19.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  operator delete((void *)v18);
  if (v7 < 0) {
LABEL_38:
  }
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_39:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B0364CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  operator delete(__p);
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v31 - 57) < 0) {
    operator delete(*(void **)(v31 - 80));
  }
  _Unwind_Resume(a1);
}

id ML3ProtoSyncArtistImportItem::getDeduplicationPredicates(ML3ProtoSyncArtistImportItem *this)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v54 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v52 = @"sync_id";
  uint64_t v53 = this;
  int v2 = (void *)*((void *)this + 10);
  if (v2 || (int v2 = (void *)*((void *)this + 17)) != 0 || (int v2 = (void *)*((void *)this + 16)) != 0)
  {
    id v49 = [v2 libraryIdentifiers];
  }
  else
  {
    id v49 = 0;
  }
  if (!*((unsigned char *)this + 64))
  {
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id obj = v49;
    uint64_t v8 = [obj countByEnumeratingWithState:&v59 objects:v70 count:16];
    if (!v8) {
      goto LABEL_28;
    }
    uint64_t v9 = *(void *)v60;
    while (1)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v60 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v59 + 1) + 8 * i);
        uint64_t v12 = [v11 libraryName];
        uint64_t v13 = [v11 libraryId];
        if (v12)
        {
          std::string::size_type v14 = [*((id *)v53 + 9) libraryUID];
          int v15 = [v12 isEqualToString:v14];

          if (v15)
          {
            std::string v16 = +[ML3ComparisonPredicate predicateWithProperty:@"ROWID" equalToInt64:v13];
            [v54 addObject:v16];
          }
          else
          {
            long long v21 = [*((id *)v53 + 9) syncLibraryID];
            int v22 = [v12 isEqualToString:v21];

            if (!v22) {
              goto LABEL_26;
            }
            std::string v16 = +[ML3ComparisonPredicate predicateWithProperty:v52 equalToInt64:v13];
            [v54 addObject:v16];
          }
        }
        else
        {
          std::string v17 = (void *)MEMORY[0x1E4F1C978];
          std::string v16 = +[ML3ComparisonPredicate predicateWithProperty:v52 equalToInt64:v13];
          long long v18 = +[ML3ComparisonPredicate predicateWithProperty:@"ROWID" equalToInt64:v13];
          std::string v19 = objc_msgSend(v17, "arrayWithObjects:", v16, v18, 0);
          std::string v20 = +[ML3CompoundPredicate predicateMatchingPredicates:v19];
          [v54 addObject:v20];
        }
LABEL_26:
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v59 objects:v70 count:16];
      if (!v8) {
        goto LABEL_28;
      }
    }
  }
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v3 = v49;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v63 objects:v71 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v64;
    do
    {
      for (uint64_t j = 0; j != v4; ++j)
      {
        if (*(void *)v64 != v5) {
          objc_enumerationMutation(v3);
        }
        int v7 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", @"ROWID", [*(id *)(*((void *)&v63 + 1) + 8 * j) libraryId]);
        [v54 addObject:v7];
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v63 objects:v71 count:16];
    }
    while (v4);
  }
LABEL_28:

  if (!*((unsigned char *)v53 + 64))
  {
    id obja = @"store_id";
    std::string v23 = @"grouping_key";
    if (*((void *)v53 + 18) == 2) {
      uint64_t v24 = 318767111;
    }
    else {
      uint64_t v24 = 301989893;
    }
    uint64_t v25 = (*(uint64_t (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)v53 + 32))(v53, v24);
    memset(&v58, 0, sizeof(v58));
    uint64_t v26 = *((void *)v53 + 18);
    if (v26 == 7)
    {
      (*(void (**)(void *__return_ptr))(*(void *)v53 + 24))(v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v55[0] = &unk_1F08C3230;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string __str = __p;
      }
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      char v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        id v29 = ML3CPPBridgeString((const UInt8 *)&__str, 1);
        __int16 v30 = +[ML3ComparisonPredicate predicateWithProperty:@"cloud_universal_library_id" equalToValue:v29];
        [v54 addObject:v30];

        char v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if (v28 < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v26 = *((void *)v53 + 18);
    }
    if (v26 == 2)
    {
      (*(void (**)(void *__return_ptr))(*(void *)v53 + 24))(v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string __str = __p;
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      std::string v58 = __str;
      v55[0] = &unk_1F08C3230;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v31 = (*(uint64_t (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)v53 + 32))(v53, 16777217);
      if ((MLMediaTypeByStandardizingMediaType(v31) & 8) != 0) {
        goto LABEL_72;
      }
      (*(void (**)(void *__return_ptr))(*(void *)v53 + 24))(v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v55[0] = &unk_1F08C3230;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string __str = __p;
      }
      std::string::size_type v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      char v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v33 = __str.__r_.__value_.__l.__size_;
      }
      if (v33)
      {
        std::string::operator=(&v58, &__str);
        char v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if ((v34 & 0x80) == 0) {
        goto LABEL_72;
      }
      BOOL v32 = (void *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      (*(void (**)(void *__return_ptr))(*(void *)v53 + 152))(v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string __str = __p;
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      std::string v58 = __str;
      v55[0] = &unk_1F08C3230;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_72;
      }
      BOOL v32 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
LABEL_72:
    std::string::size_type v35 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v35 = v58.__r_.__value_.__l.__size_;
    }
    if (v35)
    {
      uint64_t v36 = (void *)*((void *)v53 + 9);
      id v37 = ML3CPPBridgeString((const UInt8 *)&v58, 1);
      long long v38 = [v36 groupingKeyForString:v37];
    }
    else
    {
      long long v38 = 0;
    }
    if (v25)
    {
      if ([v38 length])
      {
        uint64_t v39 = +[ML3ComparisonPredicate predicateWithProperty:obja equalToInt64:v25];
        v69[0] = v39;
        long long v40 = +[ML3ComparisonPredicate predicateWithProperty:v23 equalToValue:v38];
        v69[1] = v40;
        long long v41 = +[ML3ComparisonPredicate predicateWithProperty:v52 equalToInt64:0];
        v69[2] = v41;
        [MEMORY[0x1E4F1C978] arrayWithObjects:v69 count:3];
      }
      else
      {
        uint64_t v39 = +[ML3ComparisonPredicate predicateWithProperty:obja equalToInt64:v25];
        v68[0] = v39;
        long long v40 = +[ML3ComparisonPredicate predicateWithProperty:v23 value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
        v68[1] = v40;
        long long v41 = +[ML3ComparisonPredicate predicateWithProperty:v52 equalToInt64:0];
        v68[2] = v41;
        [MEMORY[0x1E4F1C978] arrayWithObjects:v68 count:3];
      uint32_t v42 = };
      uint64_t v43 = +[ML3CompoundPredicate predicateMatchingPredicates:v42];

      [v54 addObject:v43];
    }
    if ([v38 length])
    {
      uint64_t v44 = +[ML3ComparisonPredicate predicateWithProperty:v23 equalToValue:v38];
      v67[0] = v44;
      uint64_t v45 = +[ML3ComparisonPredicate predicateWithProperty:v52 equalToInt64:0];
      v67[1] = v45;
      id v46 = [MEMORY[0x1E4F1C978] arrayWithObjects:v67 count:2];
      id v47 = +[ML3CompoundPredicate predicateMatchingPredicates:v46];

      [v54 addObject:v47];
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
  }

  return v54;
}

void sub_1B0365864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, _Unwind_Exception *exception_object, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncArtistImportItem::getDescription(ML3ProtoSyncArtistImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
  if (*((void *)this + 18) == 2) {
    uint64_t v2 = 318767105;
  }
  else {
    uint64_t v2 = 301989889;
  }
  (*(void (**)(void *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(v27, this, v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v27[0] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v29 = __p;
  }
  if (*((void *)this + 18) == 2) {
    uint64_t v3 = 318767106;
  }
  else {
    uint64_t v3 = 301989890;
  }
  (*(void (**)(void *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(v27, this, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v27[0] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v26 = __p;
  }
  (*(void (**)(void *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(v27, this, 301989899);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v27[0] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v25 = __p;
  }
  if (*((void *)this + 18) == 2) {
    uint64_t v4 = 318767111;
  }
  else {
    uint64_t v4 = 301989893;
  }
  (*(void (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 32))(this, v4);
  if (*((void *)this + 11))
  {
    if (*((void *)this + 18) == 2) {
      uint64_t v5 = 167772176;
    }
    else {
      uint64_t v5 = 167772177;
    }
    (*(void (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(void *)this + 32))(this, v5);
  }
  else
  {
    [*((id *)this + 9) syncIdFromMultiverseId:*((void *)this + 10)];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"<ML3ProtoSyncArtistImportItem ", 30);
  *(_DWORD *)((char *)&v30[1] + *(void *)(v30[0] - 24)) = *(_DWORD *)((unsigned char *)&v30[1] + *(void *)(v30[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v6 = (void *)std::ostream::operator<<();
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" name=", 6);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v29;
  }
  else {
    uint64_t v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" artistType=", 12);
  uint64_t v11 = (void *)std::ostream::operator<<();
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" sortName=", 10);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v26;
  }
  else {
    uint64_t v13 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = v26.__r_.__value_.__l.__size_;
  }
  int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  std::string v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" cloudLibraryID=", 16);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v17 = &v25;
  }
  else {
    std::string v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = v25.__r_.__value_.__l.__size_;
  }
  std::string v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::string v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" storeID=", 9);
  *(_DWORD *)((char *)v20 + *(void *)(*v20 - 24) + 8) = *(_DWORD *)((unsigned char *)v20 + *(void *)(*v20 - 24) + 8) & 0xFFFFFFB5 | 2;
  long long v21 = (void *)std::ostream::operator<<();
  int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" syncID=", 8);
  *(_DWORD *)((char *)v22 + *(void *)(*v22 - 24) + 8) = *(_DWORD *)((unsigned char *)v22 + *(void *)(*v22 - 24) + 8) & 0xFFFFFFB5 | 2;
  std::string v23 = (void *)std::ostream::operator<<();
  LOBYTE(v27[0]) = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  std::stringbuf::str();
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  v30[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v30[1] = MEMORY[0x1E4FBA470] + 16;
  if (v31 < 0) {
    operator delete((void *)v30[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v32);
}

void sub_1B0366030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  std::ostringstream::~ostringstream((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncArtistImportItem::hasValue(ML3ProtoSyncArtistImportItem *this, int a2)
{
  uint64_t v4 = 0;
  if (a2 > 301989902)
  {
    switch(a2)
    {
      case 318767105:
        uint64_t v5 = (void *)*((void *)this + 16);
        if (!v5) {
          return 0;
        }
        goto LABEL_71;
      case 318767106:
        uint64_t v11 = (void *)*((void *)this + 16);
        if (!v11) {
          return 0;
        }
        goto LABEL_45;
      case 318767107:
        uint64_t v12 = (void *)*((void *)this + 14);
        if (v12 && [v12 hasSeries])
        {
          uint64_t v2 = [*((id *)this + 14) series];
          int v13 = 1;
          uint64_t v14 = 1;
          if ([v2 hasName]) {
            goto LABEL_67;
          }
        }
        else
        {
          int v13 = 0;
        }
        long long v21 = (void *)*((void *)this + 13);
        if (v21 && [v21 hasSeries])
        {
          int v22 = [*((id *)this + 13) series];
          uint64_t v14 = [v22 hasName];

          uint64_t v4 = v14;
          if (!v13) {
            return v4;
          }
        }
        else
        {
          uint64_t v14 = 0;
          uint64_t v4 = 0;
          if ((v13 & 1) == 0) {
            return v4;
          }
        }
LABEL_67:

        return v14;
      case 318767108:
        int v15 = (void *)*((void *)this + 14);
        if (v15 && [v15 hasSeries])
        {
          uint64_t v2 = [*((id *)this + 14) series];
          int v16 = 1;
          BOOL v17 = 1;
          if ([v2 hasSortName]) {
            goto LABEL_69;
          }
        }
        else
        {
          int v16 = 0;
        }
        std::string v23 = (void *)*((void *)this + 13);
        if (v23 && [v23 hasSeries])
        {
          uint64_t v24 = [*((id *)this + 13) series];
          std::string v25 = [v24 sortName];
          BOOL v17 = v25 != 0;

          uint64_t v4 = v17;
          if (!v16) {
            return v4;
          }
        }
        else
        {
          BOOL v17 = 0;
          uint64_t v4 = 0;
          if ((v16 & 1) == 0) {
            return v4;
          }
        }
LABEL_69:

        return v17;
      case 318767109:
      case 318767110:
        return v4;
      case 318767111:
        std::string::size_type v18 = (void *)*((void *)this + 16);
        if (!v18) {
          return 0;
        }
        goto LABEL_49;
      default:
        if (a2 == 301989903)
        {
          std::string v20 = (void *)*((void *)this + 17);
          if (!v20) {
            return 0;
          }
          return [v20 hasLikedState];
        }
        if (a2 != 301989904) {
          return v4;
        }
        uint64_t v10 = (void *)*((void *)this + 17);
        if (v10)
        {
          return [v10 hasLikedStateChangedDate];
        }
        break;
    }
    return 0;
  }
  if (a2 > 301989889)
  {
    switch(a2)
    {
      case 301989890:
        uint64_t v11 = (void *)*((void *)this + 17);
        if (!v11) {
          return 0;
        }
LABEL_45:
        return [v11 hasSortName];
      case 301989893:
        std::string::size_type v18 = (void *)*((void *)this + 17);
        if (!v18) {
          return 0;
        }
LABEL_49:
        return [v18 hasStoreId];
      case 301989899:
        uint64_t v8 = (void *)*((void *)this + 10);
        if (!v8)
        {
          uint64_t v8 = (void *)*((void *)this + 17);
          if (!v8) {
            return 0;
          }
        }
        return [v8 hasCloudUniversalLibraryId];
      default:
        return v4;
    }
  }
  if (a2 == 167772176)
  {
    std::string v19 = (void *)*((void *)this + 16);
    if (!v19) {
      return 0;
    }
LABEL_41:
    return [v19 hasPersistentId];
  }
  if (a2 == 167772177)
  {
    std::string v19 = (void *)*((void *)this + 17);
    if (!v19) {
      return 0;
    }
    goto LABEL_41;
  }
  if (a2 != 301989889) {
    return v4;
  }
  uint64_t v6 = (void *)*((void *)this + 14);
  if (v6)
  {
    if ([v6 hasArtist])
    {
      int v7 = [*((id *)this + 14) artist];
      uint64_t v4 = [v7 hasName];

      return v4;
    }
    return 0;
  }
  uint64_t v5 = (void *)*((void *)this + 17);
  if (!v5) {
    return 0;
  }
LABEL_71:

  return [v5 hasName];
}

void sub_1B03664F0(_Unwind_Exception *a1)
{
  if (v3) {
  _Unwind_Resume(a1);
  }
}

uint64_t ML3ProtoSyncArtistImportItem::getIntegerValue(ML3ProtoSyncArtistImportItem *this, int a2)
{
  uint64_t v3 = 0;
  if (a2 > 301989892)
  {
    if (a2 > 301989903)
    {
      if (a2 == 301989904)
      {
        int v13 = (void *)*((void *)this + 14);
        if (v13)
        {
          uint64_t v14 = [v13 artist];
          uint64_t v3 = [v14 likedStateChangedDate];
        }
        else
        {
          uint64_t v3 = 0;
        }
        int v16 = (void *)*((void *)this + 17);
        if (!v16) {
          return v3;
        }
        return [v16 likedStateChangedDate];
      }
      if (a2 != 318767111) {
        return v3;
      }
      uint64_t v8 = (void *)*((void *)this + 16);
      if (!v8) {
        return 0;
      }
    }
    else
    {
      if (a2 != 301989893)
      {
        if (a2 != 301989903) {
          return v3;
        }
        uint64_t v5 = (void *)*((void *)this + 14);
        if (!v5)
        {
          int v15 = (void *)*((void *)this + 17);
          if (v15) {
            return (int)[v15 likedState];
          }
          return 0;
        }
        uint64_t v6 = [v5 artist];
        uint64_t v3 = (int)[v6 likedState];
LABEL_25:

        return v3;
      }
      uint64_t v11 = (void *)*((void *)this + 14);
      if (v11)
      {
        uint64_t v6 = [v11 artist];
        uint64_t v3 = [v6 storeId];
        goto LABEL_25;
      }
      uint64_t v8 = (void *)*((void *)this + 17);
      if (!v8) {
        return 0;
      }
    }
    return [v8 storeId];
  }
  if (a2 <= 167772175)
  {
    if (a2 == 16777217)
    {
      uint64_t v9 = (void *)*((void *)this + 11);
      if (v9)
      {
        unsigned int v10 = [v9 mediaType] - 1;
        if (v10 <= 0xC) {
          return dword_1B04DD33C[v10];
        }
      }
    }
    else
    {
      if (a2 != 16777246) {
        return v3;
      }
      uint64_t v4 = (void *)*((void *)this + 15);
      if (v4) {
        return [v4 compilation];
      }
    }
    return 0;
  }
  if (a2 == 167772176)
  {
    int v7 = (void *)*((void *)this + 16);
    if (!v7) {
      return 0;
    }
  }
  else
  {
    if (a2 != 167772177) {
      return v3;
    }
    int v7 = (void *)*((void *)this + 17);
    if (!v7) {
      return 0;
    }
  }

  return [v7 persistentId];
}

void sub_1B036678C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ProtoSyncArtistImportItem::getStringValue(id *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 <= 318767104)
  {
    switch(a2)
    {
      case 301989889:
        if (this[14])
        {
          int v7 = [this[14] artist];
          uint64_t v8 = [v7 name];
          goto LABEL_26;
        }
        id v4 = this[17];
        if (!v4)
        {
LABEL_33:
          *(void *)a3 = &unk_1F08C3230;
          *(unsigned char *)(a3 + 8) = 0;
          *(void *)(a3 + 24) = 0;
          *(void *)(a3 + 32) = 0;
          *(void *)(a3 + 16) = 0;
          return;
        }
LABEL_29:
        uint64_t v9 = [v4 name];
        break;
      case 301989890:
        id v6 = this[17];
        if (!v6) {
          goto LABEL_33;
        }
LABEL_19:
        uint64_t v9 = [v6 sortName];
        break;
      case 301989899:
        if (this[10])
        {
          id v5 = this[10];
        }
        else
        {
          id v5 = this[17];
          if (!v5) {
            goto LABEL_33;
          }
        }
        uint64_t v9 = [v5 cloudUniversalLibraryId];
        break;
      default:
        goto LABEL_33;
    }
    uint64_t v12 = (void *)v9;
    if (v9) {
      goto LABEL_31;
    }
    goto LABEL_33;
  }
  switch(a2)
  {
    case 318767105:
      id v4 = this[16];
      if (!v4) {
        goto LABEL_33;
      }
      goto LABEL_29;
    case 318767106:
      id v6 = this[16];
      if (!v6) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 318767107:
      if (this[14])
      {
        int v7 = [this[14] series];
        uint64_t v8 = [v7 name];
        break;
      }
      id v10 = this[13];
      if (!v10) {
        goto LABEL_33;
      }
      int v7 = [v10 series];
      uint64_t v8 = [v7 name];
      break;
    case 318767108:
      if (this[14])
      {
        int v7 = [this[14] series];
        uint64_t v8 = [v7 sortName];
        break;
      }
      id v11 = this[13];
      if (!v11) {
        goto LABEL_33;
      }
      int v7 = [v11 series];
      uint64_t v8 = [v7 sortName];
      break;
    default:
      goto LABEL_33;
  }
LABEL_26:
  uint64_t v12 = (void *)v8;

  if (!v12) {
    goto LABEL_33;
  }
LABEL_31:
  id v13 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v13 UTF8String]);
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  uint64_t v14 = (std::string *)(a3 + 16);
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(void *)(a3 + 32) = v16;
  }
}

void sub_1B0366A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void ML3ProtoSyncArtistImportItem::~ML3ProtoSyncArtistImportItem(id *this)
{
  ML3ProtoSyncArtistImportItem::~ML3ProtoSyncArtistImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  uint64_t vars8;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
}

id ML3ProtoSyncAlbumArtistDeleteImportItem::getDeduplicationPredicates(id *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v19 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (!*((unsigned char *)this + 64))
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id obj = [this[10] libraryIdentifiers];
    uint64_t v2 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (!v2) {
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)v21;
    while (1)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v21 != v3) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v6 = [v5 libraryName];
        uint64_t v7 = [v5 libraryId];
        if (v6)
        {
          uint64_t v8 = [this[9] libraryUID];
          int v9 = [v6 isEqualToString:v8];

          if (v9)
          {
            id v10 = +[ML3ComparisonPredicate predicateWithProperty:@"album_artist_pid" equalToInt64:v7];
            [v19 addObject:v10];
          }
          else
          {
            int v15 = [this[9] syncLibraryID];
            int v16 = [v6 isEqualToString:v15];

            if (!v16) {
              goto LABEL_14;
            }
            id v10 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:v7];
            [v19 addObject:v10];
          }
        }
        else
        {
          id v11 = (void *)MEMORY[0x1E4F1C978];
          id v10 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:v7];
          uint64_t v12 = +[ML3ComparisonPredicate predicateWithProperty:@"ROWID" equalToInt64:v7];
          id v13 = objc_msgSend(v11, "arrayWithObjects:", v10, v12, 0);
          uint64_t v14 = +[ML3CompoundPredicate predicateMatchingPredicates:v13];
          [v19 addObject:v14];
        }
LABEL_14:
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (!v2)
      {
LABEL_16:

        break;
      }
    }
  }

  return v19;
}

void sub_1B0366DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncAlbumArtistDeleteImportItem::getDescription(ML3ProtoSyncAlbumArtistDeleteImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"<ML3ProtoSyncAlbumArtistDeleteImportItem ", 41);
  *(_DWORD *)((char *)&v3[1] + *(void *)(v3[0] - 24)) = *(_DWORD *)((unsigned char *)&v3[1] + *(void *)(v3[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (void *)std::ostream::operator<<();
  char v6 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v5);
}

void sub_1B0366FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ML3ProtoSyncAlbumArtistDeleteImportItem::~ML3ProtoSyncAlbumArtistDeleteImportItem(id *this)
{
  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);

  JUMPOUT(0x1B3E93610);
}

void ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(ML3ProtoSyncImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, char a4)
{
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  *((_WORD *)this + 8) = 256;
  *((unsigned char *)this + 18) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *(void *)this = &unk_1F08C3C78;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 64) = a4;
  *((void *)this + 9) = v7;
  *((void *)this + 10) = v8;
}

void ML3ProtoSyncTrackImportItem::ML3ProtoSyncTrackImportItem(ML3ProtoSyncTrackImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, MIPMediaItem *a4, char a5)
{
  int v9 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(this, a2, a3, a5);
  *(void *)this = &unk_1F08C4D20;
  id v10 = v9;
  *((void *)this + 11) = v10;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  uint64_t v11 = [(MIPMediaItem *)v10 song];
  uint64_t v12 = (void *)*((void *)this + 12);
  *((void *)this + 12) = v11;

  uint64_t v13 = [*((id *)this + 11) movie];
  uint64_t v14 = (void *)*((void *)this + 13);
  *((void *)this + 13) = v13;

  uint64_t v15 = [*((id *)this + 11) tvShow];
  int v16 = (void *)*((void *)this + 14);
  *((void *)this + 14) = v15;

  uint64_t v17 = [*((id *)this + 11) podcast];
  std::string::size_type v18 = (void *)*((void *)this + 15);
  *((void *)this + 15) = v17;

  uint64_t v19 = [*((id *)this + 11) audiobook];
  long long v20 = (void *)*((void *)this + 16);
  *((void *)this + 16) = v19;

  long long v21 = (void *)*((void *)this + 12);
  if (v21 || (long long v21 = (void *)*((void *)this + 16)) != 0)
  {
    long long v21 = [v21 album];
  }
  long long v22 = (void *)*((void *)this + 17);
  *((void *)this + 17) = v21;

  long long v23 = (void *)*((void *)this + 12);
  if (v23
    || (long long v23 = (void *)*((void *)this + 13)) != 0
    || (long long v23 = (void *)*((void *)this + 14)) != 0
    || (long long v23 = (void *)*((void *)this + 15)) != 0
    || (long long v23 = (void *)*((void *)this + 16)) != 0)
  {
    long long v23 = [v23 artist];
  }
  uint64_t v24 = (void *)*((void *)this + 18);
  *((void *)this + 18) = v23;

  uint64_t v25 = (void *)*((void *)this + 12);
  if (v25 || (uint64_t v25 = (void *)*((void *)this + 16)) != 0)
  {
    uint64_t v25 = [v25 composer];
  }
  std::string v26 = (void *)*((void *)this + 19);
  *((void *)this + 19) = v25;

  int v27 = (void *)*((void *)this + 12);
  if (v27 || (int v27 = (void *)*((void *)this + 16)) != 0)
  {
    int v27 = [v27 playbackInfo];
  }
  char v28 = (void *)*((void *)this + 21);
  *((void *)this + 21) = v27;

  std::string v29 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;

  __int16 v30 = (void *)*((void *)this + 12);
  if (v30
    || (__int16 v30 = (void *)*((void *)this + 16)) != 0
    || (__int16 v30 = (void *)*((void *)this + 13)) != 0
    || (__int16 v30 = (void *)*((void *)this + 14)) != 0)
  {
    uint64_t v31 = [v30 genre];
    uint64_t v32 = (void *)*((void *)this + 20);
    *((void *)this + 20) = v31;
  }
}

void sub_1B036730C(_Unwind_Exception *a1)
{
  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(v1);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerImportItem::ML3ProtoSyncContainerImportItem(ML3ProtoSyncContainerImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, MIPPlaylist *a4, char a5)
{
  int v9 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(this, a2, a3, a5);
  *(void *)this = &unk_1F08C5C00;
  id v10 = v9;
  *((void *)this + 11) = v10;
  *((void *)this + 12) = 0;
  *((void *)this + 1) = [*((id *)this + 9) syncIdFromMultiverseId:*((void *)this + 10)];
  uint64_t v11 = [*((id *)this + 11) smartPlaylistInfo];
  uint64_t v12 = (void *)*((void *)this + 12);
  *((void *)this + 12) = v11;
}

void sub_1B0367444(_Unwind_Exception *a1)
{
  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(v1);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncAlbumImportItem::ML3ProtoSyncAlbumImportItem(ML3ProtoSyncAlbumImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, MIPMediaItem *a4, char a5)
{
  int v9 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(this, a2, a3, a5);
  *(void *)this = &unk_1F08C4C38;
  id v10 = v9;
  *((_OWORD *)this + 6) = 0u;
  uint64_t v11 = (id *)((char *)this + 96);
  *((void *)this + 11) = v10;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  uint64_t v12 = [(MIPMediaItem *)v10 song];
  uint64_t v13 = (void *)*((void *)this + 12);
  *((void *)this + 12) = v12;

  uint64_t v14 = [*((id *)this + 11) tvShow];
  uint64_t v15 = (void *)*((void *)this + 13);
  *((void *)this + 13) = v14;

  uint64_t v16 = [*((id *)this + 11) podcast];
  uint64_t v17 = (void *)*((void *)this + 14);
  *((void *)this + 14) = v16;

  std::string::size_type v18 = (void *)*((void *)this + 12);
  if (v18)
  {
    uint64_t v19 = [v18 album];
    long long v20 = (void *)*((void *)this + 15);
    *((void *)this + 15) = v19;
  }
  else
  {
    long long v20 = [*((id *)this + 11) audiobook];
    if (v20)
    {
      long long v21 = [*((id *)this + 11) audiobook];
      uint64_t v22 = [v21 album];
      long long v23 = (void *)*((void *)this + 15);
      *((void *)this + 15) = v22;
    }
    else
    {
      long long v21 = (void *)*((void *)this + 15);
      *((void *)this + 15) = 0;
    }
  }
  if (*v11)
  {
    uint64_t v24 = [*v11 artist];
    uint64_t v25 = (void *)*((void *)this + 16);
    *((void *)this + 16) = v24;
  }
  else
  {
    uint64_t v25 = [*((id *)this + 11) movie];
    if (v25)
    {
      std::string v26 = [*((id *)this + 11) movie];
      uint64_t v27 = [v26 artist];
      char v28 = (void *)*((void *)this + 16);
      *((void *)this + 16) = v27;
    }
    else
    {
      std::string v29 = (void *)*((void *)this + 13);
      if (v29 || (std::string v29 = (void *)*((void *)this + 14)) != 0)
      {
        uint64_t v30 = [v29 artist];
        std::string v26 = (void *)*((void *)this + 16);
        *((void *)this + 16) = v30;
      }
      else
      {
        std::string v26 = [*((id *)this + 11) audiobook];
        if (v26)
        {
          uint64_t v31 = [*((id *)this + 11) audiobook];
          uint64_t v32 = [v31 artist];
          std::string::size_type v33 = (void *)*((void *)this + 16);
          *((void *)this + 16) = v32;
        }
        else
        {
          uint64_t v31 = (void *)*((void *)this + 16);
          *((void *)this + 16) = 0;
        }
      }
    }
  }
}

void sub_1B036768C(_Unwind_Exception *a1)
{
  char v6 = v4;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(v1);
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncArtistImportItem::ML3ProtoSyncArtistImportItem(uint64_t a1, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, void *a4, uint64_t a5, char a6)
{
  id v11 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem((ML3ProtoSyncImportItem *)a1, a2, a3, a6);
  *(void *)a1 = &unk_1F08C51B8;
  id v12 = v11;
  *(void *)(a1 + 88) = v12;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = a5;
  uint64_t v13 = [v12 song];
  uint64_t v14 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v13;

  uint64_t v15 = [*(id *)(a1 + 88) tvShow];
  uint64_t v16 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v15;

  uint64_t v17 = [*(id *)(a1 + 88) podcast];
  std::string::size_type v18 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v17;

  uint64_t v19 = *(void **)(a1 + 96);
  if (v19)
  {
    uint64_t v20 = [v19 album];
    long long v21 = *(void **)(a1 + 120);
    *(void *)(a1 + 120) = v20;
  }
  else
  {
    long long v21 = [*(id *)(a1 + 88) audiobook];
    if (v21)
    {
      uint64_t v22 = [*(id *)(a1 + 88) audiobook];
      uint64_t v23 = [v22 album];
      uint64_t v24 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v23;
    }
    else
    {
      uint64_t v22 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = 0;
    }
  }
  uint64_t v25 = [*(id *)(a1 + 120) artist];
  std::string v26 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v25;

  uint64_t v27 = *(void **)(a1 + 96);
  if (v27)
  {
    uint64_t v28 = [v27 artist];
    std::string v29 = *(void **)(a1 + 128);
    *(void *)(a1 + 128) = v28;
  }
  else
  {
    std::string v29 = [*(id *)(a1 + 88) movie];
    if (v29)
    {
      uint64_t v30 = [*(id *)(a1 + 88) movie];
      uint64_t v31 = [v30 artist];
      uint64_t v32 = *(void **)(a1 + 128);
      *(void *)(a1 + 128) = v31;
    }
    else
    {
      std::string::size_type v33 = *(void **)(a1 + 104);
      if (v33 || (std::string::size_type v33 = *(void **)(a1 + 112)) != 0)
      {
        uint64_t v34 = [v33 artist];
        uint64_t v30 = *(void **)(a1 + 128);
        *(void *)(a1 + 128) = v34;
      }
      else
      {
        uint64_t v30 = [*(id *)(a1 + 88) audiobook];
        if (v30)
        {
          uint64_t v36 = [*(id *)(a1 + 88) audiobook];
          uint64_t v37 = [v36 artist];
          long long v38 = *(void **)(a1 + 128);
          *(void *)(a1 + 128) = v37;
        }
        else
        {
          uint64_t v36 = *(void **)(a1 + 128);
          *(void *)(a1 + 128) = 0;
        }
      }
    }
  }
  return a1;
}

void sub_1B0367954(_Unwind_Exception *a1)
{
  char v6 = v4;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(v1);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncArtistImportItem::ML3ProtoSyncArtistImportItem(ML3ProtoSyncArtistImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, MIPArtist *a4, char a5)
{
  int v9 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(this, a2, a3, a5);
  *(void *)this = &unk_1F08C51B8;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = v9;
  *((void *)this + 18) = 7;
}

void sub_1B0367AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0367B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0367C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0367E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0367FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B0368370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,void *a38)
{
  _Unwind_Resume(a1);
}

void sub_1B0368594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0368718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B0368870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0368940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B0368DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5004(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5005(uint64_t a1)
{
}

void sub_1B0368ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  id v12 = operator new(0x18uLL);
  *id v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *id v12 = *v20;
LABEL_38:
    *uint64_t v20 = v12;
    goto LABEL_39;
  }
  *id v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1B036914C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_104c75_ZTSNSt3__113unordered_setIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEEE152c75_ZTSNSt3__113unordered_setIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 104;
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 152);

  return std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
}

uint64_t __copy_helper_block_ea8_104c75_ZTSNSt3__113unordered_setIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEEE152c75_ZTSNSt3__113unordered_setIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_set<int>::unordered_set(a1 + 152, a2 + 152);
}

void sub_1B03691E4(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void sub_1B0369360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B0369444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B03696B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0369870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0369944(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1B0369AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B0369C48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1B0369DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B0369F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B036A010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036A0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036A130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036A37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B036A5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B036A7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036A904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036A9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036AA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036AB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036AC30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036ACFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036ADB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036AEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B036B828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5194(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5195(uint64_t a1)
{
}

void ML3ImportItem::logPropertiesToStream(uint64_t a1, int a2, void *a3)
{
  uint64_t Count = ML3TrackRulesGetCount(a2);
  if (Count)
  {
    uint64_t v7 = Count;
    uint64_t v8 = 0;
    int v9 = a3 + 1;
    do
    {
      uint64_t v10 = *(unsigned int *)(ML3TrackRulesGetRule(a2, v8) + 48);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, v10))
      {
        unint64_t v11 = ML3TrackRulesGetPropertyName(a2, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"    ", 4);
        id v12 = v11;
        uint64_t v13 = (const char *)[v12 UTF8String];
        size_t v14 = strlen(v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" : ", 3);
        switch(*(void *)(ML3TrackRulesGetRule(a2, v8) + 40))
        {
          case 1:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"<null>", 6);
            break;
          case 2:
            *(_DWORD *)((char *)v9 + *(void *)(*a3 - 24)) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*a3 - 24)) & 0xFFFFFFB5 | 2;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v10);
            std::ostream::operator<<();
            break;
          case 3:
            *(_DWORD *)((char *)v9 + *(void *)(*a3 - 24)) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*a3 - 24)) & 0xFFFFFFB5 | 2;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v10);
            std::ostream::operator<<();
            break;
          case 4:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"'", 1);
            (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 24))(&v18, a1, v10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else {
              std::string v21 = __p;
            }
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v16 = &v21;
            }
            else {
              unint64_t v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
            }
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v21.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v16, size);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"'", 1);
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v21.__r_.__value_.__l.__data_);
            }
            size_t v18 = &unk_1F08C3230;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            break;
          case 5:
            (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 48))(&v18, a1, v10);
            if (v18)
            {
              *(_DWORD *)((char *)v9 + *(void *)(*a3 - 24)) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*a3 - 24)) & 0xFFFFFFB5 | 2;
              BOOL v15 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" bytes : ", 9);
            }
            if (v19) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
            break;
          default:
            break;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"\n", 1);
      }
      ++v8;
    }
    while (v7 != v8);
  }
}

void sub_1B036C048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ImportItem::propertyKeyForSortPropertyKey(ML3ImportItem *this, int a2)
{
  switch(a2)
  {
    case 167772167:
      uint64_t result = 167772161;
      break;
    case 167772168:
      uint64_t result = 167772162;
      break;
    case 167772169:
      uint64_t result = 167772163;
      break;
    case 167772170:
      uint64_t result = 167772164;
      break;
    case 167772171:
      uint64_t result = 167772165;
      break;
    default:
      if (a2 == 33554434) {
        uint64_t result = 33554433;
      }
      else {
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t ML3ImportItem::sortPropertyKeyForPropertyKey(ML3ImportItem *this, int a2)
{
  switch(a2)
  {
    case 167772161:
      uint64_t result = 167772167;
      break;
    case 167772162:
      uint64_t result = 167772168;
      break;
    case 167772163:
      uint64_t result = 167772169;
      break;
    case 167772164:
      uint64_t result = 167772170;
      break;
    case 167772165:
      uint64_t result = 167772171;
      break;
    default:
      if (a2 == 33554433) {
        uint64_t result = 33554434;
      }
      else {
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

void ML3ImportItem::getEffectiveSortAlbum(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 24))(&v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v16 = v15;
  }
  (*(void (**)(long long *__return_ptr, ML3ImportItem *, uint64_t))(*(void *)this + 24))(&v14, this, 167772170);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v13 = v15;
  }
  int v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  std::string::size_type v7 = v15.__r_.__value_.__s.__data_[7];
  int v8 = v15.__r_.__value_.__s.__data_[7];
  std::string::size_type size = *((void *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0) {
    uint64_t v10 = v15.__r_.__value_.__s.__data_[7];
  }
  else {
    uint64_t v10 = *((void *)&v14 + 1);
  }
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    std::string::size_type v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v7 = size;
  }
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (uint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  unint64_t v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(void *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0) {
LABEL_31:
  }
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1B036C4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v27 < 0) {
    operator delete(a13);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ML3ImportItem::getEffectiveSortSeriesName(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 24))(&v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v16 = v15;
  }
  (*(void (**)(long long *__return_ptr, ML3ImportItem *, uint64_t))(*(void *)this + 24))(&v14, this, 167772168);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v13 = v15;
  }
  int v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  std::string::size_type v7 = v15.__r_.__value_.__s.__data_[7];
  int v8 = v15.__r_.__value_.__s.__data_[7];
  std::string::size_type size = *((void *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0) {
    uint64_t v10 = v15.__r_.__value_.__s.__data_[7];
  }
  else {
    uint64_t v10 = *((void *)&v14 + 1);
  }
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    std::string::size_type v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v7 = size;
  }
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (uint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  unint64_t v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(void *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0) {
LABEL_31:
  }
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1B036C818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v27 < 0) {
    operator delete(a13);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ML3ImportItem::getEffectiveSortArtist(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 24))(&v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v16 = v15;
  }
  (*(void (**)(long long *__return_ptr, ML3ImportItem *, uint64_t))(*(void *)this + 24))(&v14, this, 167772167);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v13 = v15;
  }
  int v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  std::string::size_type v7 = v15.__r_.__value_.__s.__data_[7];
  int v8 = v15.__r_.__value_.__s.__data_[7];
  std::string::size_type size = *((void *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0) {
    uint64_t v10 = v15.__r_.__value_.__s.__data_[7];
  }
  else {
    uint64_t v10 = *((void *)&v14 + 1);
  }
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    std::string::size_type v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v7 = size;
  }
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (uint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  unint64_t v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(void *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0) {
LABEL_31:
  }
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1B036CB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v27 < 0) {
    operator delete(a13);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ML3ImportItem::getEffectiveSortAlbumArtist(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 167772163);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v23 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 167772161);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v20 = v22;
  }
  uint64_t v6 = (*(uint64_t (**)(ML3ImportItem *, uint64_t))(*(void *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 167772169);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v19 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 167772167);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v18 = v22;
  }
  int v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v19;
  }
  std::string::size_type v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::value_type v9 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v8 = v17.__r_.__value_.__l.__size_;
  }
  if (v8)
  {
    if (v6) {
      goto LABEL_56;
    }
    goto LABEL_28;
  }
  ML3CPPSortableString((std::string *)&v21, (const UInt8 *)&v23);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
  std::string::value_type v9 = v22.__r_.__value_.__s.__data_[7];
  std::string::size_type size = *((void *)&v21 + 1);
  if (!v6)
  {
LABEL_28:
    if (v9 >= 0) {
      std::string::size_type v11 = v9;
    }
    else {
      std::string::size_type v11 = size;
    }
    if (!v11)
    {
      std::string::size_type v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v12 = v23.__r_.__value_.__l.__size_;
      }
      if (!v12)
      {
        (*(void (**)(long long *__return_ptr, ML3ImportItem *, void))(*(void *)this + 168))(&v21, this, 0);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        }
        else {
          std::string v16 = v22;
        }
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        std::string v17 = v16;
        *(void *)&long long v21 = &unk_1F08C3230;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        std::string::size_type v13 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        std::string::value_type v9 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v13 = v17.__r_.__value_.__l.__size_;
        }
        if (!v13)
        {
          std::string::size_type v14 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v14 = v20.__r_.__value_.__l.__size_;
          }
          if (!v14)
          {
            (*(void (**)(long long *__return_ptr, ML3ImportItem *, void))(*(void *)this + 176))(&v21, this, 0);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
            }
            else {
              std::string v16 = v22;
            }
            if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v17.__r_.__value_.__l.__data_);
            }
            std::string v17 = v16;
            *(void *)&long long v21 = &unk_1F08C3230;
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v22.__r_.__value_.__l.__data_);
            }
            std::string::value_type v9 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
            std::string::size_type size = v17.__r_.__value_.__l.__size_;
          }
        }
      }
    }
  }
LABEL_56:
  if (v9 >= 0) {
    std::string::size_type size = v9;
  }
  if (size && a2)
  {
    ML3CPPSanitizeString((std::string *)&v21, (uint64_t)&v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
    std::string::value_type v9 = v22.__r_.__value_.__s.__data_[7];
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  std::string v15 = (std::string *)(a3 + 16);
  if (v9 < 0)
  {
    std::string::__init_copy_ctor_external(v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(void *)(a3 + 32) = *((void *)&v17.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_69;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_69;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
LABEL_69:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1B036D18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  *(void *)(v40 - 136) = &unk_1F08C3230;
  if (*(char *)(v40 - 97) < 0) {
    operator delete(*(void **)(v40 - 120));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (v39 < 0) {
    operator delete(a27);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v40 - 73) < 0) {
    operator delete(*(void **)(v40 - 96));
  }
  _Unwind_Resume(exception_object);
}

std::string *ML3ImportItem::getSanitizedStringValue(ML3ImportItem *this, uint64_t a2, uint64_t a3)
{
  int v4 = a3;
  *(void *)this = &unk_1F08C3230;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = 0;
  int v7 = (std::string *)((char *)this + 16);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  unint64_t v8 = a3;
  unint64_t v9 = *(void *)(a2 + 32);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = a3;
      if (v9 <= a3) {
        unint64_t v11 = a3 % v9;
      }
    }
    else
    {
      unint64_t v11 = (v9 - 1) & a3;
    }
    std::string::size_type v12 = *(uint64_t ***)(*(void *)(a2 + 24) + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == a3)
        {
          if (*((_DWORD *)i + 4) == a3)
          {
            *((unsigned char *)this + 8) = *((unsigned char *)i + 32);
            uint64_t v43 = (const std::string *)(i + 5);
            uint64_t v44 = (std::string *)((char *)this + 16);
            return std::string::operator=(v44, v43);
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 24))(&__str, a2, a3);
  *((unsigned char *)this + 8) = __str.__r_.__value_.__s.__data_[8];
  std::string::operator=(v7, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F08C3230;
  if (v48 < 0) {
    operator delete((void *)__str.__r_.__value_.__r.__words[2]);
  }
  if (*((unsigned char *)this + 8))
  {
    if (*((char *)this + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 2), *((void *)this + 3));
    }
    else {
      std::string __p = *v7;
    }
    ML3CPPSanitizeString(&__str, (uint64_t)&__p);
    std::string::operator=(v7, &__str);
    *((unsigned char *)this + 8) = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v15 = *(void *)(a2 + 32);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v15 <= v8) {
        unint64_t v3 = v8 % v15;
      }
    }
    else
    {
      unint64_t v3 = (v15 - 1) & v8;
    }
    std::string v17 = *(void ***)(*(void *)(a2 + 24) + 8 * v3);
    if (v17)
    {
      std::string v18 = (char *)*v17;
      if (*v17)
      {
        do
        {
          unint64_t v19 = *((void *)v18 + 1);
          if (v19 == v8)
          {
            if (*((_DWORD *)v18 + 4) == v4) {
              goto LABEL_100;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v15) {
                v19 %= v15;
              }
            }
            else
            {
              v19 &= v15 - 1;
            }
            if (v19 != v3) {
              break;
            }
          }
          std::string v18 = *(char **)v18;
        }
        while (v18);
      }
    }
  }
  std::string v18 = (char *)operator new(0x40uLL);
  std::string v20 = (void *)(a2 + 40);
  *(void *)std::string v18 = 0;
  *((void *)v18 + 1) = v8;
  *((_DWORD *)v18 + 4) = v4;
  *((void *)v18 + 3) = &unk_1F08C3230;
  v18[32] = 0;
  *((void *)v18 + 6) = 0;
  *((void *)v18 + 7) = 0;
  *((void *)v18 + 5) = 0;
  float v21 = (float)(unint64_t)(*(void *)(a2 + 48) + 1);
  float v22 = *(float *)(a2 + 56);
  if (v15 && (float)(v22 * (float)v15) >= v21)
  {
    unint64_t v8 = v3;
    goto LABEL_90;
  }
  BOOL v23 = 1;
  if (v15 >= 3) {
    BOOL v23 = (v15 & (v15 - 1)) != 0;
  }
  unint64_t v24 = v23 | (2 * v15);
  unint64_t v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25) {
    int8x8_t prime = (int8x8_t)v25;
  }
  else {
    int8x8_t prime = (int8x8_t)v24;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v15 = *(void *)(a2 + 32);
  }
  if (*(void *)&prime <= v15)
  {
    if (*(void *)&prime >= v15) {
      goto LABEL_86;
    }
    unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 48) / *(float *)(a2 + 56));
    if (v15 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      unint64_t v33 = std::__next_prime(v33);
    }
    else
    {
      uint64_t v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2) {
        unint64_t v33 = v35;
      }
    }
    if (*(void *)&prime <= v33) {
      int8x8_t prime = (int8x8_t)v33;
    }
    if (*(void *)&prime >= v15)
    {
      unint64_t v15 = *(void *)(a2 + 32);
      goto LABEL_86;
    }
    if (!*(void *)&prime)
    {
      uint64_t v45 = *(void **)(a2 + 24);
      *(void *)(a2 + 24) = 0;
      if (v45) {
        operator delete(v45);
      }
      unint64_t v15 = 0;
      *(void *)(a2 + 32) = 0;
      goto LABEL_86;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v27 = operator new(8 * *(void *)&prime);
  uint64_t v28 = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v27;
  if (v28) {
    operator delete(v28);
  }
  uint64_t v29 = 0;
  *(int8x8_t *)(a2 + 32) = prime;
  do
    *(void *)(*(void *)(a2 + 24) + 8 * v29++) = 0;
  while (*(void *)&prime != v29);
  uint64_t v30 = (void *)*v20;
  if (*v20)
  {
    unint64_t v31 = v30[1];
    uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      if (v31 >= *(void *)&prime) {
        v31 %= *(void *)&prime;
      }
    }
    else
    {
      v31 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)(a2 + 24) + 8 * v31) = v20;
    uint64_t v36 = (void *)*v30;
    if (*v30)
    {
      do
      {
        unint64_t v37 = v36[1];
        if (v32.u32[0] > 1uLL)
        {
          if (v37 >= *(void *)&prime) {
            v37 %= *(void *)&prime;
          }
        }
        else
        {
          v37 &= *(void *)&prime - 1;
        }
        if (v37 != v31)
        {
          uint64_t v38 = *(void *)(a2 + 24);
          if (!*(void *)(v38 + 8 * v37))
          {
            *(void *)(v38 + 8 * v37) = v30;
            goto LABEL_82;
          }
          void *v30 = *v36;
          void *v36 = **(void **)(*(void *)(a2 + 24) + 8 * v37);
          **(void **)(*(void *)(a2 + 24) + 8 * v37) = v36;
          uint64_t v36 = v30;
        }
        unint64_t v37 = v31;
LABEL_82:
        uint64_t v30 = v36;
        uint64_t v36 = (void *)*v36;
        unint64_t v31 = v37;
      }
      while (v36);
    }
  }
  unint64_t v15 = (unint64_t)prime;
LABEL_86:
  if ((v15 & (v15 - 1)) != 0)
  {
    if (v15 <= v8) {
      v8 %= v15;
    }
  }
  else
  {
    unint64_t v8 = (v15 - 1) & v8;
  }
LABEL_90:
  uint64_t v39 = *(void *)(a2 + 24);
  uint64_t v40 = *(void **)(v39 + 8 * v8);
  if (v40)
  {
    *(void *)std::string v18 = *v40;
  }
  else
  {
    *(void *)std::string v18 = *v20;
    *std::string v20 = v18;
    *(void *)(v39 + 8 * v8) = v20;
    if (!*(void *)v18) {
      goto LABEL_99;
    }
    unint64_t v41 = *(void *)(*(void *)v18 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v41 >= v15) {
        v41 %= v15;
      }
    }
    else
    {
      v41 &= v15 - 1;
    }
    uint64_t v40 = (void *)(*(void *)(a2 + 24) + 8 * v41);
  }
  void *v40 = v18;
LABEL_99:
  ++*(void *)(a2 + 48);
LABEL_100:
  v18[32] = *((unsigned char *)this + 8);
  uint64_t v44 = (std::string *)(v18 + 40);
  uint64_t v43 = v7;
  return std::string::operator=(v44, v43);
}

void sub_1B036D928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  *(void *)uint64_t v25 = v26;
  if (*(char *)(v25 + 39) < 0) {
    operator delete(*v27);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  if (a1)
  {
    *((void *)__p + 3) = &unk_1F08C3230;
    if (__p[63] < 0) {
      operator delete(*((void **)__p + 5));
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void ML3ImportItem::getEffectiveAlbumArtist(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 167772163);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(void *)&long long v18 = &unk_1F08C3230;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v20 = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 167772161);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(void *)&long long v18 = &unk_1F08C3230;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string __str = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 167772162);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(void *)&long long v18 = &unk_1F08C3230;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v16 = v19;
  }
  uint64_t v6 = (*(uint64_t (**)(ML3ImportItem *, uint64_t))(*(void *)this + 32))(this, 16777246);
  int v7 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v18, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v18 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[0] = v20.__r_.__value_.__r.__words[2];
  }
  if (!v6)
  {
    uint64_t v8 = v19.__r_.__value_.__s.__data_[7];
    std::string::value_type v9 = v19.__r_.__value_.__s.__data_[7];
    uint64_t v10 = *((void *)&v18 + 1);
    if (v19.__r_.__value_.__s.__data_[7] >= 0) {
      uint64_t v11 = v19.__r_.__value_.__s.__data_[7];
    }
    else {
      uint64_t v11 = *((void *)&v18 + 1);
    }
    if (!v11)
    {
      std::string::operator=((std::string *)&v18, &__str);
      uint64_t v8 = v19.__r_.__value_.__s.__data_[7];
      uint64_t v10 = *((void *)&v18 + 1);
      std::string::value_type v9 = v19.__r_.__value_.__s.__data_[7];
    }
    if (v9 < 0) {
      uint64_t v8 = v10;
    }
    if (!v8) {
      std::string::operator=((std::string *)&v18, &v16);
    }
  }
  uint64_t v12 = v19.__r_.__value_.__s.__data_[7];
  std::string::value_type v13 = v19.__r_.__value_.__s.__data_[7];
  if (v19.__r_.__value_.__s.__data_[7] < 0) {
    uint64_t v12 = *((void *)&v18 + 1);
  }
  if (v12 && a2)
  {
    ML3CPPSanitizeString(&v15, (uint64_t)&v18);
    if (v19.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v18);
    }
    v19.__r_.__value_.__r.__words[0] = v15.__r_.__value_.__r.__words[2];
    long long v18 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    std::string::value_type v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  unint64_t v14 = (std::string *)(a3 + 16);
  if (v13 < 0)
  {
    std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
    if (v19.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v18);
    }
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
    *(void *)(a3 + 32) = v19.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_43:
    operator delete(v20.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (v7 < 0) {
    goto LABEL_43;
  }
}

void sub_1B036DD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (*(char *)(v34 - 57) < 0) {
    operator delete(*(void **)(v34 - 80));
  }
  _Unwind_Resume(exception_object);
}

void ML3ImportItem::getSortStringValue(ML3ImportItem *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = &unk_1F08C3230;
  *(unsigned char *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v8 = (std::string *)(a4 + 16);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  uint64_t v9 = (*(uint64_t (**)(ML3ImportItem *))(*(void *)this + 192))(this);
  if (v9)
  {
    if (a3) {
      ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&__str, (uint64_t)this, v9);
    }
    else {
      (*(void (**)(std::string *__return_ptr, ML3ImportItem *, uint64_t))(*(void *)this + 24))(&__str, this, v9);
    }
    *(unsigned char *)(a4 + 8) = __str.__r_.__value_.__s.__data_[8];
    std::string::operator=(v8, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F08C3230;
    if (v14 < 0) {
      operator delete((void *)__str.__r_.__value_.__r.__words[2]);
    }
  }
  if (*(unsigned char *)(a4 + 8))
  {
    if (*(char *)(a4 + 39) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a4 + 16), *(void *)(a4 + 24));
    }
    else {
      std::string __str = *v8;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (size) {
        return;
      }
    }
    else if (size)
    {
      return;
    }
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&__str, (uint64_t)this, a2);
  *(unsigned char *)(a4 + 8) = __str.__r_.__value_.__s.__data_[8];
  std::string::operator=(v8, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F08C3230;
  if (v14 < 0) {
    operator delete((void *)__str.__r_.__value_.__r.__words[2]);
  }
  if (*(char *)(a4 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a4 + 16), *(void *)(a4 + 24));
  }
  else {
    std::string __str = *v8;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v11 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v11) {
      return;
    }
  }
  else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
  {
    return;
  }
  if (*(char *)(a4 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 16), *(void *)(a4 + 24));
  }
  else {
    std::string __p = *v8;
  }
  ML3CPPStripInsignificantCharacters(&__str, (const UInt8 *)&__p);
  std::string::operator=(v8, &__str);
  *(unsigned char *)(a4 + 8) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B036E118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)uint64_t v23 = v24;
  if (*(char *)(v23 + 39) < 0) {
    operator delete(*v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportItem::onlyRequiresItemStoreDataSource(ML3ImportItem *this)
{
  return 0;
}

uint64_t ML3ImportItem::canInsertIntoPurchasedPlaylist(ML3ImportItem *this)
{
  return 0;
}

uint64_t ML3ImportItem::getDeduplicationOrderingTerms(ML3ImportItem *this)
{
  return 0;
}

uint64_t ML3ImportItem::getDeduplicationPredicates(ML3ImportItem *this)
{
  return MEMORY[0x1E4F1CBF0];
}

void ML3ImportItem::getSourceIdentifiers(ML3ImportItem *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t ML3ImportItem::getDetailedDescription(ML3ImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(void **__return_ptr, ML3ImportItem *))(*(void *)this + 88))(__p, this);
  if ((v7 & 0x80u) == 0) {
    unint64_t v2 = __p;
  }
  else {
    unint64_t v2 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = v7;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":\n", 2);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = 1;
  do
  {
    (*(void (**)(ML3ImportItem *, uint64_t, void *))(*(void *)this + 208))(this, v4, v8);
    uint64_t v4 = (v4 + 1);
  }
  while (v4 != 25);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v10);
}

void sub_1B036E3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t ML3ImportItem::getDescription(ML3ImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"<ML3ImportItem ", 15);
  *(_DWORD *)((char *)&v3[1] + *(void *)(v3[0] - 24)) = *(_DWORD *)((unsigned char *)&v3[1] + *(void *)(v3[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (void *)std::ostream::operator<<();
  char v6 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v5);
}

void sub_1B036E588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ML3ImportItem::getImportItemArrayValue(ML3ImportItem *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void ML3ImportItem::getImportItemValue(ML3ImportItem *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
}

void ML3ImportItem::getPlaylistTrackPersonIdentifiers(ML3ImportItem *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t ML3ImportItem::hasValue(ML3ImportItem *this)
{
  return 0;
}

void ML3ImportItem::getDataValue(ML3ImportItem *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
}

double ML3ImportItem::getFloatValue(ML3ImportItem *this)
{
  return 0.0;
}

uint64_t ML3ImportItem::getIntegerValue(ML3ImportItem *this)
{
  return 0;
}

void ML3ImportItem::getStringValue(ML3ImportItem *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F08C3230;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
}

uint64_t ML3ImportItem::isValid(ML3ImportItem *this)
{
  return 0;
}

void ML3ImportItem::~ML3ImportItem(ML3ImportItem *this)
{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);

  JUMPOUT(0x1B3E93610);
}

{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(char **)v2;
      *((void *)v2 + 3) = &unk_1F08C3230;
      if (v2[63] < 0) {
        operator delete(*((void **)v2 + 5));
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t MIPPlaybackInfoReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  char v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned __int8 v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x200u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_138;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_140;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_138:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_140:
          uint64_t v103 = 76;
          goto LABEL_197;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x800u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_144:
          uint64_t v103 = 84;
          goto LABEL_197;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x400u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_148:
          uint64_t v103 = 80;
          goto LABEL_197;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x1000u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v19 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_152;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_152:
          uint64_t v103 = 88;
          goto LABEL_197;
        case 5u:
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 96;
          goto LABEL_52;
        case 6u:
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 104;
          goto LABEL_52;
        case 7u:
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 112;
LABEL_52:
          unint64_t v41 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;

          continue;
        case 8u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 132) |= 8u;
          while (2)
          {
            uint64_t v45 = *v3;
            unint64_t v46 = *(void *)(a2 + v45);
            if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
              *(void *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                BOOL v14 = v43++ >= 9;
                if (v14)
                {
                  uint64_t v44 = 0;
                  goto LABEL_156;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v44 = 0;
          }
LABEL_156:
          uint64_t v104 = 32;
          goto LABEL_202;
        case 9u:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 132) |= 0x10u;
          while (2)
          {
            uint64_t v50 = *v3;
            unint64_t v51 = *(void *)(a2 + v50);
            if (v51 == -1 || v51 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
              *(void *)(a2 + v50) = v51 + 1;
              v44 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                BOOL v14 = v49++ >= 9;
                if (v14)
                {
                  uint64_t v44 = 0;
                  goto LABEL_160;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v44 = 0;
          }
LABEL_160:
          uint64_t v104 = 40;
          goto LABEL_202;
        case 0xAu:
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 132) |= 2u;
          while (2)
          {
            uint64_t v55 = *v3;
            unint64_t v56 = *(void *)(a2 + v55);
            if (v56 == -1 || v56 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
              *(void *)(a2 + v55) = v56 + 1;
              v44 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                BOOL v14 = v54++ >= 9;
                if (v14)
                {
                  uint64_t v44 = 0;
                  goto LABEL_164;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v44 = 0;
          }
LABEL_164:
          uint64_t v104 = 16;
          goto LABEL_202;
        case 0xBu:
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 132) |= 4u;
          while (2)
          {
            uint64_t v60 = *v3;
            unint64_t v61 = *(void *)(a2 + v60);
            if (v61 == -1 || v61 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v62 = *(unsigned char *)(*(void *)(a2 + *v7) + v61);
              *(void *)(a2 + v60) = v61 + 1;
              v44 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                BOOL v14 = v59++ >= 9;
                if (v14)
                {
                  uint64_t v44 = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v44 = 0;
          }
LABEL_168:
          uint64_t v104 = 24;
          goto LABEL_202;
        case 0xCu:
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x4000u;
          while (2)
          {
            uint64_t v65 = *v3;
            unint64_t v66 = *(void *)(a2 + v65);
            if (v66 == -1 || v66 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v67 = *(unsigned char *)(*(void *)(a2 + *v7) + v66);
              *(void *)(a2 + v65) = v66 + 1;
              v19 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                v63 += 7;
                BOOL v14 = v64++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_172;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_172:
          uint64_t v103 = 124;
          goto LABEL_197;
        case 0xDu:
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x8000u;
          while (2)
          {
            uint64_t v70 = *v3;
            unint64_t v71 = *(void *)(a2 + v70);
            if (v71 == -1 || v71 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v72 = *(unsigned char *)(*(void *)(a2 + *v7) + v71);
              *(void *)(a2 + v70) = v71 + 1;
              v19 |= (unint64_t)(v72 & 0x7F) << v68;
              if (v72 < 0)
              {
                v68 += 7;
                BOOL v14 = v69++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_176;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_176:
          uint64_t v103 = 128;
          goto LABEL_197;
        case 0xEu:
          char v73 = 0;
          unsigned int v74 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 132) |= 0x20u;
          while (2)
          {
            uint64_t v75 = *v3;
            unint64_t v76 = *(void *)(a2 + v75);
            if (v76 == -1 || v76 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v77 = *(unsigned char *)(*(void *)(a2 + *v7) + v76);
              *(void *)(a2 + v75) = v76 + 1;
              v44 |= (unint64_t)(v77 & 0x7F) << v73;
              if (v77 < 0)
              {
                v73 += 7;
                BOOL v14 = v74++ >= 9;
                if (v14)
                {
                  uint64_t v44 = 0;
                  goto LABEL_180;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v44 = 0;
          }
LABEL_180:
          uint64_t v104 = 48;
          goto LABEL_202;
        case 0xFu:
          char v78 = 0;
          unsigned int v79 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 132) |= 0x40u;
          while (2)
          {
            uint64_t v80 = *v3;
            unint64_t v81 = *(void *)(a2 + v80);
            if (v81 == -1 || v81 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v82 = *(unsigned char *)(*(void *)(a2 + *v7) + v81);
              *(void *)(a2 + v80) = v81 + 1;
              v44 |= (unint64_t)(v82 & 0x7F) << v78;
              if (v82 < 0)
              {
                v78 += 7;
                BOOL v14 = v79++ >= 9;
                if (v14)
                {
                  uint64_t v44 = 0;
                  goto LABEL_184;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v44 = 0;
          }
LABEL_184:
          uint64_t v104 = 56;
          goto LABEL_202;
        case 0x10u:
          char v83 = 0;
          unsigned int v84 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 132) |= 0x80u;
          while (2)
          {
            uint64_t v85 = *v3;
            unint64_t v86 = *(void *)(a2 + v85);
            if (v86 == -1 || v86 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v87 = *(unsigned char *)(*(void *)(a2 + *v7) + v86);
              *(void *)(a2 + v85) = v86 + 1;
              v44 |= (unint64_t)(v87 & 0x7F) << v83;
              if (v87 < 0)
              {
                v83 += 7;
                BOOL v14 = v84++ >= 9;
                if (v14)
                {
                  uint64_t v44 = 0;
                  goto LABEL_188;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v44 = 0;
          }
LABEL_188:
          uint64_t v104 = 64;
          goto LABEL_202;
        case 0x11u:
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x100u;
          while (2)
          {
            uint64_t v90 = *v3;
            unint64_t v91 = *(void *)(a2 + v90);
            if (v91 == -1 || v91 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v92 = *(unsigned char *)(*(void *)(a2 + *v7) + v91);
              *(void *)(a2 + v90) = v91 + 1;
              v19 |= (unint64_t)(v92 & 0x7F) << v88;
              if (v92 < 0)
              {
                v88 += 7;
                BOOL v14 = v89++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_192;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_192:
          uint64_t v103 = 72;
          goto LABEL_197;
        case 0x12u:
          char v93 = 0;
          unsigned int v94 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x2000u;
          while (2)
          {
            uint64_t v95 = *v3;
            unint64_t v96 = *(void *)(a2 + v95);
            if (v96 == -1 || v96 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v97 = *(unsigned char *)(*(void *)(a2 + *v7) + v96);
              *(void *)(a2 + v95) = v96 + 1;
              v19 |= (unint64_t)(v97 & 0x7F) << v93;
              if (v97 < 0)
              {
                v93 += 7;
                BOOL v14 = v94++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_196;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_196:
          uint64_t v103 = 120;
LABEL_197:
          *(_DWORD *)(a1 + v103) = v19;
          continue;
        case 0x13u:
          char v98 = 0;
          unsigned int v99 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 132) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v100 = *v3;
        unint64_t v101 = *(void *)(a2 + v100);
        if (v101 == -1 || v101 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v102 = *(unsigned char *)(*(void *)(a2 + *v7) + v101);
        *(void *)(a2 + v100) = v101 + 1;
        v44 |= (unint64_t)(v102 & 0x7F) << v98;
        if ((v102 & 0x80) == 0) {
          goto LABEL_199;
        }
        v98 += 7;
        BOOL v14 = v99++ >= 9;
        if (v14)
        {
          uint64_t v44 = 0;
          goto LABEL_201;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_199:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v44 = 0;
      }
LABEL_201:
      uint64_t v104 = 8;
LABEL_202:
      *(void *)(a1 + v104) = v44;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

atomic_uint *iPhoneSortKeyBuilderRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add_explicit(result, 1u, memory_order_relaxed);
  }
  return result;
}

void iPhoneSortKeyBuilderRelease(void *a1)
{
  if (a1 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a1, 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    if (a1[1]) {
      ucol_close();
    }
    unint64_t v2 = (const void *)a1[2];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (void *)a1[3];
    if (v3)
    {
      if ((uint64_t)a1[4] >= 1)
      {
        uint64_t v4 = 0;
        unsigned int v5 = 1;
        do
        {
          char v6 = (CFTypeRef *)(a1[3] + 48 * v4);
          CFRelease(*v6);
          CFRelease(v6[1]);
          CFRelease(v6[3]);
          CFRelease(v6[2]);
          uint64_t v4 = v5;
        }
        while (a1[4] > (uint64_t)v5++);
        uint64_t v3 = (void *)a1[3];
      }
      free(v3);
    }
    free(a1);
  }
}

uint64_t iPhoneSortKeyBuilderGetSectionFromiPhoneSortKey(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 24) + 48 * *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = CFArrayGetCount(*(CFArrayRef *)(v6 - 24)) + v7;
  if (a3 <= 0) {
    return (result + 1);
  }
  unint64_t v9 = *a2;
  int64_t v10 = v9 - 48;
  if (v9 >= 0x30 && v10 < *(void *)(a1 + 32))
  {
    uint64_t v11 = *(void *)(a1 + 24);
    unint64_t v12 = a2 + 1;
    unint64_t Bound = (int)ucol_getBound();
    CFDataRef cf = CFDataCreateWithBytesNoCopy(0, v12, Bound, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CFArrayRef v14 = *(const __CFArray **)(v11 + 48 * (int)v10 + 24);
    CFIndex Count = CFArrayGetCount(v14);
    uint64_t v16 = Count - 1;
    uint64_t v37 = v11;
    int v38 = v10;
    if (Count >= 1)
    {
      CFIndex v17 = Count;
      uint64_t v18 = 0;
      while (1)
      {
        uint64_t v19 = v16 + v18;
        if (v16 + v18 < 0 != __OFADD__(v16, v18)) {
          ++v19;
        }
        uint64_t v20 = v19 >> 1;
        CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v14, v19 >> 1);
        unint64_t Length = CFDataGetLength(ValueAtIndex);
        int v23 = Length;
        if (Length >= Bound) {
          size_t v24 = Bound;
        }
        else {
          size_t v24 = Length;
        }
        BytePtr = CFDataGetBytePtr(ValueAtIndex);
        int v26 = memcmp(BytePtr, v12, v24);
        int v27 = v23 - Bound;
        if (v26) {
          int v27 = v26;
        }
        if (v27 >= 1) {
          int v28 = 1;
        }
        else {
          int v28 = v27 >> 31;
        }
        if (v28 == 1)
        {
          uint64_t v16 = v20 - 1;
        }
        else
        {
          if (!v28) {
            goto LABEL_31;
          }
          uint64_t v18 = v20 + 1;
          if (v20 + 1 < v17)
          {
            CFDataRef v29 = (const __CFData *)CFArrayGetValueAtIndex(v14, v20 + 1);
            unint64_t v30 = CFDataGetLength(v29);
            int v31 = v30;
            size_t v32 = v30 >= Bound ? Bound : v30;
            char v33 = CFDataGetBytePtr(v29);
            int v34 = memcmp(v33, v12, v32);
            int v35 = v31 - Bound;
            if (v34) {
              int v35 = v34;
            }
            if (v35 > 0) {
              goto LABEL_31;
            }
          }
        }
        if (v18 > v16) {
          goto LABEL_31;
        }
      }
    }
    uint64_t v20 = 195935983;
LABEL_31:
    CFRelease(cf);
    return *(void *)(v37 + 48 * v38 + 40) + v20;
  }
  return result;
}

uint64_t iPhoneSortKeyBuilderGetLanguageCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t iPhoneSortKeyBuilderGetLanguageIndex(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 - 48;
}

CFIndex iPhoneSortKeyBuilderGetSectionCountForLanguage(uint64_t a1, uint64_t a2)
{
  return CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 24) + 48 * a2 + 16));
}

uint64_t iPhoneSortKeyBuilderGetMaxSectionSortKeyLength(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(*(void *)(a1 + 24) + 32);
  do
  {
    uint64_t v6 = *v4;
    v4 += 6;
    uint64_t v5 = v6;
    if (v6 > result) {
      uint64_t result = v5;
    }
    --v1;
  }
  while (v1);
  return result;
}

CFIndex iPhoneSortKeyBuilderGetUnknownSectionIndex(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24) + 48 * *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  return v2 + CFArrayGetCount(*(CFArrayRef *)(v1 - 24)) + 1;
}

__CFData *iPhoneSortKeyBuilderCopySectionSortKey(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = a2;
  CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 24) + 48 * a2 + 24), a3 - *(void *)(*(void *)(a1 + 24) + 48 * a2 + 40));
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex Length = CFDataGetLength(ValueAtIndex);
  Mutable = CFDataCreateMutable(v5, Length + 1);
  UInt8 bytes = v3 + 48;
  CFDataAppendBytes(Mutable, &bytes, 1);
  BytePtr = CFDataGetBytePtr(ValueAtIndex);
  CFIndex v9 = CFDataGetLength(ValueAtIndex);
  CFDataAppendBytes(Mutable, BytePtr, v9);
  return Mutable;
}

unsigned char *iPhoneSortKeyBuilderCreateFromUTF16String(uint64_t a1, const UniChar *a2, int a3, _DWORD *a4)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v6 = a3;
  CFStringRef v7 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, a3, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  CFStringRef v8 = v7;
  if (*(void *)(a1 + 16) || *(void *)(a1 + 40))
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v5, v6, v7);
    CFRelease(v8);
    if (*(void *)(a1 + 16))
    {
      CFIndex v10 = 0;
      while (v10 < CFStringGetLength(MutableCopy))
      {
        UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(MutableCopy, v10++);
        if ((unsigned __int16)((unsigned __int16)(CharacterAtIndex + 24656) >> 4) >= 0xAE5u)
        {
          CFStringRef Copy = CFStringCreateCopy(v5, MutableCopy);
          CFStringReplaceAll(MutableCopy, &stru_1F08D4D70);
          char v13 = *(__CFStringTokenizer **)(a1 + 16);
          v58.length = CFStringGetLength(Copy);
          v58.location = 0;
          CFStringTokenizerSetString(v13, Copy, v58);
          CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4F1D4E0];
          while (1)
          {
            CFStringTokenizerTokenType Token = CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 16));
            if (!Token) {
              break;
            }
            char v16 = Token;
            CFStringRef v17 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(*(CFStringTokenizerRef *)(a1 + 16), 0x10000uLL);
            if (v17)
            {
              CFStringRef v18 = v17;
              CFStringAppend(MutableCopy, v17);
              if ((v16 & 0x20) != 0)
              {
                range.location = 0;
                range.length = 0;
                CFIndex Length = CFStringGetLength(MutableCopy);
                CFIndex v20 = Length - CFStringGetLength(v18);
                CFIndex v21 = CFStringGetLength(v18);
                range.location = v20;
                range.length = v21;
                CFStringTransform(MutableCopy, &range, v14, 0);
              }
              CFRelease(v18);
            }
          }
          CFRelease(Copy);
          break;
        }
      }
    }
    if (*(void *)(a1 + 40))
    {
      CFIndex v22 = CFStringGetLength(MutableCopy);
      range.location = 0;
      range.length = v22;
      CFStringTransform(MutableCopy, &range, *(CFStringRef *)(a1 + 40), 0);
    }
  }
  else
  {
    CFMutableStringRef MutableCopy = (CFMutableStringRef)v7;
  }
  CharactersPtr = CFStringGetCharactersPtr(MutableCopy);
  int v24 = CFStringGetLength(MutableCopy);
  int v25 = v24;
  int v26 = (UniChar *)CharactersPtr;
  char v53 = CharactersPtr;
  if (!CharactersPtr)
  {
    int v26 = (UniChar *)malloc_type_malloc(2 * v24, 0x1000040BDFB0063uLL);
    v57.location = 0;
    v57.length = v25;
    CFStringGetCharacters(MutableCopy, v57, v26);
  }
  if (v25 >= 1)
  {
    for (uint64_t i = 0; i != v25; ++i)
    {
      int v28 = v26[i];
      CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
      int IsCharacterMember = CFCharacterSetIsCharacterMember(Predefined, v28);
      if (v28 != 32 && IsCharacterMember != 0) {
        break;
      }
    }
  }
  CFMutableStringRef cf = MutableCopy;
  int SortKey = ucol_getSortKey();
  char v52 = CFAllocatorAllocate(v5, SortKey + 1, 0);
  char v33 = v52 + 1;
  ucol_getSortKey();
  if (*(uint64_t *)(a1 + 32) < 1)
  {
    LOBYTE(v35) = 0;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    do
    {
      uint64_t v36 = *(void *)(a1 + 24);
      CFDataRef v37 = *(const __CFData **)(v36 + v34);
      unint64_t v38 = CFDataGetLength(v37);
      int v39 = v38;
      if (v38 >= SortKey) {
        size_t v40 = SortKey;
      }
      else {
        size_t v40 = v38;
      }
      BytePtr = CFDataGetBytePtr(v37);
      int v42 = memcmp(BytePtr, v33, v40);
      int v43 = v39 - SortKey;
      if (v42) {
        int v43 = v42;
      }
      if (v43 <= 0)
      {
        CFDataRef v44 = *(const __CFData **)(v36 + v34 + 8);
        unint64_t v45 = CFDataGetLength(v44);
        int v46 = v45;
        if (v45 >= SortKey) {
          size_t v47 = SortKey;
        }
        else {
          size_t v47 = v45;
        }
        char v48 = CFDataGetBytePtr(v44);
        int v49 = memcmp(v48, v33, v47);
        int v50 = v46 - SortKey;
        if (v49) {
          int v50 = v49;
        }
        if ((v50 & 0x80000000) == 0) {
          break;
        }
      }
      ++v35;
      v34 += 48;
    }
    while (v35 < *(void *)(a1 + 32));
  }
  *char v52 = v35 + 48;
  *a4 = SortKey + 1;
  if (!v53) {
    free(v26);
  }
  CFRelease(cf);
  return v52;
}

void iPhoneSortKeyBuilderGroupingKey_xFunc(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  CFAllocatorRef v5 = sqlite3_user_data(a1);
  int v6 = sqlite3_value_bytes16(*a3);
  CFStringRef v7 = (const UChar *)sqlite3_value_text16(*a3);
  *(void *)uint64_t v11 = 0;
  GroupingKeyFromCharacters = CreateGroupingKeyFromCharacters(v5[1], v7, (uint64_t)v6 >> 1, (int64_t *)v11);
  if (GroupingKeyFromCharacters)
  {
    int v9 = v11[0];
    CFIndex v10 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
    sqlite3_result_blob(a1, GroupingKeyFromCharacters, v9, v10);
  }
  else
  {
    sqlite3_result_error(a1, "could not build grouping key", 1);
  }
}

void *CreateGroupingKeyFromCharacters(uint64_t a1, const UChar *a2, uint64_t a3, int64_t *a4)
{
  int32_t v5 = a3;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFStringRef v7 = malloc_type_malloc(6 * a3 + 5, 0x1B6F2B0FuLL);
  uint64_t v13 = 0;
  memset(&iter, 0, sizeof(iter));
  uiter_setString(&iter, a2, v5);
  int SortKeyPart = ucol_nextSortKeyPart();
  int v9 = memchr(v7, 1, SortKeyPart);
  int64_t v10 = v9 - (unsigned char *)v7;
  if (!v9) {
    int64_t v10 = 0;
  }
  *a4 = v10;
  return v7;
}

void iPhoneSortKeyBuilderSection_xFunc(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  int32_t v5 = sqlite3_user_data(a1);
  int v6 = (unsigned __int8 *)sqlite3_value_blob(*a3);
  int v7 = sqlite3_value_bytes(*a3);
  SectionFromiPhoneint SortKey = iPhoneSortKeyBuilderGetSectionFromiPhoneSortKey((uint64_t)v5, v6, v7);

  sqlite3_result_int(a1, SectionFromiPhoneSortKey);
}

void iPhoneSortKeyBuilderMake_xFunc(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  int32_t v5 = sqlite3_user_data(a1);
  int v6 = (const UniChar *)sqlite3_value_text16(*a3);
  int v7 = sqlite3_value_bytes16(*a3);
  int v10 = 0;
  CFStringRef v8 = iPhoneSortKeyBuilderCreateFromUTF16String((uint64_t)v5, v6, v7 >> 1, &v10);
  if (v8)
  {
    int v9 = v10;
    sqlite3_result_blob(a1, v8, v9, (void (__cdecl *)(void *))DeallocateSortKey);
  }
  else
  {
    sqlite3_result_error_nomem(a1);
  }
}

void DeallocateSortKey(void *ptr)
{
}

uint64_t iPhoneSortKeyBuilderUninstallSqlite3(int a1, sqlite3 *db)
{
  return 0;
}

CFDataRef iPhoneSortKeyBuilderCopyVersionData(uint64_t a1)
{
  CFDataRef result = *(CFDataRef *)(a1 + 8);
  if (result)
  {
    *(_DWORD *)UInt8 bytes = 0;
    ucol_getVersion();
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 4);
  }
  return result;
}

CFDataRef iPhoneSortKeyBuilderCopyGroupingKeyForString(uint64_t a1, CFStringRef theString)
{
  CFIndex v4 = CFStringGetLength(theString);
  int32_t v5 = (UniChar *)malloc_type_malloc(2 * v4, 0x1000040BDFB0063uLL);
  v12.location = 0;
  v12.CFIndex length = v4;
  CFStringGetCharacters(theString, v12, v5);
  CFIndex length = 0;
  int v6 = (const UInt8 *)CreateGroupingKeyFromCharacters(*(void *)(a1 + 8), v5, v4, &length);
  free(v5);
  if (!v6) {
    return 0;
  }
  CFIndex v7 = length;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];

  return CFDataCreateWithBytesNoCopy(0, v6, v7, v8);
}

uint64_t _ML3ValidationBuildDatabaseTables(void *a1)
{
  id v1 = a1;
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  uint64_t v2 = +[ML3MusicLibrary allPragmaSQL];
  _ML3ValidationExecuteSQLArray(v1, v2);

  [v1 executeUpdate:@"VACUUM"];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___ML3ValidationBuildDatabaseTables_block_invoke;
  v6[3] = &unk_1E5FB29B0;
  CFAllocatorRef v8 = &v9;
  id v3 = v1;
  id v7 = v3;
  [v3 performTransactionWithBlock:v6];
  uint64_t v4 = *((unsigned __int8 *)v10 + 24);

  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B0374F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _ML3ValidationExecuteSQLArray(void *a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = a2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v4);
        }
        if (!objc_msgSend(v3, "executeUpdate:", *(void *)(*((void *)&v9 + 1) + 8 * v7), (void)v9))
        {
          uint64_t v5 = 0;
          goto LABEL_11;
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v5) {
        continue;
      }
      break;
    }
    uint64_t v5 = 1;
  }
LABEL_11:

  return v5;
}

uint64_t ML3ValidationRunInitialInsertStatements(void *a1)
{
  id v1 = a1;
  if ([v1 executeUpdate:@"INSERT INTO base_location (base_location_id, path) VALUES (0, '')"])
  {
    uint64_t v2 = ML3LocalizationLanguageCanonicalIdentifier();
    id v3 = [NSString stringWithFormat:@"INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES ('OrderingLanguage','%@')", v2];
    uint64_t v4 = [v1 executeUpdate:v3];
    if ((v4 & 1) == 0)
    {
      uint64_t v5 = os_log_create("com.apple.amp.medialibrary", "Validation");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1B022D000, v5, OS_LOG_TYPE_ERROR, "Failed to set ordering language with canonical identifier.", buf, 2u);
      }
    }
  }
  else
  {
    uint64_t v2 = os_log_create("com.apple.amp.medialibrary", "Validation");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CFAllocatorRef v8 = 0;
      _os_log_impl(&dword_1B022D000, v2, OS_LOG_TYPE_ERROR, "Failed to insert empty base location into table.", v8, 2u);
    }
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1B03755D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ML3ContainerAuthorImportItem::hasValue(ML3ContainerAuthorImportItem *this, int a2)
{
  return ((a2 - 251658241) < 6) & (0x37u >> (a2 - 1));
}

uint64_t ML3ContainerAuthorImportItem::getIntegerValue(ML3ContainerAuthorImportItem *this, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 251658241:
      uint64_t result = *((void *)this + 9);
      break;
    case 251658242:
      uint64_t result = *((void *)this + 10);
      break;
    case 251658243:
      uint64_t result = *((void *)this + 11);
      break;
    case 251658245:
      uint64_t result = *((unsigned __int8 *)this + 96);
      break;
    case 251658246:
      uint64_t result = *((void *)this + 13);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ML3ContainerAuthorImportItem::isValid(ML3ContainerAuthorImportItem *this)
{
  return 1;
}

void ML3ContainerAuthorImportItem::~ML3ContainerAuthorImportItem(ML3ContainerAuthorImportItem *this)
{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);

  JUMPOUT(0x1B3E93610);
}

{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

id ML3TrackRulesIdentityPropertyForSource(uint64_t a1)
{
  if (ML3TrackRulesIdentityPropertyForSource_onceToken[0] != -1) {
    dispatch_once(ML3TrackRulesIdentityPropertyForSource_onceToken, &__block_literal_global_5929);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *ML3TrackRulesIdentityPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 27, @"ML3TrackRulesIdentityPropertyForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3TrackRulesIdentityPropertyForSource_values[(int)a1];

  return v2;
}

void __ML3TrackRulesIdentityPropertyForSource_block_invoke()
{
  char v0 = (void *)ML3TrackRulesIdentityPropertyForSource_values[0];
  ML3TrackRulesIdentityPropertyForSource_values[0] = @"item_store.item_pid";

  objc_storeStrong(qword_1E9B316E0, @"item_store.sync_id");
  objc_storeStrong(&qword_1E9B316E0[1], @"item_store.store_saga_id");
  objc_storeStrong(&qword_1E9B316E0[2], @"item_store.sync_id");
  objc_storeStrong(&qword_1E9B316E0[3], @"item_store.purchase_history_id");
  objc_storeStrong(&qword_1E9B316E0[4], @"item_store.store_item_id");

  objc_storeStrong(&qword_1E9B316E0[5], @"item_store.subscription_store_item_id");
}

uint64_t ML3TrackRulesIdentityImportPropertyForSource(uint64_t a1)
{
  if (ML3TrackRulesIdentityImportPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3TrackRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_10);
  }
  if (a1 >= 7)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"MLImportPropertyKey ML3TrackRulesIdentityImportPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3TrackRules.m", 44, @"ML3TrackRulesIdentityImportPropertyForSource called with invalid source=%d", a1);
  }
  return *((unsigned int *)&ML3TrackRulesIdentityImportPropertyForSource_values + (int)a1);
}

double __ML3TrackRulesIdentityImportPropertyForSource_block_invoke()
{
  ML3TrackRulesIdentityImportPropertyForSource_values = xmmword_1B04DA390;
  *(void *)&double result = 100663302;
  qword_1E9B316B0 = 100663302;
  dword_1E9B316B8 = 100663337;
  return result;
}

uint64_t ML3TrackRulesMediaTypesForSource(uint64_t a1)
{
  if (ML3TrackRulesMediaTypesForSource_onceToken != -1) {
    dispatch_once(&ML3TrackRulesMediaTypesForSource_onceToken, &__block_literal_global_15);
  }
  if (a1 >= 7)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"MLMediaType ML3TrackRulesMediaTypesForSource(ML3TrackSource)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3TrackRules.m", 61, @"ML3TrackRulesMediaTypesForSource called with invalid source=%d", a1);
  }
  return *((unsigned int *)&ML3TrackRulesMediaTypesForSource_values + (int)a1);
}

double __ML3TrackRulesMediaTypesForSource_block_invoke()
{
  ML3TrackRulesMediaTypesForSource_values = xmmword_1B04DA3A0;
  double result = 7.29111854e-304;
  qword_1E9B31D30 = 0xFFFFFF00000E08;
  dword_1E9B31D38 = 1032;
  return result;
}

id ML3ContainerRulesIdentityPropertyForSource(uint64_t a1)
{
  if (ML3ContainerRulesIdentityPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3ContainerRulesIdentityPropertyForSource_onceToken, &__block_literal_global_20);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *ML3ContainerRulesIdentityPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 78, @"ML3ContainerRulesIdentityPropertyForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3ContainerRulesIdentityPropertyForSource_values[(int)a1];

  return v2;
}

void __ML3ContainerRulesIdentityPropertyForSource_block_invoke()
{
  objc_storeStrong((id *)ML3ContainerRulesIdentityPropertyForSource_values, @"container_pid");
  objc_storeStrong((id *)&ML3ContainerRulesIdentityPropertyForSource_values[1], @"sync_id");
  objc_storeStrong((id *)&ML3ContainerRulesIdentityPropertyForSource_values[2], @"store_cloud_id");
  objc_storeStrong((id *)&ML3ContainerRulesIdentityPropertyForSource_values[3], @"sync_id");
  objc_storeStrong((id *)&ML3ContainerRulesIdentityPropertyForSource_values[4], @"container_pid");
  objc_storeStrong((id *)&ML3ContainerRulesIdentityPropertyForSource_values[5], @"container_pid");

  objc_storeStrong((id *)&ML3ContainerRulesIdentityPropertyForSource_values[6], @"cloud_global_id");
}

uint64_t ML3ContainerRulesIdentityImportPropertyForSource(uint64_t a1)
{
  if (ML3ContainerRulesIdentityImportPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3ContainerRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_25);
  }
  if (a1 >= 7)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"MLImportPropertyKey ML3ContainerRulesIdentityImportPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3TrackRules.m", 95, @"ML3ContainerRulesIdentityImportPropertyForSource called with invalid source=%d", a1);
  }
  return *((unsigned int *)&ML3ContainerRulesIdentityImportPropertyForSource_values + (int)a1);
}

double __ML3ContainerRulesIdentityImportPropertyForSource_block_invoke()
{
  double result = 1.06560075e-255;
  ML3ContainerRulesIdentityImportPropertyForSource_values = xmmword_1B04DA3B0;
  qword_1E9B31DA0 = 0;
  dword_1E9B31DA8 = 184549417;
  return result;
}

id ML3ArtistRulesIdentityPropertyForSource(uint64_t a1)
{
  if (ML3ArtistRulesIdentityPropertyForSource_onceToken[0] != -1) {
    dispatch_once(ML3ArtistRulesIdentityPropertyForSource_onceToken, &__block_literal_global_30);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *ML3ArtistRulesIdentityPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 112, @"ML3ArtistRulesIdentityPropertyForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3ArtistRulesIdentityPropertyForSource_values[(int)a1];

  return v2;
}

void __ML3ArtistRulesIdentityPropertyForSource_block_invoke()
{
  char v0 = (void *)ML3ArtistRulesIdentityPropertyForSource_values[0];
  ML3ArtistRulesIdentityPropertyForSource_values[0] = @"item_artist.item_artist_pid";

  objc_storeStrong(qword_1EB550D60, @"sync_id");
  objc_storeStrong(&qword_1EB550D60[1], @"store_id");
  objc_storeStrong(&qword_1EB550D60[2], @"sync_id");
  objc_storeStrong(&qword_1EB550D60[3], @"store_id");
  objc_storeStrong(&qword_1EB550D60[4], @"store_id");

  objc_storeStrong(&qword_1EB550D60[5], @"store_id");
}

uint64_t ML3ItemArtistRulesIdentityImportPropertyForSource(uint64_t a1)
{
  if (ML3ItemArtistRulesIdentityImportPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3ItemArtistRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_38);
  }
  if (a1 >= 7)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"MLImportPropertyKey ML3ItemArtistRulesIdentityImportPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3TrackRules.m", 133, @"ML3ItemArtistRulesIdentityImportPropertyForSource called with invalid source=%d", a1);
  }
  return *((unsigned int *)&ML3ItemArtistRulesIdentityImportPropertyForSource_values + (int)a1);
}

double __ML3ItemArtistRulesIdentityImportPropertyForSource_block_invoke()
{
  double result = 3.62608615e-217;
  ML3ItemArtistRulesIdentityImportPropertyForSource_values = xmmword_1B04DA3C0;
  qword_1E9B31BB0 = 0;
  dword_1E9B31BB8 = 0;
  return result;
}

id ML3AlbumArtistRulesIdentityPropertyForSource(uint64_t a1)
{
  if (ML3AlbumArtistRulesIdentityPropertyForSource_onceToken[0] != -1) {
    dispatch_once(ML3AlbumArtistRulesIdentityPropertyForSource_onceToken, &__block_literal_global_43);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *ML3AlbumArtistRulesIdentityPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 151, @"ML3AlbumArtistRulesIdentityPropertyForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3AlbumArtistRulesIdentityPropertyForSource_values[(int)a1];

  return v2;
}

void __ML3AlbumArtistRulesIdentityPropertyForSource_block_invoke()
{
  objc_storeStrong((id *)ML3AlbumArtistRulesIdentityPropertyForSource_values, @"album_artist_pid");
  objc_storeStrong((id *)&ML3AlbumArtistRulesIdentityPropertyForSource_values[1], @"sync_id");
  objc_storeStrong((id *)&ML3AlbumArtistRulesIdentityPropertyForSource_values[2], @"cloud_universal_library_id");
  objc_storeStrong((id *)&ML3AlbumArtistRulesIdentityPropertyForSource_values[3], @"sync_id");
  objc_storeStrong((id *)&ML3AlbumArtistRulesIdentityPropertyForSource_values[4], @"store_id");
  objc_storeStrong((id *)&ML3AlbumArtistRulesIdentityPropertyForSource_values[5], @"store_id");

  objc_storeStrong((id *)&ML3AlbumArtistRulesIdentityPropertyForSource_values[6], @"store_id");
}

uint64_t ML3AlbumArtistRulesIdentityImportPropertyForSource(uint64_t a1)
{
  if (ML3AlbumArtistRulesIdentityImportPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3AlbumArtistRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_48);
  }
  if (a1 >= 7)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"MLImportPropertyKey ML3AlbumArtistRulesIdentityImportPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3TrackRules.m", 172, @"ML3AlbumArtistRulesIdentityImportPropertyForSource called with invalid source=%d", a1);
  }
  return *((unsigned int *)&ML3AlbumArtistRulesIdentityImportPropertyForSource_values + (int)a1);
}

double __ML3AlbumArtistRulesIdentityImportPropertyForSource_block_invoke()
{
  double result = 5.5329578e-222;
  ML3AlbumArtistRulesIdentityImportPropertyForSource_values = xmmword_1B04DA3D0;
  qword_1E9B31B00 = 0;
  dword_1E9B31B08 = 0;
  return result;
}

id ML3AlbumRulesIdentityPropertyForSource(uint64_t a1)
{
  if (ML3AlbumRulesIdentityPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3AlbumRulesIdentityPropertyForSource_onceToken, &__block_literal_global_53);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *ML3AlbumRulesIdentityPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 189, @"ML3AlbumRulesIdentityPropertyForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3AlbumRulesIdentityPropertyForSource_values[(int)a1];

  return v2;
}

void __ML3AlbumRulesIdentityPropertyForSource_block_invoke()
{
  objc_storeStrong((id *)ML3AlbumRulesIdentityPropertyForSource_values, @"album_pid");
  objc_storeStrong((id *)&ML3AlbumRulesIdentityPropertyForSource_values[1], @"sync_id");
  objc_storeStrong((id *)&ML3AlbumRulesIdentityPropertyForSource_values[2], @"cloud_library_id");
  objc_storeStrong((id *)&ML3AlbumRulesIdentityPropertyForSource_values[3], @"sync_id");
  objc_storeStrong((id *)&ML3AlbumRulesIdentityPropertyForSource_values[4], @"store_id");
  objc_storeStrong((id *)&ML3AlbumRulesIdentityPropertyForSource_values[5], @"store_id");

  objc_storeStrong((id *)&ML3AlbumRulesIdentityPropertyForSource_values[6], @"store_id");
}

uint64_t ML3AlbumRulesIdentityImportPropertyForSource(uint64_t a1)
{
  if (ML3AlbumRulesIdentityImportPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3AlbumRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_58);
  }
  if (a1 >= 7)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"MLImportPropertyKey ML3AlbumRulesIdentityImportPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3TrackRules.m", 206, @"ML3AlbumRulesIdentityImportPropertyForSource called with invalid source=%d", a1);
  }
  return *((unsigned int *)&ML3AlbumRulesIdentityImportPropertyForSource_values + (int)a1);
}

int32x2_t __ML3AlbumRulesIdentityImportPropertyForSource_block_invoke()
{
  ML3AlbumRulesIdentityImportPropertyForSource_values = xmmword_1B04DA3E0;
  int32x2_t result = vdup_n_s32(0x11000018u);
  qword_1E9B31B80 = (uint64_t)result;
  dword_1E9B31B88 = 285212696;
  return result;
}

id ML3TrackRulesRemovalSourceIdentityPropertyForSource(uint64_t a1)
{
  if (ML3TrackRulesRemovalSourceIdentityPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3TrackRulesRemovalSourceIdentityPropertyForSource_onceToken, &__block_literal_global_63);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *ML3TrackRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 227, @"ML3TrackRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3TrackRulesRemovalSourceIdentityPropertyForSource_values[(int)a1];

  return v2;
}

void __ML3TrackRulesRemovalSourceIdentityPropertyForSource_block_invoke()
{
  char v0 = (void *)ML3TrackRulesRemovalSourceIdentityPropertyForSource_values[0];
  ML3TrackRulesRemovalSourceIdentityPropertyForSource_values[0] = @"item_store.item_pid";

  objc_storeStrong((id *)algn_1E9B31950, @"item_store.sync_id");
  objc_storeStrong((id *)&algn_1E9B31950[8], @"item_store.store_saga_id");
  objc_storeStrong((id *)&algn_1E9B31950[16], @"item_store.sync_id");
  objc_storeStrong((id *)&algn_1E9B31950[24], @"item_store.purchase_history_id");
  objc_storeStrong((id *)&algn_1E9B31950[32], @"item_store.is_ota_purchased");

  objc_storeStrong((id *)&algn_1E9B31950[40], @"item_store.is_subscription");
}

id ML3ContainerRulesRemovalSourceIdentityPropertyForSource(uint64_t a1)
{
  if (ML3ContainerRulesRemovalSourceIdentityPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3ContainerRulesRemovalSourceIdentityPropertyForSource_onceToken, &__block_literal_global_68);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *ML3ContainerRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 244, @"ML3ContainerRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3ContainerRulesRemovalSourceIdentityPropertyForSource_values[(int)a1];

  return v2;
}

void __ML3ContainerRulesRemovalSourceIdentityPropertyForSource_block_invoke()
{
  objc_storeStrong((id *)ML3ContainerRulesRemovalSourceIdentityPropertyForSource_values, @"container_pid");
  objc_storeStrong((id *)&ML3ContainerRulesRemovalSourceIdentityPropertyForSource_values[1], @"sync_id");
  objc_storeStrong((id *)&ML3ContainerRulesRemovalSourceIdentityPropertyForSource_values[2], @"store_cloud_id");
  objc_storeStrong((id *)&ML3ContainerRulesRemovalSourceIdentityPropertyForSource_values[3], @"sync_id");
  char v0 = (void *)qword_1E9B31928;
  qword_1E9B31928 = 0;

  uint64_t v1 = (void *)qword_1E9B31930;
  qword_1E9B31930 = 0;

  objc_storeStrong((id *)algn_1E9B31938, @"cloud_global_id");
}

id ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource(uint64_t a1)
{
  if (ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_onceToken, &__block_literal_global_73);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 262, @"ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_values[(int)a1];

  return v2;
}

void __ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_block_invoke()
{
  objc_storeStrong((id *)ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_values, @"album_artist_pid");
  objc_storeStrong((id *)&ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_values[1], @"sync_id");
  objc_storeStrong((id *)&ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_values[2], @"cloud_universal_library_id");
  objc_storeStrong((id *)&ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_values[3], @"sync_id");
  char v0 = (void *)qword_1E9B31DD8;
  qword_1E9B31DD8 = 0;

  uint64_t v1 = (void *)qword_1E9B31DE0;
  qword_1E9B31DE0 = 0;

  uint64_t v2 = (void *)qword_1E9B31DE8;
  qword_1E9B31DE8 = 0;
}

id ML3AlbumRulesRemovalSourceIdentityPropertyForSource(uint64_t a1)
{
  if (ML3AlbumRulesRemovalSourceIdentityPropertyForSource_onceToken != -1) {
    dispatch_once(&ML3AlbumRulesRemovalSourceIdentityPropertyForSource_onceToken, &__block_literal_global_78);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *ML3AlbumRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 280, @"ML3AlbumRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3AlbumRulesRemovalSourceIdentityPropertyForSource_values[(int)a1];

  return v2;
}

void __ML3AlbumRulesRemovalSourceIdentityPropertyForSource_block_invoke()
{
  objc_storeStrong((id *)ML3AlbumRulesRemovalSourceIdentityPropertyForSource_values, @"album_pid");
  objc_storeStrong((id *)&ML3AlbumRulesRemovalSourceIdentityPropertyForSource_values[1], @"sync_id");
  objc_storeStrong((id *)&ML3AlbumRulesRemovalSourceIdentityPropertyForSource_values[2], @"cloud_library_id");
  objc_storeStrong((id *)&ML3AlbumRulesRemovalSourceIdentityPropertyForSource_values[3], @"sync_id");
  char v0 = (void *)qword_1E9B31E18;
  qword_1E9B31E18 = 0;

  uint64_t v1 = (void *)qword_1E9B31E20;
  qword_1E9B31E20 = 0;

  uint64_t v2 = (void *)qword_1E9B31E28;
  qword_1E9B31E28 = 0;
}

id ML3TrackRulesRemovalPropertiesForSource(uint64_t a1)
{
  if (ML3TrackRulesRemovalPropertiesForSource_onceToken != -1) {
    dispatch_once(&ML3TrackRulesRemovalPropertiesForSource_onceToken, &__block_literal_global_83_5989);
  }
  if (a1 >= 7)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSDictionary *ML3TrackRulesRemovalPropertiesForSource(ML3TrackSource)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3TrackRules.m", 322, @"ML3TrackRulesRemovalPropertiesForSource called with invalid source=%d", a1);
  }
  uint64_t v2 = (void *)ML3TrackRulesRemovalPropertiesForSource_dictionaries[(int)a1];

  return v2;
}

void __ML3TrackRulesRemovalPropertiesForSource_block_invoke()
{
  void v24[4] = *MEMORY[0x1E4F143B8];
  char v0 = (void *)ML3TrackRulesRemovalPropertiesForSource_dictionaries[0];
  ML3TrackRulesRemovalPropertiesForSource_dictionaries[0] = MEMORY[0x1E4F1CC08];

  v23[0] = @"item_store.sync_id";
  v23[1] = @"item_store.sync_redownload_params";
  v24[0] = &unk_1F0910F78;
  v24[1] = &stru_1F08D4D70;
  v23[2] = @"item_store.playback_endpoint_type";
  v23[3] = @"item_store.sync_in_my_library";
  v24[2] = &unk_1F0910F90;
  void v24[3] = &unk_1F0910F78;
  uint64_t v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:4];
  uint64_t v2 = (void *)qword_1E9B319B0;
  qword_1E9B319B0 = v1;

  v21[0] = @"item_store.store_saga_id";
  v21[1] = @"item_store.match_redownload_params";
  v22[0] = &unk_1F0910F78;
  v22[1] = &stru_1F08D4D70;
  v21[2] = @"needs_reporting";
  v21[3] = @"item_store.playback_endpoint_type";
  v22[2] = &unk_1F0910F78;
  v22[3] = &unk_1F0910F90;
  void v21[4] = @"item_store.cloud_playback_endpoint_type";
  v21[5] = @"item_store.cloud_in_my_library";
  v22[4] = &unk_1F0910F78;
  v22[5] = &unk_1F0910F78;
  v21[6] = @"item_store.cloud_album_id";
  v21[7] = @"item_store.cloud_universal_library_id";
  v22[6] = &stru_1F08D4D70;
  v22[7] = &stru_1F08D4D70;
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:v21 count:8];
  uint64_t v4 = (void *)qword_1E9B319B8;
  qword_1E9B319B8 = v3;

  v19[0] = @"item_store.sync_id";
  v19[1] = @"item_stats.chosen_by_auto_fill";
  v20[0] = &unk_1F0910F78;
  v20[1] = &unk_1F0910F78;
  v19[2] = @"item_store.sync_redownload_params";
  void v19[3] = @"item_store.playback_endpoint_type";
  v20[2] = &stru_1F08D4D70;
  v20[3] = &unk_1F0910F90;
  void v19[4] = @"item_store.sync_in_my_library";
  void v20[4] = &unk_1F0910F78;
  uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:5];
  uint64_t v6 = (void *)qword_1E9B319C0;
  qword_1E9B319C0 = v5;

  v17[0] = @"item_store.purchase_history_id";
  v17[1] = @"item_store.purchase_history_token";
  v18[0] = &unk_1F0910F78;
  v18[1] = &unk_1F0910F78;
  v17[2] = @"item_store.purchase_history_redownload_params";
  v17[3] = @"item_store.playback_endpoint_type";
  void v18[2] = &stru_1F08D4D70;
  void v18[3] = &unk_1F0910F90;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:4];
  CFAllocatorRef v8 = (void *)qword_1E9B319C8;
  qword_1E9B319C8 = v7;

  int v15 = @"item_store.is_ota_purchased";
  char v16 = &unk_1F0910F78;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v16 forKeys:&v15 count:1];
  long long v10 = (void *)qword_1E9B319D0;
  qword_1E9B319D0 = v9;

  uint64_t v13 = @"item_store.is_subscription";
  uint64_t v14 = &unk_1F0910F78;
  uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v14 forKeys:&v13 count:1];
  long long v12 = (void *)qword_1E9B319D8;
  qword_1E9B319D8 = v11;
}

uint64_t ML3TrackRulesRemoveLocalAssetForSource(uint64_t a1)
{
  if (ML3TrackRulesRemoveLocalAssetForSource_onceToken != -1) {
    dispatch_once(&ML3TrackRulesRemoveLocalAssetForSource_onceToken, &__block_literal_global_95);
  }
  if (a1 >= 7)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"BOOL ML3TrackRulesRemoveLocalAssetForSource(ML3TrackSource)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3TrackRules.m", 341, @"ML3TrackRulesRemoveLocalAssetForSource called with invalid source=%d", a1);
  }
  return *((unsigned __int8 *)&ML3TrackRulesRemoveLocalAssetForSource_values + (int)a1);
}

double __ML3TrackRulesRemoveLocalAssetForSource_block_invoke()
{
  *(void *)&double result = 16777473;
  ML3TrackRulesRemoveLocalAssetForSource_values = 16777473;
  word_1E9B31E3C = 256;
  byte_1E9B31E3E = 1;
  return result;
}

uint64_t ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource(uint64_t a1)
{
  if (ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource_onceToken != -1) {
    dispatch_once(&ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource_onceToken, &__block_literal_global_100);
  }
  if (a1 >= 7)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"BOOL ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource(ML3TrackSource)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3TrackRules.m", 361, @"ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource called with invalid source=%d", a1);
  }
  return *((unsigned __int8 *)&ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource_values + (int)a1);
}

double __ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource_block_invoke()
{
  *(void *)&double result = 16777217;
  ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource_values = 16777217;
  word_1E9B319EC = 256;
  byte_1E9B319EE = 0;
  return result;
}

id ML3TrackRulesGetPropertyName(int a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(ML3TrackRulesGetRule(a1, a2) + 32);

  return v2;
}

uint64_t ML3TrackRulesGetRule(int a1, uint64_t a2)
{
  if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
  }
  uint64_t result = 0;
  switch(a1)
  {
    case 1:
      uint64_t v5 = __itemRules;
      goto LABEL_27;
    case 2:
      uint64_t v5 = __itemExtraRules;
      goto LABEL_27;
    case 3:
      uint64_t v5 = __itemPlaybackRules;
      goto LABEL_27;
    case 4:
      uint64_t v5 = __itemSearchRules;
      goto LABEL_27;
    case 5:
      uint64_t v5 = __itemStatsRules;
      goto LABEL_27;
    case 6:
      uint64_t v5 = __itemStoreRules;
      goto LABEL_27;
    case 7:
      uint64_t v5 = __itemVideoRules;
      goto LABEL_27;
    case 8:
      uint64_t v5 = __chapterRules;
      goto LABEL_27;
    case 9:
      uint64_t v5 = __lyricsRules;
      goto LABEL_27;
    case 10:
      uint64_t v5 = __specialRules;
      goto LABEL_27;
    case 11:
      uint64_t v5 = __containerRules;
      goto LABEL_27;
    case 12:
      uint64_t v5 = __containerSeedRules;
      goto LABEL_27;
    case 14:
      uint64_t v5 = __containerItemRules;
      goto LABEL_27;
    case 15:
      uint64_t v5 = __containerAuthorRules;
      goto LABEL_27;
    case 16:
      uint64_t v5 = __containerItemReactionRules;
      goto LABEL_27;
    case 17:
      uint64_t v5 = __albumRules;
      goto LABEL_27;
    case 18:
      uint64_t v5 = __albumArtistRules;
      goto LABEL_27;
    case 19:
      uint64_t v5 = __artistRules;
      goto LABEL_27;
    case 20:
      uint64_t v5 = __composerRules;
      goto LABEL_27;
    case 21:
      uint64_t v5 = __genreRules;
      goto LABEL_27;
    case 22:
      uint64_t v5 = __personRules;
      goto LABEL_27;
    case 23:
      uint64_t v5 = __containerItemPersonRules;
      goto LABEL_27;
    case 24:
      uint64_t v5 = __bookletRules;
LABEL_27:
      uint64_t result = v5 + 56 * a2;
      break;
    default:
      return result;
  }
  return result;
}

id ML3TrackRulesGetPropertyNameForKey(int a1, uint64_t a2)
{
  uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(a1, a2);
  if (PropertyIndex == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    CFAllocatorRef v8 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *ML3TrackRulesGetPropertyNameForKey(MLImportPropertyGroupKey, MLImportPropertyKey)");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, @"ML3TrackRules.m", 1169, @"no track rule found for property %X", a2);

    uint64_t PropertyIndex = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v5 = *(void **)(ML3TrackRulesGetRule(a1, PropertyIndex) + 32);

  return v5;
}

uint64_t ML3TrackRulesGetPropertyIndex(int a1, int a2)
{
  uint64_t Count = ML3TrackRulesGetCount(a1);
  if (!Count) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v5 = Count;
  uint64_t v6 = 0;
  while (*(_DWORD *)(ML3TrackRulesGetRule(a1, v6) + 48) != a2)
  {
    if (v5 == ++v6) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  return v6;
}

uint64_t ML3TrackRulesGetCount(int a1)
{
  if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
  }
  uint64_t result = 0;
  switch(a1)
  {
    case 1:
      BOOL v3 = __itemRulesCount == 0;
      uint64_t v4 = 37;
      goto LABEL_31;
    case 2:
      BOOL v3 = __itemExtraRulesCount == 0;
      uint64_t v4 = 33;
      goto LABEL_31;
    case 3:
      int v5 = __itemPlaybackRulesCount;
      goto LABEL_21;
    case 4:
      int v6 = __itemSearchRulesCount;
      goto LABEL_30;
    case 5:
      int v5 = __itemStatsRulesCount;
      goto LABEL_21;
    case 6:
      BOOL v3 = __itemStoreRulesCount == 0;
      uint64_t v4 = 59;
      goto LABEL_31;
    case 7:
      BOOL v3 = __itemVideoRulesCount == 0;
      uint64_t v4 = 38;
      goto LABEL_31;
    case 8:
      return __chapterRulesCount;
    case 9:
      int v6 = __lyricsRulesCount;
      goto LABEL_30;
    case 10:
      BOOL v3 = __specialRulesCount == 0;
      uint64_t v4 = 27;
      goto LABEL_31;
    case 11:
      BOOL v3 = __containerRulesCount == 0;
      uint64_t v4 = 89;
      goto LABEL_31;
    case 12:
      int v7 = __containerSeedRulesCount;
      goto LABEL_28;
    case 14:
      int v8 = __containerItemRulesCount;
      goto LABEL_26;
    case 15:
      int v6 = __containerAuthorRulesCount;
      goto LABEL_30;
    case 16:
      BOOL v3 = __containerItemReactionRulesCount == 0;
      uint64_t v4 = 4;
      goto LABEL_31;
    case 17:
      BOOL v3 = __albumRulesCount == 0;
      uint64_t v4 = 26;
      goto LABEL_31;
    case 18:
      int v5 = __albumArtistRulesCount;
LABEL_21:
      BOOL v3 = v5 == 0;
      uint64_t v4 = 20;
      goto LABEL_31;
    case 19:
      BOOL v3 = __artistRulesCount == 0;
      uint64_t v4 = 16;
      goto LABEL_31;
    case 20:
      BOOL v3 = __composerRulesCount == 0;
      uint64_t v4 = 10;
      goto LABEL_31;
    case 21:
      BOOL v3 = __genreRulesCount == 0;
      uint64_t v4 = 9;
      goto LABEL_31;
    case 22:
      int v8 = __personRulesCount;
LABEL_26:
      BOOL v3 = v8 == 0;
      uint64_t v4 = 6;
      goto LABEL_31;
    case 23:
      int v7 = __containerItemPersonRulesCount;
LABEL_28:
      BOOL v3 = v7 == 0;
      uint64_t v4 = 2;
      goto LABEL_31;
    case 24:
      int v6 = __bookletRulesCount;
LABEL_30:
      BOOL v3 = v6 == 0;
      uint64_t v4 = 5;
LABEL_31:
      if (v3) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ML3TrackRulesGetInsertionRule(int a1, uint64_t a2, int a3)
{
  return *(unsigned int *)(ML3TrackRulesGetRule(a1, a2) + 4 * a3);
}

uint64_t ML3TrackRulesShouldPreferMaximumValue(int a1, uint64_t a2)
{
  return *(unsigned __int8 *)(ML3TrackRulesGetRule(a1, a2) + 28);
}

uint64_t ML3TrackRulesGetPropertyKey(int a1, uint64_t a2)
{
  return *(unsigned int *)(ML3TrackRulesGetRule(a1, a2) + 48);
}

uint64_t ML3TrackRulesGetPropertyDatatype(int a1, uint64_t a2)
{
  return *(void *)(ML3TrackRulesGetRule(a1, a2) + 40);
}

void sub_1B037EA04(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1B037F9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t compareSortKeys(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  unint64_t v5 = [v4 length];
  unint64_t v6 = [v3 length];
  id v7 = v4;
  int v8 = (const void *)[v7 bytes];

  id v9 = v3;
  long long v10 = (const void *)[v9 bytes];

  if (v5 >= v6) {
    size_t v11 = v6;
  }
  else {
    size_t v11 = v5;
  }
  int v12 = memcmp(v8, v10, v11);
  uint64_t v13 = -1;
  if (v5 >= v6) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = -1;
  }
  if (v5 > v6) {
    uint64_t v14 = 1;
  }
  if (v12 >= 0) {
    uint64_t v13 = v14;
  }
  if (v12 <= 0) {
    return v13;
  }
  else {
    return 1;
  }
}

void sub_1B03811A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6243(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__6244(uint64_t a1)
{
}

void sub_1B03813E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B038199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B0381ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03822AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0383094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0383594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_1B0383804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03839EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0384EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_1B03853A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B038566C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void sub_1B0385744()
{
}

void sub_1B0385750()
{
}

void sub_1B038575C()
{
  if (v0) {
    JUMPOUT(0x1B0385768);
  }
  JUMPOUT(0x1B0385714);
}

uint64_t std::__shared_ptr_pointer<ML3HomeSharingContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingContainerImportItem>,std::allocator<ML3HomeSharingContainerImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_33ML3HomeSharingContainerImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3HomeSharingContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingContainerImportItem>,std::allocator<ML3HomeSharingContainerImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3HomeSharingContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingContainerImportItem>,std::allocator<ML3HomeSharingContainerImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B0385910(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3HomeSharingTrackImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingTrackImportItem>,std::allocator<ML3HomeSharingTrackImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_29ML3HomeSharingTrackImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3HomeSharingTrackImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingTrackImportItem>,std::allocator<ML3HomeSharingTrackImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3HomeSharingTrackImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingTrackImportItem>,std::allocator<ML3HomeSharingTrackImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B0385AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0385CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0385D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __ML3MaintenanceUtilitiesRemoveOrphanTracksAddedBeforeDate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

void __ML3MaintenanceUtilitiesRemoveOrphanTracksAddedBeforeDate_block_invoke_9(uint64_t a1, uint64_t a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  id v3 = +[ML3Entity newWithPersistentID:a2 inLibrary:*(void *)(a1 + 32)];
  id v4 = +[ML3Track containerQueryWithContainer:v3 predicate:*(void *)(a1 + 40)];
  v8[0] = @"item_extra.title";
  unint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:1];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __ML3MaintenanceUtilitiesRemoveOrphanTracksAddedBeforeDate_block_invoke_2;
  v6[3] = &unk_1E5FB5218;
  id v7 = *(id *)(a1 + 48);
  [v4 enumeratePersistentIDsAndProperties:v5 usingBlock:v6];
}

void __ML3MaintenanceUtilitiesRemoveOrphanTracksAddedBeforeDate_block_invoke_11(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *a3;
    int v10 = 134218242;
    uint64_t v11 = a2;
    __int16 v12 = 2114;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "[PH] %lld - %{public}@", (uint8_t *)&v10, 0x16u);
  }

  int v8 = *(void **)(a1 + 32);
  id v9 = [NSNumber numberWithLongLong:a2];
  [v8 removeObject:v9];
}

void __ML3MaintenanceUtilitiesRemoveOrphanTracksAddedBeforeDate_block_invoke_13(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *a3;
    int v10 = 134218242;
    uint64_t v11 = a2;
    __int16 v12 = 2114;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "[LC] %lld - %{public}@", (uint8_t *)&v10, 0x16u);
  }

  int v8 = *(void **)(a1 + 32);
  id v9 = [NSNumber numberWithLongLong:a2];
  [v8 removeObject:v9];
}

void __ML3MaintenanceUtilitiesRemoveOrphanTracksAddedBeforeDate_block_invoke_14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    int v11 = 134218498;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = v7;
    __int16 v15 = 2114;
    uint64_t v16 = v8;
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "[LC] %lld - %{public}@ (%{public}@)", (uint8_t *)&v11, 0x20u);
  }

  id v9 = *(void **)(a1 + 32);
  int v10 = [NSNumber numberWithLongLong:a2];
  [v9 removeObject:v10];
}

void __ML3MaintenanceUtilitiesRemoveOrphanTracksAddedBeforeDate_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *a3;
    int v10 = 134218242;
    uint64_t v11 = a2;
    __int16 v12 = 2114;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "[SC] %lld - %{public}@", (uint8_t *)&v10, 0x16u);
  }

  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = [NSNumber numberWithLongLong:a2];
  [v8 removeObject:v9];
}

void __ML3MaintenanceUtilitiesRemoveCachedPlaylistsNotPlayedSinceDate_block_invoke(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  id v9 = *a3;
  id v10 = a3[1];
  uint64_t v11 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v15 = 134218754;
    uint64_t v16 = a2;
    __int16 v17 = 2114;
    id v18 = v10;
    __int16 v19 = 2114;
    id v20 = v9;
    __int16 v21 = 1024;
    int v22 = v12;
    _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_DEFAULT, "[Maintenance] Purging playlist %lld - %{public}@ (%{public}@), purgedPlaylistCount=%d", (uint8_t *)&v15, 0x26u);
  }

  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = [NSNumber numberWithLongLong:a2];
  [v13 addObject:v14];

  if (a5 && *(int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= 10) {
    *a5 = 1;
  }
}

void __ML3MaintenanceUtilitiesConvertExistingArtworkToASTC_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v11 = *(void **)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 56);
    id v23 = 0;
    int v14 = [v11 replaceItemAtURL:v12 withItemAtURL:v13 backupItemName:0 options:1 resultingItemURL:0 error:&v23];
    os_log_t v9 = (os_log_t)v23;
    if (v14)
    {
      int v15 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(NSObject **)(a1 + 40);
        *(_DWORD *)long long buf = 138543362;
        os_log_t v25 = v16;
        __int16 v17 = "Artwork at %{public}@ successfully converted to ASTC format";
        id v18 = v15;
        uint32_t v19 = 12;
LABEL_13:
        _os_log_impl(&dword_1B022D000, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      int v20 = [*(id *)(a1 + 48) removeItemAtURL:*(void *)(a1 + 56) error:0];
      int v15 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void *)(a1 + 40);
        uint64_t v22 = *(void *)(a1 + 56);
        *(_DWORD *)long long buf = 138544130;
        os_log_t v25 = v9;
        __int16 v26 = 2114;
        uint64_t v27 = v21;
        __int16 v28 = 2114;
        uint64_t v29 = v22;
        __int16 v30 = 1024;
        int v31 = v20;
        __int16 v17 = "Error %{public}@ replacing artwork at %{public}@ with %{public}@ - temp file deleted %d";
        id v18 = v15;
        uint32_t v19 = 38;
        goto LABEL_13;
      }
    }

LABEL_15:
    goto LABEL_16;
  }
  unint64_t v5 = [v3 domain];
  if ([v5 isEqualToString:*MEMORY[0x1E4F778B0]])
  {
    uint64_t v6 = [v4 code];

    if (v6 == 1)
    {
      uint64_t v7 = *(void **)(a1 + 32);
      uint64_t v8 = [*(id *)(a1 + 40) absoluteString];
      [v7 addObject:v8];

      os_log_t v9 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138543618;
        os_log_t v25 = v4;
        __int16 v26 = 2114;
        uint64_t v27 = v10;
        _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_DEFAULT, "Error %{public}@ converting artwork at %{public}@ to ASTC", buf, 0x16u);
      }
      goto LABEL_15;
    }
  }
  else
  {
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
LABEL_16:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
}

uint64_t __ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 executeUpdate:@"PRAGMA foreign_keys = ON"])
  {
    id v4 = [MEMORY[0x1E4F1CA60] dictionary];
    unint64_t v5 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v6 = [v3 executeQuery:@"PRAGMA foreign_key_check"];
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = __ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck_block_invoke_40;
    v28[3] = &unk_1E5FB6278;
    id v7 = v4;
    id v29 = v7;
    id v8 = v5;
    id v30 = v8;
    [v6 enumerateRowsWithBlock:v28];
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck_block_invoke_2;
    v25[3] = &unk_1E5FB45B8;
    id v9 = v3;
    id v26 = v9;
    os_log_t v10 = (os_log_t)v7;
    os_log_t v27 = v10;
    [v10 enumerateKeysAndObjectsUsingBlock:v25];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck_block_invoke_3;
    v21[3] = &unk_1E5FB45E0;
    char v24 = *(unsigned char *)(a1 + 40);
    id v11 = v8;
    id v22 = v11;
    id v12 = v9;
    id v23 = v12;
    [v10 enumerateKeysAndObjectsUsingBlock:v21];
    if ([v10 count])
    {
      uint64_t v13 = (void *)MEMORY[0x1E4F77950];
      uint64_t v14 = *MEMORY[0x1E4F778D0];
      id v31 = v11;
      int v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v31 count:1];
      [v13 snapshotWithDomain:v14 type:@"Bug" subType:@"DatabaseIntegrity" context:@"ForeignKeyIntegrityCheck" triggerThresholdValues:0 events:v15 completion:0];
    }
    uint64_t v16 = [v12 executeUpdate:@"PRAGMA foreign_keys = OFF"];
    if ((v16 & 1) == 0)
    {
      __int16 v17 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        id v18 = [*(id *)(a1 + 32) databasePath];
        *(_DWORD *)long long buf = 138477827;
        char v33 = v18;
        _os_log_impl(&dword_1B022D000, v17, OS_LOG_TYPE_ERROR, "ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck: Error disabling foreign_key constraint for library at path %{private}@", buf, 0xCu);
      }
    }
  }
  else
  {
    os_log_t v10 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint32_t v19 = [*(id *)(a1 + 32) databasePath];
      *(_DWORD *)long long buf = 138477827;
      char v33 = v19;
      _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_ERROR, "ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck: Error enabling foreign_key constraint for library at path %{private}@", buf, 0xCu);
    }
    uint64_t v16 = 0;
  }

  return v16;
}

void __ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck_block_invoke_40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = [v3 objectAtIndexedSubscript:0];
  id v4 = [v3 objectAtIndexedSubscript:1];
  unint64_t v5 = [v3 objectAtIndexedSubscript:3];

  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v9];
  uint64_t v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:v9];

  if (!v6)
  {
    id v7 = [MEMORY[0x1E4F1CA80] set];
    [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v9];
  }
  id v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:v9];
  [v8 addObject:v4];
}

void __ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck_block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = NSString;
  id v6 = a2;
  id v9 = [v5 stringWithFormat:@"SELECT name FROM pragma_table_info(\"%@\"", v6, a3];
  id v7 = [*(id *)(a1 + 32) executeQuery:v9];
  id v8 = [v7 objectForFirstRowAndColumn];
  [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:v6];
}

void __ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v25 = a3;
  LODWORD(a3) = *(unsigned __int8 *)(a1 + 48);
  log = os_log_create("com.apple.amp.medialibrary", "Default");
  BOOL v6 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
  if (a3)
  {
    if (v6)
    {
      id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
      *(_DWORD *)long long buf = 134218242;
      uint64_t v32 = [v7 count];
      __int16 v33 = 2112;
      id v34 = v5;
      _os_log_impl(&dword_1B022D000, log, OS_LOG_TYPE_ERROR, "ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck: Removing %lu broken entries in %@", buf, 0x16u);
    }
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    log = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
    uint64_t v8 = [log countByEnumeratingWithState:&v27 objects:v37 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v28 != v10) {
            objc_enumerationMutation(log);
          }
          uint64_t v12 = *(void *)(*((void *)&v27 + 1) + 8 * i);
          uint64_t v13 = [NSString stringWithFormat:@"DELETE FROM %@ WHERE %@=%@", v5, v25, v12];
          uint64_t v14 = *(void **)(a1 + 40);
          id v26 = 0;
          int v15 = [v14 executeUpdate:v13 withParameters:MEMORY[0x1E4F1CBF0] error:&v26];
          id v16 = v26;
          __int16 v17 = os_log_create("com.apple.amp.medialibrary", "Default");
          id v18 = v17;
          if (v15)
          {
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_15;
            }
            *(_DWORD *)long long buf = 138412290;
            uint64_t v32 = (uint64_t)v13;
            uint32_t v19 = v18;
            os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
            uint64_t v21 = "ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck: Successfully executed statement: %@";
            uint32_t v22 = 12;
          }
          else
          {
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
              goto LABEL_15;
            }
            *(_DWORD *)long long buf = 138412802;
            uint64_t v32 = v12;
            __int16 v33 = 2112;
            id v34 = v5;
            __int16 v35 = 2112;
            id v36 = v16;
            uint32_t v19 = v18;
            os_log_type_t v20 = OS_LOG_TYPE_ERROR;
            uint64_t v21 = "ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck Error deleteing %@ from %@. err=%@";
            uint32_t v22 = 32;
          }
          _os_log_impl(&dword_1B022D000, v19, v20, v21, buf, v22);
LABEL_15:
        }
        uint64_t v9 = [log countByEnumeratingWithState:&v27 objects:v37 count:16];
      }
      while (v9);
    }
  }
  else if (v6)
  {
    id v23 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
    *(_DWORD *)long long buf = 134218242;
    uint64_t v32 = [v23 count];
    __int16 v33 = 2112;
    id v34 = v5;
    _os_log_impl(&dword_1B022D000, log, OS_LOG_TYPE_ERROR, "ML3MaintenanceUtilitiesPerformForeignKeyConstraintCheck: Found %lu broken entries in %@. Skipping deletion.", buf, 0x16u);
  }
}

void __ML3MaintenanceUtilitiesReconcileHLSAssetSize_block_invoke(uint64_t a1, NSObject *a2, id *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  BOOL v6 = *a3;
  id v7 = a3[1];
  id v8 = a3[2];
  uint64_t v9 = v8;
  if (v6) {
    BOOL v10 = v7 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v8 != 0)
  {
    uint64_t v12 = NSString;
    uint64_t v13 = [*(id *)(a1 + 32) libraryContainerPath];
    v27[0] = v13;
    v27[1] = v6;
    void v27[2] = v7;
    uint64_t v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:3];
    int v15 = [v12 pathWithComponents:v14];

    char v26 = 0;
    char v16 = [*(id *)(a1 + 40) fileExistsAtPath:v15 isDirectory:&v26];
    if (v16)
    {
      if (v26)
      {
        uint64_t v17 = MSVGetDiskUsageForPath();
        if (v17)
        {
          uint64_t v18 = v17;
          uint64_t v19 = [v9 longValue];
          os_log_type_t v20 = os_log_create("com.apple.amp.medialibrary", "Default");
          uint64_t v21 = v20;
          if (v18 == v19)
          {
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 134217984;
              long long v29 = a2;
              _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_DEBUG, "ML3MaintenanceUtilitiesReconcileHLSAssetSize: found correct file size for pid=%lld.", buf, 0xCu);
            }
          }
          else
          {
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 134218498;
              long long v29 = a2;
              __int16 v30 = 2048;
              id v31 = v18;
              __int16 v32 = 2114;
              id v33 = v9;
              _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_DEFAULT, "ML3MaintenanceUtilitiesReconcileHLSAssetSize: updating file size for pid=%lld. found: %ld expected: %{public}@", buf, 0x20u);
            }

            id v25 = +[ML3Entity newWithPersistentID:a2 inLibrary:*(void *)(a1 + 32)];
            [v25 populateLocationPropertiesWithPath:v15];

            *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += v18 - [v9 longValue];
            ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          }
        }
        else
        {
          char v24 = os_log_create("com.apple.amp.medialibrary", "Default");
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134218243;
            long long v29 = a2;
            __int16 v30 = 2113;
            id v31 = v15;
            _os_log_impl(&dword_1B022D000, v24, OS_LOG_TYPE_ERROR, "ML3MaintenanceUtilitiesReconcileHLSAssetSize found unexpected diskSize of 0 for item pid=%lld at path=%{private}@", buf, 0x16u);
          }
        }
        goto LABEL_24;
      }
      uint32_t v22 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138477827;
        long long v29 = v15;
        id v23 = "ML3MaintenanceUtilitiesReconcileHLSAssetSize expected directory at path=%{private}@";
        goto LABEL_22;
      }
    }
    else
    {
      uint32_t v22 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        long long v29 = v15;
        id v23 = "ML3MaintenanceUtilitiesReconcileHLSAssetSize failed to find file at path=%{public}@";
LABEL_22:
        _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0xCu);
      }
    }

    goto LABEL_24;
  }
  int v15 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134218755;
    long long v29 = a2;
    __int16 v30 = 2113;
    id v31 = v6;
    __int16 v32 = 2113;
    id v33 = v7;
    __int16 v34 = 2114;
    __int16 v35 = v9;
    _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_ERROR, "ML3MaintenanceUtilitiesReconcileHLSAssetSize: failed to lookup values for pid=%lld, path=%{private}@, fileName=%{private}@, size=%{public}@", buf, 0x2Au);
  }
LABEL_24:
}

void ML3MaintenanceUtilitiesMarkArtworkPurgeable(void *a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  [v1 updateRootArtworkPurgeability];
  uint64_t v2 = [v1 databasePath];
  id v3 = +[ML3MusicLibrary autoupdatingSharedLibraryPath];
  int v4 = [v2 isEqualToString:v3];

  if (v4)
  {
    id v41 = v1;
    id v5 = v1;
    int IsAppleTV = MSVDeviceIsAppleTV();
    uint64_t v7 = 1;
    if (!IsAppleTV) {
      uint64_t v7 = 2;
    }
    uint64_t v45 = v7;
    int v43 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v46 = v5;
    id v8 = [v5 rootArtworkCacheDirectory];
    uint64_t v9 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      CFRange v57 = v8;
      _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkCacheArtworkPurgeable - Marking purgeable cached artwork at path %{private}@", buf, 0xCu);
    }

    int v42 = [v43 enumeratorAtPath:v8];
    uint64_t v10 = [v42 nextObject];
    if (v10)
    {
      id v11 = (void *)v10;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = [v8 stringByAppendingPathComponent:v11];
        int v15 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unint64_t v51 = 138477827;
          uint64_t v52 = v14;
          _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkCacheArtworkPurgeable - Enumerating purgeable cached artwork size path %{private}@", v51, 0xCu);
        }

        CFDataRef v44 = (void *)v14;
        char v16 = [v43 enumeratorAtPath:v14];
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        uint64_t v17 = [v16 countByEnumeratingWithState:&v47 objects:buf count:16];
        if (v17)
        {
          uint64_t v18 = v17;
          uint64_t v19 = *(void *)v48;
          do
          {
            for (uint64_t i = 0; i != v18; ++i)
            {
              if (*(void *)v48 != v19) {
                objc_enumerationMutation(v16);
              }
              uint64_t v21 = *(void *)(*((void *)&v47 + 1) + 8 * i);
              uint32_t v22 = NSString;
              v55[0] = v8;
              v55[1] = v11;
              void v55[2] = v21;
              id v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:v55 count:3];
              char v24 = [v22 pathWithComponents:v23];

              MSVEnableDirStatsForDirectory();
              unsigned int v25 = [v46 markSystemPurgeableMusicPath:v24 forUrgency:v45];
              v13 += v25 ^ 1;
              v12 += v25;
              [v16 skipDescendants];
            }
            uint64_t v18 = [v16 countByEnumeratingWithState:&v47 objects:buf count:16];
          }
          while (v18);
        }
        [v42 skipDescendants];

        uint64_t v26 = [v42 nextObject];

        id v11 = (void *)v26;
      }
      while (v26);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v12 = 0;
    }
    long long v27 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unint64_t v51 = 134218240;
      uint64_t v52 = v12;
      __int16 v53 = 2048;
      uint64_t v54 = v13;
      _os_log_impl(&dword_1B022D000, v27, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkCacheArtworkPurgeable - Completed with with %llu files marked and %llu failures", v51, 0x16u);
    }

    id v28 = v46;
    id v1 = v41;
    if (MSVDeviceIsAppleTV())
    {
      uint64_t v29 = 2;
    }
    else
    {
      if ((MSVDeviceIsWatch() & 1) == 0)
      {
        __int16 v30 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1B022D000, v30, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkOrginalArtworkPurgeable - Original artwork is not purgeable. Skipping task.", buf, 2u);
        }
        goto LABEL_40;
      }
      uint64_t v29 = 3;
    }
    __int16 v30 = [v28 originalArtworkDirectory];
    id v31 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      CFRange v57 = v30;
      _os_log_impl(&dword_1B022D000, v31, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkOrginalArtworkPurgeable - Marking original artwork at path %{private}@", buf, 0xCu);
    }

    __int16 v32 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v33 = [v32 enumeratorAtPath:v30];
    uint64_t v34 = [v33 nextObject];
    if (v34)
    {
      __int16 v35 = (void *)v34;
      uint64_t v36 = 0;
      CFDataRef v37 = 0;
      do
      {
        buf[0] = 1;
        uint64_t v38 = [v30 stringByAppendingPathComponent:v35];
        [v32 fileExistsAtPath:v38 isDirectory:buf];
        if (!buf[0])
        {
          if ([v28 markSystemPurgeableMusicPath:v38 forUrgency:v29]) {
            CFDataRef v37 = ((char *)v37 + 1);
          }
          else {
            ++v36;
          }
        }

        uint64_t v39 = [v33 nextObject];

        __int16 v35 = (void *)v39;
      }
      while (v39);
    }
    else
    {
      CFDataRef v37 = 0;
      uint64_t v36 = 0;
    }
    size_t v40 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      CFRange v57 = v37;
      __int16 v58 = 2048;
      uint64_t v59 = v36;
      _os_log_impl(&dword_1B022D000, v40, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkOrginalArtworkPurgeable - Completed with with %llu files marked and %llu failures", buf, 0x16u);
    }

    id v1 = v41;
LABEL_40:
  }
}

void sub_1B038D1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id ML3ContainerItemReactionsDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerItemReactionsDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  id v3 = [NSString stringWithFormat:@"%@ LEFT OUTER JOIN container_item_reaction ON %@.ROWID = container_item_reaction.container_item_reaction_pid", a3, a3];

  return v3;
}

uint64_t ML3ContainerItemReactionsDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerItemReactionsDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ContainerItemReactionsDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerItemReactionsDatabaseImportDataSource *this)
{
  return 16;
}

void ML3ContainerItemReactionsDatabaseImportDataSource::~ML3ContainerItemReactionsDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

void sub_1B038F07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B038FAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03901C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ML3ContainerItemDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerItemDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  id v3 = [NSString stringWithFormat:@"%@ LEFT OUTER JOIN container_item ON %@.ROWID = container_item.container_item_pid", a3, a3];

  return v3;
}

uint64_t ML3ContainerItemDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerItemDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ContainerItemDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerItemDatabaseImportDataSource *this)
{
  return 14;
}

void ML3ContainerItemDatabaseImportDataSource::~ML3ContainerItemDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

void sub_1B0390D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7430(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__7431(uint64_t a1)
{
}

uint64_t ML3ItemStatsDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemStatsDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ItemStatsDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemStatsDatabaseImportDataSource *this)
{
  return 5;
}

void ML3ItemStatsDatabaseImportDataSource::~ML3ItemStatsDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

void sub_1B0391928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7520(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__7521(uint64_t a1)
{
}

void sub_1B0392D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B0393574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8120(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__8121(uint64_t a1)
{
}

void sub_1B0393A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t createRecentlyPlayedSearchCriteria()
{
  if (!NewSearchCriteriaList())
  {
    InitValueRangeCriteria();
    AppendValueRangeSearchCriterion();
    InitValueRangeCriteria();
    AppendSearchCriterion();
  }
  return 0;
}

uint64_t createTop25MostPlayedSearchCriteria()
{
  if (!NewSearchCriteriaList())
  {
    InitValueRangeCriteria();
    AppendSearchCriterion();
    AppendNumericSearchCriterion();
  }
  return 0;
}

uint64_t createMyTopRatedCriteria()
{
  if (!NewSearchCriteriaList()) {
    AppendNumericSearchCriterion();
  }
  return 0;
}

uint64_t createClassicalMusicSearchCriteria()
{
  if (!NewSearchCriteriaList())
  {
    if (!NewSearchCriteriaList())
    {
      InitValueRangeCriteria();
      AppendSearchCriterion();
      InitValueRangeCriteria();
      AppendSearchCriterion();
      AppendNestedSearchCriteriaList();
      DisposeSearchCriteriaList();
    }
    if (!NewSearchCriteriaList())
    {
      uint64_t v0 = 0;
      CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        uint64_t v2 = classicalGenreStrings[v0];
        uint64_t v3 = [(__CFString *)v2 length];
        int v4 = CFAllocatorAllocate(v1, 2 * v3 + 2, 0);
        if (v4)
        {
          id v5 = v4;
          *int v4 = v3;
          -[__CFString getCharacters:range:](v2, "getCharacters:range:", v4 + 1, 0, v3);
          AppendUStringSearchCriterion();
          CFAllocatorDeallocate(v1, v5);
        }

        ++v0;
      }
      while (v0 != 7);
      AppendNestedSearchCriteriaList();
      DisposeSearchCriteriaList();
    }
  }
  return 0;
}

uint64_t create90sMusicSearchCriteria()
{
  if (!NewSearchCriteriaList())
  {
    InitValueRangeCriteria();
    AppendValueRangeSearchCriterion();
    if (!NewSearchCriteriaList())
    {
      InitValueRangeCriteria();
      AppendSearchCriterion();
      InitValueRangeCriteria();
      AppendSearchCriterion();
      AppendNestedSearchCriteriaList();
      DisposeSearchCriteriaList();
    }
  }
  return 0;
}

void sub_1B03944A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B039463C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0394CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0395694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03957F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0397DCC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1B03980D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0398B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0398CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0399490(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

id DatePredicateForCriteriaInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(_DWORD *)(a1 + 4);
  int SearchCriterionInfoValueRange = GetSearchCriterionInfoValueRange();
  if (SearchCriterionInfoValueRange)
  {
    int v23 = SearchCriterionInfoValueRange;
    char v24 = [MEMORY[0x1E4F28B00] currentHandler];
    unsigned int v25 = objc_msgSend(NSString, "stringWithUTF8String:", "ML3Predicate *DatePredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
    [v24 handleFailureInFunction:v25, @"ML3Container.m", 256, @"Could not get value range for %@ date criterion: %ld", v3, v23 file lineNumber description];
  }
  CFTimeZoneRef v6 = CFTimeZoneCopySystem();
  uint64_t v7 = (double *)MEMORY[0x1E4F1CF68];
  CFAbsoluteTime v8 = (double)(GetValueRangeCriteriaStartValue() - (uint64_t)*v7);
  uint64_t v9 = (uint64_t)(v8 - CFTimeZoneGetSecondsFromGMT(v6, v8));
  CFAbsoluteTime v10 = (double)(GetValueRangeCriteriaEndValue() - (uint64_t)*v7);
  uint64_t v11 = (uint64_t)(v10 - CFTimeZoneGetSecondsFromGMT(v6, v10));
  CFRelease(v6);
  if ((v4 & 0xF0) != 0)
  {
    uint64_t matched = ML3ComparisonForCriteronMatchType(v4);
    uint64_t v13 = [NSNumber numberWithLongLong:v9];
    uint64_t v14 = +[ML3ComparisonPredicate predicateWithProperty:v3 value:v13 comparison:matched transformFunction:0];
  }
  else
  {
    if ((v4 & 0x301) == 0)
    {
      uint64_t v14 = 0;
      goto LABEL_17;
    }
    uint64_t v15 = [NSNumber numberWithLongLong:v9];
    if ((v4 & 0x101) != 0) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = 3;
    }
    if ((v4 & 0x101) != 0) {
      uint64_t v17 = 6;
    }
    else {
      uint64_t v17 = 5;
    }
    uint64_t v13 = +[ML3ComparisonPredicate predicateWithProperty:v3 value:v15 comparison:v16 transformFunction:0];

    uint64_t v18 = [NSNumber numberWithLongLong:v11];
    uint64_t v19 = +[ML3ComparisonPredicate predicateWithProperty:v3 value:v18 comparison:v17 transformFunction:0];

    os_log_type_t v20 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v13, v19, 0);
    uint64_t v14 = +[ML3CompoundPredicate predicateMatchingPredicates:v20];
  }
  if (v14 && (v4 & 0x2000000) != 0)
  {
    uint64_t v21 = +[ML3UnaryPredicate predicateWithPredicate:v14];

    uint64_t v14 = (void *)v21;
  }
LABEL_17:

  return v14;
}

uint64_t ML3ComparisonForCriteronMatchType(int a1)
{
  if (a1) {
    return 1;
  }
  if ((a1 & 0x10) != 0) {
    return 3;
  }
  if ((a1 & 8) != 0) {
    int v1 = 9;
  }
  else {
    int v1 = (a1 << 21 >> 31) & 0xA;
  }
  if ((a1 & 4) != 0) {
    int v2 = 8;
  }
  else {
    int v2 = v1;
  }
  if ((a1 & 2) != 0) {
    int v3 = 7;
  }
  else {
    int v3 = v2;
  }
  if ((a1 & 0x80) != 0) {
    int v4 = 6;
  }
  else {
    int v4 = v3;
  }
  if ((a1 & 0x40) != 0) {
    unsigned int v5 = 5;
  }
  else {
    unsigned int v5 = v4;
  }
  if ((a1 & 0x20) != 0) {
    return 4;
  }
  else {
    return v5;
  }
}

id BooleanPredicateForCriteriaInfo(int *a1, void *a2)
{
  id v3 = a2;
  int v4 = *a1;
  int v5 = a1[1];
  if ((v5 & 0x400) != 0 && v4 == 133)
  {
    int SearchCriterionInfoNumericValue = GetSearchCriterionInfoNumericValue();
    if (SearchCriterionInfoNumericValue)
    {
      int v14 = SearchCriterionInfoNumericValue;
      uint64_t v15 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v16 = objc_msgSend(NSString, "stringWithUTF8String:", "ML3Predicate *BooleanPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
      [v15 handleFailureInFunction:v16, @"ML3Container.m", 218, @"Could not get numeric value for %@ criterion: %ld", v3, v14 file lineNumber description];
    }
    uint64_t v7 = 0;
    goto LABEL_15;
  }
  if (v4 == 37)
  {
    int SearchCriterionInfoBooleanValue = GetSearchCriterionInfoBooleanValue();
    if (SearchCriterionInfoBooleanValue)
    {
      int v17 = SearchCriterionInfoBooleanValue;
      uint64_t v18 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v19 = objc_msgSend(NSString, "stringWithUTF8String:", "ML3Predicate *BooleanPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
      [v18 handleFailureInFunction:v19, @"ML3Container.m", 231, @"Could not get BOOLean value for %@ criterion: %ld", v3, v17 file lineNumber description];
    }
    uint64_t v9 = +[ML3ComparisonPredicate predicateWithProperty:v3 value:&stru_1F08D4D70 comparison:1];
    uint64_t v7 = (void *)v9;
    if (v9)
    {
LABEL_13:
      if ((v5 & 0x2000000) != 0)
      {
        uint64_t v10 = +[ML3UnaryPredicate predicateWithPredicate:v7];

        uint64_t v7 = (void *)v10;
      }
    }
  }
  else
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v7 = 0;
      goto LABEL_15;
    }
    int v12 = GetSearchCriterionInfoBooleanValue();
    if (v12)
    {
      int v20 = v12;
      uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
      uint32_t v22 = objc_msgSend(NSString, "stringWithUTF8String:", "ML3Predicate *BooleanPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
      [v21 handleFailureInFunction:v22, @"ML3Container.m", 237, @"Could not get BOOLean value for %@ criterion: %ld", v3, v20 file lineNumber description];
    }
    uint64_t v13 = [NSNumber numberWithInt:0];
    uint64_t v7 = +[ML3ComparisonPredicate predicateWithProperty:v3 value:v13 comparison:1];

    if (v7) {
      goto LABEL_13;
    }
  }
LABEL_15:

  return v7;
}

id NumericPredicateForCriteriaInfo(int *a1, void *a2)
{
  id v3 = a2;
  int v4 = a1[1];
  LODWORD(v28) = 0;
  int SearchCriterionInfoValueRange = GetSearchCriterionInfoValueRange();
  if (SearchCriterionInfoValueRange)
  {
    int v25 = SearchCriterionInfoValueRange;
    uint64_t v26 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v27 = objc_msgSend(NSString, "stringWithUTF8String:", "ML3Predicate *NumericPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
    [v26 handleFailureInFunction:v27, @"ML3Container.m", 316, @"Could not get value range for %@ criterion: %ld", v3, v25, 0, 0, 0, 0, 0, 0, 0, 0, v28 file lineNumber description];
  }
  uint64_t ValueRangeCriteriaStartValue = GetValueRangeCriteriaStartValue();
  uint64_t ValueRangeCriteriaEndValue = GetValueRangeCriteriaEndValue();
  if ((v4 & 0x4F1) != 0)
  {
    int v8 = *a1;
    unsigned int v9 = v4 & 0xFFFFFFFE ^ 0x401;
    if ((v4 & 0x400) == 0) {
      unsigned int v9 = v4;
    }
    uint64_t v10 = 33;
    if (ValueRangeCriteriaStartValue != 32) {
      uint64_t v10 = ValueRangeCriteriaStartValue;
    }
    if (v8 == 60) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = ValueRangeCriteriaStartValue;
    }
    if (v8 == 60) {
      int v4 = v9;
    }
    uint64_t matched = ML3ComparisonForCriteronMatchType(v4);
    uint64_t v13 = [NSNumber numberWithLongLong:v11];
    int v14 = +[ML3ComparisonPredicate predicateWithProperty:v3 value:v13 comparison:matched];

    if (!v14) {
      goto LABEL_29;
    }
LABEL_27:
    if ((v4 & 0x2000000) != 0)
    {
      uint64_t v23 = +[ML3UnaryPredicate predicateWithPredicate:v14];

      int v14 = (void *)v23;
    }
    goto LABEL_29;
  }
  uint64_t v15 = ValueRangeCriteriaEndValue;
  if ((v4 & 0x300) != 0)
  {
    uint64_t v16 = [NSNumber numberWithLongLong:ValueRangeCriteriaStartValue];
    if ((v4 & 0x100) != 0) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = 3;
    }
    if ((v4 & 0x100) != 0) {
      uint64_t v18 = 6;
    }
    else {
      uint64_t v18 = 5;
    }
    uint64_t v19 = +[ML3ComparisonPredicate predicateWithProperty:v3 value:v16 comparison:v17];

    int v20 = [NSNumber numberWithLongLong:v15];
    uint64_t v21 = +[ML3ComparisonPredicate predicateWithProperty:v3 value:v20 comparison:v18];

    uint32_t v22 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v19, v21, 0);
    int v14 = +[ML3CompoundPredicate predicateMatchingPredicates:v22];

    if (!v14) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if ((v4 & 0x800) == 0)
  {
    int v14 = 0;
    goto LABEL_29;
  }
  int v14 = +[ML3BitMaskPredicate predicateWithProperty:v3 mask:ValueRangeCriteriaStartValue value:ValueRangeCriteriaEndValue];
  if (v14) {
    goto LABEL_27;
  }
LABEL_29:

  return v14;
}

id StringPredicateForCriteriaInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(_DWORD *)(a1 + 4);
  uint64_t matched = ML3ComparisonForCriteronMatchType(v4);
  CFTimeZoneRef v6 = (void *)[[NSString alloc] initWithCharacters:*(void *)(a1 + 16) length:(unint64_t)*(unsigned int *)(a1 + 24) >> 1];
  uint64_t v7 = v6;
  if (*(_DWORD *)a1 == 9)
  {
    if ((matched - 1) > 8) {
      int v8 = &__block_literal_global_817;
    }
    else {
      int v8 = *(&off_1E5FB4D00 + (matched - 1));
    }
    uint64_t v13 = MEMORY[0x1E4F143A8];
    uint64_t v14 = 3221225472;
    uint64_t v15 = __StringPredicateForCriteriaInfo_block_invoke_6;
    uint64_t v16 = &unk_1E5FB4CE0;
    id v18 = v8;
    id v17 = v6;
    uint64_t v10 = ML3KindsPassingTest(&v13);
    if (objc_msgSend(v10, "count", v13, v14, v15, v16)) {
      +[ML3ContainmentPredicate predicateWithProperty:v3 values:v10];
    }
    else {
    unsigned int v9 = +[ML3TruthPredicate falsePredicate];
    }

    if (!v9) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v9 = +[ML3ComparisonPredicate predicateWithProperty:v3 value:v6 comparison:matched caseInsensitive:HIBYTE(v4) & 1 treatNullAsString:&stru_1F08D4D70];
    if (!v9) {
      goto LABEL_13;
    }
  }
  if ((v4 & 0x2000000) != 0)
  {
    uint64_t v11 = +[ML3UnaryPredicate predicateWithPredicate:v9];

    unsigned int v9 = (void *)v11;
  }
LABEL_13:

  return v9;
}

uint64_t __StringPredicateForCriteriaInfo_block_invoke_6(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, *(void *)(a1 + 32));
}

uint64_t __StringPredicateForCriteriaInfo_block_invoke_5()
{
  return 0;
}

uint64_t __StringPredicateForCriteriaInfo_block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "hasSuffix:");
}

uint64_t __StringPredicateForCriteriaInfo_block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "hasPrefix:");
}

uint64_t __StringPredicateForCriteriaInfo_block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "containsString:");
}

uint64_t __StringPredicateForCriteriaInfo_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqualToString:");
}

BOOL ML3ContainerItemPersonImportItem::hasValue(ML3ContainerItemPersonImportItem *this, int a2)
{
  return (a2 - 385875969) < 2;
}

uint64_t ML3ContainerItemPersonImportItem::getIntegerValue(ML3ContainerItemPersonImportItem *this, int a2)
{
  if (a2 == 385875970)
  {
    int v2 = (char *)this + 80;
    return *(void *)v2;
  }
  if (a2 == 385875969)
  {
    int v2 = (char *)this + 72;
    return *(void *)v2;
  }
  return 0;
}

uint64_t ML3ContainerItemPersonImportItem::isValid(ML3ContainerItemPersonImportItem *this)
{
  return 1;
}

void ML3ContainerItemPersonImportItem::~ML3ContainerItemPersonImportItem(ML3ContainerItemPersonImportItem *this)
{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);

  JUMPOUT(0x1B3E93610);
}

{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

void sub_1B039E2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B039E7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B039EA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ML3AlbumDatabaseImportDataSource::identityPropertyForSource(ML3AlbumDatabaseImportDataSource *this, uint64_t a2)
{
  return ML3AlbumRulesIdentityPropertyForSource(a2);
}

uint64_t ML3AlbumDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3AlbumDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3AlbumDatabaseImportDataSource::getImportPropertyGroupKey(ML3AlbumDatabaseImportDataSource *this)
{
  return 17;
}

void ML3AlbumDatabaseImportDataSource::~ML3AlbumDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

void sub_1B039F9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1B039FBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B039FC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B039FEC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03A0330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }

  _Unwind_Resume(a1);
}

void sub_1B03A0438()
{
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncAlbumArtistDeleteImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncAlbumArtistDeleteImportItem>,std::allocator<ML3ProtoSyncAlbumArtistDeleteImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_39ML3ProtoSyncAlbumArtistDeleteImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncAlbumArtistDeleteImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncAlbumArtistDeleteImportItem>,std::allocator<ML3ProtoSyncAlbumArtistDeleteImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ProtoSyncAlbumArtistDeleteImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncAlbumArtistDeleteImportItem>,std::allocator<ML3ProtoSyncAlbumArtistDeleteImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B03A07CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }

  _Unwind_Resume(a1);
}

void sub_1B03A086C()
{
}

void std::shared_ptr<ML3ImportItem>::shared_ptr[abi:ne180100]<ML3ProtoSyncContainerImportItem,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B03A08E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncContainerImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerImportItem>,std::allocator<ML3ProtoSyncContainerImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_31ML3ProtoSyncContainerImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncContainerImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerImportItem>,std::allocator<ML3ProtoSyncContainerImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ProtoSyncContainerImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerImportItem>,std::allocator<ML3ProtoSyncContainerImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B03A1BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44)
{
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  unint64_t v51 = *(std::__shared_weak_count **)(v49 - 120);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  uint64_t v52 = *(std::__shared_weak_count **)(v49 - 232);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }

  _Unwind_Resume(a1);
}

void sub_1B03A21E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03A231C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03A24F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03A2644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03A3314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  ML3ImportSession::~ML3ImportSession((ML3ImportSession *)&a63);
  _Unwind_Resume(a1);
}

void sub_1B03A3DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

void sub_1B03A3FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03A4118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03A4994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B03A5014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8751(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__8752(uint64_t a1)
{
}

void sub_1B03A5560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B03A5938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1B03A5C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03A5E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03A6390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B03A6760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void ML3CPPData::~ML3CPPData(ML3CPPData *this)
{
  ML3CPPData::~ML3CPPData(this);

  JUMPOUT(0x1B3E93610);
}

{
  *(void *)this = &unk_1F08C3128;
  if (*((void *)this + 2))
  {
    if (*((unsigned char *)this + 24)) {
      MEMORY[0x1B3E93610]();
    }
  }
}

void ML3CPPData::ML3CPPData(ML3CPPData *this, const void *__src, size_t __n, int a4)
{
  *(void *)this = &unk_1F08C3128;
  *((void *)this + 1) = __n;
  if (__n && a4) {
    operator new[]();
  }
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = a4;
  if (a4)
  {
    if (__src) {
      memcpy(0, __src, __n);
    }
    else {
      bzero(0, __n);
    }
  }
  else
  {
    *((void *)this + 2) = __src;
  }
}

id ML3CPPBridgeString(const UInt8 *a1, int a2)
{
  if (a2)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v2 = (uint64_t *)a1;
    }
    else {
      int v2 = *(uint64_t **)a1;
    }
    id v3 = [NSString stringWithUTF8String:v2];
  }
  else
  {
    int v4 = *((char *)a1 + 23);
    if (v4 >= 0) {
      int v5 = a1;
    }
    else {
      int v5 = *(const UInt8 **)a1;
    }
    if (v4 >= 0) {
      CFIndex v6 = a1[23];
    }
    else {
      CFIndex v6 = *((void *)a1 + 1);
    }
    id v3 = (void *)CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, v6, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  }

  return v3;
}

void ML3CPPBridgeNSData(NSData *a1, void *a2)
{
  id v2 = a2;
  [v2 bytes];
  [v2 length];
  operator new();
}

void sub_1B03A7214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ML3CPPStringFromData(NSData *a1, void *a2)
{
  id v3 = a2;
  std::string::basic_string[abi:ne180100](a1, (void *)[v3 bytes], objc_msgSend(v3, "length"));
}

void sub_1B03A7294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ML3CPPSanitizeString(std::string *this, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  int v5 = *(const std::string::value_type **)a2;
  std::string::size_type v6 = *(void *)(a2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = v5;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  for (; v3; --v3)
  {
    if (!*v7 || *(unsigned __int8 *)v7 == 191) {
      operator new();
    }
    ++v7;
  }
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(this, v5, v6);
  }
  else
  {
    *this = *(std::string *)a2;
  }
}

void sub_1B03A7D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 + 23) < 0) {
    operator delete(*(void **)v30);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5FAF1E0, MEMORY[0x1E4FBA1B8]);
}

void sub_1B03A7EF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
  return result;
}

void std::wstring::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  int v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::wstring::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5) {
      std::wstring::size_type v6 = __sz | 1;
    }
    uint64_t v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    int v5 = v7;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, 4 * __sz + 4);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8_utf16[abi:ne180100](std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);

  JUMPOUT(0x1B3E93610);
}

void ML3CPPStripInsignificantCharacters(void *a1, const UInt8 *a2)
{
  uint64_t v3 = ML3CPPBridgeString(a2, 0);
  int v4 = (void *)[v3 copyWithoutInsignificantPrefixAndCharacters];
  id v6 = v4;
  if (v4) {
    int v5 = (char *)[v4 UTF8String];
  }
  else {
    int v5 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(a1, v5);
}

void sub_1B03A80E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3CPPSortableString(std::string *a1, const UInt8 *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  ML3CPPStripInsignificantCharacters(&__s1, a2);
  uint64_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (size == v6)
  {
    if (v7 >= 0) {
      uint64_t v8 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v8 = *(unsigned __int8 **)a2;
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v10 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v8, __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_20;
      }
    }
    else
    {
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        return;
      }
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v8)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v8;
        if (!--v4)
        {
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
            return;
          }
          goto LABEL_19;
        }
      }
    }
  }
  std::string::operator=(a1, &__s1);
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
    return;
  }
LABEL_19:
  uint64_t v10 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_20:
  operator delete(v10);
}

void sub_1B03A81D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B03A86E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03A88E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03A8EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1B03A96DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    uint64_t v14 = NSString;
    uint32_t v22 = [v13 description];
    uint64_t v15 = [v14 stringWithFormat:@"*** Database Exception: %@"];

    uint64_t v16 = [v13 userInfo];
    uint64_t v17 = +[ML3MediaLibraryWriter writerErrorWithCode:301 description:v15 userInfo:v16];

    uint64_t v18 = _ML3LogCategoryDefault_Oversize();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = [v13 callStackSymbols];
      LODWORD(buf) = 138543618;
      *(void *)((char *)&buf + 4) = v17;
      WORD6(buf) = 2114;
      *(void *)((char *)&buf + 14) = v19;
      _os_log_impl(&dword_1B022D000, v18, OS_LOG_TYPE_ERROR, "Exception performing validation. Error=%{public}@. stackTrace=%{public}@", (uint8_t *)&buf, 0x16u);
    }
    int v20 = (void *)MEMORY[0x1E4F77950];
    uint64_t v21 = [NSString stringWithFormat:@"Error performing database migration: %@"];
    objc_msgSend(v20, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", *MEMORY[0x1E4F778D0], @"Bug", @"Migration Error", v21, 0, 0);

    objc_end_catch();
    if (!v17) {
      JUMPOUT(0x1B03A9638);
    }
    JUMPOUT(0x1B03A94F0);
  }
  _Unwind_Resume(a1);
}

uint64_t MIPGenreReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 != 2)
      {
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_47;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_39;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_41:
        uint64_t v32 = 16;
        goto LABEL_46;
      }
      uint64_t v29 = PBReaderReadString();
      uint64_t v30 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v29;

LABEL_47:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v24 = 0;
    unsigned int v25 = 0;
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 32) |= 1u;
    while (1)
    {
      uint64_t v26 = *v3;
      unint64_t v27 = *(void *)(a2 + v26);
      if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
      *(void *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0) {
        goto LABEL_43;
      }
      v24 += 7;
      BOOL v14 = v25++ >= 9;
      if (v14)
      {
        uint64_t v20 = 0;
        goto LABEL_45;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v20 = 0;
    }
LABEL_45:
    uint64_t v32 = 8;
LABEL_46:
    *(void *)(a1 + v32) = v20;
    goto LABEL_47;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1B03AB078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9227(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__9228(uint64_t a1)
{
}

void sub_1B03ABB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9336(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__9337(uint64_t a1)
{
}

void sub_1B03ABE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03ABEF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03ACA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  _Block_object_dispose(&a62, 8);
  std::__hash_table<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>>>::~__hash_table(a13);
  _Block_object_dispose(&STACK[0x200], 8);

  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9422(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__9423(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__55(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__56(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>>>::~__hash_table(a1 + 48);
}

void sub_1B03AD4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,void *>>>::operator()[abi:ne180100](1, v17);

  _Unwind_Resume(a1);
}

void sub_1B03AD800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1B03ADB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

void std::__throw_out_of_range[abi:ne180100]()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E5FAF1F0, MEMORY[0x1E4FBA1D0]);
}

void sub_1B03ADC10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1)
{
  uint64_t result = std::logic_error::logic_error(a1, "unordered_map::at: key not found");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1B03ADE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ML3ITunesSyncImportItem::_getFoundationValue(ML3ITunesSyncImportItem *this, uint64_t a2)
{
  if (a2 == 100663308)
  {
    uint64_t v2 = [NSNumber numberWithLongLong:*((void *)this + 9)];
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"virtual id ML3ITunesSyncImportItem::_getFoundationValue(MLImportPropertyKey) const"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3ITunesSyncImportItem.mm", 202, @"_getFoundationValue called with unknown property key %x", a2);

    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1B03ADF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ML3ITunesSyncImportItem::getDeduplicationPredicates(ML3ITunesSyncImportItem *this)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:3];
  if (*((void *)this + 9))
  {
    uint64_t v3 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", @"item_store.sync_id");
    [v2 addObject:v3];
  }

  return v2;
}

void sub_1B03ADFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ML3ITunesSyncImportItem::getSourceIdentifiers@<X0>(ML3ITunesSyncImportItem *this@<X0>, BOOL *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::vector<long long>::vector(a3);
  *a2 = 0;
  uint64_t v6 = *((void *)this + 9);
  if (v6) {
    *(void *)(*result + 24) = v6;
  }
  return result;
}

uint64_t ML3ITunesSyncImportItem::getDescription(ML3ITunesSyncImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3ITunesSyncImportItem ", 25);
  *(_DWORD *)((char *)&v5[1] + *(void *)(v5[0] - 24)) = *(_DWORD *)((unsigned char *)&v5[1] + *(void *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (void *)std::ostream::operator<<();
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v3 = (void *)std::ostream::operator<<();
  char v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v7);
}

void sub_1B03AE1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ML3ITunesSyncImportItem::hasValue(ML3ITunesSyncImportItem *this)
{
  uint64_t v1 = (*(void (**)(ML3ITunesSyncImportItem *))(*(void *)this + 216))(this);
  BOOL v2 = v1 != 0;

  return v2;
}

void ML3ITunesSyncImportItem::getDataValue(ML3ITunesSyncImportItem *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  BOOL v2 = (*(void (**)(ML3ITunesSyncImportItem *))(*(void *)this + 216))(this);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = v2;
    [v3 bytes];
    [v3 length];
    operator new();
  }
}

void sub_1B03AE340(_Unwind_Exception *a1)
{
  MEMORY[0x1B3E93610](v3, 0x1091C40934DB768);

  _Unwind_Resume(a1);
}

float ML3ITunesSyncImportItem::getFloatValue(ML3ITunesSyncImportItem *this)
{
  uint64_t v1 = (*(void (**)(ML3ITunesSyncImportItem *))(*(void *)this + 216))(this);
  if (objc_opt_respondsToSelector())
  {
    [v1 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 0.0;
    if (objc_opt_respondsToSelector())
    {
      [v1 doubleValue];
      float v3 = v4;
    }
  }

  return v3;
}

void sub_1B03AE420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncImportItem::getIntegerValue(ML3ITunesSyncImportItem *this)
{
  uint64_t v1 = (*(void (**)(ML3ITunesSyncImportItem *))(*(void *)this + 216))(this);
  if (objc_opt_respondsToSelector()) {
    uint64_t v2 = [v1 longLongValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1B03AE4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ITunesSyncImportItem::getStringValue(ML3ITunesSyncImportItem *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F08C3230;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  float v3 = (std::string *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  double v4 = (*(void (**)(ML3ITunesSyncImportItem *))(*(void *)this + 216))(this);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v5 = (char *)[v4 UTF8String];
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, v5);
      std::string::operator=(v3, &__str);
      *(unsigned char *)(a2 + 8) = 1;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        char v6 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_7:
        operator delete(v6);
      }
    }
  }
  else
  {
    __str.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    __str.__r_.__value_.__r.__words[2] = 0;
    *(unsigned char *)(a2 + 8) = 0;
    std::string::operator=(v3, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F08C3230;
    if (SHIBYTE(v9) < 0)
    {
      char v6 = (void *)__str.__r_.__value_.__r.__words[2];
      goto LABEL_7;
    }
  }
}

void sub_1B03AE5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  *(void *)uint64_t v20 = v21;
  if (*(char *)(v20 + 39) < 0) {
    operator delete(*v22);
  }
  _Unwind_Resume(a1);
}

void ML3ITunesSyncImportItem::~ML3ITunesSyncImportItem(id *this)
{
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

id ML3ITunesSyncTrackImportItem::_getFoundationValue(ML3ITunesSyncTrackImportItem *this, uint64_t a2)
{
  if ((a2 - 0x1000000) >> 25 > 4)
  {
    id v3 = 0;
  }
  else
  {
    id v3 = 0;
    if ((int)a2 <= 100663296)
    {
      if ((int)a2 <= 50331648)
      {
        switch((int)a2)
        {
          case 16777217:
LABEL_40:
            uint64_t v8 = _MLMediaTypeFromTrackProperiesDictionary(*((NSDictionary **)this + 12));
            goto LABEL_283;
          case 16777218:
          case 16777219:
          case 16777220:
          case 16777221:
          case 16777222:
          case 16777223:
          case 16777224:
          case 16777225:
          case 16777226:
          case 16777227:
          case 16777228:
          case 16777229:
          case 16777230:
          case 16777231:
          case 16777232:
          case 16777233:
          case 16777234:
          case 16777235:
          case 16777236:
          case 16777240:
          case 16777243:
          case 16777244:
          case 16777245:
          case 16777250:
          case 16777251:
          case 16777252:
          case 16777253:
            goto LABEL_278;
          case 16777237:
            uint64_t v8 = ML3ITunesSyncTrackImportItem::_getCurrentTrackDiscNumber((id *)this);
            goto LABEL_283;
          case 16777238:
            double v4 = [*((id *)this + 12) objectForKey:@"track_number"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"track_number"];
            goto LABEL_275;
          case 16777239:
            double v4 = [*((id *)this + 12) objectForKey:@"episode_sort_id"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"episode_sort_id"];
            goto LABEL_275;
          case 16777241:
LABEL_16:
            id v3 = &unk_1F09112F0;
            goto LABEL_278;
          case 16777242:
            double v4 = [*((id *)this + 12) objectForKey:@"exclude_from_shuffle"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"exclude_from_shuffle"];
            goto LABEL_275;
          case 16777246:
            double v4 = [*((id *)this + 12) objectForKey:@"is_compilation"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"is_compilation"];
            goto LABEL_275;
          case 16777247:
            double v4 = [*((id *)this + 12) objectForKey:@"date_created"];
            if (!v4) {
              goto LABEL_276;
            }
            unsigned int v19 = NSNumber;
            uint64_t v5 = [*((id *)this + 12) objectForKey:@"date_created"];
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();
            if (isKindOfClass)
            {
              uint64_t v21 = [*((id *)this + 12) objectForKey:@"date_created"];
            }
            else
            {
              uint64_t v21 = 0;
            }
            goto LABEL_300;
          case 16777248:
            double v4 = [*((id *)this + 12) objectForKey:@"show_composer"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"show_composer"];
            goto LABEL_275;
          case 16777249:
            double v4 = [*((id *)this + 12) objectForKey:@"is_music_show"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"is_music_show"];
            goto LABEL_275;
          default:
            switch((int)a2)
            {
              case 33554433:
                double v4 = [*((id *)this + 12) objectForKey:@"title"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"title"];
                goto LABEL_275;
              case 33554434:
                double v4 = [*((id *)this + 12) objectForKey:@"sort_name"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"sort_name"];
                goto LABEL_275;
              case 33554435:
                double v4 = [*((id *)this + 12) objectForKey:@"disc_count"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"disc_count"];
                goto LABEL_275;
              case 33554436:
                double v4 = [*((id *)this + 12) objectForKey:@"track_count"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"track_count"];
                goto LABEL_275;
              case 33554437:
                double v4 = [*((id *)this + 12) objectForKey:@"total_time_ms"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"total_time_ms"];
                goto LABEL_275;
              case 33554438:
                double v4 = [*((id *)this + 12) objectForKey:@"year"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"year"];
                goto LABEL_275;
              case 33554439:
              case 33554441:
              case 33554460:
              case 33554461:
              case 33554466:
                goto LABEL_278;
              case 33554440:
                double v4 = [*((id *)this + 10) objectForKey:@"location"];
                uint64_t v5 = [v4 objectForKey:@"file_size"];
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  unint64_t v17 = [*((id *)this + 10) objectForKey:@"location"];
                  uint64_t v18 = [v17 objectForKey:@"file_size"];
LABEL_159:
                  id v3 = (id)v18;
                }
                else
                {
LABEL_87:
                  id v3 = 0;
                }
                goto LABEL_306;
              case 33554442:
                uint64_t v8 = ML3ITunesSyncTrackImportItem::_getCurrentTrackIsAudibleAudioBook((id *)this);
                goto LABEL_283;
              case 33554443:
                double v4 = [*((id *)this + 12) objectForKey:@"date_modified"];
                if (!v4) {
                  goto LABEL_276;
                }
                unsigned int v19 = NSNumber;
                uint64_t v5 = [*((id *)this + 12) objectForKey:@"date_modified"];
                objc_opt_class();
                char isKindOfClass = objc_opt_isKindOfClass();
                if (isKindOfClass)
                {
                  uint64_t v21 = [*((id *)this + 12) objectForKey:@"date_modified"];
                }
                else
                {
                  uint64_t v21 = 0;
                }
                goto LABEL_300;
              case 33554444:
                goto LABEL_40;
              case 33554445:
                uint64_t v8 = ML3ITunesSyncTrackImportItem::_getCurrentTrackContentRating((id *)this);
                goto LABEL_283;
              case 33554446:
                uint64_t v8 = ML3ITunesSyncTrackImportItem::_getCurrentTrackRatingLevel((id *)this);
                goto LABEL_283;
              case 33554447:
                double v4 = [*((id *)this + 12) objectForKey:@"is_user_disabled"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"is_user_disabled"];
                goto LABEL_275;
              case 33554448:
                double v4 = [*((id *)this + 12) objectForKey:@"bpm"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"bpm"];
                goto LABEL_275;
              case 33554449:
                double v4 = [*((id *)this + 12) objectForKey:@"genius_id"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"genius_id"];
                goto LABEL_275;
              case 33554450:
                double v4 = [*((id *)this + 12) objectForKey:@"comment"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"comment"];
                goto LABEL_275;
              case 33554451:
                double v4 = [*((id *)this + 12) objectForKey:@"grouping"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"grouping"];
                goto LABEL_275;
              case 33554452:
                double v4 = [*((id *)this + 12) objectForKey:@"description"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"description"];
                goto LABEL_275;
              case 33554453:
                double v4 = [*((id *)this + 12) objectForKey:@"description_long"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"description_long"];
                goto LABEL_275;
              case 33554454:
                double v4 = [*((id *)this + 12) objectForKey:@"collection_description"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"collection_description"];
                goto LABEL_275;
              case 33554455:
                double v4 = [*((id *)this + 12) objectForKey:@"copyright"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"copyright"];
                goto LABEL_275;
              case 33554456:
                double v4 = [*((id *)this + 12) objectForKey:@"genius_checksum"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"genius_checksum"];
                goto LABEL_275;
              case 33554457:
                goto LABEL_16;
              case 33554458:
                uint64_t v8 = ML3ITunesSyncTrackImportItem::_getCurrentTrackLocationKind((id *)this);
                goto LABEL_283;
              case 33554462:
                double v4 = [*((id *)this + 12) objectForKey:@"work"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"work"];
                goto LABEL_275;
              case 33554463:
                double v4 = [*((id *)this + 12) objectForKey:@"movement_name"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"movement_name"];
                goto LABEL_275;
              case 33554464:
                double v4 = [*((id *)this + 12) objectForKey:@"movement_count"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"movement_count"];
                goto LABEL_275;
              case 33554465:
                double v4 = [*((id *)this + 12) objectForKey:@"movement_number"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_276;
                }
                uint64_t v9 = [*((id *)this + 12) objectForKey:@"movement_number"];
                goto LABEL_275;
              default:
                goto LABEL_282;
            }
        }
      }
      switch((int)a2)
      {
        case 83886081:
          double v4 = [*((id *)this + 13) objectForKey:@"user_rating"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 13) objectForKey:@"user_rating"];
          goto LABEL_275;
        case 83886082:
        case 83886095:
LABEL_18:
          id v3 = (id)MEMORY[0x1E4F1CC28];
          goto LABEL_278;
        case 83886083:
        case 83886098:
        case 83886100:
          goto LABEL_278;
        case 83886084:
          double v4 = [*((id *)this + 13) objectForKey:@"play_count_user"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 13) objectForKey:@"play_count_user"];
          goto LABEL_275;
        case 83886085:
          double v4 = [*((id *)this + 13) objectForKey:@"play_count_recent"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 13) objectForKey:@"play_count_recent"];
          goto LABEL_275;
        case 83886086:
          double v4 = [*((id *)this + 13) objectForKey:@"has_been_played"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 13) objectForKey:@"has_been_played"];
          goto LABEL_275;
        case 83886087:
          double v4 = [*((id *)this + 13) objectForKey:@"date_played"];
          if (!v4) {
            goto LABEL_276;
          }
          unsigned int v19 = NSNumber;
          uint64_t v5 = [*((id *)this + 13) objectForKey:@"date_played"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass) {
            goto LABEL_207;
          }
          uint64_t v21 = 0;
          goto LABEL_300;
        case 83886088:
          double v4 = [*((id *)this + 13) objectForKey:@"date_skipped"];
          if (!v4) {
            goto LABEL_276;
          }
          unsigned int v19 = NSNumber;
          uint64_t v5 = [*((id *)this + 13) objectForKey:@"date_skipped"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v21 = [*((id *)this + 13) objectForKey:@"date_skipped"];
          }
          else
          {
            uint64_t v21 = 0;
          }
          goto LABEL_300;
        case 83886089:
          double v4 = [*((id *)this + 13) objectForKey:@"date_played"];
          if (!v4) {
            goto LABEL_276;
          }
          unsigned int v19 = NSNumber;
          uint64_t v5 = [*((id *)this + 13) objectForKey:@"date_played"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
LABEL_207:
            uint64_t v21 = [*((id *)this + 13) objectForKey:@"date_played"];
          }
          else
          {
            uint64_t v21 = 0;
          }
LABEL_300:
          [v21 timeIntervalSinceReferenceDate];
          objc_msgSend(v19, "numberWithDouble:");
          id v3 = (id)objc_claimAutoreleasedReturnValue();
          if (isKindOfClass) {

          }
          goto LABEL_306;
        case 83886090:
          double v4 = [*((id *)this + 12) objectForKey:@"is_alarm"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 12) objectForKey:@"is_alarm"];
          goto LABEL_275;
        case 83886091:
          double v4 = [*((id *)this + 13) objectForKey:@"skip_count_user"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 13) objectForKey:@"skip_count_user"];
          goto LABEL_275;
        case 83886092:
          double v4 = [*((id *)this + 13) objectForKey:@"skip_count_recent"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 13) objectForKey:@"skip_count_recent"];
          goto LABEL_275;
        case 83886093:
          double v4 = [*((id *)this + 12) objectForKey:@"remember_bookmark"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 12) objectForKey:@"remember_bookmark"];
          goto LABEL_275;
        case 83886094:
          double v4 = [*((id *)this + 13) objectForKey:@"bookmark_time_ms"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 13) objectForKey:@"bookmark_time_ms"];
          goto LABEL_275;
        case 83886096:
          double v4 = [*((id *)this + 12) objectForKey:@"chosen_by_auto_fill"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 12) objectForKey:@"chosen_by_auto_fill"];
          goto LABEL_275;
        case 83886097:
          double v4 = [*((id *)this + 13) objectForKey:@"liked_state"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 13) objectForKey:@"liked_state"];
          goto LABEL_275;
        case 83886099:
          double v4 = [*((id *)this + 13) objectForKey:@"user_rating_is_derived"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v9 = [*((id *)this + 13) objectForKey:@"user_rating_is_derived"];
LABEL_275:
            id v3 = (id)v9;
          }
          else
          {
LABEL_276:
            id v3 = 0;
          }
          break;
        default:
          if ((a2 - 67108865) >= 5)
          {
LABEL_282:
            uint64_t v8 = ML3ITunesSyncImportItem::_getFoundationValue(this, a2);
LABEL_283:
            id v3 = (id)v8;
          }
          goto LABEL_278;
      }
    }
    else if ((int)a2 <= 117440512)
    {
      switch((int)a2)
      {
        case 100663297:
          char v23 = [*((id *)this + 16) objectForKey:@"store_item_id"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            char v24 = [*((id *)this + 16) objectForKey:@"store_item_id"];
          }
          else
          {
            char v24 = 0;
          }

          if ([v24 longLongValue] == -1) {
            id v3 = &unk_1F09112F0;
          }
          else {
            id v3 = v24;
          }

          goto LABEL_278;
        case 100663298:
          double v4 = [*((id *)this + 16) objectForKey:@"composer_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"composer_id"];
          goto LABEL_275;
        case 100663299:
          double v4 = [*((id *)this + 16) objectForKey:@"genre_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"genre_id"];
          goto LABEL_275;
        case 100663300:
          double v4 = [*((id *)this + 16) objectForKey:@"playlist_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"playlist_id"];
          goto LABEL_275;
        case 100663301:
          double v4 = [*((id *)this + 16) objectForKey:@"storefront_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"storefront_id"];
          goto LABEL_275;
        case 100663302:
          double v4 = [*((id *)this + 12) objectForKey:@"purchase_history_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 12) objectForKey:@"purchase_history_id"];
          goto LABEL_275;
        case 100663303:
          double v4 = [*((id *)this + 12) objectForKey:@"purchase_history_token"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 12) objectForKey:@"purchase_history_token"];
          goto LABEL_275;
        case 100663304:
        case 100663305:
        case 100663306:
        case 100663315:
        case 100663324:
        case 100663330:
        case 100663331:
        case 100663332:
        case 100663333:
        case 100663334:
        case 100663340:
        case 100663341:
        case 100663342:
        case 100663348:
        case 100663349:
        case 100663350:
        case 100663351:
        case 100663352:
        case 100663353:
        case 100663354:
        case 100663355:
        case 100663356:
        case 100663357:
          goto LABEL_278;
        case 100663307:
          double v4 = [*((id *)this + 12) objectForKey:@"cloud_status"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 12) objectForKey:@"cloud_status"];
          goto LABEL_275;
        case 100663309:
        case 100663336:
        case 100663337:
        case 100663338:
        case 100663339:
        case 100663343:
        case 100663344:
        case 100663345:
        case 100663347:
          goto LABEL_16;
        case 100663310:
          goto LABEL_18;
        case 100663311:
          double v4 = [*((id *)this + 16) objectForKey:@"store_kind"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"store_kind"];
          goto LABEL_275;
        case 100663312:
          double v4 = [*((id *)this + 16) objectForKey:@"account_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"account_id"];
          goto LABEL_275;
        case 100663313:
          double v4 = [*((id *)this + 16) objectForKey:@"download_account_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"download_account_id"];
          goto LABEL_275;
        case 100663314:
          double v4 = [*((id *)this + 16) objectForKey:@"family_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"family_id"];
          goto LABEL_275;
        case 100663316:
          double v4 = [*((id *)this + 16) objectForKey:@"key_versions"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"key_versions"];
          goto LABEL_275;
        case 100663317:
          double v4 = [*((id *)this + 16) objectForKey:@"key_platform_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"key_platform_id"];
          goto LABEL_275;
        case 100663318:
          double v4 = [*((id *)this + 16) objectForKey:@"key_id"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"key_id"];
          goto LABEL_275;
        case 100663319:
          double v4 = [*((id *)this + 12) objectForKey:@"key_id_2"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 12) objectForKey:@"key_id_2"];
          goto LABEL_275;
        case 100663320:
          double v4 = [*((id *)this + 16) objectForKey:@"date_purchased"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"date_purchased"];
          goto LABEL_275;
        case 100663321:
          double v4 = [*((id *)this + 16) objectForKey:@"date_released"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"date_released"];
          goto LABEL_275;
        case 100663322:
          double v4 = [*((id *)this + 14) objectForKey:@"external_guid"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 14) objectForKey:@"external_guid"];
          goto LABEL_275;
        case 100663323:
          double v4 = [*((id *)this + 14) objectForKey:@"feed_url"];
          uint64_t v5 = v4;
          if (!v4)
          {
            uint64_t v5 = [*((id *)this + 12) objectForKey:@"feed_url"];
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            char v6 = [*((id *)this + 14) objectForKey:@"feed_url"];
            if (v6)
            {
LABEL_149:
              id v7 = v6;
            }
            else
            {
              id v7 = [*((id *)this + 12) objectForKey:@"feed_url"];
            }
LABEL_304:
            id v3 = v7;
          }
          else
          {
LABEL_224:
            id v3 = 0;
          }
          if (!v4) {
            break;
          }
          goto LABEL_277;
        case 100663325:
          double v4 = [*((id *)this + 16) objectForKey:@"xid"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"xid"];
          goto LABEL_275;
        case 100663326:
          double v4 = [*((id *)this + 16) objectForKey:@"flavor"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"flavor"];
          goto LABEL_275;
        case 100663327:
          double v4 = [*((id *)this + 16) objectForKey:@"matched_status"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"matched_status"];
          goto LABEL_275;
        case 100663328:
          double v4 = [*((id *)this + 16) objectForKey:@"redownloaded_status"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_276;
          }
          uint64_t v9 = [*((id *)this + 16) objectForKey:@"redownloaded_status"];
          goto LABEL_275;
        case 100663346:
          double v4 = [*((id *)this + 12) objectForKey:@"is_playlist_only"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            id v3 = &unk_1F0911308;
            goto LABEL_277;
          }
          uint64_t v5 = [*((id *)this + 12) objectForKey:@"is_playlist_only"];
          if (v5)
          {
            unint64_t v22 = NSNumber;
            unint64_t v17 = [*((id *)this + 12) objectForKey:@"is_playlist_only"];
            uint64_t v18 = objc_msgSend(v22, "numberWithBool:", objc_msgSend(v17, "BOOLValue") ^ 1);
            goto LABEL_159;
          }
          id v3 = &unk_1F0911308;
          break;
        default:
          goto LABEL_282;
      }
LABEL_306:
    }
    else
    {
      if ((int)a2 > 150994945)
      {
        switch((int)a2)
        {
          case 167772161:
            double v4 = [*((id *)this + 12) objectForKey:@"artist"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"artist"];
            goto LABEL_275;
          case 167772162:
            double v4 = [*((id *)this + 17) objectForKey:@"series_name"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"series_name"];
            goto LABEL_275;
          case 167772163:
            double v4 = [*((id *)this + 12) objectForKey:@"album_artist"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"album_artist"];
            goto LABEL_275;
          case 167772164:
            double v4 = [*((id *)this + 12) objectForKey:@"album"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"album"];
            goto LABEL_275;
          case 167772165:
            double v4 = [*((id *)this + 12) objectForKey:@"composer"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"composer"];
            goto LABEL_275;
          case 167772166:
            double v4 = [*((id *)this + 12) objectForKey:@"genre"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"genre"];
            goto LABEL_275;
          case 167772167:
            double v4 = [*((id *)this + 12) objectForKey:@"sort_artist"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"sort_artist"];
            goto LABEL_275;
          case 167772168:
            double v4 = [*((id *)this + 17) objectForKey:@"sort_series_name"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"sort_series_name"];
            goto LABEL_275;
          case 167772169:
            double v4 = [*((id *)this + 12) objectForKey:@"sort_album_artist"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"sort_album_artist"];
            goto LABEL_275;
          case 167772170:
            double v4 = [*((id *)this + 12) objectForKey:@"sort_album"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"sort_album"];
            goto LABEL_275;
          case 167772171:
            double v4 = [*((id *)this + 12) objectForKey:@"sort_composer"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"sort_composer"];
            goto LABEL_275;
          case 167772172:
            goto LABEL_282;
          case 167772173:
            double v4 = [*((id *)this + 10) objectForKey:@"location"];
            uint64_t v5 = [v4 objectForKey:@"location"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_87;
            }
            int v15 = [*((id *)this + 10) objectForKey:@"location"];
            uint64_t v16 = [v15 objectForKey:@"location"];

            id v3 = (id)v16;
            goto LABEL_306;
          case 167772174:
          case 167772175:
          case 167772176:
          case 167772177:
          case 167772178:
          case 167772179:
          case 167772181:
          case 167772184:
          case 167772187:
          case 167772188:
            goto LABEL_278;
          case 167772180:
            double v4 = [*((id *)this + 16) objectForKey:@"artist_id"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 16) objectForKey:@"artist_id"];
            goto LABEL_275;
          case 167772182:
            double v4 = [*((id *)this + 13) objectForKey:@"album_liked_state"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 13) objectForKey:@"album_liked_state"];
            goto LABEL_275;
          case 167772183:
            double v4 = [*((id *)this + 12) objectForKey:@"artwork_cache_id"];
            objc_opt_class();
            char v13 = objc_opt_isKindOfClass();
            if (v13)
            {
              BOOL v14 = [*((id *)this + 12) objectForKey:@"artwork_cache_id"];
            }
            else
            {
              BOOL v14 = 0;
            }
            id v3 = [v14 stringValue];
            if (v13) {

            }
            goto LABEL_277;
          case 167772185:
            double v4 = [*((id *)this + 13) objectForKey:@"album_rating"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 13) objectForKey:@"album_rating"];
            goto LABEL_275;
          case 167772186:
            double v4 = [*((id *)this + 13) objectForKey:@"album_rating_is_derived"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 13) objectForKey:@"album_rating_is_derived"];
            goto LABEL_275;
          default:
            if ((a2 - 150994947) < 3) {
              goto LABEL_278;
            }
            if (a2 != 150994946) {
              goto LABEL_282;
            }
            double v4 = [*((id *)this + 18) objectForKey:@"checksum"];
            objc_opt_class();
            id v3 = &unk_1F09112F0;
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_277;
            }
            uint64_t v10 = [*((id *)this + 18) objectForKey:@"checksum"];
            uint64_t v11 = (void *)v10;
            if (v10) {
              unint64_t v12 = (void *)v10;
            }
            else {
              unint64_t v12 = &unk_1F09112F0;
            }
            break;
        }
      }
      else
      {
        switch((int)a2)
        {
          case 117440513:
            double v4 = [*((id *)this + 17) objectForKey:@"quality"];
            uint64_t v5 = v4;
            if (!v4)
            {
              uint64_t v5 = [*((id *)this + 17) objectForKey:@"is_hd"];
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_224;
            }
            char v6 = [*((id *)this + 17) objectForKey:@"quality"];
            if (v6) {
              goto LABEL_149;
            }
            id v7 = [*((id *)this + 17) objectForKey:@"is_hd"];
            goto LABEL_304;
          case 117440514:
            double v4 = [*((id *)this + 12) objectForKey:@"is_rental"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"is_rental"];
            goto LABEL_275;
          case 117440515:
            double v4 = [*((id *)this + 12) objectForKey:@"has_chapter_data"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 12) objectForKey:@"has_chapter_data"];
            goto LABEL_275;
          case 117440516:
            double v4 = [*((id *)this + 17) objectForKey:@"season_number"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"season_number"];
            goto LABEL_275;
          case 117440517:
            double v4 = [*((id *)this + 17) objectForKey:@"episode_id"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"episode_id"];
            goto LABEL_275;
          case 117440518:
            double v4 = [*((id *)this + 17) objectForKey:@"network_name"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"network_name"];
            goto LABEL_275;
          case 117440519:
            double v4 = [*((id *)this + 17) objectForKey:@"extended_content_rating"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"extended_content_rating"];
            goto LABEL_275;
          case 117440520:
            double v4 = [*((id *)this + 17) objectForKey:@"movie_info"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"movie_info"];
            goto LABEL_275;
          case 117440521:
            double v4 = [*((id *)this + 17) objectForKey:@"has_alternate_audio"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"has_alternate_audio"];
            goto LABEL_275;
          case 117440522:
            double v4 = [*((id *)this + 17) objectForKey:@"has_subtitles"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"has_subtitles"];
            goto LABEL_275;
          case 117440523:
            double v4 = [*((id *)this + 17) objectForKey:@"audio_language"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"audio_language"];
            goto LABEL_275;
          case 117440524:
            double v4 = [*((id *)this + 17) objectForKey:@"audio_track_index"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"audio_track_index"];
            goto LABEL_275;
          case 117440525:
            double v4 = [*((id *)this + 17) objectForKey:@"audio_track_id"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"audio_track_id"];
            goto LABEL_275;
          case 117440526:
            double v4 = [*((id *)this + 17) objectForKey:@"subtitle_language"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"subtitle_language"];
            goto LABEL_275;
          case 117440527:
            double v4 = [*((id *)this + 17) objectForKey:@"subtitle_track_index"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"subtitle_track_index"];
            goto LABEL_275;
          case 117440528:
            double v4 = [*((id *)this + 15) objectForKey:@"rental_duration"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 15) objectForKey:@"rental_duration"];
            goto LABEL_275;
          case 117440529:
            double v4 = [*((id *)this + 15) objectForKey:@"rental_playback_duration"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 15) objectForKey:@"rental_playback_duration"];
            goto LABEL_275;
          case 117440530:
            double v4 = [*((id *)this + 15) objectForKey:@"rental_playback_date_started"];
            if (!v4) {
              goto LABEL_276;
            }
            unsigned int v19 = NSNumber;
            uint64_t v5 = [*((id *)this + 15) objectForKey:@"rental_playback_date_started"];
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();
            if (isKindOfClass)
            {
              uint64_t v21 = [*((id *)this + 15) objectForKey:@"rental_playback_date_started"];
            }
            else
            {
              uint64_t v21 = 0;
            }
            goto LABEL_300;
          case 117440531:
            double v4 = [*((id *)this + 15) objectForKey:@"rental_date_started"];
            if (!v4) {
              goto LABEL_276;
            }
            unsigned int v19 = NSNumber;
            uint64_t v5 = [*((id *)this + 15) objectForKey:@"rental_date_started"];
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();
            if (isKindOfClass)
            {
              uint64_t v21 = [*((id *)this + 15) objectForKey:@"rental_date_started"];
            }
            else
            {
              uint64_t v21 = 0;
            }
            goto LABEL_300;
          case 117440532:
            double v4 = [*((id *)this + 15) objectForKey:@"is_demo"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 15) objectForKey:@"is_demo"];
            goto LABEL_275;
          case 117440533:
          case 117440534:
          case 117440539:
          case 117440542:
          case 117440543:
          case 117440544:
          case 117440545:
          case 117440546:
          case 117440547:
          case 117440548:
          case 117440549:
          case 117440550:
            goto LABEL_278;
          case 117440535:
            double v4 = [*((id *)this + 15) objectForKey:@"show_sort_type"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 15) objectForKey:@"show_sort_type"];
            goto LABEL_275;
          case 117440536:
            double v4 = [*((id *)this + 15) objectForKey:@"episode_type"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 15) objectForKey:@"episode_type"];
            goto LABEL_275;
          case 117440537:
            double v4 = [*((id *)this + 17) objectForKey:@"episode_type_display_name"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"episode_type_display_name"];
            goto LABEL_275;
          case 117440538:
            double v4 = [*((id *)this + 17) objectForKey:@"episode_sub_sort_order"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"episode_sub_sort_order"];
            goto LABEL_275;
          case 117440540:
            goto LABEL_16;
          case 117440541:
            double v4 = [*((id *)this + 17) objectForKey:@"color_capability"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_276;
            }
            uint64_t v9 = [*((id *)this + 17) objectForKey:@"color_capability"];
            goto LABEL_275;
          default:
            if (a2 == 134217729)
            {
              uint64_t v8 = ML3ITunesSyncTrackImportItem::_getCurrentTrackChapterData((id *)this);
              goto LABEL_283;
            }
            if (a2 != 150994945) {
              goto LABEL_282;
            }
            double v4 = [*((id *)this + 18) objectForKey:@"checksum"];
            objc_opt_class();
            id v3 = &unk_1F09112F0;
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_277;
            }
            uint64_t v11 = [*((id *)this + 18) objectForKey:@"checksum"];
            if (v11) {
              unint64_t v12 = 0;
            }
            else {
              unint64_t v12 = &unk_1F09112F0;
            }
            break;
        }
      }
      id v3 = v12;
    }
LABEL_277:
  }
LABEL_278:

  return v3;
}

void sub_1B03B1528(_Unwind_Exception *a1)
{
  if (!v1) {

  }
  _Unwind_Resume(a1);
}

id _MLMediaTypeFromTrackProperiesDictionary(NSDictionary *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = [(NSDictionary *)v1 objectForKey:@"is_podcast"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    double v4 = [(NSDictionary *)v1 objectForKey:@"is_podcast"];
  }
  else
  {
    double v4 = 0;
  }
  int v5 = [v4 BOOLValue];
  if (isKindOfClass) {

  }
  char v6 = [(NSDictionary *)v1 objectForKey:@"is_song"];
  objc_opt_class();
  char v7 = objc_opt_isKindOfClass();
  if (v7)
  {
    uint64_t v8 = [(NSDictionary *)v1 objectForKey:@"is_song"];
  }
  else
  {
    uint64_t v8 = 0;
  }
  int v9 = [v8 BOOLValue];
  if (v7) {

  }
  if (v9) {
    int v10 = 8;
  }
  else {
    int v10 = 0;
  }
  if ((v9 & v5) == 1)
  {
    uint64_t v11 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_DEFAULT, "item has both is_podcast and is_song modifiers. Ignoring is_song and treating item as a podcast", buf, 2u);
    }

    int v10 = 0;
  }
  unint64_t v12 = [(NSDictionary *)v1 objectForKey:@"is_audio_book"];
  objc_opt_class();
  char v13 = objc_opt_isKindOfClass();
  if (v13)
  {
    BOOL v14 = [(NSDictionary *)v1 objectForKey:@"is_audio_book"];
  }
  else
  {
    BOOL v14 = 0;
  }
  int v15 = [v14 BOOLValue];
  if (v13) {

  }
  if (v15) {
    v10 |= 2u;
  }
  uint64_t v16 = [(NSDictionary *)v1 objectForKey:@"is_music_video"];
  objc_opt_class();
  char v17 = objc_opt_isKindOfClass();
  if (v17)
  {
    uint64_t v18 = [(NSDictionary *)v1 objectForKey:@"is_music_video"];
  }
  else
  {
    uint64_t v18 = 0;
  }
  int v19 = [v18 BOOLValue];
  if (v17) {

  }
  if (v19) {
    v10 |= 0x408u;
  }
  uint64_t v20 = [(NSDictionary *)v1 objectForKey:@"is_movie"];
  objc_opt_class();
  char v21 = objc_opt_isKindOfClass();
  if (v21)
  {
    unint64_t v22 = [(NSDictionary *)v1 objectForKey:@"is_movie"];
  }
  else
  {
    unint64_t v22 = 0;
  }
  int v23 = [v22 BOOLValue];
  if (v21) {

  }
  if (v23)
  {
    if (v5)
    {
      char v24 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl(&dword_1B022D000, v24, OS_LOG_TYPE_DEFAULT, "item has both is_podcast and is_movie modifiers. Treating media_type as MLMediaTypeVideoPodcast | MLMediaTypePodcast", v45, 2u);
      }

      v10 |= 0x100u;
    }
    else
    {
      v10 |= 0x800u;
    }
  }
  unsigned int v25 = [(NSDictionary *)v1 objectForKey:@"is_tv_show"];
  objc_opt_class();
  char v26 = objc_opt_isKindOfClass();
  if (v26)
  {
    unint64_t v27 = [(NSDictionary *)v1 objectForKey:@"is_tv_show"];
  }
  else
  {
    unint64_t v27 = 0;
  }
  int v28 = [v27 BOOLValue];
  if (v26) {

  }
  if (v28) {
    v10 |= 0x200u;
  }
  uint64_t v29 = [(NSDictionary *)v1 objectForKey:@"is_home_video"];
  objc_opt_class();
  char v30 = objc_opt_isKindOfClass();
  if (v30)
  {
    id v31 = [(NSDictionary *)v1 objectForKey:@"is_home_video"];
  }
  else
  {
    id v31 = 0;
  }
  int v32 = [v31 BOOLValue];
  if (v30) {

  }
  if (v32) {
    v10 |= 0x2000u;
  }
  id v33 = [(NSDictionary *)v1 objectForKey:@"is_voice_memo"];
  objc_opt_class();
  char v34 = objc_opt_isKindOfClass();
  if (v34)
  {
    __int16 v35 = [(NSDictionary *)v1 objectForKey:@"is_voice_memo"];
  }
  else
  {
    __int16 v35 = 0;
  }
  int v36 = [v35 BOOLValue];
  if (v34) {

  }
  if (v36) {
    v10 |= 0x10u;
  }
  CFDataRef v37 = [(NSDictionary *)v1 objectForKey:@"is_itunes_u"];
  objc_opt_class();
  char v38 = objc_opt_isKindOfClass();
  if (v38)
  {
    uint64_t v39 = [(NSDictionary *)v1 objectForKey:@"is_itunes_u"];
  }
  else
  {
    uint64_t v39 = 0;
  }
  int v40 = [v39 BOOLValue];
  if (v38) {

  }
  int v41 = v10 | 0x20;
  if (!v40) {
    int v41 = v10;
  }
  if (v5) {
    int v42 = v41 | 4;
  }
  else {
    int v42 = v41;
  }
  if (v42)
  {
    int v43 = objc_msgSend(NSNumber, "numberWithUnsignedInt:");
  }
  else
  {
    int v43 = 0;
  }

  return v43;
}

void sub_1B03B2118(_Unwind_Exception *a1)
{
  if (v3) {

  }
  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackDiscNumber(id *this)
{
  uint64_t v2 = [this[12] objectForKey:@"disc_number"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    char v3 = [this[12] objectForKey:@"disc_number"];

    if (v3) {
      goto LABEL_8;
    }
  }
  else
  {
  }
  double v4 = [this[10] objectForKey:@"operation"];
  int v5 = [v4 isEqualToString:@"insert_track"];

  if (v5) {
    char v3 = &unk_1F0911308;
  }
  else {
    char v3 = 0;
  }
LABEL_8:

  return v3;
}

void sub_1B03B225C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackIsAudibleAudioBook(id *this)
{
  uint64_t v2 = [this[11] objectForKey:@"audio_format"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    double v4 = 0;
    goto LABEL_5;
  }
  char v3 = [this[11] objectForKey:@"audio_format"];

  if (v3)
  {
    double v4 = objc_msgSend(NSNumber, "numberWithBool:", (unint64_t)(objc_msgSend(v3, "integerValue") - 401) < 6);
    uint64_t v2 = v3;
LABEL_5:

    goto LABEL_6;
  }
  double v4 = 0;
LABEL_6:

  return v4;
}

void sub_1B03B2340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackContentRating(id *this)
{
  uint64_t v2 = [this[12] objectForKey:@"grouping"];
  char v3 = [v2 lowercaseString];
  char v4 = [v3 isEqualToString:@"explicit"];

  if (v4)
  {
    int v5 = &unk_1F0911320;
  }
  else
  {
    char v6 = [this[12] objectForKey:@"content_rating"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      int v5 = [this[12] objectForKey:@"content_rating"];
    }
    else
    {
      int v5 = 0;
    }
  }

  return v5;
}

void sub_1B03B243C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackRatingLevel(id *this)
{
  uint64_t v2 = [this[12] objectForKey:@"content_rating_level"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    char v3 = [this[12] objectForKey:@"content_rating_level"];
  }
  else
  {
    char v3 = 0;
  }

  char v4 = [this[12] objectForKey:@"grouping"];
  int v5 = [v4 lowercaseString];
  int v6 = [v5 isEqualToString:@"explicit"];

  if (v6)
  {
    if ([v3 longLongValue] >= 1000) {
      uint64_t v7 = [v3 longLongValue];
    }
    else {
      uint64_t v7 = 1000;
    }
    uint64_t v8 = [NSNumber numberWithLongLong:v7];

    char v3 = (void *)v8;
  }

  return v3;
}

void sub_1B03B2574(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackLocationKind(id *this)
{
  uint64_t v2 = [this[10] objectForKey:@"location"];
  char v3 = [v2 objectForKey:@"kind"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    int v6 = 0;
    goto LABEL_5;
  }
  char v4 = [this[10] objectForKey:@"location"];
  int v5 = [v4 objectForKey:@"kind"];

  if (v5)
  {
    int v6 = [NSNumber numberWithLongLong:ML3KindForString(v5)];
    uint64_t v2 = v5;
LABEL_5:

    goto LABEL_6;
  }
  int v6 = 0;
LABEL_6:

  return v6;
}

void sub_1B03B26B0(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackChapterData(id *this)
{
  uint64_t v2 = [this[10] objectForKey:@"chapter_info"];
  char v3 = +[ML3Track flattenedChapterDataFromSyncInfoDictionaries:v2 trackPersistentID:this[9]];

  return v3;
}

void sub_1B03B2754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::getDeduplicationPredicates(id *this)
{
  void v42[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1E4F1CA48];
  char v3 = ML3ITunesSyncImportItem::getDeduplicationPredicates((ML3ITunesSyncImportItem *)this);
  id v40 = [v2 arrayWithArray:v3];

  if ((unint64_t)this[19] + 1 >= 2)
  {
    if (this[9])
    {
      char v4 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", @"item_store.store_item_id");
      v42[0] = v4;
      int v5 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.sync_id" equalToInt64:0];
      v42[1] = v5;
      int v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v42 count:2];
      uint64_t v7 = +[ML3CompoundPredicate predicateMatchingPredicates:v6];
      [v40 addObject:v7];

      uint64_t v8 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.subscription_store_item_id" equalToInt64:this[19]];
      v41[0] = v8;
      int v9 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.store_item_id" equalToInt64:0];
      v41[1] = v9;
      int v10 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.sync_id" equalToInt64:0];
      void v41[2] = v10;
      uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v41 count:3];
      unint64_t v12 = +[ML3CompoundPredicate predicateMatchingPredicates:v11];
      [v40 addObject:v12];
    }
    else
    {
      char v13 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", @"item_store.store_item_id");
      [v40 addObject:v13];
    }
  }
  BOOL v14 = [this[12] objectForKey:@"cloud_id"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v39 = 0;
LABEL_11:

    goto LABEL_13;
  }
  uint64_t v39 = [this[12] objectForKey:@"cloud_id"];

  if (v39)
  {
    if (![v39 longLongValue]) {
      goto LABEL_13;
    }
    if (this[9])
    {
      int v15 = (void *)MEMORY[0x1E4F1C978];
      BOOL v14 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", @"item_store.store_saga_id", [v39 longLongValue]);
      uint64_t v16 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.sync_id" equalToInt64:0];
      char v17 = objc_msgSend(v15, "arrayWithObjects:", v14, v16, 0);
      uint64_t v18 = +[ML3CompoundPredicate predicateMatchingPredicates:v17];
      [v40 addObject:v18];
    }
    else
    {
      BOOL v14 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", @"item_store.store_saga_id", [v39 longLongValue]);
      [v40 addObject:v14];
    }
    goto LABEL_11;
  }
  uint64_t v39 = 0;
LABEL_13:
  int v19 = (*((void (**)(id *, uint64_t))*this + 27))(this, 100663322);
  if (v19)
  {
    if (this[9])
    {
      uint64_t v20 = (void *)MEMORY[0x1E4F1C978];
      char v21 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.external_guid" value:v19 comparison:1 caseInsensitive:1];
      unint64_t v22 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.sync_id" equalToInt64:0];
      int v23 = objc_msgSend(v20, "arrayWithObjects:", v21, v22, 0);
      char v24 = +[ML3CompoundPredicate predicateMatchingPredicates:v23];
      [v40 addObject:v24];
    }
    else
    {
      char v21 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.external_guid" value:v19 comparison:1 caseInsensitive:1];
      [v40 addObject:v21];
    }
  }
  if (this[9])
  {
    unsigned int v25 = [MEMORY[0x1E4F1CA48] array];
    char v26 = [this[12] objectForKey:@"title"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      unint64_t v27 = [this[12] objectForKey:@"title"];
    }
    else
    {
      unint64_t v27 = 0;
    }

    int v28 = [this[12] objectForKey:@"total_time_ms"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v29 = [this[12] objectForKey:@"total_time_ms"];
    }
    else
    {
      uint64_t v29 = 0;
    }

    if (v27)
    {
      char v30 = +[ML3ComparisonPredicate predicateWithProperty:@"item_extra.title" equalToValue:v27];
      [v25 addObject:v30];
    }
    if (v29)
    {
      id v31 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", @"item_extra.total_time_ms", [v29 longLongValue]);
      [v25 addObject:v31];
    }
    if ([v25 count])
    {
      int v32 = (void *)MEMORY[0x1E4F1C978];
      id v33 = +[ML3ComparisonPredicate predicateWithProperty:@"ROWID" equalToInt64:this[9]];
      char v34 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.sync_id" equalToInt64:0];
      __int16 v35 = +[ML3CompoundPredicate predicateMatchingPredicates:v25];
      int v36 = objc_msgSend(v32, "arrayWithObjects:", v33, v34, v35, 0);
      CFDataRef v37 = +[ML3CompoundPredicate predicateMatchingPredicates:v36];
      [v40 addObject:v37];
    }
  }

  return v40;
}

void sub_1B03B2E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncTrackImportItem::getDescription(ML3ITunesSyncTrackImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<ML3ITunesSyncImportItem ", 25);
  *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (void *)std::ostream::operator<<();
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  char v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", store_id=", 11);
  char v4 = (void *)std::ostream::operator<<();
  char v9 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v8);
}

void sub_1B03B31E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ML3ITunesSyncTrackImportItem::~ML3ITunesSyncTrackImportItem(id *this)
{
  ML3ITunesSyncTrackImportItem::~ML3ITunesSyncTrackImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

id ML3ITunesSyncContainerImportItem::_getFoundationValue(ML3ITunesSyncContainerImportItem *this, uint64_t a2)
{
  if ((a2 - 184549376) >> 24 > 2)
  {
    char v3 = 0;
    goto LABEL_60;
  }
  char v3 = 0;
  if ((int)a2 <= 201326592)
  {
    switch((int)a2)
    {
      case 184549377:
      case 184549378:
        char v4 = (void *)*((void *)this + 8);
        int v5 = @"pid";
        goto LABEL_58;
      case 184549379:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"distinguished_kind";
        goto LABEL_58;
      case 184549380:
        char v7 = [*((id *)this + 12) objectForKey:@"date_created"];
        if (!v7) {
          goto LABEL_33;
        }
        uint64_t v8 = NSNumber;
        char v9 = [*((id *)this + 12) objectForKey:@"date_created"];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        if (isKindOfClass)
        {
          uint64_t v11 = [*((id *)this + 12) objectForKey:@"date_created"];
        }
        else
        {
          uint64_t v11 = 0;
        }
        goto LABEL_66;
      case 184549381:
        char v7 = [*((id *)this + 12) objectForKey:@"date_modified"];
        if (!v7) {
          goto LABEL_33;
        }
        uint64_t v8 = NSNumber;
        char v9 = [*((id *)this + 12) objectForKey:@"date_modified"];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        if (isKindOfClass)
        {
          uint64_t v11 = [*((id *)this + 12) objectForKey:@"date_modified"];
        }
        else
        {
          uint64_t v11 = 0;
        }
LABEL_66:
        [v11 timeIntervalSinceReferenceDate];
        char v3 = objc_msgSend(v8, "numberWithDouble:");
        if (isKindOfClass) {

        }
        goto LABEL_68;
      case 184549382:
      case 184549383:
      case 184549385:
      case 184549389:
      case 184549390:
      case 184549393:
      case 184549408:
      case 184549412:
      case 184549414:
      case 184549416:
      case 184549417:
      case 184549418:
      case 184549419:
      case 184549420:
      case 184549422:
      case 184549423:
      case 184549424:
      case 184549425:
      case 184549426:
      case 184549427:
      case 184549428:
      case 184549429:
      case 184549430:
      case 184549431:
      case 184549432:
      case 184549434:
      case 184549439:
      case 184549440:
      case 184549441:
      case 184549442:
      case 184549447:
      case 184549448:
      case 184549449:
      case 184549451:
      case 184549452:
      case 184549453:
      case 184549454:
      case 184549455:
      case 184549456:
      case 184549457:
      case 184549458:
      case 184549459:
      case 184549460:
      case 184549461:
      case 184549462:
      case 184549463:
      case 184549464:
      case 184549465:
      case 184549466:
      case 184549467:
      case 184549468:
        goto LABEL_60;
      case 184549384:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"name";
        goto LABEL_58;
      case 184549386:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"description_long";
        goto LABEL_58;
      case 184549387:
        goto LABEL_38;
      case 184549388:
        char v3 = (void *)MEMORY[0x1E4F1CC28];
        goto LABEL_60;
      case 184549391:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"liked_state";
        goto LABEL_58;
      case 184549392:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"parent_pid";
        goto LABEL_58;
      case 184549394:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"workout_template_id";
        goto LABEL_58;
      case 184549395:
        if (*((unsigned char *)this + 80))
        {
LABEL_38:
          char v3 = (void *)MEMORY[0x1E4F1CC38];
          goto LABEL_60;
        }
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"is_hidden";
LABEL_58:
        id v6 = [v4 objectForKey:v5];
        break;
      case 184549396:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_evaluation_order";
        goto LABEL_58;
      case 184549397:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_is_folder";
        goto LABEL_58;
      case 184549398:
        char v7 = [*((id *)this + 12) objectForKey:@"smart_is_dynamic"];
        if (v7)
        {
          char v9 = [*((id *)this + 12) objectForKey:@"smart_is_dynamic"];
          if ([v9 BOOLValue])
          {
            char v3 = [NSNumber numberWithBool:ML3ITunesSyncContainerImportItem::_canEvaluateSmartCriteria((id *)this)];
          }
          else
          {
            char v3 = (void *)MEMORY[0x1E4F1CC28];
          }
LABEL_68:
        }
        else
        {
LABEL_33:
          char v3 = 0;
        }

        goto LABEL_60;
      case 184549399:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_is_filtered";
        goto LABEL_58;
      case 184549400:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_is_genius";
        goto LABEL_58;
      case 184549401:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_enabled_only";
        goto LABEL_58;
      case 184549402:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_is_limited";
        goto LABEL_58;
      case 184549403:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_limit_kind";
        goto LABEL_58;
      case 184549404:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_limit_order";
        goto LABEL_58;
      case 184549405:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_limit_value";
        goto LABEL_58;
      case 184549406:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_reverse_limit_order";
        goto LABEL_58;
      case 184549407:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"smart_criteria";
        goto LABEL_58;
      case 184549409:
        char v4 = (void *)*((void *)this + 13);
        int v5 = @"play_order";
        goto LABEL_58;
      case 184549410:
        char v4 = (void *)*((void *)this + 13);
        int v5 = @"is_reversed";
        goto LABEL_58;
      case 184549413:
        char v3 = &unk_1F0911320;
        goto LABEL_60;
      case 184549415:
        BOOL isMasterDevicePurchasedPlaylist = ML3ITunesSyncContainerImportItem::_isMasterDevicePurchasedPlaylist((id *)this);
        char v13 = (void *)MEMORY[0x1E4F1CC38];
        if (!isMasterDevicePurchasedPlaylist) {
          char v13 = 0;
        }
        id v6 = v13;
        break;
      case 184549435:
        char v4 = (void *)*((void *)this + 13);
        int v5 = @"album_field_order";
        goto LABEL_58;
      case 184549436:
        char v4 = (void *)*((void *)this + 13);
        int v5 = @"repeat_mode";
        goto LABEL_58;
      case 184549437:
        char v4 = (void *)*((void *)this + 13);
        int v5 = @"shuffle_items";
        goto LABEL_58;
      case 184549438:
        char v4 = (void *)*((void *)this + 13);
        int v5 = @"has_been_shuffled";
        goto LABEL_58;
      case 184549443:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"external_vendor_identifier";
        goto LABEL_58;
      case 184549444:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"external_vendor_display_name";
        goto LABEL_58;
      case 184549445:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"external_tag";
        goto LABEL_58;
      case 184549446:
        char v4 = (void *)*((void *)this + 12);
        int v5 = @"is_external_vendor_playlist";
        goto LABEL_58;
      case 184549450:
        ML3ITunesSyncContainerImportItem::_getContainerArtworkCacheId((id *)this);
        id v6 = (id)objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_10;
    }
LABEL_59:
    char v3 = v6;
    goto LABEL_60;
  }
  if ((a2 - 218103810) > 4 || a2 == 218103812)
  {
    if (a2 == 201326593)
    {
      ML3ITunesSyncContainerImportItem::_getGeniusSeedItemPid(*((ML3ITunesSyncContainerImportItem **)this + 12));
      id v6 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (a2 == 201326594) {
        goto LABEL_60;
      }
LABEL_10:
      ML3ITunesSyncImportItem::_getFoundationValue(this, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_59;
  }
LABEL_60:

  return v3;
}

void sub_1B03B37B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncContainerImportItem::_canEvaluateSmartCriteria(id *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!(*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 184549397))
  {
    char v3 = [this[12] objectForKey:@"smart_criteria"];
    if (v3)
    {
      if (+[ML3Container smartCriteriaCanBeEvaluated:v3])
      {
        uint64_t v2 = 1;
LABEL_10:

        return v2;
      }
      char v4 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 138543362;
        char v7 = v3;
        _os_log_impl(&dword_1B022D000, v4, OS_LOG_TYPE_ERROR, "Disabling smart evaluation for unsupported smart playlist type (%{public}@)", (uint8_t *)&v6, 0xCu);
      }
    }
    uint64_t v2 = 0;
    goto LABEL_10;
  }
  return 0;
}

void sub_1B03B3A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ML3ITunesSyncContainerImportItem::_isMasterDevicePurchasedPlaylist(id *this)
{
  uint64_t v2 = [this[12] objectForKey:@"distinguished_kind"];
  uint64_t v3 = [v2 integerValue];

  if (v3 != 20) {
    return 0;
  }
  char v4 = [this[12] objectForKey:@"source_device_guid"];
  uint64_t v5 = [v4 longLongValue];

  if (!v5) {
    return 1;
  }
  if (ML3ITunesSyncContainerImportItem::_deviceITunesComparableGUID(void)const::onceToken != -1) {
    dispatch_once(&ML3ITunesSyncContainerImportItem::_deviceITunesComparableGUID(void)const::onceToken, &__block_literal_global_9789);
  }
  return v5 == ML3ITunesSyncContainerImportItem::_deviceITunesComparableGUID(void)const::iTunesComparableGUID;
}

void sub_1B03B3B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *ML3ITunesSyncContainerImportItem::_getContainerArtworkCacheId(id *this)
{
  uint64_t v2 = [this[12] objectForKey:@"artwork_cache_id"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    uint64_t v3 = 0;
    goto LABEL_6;
  }
  uint64_t v3 = [this[12] objectForKey:@"artwork_cache_id"];

  if (!v3)
  {
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  if ([v3 integerValue])
  {
    char v4 = [v3 stringValue];
  }
  else
  {
    if (*((unsigned char *)this + 16)) {
      int v6 = &stru_1F08D4D70;
    }
    else {
      int v6 = 0;
    }
    char v4 = v6;
  }
  uint64_t v5 = v4;
LABEL_12:

  return v5;
}

void sub_1B03B3C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ML3ITunesSyncContainerImportItem::_getGeniusSeedItemPid(ML3ITunesSyncContainerImportItem *this)
{
  uint64_t v1 = [(ML3ITunesSyncContainerImportItem *)this objectForKey:@"genius_seed_tracks"];
  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v2 = [v1 firstObject];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1B03B3CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZNK32ML3ITunesSyncContainerImportItem27_deviceITunesComparableGUIDEv_block_invoke()
{
  id v1 = (id)MGCopyAnswer();
  if ((unint64_t)[v1 length] >= 0x10)
  {
    objc_msgSend(v1, "substringFromIndex:", objc_msgSend(v1, "length") - 16);
    id v0 = objc_claimAutoreleasedReturnValue();
    ML3ITunesSyncContainerImportItem::_deviceITunesComparableGUID(void)const::iTunesComparableGUID = strtoull((const char *)[v0 UTF8String], 0, 16);
  }
}

void sub_1B03B3D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id ML3ITunesSyncContainerImportItem::getDeduplicationPredicates(ML3ITunesSyncContainerImportItem *this)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  if (*((void *)this + 11))
  {
    uint64_t v3 = +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", @"sync_id");
    [v2 addObject:v3];
  }

  return v2;
}

void sub_1B03B3E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ITunesSyncContainerImportItem::getDescription(id *this)
{
  id v1 = [this[12] objectForKey:@"name"];
  uint64_t v2 = v1;
  if (v1) {
    uint64_t v3 = (char *)[v1 UTF8String];
  }
  else {
    uint64_t v3 = "<null>";
  }
  std::string::basic_string[abi:ne180100]<0>(v14, v3);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"<MLDITunesSyncPlaylistImportItem ", 33);
  *(_DWORD *)((char *)&v11[1] + *(void *)(v11[0] - 24)) = *(_DWORD *)((unsigned char *)&v11[1] + *(void *)(v11[0] - 24)) & 0xFFFFFFB5 | 8;
  char v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 2;
  int v6 = (void *)std::ostream::operator<<();
  char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", name=", 7);
  if ((v15 & 0x80u) == 0) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v9 = v15;
  }
  else {
    uint64_t v9 = (uint64_t)v14[1];
  }
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  char v16 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3E935B0](&v13);
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_1B03B40B0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 57) < 0) {
    operator delete(*(void **)(v2 - 80));
  }

  _Unwind_Resume(a1);
}

void ML3ITunesSyncContainerImportItem::getImportItemArrayValue(id *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((a2 - 218103813) >= 2)
  {
    if (a2 == 218103812)
    {
      [this[8] objectForKey:@"item_to_container"];
      memset(v7, 0, sizeof(v7));
      id obj = (id)objc_claimAutoreleasedReturnValue();
      if ([obj countByEnumeratingWithState:v7 objects:v8 count:16]) {
        operator new();
      }
    }
    else
    {
      int v6 = [MEMORY[0x1E4F28B00] currentHandler];
      char v4 = [NSString stringWithUTF8String:"virtual std::vector<std::shared_ptr<ML3ImportItem>> ML3ITunesSyncContainerImportItem::getImportItemArrayValue(MLImportPropertyKey) const"];
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3ITunesSyncImportItem.mm", 744, @"getImportItemArrayValue called with unknown property key %x", a2);
    }
  }
}

void sub_1B03B4418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncContainerTrackItemImportItem>,std::allocator<ML3ITunesSyncContainerTrackItemImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_41ML3ITunesSyncContainerTrackItemImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncContainerTrackItemImportItem>,std::allocator<ML3ITunesSyncContainerTrackItemImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ITunesSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncContainerTrackItemImportItem>,std::allocator<ML3ITunesSyncContainerTrackItemImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t ML3ITunesSyncContainerTrackItemImportItem::getDescription(ML3ITunesSyncContainerTrackItemImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3ITunesSyncContainerTrackItemImportItem ", 43);
  *(_DWORD *)((char *)&v5[1] + *(void *)(v5[0] - 24)) = *(_DWORD *)((unsigned char *)&v5[1] + *(void *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  id v1 = (void *)std::ostream::operator<<();
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v3 = (void *)std::ostream::operator<<();
  char v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v7);
}

void sub_1B03B4758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ML3ITunesSyncContainerTrackItemImportItem::hasValue(ML3ITunesSyncContainerTrackItemImportItem *this, int a2)
{
  return a2 == 234881030;
}

uint64_t ML3ITunesSyncContainerTrackItemImportItem::getIntegerValue(ML3ITunesSyncContainerTrackItemImportItem *this, uint64_t a2)
{
  if (a2 == 234881030) {
    return *((void *)this + 8);
  }
  char v4 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v5 = [NSString stringWithUTF8String:"virtual int64_t ML3ITunesSyncContainerTrackItemImportItem::getIntegerValue(MLImportPropertyKey) const"];
  objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3ITunesSyncImportItem.mm", 982, @"ML3ITunesSyncContainerTrackItemImportItem::getIntegerValue called with unknown property key %x", a2);

  return 0;
}

void sub_1B03B4828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ITunesSyncContainerTrackItemImportItem::getStringValue(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F08C3230;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if ((a1 - 234881028) > 6 || ((1 << (a1 - 4)) & 0x43) == 0)
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"virtual ML3ImportStringValue ML3ITunesSyncContainerTrackItemImportItem::getStringValue(MLImportPropertyKey) const"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3ITunesSyncImportItem.mm", 967, @"ML3ITunesSyncContainerTrackItemImportItem::getStringValue called with unknown property key %x", a1);
  }
}

void sub_1B03B495C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  *(void *)uint64_t v10 = v11;
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v13);
  }
  _Unwind_Resume(a1);
}

void ML3ITunesSyncContainerTrackItemImportItem::~ML3ITunesSyncContainerTrackItemImportItem(ML3ITunesSyncContainerTrackItemImportItem *this)
{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);

  JUMPOUT(0x1B3E93610);
}

{
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

BOOL ML3ITunesSyncContainerImportItem::hasValue(id *this, int a2)
{
  if (a2 == 218103812)
  {
    uint64_t v3 = [this[8] objectForKey:@"item_to_container"];
    BOOL v4 = v3 != 0;

    return v4;
  }
  else
  {
    return ML3ITunesSyncImportItem::hasValue((ML3ITunesSyncImportItem *)this);
  }
}

double ML3ITunesSyncContainerImportItem::getDataValue@<D0>(ML3ITunesSyncContainerImportItem *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  ML3ITunesSyncImportItem::getDataValue(this, &v4);
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  return result;
}

void ML3ITunesSyncContainerImportItem::~ML3ITunesSyncContainerImportItem(ML3ITunesSyncContainerImportItem *this)
{
  ML3ITunesSyncContainerImportItem::~ML3ITunesSyncContainerImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  void *v2;

  *(void *)this = &unk_1F08C5FF8;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }

  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

id ML3ITunesSyncAlbumImportItem::_getFoundationValue(id *this, int a2)
{
  uint64_t v3 = 0;
  if (a2 > 33554461)
  {
    switch(a2)
    {
      case 285212673:
        long long v4 = [this[12] objectForKey:@"album"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[12] objectForKey:@"album"];
        goto LABEL_44;
      case 285212674:
        long long v4 = [this[12] objectForKey:@"sort_album"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[12] objectForKey:@"sort_album"];
        goto LABEL_44;
      case 285212675:
      case 285212676:
      case 285212677:
      case 285212678:
      case 285212682:
      case 285212685:
      case 285212686:
      case 285212687:
      case 285212689:
      case 285212692:
      case 285212693:
      case 285212694:
      case 285212697:
      case 285212698:
        goto LABEL_47;
      case 285212679:
        long long v4 = [this[10] objectForKey:@"album_rating"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[10] objectForKey:@"album_rating"];
        goto LABEL_44;
      case 285212680:
        long long v4 = [this[10] objectForKey:@"album_liked_state"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[10] objectForKey:@"album_liked_state"];
        goto LABEL_44;
      case 285212681:
        long long v4 = [this[12] objectForKey:@"is_compilation"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[12] objectForKey:@"is_compilation"];
        goto LABEL_44;
      case 285212683:
        long long v4 = [this[14] objectForKey:@"season_number"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[14] objectForKey:@"season_number"];
        goto LABEL_44;
      case 285212684:
        long long v4 = [this[12] objectForKey:@"year"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[12] objectForKey:@"year"];
        goto LABEL_44;
      case 285212688:
        long long v4 = (*((void (**)(id *, uint64_t))*this + 27))(this, 33554462);
        id v6 = (*((void (**)(id *, uint64_t))*this + 27))(this, 33554451);
        uint64_t v7 = (*((void (**)(id *, uint64_t))*this + 27))(this, 16777248);

        char v8 = NSNumber;
        uint64_t v9 = [v4 length];
        BOOL v10 = v9 != 0;
        if (v9) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = v7 == 0;
        }
        if (!v11) {
          BOOL v10 = objc_msgSend(v6, "length", v10) != 0;
        }
        uint64_t v3 = [v8 numberWithBool:v10];

        goto LABEL_46;
      case 285212690:
        long long v4 = [this[10] objectForKey:@"album_rating_is_derived"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[10] objectForKey:@"album_rating_is_derived"];
        goto LABEL_44;
      case 285212691:
        long long v4 = [this[12] objectForKey:@"album_pid"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[12] objectForKey:@"album_pid"];
        goto LABEL_44;
      case 285212695:
        long long v4 = [this[12] objectForKey:@"album_date_liked"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[12] objectForKey:@"album_date_liked"];
        goto LABEL_44;
      case 285212696:
        long long v4 = [this[13] objectForKey:@"playlist_id"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[13] objectForKey:@"playlist_id"];
        goto LABEL_44;
      case 285212699:
        long long v4 = [this[12] objectForKey:@"album_artist"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[12] objectForKey:@"album_artist"];
        goto LABEL_44;
      default:
        if (a2 != 33554462) {
          goto LABEL_47;
        }
        long long v4 = [this[12] objectForKey:@"work"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_45;
        }
        uint64_t v5 = [this[12] objectForKey:@"work"];
        break;
    }
    goto LABEL_44;
  }
  if (a2 == 16777217)
  {
    uint64_t v3 = _MLMediaTypeFromTrackProperiesDictionary((NSDictionary *)this[12]);
    goto LABEL_47;
  }
  if (a2 == 16777248)
  {
    long long v4 = [this[12] objectForKey:@"show_composer"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v5 = [this[12] objectForKey:@"show_composer"];
      goto LABEL_44;
    }
LABEL_45:
    uint64_t v3 = 0;
    goto LABEL_46;
  }
  if (a2 != 33554451) {
    goto LABEL_47;
  }
  long long v4 = [this[12] objectForKey:@"grouping"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_45;
  }
  uint64_t v5 = [this[12] objectForKey:@"grouping"];
LABEL_44:
  uint64_t v3 = (void *)v5;
LABEL_46:

LABEL_47:

  return v3;
}

void sub_1B03B51EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncAlbumImportItem::propertyKeyForSortPropertyKey(ML3ITunesSyncAlbumImportItem *this, int a2)
{
  if (a2 == 285212674) {
    return 285212673;
  }
  else {
    return 0;
  }
}

uint64_t ML3ITunesSyncAlbumImportItem::sortPropertyKeyForPropertyKey(ML3ITunesSyncAlbumImportItem *this, int a2)
{
  if (a2 == 285212673) {
    return 285212674;
  }
  else {
    return 0;
  }
}

id ML3ITunesSyncAlbumImportItem::getDeduplicationPredicates(ML3ITunesSyncAlbumImportItem *this)
{
  v57[6] = *MEMORY[0x1E4F143B8];
  id v45 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v2 = (*(uint64_t (**)(ML3ITunesSyncAlbumImportItem *, uint64_t))(*(void *)this + 32))(this, 285212696);
  uint64_t v3 = (*(uint64_t (**)(ML3ITunesSyncAlbumImportItem *, uint64_t))(*(void *)this + 32))(this, 285212691);
  uint64_t v44 = (*(uint64_t (**)(ML3ITunesSyncAlbumImportItem *, uint64_t))(*(void *)this + 32))(this, 285212683);
  (*(void (**)(void *__return_ptr, ML3ITunesSyncAlbumImportItem *, uint64_t))(*(void *)this + 24))(v50, this, 285212673);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v52, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v50[0] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v52 = __p;
  }
  (*(void (**)(void *__return_ptr, ML3ITunesSyncAlbumImportItem *, uint64_t))(*(void *)this + 24))(v50, this, 285212699);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v50[0] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v49 = __p;
  }
  (*(void (**)(void *__return_ptr, ML3ITunesSyncAlbumImportItem *, uint64_t))(*(void *)this + 24))(v50, this, 285212682);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v48, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v50[0] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v48 = __p;
  }
  std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v5 = (void *)*((void *)this + 17);
    id v6 = ML3CPPBridgeString((const UInt8 *)&v52, 1);
    long long v47 = [v5 groupingKeyForString:v6];
  }
  else
  {
    long long v47 = 0;
  }
  std::string::size_type v7 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = v49.__r_.__value_.__l.__size_;
  }
  if (v7)
  {
    char v8 = (void *)*((void *)this + 17);
    uint64_t v9 = ML3CPPBridgeString((const UInt8 *)&v49, 1);
    int v46 = [v8 groupingKeyForString:v9];
  }
  else
  {
    int v46 = 0;
  }
  if (v3)
  {
    BOOL v10 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:v3];
    [v45 addObject:v10];
  }
  if (v2)
  {
    if ([v47 length] && objc_msgSend(v46, "length"))
    {
      BOOL v11 = +[ML3ComparisonPredicate predicateWithProperty:@"store_id" equalToInt64:v2];
      v57[0] = v11;
      char v12 = +[ML3ComparisonPredicate predicateWithProperty:@"cloud_library_id" value:&stru_1F08D4D70 comparison:1];
      v57[1] = v12;
      uint64_t v13 = +[ML3ComparisonPredicate predicateWithProperty:@"album_artist.grouping_key" equalToValue:v46];
      v57[2] = v13;
      BOOL v14 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" equalToValue:v47];
      v57[3] = v14;
      unsigned __int8 v15 = +[ML3ComparisonPredicate predicateWithProperty:@"season_number" equalToInt64:v44];
      v57[4] = v15;
      char v16 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:0];
      v57[5] = v16;
      char v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v57 count:6];
      uint64_t v18 = +[ML3CompoundPredicate predicateMatchingPredicates:v17];

      [v45 addObject:v18];
    }
    else
    {
      int v19 = +[ML3ComparisonPredicate predicateWithProperty:@"store_id" equalToInt64:v2];
      v56[0] = v19;
      uint64_t v20 = +[ML3ComparisonPredicate predicateWithProperty:@"cloud_library_id" value:&stru_1F08D4D70 comparison:1];
      v56[1] = v20;
      char v21 = +[ML3ComparisonPredicate predicateWithProperty:@"album_artist.grouping_key" value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
      v56[2] = v21;
      unint64_t v22 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
      v56[3] = v22;
      int v23 = +[ML3ComparisonPredicate predicateWithProperty:@"season_number" equalToInt64:v44];
      void v56[4] = v23;
      char v24 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:0];
      v56[5] = v24;
      unsigned int v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:v56 count:6];
      uint64_t v18 = +[ML3CompoundPredicate predicateMatchingPredicates:v25];

      [v45 addObject:v18];
    }
  }
  if ([v47 length] && objc_msgSend(v46, "length"))
  {
    char v26 = +[ML3ComparisonPredicate predicateWithProperty:@"album_artist.grouping_key" equalToValue:v46];
    v55[0] = v26;
    unint64_t v27 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" equalToValue:v47];
    v55[1] = v27;
    int v28 = +[ML3ComparisonPredicate predicateWithProperty:@"season_number" equalToInt64:v44];
    void v55[2] = v28;
    uint64_t v29 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:0];
    void v55[3] = v29;
    char v30 = [MEMORY[0x1E4F1C978] arrayWithObjects:v55 count:4];
    id v31 = +[ML3CompoundPredicate predicateMatchingPredicates:v30];

    [v45 addObject:v31];
  }
  if ([v47 length])
  {
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v48.__r_.__value_.__l.__size_)
      {
        int v32 = (std::string *)v48.__r_.__value_.__r.__words[0];
        goto LABEL_40;
      }
    }
    else if (*((unsigned char *)&v48.__r_.__value_.__s + 23))
    {
      int v32 = &v48;
LABEL_40:
      id v33 = [NSString stringWithUTF8String:v32];
      char v34 = +[ML3ComparisonPredicate predicateWithProperty:@"feed_url" equalToValue:v33];
      v54[0] = v34;
      __int16 v35 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" equalToValue:v47];
      v54[1] = v35;
      int v36 = [MEMORY[0x1E4F1C978] arrayWithObjects:v54 count:2];
      CFDataRef v37 = +[ML3CompoundPredicate predicateMatchingPredicates:v36];

      [v45 addObject:v37];
    }
  }
  uint64_t v38 = (*(uint64_t (**)(ML3ITunesSyncAlbumImportItem *, uint64_t))(*(void *)this + 32))(this, 16777217);
  if ((MLMediaTypeByStandardizingMediaType(v38) & 0x10042) != 0 && !v47 && v46)
  {
    uint64_t v39 = +[ML3ComparisonPredicate predicateWithProperty:@"grouping_key" value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
    v53[0] = v39;
    id v40 = +[ML3ComparisonPredicate predicateWithProperty:@"album_artist.grouping_key" equalToValue:v46];
    v53[1] = v40;
    int v41 = [MEMORY[0x1E4F1C978] arrayWithObjects:v53 count:2];
    int v42 = +[ML3CompoundPredicate predicateMatchingPredicates:v41];

    [v45 addObject:v42];
  }

  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }

  return v45;
}

void sub_1B03B5C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a39 < 0) {
    operator delete(a34);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncAlbumImportItem::getDescription(ML3ITunesSyncAlbumImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3ITunesSyncAlbumImportItem ", 30);
  *(_DWORD *)((char *)&v5[1] + *(void *)(v5[0] - 24)) = *(_DWORD *)((unsigned char *)&v5[1] + *(void *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  id v1 = (void *)std::ostream::operator<<();
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v3 = (void *)std::ostream::operator<<();
  char v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v7);
}

void sub_1B03B6170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ML3ITunesSyncAlbumImportItem::hasValue(ML3ITunesSyncAlbumImportItem *this)
{
  id v1 = (*(void (**)(ML3ITunesSyncAlbumImportItem *))(*(void *)this + 216))(this);
  BOOL v2 = v1 != 0;

  return v2;
}

void ML3ITunesSyncAlbumImportItem::~ML3ITunesSyncAlbumImportItem(id *this)
{
  ML3ITunesSyncAlbumImportItem::~ML3ITunesSyncAlbumImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

id ML3ITunesSyncArtistImportItem::_getFoundationValue(id *this, int a2)
{
  uint64_t v3 = 0;
  if (a2 > 301989902)
  {
    switch(a2)
    {
      case 318767105:
        long long v4 = [this[11] objectForKey:@"artist"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v5 = [this[11] objectForKey:@"artist"];
        goto LABEL_30;
      case 318767106:
        long long v4 = [this[11] objectForKey:@"sort_artist"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v5 = [this[11] objectForKey:@"sort_artist"];
        goto LABEL_30;
      case 318767107:
        long long v4 = [this[13] objectForKey:@"series_name"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v5 = [this[13] objectForKey:@"series_name"];
        goto LABEL_30;
      case 318767108:
        long long v4 = [this[13] objectForKey:@"sort_series_name"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v5 = [this[13] objectForKey:@"sort_series_name"];
        goto LABEL_30;
      default:
        if (a2 == 301989903)
        {
          long long v4 = [this[11] objectForKey:@"artist_liked_state"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_31;
          }
          uint64_t v5 = [this[11] objectForKey:@"artist_liked_state"];
        }
        else
        {
          if (a2 != 301989904) {
            goto LABEL_33;
          }
          long long v4 = [this[11] objectForKey:@"artist_date_liked"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_31;
          }
          uint64_t v5 = [this[11] objectForKey:@"artist_date_liked"];
        }
LABEL_30:
        uint64_t v3 = (void *)v5;
        goto LABEL_32;
    }
  }
  switch(a2)
  {
    case 301989889:
      long long v4 = [this[11] objectForKey:@"album_artist"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        break;
      }
      uint64_t v5 = [this[11] objectForKey:@"album_artist"];
      goto LABEL_30;
    case 301989890:
      long long v4 = [this[11] objectForKey:@"sort_album_artist"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        break;
      }
      uint64_t v5 = [this[11] objectForKey:@"sort_album_artist"];
      goto LABEL_30;
    case 301989891:
    case 301989892:
    case 301989894:
    case 301989895:
    case 301989896:
    case 301989897:
      goto LABEL_33;
    case 301989893:
      long long v4 = [this[12] objectForKey:@"artist_id"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        break;
      }
      uint64_t v5 = [this[12] objectForKey:@"artist_id"];
      goto LABEL_30;
    case 301989898:
      long long v4 = [this[11] objectForKey:@"artist_pid"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        break;
      }
      uint64_t v5 = [this[11] objectForKey:@"artist_pid"];
      goto LABEL_30;
    default:
      if (a2 == 16777217)
      {
        uint64_t v3 = _MLMediaTypeFromTrackProperiesDictionary((NSDictionary *)this[11]);
        goto LABEL_33;
      }
      if (a2 != 16777246) {
        goto LABEL_33;
      }
      long long v4 = [this[11] objectForKey:@"is_compilation"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v5 = [this[11] objectForKey:@"is_compilation"];
        goto LABEL_30;
      }
      break;
  }
LABEL_31:
  uint64_t v3 = 0;
LABEL_32:

LABEL_33:

  return v3;
}

void sub_1B03B66E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncArtistImportItem::propertyKeyForSortPropertyKey(ML3ITunesSyncArtistImportItem *this, int a2)
{
  if (a2 == 318767106) {
    int v2 = 318767105;
  }
  else {
    int v2 = 0;
  }
  if (a2 == 318767108) {
    unsigned int v3 = 318767107;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a2 == 301989890) {
    return 301989889;
  }
  else {
    return v3;
  }
}

uint64_t ML3ITunesSyncArtistImportItem::sortPropertyKeyForPropertyKey(ML3ITunesSyncArtistImportItem *this, int a2)
{
  if (a2 == 318767105) {
    int v2 = 318767106;
  }
  else {
    int v2 = 0;
  }
  if (a2 == 318767107) {
    unsigned int v3 = 318767108;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a2 == 301989889) {
    return 301989890;
  }
  else {
    return v3;
  }
}

void ML3ITunesSyncArtistImportItem::getEffectiveSortSeriesName(ML3ITunesSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 24))(&v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v16 = v15;
  }
  (*(void (**)(long long *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(&v14, this, 318767108);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(void *)&long long v14 = &unk_1F08C3230;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v13 = v15;
  }
  int v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  std::string::size_type v7 = v15.__r_.__value_.__s.__data_[7];
  int v8 = v15.__r_.__value_.__s.__data_[7];
  std::string::size_type size = *((void *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0) {
    uint64_t v10 = v15.__r_.__value_.__s.__data_[7];
  }
  else {
    uint64_t v10 = *((void *)&v14 + 1);
  }
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    std::string::size_type v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v7 = size;
  }
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (uint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v14);
    }
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    long long v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  BOOL v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(void *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0) {
LABEL_31:
  }
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1B03B6A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v27 < 0) {
    operator delete(a13);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ML3ITunesSyncArtistImportItem::getEffectiveSortArtist(ML3ITunesSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  memset(&v15, 0, sizeof(v15));
  (*(void (**)(long long *__return_ptr))(*(void *)this + 24))(&v12);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    *(void *)&long long v12 = &unk_1F08C3230;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v14 = v13;
  }
  (*(void (**)(long long *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(&v12, this, 318767106);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    *(void *)&long long v12 = &unk_1F08C3230;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v11 = v13;
  }
  std::string::operator=(&v15, &v11);
  std::string::size_type v6 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  std::string::value_type v7 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v15.__r_.__value_.__l.__size_;
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v15.__r_.__value_.__l.__size_;
  }
  if (!v9)
  {
    ML3CPPSortableString((std::string *)&v12, (const UInt8 *)&v14);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    v15.__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
    std::string::size_type v6 = v13.__r_.__value_.__s.__data_[7];
    std::string::size_type size = *((void *)&v12 + 1);
    std::string::value_type v7 = v13.__r_.__value_.__s.__data_[7];
  }
  if (v7 < 0) {
    std::string::size_type v6 = size;
  }
  if (v6 && a2)
  {
    ML3CPPSanitizeString((std::string *)&v12, (uint64_t)&v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    v15.__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
    std::string::value_type v7 = v13.__r_.__value_.__s.__data_[7];
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  uint64_t v10 = (std::string *)(a3 + 16);
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external(v10, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    *(void *)(a3 + 32) = *((void *)&v15.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1B03B6DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ML3ITunesSyncArtistImportItem::getEffectiveSortAlbumArtist(ML3ITunesSyncArtistImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989889);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v23 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989890);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v20 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767105);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v19 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767106);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(void *)&long long v21 = &unk_1F08C3230;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v18 = v22;
  }
  int v7 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v20;
  }
  std::string::size_type v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v8 = v17.__r_.__value_.__l.__size_;
  }
  if (v8)
  {
    if (v6) {
      goto LABEL_56;
    }
    goto LABEL_28;
  }
  ML3CPPSortableString((std::string *)&v21, (const UInt8 *)&v23);
  if (v9 < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
  LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  std::string::size_type size = *((void *)&v21 + 1);
  if (!v6)
  {
LABEL_28:
    if ((v9 & 0x80u) == 0) {
      std::string::size_type v11 = v9;
    }
    else {
      std::string::size_type v11 = size;
    }
    if (!v11)
    {
      std::string::size_type v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v12 = v23.__r_.__value_.__l.__size_;
      }
      if (!v12)
      {
        (*(void (**)(long long *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this
                                                                                                 + 168))(&v21, this, a2);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        }
        else {
          std::string v16 = v22;
        }
        if ((v9 & 0x80) != 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        std::string v17 = v16;
        *(void *)&long long v21 = &unk_1F08C3230;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        std::string::size_type v13 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        int v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v13 = v17.__r_.__value_.__l.__size_;
        }
        if (!v13)
        {
          std::string::size_type v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v14 = v19.__r_.__value_.__l.__size_;
          }
          if (!v14)
          {
            (*(void (**)(long long *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 176))(&v21, this, a2);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
            }
            else {
              std::string v16 = v22;
            }
            if (v9 < 0) {
              operator delete(v17.__r_.__value_.__l.__data_);
            }
            std::string v17 = v16;
            *(void *)&long long v21 = &unk_1F08C3230;
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v22.__r_.__value_.__l.__data_);
            }
            LOBYTE(v9) = *((unsigned char *)&v17.__r_.__value_.__s + 23);
            std::string::size_type size = v17.__r_.__value_.__l.__size_;
          }
        }
      }
    }
  }
LABEL_56:
  if ((v9 & 0x80u) == 0) {
    std::string::size_type size = v9;
  }
  if (size && a2)
  {
    ML3CPPSanitizeString((std::string *)&v21, (uint64_t)&v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
    LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  std::string v15 = (std::string *)(a3 + 16);
  if ((v9 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(void *)(a3 + 32) = *((void *)&v17.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_71;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
LABEL_71:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1B03B73D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  *(void *)(v39 - 136) = &unk_1F08C3230;
  if (*(char *)(v39 - 97) < 0) {
    operator delete(*(void **)(v39 - 120));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  _Unwind_Resume(exception_object);
}

void ML3ITunesSyncArtistImportItem::getEffectiveAlbumArtist(ML3ITunesSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767105);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(void *)&long long v18 = &unk_1F08C3230;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string __str = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767107);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(void *)&long long v18 = &unk_1F08C3230;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v17 = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 301989889);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(void *)&long long v18 = &unk_1F08C3230;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v16 = v19;
  }
  int v7 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v18, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v18 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[0] = v16.__r_.__value_.__r.__words[2];
  }
  if (!v6)
  {
    uint64_t v8 = v19.__r_.__value_.__s.__data_[7];
    std::string::value_type v9 = v19.__r_.__value_.__s.__data_[7];
    uint64_t v10 = *((void *)&v18 + 1);
    if (v19.__r_.__value_.__s.__data_[7] >= 0) {
      uint64_t v11 = v19.__r_.__value_.__s.__data_[7];
    }
    else {
      uint64_t v11 = *((void *)&v18 + 1);
    }
    if (!v11)
    {
      std::string::operator=((std::string *)&v18, &__str);
      uint64_t v8 = v19.__r_.__value_.__s.__data_[7];
      uint64_t v10 = *((void *)&v18 + 1);
      std::string::value_type v9 = v19.__r_.__value_.__s.__data_[7];
    }
    if (v9 < 0) {
      uint64_t v8 = v10;
    }
    if (!v8) {
      std::string::operator=((std::string *)&v18, &v17);
    }
  }
  uint64_t v12 = v19.__r_.__value_.__s.__data_[7];
  std::string::value_type v13 = v19.__r_.__value_.__s.__data_[7];
  if (v19.__r_.__value_.__s.__data_[7] < 0) {
    uint64_t v12 = *((void *)&v18 + 1);
  }
  if (v12 && a2)
  {
    ML3CPPSanitizeString(&v15, (uint64_t)&v18);
    if (v19.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v18);
    }
    v19.__r_.__value_.__r.__words[0] = v15.__r_.__value_.__r.__words[2];
    long long v18 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    std::string::value_type v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + 8) = 1;
  std::string::size_type v14 = (std::string *)(a3 + 16);
  if ((v13 & 0x80) == 0)
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
    *(void *)(a3 + 32) = v19.__r_.__value_.__r.__words[0];
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  if ((v19.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  operator delete((void *)v18);
  if (v7 < 0) {
LABEL_38:
  }
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_39:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B03B7890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  operator delete(__p);
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v31 - 57) < 0) {
    operator delete(*(void **)(v31 - 80));
  }
  _Unwind_Resume(a1);
}

id ML3ITunesSyncArtistImportItem::getDeduplicationPredicates(ML3ITunesSyncArtistImportItem *this)
{
  void v27[2] = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  unsigned int v3 = @"store_id";
  long long v4 = @"grouping_key";
  memset(&__p, 0, sizeof(__p));
  if (*((void *)this + 16) == 2) {
    uint64_t v5 = 318767111;
  }
  else {
    uint64_t v5 = 301989893;
  }
  uint64_t v6 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 32))(this, v5);
  if (*((void *)this + 16) == 2)
  {
    (*(void (**)(void *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(v22, this, 318767105);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = v23;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __str;
    v22[0] = &unk_1F08C3230;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 32))(this, 16777217);
    if ((MLMediaTypeByStandardizingMediaType(v7) & 8) == 0)
    {
      (*(void (**)(void *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(v22, this, 318767107);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
        v22[0] = &unk_1F08C3230;
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string __str = v23;
      }
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      char v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::operator=(&__p, &__str);
        char v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if (v10 < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v8 = 0;
  }
  else
  {
    (*(void (**)(void *__return_ptr, ML3ITunesSyncArtistImportItem *, void))(*(void *)this + 152))(v22, this, 0);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = v23;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __str;
    v22[0] = &unk_1F08C3230;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 32))(this, 301989898);
  }
  std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  if (v11)
  {
    uint64_t v12 = (void *)*((void *)this + 17);
    std::string::value_type v13 = ML3CPPBridgeString((const UInt8 *)&__p, 1);
    std::string::size_type v14 = [v12 groupingKeyForString:v13];
  }
  else
  {
    std::string::size_type v14 = 0;
  }
  if (v8)
  {
    std::string v15 = +[ML3ComparisonPredicate predicateWithProperty:@"sync_id" equalToInt64:v8];
    [v2 addObject:v15];
  }
  if (v6)
  {
    if ([v14 length])
    {
      std::string v16 = +[ML3ComparisonPredicate predicateWithProperty:v3 equalToInt64:v6];
      v27[0] = v16;
      std::string v17 = +[ML3ComparisonPredicate predicateWithProperty:v4 equalToValue:v14];
      v27[1] = v17;
      [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:2];
    }
    else
    {
      std::string v16 = +[ML3ComparisonPredicate predicateWithProperty:v3 equalToInt64:v6];
      v26[0] = v16;
      std::string v17 = +[ML3ComparisonPredicate predicateWithProperty:v4 value:&stru_1F08D4D70 comparison:1 caseInsensitive:1 treatNullAsString:&stru_1F08D4D70];
      v26[1] = v17;
      [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:2];
    long long v18 = };
    std::string v19 = +[ML3CompoundPredicate predicateMatchingPredicates:v18];

    [v2 addObject:v19];
  }
  if ([v14 length])
  {
    std::string v20 = +[ML3ComparisonPredicate predicateWithProperty:v4 equalToValue:v14];
    [v2 addObject:v20];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v2;
}

void sub_1B03B7F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncArtistImportItem::getDescription(ML3ITunesSyncArtistImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  if (*((void *)this + 16) == 2) {
    uint64_t v2 = 318767105;
  }
  else {
    uint64_t v2 = 301989889;
  }
  (*(void (**)(void *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(v20, this, v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v20[0] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v22 = __p;
  }
  if (*((void *)this + 16) == 2) {
    uint64_t v3 = 318767106;
  }
  else {
    uint64_t v3 = 301989890;
  }
  (*(void (**)(void *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(void *)this + 24))(v20, this, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v20[0] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v19 = __p;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"<ML3ITunesSyncArtistImportItem ", 31);
  *(_DWORD *)((char *)&v23[1] + *(void *)(v23[0] - 24)) = *(_DWORD *)((unsigned char *)&v23[1] + *(void *)(v23[0] - 24)) & 0xFFFFFFB5 | 8;
  long long v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" name=", 6);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v22;
  }
  else {
    uint64_t v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, size);
  std::string::value_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" sortName=", 10);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v10 = &v19;
  }
  else {
    char v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v19.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  std::string::value_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 2;
  std::string::size_type v14 = (void *)std::ostream::operator<<();
  std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" store_id=", 10);
  *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
  std::string v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" artistType=", 12);
  std::string v17 = (void *)std::ostream::operator<<();
  LOBYTE(v20[0]) = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v20, 1);
  std::stringbuf::str();
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  v23[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v23[1] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v25);
}

void sub_1B03B84A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  std::ostringstream::~ostringstream((uint64_t)&a29);
  _Unwind_Resume(a1);
}

BOOL ML3ITunesSyncArtistImportItem::hasValue(ML3ITunesSyncArtistImportItem *this)
{
  id v1 = (*(void (**)(ML3ITunesSyncArtistImportItem *))(*(void *)this + 216))(this);
  BOOL v2 = v1 != 0;

  return v2;
}

void ML3ITunesSyncArtistImportItem::~ML3ITunesSyncArtistImportItem(id *this)
{
  ML3ITunesSyncArtistImportItem::~ML3ITunesSyncArtistImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

void ML3ITunesSyncImportItem::ML3ITunesSyncImportItem(ML3ITunesSyncImportItem *this, NSDictionary *a2)
{
  long long v4 = a2;
  *((_WORD *)this + 8) = 256;
  *((unsigned char *)this + 18) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *(void *)this = &unk_1F08C4088;
  *((void *)this + 1) = 0;
  *((void *)this + 8) = 0;
  objc_storeStrong((id *)this + 8, a2);
  uint64_t v5 = [(NSDictionary *)v4 objectForKey:@"pid"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v7 = [(NSDictionary *)v4 objectForKey:@"pid"];
  }
  else
  {
    uint64_t v7 = 0;
  }
  *((void *)this + 9) = [v7 longLongValue];
  if (isKindOfClass) {
}
  }

void sub_1B03B8764(_Unwind_Exception *a1)
{
  char v7 = v5;
  if (v7) {

  }
  *(void *)uint64_t v2 = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v3);

  _Unwind_Resume(a1);
}

void ML3ITunesSyncTrackImportItem::ML3ITunesSyncTrackImportItem(ML3ITunesSyncTrackImportItem *this, NSDictionary *a2)
{
  long long v4 = a2;
  ML3ITunesSyncImportItem::ML3ITunesSyncImportItem(this, v4);
  *(void *)this = &unk_1F08C50C8;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  objc_storeStrong((id *)this + 10, a2);
  uint64_t v5 = [*((id *)this + 10) objectForKey:@"avformat_info"];
  uint64_t v6 = (void *)*((void *)this + 11);
  *((void *)this + 11) = v5;

  uint64_t v7 = [*((id *)this + 10) objectForKey:@"item"];
  uint64_t v8 = (void *)*((void *)this + 12);
  *((void *)this + 12) = v7;

  uint64_t v9 = [*((id *)this + 10) objectForKey:@"item_stats"];
  char v10 = (void *)*((void *)this + 13);
  *((void *)this + 13) = v9;

  uint64_t v11 = [*((id *)this + 10) objectForKey:@"podcast_info"];
  uint64_t v12 = (void *)*((void *)this + 14);
  *((void *)this + 14) = v11;

  uint64_t v13 = [*((id *)this + 10) objectForKey:@"rental_info"];
  std::string::size_type v14 = (void *)*((void *)this + 15);
  *((void *)this + 15) = v13;

  uint64_t v15 = [*((id *)this + 10) objectForKey:@"store_info"];
  std::string v16 = (void *)*((void *)this + 16);
  *((void *)this + 16) = v15;

  uint64_t v17 = [*((id *)this + 10) objectForKey:@"video_info"];
  long long v18 = (void *)*((void *)this + 17);
  *((void *)this + 17) = v17;

  uint64_t v19 = [*((id *)this + 12) objectForKey:@"lyrics"];
  std::string v20 = (void *)*((void *)this + 18);
  *((void *)this + 18) = v19;

  long long v21 = [*((id *)this + 16) objectForKey:@"store_item_id"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    std::string v23 = [*((id *)this + 16) objectForKey:@"store_item_id"];
  }
  else
  {
    std::string v23 = 0;
  }
  *((void *)this + 19) = [v23 longLongValue];
  if (isKindOfClass) {

  }
  char v24 = [*((id *)this + 8) objectForKey:@"operation"];
  *((unsigned char *)this + 17) = [v24 isEqualToString:@"insert_track"];
}

void sub_1B03B89F0(_Unwind_Exception *a1)
{
  *(void *)uint64_t v2 = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v2 + 24);

  _Unwind_Resume(a1);
}

void ML3ITunesSyncContainerImportItem::ML3ITunesSyncContainerImportItem(ML3ITunesSyncContainerImportItem *this, NSDictionary *a2, char a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  ML3ITunesSyncImportItem::ML3ITunesSyncImportItem(this, v5);
  *(void *)this = &unk_1F08C5FF8;
  *((unsigned char *)this + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = a3;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  uint64_t v6 = [*((id *)this + 8) objectForKey:@"container"];
  uint64_t v7 = (void *)*((void *)this + 12);
  *((void *)this + 12) = v6;

  uint64_t v8 = [*((id *)this + 8) objectForKey:@"container_ui"];
  uint64_t v9 = (void *)*((void *)this + 13);
  *((void *)this + 13) = v8;

  char v10 = [*((id *)this + 8) objectForKey:@"pid"];
  *((void *)this + 11) = [v10 longLongValue];

  *((void *)this + 1) = *((void *)this + 11);
  [*((id *)this + 8) objectForKey:@"item_to_container"];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = [v11 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v30 != v13) {
          objc_enumerationMutation(v11);
        }
        uint64_t v15 = objc_msgSend(*(id *)(*((void *)&v29 + 1) + 8 * i), "longLongValue", (void)v29);
        uint64_t v16 = v15;
        long long v18 = (uint64_t *)*((void *)this + 15);
        unint64_t v17 = *((void *)this + 16);
        if ((unint64_t)v18 >= v17)
        {
          std::string v20 = (uint64_t *)*((void *)this + 14);
          uint64_t v21 = v18 - v20;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v17 - (void)v20;
          if (v23 >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v24);
            std::string v20 = (uint64_t *)*((void *)this + 14);
            long long v18 = (uint64_t *)*((void *)this + 15);
          }
          else
          {
            uint64_t v25 = 0;
          }
          char v26 = (uint64_t *)(v24 + 8 * v21);
          uint64_t *v26 = v16;
          uint64_t v19 = v26 + 1;
          while (v18 != v20)
          {
            uint64_t v27 = *--v18;
            *--char v26 = v27;
          }
          *((void *)this + 14) = v26;
          *((void *)this + 15) = v19;
          *((void *)this + 16) = v24 + 8 * v25;
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          uint64_t *v18 = v15;
          uint64_t v19 = v18 + 1;
        }
        *((void *)this + 15) = v19;
      }
      uint64_t v12 = [v11 countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v12);
  }

  uint64_t v28 = [*((id *)this + 8) objectForKey:@"operation"];
  *((unsigned char *)this + 17) = [v28 isEqualToString:@"insert_playlist"];
}

void sub_1B03B8D48(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v1 + 112);
  if (v6)
  {
    *(void *)(v1 + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v6;
    operator delete(v6);
  }

  *(void *)uint64_t v1 = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v1 + 24);

  _Unwind_Resume(a1);
}

void ML3ITunesSyncAlbumImportItem::ML3ITunesSyncAlbumImportItem(ML3ITunesSyncAlbumImportItem *this, NSDictionary *a2, ML3MusicLibrary *a3)
{
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  ML3ITunesSyncImportItem::ML3ITunesSyncImportItem(this, v6);
  *(void *)this = &unk_1F08C4FD8;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 14) = 0;
  uint64_t v8 = v7;
  *((void *)this + 17) = v8;
  objc_storeStrong((id *)this + 11, a2);
  uint64_t v9 = [*((id *)this + 11) objectForKey:@"item_stats"];
  char v10 = (void *)*((void *)this + 10);
  *((void *)this + 1sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v9;

  uint64_t v11 = [*((id *)this + 11) objectForKey:@"item"];
  uint64_t v12 = (void *)*((void *)this + 12);
  *((void *)this + 12) = v11;

  uint64_t v13 = [*((id *)this + 11) objectForKey:@"store_info"];
  std::string::size_type v14 = (void *)*((void *)this + 13);
  *((void *)this + 13) = v13;

  uint64_t v15 = [*((id *)this + 11) objectForKey:@"video_info"];
  uint64_t v16 = (void *)*((void *)this + 14);
  *((void *)this + 14) = v15;

  unint64_t v17 = [*((id *)this + 13) objectForKey:@"store_item_id"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v19 = [*((id *)this + 13) objectForKey:@"store_item_id"];
  }
  else
  {
    uint64_t v19 = 0;
  }
  *((void *)this + 15) = [v19 longLongValue];
  if (isKindOfClass) {

  }
  std::string v20 = [(NSDictionary *)v6 objectForKey:@"pid"];
  objc_opt_class();
  char v21 = objc_opt_isKindOfClass();
  if (v21)
  {
    unint64_t v22 = [(NSDictionary *)v6 objectForKey:@"pid"];
  }
  else
  {
    unint64_t v22 = 0;
  }
  *((void *)this + 16) = [v22 longLongValue];
  if (v21) {

  }
  uint64_t v23 = [*((id *)this + 8) objectForKey:@"operation"];
  *((unsigned char *)this + 17) = [v23 isEqualToString:@"insert_track"];
}

void sub_1B03B9034(_Unwind_Exception *a1)
{
  *(void *)uint64_t v2 = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v2 + 24);

  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncArtistImportItem::ML3ITunesSyncArtistImportItem(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = a2;
  id v9 = a4;
  ML3ITunesSyncImportItem::ML3ITunesSyncImportItem((ML3ITunesSyncImportItem *)a1, v8);
  *(void *)a1 = &unk_1F08C5798;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(void *)(a1 + 128) = a3;
  id v10 = v9;
  *(void *)(a1 + 136) = v10;
  objc_storeStrong((id *)(a1 + 80), a2);
  uint64_t v11 = [*(id *)(a1 + 80) objectForKey:@"item"];
  uint64_t v12 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v11;

  uint64_t v13 = [*(id *)(a1 + 80) objectForKey:@"store_info"];
  std::string::size_type v14 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v13;

  uint64_t v15 = [*(id *)(a1 + 80) objectForKey:@"video_info"];
  uint64_t v16 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v15;

  unint64_t v17 = [*(id *)(a1 + 96) objectForKey:@"store_item_id"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v19 = [*(id *)(a1 + 96) objectForKey:@"store_item_id"];
  }
  else
  {
    uint64_t v19 = 0;
  }
  *(void *)(a1 + 112) = [v19 longLongValue];
  if (isKindOfClass) {

  }
  std::string v20 = [(NSDictionary *)v8 objectForKey:@"pid"];
  objc_opt_class();
  char v21 = objc_opt_isKindOfClass();
  if (v21)
  {
    unint64_t v22 = [(NSDictionary *)v8 objectForKey:@"pid"];
  }
  else
  {
    unint64_t v22 = 0;
  }
  *(void *)(a1 + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = [v22 longLongValue];
  if (v21) {

  }
  uint64_t v23 = [*(id *)(a1 + 64) objectForKey:@"operation"];
  *(unsigned char *)(a1 + 17) = [v23 isEqualToString:@"insert_track"];

  return a1;
}

void sub_1B03B92F0(_Unwind_Exception *a1)
{
  *(void *)uint64_t v2 = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v2 + 24);

  _Unwind_Resume(a1);
}

void sub_1B03BA33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t MLMediaTypeForITMediaKind(unsigned int a1)
{
  int v1 = a1 & 4;
  if ((~a1 & 6) == 0) {
    int v1 = 256;
  }
  unsigned int v2 = (a1 >> 2) & 2 | (8 * (a1 & 1)) | (((a1 >> 5) & 1) << 10) | (8 * a1) & 0x2200 | HIWORD(a1) & 0x30 | ((~a1 & 0x21) == 0) | v1;
  if (((((((a1 >> 5) & 1) << 10) & 0xFF00 | (8 * a1) & 0x2200 | (((~a1 & 0x21) == 0) | v1) & 0xFF00) == 0) & (a1 >> 1)) != 0) {
    return v2 | 0x800;
  }
  else {
    return v2;
  }
}

uint64_t ITMediaKindForMLMediaType(unsigned int a1)
{
  if ((int)a1 > 65279)
  {
    if (a1 == 0xFFFFFF) {
      return 3951;
    }
    if (a1 == 65280) {
      return 3682;
    }
  }
  else if (a1 == 255 || a1 == 1535)
  {
    return 301;
  }
  int v2 = a1 & 4;
  if ((a1 & 0x100) != 0) {
    int v2 = 6;
  }
  int v3 = (4 * a1) & 8 | (a1 >> 3) & 1 | v2;
  if (a1) {
    v3 |= 0x21u;
  }
  return (a1 >> 3) & 0x440 | (((a1 >> 4) & 3) << 20) | (a1 >> 5) & 0x20 | (a1 >> 10) & 2 | v3;
}

id NSStringFromITMediaKind(int a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v3 = 0;
  long long v4 = @"Song";
  do
  {
    if ((dword_1E5FB5050[v3] & a1) != 0) {
      [v2 addObject:v4];
    }
    long long v4 = *(__CFString **)&dword_1E5FB5050[v3 + 6];
    v3 += 4;
  }
  while (v3 != 100);
  uint64_t v5 = [v2 componentsJoinedByString:@"|"];

  return v5;
}

id NSStringFromITDBTrackField(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      int v1 = NSString;
      uint64_t v6 = @"kITDBTrackField_Invalid";
      uint64_t v8 = 0;
      goto LABEL_163;
    case 1:
      int v1 = NSString;
      uint64_t v2 = 1;
      uint64_t v3 = @"kITDBTrackField_PlayStatus";
      goto LABEL_162;
    case 2:
      int v1 = NSString;
      uint64_t v2 = 2;
      uint64_t v3 = @"kITDBTrackField_Name";
      goto LABEL_162;
    case 3:
      int v1 = NSString;
      uint64_t v2 = 3;
      uint64_t v3 = @"kITDBTrackField_Album";
      goto LABEL_162;
    case 4:
      int v1 = NSString;
      uint64_t v2 = 4;
      uint64_t v3 = @"kITDBTrackField_Artist";
      goto LABEL_162;
    case 5:
      int v1 = NSString;
      uint64_t v2 = 5;
      uint64_t v3 = @"kITDBTrackField_BitRate";
      goto LABEL_162;
    case 6:
      int v1 = NSString;
      uint64_t v2 = 6;
      uint64_t v3 = @"kITDBTrackField_SampleRate";
      goto LABEL_162;
    case 7:
      int v1 = NSString;
      uint64_t v2 = 7;
      uint64_t v3 = @"kITDBTrackField_Year";
      goto LABEL_162;
    case 8:
      int v1 = NSString;
      uint64_t v2 = 8;
      uint64_t v3 = @"kITDBTrackField_Genre";
      goto LABEL_162;
    case 9:
      int v1 = NSString;
      uint64_t v2 = 9;
      uint64_t v3 = @"kITDBTrackField_Kind";
      goto LABEL_162;
    case 10:
      int v1 = NSString;
      uint64_t v2 = 10;
      uint64_t v3 = @"kITDBTrackField_Date";
      goto LABEL_162;
    case 11:
      int v1 = NSString;
      uint64_t v2 = 11;
      uint64_t v3 = @"kITDBTrackField_TrackNumber";
      goto LABEL_162;
    case 12:
      int v1 = NSString;
      uint64_t v2 = 12;
      uint64_t v3 = @"kITDBTrackField_TotalSize";
      goto LABEL_162;
    case 13:
      int v1 = NSString;
      uint64_t v2 = 13;
      uint64_t v3 = @"kITDBTrackField_TotalTime";
      goto LABEL_162;
    case 14:
      int v1 = NSString;
      uint64_t v2 = 14;
      uint64_t v3 = @"kITDBTrackField_Comment";
      goto LABEL_162;
    case 15:
      int v1 = NSString;
      uint64_t v2 = 15;
      uint64_t v3 = @"kITDBTrackField_Location";
      goto LABEL_162;
    case 16:
      int v1 = NSString;
      uint64_t v2 = 16;
      uint64_t v3 = @"kITDBTrackField_DateAdded";
      goto LABEL_162;
    case 17:
      int v1 = NSString;
      uint64_t v2 = 17;
      uint64_t v3 = @"kITDBTrackField_EQPreset";
      goto LABEL_162;
    case 18:
      int v1 = NSString;
      uint64_t v2 = 18;
      uint64_t v3 = @"kITDBTrackField_Composer";
      goto LABEL_162;
    case 19:
      int v1 = NSString;
      uint64_t v2 = 19;
      uint64_t v3 = @"kITDBTrackField_ObsoleteDisplayArtist";
      goto LABEL_162;
    case 20:
      int v1 = NSString;
      uint64_t v2 = 20;
      uint64_t v3 = @"kITDBTrackField_NormalizedVolume";
      goto LABEL_162;
    case 21:
      int v1 = NSString;
      uint64_t v2 = 21;
      uint64_t v3 = @"kITDBTrackField_StreamStatus";
      goto LABEL_162;
    case 22:
      int v1 = NSString;
      uint64_t v2 = 22;
      uint64_t v3 = @"kITDBTrackField_UserPlayCount";
      goto LABEL_162;
    case 23:
      int v1 = NSString;
      uint64_t v2 = 23;
      uint64_t v3 = @"kITDBTrackField_PlayDate";
      goto LABEL_162;
    case 24:
      int v1 = NSString;
      uint64_t v2 = 24;
      uint64_t v3 = @"kITDBTrackField_DiscNumber";
      goto LABEL_162;
    case 25:
      int v1 = NSString;
      uint64_t v2 = 25;
      uint64_t v3 = @"kITDBTrackField_TrackRating";
      goto LABEL_162;
    case 26:
      int v1 = NSString;
      uint64_t v2 = 26;
      uint64_t v3 = @"kITDBTrackField_Price";
      goto LABEL_162;
    case 27:
      int v1 = NSString;
      uint64_t v2 = 27;
      uint64_t v3 = @"kITDBTrackField_ObjectID";
      goto LABEL_162;
    case 28:
      int v1 = NSString;
      uint64_t v2 = 28;
      uint64_t v3 = @"kITDBTrackField_PersistentID";
      goto LABEL_162;
    case 29:
      int v1 = NSString;
      uint64_t v2 = 29;
      uint64_t v3 = @"kITDBTrackField_OldUserDisabled";
      goto LABEL_162;
    case 30:
      int v1 = NSString;
      uint64_t v2 = 30;
      uint64_t v3 = @"kITDBTrackField_PlaylistItemID";
      goto LABEL_162;
    case 31:
      int v1 = NSString;
      uint64_t v2 = 31;
      uint64_t v3 = @"kITDBTrackField_Compilation";
      goto LABEL_162;
    case 32:
      int v1 = NSString;
      uint64_t v2 = 32;
      uint64_t v3 = @"kITDBTrackField_PurchaseDate";
      goto LABEL_162;
    case 33:
      int v1 = NSString;
      uint64_t v2 = 33;
      uint64_t v3 = @"kITDBTrackField_Relevance";
      goto LABEL_162;
    case 34:
      int v1 = NSString;
      uint64_t v2 = 34;
      uint64_t v3 = @"kITDBTrackField_ReleaseDate";
      goto LABEL_162;
    case 35:
      int v1 = NSString;
      uint64_t v2 = 35;
      uint64_t v3 = @"kITDBTrackField_BeatsPerMinute";
      goto LABEL_162;
    case 36:
      int v1 = NSString;
      uint64_t v2 = 36;
      uint64_t v3 = @"kITDBTrackField_ParentContainerID";
      goto LABEL_162;
    case 37:
      int v1 = NSString;
      uint64_t v2 = 37;
      uint64_t v3 = @"kITDBTrackField_Artwork";
      goto LABEL_162;
    case 38:
      int v1 = NSString;
      uint64_t v2 = 38;
      uint64_t v3 = @"kITDBTrackField_Popularity";
      goto LABEL_162;
    case 39:
      int v1 = NSString;
      uint64_t v2 = 39;
      uint64_t v3 = @"kITDBTrackField_Grouping";
      goto LABEL_162;
    case 40:
      int v1 = NSString;
      uint64_t v2 = 40;
      uint64_t v3 = @"kITDBTrackField_PlaylistPersistentID";
      goto LABEL_162;
    case 41:
      int v1 = NSString;
      uint64_t v2 = 41;
      uint64_t v3 = @"kITDBTrackField_SongID";
      goto LABEL_162;
    case 42:
      int v1 = NSString;
      uint64_t v2 = 42;
      uint64_t v3 = @"kITDBTrackField_ArtistID";
      goto LABEL_162;
    case 43:
      int v1 = NSString;
      uint64_t v2 = 43;
      uint64_t v3 = @"kITDBTrackField_PlaylistID";
      goto LABEL_162;
    case 44:
      int v1 = NSString;
      uint64_t v2 = 44;
      uint64_t v3 = @"kITDBTrackField_ComposerID";
      goto LABEL_162;
    case 45:
      int v1 = NSString;
      uint64_t v2 = 45;
      uint64_t v3 = @"kITDBTrackField_GenreID";
      goto LABEL_162;
    case 46:
      int v1 = NSString;
      uint64_t v2 = 46;
      uint64_t v3 = @"kITDBTrackField_CodecType";
      goto LABEL_162;
    case 47:
      int v1 = NSString;
      uint64_t v2 = 47;
      uint64_t v3 = @"kITDBTrackField_CodecSubType";
      goto LABEL_162;
    case 48:
      int v1 = NSString;
      uint64_t v2 = 48;
      uint64_t v3 = @"kITDBTrackField_SongDataKind";
      goto LABEL_162;
    case 49:
      int v1 = NSString;
      uint64_t v2 = 49;
      uint64_t v3 = @"kITDBTrackField_DiscCount";
      goto LABEL_162;
    case 50:
      int v1 = NSString;
      uint64_t v2 = 50;
      uint64_t v3 = @"kITDBTrackField_StartTime";
      goto LABEL_162;
    case 51:
      int v1 = NSString;
      uint64_t v2 = 51;
      uint64_t v3 = @"kITDBTrackField_StopTime";
      goto LABEL_162;
    case 52:
      int v1 = NSString;
      uint64_t v2 = 52;
      uint64_t v3 = @"kITDBTrackField_TrackCount";
      goto LABEL_162;
    case 53:
      int v1 = NSString;
      uint64_t v2 = 53;
      uint64_t v3 = @"kITDBTrackField_StorefrontID";
      goto LABEL_162;
    case 54:
      int v1 = NSString;
      uint64_t v2 = 54;
      uint64_t v3 = @"kITDBTrackField_Description";
      goto LABEL_162;
    case 55:
      int v1 = NSString;
      uint64_t v2 = 55;
      uint64_t v3 = @"kITDBTrackField_Category";
      goto LABEL_162;
    case 56:
      int v1 = NSString;
      uint64_t v2 = 56;
      uint64_t v3 = @"kITDBTrackField_Keywords";
      goto LABEL_162;
    case 57:
      int v1 = NSString;
      uint64_t v2 = 57;
      uint64_t v3 = @"kITDBTrackField_Podcast";
      goto LABEL_162;
    case 58:
      int v1 = NSString;
      uint64_t v2 = 58;
      uint64_t v3 = @"kITDBTrackField_CloudMatchState";
      goto LABEL_162;
    case 59:
      int v1 = NSString;
      uint64_t v2 = 59;
      uint64_t v3 = @"kITDBTrackField_HasLyrics";
      goto LABEL_162;
    case 60:
      int v1 = NSString;
      uint64_t v2 = 60;
      uint64_t v3 = @"kITDBTrackField_MediaKind";
      goto LABEL_162;
    case 61:
      int v1 = NSString;
      uint64_t v2 = 61;
      uint64_t v3 = @"kITDBTrackField_Debug";
      goto LABEL_162;
    case 62:
      int v1 = NSString;
      uint64_t v2 = 62;
      uint64_t v3 = @"kITDBTrackField_SeriesName";
      goto LABEL_162;
    case 63:
      int v1 = NSString;
      uint64_t v2 = 63;
      uint64_t v3 = @"kITDBTrackField_SeasonNumber";
      goto LABEL_162;
    case 64:
      int v1 = NSString;
      uint64_t v2 = 64;
      uint64_t v3 = @"kITDBTrackField_EpisodeID";
      goto LABEL_162;
    case 65:
      int v1 = NSString;
      uint64_t v2 = 65;
      uint64_t v3 = @"kITDBTrackField_EpisodeSortID";
      goto LABEL_162;
    case 66:
      int v1 = NSString;
      uint64_t v2 = 66;
      uint64_t v3 = @"kITDBTrackField_NetworkName";
      goto LABEL_162;
    case 67:
      int v1 = NSString;
      uint64_t v2 = 67;
      uint64_t v3 = @"kITDBTrackField_LastBackupDate";
      goto LABEL_162;
    case 68:
      int v1 = NSString;
      uint64_t v2 = 68;
      uint64_t v3 = @"kITDBTrackField_UserSkipCount";
      goto LABEL_162;
    case 69:
      int v1 = NSString;
      uint64_t v2 = 69;
      uint64_t v3 = @"kITDBTrackField_SkipDate";
      goto LABEL_162;
    case 70:
      int v1 = NSString;
      uint64_t v2 = 70;
      uint64_t v3 = @"kITDBTrackField_GaplessAlbum";
      goto LABEL_162;
    case 71:
      int v1 = NSString;
      uint64_t v2 = 71;
      uint64_t v3 = @"kITDBTrackField_AlbumArtist";
      goto LABEL_162;
    case 72:
      int v1 = NSString;
      uint64_t v2 = 72;
      uint64_t v3 = @"kITDBTrackField_ShuffleID";
      goto LABEL_162;
    case 73:
      int v1 = NSString;
      uint64_t v2 = 73;
      uint64_t v3 = @"kITDBTrackField_TrackID";
      goto LABEL_162;
    case 74:
      int v1 = NSString;
      uint64_t v2 = 74;
      uint64_t v3 = @"kITDBTrackField_RelativeVolume";
      goto LABEL_162;
    case 75:
      int v1 = NSString;
      uint64_t v2 = 75;
      uint64_t v3 = @"kITDBTrackField_Attributes";
      goto LABEL_162;
    case 76:
      int v1 = NSString;
      uint64_t v2 = 76;
      uint64_t v3 = @"kITDBTrackField_Private";
      goto LABEL_162;
    case 77:
      int v1 = NSString;
      uint64_t v2 = 77;
      uint64_t v3 = @"kITDBTrackField_AlbumInfo";
      goto LABEL_162;
    case 78:
      int v1 = NSString;
      uint64_t v2 = 78;
      uint64_t v3 = @"kITDBTrackField_SortName";
      goto LABEL_162;
    case 79:
      int v1 = NSString;
      uint64_t v2 = 79;
      uint64_t v3 = @"kITDBTrackField_SortAlbum";
      goto LABEL_162;
    case 80:
      int v1 = NSString;
      uint64_t v2 = 80;
      uint64_t v3 = @"kITDBTrackField_SortArtist";
      goto LABEL_162;
    case 81:
      int v1 = NSString;
      uint64_t v2 = 81;
      uint64_t v3 = @"kITDBTrackField_SortAlbumArtist";
      goto LABEL_162;
    case 82:
      int v1 = NSString;
      uint64_t v2 = 82;
      uint64_t v3 = @"kITDBTrackField_SortComposer";
      goto LABEL_162;
    case 83:
      int v1 = NSString;
      uint64_t v2 = 83;
      uint64_t v3 = @"kITDBTrackField_SortSeriesName";
      goto LABEL_162;
    case 84:
      int v1 = NSString;
      uint64_t v2 = 84;
      uint64_t v3 = @"kITDBTrackField_MovieInfo";
      goto LABEL_162;
    case 85:
      int v1 = NSString;
      uint64_t v2 = 85;
      uint64_t v3 = @"kITDBTrackField_PodcastURL";
      goto LABEL_162;
    case 86:
      int v1 = NSString;
      uint64_t v2 = 86;
      uint64_t v3 = @"kITDBTrackField_LongDescription";
      goto LABEL_162;
    case 87:
      int v1 = NSString;
      uint64_t v2 = 87;
      uint64_t v3 = @"kITDBTrackField_ExternalGUID";
      goto LABEL_162;
    case 88:
      int v1 = NSString;
      uint64_t v2 = 88;
      uint64_t v3 = @"kITDBTrackField_ChapterData";
      goto LABEL_162;
    case 89:
      int v1 = NSString;
      uint64_t v2 = 89;
      uint64_t v3 = @"kITDBTrackField_ExtendedContentRating";
      goto LABEL_162;
    case 90:
      int v1 = NSString;
      uint64_t v2 = 90;
      uint64_t v3 = @"kITDBTrackField_AlbumRating";
      goto LABEL_162;
    case 91:
      int v1 = NSString;
      uint64_t v2 = 91;
      uint64_t v3 = @"kITDBTrackField_RentalExpirationDate";
      goto LABEL_162;
    case 92:
      int v1 = NSString;
      uint64_t v2 = 92;
      uint64_t v3 = @"kITDBTrackField_ObsoleteRingtoneStatus";
      goto LABEL_162;
    case 93:
      int v1 = NSString;
      uint64_t v2 = 93;
      uint64_t v3 = @"kITDBTrackField_BookmarkTime";
      goto LABEL_162;
    case 94:
      int v1 = NSString;
      uint64_t v2 = 94;
      uint64_t v3 = @"kITDBTrackField_RememberBookmark";
      goto LABEL_162;
    case 95:
      int v1 = NSString;
      uint64_t v2 = 95;
      uint64_t v3 = @"kITDBTrackField_HasBeenPlayed";
      goto LABEL_162;
    case 96:
      int v1 = NSString;
      uint64_t v2 = 96;
      uint64_t v3 = @"kITDBTrackField_HasAlternateAudio";
      goto LABEL_162;
    case 97:
      int v1 = NSString;
      uint64_t v2 = 97;
      uint64_t v3 = @"kITDBTrackField_HasSubtitles";
      goto LABEL_162;
    case 98:
      int v1 = NSString;
      uint64_t v2 = 98;
      uint64_t v3 = @"kITDBTrackField_AudioLanguage";
      goto LABEL_162;
    case 99:
      int v1 = NSString;
      uint64_t v2 = 99;
      uint64_t v3 = @"kITDBTrackField_AudioTrackIndex";
      goto LABEL_162;
    case 100:
      int v1 = NSString;
      uint64_t v2 = 100;
      uint64_t v3 = @"kITDBTrackField_AudioTrackID";
      goto LABEL_162;
    case 101:
      int v1 = NSString;
      uint64_t v2 = 101;
      uint64_t v3 = @"kITDBTrackField_SubtitleLanguage";
      goto LABEL_162;
    case 102:
      int v1 = NSString;
      uint64_t v2 = 102;
      uint64_t v3 = @"kITDBTrackField_SubtitleTrackIndex";
      goto LABEL_162;
    case 103:
      int v1 = NSString;
      uint64_t v2 = 103;
      uint64_t v3 = @"kITDBTrackField_SubtitleTrackID";
      goto LABEL_162;
    case 104:
      int v1 = NSString;
      uint64_t v2 = 104;
      uint64_t v3 = @"kITDBTrackField_Studio";
      goto LABEL_162;
    case 105:
      int v1 = NSString;
      uint64_t v2 = 105;
      uint64_t v3 = @"kITDBTrackField_Reserved1";
      goto LABEL_162;
    case 106:
      int v1 = NSString;
      uint64_t v2 = 106;
      uint64_t v3 = @"kITDBTrackField_Reserved2";
      goto LABEL_162;
    case 107:
      int v1 = NSString;
      uint64_t v2 = 107;
      uint64_t v3 = @"kITDBTrackField_Reserved3";
      goto LABEL_162;
    case 108:
      int v1 = NSString;
      uint64_t v2 = 108;
      uint64_t v3 = @"kITDBTrackField_Reserved4";
      goto LABEL_162;
    case 109:
      int v1 = NSString;
      uint64_t v2 = 109;
      uint64_t v3 = @"kITDBTrackField_Reserved5";
      goto LABEL_162;
    case 110:
      int v1 = NSString;
      uint64_t v2 = 110;
      uint64_t v3 = @"kITDBTrackField_GaplessInfo";
      goto LABEL_162;
    case 111:
      int v1 = NSString;
      uint64_t v2 = 111;
      uint64_t v3 = @"kITDBTrackField_GeniusID";
      goto LABEL_162;
    case 112:
      int v1 = NSString;
      uint64_t v2 = 112;
      uint64_t v3 = @"kITDBTrackField_ExcludeFromShuffle";
      goto LABEL_162;
    case 113:
      int v1 = NSString;
      uint64_t v2 = 113;
      uint64_t v3 = @"kITDBTrackField_Lyrics";
      goto LABEL_162;
    case 114:
      int v1 = NSString;
      uint64_t v2 = 114;
      uint64_t v3 = @"kITDBTrackField_StorePersistentID";
      goto LABEL_162;
    case 115:
      int v1 = NSString;
      uint64_t v2 = 115;
      uint64_t v3 = @"kITDBTrackField_JukeboxVotes";
      goto LABEL_162;
    case 116:
      int v1 = NSString;
      uint64_t v2 = 116;
      uint64_t v3 = @"kITDBTrackField_VoiceOverLanguage";
      goto LABEL_162;
    case 117:
      int v1 = NSString;
      uint64_t v2 = 117;
      uint64_t v3 = @"kITDBTrackField_iTunesU";
      goto LABEL_162;
    case 118:
      int v1 = NSString;
      uint64_t v2 = 118;
      uint64_t v3 = @"kITDBTrackField_UncompressedSize";
      goto LABEL_162;
    case 119:
      int v1 = NSString;
      uint64_t v2 = 119;
      uint64_t v3 = @"kITDBTrackField_XID";
      goto LABEL_162;
    case 120:
      int v1 = NSString;
      uint64_t v2 = 120;
      uint64_t v3 = @"kITDBTrackField_GameGUID";
      goto LABEL_162;
    case 121:
      int v1 = NSString;
      uint64_t v2 = 121;
      uint64_t v3 = @"kITDBTrackField_AppIdentifier";
      goto LABEL_162;
    case 122:
      int v1 = NSString;
      uint64_t v2 = 122;
      uint64_t v3 = @"kITDBTrackField_ObsoleteTrackKind";
      goto LABEL_162;
    case 123:
      int v1 = NSString;
      uint64_t v2 = 123;
      uint64_t v3 = @"kITDBTrackField_Version";
      goto LABEL_162;
    case 124:
      int v1 = NSString;
      uint64_t v2 = 124;
      uint64_t v3 = @"kITDBTrackField_Copyright";
      goto LABEL_162;
    case 125:
      int v1 = NSString;
      uint64_t v2 = 125;
      uint64_t v3 = @"kITDBTrackField_UserDisabled";
      goto LABEL_162;
    case 126:
      int v1 = NSString;
      uint64_t v2 = 126;
      uint64_t v3 = @"kITDBTrackField_AlbumArtwork";
      goto LABEL_162;
    case 127:
      int v1 = NSString;
      uint64_t v2 = 127;
      uint64_t v3 = @"kITDBTrackField_CollectionDescription";
      goto LABEL_162;
    case 128:
      int v1 = NSString;
      uint64_t v2 = 128;
      uint64_t v3 = @"kITDBTrackField_Flavor";
      goto LABEL_162;
    case 129:
      int v1 = NSString;
      uint64_t v2 = 129;
      uint64_t v3 = @"kITDBTrackField_CloudID";
      goto LABEL_162;
    case 130:
      int v1 = NSString;
      uint64_t v2 = 130;
      uint64_t v3 = @"kITDBTrackField_CloudDownload";
      goto LABEL_162;
    case 131:
      int v1 = NSString;
      uint64_t v2 = 131;
      uint64_t v3 = @"kITDBTrackField_ChosenByAutoFill";
      goto LABEL_162;
    case 132:
      int v1 = NSString;
      uint64_t v2 = 132;
      uint64_t v3 = @"kITDBTrackField_CloudUserID";
      goto LABEL_162;
    case 133:
      int v1 = NSString;
      uint64_t v2 = 133;
      uint64_t v3 = @"kITDBTrackField_TrackKinds";
      goto LABEL_162;
    case 134:
      int v1 = NSString;
      uint64_t v2 = 134;
      uint64_t v3 = @"kITDBTrackField_CloudType";
      goto LABEL_162;
    case 135:
      int v1 = NSString;
      uint64_t v2 = 135;
      uint64_t v3 = @"kITDBTrackField_Tags";
      goto LABEL_162;
    case 136:
      int v1 = NSString;
      uint64_t v2 = 136;
      uint64_t v3 = @"kITDBTrackField_NumChannels";
      goto LABEL_162;
    case 137:
      int v1 = NSString;
      uint64_t v2 = 137;
      uint64_t v3 = @"kITDBTrackField_CloudFlavorID";
      goto LABEL_162;
    case 138:
      int v1 = NSString;
      uint64_t v2 = 138;
      uint64_t v3 = @"kITDBTrackField_CloudLibraryKind";
      goto LABEL_162;
    case 139:
      int v1 = NSString;
      uint64_t v2 = 139;
      uint64_t v3 = @"kITDBTrackField_StoreVersion";
      goto LABEL_162;
    case 140:
      int v1 = NSString;
      uint64_t v2 = 140;
      uint64_t v3 = @"kITDBTrackField_AppFamilyIDMask";
      goto LABEL_162;
    case 141:
      int v1 = NSString;
      uint64_t v2 = 141;
      uint64_t v3 = @"kITDBTrackField_ItemIsCompilation";
      goto LABEL_162;
    case 142:
      int v1 = NSString;
      uint64_t v2 = 142;
      uint64_t v3 = @"kITDBTrackField_ArtistInfo";
      goto LABEL_162;
    case 143:
      int v1 = NSString;
      uint64_t v2 = 143;
      uint64_t v3 = @"kITDBTrackField_PlaylistItemPersistentID";
      goto LABEL_162;
    case 144:
      int v1 = NSString;
      uint64_t v2 = 144;
      uint64_t v3 = @"kITDBTrackField_AppleID";
      goto LABEL_162;
    case 145:
      int v1 = NSString;
      uint64_t v2 = 145;
      uint64_t v3 = @"kITDBTrackField_OwnerName";
      goto LABEL_162;
    case 146:
      int v1 = NSString;
      uint64_t v2 = 146;
      uint64_t v3 = @"kITDBTrackField_URLExtraInfo";
      goto LABEL_162;
    case 147:
      int v1 = NSString;
      uint64_t v2 = 147;
      uint64_t v3 = @"kITDBTrackField_ManuallyMarked";
      goto LABEL_162;
    case 148:
      int v1 = NSString;
      uint64_t v2 = 148;
      uint64_t v3 = @"kITDBTrackField_DownloaderAppleID";
      goto LABEL_162;
    case 149:
      int v1 = NSString;
      uint64_t v2 = 149;
      uint64_t v3 = @"kITDBTrackField_DownloaderName";
      goto LABEL_162;
    case 150:
      int v1 = NSString;
      uint64_t v2 = 150;
      uint64_t v3 = @"kITDBTrackField_CloudServerAssetState";
      goto LABEL_162;
    case 151:
      int v1 = NSString;
      uint64_t v2 = 151;
      uint64_t v3 = @"kITDBTrackField_SubscriptionAdamID";
      goto LABEL_162;
    case 152:
      int v1 = NSString;
      uint64_t v2 = 152;
      uint64_t v3 = @"kITDBTrackField_ReportPlayEvents";
      goto LABEL_162;
    case 153:
      int v1 = NSString;
      uint64_t v2 = 153;
      uint64_t v3 = @"kITDBTrackField_IsPlaylistOnly";
      goto LABEL_162;
    case 154:
      int v1 = NSString;
      uint64_t v2 = 154;
      uint64_t v3 = @"kITDBTrackField_LikedState";
      goto LABEL_162;
    case 155:
      int v1 = NSString;
      uint64_t v2 = 155;
      uint64_t v3 = @"kITDBTrackField_CloudPlaybackEndpointType";
      goto LABEL_162;
    case 156:
      int v1 = NSString;
      uint64_t v2 = 156;
      uint64_t v3 = @"kITDBTrackField_AlbumLikedState";
      goto LABEL_162;
    case 183:
      int v1 = NSString;
      uint64_t v2 = 183;
      uint64_t v3 = @"kITDBTrackField_LikedStateModDate";
      goto LABEL_162;
    case 184:
      int v1 = NSString;
      uint64_t v2 = 184;
      uint64_t v3 = @"kITDBTrackField_MaxValue";
LABEL_162:
      uint64_t v6 = v3;
      uint64_t v8 = v2;
LABEL_163:
      [v1 stringWithFormat:@"%@ (%d)", v6, v8];
      break;
    default:
      objc_msgSend(NSString, "stringWithFormat:", @"Unknown kITDBTrackField_??? (%ld)", a1, v7);
      break;
  long long v4 = };

  return v4;
}

id NSStringFromOSType(uint64_t a1)
{
  if (BYTE3(a1)) {
    objc_msgSend(NSString, "stringWithFormat:", @"'%c%c%c%c'", ((int)a1 >> 24), ((int)(a1 << 8) >> 24), ((__int16)a1 >> 8), (char)a1);
  }
  else {
  int v1 = objc_msgSend(NSString, "stringWithFormat:", @"%d", a1, v3, v4, v5);
  }

  return v1;
}

__CFString *NSStringCreateWithUStr255NoCopy(unsigned __int16 *a1)
{
  if (*a1) {
    int v1 = (__CFString *)[[NSString alloc] initWithCharactersNoCopy:a1 + 1 length:*a1 freeWhenDone:0];
  }
  else {
    int v1 = &stru_1F08D4D70;
  }

  return v1;
}

__CFString *NSStringCreateWithUStr255(unsigned __int16 *a1)
{
  if (*a1) {
    int v1 = (__CFString *)[[NSString alloc] initWithCharacters:a1 + 1 length:*a1];
  }
  else {
    int v1 = &stru_1F08D4D70;
  }

  return v1;
}

__CFString *MLDescriptionFromChapterData(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v7 = 0;
LABEL_43:
    char v26 = @"(null)";
    if (v7) {
      char v26 = v7;
    }
    uint64_t v27 = v26;
    goto LABEL_46;
  }
  char Flags = ChapterData_GetFlags();
  char v3 = ChapterData_GetFlags();
  char v4 = ChapterData_GetFlags();
  uint64_t NumChapters = ChapterData_GetNumChapters();
  uint64_t v6 = (__CFString *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithFormat:&stru_1F08D4D70];
  uint64_t v7 = v6;
  uint64_t v8 = @"Y";
  char v32 = Flags;
  if (Flags) {
    id v9 = @"Y";
  }
  else {
    id v9 = @"N";
  }
  if ((v3 & 4) != 0) {
    id v10 = @"Y";
  }
  else {
    id v10 = @"N";
  }
  if ((v4 & 2) == 0) {
    uint64_t v8 = @"N";
  }
  [(__CFString *)v6 appendFormat:@"ChapterDataRef = %p | has[names=%@, urls=%@, pics=%@] | chap count = %d \n", a1, v9, v10, v8, NumChapters];
  int v31 = NumChapters;
  if (!NumChapters) {
    goto LABEL_43;
  }
  LODWORD(v11) = 0;
  char v30 = v3;
  while (1)
  {
    uint64_t v11 = (v11 + 1);
    int IndChapterTime = ChapterData_GetIndChapterTime();
    if (ChapterData_GetNameCookieForTime()
      || (v4 & 2) != 0 && ChapterData_GetPictureCookieForTime())
    {
      break;
    }
    if ((v3 & 4) != 0 && ChapterData_GetURLCookieForTime()) {
      break;
    }
    memset(v38, 0, sizeof(v38));
    if (v32)
    {
      if (ChapterData_CopyProperty()) {
        break;
      }
      uint64_t v13 = NSStringCreateWithUStr255((unsigned __int16 *)v38);
    }
    else
    {
      uint64_t v13 = 0;
    }
    buf[1] = 0;
    memset(v35, 0, sizeof(v35));
    if ((v3 & 4) == 0) {
      goto LABEL_26;
    }
    if (ChapterData_FindURLForTime()) {
      goto LABEL_49;
    }
    if (buf[1])
    {
      if (ChapterData_FindURLTitleForTime())
      {
LABEL_49:

        break;
      }
      *((void *)&v34 + 1) = NSStringCreateWithUStr255((unsigned __int16 *)v35);
      *(void *)&long long v34 = [[NSString alloc] initWithUTF8String:buf];
    }
    else
    {
LABEL_26:
      long long v34 = 0uLL;
    }
    std::string::size_type v14 = 0;
    id v33 = v13;
    if ((v4 & 2) != 0)
    {
      ChapterData_CopyProperty();
      id v15 = [NSString alloc];
      uint64_t v16 = NSStringFromOSType(0);
      unint64_t v17 = NSStringFromOSType(0);
      std::string::size_type v14 = (void *)[v15 initWithFormat:@"loc/fmt=%@%@", v16, v17];

      uint64_t v13 = v33;
    }
    long long v18 = [MEMORY[0x1E4F1CA48] array];
    if ([v13 length])
    {
      uint64_t v19 = [NSString stringWithFormat:@"name = %@", v13];
      [v18 addObject:v19];
    }
    if (v34 != 0)
    {
      std::string v20 = [NSString stringWithFormat:@"url = [%@: %@]", *((void *)&v34 + 1), (void)v34];
      [v18 addObject:v20];
    }
    if (v14)
    {
      char v21 = [NSString stringWithFormat:@"pic = %@", v14];
      [v18 addObject:v21];
    }
    double v22 = (double)IndChapterTime / 1000.0;
    uint64_t v23 = "";
    if (v22 < 100.0) {
      uint64_t v23 = " ";
    }
    if (v22 >= 10.0) {
      unint64_t v24 = v23;
    }
    else {
      unint64_t v24 = "  ";
    }
    uint64_t v25 = [v18 componentsJoinedByString:@", "];
    [(__CFString *)v7 appendFormat:@"\t{%3d: time=%s%.2f, cookies(name=%2u, pic=%2u, url=%2u), %@", v11, v24, *(void *)&v22, 0x7FFFFFFFLL, 0x7FFFFFFFLL, 0x7FFFFFFFLL, v25];

    [(__CFString *)v7 appendString:@"\n"];
    char v3 = v30;
    if (v31 == v11) {
      goto LABEL_43;
    }
  }
  long long v29 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    CFDataRef v37 = "NSString *MLDescriptionFromChapterData(ITChapterDataRef)";
    _os_log_impl(&dword_1B022D000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s unexpected error", buf, 0xCu);
  }

  uint64_t v27 = 0;
LABEL_46:

  return v27;
}

id MLExtendedRatingStringFromDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4F28E78] string];
  uint64_t v3 = [v1 objectForKey:@"system"];
  char v4 = (void *)v3;
  if (v3) {
    uint64_t v5 = (__CFString *)v3;
  }
  else {
    uint64_t v5 = &stru_1F08D4D70;
  }
  [v2 appendFormat:@"%@|", v5];
  uint64_t v6 = [v1 objectForKey:@"label"];

  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = &stru_1F08D4D70;
  }
  [v2 appendFormat:@"%@|", v7];
  uint64_t v8 = [v1 objectForKey:@"rank"];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v9 = [(__CFString *)v8 stringValue];

    uint64_t v8 = (__CFString *)v9;
  }
  if (v8) {
    id v10 = v8;
  }
  else {
    id v10 = &stru_1F08D4D70;
  }
  [v2 appendFormat:@"%@|", v10];
  uint64_t v11 = [v1 objectForKey:@"content"];

  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = &stru_1F08D4D70;
  }
  [v2 appendString:v12];

  return v2;
}

id MLExtendedRatingInfoDictionaryFromString(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = [v1 componentsSeparatedByString:@"|"];
    uint64_t v3 = [v2 count];
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = [v2 objectAtIndex:0];
      if (v4 == 1)
      {
        uint64_t v6 = &stru_1F08D4D70;
        uint64_t v7 = &stru_1F08D4D70;
        uint64_t v8 = &stru_1F08D4D70;
      }
      else
      {
        uint64_t v8 = [v2 objectAtIndex:1];
        if (v4 < 3)
        {
          uint64_t v6 = &stru_1F08D4D70;
          uint64_t v7 = &stru_1F08D4D70;
        }
        else
        {
          uint64_t v7 = [v2 objectAtIndex:2];
          if (v4 == 3)
          {
            uint64_t v6 = &stru_1F08D4D70;
          }
          else
          {
            uint64_t v6 = [v2 objectAtIndex:3];
          }
        }
      }
    }
    else
    {
      uint64_t v6 = &stru_1F08D4D70;
      uint64_t v7 = &stru_1F08D4D70;
      uint64_t v8 = &stru_1F08D4D70;
      uint64_t v5 = &stru_1F08D4D70;
    }
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v5, @"ratingProvider", v8, @"localizedRating", v7, @"ratingLevel", v6, @"localizedReason", 0, @"debugInfo", 0);
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id MLLocalizedSeasonDisplayStringForSeasonNumber(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = NSString;
    uint64_t v3 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
    unint64_t v4 = [v3 localizedStringForKey:@"Season %d" value:&stru_1F08D4D70 table:@"MLLocalizable"];
    objc_msgSend(v2, "stringWithFormat:", v4, a1);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __MLLocalizedSeasonDisplayStringForSeasonNumber_block_invoke;
    block[3] = &__block_descriptor_36_e5_v8__0l;
    int v8 = 0;
    if (MLLocalizedSeasonDisplayStringForSeasonNumber_onceToken != -1) {
      dispatch_once(&MLLocalizedSeasonDisplayStringForSeasonNumber_onceToken, block);
    }
    id v5 = (id)MLLocalizedSeasonDisplayStringForSeasonNumber_zeroSeasonString;
  }

  return v5;
}

void __MLLocalizedSeasonDisplayStringForSeasonNumber_block_invoke(uint64_t a1)
{
  uint64_t v2 = NSString;
  id v6 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  uint64_t v3 = [v6 localizedStringForKey:@"Season %d" value:&stru_1F08D4D70 table:@"MLLocalizable"];
  uint64_t v4 = objc_msgSend(v2, "stringWithFormat:", v3, *(unsigned int *)(a1 + 32));
  id v5 = (void *)MLLocalizedSeasonDisplayStringForSeasonNumber_zeroSeasonString;
  MLLocalizedSeasonDisplayStringForSeasonNumber_zeroSeasonString = v4;
}

uint64_t MLGetSeasonNumberForLocalizedSeasonDisplayString(void *a1)
{
  id v1 = a1;
  unsigned int v8 = 0;
  if ([v1 length])
  {
    uint64_t v2 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
    id v3 = [v2 localizedStringForKey:@"Season %d" value:&stru_1F08D4D70 table:@"MLLocalizable"];
    uint64_t v4 = (const char *)[v3 UTF8String];

    id v5 = fmtcheck(v4, "Season %d");
    sscanf((const char *)[v1 UTF8String], v5, &v8);
    uint64_t v6 = v8;
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

float MLScaledVolumeAdjustmentFromITValue(int a1)
{
  float result = (float)((float)((float)(a1 + 1000) / 2000.0) * 2.0) + 0.0;
  if (result < 0.0) {
    float result = 0.0;
  }
  if (result > 2.0) {
    return 2.0;
  }
  return result;
}

uint64_t MLVolumeAdjustmentFromScaledValue(float a1)
{
  float v1 = (float)(a1 * 2000.0) * 0.5;
  float v2 = -1000.0;
  float v3 = v1 + -1000.0;
  if (v3 >= -1000.0)
  {
    float v2 = v3;
    if (v3 > 1000.0) {
      float v2 = 1000.0;
    }
  }
  return (int)v2;
}

float MLScaledVolumeNormalizationFromITValue(unsigned int a1)
{
  double v1 = 1.0;
  if ((unsigned __int16)(a1 + 1) >= 2u)
  {
    float v2 = sqrt(1000.0 / (double)a1);
    double v1 = v2;
  }
  if (v1 < 0.251188643) {
    double v1 = 0.251188636;
  }
  if (v1 > 3.98107171) {
    double v1 = 3.98107171;
  }
  return floor(log10(v1) * 20.0 + 0.5);
}

void MLChapterDataSetASCIIValue(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    float v2 = a2;
    [(__CFString *)v2 length];
    bzero(buffer, 0x800uLL);
    int CString = CFStringGetCString(v2, buffer, 2047, 0x600u);

    if (CString) {
      ChapterData_SetProperty();
    }
  }
}

void MLChapterDataSetUTF16Value(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    float v2 = a2;
    [(__CFString *)v2 length];
    memset(v4, 0, sizeof(v4));
    int CString = CFStringGetCString(v2, v4, 510, 0x10000100u);

    if (CString) {
      ChapterData_SetProperty();
    }
  }
}

id ML3AlbumArtistDatabaseImportDataSource::identityPropertyForSource(ML3AlbumArtistDatabaseImportDataSource *this, uint64_t a2)
{
  return ML3AlbumArtistRulesIdentityPropertyForSource(a2);
}

uint64_t ML3AlbumArtistDatabaseImportDataSource::integerValueForKey(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3 == 301989908)
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 24))(&v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v13 = __p;
    }
    uint64_t v7 = ML3CPPBridgeString((const UInt8 *)&v13, 1);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    id v8 = *(id *)(*(void *)(a1 + 24) + 24);
    uint64_t v9 = [v8 objectForKey:v7];
    uint64_t v6 = [v9 ML3NameOrderValue];
  }
  else
  {
    uint64_t v4 = *a2;
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, a3);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return v6;
}

void sub_1B03BCAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3AlbumArtistDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3AlbumArtistDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3AlbumArtistDatabaseImportDataSource::getImportPropertyGroupKey(ML3AlbumArtistDatabaseImportDataSource *this)
{
  return 18;
}

void ML3AlbumArtistDatabaseImportDataSource::~ML3AlbumArtistDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

uint64_t ML3BaseLocationIDFromMediaRelativePathInLibrary(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = [v3 resourcesManager];
  uint64_t v6 = ML3BaseLocationIDFromMediaRelativePathInResourceProvider(v4, v5);

  if (!v6) {
    uint64_t v6 = [v3 isHomeSharingLibrary];
  }

  return v6;
}

uint64_t ML3BaseLocationIDFromMediaRelativePathInResourceProvider(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 length])
  {
    uint64_t v5 = 250;
    uint64_t v6 = [v4 pathForBaseLocationPath:250];
    char v7 = [v6 hasSuffix:v3];

    if ((v7 & 1) == 0)
    {
      uint64_t v5 = 300;
      id v8 = [v4 pathForBaseLocationPath:300];
      char v9 = [v8 hasSuffix:v3];

      if ((v9 & 1) == 0)
      {
        uint64_t v5 = 200;
        id v10 = [v4 pathForBaseLocationPath:200];
        char v11 = [v10 hasSuffix:v3];

        if ((v11 & 1) == 0)
        {
          uint64_t v5 = 100;
          uint64_t v12 = [v4 pathForBaseLocationPath:100];
          char v13 = [v12 hasSuffix:v3];

          if ((v13 & 1) == 0)
          {
            uint64_t v5 = 400;
            std::string::size_type v14 = [v4 pathForBaseLocationPath:400];
            char v15 = [v14 hasSuffix:v3];

            if ((v15 & 1) == 0)
            {
              uint64_t v5 = 500;
              uint64_t v16 = [v4 pathForBaseLocationPath:500];
              char v17 = [v16 hasSuffix:v3];

              if ((v17 & 1) == 0)
              {
                uint64_t v5 = 600;
                long long v18 = [v4 pathForBaseLocationPath:600];
                char v19 = [v18 hasSuffix:v3];

                if ((v19 & 1) == 0)
                {
                  std::string v20 = [v3 stringByDeletingLastPathComponent];
                  char v21 = [v4 pathForResourceFileOrFolder:11];
                  if ([v21 hasSuffix:v20])
                  {
                    double v22 = objc_msgSend(v3, "substringFromIndex:", objc_msgSend(v3, "length") - 2);
                    uint64_t v5 = (int)([v22 intValue] + 3840);
                  }
                  else
                  {
                    uint64_t v5 = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t __Block_byref_object_copy__10730(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__10731(uint64_t a1)
{
}

__CFString *ML3ArtworkConfigurationStringForArtworkType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return 0;
  }
  else {
    return off_1E5FB52E0[a1 - 1];
  }
}

__CFString *ML3ArtworkConfigurationStringForMediaType(int a1)
{
  float result = 0;
  if (a1 > 255)
  {
    id v3 = @"MLMediaTypeAny";
    if (a1 != 0xFFFFFF) {
      id v3 = 0;
    }
    if (a1 == 65280) {
      id v4 = @"MLMediaTypeAnyVideo";
    }
    else {
      id v4 = v3;
    }
    uint64_t v5 = @"MLMediaTypeVideoITunesU";
    uint64_t v6 = @"MLMediaTypeHomeVideo";
    if (a1 != 0x2000) {
      uint64_t v6 = 0;
    }
    if (a1 != 4096) {
      uint64_t v5 = v6;
    }
    if (a1 <= 65279) {
      char v7 = v5;
    }
    else {
      char v7 = v4;
    }
    id v8 = @"MLMediaTypeMusicVideo";
    char v9 = @"MLMediaTypeMovie";
    if (a1 != 2048) {
      char v9 = 0;
    }
    if (a1 != 1024) {
      id v8 = v9;
    }
    id v10 = @"MLMediaTypeVideoPodcast";
    char v11 = @"MLMediaTypeTVShow";
    if (a1 != 512) {
      char v11 = 0;
    }
    if (a1 != 256) {
      id v10 = v11;
    }
    if (a1 <= 1023) {
      id v8 = v10;
    }
    BOOL v12 = a1 <= 4095;
  }
  else
  {
    if (a1 <= 15)
    {
      switch(a1)
      {
        case 1:
          float result = @"MLMediaTypeMusicQuiz";
          break;
        case 2:
          float result = @"MLMediaTypeAudioBook";
          break;
        case 4:
          float result = @"MLMediaTypePodcast";
          break;
        case 8:
          float result = @"MLMediaTypeSong";
          break;
        default:
          return result;
      }
      return result;
    }
    char v7 = @"MLMediaTypeDigitalBooklet";
    char v13 = @"MLMediaTypeAnyAudio";
    if (a1 != 255) {
      char v13 = 0;
    }
    if (a1 != 64) {
      char v7 = v13;
    }
    id v8 = @"MLMediaTypeVoiceMemo";
    std::string::size_type v14 = @"MLMediaTypeITunesUAudio";
    if (a1 != 32) {
      std::string::size_type v14 = 0;
    }
    if (a1 != 16) {
      id v8 = v14;
    }
    BOOL v12 = a1 <= 63;
  }
  if (v12) {
    return v8;
  }
  else {
    return v7;
  }
}

uint64_t ML3ArtworkConfigurationArtworkTypeForString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"ML3ArtworkTypeItem"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"ML3ArtworkTypeScreenshot"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"ML3ArtworkTypeChapter"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"ML3ArtworkTypeArtistHero"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"ML3ArtworkTypePlaylist"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t MIPSeriesReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 24;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 32) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_36;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_36:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 16;
      }
      char v26 = *(void **)(a1 + v25);
      *(void *)(a1 + v25) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t MIPPlaylistReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  char v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 224;
        goto LABEL_270;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(void *)(a1 + 340) |= 0x100uLL;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_299;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_299:
        uint64_t v212 = 72;
        goto LABEL_428;
      case 3u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x400000uLL;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_303;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_303:
        uint64_t v213 = 324;
        goto LABEL_438;
      case 4u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        *(void *)(a1 + 340) |= 0x20000000uLL;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v35 = 0;
                goto LABEL_307;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v35 = 0;
        }
LABEL_307:
        BOOL v214 = v35 != 0;
        uint64_t v215 = 334;
        goto LABEL_433;
      case 5u:
        unsigned int v19 = objc_alloc_init(MIPSmartPlaylistInfo);
        objc_storeStrong((id *)(a1 + 288), v19);
        if (!PBReaderPlaceMark() || (MIPSmartPlaylistInfoReadFrom((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_441;
        }
        goto LABEL_295;
      case 6u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x20000uLL;
        while (2)
        {
          uint64_t v41 = *v3;
          unint64_t v42 = *(void *)(a2 + v41);
          if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 1;
            v29 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_311;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_311:
        uint64_t v213 = 296;
        goto LABEL_438;
      case 7u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        *(void *)(a1 + 340) |= 0x100000000uLL;
        while (2)
        {
          uint64_t v47 = *v3;
          unint64_t v48 = *(void *)(a2 + v47);
          if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
            *(void *)(a2 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              BOOL v14 = v45++ >= 9;
              if (v14)
              {
                uint64_t v46 = 0;
                goto LABEL_315;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v46 = 0;
        }
LABEL_315:
        BOOL v214 = v46 != 0;
        uint64_t v215 = 337;
        goto LABEL_433;
      case 8u:
        unsigned int v19 = objc_alloc_init(MIPMultiverseIdentifier);
        uint64_t v50 = 232;
        goto LABEL_64;
      case 9u:
        unsigned int v19 = objc_alloc_init(MIPMultiverseIdentifier);
        uint64_t v50 = 200;
LABEL_64:
        objc_storeStrong((id *)(a1 + v50), v19);
        goto LABEL_293;
      case 0xAu:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x800uLL;
        while (2)
        {
          uint64_t v53 = *v3;
          unint64_t v54 = *(void *)(a2 + v53);
          if (v54 == -1 || v54 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(a2 + *v7) + v54);
            *(void *)(a2 + v53) = v54 + 1;
            v29 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              BOOL v14 = v52++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_319;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_319:
        uint64_t v213 = 168;
        goto LABEL_438;
      case 0xBu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 120;
        goto LABEL_270;
      case 0xCu:
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v58 = 0;
        *(void *)(a1 + 340) |= 0x2000000uLL;
        while (2)
        {
          uint64_t v59 = *v3;
          unint64_t v60 = *(void *)(a2 + v59);
          if (v60 == -1 || v60 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v61 = *(unsigned char *)(*(void *)(a2 + *v7) + v60);
            *(void *)(a2 + v59) = v60 + 1;
            v58 |= (unint64_t)(v61 & 0x7F) << v56;
            if (v61 < 0)
            {
              v56 += 7;
              BOOL v14 = v57++ >= 9;
              if (v14)
              {
                uint64_t v58 = 0;
                goto LABEL_323;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v58 = 0;
        }
LABEL_323:
        BOOL v214 = v58 != 0;
        uint64_t v215 = 330;
        goto LABEL_433;
      case 0xDu:
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v64 = 0;
        *(void *)(a1 + 340) |= 0x800000uLL;
        while (2)
        {
          uint64_t v65 = *v3;
          unint64_t v66 = *(void *)(a2 + v65);
          if (v66 == -1 || v66 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(a2 + *v7) + v66);
            *(void *)(a2 + v65) = v66 + 1;
            v64 |= (unint64_t)(v67 & 0x7F) << v62;
            if (v67 < 0)
            {
              v62 += 7;
              BOOL v14 = v63++ >= 9;
              if (v14)
              {
                uint64_t v64 = 0;
                goto LABEL_327;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v64 = 0;
        }
LABEL_327:
        BOOL v214 = v64 != 0;
        uint64_t v215 = 328;
        goto LABEL_433;
      case 0xEu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 184;
        goto LABEL_270;
      case 0xFu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 176;
        goto LABEL_270;
      case 0x10u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 192;
        goto LABEL_270;
      case 0x11u:
        char v68 = 0;
        unsigned int v69 = 0;
        uint64_t v70 = 0;
        *(void *)(a1 + 340) |= 0x10000000uLL;
        while (2)
        {
          uint64_t v71 = *v3;
          unint64_t v72 = *(void *)(a2 + v71);
          if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v73 = *(unsigned char *)(*(void *)(a2 + *v7) + v72);
            *(void *)(a2 + v71) = v72 + 1;
            v70 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              BOOL v14 = v69++ >= 9;
              if (v14)
              {
                uint64_t v70 = 0;
                goto LABEL_331;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v70 = 0;
        }
LABEL_331:
        BOOL v214 = v70 != 0;
        uint64_t v215 = 333;
        goto LABEL_433;
      case 0x12u:
        char v74 = 0;
        unsigned int v75 = 0;
        uint64_t v23 = 0;
        *(void *)(a1 + 340) |= 8uLL;
        while (2)
        {
          uint64_t v76 = *v3;
          unint64_t v77 = *(void *)(a2 + v76);
          if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v78 = *(unsigned char *)(*(void *)(a2 + *v7) + v77);
            *(void *)(a2 + v76) = v77 + 1;
            v23 |= (unint64_t)(v78 & 0x7F) << v74;
            if (v78 < 0)
            {
              v74 += 7;
              BOOL v14 = v75++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_335;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_335:
        uint64_t v212 = 32;
        goto LABEL_428;
      case 0x13u:
        char v79 = 0;
        unsigned int v80 = 0;
        uint64_t v23 = 0;
        *(void *)(a1 + 340) |= 0x80uLL;
        while (2)
        {
          uint64_t v81 = *v3;
          unint64_t v82 = *(void *)(a2 + v81);
          if (v82 == -1 || v82 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v83 = *(unsigned char *)(*(void *)(a2 + *v7) + v82);
            *(void *)(a2 + v81) = v82 + 1;
            v23 |= (unint64_t)(v83 & 0x7F) << v79;
            if (v83 < 0)
            {
              v79 += 7;
              BOOL v14 = v80++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_339;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_339:
        uint64_t v212 = 64;
        goto LABEL_428;
      case 0x14u:
        char v84 = 0;
        unsigned int v85 = 0;
        uint64_t v23 = 0;
        *(void *)(a1 + 340) |= 0x10uLL;
        while (2)
        {
          uint64_t v86 = *v3;
          unint64_t v87 = *(void *)(a2 + v86);
          if (v87 == -1 || v87 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v88 = *(unsigned char *)(*(void *)(a2 + *v7) + v87);
            *(void *)(a2 + v86) = v87 + 1;
            v23 |= (unint64_t)(v88 & 0x7F) << v84;
            if (v88 < 0)
            {
              v84 += 7;
              BOOL v14 = v85++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_343;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_343:
        uint64_t v212 = 40;
        goto LABEL_428;
      case 0x15u:
        char v89 = 0;
        unsigned int v90 = 0;
        uint64_t v91 = 0;
        *(void *)(a1 + 340) |= 0x1000000uLL;
        while (2)
        {
          uint64_t v92 = *v3;
          unint64_t v93 = *(void *)(a2 + v92);
          if (v93 == -1 || v93 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v94 = *(unsigned char *)(*(void *)(a2 + *v7) + v93);
            *(void *)(a2 + v92) = v93 + 1;
            v91 |= (unint64_t)(v94 & 0x7F) << v89;
            if (v94 < 0)
            {
              v89 += 7;
              BOOL v14 = v90++ >= 9;
              if (v14)
              {
                uint64_t v91 = 0;
                goto LABEL_347;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v91 = 0;
        }
LABEL_347:
        BOOL v214 = v91 != 0;
        uint64_t v215 = 329;
        goto LABEL_433;
      case 0x16u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 136;
        goto LABEL_270;
      case 0x17u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 80;
        goto LABEL_270;
      case 0x18u:
        char v95 = 0;
        unsigned int v96 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x1000uLL;
        while (2)
        {
          uint64_t v97 = *v3;
          unint64_t v98 = *(void *)(a2 + v97);
          if (v98 == -1 || v98 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v99 = *(unsigned char *)(*(void *)(a2 + *v7) + v98);
            *(void *)(a2 + v97) = v98 + 1;
            v29 |= (unint64_t)(v99 & 0x7F) << v95;
            if (v99 < 0)
            {
              v95 += 7;
              BOOL v14 = v96++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_351;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_351:
        uint64_t v213 = 216;
        goto LABEL_438;
      case 0x19u:
        char v100 = 0;
        unsigned int v101 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x8000uLL;
        while (2)
        {
          uint64_t v102 = *v3;
          unint64_t v103 = *(void *)(a2 + v102);
          if (v103 == -1 || v103 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v104 = *(unsigned char *)(*(void *)(a2 + *v7) + v103);
            *(void *)(a2 + v102) = v103 + 1;
            v29 |= (unint64_t)(v104 & 0x7F) << v100;
            if (v104 < 0)
            {
              v100 += 7;
              BOOL v14 = v101++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_355;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_355:
        uint64_t v213 = 264;
        goto LABEL_438;
      case 0x1Au:
        char v105 = 0;
        unsigned int v106 = 0;
        uint64_t v107 = 0;
        *(void *)(a1 + 340) |= 0x80000000uLL;
        while (2)
        {
          uint64_t v108 = *v3;
          unint64_t v109 = *(void *)(a2 + v108);
          if (v109 == -1 || v109 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v110 = *(unsigned char *)(*(void *)(a2 + *v7) + v109);
            *(void *)(a2 + v108) = v109 + 1;
            v107 |= (unint64_t)(v110 & 0x7F) << v105;
            if (v110 < 0)
            {
              v105 += 7;
              BOOL v14 = v106++ >= 9;
              if (v14)
              {
                uint64_t v107 = 0;
                goto LABEL_359;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v107 = 0;
        }
LABEL_359:
        BOOL v214 = v107 != 0;
        uint64_t v215 = 336;
        goto LABEL_433;
      case 0x1Bu:
        char v111 = 0;
        unsigned int v112 = 0;
        uint64_t v113 = 0;
        *(void *)(a1 + 340) |= 0x8000000uLL;
        while (2)
        {
          uint64_t v114 = *v3;
          unint64_t v115 = *(void *)(a2 + v114);
          if (v115 == -1 || v115 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v116 = *(unsigned char *)(*(void *)(a2 + *v7) + v115);
            *(void *)(a2 + v114) = v115 + 1;
            v113 |= (unint64_t)(v116 & 0x7F) << v111;
            if (v116 < 0)
            {
              v111 += 7;
              BOOL v14 = v112++ >= 9;
              if (v14)
              {
                uint64_t v113 = 0;
                goto LABEL_363;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v113 = 0;
        }
LABEL_363:
        BOOL v214 = v113 != 0;
        uint64_t v215 = 332;
        goto LABEL_433;
      case 0x1Cu:
        char v117 = 0;
        unsigned int v118 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x2000uLL;
        while (2)
        {
          uint64_t v119 = *v3;
          unint64_t v120 = *(void *)(a2 + v119);
          if (v120 == -1 || v120 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v121 = *(unsigned char *)(*(void *)(a2 + *v7) + v120);
            *(void *)(a2 + v119) = v120 + 1;
            v29 |= (unint64_t)(v121 & 0x7F) << v117;
            if (v121 < 0)
            {
              v117 += 7;
              BOOL v14 = v118++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_367;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_367:
        uint64_t v213 = 240;
        goto LABEL_438;
      case 0x1Du:
        char v122 = 0;
        unsigned int v123 = 0;
        uint64_t v124 = 0;
        *(void *)(a1 + 340) |= 0x200000000uLL;
        while (2)
        {
          uint64_t v125 = *v3;
          unint64_t v126 = *(void *)(a2 + v125);
          if (v126 == -1 || v126 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v127 = *(unsigned char *)(*(void *)(a2 + *v7) + v126);
            *(void *)(a2 + v125) = v126 + 1;
            v124 |= (unint64_t)(v127 & 0x7F) << v122;
            if (v127 < 0)
            {
              v122 += 7;
              BOOL v14 = v123++ >= 9;
              if (v14)
              {
                uint64_t v124 = 0;
                goto LABEL_371;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v124 = 0;
        }
LABEL_371:
        BOOL v214 = v124 != 0;
        uint64_t v215 = 338;
        goto LABEL_433;
      case 0x1Eu:
        char v128 = 0;
        unsigned int v129 = 0;
        uint64_t v130 = 0;
        *(void *)(a1 + 340) |= 0x400000000uLL;
        while (2)
        {
          uint64_t v131 = *v3;
          unint64_t v132 = *(void *)(a2 + v131);
          if (v132 == -1 || v132 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v133 = *(unsigned char *)(*(void *)(a2 + *v7) + v132);
            *(void *)(a2 + v131) = v132 + 1;
            v130 |= (unint64_t)(v133 & 0x7F) << v128;
            if (v133 < 0)
            {
              v128 += 7;
              BOOL v14 = v129++ >= 9;
              if (v14)
              {
                uint64_t v130 = 0;
                goto LABEL_375;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v130 = 0;
        }
LABEL_375:
        BOOL v214 = v130 != 0;
        uint64_t v215 = 339;
        goto LABEL_433;
      case 0x1Fu:
        char v134 = 0;
        unsigned int v135 = 0;
        uint64_t v23 = 0;
        *(void *)(a1 + 340) |= 1uLL;
        while (2)
        {
          uint64_t v136 = *v3;
          unint64_t v137 = *(void *)(a2 + v136);
          if (v137 == -1 || v137 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v138 = *(unsigned char *)(*(void *)(a2 + *v7) + v137);
            *(void *)(a2 + v136) = v137 + 1;
            v23 |= (unint64_t)(v138 & 0x7F) << v134;
            if (v138 < 0)
            {
              v134 += 7;
              BOOL v14 = v135++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_379;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_379:
        uint64_t v212 = 8;
        goto LABEL_428;
      case 0x20u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 88;
        goto LABEL_270;
      case 0x21u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 104;
        goto LABEL_270;
      case 0x22u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 96;
        goto LABEL_270;
      case 0x23u:
        char v139 = 0;
        unsigned int v140 = 0;
        uint64_t v23 = 0;
        *(void *)(a1 + 340) |= 0x40uLL;
        while (2)
        {
          uint64_t v141 = *v3;
          unint64_t v142 = *(void *)(a2 + v141);
          if (v142 == -1 || v142 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v143 = *(unsigned char *)(*(void *)(a2 + *v7) + v142);
            *(void *)(a2 + v141) = v142 + 1;
            v23 |= (unint64_t)(v143 & 0x7F) << v139;
            if (v143 < 0)
            {
              v139 += 7;
              BOOL v14 = v140++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_383;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_383:
        uint64_t v212 = 56;
        goto LABEL_428;
      case 0x24u:
        char v144 = 0;
        unsigned int v145 = 0;
        uint64_t v23 = 0;
        *(void *)(a1 + 340) |= 2uLL;
        while (2)
        {
          uint64_t v146 = *v3;
          unint64_t v147 = *(void *)(a2 + v146);
          if (v147 == -1 || v147 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v148 = *(unsigned char *)(*(void *)(a2 + *v7) + v147);
            *(void *)(a2 + v146) = v147 + 1;
            v23 |= (unint64_t)(v148 & 0x7F) << v144;
            if (v148 < 0)
            {
              v144 += 7;
              BOOL v14 = v145++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_387;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_387:
        uint64_t v212 = 16;
        goto LABEL_428;
      case 0x25u:
        char v149 = 0;
        unsigned int v150 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x40000uLL;
        while (2)
        {
          uint64_t v151 = *v3;
          unint64_t v152 = *(void *)(a2 + v151);
          if (v152 == -1 || v152 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v153 = *(unsigned char *)(*(void *)(a2 + *v7) + v152);
            *(void *)(a2 + v151) = v152 + 1;
            v29 |= (unint64_t)(v153 & 0x7F) << v149;
            if (v153 < 0)
            {
              v149 += 7;
              BOOL v14 = v150++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_391;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_391:
        uint64_t v213 = 300;
        goto LABEL_438;
      case 0x26u:
        char v154 = 0;
        unsigned int v155 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x100000uLL;
        while (2)
        {
          uint64_t v156 = *v3;
          unint64_t v157 = *(void *)(a2 + v156);
          if (v157 == -1 || v157 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v158 = *(unsigned char *)(*(void *)(a2 + *v7) + v157);
            *(void *)(a2 + v156) = v157 + 1;
            v29 |= (unint64_t)(v158 & 0x7F) << v154;
            if (v158 < 0)
            {
              v154 += 7;
              BOOL v14 = v155++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_395;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_395:
        uint64_t v213 = 308;
        goto LABEL_438;
      case 0x27u:
        char v159 = 0;
        unsigned int v160 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x80000uLL;
        while (2)
        {
          uint64_t v161 = *v3;
          unint64_t v162 = *(void *)(a2 + v161);
          if (v162 == -1 || v162 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v163 = *(unsigned char *)(*(void *)(a2 + *v7) + v162);
            *(void *)(a2 + v161) = v162 + 1;
            v29 |= (unint64_t)(v163 & 0x7F) << v159;
            if (v163 < 0)
            {
              v159 += 7;
              BOOL v14 = v160++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_399;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_399:
        uint64_t v213 = 304;
        goto LABEL_438;
      case 0x28u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 312;
        goto LABEL_270;
      case 0x29u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 248;
        goto LABEL_270;
      case 0x2Au:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 128;
        goto LABEL_270;
      case 0x2Bu:
        char v164 = 0;
        unsigned int v165 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x10000uLL;
        while (2)
        {
          uint64_t v166 = *v3;
          unint64_t v167 = *(void *)(a2 + v166);
          if (v167 == -1 || v167 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v168 = *(unsigned char *)(*(void *)(a2 + *v7) + v167);
            *(void *)(a2 + v166) = v167 + 1;
            v29 |= (unint64_t)(v168 & 0x7F) << v164;
            if (v168 < 0)
            {
              v164 += 7;
              BOOL v14 = v165++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_403;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_403:
        uint64_t v213 = 280;
        goto LABEL_438;
      case 0x2Cu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 272;
        goto LABEL_270;
      case 0x2Du:
        char v169 = 0;
        unsigned int v170 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x4000uLL;
        while (2)
        {
          uint64_t v171 = *v3;
          unint64_t v172 = *(void *)(a2 + v171);
          if (v172 == -1 || v172 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v173 = *(unsigned char *)(*(void *)(a2 + *v7) + v172);
            *(void *)(a2 + v171) = v172 + 1;
            v29 |= (unint64_t)(v173 & 0x7F) << v169;
            if (v173 < 0)
            {
              v169 += 7;
              BOOL v14 = v170++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_407;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_407:
        uint64_t v213 = 244;
        goto LABEL_438;
      case 0x2Eu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 256;
        goto LABEL_270;
      case 0x2Fu:
        char v174 = 0;
        unsigned int v175 = 0;
        uint64_t v23 = 0;
        *(void *)(a1 + 340) |= 0x20uLL;
        while (2)
        {
          uint64_t v176 = *v3;
          unint64_t v177 = *(void *)(a2 + v176);
          if (v177 == -1 || v177 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v178 = *(unsigned char *)(*(void *)(a2 + *v7) + v177);
            *(void *)(a2 + v176) = v177 + 1;
            v23 |= (unint64_t)(v178 & 0x7F) << v174;
            if (v178 < 0)
            {
              v174 += 7;
              BOOL v14 = v175++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_411;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_411:
        uint64_t v212 = 48;
        goto LABEL_428;
      case 0x30u:
        char v179 = 0;
        unsigned int v180 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x200000uLL;
        while (2)
        {
          uint64_t v181 = *v3;
          unint64_t v182 = *(void *)(a2 + v181);
          if (v182 == -1 || v182 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v183 = *(unsigned char *)(*(void *)(a2 + *v7) + v182);
            *(void *)(a2 + v181) = v182 + 1;
            v29 |= (unint64_t)(v183 & 0x7F) << v179;
            if (v183 < 0)
            {
              v179 += 7;
              BOOL v14 = v180++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_415;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_415:
        uint64_t v213 = 320;
        goto LABEL_438;
      case 0x31u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 160;
        goto LABEL_270;
      case 0x32u:
        char v184 = 0;
        unsigned int v185 = 0;
        uint64_t v186 = 0;
        *(void *)(a1 + 340) |= 0x40000000uLL;
        while (2)
        {
          uint64_t v187 = *v3;
          unint64_t v188 = *(void *)(a2 + v187);
          if (v188 == -1 || v188 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v189 = *(unsigned char *)(*(void *)(a2 + *v7) + v188);
            *(void *)(a2 + v187) = v188 + 1;
            v186 |= (unint64_t)(v189 & 0x7F) << v184;
            if (v189 < 0)
            {
              v184 += 7;
              BOOL v14 = v185++ >= 9;
              if (v14)
              {
                uint64_t v186 = 0;
                goto LABEL_419;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v186 = 0;
        }
LABEL_419:
        BOOL v214 = v186 != 0;
        uint64_t v215 = 335;
        goto LABEL_433;
      case 0x33u:
        char v190 = 0;
        unsigned int v191 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x200uLL;
        while (2)
        {
          uint64_t v192 = *v3;
          unint64_t v193 = *(void *)(a2 + v192);
          if (v193 == -1 || v193 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v194 = *(unsigned char *)(*(void *)(a2 + *v7) + v193);
            *(void *)(a2 + v192) = v193 + 1;
            v29 |= (unint64_t)(v194 & 0x7F) << v190;
            if (v194 < 0)
            {
              v190 += 7;
              BOOL v14 = v191++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_423;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_423:
        uint64_t v213 = 152;
        goto LABEL_438;
      case 0x34u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 144;
LABEL_270:
        v195 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_439;
      case 0x35u:
        char v196 = 0;
        unsigned int v197 = 0;
        uint64_t v23 = 0;
        *(void *)(a1 + 340) |= 4uLL;
        while (2)
        {
          uint64_t v198 = *v3;
          unint64_t v199 = *(void *)(a2 + v198);
          if (v199 == -1 || v199 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v200 = *(unsigned char *)(*(void *)(a2 + *v7) + v199);
            *(void *)(a2 + v198) = v199 + 1;
            v23 |= (unint64_t)(v200 & 0x7F) << v196;
            if (v200 < 0)
            {
              v196 += 7;
              BOOL v14 = v197++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_427;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_427:
        uint64_t v212 = 24;
LABEL_428:
        *(void *)(a1 + v212) = v23;
        goto LABEL_439;
      case 0x36u:
        char v201 = 0;
        unsigned int v202 = 0;
        uint64_t v203 = 0;
        *(void *)(a1 + 340) |= 0x4000000uLL;
        while (2)
        {
          uint64_t v204 = *v3;
          unint64_t v205 = *(void *)(a2 + v204);
          if (v205 == -1 || v205 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v206 = *(unsigned char *)(*(void *)(a2 + *v7) + v205);
            *(void *)(a2 + v204) = v205 + 1;
            v203 |= (unint64_t)(v206 & 0x7F) << v201;
            if (v206 < 0)
            {
              v201 += 7;
              BOOL v14 = v202++ >= 9;
              if (v14)
              {
                uint64_t v203 = 0;
                goto LABEL_432;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v203 = 0;
        }
LABEL_432:
        BOOL v214 = v203 != 0;
        uint64_t v215 = 331;
LABEL_433:
        *(unsigned char *)(a1 + v215) = v214;
        goto LABEL_439;
      case 0x37u:
        char v207 = 0;
        unsigned int v208 = 0;
        uint64_t v29 = 0;
        *(void *)(a1 + 340) |= 0x400uLL;
        while (2)
        {
          uint64_t v209 = *v3;
          unint64_t v210 = *(void *)(a2 + v209);
          if (v210 == -1 || v210 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v211 = *(unsigned char *)(*(void *)(a2 + *v7) + v210);
            *(void *)(a2 + v209) = v210 + 1;
            v29 |= (unint64_t)(v211 & 0x7F) << v207;
            if (v211 < 0)
            {
              v207 += 7;
              BOOL v14 = v208++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_437;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_437:
        uint64_t v213 = 156;
LABEL_438:
        *(_DWORD *)(a1 + v213) = v29;
        goto LABEL_439;
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x54u:
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
      case 0x59u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
        goto LABEL_22;
      case 0x64u:
        unsigned int v19 = objc_alloc_init(MIPMultiverseIdentifier);
        [(id)a1 addChildIdentifiers:v19];
        goto LABEL_293;
      default:
        if ((v10 >> 3) != 200)
        {
LABEL_22:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_439;
        }
        unsigned int v19 = objc_alloc_init(MIPMultiverseIdentifier);
        [(id)a1 addItems:v19];
LABEL_293:
        if PBReaderPlaceMark() && (MIPMultiverseIdentifierReadFrom(v19, a2))
        {
LABEL_295:
          PBReaderRecallMark();

LABEL_439:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_441:

        return 0;
    }
  }
}

uint64_t ML3MigrationGetLatestVersion()
{
  return 2220020;
}

uint64_t ML3MigrationMigrateLibraryToCurrentVersion(void *a1, void *a2, void *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = +[ML3MusicLibrary userVersionUsingConnection:v6];
  if (v7 == 2220020 || ![v5 isHomeSharingLibrary])
  {
    uint64_t v11 = [[ML3MigrationDirectives alloc] initWithOriginalUserVersion:v7];
    __exceptionsEnabled = 0;
    uint64_t v33 = 0;
    unsigned int v34 = &v33;
    uint64_t v35 = 0x2020000000;
    char v36 = 0;
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v38 = 0x3032000000;
    char v39 = __Block_byref_object_copy__11561;
    unsigned int v40 = __Block_byref_object_dispose__11562;
    id v41 = 0;
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = __ML3MigrationMigrateLibraryToCurrentVersion_block_invoke;
    void v26[3] = &unk_1E5FB55B8;
    uint64_t v30 = &v33;
    id v27 = v6;
    os_log_t v8 = v11;
    int v32 = 2220020;
    os_log_t v28 = v8;
    p_long long buf = &buf;
    id v29 = v5;
    int v12 = [v27 performTransactionWithBlock:v26];
    if (MSVDeviceOSIsInternalInstall()
      && ([MEMORY[0x1E4F1CB18] standardUserDefaults],
          char v13 = objc_claimAutoreleasedReturnValue(),
          [v13 objectForKey:@"MLTestHookFailMigration"],
          BOOL v14 = objc_claimAutoreleasedReturnValue(),
          int v15 = [v14 BOOLValue],
          v14,
          v13,
          v15))
    {
      uint64_t v16 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v25 = 0;
        _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_DEFAULT, "[Migration] Test hook is set to fail migration.", v25, 2u);
      }

      BOOL v17 = a3 != 0;
      if (a3)
      {
        uint64_t v18 = *(void **)(*((void *)&buf + 1) + 40);
        if (v18)
        {
          int v12 = 0;
LABEL_15:
          id v19 = v18;
LABEL_24:
          *a3 = v19;
          goto LABEL_25;
        }
      }
    }
    else
    {
      BOOL v17 = a3 != 0;
      if (a3)
      {
        uint64_t v18 = *(void **)(*((void *)&buf + 1) + 40);
        if (v18) {
          goto LABEL_15;
        }
      }
      if (v12)
      {
        int v12 = 1;
LABEL_25:
        __exceptionsEnabled = 1;
        int v22 = MSVDeviceSupportsSideLoadedMediaContent();
        if (*((unsigned char *)v34 + 24)) {
          unsigned int v23 = v12;
        }
        else {
          unsigned int v23 = 0;
        }
        if (v22) {
          uint64_t v10 = *((unsigned char *)v34 + 24) != 0;
        }
        else {
          uint64_t v10 = v23;
        }

        _Block_object_dispose(&buf, 8);
        _Block_object_dispose(&v33, 8);
        goto LABEL_32;
      }
    }
    uint64_t v20 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl(&dword_1B022D000, v20, OS_LOG_TYPE_DEFAULT, "[Migration] Failed to commit transaction.", v25, 2u);
    }

    char v21 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_FAULT, "Failed to commit transaction during migration", v25, 2u);
    }

    if (!v17)
    {
      int v12 = 0;
      goto LABEL_25;
    }
    id v19 = [MEMORY[0x1E4F28C58] errorWithDomain:@"ML3DatabaseErrorDomain" code:-1 userInfo:0];
    int v12 = 0;
    goto LABEL_24;
  }
  os_log_t v8 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = [v6 databasePath];
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_DEFAULT, "[Migration] HomeSharing library at %{public}@ has old schema", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v10 = 0;
LABEL_32:

  return v10;
}

void sub_1B03C738C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11561(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__11562(uint64_t a1)
{
}

BOOL __ML3MigrationMigrateLibraryToCurrentVersion_block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v7 = *(void **)(v4 + 40);
  id v5 = (id *)(v4 + 40);
  id v6 = v7;
  id v8 = *(id *)(a1 + 32);
  id v9 = v2;
  if ([v9 currentUserVersion] == v3)
  {
    char v10 = 1;
  }
  else
  {
    id v78 = v6;
    while (1)
    {
      uint64_t v11 = ML3MigrationFunctionForLibraryVersion([v9 currentUserVersion]);
      if (!v11)
      {
        id v19 = objc_msgSend(NSString, "stringWithFormat:", @"No migration path exists to upgrade from (%d) to system version (%d)", objc_msgSend(v9, "currentUserVersion"), v3);
        uint64_t v20 = 20;
        goto LABEL_12;
      }
      int v12 = v11;
      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      double v14 = v13;
      LOBYTE(v12) = v12(v8, v9);
      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      if ((v12 & 1) == 0) {
        break;
      }
      double v16 = v15;
      uint64_t v17 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = [v9 currentUserVersion];
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)uint64_t v97 = v18;
        *(_WORD *)&v97[4] = 2048;
        *(double *)&v97[6] = v16 - v14;
        _os_log_impl(&dword_1B022D000, v17, OS_LOG_TYPE_DEFAULT, "[Migration] Database migration to user version %d took %.2fs", buf, 0x12u);
      }

      if ([v9 currentUserVersion] == v3)
      {
        char v10 = 1;
        goto LABEL_15;
      }
    }
    id v19 = objc_msgSend(NSString, "stringWithFormat:", @"Failed to upgrade from version %d.", objc_msgSend(v9, "currentUserVersion"));
    uint64_t v20 = 30;
LABEL_12:
    char v21 = _ML3MigrationCreateMigrationError(v20, v19);

    if (v21)
    {
      id v6 = v21;

      char v10 = 0;
    }
    else
    {
      char v10 = 0;
      id v6 = v78;
    }
  }
LABEL_15:

  objc_storeStrong(v5, v6);
  *(unsigned char *)(*(void *)(*(void *)(v1 + 56) + 8) + 24) = v10;
  if (!*(unsigned char *)(*(void *)(*(void *)(v1 + 56) + 8) + 24))
  {
    unsigned int v34 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = *(void *)(*(void *)(*(void *)(v1 + 64) + 8) + 40);
      *(_DWORD *)long long buf = 138543362;
      *(void *)uint64_t v97 = v35;
      _os_log_impl(&dword_1B022D000, v34, OS_LOG_TYPE_DEFAULT, "[Migration] Migration step failed with error: %{public}@", buf, 0xCu);
    }
    goto LABEL_112;
  }
  unsigned int v23 = *(void **)(v1 + 40);
  int v22 = *(void **)(v1 + 48);
  id v24 = *(id *)(v1 + 32);
  id v25 = v22;
  id v26 = v23;
  if ([v26 needsToReloadContainerMediaTypes]) {
    +[ML3Container populateMediaTypesOfStaticContainersInLibrary:v25];
  }
  if ([v26 needsToReloadStoreBookmarkMetadataIdentifiers]) {
    +[ML3Track updateAllBookmarkableStoreBookmarkMetadataIdentifiersOnConnection:v24];
  }
  if ([v26 needsToRemoveLocationsForItemsMissingAssets]
    && (ML3MigrationRemoveLocationsForItemsMissingAssets(v24) & 1) == 0)
  {
    char v36 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_66;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v37 = "[Migration] Failed to remove locations missing assets.";
    goto LABEL_41;
  }
  if ([v26 needsToUpdateSortMap]
    && (!objc_msgSend(v25, "inTransactionUpdateSortMapOnConnection:forceUpdateOriginals:", v24, objc_msgSend(v26, "forceUpdateOriginals"))|| (objc_msgSend(v25, "inTransactionUpdateSearchMapOnConnection:", v24) & 1) == 0))
  {
    char v36 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_66;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v37 = "[Migration] Failed to update sort map.";
LABEL_41:
    uint64_t v38 = buf;
LABEL_65:
    _os_log_impl(&dword_1B022D000, v36, OS_LOG_TYPE_DEFAULT, v37, v38, 2u);
    goto LABEL_66;
  }
  if ([v26 needsToReloadCollectionRepresentativeItems])
  {
    *(void *)&long long block = objc_opt_class();
    *((void *)&block + 1) = objc_opt_class();
    uint64_t v93 = objc_opt_class();
    char v94 = objc_opt_class();
    id v95 = (id)objc_opt_class();
    [MEMORY[0x1E4F1C978] arrayWithObjects:&block count:5];
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    id v27 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v28 = [v27 countByEnumeratingWithState:&v83 objects:buf count:16];
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *(void *)v84;
      while (2)
      {
        for (uint64_t i = 0; i != v29; ++i)
        {
          if (*(void *)v84 != v30) {
            objc_enumerationMutation(v27);
          }
          int v32 = *(void **)(*((void *)&v83 + 1) + 8 * i);
          if (([v32 canonicalizeCollectionRepresentativeItemsInLibrary:v25 usingConnection:v24] & 1) == 0)
          {
            char v39 = os_log_create("com.apple.amp.medialibrary", "Default");
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v88) = 138543362;
              *(void *)((char *)&v88 + 4) = v32;
              _os_log_impl(&dword_1B022D000, v39, OS_LOG_TYPE_DEFAULT, "[Migration] Failed to canonicalize collection representative items for class: %{public}@", (uint8_t *)&v88, 0xCu);
            }

            char v33 = 0;
            goto LABEL_46;
          }
        }
        uint64_t v29 = [v27 countByEnumeratingWithState:&v83 objects:buf count:16];
        if (v29) {
          continue;
        }
        break;
      }
    }
    char v33 = 1;
LABEL_46:
  }
  else
  {
    char v33 = 1;
  }
  if ([v26 needsToRecreateIndexes])
  {
    id v40 = v24;
    id v41 = +[ML3MusicLibrary indexSchemaSQL];
    uint64_t v42 = [v41 allObjects];
    char v43 = ML3MigrationExecuteSQLArray(v40, v42);

    if ((v43 & 1) == 0)
    {
      char v36 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_66;
      }
      LOWORD(v88) = 0;
      unint64_t v37 = "[Migration] Failed to create indexes.";
LABEL_64:
      uint64_t v38 = (uint8_t *)&v88;
      goto LABEL_65;
    }
    char v33 = 1;
    [v26 setNeedsAnalyze:1];
  }
  if (![v26 needsToRecreateTriggers]) {
    goto LABEL_53;
  }
  id v44 = v24;
  unsigned int v45 = +[ML3MusicLibrary allTriggersSQL];
  char v46 = ML3MigrationExecuteSQLArray(v44, v45);

  if ((v46 & 1) == 0)
  {
    char v36 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_66;
    }
    LOWORD(v88) = 0;
    unint64_t v37 = "[Migration] Failed to create triggers.";
    goto LABEL_64;
  }
  char v33 = 1;
  [v26 setNeedsAnalyze:1];
LABEL_53:
  if (![v26 needsAnalyze]) {
    goto LABEL_56;
  }
  if (([v24 executeUpdate:@"ANALYZE"] & 1) == 0)
  {
    char v36 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v88) = 0;
      unint64_t v37 = "[Migration] Failed to execute SQLite ANALYZE.";
      goto LABEL_64;
    }
LABEL_66:

    char v33 = 0;
    goto LABEL_67;
  }
  char v33 = 1;
LABEL_56:
  if ([v26 needsToAutogenerateArtworkVariants]) {
    [v25 autogenerateSupportedSizesForAllOriginalArtworkWithConnection:v24 completionHandler:&__block_literal_global_11581];
  }
LABEL_67:

  *(unsigned char *)(*(void *)(*(void *)(v1 + 56) + 8) + 24) = v33;
  if (!*(unsigned char *)(*(void *)(*(void *)(v1 + 56) + 8) + 24))
  {
    unsigned int v69 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B022D000, v69, OS_LOG_TYPE_DEFAULT, "[Migration] Failed to execute directives after migration.", buf, 2u);
    }

    uint64_t v70 = 50;
    goto LABEL_111;
  }
  unint64_t v48 = *(void **)(v1 + 40);
  uint64_t v47 = *(void **)(v1 + 48);
  uint64_t v80 = v1;
  id v49 = *(id *)(v1 + 32);
  id v81 = v47;
  id v79 = v48;
  __int16 v87 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v50 = +[ML3MusicLibrary allTables];
  uint64_t v51 = [v50 countByEnumeratingWithState:&v83 objects:buf count:16];
  if (v51)
  {
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)v84;
    while (2)
    {
      for (uint64_t j = 0; j != v52; ++j)
      {
        if (*(void *)v84 != v53) {
          objc_enumerationMutation(v50);
        }
        char v55 = *(void **)(*((void *)&v83 + 1) + 8 * j);
        if (([v55 isEqualToString:@"sort_map"] & 1) == 0)
        {
          objc_msgSend(NSString, "stringWithFormat:", @"SELECT COUNT(name) FROM sqlite_master WHERE type='table' AND name = '%@';",
          char v56 = v55);
          unsigned int v57 = [v49 executeQuery:v56];
          uint64_t v58 = [v57 int64ValueForFirstRowAndColumn];

          if (!v58)
          {
            uint64_t v71 = os_log_create("com.apple.amp.medialibrary", "Default");
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(block) = 138543362;
              *(void *)((char *)&block + 4) = v55;
              _os_log_impl(&dword_1B022D000, v71, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check failure: Database is missing table %{public}@", (uint8_t *)&block, 0xCu);
            }

            char v72 = 0;
            uint64_t v1 = v80;
            char v61 = v81;
            char v62 = v79;
            goto LABEL_106;
          }
        }
      }
      uint64_t v52 = [v50 countByEnumeratingWithState:&v83 objects:buf count:16];
      if (v52) {
        continue;
      }
      break;
    }
  }

  uint64_t v59 = [v49 executeQuery:@"SELECT COUNT(name) FROM sqlite_master WHERE type='table' AND name = 'sort_map'"];;
  uint64_t v60 = [v59 int64ValueForFirstRowAndColumn];

  uint64_t v1 = v80;
  char v61 = v81;
  char v62 = v79;
  if (!v60)
  {
    unsigned int v63 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block) = 0;
      _os_log_impl(&dword_1B022D000, v63, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check failure: Database is missing sort_map, rebuilding", (uint8_t *)&block, 2u);
    }

    [v81 updateSortMapOnConnection:v49 forceUpdateOriginals:1];
  }
  [v81 sanitizeDatabaseContentsUsingConnection:v49 removeOrphanedAssets:(char *)&v87 + 1];
  if ([v81 sanitizeSortMapContentsUsingConnection:v49 didSortMapEntries:&v87])
  {
    [v81 cleanupArtworkWithOptions:8 usingConnection:v49];
    if ([v79 needsToMarkArtworkPurgeable])
    {
      uint64_t v64 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v65 = [v81 databasePath];
        LODWORD(block) = 138477827;
        *(void *)((char *)&block + 4) = v65;
        _os_log_impl(&dword_1B022D000, v64, OS_LOG_TYPE_DEFAULT, "[Migration] Updating purgeability for library at path %{private}@.", (uint8_t *)&block, 0xCu);
      }
      unint64_t v66 = dispatch_get_global_queue(0, 0);
      *(void *)&long long block = MEMORY[0x1E4F143A8];
      *((void *)&block + 1) = 3221225472;
      uint64_t v93 = (uint64_t)___ML3MigrationPerformPostMigration_block_invoke;
      char v94 = &unk_1E5FB8298;
      id v95 = v81;
      dispatch_async(v66, &block);
    }
    if ([v79 needsToAutogenerateArtworkVariants]) {
      [v81 performColorAnalysisForArtworkWithConnection:v49 shouldRegenerateColorAnalysis:1];
    }
    if (HIBYTE(v87))
    {
      char v67 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v88) = 0;
        _os_log_impl(&dword_1B022D000, v67, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check: removing orphaned assets", (uint8_t *)&v88, 2u);
      }

      [v81 removeOrphanedTracksOnlyInCaches:1];
      ML3MigrationRemoveLocationsForItemsMissingAssets(v49);
      BOOL v68 = HIBYTE(v87) == 0;
    }
    else
    {
      BOOL v68 = 1;
    }
    if ((_BYTE)v87 || !v68)
    {
      *(void *)&long long v88 = MEMORY[0x1E4F143A8];
      *((void *)&v88 + 1) = 3221225472;
      char v89 = ___ML3MigrationPerformPostMigration_block_invoke_26;
      unsigned int v90 = &unk_1E5FB75F0;
      id v91 = v81;
      [v49 enqueueBlockForTransactionCommit:&v88];
    }
    uint64_t v50 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v82 = 0;
      _os_log_impl(&dword_1B022D000, v50, OS_LOG_TYPE_DEFAULT, "[Migration] Migration sanity check complete", v82, 2u);
    }
    char v72 = 1;
LABEL_106:
  }
  else
  {
    char v72 = 0;
  }

  *(unsigned char *)(*(void *)(*(void *)(v1 + 56) + 8) + 24) = v72;
  int v73 = *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 56) + 8) + 24);
  if (!*(unsigned char *)(*(void *)(*(void *)(v1 + 56) + 8) + 24))
  {
    char v74 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1B022D000, v74, OS_LOG_TYPE_DEFAULT, "[Migration] Post-migration sanity check failed unrecoverably.", buf, 2u);
    }

    uint64_t v70 = 40;
LABEL_111:
    uint64_t v75 = _ML3MigrationCreateMigrationError(v70, 0);
    uint64_t v76 = *(void *)(*(void *)(v1 + 64) + 8);
    unsigned int v34 = *(NSObject **)(v76 + 40);
    *(void *)(v76 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v75;
LABEL_112:

    int v73 = *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 56) + 8) + 24);
  }
  return v73 != 0;
}

id _ML3MigrationCreateMigrationError(uint64_t a1, void *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v8 = *MEMORY[0x1E4F28568];
    v9[0] = v3;
    id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
  }
  else
  {
    id v5 = 0;
  }
  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"ML3MigrationErrorDomain" code:a1 userInfo:v5];

  return v6;
}

uint64_t ML3MigrationModifyTableWithResultingSchema(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v72 = a1;
  id v9 = a2;
  id v75 = a3;
  id v77 = a4;
  id v74 = a5;
  char v10 = [v74 componentsSeparatedByString:@","];
  uint64_t v11 = [MEMORY[0x1E4F1CA48] array];
  int v12 = [MEMORY[0x1E4F28E58] whitespaceCharacterSet];
  [v12 addCharactersInString:@",)("];
  uint64_t v13 = [v12 invertedSet];
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  id v14 = v10;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v88 objects:v96 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v89;
LABEL_3:
    uint64_t v18 = 0;
    while (1)
    {
      if (*(void *)v89 != v17) {
        objc_enumerationMutation(v14);
      }
      id v19 = *(void **)(*((void *)&v88 + 1) + 8 * v18);
      uint64_t v20 = [v19 rangeOfCharacterFromSet:v13 options:0];
      if (!v21) {
        break;
      }
      uint64_t v22 = v20;
      uint64_t v23 = objc_msgSend(v19, "rangeOfCharacterFromSet:options:range:", v12, 0, v22, objc_msgSend(v19, "length") - v22);
      if (!v24) {
        break;
      }
      id v25 = objc_msgSend(v19, "substringWithRange:", v22, v24 + ~v22 + v23);
      [v11 addObject:v25];

      if (v16 == ++v18)
      {
        uint64_t v16 = [v14 countByEnumeratingWithState:&v88 objects:v96 count:16];
        if (v16) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  uint64_t v70 = (void *)v13;
  uint64_t v71 = v12;

  uint64_t v26 = [v11 count];
  int v73 = v14;
  uint64_t v76 = v9;
  if (v26 == [v14 count])
  {
    os_log_t v27 = (os_log_t)[v11 mutableCopy];
    id v79 = [MEMORY[0x1E4F1CA60] dictionary];
    if (v77)
    {
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      id v28 = v77;
      uint64_t v29 = [v28 countByEnumeratingWithState:&v84 objects:v93 count:16];
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = *(void *)v85;
        do
        {
          for (uint64_t i = 0; i != v30; ++i)
          {
            if (*(void *)v85 != v31) {
              objc_enumerationMutation(v28);
            }
            char v33 = *(void **)(*((void *)&v84 + 1) + 8 * i);
            if ([v33 shouldImportFromForeignTable])
            {
              unsigned int v34 = [v33 joinColumnName];
              uint64_t v35 = [v33 foreignTableName];
              [v79 setObject:v34 forKey:v35];

              char v36 = [v33 columnName];
              uint64_t v37 = [v11 indexOfObject:v36];

              if (v37 == 0x7FFFFFFFFFFFFFFFLL)
              {
                uint64_t v38 = os_log_create("com.apple.amp.medialibrary", "Default");
                if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                {
                  char v39 = [v33 columnName];
                  *(_DWORD *)long long buf = 138543362;
                  id v95 = v39;
                  _os_log_impl(&dword_1B022D000, v38, OS_LOG_TYPE_ERROR, "ERROR: Adding column not found in schema %{public}@", buf, 0xCu);
                }
              }
              else
              {
                uint64_t v38 = [v33 foreignColumnName];
                [v27 replaceObjectAtIndex:v37 withObject:v38];
              }
            }
            else
            {
              id v40 = [v33 columnName];
              [v11 removeObject:v40];

              uint64_t v38 = [v33 columnName];
              [v27 removeObject:v38];
            }
          }
          uint64_t v30 = [v28 countByEnumeratingWithState:&v84 objects:v93 count:16];
        }
        while (v30);
      }

      id v9 = v76;
    }
    if (v75 && [v27 count])
    {
      unint64_t v41 = 0;
      do
      {
        uint64_t v42 = [v27 objectAtIndex:v41];
        char v43 = [v75 objectForKey:v42];

        if (v43)
        {
          id v44 = [v75 objectForKey:v42];
          [v27 replaceObjectAtIndex:v41 withObject:v44];
        }
        ++v41;
      }
      while ([v27 count] > v41);
    }
    unsigned int v45 = [v11 componentsJoinedByString:@", "];
    id v78 = [v27 componentsJoinedByString:@", "];
    id v46 = objc_alloc_init(MEMORY[0x1E4F28E78]);
    if ([v79 count])
    {
      unsigned int v69 = v45;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      id v47 = v79;
      uint64_t v48 = [v47 countByEnumeratingWithState:&v80 objects:v92 count:16];
      if (v48)
      {
        uint64_t v49 = v48;
        uint64_t v50 = *(void *)v81;
        do
        {
          for (uint64_t j = 0; j != v49; ++j)
          {
            if (*(void *)v81 != v50) {
              objc_enumerationMutation(v47);
            }
            uint64_t v52 = *(void *)(*((void *)&v80 + 1) + 8 * j);
            uint64_t v53 = [v47 objectForKey:v52];
            [v46 appendFormat:@" JOIN %@ USING(%@)", v52, v53];
          }
          uint64_t v49 = [v47 countByEnumeratingWithState:&v80 objects:v92 count:16];
        }
        while (v49);
      }

      id v9 = v76;
      unsigned int v45 = v69;
    }
    unint64_t v54 = [v9 stringByAppendingString:@"_new"];
    char v55 = [NSString stringWithFormat:@"DROP TABLE IF EXISTS %@", v54];
    char v56 = v72;
    int v57 = [v72 executeUpdate:v55];

    if (!v57) {
      goto LABEL_49;
    }
    uint64_t v58 = [NSString stringWithFormat:@"CREATE TABLE %@ (%@)", v54, v74];
    int v59 = [v72 executeUpdate:v58];

    if (!v59) {
      goto LABEL_49;
    }
    uint64_t v60 = [NSString stringWithFormat:@"INSERT INTO %@ (%@) SELECT %@ FROM %@%@", v54, v45, v78, v9, v46];
    int v61 = [v72 executeUpdate:v60];

    if (!v61) {
      goto LABEL_49;
    }
    char v62 = [NSString stringWithFormat:@"DROP TABLE %@", v9];
    int v63 = [v72 executeUpdate:v62];

    if (v63)
    {
      uint64_t v64 = [NSString stringWithFormat:@"ALTER TABLE %@ RENAME TO %@", v54, v9];
      uint64_t v65 = [v72 executeUpdate:v64];
    }
    else
    {
LABEL_49:
      uint64_t v65 = 0;
    }

    unint64_t v66 = v75;
  }
  else
  {
    os_log_t v27 = os_log_create("com.apple.amp.medialibrary", "Default");
    unint64_t v66 = v75;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      char v67 = objc_msgSend(v14, "objectAtIndex:", objc_msgSend(v11, "count"));
      *(_DWORD *)long long buf = 138543362;
      id v95 = v67;
      _os_log_impl(&dword_1B022D000, v27, OS_LOG_TYPE_ERROR, "ERROR: unable to find column name in definition %{public}@", buf, 0xCu);
    }
    uint64_t v65 = 0;
    char v56 = v72;
  }

  return v65;
}

uint64_t ML3MigrationExecuteSQLArray(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = a2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    while (2)
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        if (!objc_msgSend(v3, "executeUpdate:", *(void *)(*((void *)&v11 + 1) + 8 * v8), (void)v11))
        {
          uint64_t v9 = 0;
          goto LABEL_11;
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  uint64_t v9 = 1;
LABEL_11:

  return v9;
}

uint64_t ML3MigrationColumnExistsInTable(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  uint64_t v8 = [NSString stringWithFormat:@"PRAGMA table_info(%@)", v7];
  uint64_t v9 = [v5 executeQuery:v8];

  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __ML3MigrationColumnExistsInTable_block_invoke;
  v13[3] = &unk_1E5FB7618;
  id v10 = v6;
  id v14 = v10;
  uint64_t v15 = &v16;
  [v9 enumerateRowsWithBlock:v13];
  uint64_t v11 = *((unsigned __int8 *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_1B03C8CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationColumnExistsInTable_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [a2 stringForColumnName:@"name"];
  if ([v6 isEqualToString:*(void *)(a1 + 32)])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

uint64_t ML3MigrationRemoveLocationsForItemsMissingAssets(void *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x3032000000;
  id v25 = __Block_byref_object_copy__11665;
  uint64_t v26 = __Block_byref_object_dispose__11666;
  id v27 = 0;
  uint64_t v2 = [v1 executeQuery:@"SELECT item.item_pid,base_location.path,item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) JOIN item_store USING(item_pid) WHERE remote_location_id > 0 AND base_location_id > 0 OR LENGTH(item_extra.location) > 0"];
  uint64_t v3 = v2 != 0;
  if (v2)
  {
    id v4 = +[ML3MusicLibrary mediaFolderPath];
    id v5 = [MEMORY[0x1E4F28CB8] defaultManager];
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v29 = 0x3032000000;
    uint64_t v30 = __Block_byref_object_copy__11665;
    uint64_t v31 = __Block_byref_object_dispose__11666;
    id v32 = 0;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __ML3MigrationRemoveLocationsForItemsMissingAssets_block_invoke;
    v16[3] = &unk_1E5FB5600;
    id v17 = &unk_1F0910990;
    id v6 = v4;
    id v18 = v6;
    p_long long buf = &buf;
    id v7 = v5;
    id v19 = v7;
    uint64_t v21 = &v22;
    [v2 enumerateRowsWithBlock:v16];

    _Block_object_dispose(&buf, 8);
  }
  uint64_t v8 = [(id)v23[5] count];
  if (v8)
  {
    uint64_t v9 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = v23[5];
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_ERROR, "<MLERROR>: Locations for items are set and don't exist, or are missing critical information: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v11 = [&stru_1F08D4D70 stringByPaddingToLength:2 * v8 - 1 withString:@",?" startingAtIndex:1];
    long long v12 = [NSString stringWithFormat:@"%@ IN (%@)", @"UPDATE item SET base_location_id=0 WHERE item.item_pid", v11];
    long long v13 = [(id)v23[5] allObjects];
    uint64_t v3 = [v1 executeUpdate:v12 withParameters:v13 error:0];
    if (v3)
    {
      uint64_t v14 = [NSString stringWithFormat:@"%@ IN (%@)", @"UPDATE item_extra SET location='',file_size=0 WHERE item_extra.item_pid", v11];

      [v1 executeUpdate:v14 withParameters:v13 error:0];
      long long v12 = (void *)v14;
    }
  }
  _Block_object_dispose(&v22, 8);

  return v3;
}

void sub_1B03C90B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11665(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__11666(uint64_t a1)
{
}

void __ML3MigrationRemoveLocationsForItemsMissingAssets_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v26 = a2;
  id v5 = a3;
  id v6 = (void *)MEMORY[0x1B3E93C70]();
  uint64_t v7 = [v26 int64ForColumnIndex:0];
  uint64_t v8 = [v26 stringForColumnIndex:1];
  uint64_t v9 = [v26 stringForColumnIndex:2];
  if (v7)
  {
    uint64_t v10 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
    uint64_t v11 = [v9 stringByTrimmingCharactersInSet:v10];

    long long v12 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
    long long v13 = [v8 stringByTrimmingCharactersInSet:v12];

    if (![v11 length]
      || ([*(id *)(a1 + 32) containsObject:v11] & 1) != 0
      || ![v13 length]
      || ([*(id *)(a1 + 32) containsObject:v13] & 1) != 0)
    {
      goto LABEL_12;
    }
    uint64_t v14 = [*(id *)(a1 + 40) stringByAppendingPathComponent:v8];
    uint64_t v15 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectForKey:v14];
    if (!v15)
    {
      uint64_t v15 = [*(id *)(a1 + 48) contentsOfDirectoryAtPath:v14 error:0];
      if (v15)
      {
        uint64_t v16 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        if (!v16)
        {
          id v17 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          id v19 = *(void **)(v18 + 40);
          *(void *)(v18 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v17;

          uint64_t v16 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        }
        [v16 setObject:v15 forKey:v14];
      }
    }
    char v25 = [v15 containsObject:v9];

    if ((v25 & 1) == 0)
    {
LABEL_12:
      uint64_t v20 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      if (!v20)
      {
        id v21 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
        uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8);
        uint64_t v23 = *(void **)(v22 + 40);
        *(void *)(v22 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v21;

        uint64_t v20 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      }
      uint64_t v24 = (void *)[objc_alloc(NSNumber) initWithLongLong:v7];
      [v20 addObject:v24];
    }
  }
}

id ML3MigrationTemporaryPathFromPath(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 lastPathComponent];
  uint64_t v3 = [v2 stringByAppendingString:@"_tmp"];

  id v4 = [v1 stringByDeletingLastPathComponent];

  id v5 = [v4 stringByAppendingPathComponent:v3];

  return v5;
}

id ML3MigrationArtworkDirectoryAsOf1160030()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
}

id ML3MigrationArtworkDirectoryAsOf1160130()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
}

id ML3MigrationArtworkCacheDirectoryAsOf1160130()
{
  id v0 = MSVMobileHomeDirectory();
  id v1 = [v0 stringByAppendingPathComponent:@"Library/Caches/com.apple.mediaplayer/Artwork"];

  return v1;
}

id ML3MigrationPathFromArtworkCacheIDAsOf1160030(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = [a1 dataUsingEncoding:4];
  CC_SHA1((const void *)[v1 bytes], objc_msgSend(v1, "length"), md);
  uint64_t v2 = [NSString stringWithFormat:@"%x/%x%x%x%x%x%x%x%x_%d.%@", md[0], md[1], md[2], md[3], md[4], md[5], md[6], md[7], md[8], 268500717, @"jpg"];
  uint64_t v3 = +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
  id v4 = [v3 stringByAppendingPathComponent:v2];

  return v4;
}

id ML3MigrationRelativePathFromArtworkComponentsAsOf1160030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [NSString stringWithFormat:@"%@%ld%ld", a1, a2, a3];
  id v4 = [v3 dataUsingEncoding:4];
  CC_SHA1((const void *)[v4 bytes], objc_msgSend(v4, "length"), md);
  id v5 = [MEMORY[0x1E4F28E78] stringWithCapacity:45];
  objc_msgSend(v5, "appendFormat:", @"%02x/", md[0]);
  for (uint64_t i = 1; i != 20; ++i)
    objc_msgSend(v5, "appendFormat:", @"%02x", md[i]);
  [v5 appendString:@".jpeg"];
  uint64_t v7 = (void *)[v5 copy];

  return v7;
}

id ML3MigrationRelativePathFromArtworkTokenAsOf1160130(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = [a1 dataUsingEncoding:4];
  CC_SHA1((const void *)[v1 bytes], objc_msgSend(v1, "length"), md);
  uint64_t v2 = [MEMORY[0x1E4F28E78] stringWithCapacity:45];
  objc_msgSend(v2, "appendFormat:", @"%02x/", md[0]);
  for (uint64_t i = 1; i != 20; ++i)
    objc_msgSend(v2, "appendFormat:", @"%02x", md[i]);
  [v2 appendString:@".jpeg"];
  id v4 = (void *)[v2 copy];

  return v4;
}

id ML3MigrationArtworkOriginalsDirectoryBefore1160160()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
}

id ML3MigrationArtworkOriginalsDirectoryAsOf1160160()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Originals"];
}

id ML3MigrationArtworkCacheDirectoryBefore1160160()
{
  id v0 = MSVMobileHomeDirectory();
  id v1 = [v0 stringByAppendingPathComponent:@"Library/Caches/com.apple.mediaplayer/Artwork"];

  return v1;
}

id ML3MigrationArtworkCacheDirectoryAsOf1160160()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
}

id ML3MigrationArtworkDirectoryAsOf1410060()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork"];
}

id ML3MigrationArtworkCacheDirectoryAsOf1410210()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
}

id ML3MigrationArtworkCacheDirectoryAsOf1450060()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
}

id ML3MigrationArtworkCacheDirectoryAsOf1450090()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
}

id ML3MigrationArtworkCacheDirectoryAsOf1510030()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
}

id ML3MigrationArtworkCacheDirectoryAsOf1910000()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
}

id ML3MigrationArtworkCacheDirectoryAsOf2050010()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
}

id ML3MigrationArtworkCacheDirectoryAsOf2100060()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:@"iTunes_Control/iTunes/Artwork/Caches"];
}

void ML3MigrationUpdateAllBestArtworkTokens(void *a1)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v3 = [v1 executeQuery:@"SELECT entity_pid, entity_type, artwork_type FROM artwork_token GROUP BY entity_pid, entity_type, artwork_type"];
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 3221225472;
  void v53[2] = __ML3MigrationUpdateAllBestArtworkTokens_block_invoke;
  v53[3] = &unk_1E5FB83F8;
  id v4 = v2;
  id v54 = v4;
  [v3 enumerateRowsWithBlock:v53];
  char v25 = [MEMORY[0x1E4F1CA48] array];
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = v4;
  uint64_t v5 = [obj countByEnumeratingWithState:&v49 objects:v62 count:16];
  if (v5)
  {
    uint64_t v24 = *(void *)v50;
    do
    {
      uint64_t v6 = 0;
      uint64_t v7 = v3;
      do
      {
        if (*(void *)v50 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v49 + 1) + 8 * v6);
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v58 = 0x3032000000;
        int v59 = __Block_byref_object_copy__11665;
        uint64_t v60 = __Block_byref_object_dispose__11666;
        int v61 = &stru_1F08D4D70;
        v48[0] = 0;
        v48[1] = v48;
        v48[2] = 0x2020000000;
        v48[3] = 0;
        uint64_t v42 = 0;
        char v43 = &v42;
        uint64_t v44 = 0x3032000000;
        unsigned int v45 = __Block_byref_object_copy__11665;
        id v46 = __Block_byref_object_dispose__11666;
        id v47 = &stru_1F08D4D70;
        uint64_t v38 = 0;
        char v39 = &v38;
        uint64_t v40 = 0x2020000000;
        uint64_t v41 = 0;
        uint64_t v3 = [v1 executeQuery:@"SELECT artwork_token.artwork_token, artwork_token.artwork_source_type, (artwork.relative_path IS NOT NULL) AS has_artwork_on_disk FROM artwork_token LEFT OUTER JOIN artwork USING (artwork_token) WHERE artwork_token.entity_pid = ? AND artwork_token.entity_type = ? AND artwork_token.artwork_type = ? ORDER BY artwork_token.artwork_source_type ASC", v8 withParameters];

        v31[0] = MEMORY[0x1E4F143A8];
        v31[1] = 3221225472;
        v31[2] = __ML3MigrationUpdateAllBestArtworkTokens_block_invoke_2;
        v31[3] = &unk_1E5FB5628;
        unsigned int v34 = v48;
        p_long long buf = &buf;
        char v36 = &v38;
        id v32 = v1;
        uint64_t v33 = v8;
        uint64_t v37 = &v42;
        [v3 enumerateRowsWithBlock:v31];
        uint64_t v9 = [v8 objectAtIndexedSubscript:0];
        v56[0] = v9;
        uint64_t v10 = [v8 objectAtIndexedSubscript:1];
        v56[1] = v10;
        uint64_t v11 = [v8 objectAtIndexedSubscript:2];
        uint64_t v12 = *(void *)(*((void *)&buf + 1) + 40);
        v56[2] = v11;
        v56[3] = v12;
        void v56[4] = v43[5];
        long long v13 = [NSNumber numberWithInteger:v39[3]];
        v56[5] = v13;
        uint64_t v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v56 count:6];
        [v25 addObject:v14];

        _Block_object_dispose(&v38, 8);
        _Block_object_dispose(&v42, 8);

        _Block_object_dispose(v48, 8);
        _Block_object_dispose(&buf, 8);

        ++v6;
        uint64_t v7 = v3;
      }
      while (v5 != v6);
      uint64_t v5 = [obj countByEnumeratingWithState:&v49 objects:v62 count:16];
    }
    while (v5);
  }

  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v15 = v25;
  uint64_t v16 = [v15 countByEnumeratingWithState:&v27 objects:v55 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v28 != v17) {
          objc_enumerationMutation(v15);
        }
        uint64_t v19 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        id v26 = 0;
        char v20 = [v1 executeUpdate:@"INSERT OR REPLACE INTO best_artwork_token (entity_pid, entity_type, artwork_type, available_artwork_token, fetchable_artwork_token, fetchable_artwork_source_type) VALUES (?, ?, ?, ?, ?, ?)", v19, &v26 withParameters error];
        id v21 = v26;
        if ((v20 & 1) == 0)
        {
          uint64_t v22 = os_log_create("com.apple.amp.medialibrary", "Default");
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 138543362;
            *(void *)((char *)&buf + 4) = v21;
            _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_ERROR, "Failed to update best_artwork_token with error: %{public}@", (uint8_t *)&buf, 0xCu);
          }
        }
      }
      uint64_t v16 = [v15 countByEnumeratingWithState:&v27 objects:v55 count:16];
    }
    while (v16);
  }
}

void sub_1B03C9EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void __ML3MigrationUpdateAllBestArtworkTokens_block_invoke(uint64_t a1, void *a2)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v3 objectAtIndexedSubscript:0];
  uint64_t v5 = objc_msgSend(v3, "objectAtIndexedSubscript:", 1, v4);
  v8[1] = v5;
  uint64_t v6 = [v3 objectAtIndexedSubscript:2];

  void v8[2] = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:3];
  [v2 addObject:v7];
}

void __ML3MigrationUpdateAllBestArtworkTokens_block_invoke_2(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [v7 stringForColumnIndex:0];
  uint64_t v10 = (int)[v7 intForColumnIndex:1];
  if ([v7 intForColumnIndex:2])
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      goto LABEL_25;
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v9);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v10;
    if (v10 != 300 && v10 != 200) {
      goto LABEL_25;
    }
LABEL_20:
    *a4 = 1;
    goto LABEL_25;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11)
  {
    uint64_t v12 = *(void **)(a1 + 32);
    long long v13 = [*(id *)(a1 + 40) objectAtIndexedSubscript:0];
    char v25 = [*(id *)(a1 + 40) objectAtIndexedSubscript:1];
    int v14 = [v25 intValue];
    uint64_t v24 = [*(id *)(a1 + 40) objectAtIndexedSubscript:2];
    int v15 = [v24 intValue];
    id v16 = v12;
    id v17 = v13;
    uint64_t v18 = v17;
    if (v14 == 7 || v14 == 2)
    {
      BOOL v21 = v10 == 500;
LABEL_18:

      if (v21)
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v9);
        *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v10;
        if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
          goto LABEL_20;
        }
      }
      goto LABEL_25;
    }
    if (!v14)
    {
      if (v10 == 400)
      {
        if ((unint64_t)(v15 - 1) <= 1)
        {
          uint64_t v28 = 0;
          long long v29 = &v28;
          uint64_t v30 = 0x2020000000;
          uint64_t v31 = 0;
          id v32 = v17;
          uint64_t v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v32 count:1];
          uint64_t v23 = [v16 executeQuery:@"SELECT purchase_history_id FROM item_store WHERE item_pid = ?" withParameters:v22];

          v26[0] = MEMORY[0x1E4F143A8];
          v26[1] = 3221225472;
          void v26[2] = ___ML3MigrationIsArtworkFetchable_block_invoke_2;
          void v26[3] = &unk_1E5FB77B8;
          void v26[4] = &v28;
          [v23 enumerateRowsWithBlock:v26];
          BOOL v21 = v29[3] > 0;

          goto LABEL_23;
        }
      }
      else if (v10 == 200 && v15 == 1)
      {
        uint64_t v28 = 0;
        long long v29 = &v28;
        uint64_t v30 = 0x2020000000;
        uint64_t v31 = 0;
        v33[0] = v17;
        uint64_t v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:1];
        char v20 = [v16 executeQuery:@"SELECT store_saga_id FROM item_store WHERE item_pid = ?" withParameters:v19];

        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 3221225472;
        void v27[2] = ___ML3MigrationIsArtworkFetchable_block_invoke;
        void v27[3] = &unk_1E5FB77B8;
        void v27[4] = &v28;
        [v20 enumerateRowsWithBlock:v27];
        BOOL v21 = v29[3] > 0;

LABEL_23:
        _Block_object_dispose(&v28, 8);
        goto LABEL_18;
      }
    }
  }
LABEL_25:
}

void sub_1B03CA40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ML3MigrationRemoveNonLibraryItemsFromContainers(void *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  id v3 = [v1 executeQuery:@"SELECT container_pid FROM container JOIN container_items USING (container_pid) WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND is_hidden = 0 AND LENGTH(item_pid_data) > 0 AND cloud_is_subscribed = 0 AND cloud_is_curator_playlist = 0"];
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  void v43[2] = __ML3MigrationRemoveNonLibraryItemsFromContainers_block_invoke;
  v43[3] = &unk_1E5FB83F8;
  id v4 = v2;
  id v44 = v4;
  [v3 enumerateRowsWithBlock:v43];
  if ([v4 count])
  {
    uint64_t v28 = v3;
    uint64_t v5 = [MEMORY[0x1E4F1CA80] set];
    uint64_t v6 = [v1 executeQuery:@"SELECT item_pid FROM item WHERE in_my_library"];
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    void v41[2] = __ML3MigrationRemoveNonLibraryItemsFromContainers_block_invoke_2;
    void v41[3] = &unk_1E5FB83F8;
    id v7 = v5;
    id v42 = v7;
    id v26 = v6;
    [v6 enumerateRowsWithBlock:v41];
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v27 = v4;
    id obj = v4;
    id v8 = v1;
    uint64_t v33 = [obj countByEnumeratingWithState:&v37 objects:v49 count:16];
    if (v33)
    {
      uint64_t v32 = *(void *)v38;
      uint64_t v30 = v1;
      do
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (*(void *)v38 != v32) {
            objc_enumerationMutation(obj);
          }
          uint64_t v34 = *(void *)(*((void *)&v37 + 1) + 8 * i);
          uint64_t v48 = v34;
          uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v48 count:1];
          BOOL v11 = [v8 executeQuery:@"SELECT item_pid_data FROM container_items WHERE container_pid = ?" withParameters:v10];

          char v36 = v11;
          id v12 = [v11 objectForFirstRowAndColumn];
          long long v13 = (void *)[v12 bytes];
          size_t v14 = [v12 length];
          int v15 = malloc_type_malloc(v14, 0xD9D56B1AuLL);
          id v16 = [MEMORY[0x1E4F1CA48] array];
          if (v14 >= 8)
          {
            id v35 = v12;
            uint64_t v17 = 0;
            size_t v18 = v14 >> 3;
            if (v14 >> 3 <= 1) {
              uint64_t v19 = 1;
            }
            else {
              uint64_t v19 = v14 >> 3;
            }
            do
            {
              char v20 = [NSNumber numberWithLongLong:*v13];
              if ([v7 containsObject:v20]) {
                v15[v17++] = *v13;
              }
              else {
                [v16 addObject:v20];
              }

              ++v13;
              --v19;
            }
            while (v19);
            BOOL v21 = v17 == v18;
            id v8 = v30;
            id v12 = v35;
            if (!v21)
            {
              if (v17)
              {
                uint64_t v22 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:v15 length:8 * v17 freeWhenDone:0];
              }
              else
              {
                uint64_t v22 = [MEMORY[0x1E4F1CA98] null];
              }
              long long v29 = (void *)v22;
              v47[0] = v34;
              v47[1] = v22;
              uint64_t v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:v47 count:2];
              [v30 executeUpdate:@"REPLACE INTO container_items (container_pid, item_pid_data) VALUES (?, ?)", v23, 0 withParameters error];

              v46[0] = v34;
              v46[1] = &unk_1F0911338;
              v46[2] = &unk_1F0911350;
              v46[3] = &unk_1F0911338;
              uint64_t v24 = [MEMORY[0x1E4F1C978] arrayWithObjects:v46 count:4];
              [v30 executeUpdate:@"REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES (?, ?, ?, ?)", v24, 0 withParameters error];

              v45[0] = v34;
              v45[1] = &unk_1F0911338;
              char v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:v45 count:2];
              [v30 executeUpdate:@"DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > ?" withParameters:v25 error:0];

              id v12 = v35;
            }
          }
          free(v15);
        }
        uint64_t v33 = [obj countByEnumeratingWithState:&v37 objects:v49 count:16];
      }
      while (v33);
    }

    id v1 = v8;
    id v4 = v27;
    id v3 = v28;
  }
}

void __ML3MigrationRemoveNonLibraryItemsFromContainers_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 numberForColumnIndex:0];
  [v2 addObject:v3];
}

void __ML3MigrationRemoveNonLibraryItemsFromContainers_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 numberForColumnIndex:0];
  [v2 addObject:v3];
}

uint64_t ML3MigrationClearLocationFromLibraryAsOf2100100(void *a1, int a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a3;
  if ([v7 count])
  {
    if (a2) {
      uint64_t v9 = @"UPDATE item SET base_location_id=0, date_downloaded=0, download_source_container_pid=0, keep_local=-1, keep_local_constraints=0, keep_local_status=0, keep_local_status_reason=0 WHERE item.item_pid";
    }
    else {
      uint64_t v9 = @"UPDATE item SET base_location_id=0, date_downloaded=0, download_source_container_pid=0 WHERE item.item_pid";
    }
    uint64_t v10 = +[ML3DatabaseStatementRenderer defaultRenderer];
    BOOL v11 = objc_msgSend(v10, "statementWithPrefix:inParameterCount:", v9, objc_msgSend(v7, "count"));

    if ([v8 executeUpdate:v11 withParameters:v7 error:0])
    {
      id v12 = +[ML3DatabaseStatementRenderer defaultRenderer];
      long long v13 = objc_msgSend(v12, "statementWithPrefix:inParameterCount:", @"UPDATE item_extra SET location = '' WHERE item_extra.item_pid", objc_msgSend(v7, "count"));

      if ([v8 executeUpdate:v13 withParameters:v7 error:0])
      {
        size_t v14 = +[ML3DatabaseStatementRenderer defaultRenderer];
        int v15 = [v14 statementWithPrefix:@"UPDATE item_store SET sync_id = 0, downloader_account_id = 0, family_account_id = 0, is_protected = 0, is_ota_purchased = 0 WHERE item_store.item_pid", objc_msgSend(v7, "count") inParameterCount];

        if ([v8 executeUpdate:v15 withParameters:v7 error:0])
        {
          id v16 = +[ML3DatabaseStatementRenderer defaultRenderer];
          uint64_t v17 = objc_msgSend(v16, "statementWithPrefix:inParameterCount:", @"UPDATE item_video SET hls_asset_traits = 0 WHERE item_video.item_pid", objc_msgSend(v7, "count"));

          uint64_t v18 = [v8 executeUpdate:v17 withParameters:v7 error:0];
          if (v18) {
            ML3MigrationIncrementRevisionForRevisionTypeContentAsOf2100100(a4, v8, 0, v7);
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 1;
  }

  return v18;
}

uint64_t ML3MigrationIncrementRevisionForRevisionTypeContentAsOf2100100(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v55 = a2;
  id v7 = a4;
  uint64_t v8 = [v7 count];
  if (v8)
  {
    uint64_t v9 = (char *)v8;
    uint64_t v10 = -1;
    int v11 = 1;
    uint64_t v48 = [&stru_1F08D4D70 stringByPaddingToLength:500 * objc_msgSend(@",(?,?,?,?)", "length") - 1, @",(?,?,?,?)", 1 withString startingAtIndex];
    long long v52 = objc_msgSend(@"REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES ", "stringByAppendingString:");
    id v12 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:2000];
    uint64_t v50 = [NSNumber numberWithUnsignedInt:a3];
    uint64_t v13 = [NSNumber numberWithInteger:a1];
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    id obj = v7;
    uint64_t v14 = [obj countByEnumeratingWithState:&v60 objects:v67 count:16];
    long long v51 = (void *)v13;
    id v49 = v7;
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v47 = -1;
      context = v9;
      id v16 = 0;
      int v17 = 0;
      uint64_t v18 = *(void *)v61;
      uint64_t v19 = v50;
      while (2)
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v61 != v18) {
            objc_enumerationMutation(obj);
          }
          BOOL v21 = *(void **)(*((void *)&v60 + 1) + 8 * i);
          if (objc_msgSend(v21, "longLongValue", v47))
          {
            [v12 addObject:v21];
            [v12 addObject:v19];
            [v12 addObject:v13];
            [v12 addObject:&unk_1F0911338];
            if ([v12 count] == 2000)
            {
              id v59 = v16;
              char v22 = [v55 executeUpdate:v52 withParameters:v12 error:&v59];
              id v23 = v59;

              if ((v22 & 1) == 0)
              {
                uint64_t v28 = os_log_create("com.apple.amp.medialibrary", "Default");
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  id v66 = v23;
                  _os_log_impl(&dword_1B022D000, v28, OS_LOG_TYPE_DEFAULT, "Failed to insert batch of persistent ids in entity_revision, error = %{public}@", buf, 0xCu);
                }

                int v11 = 0;
                goto LABEL_24;
              }
              if ((v17 & 1) == 0) {
                int v17 = 1;
              }
              [v12 removeAllObjects];
              id v16 = v23;
              uint64_t v13 = (uint64_t)v51;
            }
          }
          else if (MSVDeviceOSIsInternalInstall())
          {
            uint64_t v24 = [MEMORY[0x1E4F28B00] currentHandler];
            char v25 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL ML3MigrationIncrementRevisionForRevisionTypeContentAsOf2100100(NSInteger, ML3DatabaseConnection *__strong, ML3EntityDeletionType, NSArray *__strong)");
            [v24 handleFailureInFunction:v25 file:@"ML3MigrationUtilities.m" lineNumber:509 description:@"incrementRevisionForRevisionTypeContentWithConnection called with invalid pid"];

            uint64_t v19 = v50;
          }
        }
        uint64_t v15 = [obj countByEnumeratingWithState:&v60 objects:v67 count:16];
        if (v15) {
          continue;
        }
        break;
      }
      int v11 = 1;
      id v23 = v16;
LABEL_24:
      id v7 = v49;
      uint64_t v9 = context;
      uint64_t v10 = v47;
    }
    else
    {
      id v23 = 0;
      int v17 = 0;
    }

    if ([v12 count])
    {
      long long v29 = [&stru_1F08D4D70 stringByPaddingToLength:v10 + ((unint64_t)objc_msgSend(v12, "count") >> 2) * objc_msgSend(@",(?,?,?,?)", "length"), @",(?,?,?,?)", 1 withString startingAtIndex];
      uint64_t v30 = objc_msgSend(@"REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES ", "stringByAppendingString:", v29);
      id v58 = v23;
      char v31 = [v55 executeUpdate:v30 withParameters:v12 error:&v58];
      id v32 = v58;

      if ((v31 & 1) == 0)
      {
        unsigned int v45 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          id v66 = v32;
          _os_log_impl(&dword_1B022D000, v45, OS_LOG_TYPE_DEFAULT, "Failed to insert batch of persistent ids in entity_revision, error = %{public}@", buf, 0xCu);
        }

        goto LABEL_47;
      }
      if ((v17 & 1) == 0) {
        int v17 = 1;
      }

      id v23 = v32;
    }
    else if (!v11)
    {
LABEL_44:
      long long v29 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v66 = v23;
        _os_log_impl(&dword_1B022D000, v29, OS_LOG_TYPE_DEFAULT, "Failed to delete persistent ids in entity_revision, error = %{public}@", buf, 0xCu);
      }
      id v32 = v23;
LABEL_47:
      id v44 = (void *)v50;

      int v43 = 0;
      id v23 = v32;
      goto LABEL_48;
    }
    LODWORD(v47) = v17;
    unint64_t v33 = 0;
    do
    {
      uint64_t v34 = v23;
      contexta = (void *)MEMORY[0x1B3E93C70]();
      if ((unint64_t)&v9[-v33] >= 0x1F4) {
        uint64_t v35 = 500;
      }
      else {
        uint64_t v35 = (uint64_t)&v9[-v33];
      }
      char v36 = +[ML3DatabaseStatementRenderer defaultRenderer];
      long long v37 = [v36 statementWithPrefix:@"DELETE FROM entity_revision WHERE revision_type > ? AND entity_pid" inParameterCount:v35];

      objc_msgSend(obj, "subarrayWithRange:", v33, v35);
      long long v39 = v38 = v9;
      uint64_t v64 = &unk_1F0911338;
      long long v40 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v64 count:1];
      uint64_t v41 = [v40 arrayByAddingObjectsFromArray:v39];

      id v57 = v23;
      int v42 = [v55 executeUpdate:v37 withParameters:v41 error:&v57];
      id v23 = v57;

      uint64_t v9 = v38;
      if (!v42) {
        break;
      }
      v33 += v35;
    }
    while (v33 < (unint64_t)v38);
    if (v42)
    {
      int v43 = 1;
      id v7 = v49;
      id v44 = (void *)v50;
      int v17 = v47;
LABEL_48:

      uint64_t v27 = v43 & v17;
      goto LABEL_49;
    }
    id v7 = v49;
    int v17 = v47;
    goto LABEL_44;
  }
  id v26 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1B022D000, v26, OS_LOG_TYPE_DEBUG, "No entities for which to increment revision numbers.", buf, 2u);
  }

  uint64_t v27 = 0;
LABEL_49:

  return v27;
}

void ML3MigrationRemoveInvalidContainerItems(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)MEMORY[0x1E4F1CA60];
  id v5 = a1;
  uint64_t v6 = [v4 dictionary];
  id v7 = [v3 executeQuery:v5];

  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __ML3MigrationRemoveInvalidContainerItems_block_invoke;
  void v12[3] = &unk_1E5FB83F8;
  id v13 = v6;
  id v8 = v6;
  [v7 enumerateRowsWithBlock:v12];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __ML3MigrationRemoveInvalidContainerItems_block_invoke_2;
  v10[3] = &unk_1E5FB5678;
  id v11 = v3;
  id v9 = v3;
  [v8 enumerateKeysAndObjectsUsingBlock:v10];
}

void __ML3MigrationRemoveInvalidContainerItems_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = [v3 numberForColumnIndex:0];
  uint64_t v4 = [v3 int64ForColumnIndex:1];

  id v5 = [*(id *)(a1 + 32) objectForKey:v7];
  if (v5)
  {
    uint64_t v6 = v5;
    [v5 addIndex:v4];
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F28E60] indexSetWithIndex:v4];
    [*(id *)(a1 + 32) setObject:v6 forKey:v7];
  }
}

void __ML3MigrationRemoveInvalidContainerItems_block_invoke_2(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  void v24[3] = 0;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2020000000;
  v23[3] = 0;
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 3221225472;
  id v16 = __ML3MigrationRemoveInvalidContainerItems_block_invoke_3;
  int v17 = &unk_1E5FB5650;
  char v20 = v24;
  id v18 = *(id *)(a1 + 32);
  id v9 = v7;
  id v19 = v9;
  BOOL v21 = v23;
  uint64_t v22 = a4;
  [v8 enumerateRangesUsingBlock:&v14];
  uint64_t v10 = *(void **)(a1 + 32);
  v26[0] = v9;
  id v11 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v26, 1, v14, v15, v16, v17);
  [v10 executeUpdate:@"REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES (?, 0, 1, 0)", v11, 0 withParameters error];

  id v12 = *(void **)(a1 + 32);
  id v25 = v9;
  id v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v25 count:1];
  [v12 executeUpdate:@"DELETE FROM entity_revision WHERE entity_pid = ? AND class = 1 AND revision_type > 0" withParameters:v13 error:0];

  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v24, 8);
}

void sub_1B03CB658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __ML3MigrationRemoveInvalidContainerItems_block_invoke_3(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v30[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7) {
    BOOL v8 = a2 > v7;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    id v23 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v24 = objc_msgSend(NSString, "stringWithUTF8String:", "void ML3MigrationRemoveInvalidContainerItems(NSString *__strong, ML3DatabaseConnection *__strong)_block_invoke_3");
    [v23 handleFailureInFunction:v24 file:@"ML3MigrationUtilities.m" lineNumber:593 description:@"[NSIndexSet enumerateRangesUsingBlock:] is not enumerating ranges in order!"];

    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  }
  *(void *)(v6 + 24) = a2;
  id v9 = *(void **)(a1 + 32);
  v30[0] = *(void *)(a1 + 40);
  uint64_t v10 = [NSNumber numberWithUnsignedInteger:a2 - *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
  v30[1] = v10;
  uint64_t v11 = [NSNumber numberWithUnsignedInteger:a2 + a3 + ~*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
  v30[2] = v11;
  id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:3];
  id v26 = 0;
  char v13 = [v9 executeUpdate:@"DELETE FROM container_item WHERE container_pid = ? AND position BETWEEN ? AND ?" withParameters:v12 error:&v26];
  id v14 = v26;

  if (v13)
  {
    uint64_t v15 = *(void **)(a1 + 32);
    id v16 = [NSNumber numberWithUnsignedInteger:a3];
    uint64_t v17 = *(void *)(a1 + 40);
    v27[0] = v16;
    v27[1] = v17;
    id v18 = [NSNumber numberWithUnsignedInteger:a2 - *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
    void v27[2] = v18;
    id v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:3];
    id v25 = 0;
    LOBYTE(v15) = [v15 executeUpdate:@"UPDATE container_item SET position = (position - ?) WHERE container_pid = ? AND position >= ?" withParameters:v19 error:&v25];
    id v20 = v25;

    if ((v15 & 1) == 0)
    {
      BOOL v21 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        id v29 = v20;
        _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_ERROR, "Failed to update container_item position(s) with error: %{public}@", buf, 0xCu);
      }

      **(unsigned char **)(a1 + 64) = 1;
    }
  }
  else
  {
    uint64_t v22 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v29 = v14;
      _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_ERROR, "Failed to delete existing container_item row(s) with error: %{public}@", buf, 0xCu);
    }

    **(unsigned char **)(a1 + 64) = 1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += a3;
}

id ML3MigrationStoreBookeeperDatabaseFilePathAsOf1450020()
{
  id v0 = +[ML3MusicLibrary mediaFolderPath];
  id v1 = objc_msgSend(v0, "msv_stringByResolvingRealPath");

  uint64_t v2 = [v1 stringByAppendingPathComponent:@"iTunes_Control/iTunes/UbiquitousMetadata.sqlitedb"];

  return v2;
}

id ML3MigrationStoreBookeeperDatabaseFilePathsAsOf1450020()
{
  v5[3] = *MEMORY[0x1E4F143B8];
  id v0 = ML3MigrationStoreBookeeperDatabaseFilePathAsOf1450020();
  id v1 = objc_msgSend(v0, "stringByAppendingString:", @"-shm", v0);
  v5[1] = v1;
  uint64_t v2 = [v0 stringByAppendingString:@"-wal"];
  v5[2] = v2;
  id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:3];

  return v3;
}

id ML3ContainerAuthorDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerAuthorDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  id v3 = [NSString stringWithFormat:@"%@ LEFT OUTER JOIN container_author ON %@.ROWID = container_author.container_author_pid", a3, a3];

  return v3;
}

uint64_t ML3ContainerAuthorDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerAuthorDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ContainerAuthorDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerAuthorDatabaseImportDataSource *this)
{
  return 15;
}

void ML3ContainerAuthorDatabaseImportDataSource::~ML3ContainerAuthorDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

uint64_t ML3LyricsDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3LyricsDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3LyricsDatabaseImportDataSource::getImportPropertyGroupKey(ML3LyricsDatabaseImportDataSource *this)
{
  return 9;
}

void ML3LyricsDatabaseImportDataSource::~ML3LyricsDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

uint64_t MIPSmartPlaylistInfoReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 40) |= 0x10u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_93;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_95;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_93:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_95:
          BOOL v77 = v19 != 0;
          uint64_t v78 = 32;
          goto LABEL_133;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(_WORD *)(a1 + 40) |= 0x40u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  uint64_t v26 = 0;
                  goto LABEL_99;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_99:
          BOOL v77 = v26 != 0;
          uint64_t v78 = 34;
          goto LABEL_133;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          *(_WORD *)(a1 + 40) |= 0x100u;
          while (2)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  uint64_t v32 = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v32 = 0;
          }
LABEL_103:
          BOOL v77 = v32 != 0;
          uint64_t v78 = 36;
          goto LABEL_133;
        case 4u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          *(_WORD *)(a1 + 40) |= 2u;
          while (2)
          {
            uint64_t v39 = *v3;
            unint64_t v40 = *(void *)(a2 + v39);
            if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                BOOL v14 = v37++ >= 9;
                if (v14)
                {
                  LODWORD(v3_Block_object_dispose(&STACK[0x280], 8) = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v3_Block_object_dispose(&STACK[0x280], 8) = 0;
          }
LABEL_107:
          uint64_t v79 = 12;
          goto LABEL_120;
        case 5u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v38 = 0;
          *(_WORD *)(a1 + 40) |= 1u;
          while (2)
          {
            uint64_t v44 = *v3;
            unint64_t v45 = *(void *)(a2 + v44);
            if (v45 == -1 || v45 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
              *(void *)(a2 + v44) = v45 + 1;
              v38 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                BOOL v14 = v43++ >= 9;
                if (v14)
                {
                  LODWORD(v3_Block_object_dispose(&STACK[0x280], 8) = 0;
                  goto LABEL_111;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v3_Block_object_dispose(&STACK[0x280], 8) = 0;
          }
LABEL_111:
          uint64_t v79 = 8;
          goto LABEL_120;
        case 6u:
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v38 = 0;
          *(_WORD *)(a1 + 40) |= 4u;
          while (2)
          {
            uint64_t v49 = *v3;
            unint64_t v50 = *(void *)(a2 + v49);
            if (v50 == -1 || v50 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v51 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
              *(void *)(a2 + v49) = v50 + 1;
              v38 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                v47 += 7;
                BOOL v14 = v48++ >= 9;
                if (v14)
                {
                  LODWORD(v3_Block_object_dispose(&STACK[0x280], 8) = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v3_Block_object_dispose(&STACK[0x280], 8) = 0;
          }
LABEL_115:
          uint64_t v79 = 16;
          goto LABEL_120;
        case 7u:
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v38 = 0;
          *(_WORD *)(a1 + 40) |= 8u;
          while (2)
          {
            uint64_t v54 = *v3;
            unint64_t v55 = *(void *)(a2 + v54);
            if (v55 == -1 || v55 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v56 = *(unsigned char *)(*(void *)(a2 + *v7) + v55);
              *(void *)(a2 + v54) = v55 + 1;
              v38 |= (unint64_t)(v56 & 0x7F) << v52;
              if (v56 < 0)
              {
                v52 += 7;
                BOOL v14 = v53++ >= 9;
                if (v14)
                {
                  LODWORD(v3_Block_object_dispose(&STACK[0x280], 8) = 0;
                  goto LABEL_119;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v3_Block_object_dispose(&STACK[0x280], 8) = 0;
          }
LABEL_119:
          uint64_t v79 = 20;
LABEL_120:
          *(_DWORD *)(a1 + v79) = v38;
          continue;
        case 8u:
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v59 = 0;
          *(_WORD *)(a1 + 40) |= 0x20u;
          while (2)
          {
            uint64_t v60 = *v3;
            unint64_t v61 = *(void *)(a2 + v60);
            if (v61 == -1 || v61 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v62 = *(unsigned char *)(*(void *)(a2 + *v7) + v61);
              *(void *)(a2 + v6sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v61 + 1;
              v59 |= (unint64_t)(v62 & 0x7F) << v57;
              if (v62 < 0)
              {
                v57 += 7;
                BOOL v14 = v58++ >= 9;
                if (v14)
                {
                  uint64_t v59 = 0;
                  goto LABEL_124;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v59 = 0;
          }
LABEL_124:
          BOOL v77 = v59 != 0;
          uint64_t v78 = 33;
          goto LABEL_133;
        case 9u:
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v65 = 0;
          *(_WORD *)(a1 + 40) |= 0x200u;
          while (2)
          {
            uint64_t v66 = *v3;
            unint64_t v67 = *(void *)(a2 + v66);
            if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a2 + *v7) + v67);
              *(void *)(a2 + v66) = v67 + 1;
              v65 |= (unint64_t)(v68 & 0x7F) << v63;
              if (v68 < 0)
              {
                v63 += 7;
                BOOL v14 = v64++ >= 9;
                if (v14)
                {
                  uint64_t v65 = 0;
                  goto LABEL_128;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v65 = 0;
          }
LABEL_128:
          BOOL v77 = v65 != 0;
          uint64_t v78 = 37;
          goto LABEL_133;
        case 0xAu:
          uint64_t v69 = PBReaderReadData();
          uint64_t v70 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v69;

          continue;
        case 0xBu:
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v73 = 0;
          *(_WORD *)(a1 + 40) |= 0x80u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v74 = *v3;
        unint64_t v75 = *(void *)(a2 + v74);
        if (v75 == -1 || v75 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v76 = *(unsigned char *)(*(void *)(a2 + *v7) + v75);
        *(void *)(a2 + v74) = v75 + 1;
        v73 |= (unint64_t)(v76 & 0x7F) << v71;
        if ((v76 & 0x80) == 0) {
          goto LABEL_130;
        }
        v71 += 7;
        BOOL v14 = v72++ >= 9;
        if (v14)
        {
          uint64_t v73 = 0;
          goto LABEL_132;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_130:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v73 = 0;
      }
LABEL_132:
      BOOL v77 = v73 != 0;
      uint64_t v78 = 35;
LABEL_133:
      *(unsigned char *)(a1 + v7_Block_object_dispose(&STACK[0x280], 8) = v77;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1B03CF35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03CF7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 184), 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12527(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__12528(uint64_t a1)
{
}

void sub_1B03CFB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03CFD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03CFEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03D0398(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1B03D0324);
  }
  _Unwind_Resume(exception_object);
}

id trackWithGlobalID(uint64_t a1, int a2)
{
  uint64_t v4 = +[MLITDBGeniusDatabase sharedGeniusDatabase];
  id v5 = [v4 musicLibrary];

  if (a2)
  {
    uint64_t v6 = +[ML3ComparisonPredicate predicateWithProperty:@"item_stats.hidden" equalToInteger:0];
  }
  else
  {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (void *)MEMORY[0x1E4F1C978];
  char v8 = [NSNumber numberWithUnsignedLongLong:a1];
  unsigned int v9 = +[ML3ComparisonPredicate predicateWithProperty:@"item_extra.genius_id" equalToValue:v8];
  unint64_t v10 = objc_msgSend(v7, "arrayWithObjects:", v9, v6, 0);
  uint64_t v11 = +[ML3CompoundPredicate predicateMatchingPredicates:v10];

  unint64_t v12 = +[ML3Entity anyInLibrary:v5 predicate:v11 options:7];

  return v12;
}

id MLCreateError_TooFewItemsReason(uint64_t a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  id v3 = [NSNumber numberWithUnsignedInteger:a1];
  uint64_t v4 = objc_msgSend(v2, "initWithObjectsAndKeys:", v3, @"count", 0);

  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MLMusicLibraryErrorDomain" code:2 userInfo:v4];

  return v5;
}

void sub_1B03D0730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03D0BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B03D10F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1B03D1AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

id MLCreateError_UnknownReason()
{
  id v0 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MLMusicLibraryErrorDomain" code:0 userInfo:0];

  return v0;
}

void sub_1B03D26C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x1B3E93610](v11, 0x10A1C4088054FEALL);
  uint64_t v13 = *a10;
  if (*a10)
  {
    *(void *)(v10 + 72) = v13;
    operator delete(v13);
  }
  MEMORY[0x1B3E93610](v10, 0x10A0C4091C5D4D3);
  _Unwind_Resume(a1);
}

uint64_t itdb_playlist_random(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x7FFFFFFF) {
    int v2 = 0x7FFFFFFF;
  }
  else {
    int v2 = a2;
  }
  return ((double)(v2 - 1) * (double)arc4random() / 2147483650.0);
}

uint64_t itdb_get_current_time()
{
  double Current = CFAbsoluteTimeGetCurrent();

  return ML3UInt32MacTimeFromCFAbsoluteTime(Current);
}

uint64_t itdb_get_skip_stats(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v6 = trackWithGlobalID(a2, 0);
  unint64_t v7 = [MEMORY[0x1E4F1C9C8] distantPast];
  [v7 timeIntervalSinceReferenceDate];
  CFAbsoluteTime v9 = v8;

  if (v6)
  {
    uint64_t v10 = [v6 valueForProperty:@"item_stats.date_skipped"];
    [v10 doubleValue];
    CFAbsoluteTime v9 = v11;

    unint64_t v12 = [v6 valueForProperty:@"item_stats.skip_count_user"];
    int v13 = [v12 unsignedIntValue];

    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v13 = 0;
  if (a3) {
LABEL_3:
  }
    *a3 = ML3UInt32MacTimeFromCFAbsoluteTime(v9);
LABEL_4:
  if (a4) {
    *a4 = v13;
  }

  return 0;
}

uint64_t itdb_get_play_stats(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v6 = trackWithGlobalID(a2, 0);
  unint64_t v7 = [MEMORY[0x1E4F1C9C8] distantPast];
  [v7 timeIntervalSinceReferenceDate];
  CFAbsoluteTime v9 = v8;

  if (v6)
  {
    uint64_t v10 = [v6 valueForProperty:@"item_stats.date_played"];
    [v10 doubleValue];
    CFAbsoluteTime v9 = v11;

    unint64_t v12 = [v6 valueForProperty:@"item_stats.play_count_user"];
    int v13 = [v12 unsignedIntValue];

    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v13 = 0;
  if (a3) {
LABEL_3:
  }
    *a3 = ML3UInt32MacTimeFromCFAbsoluteTime(v9);
LABEL_4:
  if (a4) {
    *a4 = v13;
  }

  return 0;
}

uint64_t itdb_copy_similarities_for_global_id(void *a1, uint64_t a2, uint64_t *a3)
{
  id v5 = [a1 _sharedBlobMutableData];
  uint64_t v6 = +[MLITDBGeniusDatabase sharedGeniusDatabase];
  LODWORD(a2) = [v6 getGeniusSimilaritiesDataAndBytesForGlobalID:a2 intoData:v5];

  if (a2)
  {
    id v7 = v5;
    uint64_t v8 = [v7 bytes];
    uint64_t v9 = [v7 length];
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  if (a3) {
LABEL_5:
  }
    *a3 = v9;
LABEL_6:

  return v8;
}

uint64_t itdb_check_for_global_id(void *a1, uint64_t a2)
{
  id v3 = [a1 _sharedBlobMutableData];
  uint64_t v4 = +[MLITDBGeniusDatabase sharedGeniusDatabase];
  uint64_t v5 = [v4 getGeniusMetadataDataAndBytesForGlobalID:a2 intoData:v3];

  if (v5) {
    uint64_t v5 = [v3 length] != 0;
  }

  return v5;
}

uint64_t itdb_copy_metadata_for_global_id(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = [a1 _sharedBlobMutableData];
  uint64_t v6 = +[MLITDBGeniusDatabase sharedGeniusDatabase];
  LODWORD(a2) = [v6 getGeniusMetadataDataAndBytesForGlobalID:a2 intoData:v5];

  if (a2)
  {
    id v7 = v5;
    uint64_t v8 = [v7 bytes];
    uint64_t v9 = [v7 length];
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  if (a3) {
LABEL_5:
  }
    *a3 = v9;
LABEL_6:

  return v8;
}

uint64_t itdb_copy_configuration(void *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = [a1 _sharedBlobMutableData];
  uint64_t v6 = +[MLITDBGeniusDatabase sharedGeniusDatabase];
  int v7 = [v6 getGeniusConfigrationDataAndBytesIntoData:v5];

  if (!v7)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    if (!a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  id v8 = v5;
  uint64_t v9 = [v8 bytes];
  uint64_t v10 = [v8 length];
  if (a2) {
LABEL_5:
  }
    *a2 = v10;
LABEL_6:
  if (a3)
  {
    double v11 = +[MLITDBGeniusDatabase sharedGeniusDatabase];
    *a3 = [v11 geniusConfigurationVersion];
  }
  return v9;
}

void sub_1B03D2DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B03D4048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12681(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__12682(uint64_t a1)
{
}

void sub_1B03D4478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03D4890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03D4C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03D5048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03D53EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ML3ArtistDatabaseImportDataSource::identityPropertyForSource(ML3ArtistDatabaseImportDataSource *this, uint64_t a2)
{
  return ML3ArtistRulesIdentityPropertyForSource(a2);
}

uint64_t ML3ArtistDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ArtistDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ArtistDatabaseImportDataSource::getImportPropertyGroupKey(ML3ArtistDatabaseImportDataSource *this)
{
  return 19;
}

void ML3ArtistDatabaseImportDataSource::~ML3ArtistDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

uint64_t MIPAudiobookReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(MIPAlbum);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (MIPAlbumReadFrom((uint64_t)v17, a2)) {
          goto LABEL_76;
        }
        goto LABEL_106;
      case 2u:
        uint64_t v17 = objc_alloc_init(MIPArtist);
        uint64_t v19 = 16;
        goto LABEL_26;
      case 3u:
        uint64_t v17 = objc_alloc_init(MIPArtist);
        uint64_t v19 = 32;
LABEL_26:
        objc_storeStrong((id *)(a1 + v19), v17);
        if (!PBReaderPlaceMark() || (MIPArtistReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_106;
        }
        goto LABEL_76;
      case 4u:
        uint64_t v17 = objc_alloc_init(MIPGenre);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark() || (MIPGenreReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_106;
        }
        goto LABEL_76;
      case 5u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 84) |= 2u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_81:
        uint64_t v55 = 40;
        goto LABEL_98;
      case 6u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 84) |= 4u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&STACK[0x280], 8) = v29 + 1;
            v22 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_85:
        uint64_t v55 = 72;
        goto LABEL_98;
      case 7u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 84) |= 8u;
        while (2)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v22 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_89:
        uint64_t v55 = 76;
        goto LABEL_98;
      case 8u:
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        *(unsigned char *)(a1 + 84) |= 0x10u;
        while (2)
        {
          uint64_t v39 = *v3;
          unint64_t v40 = *(void *)(a2 + v39);
          if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
            *(void *)(a2 + v39) = v40 + 1;
            v38 |= (unint64_t)(v41 & 0x7F) << v36;
            if (v41 < 0)
            {
              v36 += 7;
              BOOL v14 = v37++ >= 9;
              if (v14)
              {
                uint64_t v38 = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v38 = 0;
        }
LABEL_93:
        BOOL v56 = v38 != 0;
        uint64_t v57 = 80;
        goto LABEL_103;
      case 9u:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 84) |= 1u;
        while (2)
        {
          uint64_t v44 = *v3;
          unint64_t v45 = *(void *)(a2 + v44);
          if (v45 == -1 || v45 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
            *(void *)(a2 + v44) = v45 + 1;
            v22 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              BOOL v14 = v43++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_97:
        uint64_t v55 = 24;
LABEL_98:
        *(_DWORD *)(a1 + v55) = v22;
        goto LABEL_104;
      case 0xAu:
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        *(unsigned char *)(a1 + 84) |= 0x20u;
        while (2)
        {
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 == -1 || v51 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
            *(void *)(a2 + v5sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              BOOL v14 = v48++ >= 9;
              if (v14)
              {
                uint64_t v49 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v49 = 0;
        }
LABEL_102:
        BOOL v56 = v49 != 0;
        uint64_t v57 = 81;
LABEL_103:
        *(unsigned char *)(a1 + v57) = v56;
        goto LABEL_104;
      case 0xBu:
        uint64_t v17 = objc_alloc_init(MIPPlaybackInfo);
        objc_storeStrong((id *)(a1 + 64), v17);
        if PBReaderPlaceMark() && (MIPPlaybackInfoReadFrom((uint64_t)v17, a2))
        {
LABEL_76:
          PBReaderRecallMark();

LABEL_104:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_106:

        return 0;
      case 0xCu:
        uint64_t v53 = PBReaderReadString();
        uint64_t v54 = *(void **)(a1 + 56);
        *(void *)(a1 + 56) = v53;

        goto LABEL_104;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_104;
    }
  }
}

void sub_1B03D94C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13071(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__13072(uint64_t a1)
{
}

void sub_1B03D9A14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __MLChapterDataAddImportChapter_block_invoke(uint64_t result)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v1 = result;
    uint64_t result = ChapterData_NewChapter();
    *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t __MLChapterDataAddImportChapter_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v7 = a2;
  char v8 = a3;
  unsigned int v9 = a4;
  if ([(__CFString *)v7 length] || [(__CFString *)v8 length])
  {
    if ([(__CFString *)v7 length]) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = &stru_1F08D4D70;
    }
    uint64_t v11 = v10;

    if ([(__CFString *)v8 length]) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = &stru_1F08D4D70;
    }
    char v13 = v12;

    if (([(__CFString *)v11 isEqual:v13] & 1) == 0)
    {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      v9[2](v9, v11);
    }
    uint64_t v14 = 1;
    int v7 = v11;
    char v8 = v13;
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void __MLChapterDataAddImportChapter_block_invoke_3(uint64_t a1, void *a2)
{
}

void __MLChapterDataAddImportChapter_block_invoke_4(uint64_t a1, void *a2)
{
  MLChapterDataSetASCIIValue(*(void *)(a1 + 40), a2);
  uint64_t v3 = [*(id *)(a1 + 32) URLTitle];
  uint64_t v4 = (void *)v3;
  uint64_t v5 = &stru_1F08D4D70;
  if (v3) {
    uint64_t v5 = (__CFString *)v3;
  }
  uint64_t v6 = v5;

  MLChapterDataSetUTF16Value(*(void *)(a1 + 40), v6);
}

void MLChapterDataSetChapterArtworkCacheKey(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a3;
  if (!v3)
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void MLChapterDataSetChapterArtworkCacheKey(ChapterDataRef, NSUInteger, NSString *__strong)");
    [v5 handleFailureInFunction:v6 file:@"ML3TrackImporter.m" lineNumber:568 description:@"no cache key specified"];
  }
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
  if (CStringPtr) {
    goto LABEL_5;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v8 = 0u;
  CStringPtr = buffer;
  if (CFStringGetCString(v3, buffer, 127, 0x8000100u))
  {
LABEL_5:
    strlen(CStringPtr);
    ChapterData_SetProperty();
    ChapterData_SetProperty();
  }
}

uint64_t ChapterData_GetNameCookieForTimeWithOptions()
{
  return ChapterData_GetNameCookieForTime();
}

uint64_t MIPAlbumReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 104) |= 4u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_90;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_92;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_90:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_92:
        uint64_t v65 = 24;
        goto LABEL_122;
      case 2u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 72;
        goto LABEL_72;
      case 3u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 88;
        goto LABEL_72;
      case 4u:
        uint64_t v23 = objc_alloc_init(MIPArtist);
        objc_storeStrong((id *)(a1 + 32), v23);
        if PBReaderPlaceMark() && (MIPArtistReadFrom(v23, a2)) {
          goto LABEL_34;
        }
        goto LABEL_125;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 104) |= 0x20u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = 0;
        }
LABEL_96:
        uint64_t v66 = 84;
        goto LABEL_117;
      case 6u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 104) |= 0x10u;
        while (2)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v28 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = 0;
        }
LABEL_100:
        uint64_t v66 = 80;
        goto LABEL_117;
      case 7u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 40;
        goto LABEL_72;
      case 8u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 104) |= 0x40u;
        while (2)
        {
          uint64_t v39 = *v3;
          unint64_t v40 = *(void *)(a2 + v39);
          if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
            *(void *)(a2 + v39) = v40 + 1;
            v28 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              BOOL v14 = v38++ >= 9;
              if (v14)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = 0;
        }
LABEL_104:
        uint64_t v66 = 96;
        goto LABEL_117;
      case 9u:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(unsigned char *)(a1 + 104) |= 0x80u;
        while (2)
        {
          uint64_t v45 = *v3;
          unint64_t v46 = *(void *)(a2 + v45);
          if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
            *(void *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              BOOL v14 = v43++ >= 9;
              if (v14)
              {
                uint64_t v44 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v44 = 0;
        }
LABEL_108:
        *(unsigned char *)(a1 + 10sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v44 != 0;
        goto LABEL_123;
      case 0xAu:
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 104) |= 2u;
        while (2)
        {
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 == -1 || v51 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
            *(void *)(a2 + v5sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v51 + 1;
            v19 |= (unint64_t)(v52 & 0x7F) << v48;
            if (v52 < 0)
            {
              v48 += 7;
              BOOL v14 = v49++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_112:
        uint64_t v65 = 16;
        goto LABEL_122;
      case 0xBu:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 48;
LABEL_72:
        uint64_t v53 = *(void **)(a1 + v25);
        *(void *)(a1 + v25) = v24;

        goto LABEL_123;
      case 0xCu:
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 104) |= 8u;
        while (2)
        {
          uint64_t v56 = *v3;
          unint64_t v57 = *(void *)(a2 + v56);
          if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(a2 + *v7) + v57);
            *(void *)(a2 + v56) = v57 + 1;
            v28 |= (unint64_t)(v58 & 0x7F) << v54;
            if (v58 < 0)
            {
              v54 += 7;
              BOOL v14 = v55++ >= 9;
              if (v14)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = 0;
        }
LABEL_116:
        uint64_t v66 = 64;
LABEL_117:
        *(_DWORD *)(a1 + v66) = v28;
        goto LABEL_123;
      case 0xDu:
        char v59 = 0;
        unsigned int v60 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 104) |= 1u;
        while (2)
        {
          uint64_t v61 = *v3;
          unint64_t v62 = *(void *)(a2 + v61);
          if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
            *(void *)(a2 + v61) = v62 + 1;
            v19 |= (unint64_t)(v63 & 0x7F) << v59;
            if (v63 < 0)
            {
              v59 += 7;
              BOOL v14 = v60++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_121:
        uint64_t v65 = 8;
LABEL_122:
        *(void *)(a1 + v65) = v19;
        goto LABEL_123;
      default:
        if ((v10 >> 3) != 50)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_123;
        }
        uint64_t v23 = objc_alloc_init(MIPLibraryIdentifier);
        [(id)a1 addLibraryIdentifiers:v23];
        if PBReaderPlaceMark() && (MIPLibraryIdentifierReadFrom((uint64_t)v23, a2))
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_123:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_125:

        return 0;
    }
  }
}

void sub_1B03DD2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03DE820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03DEA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1B03DEBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B03DED68(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B03DEFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03DF3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03DF978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 144), 8);
  _Block_object_dispose((const void *)(v34 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13522(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__13523(uint64_t a1)
{
}

void sub_1B03DFE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03E0490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03E133C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v10 = objc_begin_catch(exception_object);
    uint64_t v11 = _ML3LogCategoryCacheManagement();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(a9) = 138543362;
      *(void *)((char *)&a9 + 4) = v10;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_DEFAULT, "caught exception trying to purge storage: %{public}@", (uint8_t *)&a9, 0xCu);
    }

    unint64_t v12 = [v10 userInfo];
    uint64_t v13 = [v12 objectForKey:@"ML3DatabaseExceptionErrorUserInfoKey"];

    if (v13 && [v13 code] == 13)
    {
      BOOL v14 = _ML3LogCategoryCacheManagement();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(a9) = 0;
        _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_DEFAULT, "force-deleting cached assets to free space", (uint8_t *)&a9, 2u);
      }

      [v9 _clearAllCloudAssets];
      objc_end_catch();
      JUMPOUT(0x1B03E128CLL);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

__CFString *ML3MusicLibraryDeletionUrgencyDescription(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      uint64_t result = @"medium";
      break;
    case 2:
      uint64_t result = @"high";
      break;
    case 3:
      uint64_t result = @"special";
      break;
    case 4:
      uint64_t result = @"none";
      break;
    default:
      if (a1 == 0x7FFFFFFF) {
        uint64_t result = @"undefined";
      }
      else {
        uint64_t result = @"low";
      }
      break;
  }
  return result;
}

uint64_t ML3ArtworkPurgeabilityLevelOriginal()
{
  if (MSVDeviceIsAppleTV()) {
    return 2;
  }
  if (MSVDeviceIsWatch()) {
    return 3;
  }
  return 0x7FFFFFFFLL;
}

uint64_t ML3ArtworkPurgeabilityLevelCache()
{
  if (MSVDeviceIsAppleTV()) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t ML3ItemVideoDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemVideoDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ItemVideoDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemVideoDatabaseImportDataSource *this)
{
  return 7;
}

void ML3ItemVideoDatabaseImportDataSource::~ML3ItemVideoDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

uint64_t MIPMovieReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(MIPArtist);
        objc_storeStrong((id *)(a1 + 40), v17);
        if PBReaderPlaceMark() && (MIPArtistReadFrom(v17, a2)) {
          goto LABEL_128;
        }
        goto LABEL_190;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x200u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_132:
        uint64_t v98 = 104;
        goto LABEL_170;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(_WORD *)(a1 + 112) |= 0x2000u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&STACK[0x280], 8) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v27 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_136:
        BOOL v99 = v27 != 0;
        uint64_t v100 = 111;
        goto LABEL_149;
      case 4u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(_WORD *)(a1 + 112) |= 0x800u;
        while (2)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                uint64_t v33 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v33 = 0;
        }
LABEL_140:
        BOOL v99 = v33 != 0;
        uint64_t v100 = 109;
        goto LABEL_149;
      case 5u:
        uint64_t v37 = PBReaderReadString();
        uint64_t v38 = 64;
        goto LABEL_125;
      case 6u:
        uint64_t v37 = PBReaderReadString();
        uint64_t v38 = 88;
        goto LABEL_125;
      case 7u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 112) |= 0x400u;
        while (2)
        {
          uint64_t v42 = *v3;
          unint64_t v43 = *(void *)(a2 + v42);
          if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                uint64_t v41 = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v41 = 0;
        }
LABEL_144:
        BOOL v99 = v41 != 0;
        uint64_t v100 = 108;
        goto LABEL_149;
      case 8u:
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(_WORD *)(a1 + 112) |= 0x1000u;
        while (2)
        {
          uint64_t v48 = *v3;
          unint64_t v49 = *(void *)(a2 + v48);
          if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
            *(void *)(a2 + v4_Block_object_dispose(&STACK[0x280], 8) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              BOOL v14 = v46++ >= 9;
              if (v14)
              {
                uint64_t v47 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v47 = 0;
        }
LABEL_148:
        BOOL v99 = v47 != 0;
        uint64_t v100 = 110;
LABEL_149:
        *(unsigned char *)(a1 + v10sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v99;
        goto LABEL_188;
      case 9u:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x10u;
        while (2)
        {
          uint64_t v53 = *v3;
          unint64_t v54 = *(void *)(a2 + v53);
          if (v54 == -1 || v54 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(a2 + *v7) + v54);
            *(void *)(a2 + v53) = v54 + 1;
            v21 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              BOOL v14 = v52++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_153;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_153:
        uint64_t v98 = 48;
        goto LABEL_170;
      case 0xAu:
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x40u;
        while (2)
        {
          uint64_t v58 = *v3;
          unint64_t v59 = *(void *)(a2 + v58);
          if (v59 == -1 || v59 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(a2 + *v7) + v59);
            *(void *)(a2 + v5_Block_object_dispose(&STACK[0x280], 8) = v59 + 1;
            v21 |= (unint64_t)(v60 & 0x7F) << v56;
            if (v60 < 0)
            {
              v56 += 7;
              BOOL v14 = v57++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_157;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_157:
        uint64_t v98 = 56;
        goto LABEL_170;
      case 0xBu:
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x20u;
        while (2)
        {
          uint64_t v63 = *v3;
          unint64_t v64 = *(void *)(a2 + v63);
          if (v64 == -1 || v64 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v65 = *(unsigned char *)(*(void *)(a2 + *v7) + v64);
            *(void *)(a2 + v63) = v64 + 1;
            v21 |= (unint64_t)(v65 & 0x7F) << v61;
            if (v65 < 0)
            {
              v61 += 7;
              BOOL v14 = v62++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_161;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_161:
        uint64_t v98 = 52;
        goto LABEL_170;
      case 0xCu:
        char v66 = 0;
        unsigned int v67 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x80u;
        while (2)
        {
          uint64_t v68 = *v3;
          unint64_t v69 = *(void *)(a2 + v68);
          if (v69 == -1 || v69 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v70 = *(unsigned char *)(*(void *)(a2 + *v7) + v69);
            *(void *)(a2 + v6_Block_object_dispose(&STACK[0x280], 8) = v69 + 1;
            v21 |= (unint64_t)(v70 & 0x7F) << v66;
            if (v70 < 0)
            {
              v66 += 7;
              BOOL v14 = v67++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_165;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_165:
        uint64_t v98 = 96;
        goto LABEL_170;
      case 0xDu:
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x100u;
        while (2)
        {
          uint64_t v73 = *v3;
          unint64_t v74 = *(void *)(a2 + v73);
          if (v74 == -1 || v74 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v75 = *(unsigned char *)(*(void *)(a2 + *v7) + v74);
            *(void *)(a2 + v73) = v74 + 1;
            v21 |= (unint64_t)(v75 & 0x7F) << v71;
            if (v75 < 0)
            {
              v71 += 7;
              BOOL v14 = v72++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_169:
        uint64_t v98 = 100;
LABEL_170:
        *(_DWORD *)(a1 + v9_Block_object_dispose(&STACK[0x280], 8) = v21;
        goto LABEL_188;
      case 0xEu:
        char v76 = 0;
        unsigned int v77 = 0;
        uint64_t v78 = 0;
        *(_WORD *)(a1 + 112) |= 1u;
        while (2)
        {
          uint64_t v79 = *v3;
          unint64_t v80 = *(void *)(a2 + v79);
          if (v80 == -1 || v80 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v81 = *(unsigned char *)(*(void *)(a2 + *v7) + v80);
            *(void *)(a2 + v79) = v80 + 1;
            v78 |= (unint64_t)(v81 & 0x7F) << v76;
            if (v81 < 0)
            {
              v76 += 7;
              BOOL v14 = v77++ >= 9;
              if (v14)
              {
                uint64_t v78 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v78 = 0;
        }
LABEL_174:
        uint64_t v101 = 8;
        goto LABEL_187;
      case 0xFu:
        char v82 = 0;
        unsigned int v83 = 0;
        uint64_t v78 = 0;
        *(_WORD *)(a1 + 112) |= 2u;
        while (2)
        {
          uint64_t v84 = *v3;
          unint64_t v85 = *(void *)(a2 + v84);
          if (v85 == -1 || v85 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v86 = *(unsigned char *)(*(void *)(a2 + *v7) + v85);
            *(void *)(a2 + v84) = v85 + 1;
            v78 |= (unint64_t)(v86 & 0x7F) << v82;
            if (v86 < 0)
            {
              v82 += 7;
              BOOL v14 = v83++ >= 9;
              if (v14)
              {
                uint64_t v78 = 0;
                goto LABEL_178;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v78 = 0;
        }
LABEL_178:
        uint64_t v101 = 16;
        goto LABEL_187;
      case 0x10u:
        char v87 = 0;
        unsigned int v88 = 0;
        uint64_t v78 = 0;
        *(_WORD *)(a1 + 112) |= 4u;
        while (2)
        {
          uint64_t v89 = *v3;
          unint64_t v90 = *(void *)(a2 + v89);
          if (v90 == -1 || v90 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v91 = *(unsigned char *)(*(void *)(a2 + *v7) + v90);
            *(void *)(a2 + v89) = v90 + 1;
            v78 |= (unint64_t)(v91 & 0x7F) << v87;
            if (v91 < 0)
            {
              v87 += 7;
              BOOL v14 = v88++ >= 9;
              if (v14)
              {
                uint64_t v78 = 0;
                goto LABEL_182;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v78 = 0;
        }
LABEL_182:
        uint64_t v101 = 24;
        goto LABEL_187;
      case 0x11u:
        char v92 = 0;
        unsigned int v93 = 0;
        uint64_t v78 = 0;
        *(_WORD *)(a1 + 112) |= 8u;
        while (2)
        {
          uint64_t v94 = *v3;
          unint64_t v95 = *(void *)(a2 + v94);
          if (v95 == -1 || v95 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v96 = *(unsigned char *)(*(void *)(a2 + *v7) + v95);
            *(void *)(a2 + v94) = v95 + 1;
            v78 |= (unint64_t)(v96 & 0x7F) << v92;
            if (v96 < 0)
            {
              v92 += 7;
              BOOL v14 = v93++ >= 9;
              if (v14)
              {
                uint64_t v78 = 0;
                goto LABEL_186;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v78 = 0;
        }
LABEL_186:
        uint64_t v101 = 32;
LABEL_187:
        *(void *)(a1 + v101) = v78;
        goto LABEL_188;
      case 0x12u:
        uint64_t v37 = PBReaderReadData();
        uint64_t v38 = 72;
LABEL_125:
        uint64_t v97 = *(void **)(a1 + v38);
        *(void *)(a1 + v3_Block_object_dispose(&STACK[0x280], 8) = v37;

        goto LABEL_188;
      case 0x13u:
        char v17 = objc_alloc_init(MIPGenre);
        objc_storeStrong((id *)(a1 + 80), v17);
        if PBReaderPlaceMark() && (MIPGenreReadFrom((uint64_t)v17, a2))
        {
LABEL_128:
          PBReaderRecallMark();

LABEL_188:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_190:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_188;
    }
  }
}

void sub_1B03E628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 184), 8);
  _Block_object_dispose((const void *)(v27 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14506(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__14507(uint64_t a1)
{
}

uint64_t ML3ContainerItemImportItem::hasValue(ML3ContainerItemImportItem *this, uint64_t a2)
{
  if (a2 - 234881025) < 6 && ((0x37u >> (a2 - 1))) {
    return 1;
  }
  uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v4 = [NSString stringWithUTF8String:"virtual BOOL ML3ContainerItemImportItem::hasValue(MLImportPropertyKey) const"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3ContainerItemImportItem.mm", 87, @"ML3ContainerItemImportItem::hasValue called with unknown property key %x", a2);

  return 0;
}

void sub_1B03E7348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ContainerItemImportItem::getIntegerValue(ML3ContainerItemImportItem *this, uint64_t a2)
{
  switch(a2)
  {
    case 0xE000003:
      return *((void *)this + 10);
    case 0xE000002:
      return *((void *)this + 9);
    case 0xE000001:
      return *((void *)this + 8);
  }
  uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v5 = [NSString stringWithUTF8String:"virtual int64_t ML3ContainerItemImportItem::getIntegerValue(MLImportPropertyKey) const"];
  objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3ContainerItemImportItem.mm", 46, @"ML3ContainerItemImportItem::getIntegerValue called with unknown property key %x", a2);

  return 0;
}

void sub_1B03E743C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ContainerItemImportItem::getStringValue(ML3ContainerItemImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x280], 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  switch(a2)
  {
    case 0xE00000A:
      *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x280], 8) = *((unsigned char *)this + 176);
      uint64_t v4 = (const std::string *)((char *)this + 184);
      goto LABEL_7;
    case 0xE000005:
      *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x280], 8) = *((unsigned char *)this + 136);
      uint64_t v4 = (const std::string *)((char *)this + 144);
      goto LABEL_7;
    case 0xE000004:
      *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x280], 8) = *((unsigned char *)this + 96);
      uint64_t v4 = (const std::string *)((char *)this + 104);
LABEL_7:
      std::string::operator=((std::string *)(a3 + 16), v4);
      return;
  }
  id v6 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v5 = [NSString stringWithUTF8String:"virtual ML3ImportStringValue ML3ContainerItemImportItem::getStringValue(MLImportPropertyKey) const"];
  objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3ContainerItemImportItem.mm", 67, @"ML3ContainerItemImportItem::getIntegerValue called with unknown property key %x", a2);
}

void sub_1B03E75AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  *(void *)uint64_t v10 = v11;
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v12);
  }
  _Unwind_Resume(a1);
}

uint64_t ML3ContainerItemImportItem::isValid(ML3ContainerItemImportItem *this)
{
  return 1;
}

void ML3ContainerItemImportItem::~ML3ContainerItemImportItem(ML3ContainerItemImportItem *this)
{
  ML3ContainerItemImportItem::~ML3ContainerItemImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  *(void *)this = &unk_1F08C48B0;
  *((void *)this + 21) = &unk_1F08C3230;
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 16) = &unk_1F08C3230;
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  *((void *)this + 11) = &unk_1F08C3230;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  *(void *)this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

uint64_t ML3ImportValue<std::string>::ML3ImportValue(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F08C3230;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 32);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t ML3ContainerItemImportItem::ML3ContainerItemImportItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_WORD *)(a1 + 16) = 256;
  *(unsigned char *)(a1 + 1_Block_object_dispose(&STACK[0x280], 8) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(void *)a1 = &unk_1F08C48B0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = 0;
  *(void *)(a1 + 64) = a3;
  *(void *)(a1 + 72) = a4;
  *(void *)(a1 + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = a5;
  ML3ImportValue<std::string>::ML3ImportValue(a1 + 88, a6);
  ML3ImportValue<std::string>::ML3ImportValue(a1 + 128, a7);
  ML3ImportValue<std::string>::ML3ImportValue(a1 + 168, a8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = a2;
  return a1;
}

void sub_1B03E785C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 12_Block_object_dispose(&STACK[0x280], 8) = &unk_1F08C3230;
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*(void **)(v1 + 144));
  }
  *(void *)(v1 + 8_Block_object_dispose(&STACK[0x280], 8) = &unk_1F08C3230;
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  *(void *)uint64_t v1 = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

CFAbsoluteTime ML3CFAbsoluteTimeFromUInt32MacTime(unsigned int a1)
{
  CFAbsoluteTime v1 = (double)a1 - *MEMORY[0x1E4F1CF68];
  CFTimeZoneRef v2 = CFTimeZoneCopySystem();
  CFAbsoluteTime v3 = v1 - CFTimeZoneGetSecondsFromGMT(v2, v1);
  CFRelease(v2);
  return v3;
}

uint64_t ML3UInt32MacTimeFromCFAbsoluteTime(CFAbsoluteTime a1)
{
  unsigned int v2 = (*MEMORY[0x1E4F1CF68] + a1);
  CFTimeZoneRef v3 = CFTimeZoneCopySystem();
  uint64_t v4 = (CFTimeZoneGetSecondsFromGMT(v3, a1) + (double)v2);
  CFRelease(v3);
  return v4;
}

uint64_t ML3CreateIntegerUUID()
{
  CFUUIDRef v0 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  uint64_t v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v0);
  if (!v1)
  {
    uint64_t v1 = ++ML3CreateIntegerUUID_sUInt64UUID;
    if (!v0) {
      return v1;
    }
    goto LABEL_3;
  }
  if (v0) {
LABEL_3:
  }
    CFRelease(v0);
  return v1;
}

CFNumberRef ML3CreateNumberUUID()
{
  uint64_t valuePtr = ML3CreateIntegerUUID();
  return CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
}

UInt8 *ML3CopyUTF8StringFromCFString(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = 0;
  uint64_t v4 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xECA975D5uLL);
  v7.location = 0;
  v7.CFIndex length = Length;
  CFStringGetBytes(a1, v7, 0x8000100u, 0, 0, v4, MaximumSizeForEncoding, &usedBufLen);
  v4[usedBufLen] = 0;
  return v4;
}

uint64_t MSPMediaSyncErrorReadFrom(uint64_t a1, uint64_t a2)
{
  CFTimeZoneRef v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    CFRange v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t MSPMediaSyncPackageReadFrom(uint64_t a1, uint64_t a2)
{
  CFTimeZoneRef v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    CFRange v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 9)
      {
        if (v17 == 1)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&STACK[0x280], 8) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if ((v30 & 0x80) == 0) {
              goto LABEL_54;
            }
            v25 += 7;
            BOOL v14 = v26++ >= 9;
            if (v14)
            {
              LODWORD(v27) = 0;
              goto LABEL_56;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v27) = 0;
          }
LABEL_56:
          *(_DWORD *)(a1 + 32) = v27;
        }
        else
        {
          if (v17 != 2)
          {
LABEL_47:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_50;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              uint64_t v21 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v21 = 0;
          }
LABEL_52:
          *(unsigned char *)(a1 + 36) = v21 != 0;
        }
      }
      else
      {
        switch(v17)
        {
          case 0xA:
            unsigned int v18 = objc_alloc_init(MSPMediaSyncHeader);
            objc_storeStrong((id *)(a1 + 16), v18);
            if (!PBReaderPlaceMark() || !MSPMediaSyncHeaderReadFrom((uint64_t)v18, a2))
            {
LABEL_59:

              return 0;
            }
            break;
          case 0xB:
            unsigned int v18 = objc_alloc_init(MSPMediaSyncOperation);
            objc_storeStrong((id *)(a1 + 24), v18);
            if (!PBReaderPlaceMark() || (MSPMediaSyncOperationReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_59;
            }
            break;
          case 0xD:
            unsigned int v18 = objc_alloc_init(MSPMediaSyncError);
            objc_storeStrong((id *)(a1 + 8), v18);
            if (!PBReaderPlaceMark() || (MSPMediaSyncErrorReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_59;
            }
            break;
          default:
            goto LABEL_47;
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id ML3ContainerItemPersonDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerItemPersonDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  CFTimeZoneRef v3 = [NSString stringWithFormat:@"%@ LEFT OUTER JOIN container_item_person ON %@.ROWID = container_item_person.container_item_person_pid", a3, a3];

  return v3;
}

uint64_t ML3ContainerItemPersonDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerItemPersonDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ContainerItemPersonDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerItemPersonDatabaseImportDataSource *this)
{
  return 23;
}

void ML3ContainerItemPersonDatabaseImportDataSource::~ML3ContainerItemPersonDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

uint64_t ML3ContainerDatabaseImportDataSource::hasValueForKey(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (a3 - 184549380);
  if (v4 > 0x3B) {
    goto LABEL_18;
  }
  if (((1 << (a3 - 4)) & 0x800001000000003) == 0)
  {
    if (v4 == 5)
    {
      uint64_t v5 = (std::__shared_weak_count *)a2[1];
      v13[0] = *a2;
      v13[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t hasValueForKey = ML3DatabaseImportDataSource::hasValueForKey(a1, v13, 184549384);
      goto LABEL_21;
    }
    if (v4 == 54)
    {
      if (*(unsigned char *)(*a2 + 16))
      {
        uint64_t v5 = (std::__shared_weak_count *)a2[1];
        v18[0] = *a2;
        v18[1] = v5;
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (ML3DatabaseImportDataSource::hasValueForKey(a1, v18, 184549434))
        {
          uint64_t v8 = 1;
        }
        else
        {
          unint64_t v10 = (std::__shared_weak_count *)a2[1];
          uint64_t v16 = *a2;
          unint64_t v17 = v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 120))(a1, &v16, 184549395))
          {
            uint64_t v11 = (std::__shared_weak_count *)a2[1];
            uint64_t v14 = *a2;
            int v15 = v11;
            if (v11) {
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 120))(a1, &v14, 184549379);
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
          }
          else
          {
            uint64_t v8 = 0;
          }
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
        goto LABEL_22;
      }
      return 1;
    }
LABEL_18:
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    v12[0] = *a2;
    v12[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t hasValueForKey = ML3DatabaseImportDataSource::hasValueForKey(a1, v12, a3);
    goto LABEL_21;
  }
  if (!*(unsigned char *)(*a2 + 16)) {
    return 1;
  }
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v19[0] = *a2;
  v19[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t hasValueForKey = ML3DatabaseImportDataSource::hasValueForKey(a1, v19, a3);
LABEL_21:
  uint64_t v8 = hasValueForKey;
LABEL_22:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v8;
}

void sub_1B03E9E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void ML3ContainerDatabaseImportDataSource::stringValueForKey(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v16 = &unk_1F08C3230;
  std::string::value_type v17 = 0;
  memset(&v18, 0, sizeof(v18));
  if (a3 == 184549439)
  {
    uint64_t v7 = *a2;
    id v6 = (std::__shared_weak_count *)a2[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, 184549439);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (!*(unsigned char *)(a4 + 8) && !*(unsigned char *)(v7 + 16))
    {
      uint64_t v8 = *(void *)(v7 + 8);
      id v9 = *(id *)(*(void *)(a1 + 24) + 8);
      unint64_t v10 = +[ML3Container nextFilepathForPlaylistType:2 withPersistentID:v8 inLibrary:v9];

      if (v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v10 UTF8String]);
        std::string::operator=((std::string *)(a4 + 16), &__p);
        *(unsigned char *)(a4 + _Block_object_dispose(&STACK[0x280], 8) = 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    uint64_t v11 = *a2;
    unint64_t v12 = (std::__shared_weak_count *)a2[1];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v11 + 24))(&__p);
    std::string::value_type v17 = __p.__r_.__value_.__s.__data_[8];
    std::string::operator=(&v18, (const std::string *)&__p.__r_.__value_.__r.__words[2]);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F08C3230;
    if (v15 < 0) {
      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    *(void *)a4 = &unk_1F08C3230;
    *(unsigned char *)(a4 + _Block_object_dispose(&STACK[0x280], 8) = v17;
    char v13 = (std::string *)(a4 + 16);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
      *(void *)(a4 + 32) = *((void *)&v18.__r_.__value_.__l + 2);
    }
  }
  uint64_t v16 = &unk_1F08C3230;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1B03EA11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  *(void *)uint64_t v27 = &unk_1F08C3230;
  if (*(char *)(v27 + 39) < 0) {
    operator delete(*(void **)(v27 + 16));
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void ML3ContainerDatabaseImportDataSource::dataValueForKey(uint64_t *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v3 + 48))(&v6);
  long long v5 = v6;
  long long v6 = 0uLL;
  *(_OWORD *)a2 = v5;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1B03EA270(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ML3ContainerDatabaseImportDataSource::integerValueForKey(void *a1, void *a2, uint64_t a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if ((int)a3 <= 184549391)
  {
    if (a3 != 184549381)
    {
      if (a3 == 184549385) {
        return a1[9];
      }
      goto LABEL_80;
    }
LABEL_9:
    uint64_t v7 = *a2;
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (!v6)
    {
      if (!*(unsigned char *)(*a2 + 16)
        && !(*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 184549430))
      {
        uint64_t v9 = *a2;
        unint64_t v10 = (std::__shared_weak_count *)a2[1];
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 184549380);
        goto LABEL_83;
      }
      return 0;
    }
    return v6;
  }
  if (a3 == 184549392)
  {
    uint64_t v12 = *a2;
    char v13 = (std::__shared_weak_count *)a2[1];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 184549392);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (!v6) {
      return v6;
    }
    uint64_t v14 = a1[3];
    long long v46 = 0u;
    long long v47 = 0u;
    float v48 = *(float *)(v14 + 2400);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)&v46, *(void *)(v14 + 2376));
    char v15 = *(void **)(v14 + 2384);
    if (!v15)
    {
LABEL_65:
      char v31 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(&v46, v6);
      if (v31)
      {
        unint64_t v6 = v31[3];
      }
      else
      {
        uint64_t v38 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134217984;
          unint64_t v58 = v6;
          _os_log_impl(&dword_1B022D000, v38, OS_LOG_TYPE_ERROR, "failed to map container parent_pid %lld", buf, 0xCu);
        }
      }
      std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v46);
      return v6;
    }
    unint64_t v16 = *((void *)&v46 + 1);
    while (1)
    {
      unint64_t v17 = v15[2];
      if (v16)
      {
        uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          unint64_t v3 = v15[2];
          if (v17 >= v16) {
            unint64_t v3 = v17 % v16;
          }
        }
        else
        {
          unint64_t v3 = (v16 - 1) & v17;
        }
        char v19 = *(void **)(v46 + 8 * v3);
        if (v19)
        {
          for (uint64_t i = (void *)*v19; i; uint64_t i = (void *)*i)
          {
            unint64_t v21 = i[1];
            if (v21 == v17)
            {
              if (i[2] == v17) {
                goto LABEL_64;
              }
            }
            else
            {
              if (v18.u32[0] > 1uLL)
              {
                if (v21 >= v16) {
                  v21 %= v16;
                }
              }
              else
              {
                v21 &= v16 - 1;
              }
              if (v21 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t v22 = operator new(0x20uLL);
      void *v22 = 0;
      v22[1] = v17;
      *((_OWORD *)v22 + 1) = *((_OWORD *)v15 + 1);
      float v23 = (float)(unint64_t)(*((void *)&v47 + 1) + 1);
      if (!v16 || (float)(v48 * (float)v16) < v23)
      {
        BOOL v24 = (v16 & (v16 - 1)) != 0;
        if (v16 < 3) {
          BOOL v24 = 1;
        }
        unint64_t v25 = v24 | (2 * v16);
        unint64_t v26 = vcvtps_u32_f32(v23 / v48);
        if (v25 <= v26) {
          size_t v27 = v26;
        }
        else {
          size_t v27 = v25;
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)&v46, v27);
        unint64_t v16 = *((void *)&v46 + 1);
        if ((*((void *)&v46 + 1) & (*((void *)&v46 + 1) - 1)) != 0)
        {
          if (v17 >= *((void *)&v46 + 1)) {
            unint64_t v3 = v17 % *((void *)&v46 + 1);
          }
          else {
            unint64_t v3 = v17;
          }
        }
        else
        {
          unint64_t v3 = (*((void *)&v46 + 1) - 1) & v17;
        }
      }
      uint64_t v28 = v46;
      unint64_t v29 = *(void **)(v46 + 8 * v3);
      if (v29)
      {
        void *v22 = *v29;
      }
      else
      {
        void *v22 = v47;
        *(void *)&long long v47 = v22;
        *(void *)(v28 + 8 * v3) = &v47;
        if (!*v22) {
          goto LABEL_63;
        }
        unint64_t v30 = *(void *)(*v22 + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v30 >= v16) {
            v30 %= v16;
          }
        }
        else
        {
          v30 &= v16 - 1;
        }
        unint64_t v29 = (void *)(v46 + 8 * v30);
      }
      void *v29 = v22;
LABEL_63:
      ++*((void *)&v47 + 1);
LABEL_64:
      char v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_65;
      }
    }
  }
  if (a3 != 184549434)
  {
    if (a3 != 184549416)
    {
LABEL_80:
      uint64_t v37 = *a2;
      unint64_t v10 = (std::__shared_weak_count *)a2[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v37 + 32))(v37, a3);
LABEL_83:
      unint64_t v6 = v11;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      return v6;
    }
    goto LABEL_9;
  }
  uint64_t v32 = *a2;
  uint64_t v33 = (std::__shared_weak_count *)a2[1];
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 184549434);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (!v6)
  {
    if (*(unsigned char *)(*a2 + 16))
    {
      uint64_t v34 = (std::__shared_weak_count *)a2[1];
      uint64_t v55 = *a2;
      char v56 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*(unsigned int (**)(void *, uint64_t *, uint64_t))(*a1 + 120))(a1, &v55, 184549395))
      {
        unint64_t v35 = (std::__shared_weak_count *)a2[1];
        uint64_t v53 = *a2;
        unint64_t v54 = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*(unsigned int (**)(void *, uint64_t *, uint64_t))(*a1 + 120))(a1, &v53, 184549379)) {
          BOOL v36 = *(unsigned char *)(*a2 + 18) != 0;
        }
        else {
          BOOL v36 = 0;
        }
        if (v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        }
      }
      else
      {
        BOOL v36 = 0;
      }
      if (v56)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
        if (!v36) {
          return 0;
        }
      }
      else if (!v36)
      {
        return 0;
      }
    }
    else if (!*(unsigned char *)(*a2 + 18))
    {
      return 0;
    }
    char v39 = (std::__shared_weak_count *)a2[1];
    uint64_t v51 = *a2;
    unsigned int v52 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = (*(uint64_t (**)(void *, uint64_t *, uint64_t))(*a1 + 80))(a1, &v51, 184549395);
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    uint64_t v41 = (std::__shared_weak_count *)a2[1];
    uint64_t v49 = *a2;
    char v50 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v42 = (*(uint64_t (**)(void *, uint64_t *, uint64_t))(*a1 + 80))(a1, &v49, 184549379);
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (v40) {
      BOOL v43 = (unint64_t)(v42 - 21) >= 0xFFFFFFFFFFFFFFFELL;
    }
    else {
      BOOL v43 = 1;
    }
    return !v43 && v42 != 32;
  }
  return v6;
}

void sub_1B03EA980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  long long v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void ML3ContainerDatabaseImportDataSource::prepareColumns(void *a1, uint64_t *a2)
{
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v7, *a2, 184549384);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __p;
  }
  uint8x8_t v3 = ML3CPPBridgeString((const UInt8 *)&v9, 1);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  unint64_t v7 = &unk_1F08C3230;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  id v4 = *(id *)(a1[3] + 24);
  long long v5 = [v4 objectForKey:v3];
  a1[9] = [v5 ML3NameOrderValue];
  a1[10] = v6;
}

void sub_1B03EABDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ContainerDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ContainerDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerDatabaseImportDataSource *this)
{
  return 11;
}

void ML3ContainerDatabaseImportDataSource::~ML3ContainerDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

unint64_t ML3CPP::Element::integerValue(ML3CPP::Element *this)
{
  unint64_t result = 0;
  switch(*((_DWORD *)this + 16))
  {
    case 1:
      unint64_t result = **((char **)this + 6);
      break;
    case 2:
      unint64_t result = (__int16)(bswap32(**((unsigned __int16 **)this + 6)) >> 16);
      break;
    case 4:
      unint64_t result = (int)bswap32(**((_DWORD **)this + 6));
      break;
    case 8:
      unint64_t result = bswap64(**((void **)this + 6));
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *ML3CPP::Element::appendChildElement(uint64_t *result, void *a2)
{
  if (!*a2) {
    return result;
  }
  uint8x8_t v3 = result;
  id v4 = (void *)result[10];
  unint64_t v5 = result[11];
  if ((unint64_t)v4 < v5)
  {
    uint64_t v6 = a2[1];
    *id v4 = *a2;
    v4[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v7 = v4 + 2;
    result[10] = (uint64_t)(v4 + 2);
    goto LABEL_23;
  }
  uint64_t v8 = result[9];
  uint64_t v9 = ((uint64_t)v4 - v8) >> 4;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60) {
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v5 - v8;
  if (v11 >> 3 > v10) {
    unint64_t v10 = v11 >> 3;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v12);
  char v15 = &v13[16 * v9];
  long long v16 = *(_OWORD *)a2;
  *(_OWORD *)char v15 = *(_OWORD *)a2;
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = &v13[16 * v14];
  unint64_t v7 = v15 + 16;
  uint8x8_t v18 = (void *)v3[9];
  char v19 = (void *)v3[10];
  if (v19 != v18)
  {
    do
    {
      long long v20 = *((_OWORD *)v19 - 1);
      v19 -= 2;
      *((_OWORD *)v15 - 1) = v20;
      v15 -= 16;
      void *v19 = 0;
      v19[1] = 0;
    }
    while (v19 != v18);
    unint64_t v21 = (void *)v3[9];
    char v19 = (void *)v3[10];
    v3[9] = (uint64_t)v15;
    v3[10] = (uint64_t)v7;
    void v3[11] = (uint64_t)v17;
    if (v19 != v21)
    {
      do
      {
        uint64_t v22 = (std::__shared_weak_count *)*(v19 - 1);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        v19 -= 2;
      }
      while (v19 != v21);
      char v19 = v21;
    }
    if (!v19) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v3[9] = (uint64_t)v15;
  v3[10] = (uint64_t)v7;
  void v3[11] = (uint64_t)v17;
  if (v19) {
LABEL_22:
  }
    operator delete(v19);
LABEL_23:
  v3[10] = (uint64_t)v7;
  float v23 = (std::__shared_weak_count *)v3[1];
  if (!v23 || (v24 = *a2, uint64_t v25 = *v3, (v26 = std::__shared_weak_count::lock(v23)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v27 = v26;
  atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v28 = *(std::__shared_weak_count **)(v24 + 32);
  *(void *)(v24 + 24) = v25;
  *(void *)(v24 + 32) = v27;
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  unsigned int v29 = *(_DWORD *)(*a2 + 16);
  long long v36 = *(_OWORD *)a2;
  if (a2[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a2[1] + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v30 = (char *)operator new(0x38uLL);
  char v31 = (uint64_t *)v30;
  uint64_t v32 = (uint64_t **)(v3 + 13);
  uint64_t v33 = v3[13];
  *((_DWORD *)v30 + _Block_object_dispose(&STACK[0x280], 8) = v29;
  *(_OWORD *)(v30 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v36;
  if (v33)
  {
    do
    {
      while (1)
      {
        uint64_t v32 = (uint64_t **)v33;
        if (v29 >= *(_DWORD *)(v33 + 32)) {
          break;
        }
        uint64_t v33 = *(void *)v33;
        uint64_t v34 = v32;
        if (!*v32) {
          goto LABEL_36;
        }
      }
      uint64_t v33 = *(void *)(v33 + 8);
    }
    while (v33);
    uint64_t v34 = v32 + 1;
  }
  else
  {
    uint64_t v34 = (uint64_t **)(v3 + 13);
  }
LABEL_36:
  *(void *)unint64_t v30 = 0;
  *((void *)v30 + 1) = 0;
  *((void *)v30 + 2) = v32;
  std::__shared_weak_count *v34 = (uint64_t *)v30;
  uint64_t v35 = *(void *)v3[12];
  if (v35)
  {
    v3[12] = v35;
    char v31 = *v34;
  }
  unint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[13], v31);
  ++v3[14];
  return result;
}

void sub_1B03EAF7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

uint64_t *ML3CPP::Element::childElementForCode(ML3CPP::Element *this, uint64_t a2, unsigned int a3)
{
  unint64_t result = std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(a2 + 96, a3);
  if ((unint64_t)result >= 2)
  {
    unint64_t v16 = (unint64_t)result;
    std::to_string(&v25, a3);
    unint64_t v17 = std::string::insert(&v25, 0, "There is more than one child for this code, please use childElementsForCode. ElementCode=");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::to_string(&v24, v16);
    char v19 = std::string::insert(&v24, 0, "numberOfChildren=");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v21 = &v25;
    }
    else {
      unint64_t v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    std::string::append(&v26, (const std::string::value_type *)v21, size);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B3E93300](exception, &v26);
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  if (result == (uint64_t *)1)
  {
    uint64_t v9 = *(void *)(a2 + 104);
    uint64_t v8 = a2 + 104;
    uint64_t v7 = v9;
    if (!v9) {
      goto LABEL_14;
    }
    uint64_t v10 = v8;
    do
    {
      unsigned int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 >= a3;
      if (v11 >= a3) {
        char v13 = (uint64_t *)v7;
      }
      else {
        char v13 = (uint64_t *)(v7 + 8);
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 == v8 || *(_DWORD *)(v10 + 32) > a3) {
LABEL_14:
    }
      uint64_t v10 = v8;
    uint64_t v15 = *(void *)(v10 + 40);
    uint64_t v14 = *(void *)(v10 + 48);
    *(void *)this = v15;
    *((void *)this + 1) = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  return result;
}

void sub_1B03EB194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(uint64_t a1, unsigned int a2)
{
  id v4 = *(uint64_t **)(a1 + 8);
  int8x8_t v2 = (void *)(a1 + 8);
  uint8x8_t v3 = v4;
  if (!v4) {
    return v3;
  }
  while (1)
  {
    unsigned int v5 = *((_DWORD *)v3 + 8);
    if (v5 <= a2) {
      break;
    }
    int8x8_t v2 = v3;
LABEL_6:
    uint8x8_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return v3;
    }
  }
  if (v5 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v6 = *v3;
  uint64_t v7 = v3;
  if (*v3)
  {
    uint64_t v7 = v3;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = (uint64_t *)v6;
      }
      else {
        uint64_t v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = (void *)v6;
      }
      uint64_t v6 = *v10;
    }
    while (*v10);
  }
  uint64_t v11 = v3[1];
  if (v11)
  {
    do
    {
      unsigned int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 > a2;
      if (v12 <= a2) {
        uint64_t v14 = (uint64_t *)(v11 + 8);
      }
      else {
        uint64_t v14 = (uint64_t *)v11;
      }
      if (v13) {
        int8x8_t v2 = (void *)v11;
      }
      uint64_t v11 = *v14;
    }
    while (*v14);
  }
  if (v7 == v2) {
    return 0;
  }
  uint8x8_t v3 = 0;
  do
  {
    uint64_t v15 = (void *)v7[1];
    if (v15)
    {
      do
      {
        unint64_t v16 = v15;
        uint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        unint64_t v16 = (void *)v7[2];
        BOOL v17 = *v16 == (void)v7;
        uint64_t v7 = v16;
      }
      while (!v17);
    }
    uint8x8_t v3 = (uint64_t *)((char *)v3 + 1);
    uint64_t v7 = v16;
  }
  while (v16 != v2);
  return v3;
}

id ML3BookletDatabaseImportDataSource::generateVTableInsertionFromClause(ML3BookletDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  uint8x8_t v3 = [NSString stringWithFormat:@"%@ LEFT OUTER JOIN booklet ON %@.ROWID = booklet.booklet_pid", a3, a3];

  return v3;
}

__CFString *ML3BookletDatabaseImportDataSource::identityPropertyForSource(ML3BookletDatabaseImportDataSource *this)
{
  uint64_t v1 = @"store_item_id";
  return @"store_item_id";
}

uint64_t ML3BookletDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3BookletDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3BookletDatabaseImportDataSource::getImportPropertyGroupKey(ML3BookletDatabaseImportDataSource *this)
{
  return 24;
}

void ML3BookletDatabaseImportDataSource::~ML3BookletDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

void ML3ShowDuplicateVideoAlert(void *a1)
{
}

void ML3ShowFileRadarAlert(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (ML3IsProcessRunning(@"com.apple.SpringBoard")
    && !ML3IsProcessRunning(@"com.apple.datamigrator")
    && (MSVDeviceOSIsInternalInstall() & 1) != 0)
  {
    id v8 = v5;
    BOOL v9 = [NSString stringWithFormat:@"%@\n\nPlease file a radar now using the button below.\n\n[This dialog is shown for internal users only.]", v6];
    id v10 = objc_alloc_init(MEMORY[0x1E4F77A20]);
    [v10 setAlertHeader:v8];
    [v10 setAlertMessage:v9];
    [v10 setDefaultButtonTitle:@"File Radar"];
    [v10 setAlternateButtonTitle:@"Ignore"];
    uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F77A18]) initWithOptions:v10];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __ML3ShowFileRadarAlert_block_invoke;
    v13[3] = &unk_1E5FB5EA8;
    id v14 = v8;
    id v15 = v7;
    id v12 = v8;
    [v11 presentWithCompletion:v13];
  }
  else
  {
    [MEMORY[0x1E4F77950] snapshotWithDomain:*MEMORY[0x1E4F778D0] type:@"Bug" subType:v5 context:v6 triggerThresholdValues:0 events:0 completion:0];
  }
}

void __ML3ShowFileRadarAlert_block_invoke(uint64_t a1, void *a2)
{
  v24[9] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 buttonIdentifier] == 1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F29088]);
    [v4 setScheme:@"tap-to-radar"];
    [v4 setHost:@"new"];
    long long v18 = [MEMORY[0x1E4F290C8] queryItemWithName:@"BundleID" value:@"com.apple.music"];
    v24[0] = v18;
    BOOL v17 = [MEMORY[0x1E4F290C8] queryItemWithName:@"Title" value:*(void *)(a1 + 32)];
    v24[1] = v17;
    id v5 = [MEMORY[0x1E4F290C8] queryItemWithName:@"Description" value:*(void *)(a1 + 40)];
    v24[2] = v5;
    id v6 = [MEMORY[0x1E4F290C8] queryItemWithName:@"ComponentID" value:@"638694"];
    void v24[3] = v6;
    id v7 = [MEMORY[0x1E4F290C8] queryItemWithName:@"ComponentName" value:@"Media Platform"];
    void v24[4] = v7;
    id v8 = [MEMORY[0x1E4F290C8] queryItemWithName:@"ComponentVersion" value:@"Library"];
    void v24[5] = v8;
    BOOL v9 = [MEMORY[0x1E4F290C8] queryItemWithName:@"Classification" value:@"Serious Bug"];
    v24[6] = v9;
    id v10 = [MEMORY[0x1E4F290C8] queryItemWithName:@"ExtensionIdentifiers" value:@"com.apple.MediaPlayer.DiagnosticExtension"];
    v24[7] = v10;
    uint64_t v11 = [MEMORY[0x1E4F290C8] queryItemWithName:@"Reproducibility" value:@"Sometimes"];
    v24[8] = v11;
    id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:9];
    [v4 setQueryItems:v12];

    uint64_t v20 = 0;
    unint64_t v21 = &v20;
    uint64_t v22 = 0x2050000000;
    BOOL v13 = (void *)getLSApplicationWorkspaceClass_softClass;
    uint64_t v23 = getLSApplicationWorkspaceClass_softClass;
    if (!getLSApplicationWorkspaceClass_softClass)
    {
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      void v19[2] = __getLSApplicationWorkspaceClass_block_invoke;
      void v19[3] = &unk_1E5FB7330;
      void v19[4] = &v20;
      __getLSApplicationWorkspaceClass_block_invoke((uint64_t)v19);
      BOOL v13 = (void *)v21[3];
    }
    id v14 = v13;
    _Block_object_dispose(&v20, 8);
    id v15 = [v14 defaultWorkspace];
    unint64_t v16 = [v4 URL];
    [v15 openURL:v16 withOptions:0 error:0];
  }
}

void sub_1B03EB8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLSApplicationWorkspaceClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!CoreServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreServicesLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E5FB5EC8;
    uint64_t v8 = 0;
    CoreServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreServicesLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *CoreServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3DiagnosticUtilities.m", 17, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("LSApplicationWorkspace");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getLSApplicationWorkspaceClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3DiagnosticUtilities.m", 18, @"Unable to find class %s", "LSApplicationWorkspace");

LABEL_10:
    __break(1u);
  }
  getLSApplicationWorkspaceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1B03EC39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ML3SetCloudIDContainerImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3SetCloudIDContainerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7870;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3SetCloudIDContainerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B03ECB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100I29ML3SetCloudIDArtistImportItemNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  int8x8_t v2 = operator new(0x68uLL);
  v2[1] = 0;
  v2[2] = 0;
  *int8x8_t v2 = &unk_1F08C7838;
  ML3SetCloudIDImportItem::ML3SetCloudIDImportItem((ML3SetCloudIDImportItem *)(v2 + 3), 0);
  v2[3] = &unk_1F08C5970;
  *a1 = v3;
  a1[1] = v2;
}

uint64_t std::__shared_ptr_emplace<ML3SetCloudIDAlbumImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3SetCloudIDAlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C77C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3SetCloudIDAlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C77C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ML3SetCloudIDArtistImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3SetCloudIDArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7838;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3SetCloudIDArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ML3SetCloudIDTrackImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3SetCloudIDTrackImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7800;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3SetCloudIDTrackImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B03ED758(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  ML3ImportSession::~ML3ImportSession((ML3ImportSession *)va);
  _Unwind_Resume(a1);
}

void sub_1B03EDA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03EDBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationCreateNewAlbumForMisgroupedTracks(void *a1, uint64_t a2, void *a3, void *a4)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  if (![v8 count])
  {
    uint64_t v39 = 1;
    goto LABEL_33;
  }
  uint64_t v49 = v8;
  uint64_t v9 = [&unk_1F09109F0 componentsJoinedByString:@", "];
  id v10 = [NSString stringWithFormat:@"INSERT OR REPLACE INTO album (%@) SELECT %@ FROM album WHERE album_pid=?", v9, v9];
  uint64_t v11 = [NSNumber numberWithLongLong:a2];
  v64[0] = v11;
  id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v64 count:1];
  id v57 = 0;
  char v13 = [v7 executeUpdate:v10 withParameters:v12 error:&v57];
  id v14 = v57;

  if (v13)
  {
    long long v47 = v10;
    float v48 = v9;
    id v15 = v7;
    uint64_t v16 = [v7 lastInsertionRowID];
    BOOL v17 = [NSNumber numberWithLongLong:v16];
    v61[0] = v17;
    v61[1] = &unk_1F0911650;
    long long v18 = objc_msgSend(NSNumber, "numberWithInteger:", +[ML3Album revisionTrackingCode](ML3Album, "revisionTrackingCode"));
    v61[2] = v18;
    char v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v61 count:3];
    id v56 = v14;
    char v20 = [v15 executeUpdate:@"REPLACE INTO entity_revision (entity_pid, deleted, class) VALUES (?, ?, ?)", v19, &v56 withParameters error];
    id v21 = v56;

    if (v20)
    {
      long long v46 = a4;
      uint64_t v22 = [v49 firstObject];
      uint64_t v23 = objc_msgSend(NSNumber, "numberWithLongLong:", -[NSObject albumArtistPID](v22, "albumArtistPID"));
      v60[0] = v23;
      std::string v24 = objc_msgSend(NSNumber, "numberWithLongLong:", -[NSObject persistentID](v22, "persistentID"));
      v60[1] = v24;
      uint64_t v43 = v16;
      std::string v25 = [NSNumber numberWithLongLong:v16];
      v60[2] = v25;
      std::string v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:v60 count:3];
      id v55 = v21;
      char v27 = [v15 executeUpdate:@"UPDATE album SET album_artist_pid=?, representative_item_pid=? WHERE album_pid=?", v26, &v55 withParameters error];
      id v45 = v55;

      id v7 = v15;
      if (v27)
      {
        id v8 = v49;
        os_log_t v28 = (os_log_t)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v49, "count"));
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        id v29 = v49;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v51 objects:v59 count:16];
        if (v30)
        {
          uint64_t v31 = v30;
          uint64_t v32 = *(void *)v52;
          do
          {
            uint64_t v33 = 0;
            do
            {
              if (*(void *)v52 != v32) {
                objc_enumerationMutation(v29);
              }
              uint64_t v34 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(*((void *)&v51 + 1) + 8 * v33), "persistentID"));
              [v28 addObject:v34];

              ++v33;
            }
            while (v31 != v33);
            uint64_t v31 = [v29 countByEnumeratingWithState:&v51 objects:v59 count:16];
          }
          while (v31);
        }

        uint64_t v35 = [v28 componentsJoinedByString:@", "];
        uint64_t v36 = [NSString stringWithFormat:@"UPDATE item SET album_pid=? WHERE item_pid IN (%@)", v35];
        uint64_t v37 = [NSNumber numberWithLongLong:v43];
        unint64_t v58 = v37;
        uint64_t v38 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v58 count:1];
        id v50 = v45;
        char v44 = (void *)v36;
        uint64_t v39 = [v7 executeUpdate:v36 withParameters:v38 error:&v50];
        id v14 = v50;

        a4 = v46;
        uint64_t v9 = v48;
        if ((v39 & 1) == 0)
        {
          uint64_t v40 = v35;
          uint64_t v41 = os_log_create("com.apple.amp.medialibrary", "Default");
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543362;
            id v63 = v14;
            _os_log_impl(&dword_1B022D000, v41, OS_LOG_TYPE_ERROR, "Failed to update item's album column with newly created album. %{public}@", buf, 0xCu);
          }

          uint64_t v35 = v40;
        }

        id v10 = v47;
      }
      else
      {
        os_log_t v28 = os_log_create("com.apple.amp.medialibrary", "Default");
        a4 = v46;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543362;
          id v14 = v45;
          id v63 = v45;
          _os_log_impl(&dword_1B022D000, v28, OS_LOG_TYPE_ERROR, "Failed to update representative item for newly created album. %{public}@", buf, 0xCu);
          uint64_t v39 = 0;
        }
        else
        {
          uint64_t v39 = 0;
          id v14 = v45;
        }
        id v10 = v47;
        uint64_t v9 = v48;
        id v8 = v49;
      }

      goto LABEL_30;
    }
    id v7 = v15;
    uint64_t v22 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v63 = v21;
      _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_ERROR, "Failed to update entity revision with newly created album. %{public}@", buf, 0xCu);
    }
    uint64_t v39 = 0;
    id v14 = v21;
    id v10 = v47;
    uint64_t v9 = v48;
  }
  else
  {
    uint64_t v22 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v63 = v14;
      _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_ERROR, "Failed to create new album for misgrouped track. %{public}@", buf, 0xCu);
    }
    uint64_t v39 = 0;
  }
  id v8 = v49;
LABEL_30:

  if (a4) {
    *a4 = v14;
  }

LABEL_33:
  return v39;
}

BOOL MSPMediaSyncHeaderReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            std::string v24 = &OBJC_IVAR___MSPMediaSyncHeader__totalPackages;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            std::string v24 = &OBJC_IVAR___MSPMediaSyncHeader__totalPackages;
            goto LABEL_41;
          }
        }
        std::string v24 = &OBJC_IVAR___MSPMediaSyncHeader__totalPackages;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 1u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        std::string v24 = &OBJC_IVAR___MSPMediaSyncHeader__syncType;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        std::string v24 = &OBJC_IVAR___MSPMediaSyncHeader__syncType;
        goto LABEL_41;
      }
    }
    std::string v24 = &OBJC_IVAR___MSPMediaSyncHeader__syncType;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t ML3AlbumImportItem::hasValue(ML3AlbumImportItem *this)
{
  return 1;
}

uint64_t ML3AlbumImportItem::getDataValue@<X0>(uint64_t this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 285212677) {
    ML3CPPBridgeNSData(a3, *(void **)(this + 112));
  }
  a3->super.isa = 0;
  a3[1].super.isa = 0;
  return this;
}

uint64_t ML3AlbumImportItem::getIntegerValue(ML3AlbumImportItem *this, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 285212675:
      uint64_t result = *((void *)this + 16);
      break;
    case 285212676:
      uint64_t result = *((void *)this + 15);
      break;
    case 285212677:
    case 285212678:
    case 285212682:
    case 285212685:
    case 285212686:
    case 285212687:
    case 285212689:
    case 285212690:
    case 285212692:
    case 285212694:
      return result;
    case 285212679:
      uint64_t result = *(int *)(*((void *)this + 8) + 56);
      break;
    case 285212680:
      uint64_t result = *(int *)(*((void *)this + 8) + 64);
      break;
    case 285212681:
      goto LABEL_15;
    case 285212683:
      uint64_t result = *((void *)this + 17);
      break;
    case 285212684:
      uint64_t result = *(int *)(*((void *)this + 8) + 68);
      break;
    case 285212688:
      uint64_t result = *((unsigned __int8 *)this + 144);
      break;
    case 285212691:
      uint64_t result = *(void *)(*((void *)this + 8) + 96);
      break;
    case 285212693:
      uint64_t result = *(unsigned __int8 *)(*((void *)this + 8) + 137);
      break;
    case 285212695:
      uint64_t result = *(void *)(*((void *)this + 8) + 144);
      break;
    case 285212696:
      this = (ML3AlbumImportItem *)*((void *)this + 8);
LABEL_15:
      uint64_t result = *((void *)this + 13);
      break;
    default:
      if (a2 == 167772186) {
        uint64_t result = *(unsigned __int8 *)(*((void *)this + 8) + 60);
      }
      break;
  }
  return result;
}

uint64_t ML3AlbumImportItem::getStringValue@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 > 285212681)
  {
    if (a2 == 285212682)
    {
      id v4 = (long long *)(this + 80);
    }
    else
    {
      if (a2 != 285212697) {
        goto LABEL_15;
      }
      id v4 = (long long *)(*(void *)(this + 64) + 112);
    }
    return ML3ImportValue<std::string>::ML3ImportValue(a3, v4);
  }
  if (a2 == 285212673)
  {
    id v4 = (long long *)(*(void *)(this + 64) + 8);
    return ML3ImportValue<std::string>::ML3ImportValue(a3, v4);
  }
  if (a2 == 285212674)
  {
    uint64_t v3 = *(void *)(this + 64);
    if ((*(char *)(v3 + 55) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(v3 + 55)) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    if (*(void *)(v3 + 40))
    {
LABEL_13:
      id v4 = (long long *)(v3 + 32);
      return ML3ImportValue<std::string>::ML3ImportValue(a3, v4);
    }
  }
LABEL_15:
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x280], 8) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  return this;
}

uint64_t ML3ImportValue<std::string>::ML3ImportValue(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F08C3230;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = 1;
  uint64_t v3 = (std::string *)(a1 + 16);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t ML3AlbumImportItem::isValid(ML3AlbumImportItem *this)
{
  return 1;
}

void ML3AlbumImportItem::~ML3AlbumImportItem(id *this)
{
  ML3AlbumImportItem::~ML3AlbumImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  std::__shared_weak_count *v2;

  *this = &unk_1F08C33C8;

  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  int8x8_t v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3AlbumArtistImportItem::hasValue(ML3AlbumArtistImportItem *this)
{
  return 1;
}

uint64_t ML3AlbumArtistImportItem::getDataValue@<X0>(uint64_t this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 301989891) {
    ML3CPPBridgeNSData(a3, *(void **)(this + 80));
  }
  a3->super.isa = 0;
  a3[1].super.isa = 0;
  return this;
}

uint64_t ML3AlbumArtistImportItem::getIntegerValue(ML3AlbumArtistImportItem *this, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 301989893:
      uint64_t result = *(void *)(*((void *)this + 8) + 104);
      break;
    case 301989894:
      uint64_t result = *((void *)this + 11);
      break;
    case 301989898:
      uint64_t result = *(void *)(*((void *)this + 8) + 144);
      break;
    case 301989901:
      uint64_t result = *(unsigned __int8 *)(*((void *)this + 8) + 176);
      break;
    case 301989903:
      uint64_t result = *(int *)(*((void *)this + 8) + 180);
      break;
    case 301989904:
      uint64_t result = *(void *)(*((void *)this + 8) + 184);
      break;
    case 301989906:
      uint64_t result = *(void *)(*((void *)this + 8) + 112);
      break;
    case 301989907:
      uint64_t result = *(void *)(*((void *)this + 8) + 120);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ML3AlbumArtistImportItem::getStringValue@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 301989899:
      uint64_t v3 = (long long *)(*(void *)(this + 64) + 152);
      return ML3ImportValue<std::string>::ML3ImportValue(a3, v3);
    case 301989890:
      uint64_t v4 = *(void *)(this + 64);
      if (*(char *)(v4 + 55) < 0)
      {
        if (!*(void *)(v4 + 40)) {
          break;
        }
      }
      else if (!*(unsigned char *)(v4 + 55))
      {
        break;
      }
      uint64_t v3 = (long long *)(v4 + 32);
      return ML3ImportValue<std::string>::ML3ImportValue(a3, v3);
    case 301989889:
      uint64_t v3 = (long long *)(*(void *)(this + 64) + 8);
      return ML3ImportValue<std::string>::ML3ImportValue(a3, v3);
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x280], 8) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  return this;
}

uint64_t ML3AlbumArtistImportItem::isValid(ML3AlbumArtistImportItem *this)
{
  return 1;
}

void ML3AlbumArtistImportItem::~ML3AlbumArtistImportItem(id *this)
{
  ML3AlbumArtistImportItem::~ML3AlbumArtistImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  std::__shared_weak_count *v2;

  *this = &unk_1F08C4438;

  int8x8_t v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3ArtistImportItem::hasValue(ML3ArtistImportItem *this)
{
  return 1;
}

uint64_t ML3ArtistImportItem::getDataValue@<X0>(uint64_t this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 318767109) {
    ML3CPPBridgeNSData(a3, *(void **)(this + 80));
  }
  a3->super.isa = 0;
  a3[1].super.isa = 0;
  return this;
}

uint64_t ML3ArtistImportItem::getIntegerValue(ML3ArtistImportItem *this, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 318767111:
      uint64_t result = *(void *)(*((void *)this + 8) + 104);
      break;
    case 318767112:
      uint64_t result = *((void *)this + 11);
      break;
    case 318767116:
      uint64_t result = *(void *)(*((void *)this + 8) + 144);
      break;
    case 318767118:
      uint64_t result = *(unsigned __int8 *)(*((void *)this + 8) + 176);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ML3ArtistImportItem::getStringValue@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 318767105:
      uint64_t v3 = (long long *)(*(void *)(this + 64) + 8);
      return ML3ImportValue<std::string>::ML3ImportValue(a3, v3);
    case 318767106:
      uint64_t v4 = *(void *)(this + 64);
      if (*(char *)(v4 + 55) < 0)
      {
        if (!*(void *)(v4 + 40)) {
          goto LABEL_15;
        }
      }
      else if (!*(unsigned char *)(v4 + 55))
      {
        goto LABEL_15;
      }
      uint64_t v3 = (long long *)(v4 + 32);
      return ML3ImportValue<std::string>::ML3ImportValue(a3, v3);
    case 318767107:
      uint64_t v3 = (long long *)(*(void *)(this + 64) + 56);
      return ML3ImportValue<std::string>::ML3ImportValue(a3, v3);
    case 318767108:
      uint64_t v5 = *(void *)(this + 64);
      if (*(char *)(v5 + 103) < 0)
      {
        if (!*(void *)(v5 + 88))
        {
LABEL_15:
          *(void *)a3 = &unk_1F08C3230;
          *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x280], 8) = 0;
          *(void *)(a3 + 24) = 0;
          *(void *)(a3 + 32) = 0;
          *(void *)(a3 + 16) = 0;
          return this;
        }
      }
      else if (!*(unsigned char *)(v5 + 103))
      {
        goto LABEL_15;
      }
      uint64_t v3 = (long long *)(v5 + 80);
      return ML3ImportValue<std::string>::ML3ImportValue(a3, v3);
    default:
      goto LABEL_15;
  }
}

uint64_t ML3ArtistImportItem::isValid(ML3ArtistImportItem *this)
{
  return 1;
}

void ML3ArtistImportItem::~ML3ArtistImportItem(id *this)
{
  ML3ArtistImportItem::~ML3ArtistImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  std::__shared_weak_count *v2;

  *this = &unk_1F08C3770;

  int8x8_t v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3ComposerImportItem::hasValue(ML3ComposerImportItem *this)
{
  return 1;
}

uint64_t ML3ComposerImportItem::getDataValue@<X0>(uint64_t this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 335544323) {
    ML3CPPBridgeNSData(a3, *(void **)(this + 104));
  }
  a3->super.isa = 0;
  a3[1].super.isa = 0;
  return this;
}

uint64_t ML3ComposerImportItem::getIntegerValue(ML3ComposerImportItem *this, int a2)
{
  if (a2 == 335544328)
  {
    int8x8_t v2 = (char *)(*((void *)this + 8) + 72);
    return *(void *)v2;
  }
  if (a2 == 335544325)
  {
    int8x8_t v2 = (char *)this + 112;
    return *(void *)v2;
  }
  return 0;
}

uint64_t ML3ComposerImportItem::getStringValue@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 335544322)
  {
    uint64_t v4 = *(void *)(this + 64);
    if (*(char *)(v4 + 55) < 0)
    {
      if (!*(void *)(v4 + 40)) {
        goto LABEL_9;
      }
    }
    else if (!*(unsigned char *)(v4 + 55))
    {
      goto LABEL_9;
    }
    uint64_t v3 = (long long *)(v4 + 32);
    return ML3ImportValue<std::string>::ML3ImportValue(a3, v3);
  }
  if (a2 == 335544321)
  {
    uint64_t v3 = (long long *)(this + 80);
    return ML3ImportValue<std::string>::ML3ImportValue(a3, v3);
  }
LABEL_9:
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x280], 8) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  return this;
}

uint64_t ML3ComposerImportItem::isValid(ML3ComposerImportItem *this)
{
  return 1;
}

void ML3ComposerImportItem::~ML3ComposerImportItem(id *this)
{
  ML3ComposerImportItem::~ML3ComposerImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  std::__shared_weak_count *v2;

  *this = &unk_1F08C38C0;

  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  int8x8_t v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3GenreImportItem::hasValue(ML3GenreImportItem *this)
{
  return 1;
}

uint64_t ML3GenreImportItem::getDataValue@<X0>(uint64_t this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 352321538) {
    ML3CPPBridgeNSData(a3, *(void **)(this + 104));
  }
  a3->super.isa = 0;
  a3[1].super.isa = 0;
  return this;
}

uint64_t ML3GenreImportItem::getIntegerValue(ML3GenreImportItem *this, int a2)
{
  if (a2 == 352321543)
  {
    int8x8_t v2 = (char *)(*((void *)this + 8) + 48);
    return *(void *)v2;
  }
  if (a2 == 352321540)
  {
    int8x8_t v2 = (char *)this + 112;
    return *(void *)v2;
  }
  return 0;
}

uint64_t ML3GenreImportItem::getStringValue@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 352321537) {
    return ML3ImportValue<std::string>::ML3ImportValue(a3, (long long *)(this + 80));
  }
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x280], 8) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  return this;
}

uint64_t ML3GenreImportItem::isValid(ML3GenreImportItem *this)
{
  return 1;
}

void ML3GenreImportItem::~ML3GenreImportItem(id *this)
{
  ML3GenreImportItem::~ML3GenreImportItem(this);

  JUMPOUT(0x1B3E93610);
}

{
  std::__shared_weak_count *v2;

  *this = &unk_1F08C34B0;

  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  int8x8_t v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3AlbumImportItem::ML3AlbumImportItem(uint64_t a1, void *a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id v16 = a5;
  *(_WORD *)(a1 + 16) = 256;
  *(unsigned char *)(a1 + 1_Block_object_dispose(&STACK[0x280], 8) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(void *)a1 = &unk_1F08C33C8;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = 0;
  uint64_t v17 = a2[1];
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v18 = (std::string *)(a1 + 80);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v19 = *a3;
    *(void *)(a1 + 96) = *((void *)a3 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  *(void *)(a1 + 104) = a4;
  id v20 = v16;
  *(void *)(a1 + 112) = v20;
  *(void *)(a1 + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = a6;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x280], 8) = a7;
  *(void *)(a1 + 136) = a8;
  *(unsigned char *)(a1 + 144) = a9;
  *(_WORD *)(a1 + 16) = 256;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = **(void **)(a1 + 64);

  return a1;
}

void sub_1B03F2338(_Unwind_Exception *a1)
{
  uint64_t v5 = (std::__shared_weak_count *)v1[9];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  void *v1 = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v3);

  _Unwind_Resume(a1);
}

uint64_t ML3AlbumArtistImportItem::ML3AlbumArtistImportItem(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  *(_WORD *)(a1 + 16) = 256;
  *(unsigned char *)(a1 + 1_Block_object_dispose(&STACK[0x280], 8) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(void *)a1 = &unk_1F08C4438;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = 0;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  id v9 = v7;
  *(void *)(a1 + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v9;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = a4;
  *(_WORD *)(a1 + 16) = 256;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = **(void **)(a1 + 64);

  return a1;
}

void sub_1B03F27C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStoreArtworkInfoImageFormatJPEGSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary();
  uint64_t result = dlsym(v2, "ICStoreArtworkInfoImageFormatJPEG");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStoreArtworkInfoImageFormatJPEGSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *iTunesCloudLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!iTunesCloudLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __iTunesCloudLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E5FB5EE0;
    uint64_t v6 = 0;
    iTunesCloudLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  CFUUIDRef v0 = (void *)iTunesCloudLibraryCore_frameworkLibrary;
  if (!iTunesCloudLibraryCore_frameworkLibrary)
  {
    CFUUIDRef v0 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *iTunesCloudLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3StoreItemPlaylistData.m", 19, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __iTunesCloudLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  iTunesCloudLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1B03F2B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStoreArtworkInfoCropStyleSquareCenterCropSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary();
  uint64_t result = dlsym(v2, "ICStoreArtworkInfoCropStyleSquareCenterCrop");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStoreArtworkInfoCropStyleSquareCenterCropSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void sub_1B03F33E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void *__getICStorePlatformMetadataKindPlaylistSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindPlaylist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindPlaylistSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B03F40B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1B03F43F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03F44F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03F45BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

ML3DatabaseColumn *ML3DefineCol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return +[ML3DatabaseColumn columnWithName:a1 datatype:a2 constraints:a3 defaultValue:a4];
}

uint64_t MSPMediaSyncOperationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 72) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_52;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_54;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_54:
        *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x280], 8) = v19;
        goto LABEL_49;
      case 2u:
        BOOL v23 = objc_alloc_init(MIPMultiverseIdentifier);
        objc_storeStrong((id *)(a1 + 40), v23);
        if (!PBReaderPlaceMark() || (MIPMultiverseIdentifierReadFrom(v23, a2) & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_48;
      case 0xAu:
        BOOL v23 = objc_alloc_init(MIPArtist);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark() || (MIPArtistReadFrom(v23, a2) & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_48;
      case 0xBu:
        BOOL v23 = objc_alloc_init(MIPAlbum);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || (MIPAlbumReadFrom((uint64_t)v23, a2) & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_48;
      case 0xCu:
        BOOL v23 = objc_alloc_init(MIPGenre);
        objc_storeStrong((id *)(a1 + 24), v23);
        if (!PBReaderPlaceMark() || (MIPGenreReadFrom((uint64_t)v23, a2) & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_48;
      case 0xDu:
        BOOL v23 = objc_alloc_init(MIPSeries);
        objc_storeStrong((id *)(a1 + 64), v23);
        if (!PBReaderPlaceMark() || (MIPSeriesReadFrom((uint64_t)v23, a2) & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_48;
      case 0xEu:
        BOOL v23 = objc_alloc_init(MIPMediaItem);
        objc_storeStrong((id *)(a1 + 32), v23);
        if (!PBReaderPlaceMark() || (MIPMediaItemReadFrom((uint64_t)v23, a2) & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_48;
      case 0x14u:
        BOOL v23 = objc_alloc_init(MIPPlaylist);
        objc_storeStrong((id *)(a1 + 56), v23);
        if PBReaderPlaceMark() && (MIPPlaylistReadFrom((uint64_t)v23, a2))
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_49:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_56:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_49;
    }
  }
}

id ML3PersonDatabaseImportDataSource::generateVTableInsertionFromClause(ML3PersonDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  uint64_t v3 = [NSString stringWithFormat:@"%@ LEFT OUTER JOIN person ON %@.ROWID = person.person_pid", a3, a3];

  return v3;
}

__CFString *ML3PersonDatabaseImportDataSource::identityPropertyForSource(ML3PersonDatabaseImportDataSource *this)
{
  uint64_t v1 = @"cloud_id";
  return @"cloud_id";
}

uint64_t ML3PersonDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3PersonDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3PersonDatabaseImportDataSource::getImportPropertyGroupKey(ML3PersonDatabaseImportDataSource *this)
{
  return 22;
}

void ML3PersonDatabaseImportDataSource::~ML3PersonDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

void sub_1B03F7434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03F75C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03F76F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03F78E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03F799C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03F7B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03F7CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MIPMultiverseIdentifierReadFrom(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = &OBJC_IVAR___ML3ActiveTransaction__client;
  char v8 = &OBJC_IVAR___ML3ActiveTransaction__client;
  unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
  unint64_t v10 = &OBJC_IVAR___ML3ActiveTransaction__client;
  while (1)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      unint64_t v15 = *(void *)(a2 + v14);
      if (v15 == -1 || v15 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v16 = *(unsigned char *)(*(void *)(a2 + *v9) + v15);
      *(void *)(a2 + v14) = v15 + 1;
      v13 |= (unint64_t)(v16 & 0x7F) << v11;
      if ((v16 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v17 = v12++ >= 9;
      if (v17)
      {
        unint64_t v13 = 0;
        int v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v18 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    unint64_t v20 = v13 >> 3;
    if ((int)(v13 >> 3) > 29) {
      break;
    }
    if (v20 == 1)
    {
      char v49 = 0;
      unsigned int v50 = 0;
      uint64_t v51 = 0;
      a1[v7[424]] |= 0x10u;
      while (1)
      {
        uint64_t v52 = *v3;
        unint64_t v53 = *(void *)(a2 + v52);
        if (v53 == -1 || v53 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v54 = *(unsigned char *)(*(void *)(a2 + *v9) + v53);
        *(void *)(a2 + v52) = v53 + 1;
        v51 |= (unint64_t)(v54 & 0x7F) << v49;
        if ((v54 & 0x80) == 0) {
          goto LABEL_93;
        }
        v49 += 7;
        BOOL v17 = v50++ >= 9;
        if (v17)
        {
          LODWORD(v51) = 0;
          goto LABEL_95;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_93:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v51) = 0;
      }
LABEL_95:
      uint64_t v62 = v8[425];
    }
    else
    {
      if (v20 != 2)
      {
        if (v20 == 3)
        {
          uint64_t v27 = PBReaderReadString();
          uint64_t v28 = 72;
LABEL_58:
          float v48 = *(void **)&a1[v28];
          *(void *)&a1[v28] = v27;
        }
        else
        {
LABEL_73:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        goto LABEL_101;
      }
      char v55 = 0;
      unsigned int v56 = 0;
      uint64_t v51 = 0;
      a1[v7[424]] |= 0x20u;
      while (1)
      {
        uint64_t v57 = *v3;
        unint64_t v58 = *(void *)(a2 + v57);
        if (v58 == -1 || v58 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v59 = *(unsigned char *)(*(void *)(a2 + *v9) + v58);
        *(void *)(a2 + v57) = v58 + 1;
        v51 |= (unint64_t)(v59 & 0x7F) << v55;
        if ((v59 & 0x80) == 0) {
          goto LABEL_97;
        }
        v55 += 7;
        BOOL v17 = v56++ >= 9;
        if (v17)
        {
          LODWORD(v51) = 0;
          goto LABEL_99;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_97:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v51) = 0;
      }
LABEL_99:
      uint64_t v62 = v10[426];
    }
    *(_DWORD *)&a1[v62] = v51;
LABEL_101:
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
  }
  switch((int)v20)
  {
    case 30:
      char v21 = 0;
      unsigned int v22 = 0;
      uint64_t v23 = 0;
      a1[v7[424]] |= 1u;
      while (2)
      {
        uint64_t v24 = *v3;
        unint64_t v25 = *(void *)(a2 + v24);
        if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
        {
          *(unsigned char *)(a2 + *v5) = 1;
        }
        else
        {
          char v26 = *(unsigned char *)(*(void *)(a2 + *v9) + v25);
          *(void *)(a2 + v24) = v25 + 1;
          v23 |= (unint64_t)(v26 & 0x7F) << v21;
          if (v26 < 0)
          {
            v21 += 7;
            BOOL v17 = v22++ >= 9;
            if (v17)
            {
              uint64_t v23 = 0;
              goto LABEL_78;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v23 = 0;
      }
LABEL_78:
      uint64_t v61 = 8;
      goto LABEL_91;
    case 31:
      char v33 = 0;
      unsigned int v34 = 0;
      uint64_t v23 = 0;
      a1[v7[424]] |= 8u;
      while (2)
      {
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
        {
          *(unsigned char *)(a2 + *v5) = 1;
        }
        else
        {
          char v37 = *(unsigned char *)(*(void *)(a2 + *v9) + v36);
          *(void *)(a2 + v35) = v36 + 1;
          v23 |= (unint64_t)(v37 & 0x7F) << v33;
          if (v37 < 0)
          {
            v33 += 7;
            BOOL v17 = v34++ >= 9;
            if (v17)
            {
              uint64_t v23 = 0;
              goto LABEL_82;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v23 = 0;
      }
LABEL_82:
      uint64_t v61 = 32;
      goto LABEL_91;
    case 32:
      char v38 = 0;
      unsigned int v39 = 0;
      uint64_t v23 = 0;
      a1[v7[424]] |= 4u;
      while (2)
      {
        uint64_t v40 = *v3;
        unint64_t v41 = *(void *)(a2 + v40);
        if (v41 == -1 || v41 >= *(void *)(a2 + *v4))
        {
          *(unsigned char *)(a2 + *v5) = 1;
        }
        else
        {
          char v42 = *(unsigned char *)(*(void *)(a2 + *v9) + v41);
          *(void *)(a2 + v4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v41 + 1;
          v23 |= (unint64_t)(v42 & 0x7F) << v38;
          if (v42 < 0)
          {
            v38 += 7;
            BOOL v17 = v39++ >= 9;
            if (v17)
            {
              uint64_t v23 = 0;
              goto LABEL_86;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v23 = 0;
      }
LABEL_86:
      uint64_t v61 = 24;
      goto LABEL_91;
    case 33:
      char v43 = 0;
      unsigned int v44 = 0;
      uint64_t v23 = 0;
      a1[v7[424]] |= 2u;
      while (2)
      {
        uint64_t v45 = *v3;
        unint64_t v46 = *(void *)(a2 + v45);
        if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
        {
          *(unsigned char *)(a2 + *v5) = 1;
        }
        else
        {
          char v47 = *(unsigned char *)(*(void *)(a2 + *v9) + v46);
          *(void *)(a2 + v45) = v46 + 1;
          v23 |= (unint64_t)(v47 & 0x7F) << v43;
          if (v47 < 0)
          {
            v43 += 7;
            BOOL v17 = v44++ >= 9;
            if (v17)
            {
              uint64_t v23 = 0;
              goto LABEL_90;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v23 = 0;
      }
LABEL_90:
      uint64_t v61 = 16;
LABEL_91:
      *(void *)&a1[v61] = v23;
      goto LABEL_101;
    case 34:
      uint64_t v27 = PBReaderReadString();
      uint64_t v28 = 48;
      goto LABEL_58;
    case 35:
      uint64_t v27 = PBReaderReadString();
      uint64_t v28 = 40;
      goto LABEL_58;
    default:
      if (v20 != 50) {
        goto LABEL_73;
      }
      char v29 = v7;
      uint64_t v30 = v10;
      uint64_t v31 = v8;
      uint64_t v32 = objc_alloc_init(MIPLibraryIdentifier);
      [a1 addLibraryIdentifiers:v32];
      if PBReaderPlaceMark() && (MIPLibraryIdentifierReadFrom((uint64_t)v32, a2))
      {
        PBReaderRecallMark();

        char v8 = v31;
        unint64_t v10 = v30;
        uint64_t v7 = v29;
        goto LABEL_101;
      }

      return 0;
  }
}

void sub_1B03FABF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  long long v5 = *(void **)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2) {
            v7 %= a2;
          }
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1B03FAE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__17073(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1B03FAFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03FB09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03FB334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)va);
  BOOL v17 = *(void **)(v15 - 104);
  if (v17)
  {
    *(void *)(v15 - 96) = v17;
    operator delete(v17);
  }

  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = a2;
  void v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v12 = *v20;
LABEL_38:
    *unint64_t v20 = v12;
    goto LABEL_39;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1B03FB748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B03FBE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1B03FC0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03FC28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03FC488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03FC67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03FC848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03FCC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  _Unwind_Resume(a1);
}

void sub_1B03FCD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03FCDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03FCE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B03FD014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B03FD18C(_Unwind_Exception *a1)
{
  long long v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t ML3ItemPlaybackDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemPlaybackDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ItemPlaybackDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemPlaybackDatabaseImportDataSource *this)
{
  return 3;
}

void ML3ItemPlaybackDatabaseImportDataSource::~ML3ItemPlaybackDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

void sub_1B03FDD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17401(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__17402(uint64_t a1)
{
}

void sub_1B03FE04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B03FF708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStoreArtworkInfoImageFormatJPEGSymbolLoc_block_invoke_17692(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  __n128 result = dlsym(v2, "ICStoreArtworkInfoImageFormatJPEG");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStoreArtworkInfoImageFormatJPEGSymbolLoc_ptr_17691 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *iTunesCloudLibrary_17693()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!iTunesCloudLibraryCore_frameworkLibrary_17703)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __iTunesCloudLibraryCore_block_invoke_17704;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E5FB61B8;
    uint64_t v6 = 0;
    iTunesCloudLibraryCore_frameworkLibrary_17703 = _sl_dlopen();
  }
  CFUUIDRef v0 = (void *)iTunesCloudLibraryCore_frameworkLibrary_17703;
  if (!iTunesCloudLibraryCore_frameworkLibrary_17703)
  {
    CFUUIDRef v0 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"void *iTunesCloudLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3StoreItemTrackData.m", 23, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __iTunesCloudLibraryCore_block_invoke_17704()
{
  uint64_t result = _sl_dlopen();
  iTunesCloudLibraryCore_frameworkLibrary_17703 = result;
  return result;
}

void sub_1B03FFAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStoreArtworkInfoCropStyleSquareCenterCropSymbolLoc_block_invoke_17709(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStoreArtworkInfoCropStyleSquareCenterCrop");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStoreArtworkInfoCropStyleSquareCenterCropSymbolLoc_ptr_17708 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
  return result;
}

void sub_1B03FFCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStoreArtworkInfoCropStyleBoundedBoxSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStoreArtworkInfoCropStyleBoundedBox");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStoreArtworkInfoCropStyleBoundedBoxSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B03FFE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStorePlatformMetadataKindMovieSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindMovie");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindMovieSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B0400050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStorePlatformMetadataKindTVEpisodeSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindTVEpisode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindTVEpisodeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B040027C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStorePlatformMetadataKindUploadedVideoSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindUploadedVideo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindUploadedVideoSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B0400450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStorePlatformMetadataKindUploadedAudioSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindUploadedAudio");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindUploadedAudioSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B040067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStorePlatformMetadataKindMusicVideoSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindMusicVideo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindMusicVideoSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B0400850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStorePlatformMetadataKindSongSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindSong");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindSongSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B04012E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void *__getICStorePlatformMetadataKindAlbumSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindAlbum");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindAlbumSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getICStorePlatformMetadataKindArtist()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  CFUUIDRef v0 = (void **)getICStorePlatformMetadataKindArtistSymbolLoc_ptr;
  uint64_t v9 = getICStorePlatformMetadataKindArtistSymbolLoc_ptr;
  if (!getICStorePlatformMetadataKindArtistSymbolLoc_ptr)
  {
    uint64_t v1 = iTunesCloudLibrary_17693();
    void v7[3] = (uint64_t)dlsym(v1, "ICStorePlatformMetadataKindArtist");
    getICStorePlatformMetadataKindArtistSymbolLoc_ptr = v7[3];
    CFUUIDRef v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    int8x8_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    unint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getICStorePlatformMetadataKindArtist(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3StoreItemTrackData.m", 40, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1B04014B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getICStorePlatformMetadataKindPlaylistSymbolLoc_block_invoke_17721(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindPlaylist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindPlaylistSymbolLoc_ptr_17720 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getICStorePlatformMetadataKindTVSeasonSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindTVSeason");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindTVSeasonSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getICStorePlatformMetadataClass_block_invoke(uint64_t a1)
{
  iTunesCloudLibrary_17693();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ICStorePlatformMetadata");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getICStorePlatformMetadataClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    int8x8_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getICStorePlatformMetadataClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3StoreItemTrackData.m", 24, @"Unable to find class %s", "ICStorePlatformMetadata");

    __break(1u);
  }
}

void *__getICStorePlatformMetadataKindArtistSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformMetadataKindArtist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformMetadataKindArtistSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B0401C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getICStoreArtworkInfoClass_block_invoke(uint64_t a1)
{
  iTunesCloudLibrary_17693();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ICStoreArtworkInfo");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getICStoreArtworkInfoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    int8x8_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getICStoreArtworkInfoClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3StoreItemTrackData.m", 28, @"Unable to find class %s", "ICStoreArtworkInfo");

    __break(1u);
  }
}

void sub_1B0403A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void *__getICStorePlatformAudioTraitSpatialSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformAudioTraitSpatial");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformAudioTraitSpatialSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getICStorePlatformAudioTraitLosslessSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformAudioTraitLossless");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformAudioTraitLosslessSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getICStorePlatformAudioTraitHiResLosslessSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformAudioTraitHiResLossless");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformAudioTraitHiResLosslessSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getICStorePlatformAudioTraitLossyStereoSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformAudioTraitLossyStereo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformAudioTraitLossyStereoSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getICStorePlatformAudioTraitAtmosSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformAudioTraitAtmos");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformAudioTraitAtmosSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getICStorePlatformAudioTraitSurroundSymbolLoc_block_invoke(uint64_t a1)
{
  int8x8_t v2 = iTunesCloudLibrary_17693();
  uint64_t result = dlsym(v2, "ICStorePlatformAudioTraitSurround");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getICStorePlatformAudioTraitSurroundSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B0404074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17934(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__17935(uint64_t a1)
{
}

void __getICStorePlatformRequestClass_block_invoke(uint64_t a1)
{
  iTunesCloudLibrary_17693();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ICStorePlatformRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getICStorePlatformRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    int8x8_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getICStorePlatformRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3StoreItemTrackData.m", 25, @"Unable to find class %s", "ICStorePlatformRequest");

    __break(1u);
  }
}

void __getICStoreRequestContextClass_block_invoke(uint64_t a1)
{
  iTunesCloudLibrary_17693();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ICStoreRequestContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getICStoreRequestContextClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    int8x8_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getICStoreRequestContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3StoreItemTrackData.m", 26, @"Unable to find class %s", "ICStoreRequestContext");

    __break(1u);
  }
}

void __getICUserIdentityClass_block_invoke(uint64_t a1)
{
  iTunesCloudLibrary_17693();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ICUserIdentity");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getICUserIdentityClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    int8x8_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getICUserIdentityClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3StoreItemTrackData.m", 27, @"Unable to find class %s", "ICUserIdentity");

    __break(1u);
  }
}

void sub_1B0404FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ML3StoreArtistImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3StoreArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7758;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3StoreArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B0405588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ML3StoreContainerImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3StoreContainerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7790;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3StoreContainerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B0406134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ML3StoreAlbumImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3StoreAlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C76E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3StoreAlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C76E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ML3StoreImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3StoreImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7640;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3StoreImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B0406AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  ML3ImportSession::~ML3ImportSession((ML3ImportSession *)va);
  _Unwind_Resume(a1);
}

void sub_1B0406DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0406EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0407D0C(_Unwind_Exception *a1)
{
}

void sub_1B0409704(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

id ML3GetStringForKind(uint64_t a1)
{
  if (_ML3InitializeKinds_onceToken != -1) {
    dispatch_once(&_ML3InitializeKinds_onceToken, &__block_literal_global_18232);
  }
  int8x8_t v2 = (void *)__kindsForStrings;
  id v3 = [NSNumber numberWithLongLong:a1];
  unint64_t v4 = [v2 allKeysForObject:v3];
  long long v5 = [v4 firstObject];

  return v5;
}

id ML3GetOldStringForKind(uint64_t a1)
{
  if (_ML3InitializeKinds_onceToken != -1) {
    dispatch_once(&_ML3InitializeKinds_onceToken, &__block_literal_global_18232);
  }
  int8x8_t v2 = (void *)__kindsForOldStrings;
  id v3 = [NSNumber numberWithLongLong:a1];
  unint64_t v4 = [v2 allKeysForObject:v3];
  long long v5 = [v4 firstObject];

  return v5;
}

uint64_t ML3KindForString(void *a1)
{
  id v1 = a1;
  if (_ML3InitializeKinds_onceToken != -1) {
    dispatch_once(&_ML3InitializeKinds_onceToken, &__block_literal_global_18232);
  }
  int8x8_t v2 = [(id)__kindsForStrings objectForKey:v1];
  int v3 = [v2 intValue];
  if (!v3)
  {
    unint64_t v4 = [(id)__kindsForOldStrings objectForKey:v1];
    int v3 = [v4 intValue];
  }
  return v3;
}

id ML3KindsPassingTest(void *a1)
{
  id v1 = a1;
  if (_ML3InitializeKinds_onceToken != -1) {
    dispatch_once(&_ML3InitializeKinds_onceToken, &__block_literal_global_18232);
  }
  int8x8_t v2 = [MEMORY[0x1E4F1CA80] set];
  int v3 = (void *)__kindsForStrings;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __ML3KindsPassingTest_block_invoke;
  void v15[3] = &unk_1E5FB62A0;
  id v4 = v1;
  id v17 = v4;
  id v5 = v2;
  id v16 = v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v15];
  uint64_t v6 = (void *)__kindsForOldStrings;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __ML3KindsPassingTest_block_invoke_2;
  void v12[3] = &unk_1E5FB62A0;
  id v14 = v4;
  id v7 = v5;
  id v13 = v7;
  id v8 = v4;
  [v6 enumerateKeysAndObjectsUsingBlock:v12];
  uint64_t v9 = v13;
  id v10 = v7;

  return v10;
}

void __ML3KindsPassingTest_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
    [*(id *)(a1 + 32) addObject:v4];
  }
}

void __ML3KindsPassingTest_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
    [*(id *)(a1 + 32) addObject:v4];
  }
}

uint64_t __Block_byref_object_copy__18761(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__18762(uint64_t a1)
{
}

void sub_1B040DAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B040E020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
}

void sub_1B040E6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose((const void *)(v17 - 176), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B040ED44()
{
}

void sub_1B040ED5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void sub_1B04103E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0410610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1B0410700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1B0410958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B0410A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B0410EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::string>,void *>>>::operator()[abi:ne180100](1, v17);
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t __Block_byref_object_copy__19143(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__19144(uint64_t a1)
{
}

void ML3SpotlightNameCacheTimer(void)
{
  CFUUIDRef v0 = (void *)__nameCache;
  if (__nameCache)
  {
    if (*(unsigned char *)(__nameCache + 48))
    {
      __nameCache = 0;
    }
    else
    {
      *(unsigned char *)(__nameCache + 4_Block_object_dispose(&STACK[0x210], 8) = 1;
      dispatch_time_t v1 = dispatch_time(0, 20000000000);
      int8x8_t v2 = __nameCacheAccessQueue;
      dispatch_after(v1, v2, &__block_literal_global_109);
    }
  }
}

uint64_t ___ZL22ML3NameCacheInitializev_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.ml.SpotlightNameCache", 0);
  dispatch_time_t v1 = (void *)__nameCacheLoadingQueue;
  __nameCacheLoadingQueue = (uint64_t)v0;

  __nameCacheAccessQueue = (uint64_t)dispatch_queue_create("com.apple.ml.SpotlightNameCacheAccess", 0);

  return MEMORY[0x1F41817F8]();
}

void sub_1B0411598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B0411700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B0411988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  operator delete(v10);

  _Unwind_Resume(a1);
}

void ML3SpotlightMatchingNameCacheTimer(ML3SpotlightMatchingNameCache *a1)
{
  dispatch_time_t v1 = a1;
  if (!v1)
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    id v7 = [NSString stringWithUTF8String:"void ML3SpotlightMatchingNameCacheTimer(ML3SpotlightMatchingNameCache *__strong)"];
    [v6 handleFailureInFunction:v7 file:@"ML3SpotlightQuery.mm" lineNumber:259 description:@"invalid parameter"];
  }
  if (v1->_idle)
  {
    int8x8_t v2 = __nameCacheAccessQueue;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL34ML3SpotlightMatchingNameCacheTimerP29ML3SpotlightMatchingNameCache_block_invoke;
    block[3] = &unk_1E5FB8298;
    int v3 = (id *)&v11;
    unint64_t v11 = v1;
    dispatch_async(v2, block);
  }
  else
  {
    if ((ML3SpotlightMatchingNameCache *)__matchingNameCache != v1) {
      goto LABEL_7;
    }
    v1->_idle = 1;
    dispatch_time_t v4 = dispatch_time(0, 20000000000);
    id v5 = __nameCacheAccessQueue;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = ___ZL34ML3SpotlightMatchingNameCacheTimerP29ML3SpotlightMatchingNameCache_block_invoke_2;
    void v8[3] = &unk_1E5FB8298;
    int v3 = (id *)&v9;
    uint64_t v9 = v1;
    dispatch_after(v4, v5, v8);
  }

LABEL_7:
}

void sub_1B0411D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL34ML3SpotlightMatchingNameCacheTimerP29ML3SpotlightMatchingNameCache_block_invoke(uint64_t a1)
{
  dispatch_time_t v1 = *(void **)(a1 + 32);
  if (v1 == (void *)__matchingNameCache)
  {
    __matchingNameCache = 0;
  }
}

uint64_t ___ZL34ML3SpotlightMatchingNameCacheTimerP29ML3SpotlightMatchingNameCache_block_invoke_2(uint64_t a1)
{
  return ML3SpotlightMatchingNameCacheTimer(*(ML3SpotlightMatchingNameCache **)(a1 + 32));
}

void sub_1B041208C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B04121B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B041223C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0412374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B0412460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ML3SpotlightMatch(sqlite3_context *a1, int a2, uint64_t a3)
{
  uint64_t v13 = 0;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000;
  int v16 = 0;
  if (a2 < 1)
  {
    int v6 = 0;
  }
  else
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    id v8 = __ML3SpotlightMatch_block_invoke;
    uint64_t v9 = &unk_1E5FB64D8;
    int v12 = a2;
    id v10 = &v13;
    uint64_t v11 = a3;
    dispatch_time_t v4 = v7;
    uint64_t v18 = 0;
    uint64_t v19 = &v18;
    uint64_t v20 = 0x3032000000;
    unint64_t v21 = __Block_byref_object_copy__19143;
    unsigned int v22 = __Block_byref_object_dispose__19144;
    id v23 = 0;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL45ML3SpotlightMatchingNamesCacheAccessWithBlockU13block_pointerFvRNSt3__113unordered_setIxNS_4hashIxEENS_8equal_toIxEENS_9allocatorIxEEEEE_block_invoke;
    block[3] = &unk_1E5FB7330;
    void block[4] = &v18;
    dispatch_sync((dispatch_queue_t)__nameCacheAccessQueue, block);
    uint64_t v5 = v19[5];
    if (v5) {
      v8(v4, (void *)(v5 + 8));
    }
    _Block_object_dispose(&v18, 8);

    int v6 = *((_DWORD *)v14 + 6);
  }
  sqlite3_result_int(a1, v6);
  _Block_object_dispose(&v13, 8);
}

void sub_1B0412614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose((const void *)(v9 - 96), 8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

int *__ML3SpotlightMatch_block_invoke(int *result, void *a2)
{
  if (result[12] >= 1)
  {
    int v3 = result;
    uint64_t v4 = 0;
    while (1)
    {
      sqlite3_int64 v5 = sqlite3_value_int64(*(sqlite3_value **)(*((void *)v3 + 5) + 8 * v4));
      uint64_t result = (int *)std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(a2, v5);
      uint64_t v6 = v3[12];
      if (result) {
        break;
      }
      if (++v4 >= v6) {
        return result;
      }
    }
    *(_DWORD *)(*(void *)(*((void *)v3 + 4) + 8) + 24) = v6 - v4;
  }
  return result;
}

void ___ZL45ML3SpotlightMatchingNamesCacheAccessWithBlockU13block_pointerFvRNSt3__113unordered_setIxNS_4hashIxEENS_8equal_toIxEENS_9allocatorIxEEEEE_block_invoke(uint64_t a1)
{
}

id ML3SpotlightMatchPredicateNameForID(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x3032000000;
  id v14 = __Block_byref_object_copy__19143;
  uint64_t v15 = __Block_byref_object_dispose__19144;
  id v16 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  id v7 = __ML3SpotlightMatchPredicateNameForID_block_invoke;
  id v8 = &unk_1E5FB6500;
  uint64_t v9 = &v11;
  uint64_t v10 = a2;
  int8x8_t v2 = v6;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x3032000000;
  unint64_t v21 = __Block_byref_object_copy__19143;
  unsigned int v22 = __Block_byref_object_dispose__19144;
  id v23 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZL35ML3SpotlightNameCacheNamesAccessMapU13block_pointerFvRNSt3__113unordered_mapIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIxEENS_8equal_toIxEENS4_INS_4pairIKxS6_EEEEEEE_block_invoke;
  block[3] = &unk_1E5FB7330;
  void block[4] = &v18;
  dispatch_sync((dispatch_queue_t)__nameCacheAccessQueue, block);
  uint64_t v3 = v19[5];
  if (v3) {
    v7((uint64_t)v2, (void *)(v3 + 8));
  }
  _Block_object_dispose(&v18, 8);

  id v4 = (id)v12[5];
  _Block_object_dispose(&v11, 8);

  return v4;
}

void sub_1B0412888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose((const void *)(v22 - 80), 8);

  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

void __ML3SpotlightMatchPredicateNameForID_block_invoke(uint64_t a1, void *a2)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      if (v4 >= *(void *)&v3) {
        unint64_t v6 = v4 % *(void *)&v3;
      }
    }
    else
    {
      unint64_t v6 = (*(void *)&v3 - 1) & v4;
    }
    id v7 = *(uint64_t ***)(*a2 + 8 * v6);
    if (v7)
    {
      for (uint64_t i = *v7; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v9 = i[1];
        if (v9 == v4)
        {
          if (i[2] == v4)
          {
            if (*((char *)i + 47) < 0) {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[3], i[4]);
            }
            else {
              std::string __p = *(std::string *)((unsigned char *)i + 1);
            }
            goto LABEL_18;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= *(void *)&v3) {
              v9 %= *(void *)&v3;
            }
          }
          else
          {
            v9 &= *(void *)&v3 - 1;
          }
          if (v9 != v6) {
            break;
          }
        }
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, 0);
LABEL_18:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v11 = objc_msgSend(NSString, "stringWithCString:encoding:", p_p, 4, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v11;

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B0412A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL35ML3SpotlightNameCacheNamesAccessMapU13block_pointerFvRNSt3__113unordered_mapIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIxEENS_8equal_toIxEENS4_INS_4pairIKxS6_EEEEEEE_block_invoke(uint64_t a1)
{
}

void sub_1B0412E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B04140B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19394(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__19395(uint64_t a1)
{
}

void -[MLMediaLibraryResourcesServiceServer _blockExecutionForOnGoingAccountChangeIfNeeded](MLMediaLibraryResourcesServiceServer *self, SEL a2)
{
  int8x8_t v2 = [(MLMediaLibraryResourcesServiceServer *)self accountChangeSemaphore];
  dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_1B04146CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location,id a28)
{
  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_1B0414CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3ProtocolMediaTypeForMLMediaType(int a1)
{
  if (a1 > 255)
  {
    if (a1 > 2047)
    {
      switch(a1)
      {
        case 0x800:
          return 2;
        case 0x1000:
          return 11;
        case 0x2000:
          return 12;
      }
    }
    else
    {
      switch(a1)
      {
        case 256:
          return 6;
        case 512:
          return 3;
        case 1024:
          return 7;
      }
    }
    goto LABEL_26;
  }
  if (a1 > 15)
  {
    switch(a1)
    {
      case 16:
        return 5;
      case 32:
        return 10;
      case 64:
        return 9;
    }
LABEL_26:
    if ((a1 & 4) != 0) {
      unsigned int v2 = 4;
    }
    else {
      unsigned int v2 = (a1 >> 3) & 1;
    }
    if ((a1 & 0x400) != 0) {
      return 7;
    }
    else {
      return v2;
    }
  }
  uint64_t v1 = 13;
  switch(a1)
  {
    case 1:
      return v1;
    case 2:
      uint64_t v1 = 8;
      break;
    case 4:
      uint64_t v1 = 4;
      break;
    case 8:
      uint64_t v1 = 1;
      break;
    default:
      goto LABEL_26;
  }
  return v1;
}

uint64_t ML3MLMediaTypeForProtocolMediaType(int a1)
{
  if ((a1 - 1) > 0xC) {
    return 0;
  }
  else {
    return dword_1B04DD33C[a1 - 1];
  }
}

uint64_t MLFrameworkBundle()
{
  dispatch_queue_t v0 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v1 = objc_opt_class();

  return [v0 bundleForClass:v1];
}

void sub_1B041C03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  *unint64_t v9 = v10;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v11);
  operator delete(v12);
  MEMORY[0x1B3E93610](v9, 0x10B3C40FB617A5FLL);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3MatchDeleteAlbumImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteAlbumImportItem>,std::allocator<ML3MatchDeleteAlbumImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_29ML3MatchDeleteAlbumImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3MatchDeleteAlbumImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteAlbumImportItem>,std::allocator<ML3MatchDeleteAlbumImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3MatchDeleteAlbumImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteAlbumImportItem>,std::allocator<ML3MatchDeleteAlbumImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B041C2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  *unint64_t v9 = v10;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v11);
  operator delete(v12);
  MEMORY[0x1B3E93610](v9, 0x10B3C40FB617A5FLL);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3MatchDeleteArtistImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteArtistImportItem>,std::allocator<ML3MatchDeleteArtistImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_30ML3MatchDeleteArtistImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3MatchDeleteArtistImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteArtistImportItem>,std::allocator<ML3MatchDeleteArtistImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3MatchDeleteArtistImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteArtistImportItem>,std::allocator<ML3MatchDeleteArtistImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B041C584(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);

  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3MatchArtistImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchArtistImportItem>,std::allocator<ML3MatchArtistImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_24ML3MatchArtistImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3MatchArtistImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchArtistImportItem>,std::allocator<ML3MatchArtistImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3MatchArtistImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchArtistImportItem>,std::allocator<ML3MatchArtistImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B041C818(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);

  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3MatchAlbumImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchAlbumImportItem>,std::allocator<ML3MatchAlbumImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_23ML3MatchAlbumImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3MatchAlbumImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchAlbumImportItem>,std::allocator<ML3MatchAlbumImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3MatchAlbumImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchAlbumImportItem>,std::allocator<ML3MatchAlbumImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B041CB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  *(void *)(v22 - 56) = &a10;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 56));
  if (v21)
  {
    operator delete(v21);
    if (!v19) {
      goto LABEL_3;
    }
  }
  else if (!v19)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
LABEL_3:
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3MatchContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchContainerImportItem>,std::allocator<ML3MatchContainerImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_27ML3MatchContainerImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3MatchContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchContainerImportItem>,std::allocator<ML3MatchContainerImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3MatchContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchContainerImportItem>,std::allocator<ML3MatchContainerImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B041CE18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3MatchImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchImportItem>,std::allocator<ML3MatchImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_18ML3MatchImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3MatchImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchImportItem>,std::allocator<ML3MatchImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3MatchImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchImportItem>,std::allocator<ML3MatchImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void sub_1B041CFF0(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B041D2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B041D3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ML3SetCloudIDImportItem::isValid(ML3SetCloudIDImportItem *this)
{
  return *((void *)this + 1) && *((void *)this + 9) > 0;
}

void ML3SetCloudIDImportItem::~ML3SetCloudIDImportItem(id *this)
{
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3SetCloudIDTrackImportItem::onlyRequiresItemStoreDataSource(ML3SetCloudIDTrackImportItem *this)
{
  return 1;
}

id ML3SetCloudIDTrackImportItem::getDeduplicationPredicates(ML3SetCloudIDTrackImportItem *this)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = +[ML3ComparisonPredicate predicateWithProperty:@"ROWID" equalToInt64:*((void *)this + 1)];
  v4[0] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1];

  return v2;
}

void sub_1B041D578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3SetCloudIDTrackImportItem::getDescription(ML3SetCloudIDTrackImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<ML3SetCloudIDTrackImportItem ", 30);
  *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (void *)std::ostream::operator<<();
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" persistentID=", 14);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + _Block_object_dispose(&STACK[0x210], 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  int8x8_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", cloudID=", 10);
  unint64_t v4 = (void *)std::ostream::operator<<();
  char v9 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v8);
}

void sub_1B041D778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ML3SetCloudIDTrackImportItem::hasValue(ML3SetCloudIDTrackImportItem *this, int a2)
{
  return a2 == 100663305;
}

uint64_t ML3SetCloudIDTrackImportItem::getIntegerValue(ML3SetCloudIDTrackImportItem *this, int a2)
{
  if (a2 == 100663305) {
    return *((void *)this + 9);
  }
  else {
    return 0;
  }
}

void ML3SetCloudIDTrackImportItem::~ML3SetCloudIDTrackImportItem(id *this)
{
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3SetCloudIDArtistImportItem::getDeduplicationPredicates(ML3SetCloudIDArtistImportItem *this)
{
  return MEMORY[0x1E4F1CBF0];
}

uint64_t ML3SetCloudIDArtistImportItem::getDescription(ML3SetCloudIDArtistImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"<ML3SetCloudIDArtistImportItem ", 31);
  *(_DWORD *)((char *)&v3[1] + *(void *)(v3[0] - 24)) = *(_DWORD *)((unsigned char *)&v3[1] + *(void *)(v3[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (void *)std::ostream::operator<<();
  char v6 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v5);
}

void sub_1B041DA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ML3SetCloudIDArtistImportItem::hasValue(ML3SetCloudIDArtistImportItem *this)
{
  return 0;
}

uint64_t ML3SetCloudIDArtistImportItem::getIntegerValue(ML3SetCloudIDArtistImportItem *this)
{
  return 0;
}

void ML3SetCloudIDArtistImportItem::~ML3SetCloudIDArtistImportItem(id *this)
{
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3SetCloudIDAlbumImportItem::getDeduplicationPredicates(ML3SetCloudIDAlbumImportItem *this)
{
  return MEMORY[0x1E4F1CBF0];
}

uint64_t ML3SetCloudIDAlbumImportItem::getDescription(ML3SetCloudIDAlbumImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"<ML3SetCloudIDAlbumImportItem ", 30);
  *(_DWORD *)((char *)&v3[1] + *(void *)(v3[0] - 24)) = *(_DWORD *)((unsigned char *)&v3[1] + *(void *)(v3[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (void *)std::ostream::operator<<();
  char v6 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v5);
}

void sub_1B041DC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ML3SetCloudIDAlbumImportItem::hasValue(ML3SetCloudIDAlbumImportItem *this)
{
  return 0;
}

uint64_t ML3SetCloudIDAlbumImportItem::getIntegerValue(ML3SetCloudIDAlbumImportItem *this)
{
  return 0;
}

void ML3SetCloudIDAlbumImportItem::~ML3SetCloudIDAlbumImportItem(id *this)
{
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

id ML3SetCloudIDContainerImportItem::getDeduplicationPredicates(ML3SetCloudIDContainerImportItem *this)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = +[ML3ComparisonPredicate predicateWithProperty:@"container_pid" equalToInt64:*((void *)this + 1)];
  v4[0] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1];

  return v2;
}

void sub_1B041DE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3SetCloudIDContainerImportItem::getDescription(ML3SetCloudIDContainerImportItem *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<ML3SetCloudIDContainerImportItem ", 34);
  *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (void *)std::ostream::operator<<();
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" persistentID=", 14);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + _Block_object_dispose(&STACK[0x210], 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  int8x8_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", cloudID=", 10);
  char v4 = (void *)std::ostream::operator<<();
  char v9 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3E935B0](&v8);
}

void sub_1B041E024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ML3SetCloudIDContainerImportItem::hasValue(ML3SetCloudIDContainerImportItem *this, int a2)
{
  return a2 == 184549408;
}

uint64_t ML3SetCloudIDContainerImportItem::getIntegerValue(ML3SetCloudIDContainerImportItem *this, int a2)
{
  if (a2 == 184549408) {
    return *((void *)this + 9);
  }
  else {
    return 0;
  }
}

void ML3SetCloudIDContainerImportItem::~ML3SetCloudIDContainerImportItem(id *this)
{
  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));

  JUMPOUT(0x1B3E93610);
}

{

  *this = off_1F08C3148;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

void ML3SetCloudIDImportItem::ML3SetCloudIDImportItem(ML3SetCloudIDImportItem *this, NSDictionary *a2)
{
  int8x8_t v3 = a2;
  *((_WORD *)this + _Block_object_dispose(&STACK[0x210], 8) = 256;
  *((unsigned char *)this + 1_Block_object_dispose(&STACK[0x210], 8) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *(void *)this = &unk_1F08C4268;
  *((void *)this + 1) = 0;
  char v4 = v3;
  *((void *)this + _Block_object_dispose(&STACK[0x210], 8) = v4;
  *((unsigned char *)this + 17) = 0;
}

void sub_1B041E7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20278(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__20279(uint64_t a1)
{
}

void _ML3LogReplyError(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  uint64_t v11 = (objc_class *)NSString;
  id v12 = a2;
  uint64_t v13 = (void *)[[v11 alloc] initWithFormat:v12 arguments:&a9];

  id v14 = os_log_create("com.apple.amp.medialibrary", "Service");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138543618;
    id v16 = v13;
    __int16 v17 = 2114;
    id v18 = v10;
    _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "%{public}@ There was an error waiting for a reply from the media library service. %{public}@", buf, 0x16u);
  }
}

void sub_1B041ED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1B041F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 200), 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1B04210DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

__CFString *MLServiceLockReasonDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"No lock";
  }
  else {
    return off_1E5FB7198[a1 - 1];
  }
}

BOOL MLIsMediaLibraryDaemon()
{
  return __daemonProcessInfo != 0;
}

uint64_t ML3ChapterDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ChapterDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ChapterDatabaseImportDataSource::getImportPropertyGroupKey(ML3ChapterDatabaseImportDataSource *this)
{
  return 8;
}

void ML3ChapterDatabaseImportDataSource::~ML3ChapterDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

_DWORD *_MSV_XXH_XXH32_update(_DWORD *result, char *__src, size_t __n)
{
  if (__src)
  {
    int v3 = __n;
    char v4 = __src;
    uint64_t v5 = result;
    int v6 = result[1];
    unsigned int v7 = *result + __n;
    BOOL v9 = __n > 0xF || v7 > 0xF;
    void *result = v7;
    result[1] = v6 | v9;
    uint64_t v10 = result[10];
    if (v10 + __n <= 0xF)
    {
      uint64_t result = memcpy((char *)result + v10 + 24, __src, __n);
      LODWORD(v11) = v5[10] + v3;
LABEL_18:
      v5[10] = v11;
      return result;
    }
    id v12 = &__src[__n];
    if (v10)
    {
      uint64_t result = memcpy((char *)result + v10 + 24, __src, (16 - v10));
      HIDWORD(v13) = v5[2] - 2048144777 * v5[6];
      LODWORD(v13) = HIDWORD(v13);
      int v14 = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[3] - 2048144777 * v5[7];
      LODWORD(v13) = HIDWORD(v13);
      v5[2] = v14;
      v5[3] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[4] - 2048144777 * v5[8];
      LODWORD(v13) = HIDWORD(v13);
      void v5[4] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[5] - 2048144777 * v5[9];
      LODWORD(v13) = HIDWORD(v13);
      v5[5] = -1640531535 * (v13 >> 19);
      v4 += (16 - v5[10]);
      v5[10] = 0;
    }
    if (v4 <= v12 - 16)
    {
      int v15 = v5[2];
      int v16 = v5[3];
      int v17 = v5[4];
      int v18 = v5[5];
      do
      {
        HIDWORD(v19) = v15 - 2048144777 * *(_DWORD *)v4;
        LODWORD(v19) = HIDWORD(v19);
        int v15 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v16 - 2048144777 * *((_DWORD *)v4 + 1);
        LODWORD(v19) = HIDWORD(v19);
        int v16 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v17 - 2048144777 * *((_DWORD *)v4 + 2);
        LODWORD(v19) = HIDWORD(v19);
        int v17 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v18 - 2048144777 * *((_DWORD *)v4 + 3);
        LODWORD(v19) = HIDWORD(v19);
        int v18 = -1640531535 * (v19 >> 19);
        v4 += 16;
      }
      while (v4 <= v12 - 16);
      v5[2] = v15;
      v5[3] = v16;
      void v5[4] = v17;
      v5[5] = v18;
    }
    if (v4 < v12)
    {
      size_t v11 = v12 - v4;
      uint64_t result = memcpy(v5 + 6, v4, v11);
      goto LABEL_18;
    }
  }
  return result;
}

char *_MSV_XXH_XXH64_update(char *result, char *__src, size_t __n)
{
  if (__src)
  {
    int v3 = __n;
    char v4 = __src;
    uint64_t v5 = result;
    *(void *)result += __n;
    uint64_t v6 = *((unsigned int *)result + 18);
    if (v6 + __n <= 0x1F)
    {
      uint64_t result = (char *)memcpy(&result[v6 + 40], __src, __n);
      LODWORD(v7) = *((_DWORD *)v5 + 18) + v3;
LABEL_12:
      *((_DWORD *)v5 + 1_Block_object_dispose(&STACK[0x210], 8) = v7;
      return result;
    }
    uint64_t v8 = &__src[__n];
    if (v6)
    {
      uint64_t result = (char *)memcpy(&result[v6 + 40], __src, (32 - v6));
      uint64_t v9 = __ROR8__(*((void *)v5 + 2) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 6), 33);
      *((void *)v5 + 1) = 0x9E3779B185EBCA87
                          * __ROR8__(*((void *)v5 + 1) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 5), 33);
      *((void *)v5 + 2) = 0x9E3779B185EBCA87 * v9;
      unint64_t v10 = 0x9E3779B185EBCA87 * __ROR8__(*((void *)v5 + 4) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 8), 33);
      *((void *)v5 + 3) = 0x9E3779B185EBCA87
                          * __ROR8__(*((void *)v5 + 3) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 7), 33);
      *((void *)v5 + 4) = v10;
      v4 += (32 - *((_DWORD *)v5 + 18));
      *((_DWORD *)v5 + 1_Block_object_dispose(&STACK[0x210], 8) = 0;
    }
    if (v4 + 32 <= v8)
    {
      unint64_t v11 = *((void *)v5 + 1);
      unint64_t v12 = *((void *)v5 + 2);
      unint64_t v14 = *((void *)v5 + 3);
      unint64_t v13 = *((void *)v5 + 4);
      do
      {
        unint64_t v11 = 0x9E3779B185EBCA87 * __ROR8__(v11 - 0x3D4D51C2D82B14B1 * *(void *)v4, 33);
        unint64_t v12 = 0x9E3779B185EBCA87 * __ROR8__(v12 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 1), 33);
        unint64_t v14 = 0x9E3779B185EBCA87 * __ROR8__(v14 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 2), 33);
        unint64_t v13 = 0x9E3779B185EBCA87 * __ROR8__(v13 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 3), 33);
        v4 += 32;
      }
      while (v4 <= v8 - 32);
      *((void *)v5 + 1) = v11;
      *((void *)v5 + 2) = v12;
      *((void *)v5 + 3) = v14;
      *((void *)v5 + 4) = v13;
    }
    if (v4 < v8)
    {
      size_t v7 = v8 - v4;
      uint64_t result = (char *)memcpy(v5 + 40, v4, v7);
      goto LABEL_12;
    }
  }
  return result;
}

unint64_t _MSV_XXH_XXH64_digest(void *a1)
{
  if (*a1 < 0x20uLL) {
    uint64_t v1 = a1[3] + 0x27D4EB2F165667C5;
  }
  else {
    uint64_t v1 = 0x85EBCA77C2B2AE63
  }
       - 0x61C8864E7A143579
       * ((0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * ((0x85EBCA77C2B2AE63
           - 0x61C8864E7A143579
           * ((0x85EBCA77C2B2AE63
             - 0x61C8864E7A143579
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)));
  unint64_t v2 = v1 + *a1;
  int v3 = a1 + 5;
  unint64_t v4 = *a1 & 0x1FLL;
  if (v4 >= 8)
  {
    do
    {
      uint64_t v5 = *v3++;
      unint64_t v2 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v5, 33)) ^ v2, 37);
      v4 -= 8;
    }
    while (v4 > 7);
  }
  if (v4 >= 4)
  {
    unsigned int v6 = *(_DWORD *)v3;
    int v3 = (uint64_t *)((char *)v3 + 4);
    unint64_t v2 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v6) ^ v2, 41);
    v4 -= 4;
  }
  for (; v4; --v4)
  {
    unsigned int v7 = *(unsigned __int8 *)v3;
    int v3 = (uint64_t *)((char *)v3 + 1);
    unint64_t v2 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v7) ^ v2, 53);
  }
  unint64_t v8 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) >> 29));
  return v8 ^ HIDWORD(v8);
}

void sub_1B04250D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20630(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__20631(uint64_t a1)
{
}

void sub_1B04253AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0426D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1B04272C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getKVMediaItemBuilderClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_queue_t v0 = (void *)getKVMediaItemBuilderClass_softClass;
  uint64_t v7 = getKVMediaItemBuilderClass_softClass;
  if (!getKVMediaItemBuilderClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getKVMediaItemBuilderClass_block_invoke;
    v3[3] = &unk_1E5FB7330;
    v3[4] = &v4;
    __getKVMediaItemBuilderClass_block_invoke((uint64_t)v3);
    dispatch_queue_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1B04273B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _CreateKVItem(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v78[6] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v72 = a3;
  if (+[ML3Track revisionTrackingCode] == a5)
  {
    char v71 = v9;
    id v70 = v10;
    unint64_t v11 = [(ML3Entity *)[ML3Track alloc] initWithPersistentID:a4 inLibrary:v10];
    v78[0] = @"media_type";
    v78[1] = @"item_extra.title";
    void v78[2] = @"album_pid";
    v78[3] = @"album_artist_pid";
    v78[4] = @"item_artist_pid";
    v78[5] = @"genre_id";
    unint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v78 count:6];
    unint64_t v13 = [(ML3Entity *)v11 getValuesForProperties:v12];

    unint64_t v14 = [v13 objectForKeyedSubscript:@"item_extra.title"];
    int v15 = [v13 objectForKeyedSubscript:@"media_type"];
    __int16 v16 = [v15 unsignedIntValue];

    int v17 = [v13 objectForKeyedSubscript:@"album_pid"];
    int v18 = (void *)[v17 longLongValue];

    unint64_t v19 = [v13 objectForKeyedSubscript:@"album_artist_pid"];
    uint64_t v20 = (void *)[v19 longLongValue];

    unint64_t v21 = [v13 objectForKeyedSubscript:@"item_artist_pid"];
    uint64_t v22 = (void *)[v21 longLongValue];

    id v23 = [v13 objectForKeyedSubscript:@"genre_id"];
    uint64_t v24 = (void *)[v23 longLongValue];

    unint64_t v25 = [(ML3Entity *)v11 URL];
    char v26 = [v25 absoluteString];

    if (v18)
    {
      uint64_t v27 = +[ML3Entity URLForEntityWithPersistentID:v18 libraryUID:v72];
      int v18 = [v27 absoluteString];
    }
    if (v20)
    {
      uint64_t v28 = +[ML3Entity URLForEntityWithPersistentID:v20 libraryUID:v72];
      uint64_t v20 = [v28 absoluteString];
    }
    if (v22)
    {
      char v29 = +[ML3Entity URLForEntityWithPersistentID:v22 libraryUID:v72];
      uint64_t v22 = [v29 absoluteString];
    }
    if (v24)
    {
      uint64_t v30 = +[ML3Entity URLForEntityWithPersistentID:v24 libraryUID:v72];
      uint64_t v24 = [v30 absoluteString];
    }
    if ((v16 & 0x400) != 0)
    {
      uint64_t v42 = [v71 musicVideoItemWithName:v14 itemId:v26 albumArtistId:v20 songArtistId:v22 albumId:v18 genreId:v24];
    }
    else if ((v16 & 8) != 0)
    {
      uint64_t v42 = [v71 songItemWithName:v14 itemId:v26 albumArtistId:v20 songArtistId:v22 albumId:v18 genreId:v24];
    }
    else if ((v16 & 0x200) != 0)
    {
      uint64_t v42 = [v71 tvEpisodeItemWithName:v14 itemId:v26 showId:v22];
    }
    else if ((v16 & 0x800) != 0)
    {
      uint64_t v42 = [v71 movieItemWithName:v14 itemId:v26];
    }
    else
    {
      if ((v16 & 2) == 0)
      {
        uint64_t v31 = 0;
LABEL_51:

        id v10 = v70;
        id v9 = v71;
        goto LABEL_52;
      }
      uint64_t v42 = [v71 audioBookItemWithName:v14 itemId:v26 artistId:v22];
    }
    uint64_t v31 = (void *)v42;
    goto LABEL_51;
  }
  if (+[ML3Album revisionTrackingCode] == a5)
  {
    unint64_t v11 = [(ML3Entity *)[ML3Album alloc] initWithPersistentID:a4 inLibrary:v10];
    v77[0] = @"album";
    v77[1] = @"representative_item_pid";
    v77[2] = @"album_artist_pid";
    uint64_t v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:v77 count:3];
    unint64_t v13 = [(ML3Entity *)v11 getValuesForProperties:v32];

    unint64_t v14 = [v13 objectForKeyedSubscript:@"album"];
    char v33 = [v13 objectForKeyedSubscript:@"representative_item_pid"];
    uint64_t v34 = [v33 longLongValue];

    uint64_t v35 = [v13 objectForKeyedSubscript:@"album_artist_pid"];
    unint64_t v36 = (void *)[v35 longLongValue];

    if ([v14 length])
    {
      char v26 = [(ML3Entity *)[ML3Track alloc] initWithPersistentID:v34 inLibrary:v10];
      char v37 = [(ML3Entity *)v26 valueForProperty:@"media_type"];
      char v38 = [v37 unsignedIntValue];

      if ((v38 & 8) != 0)
      {
        unsigned int v39 = [(ML3Entity *)v11 URL];
        uint64_t v40 = [v39 absoluteString];

        if (v36)
        {
          unint64_t v41 = +[ML3Entity URLForEntityWithPersistentID:v36 libraryUID:v72];
          unint64_t v36 = [v41 absoluteString];
        }
        uint64_t v31 = [v9 albumItemWithName:v14 itemId:v40 albumArtistId:v36];

        goto LABEL_42;
      }
LABEL_26:
      uint64_t v31 = 0;
LABEL_52:

      goto LABEL_53;
    }
LABEL_39:
    uint64_t v31 = 0;
LABEL_53:

LABEL_54:
    goto LABEL_55;
  }
  if (+[ML3AlbumArtist revisionTrackingCode] == a5)
  {
    unint64_t v11 = [(ML3Entity *)[ML3AlbumArtist alloc] initWithPersistentID:a4 inLibrary:v10];
    v76[0] = @"album_artist";
    v76[1] = @"representative_item_pid";
    char v43 = [MEMORY[0x1E4F1C978] arrayWithObjects:v76 count:2];
    unint64_t v13 = [(ML3Entity *)v11 getValuesForProperties:v43];

    unint64_t v14 = [v13 objectForKeyedSubscript:@"album_artist"];
    unsigned int v44 = [v13 objectForKeyedSubscript:@"representative_item_pid"];
    uint64_t v45 = [v44 longLongValue];

    if (![v14 length]) {
      goto LABEL_39;
    }
    char v26 = [(ML3Entity *)[ML3Track alloc] initWithPersistentID:v45 inLibrary:v10];
    unint64_t v46 = [(ML3Entity *)v26 valueForProperty:@"media_type"];
    char v47 = [v46 unsignedIntValue];

    if ((v47 & 8) == 0) {
      goto LABEL_26;
    }
    uint64_t v62 = [(ML3Entity *)v11 URL];
    uint64_t v40 = [v62 absoluteString];

    uint64_t v61 = [v9 albumArtistItemWithName:v14 itemId:v40];
LABEL_41:
    uint64_t v31 = (void *)v61;
LABEL_42:

    goto LABEL_52;
  }
  if (+[ML3Artist revisionTrackingCode] == a5)
  {
    unint64_t v11 = [(ML3Entity *)[ML3Artist alloc] initWithPersistentID:a4 inLibrary:v10];
    v75[0] = @"item_artist";
    v75[1] = @"representative_item_pid";
    float v48 = [MEMORY[0x1E4F1C978] arrayWithObjects:v75 count:2];
    unint64_t v13 = [(ML3Entity *)v11 getValuesForProperties:v48];

    unint64_t v14 = [v13 objectForKeyedSubscript:@"item_artist"];
    char v49 = [v13 objectForKeyedSubscript:@"representative_item_pid"];
    uint64_t v50 = [v49 longLongValue];

    if (![v14 length]) {
      goto LABEL_39;
    }
    uint64_t v51 = [(ML3Entity *)v11 URL];
    char v26 = [v51 absoluteString];

    uint64_t v52 = [(ML3Entity *)[ML3Track alloc] initWithPersistentID:v50 inLibrary:v10];
    unint64_t v53 = [(ML3Entity *)v52 valueForProperty:@"media_type"];
    __int16 v54 = [v53 unsignedIntValue];

    if ((v54 & 8) != 0)
    {
      uint64_t v68 = [v9 songArtistItemWithName:v14 itemId:v26];
    }
    else if ((v54 & 0x200) != 0)
    {
      uint64_t v68 = [v9 tvShowItemWithName:v14 itemId:v26];
    }
    else
    {
      if ((v54 & 2) == 0)
      {
        uint64_t v31 = 0;
LABEL_62:

        goto LABEL_52;
      }
      uint64_t v68 = [v9 audioBookArtistItemWithName:v14 itemId:v26];
    }
    uint64_t v31 = (void *)v68;
    goto LABEL_62;
  }
  if (+[ML3Genre revisionTrackingCode] == a5)
  {
    unint64_t v11 = [(ML3Entity *)[ML3Genre alloc] initWithPersistentID:a4 inLibrary:v10];
    v74[0] = @"genre";
    v74[1] = @"representative_item_pid";
    char v55 = [MEMORY[0x1E4F1C978] arrayWithObjects:v74 count:2];
    unint64_t v13 = [(ML3Entity *)v11 getValuesForProperties:v55];

    unint64_t v14 = [v13 objectForKeyedSubscript:@"genre"];
    unsigned int v56 = [v13 objectForKeyedSubscript:@"representative_item_pid"];
    uint64_t v57 = [v56 longLongValue];

    if (![v14 length]) {
      goto LABEL_39;
    }
    char v26 = [(ML3Entity *)[ML3Track alloc] initWithPersistentID:v57 inLibrary:v10];
    unint64_t v58 = [(ML3Entity *)v26 valueForProperty:@"media_type"];
    char v59 = [v58 unsignedIntValue];

    if ((v59 & 8) == 0) {
      goto LABEL_26;
    }
    char v60 = [(ML3Entity *)v11 URL];
    uint64_t v40 = [v60 absoluteString];

    uint64_t v61 = [v9 genreItemWithName:v14 itemId:v40];
    goto LABEL_41;
  }
  if (+[ML3Container revisionTrackingCode] == a5)
  {
    unint64_t v11 = [(ML3Entity *)[ML3Container alloc] initWithPersistentID:a4 inLibrary:v10];
    v73[0] = @"name";
    v73[1] = @"is_hidden";
    v73[2] = @"smart_is_folder";
    uint64_t v63 = [MEMORY[0x1E4F1C978] arrayWithObjects:v73 count:3];
    unint64_t v13 = [(ML3Entity *)v11 getValuesForProperties:v63];

    unint64_t v64 = [v13 objectForKeyedSubscript:@"is_hidden"];
    LOBYTE(v63) = [v64 BOOLValue];

    char v65 = [v13 objectForKeyedSubscript:@"smart_is_folder"];
    char v66 = [v65 BOOLValue];

    uint64_t v31 = 0;
    if (v63 & 1) != 0 || (v66) {
      goto LABEL_54;
    }
    unint64_t v14 = [v13 objectForKeyedSubscript:@"name"];
    unsigned int v67 = [(ML3Entity *)v11 URL];
    char v26 = [v67 absoluteString];

    uint64_t v31 = [v9 playlistItemWithName:v14 itemId:v26];
    goto LABEL_52;
  }
  uint64_t v31 = 0;
LABEL_55:

  return v31;
}

void __getKVMediaItemBuilderClass_block_invoke(uint64_t a1)
{
  KoaLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("KVMediaItemBuilder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getKVMediaItemBuilderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getKVMediaItemBuilderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3UpdateSiriIndexOperation.m", 38, @"Unable to find class %s", "KVMediaItemBuilder");

    __break(1u);
  }
}

void *KoaLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!KoaLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    v4[3] = __KoaLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E5FB7280;
    uint64_t v6 = 0;
    KoaLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  dispatch_queue_t v0 = (void *)KoaLibraryCore_frameworkLibrary;
  if (!KoaLibraryCore_frameworkLibrary)
  {
    dispatch_queue_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"void *KoaLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3UpdateSiriIndexOperation.m", 36, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __KoaLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  KoaLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1B042854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B0428B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getKVDonatorClass_block_invoke(uint64_t a1)
{
  KoaLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("KVDonator");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getKVDonatorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getKVDonatorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3UpdateSiriIndexOperation.m", 37, @"Unable to find class %s", "KVDonator");

    __break(1u);
  }
}

void sub_1B042902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B04294B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getKVIncrementalDatasetStreamClass_block_invoke(uint64_t a1)
{
  KoaLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("KVIncrementalDatasetStream");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getKVIncrementalDatasetStreamClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getKVIncrementalDatasetStreamClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3UpdateSiriIndexOperation.m", 40, @"Unable to find class %s", "KVIncrementalDatasetStream");

    __break(1u);
  }
}

void __getKVFullDatasetStreamClass_block_invoke(uint64_t a1)
{
  KoaLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("KVFullDatasetStream");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getKVFullDatasetStreamClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class getKVFullDatasetStreamClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ML3UpdateSiriIndexOperation.m", 39, @"Unable to find class %s", "KVFullDatasetStream");

    __break(1u);
  }
}

void *__getKVOriginAppIdMediaPlayerSymbolLoc_block_invoke(uint64_t a1)
{
  unint64_t v2 = KoaLibrary();
  uint64_t result = dlsym(v2, "KVOriginAppIdMediaPlayer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getKVOriginAppIdMediaPlayerSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ML3ComposerDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ComposerDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ComposerDatabaseImportDataSource::getImportPropertyGroupKey(ML3ComposerDatabaseImportDataSource *this)
{
  return 20;
}

void ML3ComposerDatabaseImportDataSource::~ML3ComposerDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

uint64_t ML3ItemExtraDatabaseImportDataSource::hasValueForKey(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t hasValueForKey = ML3DatabaseImportDataSource::hasValueForKey(a1, v6, a3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return hasValueForKey;
}

void sub_1B0429908(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ML3ItemExtraDatabaseImportDataSource::stringValueForKey(uint64_t *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_1F08C3230;
  *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = (std::string *)(a3 + 16);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  if (a2 == 33554434)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = (std::__shared_weak_count *)a1[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v5 + 24))(&v10);
    *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x210], 8) = v10.__r_.__value_.__s.__data_[8];
    std::string::operator=(v4, (const std::string *)&v10.__r_.__value_.__r.__words[2]);
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F08C3230;
    if (SHIBYTE(v12) < 0) {
      operator delete((void *)v10.__r_.__value_.__r.__words[2]);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (*(unsigned char *)(a3 + 8))
    {
      if (*(char *)(a3 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
      }
      else {
        std::string v10 = *v4;
      }
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v10.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v10.__r_.__value_.__l.__data_);
        if (size) {
          return;
        }
      }
      else if (size)
      {
        return;
      }
      v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F08C3230;
      v10.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      v10.__r_.__value_.__r.__words[2] = 0;
      *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x210], 8) = 0;
      std::string::operator=(v4, (const std::string *)&v10.__r_.__value_.__r.__words[2]);
      v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F08C3230;
      if (SHIBYTE(v12) < 0) {
        operator delete((void *)v10.__r_.__value_.__r.__words[2]);
      }
    }
  }
  else
  {
    uint64_t v7 = *a1;
    unint64_t v8 = (std::__shared_weak_count *)a1[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v7 + 24))(&v10);
    *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x210], 8) = v10.__r_.__value_.__s.__data_[8];
    std::string::operator=(v4, (const std::string *)&v10.__r_.__value_.__r.__words[2]);
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F08C3230;
    if (SHIBYTE(v12) < 0) {
      operator delete((void *)v10.__r_.__value_.__r.__words[2]);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1B0429B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  *(void *)uint64_t v16 = v17;
  if (*(char *)(v16 + 39) < 0) {
    operator delete(*v18);
  }
  _Unwind_Resume(exception_object);
}

void ML3ItemExtraDatabaseImportDataSource::dataValueForKey(uint64_t *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v3 + 48))(&v6);
  long long v5 = v6;
  long long v6 = 0uLL;
  *(_OWORD *)a2 = v5;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1B0429C8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ItemExtraDatabaseImportDataSource::integerValueForKey(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (a3 == 33554444)
  {
    unsigned int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, 33554444);
    return ITMediaKindForMLMediaType(v4);
  }
  else
  {
    long long v6 = (std::__shared_weak_count *)a2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, a3);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  return v5;
}

void sub_1B0429D5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ItemExtraDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemExtraDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ItemExtraDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemExtraDatabaseImportDataSource *this)
{
  return 2;
}

void ML3ItemExtraDatabaseImportDataSource::~ML3ItemExtraDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);

  JUMPOUT(0x1B3E93610);
}

uint64_t ML3MediaAssetFileExtensions()
{
  return objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"mp3", @"m4a", @"m4p", @"aa", @"aax", @"mp4", @"m4v", @"mov", @"m4b", @"movpkg", @"m4bpkg", 0);
}

uint64_t ML3ArtworkAssetFileExtensions()
{
  return objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"jpg", @"blob", @"png", @"jpeg", 0);
}

uint64_t ML3OfflineHLSFileExtensions()
{
  return objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"movpkg", @"m4bpkg", 0);
}

void ML3RemovePathsFromPurchaseManifests(void *a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = 0;
    long long v6 = 0;
    uint64_t v7 = *(void *)v30;
    *(void *)&long long v3 = 136446210;
    long long v26 = v3;
    while (1)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v30 != v7) {
          objc_enumerationMutation(v1);
        }
        id v9 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        std::string v10 = +[ML3MusicLibrary pathForResourceFileOrFolder:](ML3MusicLibrary, "pathForResourceFileOrFolder:", 21, v26);
        int v11 = [v9 hasPrefix:v10];

        if (v11)
        {
          if (!v6)
          {
            long long v6 = [MEMORY[0x1E4F1CA48] array];
          }
          uint64_t v12 = v6;
LABEL_14:
          [v12 addObject:v9];
          continue;
        }
        unint64_t v13 = +[ML3MusicLibrary pathForResourceFileOrFolder:20];
        int v14 = [v9 hasPrefix:v13];

        if (v14)
        {
          if (!v5)
          {
            uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
          }
          uint64_t v12 = v5;
          goto LABEL_14;
        }
        int v15 = [v9 stringByDeletingPathExtension];
        id v16 = [v15 stringByAppendingPathExtension:@"plist"];
        uint64_t v17 = (const char *)[v16 fileSystemRepresentation];

        LODWORD(v15) = unlink(v17);
        int v18 = os_log_create("com.apple.amp.medialibrary", "Default");
        BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (v19)
          {
            uint64_t v20 = __error();
            unint64_t v21 = strerror(*v20);
            *(_DWORD *)long long buf = 136446466;
            uint64_t v34 = v17;
            __int16 v35 = 2082;
            unint64_t v36 = v21;
            uint64_t v22 = v18;
            id v23 = "Could not delete %{public}s: %{public}s";
            uint32_t v24 = 22;
LABEL_20:
            _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, v24);
          }
        }
        else if (v19)
        {
          *(_DWORD *)long long buf = v26;
          uint64_t v34 = v17;
          uint64_t v22 = v18;
          id v23 = "Removed file: %{public}s";
          uint32_t v24 = 12;
          goto LABEL_20;
        }
      }
      uint64_t v4 = [v1 countByEnumeratingWithState:&v29 objects:v37 count:16];
      if (!v4) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v5 = 0;
  long long v6 = 0;
LABEL_26:
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  void v27[2] = __ML3RemovePathsFromPurchaseManifests_block_invoke;
  void v27[3] = &unk_1E5FB7308;
  id v28 = 0;
  unint64_t v25 = (void (**)(void, void, void))MEMORY[0x1B3E93EE0](v27);
  ((void (**)(void, void *, void))v25)[2](v25, v6, 0);
  ((void (**)(void, void *, uint64_t))v25)[2](v25, v5, 1);
}

void __ML3RemovePathsFromPurchaseManifests_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5)
  {
    uint64_t v10 = 0;
    int v11 = &v10;
    uint64_t v12 = 0x2050000000;
    long long v6 = (void *)getSSDownloadFileManifestClass_softClass;
    uint64_t v13 = getSSDownloadFileManifestClass_softClass;
    if (!getSSDownloadFileManifestClass_softClass)
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      void v9[2] = __getSSDownloadFileManifestClass_block_invoke;
      void v9[3] = &unk_1E5FB7330;
      v9[4] = &v10;
      __getSSDownloadFileManifestClass_block_invoke((uint64_t)v9);
      long long v6 = (void *)v11[3];
    }
    uint64_t v7 = v6;
    _Block_object_dispose(&v10, 8);
    unint64_t v8 = (void *)[[v7 alloc] initWithManifestType:a3];
    [v8 removeItemsWithAssetPaths:v5 completionBlock:*(void *)(a1 + 32)];
  }
}

void sub_1B042A9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSSDownloadFileManifestClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!StoreServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __StoreServicesLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E5FB7350;
    uint64_t v8 = 0;
    StoreServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!StoreServicesLibraryCore_frameworkLibrary)
  {
    long long v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *StoreServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ML3StorageUtilities.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SSDownloadFileManifest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    long long v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getSSDownloadFileManifestClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"ML3StorageUtilities.m", 19, @"Unable to find class %s", "SSDownloadFileManifest");

LABEL_10:
    __break(1u);
  }
  getSSDownloadFileManifestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __StoreServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  StoreServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void ML3DeleteAssetsAtPaths(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v26 != v4) {
          objc_enumerationMutation(v1);
        }
        id v6 = *(id *)(*((void *)&v25 + 1) + 8 * i);
        long long v7 = (const char *)[v6 fileSystemRepresentation];
        uint64_t v8 = [v6 pathExtension];
        if (v8)
        {
          uint64_t v9 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"movpkg", @"m4bpkg", 0);
          int v10 = [v9 containsObject:v8];
        }
        else
        {
          int v10 = 0;
        }
        memset(&v24, 0, sizeof(v24));
        if (!stat(v7, &v24))
        {
          int v11 = (v24.st_mode & 0x4000) != 0 ? v10 : 1;
          if (v11 == 1)
          {
            if ((v24.st_mode & 0x4000) != 0)
            {
              BOOL v19 = [MEMORY[0x1E4F28CB8] defaultManager];
              id v23 = 0;
              int v20 = [v19 removeItemAtPath:v6 error:&v23];
              os_log_t v12 = (os_log_t)v23;

              if (!v20)
              {
                unint64_t v21 = os_log_create("com.apple.amp.medialibrary", "Default");
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v22 = [v12 localizedDescription];
                  *(_DWORD *)long long buf = 136446466;
                  long long v30 = v7;
                  __int16 v31 = 2114;
                  long long v32 = v22;
                  _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_ERROR, "Could not delete %{public}s: %{public}@", buf, 0x16u);
                }
                goto LABEL_26;
              }
            }
            else if (unlink(v7))
            {
              os_log_t v12 = os_log_create("com.apple.amp.medialibrary", "Default");
              if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
              {
                uint64_t v13 = __error();
                int v14 = strerror(*v13);
                *(_DWORD *)long long buf = 136446466;
                long long v30 = v7;
                __int16 v31 = 2082;
                long long v32 = v14;
                int v15 = v12;
                os_log_type_t v16 = OS_LOG_TYPE_ERROR;
                uint64_t v17 = "Could not delete %{public}s: %{public}s";
                uint32_t v18 = 22;
                goto LABEL_22;
              }
              goto LABEL_26;
            }
            os_log_t v12 = os_log_create("com.apple.amp.medialibrary", "Default");
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136446210;
              long long v30 = v7;
              int v15 = v12;
              os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
              uint64_t v17 = "Removed file: %{public}s";
              uint32_t v18 = 12;
LABEL_22:
              _os_log_impl(&dword_1B022D000, v15, v16, v17, buf, v18);
            }
LABEL_26:
          }
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v3);
  }
  ML3RemovePathsFromPurchaseManifests(v1);
}

void sub_1B042B944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B042BBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _ML3VirtualTableRename(sqlite3_vtab *a1, const char *a2)
{
  return 0;
}

uint64_t _ML3VirtualTableRowID(sqlite3_vtab_cursor *a1, const sqlite3_module **a2)
{
  pVtab = a1->pVtab;
  pModule = a1->pVtab[1].pModule;
  id v6 = *(std::__shared_weak_count **)&pVtab[1].nRef;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (pModule) {
    pModule = (const sqlite3_module *)(*(uint64_t (**)(const sqlite3_module *, void))(*(void *)&pModule->iVersion
  }
                                                                                                + 16))(pModule, LODWORD(a1[1].pVtab));
  *a2 = pModule;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return 0;
}

void sub_1B042BC7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ML3VirtualTableColumn(sqlite3_vtab_cursor *a1, sqlite3_vtab *a2, int a3)
{
  pVtab = a1[2].pVtab;
  if (LODWORD(pVtab->pModule) != LODWORD(a1[1].pVtab))
  {
    pModule = a1->pVtab[1].pModule;
    long long v7 = *(std::__shared_weak_count **)&a1->pVtab[1].nRef;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (pModule)
    {
      uint64_t v9 = *(void *)&pVtab->nRef;
      for (uint64_t i = pVtab->zErrMsg; (char *)v9 != i; v9 += 48)
      {
        int v15 = 0;
        if (*(unsigned char *)(v9 + 40))
        {
          std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>::operator=[abi:ne180100]<long long,0,long long,0ul,0>(v9 + 8, &v15);
        }
        else
        {
          *(void *)(v9 + _Block_object_dispose(&STACK[0x210], 8) = 0;
          *(_DWORD *)(v9 + 32) = 0;
          *(unsigned char *)(v9 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1;
        }
      }
      unsigned int v11 = a1[1].pVtab;
      (*(void (**)(const sqlite3_module *, sqlite3_vtab *, void))(*(void *)&pModule->iVersion + 8))(pModule, pVtab, v11);
      LODWORD(pVtab->pModule) = v11;
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v12 = *(void *)&pVtab->nRef + 48 * a3;
  if (*(unsigned char *)(v12 + 40))
  {
    a1[4].pVtab = a2;
    uint64_t v13 = *(unsigned int *)(v12 + 32);
    if (v13 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    int v15 = a1 + 3;
    ((void (*)(sqlite3_vtab_cursor **))off_1F08D4218[v13])(&v15);
  }
  else
  {
    sqlite3_result_null((sqlite3_context *)a2);
  }
  return 0;
}

void sub_1B042BDF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)(v2 + 8))
  {
    if (v4) {
      goto LABEL_5;
    }
LABEL_8:
    id v6 = *(sqlite3_context **)(v2 + 8);
    goto LABEL_9;
  }
  long long v7 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v8 = [NSString stringWithUTF8String:"void ML3VirtualTableBindingVisitor::operator()(ML3CPPDataRef)"];
  [v7 handleFailureInFunction:v8 file:@"ML3VirtualTableRow.mm" lineNumber:82 description:@"Cannot bind ML3CPPDataRef: NULL context"];

  if (!v4) {
    goto LABEL_8;
  }
LABEL_5:
  id v5 = *(const void **)(v4 + 16);
  id v6 = *(sqlite3_context **)(v2 + 8);
  if (v5)
  {
    sqlite3_result_blob(v6, v5, *(_DWORD *)(v4 + 8), 0);
    goto LABEL_10;
  }
LABEL_9:
  sqlite3_result_null(v6);
LABEL_10:
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1B042BF08(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(sqlite3_context **)(*a1 + 8);
  if (!v4)
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v7 = [NSString stringWithUTF8String:"void ML3VirtualTableBindingVisitor::operator()(const std::string &)"];
    [v6 handleFailureInFunction:v7 file:@"ML3VirtualTableRow.mm" lineNumber:76 description:@"Cannot bind std::string: NULL context"];

    uint64_t v4 = *(sqlite3_context **)(v3 + 8);
  }
  if (*(char *)(a2 + 23) >= 0) {
    id v5 = (const char *)a2;
  }
  else {
    id v5 = *(const char **)a2;
  }

  sqlite3_result_text(v4, v5, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void sub_1B042BFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(sqlite3_context **)(*a1 + 8);
  if (!v4)
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v7 = [NSString stringWithUTF8String:"void ML3VirtualTableBindingVisitor::operator()(const BOOL &)"];
    [v6 handleFailureInFunction:v7 file:@"ML3VirtualTableRow.mm" lineNumber:70 description:@"Cannot bind BOOL: NULL context"];

    uint64_t v4 = *(sqlite3_context **)(v3 + 8);
  }
  int v5 = *a2;

  sqlite3_result_int(v4, v5);
}

void sub_1B042C0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, float *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(sqlite3_context **)(*a1 + 8);
  if (!v4)
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v7 = [NSString stringWithUTF8String:"void ML3VirtualTableBindingVisitor::operator()(const float_t &)"];
    [v6 handleFailureInFunction:v7 file:@"ML3VirtualTableRow.mm" lineNumber:64 description:@"Cannot bind float_t: NULL context"];

    uint64_t v4 = *(sqlite3_context **)(v3 + 8);
  }
  double v5 = *a2;

  sqlite3_result_double(v4, v5);
}

void sub_1B042C184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, sqlite3_int64 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(sqlite3_context **)(*a1 + 8);
  if (!v4)
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v7 = [NSString stringWithUTF8String:"void ML3VirtualTableBindingVisitor::operator()(const int64_t &)"];
    [v6 handleFailureInFunction:v7 file:@"ML3VirtualTableRow.mm" lineNumber:58 description:@"Cannot bind int64_t: NULL context"];

    uint64_t v4 = *(sqlite3_context **)(v3 + 8);
  }
  sqlite3_int64 v5 = *a2;

  sqlite3_result_int64(v4, v5);
}

void sub_1B042C248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _ML3VirtualTableEOF(sqlite3_vtab_cursor *a1)
{
  return LODWORD(a1[1].pVtab) >= HIDWORD(a1[1].pVtab);
}

uint64_t _ML3VirtualTableNext(sqlite3_vtab_cursor *a1)
{
  pModule = a1->pVtab[1].pModule;
  uint64_t v2 = *(std::__shared_weak_count **)&a1->pVtab[1].nRef;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (LODWORD(a1[1].pVtab) + 1);
  do
  {
    int v5 = v4;
    if (v4 >= HIDWORD(a1[1].pVtab)) {
      break;
    }
    char v6 = (*(uint64_t (**)(const sqlite3_module *, uint64_t))(*(void *)&pModule->iVersion + 24))(pModule, v4);
    uint64_t v4 = (v5 + 1);
  }
  while ((v6 & 1) == 0);
  LODWORD(a1[1].pVtab) = v5;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return 0;
}

void sub_1B042C314(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ML3VirtualTableFilter(sqlite3_vtab_cursor *a1, int a2, const char *a3, int a4, sqlite3_value **a5)
{
  LODWORD(a1[1].pVtab) = 0;
  return 0;
}

uint64_t _ML3VirtualTableClose(sqlite3_vtab_cursor *a1)
{
  uint64_t v2 = a1->pVtab[1].zErrMsg;
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 delegate];
    if (v4 && (objc_opt_respondsToSelector() & 1) != 0) {
      [v4 virtualTableDidCloseCursor:v3];
    }
  }
  pVtab = a1[2].pVtab;
  if (pVtab)
  {
    p_nRef = (void **)&pVtab->nRef;
    std::vector<ML3VirtualTableColumn>::__destroy_vector::operator()[abi:ne180100](&p_nRef);
    MEMORY[0x1B3E93610](pVtab, 0x1020C40E72D6CFBLL);
  }
  MEMORY[0x1B3E93610](a1, 0x10A0C40A32EB4A5);

  return 0;
}

void sub_1B042C404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<ML3VirtualTableColumn>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  id v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*(v4 - 8)) {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 40));
        }
        v4 -= 48;
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void _ML3VirtualTableOpen(sqlite3_vtab *a1, sqlite3_vtab_cursor **a2)
{
  uint64_t v2 = *(void *)&a1[1].nRef;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1B042C798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  std::vector<ML3VirtualTableColumn>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x1B3E93610](v11, 0x1020C40E72D6CFBLL);

  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(a1);
}

uint64_t _ML3VirtualTableDestroy(sqlite3_vtab *a1)
{
  if (a1)
  {

    uint64_t v2 = *(std::__shared_weak_count **)&a1[1].nRef;
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    MEMORY[0x1B3E93610](a1, 0x10F0C40C957F46CLL);
  }
  return 0;
}

uint64_t _ML3VirtualTableBestIndex(sqlite3_vtab *a1, sqlite3_index_info *a2)
{
  return 0;
}

uint64_t _ML3VirtualTableCreate(sqlite3 *a1, void *a2, int a3, const char *const *a4, sqlite3_vtab **a5, char **a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  char v6 = a2;
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v8 = [v6 databaseTable];
  uint64_t v9 = [v8 columns];

  uint64_t v10 = [v9 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v24 != v12) {
          objc_enumerationMutation(v9);
        }
        if (([*(id *)(*((void *)&v23 + 1) + 8 * i) columnConstraints] & 1) == 0)
        {
          int v14 = objc_msgSend(NSString, "stringWithFormat:", @"col%lu", v11);
          [v7 addObject:v14];

          ++v11;
        }
      }
      uint64_t v10 = [v9 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v10);
  }

  int v15 = [v7 componentsJoinedByString:@", "];
  os_log_type_t v16 = NSString;
  uint64_t v17 = [v6 name];
  uint32_t v18 = [v16 stringWithFormat:@"CREATE TABLE %@ (%@)", v17, v15];

  id v19 = v18;
  uint64_t v20 = sqlite3_declare_vtab(a1, (const char *)[v19 UTF8String]);
  if (!v20) {
    operator new();
  }

  return v20;
}

void sub_1B042CB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B042CBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ML3VirtualTable;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B042CD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ML3DeviceIsUnlocked()
{
  int v0 = MKBGetDeviceLockState();
  return !v0 || v0 == 3;
}

uint64_t ML3IsUIApplication()
{
  if (ML3IsUIApplication___once != -1) {
    dispatch_once(&ML3IsUIApplication___once, &__block_literal_global_21435);
  }
  return ML3IsUIApplication___isUIApplication;
}

void __ML3IsUIApplication_block_invoke()
{
  id v0 = [MEMORY[0x1E4F963E8] currentProcess];
  ML3IsUIApplication___isUIApplication = [v0 isApplication];
}

uint64_t ML3IsFirstPartyMediaApplication()
{
  if (ML3IsFirstPartyMediaApplication___once != -1) {
    dispatch_once(&ML3IsFirstPartyMediaApplication___once, &__block_literal_global_3);
  }
  id v0 = [MEMORY[0x1E4F28B50] mainBundle];
  id v1 = [v0 bundleIdentifier];

  uint64_t v2 = [(id)ML3IsFirstPartyMediaApplication___firstPartyBundleIDs containsObject:v1];
  return v2;
}

uint64_t __ML3IsFirstPartyMediaApplication_block_invoke()
{
  ML3IsFirstPartyMediaApplication___firstPartyBundleIDs = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"com.apple.Music", @"com.apple.videos", @"com.apple.MobileStore", @"com.apple.AppStore", @"com.apple.tv", 0);

  return MEMORY[0x1F41817F8]();
}

BOOL ML3RepairFilePermissions(void *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!getuid())
  {
    id v6 = v3;
    id v7 = (const char *)[v6 UTF8String];
    memset(&buf, 0, sizeof(buf));
    uint64_t v8 = stat(v7, &buf);
    if (v8)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"Failed to get permissions info on file %s.", v7);
    }
    else
    {
      long long v23 = getpwnam("mobile");
      if (v23)
      {
        uid_t pw_uid = v23->pw_uid;
        gid_t pw_gid = v23->pw_gid;
        if (buf.st_uid == pw_uid && buf.st_gid == pw_gid)
        {
          uint64_t v9 = 0;
          int v21 = 1;
LABEL_12:

          BOOL v5 = v21 != 0;
          goto LABEL_13;
        }
        uint64_t v27 = chown(v7, pw_uid, pw_gid);
        if (v27)
        {
          uint64_t v10 = v27;
          uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"Failed to chown file %s. Err %d.", v7, *__error());
          int v29 = 0;
        }
        else
        {
          uint64_t v28 = _ML3LogCategoryDefault();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)unint64_t v36 = 136446210;
            char v37 = v7;
            _os_log_impl(&dword_1B022D000, v28, OS_LOG_TYPE_DEBUG, "Successfully repaired permissions for file %{public}s.", v36, 0xCu);
          }

          uint64_t v9 = 0;
          uint64_t v10 = 0;
          int v29 = 1;
        }
LABEL_8:
        uint64_t v11 = (void *)MEMORY[0x1E4F77950];
        uint64_t v12 = *MEMORY[0x1E4F778D0];
        v34[0] = v6;
        v33[0] = @"filePath";
        v33[1] = @"chownError";
        uint64_t v13 = [NSNumber numberWithInt:v10];
        v34[1] = v13;
        v33[2] = @"statError";
        int v14 = [NSNumber numberWithInt:v8];
        void v33[3] = @"errorMsg";
        v34[2] = v14;
        void v34[3] = v9;
        int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v34 forKeys:v33 count:4];
        __int16 v35 = v15;
        os_log_type_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v35 count:1];
        [v11 snapshotWithDomain:v12 type:@"Bug" subType:@"Database Validation Bug" context:@"wrong permisions" triggerThresholdValues:0 events:v16 completion:0];

        if (a2 && v9)
        {
          id v17 = objc_alloc(MEMORY[0x1E4F28C58]);
          uint64_t v31 = *MEMORY[0x1E4F28568];
          long long v32 = v9;
          uint32_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v32 forKeys:&v31 count:1];
          id v19 = (void *)[v17 initWithDomain:@"ML3SystemErrorDomain" code:42 userInfo:v18];

          id v20 = v19;
          *a2 = v20;
        }
        int v21 = v29;
        goto LABEL_12;
      }
      objc_msgSend(NSString, "stringWithFormat:", @"Failed to get uid for user 'mobile'. Err %d.", *__error());
    uint64_t v9 = };
    int v29 = 0;
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  uint64_t v4 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.st_dev) = 0;
    _os_log_impl(&dword_1B022D000, v4, OS_LOG_TYPE_DEBUG, "Can't repair database permissions because we are not running as root.", (uint8_t *)&buf, 2u);
  }

  BOOL v5 = 0;
LABEL_13:

  return v5;
}

BOOL ML3IsProcessRunning(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4F96430] predicateMatchingServiceName:v1];
  id v9 = 0;
  id v3 = [MEMORY[0x1E4F963E8] handleForPredicate:v2 error:&v9];
  id v4 = v9;
  BOOL v5 = [v4 domain];
  if ([v5 isEqualToString:*MEMORY[0x1E4F964C8]])
  {
    uint64_t v6 = [v4 code];

    if (v6 == 3) {
      goto LABEL_8;
    }
  }
  else
  {
  }
  id v7 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)stat buf = 138543618;
    id v11 = v1;
    __int16 v12 = 2114;
    id v13 = v4;
    _os_log_impl(&dword_1B022D000, v7, OS_LOG_TYPE_ERROR, "Failed to query for running process '%{public}@'. err=%{public}@", buf, 0x16u);
  }

LABEL_8:
  return v3 != 0;
}

id ML3LocalizedSortingDetailsDictionary()
{
  id v0 = +[ML3LanguageResourceManager sharedResourceManager];
  id v1 = [v0 resources];
  uint64_t v2 = [v1 sortingDetails];

  return v2;
}

uint64_t ML3GetDiskUsageForPath(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
    [v3 UTF8String];
    if (dirstat_np() == -1)
    {
      id v4 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        BOOL v5 = __error();
        uint64_t v6 = strerror(*v5);
        *(_DWORD *)stat buf = 138543618;
        id v9 = v3;
        __int16 v10 = 2080;
        id v11 = v6;
        _os_log_impl(&dword_1B022D000, v4, OS_LOG_TYPE_ERROR, "ML3GetUsageForPath encountered error. path=%{public}@ err=%s", buf, 0x16u);
      }
    }
  }

  return 0;
}

void ML3ImportSession::~ML3ImportSession(ML3ImportSession *this)
{
  ML3ImportSession::~ML3ImportSession(this);

  JUMPOUT(0x1B3E93610);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void **v18;

  *(void *)this = &unk_1F08C3250;
  uint64_t v2 = *((void *)this + 8);
  if (v2 && v2 != *((void *)this + 2))
  {
    objc_msgSend(*((id *)this + 1), "checkInDatabaseConnection:");
    id v3 = (void *)*((void *)this + 8);
    *((void *)this + _Block_object_dispose(&STACK[0x210], 8) = 0;
  }
  id v4 = (void *)*((void *)this + 337);
  if (v4)
  {
    *((void *)this + 33_Block_object_dispose(&STACK[0x210], 8) = v4;
    operator delete(v4);
  }
  uint32_t v18 = (void **)((char *)this + 2672);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);

  uint32_t v18 = (void **)((char *)this + 2640);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);

  uint32_t v18 = (void **)((char *)this + 2608);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);

  uint32_t v18 = (void **)((char *)this + 2568);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);

  uint32_t v18 = (void **)((char *)this + 2536);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint32_t v18 = (void **)((char *)this + 2512);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint32_t v18 = (void **)((char *)this + 2488);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)this + 2448);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2408);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2368);
  uint32_t v18 = (void **)((char *)this + 2344);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint32_t v18 = (void **)((char *)this + 2320);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);
  BOOL v5 = (void *)*((void *)this + 287);
  if (v5)
  {
    *((void *)this + 28_Block_object_dispose(&STACK[0x210], 8) = v5;
    operator delete(v5);
  }

  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 2248);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2208);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2168);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)this + 2128);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2088);

  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 2040);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2000);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1960);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)this + 1920);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1880);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 1840);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1800);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1760);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1720);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1680);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1640);
  uint32_t v18 = (void **)((char *)this + 1616);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint32_t v18 = (void **)((char *)this + 1592);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);

  uint32_t v18 = (void **)((char *)this + 1552);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint32_t v18 = (void **)((char *)this + 1528);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (*((char *)this + 1511) < 0) {
    operator delete(*((void **)this + 186));
  }
  if (*((char *)this + 1487) < 0) {
    operator delete(*((void **)this + 183));
  }
  if (*((char *)this + 1463) < 0) {
    operator delete(*((void **)this + 180));
  }
  if (*((char *)this + 1439) < 0) {
    operator delete(*((void **)this + 177));
  }
  if (*((char *)this + 1415) < 0) {
    operator delete(*((void **)this + 174));
  }
  if (*((char *)this + 1391) < 0) {
    operator delete(*((void **)this + 171));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1328);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1288);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1248);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1208);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1088);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 1048);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 1008);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 968);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 928);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 888);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 848);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 808);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 768);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 728);

  uint64_t v6 = (void *)*((void *)this + 87);
  if (v6)
  {
    *((void *)this + 8_Block_object_dispose(&STACK[0x210], 8) = v6;
    operator delete(v6);
  }
  id v7 = (void *)*((void *)this + 83);
  if (v7) {
    operator delete(v7);
  }
  uint32_t v18 = (void **)((char *)this + 640);
  std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint32_t v18 = (void **)((char *)this + 616);
  std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v18);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 576);
  uint64_t v8 = (void *)*((void *)this + 69);
  if (v8)
  {
    *((void *)this + 7sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v8;
    operator delete(v8);
  }
  id v9 = (void *)*((void *)this + 66);
  if (v9)
  {
    *((void *)this + 67) = v9;
    operator delete(v9);
  }
  __int16 v10 = (void *)*((void *)this + 63);
  if (v10)
  {
    *((void *)this + 64) = v10;
    operator delete(v10);
  }
  id v11 = (void *)*((void *)this + 60);
  if (v11)
  {
    *((void *)this + 61) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 57);
  if (v12)
  {
    *((void *)this + 5_Block_object_dispose(&STACK[0x210], 8) = v12;
    operator delete(v12);
  }
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 416);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 376);
  std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::~__hash_table((uint64_t)this + 336);
  id v13 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  int v15 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  os_log_type_t v16 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  id v17 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  id v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  id v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<long long const,ML3CollectionInfoSet>,0>(v1 + 2);
      operator delete(v1);
      id v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,ML3CollectionInfoSet>,0>(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  id v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  BOOL v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    id v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      id v3 = (std::__shared_weak_count *)v1[4];
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      operator delete(v1);
      id v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      id v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    id v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_1B042EA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B042EB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B042ED10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3GenreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3GenreDatabaseImportDataSource>,std::allocator<ML3GenreDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_32ML3GenreDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3GenreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3GenreDatabaseImportDataSource>,std::allocator<ML3GenreDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3GenreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3GenreDatabaseImportDataSource>,std::allocator<ML3GenreDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ComposerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ComposerDatabaseImportDataSource>,std::allocator<ML3ComposerDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_35ML3ComposerDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ComposerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ComposerDatabaseImportDataSource>,std::allocator<ML3ComposerDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ComposerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ComposerDatabaseImportDataSource>,std::allocator<ML3ComposerDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ArtistDatabaseImportDataSource>,std::allocator<ML3ArtistDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3ArtistDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ArtistDatabaseImportDataSource>,std::allocator<ML3ArtistDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ArtistDatabaseImportDataSource>,std::allocator<ML3ArtistDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3AlbumArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumArtistDatabaseImportDataSource>,std::allocator<ML3AlbumArtistDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_38ML3AlbumArtistDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3AlbumArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumArtistDatabaseImportDataSource>,std::allocator<ML3AlbumArtistDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3AlbumArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumArtistDatabaseImportDataSource>,std::allocator<ML3AlbumArtistDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3AlbumDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumDatabaseImportDataSource>,std::allocator<ML3AlbumDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_32ML3AlbumDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3AlbumDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumDatabaseImportDataSource>,std::allocator<ML3AlbumDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3AlbumDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumDatabaseImportDataSource>,std::allocator<ML3AlbumDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void ML3ImportSession::ML3ImportSession(ML3ImportSession *this, ML3MusicLibrary *a2, ML3DatabaseConnection *a3, int a4, char a5)
{
  id v9 = a2;
  __int16 v10 = a3;
  *(void *)this = &unk_1F08C3250;
  *((void *)this + 1) = v9;
  id v11 = v10;
  *((void *)this + 2) = v11;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x210], 8) = a4;
  *((unsigned char *)this + 36) = a5;
  *(_OWORD *)((char *)this + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 1_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 1065353216;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 102) = 1065353216;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 1065353216;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 48_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 52sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 56_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((void *)this + 75) = 0;
  *((_DWORD *)this + 152) = 1065353216;
  *(_OWORD *)((char *)this + 673) = 0u;
  *(_OWORD *)((char *)this + 64_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 72_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_DWORD *)this + 19sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 4_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_DWORD *)this + 20sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 80_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_DWORD *)this + 21sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_DWORD *)this + 22sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 88_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_DWORD *)this + 23sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 5_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_DWORD *)this + 24sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 96_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_DWORD *)this + 25sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_DWORD *)this + 26sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 104_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_DWORD *)this + 27sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 6_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *((_DWORD *)this + 28sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 112_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *((_DWORD *)this + 29sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_DWORD *)this + 30sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 120_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((_DWORD *)this + 31sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 7_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *((_DWORD *)this + 32sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 128_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((_DWORD *)this + 33sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_DWORD *)this + 34sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((unsigned char *)this + 1513) = 0;
  *(_OWORD *)((char *)this + 148sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 144_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *(_OWORD *)((char *)this + 140sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 136_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 164sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *(_OWORD *)((char *)this + 160_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *(_OWORD *)((char *)this + 156sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 152_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *((_DWORD *)this + 41_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *((_OWORD *)this + 106) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_DWORD *)this + 42_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *(_OWORD *)((char *)this + 172sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *((_DWORD *)this + 43_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 11sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *((_DWORD *)this + 44_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *(_OWORD *)((char *)this + 180sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *((_DWORD *)this + 45_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *((_OWORD *)this + 116) = 0u;
  *((_OWORD *)this + 115) = 0u;
  *((_DWORD *)this + 46_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *(_OWORD *)((char *)this + 188sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *((_DWORD *)this + 47_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *((_OWORD *)this + 121) = 0u;
  *((_OWORD *)this + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *((_DWORD *)this + 48_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *(_OWORD *)((char *)this + 196sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *((_DWORD *)this + 49_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *((_OWORD *)this + 126) = 0u;
  *((_OWORD *)this + 125) = 0u;
  *((_DWORD *)this + 50_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *(_OWORD *)((char *)this + 204sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *((_DWORD *)this + 51_Block_object_dispose(&STACK[0x210], 8) = 1065353216;
  *((void *)this + 264) = 0;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 13sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *((_DWORD *)this + 53sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 134) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_DWORD *)this + 54sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 216_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 2184) = 0u;
  *((_DWORD *)this + 55sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 13_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *((_DWORD *)this + 56sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 224_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *((_DWORD *)this + 57sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 149) = 0u;
  *((_OWORD *)this + 14_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *((_OWORD *)this + 147) = 0u;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *((_DWORD *)this + 60sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *(_OWORD *)((char *)this + 240_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *((_DWORD *)this + 61sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((_OWORD *)this + 154) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_DWORD *)this + 62sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((void *)this + 339) = 0;
  *(_OWORD *)((char *)this + 268sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 264_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 260sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 256_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 252sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 248_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  uint64_t v12 = [[ML3ImportPersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"item"];
  id v13 = (void *)*((void *)this + 9);
  *((void *)this + 9) = v12;

  uint64_t v14 = [[ML3PersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"container_item"];
  int v15 = (void *)*((void *)this + 10);
  *((void *)this + 1sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v14;

  os_log_type_t v16 = [[ML3PersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"person"];
  id v17 = (void *)*((void *)this + 11);
  *((void *)this + 11) = v16;

  uint32_t v18 = [[ML3PersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"container_item_person"];
  id v19 = (void *)*((void *)this + 12);
  *((void *)this + 12) = v18;

  id v20 = [[ML3PersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"booklet"];
  int v21 = (void *)*((void *)this + 13);
  *((void *)this + 13) = v20;

  uint64_t v22 = [[ML3PersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"item_artist"];
  long long v23 = (void *)*((void *)this + 14);
  *((void *)this + 14) = v22;

  long long v24 = [[ML3PersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"album_artist"];
  long long v25 = (void *)*((void *)this + 15);
  *((void *)this + 15) = v24;

  long long v26 = [[ML3PersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"album"];
  uint64_t v27 = (void *)*((void *)this + 16);
  *((void *)this + 16) = v26;

  uint64_t v28 = [[ML3PersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"container_author"];
  int v29 = (void *)*((void *)this + 17);
  *((void *)this + 17) = v28;

  long long v30 = [[ML3PersistentIDGenerator alloc] initWithDatabaseConnection:v11 tableName:@"container_item_reaction"];
  uint64_t v31 = (void *)*((void *)this + 18);
  *((void *)this + 1_Block_object_dispose(&STACK[0x210], 8) = v30;

  std::vector<std::shared_ptr<ML3ImportItem>>::__vdeallocate((uint64_t *)this + 191);
  *((void *)this + 191) = 0;
  *((void *)this + 192) = 0;
  *((void *)this + 193) = 0;
  unint64_t v115 = (void **)v116;
  memset(v116, 0, 24);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v115);
  memset(v116, 0, 24);
  std::vector<std::shared_ptr<ML3ImportItem>>::__vdeallocate((uint64_t *)this + 194);
  *((_OWORD *)this + 97) = v116[0];
  *((void *)this + 196) = *(void *)&v116[1];
  unint64_t v115 = (void **)v116;
  memset(v116, 0, 24);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&v115);
  uint64_t v32 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:1000];
  char v33 = (void *)*((void *)this + 197);
  *((void *)this + 197) = v32;

  uint64_t v34 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:1000];
  __int16 v35 = (void *)*((void *)this + 286);
  *((void *)this + 286) = v34;

  uint64_t v36 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:1000];
  char v37 = (void *)*((void *)this + 260);
  *((void *)this + 26sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v36;

  uint64_t v38 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:1000];
  unsigned int v39 = (void *)*((void *)this + 198);
  *((void *)this + 19_Block_object_dispose(&STACK[0x210], 8) = v38;

  uint64_t v40 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:100];
  unint64_t v41 = (void *)*((void *)this + 320);
  *((void *)this + 32sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v40;

  uint64_t v42 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:100];
  char v43 = (void *)*((void *)this + 325);
  *((void *)this + 325) = v42;

  uint64_t v44 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:100];
  uint64_t v45 = (void *)*((void *)this + 329);
  *((void *)this + 329) = v44;

  uint64_t v46 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:100];
  char v47 = (void *)*((void *)this + 333);
  *((void *)this + 333) = v46;

  uint64_t v48 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:100];
  char v49 = (void *)*((void *)this + 324);
  *((void *)this + 324) = v48;

  uint64_t v50 = *((void *)this + 78);
  uint64_t v51 = *((void *)this + 77);
  unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((v50 - v51) >> 3);
  if (v52 > 6)
  {
    if (v50 - v51 != 280)
    {
      uint64_t v73 = v51 + 280;
      while (v50 != v73)
      {
        v50 -= 40;
        std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v50);
      }
      *((void *)this + 7_Block_object_dispose(&STACK[0x210], 8) = v73;
    }
  }
  else
  {
    uint64_t v53 = *((void *)this + 79);
    if (0xCCCCCCCCCCCCCCCDLL * ((v53 - v50) >> 3) >= 7 - v52)
    {
      unint64_t v74 = v50 + 40 * (7 - v52);
      do
      {
        *(_OWORD *)uint64_t v50 = 0uLL;
        *(_OWORD *)(v50 + 16) = 0uLL;
        *(_DWORD *)(v50 + 32) = 1065353216;
        v50 += 40;
      }
      while (v50 != v74);
      *((void *)this + 7_Block_object_dispose(&STACK[0x210], 8) = v74;
    }
    else
    {
      unint64_t v54 = 0x999999999999999ALL * ((v53 - v51) >> 3);
      if (v54 <= 7) {
        unint64_t v54 = 7;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v53 - v51) >> 3) >= 0x333333333333333) {
        unint64_t v55 = 0x666666666666666;
      }
      else {
        unint64_t v55 = v54;
      }
      if (v55 > 0x666666666666666) {
        goto LABEL_102;
      }
      unsigned int v56 = (char *)operator new(40 * v55);
      uint64_t v57 = &v56[8 * ((v50 - v51) >> 3)];
      unint64_t v58 = v56 + 280;
      char v59 = v57 + 32;
      unint64_t v60 = v52 - 7;
      do
      {
        *((_OWORD *)v59 - 2) = 0uLL;
        *((_OWORD *)v59 - 1) = 0uLL;
        *char v59 = 1065353216;
        v59 += 10;
        BOOL v61 = __CFADD__(v60++, 1);
      }
      while (!v61);
      uint64_t v62 = &v56[40 * v55];
      if (v50 != v51)
      {
        uint64_t v63 = 0;
        do
        {
          unint64_t v64 = &v57[v63];
          uint64_t v65 = v50 + v63;
          uint64_t v66 = *(void *)(v50 + v63 - 40);
          *(void *)(v65 - 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
          *((void *)v64 - 5) = v66;
          *((void *)v64 - 4) = *(void *)(v50 + v63 - 32);
          *(void *)(v65 - 32) = 0;
          uint64_t v67 = *(void *)(v50 + v63 - 24);
          *(void *)&v57[v63 - 24] = v67;
          uint64_t v68 = *(void *)(v50 + v63 - 16);
          *((void *)v64 - 2) = v68;
          *((_DWORD *)v64 - 2) = *(_DWORD *)(v50 + v63 - 8);
          if (v68)
          {
            unint64_t v69 = *(void *)(v67 + 8);
            unint64_t v70 = *((void *)v64 - 4);
            if ((v70 & (v70 - 1)) != 0)
            {
              if (v69 >= v70) {
                v69 %= v70;
              }
            }
            else
            {
              v69 &= v70 - 1;
            }
            *(void *)(v66 + 8 * v69) = &v57[v63 - 24];
            *(void *)(v50 + v63 - 24) = 0;
            *(void *)(v50 + v63 - 16) = 0;
          }
          v63 -= 40;
        }
        while (v50 + v63 != v51);
        v57 += v63;
      }
      char v71 = (void *)*((void *)this + 77);
      *((void *)this + 77) = v57;
      uint64_t v72 = *((void *)this + 78);
      *((void *)this + 7_Block_object_dispose(&STACK[0x210], 8) = v58;
      *((void *)this + 79) = v62;
      while ((void *)v72 != v71)
        uint64_t v72 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v72 - 40);
      if (v71) {
        operator delete(v71);
      }
    }
  }
  uint64_t v75 = *((void *)this + 81);
  uint64_t v76 = *((void *)this + 80);
  unint64_t v77 = 0xCCCCCCCCCCCCCCCDLL * ((v75 - v76) >> 3);
  if (v77 > 6)
  {
    if (v75 - v76 != 280)
    {
      uint64_t v97 = v76 + 280;
      while (v75 != v97)
      {
        v75 -= 40;
        std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v75);
      }
      *((void *)this + 81) = v97;
    }
LABEL_69:
    unint64_t v99 = *((void *)this + 84);
    if (v99 > 6)
    {
      *((void *)this + 84) = 7;
      goto LABEL_101;
    }
    uint64_t v100 = *((void *)this + 85);
    unint64_t v101 = 7 - v99;
    if (v100 << 6 < 7 - v99 || v99 > (v100 << 6) - (7 - v99))
    {
      memset(v116, 0, 24);
      uint64_t v103 = v100 << 7;
      if ((unint64_t)(v100 << 7) <= 0x40) {
        uint64_t v103 = 64;
      }
      if ((unint64_t)(v100 << 6) >= 0x3FFFFFFFFFFFFFFFLL) {
        unint64_t v104 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v104 = v103;
      }
      std::vector<BOOL>::reserve((uint64_t)v116, v104);
      uint64_t v105 = *((void *)this + 84);
      *((void *)&v116[0] + 1) = v105 + v101;
      unsigned int v106 = (void *)*((void *)this + 83);
      uint64_t v107 = *(void *)&v116[0];
      if (v105 < 1)
      {
        LODWORD(v109) = 0;
        char v110 = *(unint64_t **)&v116[0];
      }
      else
      {
        uint64_t v108 = v105 >> 6;
        if ((unint64_t)(v105 + 63) >= 0x7F) {
          memmove(*(void **)&v116[0], v106, 8 * v108);
        }
        uint64_t v109 = v105 - (v108 << 6);
        char v110 = (unint64_t *)(v107 + 8 * v108);
        if (v109 < 1) {
          LODWORD(v109) = 0;
        }
        else {
          *char v110 = *v110 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v109) | *((void *)v106 + v108) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v109);
        }
        unsigned int v106 = (void *)*((void *)this + 83);
      }
      *((void *)this + 83) = v107;
      *(void *)&v116[0] = v106;
      *((_OWORD *)this + 42) = *(_OWORD *)((char *)v116 + 8);
      if (v106) {
        operator delete(v106);
      }
      if (v109) {
        goto LABEL_87;
      }
    }
    else
    {
      char v110 = (unint64_t *)*((void *)this + 83);
      LODWORD(v109) = v99 & 0x3F;
      *((void *)this + 84) = 7;
      if ((v99 & 0x3F) != 0)
      {
LABEL_87:
        if ((64 - v109) >= v101) {
          unint64_t v111 = v101;
        }
        else {
          unint64_t v111 = (64 - v109);
        }
        *v110++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v109 - v111)) & (-1 << v109));
        v101 -= v111;
        unint64_t v112 = v101 >> 6;
        if (v101 >= 0x40) {
          bzero(v110, 8 * v112);
        }
        goto LABEL_99;
      }
    }
    unint64_t v112 = v101 >> 6;
LABEL_99:
    if ((v101 & 0x3F) != 0) {
      v110[v112] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v101 & 0x3F));
    }
LABEL_101:
    id v113 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v114 = (void *)*((void *)this + 90);
    *((void *)this + 9sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v113;

    operator new();
  }
  uint64_t v78 = *((void *)this + 82);
  if (0xCCCCCCCCCCCCCCCDLL * ((v78 - v75) >> 3) >= 7 - v77)
  {
    unint64_t v98 = v75 + 40 * (7 - v77);
    do
    {
      *(_OWORD *)uint64_t v75 = 0uLL;
      *(_OWORD *)(v75 + 16) = 0uLL;
      *(_DWORD *)(v75 + 32) = 1065353216;
      v75 += 40;
    }
    while (v75 != v98);
    *((void *)this + 81) = v98;
    goto LABEL_69;
  }
  unint64_t v79 = 0x999999999999999ALL * ((v78 - v76) >> 3);
  if (v79 <= 7) {
    unint64_t v79 = 7;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v78 - v76) >> 3) >= 0x333333333333333) {
    unint64_t v80 = 0x666666666666666;
  }
  else {
    unint64_t v80 = v79;
  }
  if (v80 <= 0x666666666666666)
  {
    char v81 = (char *)operator new(40 * v80);
    char v82 = &v81[8 * ((v75 - v76) >> 3)];
    unsigned int v83 = v81 + 280;
    uint64_t v84 = v82 + 32;
    unint64_t v85 = v77 - 7;
    do
    {
      *((_OWORD *)v84 - 2) = 0uLL;
      *((_OWORD *)v84 - 1) = 0uLL;
      _DWORD *v84 = 1065353216;
      v84 += 10;
      BOOL v61 = __CFADD__(v85++, 1);
    }
    while (!v61);
    char v86 = &v81[40 * v80];
    if (v75 != v76)
    {
      uint64_t v87 = 0;
      do
      {
        unsigned int v88 = &v82[v87];
        uint64_t v89 = v75 + v87;
        uint64_t v90 = *(void *)(v75 + v87 - 40);
        *(void *)(v89 - 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
        *((void *)v88 - 5) = v90;
        *((void *)v88 - 4) = *(void *)(v75 + v87 - 32);
        *(void *)(v89 - 32) = 0;
        uint64_t v91 = *(void *)(v75 + v87 - 24);
        *(void *)&v82[v87 - 24] = v91;
        uint64_t v92 = *(void *)(v75 + v87 - 16);
        *((void *)v88 - 2) = v92;
        *((_DWORD *)v88 - 2) = *(_DWORD *)(v75 + v87 - 8);
        if (v92)
        {
          unint64_t v93 = *(void *)(v91 + 8);
          unint64_t v94 = *((void *)v88 - 4);
          if ((v94 & (v94 - 1)) != 0)
          {
            if (v93 >= v94) {
              v93 %= v94;
            }
          }
          else
          {
            v93 &= v94 - 1;
          }
          *(void *)(v90 + 8 * v93) = &v82[v87 - 24];
          *(void *)(v75 + v87 - 24) = 0;
          *(void *)(v75 + v87 - 16) = 0;
        }
        v87 -= 40;
      }
      while (v75 + v87 != v76);
      v82 += v87;
    }
    unint64_t v95 = (void *)*((void *)this + 80);
    *((void *)this + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v82;
    uint64_t v96 = *((void *)this + 81);
    *((void *)this + 81) = v83;
    *((void *)this + 82) = v86;
    while ((void *)v96 != v95)
      uint64_t v96 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v96 - 40);
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_69;
  }
LABEL_102:
  std::__throw_bad_array_new_length[abi:ne180100]();
}

void sub_1B043019C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  *(void *)(v40 - 136) = a1;
  unint64_t v41 = *(void **)(v40 - 112);
  if (v41) {
    operator delete(v41);
  }
  *(void *)(v40 - 16sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v36 + 1592;
  uint64_t v42 = *(void **)(v36 + 2696);
  if (v42)
  {
    *(void *)(v36 + 2704) = v42;
    operator delete(v42);
  }
  *(void *)(v40 - 112) = v36 + 2672;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));

  *(void *)(v40 - 112) = v36 + 2640;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));

  *(void *)(v40 - 112) = v36 + 2608;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));

  *(void *)(v40 - 112) = v36 + 2568;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));

  *(void *)(v40 - 112) = v36 + 2536;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  *(void *)(v40 - 112) = v36 + 2512;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  *(void *)(v40 - 112) = v39;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(v36 + 2448);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a25);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 2368);
  *(void *)(v40 - 112) = v36 + 2344;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  *(void *)(v40 - 112) = v36 + 2320;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  char v43 = *(void **)(v36 + 2296);
  if (v43)
  {
    *(void *)(v36 + 2304) = v43;
    operator delete(v43);
  }

  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(a26);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 2208);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a27);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(v36 + 2128);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 2088);

  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(a28);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 2000);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a29);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(v36 + 1920);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a30);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(v36 + 1840);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a31);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 1760);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a32);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 1680);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 1640);
  *(void *)(v40 - 112) = v36 + 1616;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  *(void *)(v40 - 112) = *(void *)(v40 - 160);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));

  *(void *)(v40 - 112) = *(void *)(v40 - 128);
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  *(void *)(v40 - 112) = v38;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  if (*(char *)(v36 + 1511) < 0) {
    operator delete(*(void **)(v36 + 1488));
  }
  if (*(char *)(v36 + 1487) < 0) {
    operator delete(*(void **)(v36 + 1464));
  }
  if (*(char *)(v36 + 1463) < 0) {
    operator delete(*(void **)(v36 + 1440));
  }
  if (*(char *)(v36 + 1439) < 0) {
    operator delete(*(void **)(v36 + 1416));
  }
  *(void *)(v40 - 12_Block_object_dispose(&STACK[0x210], 8) = v36 + 768;
  *(void *)(v40 - 16sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v36 + 848;
  if (*(char *)(v36 + 1415) < 0) {
    operator delete(*(void **)(v36 + 1392));
  }
  if (*(char *)(v36 + 1391) < 0) {
    operator delete(*a24);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(v36 + 1328);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(a33);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(v36 + 1248);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(a34);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(v36 + 1168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(a35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(v36 + 1088);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(a36);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(v36 + 1008);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(*(void *)(v40 - 208));
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(v36 + 928);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(*(void *)(v40 - 200));
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(*(void *)(v40 - 160));
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(*(void *)(v40 - 192));
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(*(void *)(v40 - 128));
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 728);

  uint64_t v44 = *(void **)(v36 + 696);
  if (v44)
  {
    *(void *)(v36 + 704) = v44;
    operator delete(v44);
  }
  uint64_t v45 = *(void **)(v36 + 664);
  if (v45) {
    operator delete(v45);
  }
  *(void *)(v40 - 112) = v36 + 640;
  std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  *(void *)(v40 - 112) = *(void *)(v40 - 184);
  std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 112));
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 576);
  uint64_t v46 = *(void **)(v36 + 552);
  if (v46)
  {
    *(void *)(v36 + 56sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v46;
    operator delete(v46);
  }
  char v47 = *(void **)(v36 + 528);
  if (v47)
  {
    *(void *)(v36 + 536) = v47;
    operator delete(v47);
  }
  uint64_t v48 = *(void **)(v36 + 504);
  if (v48)
  {
    *(void *)(v36 + 512) = v48;
    operator delete(v48);
  }
  char v49 = *(void **)(v36 + 480);
  if (v49)
  {
    *(void *)(v36 + 48_Block_object_dispose(&STACK[0x210], 8) = v49;
    operator delete(v49);
  }
  uint64_t v50 = **(void ***)(v40 - 176);
  if (v50)
  {
    *(void *)(v36 + 464) = v50;
    operator delete(v50);
  }
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v36 + 416);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(*(void *)(v40 - 168));
  std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::~__hash_table(v36 + 336);
  uint64_t v51 = *(std::__shared_weak_count **)(v36 + 328);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  unint64_t v52 = *(std::__shared_weak_count **)(v36 + 312);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  uint64_t v53 = *(std::__shared_weak_count **)(v36 + 296);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  unint64_t v54 = *(std::__shared_weak_count **)(v36 + 280);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  unint64_t v55 = *(std::__shared_weak_count **)(v36 + 264);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }

  _Unwind_Resume(*(_Unwind_Exception **)(v40 - 136));
}

void ML3ImportSession::_populateExistingTrackIdentifiersForSource(ML3ImportSession *this, uint64_t a2)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1B3E93C70]();
  BOOL v5 = ML3TrackRulesIdentityPropertyForSource(a2);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 1);
    id v7 = +[ML3ComparisonPredicate predicateWithProperty:v5 value:&unk_1F09123E8 comparison:2];
    uint64_t v8 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:v6 predicate:v7 orderingTerms:0];

    v19[0] = v5;
    id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:1];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = ___ZN16ML3ImportSession42_populateExistingTrackIdentifiersForSourceEi_block_invoke;
    v13[3] = &__block_descriptor_44_e20_v40__0q8r__16Q24_B32l;
    void v13[4] = this;
    int v14 = a2;
    [v8 enumeratePersistentIDsAndProperties:v9 usingBlock:v13];

    int v10 = a2;
    *(void *)(*((void *)this + 83) + (((unint64_t)(int)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
    id v11 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(*((void *)this + 77) + 40 * v10 + 24);
      *(_DWORD *)stat buf = 134218242;
      uint64_t v16 = v12;
      __int16 v17 = 2114;
      uint32_t v18 = v5;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_DEFAULT, "saved %lu id mappings for existing tracks with %{public}@ != 0", buf, 0x16u);
    }
  }
}

void sub_1B04308DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession42_populateExistingTrackIdentifiersForSourceEi_block_invoke(uint64_t a1, unint64_t a2, id *a3)
{
  unint64_t v9 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = [*a3 longLongValue];
  uint64_t v7 = *(void *)(v5 + 616) + 40 * *(int *)(a1 + 40);
  unint64_t v8 = v6;
  std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, v6, &v8)[3] = a2;
  std::__hash_table<std::__hash_value_type<long long,unsigned long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,unsigned long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,unsigned long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,unsigned long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((float *)(*(void *)(v5 + 640) + 40 * *(int *)(a1 + 40)), a2, &v9)[3] = v6;
  if (*(unsigned char *)(v5 + 1512))
  {
    if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(v5 + 32)) {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(v5 + 728, a2, a2);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  id v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    id v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B0430BCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,unsigned long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,unsigned long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,unsigned long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,unsigned long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      char v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v18 = operator new(8 * *(void *)&prime);
  id v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  int v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    uint64_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v2_Block_object_dispose(&STACK[0x210], 8) = v21;
            goto LABEL_56;
          }
          void *v21 = *v27;
          void *v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v2_Block_object_dispose(&STACK[0x210], 8) = v27;
          uint64_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        int v21 = v27;
        uint64_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  int v29 = *(void **)a1;
  long long v30 = *(void **)(*(void *)a1 + 8 * v5);
  if (v30)
  {
    void *i = *v30;
LABEL_72:
    void *v30 = i;
    goto LABEL_73;
  }
  void *i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    unint64_t v31 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    long long v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_1B0430FB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_populateExistingContainerIdentifiersForSource(ML3ImportSession *this, int a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1B3E93C70]();
  if ((a2 - 1) <= 2)
  {
    unint64_t v5 = ML3ContainerRulesIdentityPropertyForSource(*((unsigned int *)this + 8));
    uint64_t v6 = *((void *)this + 1);
    unint64_t v7 = +[ML3ComparisonPredicate predicateWithProperty:v5 value:&unk_1F09123E8 comparison:2];
    uint8x8_t v8 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:v6 predicate:v7 orderingTerms:0];

    v18[0] = v5;
    unint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = ___ZN16ML3ImportSession46_populateExistingContainerIdentifiersForSourceEi_block_invoke;
    void v12[3] = &__block_descriptor_44_e20_v40__0q8r__16Q24_B32l;
    void v12[4] = this;
    int v13 = a2;
    [v8 enumeratePersistentIDsAndProperties:v9 usingBlock:v12];

    *((unsigned char *)this + 68_Block_object_dispose(&STACK[0x210], 8) = 1;
    int v10 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *((void *)this + 299);
      *(_DWORD *)stat buf = 134218242;
      uint64_t v15 = v11;
      __int16 v16 = 2114;
      size_t v17 = v5;
      _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_DEFAULT, "saved %lu id mappings for existing containers with %{public}@ != 0", buf, 0x16u);
    }
  }
}

void sub_1B04311B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession46_populateExistingContainerIdentifiersForSourceEi_block_invoke(uint64_t a1, unint64_t a2, id *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = [*a3 longLongValue];
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v5 + 2368, v6, &v6)[3] = a2;
  if (*(unsigned char *)(v5 + 1512))
  {
    if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(v5 + 32)) {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(v5 + 768, a2, a2);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  id v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    id v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B043146C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_populateExistingArtistIdentifiersForSource(ML3ImportSession *this, uint64_t a2)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1B3E93C70]();
  uint64_t v5 = ML3ArtistRulesIdentityPropertyForSource(a2);
  uint64_t v6 = *((void *)this + 1);
  unint64_t v7 = +[ML3ComparisonPredicate predicateWithProperty:v5 value:&unk_1F09123E8 comparison:2];
  uint8x8_t v8 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:v6 predicate:v7 orderingTerms:0];

  uint64_t v19 = 0;
  unint64_t v20 = &v19;
  uint64_t v21 = 0x5812000000;
  unint64_t v22 = __Block_byref_object_copy__21600;
  memset(v24, 0, sizeof(v24));
  uint8x8_t v23 = __Block_byref_object_dispose__21601;
  uint64_t v25 = 0;
  int v26 = 1065353216;
  v31[0] = v5;
  v31[1] = @"representative_item_pid";
  unint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:2];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke;
  void v18[3] = &unk_1E5FB74B8;
  void v18[4] = &v19;
  v18[5] = this;
  [v8 enumeratePersistentIDsAndProperties:v9 usingBlock:v18];

  int v10 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *((void *)this + 208);
    *(_DWORD *)stat buf = 134218242;
    uint64_t v28 = v11;
    __int16 v29 = 2114;
    long long v30 = v5;
    _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_DEFAULT, "saved %lu store id mappings for existing item artists with %{public}@", buf, 0x16u);
  }

  float v12 = v20 + 8;
  while (1)
  {
    float v12 = (void *)*v12;
    if (!v12) {
      break;
    }
    uint64_t v13 = v12[2];
    BOOL v14 = (void *)*((void *)this + 1);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke_37;
    v17[3] = &__block_descriptor_48_e31_v16__0__ML3DatabaseConnection_8l;
    void v17[4] = this;
    void v17[5] = v13;
    [v14 databaseConnectionAllowingWrites:0 withBlock:v17];
  }
  unint64_t v15 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *((void *)this + 213);
    *(_DWORD *)stat buf = 134217984;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_DEFAULT, "saved %lu name order mappings for existing artist name/section order", buf, 0xCu);
  }

  *((unsigned char *)this + 1517) = 1;
  _Block_object_dispose(&v19, 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v24[8]);
}

void sub_1B04317A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  _Block_object_dispose(va, 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21600(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 4_Block_object_dispose(&STACK[0x210], 8) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  unint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *unint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__21601(uint64_t a1)
{
  return std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 48);
}

void *___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke(uint64_t a1, unint64_t a2, id *a3)
{
  unint64_t v10 = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v9 = [*a3 longLongValue];
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 1640, v9, &v9)[3] = a2;
  uint64_t v7 = [a3[1] longLongValue];
  uint64_t result = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(void *)(*(void *)(a1 + 32) + 8) + 48, a2, &v10);
  result[3] = v7;
  return result;
}

void ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke_37(uint64_t a1, void *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = [NSNumber numberWithLongLong:*(void *)(a1 + 40)];
  v10[0] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:1];
  uint64_t v7 = [v3 executeQuery:@"SELECT item_artist_order, item_artist_order_section, series_name_order, series_name_order_section from item where item_artist_pid=? LIMIT 1", v6 withParameters];

  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke_2;
  void v9[3] = &__block_descriptor_48_e40_v32__0__ML3DatabaseRow_8__NSError_16_B24l;
  uint64_t v8 = *(void *)(a1 + 40);
  v9[4] = v4;
  void v9[5] = v8;
  [v7 enumerateRowsWithBlock:v9];
}

void sub_1B0431A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke_2(uint64_t *a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  uint64_t v6 = a1[4];
  uint64_t v7 = [v14 int64ForColumnIndex:0];
  int v8 = [v14 intForColumnIndex:1];
  unint64_t v9 = a1[5];
  a1 += 5;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 1680, v9, a1);
  v10[3] = v7;
  void v10[4] = v8;
  uint64_t v11 = [v14 int64ForColumnIndex:2];
  int v12 = [v14 intForColumnIndex:3];
  uint64_t v13 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 1760, *a1, a1);
  v13[3] = v11;
  void v13[4] = v12;
}

void sub_1B0431B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = a2;
  uint64_t v12 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *unint64_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B0431D50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_populateExistingAlbumArtistIdentifiersForSource(ML3ImportSession *this, uint64_t a2)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1B3E93C70]();
  id v5 = ML3AlbumArtistRulesIdentityPropertyForSource(a2);
  uint64_t v6 = *((void *)this + 1);
  if (a2 == 2) {
    +[ML3ComparisonPredicate predicateWithProperty:v5 value:&stru_1F08D4D70 comparison:2 caseInsensitive:1];
  }
  else {
  unint64_t v7 = +[ML3ComparisonPredicate predicateWithProperty:v5 value:&unk_1F09123E8 comparison:2];
  }
  uint8x8_t v8 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:v6 predicate:v7 orderingTerms:0];

  uint64_t v21 = 0;
  unint64_t v22 = &v21;
  uint64_t v23 = 0x5812000000;
  unint64_t v24 = __Block_byref_object_copy__21600;
  memset(v26, 0, sizeof(v26));
  uint64_t v25 = __Block_byref_object_dispose__21601;
  uint64_t v27 = 0;
  int v28 = 1065353216;
  v35[0] = v5;
  v35[1] = @"representative_item_pid";
  unint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v35 count:2];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke;
  void v19[3] = &unk_1E5FB7520;
  int v20 = a2;
  void v19[4] = &v21;
  void v19[5] = this;
  [v8 enumeratePersistentIDsAndProperties:v9 usingBlock:v19];

  unint64_t v10 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *((void *)this + 243);
    uint64_t v12 = *((void *)this + 238);
    *(_DWORD *)stat buf = 134218498;
    uint64_t v30 = v11;
    __int16 v31 = 2048;
    uint64_t v32 = v12;
    __int16 v33 = 2114;
    uint64_t v34 = v5;
    _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_DEFAULT, "saved %lu cloud id, %lu store id mappings for existing album artists with %{public}@", buf, 0x20u);
  }

  float v13 = v22 + 8;
  while (1)
  {
    float v13 = (void *)*v13;
    if (!v13) {
      break;
    }
    uint64_t v14 = v13[2];
    BOOL v15 = (void *)*((void *)this + 1);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke_50;
    void v18[3] = &__block_descriptor_48_e31_v16__0__ML3DatabaseConnection_8l;
    void v18[4] = this;
    v18[5] = v14;
    [v15 databaseConnectionAllowingWrites:0 withBlock:v18];
  }
  unint64_t v16 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *((void *)this + 248);
    *(_DWORD *)stat buf = 134217984;
    uint64_t v30 = v17;
    _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_DEFAULT, "saved %lu id mappings for existing album artist name/section order", buf, 0xCu);
  }

  *((unsigned char *)this + 151_Block_object_dispose(&STACK[0x210], 8) = 1;
  _Block_object_dispose(&v21, 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v26[8]);
}

void sub_1B04320E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke(uint64_t a1, unint64_t a2, id *a3)
{
  unint64_t v13 = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(_DWORD *)(a1 + 48) == 2)
  {
    id v7 = *a3;
    if ([v7 length])
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v7 UTF8String]);
      uint64_t v14 = __p;
      *((void *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 1920, (unsigned __int8 *)__p, (long long **)&v14)+ 5) = a2;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    __p[0] = (void *)[*a3 longLongValue];
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 1880, (unint64_t)__p[0], __p)[3] = a2;
  }
  uint64_t v8 = [a3[1] longLongValue];
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(void *)(*(void *)(a1 + 32) + 8) + 48, a2, &v13)[3] = v8;
  if (*(unsigned char *)(v6 + 1512))
  {
    int v9 = *(_DWORD *)(v6 + 32);
    if (*(_DWORD *)(a1 + 48) == v9 && (v9 - 1) <= 2) {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(v6 + 808, a2, a2);
    }
  }
}

void sub_1B0432268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke_50(uint64_t a1, void *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [NSNumber numberWithLongLong:*(void *)(a1 + 40)];
  v10[0] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:1];
  id v7 = [v3 executeQuery:@"SELECT album_artist_order, album_artist_order_section from item where album_artist_pid=? LIMIT 1", v6 withParameters];

  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke_2;
  void v9[3] = &__block_descriptor_48_e40_v32__0__ML3DatabaseRow_8__NSError_16_B24l;
  uint64_t v8 = *(void *)(a1 + 40);
  v9[4] = v4;
  void v9[5] = v8;
  [v7 enumerateRowsWithBlock:v9];
}

void sub_1B04323BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = [v10 int64ForColumnIndex:0];
  int v8 = [v10 intForColumnIndex:1];
  int v9 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 1960, *(void *)(a1 + 40), (uint64_t *)(a1 + 40));
  void v9[3] = v7;
  v9[4] = v8;
}

void sub_1B0432498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    char v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  BOOL v15 = *a3;
  long long v16 = **a3;
  *((void *)i + 4) = *((void *)*a3 + 2);
  *((_OWORD *)i + 1) = v16;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)BOOL v15 = 0;
  *((void *)i + 5) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    void *v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B04326E4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_populateExistingAlbumIdentifiersForSource(ML3ImportSession *this, uint64_t a2)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1B3E93C70]();
  id v5 = ML3AlbumRulesIdentityPropertyForSource(a2);
  uint64_t v6 = *((void *)this + 1);
  if (a2 == 2) {
    +[ML3ComparisonPredicate predicateWithProperty:v5 value:&stru_1F08D4D70 comparison:2 caseInsensitive:1];
  }
  else {
  unint64_t v7 = +[ML3ComparisonPredicate predicateWithProperty:v5 value:&unk_1F09123E8 comparison:2];
  }
  unint64_t v8 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:v6 predicate:v7 orderingTerms:0];

  uint64_t v21 = 0;
  size_t v22 = &v21;
  uint64_t v23 = 0x5812000000;
  unint64_t v24 = __Block_byref_object_copy__21600;
  memset(v26, 0, sizeof(v26));
  unint64_t v25 = __Block_byref_object_dispose__21601;
  uint64_t v27 = 0;
  int v28 = 1065353216;
  v35[0] = v5;
  v35[1] = @"representative_item_pid";
  unint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v35 count:2];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke;
  void v19[3] = &unk_1E5FB7520;
  int v20 = a2;
  void v19[4] = &v21;
  void v19[5] = this;
  [v8 enumeratePersistentIDsAndProperties:v9 usingBlock:v19];

  uint8x8_t v10 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *((void *)this + 269);
    uint64_t v12 = *((void *)this + 264);
    *(_DWORD *)stat buf = 134218498;
    uint64_t v30 = v11;
    __int16 v31 = 2048;
    uint64_t v32 = v12;
    __int16 v33 = 2114;
    uint64_t v34 = v5;
    _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_DEFAULT, "saved %lu cloud id, %lu store id mappings for existing album with %{public}@", buf, 0x20u);
  }

  unint64_t v13 = v22 + 8;
  while (1)
  {
    unint64_t v13 = (void *)*v13;
    if (!v13) {
      break;
    }
    uint64_t v14 = v13[2];
    BOOL v15 = (void *)*((void *)this + 1);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke_55;
    void v18[3] = &__block_descriptor_48_e31_v16__0__ML3DatabaseConnection_8l;
    void v18[4] = this;
    v18[5] = v14;
    [v15 databaseConnectionAllowingWrites:0 withBlock:v18];
  }
  long long v16 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *((void *)this + 274);
    *(_DWORD *)stat buf = 134217984;
    uint64_t v30 = v17;
    _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_DEFAULT, "saved %lu id mappings for existing album name/section order", buf, 0xCu);
  }

  *((unsigned char *)this + 1519) = 1;
  _Block_object_dispose(&v21, 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v26[8]);
}

void sub_1B0432A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke(uint64_t a1, unint64_t a2, id *a3)
{
  unint64_t v13 = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(_DWORD *)(a1 + 48) == 2)
  {
    id v7 = *a3;
    if ([v7 length])
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v7 UTF8String]);
      uint64_t v14 = __p;
      *((void *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 2128, (unsigned __int8 *)__p, (long long **)&v14)+ 5) = a2;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    __p[0] = (void *)[*a3 longLongValue];
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 2088, (unint64_t)__p[0], __p)[3] = a2;
  }
  uint64_t v8 = [a3[1] longLongValue];
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(void *)(*(void *)(a1 + 32) + 8) + 48, a2, &v13)[3] = v8;
  if (*(unsigned char *)(v6 + 1512))
  {
    int v9 = *(_DWORD *)(v6 + 32);
    if (*(_DWORD *)(a1 + 48) == v9 && (v9 - 1) <= 2) {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(v6 + 848, a2, a2);
    }
  }
}

void sub_1B0432C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke_55(uint64_t a1, void *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [NSNumber numberWithLongLong:*(void *)(a1 + 40)];
  v10[0] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:1];
  id v7 = [v3 executeQuery:@"SELECT album_order, album_order_section FROM item where album_pid=? LIMIT 1", v6 withParameters];

  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke_2;
  void v9[3] = &__block_descriptor_48_e40_v32__0__ML3DatabaseRow_8__NSError_16_B24l;
  uint64_t v8 = *(void *)(a1 + 40);
  v9[4] = v4;
  void v9[5] = v8;
  [v7 enumerateRowsWithBlock:v9];
}

void sub_1B0432D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = [v10 int64ForColumnIndex:0];
  int v8 = [v10 intForColumnIndex:1];
  int v9 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 2168, *(void *)(a1 + 40), (uint64_t *)(a1 + 40));
  void v9[3] = v7;
  v9[4] = v8;
}

void sub_1B0432E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getTrackPersistentID(uint64_t a1, void *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  char v62 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 104))(&__p);
  id v3 = v60;
  int64_t v4 = v60 - (unsigned char *)__p;
  if ((unint64_t)(v60 - (unsigned char *)__p) <= 0x37)
  {
    unint64_t v5 = 7 - (v4 >> 3);
    if (v5 > (v61 - v60) >> 3)
    {
      unint64_t v6 = (v61 - (unsigned char *)__p) >> 2;
      if (v6 <= 7) {
        unint64_t v6 = 7;
      }
      if ((unint64_t)(v61 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v7 = v6;
      }
      int v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v7);
      int v9 = __p;
      id v10 = v60;
      uint64_t v11 = &v8[8 * (v4 >> 3)];
      unint64_t v13 = &v8[8 * v12];
      bzero(v11, 8 * v5);
      uint64_t v14 = &v11[8 * v5];
      while (v10 != v9)
      {
        uint64_t v15 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v11 - 1) = v15;
        v11 -= 8;
      }
      std::string __p = v11;
      unint64_t v60 = v14;
      BOOL v61 = v13;
      if (v9) {
        operator delete(v9);
      }
      goto LABEL_17;
    }
    bzero(v60, 8 * v5);
    long long v16 = &v3[8 * v5];
    goto LABEL_14;
  }
  if (v4 != 56)
  {
    long long v16 = (char *)__p + 56;
LABEL_14:
    unint64_t v60 = v16;
  }
LABEL_17:
  BOOL v17 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(unsigned char *)(a1 + 1512) != 0;
  uint64_t v18 = *((void *)__p + *(int *)(a1 + 32));
  if (!*(unsigned char *)(a1 + 36)) {
    goto LABEL_40;
  }
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  while (1)
  {
    unint64_t v21 = *((void *)__p + v20);
    if (v21)
    {
      if (v17 && ((*(void *)(*(void *)(a1 + 664) + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      {
        ML3ImportSession::_populateExistingTrackIdentifiersForSource((ML3ImportSession *)a1, v20);
        unint64_t v21 = *((void *)__p + v20);
      }
      size_t v22 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(*(void *)(a1 + 616) + v19), v21);
      if (v22)
      {
        uint64_t v23 = v22;
        if (v20 == *(_DWORD *)(a1 + 32))
        {
          uint64_t v29 = v22[3];
          uint64_t v30 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_39;
          }
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = v29;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          __int16 v31 = "matched track to cached item pid %lld in source map %d";
          uint64_t v32 = v30;
          uint32_t v33 = 18;
          goto LABEL_38;
        }
        unint64_t v24 = [(ML3Entity *)[ML3Track alloc] initWithPersistentID:v22[3] inLibrary:*(void *)(a1 + 8)];
        unint64_t v25 = ML3TrackRulesIdentityPropertyForSource(*(unsigned int *)(a1 + 32));
        int v26 = [(ML3Entity *)v24 valueForProperty:v25];
        uint64_t v27 = [v26 longLongValue];

        if (!v27 || v27 == v18) {
          break;
        }
      }
    }
    ++v20;
    v19 += 40;
    if (v20 == 7) {
      goto LABEL_40;
    }
  }
  uint64_t v29 = v23[3];
  uint64_t v30 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_39;
  }
  int v34 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)stat buf = 134218496;
  *(void *)&uint8_t buf[4] = v29;
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v20;
  *(_WORD *)&buf[18] = 1024;
  *(_DWORD *)&buf[20] = v34;
  __int16 v31 = "matched track to cached item pid %lld in source map %d for import source %d";
  uint64_t v32 = v30;
  uint32_t v33 = 24;
LABEL_38:
  _os_log_impl(&dword_1B022D000, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
LABEL_39:

  if (!v29)
  {
LABEL_40:
    if (v62) {
      BOOL v35 = v17;
    }
    else {
      BOOL v35 = 0;
    }
    if (v35)
    {
      uint64_t v29 = 0;
      goto LABEL_66;
    }
    uint64_t v36 = (*(void (**)(void))(*(void *)*a2 + 112))();
    uint64_t v50 = v36;
    uint64_t v53 = (*(void (**)(void))(*(void *)*a2 + 120))();
    if (v36)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      id obj = v36;
      uint64_t v29 = 0;
      uint64_t v37 = [obj countByEnumeratingWithState:&v55 objects:v70 count:16];
      if (!v37) {
        goto LABEL_63;
      }
      uint64_t v38 = *(void *)v56;
      while (1)
      {
        for (uint64_t i = 0; i != v37; ++i)
        {
          if (*(void *)v56 != v38) {
            objc_enumerationMutation(obj);
          }
          id v40 = *(id *)(*((void *)&v55 + 1) + 8 * i);
          if (!*(unsigned char *)(a1 + 36))
          {
            uint64_t v41 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 100663312);
            v69[0] = v40;
            uint64_t v42 = +[ML3ComparisonPredicate predicateWithProperty:@"item_store.account_id" equalToInt64:v41];
            v69[1] = v42;
            char v43 = [MEMORY[0x1E4F1C978] arrayWithObjects:v69 count:2];
            uint64_t v44 = +[ML3CompoundPredicate predicateMatchingPredicates:v43];

            id v40 = (id)v44;
          }
          uint64_t v45 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:*(void *)(a1 + 8) predicate:v40 orderingTerms:v53];
          uint64_t v46 = v45;
          *(void *)stat buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x2020000000;
          uint64_t v68 = 0;
          if (v18)
          {
            v54[0] = MEMORY[0x1E4F143A8];
            v54[1] = 3221225472;
            void v54[2] = ___ZN16ML3ImportSession21_getTrackPersistentIDENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
            v54[3] = &unk_1E5FB7550;
            v54[5] = a1;
            v54[6] = v18;
            void v54[4] = buf;
            [v45 enumeratePersistentIDsUsingBlock:v54];
            uint64_t v47 = *(void *)(*(void *)&buf[8] + 24);
            if (!v47) {
              goto LABEL_60;
            }
          }
          else
          {
            uint64_t v47 = [v45 anyEntityPersistentID];
            *(void *)(*(void *)&buf[8] + 24) = v47;
            if (!v47) {
              goto LABEL_60;
            }
          }
          uint64_t v48 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v63 = 134218242;
            uint64_t v64 = v47;
            __int16 v65 = 2114;
            uint64_t v66 = v46;
            _os_log_impl(&dword_1B022D000, v48, OS_LOG_TYPE_DEFAULT, "matched track to item pid %lld using query %{public}@", v63, 0x16u);
          }

          uint64_t v29 = v47;
LABEL_60:
          _Block_object_dispose(buf, 8);

          if (v47) {
            goto LABEL_63;
          }
        }
        uint64_t v37 = [obj countByEnumeratingWithState:&v55 objects:v70 count:16];
        if (!v37)
        {
LABEL_63:

          goto LABEL_65;
        }
      }
    }
    uint64_t v29 = 0;
LABEL_65:
  }
LABEL_66:
  if (__p)
  {
    unint64_t v60 = __p;
    operator delete(__p);
  }
  return v29;
}

void sub_1B0433510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession21_getTrackPersistentIDENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(void *a1, unint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[5];
  int v7 = *(_DWORD *)(v6 + 32);
  int v8 = (void *)(*(void *)(v6 + 640) + 40 * v7);
  int8x8_t v9 = (int8x8_t)v8[1];
  if (!*(void *)&v9) {
    goto LABEL_17;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = a2;
    if (*(void *)&v9 <= a2) {
      unint64_t v11 = a2 % *(void *)&v9;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v9 - 1) & a2;
  }
  uint64_t v12 = *(void **)(*v8 + 8 * v11);
  if (!v12) {
    goto LABEL_17;
  }
  unint64_t v13 = (void *)*v12;
  if (!v13) {
    goto LABEL_17;
  }
  while (1)
  {
    unint64_t v14 = v13[1];
    if (v14 == a2) {
      break;
    }
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v9) {
        v14 %= *(void *)&v9;
      }
    }
    else
    {
      v14 &= *(void *)&v9 - 1;
    }
    if (v14 != v11) {
      goto LABEL_17;
    }
LABEL_16:
    unint64_t v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_17;
    }
  }
  if (v13[2] != a2) {
    goto LABEL_16;
  }
  if (v7 == 6 || (uint64_t v15 = v13[3]) == 0 || v15 == a1[6])
  {
LABEL_17:
    *(void *)(*(void *)(a1[4] + 8) + 24) = a2;
    *a4 = 1;
    return;
  }
  long long v16 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = a1[6];
    int v18 = 134218496;
    unint64_t v19 = a2;
    __int16 v20 = 2048;
    uint64_t v21 = v15;
    __int16 v22 = 2048;
    uint64_t v23 = v17;
    _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_DEFAULT, "skipping existing item pid %lld with source id %lld that does not match import item source id %lld", (uint8_t *)&v18, 0x20u);
  }
}

uint64_t ML3ImportSession::_newTrackPersistentID(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2;
  int v7 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = [a1 nextPersistentIDForImportItem:&v6];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int64_t v4 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134217984;
    uint64_t v9 = v3;
    _os_log_impl(&dword_1B022D000, v4, OS_LOG_TYPE_DEFAULT, "created new item pid %lld", buf, 0xCu);
  }

  return v3;
}

void sub_1B0433870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t ML3ImportSession::_getContainerPersistentID(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  BOOL v4 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(unsigned char *)(a1 + 1512) != 0;
  uint64_t v5 = ML3ContainerRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, v5);
  if (!v6) {
    goto LABEL_13;
  }
  unint64_t v7 = v6;
  if (v4 && !*(unsigned char *)(a1 + 688)) {
    ML3ImportSession::_populateExistingContainerIdentifiersForSource((ML3ImportSession *)a1, *(_DWORD *)(a1 + 32));
  }
  int v8 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 2368), v7);
  if (!v8) {
    goto LABEL_13;
  }
  uint64_t v9 = v8[3];
  uint64_t v10 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134217984;
    uint64_t v25 = v9;
    _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_DEFAULT, "matched to cached container pid %lld", buf, 0xCu);
  }

  if (!v9)
  {
LABEL_13:
    unint64_t v11 = (*(void (**)(void))(*(void *)*a2 + 112))();
    uint64_t v12 = (*(void (**)(void))(*(void *)*a2 + 120))();
    if (v11)
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v13 = v11;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v28 count:16];
      if (v14)
      {
        uint64_t v15 = *(void *)v21;
        while (2)
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v21 != v15) {
              objc_enumerationMutation(v13);
            }
            uint64_t v17 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Container, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(void *)(a1 + 8), *(void *)(*((void *)&v20 + 1) + 8 * i), v12, (void)v20);
            uint64_t v9 = [v17 anyEntityPersistentID];
            if (v9)
            {
              int v18 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = 134218242;
                uint64_t v25 = v9;
                __int16 v26 = 2114;
                uint64_t v27 = v17;
                _os_log_impl(&dword_1B022D000, v18, OS_LOG_TYPE_DEFAULT, "matched to container pid %lld using query %{public}@", buf, 0x16u);
              }

              goto LABEL_26;
            }
          }
          uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (v14) {
            continue;
          }
          break;
        }
      }
      uint64_t v9 = 0;
LABEL_26:
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  return v9;
}

void sub_1B0433B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getContainerPersistentID(ML3ImportSession *this, unint64_t a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  BOOL v4 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)this + 296, a2);
  if (v4)
  {
    uint64_t v5 = v4[3];
    uint64_t v17 = v5;
  }
  else
  {
    uint64_t v6 = ML3ContainerRulesIdentityPropertyForSource(*((unsigned int *)this + 8));
    unint64_t v7 = [NSString stringWithFormat:@"SELECT ROWID,%@ FROM container WHERE %@=?", v6, v6];
    int v8 = (void *)*((void *)this + 2);
    uint64_t v9 = [NSNumber numberWithLongLong:a2];
    v18[0] = v9;
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1];
    unint64_t v11 = [v8 executeQuery:v7 withParameters:v10];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = ___ZN16ML3ImportSession25_getContainerPersistentIDEx_block_invoke;
    v13[3] = &unk_1E5FB77B8;
    void v13[4] = &v14;
    [v11 enumerateRowsWithBlock:v13];

    uint64_t v5 = v15[3];
  }
  _Block_object_dispose(&v14, 8);
  return v5;
}

void sub_1B0433D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  uint64_t v14 = v12;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession25_getContainerPersistentIDEx_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = [v4 numberForColumnIndex:0];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 longLongValue];
}

void sub_1B0433E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getPersonPersistentID(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  (*(void (**)(unsigned char *__return_ptr))(**(void **)a2 + 24))(buf);
  if ((v24[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)&v24[2], *(std::string::size_type *)&v24[10]);
    *(void *)stat buf = &unk_1F08C3230;
    if ((v24[25] & 0x80000000) != 0) {
      operator delete(*(void **)&v24[2]);
    }
  }
  else
  {
    std::string v20 = *(std::string *)&v24[2];
  }
  id v4 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a1 + 2448), (unsigned __int8 *)&v20);
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 5);
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "matched to cached person pid %lld", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v6 = (*(void (**)(void))(**(void **)a2 + 112))();
    unint64_t v7 = (*(void (**)(void))(**(void **)a2 + 120))();
    if ([v6 count])
    {
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      int v8 = v6;
      uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v21 count:16];
      if (v9)
      {
        uint64_t v15 = a1 + 2448;
        uint64_t v10 = *(void *)v17;
        while (2)
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v17 != v10) {
              objc_enumerationMutation(v8);
            }
            uint64_t v12 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:*(void *)(a1 + 8) predicate:*(void *)(*((void *)&v16 + 1) + 8 * i) orderingTerms:v7];
            uint64_t v5 = [v12 anyEntityPersistentID];
            if (v5)
            {
              id v13 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = 134218242;
                *(void *)&uint8_t buf[4] = v5;
                __int16 v23 = 2114;
                *(void *)uint64_t v24 = v12;
                _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_DEFAULT, "matched to person pid %lld using query %{public}@", buf, 0x16u);
              }

              *(void *)stat buf = &v20;
              *((void *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (unsigned __int8 *)&v20, (long long **)buf)+ 5) = v5;

              goto LABEL_21;
            }
          }
          uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v21 count:16];
          if (v9) {
            continue;
          }
          break;
        }
      }
      uint64_t v5 = 0;
LABEL_21:
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1B04341B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      id v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          id v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  id v13 = (char *)operator new(0x30uLL);
  *(void *)id v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v15 = (std::string *)(v13 + 16);
  long long v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  *((void *)v13 + 5) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)id v13 = *v25;
LABEL_41:
    void *v25 = v13;
    goto LABEL_42;
  }
  *(void *)id v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v26 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1B0434584(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getAlbumArtistPersistentID(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  unint64_t v6 = v5;
  BOOL v7 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(unsigned char *)(a1 + 1512) != 0;
  int v8 = *(_DWORD *)(a1 + 32);
  if ([v5 length])
  {
    ML3CPPStringFromData((NSData *)__p, v6);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v36 = 0;
  }
  if (ML3AlbumArtistRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32)))
  {
    if (*(_DWORD *)(a1 + 32) == 2)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)a2 + 24))(buf);
      if ((v40[25] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)&v40[2], *(std::string::size_type *)&v40[10]);
        *(void *)stat buf = &unk_1F08C3230;
        if ((v40[25] & 0x80000000) != 0) {
          operator delete(*(void **)&v40[2]);
        }
      }
      else
      {
        std::string v34 = *(std::string *)&v40[2];
      }
      std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      if (!size) {
        goto LABEL_33;
      }
      if (v7 && !*(unsigned char *)(a1 + 1518)) {
        ML3ImportSession::_populateExistingAlbumArtistIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
      }
      unint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a1 + 1920), (unsigned __int8 *)&v34);
      if (v14)
      {
        uint64_t v11 = *((void *)v14 + 5);
        uint64_t v15 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          long long v16 = &v34;
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v16 = (std::string *)v34.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)stat buf = 134218242;
          *(void *)&uint8_t buf[4] = v11;
          __int16 v39 = 2082;
          *(void *)id v40 = v16;
          _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_DEFAULT, "matched to cached albumArtistPID=%lld on cloudID=%{public}s", buf, 0x16u);
        }
      }
      else
      {
LABEL_33:
        uint64_t v11 = 0;
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v34.__r_.__value_.__l.__data_);
        if (v11) {
          goto LABEL_64;
        }
        goto LABEL_38;
      }
      goto LABEL_35;
    }
    unint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 32))();
    if (v9)
    {
      if (v7 && !*(unsigned char *)(a1 + 1518)) {
        ML3ImportSession::_populateExistingAlbumArtistIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
      }
      uint8x8_t v10 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 1880), v9);
      if (v10)
      {
        uint64_t v11 = v10[3];
        unint64_t v12 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = v11;
          __int16 v39 = 2048;
          *(void *)id v40 = v9;
          _os_log_impl(&dword_1B022D000, v12, OS_LOG_TYPE_DEFAULT, "matched to cached albumArtistPID=%lld on sourceID=%lld", buf, 0x16u);
        }

LABEL_35:
        if (v11) {
          goto LABEL_64;
        }
      }
    }
  }
LABEL_38:
  if (!v6) {
    goto LABEL_48;
  }
  if ((v8 - 1) < 2) {
    goto LABEL_48;
  }
  long long v17 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a1 + 1128), (unsigned __int8 *)__p);
  if (!v17) {
    goto LABEL_48;
  }
  float v18 = (uint64_t *)*((void *)v17 + 5);
  float v19 = (std::__shared_weak_count *)*((void *)v17 + 6);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *v18;
  BOOL v20 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134217984;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl(&dword_1B022D000, v20, OS_LOG_TYPE_DEFAULT, "matched to cached album artist import item=%lld based on grouping key", buf, 0xCu);
  }

  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (!v11)
  {
LABEL_48:
    unint64_t v21 = (*(void (**)(void))(**(void **)a2 + 112))();
    unint64_t v22 = v21;
    if (v21)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v23 = v21;
      uint64_t v24 = [v23 countByEnumeratingWithState:&v30 objects:v37 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v31;
        while (2)
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v31 != v25) {
              objc_enumerationMutation(v23);
            }
            uint64_t v27 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3AlbumArtist, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(void *)(a1 + 8), *(void *)(*((void *)&v30 + 1) + 8 * i), 0, (void)v30);
            uint64_t v11 = [v27 anyEntityPersistentID];
            if (v11)
            {
              int v28 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = 134218242;
                *(void *)&uint8_t buf[4] = v11;
                __int16 v39 = 2114;
                *(void *)id v40 = v27;
                _os_log_impl(&dword_1B022D000, v28, OS_LOG_TYPE_DEFAULT, "matched to album artist pid %lld using query %{public}@", buf, 0x16u);
              }

              goto LABEL_61;
            }
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v30 objects:v37 count:16];
          if (v24) {
            continue;
          }
          break;
        }
      }
      uint64_t v11 = 0;
LABEL_61:
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
LABEL_64:
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }

  return v11;
}

void sub_1B0434AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::begin(ML3ImportSession *this, int a2, int a3, int a4)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  int v8 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *((_DWORD *)this + 8);
    *(_DWORD *)stat buf = 134219008;
    uint64_t v66 = this;
    __int16 v67 = 1024;
    int v68 = v9;
    __int16 v69 = 1024;
    int v70 = a2;
    __int16 v71 = 1024;
    int v72 = a3;
    __int16 v73 = 1024;
    int v74 = a4;
    _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_DEFAULT, "starting import session %p. source=%d, itemCount=%d, isReset=%d, clientInitiatedReset=%d", buf, 0x24u);
  }

  bzero((char *)this + 152, 0x60uLL);
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  *((void *)this + 3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v10;
  *((_DWORD *)this + 62) = a2;
  *((unsigned char *)this + 1512) = a3;
  if ([*((id *)this + 2) journalingMode] == 1)
  {
    uint64_t v11 = [*((id *)this + 1) connectionPool];
    uint64_t v12 = [v11 _connectionForWriting:0 useThreadConnection:0 storeThreadLocalConnection:1];
    id v13 = (void *)*((void *)this + 8);
    *((void *)this + _Block_object_dispose(&STACK[0x210], 8) = v12;
  }
  else
  {
    id v14 = *((id *)this + 2);
    uint64_t v11 = (void *)*((void *)this + 8);
    *((void *)this + _Block_object_dispose(&STACK[0x210], 8) = v14;
  }

  uint64_t v15 = [*((id *)this + 2) executeQuery:@"SELECT COUNT() FROM sort_map"];
  uint64_t v16 = [v15 int64ValueForFirstRowAndColumn];

  BOOL v18 = *((_DWORD *)this + 62) > 0x14u && v16 < 100000;
  float v19 = [[ML3SortMap alloc] initWithConnection:*((void *)this + 2) library:*((void *)this + 1) preloadNames:v18];
  BOOL v20 = (void *)*((void *)this + 7);
  *((void *)this + 7) = v19;

  unsigned int v21 = *((_DWORD *)this + 62);
  if (v21 > 0x3E7 || a3)
  {
    unint64_t v22 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_DEFAULT, "dropping indexes for large import", buf, 2u);
    }

    *((unsigned char *)this + 1513) = 1;
    if (!+[ML3MusicLibrary dropIndexesUsingConnection:tableNames:](ML3MusicLibrary, "dropIndexesUsingConnection:tableNames:", *((void *)this + 2), "'item', 'item_extra', 'item_stats'"))
    {
      id v23 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl(&dword_1B022D000, v23, OS_LOG_TYPE_ERROR, "failed to drop indexes. this is non-fatal for now", buf, 2u);
      }
    }
    unsigned int v21 = *((_DWORD *)this + 62);
  }
  if (v21 >= 0x15)
  {
    uint64_t v24 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *((_DWORD *)this + 62);
      *(_DWORD *)stat buf = 67109120;
      LODWORD(v66) = v25;
      _os_log_impl(&dword_1B022D000, v24, OS_LOG_TYPE_DEFAULT, "disabling triggers for _approximateItemCount=%d", buf, 8u);
    }

    ML3ImportSession::_disableTriggers(this);
  }
  unint64_t v26 = [*((id *)this + 1) valueForDatabaseProperty:@"MLResetCollectionsOnNextImport"];
  *((unsigned char *)this + 1514) = [v26 BOOLValue];

  if (*((unsigned char *)this + 1514))
  {
    uint64_t v27 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v27, OS_LOG_TYPE_DEFAULT, "resetting collection data", buf, 2u);
    }

    [*((id *)this + 2) executeUpdate:@"UPDATE album SET representative_item_pid=0"];
    [*((id *)this + 2) executeUpdate:@"UPDATE album_artist SET representative_item_pid=0"];
    [*((id *)this + 2) executeUpdate:@"UPDATE item_artist SET representative_item_pid=0"];
  }
  if (!a3) {
    goto LABEL_36;
  }
  int v28 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_1B022D000, v28, OS_LOG_TYPE_DEFAULT, "preparing for a reset", buf, 2u);
  }

  uint64_t v29 = *((unsigned int *)this + 8);
  if (!v29)
  {
LABEL_36:
    uint64_t v31 = 1;
    goto LABEL_73;
  }
  if v29 == 2 && (a4)
  {
    int v30 = 2;
  }
  else
  {
    ML3ImportSession::_populateExistingTrackIdentifiersForSource(this, v29);
    int v30 = *((_DWORD *)this + 8);
  }
  ML3ImportSession::_populateExistingContainerIdentifiersForSource(this, v30);
  if (_os_feature_enabled_impl())
  {
    ML3ImportSession::_populateExistingArtistIdentifiersForSource(this, *((unsigned int *)this + 8));
    ML3ImportSession::_populateExistingAlbumArtistIdentifiersForSource(this, *((unsigned int *)this + 8));
    ML3ImportSession::_populateExistingAlbumIdentifiersForSource(this, *((unsigned int *)this + 8));
  }
  long long v32 = ML3TrackRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
  long long v33 = ML3NonQualifiedColumnNameFromProperty(v32);

  std::string v34 = (void *)*((void *)this + 2);
  BOOL v35 = [NSString stringWithFormat:@"UPDATE item_store SET %@=0", v33];
  uint64_t v31 = [v34 executeUpdate:v35];

  if ((v31 & 1) == 0)
  {
    uint64_t v36 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v36, OS_LOG_TYPE_ERROR, "failed to remove source for tracks - aborting", buf, 2u);
    }
  }
  uint64_t v37 = ML3ContainerRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
  ML3NonQualifiedColumnNameFromProperty(v37);
  uint64_t v38 = (ML3ImportSession *)objc_claimAutoreleasedReturnValue();

  if (v38)
  {
    __int16 v39 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 138543362;
      uint64_t v66 = v38;
      _os_log_impl(&dword_1B022D000, v39, OS_LOG_TYPE_DEFAULT, "Clearing containerSourceIdentityProperty=%{public}@", buf, 0xCu);
    }

    id v40 = (void *)*((void *)this + 2);
    uint64_t v41 = [NSString stringWithFormat:@"UPDATE container SET %@=0", v38];
    LOBYTE(v4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = [v40 executeUpdate:v41];

    if (v40)
    {
      uint64_t v31 = 1;
    }
    else
    {
      uint64_t v42 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl(&dword_1B022D000, v42, OS_LOG_TYPE_ERROR, "failed to remove source for containers - aborting", buf, 2u);
      }

      uint64_t v31 = 0;
    }
  }
  char v43 = ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
  ML3NonQualifiedColumnNameFromProperty(v43);
  uint64_t v44 = (ML3ImportSession *)objc_claimAutoreleasedReturnValue();

  if (v44)
  {
    uint64_t v45 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 138543362;
      uint64_t v66 = v44;
      _os_log_impl(&dword_1B022D000, v45, OS_LOG_TYPE_DEFAULT, "Clearing albumArtistSourceIdentityProperty=%{public}@", buf, 0xCu);
    }

    uint64_t v46 = (void *)*((void *)this + 2);
    if (*((_DWORD *)this + 8) == 2)
    {
      uint64_t v47 = [NSString stringWithFormat:@"UPDATE album_artist SET %@=''", v44];
      char v48 = [v46 executeUpdate:v47];

      if (v48)
      {
LABEL_57:
        uint64_t v31 = 1;
        goto LABEL_62;
      }
    }
    else
    {
      char v49 = [NSString stringWithFormat:@"UPDATE album_artist SET %@=0", v44];
      char v50 = [v46 executeUpdate:v49];

      if (v50) {
        goto LABEL_57;
      }
    }
    uint64_t v51 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      uint64_t v66 = v44;
      _os_log_impl(&dword_1B022D000, v51, OS_LOG_TYPE_ERROR, "failed to remove source property=%{public}@ for album artists - aborting", buf, 0xCu);
    }

    uint64_t v31 = 0;
  }
LABEL_62:
  unint64_t v52 = ML3AlbumRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
  ML3NonQualifiedColumnNameFromProperty(v52);
  uint64_t v53 = (ML3ImportSession *)objc_claimAutoreleasedReturnValue();

  if (v53)
  {
    unint64_t v54 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 138543362;
      uint64_t v66 = v53;
      _os_log_impl(&dword_1B022D000, v54, OS_LOG_TYPE_DEFAULT, "Clearing albumSourceIdentityProperty=%{public}@", buf, 0xCu);
    }

    long long v55 = (void *)*((void *)this + 2);
    if (*((_DWORD *)this + 8) == 2)
    {
      long long v56 = [NSString stringWithFormat:@"UPDATE album SET %@=''", v53];
      char v57 = [v55 executeUpdate:v56];

      if (v57)
      {
LABEL_67:
        uint64_t v31 = 1;
        goto LABEL_72;
      }
    }
    else
    {
      long long v58 = [NSString stringWithFormat:@"UPDATE album SET %@=0", v53];
      char v59 = [v55 executeUpdate:v58];

      if (v59) {
        goto LABEL_67;
      }
    }
    unint64_t v60 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138543362;
      uint64_t v66 = v53;
      _os_log_impl(&dword_1B022D000, v60, OS_LOG_TYPE_ERROR, "failed to remove source property=%{public}@ for album - aborting", buf, 0xCu);
    }

    uint64_t v31 = 0;
  }
LABEL_72:

LABEL_73:
  BOOL v61 = [*((id *)this + 8) executeQuery:@"SELECT 1 FROM sort_map WHERE name_order IS NULL"];
  int v62 = [v61 hasAtLeastOneRow];

  if (v62)
  {
    uint64_t v63 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v63, OS_LOG_TYPE_DEFAULT, "sort_map contains at least one NULL name_order, updating now...", buf, 2u);
    }

    [*((id *)this + 1) updateSortMapOnConnection:*((void *)this + 2) forceUpdateOriginals:0];
  }
  return v31;
}

void sub_1B0435560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_disableTriggers(ML3ImportSession *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t result = [&unk_1F0910A50 countByEnumeratingWithState:&v11 objects:v17 count:16];
  uint64_t v3 = result;
  if (result)
  {
    uint64_t v4 = *(void *)v12;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(&unk_1F0910A50);
        }
        uint64_t v6 = *(void *)(*((void *)&v11 + 1) + 8 * v5);
        BOOL v7 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 138543362;
          uint64_t v16 = v6;
          _os_log_impl(&dword_1B022D000, v7, OS_LOG_TYPE_DEFAULT, "dropping trigger: %{public}@", buf, 0xCu);
        }

        int v8 = (void *)*((void *)this + 2);
        int v9 = [@"DROP TRIGGER IF EXISTS " stringByAppendingString:v6];
        LOBYTE(v_Block_object_dispose(&STACK[0x210], 8) = [v8 executeUpdate:v9];

        if ((v8 & 1) == 0)
        {
          uint64_t v10 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)stat buf = 0;
            _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_ERROR, "failed to drop trigger", buf, 2u);
          }
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [&unk_1F0910A50 countByEnumeratingWithState:&v11 objects:v17 count:16];
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B0435818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ImportSession::_addTrackDataToSourceMaps(uint64_t a1, void *a2)
{
  uint64_t v4 = ML3TrackRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, v4);
  if (v5)
  {
    unint64_t v6 = v5;
    uint64_t v7 = *(void *)(*a2 + 8);
    uint64_t v8 = *(void *)(a1 + 616) + 40 * *(int *)(a1 + 32);
    unint64_t v10 = v6;
    std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v8, v6, &v10)[3] = v7;
  }
  else
  {
    int v9 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_ERROR, "no identity property for track import item", buf, 2u);
    }
  }
}

uint64_t ML3ImportSession::_addItemArtistDataToSourceMaps(uint64_t a1, void *a2)
{
  uint64_t result = ML3ItemArtistRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  if (result)
  {
    unint64_t v6 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, result);
    uint64_t v5 = *(void *)(*a2 + 8);
    uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1640, v6, &v6);
    *(void *)(result + 24) = v5;
  }
  return result;
}

void ML3ImportSession::_addAlbumArtistDataToSourceMaps(uint64_t a1, void *a2)
{
  uint64_t v4 = ML3AlbumArtistRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  if (v4)
  {
    if (*(_DWORD *)(a1 + 32) == 2)
    {
      (*(void (**)(long long **__return_ptr))(*(void *)*a2 + 24))(v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v7[0] = (long long *)&unk_1F08C3230;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string v9 = __p;
      }
      uint64_t v6 = *(void *)(*a2 + 8);
      v7[0] = (long long *)&v9;
      *((void *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1920, (unsigned __int8 *)&v9, v7)+ 5) = v6;
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v7[0] = (long long *)(*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, v4);
      uint64_t v5 = *(void *)(*a2 + 8);
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1880, (unint64_t)v7[0], v7)[3] = v5;
    }
  }
}

void sub_1B0435AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ML3ImportSession::_addAlbumDataToSourceMaps(uint64_t a1, void *a2)
{
  uint64_t v4 = ML3AlbumRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  if (*(_DWORD *)(a1 + 32) == 2)
  {
    (*(void (**)(long long **__return_ptr))(*(void *)*a2 + 24))(v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v7[0] = (long long *)&unk_1F08C3230;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v9 = __p;
    }
    uint64_t v6 = *(void *)(*a2 + 8);
    v7[0] = (long long *)&v9;
    *((void *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2128, (unsigned __int8 *)&v9, v7)+ 5) = v6;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v7[0] = (long long *)(*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, v4);
    uint64_t v5 = *(void *)(*a2 + 8);
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 2088, (unint64_t)v7[0], v7)[3] = v5;
  }
}

void sub_1B0435C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_prepareTrackForImport(uint64_t a1, uint64_t *a2, int a3, char a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*a2 + 8)) {
    BOOL v4 = a3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    return 0;
  }
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  v21[0] = *a2;
  v21[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t TrackPersistentID = ML3ImportSession::_getTrackPersistentID(a1, v21);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (!TrackPersistentID && (a4 & 1) != 0) {
    return 2;
  }
  if (!TrackPersistentID || (a4 & 1) != 0)
  {
LABEL_27:
    BOOL v14 = TrackPersistentID != 0;
    if (!TrackPersistentID)
    {
      uint64_t v15 = *a2;
      uint64_t v16 = (std::__shared_weak_count *)a2[1];
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t TrackPersistentID = ML3ImportSession::_newTrackPersistentID(*(void **)(a1 + 72), v15, v16);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    goto LABEL_33;
  }
  if (std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 576), TrackPersistentID))
  {
    long long v11 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a2 + 88))(__p);
      long long v12 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)stat buf = 136446210;
      id v23 = v12;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_DEFAULT, "PID collision detected for track=%{public}s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    if (!ML3ImportSession::flush((ML3ImportSession *)a1, 1)) {
      return 1;
    }
    long long v13 = (std::__shared_weak_count *)a2[1];
    v18[0] = *a2;
    v18[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t TrackPersistentID = ML3ImportSession::_getTrackPersistentID(a1, v18);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    goto LABEL_27;
  }
  BOOL v14 = TrackPersistentID != 0;
LABEL_33:
  uint64_t result = 0;
  uint64_t v17 = *a2;
  *(unsigned char *)(v17 + 16) = v14;
  *(void *)(v17 + _Block_object_dispose(&STACK[0x210], 8) = TrackPersistentID;
  return result;
}

void sub_1B0435F20(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::flush(ML3ImportSession *this, int a2)
{
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  uint64_t v209 = 0;
  unint64_t v210 = &v209;
  uint64_t v211 = 0x2020000000;
  char v212 = 1;
  BOOL v4 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_1B022D000, v4, OS_LOG_TYPE_DEFAULT, "starting to flush (all=%{BOOL}u)", buf, 8u);
  }

  unint64_t v5 = *((void *)this + 258);
  if (a2)
  {
    if (!v5)
    {
LABEL_7:
      if (!*((void *)this + 253)) {
        goto LABEL_40;
      }
    }
  }
  else if (v5 <= 0x3E7)
  {
    goto LABEL_7;
  }
  uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *((void *)this + 258);
    uint64_t v8 = *((void *)this + 253);
    *(_DWORD *)stat buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v8;
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "flushing %u album artist insertions (_updatedAlbumArtistNameOrder size=%u)", buf, 0xEu);
  }

  *(void *)char v206 = 0;
  char v207 = 0;
  v208[0] = 0;
  std::vector<std::shared_ptr<ML3ImportItem>>::reserve(v206, *((void *)this + 258));
  for (uint64_t i = (uint64_t *)*((void *)this + 257); i; uint64_t i = (uint64_t *)*i)
  {
    long long v10 = *(_OWORD *)(i + 3);
    long long v11 = (std::__shared_weak_count *)i[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v12 = v207;
      uint64_t v13 = v208[0];
      if ((unint64_t)v207 >= v208[0]) {
        goto LABEL_17;
      }
      *char v207 = v10;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v12 = v207;
      uint64_t v13 = v208[0];
      if ((unint64_t)v207 >= v208[0])
      {
LABEL_17:
        long long v192 = v10;
        uint64_t v15 = ((uint64_t)v12 - *(void *)v206) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - *(void *)v206;
        if (v17 >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        v219 = v208;
        float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v18);
        char v20 = &v19[16 * v15];
        *(void *)stat buf = v19;
        *(void *)&buf[8] = v20;
        v218 = &v19[16 * v21];
        *(_OWORD *)char v20 = v192;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&uint8_t buf[16] = v20 + 16;
        std::vector<std::shared_ptr<ML3ImportItem>>::__swap_out_circular_buffer(v206, buf);
        BOOL v14 = v207;
        std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
        goto LABEL_26;
      }
      *char v207 = v10;
    }
    BOOL v14 = v12 + 1;
LABEL_26:
    char v207 = v14;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  if (!*((unsigned char *)v210 + 24)) {
    goto LABEL_35;
  }
  unint64_t v22 = (std::__shared_weak_count *)*((void *)this + 35);
  v205[0] = *((void *)this + 34);
  v205[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v23 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)v206, (uint64_t)v205);
  *((unsigned char *)v210 + 24) = v23;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if ((v23 & 1) == 0)
  {
    int v25 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v25, OS_LOG_TYPE_ERROR, "failed to import added album artists", buf, 2u);
    }
  }
  else
  {
LABEL_35:
    char updated = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)v206, +[ML3AlbumArtist revisionTrackingCode]);
    *((unsigned char *)v210 + 24) = updated;
  }
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)this + 2040);
  *(void *)stat buf = v206;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_40:
  unint64_t v26 = objc_msgSend(*((id *)this + 260), "count", v192);
  int v27 = v26;
  if (v26) {
    char v28 = a2;
  }
  else {
    char v28 = 0;
  }
  if ((v28 & 1) != 0 || v26 >= 0x3E8)
  {
    uint64_t v29 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v27;
      _os_log_impl(&dword_1B022D000, v29, OS_LOG_TYPE_DEFAULT, "flushing %u album artist deletions", buf, 8u);
    }

    int v30 = ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
    if ([v30 length])
    {
      uint64_t v31 = (void *)*((void *)this + 260);
      v204[0] = MEMORY[0x1E4F143A8];
      v204[1] = 3221225472;
      v204[2] = ___ZN16ML3ImportSession5flushEb_block_invoke;
      v204[3] = &unk_1E5FB7578;
      v204[4] = &v209;
      v204[5] = this;
      [v31 enumerateObjectsUsingBlock:v204];
    }
    [*((id *)this + 260) removeAllObjects];
  }
  unint64_t v32 = *((void *)this + 284);
  if (a2)
  {
    if (!v32)
    {
LABEL_54:
      if (!*((void *)this + 279)) {
        goto LABEL_87;
      }
    }
  }
  else if (v32 <= 0x3E7)
  {
    goto LABEL_54;
  }
  long long v33 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v34 = *((void *)this + 284);
    uint64_t v35 = *((void *)this + 279);
    *(_DWORD *)stat buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v34;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v35;
    _os_log_impl(&dword_1B022D000, v33, OS_LOG_TYPE_DEFAULT, "flushing %u album insertions (_updatedAlbumNameOrder size=%u)", buf, 0xEu);
  }

  *(void *)char v206 = 0;
  char v207 = 0;
  v208[0] = 0;
  std::vector<std::shared_ptr<ML3ImportItem>>::reserve(v206, *((void *)this + 284));
  for (uint64_t j = (uint64_t *)*((void *)this + 283); j; uint64_t j = (uint64_t *)*j)
  {
    long long v37 = *(_OWORD *)(j + 3);
    uint64_t v38 = (std::__shared_weak_count *)j[4];
    if (v38)
    {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      __int16 v39 = v207;
      uint64_t v40 = v208[0];
      if ((unint64_t)v207 >= v208[0]) {
        goto LABEL_64;
      }
      *char v207 = v37;
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      __int16 v39 = v207;
      uint64_t v40 = v208[0];
      if ((unint64_t)v207 >= v208[0])
      {
LABEL_64:
        long long v193 = v37;
        uint64_t v42 = ((uint64_t)v39 - *(void *)v206) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60) {
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v44 = v40 - *(void *)v206;
        if (v44 >> 3 > v43) {
          unint64_t v43 = v44 >> 3;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        v219 = v208;
        uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v45);
        uint64_t v47 = &v46[16 * v42];
        *(void *)stat buf = v46;
        *(void *)&buf[8] = v47;
        v218 = &v46[16 * v48];
        *(_OWORD *)uint64_t v47 = v193;
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&uint8_t buf[16] = v47 + 16;
        std::vector<std::shared_ptr<ML3ImportItem>>::__swap_out_circular_buffer(v206, buf);
        uint64_t v41 = v207;
        std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
        goto LABEL_73;
      }
      *char v207 = v37;
    }
    uint64_t v41 = v39 + 1;
LABEL_73:
    char v207 = v41;
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
  }
  if (!*((unsigned char *)v210 + 24)) {
    goto LABEL_82;
  }
  char v49 = (std::__shared_weak_count *)*((void *)this + 33);
  v203[0] = *((void *)this + 32);
  v203[1] = v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v50 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)v206, (uint64_t)v203);
  *((unsigned char *)v210 + 24) = v50;
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if ((v50 & 1) == 0)
  {
    unint64_t v52 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v52, OS_LOG_TYPE_ERROR, "failed to import added albums", buf, 2u);
    }
  }
  else
  {
LABEL_82:
    char v51 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)v206, +[ML3Album revisionTrackingCode]);
    *((unsigned char *)v210 + 24) = v51;
  }
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)this + 2248);
  *(void *)stat buf = v206;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_87:
  unint64_t v53 = objc_msgSend(*((id *)this + 286), "count", v193);
  int v55 = v53;
  if (v53) {
    char v56 = a2;
  }
  else {
    char v56 = 0;
  }
  if ((v56 & 1) != 0 || v53 >= 0x3E8)
  {
    char v57 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v55;
      _os_log_impl(&dword_1B022D000, v57, OS_LOG_TYPE_DEFAULT, "flushing %u album deletions", buf, 8u);
    }

    long long v58 = ML3AlbumRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
    if ([v58 length])
    {
      char v59 = (void *)*((void *)this + 286);
      v202[0] = MEMORY[0x1E4F143A8];
      v202[1] = 3221225472;
      v202[2] = ___ZN16ML3ImportSession5flushEb_block_invoke_117;
      v202[3] = &unk_1E5FB7578;
      v202[4] = &v209;
      v202[5] = this;
      [v59 enumerateObjectsUsingBlock:v202];
    }
    [*((id *)this + 286) removeAllObjects];
  }
  unint64_t v60 = *((void *)this + 233);
  if (a2)
  {
    if (!v60)
    {
LABEL_101:
      if (!*((void *)this + 218)) {
        goto LABEL_134;
      }
    }
  }
  else if (v60 <= 0x3E7)
  {
    goto LABEL_101;
  }
  BOOL v61 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v62 = *((void *)this + 233);
    uint64_t v63 = *((void *)this + 218);
    *(_DWORD *)stat buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v62;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v63;
    _os_log_impl(&dword_1B022D000, v61, OS_LOG_TYPE_DEFAULT, "flushing %u artist insertions (_updatedArtistNameOrder size=%u)", buf, 0xEu);
  }

  *(void *)char v206 = 0;
  char v207 = 0;
  v208[0] = 0;
  std::vector<std::shared_ptr<ML3ImportItem>>::reserve(v206, *((void *)this + 233));
  for (k = (uint64_t *)*((void *)this + 232); k; k = (uint64_t *)*k)
  {
    long long v65 = *(_OWORD *)(k + 3);
    uint64_t v66 = (std::__shared_weak_count *)k[4];
    if (v66)
    {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      __int16 v67 = v207;
      uint64_t v68 = v208[0];
      if ((unint64_t)v207 >= v208[0]) {
        goto LABEL_111;
      }
      *char v207 = v65;
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      __int16 v67 = v207;
      uint64_t v68 = v208[0];
      if ((unint64_t)v207 >= v208[0])
      {
LABEL_111:
        long long v194 = v65;
        uint64_t v70 = ((uint64_t)v67 - *(void *)v206) >> 4;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 60) {
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v72 = v68 - *(void *)v206;
        if (v72 >> 3 > v71) {
          unint64_t v71 = v72 >> 3;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        v219 = v208;
        int v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v73);
        uint64_t v75 = &v74[16 * v70];
        *(void *)stat buf = v74;
        *(void *)&buf[8] = v75;
        v218 = &v74[16 * v76];
        *(_OWORD *)uint64_t v75 = v194;
        if (v66) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&uint8_t buf[16] = v75 + 16;
        std::vector<std::shared_ptr<ML3ImportItem>>::__swap_out_circular_buffer(v206, buf);
        __int16 v69 = v207;
        std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
        goto LABEL_120;
      }
      *char v207 = v65;
    }
    __int16 v69 = v67 + 1;
LABEL_120:
    char v207 = v69;
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }
  }
  if (!*((unsigned char *)v210 + 24)) {
    goto LABEL_129;
  }
  unint64_t v77 = (std::__shared_weak_count *)*((void *)this + 37);
  v201[0] = *((void *)this + 36);
  v201[1] = v77;
  if (v77) {
    atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v78 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)v206, (uint64_t)v201);
  *((unsigned char *)v210 + 24) = v78;
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  if ((v78 & 1) == 0)
  {
    unint64_t v80 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v80, OS_LOG_TYPE_ERROR, "failed to import added artists", buf, 2u);
    }
  }
  else
  {
LABEL_129:
    char v79 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)v206, +[ML3Artist revisionTrackingCode]);
    *((unsigned char *)v210 + 24) = v79;
  }
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)this + 1840);
  *(void *)stat buf = v206;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_134:
  if ((a2 & 1) == 0)
  {
    uint64_t v82 = *((void *)this + 200);
    uint64_t v81 = *((void *)this + 199);
LABEL_138:
    if ((unint64_t)(v82 - v81) < 0x3E71) {
      goto LABEL_152;
    }
    goto LABEL_139;
  }
  uint64_t v81 = *((void *)this + 200);
  if (v81 == *((void *)this + 199))
  {
    uint64_t v82 = *((void *)this + 200);
    goto LABEL_138;
  }
LABEL_139:
  unsigned int v83 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v84 = (*((void *)this + 200) - *((void *)this + 199)) >> 4;
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v84;
    _os_log_impl(&dword_1B022D000, v83, OS_LOG_TYPE_DEFAULT, "flushing %u composer insertions", buf, 8u);
  }

  if (!*((unsigned char *)v210 + 24)) {
    goto LABEL_147;
  }
  unint64_t v85 = (std::__shared_weak_count *)*((void *)this + 39);
  v200[0] = *((void *)this + 38);
  v200[1] = v85;
  if (v85) {
    atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v86 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)this + 199, (uint64_t)v200);
  *((unsigned char *)v210 + 24) = v86;
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  if ((v86 & 1) == 0)
  {
    unsigned int v88 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v88, OS_LOG_TYPE_ERROR, "failed to import added composers", buf, 2u);
    }
  }
  else
  {
LABEL_147:
    char v87 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 199, +[ML3Composer revisionTrackingCode]);
    *((unsigned char *)v210 + 24) = v87;
  }
  std::vector<std::shared_ptr<ML3ImportItem>>::__clear[abi:ne180100]((uint64_t *)this + 199);
LABEL_152:
  if (a2)
  {
    uint64_t v89 = *((void *)this + 203);
    if (v89 != *((void *)this + 202))
    {
LABEL_157:
      uint64_t v91 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v92 = (*((void *)this + 203) - *((void *)this + 202)) >> 4;
        *(_DWORD *)stat buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v92;
        _os_log_impl(&dword_1B022D000, v91, OS_LOG_TYPE_DEFAULT, "flushing %u genre insertions", buf, 8u);
      }

      if (!*((unsigned char *)v210 + 24)) {
        goto LABEL_165;
      }
      unint64_t v93 = (std::__shared_weak_count *)*((void *)this + 41);
      v199[0] = *((void *)this + 40);
      v199[1] = v93;
      if (v93) {
        atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v94 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)this + 202, (uint64_t)v199);
      *((unsigned char *)v210 + 24) = v94;
      if (v93) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v93);
      }
      if ((v94 & 1) == 0)
      {
        uint64_t v96 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl(&dword_1B022D000, v96, OS_LOG_TYPE_ERROR, "failed to import added genres", buf, 2u);
        }
      }
      else
      {
LABEL_165:
        char v95 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 202, +[ML3Genre revisionTrackingCode]);
        *((unsigned char *)v210 + 24) = v95;
      }
      std::vector<std::shared_ptr<ML3ImportItem>>::__clear[abi:ne180100]((uint64_t *)this + 202);
      goto LABEL_170;
    }
    uint64_t v90 = *((void *)this + 203);
  }
  else
  {
    uint64_t v90 = *((void *)this + 203);
    uint64_t v89 = *((void *)this + 202);
  }
  if ((unint64_t)(v90 - v89) >= 0x3E71) {
    goto LABEL_157;
  }
LABEL_170:
  if (*((void *)this + 192) != *((void *)this + 191))
  {
    uint64_t v97 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v98 = (*((void *)this + 192) - *((void *)this + 191)) >> 4;
      *(_DWORD *)stat buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v98;
      _os_log_impl(&dword_1B022D000, v97, OS_LOG_TYPE_DEFAULT, "flushing %u track insertions", buf, 8u);
    }

    if (*((unsigned char *)v210 + 24)) {
      ML3ImportSession::_flushTrackImportItems((uint64_t)this, (uint64_t **)this + 191);
    }
    char v99 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 191, +[ML3Track revisionTrackingCode]);
    *((unsigned char *)v210 + 24) = v99;
    std::vector<std::shared_ptr<ML3ImportItem>>::__clear[abi:ne180100]((uint64_t *)this + 191);
  }
  if (*((unsigned char *)v210 + 24))
  {
    if (*((void *)this + 195) != *((void *)this + 194))
    {
      uint64_t v100 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v101 = (*((void *)this + 195) - *((void *)this + 194)) >> 4;
        *(_DWORD *)stat buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v101;
        _os_log_impl(&dword_1B022D000, v100, OS_LOG_TYPE_DEFAULT, "flushing %u track updates", buf, 8u);
      }

      ML3ImportSession::_flushTrackImportItems((uint64_t)this, (uint64_t **)this + 194);
    }
    if (objc_msgSend(*((id *)this + 197), "count", v194))
    {
      uint64_t v102 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v103 = [*((id *)this + 197) count];
        *(_DWORD *)stat buf = 134217984;
        *(void *)&uint8_t buf[4] = v103;
        _os_log_impl(&dword_1B022D000, v102, OS_LOG_TYPE_DEFAULT, "flushing %lu track deletes", buf, 0xCu);
      }

      BOOL v104 = ML3ImportSession::_removeTracksFromLibrary(this, *((NSArray **)this + 197));
      *((unsigned char *)v210 + 24) = v104;
      if (!v104)
      {
        uint64_t v105 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl(&dword_1B022D000, v105, OS_LOG_TYPE_ERROR, "failed to process deletes", buf, 2u);
        }
      }
      [*((id *)this + 197) removeAllObjects];
    }
  }
  if (*((unsigned char *)v210 + 24))
  {
    if (!*((void *)this + 253)) {
      goto LABEL_294;
    }
    unsigned int v106 = (void *)*((void *)this + 252);
    if (v106)
    {
      *(void *)&long long v54 = 134218496;
      long long v194 = v54;
      while (1)
      {
        uint64_t v107 = v106[2];
        uint64_t v108 = (char *)v106[3];
        uint64_t v109 = v106[4];
        char v110 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = v194;
          *(void *)&uint8_t buf[4] = v107;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v109;
          *(_WORD *)&buf[22] = 2048;
          v218 = v108;
          _os_log_impl(&dword_1B022D000, v110, OS_LOG_TYPE_DEFAULT, "updating album artist name order of trackPID=%lld to order.section=%ld, order.sortOrder=%lld", buf, 0x20u);
        }

        unint64_t v111 = (void *)*((void *)this + 2);
        unint64_t v112 = [NSNumber numberWithLongLong:v108];
        v216[0] = v112;
        id v113 = [NSNumber numberWithInteger:v109];
        v216[1] = v113;
        uint64_t v114 = [NSNumber numberWithLongLong:v107];
        v216[2] = v114;
        unint64_t v115 = [MEMORY[0x1E4F1C978] arrayWithObjects:v216 count:3];
        id v198 = 0;
        char v116 = [v111 executeUpdate:@"UPDATE item SET album_artist_order=?, album_artist_order_section=? WHERE album_artist_pid=?", v115, &v198 withParameters error];
        id v117 = v198;

        if ((v116 & 1) == 0) {
          break;
        }

        unsigned int v106 = (void *)*v106;
        if (!v106) {
          goto LABEL_201;
        }
      }
      unsigned int v118 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 134218242;
        *(void *)&uint8_t buf[4] = v107;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v117;
        _os_log_impl(&dword_1B022D000, v118, OS_LOG_TYPE_ERROR, "Failed to update name order of tracks with album_artist_pid=%lld, error=%{public}@", buf, 0x16u);
      }

      *((unsigned char *)v210 + 24) = 0;
    }
LABEL_201:
    std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear((void *)this + 250);
    if (*((unsigned char *)v210 + 24))
    {
LABEL_294:
      if (!*((void *)this + 218)) {
        goto LABEL_295;
      }
      uint64_t v119 = (void *)*((void *)this + 217);
      if (v119)
      {
        *(void *)&long long v54 = 134218496;
        long long v194 = v54;
        while (1)
        {
          uint64_t v120 = v119[2];
          char v121 = (char *)v119[3];
          uint64_t v122 = v119[4];
          unsigned int v123 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = v194;
            *(void *)&uint8_t buf[4] = v120;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v122;
            *(_WORD *)&buf[22] = 2048;
            v218 = v121;
            _os_log_impl(&dword_1B022D000, v123, OS_LOG_TYPE_DEFAULT, "updating item artist name order of trackPID=%lld to order.section=%ld, order.sortOrder=%lld", buf, 0x20u);
          }

          uint64_t v124 = (void *)*((void *)this + 2);
          uint64_t v125 = [NSNumber numberWithLongLong:v121];
          v215[0] = v125;
          unint64_t v126 = [NSNumber numberWithInteger:v122];
          v215[1] = v126;
          char v127 = [NSNumber numberWithLongLong:v120];
          v215[2] = v127;
          char v128 = [MEMORY[0x1E4F1C978] arrayWithObjects:v215 count:3];
          id v197 = 0;
          char v129 = [v124 executeUpdate:@"UPDATE item SET item_artist_order=?, item_artist_order_section=? WHERE item_artist_pid=?", v128, &v197 withParameters error];
          id v130 = v197;

          if ((v129 & 1) == 0) {
            break;
          }

          uint64_t v119 = (void *)*v119;
          if (!v119) {
            goto LABEL_213;
          }
        }
        uint64_t v131 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 134218242;
          *(void *)&uint8_t buf[4] = v120;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v130;
          _os_log_impl(&dword_1B022D000, v131, OS_LOG_TYPE_ERROR, "Failed to update name order of tracks with item_artist_pid=%lld, error=%{public}@", buf, 0x16u);
        }

        *((unsigned char *)v210 + 24) = 0;
      }
LABEL_213:
      std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear((void *)this + 215);
      if (*((unsigned char *)v210 + 24))
      {
LABEL_295:
        if (!*((void *)this + 228)) {
          goto LABEL_296;
        }
        unint64_t v132 = (void *)*((void *)this + 227);
        if (v132)
        {
          *(void *)&long long v54 = 134218496;
          long long v194 = v54;
          while (1)
          {
            uint64_t v133 = v132[2];
            char v134 = (char *)v132[3];
            uint64_t v135 = v132[4];
            uint64_t v136 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)stat buf = v194;
              *(void *)&uint8_t buf[4] = v133;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v135;
              *(_WORD *)&buf[22] = 2048;
              v218 = v134;
              _os_log_impl(&dword_1B022D000, v136, OS_LOG_TYPE_DEFAULT, "updating item artist series order of trackPID=%lld to order.section=%ld, order.sortOrder=%lld", buf, 0x20u);
            }

            unint64_t v137 = (void *)*((void *)this + 2);
            char v138 = [NSNumber numberWithLongLong:v134];
            v214[0] = v138;
            char v139 = [NSNumber numberWithInteger:v135];
            v214[1] = v139;
            unsigned int v140 = [NSNumber numberWithLongLong:v133];
            v214[2] = v140;
            uint64_t v141 = [MEMORY[0x1E4F1C978] arrayWithObjects:v214 count:3];
            id v196 = 0;
            char v142 = [v137 executeUpdate:@"UPDATE item SET series_name_order=?, series_name_order_section=? WHERE item_artist_pid=?", v141, &v196 withParameters error];
            id v143 = v196;

            if ((v142 & 1) == 0) {
              break;
            }

            unint64_t v132 = (void *)*v132;
            if (!v132) {
              goto LABEL_225;
            }
          }
          char v144 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)stat buf = 134218242;
            *(void *)&uint8_t buf[4] = v133;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v143;
            _os_log_impl(&dword_1B022D000, v144, OS_LOG_TYPE_ERROR, "Failed to update name order of tracks with item_artist_pid=%lld, error=%{public}@", buf, 0x16u);
          }

          *((unsigned char *)v210 + 24) = 0;
        }
LABEL_225:
        std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear((void *)this + 225);
        if (*((unsigned char *)v210 + 24))
        {
LABEL_296:
          if (!*((void *)this + 279)) {
            goto LABEL_297;
          }
          unsigned int v145 = (void *)*((void *)this + 278);
          if (v145)
          {
            *(void *)&long long v54 = 134218496;
            long long v194 = v54;
            while (1)
            {
              uint64_t v146 = v145[2];
              unint64_t v147 = (char *)v145[3];
              uint64_t v148 = v145[4];
              char v149 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = v194;
                *(void *)&uint8_t buf[4] = v146;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v148;
                *(_WORD *)&buf[22] = 2048;
                v218 = v147;
                _os_log_impl(&dword_1B022D000, v149, OS_LOG_TYPE_DEFAULT, "updating album name order of trackPID=%lld to order.section=%ld, order.sortOrder=%lld", buf, 0x20u);
              }

              unsigned int v150 = (void *)*((void *)this + 2);
              uint64_t v151 = [NSNumber numberWithLongLong:v147];
              v213[0] = v151;
              unint64_t v152 = [NSNumber numberWithInteger:v148];
              v213[1] = v152;
              char v153 = [NSNumber numberWithLongLong:v146];
              v213[2] = v153;
              char v154 = [MEMORY[0x1E4F1C978] arrayWithObjects:v213 count:3];
              id v195 = 0;
              char v155 = [v150 executeUpdate:@"UPDATE item SET album_order=?, album_order_section=? WHERE album_pid=?", v154, &v195 withParameters error];
              id v156 = v195;

              if ((v155 & 1) == 0) {
                break;
              }

              unsigned int v145 = (void *)*v145;
              if (!v145) {
                goto LABEL_237;
              }
            }
            unint64_t v157 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)stat buf = 134218242;
              *(void *)&uint8_t buf[4] = v146;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v156;
              _os_log_impl(&dword_1B022D000, v157, OS_LOG_TYPE_ERROR, "Failed to update name order of tracks with album_pid=%lld, error=%{public}@", buf, 0x16u);
            }

            *((unsigned char *)v210 + 24) = 0;
          }
LABEL_237:
          std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear((void *)this + 276);
          if (*((unsigned char *)v210 + 24))
          {
LABEL_297:
            if (*((void *)this + 291) == *((void *)this + 290)) {
              goto LABEL_244;
            }
            char v158 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v159 = (*((void *)this + 291) - *((void *)this + 290)) >> 4;
              *(_DWORD *)stat buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v159;
              _os_log_impl(&dword_1B022D000, v158, OS_LOG_TYPE_DEFAULT, "flushing %u playlist insertions", buf, 8u);
            }

            if (*((unsigned char *)v210 + 24)) {
              ML3ImportSession::_flushPlaylistImportItems();
            }
            char v160 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 290, +[ML3Container revisionTrackingCode]);
            *((unsigned char *)v210 + 24) = v160;
            std::vector<std::shared_ptr<ML3ImportItem>>::__clear[abi:ne180100]((uint64_t *)this + 290);
            if (*((unsigned char *)v210 + 24))
            {
LABEL_244:
              if (*((void *)this + 294) != *((void *)this + 293))
              {
                uint64_t v161 = os_log_create("com.apple.amp.medialibrary", "Import");
                if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v162 = (*((void *)this + 294) - *((void *)this + 293)) >> 4;
                  *(_DWORD *)stat buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v162;
                  _os_log_impl(&dword_1B022D000, v161, OS_LOG_TYPE_DEFAULT, "flushing %u playlist updates", buf, 8u);
                }

                ML3ImportSession::_flushPlaylistImportItems();
              }
              if (*((void *)this + 312) != *((void *)this + 311))
              {
                char v163 = os_log_create("com.apple.amp.medialibrary", "Import");
                if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v164 = (*((void *)this + 312) - *((void *)this + 311)) >> 4;
                  *(_DWORD *)stat buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v164;
                  _os_log_impl(&dword_1B022D000, v163, OS_LOG_TYPE_DEFAULT, "flushing %u person insertions", buf, 8u);
                }

                ML3ImportSession::_flushPersonImportItems();
              }
              if (*((void *)this + 315) != *((void *)this + 314))
              {
                unsigned int v165 = os_log_create("com.apple.amp.medialibrary", "Import");
                if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v166 = (*((void *)this + 315) - *((void *)this + 314)) >> 4;
                  *(_DWORD *)stat buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v166;
                  _os_log_impl(&dword_1B022D000, v165, OS_LOG_TYPE_DEFAULT, "flushing %u person updates", buf, 8u);
                }

                ML3ImportSession::_flushPersonImportItems();
              }
              if (*((void *)this + 335) != *((void *)this + 334))
              {
                unint64_t v167 = os_log_create("com.apple.amp.medialibrary", "Import");
                if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v168 = (*((void *)this + 335) - *((void *)this + 334)) >> 4;
                  *(_DWORD *)stat buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v168;
                  _os_log_impl(&dword_1B022D000, v167, OS_LOG_TYPE_DEFAULT, "flushing %u booklet updates", buf, 8u);
                }

                operator new();
              }
              if (*((void *)this + 338) != *((void *)this + 337))
              {
                char v169 = os_log_create("com.apple.amp.medialibrary", "Import");
                if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v170 = (*((void *)this + 338) - *((void *)this + 337)) >> 3;
                  *(_DWORD *)stat buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v170;
                  _os_log_impl(&dword_1B022D000, v169, OS_LOG_TYPE_DEFAULT, "flushing %u booklet deletes", buf, 8u);
                }

                uint64_t v171 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:(uint64_t)(*((void *)this + 338) - *((void *)this + 337)) >> 3];
                for (m = (void *)*((void *)this + 337); m != *((void **)this + 338); ++m)
                {
                  char v173 = objc_msgSend(NSNumber, "numberWithLongLong:", *m, v194);
                  [v171 addObject:v173];
                }
                char v174 = +[ML3DatabaseStatementRenderer defaultRenderer];
                unsigned int v175 = objc_msgSend(v174, "statementWithPrefix:inParameterCount:", @"DELETE FROM booklet WHERE ROWID", objc_msgSend(v171, "count"));
                uint64_t v176 = (void *)*((void *)this + 2);
                *(void *)char v206 = 0;
                char v177 = [v176 executeUpdate:v175 withParameters:v171 error:v206];
                id v178 = *(id *)v206;
                char v179 = v178;
                if (v177)
                {

                  *((unsigned char *)v210 + 24) = 1;
                }
                else
                {
                  unsigned int v180 = os_log_create("com.apple.amp.medialibrary", "Import");
                  if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)stat buf = 138543362;
                    *(void *)&uint8_t buf[4] = v179;
                    _os_log_impl(&dword_1B022D000, v180, OS_LOG_TYPE_ERROR, "Failed to delete booklet items. err=%{public}@", buf, 0xCu);
                  }

                  *((unsigned char *)v210 + 24) = 0;
                  uint64_t v181 = _ML3LogCategoryImport();
                  if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)stat buf = 0;
                    _os_log_impl(&dword_1B022D000, v181, OS_LOG_TYPE_ERROR, "failed to remove deleted booklets", buf, 2u);
                  }
                }
                *((void *)this + 33_Block_object_dispose(&STACK[0x210], 8) = *((void *)this + 337);
              }
            }
          }
        }
      }
    }
  }
  if (*((void *)this + 45))
  {
    std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__deallocate_node(*((void **)this + 44));
    *((void *)this + 44) = 0;
    uint64_t v182 = *((void *)this + 43);
    if (v182)
    {
      for (uint64_t n = 0; n != v182; ++n)
        *(void *)(*((void *)this + 42) + 8 * n) = 0;
    }
    *((void *)this + 45) = 0;
  }
  if (*((void *)this + 75))
  {
    char v184 = (void *)*((void *)this + 74);
    if (v184)
    {
      do
      {
        unsigned int v185 = (void *)*v184;
        operator delete(v184);
        char v184 = v185;
      }
      while (v185);
    }
    *((void *)this + 74) = 0;
    uint64_t v186 = *((void *)this + 73);
    if (v186)
    {
      for (iuint64_t i = 0; ii != v186; ++ii)
        *(void *)(*((void *)this + 72) + 8 * ii) = 0;
    }
    *((void *)this + 75) = 0;
  }
  unint64_t v188 = (void *)*((void *)this + 88);
  char v189 = (void *)*((void *)this + 87);
  if (v188 != v189)
  {
    do
    {
      objc_msgSend(*((id *)this + 1), "updateBestArtworkTokenForEntityPersistentID:entityType:artworkType:retrievalTime:usingConnection:", *v189, v189[1] == 5, 0.0);
      v189 += 2;
    }
    while (v189 != v188);
    *((void *)this + 8_Block_object_dispose(&STACK[0x210], 8) = *((void *)this + 87);
  }
  uint64_t v190 = *((unsigned __int8 *)v210 + 24);
  _Block_object_dispose(&v209, 8);
  return v190;
}

void sub_1B0438170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<ML3ImportItem>>::reserve(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    void v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<std::shared_ptr<ML3ImportItem>>::__swap_out_circular_buffer(v2, v5);
    return (void *)std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t ML3ImportSession::_flushCollectionImportItems(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(uint64_t **)a3;
  v5[3] = a1;
  ML3DatabaseImportDataSource::setImportItems(v5, a2);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 8);
  unint64_t v16 = *(uint64_t **)a3;
  uint64_t v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = 0;
  long long v12 = 0;
  uint64_t v13 = 0;
  *(void *)stat buf = &v11;
  char v15 = 0;
  long long v11 = operator new(0x10uLL);
  long long v12 = v11;
  uint64_t v13 = v11 + 2;
  long long v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>,std::shared_ptr<ML3ImportItem>*,std::shared_ptr<ML3ImportItem>*,std::shared_ptr<ML3ImportItem>*>((uint64_t)&v13, &v16, &v18, v11);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v7 = ML3ImportSession::_performDatabaseImport(a1, (uint64_t)&v11);
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_ERROR, "Database import failed.", buf, 2u);
    }
  }
  std::string v9 = *(uint64_t **)a3;
  void v9[3] = 0;
  std::vector<std::shared_ptr<ML3ImportItem>>::__clear[abi:ne180100](v9 + 6);
  *(void *)stat buf = &v11;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v7;
}

void sub_1B0438580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t ML3ImportSession::_updateEntityRevisionTable(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "REPLACE INTO entity_revision (entity_pid, deleted, class) VALUES (?, ?, ?)");
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = 1;
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v8 = *(void **)(a1 + 16);
      *(void *)stat buf = *(void *)(*(void *)v5 + 8);
      int v22 = 0;
      char v23 = 1;
      uint64_t v24 = 0;
      int v25 = 0;
      char v26 = 1;
      v27[0] = a3;
      int v28 = 0;
      v29[0] = 1;
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      BOOL v14 = 0;
      float v19 = &v14;
      char v20 = 0;
      BOOL v14 = (char *)operator new(0x78uLL);
      uint64_t v15 = (uint64_t)v14;
      unint64_t v16 = v14 + 120;
      uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)&v16, (uint64_t)buf, (uint64_t)v30, (uint64_t)v14);
      char v9 = ML3ImportExecuteVariadicStatement(v8, (const UInt8 *)__p, (uint64_t *)&v14);
      float v19 = &v14;
      std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      for (uint64_t i = 0; i != -15; i -= 5)
      {
        if (v29[i * 8]) {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v27[i]);
        }
      }
      if ((v9 & 1) == 0) {
        break;
      }
      v5 += 16;
      if (v5 == v6)
      {
        uint64_t v7 = 1;
        goto LABEL_12;
      }
    }
    long long v11 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_ERROR, "failed to update entity revisions", buf, 2u);
    }

    uint64_t v7 = 0;
  }
LABEL_12:
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_1B04387A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void ___ZN16ML3ImportSession5flushEb_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 16);
  v19[0] = &stru_1F08D4D70;
  v19[1] = &unk_1F0912400;
  uint64_t v8 = [MEMORY[0x1E4F1C9C8] date];
  void v19[2] = v8;
  void v19[3] = v6;
  char v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:4];
  id v14 = 0;
  char v10 = [v7 executeUpdate:@"UPDATE album_artist set cloud_universal_library_id=?, liked_state=?, liked_state_changed_date=? WHERE album_artist_pid=?", v9, &v14 withParameters error];
  id v11 = v14;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    long long v12 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = [v6 longLongValue];
      *(_DWORD *)stat buf = 134218242;
      uint64_t v16 = v13;
      __int16 v17 = 2114;
      id v18 = v11;
      _os_log_impl(&dword_1B022D000, v12, OS_LOG_TYPE_ERROR, "Could not remove cloud_library_id from album_artist with persistentID:%lld, error=%{public}@", buf, 0x16u);
    }

    *a4 = 1;
  }
}

void sub_1B0438A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession5flushEb_block_invoke_117(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 16);
  v19[0] = &stru_1F08D4D70;
  v19[1] = &unk_1F0912400;
  uint64_t v8 = [MEMORY[0x1E4F1C9C8] date];
  void v19[2] = v8;
  void v19[3] = v6;
  char v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:4];
  id v14 = 0;
  char v10 = [v7 executeUpdate:@"UPDATE album set cloud_library_id=?, liked_state=?, liked_state_changed_date=? WHERE album_pid=?", v9, &v14 withParameters error];
  id v11 = v14;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    long long v12 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = [v6 longLongValue];
      *(_DWORD *)stat buf = 134218242;
      uint64_t v16 = v13;
      __int16 v17 = 2114;
      id v18 = v11;
      _os_log_impl(&dword_1B022D000, v12, OS_LOG_TYPE_ERROR, "Could not remove cloud_library_id from album with persistentID:%lld, error=%{public}@", buf, 0x16u);
    }

    *a4 = 1;
  }
}

void sub_1B0438BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ML3ImportSession::_flushTrackImportItems(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    char v4 = 1;
    do
    {
      uint64_t v5 = *v2;
      id v6 = (std::__shared_weak_count *)v2[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 136))(v5);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      v4 &= v7;
      v2 += 2;
    }
    while (v2 != v3);
    if ((v4 & 1) == 0) {
      operator new();
    }
  }
  operator new();
}

void sub_1B0439C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (v18) {
    operator delete(v18);
  }
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

BOOL ML3ImportSession::_removeTracksFromLibrary(ML3ImportSession *this, NSArray *a2)
{
  uint64_t v3 = a2;
  if (ML3ImportSession::_enableTriggers((id *)this))
  {
    uint64_t v4 = *((unsigned int *)this + 8);
    if (v4 == 2)
    {
      BOOL v5 = +[ML3Track unlinkRedownloadableAssetsFromLibrary:*((void *)this + 1) persistentIDs:v3 deletionType:2 deletedFileSize:0];
      uint64_t v4 = *((unsigned int *)this + 8);
    }
    else
    {
      BOOL v5 = 1;
    }
    [*((id *)this + 1) removeSource:v4 fromPersistentIDS:v3 forImportOperation:0 canonocalizeCollections:0 usingConnection:*((void *)this + 2) postNotifications:0];
    ML3ImportSession::_disableTriggers(this);
  }
  else
  {
    id v6 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "failed to re-enable triggers", v8, 2u);
    }

    BOOL v5 = 0;
  }

  return v5;
}

void sub_1B0439F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear(void *result)
{
  if (result[3])
  {
    id v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void ML3ImportSession::_flushPlaylistImportItems()
{
}

void sub_1B043D4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  STACK[0x390] = (unint64_t)&a54;
  std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x390]);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_flushPersonImportItems()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B043DE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t ML3ImportSession::_flushImportItems(uint64_t a1, uint64_t a2, uint64_t ***a3)
{
  if (*(void *)(a2 + 8) == *(void *)a2) {
    return 1;
  }
  BOOL v5 = *a3;
  id v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      uint64_t v8 = *v5;
      char v9 = (std::__shared_weak_count *)v5[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      void v8[3] = a1;
      ML3DatabaseImportDataSource::setImportItems(v8, (uint64_t **)a2);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  uint64_t v10 = ML3ImportSession::_performDatabaseImport(a1, (uint64_t)a3);
  id v11 = *a3;
  long long v12 = a3[1];
  if (*a3 != v12)
  {
    do
    {
      uint64_t v13 = *v11;
      id v14 = (std::__shared_weak_count *)v11[1];
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        v13[3] = 0;
        std::vector<std::shared_ptr<ML3ImportItem>>::__clear[abi:ne180100](v13 + 6);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      else
      {
        v13[3] = 0;
        std::vector<std::shared_ptr<ML3ImportItem>>::__clear[abi:ne180100](v13 + 6);
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  return v10;
}

void sub_1B043DFFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_performDatabaseImport(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 1;
  uint64_t v2 = *(void **)(a1 + 16);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZN16ML3ImportSession22_performDatabaseImportERNSt3__16vectorINS0_10shared_ptrI27ML3DatabaseImportDataSourceEENS0_9allocatorIS4_EEEE_block_invoke;
  v5[3] = &unk_1E5FB75C8;
  void v5[5] = a1;
  v5[6] = a2;
  void v5[4] = &v6;
  [v2 performTransactionWithBlock:v5];
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B043E0C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16ML3ImportSession22_performDatabaseImportERNSt3__16vectorINS0_10shared_ptrI27ML3DatabaseImportDataSourceEENS0_9allocatorIS4_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v1 = *(uint64_t **)(a1 + 48);
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  BOOL v5 = *(uint64_t (**)(void, double))(v2 + 40);
  uint64_t v36 = v2;
  uint64_t v32 = a1;
  if (v5)
  {
    uint64_t v6 = a1;
    a1 = v5(*(void *)(v2 + 48), 0.0);
    char v7 = *(uint64_t **)(v6 + 48);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
  }
  else
  {
    uint64_t v8 = v3;
    uint64_t v9 = v4;
  }
  if (v9 == v8)
  {
    uint64_t v20 = 1;
  }
  else
  {
    uint64_t v33 = v8;
    unsigned int v10 = 0;
    float v11 = (float)(unint64_t)((v3 - v4) >> 4);
    do
    {
      uint64_t v13 = *(ML3DatabaseImportDataSource **)v9;
      long long v12 = *(std::__shared_weak_count **)(v9 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = v12;
      id v14 = (void *)MEMORY[0x1B3E93C70](a1);
      uint64_t v34 = [MEMORY[0x1E4F1C9C8] date];
      uint64_t v15 = ML3DatabaseImportDataSource::getTableSchema(v13);
      uint64_t v16 = [[ML3VirtualTable alloc] initWithDatabaseTable:v15];
      __int16 v17 = v16;
      uint64_t v38 = v13;
      __int16 v39 = v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [(ML3VirtualTable *)v16 setDataSource:&v38];
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if ([(ML3VirtualTable *)v17 registerWithConnection:*(void *)(v36 + 16)])
      {
        id v18 = (*(uint64_t (**)(ML3DatabaseImportDataSource *, ML3VirtualTable *, void))(*(void *)v13 + 48))(v13, v17, *(unsigned int *)(v36 + 32));
        float v19 = *(void **)(v36 + 16);
        id v37 = 0;
        uint64_t v20 = [v19 executeUpdate:v18 withParameters:0 error:&v37];
        uint64_t v21 = (ML3VirtualTable *)v37;
        if ((v20 & 1) == 0)
        {
          int v22 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)stat buf = 138543362;
            uint64_t v41 = v21;
            _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_ERROR, "Error executing import virtual table insert statement. %{public}@", buf, 0xCu);
          }
        }
      }
      else
      {
        id v18 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = *(void *)(v36 + 16);
          *(_DWORD *)stat buf = 138543618;
          uint64_t v41 = v17;
          __int16 v42 = 2048;
          uint64_t v43 = v23;
          _os_log_impl(&dword_1B022D000, v18, OS_LOG_TYPE_ERROR, "Could not register virtual table %{public}@ on connection %p.", buf, 0x16u);
        }
        uint64_t v20 = 0;
      }

      [(ML3VirtualTable *)v17 unregister];
      uint64_t v24 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = ML3DatabaseImportDataSource::getTableSchema(v13);
        char v26 = [v25 name];
        int v27 = [MEMORY[0x1E4F1C9C8] date];
        [v27 timeIntervalSinceDate:v34];
        *(_DWORD *)stat buf = 138543618;
        uint64_t v41 = v26;
        __int16 v42 = 2048;
        uint64_t v43 = v28;
        _os_log_impl(&dword_1B022D000, v24, OS_LOG_TYPE_DEFAULT, "Data source %{public}@ took %.2fs to import", buf, 0x16u);
      }
      uint64_t v29 = *(void (**)(void, float))(v36 + 40);
      if (v29) {
        v29(*(void *)(v36 + 48), (float)v10 / v11);
      }

      a1 = (uint64_t)v35;
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      v9 += 16;
      if (v9 == v33) {
        char v30 = 0;
      }
      else {
        char v30 = v20;
      }
      ++v10;
    }
    while ((v30 & 1) != 0);
  }
  *(unsigned char *)(*(void *)(*(void *)(v32 + 32) + 8) + 24) = v20;
  return v20;
}

void sub_1B043E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3BookletDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3BookletDatabaseImportDataSource>,std::allocator<ML3BookletDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_34ML3BookletDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3BookletDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3BookletDatabaseImportDataSource>,std::allocator<ML3BookletDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3BookletDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3BookletDatabaseImportDataSource>,std::allocator<ML3BookletDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3PersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3PersonDatabaseImportDataSource>,std::allocator<ML3PersonDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3PersonDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3PersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3PersonDatabaseImportDataSource>,std::allocator<ML3PersonDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3PersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3PersonDatabaseImportDataSource>,std::allocator<ML3PersonDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemReactionsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemReactionsDatabaseImportDataSource>,std::allocator<ML3ContainerItemReactionsDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_49ML3ContainerItemReactionsDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemReactionsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemReactionsDatabaseImportDataSource>,std::allocator<ML3ContainerItemReactionsDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ContainerItemReactionsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemReactionsDatabaseImportDataSource>,std::allocator<ML3ContainerItemReactionsDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void *__Block_byref_object_copy__597(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__598(uint64_t a1)
{
}

void ___ZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  [v4 int64ForColumnIndex:0];
  [v4 int64ForColumnIndex:1];
  [v4 int64ForColumnIndex:2];
  uint64_t v6 = [v4 cStringForColumnIndex:3];
  if (v6) {
    char v7 = (char *)v6;
  }
  else {
    char v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  [v4 int64ForColumnIndex:4];
  operator new();
}

void sub_1B043EABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  MEMORY[0x1B3E93610](v23, 0x1012C40ACBB1BAALL);
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v5 int64ForColumnIndex:0];
  unint64_t v8 = [v5 int64ForColumnIndex:1];
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(void *)(*(void *)(a1 + 32) + 8) + 48, v8, &v8)[3] = v7;
}

void sub_1B043EBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__586(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 4_Block_object_dispose(&STACK[0x210], 8) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__587(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(a1 + 48);
}

void ___ZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v5 int64ForColumnIndex:0];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v5 cStringForColumnIndex:1]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8) + 48;
  float v11 = __p;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)__p, (long long **)&v11)+ 5) = v7;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B043ED08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t **std::map<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>::operator[](uint64_t **a1, uint64_t *a2)
{
  id v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        id v6 = (uint64_t **)v4;
        uint64_t v7 = (uint64_t *)v4[4];
        if ((uint64_t)v7 <= (uint64_t)a2) {
          break;
        }
        uint64_t v4 = *v6;
        id v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if ((uint64_t)v7 >= (uint64_t)a2) {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        id v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    id v6 = a1 + 1;
LABEL_9:
    uint64_t v8 = (uint64_t *)v6;
    id v6 = (uint64_t **)operator new(0x40uLL);
    v6[7] = 0;
    v6[6] = 0;
    void v6[4] = a2;
    v6[5] = (uint64_t *)(v6 + 6);
    *id v6 = 0;
    v6[1] = 0;
    void v6[2] = v8;
    *id v5 = (uint64_t *)v6;
    uint64_t v9 = (uint64_t *)**a1;
    char v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      char v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

uint64_t std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  id v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void **)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if (std::less<std::string>::operator()[abi:ne180100](v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          __int16 v17 = v3;
          uint64_t v12 = (uint64_t)v3;
          float v11 = (uint64_t **)v3;
          goto LABEL_14;
        }
        __int16 v17 = v7;
        float v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        float v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__find_equal<std::string>(a1, &v17, v5 + 4);
      }
      if (!*v11)
      {
        uint64_t v12 = (uint64_t)v17;
LABEL_14:
        std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>> const&>((uint64_t)v16, a1, (uint64_t)(v5 + 4));
        std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at((uint64_t **)a1, v12, v11, v16[0]);
        v16[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v16);
      }
      uint64_t v13 = (void *)v5[1];
      if (v13)
      {
        do
        {
          id v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          id v14 = (void *)v5[2];
          BOOL v10 = *v14 == (void)v5;
          id v5 = v14;
        }
        while (!v10);
      }
      id v5 = v14;
    }
    while (v14 != v4);
  }
  return a1;
}

void sub_1B043EF6C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::find<std::string>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  id v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::less<std::string>::operator()[abi:ne180100](v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      id v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::string>::operator()[abi:ne180100](a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

void std::shared_ptr<ML3ImportItem>::shared_ptr[abi:ne180100]<ML3ContainerItemReactionImportItem,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B043F064(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::operator[](uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__find_equal<std::string>((uint64_t)a1, &v12, (void *)a2);
  id v5 = *v4;
  if (!*v4)
  {
    BOOL v6 = v4;
    uint64_t v7 = operator new(0x48uLL);
    v10[0] = v7;
    v10[1] = a1 + 1;
    char v11 = 0;
    uint64_t v8 = (std::string *)(v7 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      id v5 = (uint64_t *)v10[0];
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v7[6] = *(void *)(a2 + 16);
      id v5 = v7;
    }
    v7[7] = 0;
    v7[8] = 0;
    char v11 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at(a1, v12, v6, v5);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v10);
  }
  return v5 + 7;
}

void sub_1B043F168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::operator=[abi:ne180100](uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    uint64_t v3 = a2 + 1;
    uint64_t v4 = (void *)*a2;
    if (*(void *)(a1 + 16))
    {
      id v5 = *(uint64_t **)a1;
      uint64_t v7 = (uint64_t **)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 8);
      *(void *)a1 = a1 + 8;
      *(void *)(v6 + 16) = 0;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = 0;
      *(void *)(a1 + 16) = 0;
      if (v5[1]) {
        id v5 = (uint64_t *)v5[1];
      }
      v26[0] = a1;
      v26[1] = v5;
      std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::__advance[abi:ne180100]((uint64_t)v26);
      uint64_t v8 = v27;
      if (!v27 || v4 == v3)
      {
        __int16 v17 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          uint64_t v10 = v4[7];
          uint64_t v9 = v4[8];
          if (v9) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
          }
          char v11 = (std::__shared_weak_count *)v8[8];
          v8[7] = v10;
          v8[8] = v9;
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          uint64_t v12 = v27;
          uint64_t v13 = *v7;
          id v14 = (uint64_t **)(a1 + 8);
          uint64_t v15 = (uint64_t **)(a1 + 8);
          if (*v7)
          {
            do
            {
              while (1)
              {
                id v14 = (uint64_t **)v13;
                if (!std::less<std::string>::operator()[abi:ne180100](v12 + 4, v13 + 4)) {
                  break;
                }
                uint64_t v13 = *v14;
                uint64_t v15 = v14;
                if (!*v14) {
                  goto LABEL_17;
                }
              }
              uint64_t v13 = v14[1];
            }
            while (v13);
            uint64_t v15 = v14 + 1;
          }
LABEL_17:
          std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v14, v15, v12);
          std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::__advance[abi:ne180100]((uint64_t)v26);
          uint64_t v16 = (void *)v4[1];
          if (v16)
          {
            do
            {
              __int16 v17 = v16;
              uint64_t v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              __int16 v17 = (void *)v4[2];
              BOOL v18 = *v17 == (void)v4;
              uint64_t v4 = v17;
            }
            while (!v18);
          }
          uint64_t v8 = v27;
          if (v27) {
            BOOL v18 = v17 == v3;
          }
          else {
            BOOL v18 = 1;
          }
          uint64_t v4 = v17;
        }
        while (!v18);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)v26);
      uint64_t v4 = v17;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>> const&>((uint64_t)v26, a1, (uint64_t)(v4 + 4));
        float v19 = (uint64_t *)v26[0];
        uint64_t v20 = *(uint64_t **)(a1 + 8);
        uint64_t v21 = (uint64_t **)(a1 + 8);
        int v22 = (uint64_t **)(a1 + 8);
        if (v20)
        {
          do
          {
            while (1)
            {
              uint64_t v21 = (uint64_t **)v20;
              if (!std::less<std::string>::operator()[abi:ne180100](v19 + 4, v20 + 4)) {
                break;
              }
              uint64_t v20 = *v21;
              int v22 = v21;
              if (!*v21) {
                goto LABEL_37;
              }
            }
            uint64_t v20 = v21[1];
          }
          while (v20);
          int v22 = v21 + 1;
        }
LABEL_37:
        std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v21, v22, v19);
        v26[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v26);
        uint64_t v23 = (void *)v4[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void *)v4[2];
            BOOL v18 = *v24 == (void)v4;
            uint64_t v4 = v24;
          }
          while (!v18);
        }
        uint64_t v4 = v24;
      }
      while (v24 != v3);
    }
  }
  return a1;
}

void sub_1B043F3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::__map_value_compare<long long,std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::__map_value_compare<long long,std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::__map_value_compare<long long,std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy((void *)a1[6]);
    operator delete(a1);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::__advance[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  *(void *)(result + 16) = v1;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 16);
    if (v2)
    {
      uint64_t v3 = (void *)*v2;
      if (*v2 == v1)
      {
        *uint64_t v2 = 0;
        while (1)
        {
          uint64_t v4 = (void *)v2[1];
          if (!v4) {
            break;
          }
          do
          {
            uint64_t v2 = v4;
            uint64_t v4 = (void *)*v4;
          }
          while (v4);
        }
      }
      else
      {
        for (v2[1] = 0; v3; uint64_t v3 = (void *)v2[1])
        {
          do
          {
            uint64_t v2 = v3;
            uint64_t v3 = (void *)*v3;
          }
          while (v3);
        }
      }
    }
    *(void *)(result + _Block_object_dispose(&STACK[0x210], 8) = v2;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  id v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v6[6] = *(void *)(a3 + 16);
  }
  uint64_t v8 = *(void *)(a3 + 32);
  v6[7] = *(void *)(a3 + 24);
  v6[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_1B043F608(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
  return a1;
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemReactionImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemReactionImportItem>,std::allocator<ML3ContainerItemReactionImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_34ML3ContainerItemReactionImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemReactionImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemReactionImportItem>,std::allocator<ML3ContainerItemReactionImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ContainerItemReactionImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemReactionImportItem>,std::allocator<ML3ContainerItemReactionImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 39) < 0) {
      operator delete(*(void **)(result + 16));
    }
    JUMPOUT(0x1B3E93610);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo *,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::__shared_ptr_default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo,ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>,std::allocator<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENS0_I13ML3ImportItemEEE26_ContainerItemReactionInfoE27__shared_ptr_default_deleteIS4_S4_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo *,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::__shared_ptr_default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo,ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>,std::allocator<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo *,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::__shared_ptr_default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo,ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>,std::allocator<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerAuthorDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerAuthorDatabaseImportDataSource>,std::allocator<ML3ContainerAuthorDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_42ML3ContainerAuthorDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ContainerAuthorDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerAuthorDatabaseImportDataSource>,std::allocator<ML3ContainerAuthorDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ContainerAuthorDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerAuthorDatabaseImportDataSource>,std::allocator<ML3ContainerAuthorDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemPersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemPersonDatabaseImportDataSource>,std::allocator<ML3ContainerItemPersonDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_46ML3ContainerItemPersonDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemPersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemPersonDatabaseImportDataSource>,std::allocator<ML3ContainerItemPersonDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ContainerItemPersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemPersonDatabaseImportDataSource>,std::allocator<ML3ContainerItemPersonDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void ___ZN16ML3ImportSession38_prepareContainerItemPersonImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v5 int64ForColumnIndex:0];
  unint64_t v8 = [v5 int64ForColumnIndex:1];
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(void *)(*(void *)(a1 + 32) + 8) + 48, v8, &v8)[3] = v7;
}

void sub_1B043FA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__579(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__580(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN16ML3ImportSession38_prepareContainerItemPersonImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_585(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = [v3 int64ForColumnIndex:0];
  uint64_t v6 = [v3 int64ForColumnIndex:1];
  uint64_t v7 = [v3 cStringForColumnIndex:2];
  if (v7) {
    unint64_t v8 = (char *)v7;
  }
  else {
    unint64_t v8 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v43, v8);
  unint64_t v9 = v44;
  if ((v44 & 0x80u) != 0) {
    unint64_t v9 = (unint64_t)v43[1];
  }
  if (v9
    && (uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48),
        v5 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56) - v10) >> 3)))
  {
    std::unordered_set<std::string>::unordered_set((uint64_t)&__p, v10 + 40 * v5);
    char v11 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>(&__p, (unsigned __int8 *)v43);
    if (v11)
    {
      int8x8_t v12 = v39;
      unint64_t v13 = *((void *)v11 + 1);
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v39);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        if (v13 >= *(void *)&v39) {
          v13 %= *(void *)&v39;
        }
      }
      else
      {
        v13 &= *(void *)&v39 - 1;
      }
      float v19 = (unsigned __int8 *)*((void *)__p + v13);
      do
      {
        uint64_t v20 = v19;
        float v19 = *(unsigned __int8 **)v19;
      }
      while (v19 != v11);
      if (v20 == (unsigned __int8 *)&v40) {
        goto LABEL_28;
      }
      unint64_t v21 = *((void *)v20 + 1);
      if (v14.u32[0] > 1uLL)
      {
        if (v21 >= *(void *)&v39) {
          v21 %= *(void *)&v39;
        }
      }
      else
      {
        v21 &= *(void *)&v39 - 1;
      }
      if (v21 != v13)
      {
LABEL_28:
        if (!*(void *)v11) {
          goto LABEL_29;
        }
        unint64_t v22 = *(void *)(*(void *)v11 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v22 >= *(void *)&v39) {
            v22 %= *(void *)&v39;
          }
        }
        else
        {
          v22 &= *(void *)&v39 - 1;
        }
        if (v22 != v13) {
LABEL_29:
        }
          *((void *)__p + v13) = 0;
      }
      uint64_t v23 = *(void *)v11;
      if (*(void *)v11)
      {
        unint64_t v24 = *(void *)(v23 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v24 >= *(void *)&v12) {
            v24 %= *(void *)&v12;
          }
        }
        else
        {
          v24 &= *(void *)&v12 - 1;
        }
        if (v24 != v13)
        {
          *((void *)__p + v24) = v20;
          uint64_t v23 = *(void *)v11;
        }
      }
      *(void *)uint64_t v20 = v23;
      *(void *)char v11 = 0;
      --v41;
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, (void **)v11);
      uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) + 40 * v5;
      if ((void **)v25 != &__p)
      {
        *(_DWORD *)(v25 + 32) = v42;
        char v26 = (const std::string::value_type *)v40;
        uint64_t v27 = *(void *)(v25 + 8);
        if (v27)
        {
          for (uint64_t i = 0; i != v27; ++i)
            *(void *)(*(void *)v25 + 8 * i) = 0;
          uint64_t v29 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = 0;
          *(void *)(v25 + 24) = 0;
          if (v29) {
            BOOL v30 = v26 == 0;
          }
          else {
            BOOL v30 = 1;
          }
          if (v30)
          {
            uint64_t v31 = (void **)v29;
          }
          else
          {
            do
            {
              std::string::operator=((std::string *)(v29 + 16), (const std::string *)(v26 + 16));
              uint64_t v31 = *(void ***)v29;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(v25, v29);
              char v26 = *(const std::string::value_type **)v26;
              if (v31) {
                BOOL v32 = v26 == 0;
              }
              else {
                BOOL v32 = 1;
              }
              uint64_t v29 = (uint64_t)v31;
            }
            while (!v32);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v31);
        }
        while (v26)
        {
          uint64_t v33 = (char *)operator new(0x28uLL);
          uint64_t v34 = (uint64_t)v33;
          uint64_t v35 = v33 + 16;
          *(void *)uint64_t v33 = 0;
          *((void *)v33 + 1) = 0;
          if (v26[39] < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v33 + 16), *((const std::string::value_type **)v26 + 2), *((void *)v26 + 3));
          }
          else
          {
            long long v36 = *((_OWORD *)v26 + 1);
            *((void *)v33 + 4) = *((void *)v26 + 4);
            _OWORD *v35 = v36;
          }
          *(void *)(v34 + _Block_object_dispose(&STACK[0x210], 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v35);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(v25, v34);
          char v26 = *(const std::string::value_type **)v26;
        }
      }
    }
    else
    {
      __int16 v17 = *(void **)(v4 + 2592);
      BOOL v18 = [NSNumber numberWithLongLong:v6];
      [v17 addObject:v18];
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v40);
    id v37 = __p;
    std::string __p = 0;
    if (v37) {
      operator delete(v37);
    }
  }
  else
  {
    uint64_t v15 = *(void **)(v4 + 2592);
    uint64_t v16 = [NSNumber numberWithLongLong:v6];
    [v15 addObject:v16];
  }
  if ((char)v44 < 0) {
    operator delete(v43[0]);
  }
}

void sub_1B043FE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemPersonImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemPersonImportItem>,std::allocator<ML3ContainerItemPersonImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_32ML3ContainerItemPersonImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemPersonImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemPersonImportItem>,std::allocator<ML3ContainerItemPersonImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ContainerItemPersonImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemPersonImportItem>,std::allocator<ML3ContainerItemPersonImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_60;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int8x8_t v12 = operator new(8 * *(void *)&prime);
      unint64_t v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v41 = v4;
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      uint64_t v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        uint64_t v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = *v15;
        if (*v15)
        {
          unint64_t v42 = v17.u32[0];
          do
          {
            unint64_t v23 = *(void *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            if (v23 == v16)
            {
              uint64_t v15 = (uint64_t *)v22;
            }
            else if (*(void *)(*(void *)a1 + 8 * v23))
            {
              unint64_t v24 = *(void **)v22;
              if (*(void *)v22)
              {
                uint64_t v25 = (void *)v22;
                while (1)
                {
                  char v26 = v24;
                  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break; {
                  unint64_t v24 = (void *)*v26;
                  }
                  uint64_t v25 = v26;
                  if (!*v26) {
                    goto LABEL_47;
                  }
                }
                unint64_t v24 = v26;
                char v26 = v25;
LABEL_47:
                unint64_t v18 = v42;
              }
              else
              {
                char v26 = (void *)v22;
              }
              *uint64_t v15 = (uint64_t)v24;
              void *v26 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v15;
              uint64_t v15 = (uint64_t *)v22;
              unint64_t v16 = v23;
            }
            uint64_t v22 = *v15;
          }
          while (*v15);
        }
        unint64_t v5 = (unint64_t)prime;
        uint64_t v2 = v40;
        uint64_t v4 = v41;
      }
      else
      {
        unint64_t v5 = (unint64_t)prime;
        uint64_t v4 = v41;
      }
    }
    else
    {
      uint64_t v27 = *(void **)a1;
      *(void *)a1 = 0;
      if (v27) {
        operator delete(v27);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = 0;
    }
  }
LABEL_60:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  unint64_t v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v30 = v43;
    if (v5 <= v43) {
      unint64_t v30 = v43 % v5;
    }
  }
  else
  {
    unint64_t v30 = (v5 - 1) & v43;
  }
  uint64_t v31 = *(unsigned __int8 **)(*(void *)a1 + 8 * v30);
  if (v31)
  {
    BOOL v32 = *(unsigned __int8 **)v31;
    if (*(void *)v31)
    {
      int v33 = 0;
      do
      {
        uint64_t v34 = v32;
        unint64_t v35 = *((void *)v32 + 1);
        if (v29 > 1)
        {
          unint64_t v36 = v35;
          if (v35 >= v5) {
            unint64_t v36 = v35 % v5;
          }
        }
        else
        {
          unint64_t v36 = v35 & (v5 - 1);
        }
        if (v36 != v30) {
          break;
        }
        BOOL v37 = v35 == v43 && std::equal_to<std::string>::operator()[abi:ne180100](v34 + 16, v4);
        if (v33 & !v37) {
          break;
        }
        v33 |= v37;
        BOOL v32 = *(unsigned __int8 **)v34;
        uint64_t v31 = v34;
      }
      while (*(void *)v34);
    }
  }
  unint64_t v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5) {
      v38 %= v5;
    }
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    *uint64_t v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v3_Block_object_dispose(&STACK[0x210], 8) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  *uint64_t v2 = *(void *)v31;
  *(void *)uint64_t v31 = v2;
  if (*v2)
  {
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*(void *)(a1 + 24);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemDatabaseImportDataSource>,std::allocator<ML3ContainerItemDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_40ML3ContainerItemDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemDatabaseImportDataSource>,std::allocator<ML3ContainerItemDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ContainerItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemDatabaseImportDataSource>,std::allocator<ML3ContainerItemDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerSeedDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerSeedDatabaseImportDataSource>,std::allocator<ML3ContainerSeedDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_40ML3ContainerSeedDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ContainerSeedDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerSeedDatabaseImportDataSource>,std::allocator<ML3ContainerSeedDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ContainerSeedDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerSeedDatabaseImportDataSource>,std::allocator<ML3ContainerSeedDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerDatabaseImportDataSource>,std::allocator<ML3ContainerDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ContainerDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ContainerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerDatabaseImportDataSource>,std::allocator<ML3ContainerDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ContainerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerDatabaseImportDataSource>,std::allocator<ML3ContainerDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t ML3ImportSession::_enableTriggers(id *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_1B022D000, v2, OS_LOG_TYPE_DEFAULT, "enabling triggers", buf, 2u);
  }

  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = +[ML3MusicLibrary allTriggersSQL];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        if (([this[2] executeUpdate:*(void *)(*((void *)&v10 + 1) + 8 * v6)] & 1) == 0)
        {
          BOOL v8 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)stat buf = 0;
            _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_ERROR, "failed to re-create triggers", buf, 2u);
          }

          uint64_t v7 = 0;
          goto LABEL_15;
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v7 = 1;
LABEL_15:

  return v7;
}

void sub_1B0440818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::shared_ptr<ML3DatabaseImportDataSource>::shared_ptr[abi:ne180100]<ML3ItemStoreDatabaseImportDataSource,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B0440910(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<ML3DatabaseImportDataSource>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ML3DatabaseImportDataSource> const*,std::shared_ptr<ML3DatabaseImportDataSource> const*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v9 = a1 + 2;
  uint64_t v8 = a1[2];
  long long v10 = (void *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v10)
    {
      std::vector<std::shared_ptr<ML3ImportItem>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    uint64_t v11 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >> 60) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    long long v13 = operator new(16 * v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)&v13[2 * v12];
    uint64_t v14 = (uint64_t)v9;
    uint64_t v15 = a2;
    goto LABEL_13;
  }
  unint64_t v16 = (a1[1] - (uint64_t)v10) >> 4;
  if (v16 < a4)
  {
    uint8x8_t v17 = &a2[2 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *>(a2, v17, v10);
    long long v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v9;
    uint64_t v15 = v17;
LABEL_13:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>,std::shared_ptr<ML3ImportItem>*,std::shared_ptr<ML3ImportItem>*,std::shared_ptr<ML3ImportItem>*>(v14, v15, a3, v13);
    return;
  }
  unint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *,std::shared_ptr<ML3ImportItem> *>(a2, a3, v10);
  for (uint64_t i = (void *)a1[1]; i != v18; i -= 2)
  {
    uint8x8_t v20 = (std::__shared_weak_count *)*(i - 1);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

void ___ZN16ML3ImportSession34_prepareTracksForAutomaticDownloadERNSt3__16vectorINS0_10shared_ptrI13ML3ImportItemEENS0_9allocatorIS4_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = (char *)v3[67];
  unint64_t v5 = v3[68];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = (char *)v3[66];
    uint64_t v8 = (v4 - v7) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v12);
      uint64_t v4 = (char *)v3[67];
      uint64_t v7 = (char *)v3[66];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (void *)(v12 + 8 * v8);
    unint64_t v15 = v12 + 8 * v13;
    *uint64_t v14 = a2;
    uint64_t v6 = v14 + 1;
    while (v4 != v7)
    {
      uint64_t v16 = *((void *)v4 - 1);
      v4 -= 8;
      *--uint64_t v14 = v16;
    }
    v3[66] = v14;
    v3[67] = v6;
    v3[68] = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v4 = a2;
    uint64_t v6 = v4 + 8;
  }
  v3[67] = v6;
}

uint64_t std::__shared_ptr_pointer<ML3LyricsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3LyricsDatabaseImportDataSource>,std::allocator<ML3LyricsDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3LyricsDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3LyricsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3LyricsDatabaseImportDataSource>,std::allocator<ML3LyricsDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3LyricsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3LyricsDatabaseImportDataSource>,std::allocator<ML3LyricsDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ChapterDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ChapterDatabaseImportDataSource>,std::allocator<ML3ChapterDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_34ML3ChapterDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ChapterDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ChapterDatabaseImportDataSource>,std::allocator<ML3ChapterDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ChapterDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ChapterDatabaseImportDataSource>,std::allocator<ML3ChapterDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ItemVideoDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemVideoDatabaseImportDataSource>,std::allocator<ML3ItemVideoDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemVideoDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ItemVideoDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemVideoDatabaseImportDataSource>,std::allocator<ML3ItemVideoDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ItemVideoDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemVideoDatabaseImportDataSource>,std::allocator<ML3ItemVideoDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ItemStatsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStatsDatabaseImportDataSource>,std::allocator<ML3ItemStatsDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemStatsDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ItemStatsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStatsDatabaseImportDataSource>,std::allocator<ML3ItemStatsDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ItemStatsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStatsDatabaseImportDataSource>,std::allocator<ML3ItemStatsDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ItemSearchDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemSearchDatabaseImportDataSource>,std::allocator<ML3ItemSearchDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_37ML3ItemSearchDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ItemSearchDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemSearchDatabaseImportDataSource>,std::allocator<ML3ItemSearchDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ItemSearchDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemSearchDatabaseImportDataSource>,std::allocator<ML3ItemSearchDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ItemPlaybackDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemPlaybackDatabaseImportDataSource>,std::allocator<ML3ItemPlaybackDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_39ML3ItemPlaybackDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ItemPlaybackDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemPlaybackDatabaseImportDataSource>,std::allocator<ML3ItemPlaybackDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ItemPlaybackDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemPlaybackDatabaseImportDataSource>,std::allocator<ML3ItemPlaybackDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ItemExtraDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemExtraDatabaseImportDataSource>,std::allocator<ML3ItemExtraDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemExtraDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ItemExtraDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemExtraDatabaseImportDataSource>,std::allocator<ML3ItemExtraDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ItemExtraDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemExtraDatabaseImportDataSource>,std::allocator<ML3ItemExtraDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemDatabaseImportDataSource>,std::allocator<ML3ItemDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_31ML3ItemDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemDatabaseImportDataSource>,std::allocator<ML3ItemDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemDatabaseImportDataSource>,std::allocator<ML3ItemDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__shared_ptr_pointer<ML3ItemStoreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStoreDatabaseImportDataSource>,std::allocator<ML3ItemStoreDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemStoreDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<ML3ItemStoreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStoreDatabaseImportDataSource>,std::allocator<ML3ItemStoreDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ItemStoreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStoreDatabaseImportDataSource>,std::allocator<ML3ItemStoreDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__optional_copy_base<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,false>::__optional_copy_base[abi:ne180100](v4, v6);
      v6 += 40;
      uint64_t v4 = v11 + 40;
      v11 += 40;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B04411FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 40;
        if (*(unsigned char *)(v4 - 8)) {
          uint64_t v6 = std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v6);
        }
        uint64_t v4 = v6;
      }
      while ((void *)v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_copy_base<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 24) = -1;
    uint64_t v3 = *(unsigned int *)(a2 + 24);
    if (v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1F08D4280[v3])(&v5, a1, a2);
      *(_DWORD *)(a1 + 24) = v3;
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_1B0441318(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  if (*(unsigned char *)(v1 + 32)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        uint64_t v4 = v2 - 40;
        if (*(unsigned char *)(v2 - 8)) {
          uint64_t v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v4);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

id ML3ImportSession::_getGroupingKeyForAlbumArtistImportItem(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a2 + 152))(&v7, a2, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __p;
  }
  long long v3 = *(void **)(a1 + 8);
  uint64_t v4 = ML3CPPBridgeString((const UInt8 *)&v9, 0);
  char v5 = [v3 groupingKeyForString:v4];

  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = &unk_1F08C3230;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v5;
}

void sub_1B0441510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::addAlbum(uint64_t a1, uint64_t *a2, void *a3, uint64_t AlbumArtistPIDForAlbumImportItem)
{
  *((void *)&v83 + 1) = *MEMORY[0x1E4F143B8];
  BOOL v8 = *(void *)(a1 + 2272) >= 0x3E8uLL
    && *(void *)(a1 + 1536) == *(void *)(a1 + 1528)
    && ![*(id *)(a1 + 1584) count]
    && [*(id *)(a1 + 1576) count] == 0;
  if (*(_DWORD *)(a1 + 32) == 2 && !*a3)
  {
    if (*(void *)(a1 + 2064)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = [*(id *)(a1 + 2080) count] != 0;
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  uint64_t v10 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = __p;
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 88))(__p);
    if (v70.__r_.__value_.__s.__data_[7] < 0) {
      uint64_t v11 = (void **)__p[0];
    }
    if (*a3)
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 88))(v75);
      if (v77[9] >= 0) {
        unint64_t v12 = v75;
      }
      else {
        unint64_t v12 = *(unsigned char **)v75;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136447234;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      *(void *)unint64_t v80 = AlbumArtistPIDForAlbumImportItem;
      *(_WORD *)&v80[8] = 1024;
      *(_DWORD *)&v80[10] = v8;
      *(_WORD *)&v80[14] = 1024;
      *(_DWORD *)&v80[16] = v9;
      _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_DEFAULT, "adding album=%{public}s trackImportItem=%{public}s, albumArtistPersistentID=%lld, addedAlbumsOverThreshold=%{BOOL}u, switchingToAlbumPayload=%{BOOL}u", (uint8_t *)&buf, 0x2Cu);
      if ((v77[9] & 0x80000000) != 0) {
        operator delete(*(void **)v75);
      }
    }
    else
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136447234;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"<nil>";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      *(void *)unint64_t v80 = AlbumArtistPIDForAlbumImportItem;
      *(_WORD *)&v80[8] = 1024;
      *(_DWORD *)&v80[10] = v8;
      *(_WORD *)&v80[14] = 1024;
      *(_DWORD *)&v80[16] = v9;
      _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_DEFAULT, "adding album=%{public}s trackImportItem=%{public}s, albumArtistPersistentID=%lld, addedAlbumsOverThreshold=%{BOOL}u, switchingToAlbumPayload=%{BOOL}u", (uint8_t *)&buf, 0x2Cu);
    }
    if (v70.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
  }

  if (*a3)
  {
    uint64_t v13 = (std::__shared_weak_count *)a3[1];
    v63[0] = *a3;
    v63[1] = (uint64_t)v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v14 = ML3ImportSession::_prepareTrackForImport(a1, v63, 0, 0);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v14)
    {
      unint64_t v15 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 88))(&buf);
        int v16 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
        std::string::size_type v17 = buf.__r_.__value_.__r.__words[0];
        (*(void (**)(void **__return_ptr))(*(void *)*a3 + 88))(__p);
        p_std::string buf = &buf;
        if (v16 < 0) {
          p_std::string buf = (std::string *)v17;
        }
        if (v70.__r_.__value_.__s.__data_[7] >= 0) {
          unint64_t v19 = __p;
        }
        else {
          unint64_t v19 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t v75 = 136446466;
        *(void *)&v75[4] = p_buf;
        __int16 v76 = 2082;
        *(void *)unint64_t v77 = v19;
        _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_ERROR, "Error adding album=%{public}s. Could not prepare track data for import=%{public}s", v75, 0x16u);
        if (v70.__r_.__value_.__s.__data_[7] < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v20 = 0;
LABEL_116:

      return v20;
    }
  }
  if ([*(id *)(a1 + 2288) count]) {
    int v21 = 1;
  }
  else {
    int v21 = v9;
  }
  if ((v21 | v8) != 1 || ML3ImportSession::flush((ML3ImportSession *)a1, 1))
  {
    if (*a3) {
      uint64_t v22 = *(void *)(*a3 + 8);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 32))(*a2, 285212691);
    uint64_t v24 = *a3;
    std::string::size_type v49 = v23;
    uint64_t v50 = v22;
    if (*a3)
    {
      BOOL v25 = *(unsigned char *)(v24 + 16) != 0;
      BOOL v26 = *(unsigned char *)(v24 + 17) != 0;
      uint64_t v27 = (std::__shared_weak_count *)a3[1];
      v62[0] = *a3;
      v62[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int matched = ML3ImportSession::_matchAlbumToImportedEntity(a1, v62, AlbumArtistPIDForAlbumImportItem);
      char v29 = matched;
      if (v27)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        if ((v29 & 1) == 0) {
          goto LABEL_74;
        }
      }
      else if (!matched)
      {
LABEL_74:
        int v32 = 0;
        goto LABEL_75;
      }
    }
    else
    {
      BOOL v26 = 0;
      BOOL v25 = 0;
    }
    unint64_t v30 = (std::__shared_weak_count *)a2[1];
    uint64_t v60 = *a2;
    BOOL v61 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = (std::__shared_weak_count *)a3[1];
    uint64_t v58 = *a3;
    char v59 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v15 = ML3ImportSession::_getAlbumGroupingIdentifierForImportItem(a1, &v60, &v58, AlbumArtistPIDForAlbumImportItem);
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
    int v32 = 1;
    if (AlbumArtistPIDForAlbumImportItem || v15)
    {
LABEL_76:
      if (*a3 && v25 && !v26)
      {
        unint64_t v51 = 0;
        uint64_t AlbumPersistentID = 0;
LABEL_80:
        int v36 = 0;
        goto LABEL_95;
      }
      if (v32)
      {
        BOOL v37 = (std::__shared_weak_count *)a2[1];
        v55[0] = *a2;
        v55[1] = v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t AlbumPersistentID = ML3ImportSession::_getAlbumPersistentID(a1, (uint64_t)v55, v15);
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
      }
      else
      {
        uint64_t AlbumPersistentID = 0;
      }
      unint64_t v51 = AlbumPersistentID;
      if (*(_DWORD *)(a1 + 32) == 2)
      {
        if (!AlbumPersistentID)
        {
          int v36 = 0;
          ++*(_DWORD *)(a1 + 212);
LABEL_95:
          unint64_t v39 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 134219520;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = AlbumPersistentID;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v49;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
            *(_DWORD *)unint64_t v80 = v32;
            *(_WORD *)&v80[4] = 1024;
            *(_DWORD *)&v80[6] = v36;
            *(_WORD *)&v80[10] = 2048;
            *(void *)&v80[12] = v15;
            *(_WORD *)&v80[20] = 2048;
            *(void *)&v80[22] = AlbumArtistPIDForAlbumImportItem;
            *(_WORD *)&v80[30] = 2048;
            *(void *)&v80[32] = v50;
            _os_log_impl(&dword_1B022D000, v39, OS_LOG_TYPE_DEFAULT, "importing album with PID=%lld, syncID=%lld, matchAlbumToImportedEntity=%{BOOL}u, isAlbumUpdate=%{BOOL}u, albumGroupingIdentifier=%p, albumArtistPersistentID=%lld, trackPersistentID=%lld", (uint8_t *)&buf, 0x40u);
          }

          uint64_t v40 = *a2;
          if (!*a2 || *a3) {
            goto LABEL_99;
          }
          uint64_t v46 = (std::__shared_weak_count *)a2[1];
          if (v46) {
            atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)__p, v40, 285212673);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&buf, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
          }
          else {
            std::string buf = v70;
          }
          ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)v75, v40, 285212699);
          if (SHIBYTE(v78) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v80, *(const std::string::value_type **)&v77[2], *(std::string::size_type *)&v77[10]);
          }
          else
          {
            *(_OWORD *)unint64_t v80 = *(_OWORD *)&v77[2];
            *(void *)&v80[16] = v78;
          }
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v40 + 144))(&v66, v40, 285212673, 1);
          if (SHIBYTE(v68) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v80[24], (const std::string::value_type *)v67, *((std::string::size_type *)&v67 + 1));
          }
          else
          {
            *(_OWORD *)&v80[24] = v67;
            uint64_t v81 = v68;
          }
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v40 + 144))(&v64, v40, 285212699, 1);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v82, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
          }
          else {
            std::string v82 = v65;
          }
          unint64_t v71 = 0;
          uint64_t v72 = 0;
          v73[0] = 0;
          v73[1] = &v71;
          char v74 = 0;
          unint64_t v71 = (long long *)operator new(0x60uLL);
          uint64_t v72 = v71;
          v73[0] = v71 + 6;
          uint64_t v47 = 0;
          uint64_t v72 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v73, (long long *)&buf, &v83, (std::string *)v71);
          do
          {
            if (SHIBYTE(v82.__r_.__value_.__r.__words[v47 + 2]) < 0) {
              operator delete(*(void **)((char *)&v82.__r_.__value_.__l.__data_ + v47 * 8));
            }
            v47 -= 3;
          }
          while (v47 != -12);
          uint64_t v64 = &unk_1F08C3230;
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
          uint64_t v66 = &unk_1F08C3230;
          if (SHIBYTE(v68) < 0) {
            operator delete((void *)v67);
          }
          *(void *)uint64_t v75 = &unk_1F08C3230;
          if (SHIBYTE(v78) < 0) {
            operator delete(*(void **)&v77[2]);
          }
          __p[0] = &unk_1F08C3230;
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          memset(&buf, 0, sizeof(buf));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&buf, v71, v72, 0xAAAAAAAAAAAAAAABLL * (((char *)v72 - (char *)v71) >> 3));
          int v48 = ML3ImportSession::_processSortableNames(a1, (uint64_t *)&buf);
          __p[0] = &buf;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0] = &v71;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (v46)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v46);
            if ((v48 & 1) == 0) {
              goto LABEL_148;
            }
          }
          else if (!v48)
          {
LABEL_148:
            uint64_t v20 = 0;
LABEL_114:
            if (*(unsigned char *)(a1 + 1512)) {
              std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>((void *)(a1 + 848), v51);
            }
            goto LABEL_116;
          }
LABEL_99:
          uint64_t v41 = (std::__shared_weak_count *)a2[1];
          v54[0] = *a2;
          v54[1] = v41;
          if (v41) {
            atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v15) {
            AlbumArtistPIDForAlbumImportItem = [v15 albumArtistPersistentID];
          }
          uint64_t v42 = *a3;
          unint64_t v43 = (std::__shared_weak_count *)a3[1];
          v53[0] = v42;
          v53[1] = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          ML3ImportSession::_addAlbum(a1, v54, v15, AlbumArtistPIDForAlbumImportItem, v53);
          if (v43) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
          }
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          unsigned __int8 v44 = (std::__shared_weak_count *)a2[1];
          v52[0] = *a2;
          v52[1] = v44;
          if (v44) {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          ML3ImportSession::_addAlbumDataToSourceMaps(a1, v52);
          if (v44) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
          uint64_t v20 = 1;
          goto LABEL_114;
        }
        ++*(_DWORD *)(a1 + 216);
      }
      else if (!AlbumPersistentID)
      {
        goto LABEL_80;
      }
      uint64_t v38 = *a2;
      int v36 = 1;
      *(unsigned char *)(v38 + 16) = 1;
      *(void *)(v38 + _Block_object_dispose(&STACK[0x210], 8) = AlbumPersistentID;
      goto LABEL_95;
    }
    int v33 = (std::__shared_weak_count *)a2[1];
    v57[0] = *a2;
    v57[1] = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = (std::__shared_weak_count *)a3[1];
    v56[0] = *a3;
    v56[1] = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AlbumArtistPIDForAlbumImportItem = ML3ImportSession::_getAlbumArtistPIDForAlbumImportItem((void *)a1, v57, (uint64_t)v56);
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
LABEL_75:
    unint64_t v15 = 0;
    goto LABEL_76;
  }
  return 0;
}

void sub_1B0442060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  *(void *)(v63 - 256) = &unk_1F08C3230;
  if (*(char *)(v63 - 217) < 0) {
    operator delete(*(void **)(v63 - 240));
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  for (; v62 != v63 - 208; v62 -= 24)
  {
    if (*(char *)(v62 - 1) < 0) {
      operator delete(*(void **)(v62 - 24));
    }
  }
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_matchAlbumToImportedEntity(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x4812000000;
  uint64_t v40 = __Block_byref_object_copy__288;
  uint64_t v41 = __Block_byref_object_dispose__289;
  uint64_t v42 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(buf);
  if ((v48[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v48[2], *(std::string::size_type *)&v48[10]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((v48[25] & 0x80000000) != 0) {
      operator delete(*(void **)&v48[2]);
    }
  }
  else
  {
    std::string __p = *(std::string *)&v48[2];
  }
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2020000000;
  uint64_t v36 = 0;
  uint64_t v36 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 117440516);
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 16777217);
  int v7 = MLMediaTypeByStandardizingMediaType(v6);
  int v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, 167772164);
  int v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, 117440516);
  uint64_t v10 = *a2;
  if (*(unsigned char *)(*a2 + 16))
  {
    if (!*(unsigned char *)(v10 + 17))
    {
      char v11 = v9;
      if ((v8 & v9 & 1) == 0)
      {
        unint64_t v12 = *(void **)(a1 + 16);
        uint64_t v13 = [NSNumber numberWithLongLong:*(void *)(v10 + 8)];
        unint64_t v45 = v13;
        int v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v45 count:1];
        unint64_t v15 = [v12 executeQuery:@"SELECT album_pid FROM item WHERE ROWID = ?" withParameters:v14];

        uint64_t v16 = [v15 objectForFirstRowAndColumn];
        std::string::size_type v17 = (void *)v16;
        if (v16)
        {
          unint64_t v18 = *(void **)(a1 + 16);
          uint64_t v44 = v16;
          unint64_t v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v44 count:1];
          uint64_t v20 = [v18 executeQuery:@"SELECT album, season_number FROM album WHERE album_pid = ?", v19 withParameters];

          v30[0] = MEMORY[0x1E4F143A8];
          v30[1] = 3221225472;
          v30[2] = ___ZN16ML3ImportSession27_matchAlbumToImportedEntityENSt3__110shared_ptrI13ML3ImportItemEEx_block_invoke;
          void v30[3] = &unk_1E5FB7790;
          char v31 = v8;
          char v32 = v11;
          void v30[4] = &v37;
          v30[5] = &v33;
          unint64_t v15 = v20;
          [v20 enumerateRowsWithBlock:v30];
        }
      }
    }
  }
  if (v34[3])
  {
    uint64_t v21 = 1;
  }
  else
  {
    int v22 = v7 & 0x10042;
    if (*((char *)v38 + 71) < 0) {
      uint64_t v23 = v38[7];
    }
    else {
      uint64_t v23 = *((unsigned __int8 *)v38 + 71);
    }
    if (a3) {
      BOOL v24 = v22 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    char v25 = !v24;
    uint64_t v21 = 1;
    if (!v23 && (v25 & 1) == 0)
    {
      BOOL v26 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = v38 + 6;
        if (*((char *)v38 + 71) < 0) {
          uint64_t v27 = (void *)*v27;
        }
        uint64_t v28 = v34[3];
        *(_DWORD *)std::string buf = 136446978;
        *(void *)&uint8_t buf[4] = v27;
        __int16 v47 = 2048;
        *(void *)int v48 = v28;
        *(_WORD *)&v48[8] = 2048;
        *(void *)&v48[10] = a3;
        *(_WORD *)&v48[18] = 1024;
        *(_DWORD *)&v48[20] = v22 != 0;
        _os_log_impl(&dword_1B022D000, v26, OS_LOG_TYPE_DEFAULT, "will not try to deduplicate album with name=%{public}s, seasonNumber=%lld, albumArtistPID=%lld, isBook=%{BOOL}u", buf, 0x26u);
      }

      uint64_t v21 = 0;
    }
  }
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v21;
}

void sub_1B0442788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

ML3AlbumGroupingIdentifier *ML3ImportSession::_getAlbumGroupingIdentifierForImportItem(uint64_t a1, void *a2, uint64_t *a3, uint64_t AlbumArtistPIDForAlbumImportItem)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v8 = (void *)*a3;
  if (*a3)
  {
    uint64_t v9 = v8[1];
    uint64_t v10 = (*(uint64_t (**)(void *, uint64_t))(*v8 + 32))(v8, 16777246) != 0;
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212681);
    uint64_t v9 = 0;
  }
  if (*a3) {
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 24))(buf);
  }
  else {
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(buf);
  }
  if ((v39[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)&v39[2], *(std::string::size_type *)&v39[10]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((v39[25] & 0x80000000) != 0) {
      operator delete(*(void **)&v39[2]);
    }
  }
  else
  {
    std::string v36 = *(std::string *)&v39[2];
  }
  uint64_t v11 = *a3;
  if (!*a3) {
    uint64_t v11 = *a2;
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v11 + 24))(buf);
  if ((v39[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)&v39[2], *(std::string::size_type *)&v39[10]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((v39[25] & 0x80000000) != 0) {
      operator delete(*(void **)&v39[2]);
    }
  }
  else
  {
    std::string v35 = *(std::string *)&v39[2];
  }
  if (*a3) {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a3 + 32))(*a3, 117440516) != 0;
  }
  else {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212683);
  }
  if (*a3) {
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 152))(buf);
  }
  else {
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(buf);
  }
  if ((v39[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)&v39[2], *(std::string::size_type *)&v39[10]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((v39[25] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v39[2]);
      if (AlbumArtistPIDForAlbumImportItem) {
        goto LABEL_37;
      }
    }
    else if (AlbumArtistPIDForAlbumImportItem)
    {
      goto LABEL_37;
    }
  }
  else
  {
    std::string v34 = *(std::string *)&v39[2];
    if (AlbumArtistPIDForAlbumImportItem) {
      goto LABEL_37;
    }
  }
  uint64_t v13 = *a2;
  int v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v32 = v13;
  uint64_t v33 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = (std::__shared_weak_count *)a3[1];
  uint64_t v30 = *a3;
  char v31 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AlbumArtistPIDForAlbumImportItem = ML3ImportSession::_getAlbumArtistPIDForAlbumImportItem((void *)a1, &v32, (uint64_t)&v30);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
LABEL_37:
  if (v9)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a3 + 32))(*a3, 16777217);
    unsigned int v17 = MLMediaTypeByStandardizingMediaType(v16);
    if ((v17 & 0x10002) != 0) {
      int v18 = 1;
    }
    else {
      int v18 = (v17 >> 6) & 1;
    }
    if (v12) {
      goto LABEL_53;
    }
  }
  else
  {
    int v18 = 0;
    if (v12) {
      goto LABEL_53;
    }
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v36.__r_.__value_.__l.__size_;
  }
  if (AlbumArtistPIDForAlbumImportItem) {
    int v20 = v18;
  }
  else {
    int v20 = 0;
  }
  if (!size && !v20)
  {
    uint64_t v21 = 0;
    int v22 = 0;
    uint64_t v23 = 0;
    BOOL v24 = 0;
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v23 = ML3CPPBridgeString((const UInt8 *)&v36, 1);
  BOOL v24 = ML3CPPBridgeString((const UInt8 *)&v35, 1);
  int v22 = [*(id *)(a1 + 8) groupingKeyForString:v23];
  char v25 = [ML3AlbumGroupingIdentifier alloc];
  uint64_t v21 = -[ML3AlbumGroupingIdentifier initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:](v25, "initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:", AlbumArtistPIDForAlbumImportItem, v22, v24, v12, v10 != 0, v30, v31, v32, v33);
LABEL_54:
  BOOL v26 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = &v34;
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 138544130;
    *(void *)&uint8_t buf[4] = v21;
    __int16 v38 = 2114;
    *(void *)uint64_t v39 = v23;
    *(_WORD *)&v39[8] = 2082;
    *(void *)&v39[10] = v27;
    *(_WORD *)&v39[18] = 1024;
    *(_DWORD *)&v39[20] = v18;
    _os_log_impl(&dword_1B022D000, v26, OS_LOG_TYPE_DEFAULT, "Creating albumGroupingIdentifier=%{public}@ with albumName=%{public}@, albumArtistName=%{public}s, isBook=%{BOOL}u", buf, 0x26u);
  }

  uint64_t v28 = v21;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }

  return v28;
}

void sub_1B0442E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_getAlbumArtistPIDForAlbumImportItem(void *a1, void *a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*(void *)a3) {
    (*(void (**)(NSData *__return_ptr))(**(void **)a3 + 152))(&v42);
  }
  else {
    (*(void (**)(NSData *__return_ptr))(*(void *)*a2 + 24))(&v42);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v42.super.isa = (Class)&unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v44 = __p;
  }
  uint64_t v6 = *(void **)a3;
  if (*(void *)a3)
  {
    unint64_t v7 = v6[1];
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v6 = (void *)*a2;
  }
  (*(void (**)(NSData *__return_ptr))(*v6 + 24))(&v42);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v42.super.isa = (Class)&unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v41 = __p;
  }
  memset(&v40, 0, sizeof(v40));
  uint64_t v8 = *a2;
  if (!*(void *)a3)
  {
    if (!v8) {
      goto LABEL_25;
    }
    (*(void (**)(NSData *__return_ptr, void, uint64_t))(*(void *)v8 + 24))(&v42, *a2, 285212701);
    char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_22;
    }
LABEL_21:
    std::string v46 = __p;
    goto LABEL_23;
  }
  if (v8) {
    goto LABEL_25;
  }
  (*(void (**)(NSData *__return_ptr))(**(void **)a3 + 24))(&v42);
  char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_22:
  std::string::__init_copy_ctor_external(&v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_23:
  std::string v40 = v46;
  v42.super.isa = (Class)&unk_1F08C3230;
  if (v9 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_25:
  std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  int v11 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v40.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>(a1 + 161, (unsigned __int8 *)&v40);
    if (v12)
    {
      int v14 = (uint64_t *)*((void *)v12 + 5);
      uint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v15 = *v14;
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        if (v15) {
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t v15 = *v14;
        if (*v14) {
          goto LABEL_74;
        }
      }
    }
  }
  std::string::size_type v16 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v16 = v44.__r_.__value_.__l.__size_;
  }
  if (v16)
  {
    unsigned int v17 = (void *)a1[1];
    int v18 = ML3CPPBridgeString((const UInt8 *)&v44, 1);
    unint64_t v19 = objc_msgSend(v17, "groupingKeyForString:", v18, v40.__r_.__value_.__r.__words[0]);

    if (![v19 length])
    {
      uint64_t v15 = 0;
      goto LABEL_48;
    }
    ML3CPPStringFromData(&v42, v19);
    int v20 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>(a1 + 141, (unsigned __int8 *)&v42);
    uint64_t v21 = v20;
    if (__p.__r_.__value_.__s.__data_[7] < 0)
    {
      operator delete(v42.super.isa);
      if (!v21) {
        goto LABEL_47;
      }
    }
    else if (!v20)
    {
      goto LABEL_47;
    }
    uint64_t v23 = (uint64_t *)*((void *)v21 + 5);
    int v22 = (std::__shared_weak_count *)*((void *)v21 + 6);
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = *v23;
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (!v15) {
        goto LABEL_47;
      }
LABEL_48:

      goto LABEL_49;
    }
    uint64_t v15 = *v23;
    if (*v23) {
      goto LABEL_48;
    }
LABEL_47:
    BOOL v24 = (void *)a1[2];
    unint64_t v45 = v19;
    char v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v45 count:1];
    BOOL v26 = [v24 executeQuery:@"SELECT album_artist_pid FROM album_artist WHERE grouping_key=? LIMIT 1" withParameters:v25];

    uint64_t v15 = [v26 int64ValueForFirstRowAndColumn];
    goto LABEL_48;
  }
  uint64_t v15 = 0;
LABEL_49:
  if (!v15 && v7)
  {
    uint64_t v27 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(a1 + 42, v7);
    if (!v27) {
      goto LABEL_58;
    }
    char v29 = (uint64_t *)v27[5];
    uint64_t v28 = (std::__shared_weak_count *)v27[6];
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v29)
    {
      uint64_t v15 = *v29;
      if (!v28) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    uint64_t v15 = 0;
    if (v28) {
LABEL_56:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
LABEL_57:
  if (v15) {
    goto LABEL_74;
  }
LABEL_58:
  uint64_t v30 = *a2;
  char v31 = os_log_create("com.apple.amp.medialibrary", "Import");
  BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  if (v30)
  {
    if (v32)
    {
      (*(void (**)(NSData *__return_ptr))(*(void *)*a2 + 88))(&v42);
      if (__p.__r_.__value_.__s.__data_[7] >= 0) {
        isa = &v42;
      }
      else {
        isa = v42.super.isa;
      }
      LODWORD(v46.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + 4) = (std::string::size_type)isa;
      std::string v34 = "Album import item=%{public}s does not have valid album artist";
      std::string v35 = v31;
      uint32_t v36 = 12;
LABEL_71:
      _os_log_impl(&dword_1B022D000, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&v46, v36);
      if (__p.__r_.__value_.__s.__data_[7] < 0) {
        operator delete(v42.super.isa);
      }
    }
  }
  else if (v32)
  {
    (*(void (**)(NSData *__return_ptr))(**(void **)a3 + 88))(&v42);
    if (__p.__r_.__value_.__s.__data_[7] >= 0) {
      uint64_t v37 = &v42;
    }
    else {
      uint64_t v37 = v42.super.isa;
    }
    __int16 v38 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v38 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    LODWORD(v46.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
    WORD2(v46.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v46.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v38;
    std::string v34 = "Track import item=%{public}s with albumName=%{public}s does not have valid album artist";
    std::string v35 = v31;
    uint32_t v36 = 22;
    goto LABEL_71;
  }

  uint64_t v15 = 0;
LABEL_74:
  if (v11 < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_1B0443600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v33 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getAlbumPersistentID(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  BOOL v6 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(unsigned char *)(a1 + 1512) != 0;
  unsigned int v7 = *(_DWORD *)(a1 + 32);
  if (ML3AlbumRulesIdentityImportPropertyForSource(v7))
  {
    if (*(_DWORD *)(a1 + 32) == 2)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)a2 + 24))(buf);
      if ((v38[25] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)&v38[2], *(std::string::size_type *)&v38[10]);
        *(void *)std::string buf = &unk_1F08C3230;
        if ((v38[25] & 0x80000000) != 0) {
          operator delete(*(void **)&v38[2]);
        }
      }
      else
      {
        std::string v34 = *(std::string *)&v38[2];
      }
      std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      if (!size) {
        goto LABEL_30;
      }
      if (v6 && !*(unsigned char *)(a1 + 1519)) {
        ML3ImportSession::_populateExistingAlbumIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
      }
      uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a1 + 2128), (unsigned __int8 *)&v34);
      if (v13)
      {
        uint64_t v10 = *((void *)v13 + 5);
        int v14 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = &v34;
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v15 = (std::string *)v34.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 134218242;
          *(void *)&uint8_t buf[4] = v10;
          __int16 v37 = 2082;
          *(void *)__int16 v38 = v15;
          _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_DEFAULT, "matched to cached album pid %lld on cloudID=%{public}s", buf, 0x16u);
        }
      }
      else
      {
LABEL_30:
        uint64_t v10 = 0;
      }
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_32;
      }
      operator delete(v34.__r_.__value_.__l.__data_);
      if (v10) {
        goto LABEL_63;
      }
    }
    else
    {
      unint64_t v8 = (*(uint64_t (**)(void))(**(void **)a2 + 32))();
      if (v8)
      {
        if (v6 && !*(unsigned char *)(a1 + 1519)) {
          ML3ImportSession::_populateExistingAlbumIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
        }
        char v9 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 2088), v8);
        if (v9)
        {
          uint64_t v10 = v9[3];
          int v11 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134218240;
            *(void *)&uint8_t buf[4] = v10;
            __int16 v37 = 2048;
            *(void *)__int16 v38 = v8;
            _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_DEFAULT, "matched to cached album pid %lld on sourceID=%lld", buf, 0x16u);
          }

LABEL_32:
          if (v10) {
            goto LABEL_63;
          }
        }
      }
    }
  }
  if (!v5 || v7 - 1 < 2) {
    goto LABEL_47;
  }
  std::string::size_type v16 = [v5 keyValue];
  ML3CPPStringFromData((NSData *)buf, v16);
  unsigned int v17 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a1 + 1248), buf);
  if ((v38[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }

  if (!v17) {
    goto LABEL_47;
  }
  int v18 = (uint64_t *)*((void *)v17 + 5);
  unint64_t v19 = (std::__shared_weak_count *)*((void *)v17 + 6);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *v18;
  int v20 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_1B022D000, v20, OS_LOG_TYPE_DEFAULT, "matched to cached album pid %lld based on grouping key", buf, 0xCu);
  }

  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (!v10)
  {
LABEL_47:
    uint64_t v21 = (*(void (**)(void))(**(void **)a2 + 112))();
    int v22 = v21;
    if (v21)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v23 = v21;
      uint64_t v24 = [v23 countByEnumeratingWithState:&v30 objects:v35 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v31;
        while (2)
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v31 != v25) {
              objc_enumerationMutation(v23);
            }
            uint64_t v27 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Album, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(void *)(a1 + 8), *(void *)(*((void *)&v30 + 1) + 8 * i), 0, (void)v30);
            uint64_t v10 = [v27 anyEntityPersistentID];
            if (v10)
            {
              uint64_t v28 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 134218242;
                *(void *)&uint8_t buf[4] = v10;
                __int16 v37 = 2114;
                *(void *)__int16 v38 = v27;
                _os_log_impl(&dword_1B022D000, v28, OS_LOG_TYPE_DEFAULT, "matched to album pid %lld using query %{public}@", buf, 0x16u);
              }

              goto LABEL_60;
            }
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v30 objects:v35 count:16];
          if (v24) {
            continue;
          }
          break;
        }
      }
      uint64_t v10 = 0;
LABEL_60:
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
LABEL_63:

  return v10;
}

void sub_1B0443C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ML3ImportSession::_addAlbum(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v412 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  uint64_t v383 = 0;
  v384 = &v383;
  uint64_t v385 = 0x4012000000;
  v386 = __Block_byref_object_copy__459;
  v387 = __Block_byref_object_dispose__460;
  v388 = "";
  v390 = 0;
  uint64_t v389 = 0;
  if (v7)
  {
    id v8 = v7;
    id v382 = [v7 groupingKey];
    v276 = v382;

    id v7 = v8;
  }
  else
  {
    v276 = 0;
    id v382 = 0;
  }
  uint64_t v376 = 0;
  v377 = &v376;
  uint64_t v378 = 0x3032000000;
  v379 = __Block_byref_object_copy__286;
  v380 = __Block_byref_object_dispose__287;
  id v9 = v7;
  id v381 = v9;
  uint64_t v369 = 0;
  v370 = (const std::string *)&v369;
  uint64_t v371 = 0x4812000000;
  v372 = __Block_byref_object_copy__288;
  v373 = __Block_byref_object_dispose__289;
  uint64_t v374 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v375 = *(std::string *)&buf[16];
  }
  uint64_t v362 = 0;
  v363 = (const std::string *)&v362;
  uint64_t v364 = 0x4812000000;
  v365 = __Block_byref_object_copy__288;
  v366 = __Block_byref_object_dispose__289;
  uint64_t v367 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v368, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v368 = *(std::string *)&buf[16];
  }
  uint64_t v355 = 0;
  v356 = (long long *)&v355;
  uint64_t v357 = 0x4812000000;
  v358 = __Block_byref_object_copy__288;
  v359 = __Block_byref_object_dispose__289;
  uint64_t v360 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v361, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v361 = *(std::string *)&buf[16];
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v354, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v354 = *(std::string *)&buf[16];
  }
  uint64_t v347 = 0;
  v348 = &v347;
  uint64_t v349 = 0x4812000000;
  v350 = __Block_byref_object_copy__288;
  v351 = __Block_byref_object_dispose__289;
  uint64_t v352 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string __p = *(std::string *)&buf[16];
  }
  uint64_t v343 = 0;
  v344 = &v343;
  uint64_t v345 = 0x2020000000;
  uint64_t v346 = 0;
  uint64_t v346 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212679);
  uint64_t v339 = 0;
  v340 = &v339;
  uint64_t v341 = 0x2020000000;
  uint64_t v342 = 0;
  uint64_t v342 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212690);
  uint64_t v335 = 0;
  v336 = &v335;
  uint64_t v337 = 0x2020000000;
  uint64_t v338 = 0;
  uint64_t v338 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212680);
  uint64_t v331 = 0;
  v332 = &v331;
  uint64_t v333 = 0x2020000000;
  uint64_t v334 = 0;
  uint64_t v334 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212683);
  uint64_t v327 = 0;
  v328 = &v327;
  uint64_t v329 = 0x2020000000;
  uint64_t v330 = 0;
  uint64_t v330 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212684);
  uint64_t v323 = 0;
  v324 = &v323;
  uint64_t v325 = 0x2020000000;
  uint64_t v326 = 0;
  uint64_t v326 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212696);
  uint64_t v319 = 0;
  v320 = &v319;
  uint64_t v321 = 0x2020000000;
  uint64_t v322 = 0;
  uint64_t v322 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212695);
  uint64_t v315 = 0;
  v316 = (unsigned __int8 *)&v315;
  uint64_t v317 = 0x2020000000;
  BOOL v318 = 0;
  BOOL v318 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212681) != 0;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212688);
  BOOL v314 = v10 != 0;
  uint64_t v310 = 0;
  v311 = &v310;
  uint64_t v312 = 0x2020000000;
  BOOL v313 = 0;
  BOOL v313 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212693) != 0;
  uint64_t v306 = 0;
  v307 = &v306;
  uint64_t v308 = 0x2020000000;
  char v309 = 0;
  if ((*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, 33554462)) {
    char v11 = 1;
  }
  else {
    char v11 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, 16777248);
  }
  char v309 = v11;
  uint64_t v305 = a4;
  uint64_t v284 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 167772175);
  uint64_t v301 = 0;
  v302 = &v301;
  uint64_t v303 = 0x2020000000;
  uint64_t v304 = 0;
  uint64_t v304 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 285212691);
  uint64_t v12 = (void *)*a5;
  v279 = v9;
  uint64_t v275 = v10;
  if (*a5)
  {
    unint64_t v283 = v12[1];
    uint64_t v13 = (*(uint64_t (**)(void *, uint64_t))(*v12 + 32))(v12, 16777217);
    unsigned int v278 = (MLMediaTypeByStandardizingMediaType(v13) >> 10) & 1;
  }
  else
  {
    unint64_t v283 = 0;
    unsigned int v278 = 0;
  }
  unint64_t v14 = v284;
  if (v284 && v302[3])
  {
    *(unsigned char *)(a1 + 1521) = 1;
    uint64_t v15 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 88))(&v411);
      std::string::size_type v16 = (v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v411
          : (std::string *)v411.__r_.__value_.__r.__words[0];
      uint64_t v17 = v302[3];
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v284;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&uint8_t buf[24] = v17;
      _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_ERROR, "Album Import Item=%{public}s has syncID=%lld and legacySyncID=%lld", buf, 0x20u);
      if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v411.__r_.__value_.__l.__data_);
      }
    }

    unint64_t v14 = v284;
  }
  if (*a5)
  {
    int v18 = *(void **)(a1 + 16);
    unint64_t v19 = [NSNumber numberWithLongLong:v283];
    v410 = v19;
    int v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v410 count:1];
    uint64_t v21 = [v18 executeQuery:@"SELECT album_pid FROM item WHERE ROWID = ?" withParameters:v20];

    uint64_t v22 = [v21 int64ValueForFirstRowAndColumn];
    if (*(unsigned char *)(*a5 + 16))
    {
      uint64_t v23 = v22;
      uint64_t v24 = (std::__shared_weak_count *)a5[1];
      v300[0] = *a5;
      v300[1] = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)v300, 0x1000009u);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v23) {
        int v26 = 0;
      }
      else {
        int v26 = shouldPreserveTrackProperty;
      }
      if (v26 == 1)
      {
        uint64_t v27 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1B022D000, v27, OS_LOG_TYPE_DEFAULT, "Not updating/creating album as pid=0 AND persistentID is preserved by a higher source", buf, 2u);
        }

        ML3ImportSession::_getDefaultEmptyAlbum((ML3ImportSession *)&v298);
        uint64_t v28 = v299;
        ML3ImportSession::_setAlbumInfoForTrackPersistentID(a1, v283, v298, v299);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }

        goto LABEL_489;
      }
      if (!*(unsigned char *)(*a5 + 17))
      {
        uint64_t v71 = *a2;
        *(void *)(v71 + _Block_object_dispose(&STACK[0x210], 8) = v23;
        *(unsigned char *)(v71 + 16) = 0;
        uint64_t v72 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v73 = *(void *)(*a5 + 8);
          *(_DWORD *)std::string buf = 134218240;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v73;
          _os_log_impl(&dword_1B022D000, v72, OS_LOG_TYPE_DEFAULT, "Setting albumPID=%lld for trackPID=%lld", buf, 0x16u);
        }

        if (v23)
        {
          char v74 = *(void **)(a1 + 16);
          uint64_t v75 = [NSNumber numberWithLongLong:v23];
          v409 = v75;
          __int16 v76 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v409 count:1];
          unint64_t v77 = [v74 executeQuery:@"SELECT album, sort_album, feed_url, user_rating, liked_state, liked_state_changed_date, all_compilations, season_number, representative_item_pid, grouping_key, album_year, contains_classical_work, user_rating_is_derived, sync_id, store_id, cloud_library_id, classical_experience_available, album_artist_pid FROM album WHERE album_pid=?", v76 withParameters];
          uint64_t v78 = v77;
          v290[0] = MEMORY[0x1E4F143A8];
          v290[1] = 3321888768;
          v290[2] = ___ZN16ML3ImportSession9_addAlbumENSt3__110shared_ptrI13ML3ImportItemEEP26ML3AlbumGroupingIdentifierxS3__block_invoke;
          v290[3] = &unk_1F08C8898;
          uint64_t v80 = *a2;
          char v79 = (std::__shared_weak_count *)a2[1];
          v290[21] = a1;
          v290[22] = v80;
          v291 = v79;
          if (v79) {
            atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v290[4] = &v369;
          v290[5] = &v362;
          v290[6] = &v355;
          v290[7] = &v343;
          v290[8] = &v335;
          v290[9] = &v319;
          v290[10] = &v315;
          v290[11] = &v331;
          v290[12] = &v327;
          v290[13] = &v306;
          v290[14] = &v339;
          v290[15] = &v323;
          v290[16] = &v301;
          v290[17] = &v347;
          v290[18] = &v310;
          v290[19] = &v376;
          int v297 = 16777225;
          uint64_t v82 = *a5;
          uint64_t v81 = (std::__shared_weak_count *)a5[1];
          uint64_t v292 = a4;
          uint64_t v293 = v82;
          v294 = v81;
          if (v81) {
            atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v290[20] = &v383;
          uint64_t v295 = v23;
          unint64_t v296 = v283;
          [v77 enumerateRowsWithBlock:v290];

          if (v294) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v294);
          }
          if (v291) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v291);
          }
        }
        else
        {
          char v173 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 134217984;
            *(void *)&uint8_t buf[4] = v283;
            _os_log_impl(&dword_1B022D000, v173, OS_LOG_TYPE_ERROR, "No existing album PID for update item %lli", buf, 0xCu);
          }
        }
      }
    }

    unint64_t v14 = v284;
  }
  BOOL v289 = 0;
  if (!v384[6])
  {
    if (*(void *)(*a2 + 8))
    {
LABEL_58:
      char v29 = (void *)v377[5];
      if (*((char *)v348 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v288, (const std::string::value_type *)v348[6], v348[7]);
      }
      else {
        std::string v288 = *(std::string *)((unsigned char *)v348 + 2);
      }
      ML3ImportSession::_getAlbumImportItemForGroupingIdentifierAndPIDs(buf, a1, v29, (uint64_t *)&v288, *(void *)(*a2 + 8), v14, &v289);
      long long v30 = (std::__shared_weak_count *)v384[7];
      *((_OWORD *)v384 + 3) = *(_OWORD *)buf;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v288.__r_.__value_.__l.__data_);
      }
      goto LABEL_68;
    }
    if (*((char *)v348 + 71) < 0)
    {
      if (v348[7]) {
        goto LABEL_58;
      }
    }
    else if (*((unsigned char *)v348 + 71))
    {
      goto LABEL_58;
    }
    uint64_t v120 = [(id)v377[5] groupingKey];
    if ([v120 length] || objc_msgSend((id)v377[5], "albumArtistPersistentID"))
    {

      unint64_t v14 = v284;
    }
    else
    {
      BOOL v178 = [(id)v377[5] seasonNumber] == 0;

      unint64_t v14 = v284;
      if (v178) {
        goto LABEL_68;
      }
    }
    goto LABEL_58;
  }
LABEL_68:
  long long v31 = v384;
  long long v32 = (const void *)v384[6];
  if (!v32)
  {
    if (!*(void *)(*a2 + 8)) {
      goto LABEL_79;
    }
    uint32_t v36 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
      std::string::size_type v37 = *(void *)(*a2 + 8);
      __int16 v38 = *(unsigned char **)buf;
      if (buf[23] >= 0) {
        __int16 v38 = buf;
      }
      LODWORD(v411.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v411.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
      WORD2(v411.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v411.__r_.__value_.__r.__words[1] + 6) = v37;
      _os_log_impl(&dword_1B022D000, v36, OS_LOG_TYPE_ERROR, "Import item %{public}s has valid PID=%lld, but cannot be located in the database", (uint8_t *)&v411, 0x16u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    long long v31 = v384;
    long long v32 = (const void *)v384[6];
    unint64_t v14 = v284;
    if (!v32)
    {
LABEL_79:
      uint64_t v39 = v14;
      if (!v14)
      {
        std::string v40 = (std::__shared_weak_count *)a2[1];
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v39 = [*(id *)(a1 + 128) nextPersistentID];
        std::string v41 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 134217984;
          *(void *)&uint8_t buf[4] = v39;
          _os_log_impl(&dword_1B022D000, v41, OS_LOG_TYPE_DEFAULT, "created new album pid %lld", buf, 0xCu);
        }

        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
      }
      id v382 = [(id)v377[5] groupingKey];

      uint64_t v42 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a1, (uint64_t)&v363[2], (uint64_t)&v370[2]);
      uint64_t v44 = v43;
      unint64_t v45 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        std::string v46 = (std::string::__raw *)&v370[2];
        if (SHIBYTE(v370[2].__r_.__value_.__r.__words[2]) < 0) {
          std::string v46 = (std::string::__raw *)v46->__words[0];
        }
        uint64_t v47 = (std::string::__raw *)&v363[2];
        if (SHIBYTE(v363[2].__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v47 = (std::string::__raw *)v47->__words[0];
        }
        uint64_t v48 = v324[3];
        uint64_t v49 = v302[3];
        uint64_t v50 = v348 + 6;
        if (*((char *)v348 + 71) < 0) {
          uint64_t v50 = (void *)*v50;
        }
        uint64_t v51 = v336[3];
        uint64_t v52 = v377[5];
        *(_DWORD *)std::string buf = 134220802;
        *(void *)&uint8_t buf[4] = v39;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v46;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&uint8_t buf[24] = v47;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = v48;
        __int16 v393 = 2048;
        uint64_t v394 = v284;
        __int16 v395 = 2048;
        uint64_t v396 = v49;
        __int16 v397 = 2082;
        v398 = v50;
        __int16 v399 = 2048;
        uint64_t v400 = v51;
        __int16 v401 = 1024;
        unsigned int v402 = v278;
        __int16 v403 = 2048;
        uint64_t v404 = v44;
        __int16 v405 = 2048;
        uint64_t v406 = v42;
        __int16 v407 = 2114;
        uint64_t v408 = v52;
        _os_log_impl(&dword_1B022D000, v45, OS_LOG_TYPE_DEFAULT, "creating new album entry: pid=%lld, name='%{public}s', sortName='%{public}s', storeID=%lld, syncID=%lld, legacySyncID=%lld, cloudLibraryID=%{public}s, likedState=%lld, isMusicVideo=%{BOOL}u, order.section=%ld, order.sortOrder=%lld using albumGroupingIdentifier=%{public}@", buf, 0x76u);
      }
      uint64_t v274 = v44;
      uint64_t v277 = v42;

      unint64_t v273 = v39;
      unint64_t v53 = v370;
      long long v54 = v363;
      int v55 = v344;
      char v56 = v340;
      char v57 = v336;
      uint64_t v58 = v328;
      char v59 = v324;
      uint64_t v60 = v348;
      v272 = v316;
      v270 = v302;
      v271 = v311;
      BOOL v61 = v320;
      uint64_t v62 = (std::__shared_weak_count *)operator new(0xB0uLL);
      v62->__shared_owners_ = 0;
      v62->__shared_weak_owners_ = 0;
      v281 = v62;
      v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C74B8;
      if (SHIBYTE(v53[2].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, v53[2].__r_.__value_.__l.__data_, v53[2].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)&v53[2].__r_.__value_.__l.__data_;
        *(void *)&uint8_t buf[16] = *((void *)&v53[2].__r_.__value_.__l + 2);
      }
      if (SHIBYTE(v54[2].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v411, v54[2].__r_.__value_.__l.__data_, v54[2].__r_.__value_.__l.__size_);
      }
      else {
        std::string v411 = v54[2];
      }
      if (!v284) {
        uint64_t v284 = v270[3];
      }
      uint64_t v106 = v55[3];
      uint64_t v107 = v57[3];
      uint64_t v108 = v58[3];
      uint64_t v109 = v56[3];
      uint64_t v110 = v59[3];
      if (*((char *)v60 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v391, (const std::string::value_type *)v60[6], v60[7]);
      }
      else {
        std::string v391 = *(std::string *)((unsigned char *)v60 + 2);
      }
      uint64_t v111 = (uint64_t)&v281[1];
      ML3AlbumData::ML3AlbumData((uint64_t)&v281[1], v273, (long long *)buf, (long long *)&v411, v106, v109 != 0, v107, v108, v277, v274, v275 != 0, v284, v110, (long long *)&v391, v272[24], *((unsigned char *)v271 + 24), v61[3]);
      if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v391.__r_.__value_.__l.__data_);
      }
      unint64_t v112 = v281;
      if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v411.__r_.__value_.__l.__data_);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      std::string::size_type v113 = v283;
      if (v278) {
        std::string::size_type v113 = 0;
      }
      v411.__r_.__value_.__r.__words[0] = v113;
      std::allocate_shared[abi:ne180100]<ML3AlbumImportItem,std::allocator<ML3AlbumImportItem>,std::shared_ptr<ML3AlbumData> &,std::string &,BOOL &,NSData * {__strong}&,long long,long long &,long long &,BOOL &,void>(buf, v111, v281, v356 + 3, v316 + 24, &v382, (uint64_t *)&v411, &v305, v332 + 3, (char *)&v314);
      uint64_t v114 = (std::__shared_weak_count *)v384[7];
      *((_OWORD *)v384 + 3) = *(_OWORD *)buf;
      if (v114) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v114);
      }
      unint64_t v115 = (void *)v377[5];
      if (v115)
      {
        char v116 = [v115 keyValue];
        ML3CPPStringFromData((NSData *)&v411, v116);
        *(_OWORD *)std::string buf = *(_OWORD *)&v411.__r_.__value_.__l.__data_;
        std::string::size_type v117 = v411.__r_.__value_.__r.__words[2];
        memset(&v411, 0, sizeof(v411));
        *(void *)&uint8_t buf[16] = v117;
        *(void *)&uint8_t buf[24] = v281 + 1;
        *(void *)&buf[32] = v281;
        atomic_fetch_add_explicit(&v281->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>(a1 + 1248, buf, (uint64_t)buf);
        if (*(void *)&buf[32]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v411.__r_.__value_.__l.__data_);
        }

        unint64_t v112 = v281;
      }
      uint64_t v119 = v384[6];
      uint64_t v118 = v384[7];
      *(void *)std::string buf = v273;
      *(void *)&uint8_t buf[8] = v119;
      *(void *)&uint8_t buf[16] = v118;
      if (v118) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v118 + 8), 1uLL, memory_order_relaxed);
      }
      std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>((uint64_t *)(a1 + 2248), v273, (uint64_t)buf);
      if (*(void *)&buf[16]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
      }
      atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
      ML3ImportSession::_setAlbumInfoForTrackPersistentID(a1, v283, v111, v112);
      std::__shared_weak_count::__release_shared[abi:ne180100](v112);
      if (*((char *)v348 + 71) < 0)
      {
        if (v348[7])
        {
          std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v348[6], v348[7]);
          goto LABEL_215;
        }
      }
      else if (*((unsigned char *)v348 + 71))
      {
        *(_OWORD *)std::string buf = *((_OWORD *)v348 + 3);
        *(void *)&uint8_t buf[16] = v348[8];
LABEL_215:
        *(void *)&uint8_t buf[24] = v281 + 1;
        *(void *)&buf[32] = v112;
        atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>(a1 + 1328, buf, (uint64_t)buf);
        if (*(void *)&buf[32]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      *(void *)(*a2 + _Block_object_dispose(&STACK[0x210], 8) = v273;
LABEL_488:
      std::__shared_weak_count::__release_shared[abi:ne180100](v112);
      goto LABEL_489;
    }
  }
  std::string v34 = (uint64_t *)v33;
  if (v33)
  {
    std::string v35 = (std::__shared_weak_count *)v31[7];
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::string v35 = 0;
  }
  unint64_t v63 = *((void *)v33 + 1);
  if (!v289) {
    BOOL v289 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 2248), v63) != 0;
  }
  uint64_t v64 = *a2;
  *(void *)(v64 + _Block_object_dispose(&STACK[0x210], 8) = v63;
  *(unsigned char *)(v64 + 16) = 0;
  v282 = v35;
  (*(void (**)(unsigned char *__return_ptr, uint64_t *, uint64_t))(*v34 + 24))(buf, v34, 285212673);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v411, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v411 = *(std::string *)&buf[16];
  }
  uint64_t v65 = HIBYTE(v370[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v370[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v370[2].__r_.__value_.__l.__size_) {
      goto LABEL_141;
    }
  }
  else if (!*((unsigned char *)&v370[2].__r_.__value_.__s + 23))
  {
    goto LABEL_141;
  }
  uint64_t v66 = v370 + 2;
  if ((v65 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(v370[2].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v370[2].__r_.__value_.__l.__size_;
  }
  std::string::size_type v68 = HIBYTE(v411.__r_.__value_.__r.__words[2]);
  if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v68 = v411.__r_.__value_.__l.__size_;
  }
  if (size == v68)
  {
    if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v69 = &v411;
    }
    else {
      __int16 v69 = (std::string *)v411.__r_.__value_.__r.__words[0];
    }
    if ((v65 & 0x80) != 0)
    {
      if (!memcmp(v66->__r_.__value_.__l.__data_, v69, v370[2].__r_.__value_.__l.__size_)) {
        goto LABEL_141;
      }
    }
    else
    {
      if (!*((unsigned char *)&v370[2].__r_.__value_.__s + 23)) {
        goto LABEL_141;
      }
      std::string v70 = v370 + 2;
      while (v70->__r_.__value_.__s.__data_[0] == v69->__r_.__value_.__s.__data_[0])
      {
        std::string v70 = (const std::string *)((char *)v70 + 1);
        __int16 v69 = (std::string *)((char *)v69 + 1);
        if (!--v65) {
          goto LABEL_141;
        }
      }
    }
  }
  std::string::operator=((std::string *)(v34[8] + 8), v66);
  long long v83 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v84 = (std::string::__raw *)&v370[2];
    if (SHIBYTE(v370[2].__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v84 = (std::string::__raw *)v84->__words[0];
    }
    unint64_t v85 = &v411;
    if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v85 = (std::string *)v411.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v84;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v85;
    _os_log_impl(&dword_1B022D000, v83, OS_LOG_TYPE_DEFAULT, "Setting albumName=%{public}s (oldValue=%{public}s)", buf, 0x16u);
  }

LABEL_141:
  (*(void (**)(unsigned char *__return_ptr, uint64_t *, uint64_t))(*v34 + 24))(buf, v34, 285212674);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v391, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v391 = *(std::string *)&buf[16];
  }
  if (*a2 && !*a5)
  {
    uint64_t v92 = *(int *)(a1 + 32);
    uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(17, 285212674);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
    }
    BOOL v89 = *(_DWORD *)(__albumRules + 56 * PropertyIndex + 4 * v92) == -1;
    char shouldPreserveAlbumProperty = ML3ImportSession::_shouldPreserveAlbumProperty((id *)a1, v63, 0x12000002u);
  }
  else
  {
    uint64_t v86 = *(int *)(a1 + 32);
    uint64_t v87 = ML3TrackRulesGetPropertyIndex(10, 167772170);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
    }
    int v88 = *(_DWORD *)(__specialRules + 56 * v87 + 4 * v86);
    BOOL v89 = v88 == -1;
    uint64_t v90 = (std::__shared_weak_count *)a5[1];
    v287[0] = *a5;
    v287[1] = v90;
    if (v90) {
      atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char shouldPreserveAlbumProperty = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)v287, 0xA000009u);
    if (v90)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v90);
      if (v88 == -1) {
        goto LABEL_236;
      }
      goto LABEL_158;
    }
  }
  if (v89) {
    goto LABEL_236;
  }
LABEL_158:
  std::string::size_type v94 = HIBYTE(v363[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v363[2].__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v95 = v363[2].__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v95 = HIBYTE(v363[2].__r_.__value_.__r.__words[2]);
  }
  p_data = (const void **)&v363[2].__r_.__value_.__l.__data_;
  if (!v95)
  {
LABEL_177:
    if ((v94 & 0x80) != 0) {
      std::string::size_type v94 = v363[2].__r_.__value_.__l.__size_;
    }
    goto LABEL_227;
  }
  std::string::size_type v97 = v363[2].__r_.__value_.__l.__size_;
  if ((v94 & 0x80u) == 0) {
    std::string::size_type v98 = HIBYTE(v363[2].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v98 = v363[2].__r_.__value_.__l.__size_;
  }
  std::string::size_type v99 = HIBYTE(v391.__r_.__value_.__r.__words[2]);
  char v100 = HIBYTE(v391.__r_.__value_.__r.__words[2]);
  std::string::size_type v101 = v391.__r_.__value_.__l.__size_;
  if ((v391.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v102 = HIBYTE(v391.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v102 = v391.__r_.__value_.__l.__size_;
  }
  if (v98 != v102) {
    goto LABEL_225;
  }
  if ((v391.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v103 = &v391;
  }
  else {
    uint64_t v103 = (std::string *)v391.__r_.__value_.__r.__words[0];
  }
  if ((v94 & 0x80) != 0)
  {
    int v121 = memcmp(*p_data, v103, v363[2].__r_.__value_.__l.__size_);
    std::string::size_type v94 = v97;
    if (v121) {
      goto LABEL_225;
    }
LABEL_227:
    if (!v94)
    {
      std::string::size_type v99 = HIBYTE(v391.__r_.__value_.__r.__words[2]);
      std::string::size_type v101 = v391.__r_.__value_.__l.__size_;
      char v100 = HIBYTE(v391.__r_.__value_.__r.__words[2]);
LABEL_229:
      if (v100 >= 0) {
        std::string::size_type v122 = v99;
      }
      else {
        std::string::size_type v122 = v101;
      }
      if (v122) {
        char v123 = shouldPreserveAlbumProperty;
      }
      else {
        char v123 = 1;
      }
      if (v123) {
        goto LABEL_236;
      }
      goto LABEL_285;
    }
LABEL_236:
    int v124 = 0;
    goto LABEL_237;
  }
  if (!*((unsigned char *)&v363[2].__r_.__value_.__s + 23)) {
    goto LABEL_229;
  }
  BOOL v104 = v363 + 2;
  uint64_t v105 = HIBYTE(v363[2].__r_.__value_.__r.__words[2]);
  while (v104->__r_.__value_.__s.__data_[0] == v103->__r_.__value_.__s.__data_[0])
  {
    BOOL v104 = (const std::string *)((char *)v104 + 1);
    uint64_t v103 = (std::string *)((char *)v103 + 1);
    if (!--v105) {
      goto LABEL_177;
    }
  }
LABEL_225:
  if (shouldPreserveAlbumProperty) {
    goto LABEL_236;
  }
LABEL_285:
  uint64_t v149 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a1, (uint64_t)p_data, (uint64_t)&v370[2]);
  uint64_t v151 = v150;
  std::string::operator=((std::string *)(v34[8] + 32), v363 + 2);
  uint64_t v152 = v34[8];
  *(void *)(v152 + 72) = v149;
  *(void *)(v152 + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v151;
  char v153 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
  {
    char v154 = (std::string::__raw *)&v363[2];
    if (SHIBYTE(v363[2].__r_.__value_.__r.__words[2]) < 0) {
      char v154 = (std::string::__raw *)v154->__words[0];
    }
    char v155 = &v391;
    if ((v391.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v155 = (std::string *)v391.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446978;
    *(void *)&uint8_t buf[4] = v154;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v149;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = v151;
    *(_WORD *)&buf[28] = 2082;
    *(void *)&buf[30] = v155;
    _os_log_impl(&dword_1B022D000, v153, OS_LOG_TYPE_DEFAULT, "Setting albumSortName=%{public}s, order=%lld, section=%d (oldValue=%{public}s)", buf, 0x26u);
  }

  unint64_t v156 = v34[1];
  unint64_t v157 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 2168), v156);
  if (v157)
  {
    uint64_t v159 = v157[3];
    uint64_t v158 = v157[4];
    if (v158 != v151 || v159 != v149)
    {
      *(void *)std::string buf = v156;
      char v160 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(a1 + 2208, v156, (uint64_t *)buf);
      v160[3] = v149;
      v160[4] = v151;
      *(void *)std::string buf = v34[1];
      uint64_t v161 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(a1 + 2168, *(unint64_t *)buf, (uint64_t *)buf);
      v161[3] = v149;
      v161[4] = v151;
      uint64_t v162 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v163 = v34[1];
        uint64_t v164 = (std::string::__raw *)&v363[2];
        if (SHIBYTE(v363[2].__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v164 = (std::string::__raw *)v164->__words[0];
        }
        *(_DWORD *)std::string buf = 134219266;
        *(void *)&uint8_t buf[4] = v163;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v164;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&uint8_t buf[24] = v151;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = v149;
        __int16 v393 = 2048;
        uint64_t v394 = v158;
        __int16 v395 = 2048;
        uint64_t v396 = v159;
        _os_log_impl(&dword_1B022D000, v162, OS_LOG_TYPE_DEFAULT, "Will update sort order for tracks with albumPID=%lld with sortName=%{public}s, order.section=%ld, order.sortOrder=%lld (oldValue section=%ld, sortOrder=%lld)", buf, 0x3Eu);
      }
    }
  }
  int v124 = 1;
LABEL_237:
  uint64_t v125 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212691);
  uint64_t v126 = v125;
  uint64_t v127 = v302[3];
  if (v127) {
    BOOL v128 = v127 == v125;
  }
  else {
    BOOL v128 = 1;
  }
  uint64_t v129 = v284;
  if (!v128)
  {
    *(void *)(v34[8] + 96) = v127;
    id v130 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v131 = v302[3];
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v131;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v126;
      _os_log_impl(&dword_1B022D000, v130, OS_LOG_TYPE_DEFAULT, "Setting albumSyncId=%lld (oldValue=%lld) using property MLImportPropertyKeyAlbumSyncID", buf, 0x16u);
    }

    int v124 = 1;
    uint64_t v129 = v284;
  }
  uint64_t v132 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212691);
  if (v129)
  {
    uint64_t v133 = v132;
    if (v129 != v132)
    {
      *(void *)(v34[8] + 96) = v129;
      char v134 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v129;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v133;
        _os_log_impl(&dword_1B022D000, v134, OS_LOG_TYPE_DEFAULT, "Setting albumSyncId=%lld (oldValue=%lld) using property MLImportPropertyKeyAlbumSyncId", buf, 0x16u);
      }

      int v124 = 1;
    }
  }
  uint64_t v135 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212696);
  uint64_t v136 = v135;
  uint64_t v137 = v324[3];
  if (v137) {
    BOOL v138 = v137 == v135;
  }
  else {
    BOOL v138 = 1;
  }
  if (!v138)
  {
    *(void *)(v34[8] + 104) = v137;
    char v139 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v140 = v324[3];
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v140;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v136;
      _os_log_impl(&dword_1B022D000, v139, OS_LOG_TYPE_DEFAULT, "Setting albumStoreID=%lld (oldValue=%lld)", buf, 0x16u);
    }

    int v124 = 1;
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t *, uint64_t))(*v34 + 24))(buf, v34, 285212697);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v286, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v286 = *(std::string *)&buf[16];
  }
  if (MSVDeviceIsWatch() && *(_DWORD *)(a1 + 32) == 1)
  {
    uint64_t v141 = (const std::string *)(v348 + 6);
    uint64_t v142 = *((unsigned __int8 *)v348 + 71);
    if ((v142 & 0x80u) == 0) {
      uint64_t v143 = *((unsigned __int8 *)v348 + 71);
    }
    else {
      uint64_t v143 = v348[7];
    }
    std::string::size_type v144 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
    if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v144 = v286.__r_.__value_.__l.__size_;
    }
    if (v143 != v144) {
      goto LABEL_307;
    }
    if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v145 = &v286;
    }
    else {
      unsigned int v145 = (std::string *)v286.__r_.__value_.__r.__words[0];
    }
    if ((v142 & 0x80) != 0)
    {
      if (memcmp(v141->__r_.__value_.__l.__data_, v145, v348[7])) {
        goto LABEL_307;
      }
    }
    else if (*((unsigned char *)v348 + 71))
    {
      uint64_t v146 = (unsigned __int8 *)(v348 + 6);
      while (*v146 == v145->__r_.__value_.__s.__data_[0])
      {
        ++v146;
        unsigned int v145 = (std::string *)((char *)v145 + 1);
        if (!--v142) {
          goto LABEL_284;
        }
      }
LABEL_307:
      std::string::operator=((std::string *)(v34[8] + 112), v141);
      if (*((char *)v348 + 71) < 0)
      {
        if (v348[7]) {
          goto LABEL_344;
        }
      }
      else if (*((unsigned char *)v348 + 71))
      {
        goto LABEL_344;
      }
      uint64_t v168 = (void *)(a1 + 1328);
      char v169 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a1 + 1328), (unsigned __int8 *)&v286);
      if (v169)
      {
        int8x8_t v170 = *(int8x8_t *)(a1 + 1336);
        unint64_t v171 = *((void *)v169 + 1);
        uint8x8_t v172 = (uint8x8_t)vcnt_s8(v170);
        v172.i16[0] = vaddlv_u8(v172);
        if (v172.u32[0] > 1uLL)
        {
          if (v171 >= *(void *)&v170) {
            v171 %= *(void *)&v170;
          }
        }
        else
        {
          v171 &= *(void *)&v170 - 1;
        }
        char v174 = *(unsigned __int8 **)(*v168 + 8 * v171);
        do
        {
          unsigned int v175 = v174;
          char v174 = *(unsigned __int8 **)v174;
        }
        while (v174 != v169);
        if (v175 == (unsigned __int8 *)(a1 + 1344)) {
          goto LABEL_334;
        }
        unint64_t v176 = *((void *)v175 + 1);
        if (v172.u32[0] > 1uLL)
        {
          if (v176 >= *(void *)&v170) {
            v176 %= *(void *)&v170;
          }
        }
        else
        {
          v176 &= *(void *)&v170 - 1;
        }
        if (v176 != v171)
        {
LABEL_334:
          if (!*(void *)v169) {
            goto LABEL_335;
          }
          unint64_t v177 = *(void *)(*(void *)v169 + 8);
          if (v172.u32[0] > 1uLL)
          {
            if (v177 >= *(void *)&v170) {
              v177 %= *(void *)&v170;
            }
          }
          else
          {
            v177 &= *(void *)&v170 - 1;
          }
          if (v177 != v171) {
LABEL_335:
          }
            *(void *)(*v168 + 8 * v171) = 0;
        }
        uint64_t v179 = *(void *)v169;
        if (*(void *)v169)
        {
          unint64_t v180 = *(void *)(v179 + 8);
          if (v172.u32[0] > 1uLL)
          {
            if (v180 >= *(void *)&v170) {
              v180 %= *(void *)&v170;
            }
          }
          else
          {
            v180 &= *(void *)&v170 - 1;
          }
          if (v180 != v171)
          {
            *(void *)(*v168 + 8 * v18sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v175;
            uint64_t v179 = *(void *)v169;
          }
        }
        *(void *)unsigned int v175 = v179;
        *(void *)char v169 = 0;
        --*(void *)(a1 + 1352);
        *(void *)std::string buf = v169;
        *(void *)&uint8_t buf[8] = a1 + 1344;
        uint8_t buf[16] = 1;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
      }
LABEL_344:
      unsigned int v165 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v166 = v348 + 6;
        if (*((char *)v348 + 71) < 0) {
          uint64_t v166 = (void *)*v166;
        }
        unint64_t v167 = &v286;
        if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v167 = (std::string *)v286.__r_.__value_.__r.__words[0];
        }
LABEL_349:
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v166;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v167;
        _os_log_impl(&dword_1B022D000, v165, OS_LOG_TYPE_DEFAULT, "Setting albumCloudLibraryID=%{public}s (oldValue=%{public}s)", buf, 0x16u);
        goto LABEL_350;
      }
      goto LABEL_350;
    }
  }
  else
  {
    if (*((char *)v348 + 71) < 0)
    {
      if (!v348[7]) {
        goto LABEL_284;
      }
    }
    else if (!*((unsigned char *)v348 + 71))
    {
      goto LABEL_284;
    }
    std::string::size_type v147 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
    if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v147 = v286.__r_.__value_.__l.__size_;
    }
    if (!v147)
    {
      std::string::operator=((std::string *)(v34[8] + 112), (const std::string *)v348 + 2);
      unsigned int v165 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v166 = v348 + 6;
        if (*((char *)v348 + 71) < 0) {
          uint64_t v166 = (void *)*v166;
        }
        unint64_t v167 = &v286;
        if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v167 = (std::string *)v286.__r_.__value_.__r.__words[0];
        }
        goto LABEL_349;
      }
LABEL_350:

      int v148 = 1;
      int v124 = 1;
      goto LABEL_351;
    }
  }
LABEL_284:
  int v148 = 0;
LABEL_351:
  uint64_t v181 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212679);
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, 285212679))
  {
    uint64_t v182 = v344[3];
    if (v182 != v181)
    {
      *(_DWORD *)(v34[8] + 56) = v182;
      char v183 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v184 = v344[3];
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v184;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v181;
        _os_log_impl(&dword_1B022D000, v183, OS_LOG_TYPE_DEFAULT, "Setting albumUserRating=%lld (oldValue=%lld)", buf, 0x16u);
      }

      int v124 = 1;
    }
  }
  uint64_t v185 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212690);
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, 285212690))
  {
    uint64_t v186 = v340[3];
    if (v186 != v185)
    {
      *(unsigned char *)(v34[8] + 6sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v186 != 0;
      uint64_t v187 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v188 = v340[3];
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v188;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v185;
        _os_log_impl(&dword_1B022D000, v187, OS_LOG_TYPE_DEFAULT, "Setting albumUserRatingIsDerived=%lld (oldValue=%lld)", buf, 0x16u);
      }

      int v124 = 1;
    }
  }
  uint64_t v189 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212680);
  uint64_t v190 = v336[3];
  if (v190)
  {
    uint64_t v191 = v189;
    if (v190 != v189)
    {
      *(_DWORD *)(v34[8] + 64) = v190;
      long long v192 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v193 = v336[3];
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v193;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v191;
        _os_log_impl(&dword_1B022D000, v192, OS_LOG_TYPE_DEFAULT, "Setting albumLikedState=%lld (oldValue=%lld)", buf, 0x16u);
      }

      int v124 = 1;
    }
  }
  uint64_t v194 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212695);
  uint64_t v195 = v320[3];
  if (v195)
  {
    uint64_t v196 = v194;
    if (v195 != v194)
    {
      *(void *)(v34[8] + 144) = v195;
      id v197 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v198 = v320[3];
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v198;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v196;
        _os_log_impl(&dword_1B022D000, v197, OS_LOG_TYPE_DEFAULT, "Setting albumLikedStateChangedDate=%lld (oldValue=%lld)", buf, 0x16u);
      }

      int v124 = 1;
    }
  }
  uint64_t v199 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212684);
  uint64_t v200 = *(int *)(a1 + 32);
  uint64_t v201 = ML3TrackRulesGetPropertyIndex(17, 285212684);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
  }
  if (*(_DWORD *)(__albumRules + 56 * v201 + 4 * v200) != -1
    && (*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, 285212684)
    && v328[3] != v199
    && (ML3ImportSession::_shouldPreserveAlbumProperty((id *)a1, v34[1], 0x1100000Cu) & 1) == 0)
  {
    uint64_t v202 = v34[1];
    uint64_t v204 = *(char **)(a1 + 464);
    unint64_t v203 = *(void *)(a1 + 472);
    if ((unint64_t)v204 >= v203)
    {
      char v206 = *(char **)(a1 + 456);
      uint64_t v207 = (v204 - v206) >> 3;
      unint64_t v208 = v207 + 1;
      if ((unint64_t)(v207 + 1) >> 61) {
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v209 = v203 - (void)v206;
      if (v209 >> 2 > v208) {
        unint64_t v208 = v209 >> 2;
      }
      BOOL v210 = (unint64_t)v209 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v211 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v210) {
        unint64_t v211 = v208;
      }
      if (v211)
      {
        unint64_t v211 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v211);
        char v206 = *(char **)(a1 + 456);
        uint64_t v204 = *(char **)(a1 + 464);
      }
      else
      {
        uint64_t v212 = 0;
      }
      uint64_t v213 = (uint64_t *)(v211 + 8 * v207);
      unint64_t v214 = v211 + 8 * v212;
      *uint64_t v213 = v202;
      unint64_t v205 = v213 + 1;
      while (v204 != v206)
      {
        uint64_t v215 = *((void *)v204 - 1);
        v204 -= 8;
        *--uint64_t v213 = v215;
      }
      *(void *)(a1 + 456) = v213;
      *(void *)(a1 + 464) = v205;
      *(void *)(a1 + 472) = v214;
      if (v206) {
        operator delete(v206);
      }
    }
    else
    {
      *(void *)uint64_t v204 = v202;
      unint64_t v205 = v204 + 8;
    }
    *(void *)(a1 + 464) = v205;
    *(_DWORD *)(v34[8] + 6_Block_object_dispose(&STACK[0x210], 8) = v328[3];
    v216 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v217 = v328[3];
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v217;
      _os_log_impl(&dword_1B022D000, v216, OS_LOG_TYPE_DEFAULT, "Setting albumYear=%lld", buf, 0xCu);
    }

    int v124 = 1;
  }
  uint64_t v218 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212688);
  if (*((unsigned char *)v307 + 24) || !*(unsigned char *)(*a2 + 16) || *(unsigned char *)(*a2 + 17))
  {
    BOOL v219 = v314;
    if (v314 != (v218 != 0))
    {
      uint64_t v220 = *(int *)(a1 + 32);
      uint64_t v221 = ML3TrackRulesGetPropertyIndex(17, 285212688);
      if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
        dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
      }
      if (*(_DWORD *)(__albumRules + 56 * v221 + 4 * v220) != -1
        && (ML3ImportSession::_shouldPreserveAlbumProperty((id *)a1, v34[1], 0x11000010u) & 1) == 0)
      {
        uint64_t v222 = v34[1];
        v224 = *(char **)(a1 + 488);
        unint64_t v223 = *(void *)(a1 + 496);
        if ((unint64_t)v224 >= v223)
        {
          v226 = *(char **)(a1 + 480);
          uint64_t v227 = (v224 - v226) >> 3;
          unint64_t v228 = v227 + 1;
          if ((unint64_t)(v227 + 1) >> 61) {
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v229 = v223 - (void)v226;
          if (v229 >> 2 > v228) {
            unint64_t v228 = v229 >> 2;
          }
          BOOL v210 = (unint64_t)v229 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v230 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v210) {
            unint64_t v230 = v228;
          }
          if (v230)
          {
            unint64_t v230 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v230);
            v226 = *(char **)(a1 + 480);
            v224 = *(char **)(a1 + 488);
          }
          else
          {
            uint64_t v231 = 0;
          }
          v232 = (uint64_t *)(v230 + 8 * v227);
          unint64_t v233 = v230 + 8 * v231;
          uint64_t *v232 = v222;
          v225 = v232 + 1;
          while (v224 != v226)
          {
            uint64_t v234 = *((void *)v224 - 1);
            v224 -= 8;
            *--v232 = v234;
          }
          *(void *)(a1 + 48sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v232;
          *(void *)(a1 + 48_Block_object_dispose(&STACK[0x210], 8) = v225;
          *(void *)(a1 + 496) = v233;
          if (v226) {
            operator delete(v226);
          }
        }
        else
        {
          *(void *)v224 = v222;
          v225 = v224 + 8;
        }
        *(void *)(a1 + 48_Block_object_dispose(&STACK[0x210], 8) = v225;
        v235 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v235, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v219;
          _os_log_impl(&dword_1B022D000, v235, OS_LOG_TYPE_DEFAULT, "Setting albumContainsClassicalWork=%d", buf, 8u);
        }

        int v124 = 1;
      }
    }
  }
  int v236 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212693) != 0;
  int v237 = *((unsigned __int8 *)v311 + 24);
  if (v237 != v236)
  {
    *(unsigned char *)(v34[8] + 137) = v237;
    v238 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
    {
      int v239 = *((unsigned __int8 *)v311 + 24);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v239;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v236;
      _os_log_impl(&dword_1B022D000, v238, OS_LOG_TYPE_DEFAULT, "Setting albumContainsClassicalExperienceAvailable=%{BOOL}u (oldValue=%{BOOL}u)", buf, 0xEu);
    }

    int v124 = 1;
  }
  uint64_t v240 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v34 + 32))(v34, 285212681);
  uint64_t v241 = *(int *)(a1 + 32);
  uint64_t v242 = ML3TrackRulesGetPropertyIndex(17, 285212681);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
  }
  if (*(_DWORD *)(__albumRules + 56 * v242 + 4 * v241) == -1
    || !(*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, 285212681))
  {
    goto LABEL_450;
  }
  int v243 = v240 != 0;
  uint64_t v244 = a1;
  if (v316[24] != v243)
  {
    uint64_t v244 = a1;
    if ((ML3ImportSession::_shouldPreserveAlbumProperty((id *)a1, v34[1], 0x11000009u) & 1) == 0)
    {
      *(unsigned char *)(v34[8] + 136) = v316[24];
      uint64_t v245 = v34[1];
      v246 = *(char **)(a1 + 512);
      unint64_t v247 = *(void *)(a1 + 520);
      if ((unint64_t)v246 >= v247)
      {
        v249 = *(char **)(a1 + 504);
        uint64_t v250 = (v246 - v249) >> 3;
        unint64_t v251 = v250 + 1;
        if ((unint64_t)(v250 + 1) >> 61) {
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v252 = v247 - (void)v249;
        if (v252 >> 2 > v251) {
          unint64_t v251 = v252 >> 2;
        }
        BOOL v210 = (unint64_t)v252 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v253 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v210) {
          unint64_t v253 = v251;
        }
        if (v253)
        {
          unint64_t v253 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v253);
          v249 = *(char **)(a1 + 504);
          v246 = *(char **)(a1 + 512);
        }
        else
        {
          uint64_t v254 = 0;
        }
        v255 = (uint64_t *)(v253 + 8 * v250);
        unint64_t v256 = v253 + 8 * v254;
        uint64_t *v255 = v245;
        v248 = v255 + 1;
        while (v246 != v249)
        {
          uint64_t v257 = *((void *)v246 - 1);
          v246 -= 8;
          *--v255 = v257;
        }
        *(void *)(a1 + 504) = v255;
        *(void *)(a1 + 512) = v248;
        *(void *)(a1 + 52sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v256;
        if (v249) {
          operator delete(v249);
        }
      }
      else
      {
        *(void *)v246 = v245;
        v248 = v246 + 8;
      }
      *(void *)(a1 + 512) = v248;
      v258 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT))
      {
        int v259 = v316[24];
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v259;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v243;
        _os_log_impl(&dword_1B022D000, v258, OS_LOG_TYPE_DEFAULT, "Setting albumAllCompilations=%{BOOL}u (oldValue=%{BOOL}u", buf, 0xEu);
      }

      int v124 = 1;
LABEL_450:
      uint64_t v244 = a1;
    }
  }
  if (!v148) {
    goto LABEL_469;
  }
  v260 = v348;
  int v261 = *((char *)v348 + 71);
  if (v261 < 0)
  {
    if (!v348[7]) {
      goto LABEL_469;
    }
  }
  else if (!*((unsigned char *)v348 + 71))
  {
    goto LABEL_469;
  }
  uint64_t v263 = v34[8];
  v262 = (std::__shared_weak_count *)v34[9];
  if (v262)
  {
    atomic_fetch_add_explicit(&v262->__shared_owners_, 1uLL, memory_order_relaxed);
    LOBYTE(v261) = *((unsigned char *)v260 + 71);
  }
  if ((v261 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v260[6], v260[7]);
  }
  else
  {
    *(_OWORD *)std::string buf = *((_OWORD *)v260 + 3);
    *(void *)&uint8_t buf[16] = v260[8];
  }
  *(void *)&uint8_t buf[24] = v263;
  *(void *)&buf[32] = v262;
  if (v262) {
    atomic_fetch_add_explicit(&v262->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>(v244 + 1328, buf, (uint64_t)buf);
  if (*(void *)&buf[32]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v262) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v262);
  }
LABEL_469:
  if (v289) {
    int v264 = 0;
  }
  else {
    int v264 = v124;
  }
  unint64_t v112 = v282;
  if (v264 == 1)
  {
    unint64_t v265 = v34[1];
    uint64_t v267 = v384[6];
    uint64_t v266 = v384[7];
    *(void *)std::string buf = v265;
    *(void *)&uint8_t buf[8] = v267;
    *(void *)&uint8_t buf[16] = v266;
    if (v266) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v266 + 8), 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>((uint64_t *)(v244 + 2248), v265, (uint64_t)buf);
    if (*(void *)&buf[16]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
    }
  }
  uint64_t v268 = v34[8];
  v269 = (std::__shared_weak_count *)v34[9];
  if (v269) {
    atomic_fetch_add_explicit(&v269->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ML3ImportSession::_setAlbumInfoForTrackPersistentID(v244, v283, v268, v269);
  if (v269) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v269);
  }
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v286.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v391.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v411.__r_.__value_.__l.__data_);
  }
  if (v282) {
    goto LABEL_488;
  }
LABEL_489:
  _Block_object_dispose(&v301, 8);
  _Block_object_dispose(&v306, 8);
  _Block_object_dispose(&v310, 8);
  _Block_object_dispose(&v315, 8);
  _Block_object_dispose(&v319, 8);
  _Block_object_dispose(&v323, 8);
  _Block_object_dispose(&v327, 8);
  _Block_object_dispose(&v331, 8);
  _Block_object_dispose(&v335, 8);
  _Block_object_dispose(&v339, 8);
  _Block_object_dispose(&v343, 8);
  _Block_object_dispose(&v347, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v354.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v355, 8);
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v361.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v362, 8);
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v368.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v369, 8);
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v375.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v376, 8);

  _Block_object_dispose(&v383, 8);
  if (v390) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v390);
  }
}

void sub_1B0446EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete((void *)STACK[0x540]);
  }
  if (*(char *)(v27 - 121) < 0) {
    operator delete(*(void **)(v27 - 144));
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&STACK[0x288], 8);
  _Block_object_dispose(&STACK[0x2A8], 8);
  _Block_object_dispose(&STACK[0x2C8], 8);
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Block_object_dispose(&STACK[0x308], 8);
  _Block_object_dispose(&STACK[0x328], 8);
  _Block_object_dispose(&STACK[0x348], 8);
  _Block_object_dispose(&STACK[0x368], 8);
  _Block_object_dispose(&STACK[0x388], 8);
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  _Block_object_dispose(&STACK[0x3F0], 8);
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  _Block_object_dispose(&STACK[0x438], 8);
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  _Block_object_dispose(&STACK[0x480], 8);
  if (SLOBYTE(STACK[0x4C7]) < 0) {
    operator delete((void *)STACK[0x4B0]);
  }
  _Block_object_dispose(&STACK[0x4C8], 8);

  _Block_object_dispose(&STACK[0x500], 8);
  if (STACK[0x538]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x538]);
  }

  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(void *a1, unint64_t a2)
{
  long long v3 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = v3[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    id v7 = *(void **)(*a1 + 8 * v5);
    do
    {
      id v8 = v7;
      id v7 = (void *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2) {
      goto LABEL_20;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *v3;
    if (*v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *v3;
      }
    }
    void *v8 = v11;
    *long long v3 = 0;
    --a1[3];
    operator delete(v3);
  }
}

__n128 __Block_byref_object_copy__459(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__460(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __Block_byref_object_copy__286(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__287(uint64_t a1)
{
}

__n128 __Block_byref_object_copy__288(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__289(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

uint64_t ML3ImportSession::_shouldPreserveTrackProperty(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2020000000;
  v17[3] = v18;
  int v4 = HIBYTE(a3);
  uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(a3), a3);
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  if ((int)v6 < 1)
  {
LABEL_8:
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = PropertyIndex;
    LOBYTE(v_Block_object_dispose(&STACK[0x210], 8) = 0;
    uint64_t v9 = (int)v6 - 1;
    uint64_t v10 = v6 + 1;
    while (1)
    {
      if (*(_DWORD *)(ML3TrackRulesGetRule(v4, v7) + 4 * v9) == 1)
      {
        if ((v8 & 1) == 0)
        {
          uint64_t v11 = *(void *)(*(void *)a2 + 8);
          unint64_t v12 = [NSString stringWithFormat:@"SELECT sync_id, store_saga_id, purchase_history_id, is_ota_purchased FROM item_store WHERE item_pid = %lld", v11];
          uint64_t v13 = [*(id *)(a1 + 64) executeQuery:v12];
          v16[0] = MEMORY[0x1E4F143A8];
          v16[1] = 3221225472;
          v16[2] = ___ZN16ML3ImportSession28_shouldPreserveTrackPropertyENSt3__110shared_ptrI13ML3ImportItemEEj_block_invoke;
          v16[3] = &unk_1E5FB77E0;
          void v16[4] = v17;
          v16[5] = v11;
          [v13 enumerateRowsWithBlock:v16];
        }
        uint64_t v8 = 1;
        if (*((void *)v18 + v9)) {
          break;
        }
      }
      --v9;
      if (--v10 <= 1) {
        goto LABEL_8;
      }
    }
  }
  _Block_object_dispose(v17, 8);
  return v8;
}

void sub_1B0447868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_getDefaultEmptyAlbum(ML3ImportSession *this)
{
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ML3AlbumData>::~shared_ptr[abi:ne180100], &ML3ImportSession::_getDefaultEmptyAlbum(void)::__emptyAlbumData, &dword_1B022D000);
  }
  if (ML3ImportSession::_getDefaultEmptyAlbum(void)::onceToken != -1) {
    dispatch_once(&ML3ImportSession::_getDefaultEmptyAlbum(void)::onceToken, &__block_literal_global_610);
  }
  uint64_t v2 = qword_1E9B32130;
  *(void *)this = ML3ImportSession::_getDefaultEmptyAlbum(void)::__emptyAlbumData;
  *((void *)this + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

void ML3ImportSession::_setAlbumInfoForTrackPersistentID(uint64_t a1, unint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t v15 = a2;
  if (a2)
  {
    uint64_t v7 = a1 + 336;
    uint64_t v8 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 336), a2);
    if (v8)
    {
      if (a4) {
        atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)v8[8];
      v8[7] = a3;
      v8[8] = a4;
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    else
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      memset(v11, 0, sizeof(v11));
      if (a4) {
        atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v12 = a3;
      *((void *)&v12 + 1) = a4;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v7, a2, &v15);
      ML3CollectionInfoSet::operator=(v10 + 3, (uint64_t *)v11);
      if (a4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a4);
      }
    }
  }
}

void sub_1B0447A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN16ML3ImportSession9_addAlbumENSt3__110shared_ptrI13ML3ImportItemEEP26ML3AlbumGroupingIdentifierxS3__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v58 = a3;
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = [v5 stringForColumnIndex:0];
  long long v67 = v7;
  id v69 = [v5 stringForColumnIndex:1];
  id v71 = [v5 stringForColumnIndex:2];
  int v8 = [v5 intForColumnIndex:3];
  int v9 = [v5 intForColumnIndex:4];
  uint64_t v64 = [v5 int64ForColumnIndex:5];
  int v63 = [v5 intForColumnIndex:6];
  int v10 = [v5 intForColumnIndex:7];
  uint64_t v11 = [v5 int64ForColumnIndex:8];
  std::string v70 = [v5 dataForColumnIndex:9];
  uint64_t v62 = [v5 int64ForColumnIndex:10];
  int v12 = [v5 intForColumnIndex:11];
  int v61 = [v5 intForColumnIndex:12];
  uint64_t v60 = [v5 int64ForColumnIndex:13];
  uint64_t v59 = [v5 int64ForColumnIndex:14];
  id v68 = [v5 stringForColumnIndex:15];
  uint64_t v57 = v11;
  BOOL v13 = [v5 intForColumnIndex:16] != 0;
  uint64_t v66 = [v5 int64ForColumnIndex:17];
  char v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212673);
  if (v7) {
    char v15 = v14;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0) {
    MEMORY[0x1B3E93360](*(void *)(*(void *)(a1 + 32) + 8) + 48, [v7 UTF8String]);
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212674) & 1) == 0&& [v69 length])
  {
    MEMORY[0x1B3E93360](*(void *)(*(void *)(a1 + 40) + 8) + 48, [v69 UTF8String]);
  }
  char v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212682);
  if (v71) {
    char v17 = v16;
  }
  else {
    char v17 = 1;
  }
  if ((v17 & 1) == 0) {
    MEMORY[0x1B3E93360](*(void *)(*(void *)(a1 + 48) + 8) + 48, [v71 UTF8String]);
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212679) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v8; {
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212680) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v9;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212695) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v64; {
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212681) & 1) == 0)*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v63 != 0;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212683) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = v10; {
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212684) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = v62;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212688) & 1) == 0)*(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = v12 != 0; {
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212690) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = v61;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212696) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = v59; {
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212691) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = v60;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212697) & 1) == 0)MEMORY[0x1B3E93360](*(void *)(*(void *)(a1 + 136) + 8) + 48, [v68 UTF8String]); {
  int v56 = v9;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), 285212693) & 1) == 0)*(unsigned char *)(*(void *)(*(void *)(a1 + 144) + 8) + 24) = v13; {
  int v18 = v8;
  }
  uint64_t v19 = [ML3AlbumGroupingIdentifier alloc];
  uint64_t v20 = ML3CPPBridgeString((const UInt8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), 0);
  int v55 = v10;
  uint64_t v65 = [(ML3AlbumGroupingIdentifier *)v19 initWithAlbumArtistPersistentID:v66 groupingKey:v70 feedURL:v20 seasonNumber:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) compilation:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];

  uint64_t v21 = [ML3AlbumGroupingIdentifier alloc];
  uint64_t v22 = *(void *)(a1 + 192);
  uint64_t v23 = *(void **)(v6 + 8);
  uint64_t v24 = ML3CPPBridgeString((const UInt8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), 0);
  uint64_t v25 = [v23 groupingKeyForString:v24];
  int v26 = ML3CPPBridgeString((const UInt8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), 0);
  uint64_t v27 = [(ML3AlbumGroupingIdentifier *)v21 initWithAlbumArtistPersistentID:v22 groupingKey:v25 feedURL:v26 seasonNumber:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) compilation:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];
  uint64_t v28 = *(void *)(*(void *)(a1 + 152) + 8);
  char v29 = *(void **)(v28 + 40);
  *(void *)(v28 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v27;

  unsigned int v30 = *(_DWORD *)(a1 + 232);
  uint64_t v31 = *(int *)(v6 + 32);
  LODWORD(v24) = HIBYTE(v30);
  long long v32 = v67;
  uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(v30), v30);
  if (*(_DWORD *)(ML3TrackRulesGetRule((int)v24, PropertyIndex) + 4 * v31) == -1
    || ([*(id *)(*(void *)(*(void *)(a1 + 152) + 8) + 40) isEqual:v65] & 1) != 0)
  {
    goto LABEL_44;
  }
  std::string v34 = *(std::__shared_weak_count **)(a1 + 208);
  v77[0] = *(void *)(a1 + 200);
  v77[1] = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v6, (uint64_t)v77, *(_DWORD *)(a1 + 232));
  char v36 = shouldPreserveTrackProperty;
  if (v34)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    if (v36)
    {
LABEL_44:
      if (v67) {
        std::string::basic_string[abi:ne180100]<0>(&v76, (char *)[v67 UTF8String]);
      }
      else {
        memset(&v76, 0, sizeof(v76));
      }
      if (v69) {
        std::string::basic_string[abi:ne180100]<0>(&v75, (char *)[v69 UTF8String]);
      }
      else {
        memset(&v75, 0, sizeof(v75));
      }
      if (v68) {
        std::string::basic_string[abi:ne180100]<0>(&v74, (char *)[v68 UTF8String]);
      }
      else {
        memset(&v74, 0, sizeof(v74));
      }
      if (v71)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v71 UTF8String]);
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v73 = 0;
      }
      uint64_t v37 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v6, (uint64_t)&v75, (uint64_t)&v76);
      uint64_t v39 = v38;
      uint64_t v40 = *(void *)(*(void *)(a1 + 144) + 8);
      std::string v41 = (std::__shared_weak_count *)operator new(0xB0uLL);
      v41->__shared_owners_ = 0;
      v41->__shared_weak_owners_ = 0;
      v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C74B8;
      uint64_t v42 = *(void *)(a1 + 216);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v81, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
      }
      else {
        std::string v81 = v76;
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v79, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
      }
      else {
        std::string v79 = v75;
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v78, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
      }
      else {
        std::string v78 = v74;
      }
      ML3AlbumData::ML3AlbumData((uint64_t)&v41[1], v42, (long long *)&v81, (long long *)&v79, v18, v61 != 0, v56, v62, v37, v39, v12 != 0, v60, v59, (long long *)&v78, v63 != 0, *(unsigned char *)(v40 + 24), v64);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      uint64_t v43 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v44 = *(void *)(*(void *)(a1 + 80) + 8);
      unint64_t v45 = operator new(0xB0uLL);
      v45[1] = 0;
      void v45[2] = 0;
      void *v45 = &unk_1F08C75D0;
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41[1];
      v81.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      ML3AlbumImportItem::ML3AlbumImportItem((uint64_t)(v45 + 3), &v81, (long long *)(v43 + 48), *(unsigned __int8 *)(v44 + 24), v70, v57, v66, v55, v12 != 0);
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      *(void *)&long long v46 = v45 + 3;
      *((void *)&v46 + 1) = v45;
      uint64_t v47 = *(void *)(*(void *)(a1 + 160) + 8);
      uint64_t v48 = *(std::__shared_weak_count **)(v47 + 56);
      *(_OWORD *)(v47 + 4_Block_object_dispose(&STACK[0x210], 8) = v46;
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      long long v32 = v67;
      if (SHIBYTE(v73) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      goto LABEL_87;
    }
  }
  else if (shouldPreserveTrackProperty)
  {
    goto LABEL_44;
  }
  if (v57 == *(void *)(a1 + 224))
  {
    uint64_t v49 = *(void **)(v6 + 16);
    uint64_t v50 = [NSNumber numberWithLongLong:*(void *)(a1 + 216)];
    uint64_t v80 = v50;
    uint64_t v51 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v80 count:1];
    [v49 executeUpdate:@"UPDATE album SET representative_item_pid=0 WHERE album_pid=?" withParameters:v51 error:0];
  }
  *(void *)(*(void *)(a1 + 176) + _Block_object_dispose(&STACK[0x210], 8) = 0;
  uint64_t v52 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v54 = *(void *)(a1 + 216);
    std::string::size_type v53 = *(void *)(a1 + 224);
    LODWORD(v81.__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = v53;
    WORD2(v81.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = v54;
    _os_log_impl(&dword_1B022D000, v52, OS_LOG_TYPE_DEFAULT, "Removing trackPersistentID=%lld as the representative item for albumPersistentID=%lld as the groupingKey has changed/can no longer be applied", (uint8_t *)&v81, 0x16u);
  }

LABEL_87:
}

void sub_1B044864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  _Unwind_Resume(a1);
}

void ML3ImportSession::_getAlbumImportItemForGroupingIdentifierAndPIDs(void *a1, uint64_t a2, void *a3, uint64_t *a4, unint64_t a5, unint64_t a6, unsigned char *a7)
{
  v80[2] = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  *a7 = 0;
  id v58 = v13;
  if (v13 || (*((char *)a4 + 23) < 0 ? (uint64_t v14 = a4[1]) : (uint64_t v14 = *((unsigned __int8 *)a4 + 23)), v14 | a5 | a6))
  {
    *(void *)std::string buf = 0;
    id v68 = buf;
    uint64_t v69 = 0x4012000000;
    std::string v70 = __Block_byref_object_copy__459;
    id v71 = __Block_byref_object_dispose__460;
    uint64_t v72 = "";
    uint64_t v73 = 0;
    std::string v74 = 0;
    if (a5)
    {
      char v15 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a2 + 2248), a5);
      if (v15)
      {
        *a7 = 1;
        uint64_t v17 = v15[3];
        char v16 = (std::__shared_weak_count *)v15[4];
        if (!v16)
        {
          uint64_t v73 = v15[3];
          std::string v74 = 0;
          goto LABEL_33;
        }
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        int v18 = v74;
        uint64_t v73 = v17;
        std::string v74 = v16;
        if (!v18)
        {
LABEL_33:
          uint64_t v32 = *((void *)v68 + 7);
          *a1 = *((void *)v68 + 6);
          a1[1] = v32;
          if (v32) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
          }
LABEL_80:
          _Block_object_dispose(buf, 8);
          int v26 = v58;
          if (v74) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v74);
          }
          goto LABEL_82;
        }
LABEL_32:
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        goto LABEL_33;
      }
      uint64_t v23 = (char *)a4 + 23;
      if (*((char *)a4 + 23) < 0) {
        uint64_t v24 = a4[1];
      }
      else {
        uint64_t v24 = *((unsigned __int8 *)a4 + 23);
      }
      if (!v24)
      {
        long long v33 = objc_msgSend(@"SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE ", "stringByAppendingString:", @"ROWID=?");
        std::string v34 = [NSNumber numberWithLongLong:a5];
        std::string v79 = v34;
        uint64_t v37 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v79 count:1];
LABEL_71:

        goto LABEL_72;
      }
      long long v33 = objc_msgSend(@"SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE ", "stringByAppendingString:", @"(ROWID=? OR cloud_library_id=?)");
      std::string v34 = [NSNumber numberWithLongLong:a5];
      v80[0] = v34;
      std::string v35 = a4;
      if (*v23 < 0) {
        std::string v35 = (uint64_t *)*a4;
      }
      char v36 = [NSString stringWithUTF8String:v35];
      v80[1] = v36;
      uint64_t v37 = [MEMORY[0x1E4F1C978] arrayWithObjects:v80 count:2];
LABEL_70:

      goto LABEL_71;
    }
    if (*((char *)a4 + 23) < 0)
    {
      if (a4[1])
      {
LABEL_13:
        uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a2 + 1328), (unsigned __int8 *)a4);
        if (!v19) {
          goto LABEL_47;
        }
        uint64_t v21 = (uint64_t *)*((void *)v19 + 5);
        uint64_t v20 = (std::__shared_weak_count *)*((void *)v19 + 6);
        if (v20) {
          goto LABEL_15;
        }
        goto LABEL_27;
      }
    }
    else if (*((unsigned char *)a4 + 23))
    {
      goto LABEL_13;
    }
    if (a6)
    {
      uint64_t v27 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a2 + 1008), a6);
      if (!v27) {
        goto LABEL_47;
      }
      uint64_t v21 = (uint64_t *)v27[3];
      uint64_t v20 = (std::__shared_weak_count *)v27[4];
      if (v20)
      {
LABEL_15:
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = *v21;
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v22) {
          goto LABEL_47;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (!v13) {
        goto LABEL_47;
      }
      uint64_t v38 = [v13 keyValue];
      ML3CPPStringFromData((NSData *)__p, v38);
      uint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a2 + 1248), (unsigned __int8 *)__p);
      if (v66 < 0) {
        operator delete(__p[0]);
      }

      if (!v39) {
        goto LABEL_47;
      }
      uint64_t v21 = (uint64_t *)*((void *)v39 + 5);
      uint64_t v20 = (std::__shared_weak_count *)*((void *)v39 + 6);
      if (v20) {
        goto LABEL_15;
      }
    }
LABEL_27:
    if (!*v21) {
      goto LABEL_47;
    }
LABEL_28:
    uint64_t v28 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a2 + 2248), 0);
    if (v28)
    {
      *a7 = 1;
      char v29 = v68;
      uint64_t v31 = v28[3];
      uint64_t v30 = v28[4];
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      int v18 = (std::__shared_weak_count *)*((void *)v29 + 7);
      *((void *)v29 + 6) = v31;
      *((void *)v29 + 7) = v30;
      if (!v18) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
LABEL_47:
    uint64_t v23 = (char *)a4 + 23;
    if (*((char *)a4 + 23) < 0) {
      uint64_t v40 = a4[1];
    }
    else {
      uint64_t v40 = *((unsigned __int8 *)a4 + 23);
    }
    if (v40)
    {
      uint64_t v37 = [MEMORY[0x1E4F1CA48] array];
      std::string v41 = objc_msgSend(@"SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE ", "stringByAppendingString:", @"cloud_library_id=?");
      uint64_t v42 = a4;
      if (*v23 < 0) {
        uint64_t v42 = (uint64_t *)*a4;
      }
      uint64_t v43 = [NSString stringWithUTF8String:v42];
      [v37 addObject:v43];

      if (a6)
      {
        uint64_t v44 = [v41 stringByAppendingString:@" OR (cloud_library_id='' AND (ROWID=? OR sync_id=?))"];

        unint64_t v45 = [NSNumber numberWithLongLong:a6];
        v78[0] = v45;
        long long v46 = [NSNumber numberWithLongLong:a6];
        v78[1] = v46;
        uint64_t v47 = [MEMORY[0x1E4F1C978] arrayWithObjects:v78 count:2];
        [v37 addObjectsFromArray:v47];
      }
      else
      {
        uint64_t v44 = v41;
      }
      if (!v58)
      {
        long long v33 = v44;
LABEL_72:
        std::string::size_type v54 = [*(id *)(a2 + 16) executeQuery:v33 withParameters:v37];
        v59[0] = MEMORY[0x1E4F143A8];
        v59[1] = 3321888768;
        v59[2] = ___ZN16ML3ImportSession47_getAlbumImportItemForGroupingIdentifierAndPIDsEP26ML3AlbumGroupingIdentifierNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEExxRb_block_invoke;
        v59[3] = &unk_1F08C1E38;
        int v61 = buf;
        uint64_t v62 = a2;
        id v60 = v58;
        unint64_t v63 = a6;
        if (*v23 < 0) {
          std::string::__init_copy_ctor_external(&v64, (const std::string::value_type *)*a4, a4[1]);
        }
        else {
          std::string v64 = *(std::string *)a4;
        }
        [v54 enumerateRowsWithBlock:v59];
        uint64_t v55 = *((void *)v68 + 7);
        *a1 = *((void *)v68 + 6);
        a1[1] = v55;
        if (v55) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }

        goto LABEL_80;
      }
      std::string v34 = [v58 groupingKey];
      uint64_t v48 = [v58 albumArtistPersistentID];
      if (![v34 length])
      {
        long long v33 = [v44 stringByAppendingString:@" OR (cloud_library_id='' AND grouping_key IS NULL AND album_artist_pid=?)"];

        char v36 = [NSNumber numberWithLongLong:v48];
        [v37 addObject:v36];
        goto LABEL_70;
      }
      long long v33 = [v44 stringByAppendingString:@" OR (cloud_library_id='' AND grouping_key IN (?) AND album_artist_pid=?)"];

      v77[0] = v34;
      char v36 = [NSNumber numberWithLongLong:v48];
      v77[1] = v36;
      uint64_t v49 = [MEMORY[0x1E4F1C978] arrayWithObjects:v77 count:2];
      [v37 addObjectsFromArray:v49];
    }
    else
    {
      uint64_t v37 = [MEMORY[0x1E4F1CA48] array];
      if (v58)
      {
        std::string v34 = [v58 groupingKey];
        uint64_t v57 = [v58 albumArtistPersistentID];
      }
      else
      {
        std::string v34 = 0;
        uint64_t v57 = 0;
      }
      uint64_t v50 = @"SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE ";
      if (a6)
      {
        uint64_t v51 = objc_msgSend(@"SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE ", "stringByAppendingString:", @"(ROWID=? OR sync_id=?) OR");
        int v56 = [NSNumber numberWithLongLong:a6];
        v76[0] = v56;
        uint64_t v52 = [NSNumber numberWithLongLong:a6];
        v76[1] = v52;
        std::string::size_type v53 = [MEMORY[0x1E4F1C978] arrayWithObjects:v76 count:2];
        [v37 addObjectsFromArray:v53];

        uint64_t v50 = (__CFString *)v51;
      }
      if (![v34 length])
      {
        long long v33 = [(__CFString *)v50 stringByAppendingString:@" grouping_key IS NULL AND album_artist_pid=?"];

        char v36 = [NSNumber numberWithLongLong:v57];
        [v37 addObject:v36];
        goto LABEL_70;
      }
      long long v33 = [(__CFString *)v50 stringByAppendingString:@" grouping_key IN (?) AND album_artist_pid=?"];

      v75[0] = v34;
      char v36 = [NSNumber numberWithLongLong:v57];
      v75[1] = v36;
      uint64_t v49 = [MEMORY[0x1E4F1C978] arrayWithObjects:v75 count:2];
      [v37 addObjectsFromArray:v49];
    }

    goto LABEL_70;
  }
  uint64_t v25 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1B022D000, v25, OS_LOG_TYPE_DEFAULT, "Invalid parameters to find album", buf, 2u);
  }

  *a1 = 0;
  a1[1] = 0;
  int v26 = 0;
LABEL_82:
}

void sub_1B04490CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  _Block_object_dispose(&a30, 8);
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_shouldPreserveAlbumProperty(id *this, uint64_t a2, unsigned int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2020000000;
  v16[3] = v17;
  int v5 = HIBYTE(a3);
  uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(a3), a3);
  uint64_t v7 = *((unsigned int *)this + 8);
  if ((int)v7 < 1)
  {
LABEL_8:
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = PropertyIndex;
    LOBYTE(v9) = 0;
    uint64_t v10 = (int)v7 - 1;
    uint64_t v11 = v7 + 1;
    while (1)
    {
      if (*(_DWORD *)(ML3TrackRulesGetRule(v5, v8) + 4 * v10) == 1)
      {
        if ((v9 & 1) == 0)
        {
          int v12 = [NSString stringWithFormat:@"SELECT cloud_library_id, sync_id, store_id FROM album WHERE album_pid = %lld", a2];
          id v13 = [this[8] executeQuery:v12];
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 3221225472;
          v15[2] = ___ZN16ML3ImportSession28_shouldPreserveAlbumPropertyExj_block_invoke;
          void v15[3] = &unk_1E5FB77E0;
          void v15[4] = v16;
          v15[5] = a2;
          [v13 enumerateRowsWithBlock:v15];
        }
        uint64_t v9 = 1;
        if (*((void *)v17 + v10)) {
          break;
        }
      }
      --v10;
      if (--v11 <= 1) {
        goto LABEL_8;
      }
    }
  }
  _Block_object_dispose(v16, 8);
  return v9;
}

void sub_1B0449440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    int v5 = *(void **)(a1 + 24);
    uint64_t v6 = ML3CPPBridgeString((const UInt8 *)a2, 1);
    uint64_t v7 = [v5 objectForKeyedSubscript:v6];
    uint64_t v8 = [v7 ML3NameOrderValue];
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(a3 + 8);
    }
    if (!v11) {
      return 0;
    }
    int v12 = ML3CPPBridgeString((const UInt8 *)a3, 1);
    id v13 = [v12 MLSortString];
    uint64_t v14 = v13;
    if (v13)
    {
      id v15 = v13;
    }
    else
    {
      ML3CPPBridgeString((const UInt8 *)a3, 1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v6 = v15;

    uint64_t v7 = [*(id *)(a1 + 24) objectForKeyedSubscript:v6];
    uint64_t v8 = [v7 ML3NameOrderValue];
  }
  uint64_t v16 = v8;
  uint64_t v17 = v9;

  if (v17 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  return v16;
}

void sub_1B04495A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = a2;
  uint64_t v12 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B04497D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v15 = (void *)(a1 + 16);
  unint64_t v16 = (char *)operator new(0x38uLL);
  v39[0] = v16;
  v39[1] = a1 + 16;
  char v40 = 0;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  unint64_t v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v40 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v24 = operator new(8 * *(void *)&prime);
          uint64_t v25 = *(void **)a1;
          *(void *)a1 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          uint64_t v27 = (void *)*v15;
          if (*v15)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v2_Block_object_dispose(&STACK[0x210], 8) = v15;
            long long v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v34))
                  {
                    *(void *)(*(void *)a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  void *v27 = *v33;
                  void *v33 = **(void **)(*(void *)a1 + 8 * v34);
                  **(void **)(*(void *)a1 + 8 * v34) = v33;
                  long long v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_58:
                uint64_t v27 = v33;
                long long v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v38 = *(void **)a1;
        *(void *)a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  std::string v35 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v36 = v39[0];
  if (v35)
  {
    *(void *)v39[0] = *v35;
LABEL_75:
    void *v35 = v36;
    goto LABEL_76;
  }
  *(void *)v39[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v36;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)v36)
  {
    unint64_t v37 = *(void *)(*(void *)v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9) {
        v37 %= v9;
      }
    }
    else
    {
      v37 &= v9 - 1;
    }
    std::string v35 = (void *)(*(void *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v39[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_1B0449C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<ML3AlbumData>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void **)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 2;
  float v13 = (char *)operator new(0x28uLL);
  *(void *)float v13 = 0;
  *((void *)v13 + 1) = a2;
  *((void *)v13 + 2) = *(void *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = a1[1];
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v20 = operator new(8 * *(void *)&prime);
          unint64_t v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void *)*v12;
          if (*v12)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v24) = v12;
            uint8x8_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*a1 + 8 * v30))
                  {
                    *(void *)(*a1 + 8 * v3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v23;
                    goto LABEL_55;
                  }
                  void *v23 = *v29;
                  void *v29 = **(void **)(*a1 + 8 * v30);
                  **(void **)(*a1 + 8 * v3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v29;
                  uint8x8_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                uint64_t v23 = v29;
                uint8x8_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v31 = *a1;
  uint64_t v32 = *(void **)(*a1 + 8 * v3);
  if (v32)
  {
    *(void *)float v13 = *v32;
LABEL_72:
    void *v32 = v13;
    goto LABEL_73;
  }
  *(void *)float v13 = *v12;
  *uint64_t v12 = v13;
  *(void *)(v31 + 8 * v3) = v12;
  if (*(void *)v13)
  {
    unint64_t v33 = *(void *)(*(void *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    uint64_t v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
}

void sub_1B044A06C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3AlbumImportItem,std::allocator<ML3AlbumImportItem>,std::shared_ptr<ML3AlbumData> &,std::string &,BOOL &,NSData * {__strong}&,long long,long long &,long long &,BOOL &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3, long long *a4, unsigned __int8 *a5, void **a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, char *a10)
{
  BOOL v16 = operator new(0xB0uLL);
  unint64_t v17 = v16;
  v16[1] = 0;
  v16[2] = 0;
  void *v16 = &unk_1F08C75D0;
  unint64_t v18 = v16 + 3;
  v21[0] = a2;
  v21[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ML3AlbumImportItem::ML3AlbumImportItem((uint64_t)(v16 + 3), v21, a4, *a5, *a6, *a7, *a8, *a9, *a10);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v18;
  a1[1] = v17;
}

void sub_1B044A168(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ML3AlbumImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3AlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C75D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3AlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C75D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ML3AlbumData::ML3AlbumData(uint64_t a1, uint64_t a2, long long *a3, long long *a4, int a5, char a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, long long *a14, char a15, char a16, uint64_t a17)
{
  *(void *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v23 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v23;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v24 = *a4;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v24;
  }
  *(_DWORD *)(a1 + 56) = a5;
  *(unsigned char *)(a1 + 6sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = a6;
  *(_DWORD *)(a1 + 64) = a7;
  *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x210], 8) = a8;
  *(void *)(a1 + 72) = a9;
  *(void *)(a1 + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = a10;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x210], 8) = a11;
  *(void *)(a1 + 96) = a12;
  *(void *)(a1 + 104) = a13;
  uint8x8_t v25 = (std::string *)(a1 + 112);
  if (*((char *)a14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a14, *((void *)a14 + 1));
  }
  else
  {
    long long v26 = *a14;
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x210], 8) = *((void *)a14 + 2);
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
  }
  *(unsigned char *)(a1 + 136) = a15;
  *(unsigned char *)(a1 + 137) = a16;
  *(void *)(a1 + 144) = a17;
  return a1;
}

void sub_1B044A33C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ML3AlbumData>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<ML3AlbumData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C74B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3AlbumData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C74B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void ___ZN16ML3ImportSession28_shouldPreserveAlbumPropertyExj_block_invoke(uint64_t a1, void *a2)
{
  id v8 = a2;
  unint64_t v3 = [v8 stringForColumnIndex:0];
  uint64_t v4 = [v8 int64ForColumnIndex:1];
  uint64_t v5 = [v8 int64ForColumnIndex:2];
  **(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a1 + 40);
  uint64_t v6 = [v3 length];
  if (v6) {
    uint64_t v6 = [v3 hash];
  }
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16) = v6;
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24) = v4;
  if (MSVDeviceIsWatch()) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + _Block_object_dispose(&STACK[0x210], 8) = v7;
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v5;
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 32) = v5;
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4_Block_object_dispose(&STACK[0x210], 8) = v5;
}

void sub_1B044A614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession47_getAlbumImportItemForGroupingIdentifierAndPIDsEP26ML3AlbumGroupingIdentifierNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEExxRb_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  v75[1] = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v49 = *(ML3ImportSession **)(a1 + 48);
  v75[0] = 0;
  long long v74 = 0u;
  memset(v73, 0, sizeof(v73));
  id v47 = v7;
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v6, (uint64_t)v73, 3uLL);
  if (SHIBYTE(v73[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v72, v73[0].__r_.__value_.__l.__data_, v73[0].__r_.__value_.__l.__size_);
  }
  else {
    std::string v72 = v73[0];
  }
  if (SHIBYTE(v73[1].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v71, v73[1].__r_.__value_.__l.__data_, v73[1].__r_.__value_.__l.__size_);
  }
  else {
    std::string v71 = v73[1];
  }
  if (SHIBYTE(v75[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, (const std::string::value_type *)v74, *((std::string::size_type *)&v74 + 1));
  }
  else
  {
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v74;
    v70.__r_.__value_.__r.__words[2] = v75[0];
  }
  uint64_t v8 = [v6 int64ForColumnIndex:3];
  uint64_t v50 = [v6 objectAtIndexedSubscript:4];
  uint64_t v48 = [v6 int64ForColumnIndex:5];
  int v9 = [v6 intForColumnIndex:6];
  int v10 = [v6 intForColumnIndex:7];
  int v69 = v10;
  int v68 = [v6 intForColumnIndex:8];
  int v67 = [v6 intForColumnIndex:9];
  int v66 = [v6 intForColumnIndex:10];
  unint64_t v11 = [v6 objectAtIndexedSubscript:11];
  if (v11)
  {
    uint64_t v12 = (void *)*((void *)v49 + 3);
    float v13 = [v6 objectAtIndexedSubscript:11];
    float v14 = [v12 objectForKeyedSubscript:v13];
    uint64_t v15 = [v14 ML3NameOrderValue];
    *(void *)&long long v65 = v15;
    *((void *)&v65 + 1) = v16;
  }
  else
  {
    uint64_t v15 = 0;
    long long v65 = *(_OWORD *)"";
  }

  unint64_t v17 = [v6 objectAtIndexedSubscript:11];
  if (v17) {
    BOOL v18 = v15 == 0;
  }
  else {
    BOOL v18 = 0;
  }
  int v19 = v18;

  if (v19)
  {
    BOOL v20 = [v6 objectAtIndexedSubscript:11];
    *(void *)&long long v65 = ML3ImportSession::_getNameOrderForString(v49, v20);
    *((void *)&v65 + 1) = v21;
  }
  int v22 = [v6 intForColumnIndex:12];
  int v64 = v22;
  int v63 = [v6 intForColumnIndex:13];
  uint64_t v62 = [v6 int64ForColumnIndex:14];
  BOOL v61 = [v6 intForColumnIndex:15] != 0;
  uint64_t v60 = [v6 int64ForColumnIndex:16];
  uint64_t v59 = [v6 int64ForColumnIndex:17];
  std::string::basic_string[abi:ne180100]<0>(v57, (char *)[v6 cStringForColumnIndex:18]);
  uint64_t v23 = [v6 int64ForColumnIndex:19];
  std::allocate_shared[abi:ne180100]<ML3AlbumData,std::allocator<ML3AlbumData>,long long &,std::string &,std::string &,int &,int &,int &,int &,ML3NameOrder &,int &,long long &,long long &,std::string &,int &,BOOL &,long long &,void>(&v56, v8, (uint64_t)&v72, (uint64_t)&v71, &v68, &v63, &v67, &v66, (uint64_t *)&v65, &v64, &v62, &v60, (uint64_t)v57, &v69, (char *)&v61, &v59);
  long long v24 = operator new(0xB0uLL);
  uint8x8_t v25 = v24;
  v24[1] = 0;
  v24[2] = 0;
  void *v24 = &unk_1F08C75D0;
  long long v26 = v24 + 3;
  uint8x8_t v27 = (std::__shared_weak_count *)*((void *)&v56 + 1);
  std::string::size_type v28 = v56;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
  if (*((void *)&v56 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v56 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  ML3AlbumImportItem::ML3AlbumImportItem((uint64_t)(v24 + 3), &__p, (long long *)&v70, v10, v50, v23, v48, v9, v22 != 0);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  *(void *)&long long v29 = v26;
  *((void *)&v29 + 1) = v25;
  uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v31 = *(std::__shared_weak_count **)(v30 + 56);
  *(_OWORD *)(v30 + 4_Block_object_dispose(&STACK[0x210], 8) = v29;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v32 = [ML3AlbumGroupingIdentifier alloc];
  unint64_t v33 = ML3CPPBridgeString((const UInt8 *)&v70, 1);
  unint64_t v34 = [(ML3AlbumGroupingIdentifier *)v32 initWithAlbumArtistPersistentID:v48 groupingKey:v50 feedURL:v33 seasonNumber:v9 compilation:v10 != 0];

  if (*(void *)(a1 + 32) && v34 && -[ML3AlbumGroupingIdentifier isEqual:](v34, "isEqual:"))
  {
    *a4 = 1;
    std::string v35 = [(ML3AlbumGroupingIdentifier *)v34 keyValue];
    ML3CPPStringFromData(v51, v35);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v51[0].super.isa;
    std::string::size_type v36 = v52;
    v51[1].super.isa = 0;
    std::string::size_type v52 = 0;
    v51[0].super.isa = 0;
    __p.__r_.__value_.__r.__words[2] = v36;
    std::string::size_type v54 = v28;
    uint64_t v55 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>((uint64_t)v49 + 1248, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[0].super.isa);
    }
  }
  unint64_t v37 = *(void *)(a1 + 56);
  if (v37)
  {
    __p.__r_.__value_.__r.__words[0] = *(void *)(a1 + 56);
    __p.__r_.__value_.__l.__size_ = v28;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3AlbumData>>>((uint64_t *)v49 + 126, v37, (uint64_t)&__p);
    if (__p.__r_.__value_.__r.__words[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_72;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
    goto LABEL_72;
  }
  std::string::size_type v38 = *(void *)(a1 + 72);
  if (*(char *)(a1 + 87) >= 0) {
    uint64_t v39 = (void *)*(unsigned __int8 *)(a1 + 87);
  }
  else {
    uint64_t v39 = *(void **)(a1 + 72);
  }
  unint64_t v40 = v58;
  if ((v58 & 0x80u) != 0) {
    unint64_t v40 = (unint64_t)v57[1];
  }
  if (v39 == (void *)v40)
  {
    std::string v41 = (const void **)(a1 + 64);
    if ((v58 & 0x80u) == 0) {
      uint64_t v42 = v57;
    }
    else {
      uint64_t v42 = (void **)v57[0];
    }
    if ((*(unsigned char *)(a1 + 87) & 0x80) != 0)
    {
      if (memcmp(*v41, v42, *(void *)(a1 + 72))) {
        goto LABEL_72;
      }
LABEL_65:
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v41, v38);
    }
    else
    {
      if (*(unsigned char *)(a1 + 87))
      {
        uint64_t v43 = (unsigned __int8 *)(a1 + 64);
        uint64_t v44 = *(unsigned __int8 *)(a1 + 87);
        while (*v43 == *(unsigned __int8 *)v42)
        {
          ++v43;
          uint64_t v42 = (void **)((char *)v42 + 1);
          if (!--v44)
          {
            if ((*(unsigned char *)(a1 + 87) & 0x80) != 0) {
              goto LABEL_65;
            }
            goto LABEL_63;
          }
        }
        goto LABEL_72;
      }
LABEL_63:
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v41;
      __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 80);
    }
    std::string::size_type v54 = v28;
    uint64_t v55 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>((uint64_t)v49 + 1328, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_72:

  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if ((char)v58 < 0) {
    operator delete(v57[0]);
  }

  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v75[i]) < 0) {
      operator delete((void *)v75[i - 2]);
    }
  }
}

void sub_1B044AD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (a41 < 0) {
    operator delete(__p);
  }

  if (a56 < 0) {
    operator delete(a51);
  }
  if (*(char *)(v59 - 217) < 0) {
    operator delete(*(void **)(v59 - 240));
  }
  if (*(char *)(v59 - 185) < 0) {
    operator delete(*(void **)(v59 - 208));
  }
  uint64_t v61 = 0;
  uint64_t v62 = v59 - 176;
  while (1)
  {
    if (*(char *)(v62 + v61 + 71) < 0) {
      operator delete(*(void **)(v62 + v61 + 48));
    }
    v61 -= 24;
    if (v61 == -72)
    {

      _Unwind_Resume(a1);
    }
  }
}

void __destroy_helper_block_ea8_64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
}

void __copy_helper_block_ea8_64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 64);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

const unsigned __int8 *ML3DatabaseRowGetHomogeneousColumns<std::string>(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = [a1 parentResult];
  id v6 = [v5 _statement];
  id v7 = (sqlite3_stmt *)[v6 sqliteStatement];

  unint64_t v8 = 0;
  unsigned int v9 = 1;
  do
  {
    __n128 result = sqlite3_column_text(v7, v9 - 1);
    if (result) {
      __n128 result = (const unsigned __int8 *)MEMORY[0x1B3E93360](a2 + 24 * v8, result);
    }
    unint64_t v8 = v9++;
  }
  while (v8 < a3);
  return result;
}

void sub_1B044AFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getNameOrderForString(ML3ImportSession *this, NSString *a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  long long v3 = a2;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  v10[0] = 0;
  v10[1] = v10;
  void v10[2] = 0x2020000000;
  v10[3] = 0;
  uint64_t v4 = (void *)*((void *)this + 2);
  v15[0] = v3;
  uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:1];
  id v6 = [v4 executeQuery:@"SELECT name_order, name_section FROM sort_map WHERE name = ?", v5 withParameters];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN16ML3ImportSession22_getNameOrderForStringEP8NSString_block_invoke;
  void v9[3] = &unk_1E5FB76A0;
  v9[4] = &v11;
  void v9[5] = v10;
  [v6 enumerateRowsWithBlock:v9];

  uint64_t v7 = v12[3];
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v11, 8);

  return v7;
}

void sub_1B044B15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  int v10 = v9;

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3AlbumData,std::allocator<ML3AlbumData>,long long &,std::string &,std::string &,int &,int &,int &,int &,ML3NameOrder &,int &,long long &,long long &,std::string &,int &,BOOL &,long long &,void>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int *a6, int *a7, int *a8, uint64_t *a9, int *a10, uint64_t *a11, uint64_t *a12, uint64_t a13, _DWORD *a14, char *a15, uint64_t *a16)
{
  long long v24 = operator new(0xB0uLL);
  v24[1] = 0;
  v24[2] = 0;
  void *v24 = &unk_1F08C74B8;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v39 = *(std::string *)a3;
  }
  std::string v35 = a1;
  uint64_t v36 = a2;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v38 = *(std::string *)a4;
  }
  int v25 = *a5;
  int v26 = *a6;
  int v27 = *a7;
  int v28 = *a8;
  uint64_t v29 = *a9;
  uint64_t v30 = a9[1];
  int v31 = *a10;
  uint64_t v32 = *a11;
  uint64_t v33 = *a12;
  if (*(char *)(a13 + 23) < 0)
  {
    int v34 = v25;
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a13, *(void *)(a13 + 8));
    int v25 = v34;
  }
  else
  {
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)a13;
    v37.__r_.__value_.__r.__words[2] = *(void *)(a13 + 16);
  }
  ML3AlbumData::ML3AlbumData((uint64_t)(v24 + 3), v36, (long long *)&v39, (long long *)&v38, v25, v26 != 0, v27, v28, v29, v30, v31, v32, v33, (long long *)&v37, *a14 != 0, *a15, *a16);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  void *v35 = v24 + 3;
  v35[1] = v24;
}

void sub_1B044B384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 89) < 0) {
    operator delete(*(void **)(v32 - 112));
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v34);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3AlbumData>>>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(void **)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 2;
  uint64_t v13 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = a2;
  *((void *)v13 + 2) = *(void *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = a1[1];
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void *)*v12;
          if (*v12)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v24) = v12;
            uint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*a1 + 8 * v30))
                  {
                    *(void *)(*a1 + 8 * v3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v23;
                    goto LABEL_55;
                  }
                  void *v23 = *v29;
                  void *v29 = **(void **)(*a1 + 8 * v30);
                  **(void **)(*a1 + 8 * v3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v29;
                  uint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                uint64_t v23 = v29;
                uint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        int v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v31 = *a1;
  uint64_t v32 = *(void **)(*a1 + 8 * v3);
  if (v32)
  {
    *(void *)uint64_t v13 = *v32;
LABEL_72:
    void *v32 = v13;
    goto LABEL_73;
  }
  *(void *)uint64_t v13 = *v12;
  *uint64_t v12 = v13;
  *(void *)(v31 + 8 * v3) = v12;
  if (*(void *)v13)
  {
    unint64_t v33 = *(void *)(*(void *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    uint64_t v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
}

void sub_1B044B7C8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession22_getNameOrderForStringEP8NSString_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v8 = a2;
  id v6 = [v8 objectAtIndexedSubscript:0];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v6 longLongValue];

  unint64_t v7 = [v8 objectAtIndexedSubscript:1];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v7 integerValue];

  *a4 = 1;
}

void sub_1B044B884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_176c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE200c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 184);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_176c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE200c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(void *result, void *a2)
{
  uint64_t v2 = a2[23];
  result[22] = a2[22];
  result[23] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[26];
  result[25] = a2[25];
  result[26] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x68uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v5;
  *((void *)v13 + 2) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 8_Block_object_dispose(&STACK[0x210], 8) = 0u;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      int v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v20 = operator new(8 * *(void *)&prime);
  uint64_t v21 = *(void **)a1;
  *(void *)a1 = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  uint64_t v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v12;
    uint64_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*(void *)a1 + 8 * v30))
          {
            *(void *)(*(void *)a1 + 8 * v3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v23;
            goto LABEL_56;
          }
          void *v23 = *v29;
          void *v29 = **(void **)(*(void *)a1 + 8 * v30);
          **(void **)(*(void *)a1 + 8 * v3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v29;
          uint64_t v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        uint64_t v23 = v29;
        uint64_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v5);
  uint64_t i = (void *)v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    void *v31 = i;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1B044BD44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *ML3CollectionInfoSet::operator=(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  id v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v5;
  a1[1] = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v9 = (std::__shared_weak_count *)a1[3];
  a1[2] = v8;
  a1[3] = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[5];
  a1[4] = v11;
  a1[5] = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v14 = a2[6];
  uint64_t v13 = a2[7];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  float v15 = (std::__shared_weak_count *)a1[7];
  a1[6] = v14;
  a1[7] = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v17 = a2[8];
  uint64_t v16 = a2[9];
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = (std::__shared_weak_count *)a1[9];
  a1[8] = v17;
  a1[9] = v16;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return a1;
}

void ML3CollectionInfoSet::~ML3CollectionInfoSet(ML3CollectionInfoSet *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  id v6 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<long long const,ML3CollectionInfoSet>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

void ___ZN16ML3ImportSession21_getDefaultEmptyAlbumEv_block_invoke()
{
  uint64_t v0 = (char *)operator new(0xB0uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = &unk_1F08C74B8;
  *((void *)v0 + 11) = 0;
  *(_OWORD *)(v0 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 69) = 0u;
  *((_OWORD *)v0 + 6) = *(_OWORD *)"";
  *((_DWORD *)v0 + 2_Block_object_dispose(&STACK[0x210], 8) = 0;
  *((void *)v0 + 21) = 0;
  *(_OWORD *)(v0 + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 146) = 0u;
  uint64_t v1 = (std::__shared_weak_count *)qword_1E9B32130;
  qword_1E9B32130 = (uint64_t)v0;
  *(_OWORD *)(v0 + 24) = 0u;
  ML3ImportSession::_getDefaultEmptyAlbum(void)::__emptyAlbumData = (uint64_t)(v0 + 24);
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::shared_ptr<ML3AlbumData>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void ___ZN16ML3ImportSession28_shouldPreserveTrackPropertyENSt3__110shared_ptrI13ML3ImportItemEEj_block_invoke(uint64_t a1, void *a2)
{
  id v6 = a2;
  **(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a1 + 40);
  int IsWatch = MSVDeviceIsWatch();
  uint64_t v4 = v6;
  if (IsWatch)
  {
    uint64_t v5 = [v6 int64ForColumnIndex:0];
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + _Block_object_dispose(&STACK[0x210], 8) = v5;
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24) = [v4 int64ForColumnIndex:0];
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16) = [v6 int64ForColumnIndex:1];
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 32) = [v6 int64ForColumnIndex:2];
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = [v6 int64ForColumnIndex:3];
}

void sub_1B044C0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    id v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      id v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B044C180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(uint64_t result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    id v6 = (void *)result;
    long long v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4);
    uint64_t v8 = v7;
    *id v6 = v7;
    v6[1] = v7;
    void v6[2] = &v7[v9];
    uint64_t v14 = v7;
    uint64_t v13 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    _OWORD v11[2] = &v14;
    char v12 = 0;
    if (a2 != a3)
    {
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((void *)a2 + 1));
          long long v7 = v14;
        }
        else
        {
          long long v10 = *a2;
          v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
          *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v10;
        }
        a2 = (long long *)((char *)a2 + 24);
        uint64_t v14 = ++v7;
      }
      while (a2 != a3);
      uint64_t v8 = v7;
    }
    char v12 = 1;
    __n128 result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_1B044C31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t ML3ImportSession::_processSortableNames(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3)];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      if (!*(void *)(v5 + 8)) {
        goto LABEL_8;
      }
LABEL_7:
      long long v7 = ML3CPPBridgeString((const UInt8 *)v5, 1);
      [v4 addObject:v7];

      goto LABEL_8;
    }
    if (*(unsigned char *)(v5 + 23)) {
      goto LABEL_7;
    }
LABEL_8:
    v5 += 24;
  }
  if ([*(id *)(a1 + 56) attemptInsertStringsIntoSortMap:v4]) {
    goto LABEL_11;
  }
  ML3ImportSession::flush((ML3ImportSession *)a1, 1);
  int v8 = [*(id *)(a1 + 56) commitFailedInsertedStrings:v4];
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1088);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1248);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1208);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 888);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 928);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 968);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 1008);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 1048);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1288);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1328);
  if (v8)
  {
LABEL_11:
    uint64_t v9 = [*(id *)(a1 + 56) nameOrders];
    long long v10 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v9;

    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_1B044C4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void ___ZN16ML3ImportSession27_matchAlbumToImportedEntityENSt3__110shared_ptrI13ML3ImportItemEEx_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (!*(unsigned char *)(a1 + 48))
  {
    id v6 = [v7 stringForColumnIndex:0];
    MEMORY[0x1B3E93360](*(void *)(*(void *)(a1 + 32) + 8) + 48, [v6 UTF8String]);
  }
  if (!*(unsigned char *)(a1 + 49)) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v7 int64ForColumnIndex:1];
  }
}

void sub_1B044C68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::updateAlbum(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 1576) count]) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = *(void *)(a1 + 1536) != *(void *)(a1 + 1528);
  }
  uint64_t v11 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    char v12 = __p;
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 88))(__p);
    if (v50 < 0) {
      char v12 = (void **)__p[0];
    }
    if (*a3)
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 88))(v58);
      if (v61 >= 0) {
        uint64_t v13 = v58;
      }
      else {
        uint64_t v13 = *(const char **)v58;
      }
      *(_DWORD *)std::string buf = 136446978;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v52 = 2082;
      std::string::size_type v53 = v13;
      __int16 v54 = 1024;
      int v55 = a5;
      __int16 v56 = 1024;
      LODWORD(v57) = v10;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_DEFAULT, "updating album=%{public}s with track=%{public}s ignoreNonExistingAlbum=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
      if (v61 < 0) {
        operator delete(*(void **)v58);
      }
    }
    else
    {
      *(_DWORD *)std::string buf = 136446978;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v52 = 2082;
      std::string::size_type v53 = "";
      __int16 v54 = 1024;
      int v55 = a5;
      __int16 v56 = 1024;
      LODWORD(v57) = v10;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_DEFAULT, "updating album=%{public}s with track=%{public}s ignoreNonExistingAlbum=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
    }
    if (v50 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v10 && !ML3ImportSession::flush((ML3ImportSession *)a1, 1)) {
    return 0;
  }
  if (!*a3) {
    goto LABEL_31;
  }
  uint64_t v14 = (std::__shared_weak_count *)a3[1];
  v48[0] = *a3;
  v48[1] = (uint64_t)v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = ML3ImportSession::_prepareTrackForImport(a1, v48, a5, 1);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!v15)
  {
    if (*a3)
    {
      uint64_t v16 = (std::__shared_weak_count *)a3[1];
      v47[0] = *a3;
      v47[1] = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int matched = ML3ImportSession::_matchAlbumToImportedEntity(a1, v47, a4);
      char v18 = matched;
      if (v16)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        if (v18) {
          goto LABEL_31;
        }
      }
      else if (matched)
      {
        goto LABEL_31;
      }
      int v24 = 0;
      uint64_t v21 = 0;
      uint64_t AlbumPersistentID = 0;
LABEL_44:
      uint64_t v25 = *a3;
      if (*a3 && a5 && !*(void *)(v25 + 8))
      {
        std::string v37 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1B022D000, v37, OS_LOG_TYPE_DEFAULT, "Ignoring album update as the track does not exist", buf, 2u);
        }
      }
      else
      {
        unint64_t v26 = os_log_create("com.apple.amp.medialibrary", "Import");
        BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
        if (v25 || !a5 || AlbumPersistentID)
        {
          if (v27)
          {
            uint64_t v28 = *a3;
            if (*a3) {
              uint64_t v28 = *(void *)(v28 + 8);
            }
            *(_DWORD *)std::string buf = 134218752;
            *(void *)&uint8_t buf[4] = v28;
            __int16 v52 = 2048;
            std::string::size_type v53 = (const char *)AlbumPersistentID;
            __int16 v54 = 1024;
            int v55 = v24;
            __int16 v56 = 2048;
            uint64_t v57 = v21;
            _os_log_impl(&dword_1B022D000, v26, OS_LOG_TYPE_DEFAULT, "updating album with trackPID=%lld, albumPID=%lld, matchAlbumToImportedEntity=%{BOOL}u, albumGroupingIdentifier=%p", buf, 0x26u);
          }

          uint64_t v29 = (std::__shared_weak_count *)a2[1];
          v41[0] = *a2;
          v41[1] = v29;
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v21) {
            a4 = [v21 albumArtistPersistentID];
          }
          uint64_t v30 = *a3;
          uint64_t v31 = (std::__shared_weak_count *)a3[1];
          v40[0] = v30;
          v40[1] = v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          ML3ImportSession::_addAlbum(a1, v41, v21, a4, v40);
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          unint64_t v32 = (std::__shared_weak_count *)a2[1];
          v39[0] = *a2;
          v39[1] = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          ML3ImportSession::_addAlbumDataToSourceMaps(a1, v39);
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
        }
        else
        {
          if (v27)
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_1B022D000, v26, OS_LOG_TYPE_DEFAULT, "Ignoring album update as the album does not exist", buf, 2u);
          }
        }
      }
      a5 = 1;
      goto LABEL_85;
    }
LABEL_31:
    int v19 = (std::__shared_weak_count *)a2[1];
    uint64_t v45 = *a2;
    long long v46 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = (std::__shared_weak_count *)a3[1];
    uint64_t v43 = *a3;
    uint64_t v44 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = ML3ImportSession::_getAlbumGroupingIdentifierForImportItem(a1, &v45, &v43, a4);
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    uint64_t v22 = (std::__shared_weak_count *)a2[1];
    v42[0] = *a2;
    v42[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t AlbumPersistentID = ML3ImportSession::_getAlbumPersistentID(a1, (uint64_t)v42, v21);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    int v24 = 1;
    goto LABEL_44;
  }
  if (v15 != 1)
  {
    uint64_t v21 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
      int v33 = SHIBYTE(v54);
      int v34 = *(unsigned char **)buf;
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 88))(__p);
      std::string v35 = buf;
      if (v33 < 0) {
        std::string v35 = v34;
      }
      if (v50 >= 0) {
        char v36 = __p;
      }
      else {
        char v36 = (void **)__p[0];
      }
      *(_DWORD *)unsigned __int8 v58 = 136446466;
      *(void *)&v58[4] = v35;
      __int16 v59 = 2082;
      uint64_t v60 = v36;
      _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_ERROR, "Error updating album=%{public}s. Could not prepare track data for import=%{public}s", v58, 0x16u);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v54) < 0) {
        operator delete(*(void **)buf);
      }
    }
LABEL_85:

    return a5;
  }
  return 0;
}

void sub_1B044CD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::addAlbumArtist(uint64_t a1, uint64_t *a2, void *a3)
{
  void v57[2] = *MEMORY[0x1E4F143B8];
  BOOL v6 = *(void *)(a1 + 2064) >= 0x3E8uLL
    && *(void *)(a1 + 1536) == *(void *)(a1 + 1528)
    && ![*(id *)(a1 + 1584) count]
    && [*(id *)(a1 + 1576) count] == 0;
  if (*a3)
  {
    if ([*(id *)(a1 + 1576) count]) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = *(void *)(a1 + 1560) != *(void *)(a1 + 1552);
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  int v8 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = v47;
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 88))(v47);
    if (v48 < 0) {
      uint64_t v9 = (void **)v47[0];
    }
    if (*a3)
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 88))(__p);
      if (v52 >= 0) {
        BOOL v10 = __p;
      }
      else {
        BOOL v10 = *(const char **)__p;
      }
      *(_DWORD *)std::string buf = 136446978;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v54 = 2082;
      int v55 = v10;
      __int16 v56 = 1024;
      LODWORD(v57[0]) = v6;
      WORD2(v57[0]) = 1024;
      *(_DWORD *)((char *)v57 + 6) = v7;
      _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_DEFAULT, "adding albumArtist=%{public}s trackImportItem=%{public}s, addedArtistsOverThreshold=%{BOOL}u, updateOrDeleteTracks=%{BOOL}u", buf, 0x22u);
      if (v52 < 0) {
        operator delete(*(void **)__p);
      }
    }
    else
    {
      *(_DWORD *)std::string buf = 136446978;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v54 = 2082;
      int v55 = "<nil>";
      __int16 v56 = 1024;
      LODWORD(v57[0]) = v6;
      WORD2(v57[0]) = 1024;
      *(_DWORD *)((char *)v57 + 6) = v7;
      _os_log_impl(&dword_1B022D000, v8, OS_LOG_TYPE_DEFAULT, "adding albumArtist=%{public}s trackImportItem=%{public}s, addedArtistsOverThreshold=%{BOOL}u, updateOrDeleteTracks=%{BOOL}u", buf, 0x22u);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
  }

  if ([*(id *)(a1 + 2080) count]) {
    int v11 = 1;
  }
  else {
    int v11 = v6;
  }
  if ((v11 | v7) != 1) {
    goto LABEL_34;
  }
  int v12 = ML3ImportSession::flush((ML3ImportSession *)a1, 1);
  uint64_t v13 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v12;
    _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_DEFAULT, "flushing entities as we have pending album artist deletes OR accumulated enough adds OR track modifications finished with status=%{BOOL}u", buf, 8u);
  }

  if (v12)
  {
LABEL_34:
    if (*a3)
    {
      uint64_t v14 = (std::__shared_weak_count *)a3[1];
      v46[0] = *a3;
      v46[1] = (uint64_t)v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v15 = ML3ImportSession::_prepareTrackForImport(a1, v46, 0, 0);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (v15)
      {
        uint64_t v16 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
          int v17 = SHIBYTE(v56);
          char v18 = *(unsigned char **)buf;
          (*(void (**)(void **__return_ptr))(*(void *)*a3 + 88))(v47);
          int v19 = buf;
          if (v17 < 0) {
            int v19 = v18;
          }
          if (v48 >= 0) {
            BOOL v20 = v47;
          }
          else {
            BOOL v20 = (void **)v47[0];
          }
          *(_DWORD *)std::string __p = 136446466;
          *(void *)&__p[4] = v19;
          __int16 v50 = 2082;
          uint64_t v51 = v20;
          _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_ERROR, "Error adding album artist=%{public}s. Could not prepare track data for import=%{public}s", __p, 0x16u);
          if (v48 < 0) {
            operator delete(v47[0]);
          }
          if (SHIBYTE(v56) < 0) {
            operator delete(*(void **)buf);
          }
        }
        uint64_t v21 = 0;
LABEL_97:

        return v21;
      }
    }
    uint64_t v22 = *a2;
    uint64_t v23 = (std::__shared_weak_count *)a2[1];
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = ML3ImportSession::_getGroupingKeyForAlbumArtistImportItem(a1, v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (*a3) {
      uint64_t v24 = *(void *)(*a3 + 8);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 32))(*a2, 301989898);
    uint64_t v26 = *a3;
    if (*a3 && *(unsigned char *)(v26 + 16) && !*(unsigned char *)(v26 + 17))
    {
      unint64_t AlbumArtistPersistentID = 0;
      goto LABEL_69;
    }
    uint64_t v28 = (std::__shared_weak_count *)a2[1];
    v45[0] = *a2;
    v45[1] = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t AlbumArtistPersistentID = ML3ImportSession::_getAlbumArtistPersistentID(a1, (uint64_t)v45, v16);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (*(_DWORD *)(a1 + 32) == 2)
    {
      if (!AlbumArtistPersistentID)
      {
        ++*(_DWORD *)(a1 + 224);
LABEL_69:
        uint64_t v30 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 134218496;
          *(void *)&uint8_t buf[4] = AlbumArtistPersistentID;
          __int16 v54 = 2048;
          int v55 = (const char *)v25;
          __int16 v56 = 2048;
          v57[0] = v24;
          _os_log_impl(&dword_1B022D000, v30, OS_LOG_TYPE_DEFAULT, "importing albumArtistPID=%lld, albumArtistSync=%lld, trackPID=%lld", buf, 0x20u);
        }

        if (*a3)
        {
          uint64_t v31 = (std::__shared_weak_count *)a3[1];
          v44[0] = *a3;
          v44[1] = (uint64_t)v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v32 = ML3ImportSession::_prepareTrackSortData(a1, v44);
        }
        else
        {
          uint64_t v31 = (std::__shared_weak_count *)a2[1];
          v43[0] = *a2;
          v43[1] = (uint64_t)v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v32 = ML3ImportSession::_prepareAlbumArtistSortData(a1, v43);
        }
        char v33 = v32;
        if (v31)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          if (v33)
          {
LABEL_80:
            int v34 = (std::__shared_weak_count *)a2[1];
            v42[0] = *a2;
            v42[1] = v34;
            if (v34) {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v35 = *a3;
            char v36 = (std::__shared_weak_count *)a3[1];
            v41[0] = v35;
            v41[1] = v36;
            if (v36) {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            ML3ImportSession::_addAlbumArtist(a1, v42, v16, v41);
            if (v36) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
            }
            if (v34) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            }
            uint64_t v37 = *a2;
            std::string v38 = (std::__shared_weak_count *)a2[1];
            v40[0] = v37;
            v40[1] = v38;
            if (v38) {
              atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            ML3ImportSession::_addAlbumArtistDataToSourceMaps(a1, v40);
            if (v38) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            }
            uint64_t v21 = 1;
            goto LABEL_95;
          }
        }
        else if (v32)
        {
          goto LABEL_80;
        }
        uint64_t v21 = 0;
LABEL_95:
        if (*(unsigned char *)(a1 + 1512)) {
          std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>((void *)(a1 + 808), AlbumArtistPersistentID);
        }
        goto LABEL_97;
      }
      ++*(_DWORD *)(a1 + 228);
    }
    else if (!AlbumArtistPersistentID)
    {
      goto LABEL_69;
    }
    uint64_t v29 = *a2;
    *(unsigned char *)(v29 + 16) = 1;
    *(void *)(v29 + _Block_object_dispose(&STACK[0x210], 8) = AlbumArtistPersistentID;
    goto LABEL_69;
  }
  return 0;
}

void sub_1B044D4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_prepareTrackSortData(uint64_t a1, uint64_t *a2)
{
  *((void *)&v72 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (!*(void *)(v4 + 8))
  {
    uint64_t v23 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v24 = [NSString stringWithUTF8String:"BOOL ML3ImportSession::_prepareTrackSortData(ML3ImportItemRef)"];
    [v23 handleFailureInFunction:v24 file:@"ML3ImportSession.mm" lineNumber:3285 description:@"invalid track pid"];

    uint64_t v4 = *a2;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v52, v4, 33554433);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v58, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v58 = __s;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v50, *a2, 167772161);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v59, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string v59 = v51;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v48, *a2, 167772162);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v49;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v46, *a2, 167772164);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v61, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  }
  else {
    std::string v61 = v47;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v44, *a2, 167772165);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v62, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v62 = v45;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v42, *a2, 167772166);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v63, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v63 = v43;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 152))(&v40);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v64, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  else {
    std::string v64 = v41;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 160))(&v38);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v65, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  }
  else {
    std::string v65 = v39;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 144))(&v36);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v66, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else {
    std::string v66 = v37;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 144))(&v34);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v67, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  }
  else {
    std::string v67 = v35;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 144))(&v32);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v68, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v68 = v33;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 144))(&v30);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v69, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string v69 = v31;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 144))(&v28);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v70, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string v70 = v29;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 144))(&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v71, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v71 = __p;
  }
  int v55 = 0;
  __int16 v54 = 0;
  v56[0] = 0;
  v56[1] = &v54;
  char v57 = 0;
  __int16 v54 = operator new(0x150uLL);
  int v55 = (char *)v54;
  v56[0] = (char *)v54 + 336;
  int v55 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v56, (long long *)&v58, &v72, (std::string *)v54);
  uint64_t v5 = 42;
  do
  {
    if (v58.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0) {
      operator delete((void *)v56[v5]);
    }
    v5 -= 3;
  }
  while (v5 * 8);
  uint64_t v26 = &unk_1F08C3230;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v28 = &unk_1F08C3230;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  uint64_t v30 = &unk_1F08C3230;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  int v32 = &unk_1F08C3230;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  int v34 = &unk_1F08C3230;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  char v36 = &unk_1F08C3230;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  std::string v38 = &unk_1F08C3230;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  unint64_t v40 = &unk_1F08C3230;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  uint64_t v42 = &unk_1F08C3230;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  uint64_t v44 = &unk_1F08C3230;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  long long v46 = &unk_1F08C3230;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  char v48 = &unk_1F08C3230;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  __int16 v50 = &unk_1F08C3230;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  char v52 = &unk_1F08C3230;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 32))(*a2, 117440516);
  if (v6)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"%lld", v6);
    id v7 = objc_claimAutoreleasedReturnValue();
    std::string::basic_string[abi:ne180100]<0>(&v58, (char *)[v7 UTF8String]);
    int v8 = v55;
    if ((unint64_t)v55 >= v56[0])
    {
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v55 - (unsigned char *)v54) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v56[0] - (void)v54) >> 3) > v11) {
        unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v56[0] - (void)v54) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56[0] - (void)v54) >> 3) >= 0x555555555555555) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (char *)(v12 + 24 * v10);
      long long v15 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *((void *)v14 + 2) = *((void *)&v58.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v14 = v15;
      memset(&v58, 0, sizeof(v58));
      uint64_t v16 = (long long *)(v14 + 24);
      int v17 = (long long *)v55;
      char v18 = (long long *)v54;
      if (v55 == v54)
      {
        __int16 v54 = v14;
        int v55 = v14 + 24;
        v56[0] = v12 + 24 * v13;
      }
      else
      {
        do
        {
          long long v19 = *(long long *)((char *)v17 - 24);
          *((void *)v14 - 1) = *((void *)v17 - 1);
          *(_OWORD *)(v14 - 24) = v19;
          v14 -= 24;
          *((void *)v17 - 2) = 0;
          *((void *)v17 - 1) = 0;
          *((void *)v17 - 3) = 0;
          int v17 = (long long *)((char *)v17 - 24);
        }
        while (v17 != v18);
        int v17 = (long long *)v54;
        BOOL v20 = v55;
        __int16 v54 = v14;
        int v55 = (char *)v16;
        v56[0] = v12 + 24 * v13;
        while (v20 != (char *)v17)
        {
          if (*(v20 - 1) < 0) {
            operator delete(*((void **)v20 - 3));
          }
          v20 -= 24;
        }
      }
      if (v17) {
        operator delete(v17);
      }
      int v55 = (char *)v16;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v9 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *((void *)v55 + 2) = *((void *)&v58.__r_.__value_.__l + 2);
      *(_OWORD *)int v8 = v9;
      memset(&v58, 0, sizeof(v58));
      int v55 = v8 + 24;
    }
  }
  memset(v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v25, (long long *)v54, (long long *)v55, 0xAAAAAAAAAAAAAAABLL * ((v55 - (unsigned char *)v54) >> 3));
  uint64_t v21 = ML3ImportSession::_processSortableNames(a1, v25);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  return v21;
}

void sub_1B044E110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_prepareAlbumArtistSortData(uint64_t a1, uint64_t *a2)
{
  *(void *)&long long v39 = *MEMORY[0x1E4F143B8];
  (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 152))(&v31);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    *(void *)&long long v31 = &unk_1F08C3230;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v28 = v32;
  }
  uint64_t v4 = ML3CPPBridgeString((const UInt8 *)&v28, 1);
  uint64_t v5 = [v4 MLSortString];

  if (v5) {
    std::string::basic_string[abi:ne180100]<0>(&v27, (char *)[v5 UTF8String]);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, *a2, 301989889);
  if (SHIBYTE(v23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v31, (const std::string::value_type *)v22, *((std::string::size_type *)&v22 + 1));
  }
  else
  {
    long long v31 = v22;
    v32.__r_.__value_.__r.__words[0] = v23;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, *a2, 301989890);
  if (SHIBYTE(v20) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v32.__r_.__value_.__r.__words[1], (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
  }
  else
  {
    *(_OWORD *)&v32.__r_.__value_.__r.__words[1] = v19;
    uint64_t v33 = v20;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 152))(&v16);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v34, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else {
    std::string v34 = v17;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 152))(&v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v35, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v35 = v15;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 160))(&v12);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v36, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v36 = v13;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 160))(&v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v37, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v37 = __p;
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v38, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v38 = v27;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::string v29 = &v24;
  char v30 = 0;
  uint64_t v24 = (long long *)operator new(0xA8uLL);
  uint64_t v25 = v24;
  uint64_t v26 = (char *)v24 + 168;
  uint64_t v6 = 0;
  uint64_t v25 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v26, &v31, &v39, (std::string *)v24);
  do
  {
    if (SHIBYTE(v38.__r_.__value_.__r.__words[v6 + 2]) < 0) {
      operator delete(*(void **)((char *)&v38.__r_.__value_.__l.__data_ + v6 * 8));
    }
    v6 -= 3;
  }
  while (v6 != -21);
  unint64_t v10 = &unk_1F08C3230;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v12 = &unk_1F08C3230;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = &unk_1F08C3230;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = &unk_1F08C3230;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  char v18 = &unk_1F08C3230;
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  uint64_t v21 = &unk_1F08C3230;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  memset(v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v9, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  uint64_t v7 = ML3ImportSession::_processSortableNames(a1, v9);
  *(void *)&long long v31 = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  *(void *)&long long v31 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }

  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1B044EB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  for (; v73 != v74 - 224; v73 -= 24)
  {
    if (*(char *)(v73 - 1) < 0) {
      operator delete(*(void **)(v73 - 24));
    }
  }
  if (a66 < 0) {
    operator delete(a61);
  }

  if (a72 < 0) {
    operator delete(a67);
  }
  _Unwind_Resume(a1);
}

void ML3ImportSession::_addAlbumArtist(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v304 = *MEMORY[0x1E4F143B8];
  id v208 = a3;
  uint64_t v6 = (void *)*a4;
  if (*a4)
  {
    unint64_t v211 = v6[1];
    uint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(*v6 + 32))(v6, 16777217);
    unsigned int v209 = (MLMediaTypeByStandardizingMediaType(v7) >> 10) & 1;
  }
  else
  {
    unint64_t v211 = 0;
    unsigned int v209 = 0;
  }
  uint64_t v8 = *a2;
  uint64_t v279 = 0;
  v280 = &v279;
  uint64_t v281 = 0x4012000000;
  v282 = __Block_byref_object_copy__459;
  unint64_t v283 = __Block_byref_object_dispose__460;
  uint64_t v284 = "";
  std::string v286 = 0;
  uint64_t v285 = 0;
  uint64_t v272 = 0;
  unint64_t v273 = &v272;
  uint64_t v274 = 0x4812000000;
  uint64_t v275 = __Block_byref_object_copy__288;
  v276 = __Block_byref_object_dispose__289;
  uint64_t v277 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v8 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v278 = *(std::string *)&buf[16];
  }
  uint64_t v265 = 0;
  uint64_t v266 = (const std::string *)&v265;
  uint64_t v267 = 0x4812000000;
  uint64_t v268 = __Block_byref_object_copy__288;
  v269 = __Block_byref_object_dispose__289;
  uint64_t v270 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 152))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v271, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v271 = *(std::string *)&buf[16];
  }
  uint64_t v258 = 0;
  int v259 = (const std::string *)&v258;
  uint64_t v260 = 0x4812000000;
  int v261 = __Block_byref_object_copy__288;
  v262 = __Block_byref_object_dispose__289;
  uint64_t v263 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 160))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string __p = *(std::string *)&buf[16];
  }
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 167772177);
  uint64_t v254 = 0;
  v255 = &v254;
  uint64_t v256 = 0x2020000000;
  uint64_t v257 = 0;
  uint64_t v257 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 301989898);
  uint64_t v250 = 0;
  unint64_t v251 = &v250;
  uint64_t v252 = 0x2020000000;
  uint64_t v253 = 0;
  uint64_t v253 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 301989904);
  uint64_t v246 = 0;
  unint64_t v247 = &v246;
  uint64_t v248 = 0x2020000000;
  uint64_t v249 = 0;
  uint64_t v249 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 301989893);
  uint64_t v242 = 0;
  int v243 = &v242;
  uint64_t v244 = 0x2020000000;
  BOOL v245 = 0;
  BOOL v245 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 301989901) != 0;
  uint64_t v238 = 0;
  int v239 = &v238;
  uint64_t v240 = 0x2020000000;
  int v241 = 0;
  int v241 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 301989903);
  if (v9 && v255[3])
  {
    *(unsigned char *)(a1 + 1521) = 1;
    unint64_t v10 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 88))(&v298);
      unint64_t v11 = (v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v298
          : (std::string *)v298.__r_.__value_.__r.__words[0];
      uint64_t v12 = v255[3];
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&uint8_t buf[24] = v12;
      _os_log_impl(&dword_1B022D000, v10, OS_LOG_TYPE_ERROR, "Artist Import Item=%{public}s has syncID=%lld and legacySyncID=%lld", buf, 0x20u);
      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v298.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v232 = 0;
  unint64_t v233 = (void **)&v232;
  uint64_t v234 = 0x3032000000;
  v235 = __Block_byref_object_copy__286;
  int v236 = __Block_byref_object_dispose__287;
  id v207 = v208;
  id v237 = v207;
  if (!*a4)
  {
LABEL_42:
    if (v280[6] || [v233[5] length] | v9 || *(void *)(*a2 + 8)) {
      goto LABEL_45;
    }
    if (*((char *)v273 + 71) < 0)
    {
      if (!v273[7])
      {
LABEL_191:
        std::string::size_type v99 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          char v100 = buf;
          (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
          if (buf[23] < 0) {
            char v100 = *(unsigned char **)buf;
          }
          if (*a4)
          {
            (*(void (**)(std::string *__return_ptr))(*(void *)*a4 + 88))(&v298);
            if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v101 = &v298;
            }
            else {
              std::string::size_type v101 = (std::string *)v298.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)v302 = 136446466;
            *(void *)&v302[4] = v100;
            *(_WORD *)&v302[12] = 2082;
            *(void *)&v302[14] = v101;
            _os_log_impl(&dword_1B022D000, v99, OS_LOG_TYPE_ERROR, "Album artist=%{public}s has an empty grouping key and no valid identifiers. Creating a default album artist import item for track=%{public}s", v302, 0x16u);
            if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v298.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            *(_DWORD *)v302 = 136446466;
            *(void *)&v302[4] = v100;
            *(_WORD *)&v302[12] = 2082;
            *(void *)&v302[14] = "<empty>";
            _os_log_impl(&dword_1B022D000, v99, OS_LOG_TYPE_ERROR, "Album artist=%{public}s has an empty grouping key and no valid identifiers. Creating a default album artist import item for track=%{public}s", v302, 0x16u);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v220);
        uint64_t v86 = v221;
        ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v211, v220, v221);
        goto LABEL_408;
      }
    }
    else if (!*((unsigned char *)v273 + 71))
    {
      goto LABEL_191;
    }
LABEL_45:
    BOOL v219 = 0;
    uint64_t v24 = v233[5];
    if (*((char *)v273 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v218, (const std::string::value_type *)v273[6], v273[7]);
    }
    else {
      std::string v218 = *(std::string *)((unsigned char *)v273 + 2);
    }
    ML3ImportSession::_getAlbumArtistImportItemForGroupingIdentifierAndPIDs(buf, a1, v24, (uint64_t *)&v218, *(void *)(*a2 + 8), v9, &v219);
    uint64_t v25 = (std::__shared_weak_count *)v280[7];
    *((_OWORD *)v280 + 3) = *(_OWORD *)buf;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v218.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = v280;
    std::string v27 = (const void *)v280[6];
    if (!v27)
    {
      if (!*(void *)(*a2 + 8)) {
        goto LABEL_425;
      }
      std::string v35 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
        std::string::size_type v36 = *(void *)(*a2 + 8);
        std::string v37 = *(unsigned char **)buf;
        if (buf[23] >= 0) {
          std::string v37 = buf;
        }
        LODWORD(v298.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v298.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
        WORD2(v298.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v298.__r_.__value_.__r.__words[1] + 6) = v36;
        _os_log_impl(&dword_1B022D000, v35, OS_LOG_TYPE_ERROR, "Import item %{public}s has valid PID=%lld, but cannot be located in the database", (uint8_t *)&v298, 0x16u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      uint64_t v26 = v280;
      std::string v27 = (const void *)v280[6];
      if (!v27)
      {
LABEL_425:
        if ([v233[5] length])
        {
          uint64_t v38 = v9;
          if (!v9)
          {
            long long v39 = (std::__shared_weak_count *)a2[1];
            if (v39) {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v38 = [*(id *)(a1 + 120) nextPersistentID];
            unint64_t v40 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 134217984;
              *(void *)&uint8_t buf[4] = v38;
              _os_log_impl(&dword_1B022D000, v40, OS_LOG_TYPE_DEFAULT, "created new album artist pid %lld", buf, 0xCu);
            }

            if (v39) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
          }
          uint64_t v41 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a1, (uint64_t)&v259[2], (uint64_t)&v266[2]);
          uint64_t v43 = v42;
          uint64_t v44 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v45 = v211;
            if (v209) {
              unint64_t v45 = 0;
            }
            uint64_t v46 = v9;
            if (!v9) {
              uint64_t v46 = v255[3];
            }
            std::string v47 = (std::string::__raw *)&v266[2];
            if (SHIBYTE(v266[2].__r_.__value_.__r.__words[2]) < 0) {
              std::string v47 = (std::string::__raw *)v47->__words[0];
            }
            char v48 = (std::string::__raw *)&v259[2];
            if (SHIBYTE(v259[2].__r_.__value_.__r.__words[2]) < 0) {
              char v48 = (std::string::__raw *)v48->__words[0];
            }
            uint64_t v49 = v247[3];
            __int16 v50 = v273 + 6;
            if (*((char *)v273 + 71) < 0) {
              __int16 v50 = (void *)*v50;
            }
            *(_DWORD *)std::string buf = 134220034;
            *(void *)&uint8_t buf[4] = v38;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v45;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&uint8_t buf[24] = v46;
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = v47;
            *(_WORD *)&unsigned char buf[42] = 2082;
            *(void *)&buf[44] = v48;
            *(_WORD *)&buf[52] = 2048;
            *(void *)&buf[54] = v49;
            __int16 v290 = 2082;
            v291 = v50;
            __int16 v292 = 2048;
            uint64_t v293 = v43;
            __int16 v294 = 2048;
            uint64_t v295 = v41;
            _os_log_impl(&dword_1B022D000, v44, OS_LOG_TYPE_DEFAULT, "creating new album artist entry: pid=%lld, representative_item_pid=%lld, syncID=%lld, name='%{public}s', sortName='%{public}s', storeID=%lld, cloudLibraryID=%{public}s, order.section=%ld, order.sortOrder=%lld", buf, 0x5Cu);
          }
          uint64_t v201 = v43;
          uint64_t v204 = v41;

          unint64_t v199 = v38;
          std::string v51 = v266;
          char v52 = v259;
          std::string::size_type v53 = v247;
          __int16 v54 = v255;
          int v55 = v273;
          __int16 v56 = v243;
          char v57 = v239;
          std::string v58 = v251;
          std::string v59 = (std::__shared_weak_count *)operator new(0xD8uLL);
          v59->__shared_owners_ = 0;
          v59->__shared_weak_owners_ = 0;
          char v206 = v59;
          v59->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7528;
          if (SHIBYTE(v51[2].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf, v51[2].__r_.__value_.__l.__data_, v51[2].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)std::string buf = *(_OWORD *)&v51[2].__r_.__value_.__l.__data_;
            *(void *)&uint8_t buf[16] = *((void *)&v51[2].__r_.__value_.__l + 2);
          }
          if (SHIBYTE(v52[2].__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v298, v52[2].__r_.__value_.__l.__data_, v52[2].__r_.__value_.__l.__size_);
          }
          else {
            std::string v298 = v52[2];
          }
          memset(v302, 0, sizeof(v302));
          memset(&v288, 0, sizeof(v288));
          uint64_t v86 = v206;
          if (!v9) {
            uint64_t v9 = v54[3];
          }
          uint64_t v87 = v53[3];
          if (*((char *)v55 + 71) < 0) {
            std::string::__init_copy_ctor_external(&v287, (const std::string::value_type *)v55[6], v55[7]);
          }
          else {
            std::string v287 = *(std::string *)((unsigned char *)v55 + 2);
          }
          ML3ArtistData::ML3ArtistData((uint64_t)&v206[1], v199, (long long *)buf, (long long *)&v298, (long long *)v302, (long long *)&v288, v87, v60, v204, v201, 0, 0x7FFFFFFFFFFFFFFFLL, v9, (long long *)&v287, *((unsigned char *)v56 + 24), *((_DWORD *)v57 + 6), v58[3]);
          if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v287.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v298.__r_.__value_.__l.__data_);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          std::string::size_type v88 = v211;
          if (v209) {
            std::string::size_type v88 = 0;
          }
          v298.__r_.__value_.__r.__words[0] = v88;
          std::allocate_shared[abi:ne180100]<ML3AlbumArtistImportItem,std::allocator<ML3AlbumArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long,void>(buf, (uint64_t)&v206[1], v206, v233 + 5, (uint64_t *)&v298);
          long long v89 = *(_OWORD *)buf;
          uint64_t v90 = (std::__shared_weak_count *)v280[7];
          *((_OWORD *)v280 + 3) = *(_OWORD *)buf;
          if (v90)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            long long v89 = *((_OWORD *)v280 + 3);
          }
          *(void *)std::string buf = v199;
          *(_OWORD *)&uint8_t buf[8] = v89;
          if (*((void *)&v89 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>((uint64_t *)(a1 + 2040), v199, (uint64_t)buf);
          if (*(void *)&buf[16]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
          }
          ML3CPPStringFromData((NSData *)&v298, v233[5]);
          *(_OWORD *)std::string buf = *(_OWORD *)&v298.__r_.__value_.__l.__data_;
          std::string::size_type v91 = v298.__r_.__value_.__r.__words[2];
          memset(&v298, 0, sizeof(v298));
          *(void *)&uint8_t buf[16] = v91;
          *(void *)&uint8_t buf[24] = v206 + 1;
          *(void *)&buf[32] = v206;
          atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(a1 + 1128, buf, (uint64_t)buf);
          if (*(void *)&buf[32]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v298.__r_.__value_.__l.__data_);
          }
          if (*((char *)v273 + 71) < 0)
          {
            if (v273[7])
            {
              std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v273[6], v273[7]);
              goto LABEL_177;
            }
          }
          else if (*((unsigned char *)v273 + 71))
          {
            *(_OWORD *)std::string buf = *((_OWORD *)v273 + 3);
            *(void *)&uint8_t buf[16] = v273[8];
LABEL_177:
            *(void *)&uint8_t buf[24] = v206 + 1;
            *(void *)&buf[32] = v206;
            atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(a1 + 1288, buf, (uint64_t)buf);
            if (*(void *)&buf[32]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
          ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v211, (uint64_t)&v206[1], v206);
          std::__shared_weak_count::__release_shared[abi:ne180100](v206);
          *(void *)(*a2 + _Block_object_dispose(&STACK[0x210], 8) = v199;
LABEL_409:
          std::__shared_weak_count::__release_shared[abi:ne180100](v86);
          goto LABEL_410;
        }
        uint64_t v84 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
          unint64_t v85 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
          LODWORD(v298.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v298.__r_.__value_.__r.__words + 4) = (std::string::size_type)v85;
          _os_log_impl(&dword_1B022D000, v84, OS_LOG_TYPE_ERROR, "Album artist=%{public}s has an empty grouping key and no syncID. Creating a default album artist import item", (uint8_t *)&v298, 0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v213);
        uint64_t v86 = v214;
        ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v211, v213, v214);
LABEL_408:
        if (!v86) {
          goto LABEL_410;
        }
        goto LABEL_409;
      }
    }
    std::string v29 = v28;
    if (v28 && (uint64_t v30 = v26[7]) != 0)
    {
      unint64_t v205 = (std::__shared_weak_count *)v26[7];
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      unint64_t v205 = 0;
    }
    unint64_t v31 = v28[1];
    unint64_t v217 = v31;
    BOOL v32 = 1;
    unint64_t v210 = v31;
    if (!v219)
    {
      uint64_t v33 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 2040), v31);
      unint64_t v31 = v210;
      BOOL v32 = v33 != 0;
      BOOL v219 = v33 != 0;
    }
    BOOL v203 = v32;
    uint64_t v34 = *a2;
    *(void *)(v34 + _Block_object_dispose(&STACK[0x210], 8) = v31;
    *(unsigned char *)(v34 + 16) = 1;
    (*(void (**)(unsigned char *__return_ptr, void *, uint64_t))(*v29 + 24))(buf, v29, 301989899);
    if ((buf[39] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
      *(void *)std::string buf = &unk_1F08C3230;
      if ((buf[39] & 0x80000000) != 0) {
        operator delete(*(void **)&buf[16]);
      }
    }
    else
    {
      std::string v288 = *(std::string *)&buf[16];
    }
    if (MSVDeviceIsWatch() && *(_DWORD *)(a1 + 32) == 1)
    {
      uint64_t v61 = *((unsigned __int8 *)v273 + 71);
      uint64_t v62 = v273[7];
      if ((v61 & 0x80u) == 0) {
        uint64_t v63 = *((unsigned __int8 *)v273 + 71);
      }
      else {
        uint64_t v63 = v273[7];
      }
      std::string::size_type size = HIBYTE(v288.__r_.__value_.__r.__words[2]);
      if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v288.__r_.__value_.__l.__size_;
      }
      if (v63 == size)
      {
        std::string v65 = (const void **)(v273 + 6);
        if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v66 = &v288;
        }
        else {
          std::string v66 = (std::string *)v288.__r_.__value_.__r.__words[0];
        }
        if ((v61 & 0x80) == 0)
        {
          if (*((unsigned char *)v273 + 71))
          {
            while (*(unsigned __int8 *)v65 == v66->__r_.__value_.__s.__data_[0])
            {
              int v67 = 0;
              std::string v65 = (const void **)((char *)v65 + 1);
              std::string v66 = (std::string *)((char *)v66 + 1);
              if (!--v61) {
                goto LABEL_232;
              }
            }
            goto LABEL_183;
          }
          goto LABEL_115;
        }
        int v92 = memcmp(*v65, v66, v273[7]);
        uint64_t v63 = v62;
        if (!v92) {
          goto LABEL_115;
        }
      }
LABEL_183:
      if (!v63)
      {
        unint64_t v93 = (void *)(a1 + 1288);
        std::string::size_type v94 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a1 + 1288), (unsigned __int8 *)&v288);
        if (v94)
        {
          int8x8_t v95 = *(int8x8_t *)(a1 + 1296);
          unint64_t v96 = *((void *)v94 + 1);
          uint8x8_t v97 = (uint8x8_t)vcnt_s8(v95);
          v97.i16[0] = vaddlv_u8(v97);
          if (v97.u32[0] > 1uLL)
          {
            if (v96 >= *(void *)&v95) {
              v96 %= *(void *)&v95;
            }
          }
          else
          {
            v96 &= *(void *)&v95 - 1;
          }
          std::string::size_type v102 = *(unsigned __int8 **)(*v93 + 8 * v96);
          do
          {
            uint64_t v103 = v102;
            std::string::size_type v102 = *(unsigned __int8 **)v102;
          }
          while (v102 != v94);
          if (v103 == (unsigned __int8 *)(a1 + 1304)) {
            goto LABEL_215;
          }
          unint64_t v104 = *((void *)v103 + 1);
          if (v97.u32[0] > 1uLL)
          {
            if (v104 >= *(void *)&v95) {
              v104 %= *(void *)&v95;
            }
          }
          else
          {
            v104 &= *(void *)&v95 - 1;
          }
          if (v104 != v96)
          {
LABEL_215:
            if (!*(void *)v94) {
              goto LABEL_216;
            }
            unint64_t v105 = *(void *)(*(void *)v94 + 8);
            if (v97.u32[0] > 1uLL)
            {
              if (v105 >= *(void *)&v95) {
                v105 %= *(void *)&v95;
              }
            }
            else
            {
              v105 &= *(void *)&v95 - 1;
            }
            if (v105 != v96) {
LABEL_216:
            }
              *(void *)(*v93 + 8 * v96) = 0;
          }
          uint64_t v106 = *(void *)v94;
          if (*(void *)v94)
          {
            unint64_t v107 = *(void *)(v106 + 8);
            if (v97.u32[0] > 1uLL)
            {
              if (v107 >= *(void *)&v95) {
                v107 %= *(void *)&v95;
              }
            }
            else
            {
              v107 &= *(void *)&v95 - 1;
            }
            if (v107 != v96)
            {
              *(void *)(*v93 + 8 * v107) = v103;
              uint64_t v106 = *(void *)v94;
            }
          }
          *(void *)uint64_t v103 = v106;
          *(void *)std::string::size_type v94 = 0;
          --*(void *)(a1 + 1312);
          *(void *)std::string buf = v94;
          *(void *)&uint8_t buf[8] = a1 + 1304;
          uint8_t buf[16] = 1;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
        }
      }
      std::string v69 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_231;
      }
      std::string v70 = v273 + 6;
      if (*((char *)v273 + 71) < 0) {
        std::string v70 = (void *)*v70;
      }
      std::string v71 = &v288;
      if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v71 = (std::string *)v288.__r_.__value_.__r.__words[0];
      }
      goto LABEL_230;
    }
    if (*((char *)v273 + 71) < 0)
    {
      if (!v273[7]) {
        goto LABEL_115;
      }
    }
    else if (!*((unsigned char *)v273 + 71))
    {
      goto LABEL_115;
    }
    std::string::size_type v68 = HIBYTE(v288.__r_.__value_.__r.__words[2]);
    if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v68 = v288.__r_.__value_.__l.__size_;
    }
    if (!v68)
    {
      std::string v69 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
LABEL_231:

        std::string::operator=((std::string *)(v29[8] + 152), (const std::string *)v273 + 2);
        int v67 = 1;
LABEL_232:
        uint64_t v108 = (*(uint64_t (**)(void *, uint64_t))(*v29 + 32))(v29, 301989893);
        uint64_t v109 = v108;
        uint64_t v110 = v247[3];
        if (v110) {
          BOOL v111 = v110 == v108;
        }
        else {
          BOOL v111 = 1;
        }
        int v202 = v67;
        if (!v111)
        {
          unint64_t v112 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v113 = v247[3];
            *(_DWORD *)std::string buf = 134218240;
            *(void *)&uint8_t buf[4] = v113;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v109;
            _os_log_impl(&dword_1B022D000, v112, OS_LOG_TYPE_DEFAULT, "Setting albumArtistStoreID=%lld (oldValue = %lld)", buf, 0x16u);
          }

          *(void *)(v29[8] + 104) = v247[3];
          int v67 = 1;
        }
        uint64_t v114 = (*(uint64_t (**)(void *, uint64_t))(*v29 + 32))(v29, 301989898);
        uint64_t v115 = v114;
        uint64_t v116 = v255[3];
        if (v116) {
          BOOL v117 = v116 == v114;
        }
        else {
          BOOL v117 = 1;
        }
        if (!v117)
        {
          uint64_t v118 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v119 = v255[3];
            *(_DWORD *)std::string buf = 134218240;
            *(void *)&uint8_t buf[4] = v119;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v115;
            _os_log_impl(&dword_1B022D000, v118, OS_LOG_TYPE_DEFAULT, "Setting albumArtistSyncID=%lld (oldValue = %lld) using property MLImportPropertyKeyAlbumArtistSyncID", buf, 0x16u);
          }

          *(void *)(v29[8] + 144) = v255[3];
          int v67 = 1;
        }
        uint64_t v120 = (*(uint64_t (**)(void *, uint64_t))(*v29 + 32))(v29, 167772177);
        if (v9)
        {
          uint64_t v121 = v120;
          if (v9 != v120)
          {
            std::string::size_type v122 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 134218240;
              *(void *)&uint8_t buf[4] = v9;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v121;
              _os_log_impl(&dword_1B022D000, v122, OS_LOG_TYPE_DEFAULT, "Setting albumArtistSyncID=%lld (oldValue = %lld) using property MLImportPropertyKeyAlbumArtistSyncId", buf, 0x16u);
            }

            *(void *)(v29[8] + 144) = v9;
            int v67 = 1;
          }
        }
        (*(void (**)(unsigned char *__return_ptr, void *, uint64_t))(*v29 + 24))(buf, v29, 301989889);
        if ((buf[39] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v287, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
          *(void *)std::string buf = &unk_1F08C3230;
          if ((buf[39] & 0x80000000) != 0) {
            operator delete(*(void **)&buf[16]);
          }
        }
        else
        {
          std::string v287 = *(std::string *)&buf[16];
        }
        uint64_t v123 = HIBYTE(v266[2].__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v266[2].__r_.__value_.__r.__words[2]) < 0)
        {
          if (!v266[2].__r_.__value_.__l.__size_) {
            goto LABEL_281;
          }
        }
        else if (!*((unsigned char *)&v266[2].__r_.__value_.__s + 23))
        {
          goto LABEL_281;
        }
        if ((v123 & 0x80u) == 0) {
          std::string::size_type v124 = HIBYTE(v266[2].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v124 = v266[2].__r_.__value_.__l.__size_;
        }
        std::string::size_type v125 = HIBYTE(v287.__r_.__value_.__r.__words[2]);
        if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v125 = v287.__r_.__value_.__l.__size_;
        }
        if (v124 == v125)
        {
          p_data = (const void **)&v266[2].__r_.__value_.__l.__data_;
          if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v127 = &v287;
          }
          else {
            uint64_t v127 = (std::string *)v287.__r_.__value_.__r.__words[0];
          }
          if ((v123 & 0x80) != 0)
          {
            if (!memcmp(*p_data, v127, v266[2].__r_.__value_.__l.__size_)) {
              goto LABEL_281;
            }
          }
          else
          {
            if (!*((unsigned char *)&v266[2].__r_.__value_.__s + 23)) {
              goto LABEL_281;
            }
            while (*(unsigned __int8 *)p_data == v127->__r_.__value_.__s.__data_[0])
            {
              p_data = (const void **)((char *)p_data + 1);
              uint64_t v127 = (std::string *)((char *)v127 + 1);
              if (!--v123) {
                goto LABEL_281;
              }
            }
          }
        }
        BOOL v128 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v129 = (std::string::__raw *)&v266[2];
          if (SHIBYTE(v266[2].__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v129 = (std::string::__raw *)v129->__words[0];
          }
          id v130 = &v287;
          if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            id v130 = (std::string *)v287.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v129;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v130;
          _os_log_impl(&dword_1B022D000, v128, OS_LOG_TYPE_DEFAULT, "Setting albumArtistName=%{public}s (oldValue = %{public}s)", buf, 0x16u);
        }

        std::string::operator=((std::string *)(v29[8] + 8), v266 + 2);
        int v67 = 1;
LABEL_281:
        (*(void (**)(unsigned char *__return_ptr, void *, uint64_t))(*v29 + 24))(buf, v29, 301989890);
        if ((buf[39] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v216, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
          *(void *)std::string buf = &unk_1F08C3230;
          if ((buf[39] & 0x80000000) != 0) {
            operator delete(*(void **)&buf[16]);
          }
        }
        else
        {
          std::string v216 = *(std::string *)&buf[16];
        }
        if (*a2 && !*a4)
        {
          uint64_t v136 = *(int *)(a1 + 32);
          uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(18, 301989890);
          if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
            dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
          }
          int v138 = *(_DWORD *)(__albumArtistRules + 56 * PropertyIndex + 4 * v136);
          memset(buf, 0, 56);
          *(void *)v302 = 0;
          *(void *)&v302[8] = v302;
          *(void *)&v302[16] = 0x2020000000;
          uint64_t v303 = buf;
          uint64_t v139 = ML3TrackRulesGetPropertyIndex(18, 301989890);
          int v200 = v138;
          uint64_t v140 = *(unsigned int *)(a1 + 32);
          if ((int)v140 >= 1)
          {
            char shouldPreserveTrackProperty = 0;
            uint64_t v141 = _ML3InitializeTrackRulesIfNeeded___once;
            uint64_t v142 = (int)v140 - 1;
            uint64_t v143 = 56 * v139;
            for (uint64_t i = v140 + 1; i > 1; --i)
            {
              if (v141 != -1) {
                dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
              }
              if (*(_DWORD *)(__albumArtistRules + v143 + 4 * v142) == 1)
              {
                if (shouldPreserveTrackProperty)
                {
                  uint64_t v141 = -1;
                }
                else
                {
                  unsigned int v145 = [NSString stringWithFormat:@"SELECT cloud_universal_library_id, sync_id, store_id FROM album_artist WHERE album_artist_pid = %lld", v210];
                  uint64_t v146 = [*(id *)(a1 + 64) executeQuery:v145];
                  v298.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
                  v298.__r_.__value_.__l.__size_ = 3221225472;
                  v298.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession34_shouldPreserveAlbumArtistPropertyExj_block_invoke;
                  v299 = &unk_1E5FB77E0;
                  v300 = v302;
                  unint64_t v301 = v210;
                  [v146 enumerateRowsWithBlock:&v298];

                  uint64_t v141 = _ML3InitializeTrackRulesIfNeeded___once;
                }
                char shouldPreserveTrackProperty = 1;
                if (*(void *)&buf[8 * v142]) {
                  goto LABEL_309;
                }
              }
              else
              {
                uint64_t v141 = -1;
              }
              --v142;
            }
          }
          char shouldPreserveTrackProperty = 0;
LABEL_309:
          _Block_object_dispose(v302, 8);
          if (v200 == -1)
          {
LABEL_354:
            int v174 = (*(uint64_t (**)(void *, uint64_t))(*v29 + 32))(v29, 301989901) != 0;
            if (*((unsigned __int8 *)v243 + 24) != v174)
            {
              unsigned int v175 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
              {
                int v176 = *((unsigned __int8 *)v243 + 24);
                *(_DWORD *)std::string buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v176;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v174;
                _os_log_impl(&dword_1B022D000, v175, OS_LOG_TYPE_DEFAULT, "Setting albumArtistClassicalExperienceAvailable=%{BOOL}u (oldValue=%{BOOL}u)", buf, 0xEu);
              }

              *(unsigned char *)(v29[8] + 176) = *((unsigned char *)v243 + 24);
              int v67 = 1;
            }
            int v177 = (*(uint64_t (**)(void *, uint64_t))(*v29 + 32))(v29, 301989903);
            int v178 = v177;
            int v179 = *((_DWORD *)v239 + 6);
            if (v179) {
              BOOL v180 = v179 == v177;
            }
            else {
              BOOL v180 = 1;
            }
            if (!v180)
            {
              uint64_t v181 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
              {
                int v182 = *((_DWORD *)v239 + 6);
                *(_DWORD *)std::string buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v182;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v178;
                _os_log_impl(&dword_1B022D000, v181, OS_LOG_TYPE_DEFAULT, "Setting albumArtistLikedState=%d (oldValue=%d)", buf, 0xEu);
              }

              *(_DWORD *)(v29[8] + 18sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *((_DWORD *)v239 + 6);
              int v67 = 1;
            }
            uint64_t v183 = (*(uint64_t (**)(void *, uint64_t))(*v29 + 32))(v29, 301989904);
            uint64_t v184 = v183;
            uint64_t v185 = v251[3];
            if (v185) {
              BOOL v186 = v185 == v183;
            }
            else {
              BOOL v186 = 1;
            }
            if (!v186)
            {
              uint64_t v187 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v188 = v251[3];
                *(_DWORD *)std::string buf = 134218240;
                *(void *)&uint8_t buf[4] = v188;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v184;
                _os_log_impl(&dword_1B022D000, v187, OS_LOG_TYPE_DEFAULT, "Setting albumArtistLikedStateChangedDate=%lld (oldValue=%lld)", buf, 0x16u);
              }

              *(void *)(v29[8] + 184) = v251[3];
              int v67 = 1;
            }
            if (!v202) {
              goto LABEL_390;
            }
            uint64_t v189 = v273;
            int v190 = *((char *)v273 + 71);
            if (v190 < 0)
            {
              if (!v273[7])
              {
LABEL_390:
                if (v203) {
                  int v193 = 0;
                }
                else {
                  int v193 = v67;
                }
                if (v193 == 1)
                {
                  unint64_t v194 = v217;
                  uint64_t v196 = v280[6];
                  uint64_t v195 = v280[7];
                  *(void *)std::string buf = v217;
                  *(void *)&uint8_t buf[8] = v196;
                  *(void *)&uint8_t buf[16] = v195;
                  if (v195) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v195 + 8), 1uLL, memory_order_relaxed);
                  }
                  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>((uint64_t *)(a1 + 2040), v194, (uint64_t)buf);
                  if (*(void *)&buf[16]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
                  }
                }
                uint64_t v197 = v29[8];
                uint64_t v198 = (std::__shared_weak_count *)v29[9];
                if (v198) {
                  atomic_fetch_add_explicit(&v198->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v211, v197, v198);
                if (v198) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v198);
                }
                if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v216.__r_.__value_.__l.__data_);
                }
                uint64_t v86 = v205;
                if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v287.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v288.__r_.__value_.__l.__data_);
                }
                goto LABEL_408;
              }
            }
            else if (!*((unsigned char *)v273 + 71))
            {
              goto LABEL_390;
            }
            uint64_t v192 = v29[8];
            uint64_t v191 = (std::__shared_weak_count *)v29[9];
            if (v191)
            {
              atomic_fetch_add_explicit(&v191->__shared_owners_, 1uLL, memory_order_relaxed);
              LOBYTE(v19sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *((unsigned char *)v189 + 71);
            }
            if ((v190 & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v189[6], v189[7]);
            }
            else
            {
              *(_OWORD *)std::string buf = *((_OWORD *)v189 + 3);
              *(void *)&uint8_t buf[16] = v189[8];
            }
            *(void *)&uint8_t buf[24] = v192;
            *(void *)&buf[32] = v191;
            if (v191) {
              atomic_fetch_add_explicit(&v191->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(a1 + 1288, buf, (uint64_t)buf);
            if (*(void *)&buf[32]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v191) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v191);
            }
            goto LABEL_390;
          }
        }
        else
        {
          uint64_t v131 = *(int *)(a1 + 32);
          uint64_t v132 = ML3TrackRulesGetPropertyIndex(10, 167772169);
          if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
            dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
          }
          int v133 = *(_DWORD *)(__specialRules + 56 * v132 + 4 * v131);
          char v134 = (std::__shared_weak_count *)a4[1];
          v215[0] = *a4;
          v215[1] = v134;
          if (v134) {
            atomic_fetch_add_explicit(&v134->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)v215, 0xA000009u);
          if (v134) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v134);
          }
          if (v133 == -1) {
            goto LABEL_354;
          }
        }
        std::string::size_type v147 = HIBYTE(v259[2].__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v259[2].__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v148 = v259[2].__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v148 = HIBYTE(v259[2].__r_.__value_.__r.__words[2]);
        }
        uint64_t v149 = (const void **)&v259[2].__r_.__value_.__l.__data_;
        if (v148)
        {
          std::string::size_type v150 = v259[2].__r_.__value_.__l.__size_;
          if ((v147 & 0x80u) == 0) {
            std::string::size_type v151 = HIBYTE(v259[2].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v151 = v259[2].__r_.__value_.__l.__size_;
          }
          std::string::size_type v152 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
          char v153 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
          std::string::size_type v154 = v216.__r_.__value_.__l.__size_;
          if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v155 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v155 = v216.__r_.__value_.__l.__size_;
          }
          if (v151 != v155) {
            goto LABEL_332;
          }
          if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v156 = &v216;
          }
          else {
            unint64_t v156 = (std::string *)v216.__r_.__value_.__r.__words[0];
          }
          if ((v147 & 0x80) == 0)
          {
            if (*((unsigned char *)&v259[2].__r_.__value_.__s + 23))
            {
              unint64_t v157 = v259 + 2;
              uint64_t v158 = HIBYTE(v259[2].__r_.__value_.__r.__words[2]);
              while (v157->__r_.__value_.__s.__data_[0] == v156->__r_.__value_.__s.__data_[0])
              {
                unint64_t v157 = (const std::string *)((char *)v157 + 1);
                unint64_t v156 = (std::string *)((char *)v156 + 1);
                if (!--v158) {
                  goto LABEL_329;
                }
              }
LABEL_332:
              if (shouldPreserveTrackProperty) {
                goto LABEL_354;
              }
LABEL_343:
              uint64_t v162 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a1, (uint64_t)v149, (uint64_t)&v266[2]);
              uint64_t v164 = v163;
              std::string::operator=((std::string *)(v29[8] + 32), v259 + 2);
              uint64_t v165 = v29[8];
              *(void *)(v165 + 112) = v162;
              *(void *)(v165 + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v164;
              uint64_t v166 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 1960), v210);
              if (v166)
              {
                unint64_t v167 = (void *)v166[3];
                uint64_t v168 = v166[4];
                if (v168 != v164 || v167 != (void *)v162)
                {
                  char v169 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 2000, v210, (uint64_t *)&v217);
                  v169[3] = v162;
                  v169[4] = v164;
                  int8x8_t v170 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1960, v210, (uint64_t *)&v217);
                  v170[3] = v162;
                  v170[4] = v164;
                  unint64_t v171 = os_log_create("com.apple.amp.medialibrary", "Import");
                  if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
                  {
                    uint8x8_t v172 = (std::string::__raw *)&v259[2];
                    if (SHIBYTE(v259[2].__r_.__value_.__r.__words[2]) < 0) {
                      uint8x8_t v172 = (std::string::__raw *)v172->__words[0];
                    }
                    char v173 = &v216;
                    if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      char v173 = (std::string *)v216.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)std::string buf = 134219522;
                    *(void *)&uint8_t buf[4] = v210;
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v172;
                    *(_WORD *)&buf[22] = 2082;
                    *(void *)&uint8_t buf[24] = v173;
                    *(_WORD *)&buf[32] = 2048;
                    *(void *)&buf[34] = v164;
                    *(_WORD *)&unsigned char buf[42] = 2048;
                    *(void *)&buf[44] = v162;
                    *(_WORD *)&buf[52] = 2048;
                    *(void *)&buf[54] = v168;
                    __int16 v290 = 2048;
                    v291 = v167;
                    _os_log_impl(&dword_1B022D000, v171, OS_LOG_TYPE_DEFAULT, "Will update sort order for tracks with album_artist_pid=%lld with sortName=%{public}s, (oldValue=%{public}s, order.section=%ld, order.sortOrder=%lld (oldValue section=%ld, sortOrder=%lld)", buf, 0x48u);
                  }
                }
              }
              int v67 = 1;
              goto LABEL_354;
            }
LABEL_336:
            if (v153 >= 0) {
              std::string::size_type v160 = v152;
            }
            else {
              std::string::size_type v160 = v154;
            }
            if (v160) {
              char v161 = shouldPreserveTrackProperty;
            }
            else {
              char v161 = 1;
            }
            if (v161) {
              goto LABEL_354;
            }
            goto LABEL_343;
          }
          int v159 = memcmp(*v149, v156, v259[2].__r_.__value_.__l.__size_);
          std::string::size_type v147 = v150;
          if (v159) {
            goto LABEL_332;
          }
        }
        else
        {
LABEL_329:
          if ((v147 & 0x80) != 0) {
            std::string::size_type v147 = v259[2].__r_.__value_.__l.__size_;
          }
        }
        if (v147) {
          goto LABEL_354;
        }
        std::string::size_type v152 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
        std::string::size_type v154 = v216.__r_.__value_.__l.__size_;
        char v153 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
        goto LABEL_336;
      }
      std::string v70 = v273 + 6;
      if (*((char *)v273 + 71) < 0) {
        std::string v70 = (void *)*v70;
      }
      std::string v71 = &v288;
      if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v71 = (std::string *)v288.__r_.__value_.__r.__words[0];
      }
LABEL_230:
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v70;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v71;
      _os_log_impl(&dword_1B022D000, v69, OS_LOG_TYPE_DEFAULT, "Setting albumArtistCloudLibraryID=%{public}s (oldValue = %{public}s)", buf, 0x16u);
      goto LABEL_231;
    }
LABEL_115:
    int v67 = 0;
    goto LABEL_232;
  }
  std::string v13 = *(void **)(a1 + 16);
  uint64_t v14 = [NSNumber numberWithLongLong:v211];
  int v297 = v14;
  std::string v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v297 count:1];
  uint64_t v16 = [v13 executeQuery:@"SELECT album_artist_pid FROM item WHERE ROWID = ?" withParameters:v15];

  uint64_t v17 = [v16 int64ValueForFirstRowAndColumn];
  if (!*(unsigned char *)(*a4 + 16))
  {
LABEL_41:

    goto LABEL_42;
  }
  uint64_t v18 = v17;
  long long v19 = (std::__shared_weak_count *)a4[1];
  v231[0] = *a4;
  v231[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v20 = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)v231, 0x100000Cu);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    int v21 = 0;
  }
  else {
    int v21 = v20;
  }
  if (v21 != 1)
  {
    if (!*(unsigned char *)(*a4 + 17))
    {
      uint64_t v72 = *a2;
      *(void *)(v72 + _Block_object_dispose(&STACK[0x210], 8) = v18;
      *(unsigned char *)(v72 + 16) = 1;
      uint64_t v73 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v74 = *(void *)(*a4 + 8);
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v74;
        _os_log_impl(&dword_1B022D000, v73, OS_LOG_TYPE_DEFAULT, "Setting albumArtistPID=%lld for trackPID=%lld", buf, 0x16u);
      }

      if (v18)
      {
        std::string v75 = *(void **)(a1 + 16);
        std::string v76 = [NSNumber numberWithLongLong:v18];
        unint64_t v296 = v76;
        unint64_t v77 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v296 count:1];
        std::string v78 = [v75 executeQuery:@"SELECT album_artist, sort_album_artist, representative_item_pid, store_id, grouping_key, sync_id, classical_experience_available, cloud_universal_library_id, liked_state, liked_state_changed_date FROM album_artist WHERE album_artist_pid=?", v77 withParameters];
        std::string v79 = v78;
        v222[0] = MEMORY[0x1E4F143A8];
        v222[1] = 3321888768;
        v222[2] = ___ZN16ML3ImportSession15_addAlbumArtistENSt3__110shared_ptrI13ML3ImportItemEEP6NSDataS3__block_invoke;
        v222[3] = &unk_1F08C87F0;
        uint64_t v81 = *a2;
        uint64_t v80 = (std::__shared_weak_count *)a2[1];
        v222[14] = a1;
        v222[15] = v81;
        unint64_t v223 = v80;
        if (v80) {
          atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v222[4] = &v265;
        v222[5] = &v258;
        v222[6] = &v272;
        v222[7] = &v250;
        v222[8] = &v238;
        v222[9] = &v242;
        v222[10] = &v246;
        v222[11] = &v254;
        int v228 = 16777228;
        uint64_t v83 = *a4;
        uint64_t v82 = (std::__shared_weak_count *)a4[1];
        v222[12] = &v232;
        uint64_t v224 = v83;
        v225 = v82;
        if (v82) {
          atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v222[13] = &v279;
        uint64_t v226 = v18;
        unint64_t v227 = v211;
        [v78 enumerateRowsWithBlock:v222];

        if (v225) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v225);
        }
        if (v223) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v223);
        }
      }
      else
      {
        std::string::size_type v98 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 134217984;
          *(void *)&uint8_t buf[4] = v211;
          _os_log_impl(&dword_1B022D000, v98, OS_LOG_TYPE_ERROR, "No existing albumArtist PID for trackPersistentID=%lld", buf, 0xCu);
        }
      }
    }
    goto LABEL_41;
  }
  long long v22 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_DEFAULT, "Not updating/creating album artist as pid=0 AND persistentID is preserved by a higher source", buf, 2u);
  }

  ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v229);
  std::string::size_type v23 = v230;
  ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v211, v229, v230);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }

LABEL_410:
  _Block_object_dispose(&v232, 8);

  _Block_object_dispose(&v238, 8);
  _Block_object_dispose(&v242, 8);
  _Block_object_dispose(&v246, 8);
  _Block_object_dispose(&v250, 8);
  _Block_object_dispose(&v254, 8);
  _Block_object_dispose(&v258, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v265, 8);
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v271.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v272, 8);
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v278.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v279, 8);
  if (v286) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v286);
  }
}

void sub_1B0451470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }

  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x288], 8);
  _Block_object_dispose(&STACK[0x2A8], 8);
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  _Block_object_dispose(&STACK[0x2F0], 8);
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  _Block_object_dispose(&STACK[0x338], 8);
  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }
  _Block_object_dispose(&STACK[0x380], 8);
  if (STACK[0x3B8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3B8]);
  }

  _Unwind_Resume(a1);
}

void ML3ImportSession::_getDefaultEmptyArtist(ML3ImportSession *this)
{
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ML3ArtistData>::~shared_ptr[abi:ne180100], &ML3ImportSession::_getDefaultEmptyArtist(void)::__emptyArtistData, &dword_1B022D000);
  }
  if (ML3ImportSession::_getDefaultEmptyArtist(void)::onceToken != -1) {
    dispatch_once(&ML3ImportSession::_getDefaultEmptyArtist(void)::onceToken, &__block_literal_global_607);
  }
  uint64_t v2 = qword_1E9B32110;
  *(void *)this = ML3ImportSession::_getDefaultEmptyArtist(void)::__emptyArtistData;
  *((void *)this + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

void ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(uint64_t a1, unint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t v16 = a2;
  if (a2)
  {
    uint64_t v7 = a1 + 336;
    uint64_t v8 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 336), a2);
    if (v8)
    {
      if (a4) {
        atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)v8[6];
      v8[5] = a3;
      v8[6] = a4;
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    else
    {
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      if (a4) {
        atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v12 = a3;
      *((void *)&v12 + 1) = a4;
      unint64_t v10 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v7, a2, &v16);
      ML3CollectionInfoSet::operator=(v10 + 3, (uint64_t *)&v11);
      if (a4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a4);
      }
    }
  }
}

void sub_1B0451B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN16ML3ImportSession15_addAlbumArtistENSt3__110shared_ptrI13ML3ImportItemEEP6NSDataS3__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v46 = a3;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = [v5 stringForColumnIndex:0];
  id v52 = [v5 stringForColumnIndex:1];
  uint64_t v8 = [v5 int64ForColumnIndex:2];
  uint64_t v58 = v8;
  uint64_t v50 = [v5 int64ForColumnIndex:3];
  std::string v51 = [v5 dataForColumnIndex:4];
  char v57 = v51;
  uint64_t v49 = [v5 int64ForColumnIndex:5];
  int v9 = [v5 intForColumnIndex:6];
  unint64_t v10 = [v5 stringForColumnIndex:7];
  int v48 = [v5 intForColumnIndex:8];
  uint64_t v47 = [v5 int64ForColumnIndex:9];
  char v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 56))(*(void *)(a1 + 120), 301989889);
  if (v7) {
    char v12 = v11;
  }
  else {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v66, (char *)[v7 UTF8String]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v14 = (void **)(v13 + 48);
    if (*(char *)(v13 + 71) < 0) {
      operator delete(*v14);
    }
    *(std::string *)long long v14 = v66;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 56))(*(void *)(a1 + 120), 301989890) & 1) == 0&& [v52 length])
  {
    std::string::basic_string[abi:ne180100]<0>(&v66, (char *)[v52 UTF8String]);
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
    unint64_t v16 = (void **)(v15 + 48);
    if (*(char *)(v15 + 71) < 0) {
      operator delete(*v16);
    }
    *(std::string *)unint64_t v16 = v66;
  }
  char v17 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 56))(*(void *)(a1 + 120), 301989899);
  if (v10) {
    char v18 = v17;
  }
  else {
    char v18 = 1;
  }
  if ((v18 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v66, (char *)[v10 UTF8String]);
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
    int v20 = (void **)(v19 + 48);
    if (*(char *)(v19 + 71) < 0) {
      operator delete(*v20);
    }
    *(std::string *)int v20 = v66;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 56))(*(void *)(a1 + 120), 301989904) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v47; {
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 56))(*(void *)(a1 + 120), 301989903) & 1) == 0)*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v48;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 56))(*(void *)(a1 + 120), 301989901) & 1) == 0)*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v9 != 0; {
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 56))(*(void *)(a1 + 120), 301989893) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v50;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 56))(*(void *)(a1 + 120), 301989898) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = v49; {
  int v21 = *(void **)(v6 + 8);
  }
  long long v22 = ML3CPPBridgeString((const UInt8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), 0);
  uint64_t v23 = [v21 groupingKeyForString:v22];
  uint64_t v24 = *(void *)(*(void *)(a1 + 96) + 8);
  uint64_t v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v23;

  unsigned int v26 = *(_DWORD *)(a1 + 168);
  uint64_t v27 = *(int *)(v6 + 32);
  LODWORD(v22) = HIBYTE(v26);
  uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(v26), v26);
  if (*(_DWORD *)(ML3TrackRulesGetRule((int)v22, PropertyIndex) + 4 * v27) == -1
    || ([*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) isEqualToData:v51] & 1) != 0)
  {
    goto LABEL_36;
  }
  std::string v29 = *(std::__shared_weak_count **)(a1 + 144);
  v56[0] = *(void *)(a1 + 136);
  v56[1] = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v6, (uint64_t)v56, *(_DWORD *)(a1 + 168));
  char v31 = shouldPreserveTrackProperty;
  if (!v29)
  {
    if (!shouldPreserveTrackProperty) {
      goto LABEL_69;
    }
LABEL_36:
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(&v55, (char *)[v7 UTF8String]);
    }
    else {
      memset(&v55, 0, sizeof(v55));
    }
    if (v52)
    {
      std::string::basic_string[abi:ne180100]<0>(&v54, (char *)[v52 UTF8String]);
      if (v10)
      {
LABEL_41:
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v10 UTF8String]);
LABEL_44:
        uint64_t v32 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v6, (uint64_t)&v54, (uint64_t)&v55);
        uint64_t v34 = v33;
        std::string::size_type v36 = (std::__shared_weak_count *)operator new(0xD8uLL);
        v36->__shared_owners_ = 0;
        v36->__shared_weak_owners_ = 0;
        v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7528;
        uint64_t v37 = *(void *)(a1 + 152);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v66, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
        }
        else {
          std::string v66 = v55;
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v64, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
        }
        else {
          std::string v64 = v54;
        }
        long long v62 = 0uLL;
        uint64_t v63 = 0;
        uint64_t v61 = 0;
        long long v60 = 0uLL;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v59, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v59 = __p;
        }
        ML3ArtistData::ML3ArtistData((uint64_t)&v36[1], v37, (long long *)&v66, (long long *)&v64, &v62, &v60, v50, v35, v32, v34, 0, 0x7FFFFFFFFFFFFFFFLL, v49, (long long *)&v59, v9 != 0, v48, v47);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        std::allocate_shared[abi:ne180100]<ML3AlbumArtistImportItem,std::allocator<ML3AlbumArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long,void>(&v66, (uint64_t)&v36[1], v36, &v57, &v58);
        uint64_t v38 = *(void *)(*(void *)(a1 + 104) + 8);
        long long v39 = *(std::__shared_weak_count **)(v38 + 56);
        *(_OWORD *)(v38 + 4_Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        goto LABEL_67;
      }
    }
    else
    {
      memset(&v54, 0, sizeof(v54));
      if (v10) {
        goto LABEL_41;
      }
    }
    memset(&__p, 0, sizeof(__p));
    goto LABEL_44;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  if (v31) {
    goto LABEL_36;
  }
LABEL_69:
  if (v8 == *(void *)(a1 + 160))
  {
    unint64_t v40 = *(void **)(v6 + 16);
    uint64_t v41 = [NSNumber numberWithLongLong:*(void *)(a1 + 152)];
    std::string v65 = v41;
    uint64_t v42 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v65 count:1];
    [v40 executeUpdate:@"UPDATE album_artist SET representative_item_pid=0 WHERE album_artist_pid=?" withParameters:v42 error:0];

    *(void *)(*(void *)(a1 + 120) + _Block_object_dispose(&STACK[0x210], 8) = 0;
    uint64_t v43 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v45 = *(void *)(a1 + 152);
      std::string::size_type v44 = *(void *)(a1 + 160);
      LODWORD(v66.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = v44;
      WORD2(v66.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 6) = v45;
      _os_log_impl(&dword_1B022D000, v43, OS_LOG_TYPE_DEFAULT, "Removing trackPersistentID=%lld as the representative item for albumArtistPersistentID=%lld as the groupingKey has changed/can no longer be applied", (uint8_t *)&v66, 0x16u);
    }
  }
LABEL_67:
}

void sub_1B0452394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  _Unwind_Resume(a1);
}

void ML3ImportSession::_getAlbumArtistImportItemForGroupingIdentifierAndPIDs(void *a1, uint64_t a2, void *a3, uint64_t *a4, unint64_t a5, unint64_t a6, unsigned char *a7)
{
  v71[2] = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  *a7 = 0;
  id v46 = v13;
  if ([v13 length]
    || (*((char *)a4 + 23) < 0 ? (uint64_t v14 = a4[1]) : (uint64_t v14 = *((unsigned __int8 *)a4 + 23)), v14 | a5 | a6))
  {
    *(void *)std::string buf = 0;
    char v57 = buf;
    uint64_t v58 = 0x4012000000;
    std::string v59 = __Block_byref_object_copy__459;
    long long v60 = __Block_byref_object_dispose__460;
    uint64_t v61 = "";
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    if (a5)
    {
      uint64_t v15 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a2 + 2040), a5);
      if (v15)
      {
        *a7 = 1;
        uint64_t v17 = v15[3];
        unint64_t v16 = (std::__shared_weak_count *)v15[4];
        if (!v16)
        {
          uint64_t v62 = v15[3];
          uint64_t v63 = 0;
          goto LABEL_33;
        }
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        char v18 = v63;
        uint64_t v62 = v17;
        uint64_t v63 = v16;
        if (!v18)
        {
LABEL_33:
          uint64_t v31 = *((void *)v57 + 7);
          *a1 = *((void *)v57 + 6);
          a1[1] = v31;
          if (v31) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
          }
LABEL_75:
          _Block_object_dispose(buf, 8);
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          goto LABEL_77;
        }
LABEL_32:
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        goto LABEL_33;
      }
      uint64_t v23 = (char *)a4 + 23;
      if (*((char *)a4 + 23) < 0) {
        uint64_t v24 = a4[1];
      }
      else {
        uint64_t v24 = *((unsigned __int8 *)a4 + 23);
      }
      if (v24)
      {
        objc_msgSend(@"SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE ", "stringByAppendingString:", @"(ROWID=? OR cloud_universal_library_id=?)");
        uint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
        uint64_t v33 = [NSNumber numberWithLongLong:a5];
        v71[0] = v33;
        uint64_t v34 = a4;
        if (*v23 < 0) {
          uint64_t v34 = (uint64_t *)*a4;
        }
        uint64_t v35 = [NSString stringWithUTF8String:v34];
        v71[1] = v35;
        std::string::size_type v45 = [MEMORY[0x1E4F1C978] arrayWithObjects:v71 count:2];
        goto LABEL_65;
      }
      objc_msgSend(@"SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE ", "stringByAppendingString:", @"ROWID=?");
      uint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
      uint64_t v33 = [NSNumber numberWithLongLong:a5];
      std::string v70 = v33;
      std::string::size_type v45 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v70 count:1];
LABEL_66:

      goto LABEL_67;
    }
    if (*((char *)a4 + 23) < 0)
    {
      if (a4[1])
      {
LABEL_13:
        uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a2 + 1288), (unsigned __int8 *)a4);
        if (!v19) {
          goto LABEL_47;
        }
        int v21 = (uint64_t *)*((void *)v19 + 5);
        int v20 = (std::__shared_weak_count *)*((void *)v19 + 6);
        if (v20) {
          goto LABEL_15;
        }
        goto LABEL_27;
      }
    }
    else if (*((unsigned char *)a4 + 23))
    {
      goto LABEL_13;
    }
    if (a6)
    {
      unsigned int v26 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a2 + 1048), a6);
      if (!v26) {
        goto LABEL_47;
      }
      int v21 = (uint64_t *)v26[3];
      int v20 = (std::__shared_weak_count *)v26[4];
      if (v20)
      {
LABEL_15:
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = *v21;
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v22) {
          goto LABEL_47;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (![v46 length]) {
        goto LABEL_47;
      }
      ML3CPPStringFromData((NSData *)__p, v46);
      std::string::size_type v36 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a2 + 1128), (unsigned __int8 *)__p);
      if (v55 < 0) {
        operator delete(__p[0]);
      }
      if (!v36) {
        goto LABEL_47;
      }
      int v21 = (uint64_t *)*((void *)v36 + 5);
      int v20 = (std::__shared_weak_count *)*((void *)v36 + 6);
      if (v20) {
        goto LABEL_15;
      }
    }
LABEL_27:
    if (!*v21) {
      goto LABEL_47;
    }
LABEL_28:
    uint64_t v27 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a2 + 2040), 0);
    if (v27)
    {
      *a7 = 1;
      std::string v28 = v57;
      uint64_t v30 = v27[3];
      uint64_t v29 = v27[4];
      if (v29) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
      }
      char v18 = (std::__shared_weak_count *)*((void *)v28 + 7);
      *((void *)v28 + 6) = v30;
      *((void *)v28 + 7) = v29;
      if (!v18) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
LABEL_47:
    uint64_t v23 = (char *)a4 + 23;
    if (*((char *)a4 + 23) < 0) {
      uint64_t v37 = a4[1];
    }
    else {
      uint64_t v37 = *((unsigned __int8 *)a4 + 23);
    }
    if (v37)
    {
      std::string::size_type v45 = [MEMORY[0x1E4F1CA48] array];
      objc_msgSend(@"SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE ", "stringByAppendingString:", @"cloud_universal_library_id=?");
      uint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
      uint64_t v38 = a4;
      if (*v23 < 0) {
        uint64_t v38 = (uint64_t *)*a4;
      }
      long long v39 = [NSString stringWithUTF8String:v38];
      [v45 addObject:v39];

      if (!a6)
      {
        if (![v46 length])
        {
LABEL_67:
          uint64_t v42 = objc_msgSend(*(id *)(a2 + 16), "executeQuery:withParameters:", v32, v45, v44);
          v47[0] = MEMORY[0x1E4F143A8];
          v47[1] = 3321888768;
          void v47[2] = ___ZN16ML3ImportSession53_getAlbumArtistImportItemForGroupingIdentifierAndPIDsEP6NSDataNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEExxRb_block_invoke;
          v47[3] = &unk_1F08C8938;
          uint64_t v49 = buf;
          uint64_t v50 = a2;
          id v48 = v46;
          unint64_t v51 = a5;
          if (*v23 < 0) {
            std::string::__init_copy_ctor_external(&v52, (const std::string::value_type *)*a4, a4[1]);
          }
          else {
            std::string v52 = *(std::string *)a4;
          }
          unint64_t v53 = a6;
          [v42 enumerateRowsWithBlock:v47];
          uint64_t v43 = *((void *)v57 + 7);
          *a1 = *((void *)v57 + 6);
          a1[1] = v43;
          if (v43) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v52.__r_.__value_.__l.__data_);
          }

          goto LABEL_75;
        }
        uint64_t v41 = [(__CFString *)v32 stringByAppendingString:@" OR (cloud_universal_library_id='' AND grouping_key=?)"];

        id v67 = v46;
        uint64_t v33 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v67 count:1];
        [v45 addObjectsFromArray:v33];
        uint64_t v32 = (__CFString *)v41;
        goto LABEL_66;
      }
      if ([v46 length])
      {
        uint64_t v44 = [(__CFString *)v32 stringByAppendingString:@" OR (cloud_universal_library_id='' AND (ROWID=? OR sync_id=?) OR grouping_key=?)"];

        uint64_t v33 = [NSNumber numberWithLongLong:a6];
        v69[0] = v33;
        uint64_t v35 = [NSNumber numberWithLongLong:a6];
        v69[1] = v35;
        void v69[2] = v46;
        [MEMORY[0x1E4F1C978] arrayWithObjects:v69 count:3];
      }
      else
      {
        uint64_t v44 = [(__CFString *)v32 stringByAppendingString:@" OR (cloud_universal_library_id='' AND (ROWID=? OR sync_id=?))"];

        uint64_t v33 = [NSNumber numberWithLongLong:a6];
        v68[0] = v33;
        uint64_t v35 = [NSNumber numberWithLongLong:a6];
        v68[1] = v35;
        [MEMORY[0x1E4F1C978] arrayWithObjects:v68 count:2];
      unint64_t v40 = };
      [v45 addObjectsFromArray:v40];
      uint64_t v32 = (__CFString *)v44;
    }
    else
    {
      std::string::size_type v45 = [MEMORY[0x1E4F1CA48] array];
      if (!a6)
      {
        if (![v46 length])
        {
          uint64_t v32 = @"SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE ";
          goto LABEL_67;
        }
        objc_msgSend(@"SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE ", "stringByAppendingString:", @"grouping_key=?");
        uint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
        id v64 = v46;
        uint64_t v33 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v64 count:1];
        [v45 addObjectsFromArray:v33];
        goto LABEL_66;
      }
      if ([v46 length])
      {
        objc_msgSend(@"SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE ", "stringByAppendingString:", @"(ROWID=? OR sync_id=?) OR grouping_key=?");
        uint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
        uint64_t v33 = [NSNumber numberWithLongLong:a6];
        v66[0] = v33;
        uint64_t v35 = [NSNumber numberWithLongLong:a6];
        v66[1] = v35;
        v66[2] = v46;
        [MEMORY[0x1E4F1C978] arrayWithObjects:v66 count:3];
      }
      else
      {
        objc_msgSend(@"SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE ", "stringByAppendingString:", @"(ROWID=? OR sync_id=?)");
        uint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
        uint64_t v33 = [NSNumber numberWithLongLong:a6];
        v65[0] = v33;
        uint64_t v35 = [NSNumber numberWithLongLong:a6];
        v65[1] = v35;
        [MEMORY[0x1E4F1C978] arrayWithObjects:v65 count:2];
      unint64_t v40 = };
      [v45 addObjectsFromArray:v40];
    }

LABEL_65:
    goto LABEL_66;
  }
  uint64_t v25 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1B022D000, v25, OS_LOG_TYPE_DEFAULT, "Invalid parameters to find album artist", buf, 2u);
  }

  *a1 = 0;
  a1[1] = 0;
LABEL_77:
}

void sub_1B0452D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  _Block_object_dispose(&a30, 8);
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    char v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  unint64_t v16 = (char *)operator new(0x38uLL);
  v39[0] = v16;
  v39[1] = a1 + 16;
  char v40 = 0;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  uint64_t v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v40 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v24 = operator new(8 * *(void *)&prime);
          uint64_t v25 = *(void **)a1;
          *(void *)a1 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          uint64_t v27 = (void *)*v15;
          if (*v15)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v2_Block_object_dispose(&STACK[0x210], 8) = v15;
            uint64_t v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v34))
                  {
                    *(void *)(*(void *)a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  void *v27 = *v33;
                  void *v33 = **(void **)(*(void *)a1 + 8 * v34);
                  **(void **)(*(void *)a1 + 8 * v34) = v33;
                  uint64_t v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_58:
                uint64_t v27 = v33;
                uint64_t v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v38 = *(void **)a1;
        *(void *)a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v35 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v36 = v39[0];
  if (v35)
  {
    *(void *)v39[0] = *v35;
LABEL_75:
    void *v35 = v36;
    goto LABEL_76;
  }
  *(void *)v39[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v36;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)v36)
  {
    unint64_t v37 = *(void *)(*(void *)v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9) {
        v37 %= v9;
      }
    }
    else
    {
      v37 &= v9 - 1;
    }
    uint64_t v35 = (void *)(*(void *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v39[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_1B0453364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3AlbumArtistImportItem,std::allocator<ML3AlbumArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3, void **a4, uint64_t *a5)
{
  uint8x8_t v10 = operator new(0x78uLL);
  unint64_t v11 = v10;
  v10[1] = 0;
  void v10[2] = 0;
  *uint8x8_t v10 = &unk_1F08C7720;
  char v12 = v10 + 3;
  v13[0] = a2;
  v13[1] = a3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ML3AlbumArtistImportItem::ML3AlbumArtistImportItem((uint64_t)(v10 + 3), v13, *a4, *a5);
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    ML3AlbumArtistImportItem::ML3AlbumArtistImportItem((uint64_t)(v10 + 3), v13, *a4, *a5);
  }
  *a1 = v12;
  a1[1] = v11;
}

uint64_t std::__shared_ptr_emplace<ML3AlbumArtistImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3AlbumArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7720;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3AlbumArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ML3ArtistData::ML3ArtistData(uint64_t a1, uint64_t a2, long long *a3, long long *a4, long long *a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, long long *a14, char a15, int a16, uint64_t a17)
{
  *(void *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v22 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v22;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v23 = *a4;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v23;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v24 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v24;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v25 = *a6;
    *(void *)(a1 + 96) = *((void *)a6 + 2);
    *(_OWORD *)(a1 + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v25;
  }
  *(void *)(a1 + 104) = a7;
  *(void *)(a1 + 112) = a9;
  *(void *)(a1 + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = a10;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x210], 8) = a11;
  *(void *)(a1 + 136) = a12;
  *(void *)(a1 + 144) = a13;
  uint64_t v26 = (std::string *)(a1 + 152);
  if (*((char *)a14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a14, *((void *)a14 + 1));
  }
  else
  {
    long long v27 = *a14;
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x210], 8) = *((void *)a14 + 2);
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
  }
  *(unsigned char *)(a1 + 176) = a15;
  *(_DWORD *)(a1 + 18sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = a16;
  *(void *)(a1 + 184) = a17;
  return a1;
}

void sub_1B045363C(_Unwind_Exception *exception_object)
{
  if (v1[103] < 0) {
    operator delete(*v5);
  }
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ML3ArtistData>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<ML3ArtistData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7528;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3ArtistData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN16ML3ImportSession34_shouldPreserveAlbumArtistPropertyExj_block_invoke(uint64_t a1, void *a2)
{
  id v8 = a2;
  unint64_t v3 = [v8 stringForColumnIndex:0];
  uint64_t v4 = [v8 int64ForColumnIndex:1];
  uint64_t v5 = [v8 int64ForColumnIndex:2];
  **(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a1 + 40);
  uint64_t v6 = [v3 length];
  if (v6) {
    uint64_t v6 = [v3 hash];
  }
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16) = v6;
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24) = v4;
  if (MSVDeviceIsWatch()) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + _Block_object_dispose(&STACK[0x210], 8) = v7;
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v5;
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 32) = v5;
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4_Block_object_dispose(&STACK[0x210], 8) = v5;
}

void sub_1B04538B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession53_getAlbumArtistImportItemForGroupingIdentifierAndPIDsEP6NSDataNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEExxRb_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  unint64_t v9 = *(uint64_t **)(a1 + 48);
  memset(v61, 0, sizeof(v61));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v7, (uint64_t)v61, 2uLL);
  if (SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v61[0].__r_.__value_.__l.__data_, v61[0].__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v61[0];
  }
  if (SHIBYTE(v61[1].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v59, v61[1].__r_.__value_.__l.__data_, v61[1].__r_.__value_.__l.__size_);
  }
  else {
    std::string v59 = v61[1];
  }
  uint64_t v10 = [v7 int64ForColumnIndex:2];
  uint64_t v58 = [v7 int64ForColumnIndex:3];
  unint64_t v11 = [v7 objectAtIndexedSubscript:4];
  if (v11)
  {
    char v12 = (void *)v9[3];
    id v13 = [v7 objectAtIndexedSubscript:4];
    unint64_t v14 = [v12 objectForKeyedSubscript:v13];
    uint64_t v15 = [v14 ML3NameOrderValue];
    v57[0] = v15;
    v57[1] = v16;
  }
  else
  {
    uint64_t v15 = 0;
    *(_OWORD *)char v57 = *(_OWORD *)"";
  }

  uint64_t v17 = [v7 objectAtIndexedSubscript:3];
  if (v17) {
    BOOL v18 = v15 == 0;
  }
  else {
    BOOL v18 = 0;
  }
  int v19 = v18;

  if (v19)
  {
    BOOL v20 = [v7 objectAtIndexedSubscript:4];
    v57[0] = ML3ImportSession::_getNameOrderForString((ML3ImportSession *)v9, v20);
    v57[1] = v21;
  }
  uint64_t v56 = [v7 int64ForColumnIndex:5];
  std::string::basic_string[abi:ne180100]<0>(v54, (char *)[v7 cStringForColumnIndex:6]);
  BOOL v53 = [v7 intForColumnIndex:7] != 0;
  int v52 = [v7 intForColumnIndex:8];
  uint64_t v51 = [v7 int64ForColumnIndex:9];
  uint64_t v50 = [v7 int64ForColumnIndex:10];
  uint64_t v22 = [v7 int64ForColumnIndex:11];
  int v23 = [v7 intForColumnIndex:12];
  long long v24 = [v7 dataForColumnIndex:13];
  v48[1] = v23;
  uint64_t v49 = v24;
  v48[0] = v22;
  memset(&v41, 0, sizeof(v41));
  __p[0] = 0;
  __p[1] = 0;
  std::string::size_type v45 = 0;
  std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string,std::string,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string &,BOOL &,int &,long long &,void>(&v46, v10, (uint64_t)&v60, (uint64_t)&v59, (uint64_t)&v41, (uint64_t)__p, &v58, v57, v48, &v56, (uint64_t)v54, (char *)&v53, &v52, &v51);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  std::string::size_type v26 = v46;
  long long v25 = v47;
  std::allocate_shared[abi:ne180100]<ML3AlbumArtistImportItem,std::allocator<ML3AlbumArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long,void>(&v41, v46, v47, &v49, &v50);
  uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v28 = *(std::__shared_weak_count **)(v27 + 56);
  *(_OWORD *)(v27 + 4_Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)&v41.__r_.__value_.__l.__data_;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if ([*(id *)(a1 + 32) length]
    && [v24 length]
    && [*(id *)(a1 + 32) isEqualToData:v24])
  {
    ML3CPPStringFromData((NSData *)__p, *(void **)(a1 + 32));
    uint64_t v29 = (uint64_t)(v9 + 141);
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    std::string::size_type v30 = v45;
    __p[1] = 0;
    std::string::size_type v45 = 0;
    uint64_t v43 = v25;
    __p[0] = 0;
    v41.__r_.__value_.__r.__words[2] = v30;
    std::string::size_type v42 = v26;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (![v24 length]) {
      goto LABEL_40;
    }
    if (!*(void *)(a1 + 56))
    {
      if (*(char *)(a1 + 87) < 0)
      {
        if (!*(void *)(a1 + 72)) {
          goto LABEL_40;
        }
      }
      else if (!*(unsigned char *)(a1 + 87))
      {
        goto LABEL_40;
      }
    }
    ML3CPPStringFromData((NSData *)__p, v24);
    uint64_t v29 = (uint64_t)(v9 + 141);
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    std::string::size_type v31 = v45;
    __p[1] = 0;
    std::string::size_type v45 = 0;
    uint64_t v43 = v25;
    __p[0] = 0;
    v41.__r_.__value_.__r.__words[2] = v31;
    std::string::size_type v42 = v26;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(v29, (unsigned __int8 *)&v41, (uint64_t)&v41);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(__p[0]);
  }
LABEL_40:
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_71;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
    goto LABEL_71;
  }
  std::string::size_type v32 = *(void *)(a1 + 72);
  if (*(char *)(a1 + 87) >= 0) {
    uint64_t v33 = (void *)*(unsigned __int8 *)(a1 + 87);
  }
  else {
    uint64_t v33 = *(void **)(a1 + 72);
  }
  unint64_t v34 = v55;
  if ((v55 & 0x80u) != 0) {
    unint64_t v34 = (unint64_t)v54[1];
  }
  if (v33 == (void *)v34)
  {
    uint64_t v35 = (const void **)(a1 + 64);
    if ((v55 & 0x80u) == 0) {
      uint64_t v36 = v54;
    }
    else {
      uint64_t v36 = (void **)v54[0];
    }
    if ((*(unsigned char *)(a1 + 87) & 0x80) != 0)
    {
      if (memcmp(*v35, v36, *(void *)(a1 + 72))) {
        goto LABEL_71;
      }
LABEL_64:
      std::string::__init_copy_ctor_external(&v41, (const std::string::value_type *)*v35, v32);
    }
    else
    {
      if (*(unsigned char *)(a1 + 87))
      {
        unint64_t v37 = (unsigned __int8 *)(a1 + 64);
        uint64_t v38 = *(unsigned __int8 *)(a1 + 87);
        while (*v37 == *(unsigned __int8 *)v36)
        {
          ++v37;
          uint64_t v36 = (void **)((char *)v36 + 1);
          if (!--v38)
          {
            if ((*(unsigned char *)(a1 + 87) & 0x80) != 0) {
              goto LABEL_64;
            }
            goto LABEL_59;
          }
        }
        goto LABEL_71;
      }
LABEL_59:
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)v35;
      v41.__r_.__value_.__r.__words[2] = *(void *)(a1 + 80);
    }
    std::string::size_type v42 = v26;
    uint64_t v43 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>((uint64_t)(v9 + 161), (unsigned __int8 *)&v41, (uint64_t)&v41);
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
  }
LABEL_71:
  unint64_t v39 = *(void *)(a1 + 88);
  if (v39)
  {
    v41.__r_.__value_.__r.__words[0] = *(void *)(a1 + 88);
    v41.__r_.__value_.__l.__size_ = v26;
    v41.__r_.__value_.__r.__words[2] = (std::string::size_type)v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ArtistData>>>(v9 + 131, v39, (uint64_t)&v41);
    if (v41.__r_.__value_.__r.__words[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v41.__r_.__value_.__r.__words[2]);
    }
  }
  *a4 = 1;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }

  if ((char)v55 < 0) {
    operator delete(v54[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  for (unint64_t i = 0; i != 0x1FFFFFFFFFFFFFFALL; i -= 3)
  {
    if (SHIBYTE(v61[1].__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(v61[i / 3 + 1].__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B0453EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }

  if (a39 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v43 - 185) < 0) {
    operator delete(*(void **)(v43 - 208));
  }
  if (*(char *)(v43 - 153) < 0) {
    operator delete(*(void **)(v43 - 176));
  }
  uint64_t v45 = 0;
  uint64_t v46 = v43 - 144;
  while (1)
  {
    if (*(char *)(v46 + v45 + 47) < 0) {
      operator delete(*(void **)(v46 + v45 + 24));
    }
    v45 -= 24;
    if (v45 == -48)
    {

      _Unwind_Resume(a1);
    }
  }
}

void std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string,std::string,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string &,BOOL &,int &,long long &,void>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t a11, char *a12, int *a13, uint64_t *a14)
{
  int v23 = operator new(0xD8uLL);
  v23[1] = 0;
  v23[2] = 0;
  void *v23 = &unk_1F08C7528;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v36 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v35 = *(std::string *)a4;
  }
  *(_OWORD *)uint64_t v33 = *(_OWORD *)a5;
  uint64_t v34 = *(void *)(a5 + 16);
  *(void *)(a5 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a6;
  uint64_t v32 = *(void *)(a6 + 16);
  *(void *)(a6 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)a6 = 0;
  uint64_t v24 = *a7;
  uint64_t v25 = *a8;
  uint64_t v26 = a8[1];
  uint64_t v27 = *a9;
  uint64_t v28 = a9[1];
  uint64_t v29 = *a10;
  if (*(char *)(a11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a11, *(void *)(a11 + 8));
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)a11;
    v30.__r_.__value_.__r.__words[2] = *(void *)(a11 + 16);
  }
  ML3ArtistData::ML3ArtistData((uint64_t)(v23 + 3), a2, (long long *)&v36, (long long *)&v35, (long long *)v33, (long long *)__p, v24, v22, v25, v26, v27, v28, v29, (long long *)&v30, *a12, *a13, *a14);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  *a1 = v23 + 3;
  a1[1] = v23;
}

void sub_1B045425C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v37 - 121) < 0) {
    operator delete(*(void **)(v37 - 144));
  }
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v39);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ArtistData>>>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void **)(*a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = (void *)*v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  char v12 = a1 + 2;
  id v13 = (char *)operator new(0x28uLL);
  *(void *)id v13 = 0;
  *((void *)v13 + 1) = a2;
  *((void *)v13 + 2) = *(void *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = a1[1];
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          int v23 = (void *)*v12;
          if (*v12)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v24) = v12;
            uint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*a1 + 8 * v30))
                  {
                    *(void *)(*a1 + 8 * v3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v23;
                    goto LABEL_55;
                  }
                  void *v23 = *v29;
                  void *v29 = **(void **)(*a1 + 8 * v30);
                  **(void **)(*a1 + 8 * v3sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v29;
                  uint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                int v23 = v29;
                uint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v31 = *a1;
  uint64_t v32 = *(void **)(*a1 + 8 * v3);
  if (v32)
  {
    *(void *)id v13 = *v32;
LABEL_72:
    void *v32 = v13;
    goto LABEL_73;
  }
  *(void *)id v13 = *v12;
  *char v12 = v13;
  *(void *)(v31 + 8 * v3) = v12;
  if (*(void *)v13)
  {
    unint64_t v33 = *(void *)(*(void *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    uint64_t v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
}

void sub_1B04546C0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_120c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE136c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_120c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE136c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(void *result, void *a2)
{
  uint64_t v2 = a2[16];
  result[15] = a2[15];
  result[16] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[18];
  result[17] = a2[17];
  result[18] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN16ML3ImportSession22_getDefaultEmptyArtistEv_block_invoke()
{
  uint64_t v0 = (char *)operator new(0xD8uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = &unk_1F08C7528;
  *(_OWORD *)(v0 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 8_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 0u;
  *(_OWORD *)(v0 + 136) = *(_OWORD *)"";
  *(_OWORD *)(v0 + 152) = *(_OWORD *)"";
  *((_DWORD *)v0 + 51) = 0;
  *((void *)v0 + 26) = 0;
  v0[200] = 0;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 16_Block_object_dispose(&STACK[0x210], 8) = 0u;
  uint64_t v1 = (std::__shared_weak_count *)qword_1E9B32110;
  qword_1E9B32110 = (uint64_t)v0;
  *(_OWORD *)(v0 + 24) = 0u;
  ML3ImportSession::_getDefaultEmptyArtist(void)::__emptyArtistData = (uint64_t)(v0 + 24);
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::shared_ptr<ML3ArtistData>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t ML3ImportSession::updateAlbumArtist(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 1576) count]) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = *(void *)(a1 + 1536) != *(void *)(a1 + 1528);
  }
  unint64_t v9 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = v42;
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 88))(v42);
    if (v43 < 0) {
      uint64_t v10 = (void **)v42[0];
    }
    if (*a3)
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 88))(__p);
      if (v47 >= 0) {
        unint64_t v11 = __p;
      }
      else {
        unint64_t v11 = *(const char **)__p;
      }
      *(_DWORD *)std::string buf = 136446978;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v49 = 2082;
      uint64_t v50 = v11;
      __int16 v51 = 1024;
      int v52 = a4;
      __int16 v53 = 1024;
      BOOL v54 = v8;
      _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_DEFAULT, "updating albumArtist=%{public}s with track=%{public}s ignoreNonExistingAlbumArtist=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
      if (v47 < 0) {
        operator delete(*(void **)__p);
      }
    }
    else
    {
      *(_DWORD *)std::string buf = 136446978;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v49 = 2082;
      uint64_t v50 = "";
      __int16 v51 = 1024;
      int v52 = a4;
      __int16 v53 = 1024;
      BOOL v54 = v8;
      _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_DEFAULT, "updating albumArtist=%{public}s with track=%{public}s ignoreNonExistingAlbumArtist=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
    }
    if (v43 < 0) {
      operator delete(v42[0]);
    }
  }

  if (v8 && !ML3ImportSession::flush((ML3ImportSession *)a1, 1)) {
    return 0;
  }
  if (!*a3) {
    goto LABEL_26;
  }
  char v12 = (std::__shared_weak_count *)a3[1];
  v41[0] = *a3;
  v41[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = ML3ImportSession::_prepareTrackForImport(a1, v41, a4, 1);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!v13)
  {
LABEL_26:
    uint64_t v14 = *a2;
    float v15 = (std::__shared_weak_count *)a2[1];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v16 = ML3ImportSession::_getGroupingKeyForAlbumArtistImportItem(a1, v14);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (*a3) {
      uint64_t v17 = *(void *)(*a3 + 8);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v18 = (std::__shared_weak_count *)a2[1];
    v40[0] = *a2;
    v40[1] = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t AlbumArtistPersistentID = ML3ImportSession::_getAlbumArtistPersistentID(a1, (uint64_t)v40, v16);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    uint64_t v20 = *a3;
    if (*a3 && a4 && !*(void *)(v20 + 8))
    {
      uint64_t v29 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1B022D000, v29, OS_LOG_TYPE_DEFAULT, "Ignoring album artist update as the track does not exist", buf, 2u);
      }

      goto LABEL_84;
    }
    uint64_t v21 = os_log_create("com.apple.amp.medialibrary", "Import");
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (!v20 && a4 && !AlbumArtistPersistentID)
    {
      if (v22)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_DEFAULT, "Ignoring album artist update as the artist does not exist", buf, 2u);
      }

LABEL_84:
      a4 = 1;
      goto LABEL_85;
    }
    if (v22)
    {
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v49 = 2048;
      uint64_t v50 = (const char *)AlbumArtistPersistentID;
      _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_DEFAULT, "updating albumArtist with trackPID=%lld, albumArtistPID=%lld", buf, 0x16u);
    }

    if (*a3)
    {
      int v23 = (std::__shared_weak_count *)a3[1];
      v39[0] = *a3;
      v39[1] = (uint64_t)v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = ML3ImportSession::_prepareTrackSortData(a1, v39);
    }
    else
    {
      int v23 = (std::__shared_weak_count *)a2[1];
      v38[0] = *a2;
      v38[1] = (uint64_t)v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = ML3ImportSession::_prepareAlbumArtistSortData(a1, v38);
    }
    a4 = v24;
    if (v23)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      if ((a4 & 1) == 0)
      {
        a4 = 0;
LABEL_85:

        return a4;
      }
    }
    else if (!v24)
    {
      goto LABEL_85;
    }
    unint64_t v30 = (std::__shared_weak_count *)a2[1];
    v37[0] = *a2;
    v37[1] = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = *a3;
    uint64_t v32 = (std::__shared_weak_count *)a3[1];
    v36[0] = v31;
    v36[1] = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ML3ImportSession::_addAlbumArtist(a1, v37, v16, v36);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    unint64_t v33 = (std::__shared_weak_count *)a2[1];
    v35[0] = *a2;
    v35[1] = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ML3ImportSession::_addAlbumArtistDataToSourceMaps(a1, v35);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    goto LABEL_84;
  }
  if (v13 != 1)
  {
    BOOL v16 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
      int v25 = SHIBYTE(v51);
      unint64_t v26 = *(unsigned char **)buf;
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 88))(v42);
      uint8x8_t v27 = buf;
      if (v25 < 0) {
        uint8x8_t v27 = v26;
      }
      if (v43 >= 0) {
        uint64_t v28 = v42;
      }
      else {
        uint64_t v28 = (void **)v42[0];
      }
      *(_DWORD *)std::string __p = 136446466;
      *(void *)&__p[4] = v27;
      __int16 v45 = 2082;
      uint64_t v46 = v28;
      _os_log_impl(&dword_1B022D000, v16, OS_LOG_TYPE_ERROR, "Error updating albumArtist=%{public}s. Could not prepare track data for import=%{public}s", __p, 0x16u);
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (SHIBYTE(v51) < 0) {
        operator delete(*(void **)buf);
      }
    }
    goto LABEL_85;
  }
  return 0;
}

void sub_1B0454E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::removeAlbumArtist(uint64_t a1, uint64_t *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 32);
  if (MSVDeviceIsWatch()) {
    BOOL v5 = *(_DWORD *)(a1 + 32) == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v4 != 2 && !v5)
  {
    *(unsigned char *)(a1 + 1521) = 1;
    uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(__p);
      if (v22 >= 0) {
        unint64_t v7 = __p;
      }
      else {
        unint64_t v7 = *(unsigned char **)__p;
      }
      int v8 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v7;
      __int16 v25 = 1024;
      int v26 = v8;
      _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_ERROR, "not removing album artist=%{public}s as it's not supported for source=%d", buf, 0x12u);
      if (v22 < 0) {
        operator delete(*(void **)__p);
      }
    }

    return 1;
  }
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v17 = *a2;
  unint64_t v18 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t AlbumArtistPersistentID = ML3ImportSession::_getAlbumArtistPersistentID(a1, (uint64_t)&v17, 0);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (AlbumArtistPersistentID)
  {
    char v12 = *(void **)(a1 + 2080);
    int v13 = objc_msgSend(NSNumber, "numberWithLongLong:", AlbumArtistPersistentID, v17, v18);
    [v12 addObject:v13];

    ++*(_DWORD *)(a1 + 232);
    uint64_t v14 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = [*(id *)(a1 + 2080) count];
      *(_DWORD *)std::string __p = 134218240;
      *(void *)&__p[4] = AlbumArtistPersistentID;
      __int16 v20 = 2048;
      uint64_t v21 = v15;
      _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_DEFAULT, "removing albumArtistPID=%lld, _deletedAlbumArtists count=%ld", __p, 0x16u);
    }
  }
  else
  {
    uint64_t v14 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(__p);
      BOOL v16 = v22 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v24 = v16;
      _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_DEFAULT, "not removing albumArtist=%{public}s", buf, 0xCu);
      if (v22 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  if ((unint64_t)[*(id *)(a1 + 2080) count] <= 0x3E7 && !*(void *)(a1 + 2064)) {
    return 1;
  }
  return ML3ImportSession::flush((ML3ImportSession *)a1, 1);
}

void sub_1B0455234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ML3ImportSession::addItemArtist(uint64_t a1, void *a2, void *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(v69);
    int v7 = SHIBYTE(v72);
    int v8 = *(unsigned char **)v69;
    (*(void (**)(void **__return_ptr))(*(void *)*a3 + 88))(__p);
    unint64_t v9 = v69;
    if (v7 < 0) {
      unint64_t v9 = v8;
    }
    if ((SBYTE7(v62) & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    std::string v66 = v9;
    __int16 v67 = 2082;
    std::string::size_type v68 = v10;
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "adding itemArtist=%{public}s with track=%{public}s", buf, 0x16u);
    if (SBYTE7(v62) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v72) < 0) {
      operator delete(*(void **)v69);
    }
  }

  unint64_t v11 = (std::__shared_weak_count *)a3[1];
  v60[0] = *a3;
  v60[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = ML3ImportSession::_prepareTrackForImport(a1, v60, 0, 0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v12)
  {
    int v13 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(v69);
      int v14 = SHIBYTE(v72);
      uint64_t v15 = *(unsigned char **)v69;
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 88))(__p);
      BOOL v16 = v69;
      if (v14 < 0) {
        BOOL v16 = v15;
      }
      if ((SBYTE7(v62) & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      std::string v66 = v16;
      __int16 v67 = 2082;
      std::string::size_type v68 = v17;
      _os_log_impl(&dword_1B022D000, v13, OS_LOG_TYPE_ERROR, "Error adding item artist=%{public}s. Could not prepare track data for import=%{public}s", buf, 0x16u);
      if (SBYTE7(v62) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v72) < 0) {
        operator delete(*(void **)v69);
      }
    }
    goto LABEL_95;
  }
  unint64_t v18 = (std::__shared_weak_count *)a2[1];
  uint64_t v58 = *a2;
  std::string v59 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v19 = ML3ImportSession::_getGroupingKeyForItemArtistImportItem(a1, &v58);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  BOOL v54 = v19;
  uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 167772176);
  uint64_t v21 = *a3;
  uint64_t v51 = v20;
  if (!*a3)
  {
    uint64_t v50 = 0;
LABEL_35:
    uint64_t v24 = *a2;
    int v23 = (std::__shared_weak_count *)a2[1];
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 v53 = v19;
    BOOL v25 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(unsigned char *)(a1 + 1512) != 0;
    int v52 = v23;
    unsigned int v26 = *(_DWORD *)(a1 + 32);
    uint64_t v27 = ML3ItemArtistRulesIdentityImportPropertyForSource(v26);
    if (!v27) {
      goto LABEL_60;
    }
    unint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 32))(v24, v27);
    if (!v28) {
      goto LABEL_60;
    }
    if (v25 && !*(unsigned char *)(a1 + 1517)) {
      ML3ImportSession::_populateExistingArtistIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
    }
    uint64_t v29 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 1640), v28);
    if (!v29) {
      goto LABEL_60;
    }
    uint64_t v22 = v29[3];
    unint64_t v30 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string v69 = 134218240;
      *(void *)&v69[4] = v22;
      __int16 v70 = 1024;
      LODWORD(v71) = v27;
      _os_log_impl(&dword_1B022D000, v30, OS_LOG_TYPE_DEFAULT, "matched to cached item artist pid %lld based on identity property %d", v69, 0x12u);
    }

    if (!v22)
    {
LABEL_60:
      if (!v53 || v26 - 1 < 2) {
        goto LABEL_61;
      }
      ML3CPPStringFromData((NSData *)v69, v53);
      uint64_t v31 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(a1 + 1088), v69);
      if (SHIBYTE(v72) < 0) {
        operator delete(*(void **)v69);
      }
      if (!v31) {
        goto LABEL_61;
      }
      uint64_t v32 = (uint64_t *)*((void *)v31 + 5);
      unint64_t v33 = (std::__shared_weak_count *)*((void *)v31 + 6);
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = *v32;
      uint64_t v34 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string v69 = 134217984;
        *(void *)&v69[4] = v22;
        _os_log_impl(&dword_1B022D000, v34, OS_LOG_TYPE_DEFAULT, "matched to cached item artist pid %lld based on grouping key", v69, 0xCu);
      }

      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (!v22)
      {
LABEL_61:
        std::string v35 = (*(void (**)(uint64_t))(*(void *)v24 + 112))(v24);
        __int16 v49 = v35;
        if (v35)
        {
          long long v63 = 0u;
          long long v64 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v62 = 0u;
          id v36 = v35;
          uint64_t v37 = [v36 countByEnumeratingWithState:__p objects:v69 count:16];
          if (v37)
          {
            uint64_t v38 = *(void *)v62;
            while (2)
            {
              for (uint64_t i = 0; i != v37; ++i)
              {
                if (*(void *)v62 != v38) {
                  objc_enumerationMutation(v36);
                }
                char v40 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:*(void *)(a1 + 8) predicate:*((void *)__p[1] + i) orderingTerms:0];
                uint64_t v22 = [v40 anyEntityPersistentID];
                if (v22)
                {
                  std::string v41 = os_log_create("com.apple.amp.medialibrary", "Import");
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)std::string buf = 134218242;
                    std::string v66 = (unsigned char *)v22;
                    __int16 v67 = 2114;
                    std::string::size_type v68 = (void **)v40;
                    _os_log_impl(&dword_1B022D000, v41, OS_LOG_TYPE_DEFAULT, "matched to item artist pid %lld using query %{public}@", buf, 0x16u);
                  }

                  goto LABEL_74;
                }
              }
              uint64_t v37 = [v36 countByEnumeratingWithState:__p objects:v69 count:16];
              if (v37) {
                continue;
              }
              break;
            }
          }
          uint64_t v22 = 0;
LABEL_74:
        }
        else
        {
          uint64_t v22 = 0;
        }
      }
    }

    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if (v22)
    {
      uint64_t v42 = *a2;
      *(unsigned char *)(v42 + 16) = 1;
      *(void *)(v42 + _Block_object_dispose(&STACK[0x210], 8) = v22;
    }
    goto LABEL_81;
  }
  uint64_t v50 = *(void *)(v21 + 8);
  if (!*(unsigned char *)(v21 + 16) || *(unsigned char *)(v21 + 17)) {
    goto LABEL_35;
  }
  uint64_t v22 = 0;
LABEL_81:
  char v43 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string v69 = 134218496;
    *(void *)&v69[4] = v22;
    __int16 v70 = 2048;
    uint64_t v71 = v51;
    __int16 v72 = 2048;
    uint64_t v73 = v50;
    _os_log_impl(&dword_1B022D000, v43, OS_LOG_TYPE_DEFAULT, "importing itemArtistPID=%lld, syncID=%lld, trackPersistentID=%lld", v69, 0x20u);
  }

  uint64_t v44 = (std::__shared_weak_count *)a2[1];
  v57[0] = *a2;
  v57[1] = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = *a3;
  uint64_t v46 = (std::__shared_weak_count *)a3[1];
  v56[0] = v45;
  v56[1] = v46;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ML3ImportSession::_addItemArtist(a1, v57, v54, v56);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  char v47 = (std::__shared_weak_count *)a2[1];
  v55[0] = *a2;
  v55[1] = v47;
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = v54;
  ML3ImportSession::_addItemArtistDataToSourceMaps(a1, v55);
  int v12 = 0;
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
LABEL_95:

  return v12 == 0;
}

void sub_1B0455AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }

  _Unwind_Resume(a1);
}

id ML3ImportSession::_getGroupingKeyForItemArtistImportItem(uint64_t a1, void *a2)
{
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(&v11[24]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    *(void *)&v11[24] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v13 = __p;
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(&v11[24]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    *(void *)&v11[24] = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)unint64_t v11 = __p;
  }
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 16777217);
  BOOL v5 = *(void **)(a1 + 8);
  uint64_t v6 = ML3CPPBridgeString((const UInt8 *)&v13, 0);
  char v7 = MLMediaTypeByStandardizingMediaType(v4);
  if ((v7 & 8) != 0)
  {
    int v8 = &stru_1F08D4D70;
  }
  else
  {
    ML3CPPBridgeString(v11, 0);
    int v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  unint64_t v9 = objc_msgSend(v5, "artistGroupingKeyForArtistName:seriesName:", v6, v8, *(_OWORD *)v11, *(_OWORD *)&v11[16]);
  if ((v7 & 8) == 0) {

  }
  if ((v11[23] & 0x80000000) != 0) {
    operator delete(*(void **)v11);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }

  return v9;
}

void sub_1B0455DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void ML3ImportSession::_addItemArtist(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v304 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  uint64_t v8 = *a2;
  unint64_t v9 = *(void *)(*a4 + 8);
  unint64_t v284 = v9;
  uint64_t v276 = 0;
  uint64_t v277 = &v276;
  uint64_t v278 = 0x4012000000;
  uint64_t v279 = __Block_byref_object_copy__459;
  v280 = __Block_byref_object_dispose__460;
  uint64_t v281 = "";
  unint64_t v283 = 0;
  uint64_t v282 = 0;
  uint64_t v269 = 0;
  uint64_t v270 = (const std::string *)&v269;
  uint64_t v271 = 0x4812000000;
  uint64_t v272 = __Block_byref_object_copy__288;
  unint64_t v273 = __Block_byref_object_dispose__289;
  uint64_t v274 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v8 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v275, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v275 = *(std::string *)&buf[16];
  }
  uint64_t v262 = 0;
  uint64_t v263 = (const std::string *)&v262;
  uint64_t v264 = 0x4812000000;
  uint64_t v265 = __Block_byref_object_copy__288;
  uint64_t v266 = __Block_byref_object_dispose__289;
  uint64_t v267 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 168))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v268 = *(std::string *)&buf[16];
  }
  uint64_t v255 = 0;
  uint64_t v256 = (const std::string *)&v255;
  uint64_t v257 = 0x4812000000;
  uint64_t v258 = __Block_byref_object_copy__288;
  int v259 = __Block_byref_object_dispose__289;
  uint64_t v260 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v261, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v261 = *(std::string *)&buf[16];
  }
  uint64_t v248 = 0;
  uint64_t v249 = (const std::string *)&v248;
  uint64_t v250 = 0x4812000000;
  unint64_t v251 = __Block_byref_object_copy__288;
  uint64_t v252 = __Block_byref_object_dispose__289;
  uint64_t v253 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 176))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string __p = *(std::string *)&buf[16];
  }
  uint64_t v244 = 0;
  BOOL v245 = &v244;
  uint64_t v246 = 0x2020000000;
  uint64_t v247 = 0;
  uint64_t v247 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 167772176);
  uint64_t v240 = 0;
  int v241 = &v240;
  uint64_t v242 = 0x2020000000;
  uint64_t v243 = 0;
  uint64_t v243 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 318767111);
  uint64_t v234 = 0;
  v235 = (id *)&v234;
  uint64_t v236 = 0x3032000000;
  id v237 = __Block_byref_object_copy__286;
  uint64_t v238 = __Block_byref_object_dispose__287;
  id v208 = v7;
  id v239 = v208;
  uint64_t v230 = 0;
  uint64_t v231 = (char *)&v230;
  uint64_t v232 = 0x2020000000;
  BOOL v233 = 0;
  uint64_t v209 = a1;
  BOOL v233 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, 318767118) != 0;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a4 + 32))(*a4, 16777217);
  BOOL v11 = (MLMediaTypeByStandardizingMediaType(v10) & 8) == 0;
  if (*(unsigned char *)(*a4 + 16))
  {
    int v12 = *(void **)(a1 + 16);
    std::string v13 = [NSNumber numberWithLongLong:v9];
    unint64_t v296 = v13;
    int v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v296 count:1];
    uint64_t v15 = [v12 executeQuery:@"SELECT item_artist_pid FROM item WHERE ROWID = ?" withParameters:v14];

    uint64_t v16 = [v15 int64ValueForFirstRowAndColumn];
    uint64_t v17 = (std::__shared_weak_count *)a4[1];
    v229[0] = *a4;
    v229[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v209, (uint64_t)v229, 0x1000004u);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v16) {
      int v19 = 0;
    }
    else {
      int v19 = shouldPreserveTrackProperty;
    }
    if (v19 == 1)
    {
      uint64_t v20 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1B022D000, v20, OS_LOG_TYPE_DEFAULT, "Not updating/creating item artist as pid=0 AND persistentID is preserved by a higher source", buf, 2u);
      }

      ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v227);
      uint64_t v21 = v228;
      ML3ImportSession::_setArtistInfoForTrackPersistentID(v209, v9, v227, v228);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }

      goto LABEL_390;
    }
    if (!*(unsigned char *)(*a4 + 17))
    {
      uint64_t v38 = *a2;
      *(void *)(v38 + _Block_object_dispose(&STACK[0x210], 8) = v16;
      *(unsigned char *)(v38 + 16) = 1;
      unint64_t v39 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = *(void *)(*a4 + 8);
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v40;
        _os_log_impl(&dword_1B022D000, v39, OS_LOG_TYPE_DEFAULT, "Setting itemArtistPID=%lld for trackPID=%lld", buf, 0x16u);
      }

      if (v16)
      {
        std::string v41 = *(void **)(v209 + 16);
        char v206 = [NSNumber numberWithLongLong:v16];
        uint64_t v295 = v206;
        uint64_t v42 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v295 count:1];
        char v43 = [v41 executeQuery:@"SELECT item_artist, sort_item_artist, series_name, sort_series_name, representative_item_pid, store_id, grouping_key, sync_id, classical_experience_available FROM item_artist WHERE item_artist_pid=?", v42 withParameters];
        uint64_t v44 = v43;
        v219[0] = MEMORY[0x1E4F143A8];
        v219[1] = 3321888768;
        v219[2] = ___ZN16ML3ImportSession14_addItemArtistENSt3__110shared_ptrI13ML3ImportItemEEP6NSDataS3__block_invoke;
        v219[3] = &unk_1F08C87B8;
        uint64_t v46 = *a2;
        uint64_t v45 = (std::__shared_weak_count *)a2[1];
        v219[13] = v209;
        v219[14] = v46;
        uint64_t v220 = v45;
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v219[4] = &v269;
        v219[5] = &v262;
        v219[6] = &v255;
        v219[7] = &v248;
        v219[8] = &v230;
        v219[9] = &v240;
        v219[10] = &v244;
        v219[11] = &v234;
        BOOL v226 = v11;
        int v225 = 16777220;
        char v47 = (std::__shared_weak_count *)a4[1];
        uint64_t v221 = *a4;
        uint64_t v222 = v47;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v223 = v16;
        unint64_t v224 = v9;
        v219[12] = &v276;
        [v43 enumerateRowsWithBlock:v219];

        if (v222) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v222);
        }
        if (v220) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v220);
        }
      }
      else
      {
        uint64_t v55 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 134217984;
          *(void *)&uint8_t buf[4] = v9;
          _os_log_impl(&dword_1B022D000, v55, OS_LOG_TYPE_ERROR, "itemArtist for trackPersistentID=%lld does not exist", buf, 0xCu);
        }
      }
    }
  }
  if (v277[6])
  {
    uint64_t v22 = v245;
    uint64_t v23 = v209;
  }
  else
  {
    uint64_t v24 = [v235[5] length];
    uint64_t v22 = v245;
    uint64_t v23 = v209;
    if (!v24 && !v245[3] && !*(void *)(*a2 + 8))
    {
      uint64_t v56 = _ML3LogCategoryImport();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
        char v57 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        LODWORD(v298.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v298.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
        _os_log_impl(&dword_1B022D000, v56, OS_LOG_TYPE_ERROR, "Item artist=%{public}s has an empty grouping key and no syncID/PID. Creating a default item artist import item", (uint8_t *)&v298, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v217);
      uint64_t v58 = v218;
      ML3ImportSession::_setArtistInfoForTrackPersistentID(v209, v9, v217, v218);
LABEL_208:
      if (!v58) {
        goto LABEL_390;
      }
      std::string::size_type v99 = v58;
      goto LABEL_389;
    }
  }
  unint64_t v25 = *(void *)(*a2 + 8);
  unint64_t v26 = v22[3];
  id v27 = v235[5];
  if ([v27 length] | v25 | v26)
  {
    v298.__r_.__value_.__r.__words[0] = 0;
    v298.__r_.__value_.__l.__size_ = (std::string::size_type)&v298;
    v298.__r_.__value_.__r.__words[2] = 0x4012000000;
    v299 = __Block_byref_object_copy__459;
    v300 = __Block_byref_object_dispose__460;
    unint64_t v301 = "";
    uint64_t v302 = 0;
    uint64_t v303 = 0;
    if (v25)
    {
      unint64_t v28 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(v23 + 1840), v25);
      if (v28)
      {
        uint64_t v30 = v28[3];
        uint64_t v29 = (std::__shared_weak_count *)v28[4];
        if (v29)
        {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v31 = v303;
          uint64_t v302 = v30;
          uint64_t v303 = v29;
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
        }
        else
        {
          uint64_t v302 = v28[3];
          uint64_t v303 = 0;
        }
        long long v51 = *(_OWORD *)(v298.__r_.__value_.__l.__size_ + 48);
        long long v205 = v51;
        if (*((void *)&v51 + 1))
        {
LABEL_65:
          int v33 = 1;
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
          goto LABEL_111;
        }
LABEL_102:
        int v33 = 1;
LABEL_111:
        _Block_object_dispose(&v298, 8);
        if (v303) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v303);
        }
        goto LABEL_113;
      }
      objc_msgSend(@"SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE ", "stringByAppendingString:", @"(ROWID=?)");
      id v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
      __int16 v49 = [NSNumber numberWithLongLong:v25];
      v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      uint64_t v50 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v297 count:1];
      goto LABEL_106;
    }
    if (v26)
    {
      uint64_t v34 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(v23 + 968), v26);
      if (!v34)
      {
LABEL_99:
        if (v27 && v26)
        {
          objc_msgSend(@"SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE ", "stringByAppendingString:", @"(ROWID=? OR sync_id=?) OR grouping_key=?");
          id v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
          __int16 v49 = [NSNumber numberWithLongLong:v26];
          v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
          std::string v66 = [NSNumber numberWithLongLong:v26];
          v297.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
          v297.__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
          uint64_t v67 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v297 count:3];
LABEL_105:
          uint64_t v50 = (void *)v67;

LABEL_106:
          goto LABEL_107;
        }
        if (v26)
        {
          objc_msgSend(@"SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE ", "stringByAppendingString:", @"(ROWID=? OR sync_id=?)");
          id v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
          __int16 v49 = [NSNumber numberWithLongLong:v26];
          v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
          std::string v66 = [NSNumber numberWithLongLong:v26];
          v297.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
          uint64_t v67 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v297 count:2];
          goto LABEL_105;
        }
LABEL_278:
        if (!v27)
        {
          uint64_t v50 = 0;
          id v48 = @"SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE ";
          goto LABEL_108;
        }
        objc_msgSend(@"SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE ", "stringByAppendingString:", @"grouping_key=?");
        id v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        uint64_t v50 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v297 count:1];
LABEL_107:
        uint64_t v23 = v209;
LABEL_108:
        std::string::size_type v68 = [*(id *)(v23 + 16) executeQuery:v48 withParameters:v50];
        *(void *)std::string buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = ___ZN16ML3ImportSession41_getArtistImportItemForGroupingKeyAndPIDsEP6NSDataxxRb_block_invoke;
        *(void *)&uint8_t buf[24] = &unk_1E5FB76F0;
        *(void *)&buf[48] = v23;
        *(void *)&buf[40] = &v298;
        *(void *)&buf[32] = v27;
        *(void *)&buf[56] = v25;
        unint64_t v286 = v26;
        [v68 enumerateRowsWithBlock:buf];
        long long v69 = *(_OWORD *)(v298.__r_.__value_.__l.__size_ + 48);
        long long v205 = v69;
        if (*((void *)&v69 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
        }

        int v33 = 0;
        goto LABEL_111;
      }
      id v36 = (unint64_t *)v34[3];
      std::string v35 = (std::__shared_weak_count *)v34[4];
      if (v35)
      {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v37 = *v36;
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      else
      {
        unint64_t v37 = *v36;
      }
    }
    else
    {
      if (![v27 length]) {
        goto LABEL_278;
      }
      ML3CPPStringFromData((NSData *)buf, v27);
      int v52 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((void *)(v23 + 1088), buf);
      if (v52)
      {
        BOOL v54 = (unint64_t *)*((void *)v52 + 5);
        __int16 v53 = (std::__shared_weak_count *)*((void *)v52 + 6);
        if (v53)
        {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v37 = *v54;
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
        else
        {
          unint64_t v37 = *v54;
        }
      }
      else
      {
        unint64_t v37 = 0;
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (v37)
    {
      std::string v59 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(v23 + 1840), v37);
      if (v59)
      {
        std::string::size_type size = v298.__r_.__value_.__l.__size_;
        uint64_t v62 = v59[3];
        uint64_t v61 = v59[4];
        if (v61) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
        }
        long long v63 = *(std::__shared_weak_count **)(size + 56);
        *(void *)(size + 4_Block_object_dispose(&STACK[0x210], 8) = v62;
        *(void *)(size + 56) = v61;
        if (v63) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
        long long v64 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(unsigned char *__return_ptr))(**(void **)(v298.__r_.__value_.__l.__size_ + 48) + 88))(buf);
          std::string v65 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
          LODWORD(v297.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v297.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
          _os_log_impl(&dword_1B022D000, v64, OS_LOG_TYPE_DEFAULT, "Found artist=%{public}s in the grouping key cache", (uint8_t *)&v297, 0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        long long v51 = *(_OWORD *)(v298.__r_.__value_.__l.__size_ + 48);
        long long v205 = v51;
        if (*((void *)&v51 + 1)) {
          goto LABEL_65;
        }
        goto LABEL_102;
      }
    }
    goto LABEL_99;
  }
  uint64_t v32 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1B022D000, v32, OS_LOG_TYPE_DEFAULT, "Invalid parameters to find artist", buf, 2u);
  }

  int v33 = 0;
  long long v205 = 0u;
LABEL_113:

  __int16 v70 = v277;
  uint64_t v71 = (std::__shared_weak_count *)v277[7];
  *((_OWORD *)v277 + 3) = v205;
  if (v71)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
    __int16 v70 = v277;
    __int16 v72 = (const void *)v277[6];
  }
  else
  {
    __int16 v72 = (const void *)v205;
  }
  uint64_t v73 = v209;
  if (!v72)
  {
    if ([v235[5] length])
    {
      uint64_t v79 = v245[3];
      if (!v79)
      {
        uint64_t v80 = (std::__shared_weak_count *)a2[1];
        if (v80) {
          atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v79 = [*(id *)(v209 + 112) nextPersistentID];
        uint64_t v81 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 134217984;
          *(void *)&uint8_t buf[4] = v79;
          _os_log_impl(&dword_1B022D000, v81, OS_LOG_TYPE_DEFAULT, "created new item artist pid %lld", buf, 0xCu);
        }

        if (v80) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        }
        uint64_t v73 = v209;
      }
      uint64_t v82 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v73, (uint64_t)&v263[2], (uint64_t)&v270[2]);
      std::string::size_type v84 = v83;
      v297.__r_.__value_.__r.__words[0] = v82;
      v297.__r_.__value_.__l.__size_ = v83;
      uint64_t v85 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v73, (uint64_t)&v249[2], (uint64_t)&v256[2]);
      std::string::size_type v87 = v86;
      v215.__r_.__value_.__r.__words[0] = v85;
      v215.__r_.__value_.__l.__size_ = v86;
      std::string::size_type v88 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        long long v89 = (std::string::__raw *)&v270[2];
        if (SHIBYTE(v270[2].__r_.__value_.__r.__words[2]) < 0) {
          long long v89 = (std::string::__raw *)v89->__words[0];
        }
        uint64_t v90 = (std::string::__raw *)&v263[2];
        if (SHIBYTE(v263[2].__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v90 = (std::string::__raw *)v90->__words[0];
        }
        std::string::size_type v91 = (std::string::__raw *)&v256[2];
        if (SHIBYTE(v256[2].__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v91 = (std::string::__raw *)v91->__words[0];
        }
        int v92 = (std::string::__raw *)&v249[2];
        if (SHIBYTE(v249[2].__r_.__value_.__r.__words[2]) < 0) {
          int v92 = (std::string::__raw *)v92->__words[0];
        }
        unint64_t v93 = v241[3];
        *(_DWORD *)std::string buf = 134220546;
        *(void *)&uint8_t buf[4] = v79;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v284;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&uint8_t buf[24] = v89;
        *(_WORD *)&buf[32] = 2082;
        *(void *)&buf[34] = v90;
        *(_WORD *)&unsigned char buf[42] = 2082;
        *(void *)&buf[44] = v91;
        *(_WORD *)&buf[52] = 2082;
        *(void *)&buf[54] = v92;
        *(_WORD *)&unsigned char buf[62] = 2048;
        unint64_t v286 = v93;
        __int16 v287 = 2048;
        std::string::size_type v288 = v84;
        __int16 v289 = 2048;
        uint64_t v290 = v82;
        __int16 v291 = 2048;
        std::string::size_type v292 = v87;
        __int16 v293 = 2048;
        uint64_t v294 = v85;
        _os_log_impl(&dword_1B022D000, v88, OS_LOG_TYPE_DEFAULT, "creating new item artist entry: pid=%lld, representative_item_pid=%lld, name='%{public}s', sortName='%{public}s', series='%{public}s', sortSeries='%{public}s', storeID=%lld, order.section=%ld, order.sortOrder=%lld, order.section=%ld, order.sortOrder=%lld ", buf, 0x70u);
      }

      memset(buf, 0, 24);
      LODWORD(v298.__r_.__value_.__l.__data_) = 0;
      LODWORD(v216) = 0;
      std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string &,std::string &,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string,BOOL &,int,int,void>(&v213, v79, (uint64_t)&v270[2], (uint64_t)&v263[2], (uint64_t)&v256[2], (uint64_t)&v249[2], v241 + 3, (uint64_t *)&v297, (uint64_t *)&v215, v245 + 3, (uint64_t)buf, v231 + 24, (int *)&v298, (int *)&v216);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      long long v94 = *(_OWORD *)&v213.__r_.__value_.__l.__data_;
      std::allocate_shared[abi:ne180100]<ML3ArtistImportItem,std::allocator<ML3ArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long &,void>(buf, (uint64_t)v213.__r_.__value_.__l.__data_, (std::__shared_weak_count *)v213.__r_.__value_.__l.__size_, v235 + 5, (uint64_t *)&v284);
      long long v95 = *(_OWORD *)buf;
      unint64_t v96 = (std::__shared_weak_count *)v277[7];
      *((_OWORD *)v277 + 3) = *(_OWORD *)buf;
      if (v96)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v96);
        long long v95 = *((_OWORD *)v277 + 3);
      }
      *(void *)std::string buf = v79;
      *(_OWORD *)&uint8_t buf[8] = v95;
      if (*((void *)&v95 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v95 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>((uint64_t *)(v209 + 1840), v79, (uint64_t)buf);
      if (*(void *)&buf[16]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
      }
      ML3CPPStringFromData((NSData *)&v298, v235[5]);
      *(_OWORD *)std::string buf = *(_OWORD *)&v298.__r_.__value_.__l.__data_;
      std::string::size_type v97 = v298.__r_.__value_.__r.__words[2];
      memset(&v298, 0, sizeof(v298));
      *(void *)&uint8_t buf[16] = v97;
      *(_OWORD *)&uint8_t buf[24] = v94;
      if (*((void *)&v94 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v94 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(v209 + 1088, buf, (uint64_t)buf);
      if (*(void *)&buf[32]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v298.__r_.__value_.__l.__data_);
      }
      unint64_t v98 = v284;
      if (*((void *)&v94 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v94 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      ML3ImportSession::_setArtistInfoForTrackPersistentID(v209, v98, v94, *((std::__shared_weak_count **)&v94 + 1));
      if (!*((void *)&v94 + 1))
      {
        *(void *)(*a2 + _Block_object_dispose(&STACK[0x210], 8) = v79;
        goto LABEL_390;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
      *(void *)(*a2 + _Block_object_dispose(&STACK[0x210], 8) = v79;
      std::string::size_type v99 = (std::__shared_weak_count *)*((void *)&v94 + 1);
      goto LABEL_389;
    }
    uint64_t v119 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
      uint64_t v120 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      LODWORD(v298.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v298.__r_.__value_.__r.__words + 4) = (std::string::size_type)v120;
      _os_log_impl(&dword_1B022D000, v119, OS_LOG_TYPE_ERROR, "Item artist=%{public}s has an empty grouping key and no syncID. Creating a default item artist import item", (uint8_t *)&v298, 0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    unint64_t v121 = v284;
    ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v210);
    uint64_t v58 = v211;
    ML3ImportSession::_setArtistInfoForTrackPersistentID(v209, v121, v210, v211);
    goto LABEL_208;
  }
  std::string v75 = v74;
  if (v74 && (uint64_t v76 = v70[7]) != 0)
  {
    id v207 = (std::__shared_weak_count *)v70[7];
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    id v207 = 0;
  }
  unint64_t v77 = v74[1];
  unint64_t v216 = v77;
  if (v33) {
    BOOL v78 = 1;
  }
  else {
    BOOL v78 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(v209 + 1840), v77) != 0;
  }
  BOOL v204 = v78;
  uint64_t v100 = *a2;
  *(void *)(v100 + _Block_object_dispose(&STACK[0x210], 8) = v77;
  *(unsigned char *)(v100 + 16) = 0;
  uint64_t v101 = (*(uint64_t (**)(void *, uint64_t))(*v75 + 32))(v75, 318767111);
  uint64_t v102 = v101;
  uint64_t v103 = v241[3];
  if (v103) {
    BOOL v104 = v103 == v101;
  }
  else {
    BOOL v104 = 1;
  }
  int v105 = !v104;
  if (!v104)
  {
    *(void *)(v75[8] + 104) = v103;
    uint64_t v106 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v107 = v241[3];
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v107;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v102;
      _os_log_impl(&dword_1B022D000, v106, OS_LOG_TYPE_DEFAULT, "Setting artistStoreID=%lld (oldValue = %lld)", buf, 0x16u);
    }

    uint64_t v73 = v209;
  }
  uint64_t v108 = (*(uint64_t (**)(void *, uint64_t))(*v75 + 32))(v75, 167772176);
  uint64_t v109 = v245[3];
  if (v109)
  {
    uint64_t v110 = v108;
    if (v109 != v108)
    {
      *(void *)(v75[8] + 144) = v109;
      BOOL v111 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v112 = v245[3];
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v112;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v110;
        _os_log_impl(&dword_1B022D000, v111, OS_LOG_TYPE_DEFAULT, "Setting artistSyncID=%lld (oldValue = %lld)", buf, 0x16u);
      }

      int v105 = 1;
      uint64_t v73 = v209;
    }
  }
  (*(void (**)(unsigned char *__return_ptr, void *, uint64_t))(*v75 + 24))(buf, v75, 318767105);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v298 = *(std::string *)&buf[16];
  }
  uint64_t v113 = HIBYTE(v270[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v270[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v270[2].__r_.__value_.__l.__size_) {
      goto LABEL_219;
    }
  }
  else if (!*((unsigned char *)&v270[2].__r_.__value_.__s + 23))
  {
    goto LABEL_219;
  }
  uint64_t v114 = v270 + 2;
  if ((v113 & 0x80u) == 0) {
    std::string::size_type v115 = HIBYTE(v270[2].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v115 = v270[2].__r_.__value_.__l.__size_;
  }
  std::string::size_type v116 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
  if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v116 = v298.__r_.__value_.__l.__size_;
  }
  if (v115 == v116)
  {
    if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v117 = &v298;
    }
    else {
      BOOL v117 = (std::string *)v298.__r_.__value_.__r.__words[0];
    }
    if ((v113 & 0x80) != 0)
    {
      if (!memcmp(v114->__r_.__value_.__l.__data_, v117, v270[2].__r_.__value_.__l.__size_)) {
        goto LABEL_219;
      }
    }
    else
    {
      if (!*((unsigned char *)&v270[2].__r_.__value_.__s + 23)) {
        goto LABEL_219;
      }
      uint64_t v118 = v270 + 2;
      while (v118->__r_.__value_.__s.__data_[0] == v117->__r_.__value_.__s.__data_[0])
      {
        uint64_t v118 = (const std::string *)((char *)v118 + 1);
        BOOL v117 = (std::string *)((char *)v117 + 1);
        if (!--v113) {
          goto LABEL_219;
        }
      }
    }
  }
  std::string::operator=((std::string *)(v75[8] + 8), v114);
  std::string::size_type v122 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v123 = (std::string::__raw *)&v270[2];
    if (SHIBYTE(v270[2].__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v123 = (std::string::__raw *)v123->__words[0];
    }
    std::string::size_type v124 = &v298;
    if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v124 = (std::string *)v298.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v123;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v124;
    _os_log_impl(&dword_1B022D000, v122, OS_LOG_TYPE_DEFAULT, "Setting artistName=%{public}s (oldValue=%{public}s)", buf, 0x16u);
  }

  int v105 = 1;
  uint64_t v73 = v209;
LABEL_219:
  (*(void (**)(unsigned char *__return_ptr, void *, uint64_t))(*v75 + 24))(buf, v75, 318767107);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v297, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v297 = *(std::string *)&buf[16];
  }
  uint64_t v125 = HIBYTE(v256[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v256[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v256[2].__r_.__value_.__l.__size_) {
      goto LABEL_250;
    }
  }
  else if (!*((unsigned char *)&v256[2].__r_.__value_.__s + 23))
  {
    goto LABEL_250;
  }
  uint64_t v126 = v256 + 2;
  if ((v125 & 0x80u) == 0) {
    std::string::size_type v127 = HIBYTE(v256[2].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v127 = v256[2].__r_.__value_.__l.__size_;
  }
  std::string::size_type v128 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v128 = v297.__r_.__value_.__l.__size_;
  }
  if (v127 == v128)
  {
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v129 = &v297;
    }
    else {
      uint64_t v129 = (std::string *)v297.__r_.__value_.__r.__words[0];
    }
    if ((v125 & 0x80) != 0)
    {
      if (!memcmp(v126->__r_.__value_.__l.__data_, v129, v256[2].__r_.__value_.__l.__size_)) {
        goto LABEL_250;
      }
    }
    else
    {
      if (!*((unsigned char *)&v256[2].__r_.__value_.__s + 23)) {
        goto LABEL_250;
      }
      id v130 = v256 + 2;
      while (v130->__r_.__value_.__s.__data_[0] == v129->__r_.__value_.__s.__data_[0])
      {
        id v130 = (const std::string *)((char *)v130 + 1);
        uint64_t v129 = (std::string *)((char *)v129 + 1);
        if (!--v125) {
          goto LABEL_250;
        }
      }
    }
  }
  std::string::operator=((std::string *)(v75[8] + 56), v126);
  uint64_t v131 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v132 = (std::string::__raw *)&v256[2];
    if (SHIBYTE(v256[2].__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v132 = (std::string::__raw *)v132->__words[0];
    }
    int v133 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v133 = (std::string *)v297.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v132;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v133;
    _os_log_impl(&dword_1B022D000, v131, OS_LOG_TYPE_DEFAULT, "Setting artistSeriesName=%{public}s (oldValue=%{public}s)", buf, 0x16u);
  }

  int v105 = 1;
  uint64_t v73 = v209;
LABEL_250:
  (*(void (**)(unsigned char *__return_ptr, void *, uint64_t))(*v75 + 24))(buf, v75, 318767106);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v215 = *(std::string *)&buf[16];
  }
  uint64_t v134 = *(int *)(v73 + 32);
  uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(10, 167772167);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
  }
  if (*(_DWORD *)(__specialRules + 56 * PropertyIndex + 4 * v134) != -1)
  {
    std::string::size_type v136 = HIBYTE(v263[2].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v263[2].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v263[2].__r_.__value_.__l.__size_) {
        goto LABEL_276;
      }
    }
    else if (!*((unsigned char *)&v263[2].__r_.__value_.__s + 23))
    {
LABEL_276:
      if ((v136 & 0x80) != 0) {
        std::string::size_type v136 = v263[2].__r_.__value_.__l.__size_;
      }
      goto LABEL_281;
    }
    std::string::size_type v137 = v263[2].__r_.__value_.__l.__size_;
    if ((v136 & 0x80u) == 0) {
      std::string::size_type v138 = HIBYTE(v263[2].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v138 = v263[2].__r_.__value_.__l.__size_;
    }
    std::string::size_type v139 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
    char v140 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
    std::string::size_type v141 = v215.__r_.__value_.__l.__size_;
    if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v142 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v142 = v215.__r_.__value_.__l.__size_;
    }
    if (v138 == v142)
    {
      p_data = (const void **)&v263[2].__r_.__value_.__l.__data_;
      if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v144 = &v215;
      }
      else {
        std::string::size_type v144 = (std::string *)v215.__r_.__value_.__r.__words[0];
      }
      if ((v136 & 0x80) != 0)
      {
        int v146 = memcmp(*p_data, v144, v263[2].__r_.__value_.__l.__size_);
        std::string::size_type v136 = v137;
        if (!v146)
        {
LABEL_281:
          if (v136) {
            goto LABEL_307;
          }
          std::string::size_type v139 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
          std::string::size_type v141 = v215.__r_.__value_.__l.__size_;
          char v140 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
LABEL_283:
          if (v140 >= 0) {
            std::string::size_type v147 = v139;
          }
          else {
            std::string::size_type v147 = v141;
          }
          if (!v147) {
            goto LABEL_307;
          }
        }
      }
      else
      {
        if (!*((unsigned char *)&v263[2].__r_.__value_.__s + 23)) {
          goto LABEL_283;
        }
        uint64_t v145 = HIBYTE(v263[2].__r_.__value_.__r.__words[2]);
        while (*(unsigned __int8 *)p_data == v144->__r_.__value_.__s.__data_[0])
        {
          p_data = (const void **)((char *)p_data + 1);
          std::string::size_type v144 = (std::string *)((char *)v144 + 1);
          if (!--v145) {
            goto LABEL_276;
          }
        }
      }
    }
    std::string::size_type v148 = (std::__shared_weak_count *)a4[1];
    v214[0] = *a4;
    v214[1] = v148;
    if (v148) {
      atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v149 = ML3ImportSession::_shouldPreserveTrackProperty(v73, (uint64_t)v214, 0xA000007u);
    if (v148) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v148);
    }
    if ((v149 & 1) == 0)
    {
      uint64_t v150 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v73, (uint64_t)&v263[2], (uint64_t)&v270[2]);
      uint64_t v152 = v151;
      std::string::operator=((std::string *)(v75[8] + 32), v263 + 2);
      uint64_t v153 = v75[8];
      *(void *)(v153 + 112) = v150;
      *(void *)(v153 + 12sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v152;
      std::string::size_type v154 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v155 = (std::string::__raw *)&v263[2];
        if (SHIBYTE(v263[2].__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v155 = (std::string::__raw *)v155->__words[0];
        }
        unint64_t v156 = &v215;
        if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v156 = (std::string *)v215.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136446978;
        *(void *)&uint8_t buf[4] = v155;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v150;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = v152;
        *(_WORD *)&buf[28] = 2082;
        *(void *)&buf[30] = v156;
        _os_log_impl(&dword_1B022D000, v154, OS_LOG_TYPE_DEFAULT, "Setting artistSortName=%{public}s, order=%lld, section=%d (oldValue=%{public}s)", buf, 0x26u);
      }

      unint64_t v157 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(v209 + 1680), v77);
      if (v157)
      {
        uint64_t v158 = v157[3];
        uint64_t v159 = v157[4];
        if (v159 != v152 || v158 != v150)
        {
          std::string::size_type v160 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v209 + 1720, v77, (uint64_t *)&v216);
          v160[3] = v150;
          v160[4] = v152;
          char v161 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v209 + 1680, v77, (uint64_t *)&v216);
          v161[3] = v150;
          v161[4] = v152;
          uint64_t v162 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v163 = (std::string::__raw *)&v263[2];
            if (SHIBYTE(v263[2].__r_.__value_.__r.__words[2]) < 0) {
              uint64_t v163 = (std::string::__raw *)v163->__words[0];
            }
            *(_DWORD *)std::string buf = 134219266;
            *(void *)&uint8_t buf[4] = v77;
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v163;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&uint8_t buf[24] = v152;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v150;
            *(_WORD *)&unsigned char buf[42] = 2048;
            *(void *)&buf[44] = v159;
            *(_WORD *)&buf[52] = 2048;
            *(void *)&buf[54] = v158;
            _os_log_impl(&dword_1B022D000, v162, OS_LOG_TYPE_DEFAULT, "Will update sort order for tracks with artist_pid=%lld with sortName=%{public}s, order.section=%ld, order.sortOrder=%lld (oldValue section=%ld, sortOrder=%lld)", buf, 0x3Eu);
          }
        }
      }
      int v105 = 1;
      uint64_t v73 = v209;
    }
  }
LABEL_307:
  (*(void (**)(unsigned char *__return_ptr, void *, uint64_t))(*v75 + 24))(buf, v75, 318767108);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v213 = *(std::string *)&buf[16];
  }
  uint64_t v164 = *(int *)(v73 + 32);
  uint64_t v165 = ML3TrackRulesGetPropertyIndex(10, 167772168);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
  }
  if (*(_DWORD *)(__specialRules + 56 * v165 + 4 * v164) != -1)
  {
    std::string::size_type v166 = HIBYTE(v249[2].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v249[2].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v249[2].__r_.__value_.__l.__size_) {
        goto LABEL_333;
      }
    }
    else if (!*((unsigned char *)&v249[2].__r_.__value_.__s + 23))
    {
LABEL_333:
      if ((v166 & 0x80) != 0) {
        std::string::size_type v166 = v249[2].__r_.__value_.__l.__size_;
      }
      goto LABEL_336;
    }
    std::string::size_type v167 = v249[2].__r_.__value_.__l.__size_;
    if ((v166 & 0x80u) == 0) {
      std::string::size_type v168 = HIBYTE(v249[2].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v168 = v249[2].__r_.__value_.__l.__size_;
    }
    std::string::size_type v169 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
    char v170 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
    std::string::size_type v171 = v213.__r_.__value_.__l.__size_;
    if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v172 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v172 = v213.__r_.__value_.__l.__size_;
    }
    if (v168 == v172)
    {
      char v173 = (const void **)&v249[2].__r_.__value_.__l.__data_;
      if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v174 = &v213;
      }
      else {
        int v174 = (std::string *)v213.__r_.__value_.__r.__words[0];
      }
      if ((v166 & 0x80) != 0)
      {
        int v176 = memcmp(*v173, v174, v249[2].__r_.__value_.__l.__size_);
        std::string::size_type v166 = v167;
        if (!v176)
        {
LABEL_336:
          if (v166) {
            goto LABEL_362;
          }
          std::string::size_type v169 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
          std::string::size_type v171 = v213.__r_.__value_.__l.__size_;
          char v170 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
LABEL_338:
          if (v170 >= 0) {
            std::string::size_type v177 = v169;
          }
          else {
            std::string::size_type v177 = v171;
          }
          if (!v177) {
            goto LABEL_362;
          }
        }
      }
      else
      {
        if (!*((unsigned char *)&v249[2].__r_.__value_.__s + 23)) {
          goto LABEL_338;
        }
        uint64_t v175 = HIBYTE(v249[2].__r_.__value_.__r.__words[2]);
        while (*(unsigned __int8 *)v173 == v174->__r_.__value_.__s.__data_[0])
        {
          char v173 = (const void **)((char *)v173 + 1);
          int v174 = (std::string *)((char *)v174 + 1);
          if (!--v175) {
            goto LABEL_333;
          }
        }
      }
    }
    int v178 = (std::__shared_weak_count *)a4[1];
    v212[0] = *a4;
    v212[1] = v178;
    if (v178) {
      atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v179 = ML3ImportSession::_shouldPreserveTrackProperty(v73, (uint64_t)v212, 0xA000008u);
    if (v178) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v178);
    }
    if ((v179 & 1) == 0)
    {
      uint64_t v180 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v73, (uint64_t)&v249[2], (uint64_t)&v256[2]);
      uint64_t v182 = v181;
      std::string::operator=((std::string *)(v75[8] + 80), v249 + 2);
      uint64_t v183 = v75[8];
      *(void *)(v183 + 12_Block_object_dispose(&STACK[0x210], 8) = v180;
      *(void *)(v183 + 136) = v182;
      uint64_t v184 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v185 = (std::string::__raw *)&v249[2];
        if (SHIBYTE(v249[2].__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v185 = (std::string::__raw *)v185->__words[0];
        }
        BOOL v186 = &v213;
        if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          BOOL v186 = (std::string *)v213.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136446978;
        *(void *)&uint8_t buf[4] = v185;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v180;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = v182;
        *(_WORD *)&buf[28] = 2082;
        *(void *)&buf[30] = v186;
        _os_log_impl(&dword_1B022D000, v184, OS_LOG_TYPE_DEFAULT, "Setting artistSeriesSortName=%{public}s, order=%lld, section=%d (oldValue=%{public}s)", buf, 0x26u);
      }

      uint64_t v73 = v209;
      uint64_t v187 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(v209 + 1760), v77);
      if (!v187 || (uint64_t v188 = v187[3], v189 = v187[4], v189 == v182) && v188 == v180)
      {
        int v105 = 1;
      }
      else
      {
        int v190 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v209 + 1800, v77, (uint64_t *)&v216);
        v190[3] = v180;
        v190[4] = v182;
        uint64_t v191 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v209 + 1800, v77, (uint64_t *)&v216);
        v191[3] = v180;
        v191[4] = v182;
        uint64_t v192 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
        {
          int v193 = (std::string::__raw *)&v263[2];
          if (SHIBYTE(v263[2].__r_.__value_.__r.__words[2]) < 0) {
            int v193 = (std::string::__raw *)v193->__words[0];
          }
          *(_DWORD *)std::string buf = 134219266;
          *(void *)&uint8_t buf[4] = v77;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v193;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&uint8_t buf[24] = v182;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v180;
          *(_WORD *)&unsigned char buf[42] = 2048;
          *(void *)&buf[44] = v189;
          *(_WORD *)&buf[52] = 2048;
          *(void *)&buf[54] = v188;
          _os_log_impl(&dword_1B022D000, v192, OS_LOG_TYPE_DEFAULT, "Will update series sort order for tracks with artist_pid=%lld with sortName=%{public}s, order.section=%ld, order.sortOrder=%lld (oldValue section=%ld, sortOrder=%lld)", buf, 0x3Eu);
        }

        int v105 = 1;
        uint64_t v73 = v209;
      }
    }
  }
LABEL_362:
  int v194 = (*(uint64_t (**)(void *, uint64_t))(*v75 + 32))(v75, 318767118) != 0;
  int v195 = v231[24];
  if (v195 == v194)
  {
    if (v204) {
      int v196 = 0;
    }
    else {
      int v196 = v105;
    }
    if (v196 != 1) {
      goto LABEL_375;
    }
    goto LABEL_371;
  }
  *(unsigned char *)(v75[8] + 176) = v195;
  uint64_t v197 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
  {
    int v198 = v231[24];
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v198;
    _os_log_impl(&dword_1B022D000, v197, OS_LOG_TYPE_DEFAULT, "Setting artistClassicalExperienceAvailable=%{BOOL}u", buf, 8u);
  }

  uint64_t v73 = v209;
  if (!v204)
  {
LABEL_371:
    uint64_t v200 = v277[6];
    uint64_t v199 = v277[7];
    *(void *)std::string buf = v77;
    *(void *)&uint8_t buf[8] = v200;
    *(void *)&uint8_t buf[16] = v199;
    if (v199) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v199 + 8), 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>((uint64_t *)(v73 + 1840), v77, (uint64_t)buf);
    if (*(void *)&buf[16]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
    }
  }
LABEL_375:
  unint64_t v201 = v284;
  uint64_t v202 = v75[8];
  BOOL v203 = (std::__shared_weak_count *)v75[9];
  if (v203) {
    atomic_fetch_add_explicit(&v203->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ML3ImportSession::_setArtistInfoForTrackPersistentID(v73, v201, v202, v203);
  if (v203) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v203);
  }
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v213.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v215.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v297.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v298.__r_.__value_.__l.__data_);
  }
  if (v207)
  {
    std::string::size_type v99 = v207;
LABEL_389:
    std::__shared_weak_count::__release_shared[abi:ne180100](v99);
  }
LABEL_390:
  _Block_object_dispose(&v230, 8);
  _Block_object_dispose(&v234, 8);

  _Block_object_dispose(&v240, 8);
  _Block_object_dispose(&v244, 8);
  _Block_object_dispose(&v248, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v255, 8);
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v261.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v262, 8);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v268.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v269, 8);
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v275.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v276, 8);
  if (v283) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v283);
  }
}

void sub_1B04583A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a66, 8);

  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  _Block_object_dispose(&STACK[0x280], 8);
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  _Block_object_dispose(&STACK[0x2C8], 8);
  if (SLOBYTE(STACK[0x30F]) < 0) {
    operator delete((void *)STACK[0x2F8]);
  }
  _Block_object_dispose(&STACK[0x310], 8);
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  _Block_object_dispose(&STACK[0x358], 8);
  if (STACK[0x390]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x390]);
  }

  _Unwind_Resume(a1);
}

void ML3ImportSession::_setArtistInfoForTrackPersistentID(uint64_t a1, unint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t v16 = a2;
  if (a2)
  {
    uint64_t v7 = a1 + 336;
    uint64_t v8 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 336), a2);
    if (v8)
    {
      if (a4) {
        atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v9 = (std::__shared_weak_count *)v8[4];
      void v8[3] = a3;
      void v8[4] = a4;
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    else
    {
      long long v15 = 0u;
      long long v14 = 0u;
      long long v13 = 0u;
      long long v12 = 0u;
      if (a4) {
        atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v11[0] = a3;
      v11[1] = (uint64_t)a4;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v7, a2, &v16);
      ML3CollectionInfoSet::operator=(v10 + 3, v11);
      if (a4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a4);
      }
    }
  }
}

void sub_1B0458A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ML3CollectionInfoSet::~ML3CollectionInfoSet((ML3CollectionInfoSet *)va);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession14_addItemArtistENSt3__110shared_ptrI13ML3ImportItemEEP6NSDataS3__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = [v5 stringForColumnIndex:0];
  uint64_t v56 = v8;
  id v59 = [v5 stringForColumnIndex:1];
  id v57 = [v5 stringForColumnIndex:2];
  id v58 = [v5 stringForColumnIndex:3];
  uint64_t v9 = [v5 int64ForColumnIndex:4];
  uint64_t v66 = v9;
  uint64_t v54 = [v5 int64ForColumnIndex:5];
  uint64_t v55 = [v5 dataForColumnIndex:6];
  id v65 = v55;
  uint64_t v53 = [v5 int64ForColumnIndex:7];
  BOOL v10 = [v5 intForColumnIndex:8] != 0;
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 112) + 56))(*(void *)(a1 + 112), 318767105) & 1) == 0)MEMORY[0x1B3E93360](*(void *)(*(void *)(a1 + 32) + 8) + 48, [v8 UTF8String]); {
  char v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 112) + 56))(*(void *)(a1 + 112), 318767106);
  }
  if (v59) {
    char v12 = v11;
  }
  else {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v73, (char *)[v59 UTF8String]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
    long long v14 = (void **)(v13 + 48);
    if (*(char *)(v13 + 71) < 0) {
      operator delete(*v14);
    }
    *(std::string *)long long v14 = v73;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 112) + 56))(*(void *)(a1 + 112), 318767107) & 1) == 0)MEMORY[0x1B3E93360](*(void *)(*(void *)(a1 + 48) + 8) + 48, [v57 UTF8String]); {
  char v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 112) + 56))(*(void *)(a1 + 112), 318767108);
  }
  if (v58) {
    char v16 = v15;
  }
  else {
    char v16 = 1;
  }
  if ((v16 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v73, (char *)[v58 UTF8String]);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
    unint64_t v18 = (void **)(v17 + 48);
    if (*(char *)(v17 + 71) < 0) {
      operator delete(*v18);
    }
    *(std::string *)unint64_t v18 = v73;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 112) + 56))(*(void *)(a1 + 112), 318767118) & 1) == 0)*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v10; {
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 112) + 56))(*(void *)(a1 + 112), 318767111) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v54;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 112) + 56))(*(void *)(a1 + 112), 167772176) & 1) == 0)*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v53; {
  int v19 = *(void **)(v7 + 8);
  }
  uint64_t v20 = ML3CPPBridgeString((const UInt8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), 0);
  int v21 = *(unsigned __int8 *)(a1 + 164);
  if (*(unsigned char *)(a1 + 164))
  {
    ML3CPPBridgeString((const UInt8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), 0);
    uint64_t v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v22 = &stru_1F08D4D70;
  }
  uint64_t v23 = [v19 artistGroupingKeyForArtistName:v20 seriesName:v22];
  uint64_t v24 = *(void *)(*(void *)(a1 + 88) + 8);
  unint64_t v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v23;

  if (v21) {
  unsigned int v26 = *(_DWORD *)(a1 + 160);
  }
  uint64_t v27 = *(int *)(v7 + 32);
  int v28 = HIBYTE(v26);
  uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(v26), v26);
  if (*(_DWORD *)(ML3TrackRulesGetRule(v28, PropertyIndex) + 4 * v27) == -1
    || ([*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) isEqualToData:v55] & 1) != 0)
  {
    goto LABEL_36;
  }
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 136);
  v64[0] = *(void *)(a1 + 128);
  v64[1] = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v7, (uint64_t)v64, *(_DWORD *)(a1 + 160));
  char v32 = shouldPreserveTrackProperty;
  if (v30)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    if (v32)
    {
LABEL_36:
      id v52 = v6;
      if (v56) {
        std::string::basic_string[abi:ne180100]<0>(&v63, (char *)[v56 UTF8String]);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&v63, "");
      }
      if (v59) {
        std::string::basic_string[abi:ne180100]<0>(&v62, (char *)[v59 UTF8String]);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&v62, "");
      }
      if (v57) {
        std::string::basic_string[abi:ne180100]<0>(&v61, (char *)[v57 UTF8String]);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&v61, "");
      }
      if (v58) {
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v58 UTF8String]);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
      }
      uint64_t v33 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v7, (uint64_t)&v62, (uint64_t)&v63);
      uint64_t v35 = v34;
      uint64_t v36 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v7, (uint64_t)&__p, (uint64_t)&v61);
      uint64_t v38 = v37;
      uint64_t v39 = *(void *)(*(void *)(a1 + 64) + 8);
      std::string v41 = (std::__shared_weak_count *)operator new(0xD8uLL);
      v41->__shared_owners_ = 0;
      v41->__shared_weak_owners_ = 0;
      v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7528;
      uint64_t v42 = *(void *)(a1 + 144);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v73, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
      }
      else {
        std::string v73 = v63;
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v71, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
      }
      else {
        std::string v71 = v62;
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v70, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
      }
      else {
        std::string v70 = v61;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v69, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v69 = __p;
      }
      long long v67 = 0uLL;
      uint64_t v68 = 0;
      ML3ArtistData::ML3ArtistData((uint64_t)&v41[1], v42, (long long *)&v73, (long long *)&v71, (long long *)&v70, (long long *)&v69, v54, v40, v33, v35, v36, v38, v53, &v67, *(unsigned char *)(v39 + 24), 0, 0);
      id v6 = v52;
      char v43 = v55;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      std::allocate_shared[abi:ne180100]<ML3ArtistImportItem,std::allocator<ML3ArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long &,void>(&v73, (uint64_t)&v41[1], v41, &v65, &v66);
      uint64_t v44 = *(void *)(*(void *)(a1 + 96) + 8);
      uint64_t v45 = *(std::__shared_weak_count **)(v44 + 56);
      *(_OWORD *)(v44 + 4_Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      goto LABEL_78;
    }
  }
  else if (shouldPreserveTrackProperty)
  {
    goto LABEL_36;
  }
  char v43 = v55;
  if (v9 == *(void *)(a1 + 152))
  {
    uint64_t v46 = *(void **)(v7 + 16);
    char v47 = [NSNumber numberWithLongLong:*(void *)(a1 + 144)];
    __int16 v72 = v47;
    id v48 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v72 count:1];
    [v46 executeUpdate:@"UPDATE item_artist SET representative_item_pid=0 WHERE item_artist_pid=?" withParameters:v48 error:0];

    *(void *)(*(void *)(a1 + 112) + _Block_object_dispose(&STACK[0x210], 8) = 0;
    __int16 v49 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v51 = *(void *)(a1 + 144);
      std::string::size_type v50 = *(void *)(a1 + 152);
      LODWORD(v73.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 4) = v50;
      WORD2(v73.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v73.__r_.__value_.__r.__words[1] + 6) = v51;
      _os_log_impl(&dword_1B022D000, v49, OS_LOG_TYPE_DEFAULT, "Removing trackPersistentID=%lld as the representative item for itemArtistPersistentID=%lld as the groupingKey has changed/can no longer be applied", (uint8_t *)&v73, 0x16u);
    }

    char v43 = v55;
  }
LABEL_78:
}

void sub_1B04592FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string &,std::string &,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string,BOOL &,int,int,void>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t a11, char *a12, int *a13, int *a14)
{
  uint64_t v23 = operator new(0xD8uLL);
  v23[1] = 0;
  v23[2] = 0;
  void *v23 = &unk_1F08C7528;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v35 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v34 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v33 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v32 = *(std::string *)a6;
  }
  uint64_t v24 = *a7;
  uint64_t v25 = *a8;
  uint64_t v26 = a8[1];
  uint64_t v28 = *a9;
  uint64_t v27 = a9[1];
  uint64_t v29 = *a10;
  *(_OWORD *)std::string __p = *(_OWORD *)a11;
  uint64_t v31 = *(void *)(a11 + 16);
  *(void *)(a11 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  *(void *)(a11 + 16) = 0;
  *(void *)a11 = 0;
  ML3ArtistData::ML3ArtistData((uint64_t)(v23 + 3), a2, (long long *)&v35, (long long *)&v34, (long long *)&v33, (long long *)&v32, v24, v22, v25, v26, v28, v27, v29, (long long *)__p, *a12, *a13, *a14);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  *a1 = v23 + 3;
  a1[1] = v23;
}

void sub_1B04596C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v37 - 121) < 0) {
    operator delete(*(void **)(v37 - 144));
  }
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v39);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3ArtistImportItem,std::allocator<ML3ArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3, id *a4, uint64_t *a5)
{
  BOOL v10 = operator new(0x78uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *BOOL v10 = &unk_1F08C7678;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *a5;
  id v12 = *a4;
  *((_WORD *)v10 + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 256;
  *((unsigned char *)v10 + 42) = 1;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_DWORD *)v10 + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  v10[3] = &unk_1F08C3770;
  void v10[4] = 0;
  v10[11] = a2;
  v10[12] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v13 = v12;
  v10[13] = v13;
  v10[14] = v11;
  *((_WORD *)v10 + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 256;
  void v10[4] = *(void *)v10[11];

  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

uint64_t std::__shared_ptr_emplace<ML3ArtistImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ML3ArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7678;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1B3E93610);
}

void std::__shared_ptr_emplace<ML3ArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C7678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN16ML3ImportSession41_getArtistImportItemForGroupingKeyAndPIDsEP6NSDataxxRb_block_invoke(void **a1, void *a2, uint64_t a3, unsigned char *a4)
{
  v64[5] = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v7 = (uint64_t *)a1[6];
  memset(v64, 0, 32);
  long long v63 = 0u;
  memset(v62, 0, sizeof(v62));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v6, (uint64_t)v62, 4uLL);
  if (SHIBYTE(v62[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v61, v62[0].__r_.__value_.__l.__data_, v62[0].__r_.__value_.__l.__size_);
  }
  else {
    std::string v61 = v62[0];
  }
  if (SHIBYTE(v62[1].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v62[1].__r_.__value_.__l.__data_, v62[1].__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v62[1];
  }
  if (SHIBYTE(v64[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v59, (const std::string::value_type *)v63, *((std::string::size_type *)&v63 + 1));
  }
  else
  {
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v63;
    v59.__r_.__value_.__r.__words[2] = v64[0];
  }
  if (SHIBYTE(v64[3]) < 0) {
    std::string::__init_copy_ctor_external(&v58, (const std::string::value_type *)v64[1], v64[2]);
  }
  else {
    std::string v58 = *(std::string *)&v64[1];
  }
  uint64_t v8 = [v6 int64ForColumnIndex:4];
  uint64_t v57 = [v6 int64ForColumnIndex:5];
  uint64_t v9 = [v6 objectAtIndexedSubscript:6];
  if (v9)
  {
    BOOL v10 = (void *)v7[3];
    uint64_t v11 = [v6 objectAtIndexedSubscript:6];
    id v12 = [v10 objectForKeyedSubscript:v11];
    uint64_t v13 = [v12 ML3NameOrderValue];
    *(void *)&long long v56 = v13;
    *((void *)&v56 + 1) = v14;
  }
  else
  {
    uint64_t v13 = 0;
    long long v56 = *(_OWORD *)"";
  }

  char v15 = [v6 objectAtIndexedSubscript:6];
  if (v15) {
    BOOL v16 = v13 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  int v17 = v16;

  if (v17)
  {
    unint64_t v18 = [v6 objectAtIndexedSubscript:6];
    *(void *)&long long v56 = ML3ImportSession::_getNameOrderForString((ML3ImportSession *)v7, v18);
    *((void *)&v56 + 1) = v19;
  }
  uint64_t v20 = [v6 objectAtIndexedSubscript:7];
  if (v20)
  {
    int v21 = (void *)v7[3];
    uint64_t v22 = [v6 objectAtIndexedSubscript:7];
    uint64_t v23 = [v21 objectForKeyedSubscript:v22];
    uint64_t v24 = [v23 ML3NameOrderValue];
    *(void *)&long long v55 = v24;
    *((void *)&v55 + 1) = v25;
  }
  else
  {
    uint64_t v24 = 0;
    long long v55 = *(_OWORD *)"";
  }

  uint64_t v26 = [v6 objectAtIndexedSubscript:7];
  if (v26) {
    BOOL v27 = v24 == 0;
  }
  else {
    BOOL v27 = 0;
  }
  int v28 = v27;

  if (v28)
  {
    uint64_t v29 = [v6 objectAtIndexedSubscript:7];
    *(void *)&long long v55 = ML3ImportSession::_getNameOrderForString((ML3ImportSession *)v7, v29);
    *((void *)&v55 + 1) = v30;
  }
  uint64_t v54 = [v6 int64ForColumnIndex:8];
  BOOL v53 = [v6 intForColumnIndex:9] != 0;
  uint64_t v52 = [v6 int64ForColumnIndex:10];
  uint64_t v31 = [v6 dataForColumnIndex:11];
  id v51 = v31;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v45 = 0;
  LODWORD(v42[0].super.isa) = 0;
  int v48 = 0;
  std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string &,std::string &,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string,BOOL &,int,int,void>(&v49, v8, (uint64_t)&v61, (uint64_t)&v60, (uint64_t)&v59, (uint64_t)&v58, &v57, (uint64_t *)&v56, (uint64_t *)&v55, &v54, (uint64_t)__p, (char *)&v53, (int *)v42, &v48);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p[0]);
  }
  std::string v33 = v49;
  std::string v32 = v50;
  std::allocate_shared[abi:ne180100]<ML3ArtistImportItem,std::allocator<ML3ArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long &,void>(__p, (uint64_t)v49, v50, &v51, &v52);
  uint64_t v34 = *((void *)a1[5] + 1);
  std::string v35 = *(std::__shared_weak_count **)(v34 + 56);
  *(_OWORD *)(v34 + 4_Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)__p;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v36 = a1[4];
  if (v36)
  {
    ML3CPPStringFromData(v42, v36);
    uint64_t v37 = (uint64_t)(v7 + 136);
    *(_OWORD *)std::string __p = *(_OWORD *)&v42[0].super.isa;
    uint64_t v38 = v43;
    v42[1].super.isa = 0;
    char v43 = 0;
    v42[0].super.isa = 0;
    uint64_t v45 = v38;
    uint64_t v46 = v33;
    char v47 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (!v31 || !a1[7]) {
      goto LABEL_53;
    }
    ML3CPPStringFromData(v42, v31);
    uint64_t v37 = (uint64_t)(v7 + 136);
    *(_OWORD *)std::string __p = *(_OWORD *)&v42[0].super.isa;
    uint64_t v39 = v43;
    v42[1].super.isa = 0;
    char v43 = 0;
    v42[0].super.isa = 0;
    uint64_t v45 = v39;
    uint64_t v46 = v33;
    char v47 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(v37, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(v42[0].super.isa);
  }
LABEL_53:
  unint64_t v40 = (unint64_t)a1[8];
  if (v40)
  {
    __p[0] = a1[8];
    __p[1] = v33;
    uint64_t v45 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ArtistData>>>(v7 + 121, v40, (uint64_t)__p);
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
  }
  *a4 = 1;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }

  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v64[i + 3]) < 0) {
      operator delete((void *)v64[i + 1]);
    }
  }
}

void sub_1B0459E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  std::pair<std::string const,std::shared_ptr<ML3AlbumData>>::~pair((uint64_t)&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }

  if (a45 < 0) {
    operator delete(a40);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (*(char *)(v55 - 233) < 0) {
    operator delete(*(void **)(v55 - 256));
  }
  if (*(char *)(v55 - 201) < 0) {
    operator delete(*(void **)(v55 - 224));
  }
  uint64_t v57 = 0;
  uint64_t v58 = v55 - 192;
  while (1)
  {
    if (*(char *)(v58 + v57 + 95) < 0) {
      operator delete(*(void **)(v58 + v57 + 72));
    }
    v57 -= 24;
    if (v57 == -96)
    {

      _Unwind_Resume(a1);
    }
  }
}

void __destroy_helper_block_ea8_112c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE128c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_112c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE128c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(void *result, void *a2)
{
  uint64_t v2 = a2[15];
  result[14] = a2[14];
  result[15] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[17];
  result[16] = a2[16];
  result[17] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ML3ImportSession::updateItemArtist(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 1576) count]) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = *(void *)(a1 + 1536) != *(void *)(a1 + 1528);
  }
  uint64_t v9 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 88))(v37);
    int v10 = v38;
    uint64_t v11 = (void **)v37[0];
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 88))(__p);
    id v12 = v37;
    if (v10 < 0) {
      id v12 = v11;
    }
    if (v42 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 136446978;
    *(void *)&uint8_t buf[4] = v12;
    __int16 v44 = 2082;
    uint64_t v45 = v13;
    __int16 v46 = 1024;
    int v47 = a4;
    __int16 v48 = 1024;
    BOOL v49 = v8;
    _os_log_impl(&dword_1B022D000, v9, OS_LOG_TYPE_DEFAULT, "updating itemArtist=%{public}s, track=%{public}s, ignoreNonExistingArtist=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
    if (v42 < 0) {
      operator delete(*(void **)__p);
    }
    if (v38 < 0) {
      operator delete(v37[0]);
    }
  }

  if (v8)
  {
    int v14 = ML3ImportSession::flush((ML3ImportSession *)a1, 1);
    char v15 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1B022D000, v15, OS_LOG_TYPE_DEFAULT, "flushing entities as we have pending track adds/deletes finished with status=%{BOOL}u", buf, 8u);
    }

    if (!v14) {
      return 0;
    }
  }
  BOOL v16 = (std::__shared_weak_count *)a3[1];
  v36[0] = *a3;
  v36[1] = (uint64_t)v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = ML3ImportSession::_prepareTrackForImport(a1, v36, a4, 1);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (!v17)
  {
    if (*a3 && a4 && !*(void *)(*a3 + 8))
    {
      uint64_t v19 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1B022D000, v19, OS_LOG_TYPE_DEFAULT, "Ignoring item artist update as the track does not exist", buf, 2u);
      }
    }
    else
    {
      unint64_t v18 = (std::__shared_weak_count *)a2[1];
      uint64_t v34 = *a2;
      std::string v35 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = ML3ImportSession::_getGroupingKeyForItemArtistImportItem(a1, &v34);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      uint64_t v20 = *(void *)(*a3 + 8);
      *(unsigned char *)(*a3 + 16) = 1;
      int v21 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl(&dword_1B022D000, v21, OS_LOG_TYPE_DEFAULT, "updating itemArtist with trackPID=%lld", buf, 0xCu);
      }

      uint64_t v22 = (std::__shared_weak_count *)a2[1];
      v33[0] = *a2;
      v33[1] = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *a3;
      uint64_t v24 = (std::__shared_weak_count *)a3[1];
      v32[0] = v23;
      v32[1] = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ML3ImportSession::_addItemArtist(a1, v33, v19, v32);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      uint64_t v25 = (std::__shared_weak_count *)a2[1];
      v31[0] = *a2;
      v31[1] = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ML3ImportSession::_addItemArtistDataToSourceMaps(a1, v31);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
    }
    a4 = 1;
    goto LABEL_57;
  }
  if (v17 != 1)
  {
    uint64_t v19 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 88))(buf);
      int v26 = SHIBYTE(v46);
      BOOL v27 = *(unsigned char **)buf;
      (*(void (**)(void **__return_ptr))(*(void *)*a3 + 88))(v37);
      int v28 = buf;
      if (v26 < 0) {
        int v28 = v27;
      }
      if (v38 >= 0) {
        uint64_t v29 = v37;
      }
      else {
        uint64_t v29 = (void **)v37[0];
      }
      *(_DWORD *)std::string __p = 136446466;
      *(void *)&__p[4] = v28;
      __int16 v40 = 2082;
      std::string v41 = v29;
      _os_log_impl(&dword_1B022D000, v19, OS_LOG_TYPE_ERROR, "Error updating itemArtist=%{public}s. Could not prepare track data for import=%{public}s", __p, 0x16u);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
      if (SHIBYTE(v46) < 0) {
        operator delete(*(void **)buf);
      }
    }
LABEL_57:

    return a4;
  }
  return 0;
}

void sub_1B045A5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::addTrack(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v6 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 88))(__p);
    uint64_t v7 = SHIBYTE(v46) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v50 = v7;
    __int16 v51 = 1024;
    int v52 = a3;
    _os_log_impl(&dword_1B022D000, v6, OS_LOG_TYPE_DEFAULT, "adding track %{public}s, processCollectionsAsStandaloneEntities=%{BOOL}u", buf, 0x12u);
    if (SHIBYTE(v46) < 0) {
      operator delete(__p[0]);
    }
  }

  if ([*(id *)(a1 + 1576) count])
  {
    if (a3) {
      goto LABEL_14;
    }
  }
  else if (*(void *)(a1 + 1560) == *(void *)(a1 + 1552) || (a3 & 1) != 0)
  {
    goto LABEL_13;
  }
  uint64_t result = ML3ImportSession::flush((ML3ImportSession *)a1, 0);
  if (!result) {
    return result;
  }
LABEL_13:
  if (a3)
  {
LABEL_14:
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    v44[0] = *a2;
    v44[1] = (uint64_t)v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v10 = ML3ImportSession::_prepareTrackForImport(a1, v44, 0, 0);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v10) {
      return 0;
    }
    uint64_t v11 = *a2;
    uint64_t TrackPersistentID = *(void *)(*a2 + 8);
    if (*(unsigned char *)(*a2 + 16)) {
      ++*(_DWORD *)(a1 + 156);
    }
    else {
      ++*(_DWORD *)(a1 + 152);
    }
LABEL_45:
    if (*(unsigned char *)(a1 + 1512))
    {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>((void *)(a1 + 728), TrackPersistentID);
      uint64_t v11 = *a2;
    }
    uint64_t v19 = (std::__shared_weak_count *)a2[1];
    v41[0] = v11;
    v41[1] = (uint64_t)v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v20 = ML3ImportSession::_prepareTrackData(a1, v41, a3);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v20)
    {
      int v21 = *(void **)(a1 + 1584);
      uint64_t v22 = [NSNumber numberWithLongLong:TrackPersistentID];
      [v21 addObject:v22];

      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 576, TrackPersistentID, TrackPersistentID);
      uint64_t v23 = *(uint64_t **)(a1 + 1536);
      unint64_t v24 = *(void *)(a1 + 1544);
      if ((unint64_t)v23 >= v24)
      {
        uint64_t v28 = *(void *)(a1 + 1528);
        uint64_t v29 = ((uint64_t)v23 - v28) >> 4;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60) {
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v24 - v28;
        if (v31 >> 3 > v30) {
          unint64_t v30 = v31 >> 3;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        uint64_t v48 = a1 + 1544;
        std::string v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v32);
        uint64_t v34 = &v33[16 * v29];
        __p[0] = v33;
        __p[1] = v34;
        int v47 = &v33[16 * v35];
        long long v36 = *(_OWORD *)a2;
        *(_OWORD *)uint64_t v34 = *(_OWORD *)a2;
        if (*((void *)&v36 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v46 = v34 + 16;
        std::vector<std::shared_ptr<ML3ImportItem>>::__swap_out_circular_buffer((void *)(a1 + 1528), __p);
        int v26 = *(void **)(a1 + 1536);
        std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        uint64_t *v23 = *a2;
        uint64_t v25 = a2[1];
        v23[1] = v25;
        if (v25) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        }
        int v26 = v23 + 2;
        *(void *)(a1 + 1536) = v23 + 2;
      }
      *(void *)(a1 + 1536) = v26;
      uint64_t v37 = *a2;
      char v38 = (std::__shared_weak_count *)a2[1];
      v40[0] = v37;
      v40[1] = v38;
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ML3ImportSession::_addTrackDataToSourceMaps(a1, v40);
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      if (*(void *)(a1 + 1536) - *(void *)(a1 + 1528) < 0x3E71uLL) {
        return 1;
      }
      int v39 = _os_feature_enabled_impl();
      return ML3ImportSession::flush((ML3ImportSession *)a1, v39);
    }
    BOOL v27 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1B022D000, v27, OS_LOG_TYPE_ERROR, "failed to prepare track data", (uint8_t *)__p, 2u);
    }

    return 0;
  }
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  v43[0] = *a2;
  v43[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t TrackPersistentID = ML3ImportSession::_getTrackPersistentID(a1, v43);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (!TrackPersistentID)
  {
    BOOL v16 = 0;
LABEL_37:
    ++*(_DWORD *)(a1 + 152);
    uint64_t v17 = *a2;
    unint64_t v18 = (std::__shared_weak_count *)a2[1];
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t TrackPersistentID = ML3ImportSession::_newTrackPersistentID(*(void **)(a1 + 72), v17, v18);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    goto LABEL_44;
  }
  if (!std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 576), TrackPersistentID))
  {
    BOOL v16 = TrackPersistentID != 0;
    goto LABEL_43;
  }
  int v14 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_ERROR, "pid collision detected - flushing", (uint8_t *)__p, 2u);
  }

  uint64_t result = ML3ImportSession::flush((ML3ImportSession *)a1, 0);
  if (result)
  {
    char v15 = (std::__shared_weak_count *)a2[1];
    v42[0] = *a2;
    v42[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t TrackPersistentID = ML3ImportSession::_getTrackPersistentID(a1, v42);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    BOOL v16 = TrackPersistentID != 0;
    if (!TrackPersistentID) {
      goto LABEL_37;
    }
LABEL_43:
    ++*(_DWORD *)(a1 + 156);
LABEL_44:
    uint64_t v11 = *a2;
    *(void *)(v11 + _Block_object_dispose(&STACK[0x210], 8) = TrackPersistentID;
    *(unsigned char *)(v11 + 16) = v16;
    goto LABEL_45;
  }
  return result;
}

void sub_1B045ABB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_prepareTrackData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  id v6 = (std::__shared_weak_count *)a2[1];
  v129[0] = *a2;
  v129[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = ML3ImportSession::_prepareTrackSortData(a1, v129);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v11 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_ERROR, "failed to prepare track sort data", buf, 2u);
    }
    goto LABEL_11;
  }
  uint64_t v9 = (uint64_t *)*a2;
  BOOL v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v10 = v9[1];
    unint64_t v140 = v10;
    if (!a3)
    {
      memset(v162, 0, sizeof(v162));
      memset(buf, 0, sizeof(buf));
      std::string::size_type v138 = v9;
      std::string::size_type v139 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v10 = v9[1];
    unint64_t v140 = v10;
    if ((a3 & 1) == 0)
    {
      memset(v162, 0, sizeof(v162));
      memset(buf, 0, sizeof(buf));
      std::string::size_type v138 = v9;
      std::string::size_type v139 = 0;
LABEL_19:
      ML3ImportSession::_getArtistInfo(&__p, a1, &v138);
      BOOL v16 = (uint64_t *)__p;
      if (__p)
      {
        uint64_t v17 = v145;
        *(void *)uint64_t v151 = __p;
        *(void *)&v151[8] = v145;
        std::string __p = 0;
        uint64_t v145 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)v151);
        BOOL v16 = *(uint64_t **)v151;
        uint64_t v17 = *(void *)&v151[8];
      }
      *(void *)std::string buf = v16;
      *(void *)&uint8_t buf[8] = v17;
      if (v145) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v145);
      }
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        std::string::size_type v136 = v9;
        std::string::size_type v137 = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        std::string::size_type v136 = v9;
        std::string::size_type v137 = 0;
      }
      ML3ImportSession::_getAlbumArtistInfo(&__p, a1, &v136);
      char v20 = (uint64_t *)__p;
      if (__p)
      {
        uint64_t v21 = v145;
        *(void *)uint64_t v151 = __p;
        *(void *)&v151[8] = v145;
        std::string __p = 0;
        uint64_t v145 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)v151);
        char v20 = *(uint64_t **)v151;
        uint64_t v21 = *(void *)&v151[8];
      }
      *(void *)&uint8_t buf[16] = v20;
      *(void *)&uint8_t buf[24] = v21;
      if (v145) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v145);
      }
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        uint64_t v134 = v9;
        uint64_t v135 = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v134 = v9;
        uint64_t v135 = 0;
      }
      ML3ImportSession::_getAlbumInfo(&__p, a1, &v134, *v20);
      uint64_t v22 = (uint64_t *)__p;
      if (__p)
      {
        uint64_t v23 = v145;
        *(void *)uint64_t v151 = __p;
        *(void *)&v151[8] = v145;
        std::string __p = 0;
        uint64_t v145 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyAlbum((ML3ImportSession *)v151);
        uint64_t v22 = *(uint64_t **)v151;
        uint64_t v23 = *(void *)&v151[8];
      }
      *(void *)&v162[0] = v22;
      *((void *)&v162[0] + 1) = v23;
      unint64_t v121 = (std::__shared_weak_count *)v23;
      if (v145) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v145);
      }
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        uint64_t v132 = v9;
        int v133 = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v132 = v9;
        int v133 = 0;
      }
      std::string::size_type v124 = (std::__shared_weak_count *)v21;
      ML3ImportSession::_getComposerInfo(&__p, a1, &v132);
      std::string::size_type v116 = v16;
      unint64_t v24 = (uint64_t *)__p;
      if (__p)
      {
        uint64_t v25 = (std::__shared_weak_count *)v145;
        std::string __p = 0;
        uint64_t v145 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyComposer((ML3ImportSession *)v151);
        unint64_t v24 = *(uint64_t **)v151;
        uint64_t v25 = *(std::__shared_weak_count **)&v151[8];
      }
      *(void *)&v162[1] = v24;
      *((void *)&v162[1] + 1) = v25;
      if (v145) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v145);
      }
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        id v130 = v9;
        uint64_t v131 = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        id v130 = v9;
        uint64_t v131 = 0;
      }
      uint64_t v118 = (std::__shared_weak_count *)v17;
      ML3ImportSession::_getGenreInfo(&__p, a1, &v130);
      int v26 = (uint64_t *)__p;
      if (__p)
      {
        BOOL v27 = (std::__shared_weak_count *)v145;
        std::string __p = 0;
        uint64_t v145 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyGenre((ML3ImportSession *)v151);
        int v26 = *(uint64_t **)v151;
        BOOL v27 = *(std::__shared_weak_count **)&v151[8];
      }
      *(void *)&v162[2] = v26;
      *((void *)&v162[2] + 1) = v27;
      if (v145) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v145);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      uint64_t v28 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 336, v10, &v140);
      ML3CollectionInfoSet::operator=(v28 + 3, (uint64_t *)buf);
      uint64_t v29 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = *v116;
        uint64_t v31 = *v20;
        uint64_t v32 = *v24;
        uint64_t v33 = *v26;
        uint64_t v34 = *v22;
        *(_DWORD *)uint64_t v151 = 134219008;
        *(void *)&v151[4] = v30;
        *(_WORD *)&v151[12] = 2048;
        *(void *)&v151[14] = v31;
        *(_WORD *)&v151[22] = 2048;
        *(void *)&v151[24] = v32;
        *(_WORD *)uint64_t v152 = 2048;
        *(void *)&v152[2] = v33;
        __int16 v153 = 2048;
        uint64_t v154 = v34;
        _os_log_impl(&dword_1B022D000, v29, OS_LOG_TYPE_DEFAULT, "gathered collection pids: artistPID=%lld, albumArtistPID=%lld, composerPID=%lld, genrePID=%lld, albumPID=%lld", v151, 0x34u);
      }

      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      if (v124) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v124);
      }
      if (v118)
      {
        uint64_t v35 = v118;
LABEL_134:
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        goto LABEL_135;
      }
      goto LABEL_135;
    }
  }
  id v12 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((void *)(a1 + 336), v10);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v159 = v9;
    std::string::size_type v160 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ML3ImportSession::_getComposerInfo(v151, a1, &v159);
    uint64_t v14 = *(void *)v151;
    if (*(void *)v151)
    {
      uint64_t v15 = *(void *)&v151[8];
      *(void *)uint64_t v151 = 0;
      *(void *)&v151[8] = 0;
    }
    else
    {
      ML3ImportSession::_getDefaultEmptyComposer((ML3ImportSession *)buf);
      uint64_t v14 = *(void *)buf;
      uint64_t v15 = *(void *)&buf[8];
    }
    long long v36 = (std::__shared_weak_count *)v13[10];
    v13[9] = v14;
    v13[10] = v15;
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (*(void *)&v151[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v151[8]);
    }
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      char v149 = v9;
      uint64_t v150 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      char v149 = v9;
      uint64_t v150 = 0;
    }
    ML3ImportSession::_getGenreInfo(v151, a1, &v149);
    uint64_t v37 = *(void *)v151;
    if (*(void *)v151)
    {
      uint64_t v38 = *(void *)&v151[8];
      *(void *)uint64_t v151 = 0;
      *(void *)&v151[8] = 0;
    }
    else
    {
      ML3ImportSession::_getDefaultEmptyGenre((ML3ImportSession *)buf);
      uint64_t v37 = *(void *)buf;
      uint64_t v38 = *(void *)&buf[8];
    }
    int v39 = (std::__shared_weak_count *)v13[12];
    v13[11] = v37;
    v13[12] = v38;
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (*(void *)&v151[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v151[8]);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t v40 = v13[3];
    uint64_t v41 = v13[5];
    uint64_t v42 = v13[7];
    uint64_t v43 = v13[11];
    uint64_t v44 = v13[9];
    if (v42 && v43 && v40 && v44 && v41)
    {
      uint64_t v45 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v46 = *(void *)v13[3];
        uint64_t v47 = *(void *)v13[5];
        uint64_t v48 = *(void *)v13[9];
        uint64_t v49 = *(void *)v13[11];
        uint64_t v50 = *(void *)v13[7];
        *(_DWORD *)std::string buf = 134219008;
        *(void *)&uint8_t buf[4] = v46;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v47;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&uint8_t buf[24] = v48;
        LOWORD(v162[0]) = 2048;
        *(void *)((char *)v162 + 2) = v49;
        WORD5(v162[0]) = 2048;
        *(void *)((char *)v162 + 12) = v50;
        _os_log_impl(&dword_1B022D000, v45, OS_LOG_TYPE_DEFAULT, "gathered collection pids in the new importer code path: artistPID=%lld, albumArtistPID=%lld, composerPID=%lld, genrePID=%lld, albumPID=%lld", buf, 0x34u);
      }

      goto LABEL_135;
    }
    *(unsigned char *)(a1 + 1521) = 1;
    __int16 v51 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v40 != 0;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v41 != 0;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v44 != 0;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v43 != 0;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v42 != 0;
      _os_log_impl(&dword_1B022D000, v51, OS_LOG_TYPE_DEFAULT, "one OR more collections are not set correctly for track: artist=%{BOOL}u, albumArtist=%{BOOL}u, composer=%{BOOL}u, genre=%{BOOL}u, album=%{BOOL}u", buf, 0x20u);
    }

    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t v11 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1B022D000, v11, OS_LOG_TYPE_ERROR, "failed to prepare collections", buf, 2u);
    }
LABEL_11:

    return 0;
  }
  *(unsigned char *)(a1 + 1521) = 1;
  memset(&v162[1], 0, 32);
  ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)v151);
  long long v123 = *(_OWORD *)v151;
  *(_OWORD *)std::string buf = *(_OWORD *)v151;
  ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)v151);
  long long v120 = *(_OWORD *)v151;
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)v151;
  ML3ImportSession::_getDefaultEmptyAlbum((ML3ImportSession *)v151);
  long long v117 = *(_OWORD *)v151;
  v162[0] = *(_OWORD *)v151;
  std::string::size_type v142 = v9;
  uint64_t v143 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ML3ImportSession::_getComposerInfo(&__p, a1, &v142);
  unint64_t v18 = (uint64_t *)__p;
  if (__p)
  {
    uint64_t v19 = (std::__shared_weak_count *)v145;
    *(void *)uint64_t v151 = __p;
    *(void *)&v151[8] = v145;
    std::string __p = 0;
    uint64_t v145 = 0;
  }
  else
  {
    ML3ImportSession::_getDefaultEmptyComposer((ML3ImportSession *)v151);
    unint64_t v18 = *(uint64_t **)v151;
    uint64_t v19 = *(std::__shared_weak_count **)&v151[8];
  }
  *(void *)&v162[1] = v18;
  *((void *)&v162[1] + 1) = v19;
  if (v145) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v145);
  }
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v141.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = (unint64_t)v9;
  }
  ML3ImportSession::_getGenreInfo(&__p, a1, (uint64_t **)&v141);
  int v52 = (uint64_t *)__p;
  if (__p)
  {
    uint64_t v53 = (std::__shared_weak_count *)v145;
    std::string __p = 0;
    uint64_t v145 = 0;
  }
  else
  {
    ML3ImportSession::_getDefaultEmptyGenre((ML3ImportSession *)v151);
    int v52 = *(uint64_t **)v151;
    uint64_t v53 = *(std::__shared_weak_count **)&v151[8];
  }
  *(void *)&v162[2] = v52;
  *((void *)&v162[2] + 1) = v53;
  if (v145) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v145);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v54 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 336, v10, &v140);
  ML3CollectionInfoSet::operator=(v54 + 3, (uint64_t *)buf);
  uint64_t v55 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t *))(*v9 + 88))(&__p, v9);
    p_p = &__p;
    if (SHIBYTE(v146) < 0) {
      p_p = __p;
    }
    uint64_t v57 = *(void *)v123;
    uint64_t v58 = *(void *)v120;
    uint64_t v59 = *v18;
    uint64_t v60 = *v52;
    uint64_t v61 = *(void *)v117;
    *(_DWORD *)uint64_t v151 = 136447746;
    *(void *)&v151[4] = p_p;
    *(_WORD *)&v151[12] = 2048;
    *(void *)&v151[14] = v10;
    *(_WORD *)&v151[22] = 2048;
    *(void *)&v151[24] = v57;
    *(_WORD *)uint64_t v152 = 2048;
    *(void *)&v152[2] = v58;
    __int16 v153 = 2048;
    uint64_t v154 = v59;
    __int16 v155 = 2048;
    uint64_t v156 = v60;
    __int16 v157 = 2048;
    uint64_t v158 = v61;
    _os_log_impl(&dword_1B022D000, v55, OS_LOG_TYPE_DEFAULT, "Could not find collections for trackImportItem=%{public}s, trackPersistentID=%lld: artistPID=%lld, albumArtistPID=%lld, composerPID=%lld, genrePID=%lld, albumPID=%lld", v151, 0x48u);
    if (SHIBYTE(v146) < 0) {
      operator delete(__p);
    }
  }

  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (*((void *)&v117 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v117 + 1));
  }
  if (*((void *)&v120 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v120 + 1));
  }
  if (*((void *)&v123 + 1))
  {
    uint64_t v35 = (std::__shared_weak_count *)*((void *)&v123 + 1);
    goto LABEL_134;
  }
LABEL_135:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::string v62 = (std::__shared_weak_count *)a2[1];
  v128[0] = *a2;
  v128[1] = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v63 = ML3ImportSession::_prepareArtwork(a1, (uint64_t)v128, 167772183, 1uLL);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if ((v63 & 1) == 0)
  {
    uint64_t v112 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1B022D000, v112, OS_LOG_TYPE_ERROR, "failed to prepare item artwork", buf, 2u);
    }

    return 0;
  }
  long long v64 = (std::__shared_weak_count *)a2[1];
  v127[0] = *a2;
  v127[1] = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v65 = ML3ImportSession::_prepareArtwork(a1, (uint64_t)v127, 167772184, 2uLL);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if ((v65 & 1) == 0)
  {
    uint64_t v113 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1B022D000, v113, OS_LOG_TYPE_ERROR, "failed to prepare item screenshot", buf, 2u);
    }

    return 0;
  }
  uint64_t v66 = (std::__shared_weak_count *)a2[1];
  v126[0] = *a2;
  v126[1] = v66;
  if (v66) {
    atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v67 = ML3ImportSession::_prepareArtworkFromSecondarySource(a1, v126, 167772187, 167772188, 1uLL);
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if ((v67 & 1) == 0)
  {
    uint64_t v114 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1B022D000, v114, OS_LOG_TYPE_ERROR, "failed to prepare item secondary source artwork", buf, 2u);
    }

    return 0;
  }
  std::string v69 = (void *)*a2;
  uint64_t v68 = (std::__shared_weak_count *)a2[1];
  if (v68) {
    atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v70 = (*(uint64_t (**)(void *, uint64_t))(*v69 + 32))(v69, 16777217);
  if (v70 == 0x10000 || v70 == 2)
  {
    uint64_t v71 = v69[1];
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x5812000000;
    *(void *)&uint8_t buf[24] = __Block_byref_object_copy__270;
    *(void *)&v162[0] = __Block_byref_object_dispose__271;
    memset((char *)v162 + 8, 0, 40);
    int v163 = 1065353216;
    __int16 v72 = *(void **)(a1 + 16);
    uint64_t v122 = v71;
    objc_msgSend(NSNumber, "numberWithLongLong:");
    std::string v73 = (uint64_t *)objc_claimAutoreleasedReturnValue();
    char v149 = v73;
    uint64_t v74 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v149 count:1];
    std::string::size_type v115 = [v72 executeQuery:@"SELECT booklet_pid FROM booklet WHERE item_pid = ?" withParameters:v74];

    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v145 = 3221225472;
    int v146 = ___ZN16ML3ImportSession21_prepareTrackBookletsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
    std::string::size_type v147 = &unk_1E5FB77B8;
    std::string::size_type v148 = buf;
    [v115 enumerateRowsWithBlock:&__p];
    (*(void (**)(uint64_t **__return_ptr, void *, uint64_t))(*v69 + 80))(&v142, v69, 385875969);
    std::string v75 = v142;
    if (v142 != (uint64_t *)v143)
    {
      uint64_t v119 = (void *)(a1 + 2672);
      do
      {
        long long v125 = *(_OWORD *)v75;
        uint64_t v76 = (std::__shared_weak_count *)v75[1];
        if (v76) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v75[1] + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(unsigned char *__return_ptr, void, uint64_t))(*(void *)v125 + 24))(v151, v125, 385875970);
        if ((v152[7] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)&v151[16], *(std::string::size_type *)&v151[24]);
          *(void *)uint64_t v151 = &unk_1F08C3230;
          if ((v152[7] & 0x80000000) != 0) {
            operator delete(*(void **)&v151[16]);
          }
        }
        else
        {
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = *(_OWORD *)&v151[16];
          v141.__r_.__value_.__r.__words[2] = *(void *)v152;
        }
        uint64_t v77 = (*(uint64_t (**)(void, uint64_t))(*(void *)v125 + 32))(v125, 385875971);
        BOOL v78 = +[ML3ComparisonPredicate predicateWithProperty:@"store_item_id" equalToInt64:v77];
        uint64_t v159 = v78;
        uint64_t v79 = +[ML3ComparisonPredicate predicateWithProperty:@"item_pid" equalToInt64:v122];
        std::string::size_type v160 = v79;
        uint64_t v80 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v159 count:2];
        uint64_t v81 = +[ML3CompoundPredicate predicateMatchingPredicates:v80];

        uint64_t v82 = +[ML3Entity unrestrictedAllItemsQueryWithlibrary:*(void *)(a1 + 8) predicate:v81 orderingTerms:0];
        unint64_t v83 = [v82 anyEntityPersistentID];
        std::string::size_type v84 = "matched";
        if (!v83)
        {
          unint64_t v83 = [*(id *)(a1 + 104) nextPersistentID];
          std::string::size_type v84 = "new";
        }
        *(void *)(v125 + _Block_object_dispose(&STACK[0x210], 8) = v83;
        uint64_t v85 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v86 = &v141;
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v86 = (std::string *)v141.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v151 = 134219010;
          *(void *)&v151[4] = v83;
          *(_WORD *)&v151[12] = 2082;
          *(void *)&v151[14] = v84;
          *(_WORD *)&v151[22] = 2048;
          *(void *)&v151[24] = v122;
          *(_WORD *)uint64_t v152 = 2082;
          *(void *)&v152[2] = v86;
          __int16 v153 = 2048;
          uint64_t v154 = v77;
          _os_log_impl(&dword_1B022D000, v85, OS_LOG_TYPE_DEFAULT, "insert/replace booklet: pid=%lld (%{public}s) item_pid=%lld, name=%{public}s, store_item_id=%lld", v151, 0x34u);
        }

        std::string::size_type v87 = *(_OWORD **)(a1 + 2680);
        unint64_t v88 = *(void *)(a1 + 2688);
        if ((unint64_t)v87 >= v88)
        {
          uint64_t v90 = ((uint64_t)v87 - *v119) >> 4;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 60) {
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v92 = v88 - *v119;
          if (v92 >> 3 > v91) {
            unint64_t v91 = v92 >> 3;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v93 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          *(void *)uint64_t v152 = a1 + 2688;
          long long v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v93);
          long long v95 = &v94[16 * v90];
          *(void *)uint64_t v151 = v94;
          *(void *)&v151[8] = v95;
          *(void *)&v151[24] = &v94[16 * v96];
          *(_OWORD *)long long v95 = v125;
          if (v76) {
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&v151[16] = v95 + 16;
          std::vector<std::shared_ptr<ML3ImportItem>>::__swap_out_circular_buffer(v119, v151);
          long long v89 = *(_OWORD **)(a1 + 2680);
          std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)v151);
        }
        else
        {
          *std::string::size_type v87 = v125;
          if (v76) {
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v89 = v87 + 1;
          *(void *)(a1 + 268sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v87 + 1;
        }
        *(void *)(a1 + 268sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v89;
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>((void *)(*(void *)&buf[8] + 48), v83);

        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
        if (v76) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v76);
        }
        v75 += 2;
      }
      while (v75 != (uint64_t *)v143);
    }
    for (uint64_t i = *(void **)(*(void *)&buf[8] + 64); i; uint64_t i = (void *)*i)
    {
      uint64_t v98 = i[2];
      std::string::size_type v99 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v151 = 134218240;
        *(void *)&v151[4] = v98;
        *(_WORD *)&v151[12] = 2048;
        *(void *)&v151[14] = v122;
        _os_log_impl(&dword_1B022D000, v99, OS_LOG_TYPE_DEFAULT, "delete booklet: pid=%lld, item_pid=%lld", v151, 0x16u);
      }

      uint64_t v100 = *(char **)(a1 + 2704);
      unint64_t v101 = *(void *)(a1 + 2712);
      if ((unint64_t)v100 >= v101)
      {
        uint64_t v103 = *(char **)(a1 + 2696);
        uint64_t v104 = (v100 - v103) >> 3;
        unint64_t v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 61) {
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v106 = v101 - (void)v103;
        if (v106 >> 2 > v105) {
          unint64_t v105 = v106 >> 2;
        }
        if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v107 = v105;
        }
        if (v107)
        {
          unint64_t v107 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v107);
          uint64_t v100 = *(char **)(a1 + 2704);
          uint64_t v103 = *(char **)(a1 + 2696);
        }
        else
        {
          uint64_t v108 = 0;
        }
        uint64_t v109 = (void *)(v107 + 8 * v104);
        *uint64_t v109 = v98;
        uint64_t v102 = v109 + 1;
        while (v100 != v103)
        {
          uint64_t v110 = *((void *)v100 - 1);
          v100 -= 8;
          *--uint64_t v109 = v110;
        }
        *(void *)(a1 + 2696) = v109;
        *(void *)(a1 + 2704) = v102;
        *(void *)(a1 + 2712) = v107 + 8 * v108;
        if (v103) {
          operator delete(v103);
        }
      }
      else
      {
        *(void *)uint64_t v100 = v98;
        uint64_t v102 = v100 + 8;
      }
      *(void *)(a1 + 2704) = v102;
    }
    *(void *)uint64_t v151 = &v142;
    std::vector<std::shared_ptr<ML3ImportItem>>::__destroy_vector::operator()[abi:ne180100]((void ***)v151);

    _Block_object_dispose(buf, 8);
    std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v162[1]);
  }
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  return 1;
}

void sub_1B045BEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Block_object_dispose((const void *)(v12 - 192), 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_prepareArtwork(uint64_t a1, uint64_t a2, uint64_t a3, std::string::size_type a4)
{
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 24))(&v14);
  if (v15)
  {
    uint64_t v7 = +[ML3MusicLibrary artworkSourceTypeForTrackSource:*(unsigned int *)(a1 + 32)];
    std::string::size_type v8 = *(void *)(*(void *)a2 + 8);
    uint64_t v11 = &unk_1F08C3230;
    char v12 = v15;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v16;
    }
    uint64_t inserted = ML3ImportSession::_insertIntoArtworkTokenTable(a1, v8, (uint64_t)&v11, v7, a4 == 5, a4);
    uint64_t v11 = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t inserted = 1;
  }
  uint64_t v14 = &unk_1F08C3230;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return inserted;
}

void sub_1B045C1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_prepareArtworkFromSecondarySource(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, std::string::size_type a5)
{
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 24))(&v16);
  if (v17 && (uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 32))(*a2, a4)) != 0)
  {
    std::string::size_type v10 = *(void *)(*a2 + 8);
    uint64_t v13 = &unk_1F08C3230;
    char v14 = v17;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v18;
    }
    uint64_t inserted = ML3ImportSession::_insertIntoArtworkTokenTable(a1, v10, (uint64_t)&v13, v9, a5 == 5, a5);
    uint64_t v13 = &unk_1F08C3230;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t inserted = 1;
  }
  std::string v16 = &unk_1F08C3230;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return inserted;
}

void sub_1B045C3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__270(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 4_Block_object_dispose(&STACK[0x210], 8) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 8sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__271(uint64_t a1)
{
  return std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 48);
}

void ___ZN16ML3ImportSession21_prepareTrackBookletsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = [v4 int64ForColumnIndex:0];
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(*(void *)(*(void *)(a1 + 32) + 8) + 48, v3, v3);
}

void sub_1B045C4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_insertIntoArtworkTokenTable(uint64_t a1, std::string::size_type a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string::size_type a6)
{
  v80[0] = *MEMORY[0x1E4F143B8];
  std::string::size_type v10 = (std::string *)(a3 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = *(void *)(a3 + 32);
  }
  if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v64.__r_.__value_.__s + 23)) {
      goto LABEL_6;
    }
LABEL_9:
    char v14 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v64.__r_.__value_.__l.__data_) = 134218752;
      *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = a2;
      WORD2(v64.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v64.__r_.__value_.__r.__words[1] + 6) = a5;
      WORD1(v64.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v64.__r_.__value_.__r.__words[2]) = a4;
      *(_WORD *)char v65 = 1024;
      *(_DWORD *)&void v65[2] = a6;
      _os_log_impl(&dword_1B022D000, v14, OS_LOG_TYPE_DEFAULT, "Delete artwork_token: pid=%lld entity_type=%d source=%d type=%d", (uint8_t *)&v64, 0x1Eu);
    }

    char v15 = *(void **)(a1 + 16);
    std::string v16 = [NSNumber numberWithInteger:a4];
    v63[0] = v16;
    char v17 = [NSNumber numberWithInteger:a6];
    v63[1] = v17;
    std::string v18 = [NSNumber numberWithLongLong:a2];
    uint64_t v63[2] = v18;
    uint64_t v19 = [NSNumber numberWithInteger:a5];
    v63[3] = v19;
    char v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v63 count:4];
    id v53 = 0;
    LODWORD(v15) = [v15 executeUpdate:@"DELETE FROM artwork_token WHERE artwork_source_type = ? AND artwork_type = ? AND entity_pid = ? AND entity_type = ?" withParameters:v20 error:&v53];
    id v21 = v53;

    if (v15) {
      goto LABEL_68;
    }
    goto LABEL_12;
  }
  std::string::size_type size = v64.__r_.__value_.__l.__size_;
  operator delete(v64.__r_.__value_.__l.__data_);
  if (!size) {
    goto LABEL_9;
  }
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "INSERT OR REPLACE INTO artwork_token (artwork_token,artwork_source_type,artwork_type,entity_pid,entity_type)");
  int v11 = *(char *)(a1 + 1511);
  if (v11 < 0) {
    uint64_t v12 = *(void *)(a1 + 1496);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 1511);
  }
  unint64_t v24 = (void **)(a1 + 1488);
  if (!v12)
  {
    uint64_t v50 = a4;
    int v25 = (char)v60;
    if ((v60 & 0x80u) == 0) {
      size_t v26 = v60;
    }
    else {
      size_t v26 = (size_t)__p[1];
    }
    unint64_t v27 = v26 + 9;
    if (v26 + 9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v27 >= 0x17)
    {
      uint64_t v49 = a5;
      uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v29 = v27 | 7;
      }
      uint64_t v30 = v29 + 1;
      uint64_t v28 = operator new(v29 + 1);
      v57.__r_.__value_.__l.__size_ = v26 + 9;
      v57.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      a5 = v49;
    }
    else
    {
      memset(&v57, 0, sizeof(v57));
      *((unsigned char *)&v57.__r_.__value_.__s + 23) = v26 + 9;
      if ((v27 & 0x80u) == 0) {
        uint64_t v28 = &v57;
      }
      else {
        uint64_t v28 = 0;
      }
      if (!v26) {
        goto LABEL_36;
      }
    }
    if (v25 >= 0) {
      uint64_t v31 = __p;
    }
    else {
      uint64_t v31 = (void **)__p[0];
    }
    memmove(v28, v31, v26);
LABEL_36:
    unsigned int v32 = 0;
    strcpy((char *)v28 + v26, " VALUES (");
    a4 = v50;
    do
    {
      std::string::push_back(&v57, 63);
      if (v32 <= 3) {
        std::string::push_back(&v57, 44);
      }
      ++v32;
    }
    while (v32 != 5);
    std::string::push_back(&v57, 41);
    if (*(char *)(a1 + 1511) < 0) {
      operator delete(*v24);
    }
    *(void *)(a1 + 1504) = *((void *)&v57.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v24 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
    *((unsigned char *)&v57.__r_.__value_.__s + 23) = 0;
    v57.__r_.__value_.__s.__data_[0] = 0;
    if ((*(unsigned char *)(a1 + 1511) & 0x80) == 0) {
      goto LABEL_18;
    }
LABEL_43:
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a1 + 1488), *(void *)(a1 + 1496));
    goto LABEL_44;
  }
  if ((v11 & 0x80) != 0) {
    goto LABEL_43;
  }
LABEL_18:
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)v24;
  v58.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1504);
LABEL_44:
  if (!v12 && SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a3 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else {
    std::string v64 = *v10;
  }
  *(_DWORD *)char v65 = 3;
  LOBYTE(v67) = 1;
  uint64_t v68 = a4;
  int v69 = 0;
  char v70 = 1;
  std::string::size_type v71 = a6;
  int v72 = 0;
  char v73 = 1;
  std::string::size_type v74 = a2;
  int v75 = 0;
  char v76 = 1;
  v77[0] = a5;
  int v78 = 0;
  v79[0] = 1;
  uint64_t v55 = 0;
  long long v56 = 0;
  uint64_t v54 = 0;
  uint64_t v61 = (void **)&v54;
  char v62 = 0;
  uint64_t v54 = (char *)operator new(0xC8uLL);
  uint64_t v55 = (uint64_t)v54;
  long long v56 = v54 + 200;
  uint64_t v33 = 0;
  uint64_t v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)&v56, (uint64_t)&v64, (uint64_t)v80, (uint64_t)v54);
  do
  {
    if (v79[v33 * 8]) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77[v33]);
    }
    v33 -= 5;
  }
  while (v33 != -25);
  uint64_t v34 = NSString;
  if (*(char *)(a3 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else {
    std::string v64 = *v10;
  }
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &v64;
  }
  else {
    uint64_t v35 = (std::string *)v64.__r_.__value_.__r.__words[0];
  }
  long long v36 = [v34 stringWithUTF8String:v35];
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  uint64_t v37 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v64.__r_.__value_.__l.__data_) = 134219010;
    *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = a2;
    WORD2(v64.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v64.__r_.__value_.__r.__words[1] + 6) = a5;
    WORD1(v64.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v64.__r_.__value_.__r.__words[2]) = a4;
    *(_WORD *)char v65 = 1024;
    *(_DWORD *)&void v65[2] = a6;
    __int16 v66 = 2114;
    char v67 = v36;
    _os_log_impl(&dword_1B022D000, v37, OS_LOG_TYPE_DEFAULT, "Insert/replace artwork_token: pid=%lld entity_type=%d source=%d type=%d token=%{public}@", (uint8_t *)&v64, 0x28u);
  }

  char v38 = ML3ImportExecuteVariadicStatement(*(void **)(a1 + 16), (const UInt8 *)&v58, (uint64_t *)&v54);
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((char)v60 < 0)
  {
    operator delete(__p[0]);
    if (v38) {
      goto LABEL_68;
    }
  }
  else if (v38)
  {
LABEL_68:
    int v39 = *(std::string::size_type **)(a1 + 704);
    unint64_t v40 = *(void *)(a1 + 712);
    if ((unint64_t)v39 >= v40)
    {
      uint64_t v42 = *(char **)(a1 + 696);
      uint64_t v43 = ((char *)v39 - v42) >> 4;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v45 = v40 - (void)v42;
      if (v45 >> 3 > v44) {
        unint64_t v44 = v45 >> 3;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        if (v46 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v47 = (char *)operator new(16 * v46);
      }
      else
      {
        uint64_t v47 = 0;
      }
      uint64_t v48 = (std::string::size_type *)&v47[16 * v43];
      *uint64_t v48 = a2;
      v48[1] = a6;
      uint64_t v41 = v48 + 2;
      if (v39 != (std::string::size_type *)v42)
      {
        do
        {
          *((_OWORD *)v48 - 1) = *((_OWORD *)v39 - 1);
          v48 -= 2;
          v39 -= 2;
        }
        while (v39 != (std::string::size_type *)v42);
        int v39 = *(std::string::size_type **)(a1 + 696);
      }
      *(void *)(a1 + 696) = v48;
      *(void *)(a1 + 704) = v41;
      *(void *)(a1 + 712) = &v47[16 * v46];
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      std::string::size_type *v39 = a2;
      v39[1] = a6;
      uint64_t v41 = v39 + 2;
    }
    *(void *)(a1 + 704) = v41;
    return 1;
  }
LABEL_12:
  uint64_t v22 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v64.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = a2;
    _os_log_impl(&dword_1B022D000, v22, OS_LOG_TYPE_ERROR, "failed to update artwork_token entry for track. track_pid=%lld", (uint8_t *)&v64, 0xCu);
  }

  return 0;
}

void sub_1B045CC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void ML3ImportSession::_getComposerInfo(void *a1, uint64_t a2, void *a3)
{
  v204[1] = *MEMORY[0x1E4F143B8];
  uint64_t v175 = 0;
  int v176 = &v175;
  uint64_t v177 = 0x4012000000;
  int v178 = __Block_byref_object_copy__376;
  char v179 = __Block_byref_object_dispose__377;
  uint64_t v180 = "";
  uint64_t v181 = 0;
  uint64_t v182 = 0;
  uint64_t v169 = 0;
  char v170 = &v169;
  uint64_t v171 = 0x3032000000;
  std::string::size_type v172 = __Block_byref_object_copy__286;
  char v173 = __Block_byref_object_dispose__287;
  id v174 = 0;
  uint64_t v162 = 0;
  int v163 = (const UInt8 *)&v162;
  uint64_t v164 = 0x4812000000;
  uint64_t v165 = __Block_byref_object_copy__288;
  std::string::size_type v166 = __Block_byref_object_dispose__289;
  uint64_t v167 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string v168 = *(std::string *)&buf[16];
  }
  uint64_t v155 = 0;
  uint64_t v156 = (const std::string *)&v155;
  uint64_t v157 = 0x4812000000;
  uint64_t v158 = __Block_byref_object_copy__288;
  uint64_t v159 = __Block_byref_object_dispose__289;
  uint64_t v160 = 0;
  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string __p = *(std::string *)&buf[16];
  }
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 32))(*a3, 167772178);
  uint64_t v6 = *a3;
  uint64_t v139 = v5;
  if (*(unsigned char *)(*a3 + 16) && !*(unsigned char *)(v6 + 17))
  {
    uint64_t v12 = *(void *)(v6 + 8);
    uint64_t v13 = *(void **)(a2 + 16);
    char v14 = [NSNumber numberWithLongLong:v12];
    unint64_t v201 = v14;
    char v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v201 count:1];
    std::string v16 = [v13 executeQuery:@"SELECT composer_pid FROM item WHERE ROWID = ?" withParameters:v15];

    char v17 = [v16 objectForFirstRowAndColumn];
    if ([v17 longLongValue])
    {
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2020000000;
      *(void *)&uint8_t buf[24] = 0;
      char v18 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 56))(*a3, 167772165);
      char v19 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 56))(*a3, 167772171);
      char v20 = *(void **)(a2 + 16);
      uint64_t v200 = v17;
      id v21 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v200 count:1];
      uint64_t v22 = [v20 executeQuery:@"SELECT composer, sort_composer, representative_item_pid, grouping_key, sync_id FROM composer WHERE composer_pid=?", v21 withParameters];
      v142[0] = MEMORY[0x1E4F143A8];
      v142[1] = 3321888768;
      v142[2] = ___ZN16ML3ImportSession16_getComposerInfoENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
      v142[3] = &unk_1F08C8748;
      char v153 = v18;
      char v154 = v19;
      std::string::size_type v144 = &v162;
      uint64_t v145 = &v155;
      int v146 = buf;
      std::string::size_type v147 = &v169;
      uint64_t v24 = *a3;
      uint64_t v23 = (std::__shared_weak_count *)a3[1];
      uint64_t v149 = a2;
      uint64_t v150 = v24;
      uint64_t v151 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v148 = &v175;
      id v143 = v17;
      uint64_t v152 = v12;
      [v22 enumerateRowsWithBlock:v142];

      if (v151) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v151);
      }
      _Block_object_dispose(buf, 8);
    }

    unint64_t v11 = v139;
  }
  else
  {
    unint64_t v7 = *(void **)(a2 + 8);
    unint64_t v8 = ML3CPPBridgeString(v163 + 48, 0);
    uint64_t v9 = [v7 groupingKeyForString:v8];
    std::string::size_type v10 = (void *)v170[5];
    v170[5] = v9;

    unint64_t v11 = v139;
    if (![(id)v170[5] length])
    {
      *a1 = 0;
      a1[1] = 0;
      goto LABEL_157;
    }
  }
  if (!v176[6] && [(id)v170[5] length])
  {
    uint64_t v30 = (char *)(id)v170[5];
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4012000000;
    *(void *)&uint8_t buf[24] = __Block_byref_object_copy__376;
    *(void *)&uint8_t buf[32] = __Block_byref_object_dispose__377;
    uint64_t v192 = "";
    int v194 = 0;
    uint64_t v193 = 0;
    if (v11)
    {
      int8x8_t v31 = *(int8x8_t *)(a2 + 936);
      if (v31)
      {
        uint8x8_t v32 = (uint8x8_t)vcnt_s8(v31);
        v32.i16[0] = vaddlv_u8(v32);
        if (v32.u32[0] > 1uLL)
        {
          unint64_t v33 = v11;
          if (v11 >= *(void *)&v31) {
            unint64_t v33 = v11 % *(void *)&v31;
          }
        }
        else
        {
          unint64_t v33 = (*(void *)&v31 - 1) & v11;
        }
        unint64_t v83 = *(void **)(*(void *)(a2 + 928) + 8 * v33);
        if (v83)
        {
          for (uint64_t i = (void *)*v83; i; uint64_t i = (void *)*i)
          {
            unint64_t v85 = i[1];
            if (v85 == v11)
            {
              if (i[2] == v11)
              {
                uint64_t v135 = i[3];
                uint64_t v134 = (std::__shared_weak_count *)i[4];
                if (v134)
                {
                  atomic_fetch_add_explicit(&v134->__shared_owners_, 1uLL, memory_order_relaxed);
                  std::string::size_type v136 = v194;
                  uint64_t v193 = v135;
                  int v194 = v134;
                  if (v136) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v136);
                  }
                }
                else
                {
                  uint64_t v193 = i[3];
                  int v194 = 0;
                }
                break;
              }
            }
            else
            {
              if (v32.u32[0] > 1uLL)
              {
                if (v85 >= *(void *)&v31) {
                  v85 %= *(void *)&v31;
                }
              }
              else
              {
                v85 &= *(void *)&v31 - 1;
              }
              if (v85 != v33) {
                break;
              }
            }
          }
        }
      }
    }
    if (v30 && !*(void *)(*(void *)&buf[8] + 48))
    {
      ML3CPPStringFromData((NSData *)&v185, v30);
      unint64_t v86 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v185);
      int8x8_t v87 = *(int8x8_t *)(a2 + 1176);
      if (!*(void *)&v87) {
        goto LABEL_178;
      }
      unint64_t v88 = v86;
      uint8x8_t v89 = (uint8x8_t)vcnt_s8(v87);
      v89.i16[0] = vaddlv_u8(v89);
      unint64_t v90 = v89.u32[0];
      if (v89.u32[0] > 1uLL)
      {
        unint64_t v91 = v86;
        if (v86 >= *(void *)&v87) {
          unint64_t v91 = v86 % *(void *)&v87;
        }
      }
      else
      {
        unint64_t v91 = (*(void *)&v87 - 1) & v86;
      }
      std::string::size_type v116 = *(unsigned __int8 ***)(*(void *)(a2 + 1168) + 8 * v91);
      if (v116)
      {
        for (uint64_t j = *v116; j; uint64_t j = *(unsigned __int8 **)j)
        {
          unint64_t v118 = *((void *)j + 1);
          if (v118 == v88)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, (unsigned __int8 *)&v185)) {
              break;
            }
          }
          else
          {
            if (v90 > 1)
            {
              if (v118 >= *(void *)&v87) {
                v118 %= *(void *)&v87;
              }
            }
            else
            {
              v118 &= *(void *)&v87 - 1;
            }
            if (v118 != v91) {
              goto LABEL_178;
            }
          }
        }
      }
      else
      {
LABEL_178:
        uint64_t j = 0;
      }
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      if (j)
      {
        uint64_t v119 = *(void *)&buf[8];
        uint64_t v121 = *((void *)j + 5);
        uint64_t v120 = *((void *)j + 6);
        if (v120) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v122 = *(std::__shared_weak_count **)(v119 + 56);
        *(void *)(v119 + 4_Block_object_dispose(&STACK[0x210], 8) = v121;
        *(void *)(v119 + 56) = v120;
        if (v122) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v122);
        }
      }
    }
    uint64_t v123 = *(void *)&buf[8];
    uint64_t v124 = *(void *)(*(void *)&buf[8] + 48);
    if (v124) {
      goto LABEL_197;
    }
    long long v125 = *(void **)(a2 + 16);
    if (v30 && v139)
    {
      uint64_t v126 = [NSNumber numberWithLongLong:v139];
      uint64_t v202 = v126;
      std::string::size_type v127 = [NSNumber numberWithLongLong:v139];
      uint64_t v203 = (uint64_t)v127;
      v204[0] = v30;
      std::string::size_type v128 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v202 count:3];
      uint64_t v129 = [v125 executeQuery:@"SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE (ROWID = ? OR sync_id = ?) OR grouping_key = ?", v128 withParameters];
    }
    else
    {
      if (v30)
      {
        uint64_t v202 = v30;
        uint64_t v126 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v202 count:1];
        id v130 = [v125 executeQuery:@"SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE grouping_key = (?)", v126 withParameters];
LABEL_194:

        if (v130)
        {
          v185.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
          v185.__r_.__value_.__l.__size_ = 3221225472;
          v185.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession24_getExistingComposerInfoEP6NSDatax_block_invoke;
          BOOL v186 = &unk_1E5FB76C8;
          uint64_t v188 = buf;
          uint64_t v189 = a2;
          uint64_t v187 = v30;
          uint64_t v190 = v139;
          [v130 enumerateRowsWithBlock:&v185];
        }
        uint64_t v123 = *(void *)&buf[8];
        uint64_t v124 = *(void *)(*(void *)&buf[8] + 48);
LABEL_197:
        uint64_t v131 = *(void *)(v123 + 56);
        if (v131) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 8), 1uLL, memory_order_relaxed);
        }
        _Block_object_dispose(buf, 8);
        if (v194) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v194);
        }

        *(void *)&long long v132 = v124;
        *((void *)&v132 + 1) = v131;
        int v133 = (std::__shared_weak_count *)v176[7];
        *((_OWORD *)v176 + 3) = v132;
        unint64_t v11 = v139;
        if (v133) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v133);
        }
        goto LABEL_21;
      }
      uint64_t v126 = [NSNumber numberWithLongLong:v139];
      uint64_t v202 = v126;
      std::string::size_type v127 = [NSNumber numberWithLongLong:v139];
      uint64_t v203 = (uint64_t)v127;
      std::string::size_type v128 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v202 count:2];
      uint64_t v129 = [v125 executeQuery:@"SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE (ROWID = ? OR sync_id = ?)", v128 withParameters];
    }
    id v130 = (void *)v129;

    goto LABEL_194;
  }
LABEL_21:
  if (!v176[6])
  {
    if ([(id)v170[5] length])
    {
      uint64_t v34 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 32))(*a3, 16777217);
      __int16 v137 = MLMediaTypeByStandardizingMediaType(v34);
      uint64_t IntegerUUID = v11;
      if (!v11) {
        uint64_t IntegerUUID = ML3CreateIntegerUUID();
      }
      long long v36 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v37 = v163 + 48;
        if ((char)v163[71] < 0) {
          uint64_t v37 = (void *)*v37;
        }
        char v38 = (std::string::__raw *)&v156[2];
        if (SHIBYTE(v156[2].__r_.__value_.__r.__words[2]) < 0) {
          char v38 = (std::string::__raw *)v38->__words[0];
        }
        *(_DWORD *)std::string buf = 134218498;
        *(void *)&uint8_t buf[4] = IntegerUUID;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v37;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&uint8_t buf[24] = v38;
        _os_log_impl(&dword_1B022D000, v36, OS_LOG_TYPE_DEFAULT, "creating new composer entry: pid=%lld, name='%{public}s', sortName='%{public}s'", buf, 0x20u);
      }

      int v39 = v163;
      unint64_t v40 = v156;
      uint64_t v41 = (std::string *)&v156[2];
      uint64_t v42 = v163 + 48;
      uint64_t v43 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)&v156[2], (uint64_t)(v163 + 48));
      uint64_t v45 = v44;
      unint64_t v46 = operator new(0x68uLL);
      v46[1] = 0;
      uint64_t v46[2] = 0;
      void *v46 = &unk_1F08C7560;
      if ((char)v39[71] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)v39 + 6), *((void *)v39 + 7));
      }
      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)v42;
        *(void *)&uint8_t buf[16] = v42[2];
      }
      if (SHIBYTE(v40[2].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v185, v40[2].__r_.__value_.__l.__data_, v40[2].__r_.__value_.__l.__size_);
      }
      else {
        std::string v185 = *v41;
      }
      ML3ComposerData::ML3ComposerData((uint64_t)(v46 + 3), IntegerUUID, (long long *)buf, (long long *)&v185, v43, v45, v139);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      *(void *)&long long v55 = v46 + 3;
      *((void *)&v55 + 1) = v46;
      long long v56 = (std::__shared_weak_count *)v176[7];
      *((_OWORD *)v176 + 3) = v55;
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      ML3CPPStringFromData((NSData *)&v185, (void *)v170[5]);
      *(_OWORD *)std::string buf = *(_OWORD *)&v185.__r_.__value_.__l.__data_;
      std::string::size_type v57 = v185.__r_.__value_.__r.__words[2];
      memset(&v185, 0, sizeof(v185));
      uint64_t v59 = v176[6];
      uint64_t v58 = v176[7];
      *(void *)&uint8_t buf[16] = v57;
      *(void *)&uint8_t buf[24] = v59;
      *(void *)&uint8_t buf[32] = v58;
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ComposerData>>>(a2 + 1168, buf, (uint64_t)buf);
      if (*(void *)&buf[32]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      if ((v137 & 0x400) != 0) {
        uint64_t v60 = 0;
      }
      else {
        uint64_t v60 = *(void *)(*a3 + 8);
      }
      uint64_t v61 = v176;
      char v62 = v163;
      char v63 = v170;
      std::string v64 = (char *)operator new(0x90uLL);
      *((void *)v64 + 1) = 0;
      *((void *)v64 + 2) = 0;
      *(void *)std::string v64 = &unk_1F08C76B0;
      uint64_t v66 = v61[6];
      char v65 = (std::__shared_weak_count *)v61[7];
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      id v67 = (id)v63[5];
      *((_OWORD *)v64 + 3) = 0u;
      *((_WORD *)v64 + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 256;
      v64[42] = 1;
      *((_OWORD *)v64 + 4) = 0u;
      *((_DWORD *)v64 + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
      *((void *)v64 + 3) = &unk_1F08C38C0;
      *((void *)v64 + 4) = 0;
      *((void *)v64 + 11) = v66;
      *((void *)v64 + 12) = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v68 = (std::string *)(v64 + 104);
      if ((char)v62[71] < 0)
      {
        std::string::__init_copy_ctor_external(v68, *((const std::string::value_type **)v62 + 6), *((void *)v62 + 7));
      }
      else
      {
        long long v69 = *((_OWORD *)v62 + 3);
        *((void *)v64 + 15) = *((void *)v62 + 8);
        *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
      }
      id v70 = v67;
      *((void *)v64 + 16) = v70;
      *((void *)v64 + 17) = v60;
      *((_WORD *)v64 + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 256;
      *((void *)v64 + 4) = **((void **)v64 + 11);

      if (v65) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      }
      std::string::size_type v71 = *(void **)(a2 + 1600);
      unint64_t v72 = *(void *)(a2 + 1608);
      if ((unint64_t)v71 >= v72)
      {
        uint64_t v74 = *(void *)(a2 + 1592);
        uint64_t v75 = ((uint64_t)v71 - v74) >> 4;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 60) {
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v77 = v72 - v74;
        if (v77 >> 3 > v76) {
          unint64_t v76 = v77 >> 3;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        *(void *)&uint8_t buf[32] = a2 + 1608;
        uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v78);
        *(void *)&long long v80 = v64 + 24;
        *((void *)&v80 + 1) = v64;
        uint64_t v81 = &v79[16 * v75];
        *(void *)std::string buf = v79;
        *(void *)&uint8_t buf[8] = v81;
        *(void *)&uint8_t buf[24] = &v79[16 * v82];
        *(_OWORD *)uint64_t v81 = v80;
        *(void *)&uint8_t buf[16] = v81 + 16;
        std::vector<std::shared_ptr<ML3ImportItem>>::__swap_out_circular_buffer((void *)(a2 + 1592), buf);
        char v73 = *(void **)(a2 + 1600);
        std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        void *v71 = v64 + 24;
        v71[1] = v64;
        char v73 = v71 + 2;
      }
      *(void *)(a2 + 160sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = v73;
    }
    goto LABEL_155;
  }
  uint64_t v25 = *(int *)(a2 + 32);
  uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(10, 167772171);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
  }
  int v27 = *(_DWORD *)(__specialRules + 56 * PropertyIndex + 4 * v25);
  uint64_t v28 = v139;
  if (v27 == -1) {
    goto LABEL_138;
  }
  std::string::size_type size = HIBYTE(v156[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v156[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v156[2].__r_.__value_.__l.__size_) {
      goto LABEL_59;
    }
  }
  else if (!*((unsigned char *)&v156[2].__r_.__value_.__s + 23))
  {
LABEL_59:
    if ((size & 0x80) != 0) {
      std::string::size_type size = v156[2].__r_.__value_.__l.__size_;
    }
LABEL_120:
    if (size) {
      goto LABEL_138;
    }
    uint64_t v47 = v176[6];
    LOBYTE(v51) = *(unsigned char *)(v47 + 55);
    goto LABEL_122;
  }
  uint64_t v47 = v176[6];
  std::string::size_type v48 = v156[2].__r_.__value_.__l.__size_;
  if ((size & 0x80u) == 0) {
    std::string::size_type v49 = HIBYTE(v156[2].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v49 = v156[2].__r_.__value_.__l.__size_;
  }
  uint64_t v50 = *(unsigned __int8 *)(v47 + 55);
  int v51 = (char)v50;
  if ((v50 & 0x80u) != 0) {
    uint64_t v50 = *(void *)(v47 + 40);
  }
  if (v49 != v50) {
    goto LABEL_126;
  }
  p_data = (const void **)&v156[2].__r_.__value_.__l.__data_;
  if (v51 >= 0) {
    id v53 = (unsigned __int8 *)(v47 + 32);
  }
  else {
    id v53 = *(unsigned __int8 **)(v47 + 32);
  }
  if ((size & 0x80) != 0)
  {
    int v92 = memcmp(*p_data, v53, v156[2].__r_.__value_.__l.__size_);
    std::string::size_type size = v48;
    if (v92) {
      goto LABEL_126;
    }
    goto LABEL_120;
  }
  if (*((unsigned char *)&v156[2].__r_.__value_.__s + 23))
  {
    uint64_t v54 = HIBYTE(v156[2].__r_.__value_.__r.__words[2]);
    while (*(unsigned __int8 *)p_data == *v53)
    {
      p_data = (const void **)((char *)p_data + 1);
      ++v53;
      if (!--v54) {
        goto LABEL_59;
      }
    }
    goto LABEL_126;
  }
LABEL_122:
  if ((v51 & 0x80) == 0)
  {
    if (!(_BYTE)v51) {
      goto LABEL_138;
    }
LABEL_126:
    unint64_t v93 = (std::__shared_weak_count *)a3[1];
    v141[0] = *a3;
    v141[1] = v93;
    if (v93) {
      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v141, 0xA00000Bu);
    if (v93) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v93);
    }
    if ((shouldPreserveTrackProperty & 1) == 0)
    {
      if (SHIBYTE(v156[2].__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v95 = v156[2].__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v95 = HIBYTE(v156[2].__r_.__value_.__r.__words[2]);
      }
      uint64_t v96 = *(void **)(a2 + 16);
      if (v95) {
        ML3CPPBridgeString((const UInt8 *)&v156[2], 1);
      }
      else {
      std::string::size_type v97 = [MEMORY[0x1E4F1CA98] null];
      }
      v199[0] = v97;
      uint64_t v98 = [NSNumber numberWithLongLong:*(void *)v176[6]];
      v199[1] = v98;
      std::string::size_type v99 = [MEMORY[0x1E4F1C978] arrayWithObjects:v199 count:2];
      [v96 executeUpdate:@"UPDATE composer SET sort_composer = ? WHERE ROWID = ?" withParameters:v99 error:0];

      std::string::operator=((std::string *)(v176[6] + 32), v156 + 2);
      uint64_t v100 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)&v156[2], (uint64_t)(v163 + 48));
      uint64_t v101 = v176[6];
      *(void *)(v101 + 56) = v100;
      *(void *)(v101 + 64) = v102;
      uint64_t v103 = *(void **)(a2 + 16);
      uint64_t v104 = [NSNumber numberWithLongLong:v100];
      v198[0] = v104;
      unint64_t v105 = [NSNumber numberWithInteger:*(void *)(v176[6] + 64)];
      v198[1] = v105;
      uint64_t v106 = [NSNumber numberWithLongLong:*(void *)v176[6]];
      v198[2] = v106;
      unint64_t v107 = [MEMORY[0x1E4F1C978] arrayWithObjects:v198 count:3];
      [v103 executeUpdate:@"UPDATE item SET composer_order=?, composer_order_section=? WHERE composer_pid=?", v107, 0 withParameters error];

      uint64_t v28 = v139;
    }
    goto LABEL_138;
  }
  if (*(void *)(v47 + 40)) {
    goto LABEL_126;
  }
LABEL_138:
  if (v28 && v28 != *(void *)(v176[6] + 72))
  {
    uint64_t v108 = *(int *)(a2 + 32);
    uint64_t v109 = ML3TrackRulesGetPropertyIndex(20, 335544328);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
    }
    if (*(_DWORD *)(__composerRules + 56 * v109 + 4 * v108) != -1)
    {
      uint64_t v110 = *a3;
      BOOL v111 = (std::__shared_weak_count *)a3[1];
      v140[0] = v110;
      v140[1] = v111;
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v112 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v140, 0x14000008u);
      if (v111) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v111);
      }
      if ((v112 & 1) == 0)
      {
        uint64_t v113 = *(void **)(a2 + 16);
        std::string::basic_string[abi:ne180100]<0>(&v185, "UPDATE composer SET sync_id = ? WHERE ROWID = ?");
        *(void *)std::string buf = v139;
        *(_DWORD *)&uint8_t buf[24] = 0;
        uint8_t buf[32] = 1;
        uint64_t v192 = *(const char **)v176[6];
        int v195 = 0;
        v196[0] = 1;
        uint64_t v203 = 0;
        v204[0] = 0;
        uint64_t v202 = 0;
        uint64_t v183 = &v202;
        char v184 = 0;
        uint64_t v202 = (char *)operator new(0x50uLL);
        uint64_t v203 = (uint64_t)v202;
        v204[0] = v202 + 80;
        uint64_t v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v204, (uint64_t)buf, (uint64_t)&v197, (uint64_t)v202);
        ML3ImportExecuteVariadicStatement(v113, (const UInt8 *)&v185, (uint64_t *)&v202);
        uint64_t v183 = &v202;
        std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
        for (uint64_t k = 0; k != -10; k -= 5)
        {
          if (v196[k * 8]) {
            std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&(&v192)[k]);
          }
        }
        if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v185.__r_.__value_.__l.__data_);
        }
        *(void *)(v176[6] + 72) = v139;
      }
    }
  }
LABEL_155:
  uint64_t v115 = v176[7];
  *a1 = v176[6];
  a1[1] = v115;
  if (v115) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v115 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_157:
  _Block_object_dispose(&v155, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v162, 8);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v168.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v169, 8);

  _Block_object_dispose(&v175, 8);
  if (v182) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v182);
  }
}

void sub_1B045E100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&STACK[0x200], 8);
  if (STACK[0x238]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x238]);
  }

  _Block_object_dispose(&a31, 8);
  if (a42 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a43, 8);
  if (a54 < 0) {
    operator delete(a49);
  }
  _Block_object_dispose(&a55, 8);

  _Block_object_dispose(&a61, 8);
  if (a68) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a68);
  }
  _Unwind_Resume(a1);
}

void ML3ImportSession::_getDefaultEmptyComposer(ML3ImportSession *this)
{
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ML3ComposerData>::~shared_ptr[abi:ne180100], &ML3ImportSession::_getDefaultEmptyComposer(void)::__emptyComposerData, &dword_1B022D000);
  }
  if (ML3ImportSession::_getDefaultEmptyComposer(void)::onceToken != -1) {
    dispatch_once(&ML3ImportSession::_getDefaultEmptyComposer(void)::onceToken, &__block_literal_global_22166);
  }
  uint64_t v2 = qword_1E9B320D0;
  *(void *)this = ML3ImportSession::_getDefaultEmptyComposer(void)::__emptyComposerData;
  *((void *)this + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

void ML3ImportSession::_getGenreInfo(void *a1, uint64_t a2, uint64_t **a3)
{
  v139[1] = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  (*(void (**)(unsigned char *__return_ptr))(**a3 + 24))(buf);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(void *)std::string buf = &unk_1F08C3230;
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    std::string __str = *(std::string *)&buf[16];
  }
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = ML3CPPBridgeString((const UInt8 *)&__str, 0);
  uint64_t v119 = [v5 groupingKeyForString:v6];

  unint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a3 + 32))(*a3, 167772179);
  if (![v119 length]) {
    goto LABEL_199;
  }
  id v8 = v119;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x4012000000;
  *(void *)&uint8_t buf[24] = __Block_byref_object_copy__395;
  *(void *)&uint8_t buf[32] = __Block_byref_object_dispose__396;
  long long v132 = "";
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  if (v7)
  {
    int8x8_t v9 = *(int8x8_t *)(a2 + 896);
    if (v9)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        unint64_t v11 = v7;
        if (v7 >= *(void *)&v9) {
          unint64_t v11 = v7 % *(void *)&v9;
        }
      }
      else
      {
        unint64_t v11 = (*(void *)&v9 - 1) & v7;
      }
      uint64_t v12 = *(void **)(*(void *)(a2 + 888) + 8 * v11);
      if (v12)
      {
        for (uint64_t i = (void *)*v12; i; uint64_t i = (void *)*i)
        {
          unint64_t v14 = i[1];
          if (v14 == v7)
          {
            if (i[2] == v7)
            {
              uint64_t v114 = i[3];
              uint64_t v113 = (std::__shared_weak_count *)i[4];
              if (v113)
              {
                atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v115 = v134;
                uint64_t v133 = v114;
                uint64_t v134 = v113;
                if (v115) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v115);
                }
              }
              else
              {
                uint64_t v133 = i[3];
                uint64_t v134 = 0;
              }
              break;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v14 >= *(void *)&v9) {
                v14 %= *(void *)&v9;
              }
            }
            else
            {
              v14 &= *(void *)&v9 - 1;
            }
            if (v14 != v11) {
              break;
            }
          }
        }
      }
    }
  }
  if (v8 && !*(void *)(*(void *)&buf[8] + 48))
  {
    ML3CPPStringFromData((NSData *)&v125, v8);
    unint64_t v15 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v125);
    int8x8_t v16 = *(int8x8_t *)(a2 + 1216);
    if (!*(void *)&v16) {
      goto LABEL_42;
    }
    unint64_t v17 = v15;
    uint8x8_t v18 = (uint8x8_t)vcnt_s8(v16);
    v18.i16[0] = vaddlv_u8(v18);
    unint64_t v19 = v18.u32[0];
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v20 = v15;
      if (v15 >= *(void *)&v16) {
        unint64_t v20 = v15 % *(void *)&v16;
      }
    }
    else
    {
      unint64_t v20 = (*(void *)&v16 - 1) & v15;
    }
    id v21 = *(unsigned __int8 ***)(*(void *)(a2 + 1208) + 8 * v20);
    if (v21)
    {
      for (uint64_t j = *v21; j; uint64_t j = *(unsigned __int8 **)j)
      {
        unint64_t v23 = *((void *)j + 1);
        if (v23 == v17)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, (unsigned __int8 *)&v125)) {
            break;
          }
        }
        else
        {
          if (v19 > 1)
          {
            if (v23 >= *(void *)&v16) {
              v23 %= *(void *)&v16;
            }
          }
          else
          {
            v23 &= *(void *)&v16 - 1;
          }
          if (v23 != v20) {
            goto LABEL_42;
          }
        }
      }
    }
    else
    {
LABEL_42:
      uint64_t j = 0;
    }
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v125.__r_.__value_.__l.__data_);
    }
    if (j)
    {
      uint64_t v24 = *(void *)&buf[8];
      uint64_t v26 = *((void *)j + 5);
      uint64_t v25 = *((void *)j + 6);
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      int v27 = *(std::__shared_weak_count **)(v24 + 56);
      *(void *)(v24 + 4_Block_object_dispose(&STACK[0x210], 8) = v26;
      *(void *)(v24 + 56) = v25;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
  }
  uint64_t v28 = *(void *)&buf[8];
  uint64_t v29 = *(void *)(*(void *)&buf[8] + 48);
  if (!v29)
  {
    if (v8 && v7)
    {
      uint64_t v30 = *(void **)(a2 + 16);
      int8x8_t v31 = [NSNumber numberWithLongLong:v7];
      v138[0].super.isa = v31;
      uint8x8_t v32 = [NSNumber numberWithLongLong:v7];
      v138[1].super.isa = v32;
      v139[0] = v8;
      unint64_t v33 = [MEMORY[0x1E4F1C978] arrayWithObjects:v138 count:3];
      uint64_t v34 = [v30 executeQuery:@"SELECT genre, ROWID, sync_id FROM genre WHERE (ROWID=? OR sync_id=?) OR grouping_key = (?)", v33 withParameters];
    }
    else
    {
      if (v8)
      {
        long long v36 = *(void **)(a2 + 16);
        v138[0].super.isa = (Class)v8;
        int8x8_t v31 = [MEMORY[0x1E4F1C978] arrayWithObjects:v138 count:1];
        uint64_t v35 = [v36 executeQuery:@"SELECT genre, ROWID, sync_id FROM genre WHERE grouping_key = (?)", v31 withParameters];
LABEL_57:

        if (v35)
        {
          v125.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
          v125.__r_.__value_.__l.__size_ = 3221225472;
          v125.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession21_getExistingGenreInfoEP6NSDatax_block_invoke;
          uint64_t v126 = &unk_1E5FB76C8;
          std::string::size_type v128 = buf;
          uint64_t v129 = a2;
          id v127 = v8;
          unint64_t v130 = v7;
          [v35 enumerateRowsWithBlock:&v125];
        }
        goto LABEL_59;
      }
      if (!v7)
      {
LABEL_59:
        uint64_t v28 = *(void *)&buf[8];
        uint64_t v29 = *(void *)(*(void *)&buf[8] + 48);
        goto LABEL_60;
      }
      uint64_t v109 = *(void **)(a2 + 16);
      int8x8_t v31 = [NSNumber numberWithLongLong:v7];
      v138[0].super.isa = v31;
      uint8x8_t v32 = [NSNumber numberWithLongLong:v7];
      v138[1].super.isa = v32;
      unint64_t v33 = [MEMORY[0x1E4F1C978] arrayWithObjects:v138 count:2];
      uint64_t v34 = [v109 executeQuery:@"SELECT genre, ROWID, sync_id FROM genre WHERE (ROWID=? OR sync_id=?)", v33 withParameters];
    }
    uint64_t v35 = (void *)v34;

    goto LABEL_57;
  }
LABEL_60:
  uint64_t v37 = *(void *)(v28 + 56);
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(buf, 8);
  if (v134) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v134);
  }

  *(void *)&long long v38 = v29;
  *((void *)&v38 + 1) = v37;
  long long v117 = v38;
  *(_OWORD *)a1 = v38;
  if (v29)
  {
    uint64_t v39 = *(int *)(a2 + 32);
    uint64_t PropertyIndex = ML3TrackRulesGetPropertyIndex(10, 167772166);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
    }
    if (*(_DWORD *)(__specialRules + 56 * PropertyIndex + 4 * v39) == -1) {
      goto LABEL_164;
    }
    uint64_t v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v43 = *(unsigned __int8 *)(v117 + 31);
    int v44 = (char)v43;
    if ((v43 & 0x80u) != 0) {
      uint64_t v43 = *(void *)(v117 + 16);
    }
    if (size != v43) {
      goto LABEL_158;
    }
    if (v44 >= 0) {
      uint64_t v45 = (unsigned __int8 *)(v117 + 8);
    }
    else {
      uint64_t v45 = *(unsigned __int8 **)(v117 + 8);
    }
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__str.__r_.__value_.__l.__data_, v45, __str.__r_.__value_.__l.__size_))
      {
LABEL_158:
        uint64_t v96 = (std::__shared_weak_count *)a3[1];
        v121[0] = *a3;
        v121[1] = v96;
        if (v96) {
          atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v121, 0xA000006u);
        if (v96) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v96);
        }
        if ((shouldPreserveTrackProperty & 1) == 0)
        {
          uint64_t v98 = *(void **)(a2 + 16);
          std::string::size_type v99 = ML3CPPBridgeString((const UInt8 *)&__str, 1);
          v137[0] = v99;
          uint64_t v100 = [NSNumber numberWithLongLong:*(void *)v117];
          v137[1] = v100;
          uint64_t v101 = [MEMORY[0x1E4F1C978] arrayWithObjects:v137 count:2];
          [v98 executeUpdate:@"UPDATE genre SET genre = ? WHERE ROWID = ?" withParameters:v101 error:0];

          std::string::operator=((std::string *)(v117 + 8), &__str);
        }
      }
    }
    else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      p_str = &__str;
      while (p_str->__r_.__value_.__s.__data_[0] == *v45)
      {
        p_str = (std::string *)((char *)p_str + 1);
        ++v45;
        if (!--v41) {
          goto LABEL_164;
        }
      }
      goto LABEL_158;
    }
LABEL_164:
    if (v7 && v7 != *(void *)(v117 + 48))
    {
      uint64_t v102 = *(int *)(a2 + 32);
      uint64_t v103 = ML3TrackRulesGetPropertyIndex(21, 352321543);
      if (_ML3InitializeTrackRulesIfNeeded___once != -1) {
        dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_108);
      }
      if (*(_DWORD *)(__genreRules + 56 * v103 + 4 * v102) != -1)
      {
        uint64_t v104 = *a3;
        unint64_t v105 = (std::__shared_weak_count *)a3[1];
        v120[0] = v104;
        v120[1] = v105;
        if (v105) {
          atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v106 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v120, 0x15000007u);
        if (v105) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v105);
        }
        if ((v106 & 1) == 0)
        {
          unint64_t v107 = *(void **)(a2 + 16);
          std::string::basic_string[abi:ne180100]<0>(&v125, "UPDATE genre SET sync_id = ? WHERE ROWID = ?");
          *(void *)std::string buf = v7;
          *(_DWORD *)&uint8_t buf[24] = 0;
          uint8_t buf[32] = 1;
          long long v132 = *(const char **)v117;
          int v135 = 0;
          v136[0] = 1;
          v138[1].super.isa = 0;
          v139[0] = 0;
          v138[0].super.isa = 0;
          uint64_t v123 = (void **)v138;
          char v124 = 0;
          v138[0].super.isa = (Class)operator new(0x50uLL);
          v138[1] = v138[0];
          v139[0] = (char *)v138[0].super.isa + 80;
          v138[1].super.isa = (Class)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v139, (uint64_t)buf, (uint64_t)v137, (uint64_t)v138[0].super.isa);
          ML3ImportExecuteVariadicStatement(v107, (const UInt8 *)&v125, (uint64_t *)v138);
          uint64_t v123 = (void **)v138;
          std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100](&v123);
          for (uint64_t k = 0; k != -80; k -= 40)
          {
            if (v136[k]) {
              std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&buf[k + 40]);
            }
          }
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v125.__r_.__value_.__l.__data_);
          }
          *(void *)(*a1 + 4_Block_object_dispose(&STACK[0x210], 8) = v7;
        }
      }
    }
    goto LABEL_199;
  }
  uint64_t IntegerUUID = v7;
  if (!v7) {
    uint64_t IntegerUUID = ML3CreateIntegerUUID();
  }
  std::string::size_type v48 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v49 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v49 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 134218242;
    *(void *)&uint8_t buf[4] = IntegerUUID;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v49;
    _os_log_impl(&dword_1B022D000, v48, OS_LOG_TYPE_DEFAULT, "creating new genre entry: pid=%lld, name='%{public}s'", buf, 0x16u);
  }

  uint64_t v50 = **a3;
  unint64_t v51 = (*a3)[1];
  (*(void (**)(unsigned char *__return_ptr))(v50 + 144))(buf);
  if ((buf[39] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
  }
  else {
    std::string v125 = *(std::string *)&buf[16];
  }
  uint64_t v52 = ML3CPPBridgeString((const UInt8 *)&v125, 1);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  *(void *)std::string buf = &unk_1F08C3230;
  if ((buf[39] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[16]);
  }
  std::string::size_type v116 = (void *)v52;
  id v53 = [*(id *)(a2 + 24) objectForKeyedSubscript:v52];
  uint64_t v54 = [v53 ML3NameOrderValue];
  uint64_t v56 = v55;

  if (v56 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v54 = 0;
    uint64_t v56 = *(unsigned __int8 *)(a2 + 252);
  }
  std::string::size_type v57 = (std::__shared_weak_count *)operator new(0x50uLL);
  v57->__shared_owners_ = 0;
  v57->__shared_weak_owners_ = 0;
  v57->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F08C74F0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)buf, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)std::string buf = __str;
  }
  v57[1].__vftable = (std::__shared_weak_count_vtbl *)IntegerUUID;
  p_shared_owners = (std::string *)&v57[1].__shared_owners_;
  if ((buf[23] & 0x80000000) != 0)
  {
    uint64_t v59 = *(void **)buf;
    std::string::__init_copy_ctor_external(p_shared_owners, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    v57[2].__shared_owners_ = v54;
    v57[2].__shared_weak_owners_ = v56;
    v57[3].__vftable = (std::__shared_weak_count_vtbl *)v7;
    operator delete(v59);
  }
  else
  {
    *(_OWORD *)&p_shared_owners->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
    v57[2].__vftable = *(std::__shared_weak_count_vtbl **)&buf[16];
    v57[2].__shared_owners_ = v54;
    v57[2].__shared_weak_owners_ = v56;
    v57[3].__vftable = (std::__shared_weak_count_vtbl *)v7;
  }
  *(void *)&long long v60 = v57 + 1;
  *((void *)&v60 + 1) = v57;
  *(_OWORD *)a1 = v60;
  if (*((void *)&v117 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v117 + 1));
  }
  uint64_t v61 = (char *)operator new(0x90uLL);
  *((void *)v61 + 1) = 0;
  *((void *)v61 + 2) = 0;
  *(void *)uint64_t v61 = &unk_1F08C7608;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v62 = v8;
  *((_OWORD *)v61 + 3) = 0u;
  *((_WORD *)v61 + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 256;
  v61[42] = 1;
  *((_OWORD *)v61 + 4) = 0u;
  *((_DWORD *)v61 + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 1065353216;
  *((void *)v61 + 3) = &unk_1F08C34B0;
  *((void *)v61 + 4) = 0;
  *((void *)v61 + 11) = v57 + 1;
  *((void *)v61 + 12) = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v63 = (std::string *)(v61 + 104);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v63, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v63->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((void *)v61 + 15) = *((void *)&__str.__r_.__value_.__l + 2);
  }
  id v64 = v62;
  *((void *)v61 + 16) = v64;
  *((void *)v61 + 17) = v51;
  *((_WORD *)v61 + 2sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = 256;
  *((void *)v61 + 4) = **((void **)v61 + 11);

  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  char v65 = *(void **)(a2 + 1624);
  unint64_t v66 = *(void *)(a2 + 1632);
  if ((unint64_t)v65 >= v66)
  {
    uint64_t v68 = *(void *)(a2 + 1616);
    uint64_t v69 = ((uint64_t)v65 - v68) >> 4;
    unint64_t v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 60) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = v66 - v68;
    if (v71 >> 3 > v70) {
      unint64_t v70 = v71 >> 3;
    }
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v72 = v70;
    }
    *(void *)&uint8_t buf[32] = a2 + 1632;
    char v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v72);
    *(void *)&long long v74 = v61 + 24;
    *((void *)&v74 + 1) = v61;
    uint64_t v75 = &v73[16 * v69];
    *(void *)std::string buf = v73;
    *(void *)&uint8_t buf[8] = v75;
    *(void *)&uint8_t buf[24] = &v73[16 * v76];
    *(_OWORD *)uint64_t v75 = v74;
    *(void *)&uint8_t buf[16] = v75 + 16;
    std::vector<std::shared_ptr<ML3ImportItem>>::__swap_out_circular_buffer((void *)(a2 + 1616), buf);
    id v67 = *(void **)(a2 + 1624);
    std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    void *v65 = v61 + 24;
    v65[1] = v61;
    id v67 = v65 + 2;
  }
  *(void *)(a2 + 1624) = v67;
  ML3CPPStringFromData(v138, v64);
  *(_OWORD *)std::string buf = *(_OWORD *)&v138[0].super.isa;
  uint64_t v77 = v139[0];
  v138[1].super.isa = 0;
  v139[0] = 0;
  v138[0].super.isa = 0;
  *(void *)&uint8_t buf[16] = v77;
  *(void *)&uint8_t buf[24] = v57 + 1;
  *(void *)&uint8_t buf[32] = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v78 = (uint64_t *)(a2 + 1208);
  unint64_t v79 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)buf);
  unint64_t v80 = v79;
  unint64_t v81 = *(void *)(a2 + 1216);
  if (!v81) {
    goto LABEL_143;
  }
  uint8x8_t v82 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
  v82.i16[0] = vaddlv_u8(v82);
  unint64_t v83 = v82.u32[0];
  if (v82.u32[0] > 1uLL)
  {
    unint64_t v51 = v79;
    if (v79 >= v81) {
      unint64_t v51 = v79 % v81;
    }
  }
  else
  {
    unint64_t v51 = (v81 - 1) & v79;
  }
  std::string::size_type v84 = *(unsigned __int8 ***)(*v78 + 8 * v51);
  if (!v84 || (unint64_t v85 = *v84) == 0)
  {
LABEL_143:
    int8x8_t v87 = (char *)operator new(0x38uLL);
    unint64_t v88 = (void *)(a2 + 1224);
    v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    v125.__r_.__value_.__l.__size_ = a2 + 1224;
    v125.__r_.__value_.__s.__data_[16] = 0;
    *(void *)int8x8_t v87 = 0;
    *((void *)v87 + 1) = v80;
    uint8x8_t v89 = (std::string *)(v87 + 16);
    if ((buf[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v89, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else
    {
      *(_OWORD *)&v89->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
      *((void *)v87 + 4) = *(void *)&buf[16];
    }
    *(_OWORD *)(v87 + 4sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0) = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[24] = 0;
    *(void *)&uint8_t buf[32] = 0;
    v125.__r_.__value_.__s.__data_[16] = 1;
    float v90 = (float)(unint64_t)(*(void *)(a2 + 1232) + 1);
    float v91 = *(float *)(a2 + 1240);
    if (!v81 || (float)(v91 * (float)v81) < v90)
    {
      BOOL v92 = 1;
      if (v81 >= 3) {
        BOOL v92 = (v81 & (v81 - 1)) != 0;
      }
      unint64_t v93 = v92 | (2 * v81);
      unint64_t v94 = vcvtps_u32_f32(v90 / v91);
      if (v93 <= v94) {
        size_t v95 = v94;
      }
      else {
        size_t v95 = v93;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a2 + 1208, v95);
      unint64_t v81 = *(void *)(a2 + 1216);
      if ((v81 & (v81 - 1)) != 0)
      {
        if (v80 >= v81) {
          unint64_t v51 = v80 % v81;
        }
        else {
          unint64_t v51 = v80;
        }
      }
      else
      {
        unint64_t v51 = (v81 - 1) & v80;
      }
    }
    uint64_t v110 = *v78;
    BOOL v111 = *(void **)(*v78 + 8 * v51);
    if (v111)
    {
      *(void *)int8x8_t v87 = *v111;
    }
    else
    {
      *(void *)int8x8_t v87 = *v88;
      *unint64_t v88 = v87;
      *(void *)(v110 + 8 * v51) = v88;
      if (!*(void *)v87)
      {
LABEL_193:
        v125.__r_.__value_.__r.__words[0] = 0;
        ++*(void *)(a2 + 1232);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v125);
        goto LABEL_194;
      }
      unint64_t v112 = *(void *)(*(void *)v87 + 8);
      if ((v81 & (v81 - 1)) != 0)
      {
        if (v112 >= v81) {
          v112 %= v81;
        }
      }
      else
      {
        v112 &= v81 - 1;
      }
      BOOL v111 = (void *)(*v78 + 8 * v112);
    }
    void *v111 = v87;
    goto LABEL_193;
  }
  while (1)
  {
    unint64_t v86 = *((void *)v85 + 1);
    if (v86 == v80) {
      break;
    }
    if (v83 > 1)
    {
      if (v86 >= v81) {
        v86 %= v81;
      }
    }
    else
    {
      v86 &= v81 - 1;
    }
    if (v86 != v51) {
      goto LABEL_143;
    }
LABEL_142:
    unint64_t v85 = *(unsigned __int8 **)v85;
    if (!v85) {
      goto LABEL_143;
    }
  }
  if (!std::equal_to<std::string>::operator()[abi:ne180100](v85 + 16, buf)) {
    goto LABEL_142;
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
LABEL_194:
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v139[0]) < 0) {
    operator delete(v138[0].super.isa);
  }

LABEL_199:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}