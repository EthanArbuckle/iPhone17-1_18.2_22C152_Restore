void PSEMediaSELFEmitter.emitPSEMedia(mediaSignals:appLaunchSignals:task:)(uint64_t (*a1)(void), unint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  int v55;
  double v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  double v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t (*v75)(void);
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  id v80;
  char *v81;
  id v82;
  Class isa;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(void);
  id v88;
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t (*)(void));
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(void);
  id v93;
  Class v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  id v103;
  Class v104;
  id v105;
  char *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t (*v114)(void);
  char *v115;
  id v116;
  Class v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  id v129;
  char *v130;
  Class v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  uint64_t (*v135)(void);
  unint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(void);
  unsigned int (*v139)(uint64_t, uint64_t, uint64_t (*)(void));
  unint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  id v145;
  id v146;
  id v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  unint64_t v154;
  id v155;
  double v156;
  uint64_t v157;
  long long v158;
  long long v159;

  v154 = (unint64_t)a1;
  v6 = type metadata accessor for ReliabilityCategory();
  v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  v9 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x270FA5388](v10 - 8);
  v151 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x270FA5388](v11);
  v150 = (char *)&v132 - v14;
  MEMORY[0x270FA5388](v13);
  v16 = (char *)&v132 - v15;
  v17 = (uint64_t (*)(void))type metadata accessor for UUID();
  v152 = *((void *)v17 - 1);
  v18 = MEMORY[0x270FA5388](v17);
  v149 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x270FA5388](v18);
  v148 = (char *)&v132 - v21;
  v22 = MEMORY[0x270FA5388](v20);
  v24 = (char *)&v132 - v23;
  MEMORY[0x270FA5388](v22);
  v153 = (char *)&v132 - v25;
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB10]), sel_init);
  if (!v26) {
    goto LABEL_22;
  }
  v155 = v26;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB18]), sel_init);
  if (!v27)
  {
    v44 = v155;
LABEL_21:

    goto LABEL_22;
  }
  v147 = v27;
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB68]), sel_init);
  if (!v28)
  {

    v44 = v147;
    goto LABEL_21;
  }
  v145 = v28;
  v146 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB20]), sel_init);
  if (!v146)
  {

    v44 = v145;
    goto LABEL_21;
  }
  v144 = a3;
  v143 = v3;
  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB58]), sel_init);
  if (!v29)
  {

    v44 = v146;
    goto LABEL_21;
  }
  v30 = v29;
  v31 = v154;
  v140 = v154 >> 62;
  if (v154 >> 62)
  {
    swift_bridgeObjectRetain();
    v31 = v154;
    v32 = _CocoaArrayWrapper.endIndex.getter();
    v33 = v155;
    if (v32)
    {
LABEL_8:
      v136 = v31 & 0xC000000000000001;
      v142 = v30;
      v138 = v17;
      v137 = v32;
      if ((v31 & 0xC000000000000001) != 0)
      {
        v32 = MEMORY[0x22A627400](0, v31);
      }
      else
      {
        if (!*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_103;
        }
        v32 = *(void *)(v31 + 32);
        swift_retain();
      }
      v34 = swift_bridgeObjectRelease();
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v32 + 120))(&v158, v34);
      v35 = v146;
      v36 = (*(uint64_t (**)(id))(*(void *)v32 + 144))(objc_msgSend(v146, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v158));
      v37 = (void *)MEMORY[0x22A626F60](v36);
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_setDomain_, v37);

      v38 = (*(uint64_t (**)(void))(*(void *)v32 + 168))();
      v39 = (void *)MEMORY[0x22A626F60](v38);
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_setAction_, v39);

      v17 = *(uint64_t (**)(void))(*(void *)v32 + 216);
      v139 = (unsigned int (*)(uint64_t, uint64_t, uint64_t (*)(void)))(*(void *)v32 + 216);
      v40 = v17();
      if (*(void *)(v40 + 16)
        && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
            (v42 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v40 + 56) + 32 * v41, (uint64_t)&v158);
        swift_bridgeObjectRelease();
        if (*((void *)&v159 + 1))
        {
          if (swift_dynamicCast()) {
            v43 = LOBYTE(v156);
          }
          else {
            v43 = 2;
          }
LABEL_27:
          v30 = v142;
          v48 = (*(uint64_t (**)(uint64_t))(*v143 + 104))(v43);
          objc_msgSend(v146, sel_setIsDonatedBySiri_, v48);
          if (!(a2 >> 62))
          {
            v49 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            goto LABEL_29;
          }
LABEL_103:
          swift_bridgeObjectRetain();
          v49 = _CocoaArrayWrapper.endIndex.getter();
LABEL_29:
          v141 = v32;
          if (v49)
          {
            v135 = v17;
            if ((a2 & 0xC000000000000001) != 0)
            {
              v50 = MEMORY[0x22A627400](0, a2);
              v30 = v143;
            }
            else
            {
              v30 = v143;
              if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_106;
              }
              v50 = *(void *)(a2 + 32);
              swift_retain();
            }
            v51 = swift_bridgeObjectRelease();
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v50 + 120))(&v158, v51);
            v52 = (*(uint64_t (**)(id))(*(void *)v50 + 216))(objc_msgSend(v146, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v158));
            if (*(void *)(v52 + 16)
              && (v53 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F66680),
                  (v54 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v52 + 56) + 32 * v53, (uint64_t)&v158);
            }
            else
            {
              v158 = 0u;
              v159 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v159 + 1))
            {
              v55 = swift_dynamicCast();
              v56 = v156;
              if (!v55) {
                v56 = 0.0;
              }
              v134 = v56;
              if (v55) {
                v57 = v157;
              }
              else {
                v57 = 0;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for Any?);
              v134 = 0.0;
              v57 = 0;
            }
            v59 = (void *)(*(uint64_t (**)(void))(*(void *)v144 + 224))();
            if (v59[2])
            {
              v60 = v59[5];
              v133 = v59[4];
              swift_bridgeObjectRetain();
            }
            else
            {
              v133 = 0;
              v60 = 0;
            }
            swift_bridgeObjectRelease();
            v61 = (*(uint64_t (**)(double, uint64_t, uint64_t, uint64_t))(*v30 + 120))(COERCE_DOUBLE(*(void *)&v134), v57, v133, v60);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v62 = v146;
            v63 = (*(uint64_t (**)(id))(*(void *)v50 + 168))(objc_msgSend(v146, sel_setAppFollowup_, v61));
            v64 = (*(uint64_t (**)(uint64_t))(*v30 + 136))(v63);
            swift_bridgeObjectRelease();
            objc_msgSend(v62, sel_setAppLaunchReason_, v64);
            v58 = (id)swift_release();
            v30 = v142;
            v32 = v141;
            v17 = v135;
          }
          else
          {
            swift_bridgeObjectRelease();
            v58 = objc_msgSend(v146, sel_setAppFollowup_, 3);
          }
          v65 = ((uint64_t (*)(id))v17)(v58);
          if (*(void *)(v65 + 16)
            && (v66 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974),
                (v67 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v65 + 56) + 32 * v66, (uint64_t)&v158);
          }
          else
          {
            v158 = 0u;
            v159 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v159 + 1))
          {
            if (swift_dynamicCast())
            {
              v68 = fmin(v156, 30.0);
LABEL_58:
              v69 = ((uint64_t (*)(id))v17)(objc_msgSend(v30, sel_setPlayDurationInSeconds_, v68));
              if (*(void *)(v69 + 16)
                && (v70 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F666A0),
                    (v71 & 1) != 0))
              {
                outlined init with copy of Any(*(void *)(v69 + 56) + 32 * v70, (uint64_t)&v158);
              }
              else
              {
                v158 = 0u;
                v159 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((void *)&v159 + 1))
              {
                if (swift_dynamicCast())
                {
                  v72.n128_f64[0] = v156;
                  goto LABEL_67;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for Any?);
              }
              v72.n128_u64[0] = 0;
LABEL_67:
              objc_msgSend(v30, sel_setMediaContentDurationBucket_, (*(uint64_t (**)(__n128))(*v143 + 184))(v72));
              if (v140)
              {
                v17 = (uint64_t (*)(void))v154;
                swift_bridgeObjectRetain();
                v73 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v73 < 2) {
                  goto LABEL_79;
                }
              }
              else if (*(uint64_t *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
              {
                goto LABEL_79;
              }
              v74 = v137 - 1;
              if (!__OFSUB__(v137, 1))
              {
                if (v136)
                {
                  v75 = (uint64_t (*)(void))v154;
                  swift_bridgeObjectRetain();
                  v76 = MEMORY[0x22A627400](v74, v75);
                  v77 = swift_bridgeObjectRelease();
LABEL_77:
                  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v76 + 120))(&v158, v77);
                  if (*((double *)&v158 + 1) <= 30.0)
                  {
                    v78 = v146;
                    objc_msgSend(v146, sel_setHasUserInitiatedFollowup_, 1, *((double *)&v158 + 1));
                    v79 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*v143 + 160))(v32, v76);
                    objc_msgSend(v30, sel_setLastMediaUserFollowupAction_, v79);
                    swift_release();

LABEL_81:
                    v80 = v145;
                    objc_msgSend(v145, sel_setCommonSignal_, v78);
                    objc_msgSend(v80, sel_setMediaSignal_, v30);
                    v81 = v153;
                    UUID.init()();
                    v82 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                    isa = UUID._bridgeToObjectiveC()().super.isa;
                    v84 = objc_msgSend(v82, sel_initWithNSUUID_, isa);

                    v85 = v152;
                    v86 = v152 + 8;
                    v87 = v138;
                    v154 = *(void *)(v152 + 8);
                    ((void (*)(char *, uint64_t (*)(void)))v154)(v81, v138);
                    v88 = v147;
                    objc_msgSend(v147, sel_setPseId_, v84);

                    v17 = v87;
                    (*(void (**)(void))(*(void *)v144 + 152))();
                    UUID.init(uuidString:)();
                    swift_bridgeObjectRelease();
                    v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t (*)(void)))(v85 + 48);
                    v140 = v85 + 48;
                    v139 = v89;
                    if (v89((uint64_t)v16, 1, v87) == 1)
                    {
                      v90 = outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
                      v91 = v86;
                      v92 = (uint64_t (*)(void))v154;
                    }
                    else
                    {
                      (*(void (**)(char *, char *, uint64_t (*)(void)))(v85 + 32))(v24, v16, v87);
                      v93 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                      v94 = UUID._bridgeToObjectiveC()().super.isa;
                      v95 = objc_msgSend(v93, sel_initWithNSUUID_, v94);

                      objc_msgSend(v88, sel_setUiSessionId_, v95);
                      v92 = (uint64_t (*)(void))v154;
                      v90 = ((uint64_t (*)(char *, uint64_t (*)(void)))v154)(v24, v17);
                      v91 = v86;
                    }
                    v30 = &unk_26AD6B000;
                    if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v144 + 200))(v90) + 16))
                    {
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      v96 = (uint64_t)v150;
                      UUID.init(uuidString:)();
                      swift_bridgeObjectRelease();
                      if (v139(v96, 1, v17) != 1)
                      {
                        v97 = v152;
                        v102 = v148;
                        (*(void (**)(char *, uint64_t, uint64_t (*)(void)))(v152 + 32))(v148, v96, v17);
                        v103 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                        v104 = UUID._bridgeToObjectiveC()().super.isa;
                        v105 = objc_msgSend(v103, sel_initWithNSUUID_, v104);

                        objc_msgSend(v147, sel_setOriginalLastRequestId_, v105);
                        v106 = v102;
                        v92 = (uint64_t (*)(void))v154;
                        v101 = ((uint64_t (*)(char *, uint64_t (*)(void)))v154)(v106, v17);
                        goto LABEL_92;
                      }
                      outlined destroy of Any?(v96, &demangling cache variable for type metadata for UUID?);
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                    }
                    v97 = v152;
                    if (one-time initialization token for engagement != -1) {
                      swift_once();
                    }
                    v98 = type metadata accessor for Logger();
                    __swift_project_value_buffer(v98, (uint64_t)static Logger.engagement);
                    v99 = *MEMORY[0x263F75050];
                    v100 = type metadata accessor for EngagementSignalCollectionError();
                    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v100 - 8) + 104))(v9, v99, v100);
                    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F75118], v6);
                    Logger.debug(_:_:)(0xD000000000000027, 0x8000000224F666C0, (uint64_t)v9);
                    v101 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_92:
                    (*(void (**)(uint64_t))(*(void *)v144 + 176))(v101);
                    v107 = (uint64_t)v151;
                    UUID.init(uuidString:)();
                    swift_bridgeObjectRelease();
                    v108 = v139(v107, 1, v17);
                    v137 = v91;
                    if (v108 != 1)
                    {
                      v114 = v92;
                      v115 = v149;
                      (*(void (**)(char *, uint64_t, uint64_t (*)(void)))(v97 + 32))(v149, v107, v17);
                      v116 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                      v117 = UUID._bridgeToObjectiveC()().super.isa;
                      v118 = objc_msgSend(v116, sel_initWithNSUUID_, v117);

                      v113 = v147;
                      objc_msgSend(v147, sel_setTaskId_, v118);

                      v112 = ((uint64_t (*)(char *, uint64_t (*)(void)))v114)(v115, v17);
                      v30 = &unk_26AD6B000;
                      goto LABEL_96;
                    }
                    outlined destroy of Any?(v107, &demangling cache variable for type metadata for UUID?);
                    if (one-time initialization token for engagement == -1)
                    {
LABEL_94:
                      v109 = type metadata accessor for Logger();
                      __swift_project_value_buffer(v109, (uint64_t)static Logger.engagement);
                      v110 = *MEMORY[0x263F75038];
                      v111 = type metadata accessor for EngagementSignalCollectionError();
                      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v111 - 8) + 104))(v9, v110, v111);
                      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F75118], v6);
                      Logger.debug(_:_:)(0xD000000000000024, 0x8000000224F666F0, (uint64_t)v9);
                      v112 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
                      v113 = v147;
LABEL_96:
                      v119 = (*(uint64_t (**)(uint64_t))(*(void *)v144 + 296))(v112);
                      v120 = (*(uint64_t (**)(uint64_t))(*(void *)v119 + 104))(v119);
                      swift_release();
                      v121 = v143;
                      v122 = objc_msgSend(v113, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*v143 + 96))(v120));
                      objc_msgSend(v113, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*v121 + 112))(v122));
                      v123 = v155;
                      objc_msgSend(v155, sel_setEventMetadata_, v113);
                      v124 = v145;
                      objc_msgSend(v123, sel_setMediaSignalGenerated_, v145);
                      if (v30[80] != -1) {
                        swift_once();
                      }
                      v125 = type metadata accessor for Logger();
                      __swift_project_value_buffer(v125, (uint64_t)static Logger.engagement);
                      v126 = *MEMORY[0x263F75090];
                      v127 = type metadata accessor for SELFPSELogged();
                      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v127 - 8) + 104))(v9, v126, v127);
                      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F750C8], v6);
                      Logger.debug(_:_:)(0xD000000000000035, 0x8000000224F66720, (uint64_t)v9);
                      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
                      v128 = objc_msgSend(self, sel_sharedAnalytics);
                      v129 = objc_msgSend(v128, sel_defaultMessageStream);

                      v130 = v153;
                      UUID.init()();
                      v131 = UUID._bridgeToObjectiveC()().super.isa;
                      ((void (*)(char *, uint64_t (*)(void)))v154)(v130, v17);
                      objc_msgSend(v129, sel_emitMessage_isolatedStreamUUID_, v123, v131);

                      swift_release();
                      return;
                    }
LABEL_107:
                    swift_once();
                    goto LABEL_94;
                  }
                  swift_release();
LABEL_79:
                  v78 = v146;
                  objc_msgSend(v146, sel_setHasUserInitiatedFollowup_, 0);
                  goto LABEL_81;
                }
                if ((v74 & 0x8000000000000000) != 0)
                {
                  __break(1u);
                }
                else if (v74 < *(void *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  v76 = *(void *)(v154 + 8 * v74 + 32);
                  v77 = swift_retain();
                  goto LABEL_77;
                }
                __break(1u);
                return;
              }
LABEL_106:
              __break(1u);
              goto LABEL_107;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for Any?);
          }
          v68 = -1.0;
          goto LABEL_58;
        }
      }
      else
      {
        v158 = 0u;
        v159 = 0u;
        swift_bridgeObjectRelease();
      }
      outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for Any?);
      v43 = 2;
      goto LABEL_27;
    }
  }
  else
  {
    v32 = *(void *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v33 = v155;
    if (v32) {
      goto LABEL_8;
    }
  }

  swift_bridgeObjectRelease();
LABEL_22:
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Logger.engagement);
  v46 = *MEMORY[0x263F75020];
  v47 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v9, v46, v47);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F75118], v6);
  Logger.debug(_:_:)(0xD000000000000034, 0x8000000224F66640, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

id PSEMediaSELFEmitter.getLastMediaUserFollowupAction(firstMediaSignal:mediaUserFollowupSignal:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB70]), sel_init);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a2 + 168))();
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 192))(v7);
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v6, sel_setState_, v8);
    v10 = *(uint64_t (**)(void))(*(void *)a2 + 216);
    uint64_t v11 = ((uint64_t (*)(id))v10)(v9);
    if (*(void *)(v11 + 16)
      && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F666A0),
          (v13 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v44);
      swift_bridgeObjectRelease();
      if (*((void *)&v45 + 1))
      {
        if (swift_dynamicCast())
        {
          v14.n128_u64[0] = v42;
LABEL_10:
          id v15 = objc_msgSend(v6, sel_setMediaContentDurationBucket_, (*(uint64_t (**)(__n128))(*(void *)v3 + 184))(v14));
          v41 = *(uint64_t (**)(id))(*(void *)a1 + 216);
          uint64_t v16 = v41(v15);
          uint64_t v17 = v10();
          char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 168))(v16, v17);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v19 = ((uint64_t (*)(id))v10)(objc_msgSend(v6, sel_setIsSameAppUsed_, v18 & 1));
          if (*(void *)(v19 + 16)
            && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000224F66760),
                (v21 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v19 + 56) + 32 * v20, (uint64_t)&v44);
          }
          else
          {
            long long v44 = 0u;
            long long v45 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v45 + 1))
          {
            if (swift_dynamicCast())
            {
              uint64_t v22 = v42;
LABEL_19:
              uint64_t v23 = ((uint64_t (*)(id))v10)(objc_msgSend(v6, sel_setIsFirstPartyAppUsedForFollowup_, v22));
              if (*(void *)(v23 + 16)
                && (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0x616C507269417369, 0xE900000000000079),
                    (v25 & 1) != 0))
              {
                outlined init with copy of Any(*(void *)(v23 + 56) + 32 * v24, (uint64_t)&v44);
              }
              else
              {
                long long v44 = 0u;
                long long v45 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((void *)&v45 + 1))
              {
                if (swift_dynamicCast())
                {
                  uint64_t v26 = v42;
LABEL_28:
                  uint64_t v27 = ((uint64_t (*)(id))v10)(objc_msgSend(v6, sel_setIsAirPlay_, v26));
                  if (*(void *)(v27 + 16)
                    && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000224F66780),
                        (v29 & 1) != 0))
                  {
                    outlined init with copy of Any(*(void *)(v27 + 56) + 32 * v28, (uint64_t)&v44);
                  }
                  else
                  {
                    long long v44 = 0u;
                    long long v45 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((void *)&v45 + 1))
                  {
                    if (swift_dynamicCast())
                    {
                      uint64_t v30 = v42;
LABEL_37:
                      uint64_t v31 = v41(objc_msgSend(v6, sel_setIsSubscriber_, v30));
                      uint64_t v32 = v10();
                      v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 176))(v31, v32);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      objc_msgSend(v6, sel_setMediaEntitySimilarity_, v33);

                      uint64_t v34 = v10();
                      if (*(void *)(v34 + 16)
                        && (unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(0x707954616964656DLL, 0xE900000000000065), (v36 & 1) != 0))
                      {
                        outlined init with copy of Any(*(void *)(v34 + 56) + 32 * v35, (uint64_t)&v44);
                      }
                      else
                      {
                        long long v44 = 0u;
                        long long v45 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((void *)&v45 + 1))
                      {
                        if (swift_dynamicCast())
                        {
                          unint64_t v37 = v42;
                          unint64_t v38 = v43;
LABEL_46:
                          uint64_t v39 = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v3 + 200))(v37, v38);
                          swift_bridgeObjectRelease();
                          objc_msgSend(v6, sel_setMediaType_, v39);
                          return v6;
                        }
                      }
                      else
                      {
                        outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
                      }
                      unint64_t v37 = 0;
                      unint64_t v38 = 0xE000000000000000;
                      goto LABEL_46;
                    }
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
                  }
                  uint64_t v30 = 0;
                  goto LABEL_37;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
              }
              uint64_t v26 = 0;
              goto LABEL_28;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
          }
          uint64_t v22 = 0;
          goto LABEL_19;
        }
LABEL_9:
        v14.n128_u64[0] = 0;
        goto LABEL_10;
      }
    }
    else
    {
      long long v44 = 0u;
      long long v45 = 0u;
      swift_bridgeObjectRelease();
    }
    outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  return v6;
}

Swift::Bool __swiftcall PSEMediaSELFEmitter.isSameAppUsed(firstMediaData:userFollowupData:)(Swift::OpaquePointer firstMediaData, Swift::OpaquePointer userFollowupData)
{
  if (*((void *)firstMediaData._rawValue + 2))
  {
    unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000);
    if (v5)
    {
      outlined init with copy of Any(*((void *)firstMediaData._rawValue + 7) + 32 * v4, (uint64_t)v12);
      if (swift_dynamicCast())
      {
        if (*((void *)userFollowupData._rawValue + 2))
        {
          unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000);
          if (v7)
          {
            outlined init with copy of Any(*((void *)userFollowupData._rawValue + 7) + 32 * v6, (uint64_t)v12);
            if (swift_dynamicCast())
            {
              if ((v10 || v11 != 0xE000000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                && (v10 || v11 != 0xE000000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                swift_bridgeObjectRelease_n();
                char v8 = 1;
                return v8 & 1;
              }
              swift_bridgeObjectRelease();
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  char v8 = 0;
  return v8 & 1;
}

id PSEMediaSELFEmitter.getMediaEntitySimilarity(firstMediaData:userFollowupData:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB60]), sel_init);
  if (v4)
  {
    if (*(void *)(a1 + 16))
    {
      unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974, 0xE500000000000000);
      if (v6)
      {
        outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v36);
        if (swift_dynamicCast())
        {
          if (*(void *)(a2 + 16))
          {
            unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974, 0xE500000000000000);
            if (v8)
            {
              outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v7, (uint64_t)v36);
              if (swift_dynamicCast())
              {
                uint64_t v9 = HIBYTE(v35) & 0xF;
                if ((v35 & 0x2000000000000000) == 0) {
                  uint64_t v9 = *(void *)v34 & 0xFFFFFFFFFFFFLL;
                }
                if (v9)
                {
                  uint64_t v10 = HIBYTE(v35) & 0xF;
                  if ((v35 & 0x2000000000000000) == 0) {
                    uint64_t v10 = *(void *)v34 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v10)
                  {
                    swift_bridgeObjectRelease_n();
                    uint64_t v11 = 1;
LABEL_17:
                    objc_msgSend(v4, sel_setIsSameMediaTitle_, v11);
                    if (*(void *)(a1 + 16))
                    {
                      unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x747369747261, 0xE600000000000000);
                      if (v13)
                      {
                        outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v36);
                        if (swift_dynamicCast())
                        {
                          if (*(void *)(a2 + 16))
                          {
                            unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x747369747261, 0xE600000000000000);
                            if (v15)
                            {
                              outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v14, (uint64_t)v36);
                              if (swift_dynamicCast())
                              {
                                uint64_t v16 = HIBYTE(v35) & 0xF;
                                if ((v35 & 0x2000000000000000) == 0) {
                                  uint64_t v16 = *(void *)v34 & 0xFFFFFFFFFFFFLL;
                                }
                                if (v16)
                                {
                                  uint64_t v17 = HIBYTE(v35) & 0xF;
                                  if ((v35 & 0x2000000000000000) == 0) {
                                    uint64_t v17 = *(void *)v34 & 0xFFFFFFFFFFFFLL;
                                  }
                                  if (v17)
                                  {
                                    swift_bridgeObjectRelease_n();
                                    uint64_t v18 = 1;
LABEL_32:
                                    objc_msgSend(v4, sel_setIsSameMediaArtist_, v18);
                                    if (*(void *)(a1 + 16))
                                    {
                                      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D75626C61, 0xE500000000000000);
                                      if (v20)
                                      {
                                        outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v19, (uint64_t)v36);
                                        if (swift_dynamicCast())
                                        {
                                          if (*(void *)(a2 + 16))
                                          {
                                            unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D75626C61, 0xE500000000000000);
                                            if (v22)
                                            {
                                              outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v21, (uint64_t)v36);
                                              if (swift_dynamicCast())
                                              {
                                                uint64_t v23 = HIBYTE(v35) & 0xF;
                                                if ((v35 & 0x2000000000000000) == 0) {
                                                  uint64_t v23 = *(void *)v34 & 0xFFFFFFFFFFFFLL;
                                                }
                                                if (v23)
                                                {
                                                  uint64_t v24 = HIBYTE(v35) & 0xF;
                                                  if ((v35 & 0x2000000000000000) == 0) {
                                                    uint64_t v24 = *(void *)v34 & 0xFFFFFFFFFFFFLL;
                                                  }
                                                  if (v24)
                                                  {
                                                    swift_bridgeObjectRelease_n();
                                                    uint64_t v25 = 1;
LABEL_47:
                                                    objc_msgSend(v4, sel_setIsSameMediaAlbum_, v25);
                                                    if (*(void *)(a1 + 16))
                                                    {
                                                      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL);
                                                      if (v27)
                                                      {
                                                        outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v26, (uint64_t)v36);
                                                        if (swift_dynamicCast())
                                                        {
                                                          if (*(void *)(a2 + 16))
                                                          {
                                                            unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL);
                                                            if (v29)
                                                            {
                                                              outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v28, (uint64_t)v36);
                                                              if (swift_dynamicCast())
                                                              {
                                                                uint64_t v30 = HIBYTE(v35) & 0xF;
                                                                if ((v35 & 0x2000000000000000) == 0) {
                                                                  uint64_t v30 = *(void *)v34 & 0xFFFFFFFFFFFFLL;
                                                                }
                                                                if (v30)
                                                                {
                                                                  uint64_t v31 = HIBYTE(v35) & 0xF;
                                                                  if ((v35 & 0x2000000000000000) == 0) {
                                                                    uint64_t v31 = *(void *)v34 & 0xFFFFFFFFFFFFLL;
                                                                  }
                                                                  if (v31)
                                                                  {
                                                                    swift_bridgeObjectRelease_n();
                                                                    uint64_t v32 = 1;
LABEL_62:
                                                                    objc_msgSend(v4, sel_setIsSameMediaItem_, v32);
                                                                    return v4;
                                                                  }
                                                                }
                                                                swift_bridgeObjectRelease();
                                                              }
                                                            }
                                                          }
                                                          swift_bridgeObjectRelease();
                                                        }
                                                      }
                                                    }
                                                    uint64_t v32 = 0;
                                                    goto LABEL_62;
                                                  }
                                                }
                                                swift_bridgeObjectRelease();
                                              }
                                            }
                                          }
                                          swift_bridgeObjectRelease();
                                        }
                                      }
                                    }
                                    uint64_t v25 = 0;
                                    goto LABEL_47;
                                  }
                                }
                                swift_bridgeObjectRelease();
                              }
                            }
                          }
                          swift_bridgeObjectRelease();
                        }
                      }
                    }
                    uint64_t v18 = 0;
                    goto LABEL_32;
                  }
                }
                swift_bridgeObjectRelease();
              }
            }
          }
          swift_bridgeObjectRelease();
        }
      }
    }
    uint64_t v11 = 0;
    goto LABEL_17;
  }
  return v4;
}

uint64_t PSEMediaSELFEmitter.getMediaContentDurationBucket(mediaContentDuration:)(double a1)
{
  if (a1 >= 1.0 && a1 < 5.0) {
    return 1;
  }
  if (a1 >= 5.0 && a1 < 10.0) {
    return 2;
  }
  if (a1 >= 10.0 && a1 < 15.0) {
    return 3;
  }
  if (a1 >= 15.0 && a1 < 20.0) {
    return 4;
  }
  if (a1 >= 20.0 && a1 < 25.0) {
    return 5;
  }
  if (a1 >= 25.0 && a1 < 30.0) {
    return 6;
  }
  if (a1 >= 30.0 && a1 < 40.0) {
    return 7;
  }
  if (a1 >= 40.0 && a1 < 50.0) {
    return 8;
  }
  if (a1 >= 50.0 && a1 < 60.0) {
    return 9;
  }
  if (a1 >= 60.0 && a1 < 120.0) {
    return 10;
  }
  if (a1 >= 120.0 && a1 < 180.0) {
    return 11;
  }
  if (a1 >= 180.0 && a1 < 240.0) {
    return 12;
  }
  if (a1 >= 240.0 && a1 < 300.0) {
    return 13;
  }
  if (a1 >= 300.0 && a1 < 600.0) {
    return 14;
  }
  if (a1 >= 600.0 && a1 < 1800.0) {
    return 15;
  }
  if (a1 >= 1800.0 && a1 <= 7200.0) {
    return 16;
  }
  if (a1 <= 7200.0) {
    return 0;
  }
  return 17;
}

uint64_t PSEMediaSELFEmitter.getMediaPlayBackState(mediaPlayBackState:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x676E6979616C50 && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 1;
  }
  if (a1 == 0x646573756150 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 2;
  }
  if (a1 == 0x646570706F7453 && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 3;
  }
  if (a1 == 0x7075727265746E49 && a2 == 0xEB00000000646574
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 4;
  }
  uint64_t v4 = 5;
  if (a1 != 0x676E696B656553 || a2 != 0xE700000000000000)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      return 5;
    }
    else {
      return 0;
    }
  }
  return v4;
}

uint64_t PSEMediaSELFEmitter.getMediaType(mediaType:)()
{
  if (StringProtocol.contains<A>(_:)()) {
    return 1;
  }
  if (StringProtocol.contains<A>(_:)()) {
    return 2;
  }
  if (StringProtocol.contains<A>(_:)()) {
    return 3;
  }
  if (StringProtocol.contains<A>(_:)()) {
    return 4;
  }
  if (StringProtocol.contains<A>(_:)()) {
    return 5;
  }
  if (StringProtocol.contains<A>(_:)()) {
    return 6;
  }
  if (StringProtocol.contains<A>(_:)()) {
    return 7;
  }
  return 0;
}

uint64_t PSEMediaSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSEMediaSELFEmitter.init()()
{
  return v0;
}

uint64_t PSEMediaSELFEmitter.deinit()
{
  return v0;
}

uint64_t PSEMediaSELFEmitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

double default argument 2 of static Utils.deltaTBetween(eventStart:siriUISession:duration:)()
{
  return 0.0;
}

unint64_t default argument 1 of UserDefaultsDomainProvider.init(collectorIdentifier:domain:)()
{
  return 0xD000000000000021;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MRPlaybackState()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MRPlaybackState()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MRPlaybackState()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance MRPlaybackState@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MRPlaybackState(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MRPlaybackState(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        char v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  BOOL v13;

  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    do
    {
      BOOL v11 = (void *)(v10 + 16 * v6);
      uint64_t v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          char v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return v6;
          }
        }
      }
      else if (!a2)
      {
        return v6;
      }
      unint64_t v6 = (v6 + 1) & v9;
    }
    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  Swift::UInt32 v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x22A627400](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x22A627400](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t type metadata accessor for PSEMediaSELFEmitter()
{
  return self;
}

uint64_t method lookup function for PSEMediaSELFEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEMediaSELFEmitter);
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.emitPSEMedia(mediaSignals:appLaunchSignals:task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getLastMediaUserFollowupAction(firstMediaSignal:mediaUserFollowupSignal:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.isSameAppUsed(firstMediaData:userFollowupData:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getMediaEntitySimilarity(firstMediaData:userFollowupData:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getMediaContentDurationBucket(mediaContentDuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getMediaPlayBackState(mediaPlayBackState:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getMediaType(mediaType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

void type metadata accessor for BMAppIntentInteractionDirection(uint64_t a1)
{
}

void type metadata accessor for MRPlaybackState(uint64_t a1)
{
}

void type metadata accessor for BMAppIntentInteractionDirection(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MRPlaybackState and conformance MRPlaybackState()
{
  unint64_t result = lazy protocol witness table cache variable for type MRPlaybackState and conformance MRPlaybackState;
  if (!lazy protocol witness table cache variable for type MRPlaybackState and conformance MRPlaybackState)
  {
    type metadata accessor for MRPlaybackState(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MRPlaybackState and conformance MRPlaybackState);
  }
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

void TranscriptSignalFactory.convertBiomeEventToTranscriptStep(bmEvent:)()
{
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Date?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    BOOL v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  Swift::UInt32 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  void *v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;

  Swift::UInt32 v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MRPlaybackState, String>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    char v10 = (void *)(v3[7] + 16 * result);
    *char v10 = v6;
    v10[1] = v5;
    BOOL v11 = v3[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    uint64_t v4 = *((_DWORD *)v9 - 4);
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t NowPlayingSignalFactory.nowPlayingActionMRPlaybackState.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NowPlayingSignalFactory.postEndDate : NowPlayingSignalFactory(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 104))(v5);
}

uint64_t NowPlayingSignalFactory.postEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate;
  swift_beginAccess();
  return outlined init with copy of Date?(v3, a1, &demangling cache variable for type metadata for Date?);
}

uint64_t NowPlayingSignalFactory.postEndDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*NowPlayingSignalFactory.postEndDate.modify())()
{
  return NowPlayingSignalFactory.postEndDate.modify;
}

unint64_t NowPlayingSignalFactory.createMediaDataFromNowPlayingEvent(bundleId:deltaT:bmEvent:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v87 = a2;
  uint64_t v6 = type metadata accessor for ReliabilityCategory();
  uint64_t v86 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388]();
  v85 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v8 = objc_msgSend(a4, sel_duration);
  if (!v8)
  {
    id v9 = objc_msgSend(a4, sel_title);
    if (!v9) {
      goto LABEL_8;
    }
    char v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (v11 == 0x754D20656C707041 && v13 == 0xED00003120636973)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
LABEL_8:
        if (objc_msgSend(a4, sel_playbackState) == 3
          || objc_msgSend(a4, sel_playbackState) == 1)
        {
          if (one-time initialization token for engagement != -1) {
            swift_once();
          }
          uint64_t v16 = type metadata accessor for Logger();
          __swift_project_value_buffer(v16, (uint64_t)static Logger.engagement);
          long long v17 = Logger.logObject.getter();
          os_log_type_t v18 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v17, v18))
          {
            unint64_t v19 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v19 = 0;
            _os_log_impl(&dword_224EDB000, v17, v18, "Biome Event - media content duration is too short. Ignore other noises.", v19, 2u);
            MEMORY[0x22A627DB0](v19, -1, -1);
          }

          return 0;
        }
        if (one-time initialization token for engagement != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        __swift_project_value_buffer(v26, (uint64_t)static Logger.engagement);
        char v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v22, v23)) {
          goto LABEL_25;
        }
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        uint64_t v25 = "Media content duration is 0 for Apple Music 1 (Radio Station) donations pause/interupted.";
        goto LABEL_24;
      }
    }
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.engagement);
    char v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v22, v23)) {
      goto LABEL_25;
    }
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    uint64_t v25 = "Media content duration is 0 for Apple Music 1 (Radio Station) donations playing.";
LABEL_24:
    _os_log_impl(&dword_224EDB000, v22, v23, v25, v24, 2u);
    MEMORY[0x22A627DB0](v24, -1, -1);
LABEL_25:
  }
  id v27 = objc_msgSend(a4, sel_iTunesStoreIdentifier);
  if (!v27)
  {
    if (a1 != 0x6C7070612E6D6F63 || v87 != 0xEF636973754D2E65) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    unint64_t v31 = 0;
    uint64_t v29 = 0;
    goto LABEL_35;
  }
  unint64_t v28 = v27;
  uint64_t v84 = v6;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v31 = v30;

  if (a1 == 0x6C7070612E6D6F63 && v87 == 0xEF636973754D2E65)
  {
    a1 = 0x6C7070612E6D6F63;
    if (!v31) {
      goto LABEL_35;
    }
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || !v31)
  {
    goto LABEL_35;
  }
  if ((v29 || v31 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_35:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_224F63650;
    uint64_t v33 = MEMORY[0x263F8D310];
    *(void *)(inited + 32) = 0x656372756F73;
    *(void *)(inited + 40) = 0xE600000000000000;
    *(void *)(inited + 48) = a1;
    *(void *)(inited + 56) = v87;
    *(void *)(inited + 72) = v33;
    *(void *)(inited + 80) = 0x745373656E755469;
    unint64_t v34 = 0xE000000000000000;
    if (v31)
    {
      unint64_t v34 = v31;
      uint64_t v35 = v29;
    }
    else
    {
      uint64_t v35 = 0;
    }
    *(void *)(inited + 88) = 0xED0000644965726FLL;
    *(void *)(inited + 96) = v35;
    *(void *)(inited + 104) = v34;
    *(void *)(inited + 120) = v33;
    *(void *)(inited + 128) = 0xD000000000000014;
    *(void *)(inited + 136) = 0x8000000224F666A0;
    uint64_t v36 = MEMORY[0x263F8D538];
    *(double *)(inited + 144) = (double)v8;
    *(void *)(inited + 168) = v36;
    *(void *)(inited + 176) = 0x656C746974;
    *(void *)(inited + 184) = 0xE500000000000000;
    swift_bridgeObjectRetain();
    id v37 = objc_msgSend(a4, sel_title);
    if (v37)
    {
      unint64_t v38 = v37;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v40;

      unint64_t v42 = (uint64_t *)(inited + 192);
      *(void *)(inited + 216) = v33;
      if (v41)
      {
        *unint64_t v42 = v39;
        goto LABEL_51;
      }
    }
    else
    {
      unint64_t v42 = (uint64_t *)(inited + 192);
      *(void *)(inited + 216) = v33;
    }
    *unint64_t v42 = 0;
    unint64_t v41 = 0xE000000000000000;
LABEL_51:
    *(void *)(inited + 200) = v41;
    *(void *)(inited + 224) = 0x747369747261;
    *(void *)(inited + 232) = 0xE600000000000000;
    id v49 = objc_msgSend(a4, sel_artist);
    if (v49)
    {
      v50 = v49;
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;

      v54 = (uint64_t *)(inited + 240);
      *(void *)(inited + 264) = v33;
      if (v53)
      {
        uint64_t *v54 = v51;
        goto LABEL_56;
      }
    }
    else
    {
      v54 = (uint64_t *)(inited + 240);
      *(void *)(inited + 264) = v33;
    }
    uint64_t *v54 = 0;
    unint64_t v53 = 0xE000000000000000;
LABEL_56:
    *(void *)(inited + 248) = v53;
    *(void *)(inited + 272) = 0x6D75626C61;
    *(void *)(inited + 280) = 0xE500000000000000;
    id v55 = objc_msgSend(a4, sel_album);
    if (v55)
    {
      v56 = v55;
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v59 = v58;

      v60 = (uint64_t *)(inited + 288);
      *(void *)(inited + 312) = v33;
      if (v59)
      {
        uint64_t *v60 = v57;
        goto LABEL_61;
      }
    }
    else
    {
      v60 = (uint64_t *)(inited + 288);
      *(void *)(inited + 312) = v33;
    }
    uint64_t *v60 = 0;
    unint64_t v59 = 0xE000000000000000;
LABEL_61:
    *(void *)(inited + 296) = v59;
    *(void *)(inited + 320) = 0x65726E6567;
    *(void *)(inited + 328) = 0xE500000000000000;
    id v61 = objc_msgSend(a4, sel_genre);
    if (v61)
    {
      v62 = v61;
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v65 = v64;

      v66 = (uint64_t *)(inited + 336);
      *(void *)(inited + 360) = v33;
      if (v65)
      {
        uint64_t *v66 = v63;
        goto LABEL_66;
      }
    }
    else
    {
      v66 = (uint64_t *)(inited + 336);
      *(void *)(inited + 360) = v33;
    }
    uint64_t *v66 = 0;
    unint64_t v65 = 0xE000000000000000;
LABEL_66:
    *(void *)(inited + 344) = v65;
    *(void *)(inited + 368) = 0x64657370616C65;
    *(void *)(inited + 376) = 0xE700000000000000;
    *(double *)(inited + 384) = (double)objc_msgSend(a4, sel_elapsed);
    *(void *)(inited + 408) = MEMORY[0x263F8D538];
    *(void *)(inited + 416) = 0x707954616964656DLL;
    *(void *)(inited + 424) = 0xE900000000000065;
    id v67 = objc_msgSend(a4, sel_mediaType);
    if (v67)
    {
      v68 = v67;
      uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v71 = v70;

      v72 = (uint64_t *)(inited + 432);
      *(void *)(inited + 456) = v33;
      if (v71)
      {
        uint64_t *v72 = v69;
        goto LABEL_71;
      }
    }
    else
    {
      v72 = (uint64_t *)(inited + 432);
      *(void *)(inited + 456) = v33;
    }
    uint64_t *v72 = 0;
    unint64_t v71 = 0xE000000000000000;
LABEL_71:
    *(void *)(inited + 440) = v71;
    *(void *)(inited + 464) = 0xD000000000000016;
    *(void *)(inited + 472) = 0x8000000224F66760;
    uint64_t v90 = a1;
    uint64_t v91 = v87;
    uint64_t v88 = 0x6C7070612E6D6F63;
    unint64_t v89 = 0xEA00000000002E65;
    lazy protocol witness table accessor for type String and conformance String();
    char v73 = StringProtocol.contains<A>(_:)();
    uint64_t v74 = MEMORY[0x263F8D4F8];
    *(unsigned char *)(inited + 480) = v73 & 1;
    *(void *)(inited + 504) = v74;
    *(void *)(inited + 512) = 0xD000000000000012;
    *(void *)(inited + 520) = 0x8000000224F66780;
    id v75 = objc_msgSend(a4, sel_iTunesSubscriptionIdentifier);
    if (v75)
    {
      v76 = v75;
      uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v79 = v78;

      if (!v77 && v79 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_77:
        char v80 = 1;
        goto LABEL_78;
      }
      char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v80 = 0;
      if (v81) {
        goto LABEL_77;
      }
    }
    else
    {
      char v80 = 0;
    }
LABEL_78:
    *(void *)(inited + 552) = v74;
    *(unsigned char *)(inited + 528) = v80;
    *(void *)(inited + 560) = 0x616C507269417369;
    *(void *)(inited + 568) = 0xE900000000000079;
    unsigned __int8 v82 = objc_msgSend(a4, sel_isAirPlayVideo);
    *(void *)(inited + 600) = v74;
    *(unsigned char *)(inited + 576) = v82;
    return specialized Dictionary.init(dictionaryLiteral:)(inited);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Logger.engagement);
  uint64_t v44 = *MEMORY[0x263F75170];
  uint64_t v45 = type metadata accessor for NowPlayingEventDataIssues();
  uint64_t v46 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 104))(v85, v44, v45);
  uint64_t v47 = v86;
  uint64_t v48 = v84;
  (*(void (**)(uint64_t, void, uint64_t))(v86 + 104))(v46, *MEMORY[0x263F750F8], v84);
  Logger.debug(_:_:)(0xD000000000000032, 0x8000000224F66840, v46);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
  return 0;
}

uint64_t NowPlayingSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt32 v10 = objc_msgSend(a1, sel_playbackState);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(v2 + 16);
    if (*(void *)(v11 + 16))
    {
      int v12 = v10;
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
      if (v14)
      {
        char v15 = (uint64_t *)(*(void *)(v11 + 56) + 16 * v13);
        uint64_t v16 = v15[1];
        unint64_t v52 = (uint8_t *)*v15;
        swift_bridgeObjectRetain();
        id v17 = objc_msgSend(a1, sel_bundleID);
        if (v17)
        {
          os_log_type_t v18 = v17;
          uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          id v21 = objc_msgSend(a1, sel_absoluteTimestamp);
          uint64_t v53 = v3;
          if (v21)
          {
            char v22 = v21;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v23 = type metadata accessor for Date();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v9, 0, 1, v23);
          }
          else
          {
            uint64_t v37 = type metadata accessor for Date();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v9, 1, 1, v37);
          }
          type metadata accessor for Utils();
          static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v9, a2, (uint64_t)&v54, (double)objc_msgSend(a1, sel_duration));
          outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
          uint64_t v38 = v54;
          uint64_t v39 = v55;
          uint64_t v40 = v56;
          uint64_t v41 = v57;
          uint64_t v42 = v58;
          HIDWORD(v50) = v59;
          uint64_t v44 = v51;
          uint64_t v43 = (uint64_t)v52;
          uint64_t v45 = specialized NowPlayingSignalFactory.adaptInvalidBiomeEvent(action:bundleId:playbackState:deltaT:)((uint64_t)v52, v16, v51, v20, v12, &v54);
          if (v45)
          {
            uint64_t v35 = v45;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v46 = v16;
            uint64_t v54 = v38;
            uint64_t v55 = v39;
            uint64_t v56 = v40;
            uint64_t v57 = v41;
            uint64_t v47 = v42;
            uint64_t v58 = v42;
            char v48 = BYTE4(v50);
            unsigned __int8 v59 = BYTE4(v50);
            uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void *))(*(void *)v4 + 128))(v44, v20, &v54, a1);
            swift_bridgeObjectRelease();
            if (v49)
            {
              type metadata accessor for Signal();
              uint64_t v35 = swift_allocObject();
              *(void *)(v35 + 16) = v38;
              *(void *)(v35 + 24) = v39;
              *(void *)(v35 + 32) = v40;
              *(void *)(v35 + 40) = v41;
              *(void *)(v35 + 48) = v47;
              *(unsigned char *)(v35 + 56) = v48;
              *(void *)(v35 + 64) = 0x636973754DLL;
              *(void *)(v35 + 72) = 0xE500000000000000;
              *(void *)(v35 + 80) = v43;
              *(void *)(v35 + 88) = v46;
              *(unsigned char *)(v35 + 96) = 1;
              *(void *)(v35 + 104) = v49;
            }
            else
            {
              swift_bridgeObjectRelease();
              return 0;
            }
          }
          return v35;
        }
        swift_bridgeObjectRelease();
      }
    }
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.engagement);
    id v25 = a1;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v53 = v3;
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v54 = v29;
      *(_DWORD *)unint64_t v28 = 136315138;
      unint64_t v52 = v28 + 4;
      id v30 = v25;
      id v31 = objc_msgSend(v30, sel_description);
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224EDB000, v26, v27, "This biome event %s is not supported for PSE Now Playing.", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v29, -1, -1);
      MEMORY[0x22A627DB0](v28, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NowPlayingSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  os_log_type_t v27 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v26 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x263F8EE78];
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v15 = a2 + *(int *)(type metadata accessor for SiriUISession(0) + 24);
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void *)(v16 - 8);
    os_log_type_t v18 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v26, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v16);
    (*(void (**)(char *))(*(void *)v3 + 104))(v18);
    uint64_t v19 = v31;
    uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 168);
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v22 = v20(v21);
    swift_bridgeObjectRelease();
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 152))(v19);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v24 = v27;
    *os_log_type_t v27 = v22;
    v24[1] = v23;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_3:
  Swift::UInt32 v10 = *(uint64_t (**)(void, void))(*(void *)v3 + 136);
  uint64_t v30 = *(void *)v3 + 136;
  if (v8 >= 1)
  {
    uint64_t v11 = 0;
    unint64_t v28 = v10;
    uint64_t v29 = v8;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x22A627400](v11, a1);
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      unint64_t v13 = v12;
      if (v10(v12, a2))
      {
        uint64_t v14 = swift_retain();
        MEMORY[0x22A6270D0](v14);
        if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
        Swift::UInt32 v10 = v28;
        uint64_t v8 = v29;
      }
      else
      {
      }
      ++v11;
    }
    while (v8 != v11);
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

unint64_t NowPlayingSignalFactory.transformSignalsToFeatures(signals:)(unint64_t a1)
{
  void (*v75)(long long *__return_ptr, uint64_t);
  uint64_t v76;
  char v77;
  uint64_t v78;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void (*v83)(long long *, void);
  void (*v84)(uint64_t *, void);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (**v107)(char *, char *, void *);
  uint64_t v108;
  unint64_t v109;
  char *v110;
  void *v111;
  void (**v112)(char *, void, uint64_t);
  unsigned int v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(long long *__return_ptr, uint64_t);
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned char v123[32];
  uint64_t v124;
  unint64_t v125;
  long long v126;
  long long v127;

  uint64_t v4 = type metadata accessor for ProtoPlayMediaTaskFeatureSet();
  MEMORY[0x270FA5388](v4 - 8);
  v115 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for ProtoTaskEngagementType();
  unint64_t v6 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117);
  v116 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)type metadata accessor for ProtoTaskEngagementFeatureSet();
  v118 = *(v8 - 1);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v99 - v12;
  v101 = type metadata accessor for ReliabilityCategory();
  v100 = *(void *)(v101 - 8);
  MEMORY[0x270FA5388](v101);
  v99 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_74:
    if (one-time initialization token for engagement == -1)
    {
LABEL_75:
      uint64_t v86 = type metadata accessor for Logger();
      __swift_project_value_buffer(v86, (uint64_t)static Logger.engagement);
      uint64_t v87 = *MEMORY[0x263F75168];
      uint64_t v88 = type metadata accessor for NowPlayingEventDataIssues();
      unint64_t v89 = (uint64_t)v99;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v88 - 8) + 104))(v99, v87, v88);
      uint64_t v90 = v100;
      uint64_t v91 = v101;
      (*(void (**)(uint64_t, void, uint64_t))(v100 + 104))(v89, *MEMORY[0x263F750F8], v101);
      Logger.debug(_:_:)(0xD000000000000015, 0x8000000224F66900, v89);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v91);
      return MEMORY[0x263F8EE78];
    }
LABEL_85:
    swift_once();
    goto LABEL_75;
  }
LABEL_73:
  swift_bridgeObjectRetain();
  v85 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v85) {
    goto LABEL_74;
  }
LABEL_3:
  unint64_t v15 = (*(uint64_t (**)(unint64_t))(*(void *)v1 + 160))(a1);
  unint64_t v16 = v15;
  if (v15 >> 62)
  {
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v17)
    {
LABEL_5:
      if (v17 < 1)
      {
        __break(1u);
        goto LABEL_83;
      }
      uint64_t v18 = 0;
      v114 = v16 & 0xC000000000000001;
      v113 = *MEMORY[0x263F74FA0];
      v112 = (void (**)(char *, void, uint64_t))(v6 + 104);
      v107 = (void (**)(char *, char *, void *))(v118 + 16);
      v106 = v118 + 32;
      v105 = v118 + 8;
      unint64_t v2 = MEMORY[0x263F8EE78];
      v103 = MEMORY[0x263F8EE58] + 8;
      v102 = 0x8000000224F666A0;
      double v19 = 0.0;
      v111 = v8;
      v110 = v11;
      v109 = v16;
      v108 = v17;
      v104 = v13;
      do
      {
        if (v114)
        {
          a1 = MEMORY[0x22A627400](v18, v16);
        }
        else
        {
          a1 = *(void *)(v16 + 8 * v18 + 32);
          swift_retain();
        }
        ProtoTaskEngagementFeatureSet.init()();
        (*v112)(v116, v113, v117);
        uint64_t v20 = ProtoTaskEngagementFeatureSet.engagementType.setter();
        uint64_t v8 = *(void **)(*(void *)a1 + 120);
        unint64_t v1 = a1;
        v122 = *(void *)a1 + 120;
        ((void (*)(long long *__return_ptr, uint64_t))v8)(&v126, v20);
        if ((~(void)v126 & 0x7FF0000000000000) == 0)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        if (*(double *)&v126 <= -1.0) {
          goto LABEL_71;
        }
        if (*(double *)&v126 >= 1.84467441e19) {
          goto LABEL_72;
        }
        ProtoTaskEngagementFeatureSet.startTimestampMs.setter();
        ProtoPlayMediaTaskFeatureSet.init()();
        uint64_t v21 = (uint64_t (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        ProtoTaskFeatureSet.playMediaFeatureSet.setter();
        uint64_t v22 = v21(&v126, 0);
        uint64_t v23 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 216);
        uint64_t v24 = v23(v22);
        if (*(void *)(v24 + 16)
          && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000),
              (v26 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v24 + 56) + 32 * v25, (uint64_t)&v126);
        }
        else
        {
          v126 = 0u;
          v127 = 0u;
        }
        swift_bridgeObjectRelease();
        v121 = v2;
        v120 = v18;
        v119 = (void (*)(long long *__return_ptr, uint64_t))v8;
        if (*((void *)&v127 + 1)) {
          swift_dynamicCast();
        }
        else {
          outlined destroy of Any?((uint64_t)&v126, &demangling cache variable for type metadata for Any?);
        }
        os_log_type_t v27 = (void (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        unint64_t v28 = (void (*)(uint64_t *, void))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        ProtoPlayMediaTaskFeatureSet.appBundleID.setter();
        v28(&v124, 0);
        v27(&v126, 0);
        uint64_t v29 = (uint64_t (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        uint64_t v30 = (void (*)(uint64_t *, void))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        ProtoPlayMediaTaskFeatureSet.playDurationInSec.setter();
        v30(&v124, 0);
        uint64_t v31 = v29(&v126, 0);
        uint64_t v32 = v23(v31);
        if (*(void *)(v32 + 16)
          && (unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974, 0xE500000000000000), (v34 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v32 + 56) + 32 * v33, (uint64_t)&v126);
        }
        else
        {
          v126 = 0u;
          v127 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v127 + 1)) {
          swift_dynamicCast();
        }
        else {
          outlined destroy of Any?((uint64_t)&v126, &demangling cache variable for type metadata for Any?);
        }
        uint64_t v35 = (uint64_t (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        uint64_t v36 = (void (*)(uint64_t *, void))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        uint64_t v37 = (void (*)(unsigned char *, void))ProtoPlayMediaTaskFeatureSet.mediaEntity.modify();
        ProtoMediaEntitySignal.title.setter();
        v37(v123, 0);
        v36(&v124, 0);
        uint64_t v38 = v35(&v126, 0);
        uint64_t v39 = v23(v38);
        if (*(void *)(v39 + 16)
          && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(0x747369747261, 0xE600000000000000),
              (v41 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v40, (uint64_t)&v126);
        }
        else
        {
          v126 = 0u;
          v127 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v127 + 1)) {
          swift_dynamicCast();
        }
        else {
          outlined destroy of Any?((uint64_t)&v126, &demangling cache variable for type metadata for Any?);
        }
        uint64_t v42 = (uint64_t (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        uint64_t v43 = (void (*)(uint64_t *, void))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        uint64_t v44 = (void (*)(unsigned char *, void))ProtoPlayMediaTaskFeatureSet.mediaEntity.modify();
        ProtoMediaEntitySignal.artist.setter();
        v44(v123, 0);
        v43(&v124, 0);
        uint64_t v45 = v42(&v126, 0);
        uint64_t v46 = v23(v45);
        if (*(void *)(v46 + 16)
          && (unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL),
              (v48 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v46 + 56) + 32 * v47, (uint64_t)&v126);
        }
        else
        {
          v126 = 0u;
          v127 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v127 + 1)) {
          swift_dynamicCast();
        }
        else {
          outlined destroy of Any?((uint64_t)&v126, &demangling cache variable for type metadata for Any?);
        }
        uint64_t v49 = (uint64_t (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        uint64_t v50 = (void (*)(uint64_t *, void))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        uint64_t v51 = (void (*)(unsigned char *, void))ProtoPlayMediaTaskFeatureSet.mediaEntity.modify();
        ProtoMediaEntitySignal.adamIdentifier.setter();
        v51(v123, 0);
        v50(&v124, 0);
        uint64_t v52 = v49(&v126, 0);
        uint64_t v53 = v23(v52);
        if (*(void *)(v53 + 16)
          && (unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D75626C61, 0xE500000000000000), (v55 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v53 + 56) + 32 * v54, (uint64_t)&v126);
        }
        else
        {
          v126 = 0u;
          v127 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v127 + 1)) {
          swift_dynamicCast();
        }
        else {
          outlined destroy of Any?((uint64_t)&v126, &demangling cache variable for type metadata for Any?);
        }
        uint64_t v56 = (uint64_t (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        uint64_t v57 = (void (*)(uint64_t *, void))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        uint64_t v58 = (void (*)(unsigned char *, void))ProtoPlayMediaTaskFeatureSet.mediaEntity.modify();
        ProtoMediaEntitySignal.album.setter();
        v58(v123, 0);
        v57(&v124, 0);
        uint64_t v59 = v56(&v126, 0);
        uint64_t v60 = v23(v59);
        if (*(void *)(v60 + 16)
          && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, v102), (v62 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v60 + 56) + 32 * v61, (uint64_t)&v126);
        }
        else
        {
          v126 = 0u;
          v127 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v127 + 1)) {
          swift_dynamicCast();
        }
        else {
          outlined destroy of Any?((uint64_t)&v126, &demangling cache variable for type metadata for Any?);
        }
        uint64_t v63 = (uint64_t (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        unint64_t v64 = (void (*)(uint64_t *, void))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        ProtoPlayMediaTaskFeatureSet.mediaContentLengthInSec.setter();
        v64(&v124, 0);
        uint64_t v65 = v63(&v126, 0);
        v66 = *(void (**)(uint64_t))(*(void *)a1 + 168);
        v66(v65);
        id v67 = (uint64_t (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v68 = (void (*)(uint64_t *, void))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        ProtoPlayMediaTaskFeatureSet.actionState.setter();
        v68(&v124, 0);
        uint64_t v69 = v67(&v126, 0);
        *(void *)&v126 = ((uint64_t (*)(uint64_t))v66)(v69);
        *((void *)&v126 + 1) = v70;
        v124 = 2036427856;
        v125 = 0xE400000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        char v71 = StringProtocol.contains<A>(_:)();
        v72 = (void *)swift_bridgeObjectRelease();
        if (v71)
        {
          char v73 = v111;
          uint64_t v74 = v120;
          id v75 = v119;
          if (v19 == 0.0)
          {
            v72 = ((void *(*)(long long *__return_ptr, void *))v119)(&v126, v72);
            double v19 = *(double *)&v126;
          }
        }
        else
        {
          char v73 = v111;
          uint64_t v74 = v120;
          id v75 = v119;
        }
        *(void *)&v126 = ((uint64_t (*)(void *))v66)(v72);
        *((void *)&v126 + 1) = v76;
        v124 = 2036427856;
        v125 = 0xE400000000000000;
        uint64_t v77 = StringProtocol.contains<A>(_:)();
        uint64_t v78 = swift_bridgeObjectRelease();
        unint64_t v13 = v104;
        if ((v77 & 1) == 0) {
          v75(&v126, v78);
        }
        uint64_t v11 = v110;
        (*v107)(v110, v13, v73);
        unint64_t v2 = v121;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v16 = v109;
        char v80 = v108;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, MEMORY[0x263F74F40], MEMORY[0x263F74F40]);
        }
        unint64_t v6 = *(void *)(v2 + 16);
        char v81 = *(void *)(v2 + 24);
        if (v6 >= v81 >> 1) {
          unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v6 + 1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, MEMORY[0x263F74F40], MEMORY[0x263F74F40]);
        }
        uint64_t v18 = v74 + 1;
        *(void *)(v2 + 16) = v6 + 1;
        unsigned __int8 v82 = v118;
        (*(void (**)(unint64_t, char *, void *))(v118 + 32))(v2+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(void *)(v82 + 72) * v6, v11, v73);
        swift_release();
        (*(void (**)(char *, void *))(v82 + 8))(v13, v73);
      }
      while (v80 != v18);
      swift_bridgeObjectRelease();
      if (!*(void *)(v2 + 16)) {
        goto LABEL_78;
      }
LABEL_67:
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if (*(void *)(v2 + 16))
        {
LABEL_69:
          uint64_t v83 = (void (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
          uint64_t v84 = (void (*)(uint64_t *, void))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
          ProtoPlayMediaTaskFeatureSet.playDurationInSec.setter();
          v84(&v124, 0);
          v83(&v126, 0);
          return v2;
        }
        goto LABEL_84;
      }
LABEL_83:
      unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      if (*(void *)(v2 + 16)) {
        goto LABEL_69;
      }
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v2 = MEMORY[0x263F8EE78];
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    goto LABEL_67;
  }
LABEL_78:
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  v92 = type metadata accessor for Logger();
  __swift_project_value_buffer(v92, (uint64_t)static Logger.engagement);
  v93 = *MEMORY[0x263F75168];
  v94 = type metadata accessor for NowPlayingEventDataIssues();
  v95 = (uint64_t)v99;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v94 - 8) + 104))(v99, v93, v94);
  v96 = v100;
  v97 = v101;
  (*(void (**)(uint64_t, void, uint64_t))(v100 + 104))(v95, *MEMORY[0x263F750F8], v101);
  Logger.debug(_:_:)(0xD000000000000020, 0x8000000224F668D0, v95);
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
  return v2;
}

uint64_t NowPlayingSignalFactory.normalizeSignalsForFeature(signals:)(uint64_t a1)
{
  if (a1 < 0 || (a1 & 0x4000000000000000) != 0)
  {
    unint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v1 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v21, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v23[0] = v1;
  specialized MutableCollection<>.sort(by:)(v23);
  uint64_t v2 = v23[0];
  LODWORD(v3) = v23[0] < 0 || (v23[0] & 0x4000000000000000) != 0;
  if (v3 == 1)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(v23[0] + 16);
    if (v4)
    {
LABEL_9:
      unsigned int v22 = v3;
      uint64_t v5 = 0;
      unint64_t v6 = v2 & 0xC000000000000001;
      uint64_t v7 = MEMORY[0x263F8D310];
      while (1)
      {
        if (v6)
        {
          uint64_t v8 = MEMORY[0x22A627400](v5, v2);
        }
        else
        {
          uint64_t v8 = *(void *)(v2 + 8 * v5 + 32);
          swift_retain();
        }
        v23[0] = (*(uint64_t (**)(void))(*(void *)v8 + 168))();
        v23[1] = v9;
        lazy protocol witness table accessor for type String and conformance String();
        unint64_t v3 = StringProtocol.contains<A>(_:)();
        swift_release();
        swift_bridgeObjectRelease();
        if (v3) {
          break;
        }
        uint64_t v10 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        ++v5;
        if (v10 == v4) {
          return v2;
        }
      }
      if (v4 < v5)
      {
        __break(1u);
      }
      else
      {
        uint64_t v7 = v22;
        if (v22)
        {
          swift_bridgeObjectRetain();
          unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
        }
        else
        {
          unint64_t v3 = *(void *)(v2 + 16);
        }
        if ((uint64_t)v3 >= v4)
        {
          if (!v6 || v4 == v5)
          {
LABEL_27:
            if (v22)
            {
              swift_bridgeObjectRetain();
              uint64_t v14 = _CocoaArrayWrapper.subscript.getter();
              uint64_t v7 = v15;
              uint64_t v5 = v16;
              unint64_t v3 = v17;
              swift_release_n();
              uint64_t v2 = v14;
              if ((v3 & 1) == 0)
              {
LABEL_31:
                uint64_t v11 = specialized _copyCollectionToContiguousArray<A>(_:)(v2, v7, v5, v3);
LABEL_38:
                swift_unknownObjectRelease();
                return v11;
              }
            }
            else
            {
              unint64_t v3 = (2 * v4) | 1;
              uint64_t v7 = v2 + 32;
            }
            type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain_n();
            uint64_t v18 = swift_dynamicCastClass();
            if (!v18)
            {
              swift_unknownObjectRelease();
              uint64_t v18 = MEMORY[0x263F8EE78];
            }
            uint64_t v19 = *(void *)(v18 + 16);
            swift_release();
            if (!__OFSUB__(v3 >> 1, v5))
            {
              if (v19 == (v3 >> 1) - v5)
              {
                uint64_t v11 = swift_dynamicCastClass();
                swift_unknownObjectRelease();
                if (v11) {
                  return v11;
                }
                uint64_t v11 = MEMORY[0x263F8EE78];
                goto LABEL_38;
              }
              goto LABEL_48;
            }
LABEL_47:
            __break(1u);
LABEL_48:
            swift_unknownObjectRelease();
            goto LABEL_31;
          }
          if (v5 < v4)
          {
            type metadata accessor for Signal();
            Swift::Int v12 = v5;
            do
            {
              Swift::Int v13 = v12 + 1;
              _ArrayBuffer._typeCheckSlowPath(_:)(v12);
              Swift::Int v12 = v13;
            }
            while (v4 != v13);
            goto LABEL_27;
          }
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      __break(1u);
      goto LABEL_46;
    }
  }
  return v2;
}

uint64_t NowPlayingSignalFactory.transformSignalsToBiomePSE(signals:)(uint64_t a1)
{
  void (*v105)(long long *__return_ptr, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char v108;
  void *v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  void (*v113)(long long *__return_ptr, uint64_t);
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  double v120;
  double v121;
  double v122;
  uint64_t (*v123)(uint64_t *);
  void (*v124)(uint64_t *, void);
  uint64_t *v125;
  uint64_t *v126;
  char v127;
  void *v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  char v134;
  unint64_t v135;
  char v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  char v143;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v145;
  _OWORD *v146;
  uint64_t result;
  uint64_t v148;
  void (**v149)(unint64_t, uint64_t);
  void (**v150)(unint64_t, uint64_t, uint64_t);
  unint64_t v151;
  int64_t v152;
  uint64_t v153;
  unsigned int (**v154)(uint64_t, uint64_t, uint64_t);
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  long long v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  _OWORD v168[2];
  uint64_t v169;
  unint64_t v170;
  long long v171;
  long long v172;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  v155 = (char *)&v148 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for Date();
  unint64_t v4 = *(void *)(v157 - 8);
  MEMORY[0x270FA5388](v157);
  unint64_t v6 = (unint64_t)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_81;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
LABEL_4:
  *(void *)&v171 = v7;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v171);
  uint64_t v8 = v171;
  v165 = 0;
  v151 = v6;
  if ((v171 & 0x8000000000000000) != 0 || (v171 & 0x4000000000000000) != 0)
  {
    swift_retain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v9 = *(void *)(v171 + 16);
    swift_retain();
  }
  v161 = v4;
  if (v9)
  {
    if (v9 < 1)
    {
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
      goto LABEL_233;
    }
    unint64_t v10 = v8 & 0xC000000000000001;
    if ((v8 & 0xC000000000000001) != 0)
    {
      uint64_t v11 = MEMORY[0x22A627400](0, v8);
    }
    else
    {
      uint64_t v11 = *(void *)(v8 + 32);
      swift_retain();
    }
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v11 + 168))();
    unint64_t v4 = v14;
    *(void *)&v171 = v13;
    *((void *)&v171 + 1) = v14;
    v169 = 0x6E776F6E6B6E55;
    v170 = 0xE700000000000000;
    unint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    if (v9 != 1)
    {
      unint64_t v4 = 0;
      do
      {
        if (v10)
        {
          uint64_t v47 = MEMORY[0x22A627400](v4 + 1, v8);
        }
        else
        {
          uint64_t v47 = *(void *)(v8 + 8 * v4 + 40);
          swift_retain();
        }
        *(void *)&v171 = (*(uint64_t (**)(void))(*(void *)v47 + 168))();
        *((void *)&v171 + 1) = v48;
        v169 = 0x6E776F6E6B6E55;
        v170 = 0xE700000000000000;
        char v49 = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        if (v49)
        {
          if (v10)
          {
            uint64_t v45 = MEMORY[0x22A627400](v4, v8);
          }
          else
          {
            if (v4 >= *(void *)(v8 + 16)) {
              goto LABEL_80;
            }
            uint64_t v45 = *(void *)(v8 + 8 * v4 + 32);
            swift_retain();
          }
          uint64_t v46 = (*(uint64_t (**)(void))(*(void *)v45 + 216))();
          (*(void (**)(uint64_t))(*(void *)v47 + 224))(v46);
          swift_release();
        }
        swift_release();
        ++v4;
      }
      while (v9 - 1 != v4);
    }
    swift_release();
    unint64_t v6 = 0;
    *(void *)&v168[0] = MEMORY[0x263F8EE78];
    while (1)
    {
      if (v10)
      {
        uint64_t v15 = MEMORY[0x22A627400](v6, v8);
        unint64_t v4 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
LABEL_34:
          __break(1u);
LABEL_35:
          uint64_t v12 = *(void *)&v168[0];
          goto LABEL_36;
        }
      }
      else
      {
        if (v6 >= *(void *)(v8 + 16))
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          unint64_t v50 = swift_bridgeObjectRetain();
          uint64_t v7 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v50, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v15 = *(void *)(v8 + 8 * v6 + 32);
        swift_retain();
        unint64_t v4 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_34;
        }
      }
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v15 + 216))();
      if (*(void *)(v16 + 16)
        && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL),
            (v18 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v16 + 56) + 32 * v17, (uint64_t)&v171);
      }
      else
      {
        v171 = 0u;
        v172 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v172 + 1))
      {
        if (swift_dynamicCast())
        {
          if (!v169 && v170 == 0xE000000000000000)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v19)
          {
            swift_release();
            goto LABEL_17;
          }
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for Any?);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_17:
      ++v6;
      if (v4 == v9) {
        goto LABEL_35;
      }
    }
  }
  swift_release();
  uint64_t v12 = MEMORY[0x263F8EE78];
LABEL_36:
  swift_release();
  *(void *)&v168[0] = MEMORY[0x263F8EE80];
  if (v12 < 0 || (v12 & 0x4000000000000000) != 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v20) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v20 = *(void *)(v12 + 16);
    swift_retain();
    if (v20)
    {
LABEL_39:
      v164 = v12 & 0xC000000000000001;
      uint64_t v21 = MEMORY[0x263F8EE80];
      uint64_t v22 = 4;
      v162 = xmmword_224F63660;
      v163 = MEMORY[0x263F8EE58] + 8;
      v166 = v12;
      while (1)
      {
        uint64_t v25 = v22 - 4;
        if (v164)
        {
          unint64_t v4 = MEMORY[0x22A627400](v22 - 4, v12);
          uint64_t v26 = v22 - 3;
          if (__OFADD__(v25, 1)) {
            goto LABEL_77;
          }
        }
        else
        {
          unint64_t v4 = *(void *)(v12 + 8 * v22);
          swift_retain();
          uint64_t v26 = v22 - 3;
          if (__OFADD__(v25, 1)) {
            goto LABEL_77;
          }
        }
        uint64_t v27 = (*(uint64_t (**)(void))(*(void *)v4 + 216))();
        if (*(void *)(v27 + 16)
          && (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL),
              (v29 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v27 + 56) + 32 * v28, (uint64_t)&v171);
        }
        else
        {
          v171 = 0u;
          v172 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v172 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v31 = v169;
            uint64_t v30 = v170;
            goto LABEL_58;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for Any?);
        }
        uint64_t v31 = 0;
        uint64_t v30 = 0xE000000000000000;
LABEL_58:
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30);
        uint64_t v34 = *(void *)(v21 + 16);
        BOOL v35 = (v32 & 1) == 0;
        uint64_t v36 = v34 + v35;
        if (__OFADD__(v34, v35)) {
          goto LABEL_78;
        }
        unint64_t v6 = v32;
        if (*(void *)(v21 + 24) < v36)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1, &demangling cache variable for type metadata for _DictionaryStorage<String, [Signal]>);
          uint64_t v21 = *(void *)&v168[0];
          unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30);
          if ((v6 & 1) != (v38 & 1)) {
            goto LABEL_236;
          }
          unint64_t v33 = v37;
        }
        if (v6)
        {
          uint64_t v23 = swift_bridgeObjectRelease();
          uint64_t v24 = (void *)(*(void *)(v21 + 56) + 8 * v33);
          MEMORY[0x22A6270D0](v23);
          unint64_t v6 = *(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v6 >= *(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v39 = swift_allocObject();
          *(_OWORD *)(v39 + 16) = v162;
          *(void *)(v39 + 32) = v4;
          *(void *)&v171 = v39;
          specialized Array._endMutation()();
          uint64_t v40 = v171;
          *(void *)(v21 + 8 * (v33 >> 6) + 64) |= 1 << v33;
          char v41 = (uint64_t *)(*(void *)(v21 + 48) + 16 * v33);
          *char v41 = v31;
          v41[1] = v30;
          *(void *)(*(void *)(v21 + 56) + 8 * v33) = v40;
          uint64_t v42 = *(void *)(v21 + 16);
          BOOL v43 = __OFADD__(v42, 1);
          uint64_t v44 = v42 + 1;
          if (v43) {
            goto LABEL_79;
          }
          *(void *)(v21 + 16) = v44;
        }
        uint64_t v12 = v166;
        ++v22;
        if (v26 == v20) {
          goto LABEL_85;
        }
      }
    }
  }
  uint64_t v21 = MEMORY[0x263F8EE80];
LABEL_85:
  swift_release();
  uint64_t v51 = v21 + 64;
  uint64_t v52 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v53 = -1;
  if (v52 < 64) {
    uint64_t v53 = ~(-1 << v52);
  }
  unint64_t v54 = v53 & *(void *)(v21 + 64);
  int64_t v55 = (unint64_t)(v52 + 63) >> 6;
  v154 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
  v150 = (void (**)(unint64_t, uint64_t, uint64_t))(v161 + 32);
  v149 = (void (**)(unint64_t, uint64_t))(v161 + 8);
  swift_retain();
  int64_t v56 = 0;
  while (2)
  {
    while (2)
    {
      while (2)
      {
        if (v54)
        {
          unint64_t v57 = __clz(__rbit64(v54));
          v54 &= v54 - 1;
          unint64_t v58 = v57 | (v56 << 6);
        }
        else
        {
          BOOL v43 = __OFADD__(v56++, 1);
          if (v43)
          {
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
            goto LABEL_228;
          }
          if (v56 >= v55) {
            goto LABEL_222;
          }
          unint64_t v59 = *(void *)(v51 + 8 * v56);
          if (!v59)
          {
            int64_t v60 = v56 + 1;
            if (v56 + 1 >= v55) {
              goto LABEL_222;
            }
            unint64_t v59 = *(void *)(v51 + 8 * v60);
            if (!v59)
            {
              int64_t v60 = v56 + 2;
              if (v56 + 2 >= v55) {
                goto LABEL_222;
              }
              unint64_t v59 = *(void *)(v51 + 8 * v60);
              if (!v59)
              {
                int64_t v60 = v56 + 3;
                if (v56 + 3 >= v55) {
                  goto LABEL_222;
                }
                unint64_t v59 = *(void *)(v51 + 8 * v60);
                if (!v59)
                {
                  int64_t v60 = v56 + 4;
                  if (v56 + 4 >= v55) {
                    goto LABEL_222;
                  }
                  unint64_t v59 = *(void *)(v51 + 8 * v60);
                  if (!v59)
                  {
                    int64_t v60 = v56 + 5;
                    if (v56 + 5 >= v55)
                    {
LABEL_222:
                      swift_release_n();
                      return v12;
                    }
                    unint64_t v59 = *(void *)(v51 + 8 * v60);
                    if (!v59)
                    {
                      while (1)
                      {
                        int64_t v56 = v60 + 1;
                        if (__OFADD__(v60, 1)) {
                          goto LABEL_227;
                        }
                        if (v56 >= v55) {
                          goto LABEL_222;
                        }
                        unint64_t v59 = *(void *)(v51 + 8 * v56);
                        ++v60;
                        if (v59) {
                          goto LABEL_104;
                        }
                      }
                    }
                  }
                }
              }
            }
            int64_t v56 = v60;
          }
LABEL_104:
          unint64_t v54 = (v59 - 1) & v59;
          unint64_t v58 = __clz(__rbit64(v59)) + (v56 << 6);
        }
        unint64_t v61 = (uint64_t *)(*(void *)(v21 + 48) + 16 * v58);
        uint64_t v63 = *v61;
        unint64_t v62 = v61[1];
        uint64_t v64 = HIBYTE(v62) & 0xF;
        if ((v62 & 0x2000000000000000) == 0) {
          uint64_t v64 = v63 & 0xFFFFFFFFFFFFLL;
        }
        if (!v64 || !*(void *)(v21 + 16)) {
          continue;
        }
        break;
      }
      swift_bridgeObjectRetain();
      unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v62);
      if ((v66 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        continue;
      }
      break;
    }
    v152 = v55;
    v153 = v51;
    unint64_t v67 = *(void *)(*(void *)(v21 + 56) + 8 * v65);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v67 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v166 = v12;
      if (!v68) {
        goto LABEL_146;
      }
    }
    else
    {
      uint64_t v68 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v166 = v12;
      if (!v68)
      {
LABEL_146:
        uint64_t v76 = v165;
        goto LABEL_149;
      }
    }
    v164 = v67 >> 62;
    uint64_t v69 = 0;
    unint64_t v70 = v67 & 0xC000000000000001;
    unint64_t v71 = v67;
    while (1)
    {
      if (v70)
      {
        uint64_t v72 = MEMORY[0x22A627400](v69, v67);
      }
      else
      {
        uint64_t v72 = *(void *)(v67 + 8 * v69 + 32);
        swift_retain();
      }
      *(void *)&v171 = (*(uint64_t (**)(void))(*(void *)v72 + 168))();
      *((void *)&v171 + 1) = v73;
      v169 = 2036427856;
      v170 = 0xE400000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      char v74 = StringProtocol.contains<A>(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      if (v74) {
        break;
      }
      uint64_t v75 = v69 + 1;
      if (__OFADD__(v69, 1)) {
        goto LABEL_225;
      }
      ++v69;
      unint64_t v67 = v71;
      if (v75 == v68)
      {
        uint64_t v76 = v165;
        uint64_t v12 = v166;
        goto LABEL_149;
      }
    }
    if (v68 < v69) {
      goto LABEL_231;
    }
    unint64_t v77 = v71;
    unint64_t v78 = v164;
    if (v164)
    {
      swift_bridgeObjectRetain();
      uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v79 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v79 < v68) {
      goto LABEL_232;
    }
    if (!v70 || v68 == v69)
    {
      uint64_t v12 = v166;
      if (!v78) {
        goto LABEL_136;
      }
LABEL_139:
      swift_bridgeObjectRetain();
      uint64_t v82 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v83 = v85;
      uint64_t v69 = v86;
      unint64_t v84 = v87;
      swift_bridgeObjectRelease_n();
      if (v84) {
        goto LABEL_141;
      }
LABEL_140:
      unint64_t v67 = specialized _copyCollectionToContiguousArray<A>(_:)(v82, v83, v69, v84);
      goto LABEL_148;
    }
    uint64_t v12 = v166;
    if (v69 >= v68) {
      goto LABEL_234;
    }
    type metadata accessor for Signal();
    Swift::Int v80 = v69;
    do
    {
      Swift::Int v81 = v80 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v80);
      Swift::Int v80 = v81;
    }
    while (v68 != v81);
    if (v78) {
      goto LABEL_139;
    }
LABEL_136:
    uint64_t v82 = v77 & 0xFFFFFFFFFFFFFF8;
    uint64_t v83 = (v77 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v84 = (2 * v68) | 1;
    if ((v84 & 1) == 0) {
      goto LABEL_140;
    }
LABEL_141:
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v88 = swift_dynamicCastClass();
    if (!v88)
    {
      swift_unknownObjectRelease();
      uint64_t v88 = MEMORY[0x263F8EE78];
    }
    uint64_t v89 = *(void *)(v88 + 16);
    swift_release();
    if (__OFSUB__(v84 >> 1, v69)) {
      goto LABEL_235;
    }
    if (v89 != (v84 >> 1) - v69)
    {
      swift_unknownObjectRelease();
      goto LABEL_140;
    }
    unint64_t v67 = swift_dynamicCastClass();
    swift_unknownObjectRelease();
    if (v67) {
      goto LABEL_146;
    }
    unint64_t v67 = MEMORY[0x263F8EE78];
LABEL_148:
    uint64_t v76 = v165;
    swift_unknownObjectRelease();
LABEL_149:
    *(void *)&v162 = v67 & 0xC000000000000001;
    if ((v67 & 0xC000000000000001) != 0)
    {
      v158 = MEMORY[0x22A627400](0, v67);
      if (!(v67 >> 62)) {
        goto LABEL_152;
      }
LABEL_198:
      swift_bridgeObjectRetain();
      uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v90)
      {
LABEL_199:
        v165 = v76;
        swift_bridgeObjectRelease();
        v163 = 0;
LABEL_200:
        v116 = -1.0;
        goto LABEL_201;
      }
      goto LABEL_153;
    }
    if (!*(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_229;
    }
    v158 = *(void *)(v67 + 32);
    swift_retain();
    if (v67 >> 62) {
      goto LABEL_198;
    }
LABEL_152:
    uint64_t v90 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v90) {
      goto LABEL_199;
    }
LABEL_153:
    v163 = 0;
    unint64_t v91 = 0;
    v159 = v67 & 0xFFFFFFFFFFFFFF8;
    double v92 = 0.0;
    double v93 = 0.0;
    v161 = v67;
    v160 = v90;
    while (1)
    {
      while (1)
      {
        if ((void)v162)
        {
          uint64_t v95 = MEMORY[0x22A627400](v91, v67);
          unint64_t v96 = v91 + 1;
          if (__OFADD__(v91, 1)) {
            goto LABEL_224;
          }
        }
        else
        {
          if (v91 >= *(void *)(v159 + 16)) {
            goto LABEL_226;
          }
          uint64_t v95 = *(void *)(v67 + 8 * v91 + 32);
          swift_retain();
          unint64_t v96 = v91 + 1;
          if (__OFADD__(v91, 1)) {
            goto LABEL_224;
          }
        }
        v164 = v96;
        v166 = v12;
        v165 = v76;
        v97 = *(uint64_t (**)(void))(*(void *)v95 + 168);
        *(void *)&v171 = v97();
        *((void *)&v171 + 1) = v98;
        v169 = 2036427856;
        v170 = 0xE400000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        char v99 = StringProtocol.contains<A>(_:)();
        uint64_t v100 = swift_bridgeObjectRelease();
        if ((v99 & 1) != 0 && v93 == 0.0)
        {
          swift_release();
          v105 = *(void (**)(long long *__return_ptr, uint64_t))(*(void *)v95 + 120);
          v106 = swift_retain();
          v105(&v171, v106);
          swift_release();
          double v93 = *(double *)&v171;
          v158 = v95;
LABEL_175:
          uint64_t v76 = v165;
          uint64_t v12 = v166;
          goto LABEL_176;
        }
        *(void *)&v171 = ((uint64_t (*)(uint64_t))v97)(v100);
        *((void *)&v171 + 1) = v101;
        v169 = 2036427856;
        v170 = 0xE400000000000000;
        char v102 = StringProtocol.contains<A>(_:)();
        uint64_t v103 = swift_bridgeObjectRelease();
        if ((v102 & 1) == 0 || v93 == 0.0) {
          break;
        }
        uint64_t v104 = v163;
        if (v163)
        {
          swift_retain();
          uint64_t v76 = v165;
          unint64_t v94 = specialized _ArrayProtocol.filter(_:)(v166, v104);
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          uint64_t v76 = v165;
          unint64_t v94 = v166;
        }
        unint64_t v67 = v161;
        uint64_t v12 = specialized _ArrayProtocol.filter(_:)(v94, v95);
        swift_bridgeObjectRelease();
        swift_release();
        ++v91;
        double v92 = 0.0;
        if (v164 == v160)
        {
          v165 = v76;
          v115 = swift_bridgeObjectRelease();
          goto LABEL_183;
        }
      }
      *(void *)&v171 = ((uint64_t (*)(uint64_t))v97)(v103);
      *((void *)&v171 + 1) = v107;
      v169 = 1886352467;
      v170 = 0xE400000000000000;
      v108 = StringProtocol.contains<A>(_:)();
      v109 = (void *)swift_bridgeObjectRelease();
      if ((v108 & 1) == 0) {
        break;
      }
      if (v93 == 0.0) {
        break;
      }
      v109 = (*(void *(**)(long long *__return_ptr, void *))(*(void *)v95 + 120))(&v171, v109);
      if (vabdd_f64(*(double *)&v171, v93) >= 2.0) {
        break;
      }
      uint64_t v76 = v165;
      uint64_t v12 = specialized _ArrayProtocol.filter(_:)(v166, v95);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_176:
      unint64_t v67 = v161;
      v112 = v160;
      unint64_t v91 = v164;
LABEL_177:
      if (v91 == v112) {
        goto LABEL_180;
      }
    }
    *(void *)&v171 = ((uint64_t (*)(void *))v97)(v109);
    *((void *)&v171 + 1) = v110;
    v169 = 2036427856;
    v170 = 0xE400000000000000;
    v111 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    if (v111)
    {
      swift_release();
      goto LABEL_175;
    }
    swift_release();
    v113 = *(void (**)(long long *__return_ptr, uint64_t))(*(void *)v95 + 120);
    v114 = swift_retain();
    v113(&v171, v114);
    swift_release();
    double v92 = *(double *)&v171;
    v163 = v95;
    uint64_t v76 = v165;
    uint64_t v12 = v166;
    unint64_t v67 = v161;
    v112 = v160;
    unint64_t v91 = v164;
    if (v93 != 0.0) {
      goto LABEL_177;
    }
LABEL_180:
    v115 = swift_bridgeObjectRelease();
    v116 = -1.0;
    v165 = v76;
    if (v93 == 0.0)
    {
      v166 = v12;
      goto LABEL_201;
    }
    if (v92 != 0.0) {
      goto LABEL_188;
    }
LABEL_183:
    v117 = (uint64_t)v155;
    (*(void (**)(uint64_t))(*(void *)v156 + 96))(v115);
    v118 = v157;
    if ((*v154)(v117, 1, v157) == 1)
    {
      v166 = v12;
      outlined destroy of Any?(v117, &demangling cache variable for type metadata for Date?);
LABEL_192:
      v116 = 30.0;
      goto LABEL_201;
    }
    v119 = v151;
    (*v150)(v151, v117, v118);
    Date.timeIntervalSinceReferenceDate.getter();
    if (v93 >= v120)
    {
      v166 = v12;
      (*v149)(v119, v118);
      goto LABEL_192;
    }
    Date.timeIntervalSinceReferenceDate.getter();
    if (v121 - v93 >= 30.0)
    {
      v166 = v12;
      (*v149)(v119, v157);
      goto LABEL_192;
    }
    Date.timeIntervalSinceReferenceDate.getter();
    double v92 = v122;
    (*v149)(v119, v157);
LABEL_188:
    v116 = v92 - v93;
    v166 = v12;
    if (v92 - v93 < 0.0) {
      goto LABEL_200;
    }
LABEL_201:
    *((void *)&v172 + 1) = MEMORY[0x263F8D538];
    *(double *)&v171 = v116;
    v123 = *(uint64_t (**)(uint64_t *))(*(void *)v158 + 232);
    swift_retain();
    v124 = (void (*)(uint64_t *, void))v123(&v169);
    v126 = v125;
    if (!*((void *)&v172 + 1))
    {
      outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRetain();
      v141 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974);
      v143 = v142;
      swift_bridgeObjectRelease();
      if (v143)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v167 = (void *)*v126;
        *v126 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
        v145 = (uint64_t)v167;
        swift_bridgeObjectRelease();
        outlined init with take of Any((_OWORD *)(*(void *)(v145 + 56) + 32 * v141), v168);
        specialized _NativeDictionary._delete(at:)(v141, v145);
        *v126 = v145;
        swift_bridgeObjectRelease();
        uint64_t v51 = v153;
        int64_t v55 = v152;
      }
      else
      {
        memset(v168, 0, sizeof(v168));
        uint64_t v51 = v153;
        int64_t v55 = v152;
      }
      outlined destroy of Any?((uint64_t)v168, &demangling cache variable for type metadata for Any?);
      goto LABEL_218;
    }
    outlined init with take of Any(&v171, v168);
    v127 = swift_isUniquelyReferenced_nonNull_native();
    v167 = (void *)*v126;
    v128 = v167;
    *v126 = 0x8000000000000000;
    v130 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974);
    v131 = v128[2];
    v132 = (v129 & 1) == 0;
    v133 = v131 + v132;
    if (__OFADD__(v131, v132)) {
      goto LABEL_230;
    }
    v134 = v129;
    if (v128[3] < v133)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v133, v127);
      v135 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974);
      if ((v134 & 1) != (v136 & 1)) {
        goto LABEL_236;
      }
      v130 = v135;
      v137 = v167;
      if ((v134 & 1) == 0) {
        goto LABEL_206;
      }
LABEL_214:
      v146 = (_OWORD *)(v137[7] + 32 * v130);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v146);
      outlined init with take of Any(v168, v146);
LABEL_215:
      uint64_t v51 = v153;
      int64_t v55 = v152;
      *v126 = (uint64_t)v137;
      swift_bridgeObjectRelease();
LABEL_218:
      uint64_t v12 = v166;
      v124(&v169, 0);
      swift_release_n();
      swift_release();
      continue;
    }
    break;
  }
  if (v127)
  {
    v137 = v167;
    if (v129) {
      goto LABEL_214;
    }
  }
  else
  {
    specialized _NativeDictionary.copy()();
    v137 = v167;
    if (v134) {
      goto LABEL_214;
    }
  }
LABEL_206:
  v137[(v130 >> 6) + 8] |= 1 << v130;
  v138 = v137[6] + 16 * v130;
  strcpy((char *)v138, "playDuration");
  *(unsigned char *)(v138 + 13) = 0;
  *(_WORD *)(v138 + 14) = -5120;
  outlined init with take of Any(v168, (_OWORD *)(v137[7] + 32 * v130));
  v139 = v137[2];
  BOOL v43 = __OFADD__(v139, 1);
  v140 = v139 + 1;
  if (!v43)
  {
    v137[2] = v140;
    goto LABEL_215;
  }
LABEL_233:
  __break(1u);
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t NowPlayingSignalFactory.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate, &demangling cache variable for type metadata for Date?);
  return v0;
}

uint64_t NowPlayingSignalFactory.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate, &demangling cache variable for type metadata for Date?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t NowPlayingSignalFactory.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  NowPlayingSignalFactory.init()();
  return v0;
}

uint64_t NowPlayingSignalFactory.init()()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of NowPlayingSignalFactory.init());
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MRPlaybackState, String));
  swift_arrayDestroy();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = v0 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate;
  uint64_t v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return v0;
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance NowPlayingSignalFactory(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)v1 + 136))(*a1);
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance NowPlayingSignalFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, MEMORY[0x263F74F40], MEMORY[0x263F74F40]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SiriUISession>, type metadata accessor for SiriUISession, type metadata accessor for SiriUISession);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PSETask>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EntitySimilarity>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMHomeKitClientAccessory>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMAppIntent>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMAppIntentInvocation>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMClockAlarm>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMMediaNowPlaying>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMAppInFocus>);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    char v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  char v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      unint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        type metadata accessor for Signal();
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SiriUISession>, type metadata accessor for SiriUISession);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, MEMORY[0x263F74F40]);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v5;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_21;
  }
  if (!v7) {
    return MEMORY[0x263F8EE78];
  }
  if (v7 <= 0)
  {
    uint64_t v14 = (void *)MEMORY[0x263F8EE78];
    if (v6 != a3)
    {
LABEL_10:
      if (v7 < 0) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a6(0) - 8);
      char v18 = (char *)v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      uint64_t v19 = *(void *)(v17 + 72);
      unint64_t v20 = a2 + v19 * a3;
      uint64_t v21 = v19 * v7;
      unint64_t v22 = &v18[v21];
      unint64_t v23 = v20 + v21;
      if (v20 < (unint64_t)v22 && (unint64_t)v18 < v23) {
        goto LABEL_24;
      }
      swift_arrayInitWithCopy();
      return (uint64_t)v14;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v11 = *(void *)(a6(0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  size_t v15 = _swift_stdlib_malloc_size(v14);
  if (v12)
  {
    if (v15 - v13 == 0x8000000000000000 && v12 == -1) {
      goto LABEL_23;
    }
    v14[2] = v7;
    v14[3] = 2 * ((uint64_t)(v15 - v13) / v12);
    if (v6 != a3) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, MEMORY[0x263F74F40], MEMORY[0x263F74F40]);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  void *(*v16)(void *__return_ptr, uint64_t);
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  void *(*v23)(void *__return_ptr, uint64_t);
  uint64_t v24;
  void *v25;
  double v26;
  uint64_t *v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t *v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *(*v37)(void *__return_ptr, uint64_t);
  uint64_t v38;
  void *v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  Swift::Int v110;
  char *v111;
  Swift::Int v112;
  char *v113;
  uint64_t v114;
  double v115[6];
  void v116[6];
  uint64_t v117;

  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_131;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_139;
  }
  Swift::Int v6 = result;
  v114 = v1;
  v105 = v2;
  if (v3 < 2)
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
    v117 = MEMORY[0x263F8EE78];
    v111 = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_98:
      uint64_t v95 = v10;
      if (v13 >= 2)
      {
        unint64_t v96 = *v105;
        do
        {
          v97 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_126;
          }
          if (!v96) {
            goto LABEL_138;
          }
          uint64_t v98 = v95;
          char v99 = *(void *)&v95[16 * v97 + 32];
          uint64_t v100 = *(void *)&v95[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v96 + 8 * v99), (char *)(v96 + 8 * *(void *)&v95[16 * v13 + 16]), v96 + 8 * v100, v111);
          if (v114) {
            break;
          }
          if (v100 < v99) {
            goto LABEL_127;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_128;
          }
          uint64_t v101 = v98 + 32;
          char v102 = &v98[16 * v97 + 32];
          *(void *)char v102 = v99;
          *((void *)v102 + 1) = v100;
          uint64_t v103 = v98;
          uint64_t v104 = *((void *)v98 + 2);
          if (v13 > v104) {
            goto LABEL_129;
          }
          memmove(&v101[16 * v13 - 16], &v101[16 * v13], 16 * (v104 - v13));
          uint64_t v95 = v103;
          *((void *)v103 + 2) = v104 - 1;
          unint64_t v13 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)((v117 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v2;
    uint64_t v8 = v5 >> 1;
    type metadata accessor for Signal();
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v2 = v7;
    v111 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v117 = v9;
  }
  v108 = v6;
  Swift::Int v11 = 0;
  uint64_t v12 = *v2;
  v106 = *v2 - 8;
  v107 = *v2 + 16;
  int64_t v10 = (char *)MEMORY[0x263F8EE78];
  v110 = v3;
  while (1)
  {
    Swift::Int v14 = v11++;
    v112 = v14;
    if (v11 < v3)
    {
      uint64_t v15 = *(void *)(v12 + 8 * v14);
      uint64_t v16 = *(void *(**)(void *__return_ptr, uint64_t))(**(void **)(v12 + 8 * v11) + 120);
      swift_retain();
      uint64_t v17 = swift_retain();
      char v18 = v16(v116, v17);
      uint64_t v19 = *(double *)v116;
      (*(void (**)(double *__return_ptr, void *))(*(void *)v15 + 120))(v115, v18);
      swift_release();
      swift_release();
      unint64_t v20 = v115[0];
      Swift::Int v11 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v21 = v107 + 8 * v14;
        while (1)
        {
          unint64_t v22 = *(void *)(v21 - 8);
          unint64_t v23 = *(void *(**)(void *__return_ptr, uint64_t))(**(void **)v21 + 120);
          swift_retain();
          uint64_t v24 = swift_retain();
          uint64_t v25 = v23(v116, v24);
          uint64_t v26 = *(double *)v116;
          (*(void (**)(double *__return_ptr, void *))(*(void *)v22 + 120))(v115, v25);
          swift_release();
          swift_release();
          if (v19 < v20 == v26 >= v115[0]) {
            break;
          }
          ++v11;
          v21 += 8;
          Swift::Int v3 = v110;
          if (v110 == v11)
          {
            Swift::Int v11 = v110;
            goto LABEL_22;
          }
        }
        Swift::Int v3 = v110;
      }
LABEL_22:
      if (v19 < v20)
      {
        if (v11 < v14) {
          goto LABEL_132;
        }
        if (v14 < v11)
        {
          uint64_t v27 = (uint64_t *)(v106 + 8 * v11);
          unint64_t v28 = v11;
          char v29 = v14;
          uint64_t v30 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v29 != --v28)
            {
              if (!v12) {
                goto LABEL_137;
              }
              uint64_t v31 = *v30;
              *uint64_t v30 = *v27;
              *uint64_t v27 = v31;
            }
            ++v29;
            --v27;
            ++v30;
          }
          while (v29 < v28);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v14)) {
        goto LABEL_130;
      }
      if (v11 - v14 < v108) {
        break;
      }
    }
LABEL_47:
    if (v11 < v14) {
      goto LABEL_125;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    BOOL v43 = *((void *)v10 + 2);
    uint64_t v42 = *((void *)v10 + 3);
    unint64_t v13 = v43 + 1;
    if (v43 >= v42 >> 1) {
      int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    v113 = v10 + 32;
    uint64_t v44 = &v10[16 * v43 + 32];
    *(void *)uint64_t v44 = v14;
    *((void *)v44 + 1) = v11;
    if (v43)
    {
      uint64_t v45 = v10 + 32;
      while (1)
      {
        uint64_t v46 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v51 = &v45[16 * v13];
          uint64_t v52 = *((void *)v51 - 8);
          uint64_t v53 = *((void *)v51 - 7);
          unint64_t v57 = __OFSUB__(v53, v52);
          unint64_t v54 = v53 - v52;
          if (v57) {
            goto LABEL_114;
          }
          int64_t v56 = *((void *)v51 - 6);
          int64_t v55 = *((void *)v51 - 5);
          unint64_t v57 = __OFSUB__(v55, v56);
          char v49 = v55 - v56;
          unint64_t v50 = v57;
          if (v57) {
            goto LABEL_115;
          }
          unint64_t v58 = v13 - 2;
          unint64_t v59 = &v45[16 * v13 - 32];
          unint64_t v61 = *(void *)v59;
          int64_t v60 = *((void *)v59 + 1);
          unint64_t v57 = __OFSUB__(v60, v61);
          unint64_t v62 = v60 - v61;
          if (v57) {
            goto LABEL_117;
          }
          unint64_t v57 = __OFADD__(v49, v62);
          uint64_t v63 = v49 + v62;
          if (v57) {
            goto LABEL_120;
          }
          if (v63 >= v54)
          {
            Swift::Int v81 = &v45[16 * v46];
            uint64_t v83 = *(void *)v81;
            uint64_t v82 = *((void *)v81 + 1);
            unint64_t v57 = __OFSUB__(v82, v83);
            unint64_t v84 = v82 - v83;
            if (v57) {
              goto LABEL_124;
            }
            char v74 = v49 < v84;
            goto LABEL_85;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v75 = *((void *)v10 + 4);
            uint64_t v76 = *((void *)v10 + 5);
            unint64_t v57 = __OFSUB__(v76, v75);
            uint64_t v68 = v76 - v75;
            uint64_t v69 = v57;
            goto LABEL_79;
          }
          uint64_t v48 = *((void *)v10 + 4);
          uint64_t v47 = *((void *)v10 + 5);
          unint64_t v57 = __OFSUB__(v47, v48);
          char v49 = v47 - v48;
          unint64_t v50 = v57;
        }
        if (v50) {
          goto LABEL_116;
        }
        unint64_t v58 = v13 - 2;
        uint64_t v64 = &v45[16 * v13 - 32];
        char v66 = *(void *)v64;
        unint64_t v65 = *((void *)v64 + 1);
        unint64_t v67 = __OFSUB__(v65, v66);
        uint64_t v68 = v65 - v66;
        uint64_t v69 = v67;
        if (v67) {
          goto LABEL_119;
        }
        unint64_t v70 = &v45[16 * v46];
        uint64_t v72 = *(void *)v70;
        unint64_t v71 = *((void *)v70 + 1);
        unint64_t v57 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v57) {
          goto LABEL_122;
        }
        if (__OFADD__(v68, v73)) {
          goto LABEL_123;
        }
        if (v68 + v73 >= v49)
        {
          char v74 = v49 < v73;
LABEL_85:
          if (v74) {
            uint64_t v46 = v58;
          }
          goto LABEL_87;
        }
LABEL_79:
        if (v69) {
          goto LABEL_118;
        }
        unint64_t v77 = &v45[16 * v46];
        uint64_t v79 = *(void *)v77;
        unint64_t v78 = *((void *)v77 + 1);
        unint64_t v57 = __OFSUB__(v78, v79);
        Swift::Int v80 = v78 - v79;
        if (v57) {
          goto LABEL_121;
        }
        if (v80 < v68) {
          goto LABEL_14;
        }
LABEL_87:
        uint64_t v85 = v46 - 1;
        if (v46 - 1 >= v13)
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        uint64_t v86 = v12;
        if (!v12) {
          goto LABEL_136;
        }
        unint64_t v87 = v10;
        uint64_t v88 = &v45[16 * v85];
        uint64_t v89 = v45;
        uint64_t v90 = *(void *)v88;
        unint64_t v91 = &v89[16 * v46];
        double v92 = *((void *)v91 + 1);
        double v93 = v86;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v86 + 8 * *(void *)v88), (char *)(v86 + 8 * *(void *)v91), v86 + 8 * v92, v111);
        if (v114) {
          goto LABEL_95;
        }
        if (v92 < v90) {
          goto LABEL_111;
        }
        if (v46 > *((void *)v87 + 2)) {
          goto LABEL_112;
        }
        *(void *)uint64_t v88 = v90;
        uint64_t v45 = v113;
        *(void *)&v113[16 * v85 + 8] = v92;
        unint64_t v94 = *((void *)v87 + 2);
        if (v46 >= v94) {
          goto LABEL_113;
        }
        int64_t v10 = v87;
        unint64_t v13 = v94 - 1;
        memmove(v91, v91 + 16, 16 * (v94 - 1 - v46));
        *((void *)v87 + 2) = v94 - 1;
        uint64_t v12 = v93;
        if (v94 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    Swift::Int v3 = v110;
    if (v11 >= v110) {
      goto LABEL_98;
    }
  }
  if (__OFADD__(v14, v108)) {
    goto LABEL_133;
  }
  if (v14 + v108 >= v3) {
    unint64_t v32 = v3;
  }
  else {
    unint64_t v32 = v14 + v108;
  }
  if (v32 >= v14)
  {
    if (v11 != v32)
    {
      unint64_t v33 = (uint64_t *)(v106 + 8 * v11);
      v109 = v32;
      do
      {
        uint64_t v34 = *(void *)(v12 + 8 * v11);
        BOOL v35 = v33;
        do
        {
          uint64_t v36 = *v35;
          unint64_t v37 = *(void *(**)(void *__return_ptr, uint64_t))(*(void *)v34 + 120);
          swift_retain();
          char v38 = swift_retain();
          uint64_t v39 = v37(v116, v38);
          uint64_t v40 = *(double *)v116;
          (*(void (**)(double *__return_ptr, void *))(*(void *)v36 + 120))(v115, v39);
          swift_release();
          swift_release();
          if (v40 >= v115[0]) {
            break;
          }
          if (!v12) {
            goto LABEL_135;
          }
          char v41 = *v35;
          uint64_t v34 = v35[1];
          *BOOL v35 = v34;
          v35[1] = v41;
          --v35;
          ++v14;
        }
        while (v11 != v14);
        ++v11;
        ++v33;
        Swift::Int v14 = v112;
      }
      while (v11 != v109);
      Swift::Int v11 = v109;
    }
    goto LABEL_47;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  char *v20;
  double v21;
  double v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  char *v33;
  double v34;
  double v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  double v40;
  double v41;
  uint64_t *v42;
  Swift::Int v43;
  Swift::Int v44;
  uint64_t *v45;
  uint64_t v46;
  Swift::Int v47;
  char *v48;
  Swift::Int v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  char *v55;
  double v56;
  double v57;
  uint64_t (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  double v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  char v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  Swift::Int v131;
  Swift::Int v132;
  Swift::Int v133;
  Swift::Int v134;
  char *v135;
  char *v136;
  uint64_t v137;
  Swift::Int v138;
  uint64_t (**v139)(char *, uint64_t);
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v142 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v142 - 8);
  Swift::Int v3 = MEMORY[0x270FA5388](v142);
  v141 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  v140 = (char *)&v127 - v5;
  Swift::Int v6 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v6);
  if (result >= v6)
  {
    if (v6 < 0) {
      goto LABEL_135;
    }
    if (v6) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1);
    }
    return result;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_143;
  }
  uint64_t v9 = result;
  if (v6 < 2)
  {
    uint64_t v12 = (char *)MEMORY[0x263F8EE78];
    v144 = MEMORY[0x263F8EE78];
    v136 = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      uint64_t v15 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_101:
      v118 = v137;
      if (v15 >= 2)
      {
        v119 = *a1;
        do
        {
          v120 = v15 - 2;
          if (v15 < 2) {
            goto LABEL_130;
          }
          if (!v119) {
            goto LABEL_142;
          }
          v121 = v12;
          v122 = v12 + 32;
          v123 = *(void *)&v12[16 * v120 + 32];
          v124 = *(void *)&v12[16 * v15 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v119 + 8 * v123), (char *)(v119 + 8 * *(void *)&v122[16 * v15 - 16]), (char *)(v119 + 8 * v124), v136);
          if (v118) {
            break;
          }
          if (v124 < v123) {
            goto LABEL_131;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v121 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v121);
          }
          if (v120 >= *((void *)v121 + 2)) {
            goto LABEL_132;
          }
          v125 = &v121[16 * v120 + 32];
          *(void *)v125 = v123;
          *((void *)v125 + 1) = v124;
          v126 = *((void *)v121 + 2);
          if (v15 > v126) {
            goto LABEL_133;
          }
          uint64_t v12 = v121;
          memmove(&v121[16 * v15 + 16], &v121[16 * v15 + 32], 16 * (v126 - v15));
          *((void *)v121 + 2) = v126 - 1;
          uint64_t v15 = v126 - 1;
        }
        while (v126 > 2);
      }
LABEL_112:
      swift_bridgeObjectRelease();
      *(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    int64_t v10 = v8 >> 1;
    type metadata accessor for SiriExecutionStep(0);
    Swift::Int v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
    v136 = (char *)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v144 = v11;
  }
  v131 = v9;
  unint64_t v13 = 0;
  Swift::Int v14 = *a1;
  v139 = (uint64_t (**)(char *, uint64_t))(v2 + 8);
  v129 = v14 + 16;
  v127 = a1;
  v128 = v14 - 8;
  uint64_t v12 = (char *)MEMORY[0x263F8EE78];
  v133 = v6;
  v143 = v14;
  while (1)
  {
    uint64_t v16 = v13++;
    v134 = v16;
    if (v13 < v6)
    {
      uint64_t v17 = *(void *)(v14 + 8 * v16);
      char v18 = *(void (**)(uint64_t))(**(void **)(v14 + 8 * v13) + 312);
      swift_retain();
      uint64_t v19 = swift_retain();
      unint64_t v20 = v140;
      v18(v19);
      Date.timeIntervalSinceReferenceDate.getter();
      unint64_t v22 = v21;
      unint64_t v23 = (char *)*v139;
      uint64_t v24 = v142;
      uint64_t v25 = (*v139)(v20, v142);
      uint64_t v26 = v141;
      (*(void (**)(uint64_t))(*(void *)v17 + 312))(v25);
      Date.timeIntervalSinceReferenceDate.getter();
      unint64_t v28 = v27;
      v135 = v23;
      ((void (*)(char *, uint64_t))v23)(v26, v24);
      uint64_t v16 = v134;
      swift_release();
      swift_release();
      unint64_t v13 = v16 + 2;
      if (v16 + 2 < v6)
      {
        v130 = v12;
        char v29 = v129 + 8 * v16;
        while (1)
        {
          LODWORD(v138) = v22 < v28;
          uint64_t v30 = *(void *)(v29 - 8);
          uint64_t v31 = *(void (**)(uint64_t))(**(void **)v29 + 312);
          swift_retain();
          unint64_t v32 = swift_retain();
          unint64_t v33 = v140;
          v31(v32);
          Date.timeIntervalSinceReferenceDate.getter();
          BOOL v35 = v34;
          uint64_t v36 = v142;
          unint64_t v37 = (void (*)(char *, uint64_t))v135;
          char v38 = ((uint64_t (*)(char *, uint64_t))v135)(v33, v142);
          uint64_t v39 = v141;
          (*(void (**)(uint64_t))(*(void *)v30 + 312))(v38);
          Date.timeIntervalSinceReferenceDate.getter();
          char v41 = v40;
          v37(v39, v36);
          swift_release();
          swift_release();
          if (v138 == v35 >= v41) {
            break;
          }
          ++v13;
          v29 += 8;
          Swift::Int v6 = v133;
          if (v133 == v13)
          {
            unint64_t v13 = v133;
            uint64_t v12 = v130;
            goto LABEL_22;
          }
        }
        uint64_t v12 = v130;
        Swift::Int v6 = v133;
LABEL_22:
        uint64_t v16 = v134;
      }
      Swift::Int v14 = v143;
      if (v22 < v28)
      {
        if (v13 < v16) {
          goto LABEL_136;
        }
        if (v16 < v13)
        {
          uint64_t v42 = (uint64_t *)(v128 + 8 * v13);
          BOOL v43 = v13;
          uint64_t v44 = v16;
          uint64_t v45 = (uint64_t *)(v143 + 8 * v16);
          do
          {
            if (v44 != --v43)
            {
              if (!v14) {
                goto LABEL_141;
              }
              uint64_t v46 = *v45;
              *uint64_t v45 = *v42;
              *uint64_t v42 = v46;
            }
            ++v44;
            --v42;
            ++v45;
          }
          while (v44 < v43);
        }
      }
    }
    if (v13 >= v6) {
      goto LABEL_50;
    }
    if (__OFSUB__(v13, v16)) {
      goto LABEL_134;
    }
    if (v13 - v16 >= v131) {
      goto LABEL_50;
    }
    if (__OFADD__(v16, v131)) {
      goto LABEL_137;
    }
    uint64_t v47 = v16 + v131 >= v6 ? v6 : v16 + v131;
    if (v47 < v16) {
      break;
    }
    if (v13 != v47)
    {
      v130 = v12;
      uint64_t v48 = (char *)(v128 + 8 * v13);
      v132 = v47;
      do
      {
        unint64_t v50 = *(void *)(v14 + 8 * v13);
        uint64_t v51 = v16;
        v135 = v48;
        v138 = v13;
        while (1)
        {
          uint64_t v52 = *(void *)v48;
          uint64_t v53 = *(void (**)(uint64_t))(*(void *)v50 + 312);
          swift_retain();
          unint64_t v54 = swift_retain();
          int64_t v55 = v140;
          v53(v54);
          Date.timeIntervalSinceReferenceDate.getter();
          unint64_t v57 = v56;
          unint64_t v58 = *v139;
          unint64_t v59 = v55;
          int64_t v60 = v142;
          unint64_t v61 = (*v139)(v59, v142);
          unint64_t v62 = v141;
          (*(void (**)(uint64_t))(*(void *)v52 + 312))(v61);
          Date.timeIntervalSinceReferenceDate.getter();
          uint64_t v64 = v63;
          v58(v62, v60);
          swift_release();
          swift_release();
          if (v57 >= v64) {
            break;
          }
          Swift::Int v14 = v143;
          char v49 = v138;
          if (!v143) {
            goto LABEL_139;
          }
          unint64_t v65 = *(void *)v48;
          unint64_t v50 = *((void *)v48 + 1);
          *(void *)uint64_t v48 = v50;
          *((void *)v48 + 1) = v65;
          v48 -= 8;
          if (v49 == ++v51) {
            goto LABEL_43;
          }
        }
        Swift::Int v14 = v143;
        char v49 = v138;
LABEL_43:
        unint64_t v13 = v49 + 1;
        uint64_t v16 = v134;
        uint64_t v48 = v135 + 8;
      }
      while (v13 != v132);
      unint64_t v13 = v132;
      uint64_t v12 = v130;
    }
LABEL_50:
    if (v13 < v16) {
      goto LABEL_129;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v67 = *((void *)v12 + 2);
    char v66 = *((void *)v12 + 3);
    uint64_t v15 = v67 + 1;
    Swift::Int v14 = v143;
    if (v67 >= v66 >> 1)
    {
      v117 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v12);
      Swift::Int v14 = v143;
      uint64_t v12 = v117;
    }
    *((void *)v12 + 2) = v15;
    uint64_t v68 = &v12[16 * v67 + 32];
    *(void *)uint64_t v68 = v16;
    *((void *)v68 + 1) = v13;
    if (v67)
    {
      uint64_t v69 = v12 + 32;
      while (1)
      {
        unint64_t v70 = v15 - 1;
        if (v15 >= 4)
        {
          uint64_t v75 = &v69[16 * v15];
          uint64_t v76 = *((void *)v75 - 8);
          unint64_t v77 = *((void *)v75 - 7);
          Swift::Int v81 = __OFSUB__(v77, v76);
          unint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_118;
          }
          Swift::Int v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          Swift::Int v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_119;
          }
          uint64_t v82 = v15 - 2;
          uint64_t v83 = &v69[16 * v15 - 32];
          uint64_t v85 = *(void *)v83;
          unint64_t v84 = *((void *)v83 + 1);
          Swift::Int v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_121;
          }
          Swift::Int v81 = __OFADD__(v73, v86);
          unint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_124;
          }
          if (v87 >= v78)
          {
            v105 = &v69[16 * v70];
            v107 = *(void *)v105;
            v106 = *((void *)v105 + 1);
            Swift::Int v81 = __OFSUB__(v106, v107);
            v108 = v106 - v107;
            if (v81) {
              goto LABEL_128;
            }
            uint64_t v98 = v73 < v108;
            goto LABEL_88;
          }
        }
        else
        {
          if (v15 != 3)
          {
            char v99 = *((void *)v12 + 4);
            uint64_t v100 = *((void *)v12 + 5);
            Swift::Int v81 = __OFSUB__(v100, v99);
            double v92 = v100 - v99;
            double v93 = v81;
            goto LABEL_82;
          }
          uint64_t v72 = *((void *)v12 + 4);
          unint64_t v71 = *((void *)v12 + 5);
          Swift::Int v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_120;
        }
        uint64_t v82 = v15 - 2;
        uint64_t v88 = &v69[16 * v15 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        unint64_t v91 = __OFSUB__(v89, v90);
        double v92 = v89 - v90;
        double v93 = v91;
        if (v91) {
          goto LABEL_123;
        }
        unint64_t v94 = &v69[16 * v70];
        unint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        Swift::Int v81 = __OFSUB__(v95, v96);
        v97 = v95 - v96;
        if (v81) {
          goto LABEL_126;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_127;
        }
        if (v92 + v97 >= v73)
        {
          uint64_t v98 = v73 < v97;
LABEL_88:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_90;
        }
LABEL_82:
        if (v93) {
          goto LABEL_122;
        }
        uint64_t v101 = &v69[16 * v70];
        uint64_t v103 = *(void *)v101;
        char v102 = *((void *)v101 + 1);
        Swift::Int v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_125;
        }
        if (v104 < v92) {
          goto LABEL_14;
        }
LABEL_90:
        v109 = v12;
        v110 = v70 - 1;
        if (v70 - 1 >= v15)
        {
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
        if (!v14) {
          goto LABEL_140;
        }
        v111 = &v69[16 * v110];
        v112 = *(void *)v111;
        v113 = &v69[16 * v70];
        v114 = *((void *)v113 + 1);
        v115 = v137;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v14 + 8 * *(void *)v111), (char *)(v14 + 8 * *(void *)v113), (char *)(v14 + 8 * v114), v136);
        v137 = v115;
        if (v115) {
          goto LABEL_112;
        }
        if (v114 < v112) {
          goto LABEL_115;
        }
        if (v70 > *((void *)v109 + 2)) {
          goto LABEL_116;
        }
        *(void *)v111 = v112;
        *(void *)&v69[16 * v110 + 8] = v114;
        v116 = *((void *)v109 + 2);
        if (v70 >= v116) {
          goto LABEL_117;
        }
        uint64_t v12 = v109;
        uint64_t v15 = v116 - 1;
        memmove(&v69[16 * v70], v113 + 16, 16 * (v116 - 1 - v70));
        *((void *)v109 + 2) = v116 - 1;
        Swift::Int v14 = v143;
        if (v116 <= 2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v15 = 1;
LABEL_14:
    Swift::Int v6 = v133;
    if (v13 >= v133)
    {
      a1 = v127;
      goto LABEL_101;
    }
  }
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t *v41;
  uint64_t v42;
  Swift::Int v43;
  void *v44;
  uint64_t v45;
  Swift::Int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  Swift::Int v125;
  Swift::Int v126;
  Swift::Int v127;
  Swift::Int v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void (**v132)(char *, uint64_t);
  char *v133;
  char *v134;
  uint64_t v135;
  Swift::Int v136;
  uint64_t v137;
  uint64_t v138;

  v135 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v135 - 8);
  Swift::Int v3 = MEMORY[0x270FA5388](v135);
  v134 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  v133 = (char *)&v120 - v5;
  Swift::Int v6 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v6);
  if (result >= v6)
  {
    if (v6 < 0) {
      goto LABEL_134;
    }
    if (v6) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1);
    }
    return result;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_142;
  }
  v125 = result;
  if (v6 < 2)
  {
    Swift::Int v11 = (char *)MEMORY[0x263F8EE78];
    v138 = MEMORY[0x263F8EE78];
    v130 = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      Swift::Int v14 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_100:
      v111 = v131;
      if (v14 >= 2)
      {
        v112 = *a1;
        do
        {
          v113 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_129;
          }
          if (!v112) {
            goto LABEL_141;
          }
          v114 = v11;
          v115 = v11 + 32;
          v116 = *(void *)&v11[16 * v113 + 32];
          v117 = *(void *)&v11[16 * v14 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v112 + 8 * v116), (char *)(v112 + 8 * *(void *)&v115[16 * v14 - 16]), (char *)(v112 + 8 * v117), v130);
          if (v111) {
            break;
          }
          if (v117 < v116) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
          }
          if (v113 >= *((void *)v114 + 2)) {
            goto LABEL_131;
          }
          v118 = &v114[16 * v113 + 32];
          *(void *)v118 = v116;
          *((void *)v118 + 1) = v117;
          v119 = *((void *)v114 + 2);
          if (v14 > v119) {
            goto LABEL_132;
          }
          Swift::Int v11 = v114;
          memmove(&v114[16 * v14 + 16], &v114[16 * v14 + 32], 16 * (v119 - v14));
          *((void *)v114 + 2) = v119 - 1;
          Swift::Int v14 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(void *)((v138 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    type metadata accessor for SiriExecutionTask(0);
    int64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    v130 = (char *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v138 = v10;
  }
  uint64_t v12 = 0;
  unint64_t v13 = *a1;
  v132 = (void (**)(char *, uint64_t))(v2 + 8);
  v123 = v13 + 16;
  v121 = a1;
  v122 = v13 - 8;
  Swift::Int v11 = (char *)MEMORY[0x263F8EE78];
  v128 = v6;
  v137 = v13;
  while (1)
  {
    uint64_t v15 = v12;
    uint64_t v16 = v12 + 1;
    v127 = v12;
    if (v12 + 1 < v6)
    {
      uint64_t v17 = *(void *)(v13 + 8 * v16);
      char v18 = *(void *)(v13 + 8 * v12);
      uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 320);
      swift_retain();
      unint64_t v20 = swift_retain();
      uint64_t v21 = v133;
      unint64_t v22 = v19(v20);
      unint64_t v23 = v134;
      (*(void (**)(uint64_t))(*(void *)v18 + 320))(v22);
      LODWORD(v136) = static Date.< infix(_:_:)();
      uint64_t v24 = *v132;
      uint64_t v25 = v23;
      uint64_t v26 = v135;
      (*v132)(v25, v135);
      v24(v21, v26);
      swift_release();
      Swift::Int v6 = v128;
      swift_release();
      uint64_t v16 = v15 + 2;
      if (v15 + 2 < v6)
      {
        v124 = v11;
        uint64_t v27 = v123 + 8 * v15;
        while (1)
        {
          unint64_t v28 = v16;
          char v29 = *(void *)(v27 - 8);
          uint64_t v30 = *(uint64_t (**)(uint64_t))(**(void **)v27 + 320);
          swift_retain();
          uint64_t v31 = swift_retain();
          unint64_t v32 = v133;
          unint64_t v33 = v30(v31);
          uint64_t v34 = v134;
          (*(void (**)(uint64_t))(*(void *)v29 + 320))(v33);
          BOOL v35 = static Date.< infix(_:_:)();
          uint64_t v36 = v34;
          unint64_t v37 = v135;
          v24(v36, v135);
          v24(v32, v37);
          swift_release();
          swift_release();
          if ((v136 ^ v35)) {
            break;
          }
          uint64_t v16 = v28 + 1;
          v27 += 8;
          Swift::Int v6 = v128;
          if (v128 == v28 + 1)
          {
            uint64_t v16 = v128;
            Swift::Int v11 = v124;
            goto LABEL_22;
          }
        }
        Swift::Int v11 = v124;
        Swift::Int v6 = v128;
        uint64_t v16 = v28;
LABEL_22:
        uint64_t v15 = v127;
      }
      unint64_t v13 = v137;
      if (v136)
      {
        if (v16 < v15) {
          goto LABEL_135;
        }
        if (v15 < v16)
        {
          char v38 = (uint64_t *)(v122 + 8 * v16);
          uint64_t v39 = v16;
          uint64_t v40 = v15;
          char v41 = (uint64_t *)(v137 + 8 * v15);
          do
          {
            if (v40 != --v39)
            {
              if (!v13) {
                goto LABEL_140;
              }
              uint64_t v42 = *v41;
              *char v41 = *v38;
              *char v38 = v42;
            }
            ++v40;
            --v38;
            ++v41;
          }
          while (v40 < v39);
        }
      }
    }
    if (v16 >= v6) {
      goto LABEL_50;
    }
    if (__OFSUB__(v16, v15)) {
      goto LABEL_133;
    }
    if (v16 - v15 >= v125) {
      goto LABEL_50;
    }
    if (__OFADD__(v15, v125)) {
      goto LABEL_136;
    }
    BOOL v43 = v15 + v125 >= v6 ? v6 : v15 + v125;
    if (v43 < v15) {
      break;
    }
    if (v16 != v43)
    {
      v124 = v11;
      uint64_t v44 = (void *)(v122 + 8 * v16);
      v126 = v43;
      do
      {
        v136 = v16;
        uint64_t v45 = *(void *)(v13 + 8 * v16);
        uint64_t v46 = v15;
        v129 = v44;
        uint64_t v47 = v44;
        while (1)
        {
          uint64_t v48 = *v47;
          char v49 = *(uint64_t (**)(uint64_t))(*(void *)v45 + 320);
          swift_retain();
          unint64_t v50 = swift_retain();
          uint64_t v51 = v133;
          uint64_t v52 = v49(v50);
          uint64_t v53 = v134;
          (*(void (**)(uint64_t))(*(void *)v48 + 320))(v52);
          unint64_t v54 = static Date.< infix(_:_:)();
          int64_t v55 = *v132;
          int64_t v56 = v53;
          unint64_t v57 = v135;
          (*v132)(v56, v135);
          v55(v51, v57);
          swift_release();
          swift_release();
          if ((v54 & 1) == 0) {
            break;
          }
          unint64_t v13 = v137;
          if (!v137) {
            goto LABEL_138;
          }
          unint64_t v58 = *v47;
          uint64_t v45 = v47[1];
          *uint64_t v47 = v45;
          v47[1] = v58;
          --v47;
          if (v136 == ++v46) {
            goto LABEL_43;
          }
        }
        unint64_t v13 = v137;
LABEL_43:
        uint64_t v16 = v136 + 1;
        uint64_t v44 = v129 + 1;
        uint64_t v15 = v127;
      }
      while (v136 + 1 != v126);
      uint64_t v16 = v126;
      Swift::Int v11 = v124;
    }
LABEL_50:
    if (v16 < v15) {
      goto LABEL_128;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    int64_t v60 = *((void *)v11 + 2);
    unint64_t v59 = *((void *)v11 + 3);
    Swift::Int v14 = v60 + 1;
    unint64_t v13 = v137;
    if (v60 >= v59 >> 1)
    {
      v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v11);
      unint64_t v13 = v137;
      Swift::Int v11 = v110;
    }
    *((void *)v11 + 2) = v14;
    unint64_t v61 = v11 + 32;
    unint64_t v62 = &v11[16 * v60 + 32];
    *(void *)unint64_t v62 = v15;
    *((void *)v62 + 1) = v16;
    v136 = v16;
    if (v60)
    {
      while (1)
      {
        uint64_t v63 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v68 = &v61[16 * v14];
          uint64_t v69 = *((void *)v68 - 8);
          unint64_t v70 = *((void *)v68 - 7);
          char v74 = __OFSUB__(v70, v69);
          unint64_t v71 = v70 - v69;
          if (v74) {
            goto LABEL_117;
          }
          uint64_t v73 = *((void *)v68 - 6);
          uint64_t v72 = *((void *)v68 - 5);
          char v74 = __OFSUB__(v72, v73);
          char v66 = v72 - v73;
          unint64_t v67 = v74;
          if (v74) {
            goto LABEL_118;
          }
          uint64_t v75 = v14 - 2;
          uint64_t v76 = &v61[16 * v14 - 32];
          unint64_t v78 = *(void *)v76;
          unint64_t v77 = *((void *)v76 + 1);
          char v74 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          if (v74) {
            goto LABEL_120;
          }
          char v74 = __OFADD__(v66, v79);
          Swift::Int v80 = v66 + v79;
          if (v74) {
            goto LABEL_123;
          }
          if (v80 >= v71)
          {
            uint64_t v98 = &v61[16 * v63];
            uint64_t v100 = *(void *)v98;
            char v99 = *((void *)v98 + 1);
            char v74 = __OFSUB__(v99, v100);
            uint64_t v101 = v99 - v100;
            if (v74) {
              goto LABEL_127;
            }
            unint64_t v91 = v66 < v101;
            goto LABEL_87;
          }
        }
        else
        {
          if (v14 != 3)
          {
            double v92 = *((void *)v11 + 4);
            double v93 = *((void *)v11 + 5);
            char v74 = __OFSUB__(v93, v92);
            uint64_t v85 = v93 - v92;
            uint64_t v86 = v74;
            goto LABEL_81;
          }
          unint64_t v65 = *((void *)v11 + 4);
          uint64_t v64 = *((void *)v11 + 5);
          char v74 = __OFSUB__(v64, v65);
          char v66 = v64 - v65;
          unint64_t v67 = v74;
        }
        if (v67) {
          goto LABEL_119;
        }
        uint64_t v75 = v14 - 2;
        Swift::Int v81 = &v61[16 * v14 - 32];
        uint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        unint64_t v84 = __OFSUB__(v82, v83);
        uint64_t v85 = v82 - v83;
        uint64_t v86 = v84;
        if (v84) {
          goto LABEL_122;
        }
        unint64_t v87 = &v61[16 * v63];
        uint64_t v89 = *(void *)v87;
        uint64_t v88 = *((void *)v87 + 1);
        char v74 = __OFSUB__(v88, v89);
        uint64_t v90 = v88 - v89;
        if (v74) {
          goto LABEL_125;
        }
        if (__OFADD__(v85, v90)) {
          goto LABEL_126;
        }
        if (v85 + v90 >= v66)
        {
          unint64_t v91 = v66 < v90;
LABEL_87:
          if (v91) {
            uint64_t v63 = v75;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v86) {
          goto LABEL_121;
        }
        unint64_t v94 = &v61[16 * v63];
        unint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        char v74 = __OFSUB__(v95, v96);
        v97 = v95 - v96;
        if (v74) {
          goto LABEL_124;
        }
        if (v97 < v85) {
          goto LABEL_14;
        }
LABEL_89:
        char v102 = v63 - 1;
        if (v63 - 1 >= v14)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v13) {
          goto LABEL_139;
        }
        uint64_t v103 = v11;
        uint64_t v104 = &v61[16 * v102];
        v105 = *(void *)v104;
        v106 = &v61[16 * v63];
        v107 = *((void *)v106 + 1);
        v108 = v131;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v13 + 8 * *(void *)v104), (char *)(v13 + 8 * *(void *)v106), (char *)(v13 + 8 * v107), v130);
        v131 = v108;
        if (v108) {
          goto LABEL_111;
        }
        if (v107 < v105) {
          goto LABEL_114;
        }
        if (v63 > *((void *)v103 + 2)) {
          goto LABEL_115;
        }
        *(void *)uint64_t v104 = v105;
        *(void *)&v61[16 * v102 + 8] = v107;
        v109 = *((void *)v103 + 2);
        if (v63 >= v109) {
          goto LABEL_116;
        }
        Swift::Int v11 = v103;
        Swift::Int v14 = v109 - 1;
        memmove(&v61[16 * v63], v106 + 16, 16 * (v109 - 1 - v63));
        *((void *)v103 + 2) = v109 - 1;
        unint64_t v13 = v137;
        if (v109 <= 2) {
          goto LABEL_14;
        }
      }
    }
    Swift::Int v14 = 1;
LABEL_14:
    Swift::Int v6 = v128;
    uint64_t v12 = v136;
    if (v136 >= v128)
    {
      a1 = v121;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  Swift::Int v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  Swift::Int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  Swift::Int v124;
  char *v125;
  Swift::Int v126;
  uint64_t v127;
  Swift::Int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  Swift::Int v137;
  uint64_t v138;
  Swift::Int v139;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SiriUISession(0);
  v130 = *(void *)(v4 - 8);
  v131 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  v127 = (uint64_t)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  v138 = (uint64_t)&v121 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  v135 = (uint64_t)&v121 - v10;
  MEMORY[0x270FA5388](v9);
  v134 = (uint64_t)&v121 - v11;
  uint64_t v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_137;
    }
    if (v12) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    Swift::Int v14 = v12;
  }
  else {
    Swift::Int v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_145;
  }
  v124 = result;
  if (v12 < 2)
  {
    char v18 = (char *)MEMORY[0x263F8EE78];
    v129 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80));
    v123 = MEMORY[0x263F8EE78];
    if (v12 != 1)
    {
      unint64_t v20 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_103:
      v114 = v18;
      if (v20 >= 2)
      {
        v115 = *a1;
        do
        {
          v116 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_132;
          }
          if (!v115) {
            goto LABEL_144;
          }
          v117 = *(void *)&v114[16 * v116 + 32];
          v118 = *(void *)&v114[16 * v20 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v115 + *(void *)(v130 + 72) * v117, v115 + *(void *)(v130 + 72) * *(void *)&v114[16 * v20 + 16], v115 + *(void *)(v130 + 72) * v118, v129);
          if (v2) {
            break;
          }
          if (v118 < v117) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
          }
          if (v116 >= *((void *)v114 + 2)) {
            goto LABEL_134;
          }
          v119 = &v114[16 * v116 + 32];
          *(void *)v119 = v117;
          *((void *)v119 + 1) = v118;
          v120 = *((void *)v114 + 2);
          if (v20 > v120) {
            goto LABEL_135;
          }
          memmove(&v114[16 * v20 + 16], &v114[16 * v20 + 32], 16 * (v120 - v20));
          *((void *)v114 + 2) = v120 - 1;
          unint64_t v20 = v120 - 1;
        }
        while (v120 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v123 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v130 + 80);
    v123 = v16;
    v129 = v16 + ((v17 + 32) & ~v17);
  }
  uint64_t v19 = 0;
  char v18 = (char *)MEMORY[0x263F8EE78];
  v136 = a1;
  while (1)
  {
    uint64_t v21 = v19;
    unint64_t v22 = v19 + 1;
    v128 = v19;
    if (v19 + 1 >= v12)
    {
      char v29 = v19 + 1;
      unint64_t v37 = v19;
    }
    else
    {
      v132 = *a1;
      unint64_t v23 = v132;
      uint64_t v24 = *(void *)(v130 + 72);
      v137 = v12;
      uint64_t v25 = v134;
      outlined init with copy of SiriUISession(v132 + v24 * v22, v134);
      uint64_t v26 = v135;
      outlined init with copy of SiriUISession(v23 + v24 * v21, v135);
      LODWORD(v133) = static Date.< infix(_:_:)();
      outlined destroy of SiriUISession(v26, type metadata accessor for SiriUISession);
      uint64_t v27 = v25;
      uint64_t v12 = v137;
      outlined destroy of SiriUISession(v27, type metadata accessor for SiriUISession);
      unint64_t v28 = v24;
      char v29 = v21 + 2;
      v139 = v28;
      if (v21 + 2 < v12)
      {
        v122 = v2;
        v125 = v18;
        uint64_t v30 = v28 * v22;
        uint64_t v31 = v132;
        unint64_t v32 = v28 * v29;
        while (1)
        {
          unint64_t v33 = v29;
          uint64_t v34 = v134;
          outlined init with copy of SiriUISession(v31 + v32, v134);
          BOOL v35 = v135;
          outlined init with copy of SiriUISession(v31 + v30, v135);
          uint64_t v36 = static Date.< infix(_:_:)();
          outlined destroy of SiriUISession(v35, type metadata accessor for SiriUISession);
          outlined destroy of SiriUISession(v34, type metadata accessor for SiriUISession);
          if ((v133 ^ v36)) {
            break;
          }
          char v29 = v33 + 1;
          v31 += v139;
          uint64_t v12 = v137;
          if (v137 == v33 + 1)
          {
            char v29 = v137;
            char v18 = v125;
            uint64_t v2 = v122;
            goto LABEL_23;
          }
        }
        char v18 = v125;
        char v29 = v33;
        uint64_t v2 = v122;
        uint64_t v12 = v137;
      }
LABEL_23:
      unint64_t v37 = v128;
      if (v133)
      {
        if (v29 < v128) {
          goto LABEL_138;
        }
        if (v128 < v29)
        {
          v125 = v18;
          char v38 = 0;
          uint64_t v39 = v139;
          uint64_t v40 = v139 * (v29 - 1);
          char v41 = v29 * v139;
          uint64_t v42 = v128 * v139;
          do
          {
            if (v37 != v29 + v38 - 1)
            {
              uint64_t v44 = v29;
              uint64_t v45 = v132;
              if (!v132) {
                goto LABEL_143;
              }
              uint64_t v46 = v132 + v42;
              v133 = v132 + v40;
              outlined init with take of SiriUISession(v132 + v42, v127);
              if (v42 < v40 || v46 >= v45 + v41)
              {
                BOOL v43 = v133;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                BOOL v43 = v133;
                if (v42 != v40) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              outlined init with take of SiriUISession(v127, v43);
              char v29 = v44;
              uint64_t v39 = v139;
            }
            ++v37;
            --v38;
            v40 -= v39;
            v41 -= v39;
            v42 += v39;
          }
          while (v37 < v29 + v38);
          a1 = v136;
          uint64_t v12 = v137;
          char v18 = v125;
          unint64_t v37 = v128;
        }
      }
    }
    if (v29 < v12)
    {
      if (__OFSUB__(v29, v37)) {
        goto LABEL_136;
      }
      if (v29 - v37 < v124) {
        break;
      }
    }
LABEL_55:
    if (v29 < v37) {
      goto LABEL_131;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v137 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    uint64_t v63 = *((void *)v18 + 2);
    unint64_t v62 = *((void *)v18 + 3);
    unint64_t v20 = v63 + 1;
    if (v63 >= v62 >> 1) {
      char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, v18);
    }
    *((void *)v18 + 2) = v20;
    uint64_t v64 = v18 + 32;
    unint64_t v65 = &v18[16 * v63 + 32];
    char v66 = v137;
    *(void *)unint64_t v65 = v128;
    *((void *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        unint64_t v67 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v72 = &v64[16 * v20];
          uint64_t v73 = *((void *)v72 - 8);
          char v74 = *((void *)v72 - 7);
          unint64_t v78 = __OFSUB__(v74, v73);
          uint64_t v75 = v74 - v73;
          if (v78) {
            goto LABEL_120;
          }
          unint64_t v77 = *((void *)v72 - 6);
          uint64_t v76 = *((void *)v72 - 5);
          unint64_t v78 = __OFSUB__(v76, v77);
          unint64_t v70 = v76 - v77;
          unint64_t v71 = v78;
          if (v78) {
            goto LABEL_121;
          }
          uint64_t v79 = v20 - 2;
          Swift::Int v80 = &v64[16 * v20 - 32];
          uint64_t v82 = *(void *)v80;
          Swift::Int v81 = *((void *)v80 + 1);
          unint64_t v78 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          if (v78) {
            goto LABEL_123;
          }
          unint64_t v78 = __OFADD__(v70, v83);
          unint64_t v84 = v70 + v83;
          if (v78) {
            goto LABEL_126;
          }
          if (v84 >= v75)
          {
            char v102 = &v64[16 * v67];
            uint64_t v104 = *(void *)v102;
            uint64_t v103 = *((void *)v102 + 1);
            unint64_t v78 = __OFSUB__(v103, v104);
            v105 = v103 - v104;
            if (v78) {
              goto LABEL_130;
            }
            uint64_t v95 = v70 < v105;
            goto LABEL_92;
          }
        }
        else
        {
          if (v20 != 3)
          {
            unint64_t v96 = *((void *)v18 + 4);
            v97 = *((void *)v18 + 5);
            unint64_t v78 = __OFSUB__(v97, v96);
            uint64_t v89 = v97 - v96;
            uint64_t v90 = v78;
            goto LABEL_86;
          }
          uint64_t v69 = *((void *)v18 + 4);
          uint64_t v68 = *((void *)v18 + 5);
          unint64_t v78 = __OFSUB__(v68, v69);
          unint64_t v70 = v68 - v69;
          unint64_t v71 = v78;
        }
        if (v71) {
          goto LABEL_122;
        }
        uint64_t v79 = v20 - 2;
        uint64_t v85 = &v64[16 * v20 - 32];
        unint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        uint64_t v88 = __OFSUB__(v86, v87);
        uint64_t v89 = v86 - v87;
        uint64_t v90 = v88;
        if (v88) {
          goto LABEL_125;
        }
        unint64_t v91 = &v64[16 * v67];
        double v93 = *(void *)v91;
        double v92 = *((void *)v91 + 1);
        unint64_t v78 = __OFSUB__(v92, v93);
        unint64_t v94 = v92 - v93;
        if (v78) {
          goto LABEL_128;
        }
        if (__OFADD__(v89, v94)) {
          goto LABEL_129;
        }
        if (v89 + v94 >= v70)
        {
          uint64_t v95 = v70 < v94;
LABEL_92:
          if (v95) {
            unint64_t v67 = v79;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v90) {
          goto LABEL_124;
        }
        uint64_t v98 = &v64[16 * v67];
        uint64_t v100 = *(void *)v98;
        char v99 = *((void *)v98 + 1);
        unint64_t v78 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v78) {
          goto LABEL_127;
        }
        if (v101 < v89) {
          goto LABEL_14;
        }
LABEL_94:
        v106 = v67 - 1;
        if (v67 - 1 >= v20)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        v107 = *a1;
        if (!*a1) {
          goto LABEL_142;
        }
        v108 = v18;
        v109 = &v64[16 * v106];
        v110 = *(void *)v109;
        v111 = &v64[16 * v67];
        v112 = *((void *)v111 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v107 + *(void *)(v130 + 72) * *(void *)v109, v107 + *(void *)(v130 + 72) * *(void *)v111, v107 + *(void *)(v130 + 72) * v112, v129);
        if (v2) {
          goto LABEL_114;
        }
        if (v112 < v110) {
          goto LABEL_117;
        }
        if (v67 > *((void *)v108 + 2)) {
          goto LABEL_118;
        }
        *(void *)v109 = v110;
        *(void *)&v64[16 * v106 + 8] = v112;
        v113 = *((void *)v108 + 2);
        if (v67 >= v113) {
          goto LABEL_119;
        }
        char v18 = v108;
        unint64_t v20 = v113 - 1;
        memmove(&v64[16 * v67], v111 + 16, 16 * (v113 - 1 - v67));
        *((void *)v108 + 2) = v113 - 1;
        a1 = v136;
        if (v113 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    uint64_t v12 = a1[1];
    uint64_t v19 = v137;
    if (v137 >= v12) {
      goto LABEL_103;
    }
  }
  if (__OFADD__(v37, v124)) {
    goto LABEL_139;
  }
  if (v37 + v124 >= v12) {
    uint64_t v47 = v12;
  }
  else {
    uint64_t v47 = v37 + v124;
  }
  if (v47 >= v37)
  {
    if (v29 != v47)
    {
      v125 = v18;
      v126 = v47;
      v122 = v2;
      uint64_t v48 = *(void *)(v130 + 72);
      char v49 = v48 * (v29 - 1);
      v132 = v48;
      unint64_t v50 = v29 * v48;
      do
      {
        uint64_t v52 = 0;
        v137 = v29;
        v133 = v50;
        while (1)
        {
          v139 = v37;
          uint64_t v53 = *a1;
          unint64_t v54 = v50 + v52 + *a1;
          int64_t v55 = v134;
          outlined init with copy of SiriUISession(v54, v134);
          int64_t v56 = v49;
          unint64_t v57 = v49 + v52 + v53;
          unint64_t v58 = v135;
          outlined init with copy of SiriUISession(v57, v135);
          LOBYTE(v53) = static Date.< infix(_:_:)();
          outlined destroy of SiriUISession(v58, type metadata accessor for SiriUISession);
          outlined destroy of SiriUISession(v55, type metadata accessor for SiriUISession);
          if ((v53 & 1) == 0) {
            break;
          }
          unint64_t v59 = *a1;
          if (!*a1) {
            goto LABEL_141;
          }
          unint64_t v50 = v133;
          char v49 = v56;
          int64_t v60 = v59 + v56 + v52;
          outlined init with take of SiriUISession(v59 + v133 + v52, v138);
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of SiriUISession(v138, v60);
          v52 -= v132;
          unint64_t v37 = v139 + 1;
          a1 = v136;
          uint64_t v51 = v137;
          if (v137 == v139 + 1) {
            goto LABEL_48;
          }
        }
        uint64_t v51 = v137;
        char v49 = v56;
        unint64_t v50 = v133;
LABEL_48:
        char v29 = v51 + 1;
        v49 += v132;
        v50 += v132;
        unint64_t v37 = v128;
      }
      while (v29 != v126);
      char v29 = v126;
      uint64_t v2 = v122;
      char v18 = v125;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t *v41;
  uint64_t v42;
  Swift::Int v43;
  void *v44;
  uint64_t v45;
  Swift::Int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  Swift::Int v125;
  Swift::Int v126;
  Swift::Int v127;
  Swift::Int v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void (**v132)(char *, uint64_t);
  char *v133;
  char *v134;
  uint64_t v135;
  Swift::Int v136;
  uint64_t v137;
  uint64_t v138;

  v135 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v135 - 8);
  Swift::Int v3 = MEMORY[0x270FA5388](v135);
  v134 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  v133 = (char *)&v120 - v5;
  Swift::Int v6 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v6);
  if (result >= v6)
  {
    if (v6 < 0) {
      goto LABEL_134;
    }
    if (v6) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1);
    }
    return result;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_142;
  }
  v125 = result;
  if (v6 < 2)
  {
    Swift::Int v11 = (char *)MEMORY[0x263F8EE78];
    v138 = MEMORY[0x263F8EE78];
    v130 = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      Swift::Int v14 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_100:
      v111 = v131;
      if (v14 >= 2)
      {
        v112 = *a1;
        do
        {
          v113 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_129;
          }
          if (!v112) {
            goto LABEL_141;
          }
          v114 = v11;
          v115 = v11 + 32;
          v116 = *(void *)&v11[16 * v113 + 32];
          v117 = *(void *)&v11[16 * v14 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v112 + 8 * v116), (char *)(v112 + 8 * *(void *)&v115[16 * v14 - 16]), (char *)(v112 + 8 * v117), v130);
          if (v111) {
            break;
          }
          if (v117 < v116) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
          }
          if (v113 >= *((void *)v114 + 2)) {
            goto LABEL_131;
          }
          v118 = &v114[16 * v113 + 32];
          *(void *)v118 = v116;
          *((void *)v118 + 1) = v117;
          v119 = *((void *)v114 + 2);
          if (v14 > v119) {
            goto LABEL_132;
          }
          Swift::Int v11 = v114;
          memmove(&v114[16 * v14 + 16], &v114[16 * v14 + 32], 16 * (v119 - v14));
          *((void *)v114 + 2) = v119 - 1;
          Swift::Int v14 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(void *)((v138 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    type metadata accessor for TranscriptTask(0);
    int64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    v130 = (char *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v138 = v10;
  }
  uint64_t v12 = 0;
  unint64_t v13 = *a1;
  v132 = (void (**)(char *, uint64_t))(v2 + 8);
  v123 = v13 + 16;
  v121 = a1;
  v122 = v13 - 8;
  Swift::Int v11 = (char *)MEMORY[0x263F8EE78];
  v128 = v6;
  v137 = v13;
  while (1)
  {
    uint64_t v15 = v12;
    uint64_t v16 = v12 + 1;
    v127 = v12;
    if (v12 + 1 < v6)
    {
      uint64_t v17 = *(void *)(v13 + 8 * v16);
      char v18 = *(void *)(v13 + 8 * v12);
      uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 224);
      swift_retain();
      unint64_t v20 = swift_retain();
      uint64_t v21 = v133;
      unint64_t v22 = v19(v20);
      unint64_t v23 = v134;
      (*(void (**)(uint64_t))(*(void *)v18 + 224))(v22);
      LODWORD(v136) = static Date.< infix(_:_:)();
      uint64_t v24 = *v132;
      uint64_t v25 = v23;
      uint64_t v26 = v135;
      (*v132)(v25, v135);
      v24(v21, v26);
      swift_release();
      Swift::Int v6 = v128;
      swift_release();
      uint64_t v16 = v15 + 2;
      if (v15 + 2 < v6)
      {
        v124 = v11;
        uint64_t v27 = v123 + 8 * v15;
        while (1)
        {
          unint64_t v28 = v16;
          char v29 = *(void *)(v27 - 8);
          uint64_t v30 = *(uint64_t (**)(uint64_t))(**(void **)v27 + 224);
          swift_retain();
          uint64_t v31 = swift_retain();
          unint64_t v32 = v133;
          unint64_t v33 = v30(v31);
          uint64_t v34 = v134;
          (*(void (**)(uint64_t))(*(void *)v29 + 224))(v33);
          BOOL v35 = static Date.< infix(_:_:)();
          uint64_t v36 = v34;
          unint64_t v37 = v135;
          v24(v36, v135);
          v24(v32, v37);
          swift_release();
          swift_release();
          if ((v136 ^ v35)) {
            break;
          }
          uint64_t v16 = v28 + 1;
          v27 += 8;
          Swift::Int v6 = v128;
          if (v128 == v28 + 1)
          {
            uint64_t v16 = v128;
            Swift::Int v11 = v124;
            goto LABEL_22;
          }
        }
        Swift::Int v11 = v124;
        Swift::Int v6 = v128;
        uint64_t v16 = v28;
LABEL_22:
        uint64_t v15 = v127;
      }
      unint64_t v13 = v137;
      if (v136)
      {
        if (v16 < v15) {
          goto LABEL_135;
        }
        if (v15 < v16)
        {
          char v38 = (uint64_t *)(v122 + 8 * v16);
          uint64_t v39 = v16;
          uint64_t v40 = v15;
          char v41 = (uint64_t *)(v137 + 8 * v15);
          do
          {
            if (v40 != --v39)
            {
              if (!v13) {
                goto LABEL_140;
              }
              uint64_t v42 = *v41;
              *char v41 = *v38;
              *char v38 = v42;
            }
            ++v40;
            --v38;
            ++v41;
          }
          while (v40 < v39);
        }
      }
    }
    if (v16 >= v6) {
      goto LABEL_50;
    }
    if (__OFSUB__(v16, v15)) {
      goto LABEL_133;
    }
    if (v16 - v15 >= v125) {
      goto LABEL_50;
    }
    if (__OFADD__(v15, v125)) {
      goto LABEL_136;
    }
    BOOL v43 = v15 + v125 >= v6 ? v6 : v15 + v125;
    if (v43 < v15) {
      break;
    }
    if (v16 != v43)
    {
      v124 = v11;
      uint64_t v44 = (void *)(v122 + 8 * v16);
      v126 = v43;
      do
      {
        v136 = v16;
        uint64_t v45 = *(void *)(v13 + 8 * v16);
        uint64_t v46 = v15;
        v129 = v44;
        uint64_t v47 = v44;
        while (1)
        {
          uint64_t v48 = *v47;
          char v49 = *(uint64_t (**)(uint64_t))(*(void *)v45 + 224);
          swift_retain();
          unint64_t v50 = swift_retain();
          uint64_t v51 = v133;
          uint64_t v52 = v49(v50);
          uint64_t v53 = v134;
          (*(void (**)(uint64_t))(*(void *)v48 + 224))(v52);
          unint64_t v54 = static Date.< infix(_:_:)();
          int64_t v55 = *v132;
          int64_t v56 = v53;
          unint64_t v57 = v135;
          (*v132)(v56, v135);
          v55(v51, v57);
          swift_release();
          swift_release();
          if ((v54 & 1) == 0) {
            break;
          }
          unint64_t v13 = v137;
          if (!v137) {
            goto LABEL_138;
          }
          unint64_t v58 = *v47;
          uint64_t v45 = v47[1];
          *uint64_t v47 = v45;
          v47[1] = v58;
          --v47;
          if (v136 == ++v46) {
            goto LABEL_43;
          }
        }
        unint64_t v13 = v137;
LABEL_43:
        uint64_t v16 = v136 + 1;
        uint64_t v44 = v129 + 1;
        uint64_t v15 = v127;
      }
      while (v136 + 1 != v126);
      uint64_t v16 = v126;
      Swift::Int v11 = v124;
    }
LABEL_50:
    if (v16 < v15) {
      goto LABEL_128;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    int64_t v60 = *((void *)v11 + 2);
    unint64_t v59 = *((void *)v11 + 3);
    Swift::Int v14 = v60 + 1;
    unint64_t v13 = v137;
    if (v60 >= v59 >> 1)
    {
      v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v11);
      unint64_t v13 = v137;
      Swift::Int v11 = v110;
    }
    *((void *)v11 + 2) = v14;
    unint64_t v61 = v11 + 32;
    unint64_t v62 = &v11[16 * v60 + 32];
    *(void *)unint64_t v62 = v15;
    *((void *)v62 + 1) = v16;
    v136 = v16;
    if (v60)
    {
      while (1)
      {
        uint64_t v63 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v68 = &v61[16 * v14];
          uint64_t v69 = *((void *)v68 - 8);
          unint64_t v70 = *((void *)v68 - 7);
          char v74 = __OFSUB__(v70, v69);
          unint64_t v71 = v70 - v69;
          if (v74) {
            goto LABEL_117;
          }
          uint64_t v73 = *((void *)v68 - 6);
          uint64_t v72 = *((void *)v68 - 5);
          char v74 = __OFSUB__(v72, v73);
          char v66 = v72 - v73;
          unint64_t v67 = v74;
          if (v74) {
            goto LABEL_118;
          }
          uint64_t v75 = v14 - 2;
          uint64_t v76 = &v61[16 * v14 - 32];
          unint64_t v78 = *(void *)v76;
          unint64_t v77 = *((void *)v76 + 1);
          char v74 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          if (v74) {
            goto LABEL_120;
          }
          char v74 = __OFADD__(v66, v79);
          Swift::Int v80 = v66 + v79;
          if (v74) {
            goto LABEL_123;
          }
          if (v80 >= v71)
          {
            uint64_t v98 = &v61[16 * v63];
            uint64_t v100 = *(void *)v98;
            char v99 = *((void *)v98 + 1);
            char v74 = __OFSUB__(v99, v100);
            uint64_t v101 = v99 - v100;
            if (v74) {
              goto LABEL_127;
            }
            unint64_t v91 = v66 < v101;
            goto LABEL_87;
          }
        }
        else
        {
          if (v14 != 3)
          {
            double v92 = *((void *)v11 + 4);
            double v93 = *((void *)v11 + 5);
            char v74 = __OFSUB__(v93, v92);
            uint64_t v85 = v93 - v92;
            uint64_t v86 = v74;
            goto LABEL_81;
          }
          unint64_t v65 = *((void *)v11 + 4);
          uint64_t v64 = *((void *)v11 + 5);
          char v74 = __OFSUB__(v64, v65);
          char v66 = v64 - v65;
          unint64_t v67 = v74;
        }
        if (v67) {
          goto LABEL_119;
        }
        uint64_t v75 = v14 - 2;
        Swift::Int v81 = &v61[16 * v14 - 32];
        uint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        unint64_t v84 = __OFSUB__(v82, v83);
        uint64_t v85 = v82 - v83;
        uint64_t v86 = v84;
        if (v84) {
          goto LABEL_122;
        }
        unint64_t v87 = &v61[16 * v63];
        uint64_t v89 = *(void *)v87;
        uint64_t v88 = *((void *)v87 + 1);
        char v74 = __OFSUB__(v88, v89);
        uint64_t v90 = v88 - v89;
        if (v74) {
          goto LABEL_125;
        }
        if (__OFADD__(v85, v90)) {
          goto LABEL_126;
        }
        if (v85 + v90 >= v66)
        {
          unint64_t v91 = v66 < v90;
LABEL_87:
          if (v91) {
            uint64_t v63 = v75;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v86) {
          goto LABEL_121;
        }
        unint64_t v94 = &v61[16 * v63];
        unint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        char v74 = __OFSUB__(v95, v96);
        v97 = v95 - v96;
        if (v74) {
          goto LABEL_124;
        }
        if (v97 < v85) {
          goto LABEL_14;
        }
LABEL_89:
        char v102 = v63 - 1;
        if (v63 - 1 >= v14)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v13) {
          goto LABEL_139;
        }
        uint64_t v103 = v11;
        uint64_t v104 = &v61[16 * v102];
        v105 = *(void *)v104;
        v106 = &v61[16 * v63];
        v107 = *((void *)v106 + 1);
        v108 = v131;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v13 + 8 * *(void *)v104), (char *)(v13 + 8 * *(void *)v106), (char *)(v13 + 8 * v107), v130);
        v131 = v108;
        if (v108) {
          goto LABEL_111;
        }
        if (v107 < v105) {
          goto LABEL_114;
        }
        if (v63 > *((void *)v103 + 2)) {
          goto LABEL_115;
        }
        *(void *)uint64_t v104 = v105;
        *(void *)&v61[16 * v102 + 8] = v107;
        v109 = *((void *)v103 + 2);
        if (v63 >= v109) {
          goto LABEL_116;
        }
        Swift::Int v11 = v103;
        Swift::Int v14 = v109 - 1;
        memmove(&v61[16 * v63], v106 + 16, 16 * (v109 - 1 - v63));
        *((void *)v103 + 2) = v109 - 1;
        unint64_t v13 = v137;
        if (v109 <= 2) {
          goto LABEL_14;
        }
      }
    }
    Swift::Int v14 = 1;
LABEL_14:
    Swift::Int v6 = v128;
    uint64_t v12 = v136;
    if (v136 >= v128)
    {
      a1 = v121;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  double *v28;
  double v29;
  Swift::Int v30;
  double *v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      unint64_t v84 = *a1;
      uint64_t v85 = *a1 + 8;
      uint64_t v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        uint64_t v88 = *(double *)(v84 + 16 * i + 8);
        uint64_t v89 = v86;
        uint64_t v90 = v85;
        do
        {
          if (v88 >= *(double *)v90) {
            break;
          }
          if (!v84) {
            goto LABEL_141;
          }
          unint64_t v91 = *(void *)(v90 + 8);
          *(_OWORD *)(v90 + 8) = *(_OWORD *)(v90 - 8);
          *(void *)(v90 - 8) = v91;
          *(double *)uint64_t v90 = v88;
          v90 -= 16;
        }
        while (!__CFADD__(v89++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  uint64_t v101 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      double v93 = v12;
      uint64_t v103 = v9;
      if (v13 >= 2)
      {
        unint64_t v94 = *v101;
        do
        {
          uint64_t v95 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v94) {
            goto LABEL_145;
          }
          unint64_t v96 = v93;
          v97 = *(void *)&v93[16 * v95 + 32];
          uint64_t v98 = *(void *)&v93[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(void *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1) {
            break;
          }
          if (v98 < v97) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v96);
          }
          if (v95 >= *((void *)v96 + 2)) {
            goto LABEL_134;
          }
          char v99 = &v96[16 * v95 + 32];
          *(void *)char v99 = v97;
          *((void *)v99 + 1) = v98;
          uint64_t v100 = *((void *)v96 + 2);
          if (v13 > v100) {
            goto LABEL_135;
          }
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          double v93 = v96;
          *((void *)v96 + 2) = v100 - 1;
          unint64_t v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v103 = v8;
    __dst = (char *)(v8 + 32);
  }
  int64_t v10 = 0;
  Swift::Int v11 = *a1;
  char v102 = *a1 + 40;
  uint64_t v12 = (char *)MEMORY[0x263F8EE78];
  uint64_t v104 = v6;
  v105 = v3;
  v106 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(double *)(v11 + 16 * v10 + 8);
      uint64_t v16 = *(double *)(v11 + 16 * v14 + 8);
      int64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (double *)(v102 + 16 * v14);
        char v18 = v15;
        while (1)
        {
          uint64_t v19 = v18;
          char v18 = *v17;
          if (v15 < v16 == *v17 >= v19) {
            break;
          }
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            int64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          unint64_t v20 = 16 * v10;
          uint64_t v21 = 16 * v14;
          unint64_t v22 = v10;
          unint64_t v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_144;
              }
              uint64_t v24 = v11 + v20;
              uint64_t v25 = *(void *)(v11 + v21);
              uint64_t v26 = *(void *)(v11 + v21 + 8);
              *(_OWORD *)(v11 + v21) = *(_OWORD *)(v11 + v20 - 16);
              *(void *)(v24 - 16) = v25;
              *(void *)(v24 - 8) = v26;
            }
            ++v23;
            v20 -= 16;
            v21 += 16;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v27 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v27 >= v3) {
      uint64_t v27 = v3;
    }
    if (v27 < v14) {
      break;
    }
    if (v10 != v27)
    {
      unint64_t v28 = (double *)(v11 + 16 * v10);
      do
      {
        char v29 = *(double *)(v11 + 16 * v10 + 8);
        uint64_t v30 = v14;
        uint64_t v31 = v28;
        do
        {
          if (v29 >= *(v31 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          unint64_t v32 = *v31;
          *(_OWORD *)uint64_t v31 = *((_OWORD *)v31 - 1);
          *(v31 - 1) = v29;
          *(v31 - 2) = v32;
          v31 -= 2;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 2;
      }
      while (v10 != v27);
      int64_t v10 = v27;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    uint64_t v34 = *((void *)v12 + 2);
    unint64_t v33 = *((void *)v12 + 3);
    unint64_t v13 = v34 + 1;
    Swift::Int v11 = v106;
    if (v34 >= v33 >> 1)
    {
      uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v12);
      Swift::Int v11 = v106;
      uint64_t v12 = v83;
    }
    *((void *)v12 + 2) = v13;
    BOOL v35 = v12 + 32;
    uint64_t v36 = &v12[16 * v34 + 32];
    *(void *)uint64_t v36 = v14;
    *((void *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        unint64_t v37 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v42 = &v35[16 * v13];
          BOOL v43 = *((void *)v42 - 8);
          uint64_t v44 = *((void *)v42 - 7);
          uint64_t v48 = __OFSUB__(v44, v43);
          uint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_120;
          }
          uint64_t v47 = *((void *)v42 - 6);
          uint64_t v46 = *((void *)v42 - 5);
          uint64_t v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          char v41 = v48;
          if (v48) {
            goto LABEL_121;
          }
          char v49 = v13 - 2;
          unint64_t v50 = &v35[16 * v13 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          uint64_t v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_123;
          }
          uint64_t v48 = __OFADD__(v40, v53);
          unint64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_126;
          }
          if (v54 >= v45)
          {
            uint64_t v72 = &v35[16 * v37];
            char v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            uint64_t v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_130;
            }
            unint64_t v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            char v66 = *((void *)v12 + 4);
            unint64_t v67 = *((void *)v12 + 5);
            uint64_t v48 = __OFSUB__(v67, v66);
            unint64_t v59 = v67 - v66;
            int64_t v60 = v48;
            goto LABEL_77;
          }
          uint64_t v39 = *((void *)v12 + 4);
          char v38 = *((void *)v12 + 5);
          uint64_t v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          char v41 = v48;
        }
        if (v41) {
          goto LABEL_122;
        }
        char v49 = v13 - 2;
        int64_t v55 = &v35[16 * v13 - 32];
        unint64_t v57 = *(void *)v55;
        int64_t v56 = *((void *)v55 + 1);
        unint64_t v58 = __OFSUB__(v56, v57);
        unint64_t v59 = v56 - v57;
        int64_t v60 = v58;
        if (v58) {
          goto LABEL_125;
        }
        unint64_t v61 = &v35[16 * v37];
        uint64_t v63 = *(void *)v61;
        unint64_t v62 = *((void *)v61 + 1);
        uint64_t v48 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v48) {
          goto LABEL_128;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_129;
        }
        if (v59 + v64 >= v40)
        {
          unint64_t v65 = v40 < v64;
LABEL_83:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v60) {
          goto LABEL_124;
        }
        uint64_t v68 = &v35[16 * v37];
        unint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        uint64_t v48 = __OFSUB__(v69, v70);
        unint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_127;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        unint64_t v77 = v12;
        unint64_t v78 = &v35[16 * v76];
        uint64_t v79 = *(void *)v78;
        Swift::Int v80 = &v35[16 * v37];
        Swift::Int v81 = *((void *)v80 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 16 * *(void *)v78), (char *)(v11 + 16 * *(void *)v80), v11 + 16 * v81, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v81 < v79) {
          goto LABEL_117;
        }
        if (v37 > *((void *)v77 + 2)) {
          goto LABEL_118;
        }
        *(void *)unint64_t v78 = v79;
        *(void *)&v35[16 * v76 + 8] = v81;
        uint64_t v82 = *((void *)v77 + 2);
        if (v37 >= v82) {
          goto LABEL_119;
        }
        uint64_t v12 = v77;
        unint64_t v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((void *)v77 + 2) = v82 - 1;
        Swift::Int v11 = v106;
        if (v82 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v104;
    Swift::Int v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  void *(*v16)(void *__return_ptr, uint64_t);
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  void *(*v23)(void *__return_ptr, uint64_t);
  uint64_t v24;
  void *v25;
  double v26;
  uint64_t *v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t *v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *(*v37)(void *__return_ptr, uint64_t);
  uint64_t v38;
  void *v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  Swift::Int v110;
  char *v111;
  Swift::Int v112;
  char *v113;
  uint64_t v114;
  double v115[6];
  void v116[6];
  uint64_t v117;

  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_131;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_139;
  }
  Swift::Int v6 = result;
  v114 = v1;
  v105 = v2;
  if (v3 < 2)
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
    v117 = MEMORY[0x263F8EE78];
    v111 = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_98:
      uint64_t v95 = v10;
      if (v13 >= 2)
      {
        unint64_t v96 = *v105;
        do
        {
          v97 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_126;
          }
          if (!v96) {
            goto LABEL_138;
          }
          uint64_t v98 = v95;
          char v99 = *(void *)&v95[16 * v97 + 32];
          uint64_t v100 = *(void *)&v95[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v96 + 8 * v99), (char *)(v96 + 8 * *(void *)&v95[16 * v13 + 16]), v96 + 8 * v100, v111);
          if (v114) {
            break;
          }
          if (v100 < v99) {
            goto LABEL_127;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_128;
          }
          uint64_t v101 = v98 + 32;
          char v102 = &v98[16 * v97 + 32];
          *(void *)char v102 = v99;
          *((void *)v102 + 1) = v100;
          uint64_t v103 = v98;
          uint64_t v104 = *((void *)v98 + 2);
          if (v13 > v104) {
            goto LABEL_129;
          }
          memmove(&v101[16 * v13 - 16], &v101[16 * v13], 16 * (v104 - v13));
          uint64_t v95 = v103;
          *((void *)v103 + 2) = v104 - 1;
          unint64_t v13 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)((v117 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v2;
    uint64_t v8 = v5 >> 1;
    type metadata accessor for Signal();
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v2 = v7;
    v111 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v117 = v9;
  }
  v108 = v6;
  Swift::Int v11 = 0;
  uint64_t v12 = *v2;
  v106 = *v2 - 8;
  v107 = *v2 + 16;
  int64_t v10 = (char *)MEMORY[0x263F8EE78];
  v110 = v3;
  while (1)
  {
    Swift::Int v14 = v11++;
    v112 = v14;
    if (v11 < v3)
    {
      uint64_t v15 = *(void *)(v12 + 8 * v14);
      uint64_t v16 = *(void *(**)(void *__return_ptr, uint64_t))(**(void **)(v12 + 8 * v11) + 120);
      swift_retain();
      uint64_t v17 = swift_retain();
      char v18 = v16(v116, v17);
      uint64_t v19 = *(double *)v116;
      (*(void (**)(double *__return_ptr, void *))(*(void *)v15 + 120))(v115, v18);
      swift_release();
      swift_release();
      unint64_t v20 = v115[0];
      Swift::Int v11 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v21 = v107 + 8 * v14;
        while (1)
        {
          unint64_t v22 = *(void *)(v21 - 8);
          unint64_t v23 = *(void *(**)(void *__return_ptr, uint64_t))(**(void **)v21 + 120);
          swift_retain();
          uint64_t v24 = swift_retain();
          uint64_t v25 = v23(v116, v24);
          uint64_t v26 = *(double *)v116;
          (*(void (**)(double *__return_ptr, void *))(*(void *)v22 + 120))(v115, v25);
          swift_release();
          swift_release();
          if (v19 < v20 == v26 >= v115[0]) {
            break;
          }
          ++v11;
          v21 += 8;
          Swift::Int v3 = v110;
          if (v110 == v11)
          {
            Swift::Int v11 = v110;
            goto LABEL_22;
          }
        }
        Swift::Int v3 = v110;
      }
LABEL_22:
      if (v19 < v20)
      {
        if (v11 < v14) {
          goto LABEL_132;
        }
        if (v14 < v11)
        {
          uint64_t v27 = (uint64_t *)(v106 + 8 * v11);
          unint64_t v28 = v11;
          char v29 = v14;
          uint64_t v30 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v29 != --v28)
            {
              if (!v12) {
                goto LABEL_137;
              }
              uint64_t v31 = *v30;
              *uint64_t v30 = *v27;
              *uint64_t v27 = v31;
            }
            ++v29;
            --v27;
            ++v30;
          }
          while (v29 < v28);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v14)) {
        goto LABEL_130;
      }
      if (v11 - v14 < v108) {
        break;
      }
    }
LABEL_47:
    if (v11 < v14) {
      goto LABEL_125;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    BOOL v43 = *((void *)v10 + 2);
    uint64_t v42 = *((void *)v10 + 3);
    unint64_t v13 = v43 + 1;
    if (v43 >= v42 >> 1) {
      int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    v113 = v10 + 32;
    uint64_t v44 = &v10[16 * v43 + 32];
    *(void *)uint64_t v44 = v14;
    *((void *)v44 + 1) = v11;
    if (v43)
    {
      uint64_t v45 = v10 + 32;
      while (1)
      {
        uint64_t v46 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v51 = &v45[16 * v13];
          uint64_t v52 = *((void *)v51 - 8);
          uint64_t v53 = *((void *)v51 - 7);
          unint64_t v57 = __OFSUB__(v53, v52);
          unint64_t v54 = v53 - v52;
          if (v57) {
            goto LABEL_114;
          }
          int64_t v56 = *((void *)v51 - 6);
          int64_t v55 = *((void *)v51 - 5);
          unint64_t v57 = __OFSUB__(v55, v56);
          char v49 = v55 - v56;
          unint64_t v50 = v57;
          if (v57) {
            goto LABEL_115;
          }
          unint64_t v58 = v13 - 2;
          unint64_t v59 = &v45[16 * v13 - 32];
          unint64_t v61 = *(void *)v59;
          int64_t v60 = *((void *)v59 + 1);
          unint64_t v57 = __OFSUB__(v60, v61);
          unint64_t v62 = v60 - v61;
          if (v57) {
            goto LABEL_117;
          }
          unint64_t v57 = __OFADD__(v49, v62);
          uint64_t v63 = v49 + v62;
          if (v57) {
            goto LABEL_120;
          }
          if (v63 >= v54)
          {
            Swift::Int v81 = &v45[16 * v46];
            uint64_t v83 = *(void *)v81;
            uint64_t v82 = *((void *)v81 + 1);
            unint64_t v57 = __OFSUB__(v82, v83);
            unint64_t v84 = v82 - v83;
            if (v57) {
              goto LABEL_124;
            }
            char v74 = v49 < v84;
            goto LABEL_85;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v75 = *((void *)v10 + 4);
            uint64_t v76 = *((void *)v10 + 5);
            unint64_t v57 = __OFSUB__(v76, v75);
            uint64_t v68 = v76 - v75;
            uint64_t v69 = v57;
            goto LABEL_79;
          }
          uint64_t v48 = *((void *)v10 + 4);
          uint64_t v47 = *((void *)v10 + 5);
          unint64_t v57 = __OFSUB__(v47, v48);
          char v49 = v47 - v48;
          unint64_t v50 = v57;
        }
        if (v50) {
          goto LABEL_116;
        }
        unint64_t v58 = v13 - 2;
        uint64_t v64 = &v45[16 * v13 - 32];
        char v66 = *(void *)v64;
        unint64_t v65 = *((void *)v64 + 1);
        unint64_t v67 = __OFSUB__(v65, v66);
        uint64_t v68 = v65 - v66;
        uint64_t v69 = v67;
        if (v67) {
          goto LABEL_119;
        }
        unint64_t v70 = &v45[16 * v46];
        uint64_t v72 = *(void *)v70;
        unint64_t v71 = *((void *)v70 + 1);
        unint64_t v57 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v57) {
          goto LABEL_122;
        }
        if (__OFADD__(v68, v73)) {
          goto LABEL_123;
        }
        if (v68 + v73 >= v49)
        {
          char v74 = v49 < v73;
LABEL_85:
          if (v74) {
            uint64_t v46 = v58;
          }
          goto LABEL_87;
        }
LABEL_79:
        if (v69) {
          goto LABEL_118;
        }
        unint64_t v77 = &v45[16 * v46];
        uint64_t v79 = *(void *)v77;
        unint64_t v78 = *((void *)v77 + 1);
        unint64_t v57 = __OFSUB__(v78, v79);
        Swift::Int v80 = v78 - v79;
        if (v57) {
          goto LABEL_121;
        }
        if (v80 < v68) {
          goto LABEL_14;
        }
LABEL_87:
        uint64_t v85 = v46 - 1;
        if (v46 - 1 >= v13)
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        uint64_t v86 = v12;
        if (!v12) {
          goto LABEL_136;
        }
        unint64_t v87 = v10;
        uint64_t v88 = &v45[16 * v85];
        uint64_t v89 = v45;
        uint64_t v90 = *(void *)v88;
        unint64_t v91 = &v89[16 * v46];
        double v92 = *((void *)v91 + 1);
        double v93 = v86;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v86 + 8 * *(void *)v88), (char *)(v86 + 8 * *(void *)v91), v86 + 8 * v92, v111);
        if (v114) {
          goto LABEL_95;
        }
        if (v92 < v90) {
          goto LABEL_111;
        }
        if (v46 > *((void *)v87 + 2)) {
          goto LABEL_112;
        }
        *(void *)uint64_t v88 = v90;
        uint64_t v45 = v113;
        *(void *)&v113[16 * v85 + 8] = v92;
        unint64_t v94 = *((void *)v87 + 2);
        if (v46 >= v94) {
          goto LABEL_113;
        }
        int64_t v10 = v87;
        unint64_t v13 = v94 - 1;
        memmove(v91, v91 + 16, 16 * (v94 - 1 - v46));
        *((void *)v87 + 2) = v94 - 1;
        uint64_t v12 = v93;
        if (v94 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    Swift::Int v3 = v110;
    if (v11 >= v110) {
      goto LABEL_98;
    }
  }
  if (__OFADD__(v14, v108)) {
    goto LABEL_133;
  }
  if (v14 + v108 >= v3) {
    unint64_t v32 = v3;
  }
  else {
    unint64_t v32 = v14 + v108;
  }
  if (v32 >= v14)
  {
    if (v11 != v32)
    {
      unint64_t v33 = (uint64_t *)(v106 + 8 * v11);
      v109 = v32;
      do
      {
        uint64_t v34 = *(void *)(v12 + 8 * v11);
        BOOL v35 = v33;
        do
        {
          uint64_t v36 = *v35;
          unint64_t v37 = *(void *(**)(void *__return_ptr, uint64_t))(*(void *)v34 + 120);
          swift_retain();
          char v38 = swift_retain();
          uint64_t v39 = v37(v116, v38);
          uint64_t v40 = *(double *)v116;
          (*(void (**)(double *__return_ptr, void *))(*(void *)v36 + 120))(v115, v39);
          swift_release();
          swift_release();
          if (v40 >= v115[0]) {
            break;
          }
          if (!v12) {
            goto LABEL_135;
          }
          char v41 = *v35;
          uint64_t v34 = v35[1];
          *BOOL v35 = v34;
          v35[1] = v41;
          --v35;
          ++v14;
        }
        while (v11 != v14);
        ++v11;
        ++v33;
        Swift::Int v14 = v112;
      }
      while (v11 != v109);
      Swift::Int v11 = v109;
    }
    goto LABEL_47;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  double *v28;
  double v29;
  Swift::Int v30;
  double *v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  double *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v83 = *a1;
      unint64_t v84 = *a1 + 8;
      uint64_t v85 = -1;
      for (i = 1; i != v3; ++i)
      {
        unint64_t v87 = *(double *)(v83 + 16 * i + 8);
        uint64_t v88 = v85;
        uint64_t v89 = v84;
        do
        {
          if (v87 >= *(double *)v89) {
            break;
          }
          if (!v83) {
            goto LABEL_141;
          }
          uint64_t v90 = *(void *)(v89 + 8);
          *(_OWORD *)(v89 + 8) = *(_OWORD *)(v89 - 8);
          *(void *)(v89 - 8) = v90;
          *(double *)uint64_t v89 = v87;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v84 += 16;
        --v85;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  uint64_t v100 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      double v92 = v12;
      char v102 = v9;
      if (v13 >= 2)
      {
        double v93 = *v100;
        do
        {
          unint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v93) {
            goto LABEL_145;
          }
          uint64_t v95 = v92;
          unint64_t v96 = *(void *)&v92[16 * v94 + 32];
          v97 = *(void *)&v92[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v93 + 16 * v96), (double *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_134;
          }
          uint64_t v98 = &v95[16 * v94 + 32];
          *(void *)uint64_t v98 = v96;
          *((void *)v98 + 1) = v97;
          char v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_135;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          double v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          unint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    char v102 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    char v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  int64_t v10 = 0;
  Swift::Int v11 = *a1;
  uint64_t v101 = *a1 + 40;
  uint64_t v12 = (char *)MEMORY[0x263F8EE78];
  uint64_t v103 = v6;
  uint64_t v104 = v3;
  v105 = *a1;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(double *)(v11 + 16 * v10 + 8);
      uint64_t v16 = *(double *)(v11 + 16 * v14 + 8);
      int64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (double *)(v101 + 16 * v14);
        char v18 = v15;
        while (1)
        {
          uint64_t v19 = v18;
          char v18 = *v17;
          if (v15 < v16 == *v17 >= v19) {
            break;
          }
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            int64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          unint64_t v20 = 16 * v10;
          uint64_t v21 = 16 * v14;
          unint64_t v22 = v10;
          unint64_t v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_144;
              }
              uint64_t v24 = v11 + v20;
              uint64_t v25 = *(void *)(v11 + v21);
              uint64_t v26 = *(void *)(v11 + v21 + 8);
              *(_OWORD *)(v11 + v21) = *(_OWORD *)(v11 + v20 - 16);
              *(void *)(v24 - 16) = v25;
              *(void *)(v24 - 8) = v26;
            }
            ++v23;
            v20 -= 16;
            v21 += 16;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v27 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v27 >= v3) {
      uint64_t v27 = v3;
    }
    if (v27 < v14) {
      break;
    }
    if (v10 != v27)
    {
      unint64_t v28 = (double *)(v11 + 16 * v10);
      do
      {
        char v29 = *(double *)(v11 + 16 * v10 + 8);
        uint64_t v30 = v14;
        uint64_t v31 = v28;
        do
        {
          if (v29 >= *(v31 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          unint64_t v32 = *v31;
          *(_OWORD *)uint64_t v31 = *((_OWORD *)v31 - 1);
          *(v31 - 1) = v29;
          *(v31 - 2) = v32;
          v31 -= 2;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 2;
      }
      while (v10 != v27);
      int64_t v10 = v27;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    uint64_t v34 = *((void *)v12 + 2);
    unint64_t v33 = *((void *)v12 + 3);
    unint64_t v13 = v34 + 1;
    Swift::Int v11 = v105;
    if (v34 >= v33 >> 1)
    {
      uint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v12);
      Swift::Int v11 = v105;
      uint64_t v12 = v82;
    }
    *((void *)v12 + 2) = v13;
    BOOL v35 = v12 + 32;
    uint64_t v36 = &v12[16 * v34 + 32];
    *(void *)uint64_t v36 = v14;
    *((void *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        unint64_t v37 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v42 = &v35[16 * v13];
          BOOL v43 = *((void *)v42 - 8);
          uint64_t v44 = *((void *)v42 - 7);
          uint64_t v48 = __OFSUB__(v44, v43);
          uint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_120;
          }
          uint64_t v47 = *((void *)v42 - 6);
          uint64_t v46 = *((void *)v42 - 5);
          uint64_t v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          char v41 = v48;
          if (v48) {
            goto LABEL_121;
          }
          char v49 = v13 - 2;
          unint64_t v50 = &v35[16 * v13 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          uint64_t v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_123;
          }
          uint64_t v48 = __OFADD__(v40, v53);
          unint64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_126;
          }
          if (v54 >= v45)
          {
            uint64_t v72 = &v35[16 * v37];
            char v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            uint64_t v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_130;
            }
            unint64_t v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            char v66 = *((void *)v12 + 4);
            unint64_t v67 = *((void *)v12 + 5);
            uint64_t v48 = __OFSUB__(v67, v66);
            unint64_t v59 = v67 - v66;
            int64_t v60 = v48;
            goto LABEL_77;
          }
          uint64_t v39 = *((void *)v12 + 4);
          char v38 = *((void *)v12 + 5);
          uint64_t v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          char v41 = v48;
        }
        if (v41) {
          goto LABEL_122;
        }
        char v49 = v13 - 2;
        int64_t v55 = &v35[16 * v13 - 32];
        unint64_t v57 = *(void *)v55;
        int64_t v56 = *((void *)v55 + 1);
        unint64_t v58 = __OFSUB__(v56, v57);
        unint64_t v59 = v56 - v57;
        int64_t v60 = v58;
        if (v58) {
          goto LABEL_125;
        }
        unint64_t v61 = &v35[16 * v37];
        uint64_t v63 = *(void *)v61;
        unint64_t v62 = *((void *)v61 + 1);
        uint64_t v48 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v48) {
          goto LABEL_128;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_129;
        }
        if (v59 + v64 >= v40)
        {
          unint64_t v65 = v40 < v64;
LABEL_83:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v60) {
          goto LABEL_124;
        }
        uint64_t v68 = &v35[16 * v37];
        unint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        uint64_t v48 = __OFSUB__(v69, v70);
        unint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_127;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        unint64_t v77 = &v35[16 * v76];
        unint64_t v78 = *(void *)v77;
        uint64_t v79 = &v35[16 * v37];
        Swift::Int v80 = *((void *)v79 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(void *)v77), (double *)(v11 + 16 * *(void *)v79), v11 + 16 * v80, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v80 < v78) {
          goto LABEL_117;
        }
        if (v37 > *((void *)v12 + 2)) {
          goto LABEL_118;
        }
        *(void *)unint64_t v77 = v78;
        *(void *)&v35[16 * v76 + 8] = v80;
        Swift::Int v81 = *((void *)v12 + 2);
        if (v37 >= v81) {
          goto LABEL_119;
        }
        unint64_t v13 = v81 - 1;
        memmove(&v35[16 * v37], v79 + 16, 16 * (v81 - 1 - v37));
        *((void *)v12 + 2) = v81 - 1;
        Swift::Int v11 = v105;
        if (v81 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v103;
    Swift::Int v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  char v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  Swift::Int v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  void (**v145)(char *, uint64_t);
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  void (*v153)(char *, char *, uint64_t);
  unint64_t v154;
  unint64_t v155;
  void (**v156)(char *, char *, uint64_t);
  uint64_t v157;
  uint64_t v158;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v5 = *(void *)(v4 - 8);
  Swift::Int v6 = MEMORY[0x270FA5388](v4);
  v139 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v152 = (char *)&v133 - v9;
  int64_t v10 = MEMORY[0x270FA5388](v8);
  v147 = (char *)&v133 - v11;
  MEMORY[0x270FA5388](v10);
  v148 = (char *)&v133 - v12;
  unint64_t v13 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v13);
  if (result >= v13)
  {
    if (v13 < 0) {
      goto LABEL_142;
    }
    if (v13) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v13, 1, a1);
    }
    return result;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_150;
  }
  v135 = result;
  v142 = v5;
  if (v13 < 2)
  {
    unint64_t v20 = MEMORY[0x263F8EE78];
    v141 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    if (v13 != 1)
    {
      unint64_t v23 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v22 = (char *)MEMORY[0x263F8EE78];
LABEL_106:
      v134 = v20;
      if (v23 >= 2)
      {
        v126 = *a1;
        do
        {
          v127 = v23 - 2;
          if (v23 < 2) {
            goto LABEL_137;
          }
          if (!v126) {
            goto LABEL_149;
          }
          v128 = v22;
          v129 = *(void *)&v22[16 * v127 + 32];
          v130 = *(void *)&v22[16 * v23 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v126 + *(void *)(v142 + 72) * v129, v126 + *(void *)(v142 + 72) * *(void *)&v22[16 * v23 + 16], v126 + *(void *)(v142 + 72) * v130, v141);
          if (v2) {
            break;
          }
          if (v130 < v129) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v128 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v22);
          }
          if (v127 >= *((void *)v128 + 2)) {
            goto LABEL_139;
          }
          v131 = &v128[16 * v127 + 32];
          *(void *)v131 = v129;
          *((void *)v131 + 1) = v130;
          v132 = *((void *)v128 + 2);
          if (v23 > v132) {
            goto LABEL_140;
          }
          unint64_t v22 = v128;
          memmove(&v128[16 * v23 + 16], &v128[16 * v23 + 32], 16 * (v132 - v23));
          *((void *)v128 + 2) = v132 - 1;
          unint64_t v23 = v132 - 1;
        }
        while (v132 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      *(void *)(v134 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v16 = 1;
    v134 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v16 = v13;
    uint64_t v17 = v15 >> 1;
    char v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v18 + 16) = v17;
    uint64_t v5 = v142;
    uint64_t v19 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v134 = v18;
    v141 = v18 + v19;
  }
  uint64_t v21 = 0;
  v145 = (void (**)(char *, uint64_t))(v5 + 8);
  v146 = v5 + 16;
  v156 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  unint64_t v22 = (char *)MEMORY[0x263F8EE78];
  v149 = a1;
  v151 = v4;
  while (1)
  {
    uint64_t v24 = (char *)v21;
    uint64_t v25 = v21 + 1;
    v137 = v22;
    uint64_t v26 = v16;
    if (v21 + 1 >= v16)
    {
      uint64_t v39 = v21 + 1;
      uint64_t v48 = v142;
    }
    else
    {
      v143 = (char *)*a1;
      uint64_t v27 = v143;
      unint64_t v28 = v142;
      char v29 = *(void *)(v142 + 72);
      v140 = v21;
      uint64_t v30 = v29;
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v142 + 16);
      v157 = v26;
      v31(v148, &v143[v29 * v25], v4);
      unint64_t v32 = &v27[v30 * v140];
      unint64_t v33 = v147;
      v153 = v31;
      v31(v147, v32, v4);
      uint64_t v34 = v148;
      v155 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
      v154 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
      BOOL v35 = v4;
      uint64_t v36 = *(void (**)(char *, uint64_t))(v28 + 8);
      v36(v33, v35);
      unint64_t v37 = v35;
      uint64_t v26 = v157;
      v36(v34, v37);
      char v38 = v30;
      uint64_t v24 = (char *)v140;
      uint64_t v39 = v140 + 2;
      v158 = v38;
      if (v140 + 2 >= v26)
      {
        uint64_t v48 = v142;
      }
      else
      {
        v138 = v2;
        v150 = v38 * v25;
        uint64_t v40 = v143;
        char v41 = (char *)(v140 + 2);
        v144 = v38 * (v140 + 2);
        while (1)
        {
          uint64_t v42 = v155 < v154;
          BOOL v43 = v148;
          uint64_t v44 = v151;
          uint64_t v45 = v153;
          v153(v148, &v40[v144], v151);
          uint64_t v46 = v147;
          v45(v147, &v40[v150], v44);
          uint64_t v47 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          LODWORD(v47) = v47 >= ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          v36(v46, v44);
          v36(v43, v44);
          if (v42 == v47) {
            break;
          }
          char v38 = v158;
          v40 += v158;
          ++v41;
          uint64_t v26 = v157;
          if ((char *)v157 == v41)
          {
            uint64_t v39 = v157;
            uint64_t v2 = v138;
            uint64_t v48 = v142;
            a1 = v149;
            uint64_t v24 = (char *)v140;
            goto LABEL_25;
          }
        }
        uint64_t v2 = v138;
        uint64_t v48 = v142;
        a1 = v149;
        uint64_t v39 = (uint64_t)v41;
        uint64_t v24 = (char *)v140;
        uint64_t v26 = v157;
        char v38 = v158;
      }
LABEL_25:
      uint64_t v4 = v151;
      if (v155 < v154)
      {
        if (v39 < (uint64_t)v24) {
          goto LABEL_143;
        }
        if ((uint64_t)v24 < v39)
        {
          char v49 = 0;
          unint64_t v50 = (uint64_t)v24;
          uint64_t v51 = v38 * (v39 - 1);
          uint64_t v52 = v39 * v38;
          uint64_t v53 = v50;
          unint64_t v54 = v39;
          int64_t v55 = v50 * v38;
          v150 = v54;
          do
          {
            if (v53 != v54 + v49 - 1)
            {
              if (!v143) {
                goto LABEL_148;
              }
              v138 = v2;
              unint64_t v57 = &v143[v55];
              unint64_t v58 = &v143[v51];
              unint64_t v59 = v143;
              int64_t v60 = *v156;
              (*v156)(v139, &v143[v55], v151);
              if (v55 < v51 || v57 >= &v59[v52])
              {
                int64_t v56 = v151;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                int64_t v56 = v151;
                if (v55 != v51) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              v60(v58, v139, v56);
              uint64_t v48 = v142;
              uint64_t v2 = v138;
              char v38 = v158;
            }
            ++v53;
            --v49;
            unint64_t v54 = v150;
            v51 -= v38;
            v52 -= v38;
            v55 += v38;
          }
          while (v53 < v150 + v49);
          a1 = v149;
          uint64_t v4 = v151;
          uint64_t v39 = v150;
          uint64_t v24 = (char *)v140;
          uint64_t v26 = v157;
        }
      }
    }
    if (v39 >= v26) {
      goto LABEL_57;
    }
    if (__OFSUB__(v39, v24)) {
      goto LABEL_141;
    }
    if (v39 - (uint64_t)v24 >= v135) {
      goto LABEL_57;
    }
    if (__OFADD__(v24, v135)) {
      goto LABEL_144;
    }
    unint64_t v61 = (uint64_t)&v24[v135] >= v26 ? v26 : (uint64_t)&v24[v135];
    if (v61 < (uint64_t)v24) {
      break;
    }
    if (v39 != v61)
    {
      v140 = (uint64_t)v24;
      v138 = v2;
      unint64_t v62 = *(void *)(v48 + 72);
      v143 = *(char **)(v48 + 16);
      v144 = v62;
      v158 = v62 * (v39 - 1);
      v157 = v39 * v62;
      v136 = v61;
      do
      {
        uint64_t v64 = 0;
        unint64_t v65 = (void (*)(char *, char *, uint64_t))v140;
        v150 = v39;
        while (1)
        {
          v153 = v65;
          unint64_t v67 = v148;
          char v66 = v149;
          uint64_t v68 = *v149;
          uint64_t v69 = (void (*)(char *, uint64_t, uint64_t))v143;
          ((void (*)(char *, uint64_t, uint64_t))v143)(v148, v157 + v64 + *v149, v4);
          unint64_t v70 = v158 + v64 + v68;
          unint64_t v71 = v147;
          v69(v147, v70, v4);
          v155 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          v154 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          uint64_t v72 = *v145;
          (*v145)(v71, v4);
          v72(v67, v4);
          if (v155 >= v154) {
            break;
          }
          uint64_t v73 = *v66;
          if (!*v66) {
            goto LABEL_146;
          }
          char v74 = (char *)(v73 + v158 + v64);
          uint64_t v75 = *v156;
          uint64_t v4 = v151;
          (*v156)(v152, (char *)(v73 + v157 + v64), v151);
          uint64_t v63 = (char *)v150;
          swift_arrayInitWithTakeFrontToBack();
          v75(v74, v152, v4);
          v64 -= v144;
          unint64_t v65 = (void (*)(char *, char *, uint64_t))((char *)v153 + 1);
          if (v63 == (char *)v153 + 1) {
            goto LABEL_50;
          }
        }
        uint64_t v63 = (char *)v150;
        uint64_t v4 = v151;
LABEL_50:
        uint64_t v39 = (uint64_t)(v63 + 1);
        v158 += v144;
        v157 += v144;
      }
      while (v39 != v136);
      uint64_t v39 = v136;
      uint64_t v2 = v138;
      a1 = v149;
      uint64_t v24 = (char *)v140;
    }
LABEL_57:
    if (v39 < (uint64_t)v24) {
      goto LABEL_136;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      unint64_t v22 = v137;
    }
    else {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v137 + 2) + 1, 1, v137);
    }
    unint64_t v77 = *((void *)v22 + 2);
    uint64_t v76 = *((void *)v22 + 3);
    unint64_t v23 = v77 + 1;
    if (v77 >= v76 >> 1) {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v22);
    }
    *((void *)v22 + 2) = v23;
    unint64_t v78 = v22 + 32;
    uint64_t v79 = &v22[16 * v77 + 32];
    *(void *)uint64_t v79 = v24;
    *((void *)v79 + 1) = v39;
    v150 = v39;
    if (v77)
    {
      while (1)
      {
        Swift::Int v80 = v23 - 1;
        if (v23 >= 4)
        {
          uint64_t v85 = &v78[16 * v23];
          uint64_t v86 = *((void *)v85 - 8);
          unint64_t v87 = *((void *)v85 - 7);
          unint64_t v91 = __OFSUB__(v87, v86);
          uint64_t v88 = v87 - v86;
          if (v91) {
            goto LABEL_125;
          }
          uint64_t v90 = *((void *)v85 - 6);
          uint64_t v89 = *((void *)v85 - 5);
          unint64_t v91 = __OFSUB__(v89, v90);
          uint64_t v83 = v89 - v90;
          unint64_t v84 = v91;
          if (v91) {
            goto LABEL_126;
          }
          double v92 = v23 - 2;
          double v93 = &v78[16 * v23 - 32];
          uint64_t v95 = *(void *)v93;
          unint64_t v94 = *((void *)v93 + 1);
          unint64_t v91 = __OFSUB__(v94, v95);
          unint64_t v96 = v94 - v95;
          if (v91) {
            goto LABEL_128;
          }
          unint64_t v91 = __OFADD__(v83, v96);
          v97 = v83 + v96;
          if (v91) {
            goto LABEL_131;
          }
          if (v97 >= v88)
          {
            v115 = &v78[16 * v80];
            v117 = *(void *)v115;
            v116 = *((void *)v115 + 1);
            unint64_t v91 = __OFSUB__(v116, v117);
            v118 = v116 - v117;
            if (v91) {
              goto LABEL_135;
            }
            v108 = v83 < v118;
            goto LABEL_94;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v109 = *((void *)v22 + 4);
            v110 = *((void *)v22 + 5);
            unint64_t v91 = __OFSUB__(v110, v109);
            char v102 = v110 - v109;
            uint64_t v103 = v91;
            goto LABEL_88;
          }
          uint64_t v82 = *((void *)v22 + 4);
          Swift::Int v81 = *((void *)v22 + 5);
          unint64_t v91 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          unint64_t v84 = v91;
        }
        if (v84) {
          goto LABEL_127;
        }
        double v92 = v23 - 2;
        uint64_t v98 = &v78[16 * v23 - 32];
        uint64_t v100 = *(void *)v98;
        char v99 = *((void *)v98 + 1);
        uint64_t v101 = __OFSUB__(v99, v100);
        char v102 = v99 - v100;
        uint64_t v103 = v101;
        if (v101) {
          goto LABEL_130;
        }
        uint64_t v104 = &v78[16 * v80];
        v106 = *(void *)v104;
        v105 = *((void *)v104 + 1);
        unint64_t v91 = __OFSUB__(v105, v106);
        v107 = v105 - v106;
        if (v91) {
          goto LABEL_133;
        }
        if (__OFADD__(v102, v107)) {
          goto LABEL_134;
        }
        if (v102 + v107 >= v83)
        {
          v108 = v83 < v107;
LABEL_94:
          if (v108) {
            Swift::Int v80 = v92;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v103) {
          goto LABEL_129;
        }
        v111 = &v78[16 * v80];
        v113 = *(void *)v111;
        v112 = *((void *)v111 + 1);
        unint64_t v91 = __OFSUB__(v112, v113);
        v114 = v112 - v113;
        if (v91) {
          goto LABEL_132;
        }
        if (v114 < v102) {
          goto LABEL_15;
        }
LABEL_96:
        v119 = v80 - 1;
        if (v80 - 1 >= v23)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        v120 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        v121 = &v78[16 * v119];
        v122 = *(void *)v121;
        v123 = &v78[16 * v80];
        v124 = *((void *)v123 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v120 + *(void *)(v142 + 72) * *(void *)v121, v120 + *(void *)(v142 + 72) * *(void *)v123, v120 + *(void *)(v142 + 72) * v124, v141);
        if (v2) {
          goto LABEL_117;
        }
        if (v124 < v122) {
          goto LABEL_122;
        }
        if (v80 > *((void *)v22 + 2)) {
          goto LABEL_123;
        }
        *(void *)v121 = v122;
        *(void *)&v78[16 * v119 + 8] = v124;
        v125 = *((void *)v22 + 2);
        if (v80 >= v125) {
          goto LABEL_124;
        }
        unint64_t v23 = v125 - 1;
        memmove(&v78[16 * v80], v123 + 16, 16 * (v125 - 1 - v80));
        *((void *)v22 + 2) = v125 - 1;
        a1 = v149;
        uint64_t v4 = v151;
        if (v125 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v23 = 1;
LABEL_15:
    uint64_t v16 = a1[1];
    uint64_t v21 = v150;
    if (v150 >= v16)
    {
      unint64_t v20 = v134;
      goto LABEL_106;
    }
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *(*v11)(double *__return_ptr, uint64_t);
  uint64_t v12;
  void *v13;
  double v14;
  uint64_t v15;
  uint64_t v17;
  double v18[6];
  double v19[6];

  uint64_t v17 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = *(void *)(v5 + 8 * v4);
    uint64_t v8 = v17;
    uint64_t v9 = (uint64_t *)v6;
    while (1)
    {
      uint64_t v10 = *v9;
      Swift::Int v11 = *(void *(**)(double *__return_ptr, uint64_t))(*(void *)v7 + 120);
      swift_retain();
      uint64_t v12 = swift_retain();
      unint64_t v13 = v11(v19, v12);
      Swift::Int v14 = v19[0];
      (*(void (**)(double *__return_ptr, void *))(*(void *)v10 + 120))(v18, v13);
      swift_release();
      Swift::Int result = swift_release();
      if (v14 >= v18[0])
      {
LABEL_4:
        ++v4;
        v6 += 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v15 = *v9;
      uint64_t v7 = v9[1];
      *uint64_t v9 = v7;
      v9[1] = v15;
      --v9;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *__src, unint64_t a3, char *a4)
{
  void *(*v15)(void *__return_ptr, uint64_t);
  uint64_t v16;
  void *v17;
  double v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *(*v26)(void *__return_ptr, uint64_t);
  unint64_t v27;
  uint64_t v28;
  void *v29;
  double v30;
  uint64_t result;
  char *v34;
  double v35[6];
  void v36[6];
  char *v37;
  char *v38;
  char *v39;

  uint64_t v5 = __src;
  uint64_t v6 = __src - a1;
  uint64_t v7 = __src - a1 + 7;
  if (__src - a1 >= 0) {
    uint64_t v7 = __src - a1;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v10 = a3 - (void)__src;
  }
  uint64_t v11 = v10 >> 3;
  char v38 = a4;
  uint64_t v39 = a1;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (a4 != __src || &__src[8 * v11] <= a4) {
        memmove(a4, __src, 8 * v11);
      }
      unint64_t v20 = &a4[8 * v11];
      unint64_t v37 = v20;
      uint64_t v39 = v5;
      if (a1 < v5 && v9 >= 8)
      {
        uint64_t v21 = (char *)(a3 - 8);
        unint64_t v22 = v5;
        do
        {
          uint64_t v34 = v5;
          unint64_t v23 = v21 + 8;
          uint64_t v24 = v20 - 8;
          uint64_t v25 = *((void *)v22 - 1);
          v22 -= 8;
          uint64_t v26 = *(void *(**)(void *__return_ptr, uint64_t))(**((void **)v20 - 1) + 120);
          uint64_t v27 = (unint64_t)v20;
          swift_retain();
          unint64_t v28 = swift_retain();
          char v29 = v26(v36, v28);
          uint64_t v30 = *(double *)v36;
          (*(void (**)(double *__return_ptr, void *))(*(void *)v25 + 120))(v35, v29);
          swift_release();
          swift_release();
          if (v30 >= v35[0])
          {
            unint64_t v37 = v24;
            if ((unint64_t)v23 < v27 || (unint64_t)v21 >= v27 || v23 != (char *)v27) {
              *(void *)uint64_t v21 = *(void *)v24;
            }
            unint64_t v22 = v34;
            unint64_t v20 = v24;
          }
          else
          {
            if (v23 != v34 || v21 >= v34) {
              *(void *)uint64_t v21 = *(void *)v22;
            }
            uint64_t v39 = v22;
            unint64_t v20 = (char *)v27;
          }
          if (v22 <= a1) {
            break;
          }
          v21 -= 8;
          uint64_t v5 = v22;
        }
        while (v20 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -7)
  {
    if (a4 != a1 || &a1[8 * v8] <= a4) {
      memmove(a4, a1, 8 * v8);
    }
    unint64_t v37 = &a4[8 * v8];
    if ((unint64_t)v5 < a3 && v6 >= 8)
    {
      uint64_t v12 = a4;
      unint64_t v13 = a1;
      do
      {
        uint64_t v14 = *(void *)v12;
        uint64_t v15 = *(void *(**)(void *__return_ptr, uint64_t))(**(void **)v5 + 120);
        swift_retain();
        uint64_t v16 = swift_retain();
        uint64_t v17 = v15(v36, v16);
        char v18 = *(double *)v36;
        (*(void (**)(double *__return_ptr, void *))(*(void *)v14 + 120))(v35, v17);
        swift_release();
        swift_release();
        if (v18 >= v35[0])
        {
          if (v13 != v12) {
            *(void *)unint64_t v13 = *(void *)v12;
          }
          v12 += 8;
          char v38 = v12;
          uint64_t v19 = v5;
        }
        else
        {
          uint64_t v19 = v5 + 8;
          if (v13 < v5 || v13 >= v19 || v13 != v5) {
            *(void *)unint64_t v13 = *(void *)v5;
          }
        }
        v13 += 8;
        if (v12 >= &a4[8 * v8]) {
          break;
        }
        uint64_t v5 = v19;
      }
      while ((unint64_t)v19 < a3);
      uint64_t v39 = v13;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v39, &v38, &v37);
    return 1;
  }
  Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *(*v15)(void *__return_ptr, uint64_t);
  uint64_t v16;
  void *v17;
  double v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *(*v26)(void *__return_ptr, uint64_t);
  unint64_t v27;
  uint64_t v28;
  void *v29;
  double v30;
  uint64_t result;
  char *v34;
  double v35[6];
  void v36[6];
  char *v37;
  char *v38;
  char *v39;

  uint64_t v5 = __src;
  uint64_t v6 = __src - a1;
  uint64_t v7 = __src - a1 + 7;
  if (__src - a1 >= 0) {
    uint64_t v7 = __src - a1;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v10 = a3 - (void)__src;
  }
  uint64_t v11 = v10 >> 3;
  char v38 = a4;
  uint64_t v39 = a1;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (a4 != __src || &__src[8 * v11] <= a4) {
        memmove(a4, __src, 8 * v11);
      }
      unint64_t v20 = &a4[8 * v11];
      unint64_t v37 = v20;
      uint64_t v39 = v5;
      if (a1 < v5 && v9 >= 8)
      {
        uint64_t v21 = (char *)(a3 - 8);
        unint64_t v22 = v5;
        do
        {
          uint64_t v34 = v5;
          unint64_t v23 = v21 + 8;
          uint64_t v24 = v20 - 8;
          uint64_t v25 = *((void *)v22 - 1);
          v22 -= 8;
          uint64_t v26 = *(void *(**)(void *__return_ptr, uint64_t))(**((void **)v20 - 1) + 120);
          uint64_t v27 = (unint64_t)v20;
          swift_retain();
          unint64_t v28 = swift_retain();
          char v29 = v26(v36, v28);
          uint64_t v30 = *(double *)v36;
          (*(void (**)(double *__return_ptr, void *))(*(void *)v25 + 120))(v35, v29);
          swift_release();
          swift_release();
          if (v30 >= v35[0])
          {
            unint64_t v37 = v24;
            if ((unint64_t)v23 < v27 || (unint64_t)v21 >= v27 || v23 != (char *)v27) {
              *(void *)uint64_t v21 = *(void *)v24;
            }
            unint64_t v22 = v34;
            unint64_t v20 = v24;
          }
          else
          {
            if (v23 != v34 || v21 >= v34) {
              *(void *)uint64_t v21 = *(void *)v22;
            }
            uint64_t v39 = v22;
            unint64_t v20 = (char *)v27;
          }
          if (v22 <= a1) {
            break;
          }
          v21 -= 8;
          uint64_t v5 = v22;
        }
        while (v20 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -7)
  {
    if (a4 != a1 || &a1[8 * v8] <= a4) {
      memmove(a4, a1, 8 * v8);
    }
    unint64_t v37 = &a4[8 * v8];
    if ((unint64_t)v5 < a3 && v6 >= 8)
    {
      uint64_t v12 = a4;
      unint64_t v13 = a1;
      do
      {
        uint64_t v14 = *(void *)v12;
        uint64_t v15 = *(void *(**)(void *__return_ptr, uint64_t))(**(void **)v5 + 120);
        swift_retain();
        uint64_t v16 = swift_retain();
        uint64_t v17 = v15(v36, v16);
        char v18 = *(double *)v36;
        (*(void (**)(double *__return_ptr, void *))(*(void *)v14 + 120))(v35, v17);
        swift_release();
        swift_release();
        if (v18 >= v35[0])
        {
          if (v13 != v12) {
            *(void *)unint64_t v13 = *(void *)v12;
          }
          v12 += 8;
          char v38 = v12;
          uint64_t v19 = v5;
        }
        else
        {
          uint64_t v19 = v5 + 8;
          if (v13 < v5 || v13 >= v19 || v13 != v5) {
            *(void *)unint64_t v13 = *(void *)v5;
          }
        }
        v13 += 8;
        if (v12 >= &a4[8 * v8]) {
          break;
        }
        uint64_t v5 = v19;
      }
      while ((unint64_t)v19 < a3);
      uint64_t v39 = v13;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v39, (const void **)&v38, &v37);
    return 1;
  }
  Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              Swift::Int v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::Int v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [SiriExecutionStep]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  void *v31;
  long long v32;

  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String?, [ExtendedBMHomeKitClientAccessory]>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    BOOL v30 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v16 = v15 | (v13 << 6);
      }
      else
      {
        unint64_t v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v17 >= v30) {
          goto LABEL_36;
        }
        int64_t v18 = v31[v17];
        ++v13;
        if (!v18)
        {
          int64_t v13 = v17 + 1;
          if (v17 + 1 >= v30) {
            goto LABEL_36;
          }
          int64_t v18 = v31[v13];
          if (!v18)
          {
            unint64_t v19 = v17 + 2;
            if (v19 >= v30)
            {
LABEL_36:
              swift_release();
              Swift::Int v3 = v2;
              if (a2)
              {
                unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v31 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v13 >= v30) {
                  goto LABEL_36;
                }
                int64_t v18 = v31[v13];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v19;
          }
        }
LABEL_21:
        unint64_t v10 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      int64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      uint64_t v32 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v16);
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 16 * v16 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      if (v21)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v11 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v14) = v32;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v20;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::Int v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [TranscriptStep]>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    BOOL v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v49 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  int64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    uint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          Swift::Int v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    BOOL v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  Swift::Int v3 = v42;
  uint64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::Int v3 = v9;
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    int64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Date();
    int64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          int64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        Swift::Int v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        int64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 72);
        uint64_t v16 = v15 * v3;
        double result = v14 + v15 * v3;
        uint64_t v17 = v15 * v6;
        uint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    BOOL v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  unint64_t v24 = __OFSUB__(v23, 1);
  int64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::Int v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::Int v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    char v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  unint64_t v35 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  char v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    BOOL v28 = v36;
    char v27 = v30;
LABEL_25:
    *char v27 = v28;
    return result;
  }
  unint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    unint64_t v7 = v36;
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  uint64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  unint64_t v34 = v1 + 16;
  unint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      uint64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      int64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v25 - 1) & v25;
    uint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    int64_t v22 = v36;
    unint64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *unint64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    char v27 = v30;
    BOOL v28 = v36;
    goto LABEL_25;
  }
  int64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized NowPlayingSignalFactory.adaptInvalidBiomeEvent(action:bundleId:playbackState:deltaT:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v9 = *a6;
  uint64_t v10 = a6[1];
  uint64_t v11 = a6[2];
  uint64_t v12 = a6[3];
  uint64_t v13 = a6[4];
  char v14 = *((unsigned char *)a6 + 40);
  if (!a3 && a4 == 0xE000000000000000)
  {
    if (a5) {
      return 0;
    }
LABEL_7:
    type metadata accessor for Signal();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v9;
    *(void *)(v15 + 24) = v10;
    *(void *)(v15 + 32) = v11;
    *(void *)(v15 + 40) = v12;
    *(void *)(v15 + 48) = v13;
    *(unsigned char *)(v15 + 56) = v14;
    *(void *)(v15 + 64) = 0x636973754DLL;
    *(void *)(v15 + 72) = 0xE500000000000000;
    *(void *)(v15 + 80) = a1;
    *(void *)(v15 + 88) = a2;
    *(unsigned char *)(v15 + 96) = 1;
    *(void *)(v15 + 104) = MEMORY[0x263F8EE80];
    swift_bridgeObjectRetain();
    return v15;
  }
  uint64_t v15 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && !a5) {
    goto LABEL_7;
  }
  return v15;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      uint64_t v11 = a2;
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = MEMORY[0x22A627400](i, a1);
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return v14;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          uint64_t v6 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_13;
          }
        }
        uint64_t v8 = (*(void *(**)(double *__return_ptr))(*(void *)v6 + 120))(v13);
        double v9 = v13[0];
        (*(void (**)(double *__return_ptr, void *))(*(void *)a2 + 120))(v12, v8);
        if (v9 == v12[0])
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          a2 = v11;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4) {
          return v14;
        }
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

{
  unint64_t v2;
  uint64_t i;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;

  long long v2 = a1;
  int64_t v24 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_33;
  }
  for (unint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; unint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v18 = v2;
    uint64_t v4 = 0;
    uint64_t v21 = v2 & 0xFFFFFFFFFFFFFF8;
    int64_t v22 = v2 & 0xC000000000000001;
    uint64_t v19 = i;
    uint64_t v20 = (void *)(v2 + 32);
    while (1)
    {
      if (v22)
      {
        uint64_t v5 = MEMORY[0x22A627400](v4, v18);
        uint64_t v6 = __OFADD__(v4++, 1);
        if (v6)
        {
LABEL_29:
          __break(1u);
          return v24;
        }
      }
      else
      {
        if (v4 >= *(void *)(v21 + 16))
        {
          __break(1u);
          goto LABEL_32;
        }
        uint64_t v5 = v20[v4];
        swift_retain();
        uint64_t v6 = __OFADD__(v4++, 1);
        if (v6) {
          goto LABEL_29;
        }
      }
      unint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v5 + 200))();
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)a2 + 176))();
      long long v2 = (unint64_t)v9;
      uint64_t v10 = v7[2];
      if (!v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      uint64_t v11 = v8;
      uint64_t v12 = v7[4] == v8 && v7[5] == (void)v9;
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      long long v2 = (unint64_t)&v24;
      specialized ContiguousArray._endMutation()();
      unint64_t i = v19;
LABEL_5:
      if (v4 == i) {
        return v24;
      }
    }
    if (v10 == 1)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      unint64_t i = v19;
LABEL_26:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_5;
    }
    uint64_t v13 = v7 + 7;
    uint64_t v14 = 1;
    while (1)
    {
      uint64_t v15 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        break;
      }
      uint64_t v16 = *(v13 - 1) == v11 && *v13 == v2;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_4;
      }
      v13 += 2;
      ++v14;
      if (v15 == v10) {
        goto LABEL_24;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    ;
  }
  return MEMORY[0x263F8EE78];
}

{
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v15;

  uint64_t v15 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_21:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = MEMORY[0x22A627400](i, a1);
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_18:
            __break(1u);
            return v15;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_21;
          }
          uint64_t v6 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_18;
          }
        }
        uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v6 + 176))();
        uint64_t v10 = v9;
        if (v8 == (*(uint64_t (**)(void))(*(void *)a2 + 176))() && v10 == v11)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v13)
          {
            swift_release();
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        if (v7 == v4) {
          return v15;
        }
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

{
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v15;

  uint64_t v15 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_22:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = MEMORY[0x22A627400](i, a1);
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_19:
            __break(1u);
            return v15;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_22;
          }
          uint64_t v6 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_19;
          }
        }
        uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v6 + 144))();
        uint64_t v10 = v9;
        if (v8 == (*(uint64_t (**)(void))(*(void *)a2 + 144))() && v10 == v11) {
          break;
        }
        uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v13) {
          goto LABEL_16;
        }
        swift_release();
LABEL_5:
        if (v7 == v4) {
          return v15;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_16:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_5;
    }
  }
  return MEMORY[0x263F8EE78];
}

{
  uint64_t i;
  unint64_t j;
  id v6;
  void *v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v17;

  uint64_t v17 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_22;
  }
  for (unint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; unint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    for (j = 0; ; ++j)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = (id)MEMORY[0x22A627400](j, a1);
        goto LABEL_9;
      }
      if (j >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      uint64_t v6 = *(id *)(a1 + 8 * j + 32);
LABEL_9:
      unint64_t v7 = v6;
      uint64_t v8 = j + 1;
      if (__OFADD__(j, 1)) {
        goto LABEL_21;
      }
      double v9 = objc_msgSend(v6, sel_bundleID);
      if (!v9) {
        goto LABEL_4;
      }
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      if (v11 == *(void *)(a2 + 64) && v13 == *(void *)(a2 + 72))
      {

        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v15)
      {
      }
      else
      {
LABEL_4:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
LABEL_5:
      if (v8 == i) {
        return v17;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    ;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t sub_224EE90A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))();
}

uint64_t ObjC metadata update function for NowPlayingSignalFactory()
{
  return type metadata accessor for NowPlayingSignalFactory();
}

uint64_t type metadata accessor for NowPlayingSignalFactory()
{
  uint64_t result = type metadata singleton initialization cache for NowPlayingSignalFactory;
  if (!type metadata singleton initialization cache for NowPlayingSignalFactory) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for NowPlayingSignalFactory()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for NowPlayingSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NowPlayingSignalFactory);
}

uint64_t dispatch thunk of NowPlayingSignalFactory.postEndDate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.postEndDate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.postEndDate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.createMediaDataFromNowPlayingEvent(bundleId:deltaT:bmEvent:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.transformSignalsToFeatures(signals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.normalizeSignalsForFeature(signals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.transformSignalsToBiomePSE(signals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

void type metadata accessor for Date?()
{
  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
    }
  }
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntitySimilarity);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t AbstractActivityCollector.__allocating_init(parameters:)()
{
  swift_bridgeObjectRelease();
  return swift_allocObject();
}

uint64_t AbstractActivityCollector.init(parameters:)()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AbstractActivityCollector.deinit()
{
  return v0;
}

uint64_t AbstractActivityCollector.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t protocol witness for ActivityCollector.collect(callback:) in conformance AbstractActivityCollector()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t dispatch thunk of ActivityCollector.collect(callback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for AbstractActivityCollector()
{
  return self;
}

uint64_t method lookup function for AbstractActivityCollector(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AbstractActivityCollector);
}

uint64_t dispatch thunk of AbstractActivityCollector.__allocating_init(parameters:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of AbstractActivityCollector.collect(callback:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

BOOL static TaskSuccess.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TaskSuccess.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskSuccess.CodingKeys()
{
  uint64_t result = 0x6E776F6E6B6E75;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x696C707041746F6ELL;
      break;
    case 2:
      uint64_t result = 0x75636C6143746F6ELL;
      break;
    case 3:
      uint64_t result = 0x6673736563637573;
      break;
    case 4:
      uint64_t result = 0x7365636375736E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TaskSuccess.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TaskSuccess.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance TaskSuccess.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance TaskSuccess.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskSuccess.NotApplicableCodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance TaskSuccess.NotApplicableCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.NotApplicableCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.NotApplicableCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.NotCalculatedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.NotCalculatedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.SuccessfulCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.SuccessfulCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TaskSuccess.UnknownCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.UnknownCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.UnknownCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.UnsuccessfulCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.UnsuccessfulCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TaskSuccess.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.UnsuccessfulCodingKeys>);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v32 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.SuccessfulCodingKeys>);
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v29 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.NotCalculatedCodingKeys>);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v26 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.NotApplicableCodingKeys>);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.UnknownCodingKeys>);
  uint64_t v23 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.CodingKeys>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v35)
  {
    case 1:
      char v37 = 1;
      lazy protocol witness table accessor for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    case 2:
      char v38 = 2;
      lazy protocol witness table accessor for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys();
      uint64_t v19 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v27;
      uint64_t v20 = v28;
      goto LABEL_7;
    case 3:
      char v39 = 3;
      lazy protocol witness table accessor for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys();
      uint64_t v19 = v29;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v30;
      uint64_t v20 = v31;
      goto LABEL_7;
    case 4:
      char v40 = 4;
      lazy protocol witness table accessor for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys();
      uint64_t v19 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v33;
      uint64_t v20 = v34;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
      break;
    default:
      char v36 = 0;
      lazy protocol witness table accessor for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v12);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys);
  }
  return result;
}

uint64_t TaskSuccess.init(from:)(void *a1)
{
  return specialized TaskSuccess.init(from:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TaskSuccess@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized TaskSuccess.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TaskSuccess(void *a1)
{
  return TaskSuccess.encode(to:)(a1, *v1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.AbandonedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.AbandonedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.CancelledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.CancelledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskCompletionType.CodingKeys()
{
  uint64_t result = 0x6E776F6E6B6E75;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656E6F646E616261;
      break;
    case 2:
      uint64_t result = 0x656C6C65636E6163;
      break;
    case 3:
      uint64_t result = 0x64656C696166;
      break;
    case 4:
      uint64_t result = 0x6574656C706D6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TaskCompletionType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TaskCompletionType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.CompletedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.CompletedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.FailedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.FailedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.UnknownCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.UnknownCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TaskCompletionType.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.CompletedCodingKeys>);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v32 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.FailedCodingKeys>);
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v29 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.CancelledCodingKeys>);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v26 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.AbandonedCodingKeys>);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.UnknownCodingKeys>);
  uint64_t v23 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.CodingKeys>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v35)
  {
    case 1:
      char v37 = 1;
      lazy protocol witness table accessor for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    case 2:
      char v38 = 2;
      lazy protocol witness table accessor for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys();
      uint64_t v19 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v27;
      uint64_t v20 = v28;
      goto LABEL_7;
    case 3:
      char v39 = 3;
      lazy protocol witness table accessor for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys();
      uint64_t v19 = v29;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v30;
      uint64_t v20 = v31;
      goto LABEL_7;
    case 4:
      char v40 = 4;
      lazy protocol witness table accessor for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys();
      uint64_t v19 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v33;
      uint64_t v20 = v34;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
      break;
    default:
      char v36 = 0;
      lazy protocol witness table accessor for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v12);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

Swift::Int TaskSuccess.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t TaskCompletionType.init(from:)(void *a1)
{
  return specialized TaskCompletionType.init(from:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TaskCompletionType@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized TaskCompletionType.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TaskCompletionType(void *a1)
{
  return TaskCompletionType.encode(to:)(a1, *v1);
}

uint64_t TaskInteractionType.includesPrompt.getter(char a1)
{
  return a1 & 1;
}

uint64_t TaskInteractionType.includesPrompt.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*TaskInteractionType.includesPrompt.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t TaskInteractionType.includesConfirm.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t TaskInteractionType.includesConfirm.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*TaskInteractionType.includesConfirm.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t TaskInteractionType.includesDisambiguate.getter(unsigned int a1)
{
  return HIWORD(a1) & 1;
}

uint64_t TaskInteractionType.includesDisambiguate.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*TaskInteractionType.includesDisambiguate.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t TaskInteractionType.includesUnsupportedPrompt.getter(unsigned int a1)
{
  return HIBYTE(a1) & 1;
}

uint64_t TaskInteractionType.includesUnsupportedPrompt.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 3) = result;
  return result;
}

uint64_t (*TaskInteractionType.includesUnsupportedPrompt.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskInteractionType.CodingKeys()
{
  unint64_t result = 0x736564756C636E69;
  switch(*v0)
  {
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TaskInteractionType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TaskInteractionType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TaskInteractionType.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskInteractionType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskInteractionType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TaskInteractionType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskInteractionType.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v10 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

PostSiriEngagement::TaskInteractionType __swiftcall TaskInteractionType.init()()
{
  return (PostSiriEngagement::TaskInteractionType)0;
}

uint64_t TaskInteractionType.init(from:)(void *a1)
{
  return specialized TaskInteractionType.init(from:)(a1) & 0x1010101;
}

uint64_t default argument 0 of TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)()
{
  return 0;
}

uint64_t default argument 1 of TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)()
{
  return 0;
}

uint64_t default argument 2 of TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)()
{
  return 0;
}

uint64_t default argument 3 of TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)()
{
  return 0;
}

PostSiriEngagement::TaskInteractionType __swiftcall TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)(Swift::Bool includesPrompt, Swift::Bool includesConfirm, Swift::Bool includesDisambiguate, Swift::Bool includesUnsupportedPrompt)
{
  if (includesUnsupportedPrompt) {
    int v4 = 0x1000000;
  }
  else {
    int v4 = 0;
  }
  if (includesDisambiguate) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  if (includesConfirm) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return (PostSiriEngagement::TaskInteractionType)(v6 & 0xFFFFFFFE | includesPrompt | v5 | v4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TaskInteractionType@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized TaskInteractionType.init(from:)(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result) & 1;
    a2[3] = BYTE3(result) & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TaskInteractionType(void *a1)
{
  return TaskInteractionType.encode(to:)(a1);
}

uint64_t EngagementUnderstandingFeatures.taskSuccess.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t EngagementUnderstandingFeatures.taskSuccess.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t (*EngagementUnderstandingFeatures.taskSuccess.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t EngagementUnderstandingFeatures.taskInteractionType.getter()
{
  swift_beginAccess();
  if (v0[20]) {
    int v1 = 0x1000000;
  }
  else {
    int v1 = 0;
  }
  if (v0[19]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (v0[18]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return v3 | v0[17] | v2 | v1;
}

uint64_t EngagementUnderstandingFeatures.taskInteractionType.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  v1[17] = a1 & 1;
  v1[18] = BYTE1(a1) & 1;
  v1[19] = BYTE2(a1) & 1;
  v1[20] = HIBYTE(a1) & 1;
  return result;
}

uint64_t (*EngagementUnderstandingFeatures.taskInteractionType.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t EngagementUnderstandingFeatures.taskCompletionType.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 21);
}

uint64_t EngagementUnderstandingFeatures.taskCompletionType.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 21) = a1;
  return result;
}

uint64_t (*EngagementUnderstandingFeatures.taskCompletionType.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

unsigned char *EngagementUnderstandingFeatures.__allocating_init(taskSuccess:taskCompletionType:taskInteractionType:)(char a1, char a2, int a3)
{
  uint64_t result = (unsigned char *)swift_allocObject();
  result[16] = a1;
  result[17] = a3 & 1;
  result[18] = BYTE1(a3) & 1;
  result[19] = BYTE2(a3) & 1;
  result[20] = HIBYTE(a3) & 1;
  result[21] = a2;
  return result;
}

unsigned char *EngagementUnderstandingFeatures.init(taskSuccess:taskCompletionType:taskInteractionType:)(char a1, char a2, int a3)
{
  v3[16] = a1;
  v3[17] = a3 & 1;
  v3[18] = BYTE1(a3) & 1;
  v3[19] = BYTE2(a3) & 1;
  v3[20] = HIBYTE(a3) & 1;
  v3[21] = a2;
  return v3;
}

BOOL EngagementUnderstandingFeatures.isUserAbandoned.getter()
{
  return (*(unsigned __int8 (**)(void))(*(void *)v0 + 152))() == 1;
}

BOOL EngagementUnderstandingFeatures.isUserCanceled.getter()
{
  return (*(unsigned __int8 (**)(void))(*(void *)v0 + 152))() == 2;
}

BOOL EngagementUnderstandingFeatures.isSiriCompleted.getter()
{
  return (*(unsigned __int8 (**)(void))(*(void *)v0 + 152))() == 4;
}

uint64_t EngagementUnderstandingFeatures.isPromptInteraction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))() & 1;
}

uint64_t EngagementUnderstandingFeatures.isConfirmInteraction.getter()
{
  return ((*(unsigned int (**)(void))(*(void *)v0 + 128))() >> 8) & 1;
}

uint64_t EngagementUnderstandingFeatures.isDisambiguateInteraction.getter()
{
  return ((*(unsigned int (**)(void))(*(void *)v0 + 128))() >> 16) & 1;
}

uint64_t EngagementUnderstandingFeatures.isUnsupportedPromptInteraction.getter()
{
  return ((*(unsigned int (**)(void))(*(void *)v0 + 128))() >> 24) & 1;
}

BOOL EngagementUnderstandingFeatures.isFailed.getter()
{
  return (*(unsigned __int8 (**)(void))(*(void *)v0 + 152))() == 3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EngagementUnderstandingFeatures.CodingKeys()
{
  unint64_t v1 = 0xD000000000000013;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000012;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x636375536B736174;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EngagementUnderstandingFeatures.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized EngagementUnderstandingFeatures.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance EngagementUnderstandingFeatures.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EngagementUnderstandingFeatures.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EngagementUnderstandingFeatures.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t EngagementUnderstandingFeatures.deinit()
{
  return v0;
}

uint64_t EngagementUnderstandingFeatures.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 22, 7);
}

uint64_t EngagementUnderstandingFeatures.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EngagementUnderstandingFeatures.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys();
  uint64_t v9 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v19 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(v9);
  char v18 = 0;
  lazy protocol witness table accessor for type TaskSuccess and conformance TaskSuccess();
  uint64_t v10 = KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 128))(v10);
    __int16 v15 = v11 & 0x101;
    char v16 = BYTE2(v11) & 1;
    char v17 = HIBYTE(v11) & 1;
    v14[9] = 1;
    lazy protocol witness table accessor for type TaskInteractionType and conformance TaskInteractionType();
    uint64_t v12 = KeyedEncodingContainer.encode<A>(_:forKey:)();
    v14[8] = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 152))(v12);
    v14[7] = 2;
    lazy protocol witness table accessor for type TaskCompletionType and conformance TaskCompletionType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EngagementUnderstandingFeatures()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t SiriExecutionTask.uiSessionId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionTask.uiSessionId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.uiSessionId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.taskId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionTask.taskId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.taskId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.requestIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriExecutionTask.requestIds.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.requestIds.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.appPattern.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriExecutionTask.appPattern.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.appPattern.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.taskType.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionTask.taskType.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.taskType.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.conversationPath.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriExecutionTask.conversationPath.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.conversationPath.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.engagementFeatures.getter()
{
  return swift_retain();
}

uint64_t SiriExecutionTask.engagementFeatures.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 88) = a1;
  return swift_release();
}

uint64_t (*SiriExecutionTask.engagementFeatures.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for SiriExecutionTask.startTime : SiriExecutionTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 328))(v6);
}

uint64_t SiriExecutionTask.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime, a1);
}

uint64_t SiriExecutionTask.startTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime);
}

uint64_t (*SiriExecutionTask.startTime.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for SiriExecutionTask.endTime : SiriExecutionTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 352))(v6);
}

uint64_t SiriExecutionTask.endTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime, a1);
}

uint64_t SiriExecutionTask.endTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime);
}

uint64_t (*SiriExecutionTask.endTime.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

char *SiriExecutionTask.__allocating_init(uiSessionId:taskId:requestIds:appPattern:taskType:conversationPath:engagementFeatures:startTime:endTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = a1;
  *((void *)v19 + 3) = a2;
  *((void *)v19 + 4) = a3;
  *((void *)v19 + 5) = a4;
  *((void *)v19 + 6) = a5;
  *((void *)v19 + 7) = a6;
  *((void *)v19 + 8) = a7;
  *((void *)v19 + 9) = a8;
  *((void *)v19 + 10) = a9;
  *((void *)v19 + 11) = a10;
  uint64_t v20 = &v19[OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime];
  uint64_t v21 = type metadata accessor for Date();
  int64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32);
  v22(v20, a11, v21);
  v22(&v19[OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime], a12, v21);
  return v19;
}

char *SiriExecutionTask.init(uiSessionId:taskId:requestIds:appPattern:taskType:conversationPath:engagementFeatures:startTime:endTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *((void *)v12 + 2) = a1;
  *((void *)v12 + 3) = a2;
  *((void *)v12 + 4) = a3;
  *((void *)v12 + 5) = a4;
  *((void *)v12 + 6) = a5;
  *((void *)v12 + 7) = a6;
  *((void *)v12 + 8) = a7;
  *((void *)v12 + 9) = a8;
  uint64_t v13 = &v12[OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime];
  *((void *)v12 + 10) = a9;
  *((void *)v12 + 11) = a10;
  uint64_t v14 = type metadata accessor for Date();
  __int16 v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v13, a11, v14);
  v15(&v12[OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime], a12, v14);
  return v12;
}

unint64_t SiriExecutionTask.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6F69737365536975;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64496B736174;
      break;
    case 2:
      unint64_t result = 0x4974736575716572;
      break;
    case 3:
      unint64_t result = 0x6574746150707061;
      break;
    case 4:
      unint64_t result = 0x657079546B736174;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x6D69547472617473;
      break;
    case 8:
      unint64_t result = 0x656D6954646E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriExecutionTask.CodingKeys()
{
  return SiriExecutionTask.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriExecutionTask.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SiriExecutionTask.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SiriExecutionTask.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriExecutionTask.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriExecutionTask.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SiriExecutionTask.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime, v2);
  return v0;
}

uint64_t SiriExecutionTask.__deallocating_deinit()
{
  return SiriExecutionTask.__deallocating_deinit((void (*)(void))SiriExecutionTask.deinit);
}

uint64_t SiriExecutionTask.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  uint64_t v37 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriExecutionTask.CodingKeys>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys();
  uint64_t v15 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(void *)v2 + 152))(v15);
  LOBYTE(v41) = 0;
  uint64_t v39 = v11;
  char v16 = v38;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v39);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v38 = v10;
    uint64_t v35 = v8;
    uint64_t v17 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 176))(v17);
    LOBYTE(v41) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v19 = swift_bridgeObjectRelease();
    uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 200))(v19);
    char v40 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v20 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v34 = v12;
    uint64_t v21 = swift_bridgeObjectRelease();
    uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 224))(v21);
    char v40 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    unint64_t v33 = v20;
    uint64_t v22 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 248))(v22);
    LOBYTE(v41) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v23 = swift_bridgeObjectRelease();
    uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 272))(v23);
    char v40 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v24 = swift_bridgeObjectRelease();
    uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 296))(v24);
    char v40 = 6;
    type metadata accessor for EngagementUnderstandingFeatures();
    lazy protocol witness table accessor for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures(&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures, v25, (void (*)(uint64_t))type metadata accessor for EngagementUnderstandingFeatures);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v26 = swift_release();
    uint64_t v27 = v38;
    (*(void (**)(uint64_t))(*(void *)v2 + 320))(v26);
    LOBYTE(v41) = 7;
    uint64_t v28 = lazy protocol witness table accessor for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, 255, MEMORY[0x263F07490]);
    uint64_t v29 = v36;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v34 = v28;
    uint64_t v30 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
    uint64_t v31 = v30(v27, v29);
    uint64_t v32 = v35;
    (*(void (**)(uint64_t))(*(void *)v2 + 344))(v31);
    LOBYTE(v41) = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v30(v32, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v39);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriExecutionTask()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 376))();
}

uint64_t SiriExecutionStep.appBundleId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.appBundleId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.appBundleId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.intentName.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.intentName.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.intentName.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.interactionId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.interactionId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.interactionId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.slotValue.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.slotValue.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.slotValue.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.statusReason.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.statusReason.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.statusReason.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.taskId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.taskId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.taskId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.taskStep.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.taskStep.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.taskStep.modify())()
{
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t key path setter for SiriExecutionStep.eventTime : SiriExecutionStep(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 320))(v6);
}

uint64_t SiriExecutionStep.eventTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionStep_eventTime, a1);
}

uint64_t SiriExecutionTask.startTime.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t SiriExecutionStep.eventTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionStep_eventTime);
}

uint64_t SiriExecutionTask.startTime.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(v4, a1, v5);
  return swift_endAccess();
}

uint64_t (*SiriExecutionStep.eventTime.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.__allocating_init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v23 = swift_allocObject();
  SiriExecutionStep.init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return v23;
}

uint64_t SiriExecutionStep.init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(void *)(v15 + 120) = 0;
  *(void *)(v15 + 112) = 0;
  swift_beginAccess();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v15 + 32) = a3;
  *(void *)(v15 + 40) = a4;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v15 + 48) = a5;
  *(void *)(v15 + 56) = a6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v15 + 64) = a7;
  *(void *)(v15 + 72) = a8;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v15 + 80) = a9;
  *(void *)(v15 + 88) = a10;
  swift_bridgeObjectRelease();
  *(void *)(v15 + 96) = a11;
  *(void *)(v15 + 104) = a12;
  swift_beginAccess();
  *(void *)(v15 + 112) = a13;
  *(void *)(v15 + 120) = a14;
  swift_bridgeObjectRelease();
  uint64_t v19 = v15 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionStep_eventTime;
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a15, v20);
  return v15;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SiriExecutionStep.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TaskSuccess.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SiriExecutionStep.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TaskSuccess.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriExecutionStep.CodingKeys()
{
  uint64_t result = 0x6C646E7542707061;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x614E746E65746E69;
      break;
    case 2:
      uint64_t result = 0x7463617265746E69;
      break;
    case 3:
      uint64_t result = 0x756C6156746F6C73;
      break;
    case 4:
      uint64_t result = 0x6552737574617473;
      break;
    case 5:
      uint64_t result = 0x64496B736174;
      break;
    case 6:
      uint64_t result = 0x706574536B736174;
      break;
    case 7:
      uint64_t result = 0x6D6954746E657665;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriExecutionStep.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SiriExecutionStep.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SiriExecutionStep.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriExecutionStep.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriExecutionStep.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SiriExecutionStep.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionStep_eventTime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SiriExecutionStep.__deallocating_deinit()
{
  return SiriExecutionTask.__deallocating_deinit((void (*)(void))SiriExecutionStep.deinit);
}

uint64_t SiriExecutionTask.__deallocating_deinit(void (*a1)(void))
{
  a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);
  return MEMORY[0x270FA0228](v1, v2, v3);
}

uint64_t SiriExecutionStep.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriExecutionStep.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys();
  uint64_t v11 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(void *)v2 + 144))(v11);
  char v32 = 0;
  uint64_t v24 = v7;
  uint64_t v12 = v23;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v24);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 168))(v13);
    char v31 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v15 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 192))(v15);
    char v30 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v16 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 216))(v16);
    char v29 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v17 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 240))(v17);
    char v28 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v18 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 264))(v18);
    char v27 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v19 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 288))(v19);
    char v26 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v20 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 312))(v20);
    char v25 = 7;
    lazy protocol witness table accessor for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, 255, MEMORY[0x263F07490]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v24);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriExecutionStep()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 344))();
}

uint64_t SiriExecutionTaskFactory.convertBiomeEventToSiriExecutionStep(bmEvent:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v51 - v10;
  id v12 = objc_msgSend(a1, sel_taskId);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  id v17 = objc_msgSend(a1, sel_absoluteTimestamp);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_9;
  }
  uint64_t v18 = v17;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v19(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    outlined destroy of Date?((uint64_t)v4);
    return 0;
  }
  v19(v11, v4, v5);
  uint64_t v20 = &selRef_init;
  id v21 = objc_msgSend(a1, sel_intentName);
  uint64_t v60 = v14;
  if (v21)
  {
    uint64_t v22 = v21;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::String v23 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v23._countAndFlagsBits == 0x7361742065676173 && v23._object == (void *)0xE90000000000006BLL)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      swift_bridgeObjectRelease();
      return 0;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = &selRef_init;
    if (v26) {
      goto LABEL_13;
    }
  }
  id v27 = objc_msgSend(a1, sel_appBundleID);
  if (v27)
  {
    char v28 = v27;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v58 = v30;
    uint64_t v59 = v29;
  }
  else
  {
    uint64_t v58 = 0;
    uint64_t v59 = 0;
  }
  id v31 = [a1 v20[52]];
  if (v31)
  {
    char v32 = v31;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v34;
    uint64_t v57 = v33;
  }
  else
  {
    uint64_t v56 = 0;
    uint64_t v57 = 0;
  }
  id v35 = objc_msgSend(a1, sel_interactionID);
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v38;
    uint64_t v55 = v37;
  }
  else
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
  }
  id v39 = objc_msgSend(a1, sel_slotValue);
  if (v39)
  {
    char v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = v42;
    uint64_t v53 = v41;
  }
  else
  {
    uint64_t v52 = 0;
    uint64_t v53 = 0;
  }
  id v43 = objc_msgSend(a1, sel_statusReason);
  if (v43)
  {
    uint64_t v44 = v43;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v47 = 0;
  }
  objc_msgSend(a1, sel_taskStep);
  uint64_t v48 = specialized static SiriExecutionTaskFactory.getTaskStepDescription(taskStepType:)();
  uint64_t v50 = v49;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  type metadata accessor for SiriExecutionStep(0);
  uint64_t v24 = swift_allocObject();
  SiriExecutionStep.init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)(v59, v58, v57, v56, v55, v54, v53, v52, v45, v47, v60, v16, v48, v50, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v24;
}

uint64_t SiriExecutionTaskFactory.processBiomeEventsToTask(siriExecutionEvents:)(unint64_t a1)
{
  unint64_t v14 = MEMORY[0x263F8EE78];
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    unint64_t v8 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_17;
  }
LABEL_3:
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v12 + 80);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x22A627400](i, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v6 = v5;
      if (v3())
      {
        uint64_t v7 = swift_retain();
        MEMORY[0x22A6270D0](v7);
        if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v8 = v14;
    if ((v14 & 0x8000000000000000) != 0) {
      goto LABEL_21;
    }
LABEL_18:
    if ((v8 & 0x4000000000000000) == 0)
    {
      uint64_t v9 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
LABEL_20:
      uint64_t v13 = v9;
      specialized MutableCollection<>.sort(by:)(&v13, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(void *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
      swift_bridgeObjectRelease();
      uint64_t v10 = v13;
      swift_bridgeObjectRelease();
      return v10;
    }
LABEL_21:
    swift_bridgeObjectRetain_n();
    uint64_t v9 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t SiriExecutionTaskFactory.loadTaskEntities(steps:siriUISessionId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v158 = a3;
  uint64_t v157 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  int64_t object = (int64_t)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  v166 = (char *)&v149 - v8;
  uint64_t v171 = type metadata accessor for Date();
  uint64_t v178 = *(void *)(v171 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v171);
  v156 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  v155 = (char *)&v149 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (uint64_t)&v149 - v14;
  MEMORY[0x270FA5388](v13);
  v162 = (char *)&v149 - v16;
  unint64_t v186 = MEMORY[0x263F8EE78];
  uint64_t v183 = MEMORY[0x263F8EE80];
  if ((unint64_t)a1 >> 62) {
    goto LABEL_224;
  }
  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  int64_t v160 = object;
  uint64_t v154 = v15;
  if (v17)
  {
    v181 = (void *)(a1 & 0xC000000000000001);
    uint64_t v15 = MEMORY[0x263F8EE80];
    int64_t object = 4;
    long long v179 = xmmword_224F63660;
    uint64_t v180 = a1;
    while (1)
    {
      int64_t v20 = object - 4;
      if (v181)
      {
        uint64_t v21 = MEMORY[0x22A627400](object - 4, a1);
        unint64_t v22 = object - 3;
        if (__OFADD__(v20, 1)) {
          goto LABEL_216;
        }
      }
      else
      {
        uint64_t v21 = *(void *)(a1 + 8 * object);
        swift_retain();
        unint64_t v22 = object - 3;
        if (__OFADD__(v20, 1))
        {
LABEL_216:
          __break(1u);
LABEL_217:
          __break(1u);
LABEL_218:
          __break(1u);
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          swift_bridgeObjectRetain();
          uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_3;
        }
      }
      unint64_t v182 = v22;
      uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v21 + 264))();
      uint64_t v25 = v24;
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
      uint64_t v28 = *(void *)(v15 + 16);
      BOOL v29 = (v26 & 1) == 0;
      uint64_t v30 = v28 + v29;
      if (__OFADD__(v28, v29)) {
        goto LABEL_217;
      }
      char v31 = v26;
      a1 = v15;
      if (*(void *)(v15 + 24) < v30)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, 1);
        a1 = v183;
        unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
        if ((v31 & 1) != (v33 & 1)) {
          goto LABEL_231;
        }
        unint64_t v27 = v32;
      }
      if (v31)
      {
        uint64_t v18 = swift_bridgeObjectRelease();
        uint64_t v19 = (void *)(*(void *)(a1 + 56) + 8 * v27);
        MEMORY[0x22A6270D0](v18);
        if (*(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v15 = a1;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = v179;
        *(void *)(v34 + 32) = v21;
        uint64_t v185 = v34;
        specialized Array._endMutation()();
        uint64_t v35 = v185;
        *(void *)(a1 + 8 * (v27 >> 6) + 64) |= 1 << v27;
        uint64_t v36 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v27);
        *uint64_t v36 = v23;
        v36[1] = v25;
        *(void *)(*(void *)(a1 + 56) + 8 * v27) = v35;
        uint64_t v37 = *(void *)(a1 + 16);
        BOOL v38 = __OFADD__(v37, 1);
        uint64_t v39 = v37 + 1;
        if (v38) {
          goto LABEL_219;
        }
        uint64_t v15 = a1;
        *(void *)(a1 + 16) = v39;
      }
      ++object;
      a1 = v180;
      if (v182 == v17) {
        goto LABEL_22;
      }
    }
  }
  uint64_t v15 = MEMORY[0x263F8EE80];
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void *)(v15 + 64);
  uint64_t v172 = v15 + 64;
  uint64_t v41 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v42 = -1;
  if (v41 < 64) {
    uint64_t v42 = ~(-1 << v41);
  }
  unint64_t v43 = v42 & v40;
  int64_t object = (unint64_t)(v41 + 63) >> 6;
  v170 = (uint64_t *)(v178 + 56);
  v163 = (unsigned int (**)(char *, uint64_t, uint64_t))(v178 + 48);
  v161 = (int64_t *)(v178 + 32);
  v153 = (void (**)(char *, char *, uint64_t))(v178 + 16);
  v159 = (void (**)(char *, uint64_t))(v178 + 8);
  swift_retain();
  int64_t v44 = 0;
  uint64_t v165 = v15;
  int64_t v164 = object;
  while (1)
  {
    while (v43)
    {
      unint64_t v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      unint64_t v46 = v45 | (v44 << 6);
      if (*(void *)(v15 + 16))
      {
LABEL_49:
        uint64_t v50 = (uint64_t *)(*(void *)(v15 + 48) + 16 * v46);
        uint64_t v52 = *v50;
        uint64_t v51 = v50[1];
        swift_bridgeObjectRetain_n();
        unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v51);
        if (v54)
        {
          unint64_t v174 = v43;
          int64_t v175 = v44;
          a1 = *(void *)(*(void *)(v15 + 56) + 8 * v53);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if ((unint64_t)a1 >> 62)
          {
            if (a1 < 0) {
              int64_t object = a1;
            }
            else {
              int64_t object = a1 & 0xFFFFFFFFFFFFFF8;
            }
            swift_bridgeObjectRetain();
            uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
          }
          else
          {
            uint64_t v55 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          uint64_t v168 = v52;
          uint64_t v173 = v51;
          uint64_t v178 = a1;
          if (v55)
          {
            uint64_t v169 = 0;
            unint64_t v56 = 0;
            unint64_t v182 = a1 & 0xC000000000000001;
            uint64_t v180 = a1 & 0xFFFFFFFFFFFFFF8;
            *(void *)&long long v179 = a1 + 32;
            unint64_t v176 = 0xE000000000000000;
            uint64_t v57 = (void *)MEMORY[0x263F8EE78];
            v177 = (void *)MEMORY[0x263F8EE78];
            v181 = (void *)MEMORY[0x263F8EE78];
            while (1)
            {
              if (v182)
              {
                uint64_t v58 = MEMORY[0x22A627400](v56, a1);
                BOOL v38 = __OFADD__(v56++, 1);
                if (v38) {
                  goto LABEL_214;
                }
              }
              else
              {
                if (v56 >= *(void *)(v180 + 16)) {
                  goto LABEL_215;
                }
                uint64_t v58 = *(void *)(v179 + 8 * v56);
                swift_retain();
                BOOL v38 = __OFADD__(v56++, 1);
                if (v38)
                {
LABEL_214:
                  __break(1u);
LABEL_215:
                  __break(1u);
                  goto LABEL_216;
                }
              }
              uint64_t v59 = (uint64_t *)(*(void *)v58 + 288);
              uint64_t v15 = *v59;
              uint64_t v60 = ((uint64_t (*)(void))*v59)();
              if (!v61) {
                break;
              }
              int64_t object = v61;
              if (v60 == 0x6C706552776F6C46 && v61 == 0xEA00000000006E61)
              {
                swift_release();
                swift_bridgeObjectRelease();
                goto LABEL_56;
              }
              char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v60 = swift_bridgeObjectRelease();
              if ((v63 & 1) == 0) {
                break;
              }
LABEL_55:
              swift_release();
LABEL_56:
              if (v56 == v55) {
                goto LABEL_182;
              }
            }
            uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 192))(v60);
            if (!v65) {
              goto LABEL_89;
            }
            uint64_t v66 = v64;
            unint64_t v67 = v65;
            uint64_t v68 = HIBYTE(v65) & 0xF;
            if ((v65 & 0x2000000000000000) == 0) {
              uint64_t v68 = v64 & 0xFFFFFFFFFFFFLL;
            }
            if (!v68)
            {
              uint64_t v64 = swift_bridgeObjectRelease();
LABEL_89:
              uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 144))(v64);
              if (!v77) {
                goto LABEL_103;
              }
              uint64_t v78 = v76;
              unint64_t v79 = v77;
              uint64_t v80 = HIBYTE(v77) & 0xF;
              if ((v77 & 0x2000000000000000) == 0) {
                uint64_t v80 = v76 & 0xFFFFFFFFFFFFLL;
              }
              if (!v80) {
                goto LABEL_102;
              }
              BOOL v81 = v76 == 1701736302 && v77 == 0xE400000000000000;
              if (v81 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_102;
              }
              int64_t object = v177[2];
              if (!object) {
                goto LABEL_156;
              }
              if (v177[4] == v78 && v79 == v177[5] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_102;
              }
              if (object == 1)
              {
LABEL_156:
                if (swift_isUniquelyReferenced_nonNull_native()) {
                  uint64_t v76 = (uint64_t)v177;
                }
                else {
                  uint64_t v76 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, object + 1, 1, v177);
                }
                unint64_t v112 = *(void *)(v76 + 16);
                unint64_t v111 = *(void *)(v76 + 24);
                int64_t object = v112 + 1;
                if (v112 >= v111 >> 1) {
                  uint64_t v76 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v111 > 1), v112 + 1, 1, (void *)v76);
                }
                *(void *)(v76 + 16) = object;
                v177 = (void *)v76;
                uint64_t v113 = v76 + 16 * v112;
                *(void *)(v113 + 32) = v78;
                *(void *)(v113 + 40) = v79;
                a1 = v178;
LABEL_103:
                uint64_t isUniquelyReferenced_nonNull_native = ((uint64_t (*)(uint64_t))v15)(v76);
                if (v83)
                {
                  uint64_t v84 = isUniquelyReferenced_nonNull_native;
                  unint64_t v85 = v83;
                  uint64_t v86 = (*(uint64_t (**)(void))(*(void *)v58 + 216))();
                  if (v87)
                  {
                    uint64_t v88 = v86;
                    uint64_t v15 = v87;
                    uint64_t v89 = HIBYTE(v87) & 0xF;
                    if ((v87 & 0x2000000000000000) == 0) {
                      uint64_t v89 = v86 & 0xFFFFFFFFFFFFLL;
                    }
                    if (!v89
                      || (v86 == 1701736302 ? (BOOL v90 = v87 == 0xE400000000000000) : (BOOL v90 = 0),
                          v90 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
                    {
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      uint64_t v183 = 10272;
                      unint64_t v184 = 0xE200000000000000;
                      v102._countAndFlagsBits = v88;
                      v102._int64_t object = (void *)v15;
                      String.append(_:)(v102);
                      swift_bridgeObjectRelease();
                      v103._countAndFlagsBits = 41;
                      v103._int64_t object = (void *)0xE100000000000000;
                      String.append(_:)(v103);
                      uint64_t v104 = v183;
                      uint64_t v15 = v184;
                      uint64_t v183 = v84;
                      unint64_t v184 = v85;
                      swift_bridgeObjectRetain();
                      v105._countAndFlagsBits = v104;
                      v105._int64_t object = (void *)v15;
                      String.append(_:)(v105);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v84 = v183;
                      unint64_t v85 = v184;
                    }
                  }
                  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
                    uint64_t v57 = (void *)isUniquelyReferenced_nonNull_native;
                  }
                  unint64_t v92 = v57[2];
                  unint64_t v91 = v57[3];
                  int64_t object = v92 + 1;
                  if (v92 >= v91 >> 1)
                  {
                    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v91 > 1), v92 + 1, 1, v57);
                    uint64_t v57 = (void *)isUniquelyReferenced_nonNull_native;
                  }
                  v57[2] = object;
                  double v93 = &v57[2 * v92];
                  v93[4] = v84;
                  v93[5] = v85;
                }
                uint64_t v94 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 168))(isUniquelyReferenced_nonNull_native);
                if (v95)
                {
                  uint64_t v96 = v94;
                  unint64_t v97 = v95;
                  Swift::String v98 = String.lowercased()();
                  if (v98._countAndFlagsBits == 0x74746E6572727563 && v98._object == (void *)0xEB000000006B7361)
                  {
LABEL_132:
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    goto LABEL_56;
                  }
                  int64_t object = (int64_t)v98._object;
                  uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v15 & 1) == 0)
                  {
                    Swift::String v100 = String.lowercased()();
                    int64_t object = (int64_t)v100._object;
                    if (v100._countAndFlagsBits == 0x6465737261706E75 && v100._object == (void *)0xEE00746E65746E69) {
                      goto LABEL_132;
                    }
                    uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v15 & 1) == 0)
                    {
                      Swift::String v101 = String.lowercased()();
                      int64_t object = (int64_t)v101._object;
                      if (v101._countAndFlagsBits == 0x206E776F6E6B6E75
                        && v101._object == (void *)0xED00006573726170)
                      {
                        goto LABEL_132;
                      }
                      uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if ((v15 & 1) == 0)
                      {
                        Swift::String v110 = String.lowercased()();
                        int64_t object = (int64_t)v110._object;
                        if (v110._countAndFlagsBits != 0x7361742065676173
                          || v110._object != (void *)0xE90000000000006BLL)
                        {
                          uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          swift_release();
                          swift_bridgeObjectRelease();
                          if ((v15 & 1) == 0)
                          {
                            uint64_t v169 = v96;
                            unint64_t v176 = v97;
                          }
                          goto LABEL_56;
                        }
                        swift_bridgeObjectRelease();
                      }
                    }
                  }
                  swift_bridgeObjectRelease();
                }
                goto LABEL_55;
              }
              if ((v177[6] != v78 || v79 != v177[7]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                if (object == 2) {
                  goto LABEL_156;
                }
                if ((v177[8] != v78 || v79 != v177[9]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  if (object != 3)
                  {
                    v114 = v177 + 11;
                    uint64_t v115 = 3;
                    while (!__OFADD__(v115, 1))
                    {
                      if (*(v114 - 1) == v78 && v79 == *v114) {
                        goto LABEL_102;
                      }
                      uint64_t v150 = v115 + 1;
                      uint64_t v151 = v115;
                      v152 = v114;
                      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                        goto LABEL_102;
                      }
                      v114 = v152 + 2;
                      uint64_t v115 = v151 + 1;
                      if (v150 == object) {
                        goto LABEL_156;
                      }
                    }
                    goto LABEL_230;
                  }
                  goto LABEL_156;
                }
              }
LABEL_102:
              uint64_t v76 = swift_bridgeObjectRelease();
              goto LABEL_103;
            }
            uint64_t v69 = v181;
            int64_t object = v181[2];
            if (!object) {
              goto LABEL_83;
            }
            BOOL v70 = v181[4] == v64 && v65 == v181[5];
            if (v70 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_79;
            }
            uint64_t v69 = v181;
            if (object == 1)
            {
LABEL_83:
              uint64_t v64 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v71 = v69;
              if ((v64 & 1) == 0)
              {
                uint64_t v64 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, object + 1, 1, v69);
                unint64_t v71 = (void *)v64;
              }
              unint64_t v73 = v71[2];
              unint64_t v72 = v71[3];
              v181 = v71;
              int64_t object = v73 + 1;
              if (v73 >= v72 >> 1)
              {
                uint64_t v64 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v72 > 1), v73 + 1, 1, v181);
                v181 = (void *)v64;
              }
              char v74 = v181;
              v181[2] = object;
              uint64_t v75 = &v74[2 * v73];
              v75[4] = v66;
              v75[5] = v67;
              goto LABEL_88;
            }
            if ((v181[6] != v66 || v67 != v181[7]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              uint64_t v69 = v181;
              if (object == 2) {
                goto LABEL_83;
              }
              if ((v181[8] != v66 || v67 != v181[9]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                uint64_t v69 = v181;
                if (object != 3)
                {
                  v106 = v181 + 11;
                  uint64_t v107 = 3;
                  while (!__OFADD__(v107, 1))
                  {
                    if (*(v106 - 1) == v66 && v67 == *v106) {
                      goto LABEL_79;
                    }
                    uint64_t v151 = v107 + 1;
                    v152 = (void *)v107;
                    v109 = v106;
                    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                      goto LABEL_79;
                    }
                    v106 = v109 + 2;
                    uint64_t v107 = (uint64_t)v152 + 1;
                    uint64_t v69 = v181;
                    if (v151 == object) {
                      goto LABEL_83;
                    }
                  }
                  __break(1u);
LABEL_228:
                  swift_bridgeObjectRetain_n();
                  uint64_t v145 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(object);
                  swift_bridgeObjectRelease();
                  goto LABEL_212;
                }
                goto LABEL_83;
              }
            }
LABEL_79:
            uint64_t v64 = swift_bridgeObjectRelease();
LABEL_88:
            a1 = v178;
            goto LABEL_89;
          }
          uint64_t v169 = 0;
          unint64_t v176 = 0xE000000000000000;
          uint64_t v57 = (void *)MEMORY[0x263F8EE78];
          v177 = (void *)MEMORY[0x263F8EE78];
          v181 = (void *)MEMORY[0x263F8EE78];
LABEL_182:
          swift_bridgeObjectRelease();
          v117 = *(uint64_t (**)(uint64_t))(*(void *)v167 + 104);
          uint64_t v15 = *(void *)v167 + 104;
          uint64_t v118 = swift_bridgeObjectRetain();
          uint64_t v119 = v117(v118);
          swift_bridgeObjectRelease();
          if (!v55)
          {
            v123 = v166;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v170)(v166, 1, 1, v171);
LABEL_191:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v130 = (uint64_t)v123;
LABEL_192:
            outlined destroy of Date?(v130);
            goto LABEL_193;
          }
          int64_t object = a1;
          a1 &= 0xC000000000000001;
          if (a1)
          {
            swift_bridgeObjectRetain();
            uint64_t v120 = MEMORY[0x22A627400](0, object);
            uint64_t v121 = swift_bridgeObjectRelease();
          }
          else
          {
            if (!*(void *)((object & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_220;
            }
            uint64_t v120 = *(void *)(object + 32);
            uint64_t v121 = swift_retain();
          }
          v122 = v166;
          (*(void (**)(uint64_t))(*(void *)v120 + 312))(v121);
          v123 = v122;
          swift_release();
          uint64_t v15 = *v170;
          v124 = v122;
          uint64_t v125 = v171;
          ((void (*)(char *, void, uint64_t, uint64_t))*v170)(v124, 0, 1, v171);
          v126 = *v163;
          if ((*v163)(v123, 1, v125) == 1) {
            goto LABEL_191;
          }
          int64_t object = *v161;
          ((void (*)(char *, char *, uint64_t))*v161)(v162, v123, v171);
          unint64_t v127 = v55 - 1;
          if (__OFSUB__(v55, 1)) {
            goto LABEL_221;
          }
          uint64_t v128 = v160;
          if (a1)
          {
            a1 = v178;
            uint64_t v129 = MEMORY[0x22A627400](v127, v178);
          }
          else
          {
            if ((v127 & 0x8000000000000000) != 0) {
              goto LABEL_222;
            }
            a1 = v178;
            if (v127 >= *(void *)((v178 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_223;
            }
            uint64_t v129 = *(void *)(v178 + 8 * v127 + 32);
            swift_retain();
          }
          uint64_t v131 = swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))(*(void *)v129 + 312))(v131);
          swift_release();
          uint64_t v132 = v171;
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v15)(v128, 0, 1, v171);
          if (v126((char *)v128, 1, v132) == 1)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            (*v159)(v162, v132);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v130 = v128;
            goto LABEL_192;
          }
          v133 = (char *)v154;
          ((void (*)(uint64_t, uint64_t, uint64_t))object)(v154, v128, v132);
          uint64_t v134 = v132;
          v135 = *v153;
          v136 = v155;
          (*v153)(v155, v162, v134);
          a1 = (uint64_t)v156;
          v135(v156, v133, v134);
          type metadata accessor for SiriExecutionTask(0);
          v137 = (void *)swift_allocObject();
          uint64_t v138 = v158;
          v137[2] = v157;
          v137[3] = v138;
          uint64_t v139 = v173;
          v137[4] = v168;
          v137[5] = v139;
          v140 = v177;
          v137[6] = v181;
          v137[7] = v140;
          unint64_t v141 = v176;
          v137[8] = v169;
          v137[9] = v141;
          v142 = (char *)v137 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime;
          v137[10] = v57;
          v137[11] = v119;
          ((void (*)(char *, char *, uint64_t))object)(v142, v136, v134);
          ((void (*)(char *, uint64_t, uint64_t))object)((char *)v137 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime, a1, v134);
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v143 = swift_retain();
          MEMORY[0x22A6270D0](v143);
          if (*(void *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
          swift_release();
          v144 = *v159;
          (*v159)(v133, v134);
          v144(v162, v134);
LABEL_193:
          uint64_t v15 = v165;
          int64_t object = v164;
          unint64_t v43 = v174;
          int64_t v44 = v175;
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
    }
    int64_t v47 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      goto LABEL_218;
    }
    if (v47 >= object)
    {
LABEL_207:
      swift_release_n();
      int64_t object = v186;
      if (v186 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v148 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v148 >= 2) {
          goto LABEL_209;
        }
      }
      else if (*(uint64_t *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2)
      {
LABEL_209:
        if (object < 0 || (object & 0x4000000000000000) != 0) {
          goto LABEL_228;
        }
        uint64_t v145 = object & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n();
LABEL_212:
        uint64_t v183 = v145;
        specialized MutableCollection<>.sort(by:)(&v183, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(void *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
        swift_bridgeObjectRelease();
        uint64_t v146 = v183;
        swift_bridgeObjectRelease();
        return v146;
      }
      return object;
    }
    unint64_t v48 = *(void *)(v172 + 8 * v47);
    ++v44;
    if (v48) {
      goto LABEL_48;
    }
    int64_t v44 = v47 + 1;
    if (v47 + 1 >= object) {
      goto LABEL_207;
    }
    unint64_t v48 = *(void *)(v172 + 8 * v44);
    if (v48) {
      goto LABEL_48;
    }
    int64_t v44 = v47 + 2;
    if (v47 + 2 >= object) {
      goto LABEL_207;
    }
    unint64_t v48 = *(void *)(v172 + 8 * v44);
    if (v48) {
      goto LABEL_48;
    }
    int64_t v44 = v47 + 3;
    if (v47 + 3 >= object) {
      goto LABEL_207;
    }
    unint64_t v48 = *(void *)(v172 + 8 * v44);
    if (v48) {
      goto LABEL_48;
    }
    int64_t v44 = v47 + 4;
    if (v47 + 4 >= object) {
      goto LABEL_207;
    }
    unint64_t v48 = *(void *)(v172 + 8 * v44);
    if (v48) {
      goto LABEL_48;
    }
    int64_t v44 = v47 + 5;
    if (v47 + 5 >= object) {
      goto LABEL_207;
    }
    unint64_t v48 = *(void *)(v172 + 8 * v44);
    if (v48) {
      goto LABEL_48;
    }
    int64_t v49 = v47 + 6;
    if (v49 >= object) {
      goto LABEL_207;
    }
    unint64_t v48 = *(void *)(v172 + 8 * v49);
    if (!v48) {
      break;
    }
    int64_t v44 = v49;
LABEL_48:
    unint64_t v43 = (v48 - 1) & v48;
    unint64_t v46 = __clz(__rbit64(v48)) + (v44 << 6);
    if (*(void *)(v15 + 16)) {
      goto LABEL_49;
    }
  }
  while (1)
  {
    int64_t v44 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    if (v44 >= object) {
      goto LABEL_207;
    }
    unint64_t v48 = *(void *)(v172 + 8 * v44);
    ++v49;
    if (v48) {
      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

unsigned char *SiriExecutionTaskFactory.calculateEngagementUnderstandingFeatures(conversationPath:)(uint64_t a1)
{
  if (specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1))
  {
    char v2 = 2;
  }
  else if (specialized static EngagementSignalEnrichmentUtils.isFailedTask(executionSequence:)(a1))
  {
    char v2 = 3;
  }
  else if (specialized static EngagementSignalEnrichmentUtils.isSiriCompletedTask(executionSequence:)(a1))
  {
    char v2 = 4;
  }
  else
  {
    char v2 = 1;
  }
  char v3 = specialized static EngagementSignalEnrichmentUtils.isPromptInteractionTask(executionSequence:)(a1);
  char v4 = specialized static EngagementSignalEnrichmentUtils.isConfirmInteractionTask(executionSequence:)(a1);
  char v5 = specialized static EngagementSignalEnrichmentUtils.isDisambiguateInteractionTask(executionSequence:)(a1);
  char v6 = specialized static EngagementSignalEnrichmentUtils.isUnsupportedPromptInteractionTask(executionSequence:)(a1);
  type metadata accessor for EngagementUnderstandingFeatures();
  uint64_t result = (unsigned char *)swift_allocObject();
  result[16] = 0;
  result[17] = v3 & 1;
  result[18] = v4 & 1;
  result[19] = v5 & 1;
  result[20] = v6 & 1;
  result[21] = v2;
  return result;
}

uint64_t static SiriExecutionTaskFactory.isTerminalTaskStep(taskStep:)(unsigned int a1)
{
  return (a1 < 0x10) & (0x80E0u >> a1);
}

uint64_t SiriExecutionTaskFactory.deinit()
{
  return v0;
}

uint64_t SiriExecutionTaskFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t SiriExecutionTaskFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SiriExecutionTaskFactory.init()()
{
  return v0;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), void (*a3)(void *))
{
  uint64_t v6 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = a2(v6);
    *a1 = v6;
  }
  uint64_t v8 = *(void *)(v6 + 16);
  v10[0] = v6 + 32;
  v10[1] = v8;
  a3(v10);
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v33 = a1;
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v7 = MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v7);
  uint64_t v36 = (char *)&v31 - v11;
  uint64_t v32 = a2;
  if (a3 != a2)
  {
    uint64_t v12 = *a4;
    uint64_t v35 = v10 + 8;
    uint64_t v39 = v12;
    uint64_t v13 = (void *)(v12 + 8 * a3 - 8);
    uint64_t v14 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v15 = v38;
LABEL_5:
    uint64_t v16 = *(void *)(v39 + 8 * a3);
    uint64_t v17 = v33;
    uint64_t v34 = v13;
    uint64_t v40 = a3;
    while (1)
    {
      uint64_t v18 = *v13;
      uint64_t v19 = *(void (**)(uint64_t))(*(void *)v16 + 312);
      swift_retain();
      uint64_t v20 = swift_retain();
      uint64_t v21 = v36;
      v19(v20);
      Date.timeIntervalSinceReferenceDate.getter();
      double v23 = v22;
      uint64_t v24 = *v14;
      uint64_t v25 = ((uint64_t (*)(char *, uint64_t))*v14)(v21, v15);
      char v26 = v37;
      (*(void (**)(uint64_t))(*(void *)v18 + 312))(v25);
      Date.timeIntervalSinceReferenceDate.getter();
      uint64_t v27 = v40;
      double v29 = v28;
      v24(v26, v15);
      swift_release();
      uint64_t result = swift_release();
      if (v23 >= v29)
      {
LABEL_4:
        a3 = v27 + 1;
        uint64_t v13 = v34 + 1;
        if (a3 == v32) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v39) {
        break;
      }
      uint64_t v30 = *v13;
      uint64_t v16 = v13[1];
      *uint64_t v13 = v16;
      v13[1] = v30;
      --v13;
      if (v27 == ++v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v31 = a1;
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v7 = MEMORY[0x270FA5388](v36);
  uint64_t v35 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v7);
  uint64_t v34 = (char *)&v29 - v11;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v12 = *a4;
    uint64_t v33 = v10 + 8;
    uint64_t v37 = v12;
    uint64_t v13 = (void *)(v12 + 8 * a3 - 8);
    uint64_t v15 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v14 = v34;
LABEL_5:
    uint64_t v16 = *(void *)(v37 + 8 * a3);
    uint64_t v17 = v31;
    uint64_t v32 = v13;
    uint64_t v38 = a3;
    while (1)
    {
      uint64_t v18 = *v13;
      uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 320);
      swift_retain();
      uint64_t v20 = swift_retain();
      uint64_t v21 = v19(v20);
      double v22 = v35;
      (*(void (**)(uint64_t))(*(void *)v18 + 320))(v21);
      double v23 = static Date.< infix(_:_:)();
      uint64_t v24 = *v15;
      uint64_t v25 = v22;
      char v26 = v36;
      (*v15)(v25, v36);
      v24(v14, v26);
      swift_release();
      uint64_t v27 = v38;
      uint64_t result = swift_release();
      if ((v23 & 1) == 0)
      {
LABEL_4:
        a3 = v27 + 1;
        uint64_t v13 = v32 + 1;
        if (a3 == v30) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v37) {
        break;
      }
      double v28 = *v13;
      uint64_t v16 = v13[1];
      *uint64_t v13 = v16;
      v13[1] = v28;
      --v13;
      if (v27 == ++v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v24 = a1;
  uint64_t v25 = type metadata accessor for SiriUISession(0);
  uint64_t v7 = MEMORY[0x270FA5388](v25);
  double v28 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v27 = a3;
  double v23 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v30 = v16 * (v27 - 1);
    char v26 = v16;
    double v29 = v16 * v27;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v24;
    while (1)
    {
      uint64_t v19 = *a4;
      outlined init with copy of SiriUISession(v29 + v17 + *a4, (uint64_t)v15);
      outlined init with copy of SiriUISession(v30 + v17 + v19, (uint64_t)v11);
      LOBYTE(v19) = static Date.< infix(_:_:)();
      outlined destroy of SiriUISession((uint64_t)v11, type metadata accessor for SiriUISession);
      uint64_t result = outlined destroy of SiriUISession((uint64_t)v15, type metadata accessor for SiriUISession);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v30 += v26;
        v29 += v26;
        if (++v27 == v23) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v20 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v21 = v20 + v30 + v17;
      outlined init with take of SiriUISession(v20 + v29 + v17, v28);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = outlined init with take of SiriUISession(v28, v21);
      v17 -= v26;
      if (v27 == ++v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v31 = a1;
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v7 = MEMORY[0x270FA5388](v36);
  uint64_t v35 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v7);
  uint64_t v34 = (char *)&v29 - v11;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v12 = *a4;
    uint64_t v33 = v10 + 8;
    uint64_t v37 = v12;
    uint64_t v13 = (void *)(v12 + 8 * a3 - 8);
    uint64_t v15 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v14 = v34;
LABEL_5:
    uint64_t v16 = *(void *)(v37 + 8 * a3);
    uint64_t v17 = v31;
    uint64_t v32 = v13;
    uint64_t v38 = a3;
    while (1)
    {
      uint64_t v18 = *v13;
      uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 224);
      swift_retain();
      uint64_t v20 = swift_retain();
      uint64_t v21 = v19(v20);
      double v22 = v35;
      (*(void (**)(uint64_t))(*(void *)v18 + 224))(v21);
      double v23 = static Date.< infix(_:_:)();
      uint64_t v24 = *v15;
      uint64_t v25 = v22;
      char v26 = v36;
      (*v15)(v25, v36);
      v24(v14, v26);
      swift_release();
      uint64_t v27 = v38;
      uint64_t result = swift_release();
      if ((v23 & 1) == 0)
      {
LABEL_4:
        a3 = v27 + 1;
        uint64_t v13 = v32 + 1;
        if (a3 == v30) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v37) {
        break;
      }
      double v28 = *v13;
      uint64_t v16 = v13[1];
      *uint64_t v13 = v16;
      v13[1] = v28;
      --v13;
      if (v27 == ++v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t (*v27)(char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;

  uint64_t v35 = a1;
  uint64_t v7 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  unint64_t v45 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v40 = (char *)&v33 - v11;
  uint64_t result = MEMORY[0x270FA5388](v10);
  uint64_t v39 = (char *)&v33 - v14;
  unint64_t v43 = a3;
  uint64_t v34 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void))(v13 + 16);
    uint64_t v15 = v13 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v36 = (uint64_t (**)(char *, uint64_t))(v15 - 8);
    uint64_t v37 = (void (*)(char *, uint64_t, uint64_t))v16;
    uint64_t v38 = v15;
    int64_t v44 = (uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16);
    int64_t v49 = v17 * (v43 - 1);
    uint64_t v41 = v17;
    uint64_t v18 = v17 * v43;
    unint64_t v48 = a4;
LABEL_5:
    uint64_t v19 = 0;
    unint64_t v46 = v35;
    uint64_t v42 = v18;
    while (1)
    {
      uint64_t v20 = *v48;
      uint64_t v21 = v18 + v19 + *v48;
      double v22 = v39;
      double v23 = v37;
      v37(v39, v21, v7);
      uint64_t v24 = v7;
      uint64_t v25 = v40;
      v23(v40, v49 + v19 + v20, v24);
      int64_t v47 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
      char v26 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
      uint64_t v27 = *v36;
      double v28 = v25;
      uint64_t v7 = v24;
      (*v36)(v28, v24);
      double v29 = v22;
      uint64_t v18 = v42;
      uint64_t result = v27(v29, v24);
      if (v47 >= v26)
      {
LABEL_4:
        v49 += v41;
        v18 += v41;
        if (++v43 == v34) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v30 = *v48;
      if (!*v48) {
        break;
      }
      uint64_t v31 = (char *)(v30 + v49 + v19);
      uint64_t v32 = *v44;
      (*v44)(v45, v30 + v18 + v19, v24);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = v32(v31, (uint64_t)v45, v24);
      v19 -= v41;
      if (v43 == ++v46) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v63 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v63 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v63);
  unint64_t v62 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = a4;
  uint64_t v60 = a3;
  int64_t v61 = (char *)&v54 - v12;
  uint64_t v13 = a2 - a1;
  uint64_t v14 = a2 - a1 + 7;
  if (a2 - a1 >= 0) {
    uint64_t v14 = a2 - a1;
  }
  uint64_t v15 = v14 >> 3;
  uint64_t v16 = a3 - a2;
  uint64_t v17 = v16 / 8;
  unint64_t v67 = a1;
  uint64_t v66 = v11;
  uint64_t v64 = v11;
  if (v14 >> 3 >= v16 / 8)
  {
    if (v16 < -7) {
      goto LABEL_43;
    }
    if (v11 != a2 || &a2[8 * v17] <= v11)
    {
      memmove(v11, a2, 8 * v17);
      uint64_t v11 = v64;
    }
    uint64_t v33 = &v11[8 * v17];
    unint64_t v65 = v33;
    unint64_t v67 = a2;
    if (v16 < 8 || a1 >= a2) {
      goto LABEL_42;
    }
    uint64_t v55 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
    unint64_t v56 = a1;
    uint64_t v34 = v60 - 8;
    uint64_t v35 = a2;
    while (1)
    {
      uint64_t v60 = a2;
      unint64_t v58 = (unint64_t)v33;
      uint64_t v59 = v34 + 8;
      uint64_t v38 = v33 - 8;
      uint64_t v37 = *((void *)v33 - 1);
      uint64_t v39 = *((void *)v35 - 1);
      uint64_t v57 = v35 - 8;
      uint64_t v40 = *(void (**)(uint64_t))(*(void *)v37 + 312);
      swift_retain();
      uint64_t v41 = swift_retain();
      uint64_t v42 = v61;
      v40(v41);
      Date.timeIntervalSinceReferenceDate.getter();
      double v44 = v43;
      unint64_t v45 = *v55;
      unint64_t v46 = v42;
      uint64_t v47 = v63;
      uint64_t v48 = (*v55)(v46, v63);
      int64_t v49 = v62;
      (*(void (**)(uint64_t))(*(void *)v39 + 312))(v48);
      Date.timeIntervalSinceReferenceDate.getter();
      double v51 = v50;
      v45(v49, v47);
      swift_release();
      swift_release();
      if (v44 < v51) {
        break;
      }
      unint64_t v65 = v38;
      uint64_t v35 = v60;
      if ((unint64_t)v59 < v58 || (unint64_t)v34 >= v58)
      {
        *(void *)uint64_t v34 = *(void *)v38;
        uint64_t v33 = v38;
        goto LABEL_30;
      }
      uint64_t v52 = v64;
      uint64_t v36 = v56;
      if (v59 != (char *)v58) {
        *(void *)uint64_t v34 = *(void *)v38;
      }
      uint64_t v33 = v38;
      if (v38 <= v52) {
        goto LABEL_42;
      }
LABEL_31:
      v34 -= 8;
      a2 = v35;
      if (v35 <= v36) {
        goto LABEL_42;
      }
    }
    uint64_t v33 = (char *)v58;
    uint64_t v35 = v57;
    if (v59 != v60 || v34 >= v60) {
      *(void *)uint64_t v34 = *(void *)v57;
    }
    unint64_t v67 = v35;
LABEL_30:
    uint64_t v36 = v56;
    if (v33 <= v64) {
      goto LABEL_42;
    }
    goto LABEL_31;
  }
  if (v13 >= -7)
  {
    if (v11 != a1 || &a1[8 * v15] <= v11)
    {
      memmove(v11, a1, 8 * v15);
      uint64_t v11 = v64;
    }
    uint64_t v59 = &v11[8 * v15];
    unint64_t v65 = v59;
    if (v13 >= 8 && a2 < v60)
    {
      unint64_t v58 = v8 + 8;
      uint64_t v18 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v19 = v63;
      do
      {
        uint64_t v64 = v11;
        uint64_t v20 = *(void *)v11;
        uint64_t v21 = *(void (**)(uint64_t))(**(void **)a2 + 312);
        swift_retain();
        uint64_t v22 = swift_retain();
        double v23 = v61;
        v21(v22);
        Date.timeIntervalSinceReferenceDate.getter();
        double v25 = v24;
        char v26 = *v18;
        uint64_t v27 = ((uint64_t (*)(char *, uint64_t))*v18)(v23, v19);
        double v28 = v62;
        (*(void (**)(uint64_t))(*(void *)v20 + 312))(v27);
        Date.timeIntervalSinceReferenceDate.getter();
        double v30 = v29;
        v26(v28, v19);
        swift_release();
        swift_release();
        if (v25 >= v30)
        {
          uint64_t v32 = v64;
          if (a1 != v64) {
            *(void *)a1 = *(void *)v64;
          }
          uint64_t v11 = v32 + 8;
          uint64_t v66 = v11;
          uint64_t v31 = a2;
        }
        else
        {
          uint64_t v11 = v64;
          uint64_t v31 = a2 + 8;
          if (a1 < a2 || a1 >= v31 || a1 != a2) {
            *(void *)a1 = *(void *)a2;
          }
        }
        a1 += 8;
        unint64_t v67 = a1;
        if (v11 >= v59) {
          break;
        }
        a2 = v31;
      }
      while (v31 < v60);
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v67, &v66, &v65);
    return 1;
  }
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (**v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t result;
  uint64_t v50;
  void (**v51)(char *, uint64_t);
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;

  uint64_t v59 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v59 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v59);
  unint64_t v58 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v56 = a3;
  uint64_t v57 = (char *)&v50 - v11;
  uint64_t v12 = a2 - a1;
  uint64_t v13 = a2 - a1 + 7;
  if (a2 - a1 >= 0) {
    uint64_t v13 = a2 - a1;
  }
  uint64_t v14 = v13 >> 3;
  uint64_t v15 = a2;
  uint64_t v16 = a3 - a2;
  uint64_t v17 = v16 / 8;
  uint64_t v63 = a1;
  unint64_t v62 = a4;
  if (v13 >> 3 >= v16 / 8)
  {
    if (v16 < -7) {
      goto LABEL_43;
    }
    if (a4 != v15 || &v15[8 * v17] <= a4) {
      memmove(a4, v15, 8 * v17);
    }
    uint64_t v32 = &a4[8 * v17];
    int64_t v61 = v32;
    uint64_t v63 = v15;
    if (v16 < 8 || a1 >= v15) {
      goto LABEL_42;
    }
    double v51 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v52 = a1;
    uint64_t v33 = v56 - 8;
    uint64_t v34 = v15;
    uint64_t v60 = a4;
    while (1)
    {
      unint64_t v56 = v15;
      uint64_t v54 = (unint64_t)v32;
      uint64_t v55 = v33 + 8;
      uint64_t v37 = v32 - 8;
      uint64_t v36 = *((void *)v32 - 1);
      uint64_t v38 = *((void *)v34 - 1);
      unint64_t v53 = v34 - 8;
      uint64_t v39 = *(uint64_t (**)(uint64_t))(*(void *)v36 + 320);
      swift_retain();
      uint64_t v40 = swift_retain();
      uint64_t v41 = v57;
      uint64_t v42 = v39(v40);
      double v43 = v58;
      (*(void (**)(uint64_t))(*(void *)v38 + 320))(v42);
      double v44 = static Date.< infix(_:_:)();
      unint64_t v45 = *v51;
      unint64_t v46 = v43;
      uint64_t v47 = v59;
      (*v51)(v46, v59);
      v45(v41, v47);
      swift_release();
      swift_release();
      if (v44) {
        break;
      }
      int64_t v61 = v37;
      uint64_t v34 = v56;
      if ((unint64_t)v55 < v54 || (unint64_t)v33 >= v54)
      {
        *(void *)uint64_t v33 = *(void *)v37;
        uint64_t v32 = v37;
        goto LABEL_30;
      }
      uint64_t v48 = v60;
      uint64_t v35 = v52;
      if (v55 != (char *)v54) {
        *(void *)uint64_t v33 = *(void *)v37;
      }
      uint64_t v32 = v37;
      if (v37 <= v48) {
        goto LABEL_42;
      }
LABEL_31:
      v33 -= 8;
      uint64_t v15 = v34;
      if (v34 <= v35) {
        goto LABEL_42;
      }
    }
    uint64_t v32 = (char *)v54;
    uint64_t v34 = v53;
    if (v55 != v56 || v33 >= v56) {
      *(void *)uint64_t v33 = *(void *)v53;
    }
    uint64_t v63 = v34;
LABEL_30:
    uint64_t v35 = v52;
    if (v32 <= v60) {
      goto LABEL_42;
    }
    goto LABEL_31;
  }
  if (v12 >= -7)
  {
    if (a4 != a1 || &a1[8 * v14] <= a4) {
      memmove(a4, a1, 8 * v14);
    }
    uint64_t v55 = &a4[8 * v14];
    int64_t v61 = v55;
    if (v12 >= 8 && v15 < v56)
    {
      uint64_t v54 = v8 + 8;
      uint64_t v18 = v57;
      uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
      do
      {
        uint64_t v20 = *(void *)v15;
        uint64_t v60 = a4;
        uint64_t v21 = *(void *)a4;
        uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v20 + 320);
        swift_retain();
        double v23 = swift_retain();
        double v24 = v22(v23);
        double v25 = v58;
        (*(void (**)(uint64_t))(*(void *)v21 + 320))(v24);
        char v26 = static Date.< infix(_:_:)();
        uint64_t v27 = *v19;
        double v28 = v25;
        double v29 = v59;
        (*v19)(v28, v59);
        v27(v18, v29);
        swift_release();
        swift_release();
        if (v26)
        {
          double v30 = v15 + 8;
          a4 = v60;
          if (a1 < v15 || a1 >= v30 || a1 != v15) {
            *(void *)a1 = *(void *)v15;
          }
        }
        else
        {
          uint64_t v31 = v60;
          if (a1 != v60) {
            *(void *)a1 = *(void *)v60;
          }
          a4 = v31 + 8;
          unint64_t v62 = a4;
          double v30 = v15;
        }
        a1 += 8;
        uint64_t v63 = a1;
        if (a4 >= v55) {
          break;
        }
        uint64_t v15 = v30;
      }
      while (v30 < v56);
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v63, &v62, &v61);
    return 1;
  }
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (**v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t result;
  uint64_t v50;
  void (**v51)(char *, uint64_t);
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;

  uint64_t v59 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v59 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v59);
  unint64_t v58 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v56 = a3;
  uint64_t v57 = (char *)&v50 - v11;
  uint64_t v12 = a2 - a1;
  uint64_t v13 = a2 - a1 + 7;
  if (a2 - a1 >= 0) {
    uint64_t v13 = a2 - a1;
  }
  uint64_t v14 = v13 >> 3;
  uint64_t v15 = a2;
  uint64_t v16 = a3 - a2;
  uint64_t v17 = v16 / 8;
  uint64_t v63 = a1;
  unint64_t v62 = a4;
  if (v13 >> 3 >= v16 / 8)
  {
    if (v16 < -7) {
      goto LABEL_43;
    }
    if (a4 != v15 || &v15[8 * v17] <= a4) {
      memmove(a4, v15, 8 * v17);
    }
    uint64_t v32 = &a4[8 * v17];
    int64_t v61 = v32;
    uint64_t v63 = v15;
    if (v16 < 8 || a1 >= v15) {
      goto LABEL_42;
    }
    double v51 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v52 = a1;
    uint64_t v33 = v56 - 8;
    uint64_t v34 = v15;
    uint64_t v60 = a4;
    while (1)
    {
      unint64_t v56 = v15;
      uint64_t v54 = (unint64_t)v32;
      uint64_t v55 = v33 + 8;
      uint64_t v37 = v32 - 8;
      uint64_t v36 = *((void *)v32 - 1);
      uint64_t v38 = *((void *)v34 - 1);
      unint64_t v53 = v34 - 8;
      uint64_t v39 = *(uint64_t (**)(uint64_t))(*(void *)v36 + 224);
      swift_retain();
      uint64_t v40 = swift_retain();
      uint64_t v41 = v57;
      uint64_t v42 = v39(v40);
      double v43 = v58;
      (*(void (**)(uint64_t))(*(void *)v38 + 224))(v42);
      double v44 = static Date.< infix(_:_:)();
      unint64_t v45 = *v51;
      unint64_t v46 = v43;
      uint64_t v47 = v59;
      (*v51)(v46, v59);
      v45(v41, v47);
      swift_release();
      swift_release();
      if (v44) {
        break;
      }
      int64_t v61 = v37;
      uint64_t v34 = v56;
      if ((unint64_t)v55 < v54 || (unint64_t)v33 >= v54)
      {
        *(void *)uint64_t v33 = *(void *)v37;
        uint64_t v32 = v37;
        goto LABEL_30;
      }
      uint64_t v48 = v60;
      uint64_t v35 = v52;
      if (v55 != (char *)v54) {
        *(void *)uint64_t v33 = *(void *)v37;
      }
      uint64_t v32 = v37;
      if (v37 <= v48) {
        goto LABEL_42;
      }
LABEL_31:
      v33 -= 8;
      uint64_t v15 = v34;
      if (v34 <= v35) {
        goto LABEL_42;
      }
    }
    uint64_t v32 = (char *)v54;
    uint64_t v34 = v53;
    if (v55 != v56 || v33 >= v56) {
      *(void *)uint64_t v33 = *(void *)v53;
    }
    uint64_t v63 = v34;
LABEL_30:
    uint64_t v35 = v52;
    if (v32 <= v60) {
      goto LABEL_42;
    }
    goto LABEL_31;
  }
  if (v12 >= -7)
  {
    if (a4 != a1 || &a1[8 * v14] <= a4) {
      memmove(a4, a1, 8 * v14);
    }
    uint64_t v55 = &a4[8 * v14];
    int64_t v61 = v55;
    if (v12 >= 8 && v15 < v56)
    {
      uint64_t v54 = v8 + 8;
      uint64_t v18 = v57;
      uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
      do
      {
        uint64_t v20 = *(void *)v15;
        uint64_t v60 = a4;
        uint64_t v21 = *(void *)a4;
        uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v20 + 224);
        swift_retain();
        double v23 = swift_retain();
        double v24 = v22(v23);
        double v25 = v58;
        (*(void (**)(uint64_t))(*(void *)v21 + 224))(v24);
        char v26 = static Date.< infix(_:_:)();
        uint64_t v27 = *v19;
        double v28 = v25;
        double v29 = v59;
        (*v19)(v28, v59);
        v27(v18, v29);
        swift_release();
        swift_release();
        if (v26)
        {
          double v30 = v15 + 8;
          a4 = v60;
          if (a1 < v15 || a1 >= v30 || a1 != v15) {
            *(void *)a1 = *(void *)v15;
          }
        }
        else
        {
          uint64_t v31 = v60;
          if (a1 != v60) {
            *(void *)a1 = *(void *)v60;
          }
          a4 = v31 + 8;
          unint64_t v62 = a4;
          double v30 = v15;
        }
        a1 += 8;
        uint64_t v63 = a1;
        if (a4 >= v55) {
          break;
        }
        uint64_t v15 = v30;
      }
      while (v30 < v56);
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v63, &v62, &v61);
    return 1;
  }
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static SiriExecutionTaskFactory.getTaskStepDescription(taskStepType:)()
{
  return 0;
}

uint64_t specialized TaskSuccess.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696C707041746F6ELL && a2 == 0xED0000656C626163 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x75636C6143746F6ELL && a2 == 0xED0000646574616CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6673736563637573 && a2 == 0xEA00000000006C75 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7365636375736E75 && a2 == 0xEC0000006C756673)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized TaskSuccess.init(from:)(void *a1)
{
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.UnsuccessfulCodingKeys>);
  uint64_t v34 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  double v44 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.SuccessfulCodingKeys>);
  uint64_t v40 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  double v43 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.NotCalculatedCodingKeys>);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.NotApplicableCodingKeys>);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.UnknownCodingKeys>);
  uint64_t v33 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  unint64_t v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys();
  uint64_t v17 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    unint64_t v46 = v11;
    uint64_t v31 = v9;
    uint64_t v32 = v13;
    uint64_t v18 = v8;
    uint64_t v20 = v42;
    uint64_t v19 = v43;
    uint64_t v21 = v44;
    uint64_t v22 = v15;
    uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v23 + 16) == 1)
    {
      uint64_t v15 = *(unsigned __int8 *)(v23 + 32);
      switch(*(unsigned char *)(v23 + 32))
      {
        case 1:
          uint64_t v30 = v32;
          char v48 = 1;
          lazy protocol witness table accessor for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
          goto LABEL_12;
        case 2:
          uint64_t v30 = v32;
          char v49 = 2;
          lazy protocol witness table accessor for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v39);
LABEL_12:
          swift_bridgeObjectRelease();
          uint64_t v24 = v30;
          goto LABEL_10;
        case 3:
          uint64_t v24 = v32;
          char v50 = 3;
          lazy protocol witness table accessor for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v37);
          goto LABEL_13;
        case 4:
          char v51 = 4;
          lazy protocol witness table accessor for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v41);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v12);
          break;
        default:
          uint64_t v24 = v32;
          char v47 = 0;
          lazy protocol witness table accessor for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys();
          double v25 = v46;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v31);
LABEL_13:
          swift_bridgeObjectRelease();
LABEL_10:
          (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v12);
          break;
      }
    }
    else
    {
      uint64_t v26 = type metadata accessor for DecodingError();
      uint64_t v15 = swift_allocError();
      double v28 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *double v28 = &type metadata for TaskSuccess;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x263F8DCB0], v26);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v12);
    }
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
  return v15;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys);
  }
  return result;
}

uint64_t specialized TaskCompletionType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6F646E616261 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C6C65636E6163 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6574656C706D6F63 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized TaskCompletionType.init(from:)(void *a1)
{
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.CompletedCodingKeys>);
  uint64_t v34 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  double v44 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.FailedCodingKeys>);
  uint64_t v40 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  double v43 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.CancelledCodingKeys>);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.AbandonedCodingKeys>);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.UnknownCodingKeys>);
  uint64_t v33 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  unint64_t v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys();
  uint64_t v17 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    unint64_t v46 = v11;
    uint64_t v31 = v9;
    uint64_t v32 = v13;
    uint64_t v18 = v8;
    uint64_t v20 = v42;
    uint64_t v19 = v43;
    uint64_t v21 = v44;
    uint64_t v22 = v15;
    uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v23 + 16) == 1)
    {
      uint64_t v15 = *(unsigned __int8 *)(v23 + 32);
      switch(*(unsigned char *)(v23 + 32))
      {
        case 1:
          uint64_t v30 = v32;
          char v48 = 1;
          lazy protocol witness table accessor for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
          goto LABEL_12;
        case 2:
          uint64_t v30 = v32;
          char v49 = 2;
          lazy protocol witness table accessor for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v39);
LABEL_12:
          swift_bridgeObjectRelease();
          uint64_t v24 = v30;
          goto LABEL_10;
        case 3:
          uint64_t v24 = v32;
          char v50 = 3;
          lazy protocol witness table accessor for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v37);
          goto LABEL_13;
        case 4:
          char v51 = 4;
          lazy protocol witness table accessor for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v41);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v12);
          break;
        default:
          uint64_t v24 = v32;
          char v47 = 0;
          lazy protocol witness table accessor for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys();
          double v25 = v46;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v31);
LABEL_13:
          swift_bridgeObjectRelease();
LABEL_10:
          (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v12);
          break;
      }
    }
    else
    {
      uint64_t v26 = type metadata accessor for DecodingError();
      uint64_t v15 = swift_allocError();
      double v28 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *double v28 = &type metadata for TaskCompletionType;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x263F8DCB0], v26);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v12);
    }
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
  return v15;
}

unint64_t lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys);
  }
  return result;
}

uint64_t specialized TaskInteractionType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736564756C636E69 && a2 == 0xEE0074706D6F7250;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736564756C636E69 && a2 == 0xEF6D7269666E6F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000224F66D50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000224F66D70)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized TaskInteractionType.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskInteractionType.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  char v19 = 0;
  char v7 = KeyedDecodingContainer.decode(_:forKey:)();
  char v18 = 1;
  char v8 = KeyedDecodingContainer.decode(_:forKey:)();
  char v17 = 2;
  char v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v16 = 3;
  char v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  if (v11) {
    int v12 = 0x1000000;
  }
  else {
    int v12 = 0;
  }
  if (v10) {
    int v13 = 0x10000;
  }
  else {
    int v13 = 0;
  }
  if (v8) {
    int v14 = 256;
  }
  else {
    int v14 = 0;
  }
  return v14 & 0xFFFFFFFE | v7 & 1 | v13 | v12;
}

unint64_t lazy protocol witness table accessor for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess and conformance TaskSuccess()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess;
  if (!lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess;
  if (!lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskInteractionType and conformance TaskInteractionType()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskInteractionType and conformance TaskInteractionType;
  if (!lazy protocol witness table cache variable for type TaskInteractionType and conformance TaskInteractionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType and conformance TaskInteractionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType and conformance TaskCompletionType()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType;
  if (!lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType;
  if (!lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for EngagementUnderstandingFeatures()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SiriExecutionStep(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for SiriExecutionStep);
}

uint64_t type metadata accessor for SiriExecutionTask(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for SiriExecutionTask);
}

uint64_t type metadata accessor for SiriExecutionStep(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_224EF5620@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_224EF566C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 112))(*a1);
}

uint64_t sub_224EF56B4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result & 1;
  a2[1] = BYTE1(result) & 1;
  a2[2] = BYTE2(result) & 1;
  a2[3] = BYTE3(result) & 1;
  return result;
}

uint64_t sub_224EF571C(unsigned __int8 *a1, uint64_t a2)
{
  if (a1[3]) {
    int v2 = 0x1000000;
  }
  else {
    int v2 = 0;
  }
  if (a1[2]) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  if (a1[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(v4 | *a1 | v3 | v2);
}

uint64_t sub_224EF57A0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_224EF57EC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 160))(*a1);
}

uint64_t sub_224EF5834@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF5880(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 160);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF58E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF5934(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 184);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF599C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_224EF59E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_224EF5A3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_224EF5A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 232);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_224EF5ADC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF5B28(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 256);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF5B98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 272))();
  *a2 = result;
  return result;
}

uint64_t sub_224EF5BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 280);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_224EF5C48@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 296))();
  *a2 = result;
  return result;
}

uint64_t sub_224EF5C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 304);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_224EF5CF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 320))();
}

uint64_t sub_224EF5D48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 344))();
}

uint64_t sub_224EF5D98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF5DE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF5E4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF5E98(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 176);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF5F00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF5F4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 200);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF5FB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF6000(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 224);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF6068@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 240))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF60B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 248);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF611C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 264))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF6170(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 272);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF61E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 288))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224EF6234(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 296);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224EF62A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 312))();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for TaskSuccess()
{
  return &type metadata for TaskSuccess;
}

ValueMetadata *type metadata accessor for TaskCompletionType()
{
  return &type metadata for TaskCompletionType;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TaskInteractionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[4]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskInteractionType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TaskInteractionType()
{
  return &type metadata for TaskInteractionType;
}

uint64_t method lookup function for EngagementUnderstandingFeatures(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EngagementUnderstandingFeatures);
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskSuccess.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskSuccess.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskSuccess.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskInteractionType.getter()
{
  int v1 = (*(uint64_t (**)(void))(*(void *)v0 + 128))();
  return v1 & 1 | ((BYTE1(v1) & 1) << 8) | ((BYTE2(v1) & 1) << 16) | ((HIBYTE(v1) & 1) << 24);
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskInteractionType.setter(int a1)
{
  return (*(uint64_t (**)(void))(*(void *)v1 + 136))(a1 & 0x1010101);
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskInteractionType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskCompletionType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskCompletionType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskCompletionType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.__allocating_init(taskSuccess:taskCompletionType:taskInteractionType:)(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 176))(a1, a2, a3 & 0x1010101);
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isUserAbandoned.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isUserCanceled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isSiriCompleted.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isPromptInteraction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isConfirmInteraction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isDisambiguateInteraction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isUnsupportedPromptInteraction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isFailed.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t ObjC metadata update function for SiriExecutionTask()
{
  return type metadata accessor for SiriExecutionTask(0);
}

uint64_t type metadata completion function for SiriExecutionTask()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SiriExecutionTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SiriExecutionTask);
}

uint64_t dispatch thunk of SiriExecutionTask.uiSessionId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SiriExecutionTask.uiSessionId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SiriExecutionTask.uiSessionId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SiriExecutionTask.requestIds.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SiriExecutionTask.requestIds.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SiriExecutionTask.requestIds.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SiriExecutionTask.appPattern.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SiriExecutionTask.appPattern.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SiriExecutionTask.appPattern.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of SiriExecutionTask.conversationPath.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of SiriExecutionTask.conversationPath.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of SiriExecutionTask.conversationPath.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of SiriExecutionTask.engagementFeatures.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of SiriExecutionTask.engagementFeatures.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of SiriExecutionTask.engagementFeatures.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of SiriExecutionTask.startTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of SiriExecutionTask.startTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of SiriExecutionTask.startTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of SiriExecutionTask.endTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of SiriExecutionTask.endTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of SiriExecutionTask.endTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of SiriExecutionTask.__allocating_init(uiSessionId:taskId:requestIds:appPattern:taskType:conversationPath:engagementFeatures:startTime:endTime:)()
{
  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t dispatch thunk of SiriExecutionTask.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t ObjC metadata update function for SiriExecutionStep()
{
  return type metadata accessor for SiriExecutionStep(0);
}

uint64_t type metadata completion function for SiriExecutionStep()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SiriExecutionStep(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SiriExecutionStep);
}

uint64_t dispatch thunk of SiriExecutionStep.appBundleId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SiriExecutionStep.appBundleId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SiriExecutionStep.appBundleId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SiriExecutionStep.intentName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SiriExecutionStep.intentName.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SiriExecutionStep.intentName.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SiriExecutionStep.interactionId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SiriExecutionStep.interactionId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SiriExecutionStep.interactionId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SiriExecutionStep.slotValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SiriExecutionStep.slotValue.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SiriExecutionStep.slotValue.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SiriExecutionStep.statusReason.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of SiriExecutionStep.statusReason.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of SiriExecutionStep.statusReason.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskStep.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskStep.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskStep.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of SiriExecutionStep.eventTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of SiriExecutionStep.eventTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of SiriExecutionStep.eventTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of SiriExecutionStep.__allocating_init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)()
{
  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of SiriExecutionStep.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t type metadata accessor for SiriExecutionTaskFactory()
{
  return self;
}

uint64_t method lookup function for SiriExecutionTaskFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SiriExecutionTaskFactory);
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.convertBiomeEventToSiriExecutionStep(bmEvent:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.processBiomeEventsToTask(siriExecutionEvents:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.loadTaskEntities(steps:siriUISessionId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.calculateEngagementUnderstandingFeatures(conversationPath:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of static SiriExecutionTaskFactory.getTaskStepDescription(taskStepType:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static SiriExecutionTaskFactory.isTerminalTaskStep(taskStep:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t getEnumTagSinglePayload for SiriExecutionStep.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SiriExecutionStep.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224EF73E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for SiriExecutionStep.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for SiriExecutionStep.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *type metadata accessor for SiriExecutionStep.CodingKeys()
{
  return &unk_26D84E010;
}

uint64_t getEnumTagSinglePayload for SiriExecutionTask.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SiriExecutionTask.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224EF758CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SiriExecutionTask.CodingKeys()
{
  return &unk_26D84E0A0;
}

uint64_t getEnumTagSinglePayload for EngagementUnderstandingFeatures.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EngagementUnderstandingFeatures.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224EF7720);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for EngagementUnderstandingFeatures.CodingKeys()
{
  return &unk_26D84E130;
}

uint64_t getEnumTagSinglePayload for TaskInteractionType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TaskInteractionType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224EF78B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TaskInteractionType.CodingKeys()
{
  return &unk_26D84E1C0;
}

void *type metadata accessor for TaskCompletionType.CodingKeys()
{
  return &unk_26D84E250;
}

void *type metadata accessor for TaskCompletionType.UnknownCodingKeys()
{
  return &unk_26D84E270;
}

void *type metadata accessor for TaskCompletionType.AbandonedCodingKeys()
{
  return &unk_26D84E290;
}

void *type metadata accessor for TaskCompletionType.CancelledCodingKeys()
{
  return &unk_26D84E2B0;
}

void *type metadata accessor for TaskCompletionType.FailedCodingKeys()
{
  return &unk_26D84E2D0;
}

void *type metadata accessor for TaskCompletionType.CompletedCodingKeys()
{
  return &unk_26D84E2F0;
}

uint64_t getEnumTagSinglePayload for TaskSuccess(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TaskSuccess(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224EF7AA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TaskSuccess.CodingKeys()
{
  return &unk_26D84E380;
}

void *type metadata accessor for TaskSuccess.UnknownCodingKeys()
{
  return &unk_26D84E3A0;
}

void *type metadata accessor for TaskSuccess.NotApplicableCodingKeys()
{
  return &unk_26D84E3C0;
}

void *type metadata accessor for TaskSuccess.NotCalculatedCodingKeys()
{
  return &unk_26D84E3E0;
}

void *type metadata accessor for TaskSuccess.SuccessfulCodingKeys()
{
  return &unk_26D84E400;
}

void *type metadata accessor for TaskSuccess.UnsuccessfulCodingKeys()
{
  return &unk_26D84E420;
}

uint64_t specialized EngagementUnderstandingFeatures.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x636375536B736174 && a2 == 0xEB00000000737365;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000224F66BB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000224F66BD0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized SiriExecutionTask.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F69737365536975 && a2 == 0xEB0000000064496ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64496B736174 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4974736575716572 && a2 == 0xEA00000000007364 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574746150707061 && a2 == 0xEA00000000006E72 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x657079546B736174 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000224F66C50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000224F66C70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6D69547472617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656D6954646E65 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t specialized SiriExecutionStep.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C646E7542707061 && a2 == 0xEB00000000644965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614E746E65746E69 && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7463617265746E69 && a2 == 0xED000064496E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756C6156746F6C73 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6552737574617473 && a2 == 0xEC0000006E6F7361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x64496B736174 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x706574536B736174 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6D6954746E657665 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t PSEGenericSELFEmitter.emitPSEGeneric(appLaunchSignals:task:)(uint64_t a1, uint64_t a2)
{
  void (*v47)(Swift::String *__return_ptr, uint64_t);
  uint64_t v48;
  double v49;
  id v50;
  uint64_t v51;
  uint64_t (*v52)(void);
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  Class isa;
  id v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  id v87;
  uint64_t v88;
  int v89;
  char **v90;
  uint64_t v91;
  char *v92;
  id v93;
  Class v94;
  id v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  id v107;
  Class v108;
  id v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  id v120;
  id v121;
  Class v122;
  id v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  id v135;
  Class v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t);
  char *v141;
  void (*v142)(char *, uint64_t);
  uint64_t v143;
  void *v144;
  char *v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  Swift::String v161;
  long long v162;

  uint64_t v158 = a2;
  uint64_t v4 = type metadata accessor for ReliabilityCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  v156 = (char *)&v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v154 = (char *)&v137 - v12;
  MEMORY[0x270FA5388](v11);
  v155 = (char *)&v137 - v13;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v157 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  char v17 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  v152 = (char *)&v137 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v153 = (char *)&v137 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v137 - v22;
  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB10]), sel_init);
  if (!v24) {
    goto LABEL_28;
  }
  double v25 = v24;
  uint64_t v150 = v17;
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB18]), sel_init);
  if (!v26)
  {
LABEL_27:

LABEL_28:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.engagement);
    uint64_t v37 = *MEMORY[0x263F75020];
    uint64_t v38 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104))(v7, v37, v38);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F75118], v4);
    Logger.debug(_:_:)(0xD000000000000030, 0x8000000224F673C0, (uint64_t)v7);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  id v27 = v26;
  uint64_t v151 = v4;
  uint64_t v149 = v2;
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB28]), sel_init);
  if (!v28)
  {
    id v29 = v27;
LABEL_26:

    double v25 = v29;
    uint64_t v4 = v151;
    goto LABEL_27;
  }
  id v29 = v28;
  v147 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB20]), sel_init);
  if (!v147)
  {

    double v25 = v27;
    goto LABEL_26;
  }
  v144 = v29;
  uint64_t v146 = v27;
  uint64_t v138 = v25;
  uint64_t v148 = v14;
  unint64_t v141 = v7;
  uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
  v161._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v31 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v145 = v23;
  uint64_t v139 = v5;
  if (!v31)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_43;
    }
LABEL_32:
    if ((v2 & 0x4000000000000000) != 0) {
      goto LABEL_43;
    }
    if (*(void *)(v2 + 16)) {
      goto LABEL_34;
    }
LABEL_44:
    swift_release();
    uint64_t v14 = 0;
    v161._uint64_t countAndFlagsBits = countAndFlagsBits;
    if (!v31) {
      goto LABEL_60;
    }
LABEL_45:
    if (v31 < 1) {
      goto LABEL_129;
    }
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v31; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v41 = MEMORY[0x22A627400](i, a1);
      }
      else
      {
        uint64_t v41 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      if ((*(uint64_t (**)(void))(*(void *)v41 + 168))() == 1769105747 && v42 == 0xE400000000000000)
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v44)
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v161._countAndFlagsBits;
    uint64_t v5 = v139;
    uint64_t v23 = v145;
LABEL_60:
    id v27 = v147;
    uint64_t v31 = v149;
    if (countAndFlagsBits < 0 || (countAndFlagsBits & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v46)
      {
LABEL_63:
        if ((countAndFlagsBits & 0xC000000000000001) != 0) {
          goto LABEL_130;
        }
        if (*(void *)(countAndFlagsBits + 16))
        {
          uint64_t v45 = *(void *)(countAndFlagsBits + 32);
          swift_retain();
          goto LABEL_66;
        }
        __break(1u);
LABEL_132:
        swift_once();
LABEL_121:
        uint64_t v113 = type metadata accessor for Logger();
        __swift_project_value_buffer(v113, (uint64_t)static Logger.engagement);
        v114 = *MEMORY[0x263F75038];
        uint64_t v115 = type metadata accessor for EngagementSignalCollectionError();
        v116 = (uint64_t)v141;
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v115 - 8) + 104))(v141, v114, v115);
        v117 = v151;
        (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v116, *MEMORY[0x263F75118], v151);
        Logger.debug(_:_:)(0xD000000000000024, 0x8000000224F666F0, v116);
        uint64_t v118 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v116, v117);
        uint64_t v119 = v138;
        uint64_t v120 = v146;
        char v51 = v158;
        goto LABEL_123;
      }
    }
    else if (*(void *)(countAndFlagsBits + 16))
    {
      goto LABEL_63;
    }
    swift_release();
    uint64_t v45 = 0;
    goto LABEL_69;
  }
  if (v31 < 1)
  {
    __break(1u);
LABEL_127:
    uint64_t v14 = MEMORY[0x22A627400](0, v2);
LABEL_37:
    swift_release();
    v161._uint64_t countAndFlagsBits = countAndFlagsBits;
    if (!v31) {
      goto LABEL_60;
    }
    goto LABEL_45;
  }
  uint64_t v32 = 0;
  uint64_t v14 = 0xE400000000000000;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      id v27 = (id)MEMORY[0x22A627400](v32, a1);
    }
    else
    {
      id v27 = *(id *)(a1 + 8 * v32 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v27 + 168))() == 1769105747 && v33 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_11:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_12;
    }
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_11;
    }
    swift_release();
LABEL_12:
    ++v32;
  }
  while (v31 != v32);
  swift_bridgeObjectRelease();
  uint64_t v2 = v161._countAndFlagsBits;
  uint64_t v5 = v139;
  uint64_t v23 = v145;
  if ((v161._countAndFlagsBits & 0x8000000000000000) == 0) {
    goto LABEL_32;
  }
LABEL_43:
  swift_bridgeObjectRetain();
  id v27 = (id)_CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v27) {
    goto LABEL_44;
  }
LABEL_34:
  if ((v2 & 0xC000000000000001) != 0) {
    goto LABEL_127;
  }
  if (*(void *)(v2 + 16))
  {
    uint64_t v14 = *(void *)(v2 + 32);
    swift_retain();
    goto LABEL_37;
  }
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  uint64_t v45 = MEMORY[0x22A627400](0, countAndFlagsBits);
LABEL_66:
  swift_release();
LABEL_69:
  uint64_t v143 = v45;
  objc_msgSend(v27, sel_setIsDonatedBySiri_, 1);
  v137 = v14;
  if (v14)
  {
    char v47 = *(void (**)(Swift::String *__return_ptr, uint64_t))(*(void *)v14 + 120);
    char v48 = swift_retain();
    v47(&v161, v48);
    swift_release();
    char v49 = *(double *)&v161._countAndFlagsBits;
  }
  else
  {
    char v49 = -1.0;
  }
  char v50 = objc_msgSend(v27, sel_setEventDonationTimeInSecondsSince2001_, v49, v137);
  char v51 = v158;
  uint64_t v52 = *(uint64_t (**)(void))(*(void *)v158 + 248);
  unint64_t v53 = ((uint64_t (*)(id))v52)(v50);
  uint64_t v54 = (void *)MEMORY[0x22A626F60](v53);
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_setDomain_, v54);

  uint64_t v55 = v52();
  unint64_t v56 = (void *)MEMORY[0x22A626F60](v55);
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_setAction_, v56);

  uint64_t v57 = v143;
  if (v143)
  {
    swift_retain();
    (*(void (**)(Swift::String *__return_ptr, id))(*(void *)v57 + 120))(&v161, objc_msgSend(v27, sel_setHasUserInitiatedFollowup_, 1));
    unint64_t v58 = (*(uint64_t (**)(id))(*(void *)v57 + 168))(objc_msgSend(v27, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v161._countAndFlagsBits));
    uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 136))(v58);
    swift_bridgeObjectRelease();
    ((void (*)(id))v52)(objc_msgSend(v27, sel_setAppLaunchReason_, v59));
    uint64_t v60 = String.lowercased()();
    swift_bridgeObjectRelease();
    v161 = v60;
    v159 = 1936744813;
    int64_t v160 = 0xE400000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    LOBYTE(v59) = StringProtocol.contains<A>(_:)();
    int64_t v61 = swift_bridgeObjectRelease();
    if (v59)
    {
      unint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 216))(v61);
      if (*(void *)(v62 + 16))
      {
        uint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F66680);
        uint64_t v64 = v157;
        unint64_t v65 = v144;
        if (v66)
        {
          outlined init with copy of Any(*(void *)(v62 + 56) + 32 * v63, (uint64_t)&v161);
        }
        else
        {
          v161 = (Swift::String)0;
          v162 = 0u;
        }
      }
      else
      {
        v161 = (Swift::String)0;
        v162 = 0u;
        uint64_t v64 = v157;
        unint64_t v65 = v144;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v162 + 1))
      {
        unint64_t v77 = swift_dynamicCast();
        uint64_t v78 = v77 == 0;
        if (v77) {
          unint64_t v79 = v159;
        }
        else {
          unint64_t v79 = 0;
        }
        if (v78) {
          uint64_t v80 = 0;
        }
        else {
          uint64_t v80 = v160;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v161, &demangling cache variable for type metadata for Any?);
        unint64_t v79 = 0;
        uint64_t v80 = 0;
      }
      uint64_t v76 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v31 + 128))(v79, v80);
    }
    else
    {
      unint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 216))(v61);
      if (*(void *)(v67 + 16)
        && (uint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F66680),
            (v69 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v67 + 56) + 32 * v68, (uint64_t)&v161);
      }
      else
      {
        v161 = (Swift::String)0;
        v162 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v162 + 1))
      {
        BOOL v70 = swift_dynamicCast();
        if (v70) {
          unint64_t v71 = v159;
        }
        else {
          unint64_t v71 = 0;
        }
        if (v70) {
          unint64_t v72 = v160;
        }
        else {
          unint64_t v72 = 0;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v161, &demangling cache variable for type metadata for Any?);
        unint64_t v71 = 0;
        unint64_t v72 = 0;
      }
      unint64_t v73 = (void *)(*(uint64_t (**)(void))(*(void *)v51 + 224))();
      if (v73[2])
      {
        char v74 = v73[4];
        uint64_t v75 = v73[5];
        swift_bridgeObjectRetain();
      }
      else
      {
        char v74 = 0;
        uint64_t v75 = 0;
      }
      swift_bridgeObjectRelease();
      uint64_t v76 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v149 + 120))(v71, v72, v74, v75);
      swift_bridgeObjectRelease();
      unint64_t v65 = v144;
      id v27 = v147;
      uint64_t v64 = v157;
    }
    swift_bridgeObjectRelease();
    objc_msgSend(v27, sel_setAppFollowup_, v76);
    if (objc_msgSend(v27, sel_appFollowup) == 4)
    {
      BOOL v81 = (*(uint64_t (**)(void))(*(void *)v51 + 296))();
      (*(void (**)(uint64_t))(*(void *)v81 + 112))(4);
      swift_release();
    }
    swift_release();
  }
  else
  {
    objc_msgSend(v27, sel_setHasUserInitiatedFollowup_, 0);
    objc_msgSend(v27, sel_setAppFollowup_, 3);
    uint64_t v64 = v157;
    unint64_t v65 = v144;
  }
  objc_msgSend(v65, sel_setCommonSignal_, v27);
  UUID.init()();
  uint64_t v82 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v84 = objc_msgSend(v82, sel_initWithNSUUID_, isa);

  unint64_t v85 = *(void (**)(char *, uint64_t))(v64 + 8);
  uint64_t v86 = v148;
  v85(v23, v148);
  unint64_t v87 = v146;
  objc_msgSend(v146, sel_setPseId_, v84);

  (*(void (**)(void))(*(void *)v51 + 152))();
  uint64_t v88 = (uint64_t)v155;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  v140 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  uint64_t v89 = v140(v88, 1, v86);
  v142 = v85;
  if (v89 == 1)
  {
    BOOL v90 = &selRef_init;
    unint64_t v91 = outlined destroy of Any?(v88, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    unint64_t v92 = v153;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v153, v88, v86);
    double v93 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
    uint64_t v94 = UUID._bridgeToObjectiveC()().super.isa;
    BOOL v90 = &selRef_init;
    unint64_t v95 = objc_msgSend(v93, sel_initWithNSUUID_, v94);

    objc_msgSend(v87, sel_setUiSessionId_, v95);
    uint64_t v96 = v92;
    unint64_t v85 = v142;
    unint64_t v91 = ((uint64_t (*)(char *, uint64_t))v142)(v96, v86);
  }
  unint64_t v97 = v150;
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v51 + 200))(v91) + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    Swift::String v98 = (uint64_t)v154;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    char v99 = v148;
    if (v140(v98, 1, v148) == 1)
    {
      outlined destroy of Any?(v98, &demangling cache variable for type metadata for UUID?);
      goto LABEL_115;
    }
    v106 = v152;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v152, v98, v99);
    uint64_t v107 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
    v108 = UUID._bridgeToObjectiveC()().super.isa;
    v109 = objc_msgSend(v107, v90[13], v108);

    objc_msgSend(v146, sel_setOriginalLastRequestId_, v109);
    Swift::String v110 = v106;
    unint64_t v85 = v142;
    Swift::String v105 = ((uint64_t (*)(char *, uint64_t))v142)(v110, v99);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_115:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    Swift::String v100 = type metadata accessor for Logger();
    __swift_project_value_buffer(v100, (uint64_t)static Logger.engagement);
    Swift::String v101 = *MEMORY[0x263F75050];
    Swift::String v102 = type metadata accessor for EngagementSignalCollectionError();
    Swift::String v103 = (uint64_t)v141;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v102 - 8) + 104))(v141, v101, v102);
    uint64_t v104 = v151;
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v103, *MEMORY[0x263F75118], v151);
    Logger.debug(_:_:)(0xD000000000000027, 0x8000000224F666C0, v103);
    Swift::String v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v103, v104);
    char v51 = v158;
  }
  (*(void (**)(uint64_t))(*(void *)v51 + 176))(v105);
  unint64_t v111 = (uint64_t)v156;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  unint64_t v112 = v148;
  if (v140(v111, 1, v148) == 1)
  {
    outlined destroy of Any?(v111, &demangling cache variable for type metadata for UUID?);
    uint64_t v23 = v145;
    if (one-time initialization token for engagement == -1) {
      goto LABEL_121;
    }
    goto LABEL_132;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v97, v111, v112);
  uint64_t v121 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
  v122 = UUID._bridgeToObjectiveC()().super.isa;
  v123 = objc_msgSend(v121, sel_initWithNSUUID_, v122);

  v124 = v97;
  uint64_t v120 = v146;
  objc_msgSend(v146, sel_setTaskId_, v123);

  uint64_t v118 = ((uint64_t (*)(char *, uint64_t))v85)(v124, v112);
  v116 = (uint64_t)v141;
  uint64_t v119 = v138;
  uint64_t v23 = v145;
LABEL_123:
  uint64_t v125 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 296))(v118);
  v126 = (*(uint64_t (**)(uint64_t))(*(void *)v125 + 104))(v125);
  swift_release();
  unint64_t v127 = v149;
  uint64_t v128 = objc_msgSend(v120, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(void *)v149 + 96))(v126));
  objc_msgSend(v120, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(void *)v127 + 112))(v128));
  objc_msgSend(v119, sel_setEventMetadata_, v120);
  uint64_t v129 = v144;
  objc_msgSend(v119, sel_setGenericSignalGenerated_, v144);
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v130 = type metadata accessor for Logger();
  __swift_project_value_buffer(v130, (uint64_t)static Logger.engagement);
  uint64_t v131 = *MEMORY[0x263F75098];
  uint64_t v132 = type metadata accessor for SELFPSELogged();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 104))(v116, v131, v132);
  v133 = v151;
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v116, *MEMORY[0x263F750C8], v151);
  Logger.debug(_:_:)(0xD000000000000037, 0x8000000224F67400, v116);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v116, v133);
  uint64_t v134 = objc_msgSend(self, sel_sharedAnalytics);
  v135 = objc_msgSend(v134, sel_defaultMessageStream);

  UUID.init()();
  v136 = UUID._bridgeToObjectiveC()().super.isa;
  v142(v23, v148);
  objc_msgSend(v135, sel_emitMessage_isolatedStreamUUID_, v119, v136);

  swift_release();
  return swift_release();
}

uint64_t PSEGenericSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSEGenericSELFEmitter.init()()
{
  return v0;
}

uint64_t PSEGenericSELFEmitter.deinit()
{
  return v0;
}

uint64_t PSEGenericSELFEmitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for PSEGenericSELFEmitter()
{
  return self;
}

uint64_t method lookup function for PSEGenericSELFEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEGenericSELFEmitter);
}

uint64_t dispatch thunk of PSEGenericSELFEmitter.emitPSEGeneric(appLaunchSignals:task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t AnswerCallsIntentSignalFactory.donatedBySiriCount.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t AnswerCallsIntentSignalFactory.donatedBySiriCount.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AnswerCallsIntentSignalFactory.donatedBySiriCount.modify())()
{
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t AnswerCallsIntentSignalFactory.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t AnswerCallsIntentSignalFactory.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  return result;
}

void AnswerCallsIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, void *a2)
{
  v417 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  v414 = (char *)&v388 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  v413 = (char *)&v388 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v416 = (uint64_t *)((char *)&v388 - v9);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v415 = (uint64_t *)((char *)&v388 - v11);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  v404 = (char *)&v388 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v403 = (uint64_t)&v388 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  v402 = (char *)&v388 - v17;
  MEMORY[0x270FA5388](v16);
  v401 = (char *)&v388 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  v408 = (char *)&v388 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v409 = (char *)&v388 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  v407 = (char *)&v388 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  v411 = (uint64_t *)((char *)&v388 - v27);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  v398 = (char *)&v388 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  v399 = (char *)&v388 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  v397 = (char *)&v388 - v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v400 = (uint64_t)&v388 - v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v36 = MEMORY[0x270FA5388](v35 - 8);
  v412 = (uint64_t *)((char *)&v388 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v36);
  uint64_t v39 = (char *)&v388 - v38;
  uint64_t v40 = type metadata accessor for ReliabilityCategory();
  v405 = *(void (***)(void, void, void))(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v388 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  char v47 = (char *)&v388 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v48 = (void *)MEMORY[0x22A6277A0](v45);
  id v49 = v418;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, &v422._countAndFlagsBits);
  if (v49)
  {
    return;
  }
  v390 = v47;
  uint64_t v391 = v44;
  v392 = v42;
  uint64_t v394 = v43;
  uint64_t v393 = v40;
  v389 = v39;
  id v396 = a1;
  v418 = 0;
  id countAndFlagsBits = (id)v422._countAndFlagsBits;
  id v395 = objc_msgSend((id)v422._countAndFlagsBits, sel_intent);
  id v50 = objc_msgSend(v395, sel_domain);
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  if (v51 == 0x736C6C6143 && v53 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    id v54 = v396;
    uint64_t v55 = v417;
  }
  else
  {
    char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    id v54 = v396;
    uint64_t v55 = v417;
    if ((v56 & 1) == 0)
    {
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v77 = v394;
      uint64_t v78 = __swift_project_value_buffer(v394, (uint64_t)static Logger.engagement);
      uint64_t v79 = v391;
      uint64_t v80 = v390;
      (*(void (**)(char *, uint64_t, uint64_t))(v391 + 16))(v390, v78, v77);
      v422._id countAndFlagsBits = 0;
      v422._int64_t object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v81._id countAndFlagsBits = 0xD000000000000012;
      v81._int64_t object = (void *)0x8000000224F67470;
      String.append(_:)(v81);
      id v82 = v395;
      id v83 = objc_msgSend(v395, sel_domain);
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v86 = v85;

      v87._id countAndFlagsBits = v84;
      v87._int64_t object = v86;
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      v88._id countAndFlagsBits = 0xD000000000000023;
      v88._int64_t object = (void *)0x8000000224F67490;
      String.append(_:)(v88);
      Swift::String v89 = v422;
      uint64_t v90 = *MEMORY[0x263F75148];
      uint64_t v91 = type metadata accessor for AppIntentEventDataIssues();
      uint64_t v92 = (uint64_t)v392;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v91 - 8) + 104))(v392, v90, v91);
      double v93 = v405;
      uint64_t v94 = v393;
      v405[13](v92, *MEMORY[0x263F750E8], v393);
      Logger.error(_:_:)(v89._countAndFlagsBits, (unint64_t)v89._object, v92);

      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v93[1])(v92, v94);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v394);
      return;
    }
  }
  if (!objc_msgSend(v54, sel_donatedBySiri)) {
    goto LABEL_15;
  }
  id v57 = objc_msgSend(v54, sel_intentClass);
  if (!v57) {
    goto LABEL_15;
  }
  unint64_t v58 = v57;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v59 = String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String v422 = v59;
  *(void *)&long long v420 = 0xD000000000000010;
  *((void *)&v420 + 1) = 0x8000000224F67580;
  uint64_t v55 = v417;
  uint64_t v60 = (void *)lazy protocol witness table accessor for type String and conformance String();
  LOBYTE(v58) = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0)
  {
LABEL_15:
    unsigned __int8 v71 = objc_msgSend(v54, sel_donatedBySiri);
    id v72 = v395;
    if (v71)
    {

      return;
    }
    v426 = (const char *)MEMORY[0x263F8EE80];
    id v73 = objc_msgSend(v54, sel_absoluteTimestamp);
    if (v73)
    {
      char v74 = v73;
      uint64_t v75 = (uint64_t)v412;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v76 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 0, 1, v76);
    }
    else
    {
      uint64_t v95 = type metadata accessor for Date();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v412, 1, 1, v95);
    }
    uint64_t v96 = v407;
    id v97 = objc_msgSend(countAndFlagsBits, sel_dateInterval);
    if (v97)
    {
      Swift::String v98 = v97;
      static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v99 = type metadata accessor for DateInterval();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v96, 0, 1, v99);
    }
    else
    {
      uint64_t v99 = type metadata accessor for DateInterval();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v96, 1, 1, v99);
    }
    uint64_t v100 = (uint64_t)v96;
    uint64_t v101 = (uint64_t)v411;
    outlined init with take of DateInterval?(v100, (uint64_t)v411, &demangling cache variable for type metadata for DateInterval?);
    type metadata accessor for DateInterval();
    uint64_t v102 = v101;
    uint64_t v103 = *(void *)(v99 - 8);
    uint64_t v104 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
    double v105 = 0.0;
    if (!v104(v101, 1, v99))
    {
      DateInterval.duration.getter();
      uint64_t v102 = (uint64_t)v411;
      double v105 = v106;
    }
    outlined destroy of Any?(v102, &demangling cache variable for type metadata for DateInterval?);
    type metadata accessor for Utils();
    uint64_t v107 = (uint64_t)v412;
    static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v412, (uint64_t)v55, (uint64_t)&v422, v105);
    outlined destroy of Any?(v107, &demangling cache variable for type metadata for Date?);
    int64_t object = v422._object;
    uint64_t v108 = v422._countAndFlagsBits;
    uint64_t v111 = *((void *)&v423 + 1);
    uint64_t v110 = v423;
    unint64_t v112 = (char *)v424;
    LODWORD(v403) = v425;
    id v113 = objc_msgSend(countAndFlagsBits, sel_dateInterval);
    if (v113)
    {
      v114 = v113;
      uint64_t v115 = (uint64_t)v408;
      static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v116 = 0;
      uint64_t v117 = (uint64_t)v409;
    }
    else
    {
      uint64_t v116 = 1;
      uint64_t v117 = (uint64_t)v409;
      uint64_t v115 = (uint64_t)v408;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56))(v115, v116, 1, v99);
    outlined init with take of DateInterval?(v115, v117, &demangling cache variable for type metadata for DateInterval?);
    if (v104(v117, 1, v99))
    {
      outlined destroy of Any?(v117, &demangling cache variable for type metadata for DateInterval?);
      *((void *)&v423 + 1) = MEMORY[0x263F8D6C8];
      v422._id countAndFlagsBits = -1;
    }
    else
    {
      DateInterval.duration.getter();
      *((void *)&v421 + 1) = MEMORY[0x263F8D538];
      *(void *)&long long v420 = v118;
      outlined destroy of Any?(v117, &demangling cache variable for type metadata for DateInterval?);
      outlined init with take of Any(&v420, &v422);
      if (!*((void *)&v423 + 1))
      {
        outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for Any?);
        specialized Dictionary._Variant.removeValue(forKey:)(0x617275446C6C6163, 0xEC0000006E6F6974, &v420);
        outlined destroy of Any?((uint64_t)&v420, &demangling cache variable for type metadata for Any?);
LABEL_35:
        id v121 = objc_msgSend(v72, sel_parametersByName);
        uint64_t v122 = MEMORY[0x263F8D310];
        v404 = v112;
        if (v121)
        {
          v123 = v121;
          uint64_t v124 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v124 + 16)
            && (unint64_t v125 = specialized __RawDictionaryStorage.find<A>(_:)(0x756F526F69647561, 0xEA00000000006574),
                (v126 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v124 + 56) + 32 * v125, (uint64_t)&v420);
          }
          else
          {
            long long v420 = 0u;
            long long v421 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v421 + 1))
          {
            outlined init with take of Any(&v420, &v422);
            goto LABEL_44;
          }
        }
        else
        {
          long long v420 = 0u;
          long long v421 = 0u;
        }
        *((void *)&v423 + 1) = v122;
        v422._id countAndFlagsBits = 0;
        v422._int64_t object = (void *)0xE000000000000000;
        outlined destroy of Any?((uint64_t)&v420, &demangling cache variable for type metadata for Any?);
LABEL_44:
        outlined init with take of Any(&v422, &v420);
        unint64_t v127 = v426;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v419 = v127;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x756F526F69647561, 0xEA00000000006574, isUniquelyReferenced_nonNull_native);
        uint64_t v129 = v419;
        swift_bridgeObjectRelease();
        id v130 = v396;
        unsigned __int8 v131 = objc_msgSend(v396, sel_donatedBySiri);
        uint64_t v132 = MEMORY[0x263F8D4F8];
        *((void *)&v423 + 1) = MEMORY[0x263F8D4F8];
        LOBYTE(v422._countAndFlagsBits) = v131;
        outlined init with take of Any(&v422, &v420);
        char v133 = swift_isUniquelyReferenced_nonNull_native();
        v419 = v129;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x42646574616E6F64, 0xED00006972695379, v133);
        uint64_t v134 = v419;
        swift_bridgeObjectRelease();
        id v135 = objc_msgSend(v72, sel_typeName);
        uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v138 = v137;

        *((void *)&v423 + 1) = v122;
        v422._id countAndFlagsBits = v136;
        v422._int64_t object = v138;
        outlined init with take of Any(&v422, &v420);
        char v139 = swift_isUniquelyReferenced_nonNull_native();
        v419 = v134;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x7954746E65746E69, 0xEE00656D614E6570, v139);
        v426 = v419;
        swift_bridgeObjectRelease();
        id v140 = objc_msgSend(v130, sel_bundleID);
        if (v140)
        {
          unint64_t v141 = v140;
          uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v144 = v143;
        }
        else
        {
          uint64_t v142 = 0;
          unint64_t v144 = 0xE000000000000000;
        }
        id v62 = v410;
        v422._id countAndFlagsBits = v142;
        v422._int64_t object = (void *)v144;
        *(void *)&long long v420 = 0x6C7070612E6D6F63;
        *((void *)&v420 + 1) = 0xEA00000000002E65;
        lazy protocol witness table accessor for type String and conformance String();
        char v145 = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        *((void *)&v423 + 1) = v132;
        LOBYTE(v422._countAndFlagsBits) = v145 & 1;
        outlined init with take of Any(&v422, &v420);
        uint64_t v146 = v426;
        char v147 = swift_isUniquelyReferenced_nonNull_native();
        v419 = v146;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000016, 0x8000000224F66760, v147);
        uint64_t v148 = v419;
        v426 = v419;
        swift_bridgeObjectRelease();
        (*(void (**)(void))(*(void *)v62 + 136))(0);
        id v149 = objc_msgSend(v72, sel_donationMetadata);
        if (!v149) {
          goto LABEL_60;
        }
        uint64_t v150 = v149;
        self;
        uint64_t v151 = (void *)swift_dynamicCastObjCClass();
        if (!v151)
        {
LABEL_57:

          goto LABEL_60;
        }
        v152 = v151;
        objc_msgSend(v151, sel_callDuration);
        uint64_t v153 = MEMORY[0x263F8D538];
        *((void *)&v423 + 1) = MEMORY[0x263F8D538];
        v422._id countAndFlagsBits = v154;
        outlined init with take of Any(&v422, &v420);
        char v155 = swift_isUniquelyReferenced_nonNull_native();
        v419 = v148;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x617275446C6C6163, 0xEC0000006E6F6974, v155);
        v156 = v419;
        swift_bridgeObjectRelease();
        objc_msgSend(v152, sel_timeToEstablish);
        *((void *)&v423 + 1) = v153;
        v422._id countAndFlagsBits = v157;
        outlined init with take of Any(&v422, &v420);
        char v158 = swift_isUniquelyReferenced_nonNull_native();
        v419 = v156;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000018, 0x8000000224F67520, v158);
        v159 = v419;
        v426 = v419;
        swift_bridgeObjectRelease();
        id v160 = objc_msgSend(v152, sel_recentCallStatus);
        if (v160)
        {
          id v161 = v160;
          *((void *)&v421 + 1) = type metadata accessor for NSNumber();
          *(void *)&long long v420 = v161;
          outlined init with take of Any(&v420, &v422);
          if (!*((void *)&v423 + 1))
          {
            outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for Any?);
            specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000010, 0x8000000224F67540, &v420);
            outlined destroy of Any?((uint64_t)&v420, &demangling cache variable for type metadata for Any?);
LABEL_54:
            id v163 = objc_msgSend(v152, sel_disconnectedReason);
            uint64_t v148 = "disconnectedReason";
            if (v163)
            {
              id v164 = v163;
              *((void *)&v421 + 1) = type metadata accessor for NSNumber();
              *(void *)&long long v420 = v164;
              outlined init with take of Any(&v420, &v422);
              if (!*((void *)&v423 + 1))
              {
                outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for Any?);
                specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000012, 0x8000000224F67560, &v420);
                outlined destroy of Any?((uint64_t)&v420, &demangling cache variable for type metadata for Any?);
                goto LABEL_57;
              }
            }
            else
            {
              *((void *)&v423 + 1) = MEMORY[0x263F8D6C8];
              v422._id countAndFlagsBits = 0;
            }
            outlined init with take of Any(&v422, &v420);
            uint64_t v165 = v426;
            char v166 = swift_isUniquelyReferenced_nonNull_native();
            v419 = v165;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000012, 0x8000000224F67560, v166);
            v426 = v419;

            swift_bridgeObjectRelease();
LABEL_60:
            id v167 = objc_msgSend(v72, sel_parametersByName);
            if (v167)
            {
              uint64_t v168 = v167;
              uint64_t v169 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              v170 = v418;
              if (*(void *)(v169 + 16)
                && (unint64_t v171 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xE800000000000000),
                    (v172 & 1) != 0))
              {
                outlined init with copy of Any(*(void *)(v169 + 56) + 32 * v171, (uint64_t)&v422);
              }
              else
              {
                Swift::String v422 = (Swift::String)0;
                long long v423 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((void *)&v423 + 1))
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
                if (swift_dynamicCast())
                {
                  uint64_t v173 = (char *)v420;
                  if ((unint64_t)v420 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v174 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (v174) {
                      goto LABEL_69;
                    }
                  }
                  else
                  {
                    uint64_t v174 = *(void *)((v420 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    if (v174)
                    {
LABEL_69:
                      if (v174 < 1)
                      {
                        __break(1u);
LABEL_221:
                        swift_bridgeObjectRetain();
                        uint64_t v317 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                        if (v317) {
                          goto LABEL_171;
                        }
                        goto LABEL_222;
                      }
                      int64_t v175 = 0;
                      v405 = (void (**)(void, void, void))((unint64_t)v173 & 0xC000000000000001);
                      unint64_t v176 = (void *)MEMORY[0x263F8EE78];
                      v417 = (void *)MEMORY[0x263F8EE78];
                      v177 = (void *)MEMORY[0x263F8EE78];
                      uint64_t v178 = (void *)MEMORY[0x263F8EE78];
                      v408 = v173;
                      v407 = (char *)v174;
                      while (1)
                      {
                        if (v405) {
                          long long v179 = (char *)MEMORY[0x22A627400](v175, v173);
                        }
                        else {
                          long long v179 = (char *)*(id *)&v173[8 * (void)v175 + 32];
                        }
                        uint64_t v180 = v179;
                        id v181 = objc_msgSend(v179, sel_personHandle);
                        unint64_t v182 = v181;
                        if (v181)
                        {
                          id v183 = objc_msgSend(v181, sel_value);

                          if (v183)
                          {
                            unint64_t v182 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                            unint64_t v185 = v184;

                            goto LABEL_79;
                          }
                          unint64_t v182 = 0;
                        }
                        unint64_t v185 = 0xE000000000000000;
LABEL_79:
                        char v186 = swift_isUniquelyReferenced_nonNull_native();
                        v418 = v180;
                        if ((v186 & 1) == 0) {
                          uint64_t v178 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v178[2] + 1, 1, v178);
                        }
                        unint64_t v188 = v178[2];
                        unint64_t v187 = v178[3];
                        v412 = v176;
                        if (v188 >= v187 >> 1) {
                          uint64_t v178 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v187 > 1), v188 + 1, 1, v178);
                        }
                        v178[2] = v188 + 1;
                        v189 = &v178[2 * v188];
                        v189[4] = v182;
                        v189[5] = v185;
                        id v190 = objc_msgSend(v418, sel_displayName);
                        static String._unconditionallyBridgeFromObjectiveC(_:)();

                        Swift::String v422 = String.lowercased()();
                        specialized RangeReplaceableCollection.removeAll(where:)(&v422);
                        swift_bridgeObjectRelease();
                        Swift::String v191 = v422;
                        char v192 = swift_isUniquelyReferenced_nonNull_native();
                        v409 = v170;
                        if ((v192 & 1) == 0) {
                          v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v177[2] + 1, 1, v177);
                        }
                        unint64_t v194 = v177[2];
                        unint64_t v193 = v177[3];
                        if (v194 >= v193 >> 1) {
                          v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v193 > 1), v194 + 1, 1, v177);
                        }
                        v177[2] = v194 + 1;
                        *(Swift::String *)&v177[2 * v194 + 4] = v191;
                        id v195 = objc_msgSend(v418, sel_nameComponents);
                        v411 = v177;
                        id v410 = v178;
                        if (v195)
                        {
                          v196 = v195;
                          v197 = v416;
                          static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                          uint64_t v198 = type metadata accessor for PersonNameComponents();
                          (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v198 - 8) + 56))(v197, 0, 1, v198);
                        }
                        else
                        {
                          uint64_t v198 = type metadata accessor for PersonNameComponents();
                          v197 = v416;
                          (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v198 - 8) + 56))(v416, 1, 1, v198);
                        }
                        v199 = v415;
                        outlined init with take of DateInterval?((uint64_t)v197, (uint64_t)v415, &demangling cache variable for type metadata for PersonNameComponents?);
                        type metadata accessor for PersonNameComponents();
                        uint64_t v200 = *(void *)(v198 - 8);
                        v201 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v200 + 48);
                        if (v201(v199, 1, v198))
                        {
                          outlined destroy of Any?((uint64_t)v199, &demangling cache variable for type metadata for PersonNameComponents?);
LABEL_92:
                          swift_bridgeObjectRelease();
                          goto LABEL_94;
                        }
                        uint64_t v202 = (uint64_t)v199;
                        PersonNameComponents.givenName.getter();
                        uint64_t v204 = v203;
                        outlined destroy of Any?(v202, &demangling cache variable for type metadata for PersonNameComponents?);
                        if (!v204) {
                          goto LABEL_92;
                        }
LABEL_94:
                        v205 = v409;
                        Swift::String v422 = String.lowercased()();
                        specialized RangeReplaceableCollection.removeAll(where:)(&v422);
                        v409 = v205;
                        swift_bridgeObjectRelease();
                        Swift::String v206 = v422;
                        if (swift_isUniquelyReferenced_nonNull_native()) {
                          v207 = v417;
                        }
                        else {
                          v207 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v417[2] + 1, 1, v417);
                        }
                        unint64_t v209 = v207[2];
                        unint64_t v208 = v207[3];
                        if (v209 >= v208 >> 1) {
                          v207 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v208 > 1), v209 + 1, 1, v207);
                        }
                        v207[2] = v209 + 1;
                        v417 = v207;
                        *(Swift::String *)&v207[2 * v209 + 4] = v206;
                        id v210 = objc_msgSend(v418, sel_nameComponents);
                        if (v210)
                        {
                          v211 = v210;
                          v212 = v414;
                          static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                          uint64_t v213 = 0;
                        }
                        else
                        {
                          uint64_t v213 = 1;
                          v212 = v414;
                        }
                        uint64_t v214 = (uint64_t)v413;
                        unint64_t v176 = v412;
                        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v200 + 56))(v212, v213, 1, v198);
                        outlined init with take of DateInterval?((uint64_t)v212, v214, &demangling cache variable for type metadata for PersonNameComponents?);
                        if (v201((void *)v214, 1, v198))
                        {
                          outlined destroy of Any?(v214, &demangling cache variable for type metadata for PersonNameComponents?);
                          v177 = v411;
                          uint64_t v178 = v410;
                        }
                        else
                        {
                          PersonNameComponents.familyName.getter();
                          uint64_t v216 = v215;
                          outlined destroy of Any?(v214, &demangling cache variable for type metadata for PersonNameComponents?);
                          v177 = v411;
                          uint64_t v178 = v410;
                          if (v216) {
                            goto LABEL_105;
                          }
                        }
                        swift_bridgeObjectRelease();
LABEL_105:
                        v217 = v409;
                        Swift::String v422 = String.lowercased()();
                        specialized RangeReplaceableCollection.removeAll(where:)(&v422);
                        v170 = v217;
                        swift_bridgeObjectRelease();
                        Swift::String v218 = v422;
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                          unint64_t v176 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v176[2] + 1, 1, v176);
                        }
                        unint64_t v220 = v176[2];
                        unint64_t v219 = v176[3];
                        if (v220 >= v219 >> 1) {
                          unint64_t v176 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v219 > 1), v220 + 1, 1, v176);
                        }
                        ++v175;
                        v176[2] = v220 + 1;
                        *(Swift::String *)&v176[2 * v220 + 4] = v218;

                        uint64_t v173 = v408;
                        if (v407 == v175)
                        {
                          swift_bridgeObjectRelease();
                          id v72 = v395;
                          v240 = v417;
                          goto LABEL_115;
                        }
                      }
                    }
                  }
                  swift_bridgeObjectRelease();
                }
LABEL_114:
                unint64_t v176 = (void *)MEMORY[0x263F8EE78];
                v240 = (void *)MEMORY[0x263F8EE78];
                v177 = (void *)MEMORY[0x263F8EE78];
                uint64_t v178 = (void *)MEMORY[0x263F8EE78];
LABEL_115:
                uint64_t v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
                *((void *)&v423 + 1) = v221;
                v422._id countAndFlagsBits = (uint64_t)v178;
                outlined init with take of Any(&v422, &v420);
                v222 = v426;
                char v223 = swift_isUniquelyReferenced_nonNull_native();
                v419 = v222;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x73746361746E6F63, 0xED000065756C6156, v223);
                v224 = v419;
                swift_bridgeObjectRelease();
                *((void *)&v423 + 1) = v221;
                v422._id countAndFlagsBits = (uint64_t)v177;
                outlined init with take of Any(&v422, &v420);
                char v225 = swift_isUniquelyReferenced_nonNull_native();
                v419 = v224;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000013, 0x8000000224F674C0, v225);
                v226 = v419;
                swift_bridgeObjectRelease();
                *((void *)&v423 + 1) = v221;
                v422._id countAndFlagsBits = (uint64_t)v240;
                outlined init with take of Any(&v422, &v420);
                char v227 = swift_isUniquelyReferenced_nonNull_native();
                v419 = v226;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000011, 0x8000000224F674E0, v227);
                v228 = v419;
                swift_bridgeObjectRelease();
                *((void *)&v423 + 1) = v221;
                v422._id countAndFlagsBits = (uint64_t)v176;
                outlined init with take of Any(&v422, &v420);
                char v229 = swift_isUniquelyReferenced_nonNull_native();
                v419 = v228;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000010, 0x8000000224F67500, v229);
                v230 = v419;
                v426 = v419;
                swift_bridgeObjectRelease();
                id v231 = objc_msgSend(v72, sel_verb);
                uint64_t v232 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v234 = v233;

                if (objc_msgSend(countAndFlagsBits, sel_direction) == (id)2)
                {
                  swift_bridgeObjectRelease();
                  v230 = v426;
                  unint64_t v234 = 0xEA00000000006C6CLL;
                  uint64_t v232 = 0x6143726577736E41;
                }
                id v235 = objc_msgSend(v72, sel_domain);
                uint64_t v236 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v238 = v237;

                type metadata accessor for Signal();
                uint64_t v239 = swift_allocObject();
                *(void *)(v239 + 16) = v108;
                *(void *)(v239 + 24) = object;
                *(void *)(v239 + 32) = v110;
                *(void *)(v239 + 40) = v111;
                *(void *)(v239 + 48) = v404;
                *(unsigned char *)(v239 + 56) = v403;
                *(void *)(v239 + 64) = v236;
                *(void *)(v239 + 72) = v238;
                *(void *)(v239 + 80) = v232;
                *(void *)(v239 + 88) = v234;
                *(unsigned char *)(v239 + 96) = 1;
                *(void *)(v239 + 104) = v230;
                return;
              }
            }
            else
            {
              Swift::String v422 = (Swift::String)0;
              long long v423 = 0u;
            }
            outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for Any?);
            goto LABEL_114;
          }
        }
        else
        {
          *((void *)&v423 + 1) = MEMORY[0x263F8D6C8];
          v422._id countAndFlagsBits = 0;
        }
        outlined init with take of Any(&v422, &v420);
        char v162 = swift_isUniquelyReferenced_nonNull_native();
        v419 = v159;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000010, 0x8000000224F67540, v162);
        v426 = v419;
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
    }
    outlined init with take of Any(&v422, &v420);
    uint64_t v119 = v426;
    char v120 = swift_isUniquelyReferenced_nonNull_native();
    v419 = v119;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x617275446C6C6163, 0xEC0000006E6F6974, v120);
    v426 = v419;
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  int64_t v61 = (char *)specialized static PSEBiomeEventsSourceFetcher.fetchAppIntentEventAfter(answerEvent:)(v54);
  id v62 = v395;
  if (!v61)
  {
LABEL_120:

    return;
  }
  uint64_t v63 = v61;
  id v64 = objc_msgSend(v61, sel_intentClass);
  if (!v64)
  {

    goto LABEL_120;
  }
  unint64_t v65 = v64;
  v414 = v63;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v416 = v60;

  Swift::String v66 = String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String v422 = v66;
  *(void *)&long long v420 = 0x65746E696C6C6163;
  *((void *)&v420 + 1) = 0xEA0000000000746ELL;
  LOBYTE(v65) = StringProtocol.contains<A>(_:)();
  uint64_t v67 = swift_bridgeObjectRelease();
  id v68 = v418;
  if ((v65 & 1) == 0)
  {

    return;
  }
  uint64_t v69 = (void *)MEMORY[0x22A6277A0](v67);
  BOOL v70 = v414;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(v414, &v422._countAndFlagsBits);
  if (v68)
  {

    return;
  }
  v241 = (void *)v422._countAndFlagsBits;
  id v410 = objc_msgSend((id)v422._countAndFlagsBits, (SEL)&selRef_personHandle + 6);
  v426 = (const char *)MEMORY[0x263F8EE80];
  id v242 = objc_msgSend(v396, sel_absoluteTimestamp);
  if (v242)
  {
    v243 = v242;
    uint64_t v244 = (uint64_t)v389;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v245 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v245 - 8) + 56))(v244, 0, 1, v245);
  }
  else
  {
    uint64_t v246 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v246 - 8) + 56))(v389, 1, 1, v246);
  }
  uint64_t v247 = (uint64_t)v397;
  id v248 = objc_msgSend(v241, sel_dateInterval);
  v418 = 0;
  v405 = (void (**)(void, void, void))v241;
  if (v248)
  {
    v249 = v248;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v250 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v250 - 8) + 56))(v247, 0, 1, v250);
  }
  else
  {
    uint64_t v250 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v250 - 8) + 56))(v247, 1, 1, v250);
  }
  uint64_t v251 = v400;
  outlined init with take of DateInterval?(v247, v400, &demangling cache variable for type metadata for DateInterval?);
  type metadata accessor for DateInterval();
  uint64_t v252 = v251;
  uint64_t v253 = *(void *)(v250 - 8);
  v254 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v253 + 48);
  double v255 = 0.0;
  if (!v254(v251, 1, v250))
  {
    DateInterval.duration.getter();
    uint64_t v252 = v400;
    double v255 = v256;
  }
  outlined destroy of Any?(v252, &demangling cache variable for type metadata for DateInterval?);
  type metadata accessor for Utils();
  uint64_t v257 = (uint64_t)v389;
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v389, (uint64_t)v417, (uint64_t)&v422, v255);
  outlined destroy of Any?(v257, &demangling cache variable for type metadata for Date?);
  int64_t object = v422._object;
  uint64_t v108 = v422._countAndFlagsBits;
  uint64_t v111 = *((void *)&v423 + 1);
  uint64_t v110 = v423;
  uint64_t v400 = v424;
  LODWORD(v397) = v425;
  id v258 = objc_msgSend(v405, sel_dateInterval);
  if (v258)
  {
    v259 = v258;
    uint64_t v260 = (uint64_t)v398;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v261 = 0;
    uint64_t v262 = (uint64_t)v399;
  }
  else
  {
    uint64_t v261 = 1;
    uint64_t v262 = (uint64_t)v399;
    uint64_t v260 = (uint64_t)v398;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v253 + 56))(v260, v261, 1, v250);
  outlined init with take of DateInterval?(v260, v262, &demangling cache variable for type metadata for DateInterval?);
  if (v254(v262, 1, v250))
  {
    outlined destroy of Any?(v262, &demangling cache variable for type metadata for DateInterval?);
    *((void *)&v423 + 1) = MEMORY[0x263F8D6C8];
    v422._id countAndFlagsBits = -1;
LABEL_136:
    outlined init with take of Any(&v422, &v420);
    v264 = v426;
    char v265 = swift_isUniquelyReferenced_nonNull_native();
    v419 = v264;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x617275446C6C6163, 0xEC0000006E6F6974, v265);
    v426 = v419;
    swift_bridgeObjectRelease();
    goto LABEL_137;
  }
  DateInterval.duration.getter();
  *((void *)&v421 + 1) = MEMORY[0x263F8D538];
  *(void *)&long long v420 = v263;
  outlined destroy of Any?(v262, &demangling cache variable for type metadata for DateInterval?);
  outlined init with take of Any(&v420, &v422);
  if (*((void *)&v423 + 1)) {
    goto LABEL_136;
  }
  outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for Any?);
  specialized Dictionary._Variant.removeValue(forKey:)(0x617275446C6C6163, 0xEC0000006E6F6974, &v420);
  outlined destroy of Any?((uint64_t)&v420, &demangling cache variable for type metadata for Any?);
LABEL_137:
  id v266 = objc_msgSend(v410, sel_parametersByName);
  if (v266)
  {
    v267 = v266;
    uint64_t v268 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v268 + 16)
      && (unint64_t v269 = specialized __RawDictionaryStorage.find<A>(_:)(0x756F526F69647561, 0xEA00000000006574),
          (v270 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v268 + 56) + 32 * v269, (uint64_t)&v420);
    }
    else
    {
      long long v420 = 0u;
      long long v421 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v421 + 1))
    {
      outlined init with take of Any(&v420, &v422);
      uint64_t v271 = MEMORY[0x263F8D310];
      goto LABEL_146;
    }
  }
  else
  {
    long long v420 = 0u;
    long long v421 = 0u;
  }
  uint64_t v271 = MEMORY[0x263F8D310];
  *((void *)&v423 + 1) = MEMORY[0x263F8D310];
  v422._id countAndFlagsBits = 0;
  v422._int64_t object = (void *)0xE000000000000000;
  outlined destroy of Any?((uint64_t)&v420, &demangling cache variable for type metadata for Any?);
LABEL_146:
  outlined init with take of Any(&v422, &v420);
  v272 = v426;
  char v273 = swift_isUniquelyReferenced_nonNull_native();
  v419 = v272;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x756F526F69647561, 0xEA00000000006574, v273);
  v274 = v419;
  swift_bridgeObjectRelease();
  id v275 = v396;
  unsigned __int8 v276 = objc_msgSend(v396, sel_donatedBySiri);
  uint64_t v277 = MEMORY[0x263F8D4F8];
  *((void *)&v423 + 1) = MEMORY[0x263F8D4F8];
  LOBYTE(v422._countAndFlagsBits) = v276;
  outlined init with take of Any(&v422, &v420);
  char v278 = swift_isUniquelyReferenced_nonNull_native();
  v419 = v274;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x42646574616E6F64, 0xED00006972695379, v278);
  v279 = v419;
  swift_bridgeObjectRelease();
  id v280 = objc_msgSend(v410, sel_typeName);
  uint64_t v281 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v283 = v282;

  *((void *)&v423 + 1) = v271;
  v422._id countAndFlagsBits = v281;
  v422._int64_t object = v283;
  outlined init with take of Any(&v422, &v420);
  char v284 = swift_isUniquelyReferenced_nonNull_native();
  v419 = v279;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x7954746E65746E69, 0xEE00656D614E6570, v284);
  v426 = v419;
  swift_bridgeObjectRelease();
  id v285 = objc_msgSend(v275, sel_bundleID);
  if (v285)
  {
    v286 = v285;
    uint64_t v287 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v289 = v288;
  }
  else
  {
    uint64_t v287 = 0;
    unint64_t v289 = 0xE000000000000000;
  }
  uint64_t v148 = (const char *)0xD000000000000010;
  v422._id countAndFlagsBits = v287;
  v422._int64_t object = (void *)v289;
  *(void *)&long long v420 = 0x6C7070612E6D6F63;
  *((void *)&v420 + 1) = 0xEA00000000002E65;
  char v290 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  *((void *)&v423 + 1) = v277;
  LOBYTE(v422._countAndFlagsBits) = v290 & 1;
  outlined init with take of Any(&v422, &v420);
  v291 = v426;
  char v292 = swift_isUniquelyReferenced_nonNull_native();
  v419 = v291;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000016, 0x8000000224F66760, v292);
  v293 = v419;
  v426 = v419;
  swift_bridgeObjectRelease();
  id v294 = objc_msgSend(v410, sel_donationMetadata);
  if (!v294) {
    goto LABEL_162;
  }
  v295 = v294;
  self;
  v296 = (void *)swift_dynamicCastObjCClass();
  if (!v296)
  {
LABEL_159:

    goto LABEL_162;
  }
  v297 = v296;
  objc_msgSend(v296, sel_callDuration);
  uint64_t v298 = MEMORY[0x263F8D538];
  *((void *)&v423 + 1) = MEMORY[0x263F8D538];
  v422._id countAndFlagsBits = v299;
  outlined init with take of Any(&v422, &v420);
  char v300 = swift_isUniquelyReferenced_nonNull_native();
  v419 = v293;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x617275446C6C6163, 0xEC0000006E6F6974, v300);
  v301 = v419;
  swift_bridgeObjectRelease();
  objc_msgSend(v297, sel_timeToEstablish);
  *((void *)&v423 + 1) = v298;
  v422._id countAndFlagsBits = v302;
  outlined init with take of Any(&v422, &v420);
  char v303 = swift_isUniquelyReferenced_nonNull_native();
  v419 = v301;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000018, 0x8000000224F67520, v303);
  v304 = v419;
  v426 = v419;
  swift_bridgeObjectRelease();
  id v305 = objc_msgSend(v297, sel_recentCallStatus);
  if (!v305)
  {
    *((void *)&v423 + 1) = MEMORY[0x263F8D6C8];
    v422._id countAndFlagsBits = 0;
    goto LABEL_155;
  }
  id v306 = v305;
  *((void *)&v421 + 1) = type metadata accessor for NSNumber();
  *(void *)&long long v420 = v306;
  outlined init with take of Any(&v420, &v422);
  if (*((void *)&v423 + 1))
  {
LABEL_155:
    outlined init with take of Any(&v422, &v420);
    char v307 = swift_isUniquelyReferenced_nonNull_native();
    v419 = v304;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000010, 0x8000000224F67540, v307);
    v426 = v419;
    swift_bridgeObjectRelease();
    goto LABEL_156;
  }
  outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for Any?);
  specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000010, 0x8000000224F67540, &v420);
  outlined destroy of Any?((uint64_t)&v420, &demangling cache variable for type metadata for Any?);
LABEL_156:
  id v308 = objc_msgSend(v297, sel_disconnectedReason);
  uint64_t v148 = (const char *)0xD000000000000010;
  if (v308)
  {
    id v309 = v308;
    *((void *)&v421 + 1) = type metadata accessor for NSNumber();
    *(void *)&long long v420 = v309;
    outlined init with take of Any(&v420, &v422);
    if (!*((void *)&v423 + 1))
    {
      outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for Any?);
      specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000012, 0x8000000224F67560, &v420);
      outlined destroy of Any?((uint64_t)&v420, &demangling cache variable for type metadata for Any?);
      goto LABEL_159;
    }
  }
  else
  {
    *((void *)&v423 + 1) = MEMORY[0x263F8D6C8];
    v422._id countAndFlagsBits = 0;
  }
  outlined init with take of Any(&v422, &v420);
  v310 = v426;
  char v311 = swift_isUniquelyReferenced_nonNull_native();
  v419 = v310;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000012, 0x8000000224F67560, v311);
  v426 = v419;

  swift_bridgeObjectRelease();
LABEL_162:
  id v312 = objc_msgSend(v410, sel_parametersByName);
  if (!v312)
  {
    Swift::String v422 = (Swift::String)0;
    long long v423 = 0u;
LABEL_214:
    outlined destroy of Any?((uint64_t)&v422, &demangling cache variable for type metadata for Any?);
    goto LABEL_215;
  }
  v313 = v312;
  uint64_t v314 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v314 + 16)
    && (unint64_t v315 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xE800000000000000),
        (v316 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v314 + 56) + 32 * v315, (uint64_t)&v422);
  }
  else
  {
    Swift::String v422 = (Swift::String)0;
    long long v423 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v423 + 1)) {
    goto LABEL_214;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_215;
  }
  uint64_t v173 = (char *)v420;
  if ((unint64_t)v420 >> 62) {
    goto LABEL_221;
  }
  uint64_t v317 = *(void *)((v420 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v317)
  {
LABEL_222:
    swift_bridgeObjectRelease();
LABEL_215:
    v319 = (void *)MEMORY[0x263F8EE78];
    v386 = (void *)MEMORY[0x263F8EE78];
    v387 = (char *)MEMORY[0x263F8EE78];
    v385 = (void *)MEMORY[0x263F8EE78];
LABEL_216:
    uint64_t v366 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *((void *)&v423 + 1) = v366;
    v422._id countAndFlagsBits = (uint64_t)v385;
    outlined init with take of Any(&v422, &v420);
    v367 = v426;
    char v368 = swift_isUniquelyReferenced_nonNull_native();
    v419 = v367;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0x73746361746E6F63, 0xED000065756C6156, v368);
    v369 = v419;
    swift_bridgeObjectRelease();
    *((void *)&v423 + 1) = v366;
    v422._id countAndFlagsBits = (uint64_t)v387;
    outlined init with take of Any(&v422, &v420);
    char v370 = swift_isUniquelyReferenced_nonNull_native();
    v419 = v369;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, (uint64_t)(v148 + 3), 0x8000000224F674C0, v370);
    v371 = v419;
    swift_bridgeObjectRelease();
    *((void *)&v423 + 1) = v366;
    v422._id countAndFlagsBits = (uint64_t)v386;
    outlined init with take of Any(&v422, &v420);
    char v372 = swift_isUniquelyReferenced_nonNull_native();
    v419 = v371;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, (uint64_t)(v148 + 1), 0x8000000224F674E0, v372);
    v373 = v419;
    swift_bridgeObjectRelease();
    *((void *)&v423 + 1) = v366;
    v422._id countAndFlagsBits = (uint64_t)v319;
    outlined init with take of Any(&v422, &v420);
    char v374 = swift_isUniquelyReferenced_nonNull_native();
    v419 = v373;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v420, 0xD000000000000010, 0x8000000224F67500, v374);
    v375 = v419;
    swift_bridgeObjectRelease();
    id v376 = objc_msgSend(v62, sel_domain);
    uint64_t v377 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v379 = v378;

    id v380 = objc_msgSend(v62, sel_verb);
    uint64_t v381 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v383 = v382;

    type metadata accessor for Signal();
    uint64_t v384 = swift_allocObject();
    *(void *)(v384 + 16) = v108;
    *(void *)(v384 + 24) = object;
    *(void *)(v384 + 32) = v110;
    *(void *)(v384 + 40) = v111;
    *(void *)(v384 + 48) = v400;
    *(unsigned char *)(v384 + 56) = (_BYTE)v397;
    *(void *)(v384 + 64) = v377;
    *(void *)(v384 + 72) = v379;
    *(void *)(v384 + 80) = v381;
    *(void *)(v384 + 88) = v383;
    *(unsigned char *)(v384 + 96) = 1;
    *(void *)(v384 + 104) = v375;
    return;
  }
LABEL_171:
  if (v317 >= 1)
  {
    uint64_t v318 = 0;
    v407 = (char *)((unint64_t)v173 & 0xC000000000000001);
    v319 = (void *)MEMORY[0x263F8EE78];
    v416 = (void *)MEMORY[0x263F8EE78];
    v413 = (char *)MEMORY[0x263F8EE78];
    v415 = (void *)MEMORY[0x263F8EE78];
    v409 = v173;
    v408 = (char *)v317;
    while (1)
    {
      if (v407) {
        v320 = (void *)MEMORY[0x22A627400](v318, v173);
      }
      else {
        v320 = *(id *)&v173[8 * v318 + 32];
      }
      v321 = v320;
      id v322 = objc_msgSend(v320, sel_personHandle);
      v323 = v322;
      v324 = v413;
      if (v322)
      {
        id v325 = objc_msgSend(v322, sel_value);

        if (v325)
        {
          v323 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v327 = v326;

          goto LABEL_181;
        }
        v323 = 0;
      }
      unint64_t v327 = 0xE000000000000000;
LABEL_181:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v415 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v415[2] + 1, 1, v415);
      }
      v328 = v415;
      unint64_t v330 = v415[2];
      unint64_t v329 = v415[3];
      if (v330 >= v329 >> 1) {
        v328 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v329 > 1), v330 + 1, 1, v415);
      }
      v328[2] = v330 + 1;
      v415 = v328;
      v331 = &v328[2 * v330];
      v331[4] = v323;
      v331[5] = v327;
      v417 = v321;
      id v332 = objc_msgSend(v321, sel_displayName);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::String v422 = String.lowercased()();
      v333 = v418;
      specialized RangeReplaceableCollection.removeAll(where:)(&v422);
      swift_bridgeObjectRelease();
      Swift::String v334 = v422;
      char v335 = swift_isUniquelyReferenced_nonNull_native();
      v412 = v319;
      v418 = v333;
      if ((v335 & 1) == 0) {
        v324 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v324 + 2) + 1, 1, v324);
      }
      uint64_t v336 = (uint64_t)v402;
      uint64_t v337 = (uint64_t)v401;
      unint64_t v339 = *((void *)v324 + 2);
      unint64_t v338 = *((void *)v324 + 3);
      if (v339 >= v338 >> 1) {
        v324 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v338 > 1), v339 + 1, 1, v324);
      }
      *((void *)v324 + 2) = v339 + 1;
      *(Swift::String *)&v324[16 * v339 + 32] = v334;
      id v340 = objc_msgSend(v417, sel_nameComponents);
      v413 = v324;
      if (v340)
      {
        v341 = v340;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v342 = type metadata accessor for PersonNameComponents();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v342 - 8) + 56))(v336, 0, 1, v342);
      }
      else
      {
        uint64_t v342 = type metadata accessor for PersonNameComponents();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v342 - 8) + 56))(v336, 1, 1, v342);
      }
      outlined init with take of DateInterval?(v336, v337, &demangling cache variable for type metadata for PersonNameComponents?);
      type metadata accessor for PersonNameComponents();
      uint64_t v343 = *(void *)(v342 - 8);
      v344 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v343 + 48);
      if (v344(v337, 1, v342))
      {
        outlined destroy of Any?(v337, &demangling cache variable for type metadata for PersonNameComponents?);
LABEL_194:
        swift_bridgeObjectRelease();
        goto LABEL_196;
      }
      PersonNameComponents.givenName.getter();
      uint64_t v346 = v345;
      outlined destroy of Any?(v337, &demangling cache variable for type metadata for PersonNameComponents?);
      if (!v346) {
        goto LABEL_194;
      }
LABEL_196:
      v411 = (void *)v318;
      Swift::String v422 = String.lowercased()();
      v347 = v418;
      specialized RangeReplaceableCollection.removeAll(where:)(&v422);
      swift_bridgeObjectRelease();
      Swift::String v348 = v422;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v416 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v416[2] + 1, 1, v416);
      }
      v349 = v416;
      unint64_t v351 = v416[2];
      unint64_t v350 = v416[3];
      if (v351 >= v350 >> 1) {
        v349 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v350 > 1), v351 + 1, 1, v416);
      }
      v349[2] = v351 + 1;
      v416 = v349;
      *(Swift::String *)&v349[2 * v351 + 4] = v348;
      id v352 = objc_msgSend(v417, sel_nameComponents);
      if (v352)
      {
        v353 = v352;
        v354 = v404;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v355 = 0;
      }
      else
      {
        uint64_t v355 = 1;
        v354 = v404;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v343 + 56))(v354, v355, 1, v342);
      uint64_t v356 = (uint64_t)v354;
      uint64_t v357 = v403;
      outlined init with take of DateInterval?(v356, v403, &demangling cache variable for type metadata for PersonNameComponents?);
      if (v344(v357, 1, v342))
      {
        outlined destroy of Any?(v357, &demangling cache variable for type metadata for PersonNameComponents?);
        id v62 = v395;
        v319 = v412;
      }
      else
      {
        PersonNameComponents.familyName.getter();
        uint64_t v359 = v358;
        outlined destroy of Any?(v357, &demangling cache variable for type metadata for PersonNameComponents?);
        id v62 = v395;
        v319 = v412;
        if (v359) {
          goto LABEL_207;
        }
      }
      swift_bridgeObjectRelease();
LABEL_207:
      Swift::String v422 = String.lowercased()();
      specialized RangeReplaceableCollection.removeAll(where:)(&v422);
      swift_bridgeObjectRelease();
      Swift::String v360 = v422;
      char v361 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v362 = (uint64_t)v411;
      v418 = v347;
      if ((v361 & 1) == 0) {
        v319 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v319[2] + 1, 1, v319);
      }
      unint64_t v364 = v319[2];
      unint64_t v363 = v319[3];
      v365 = v417;
      if (v364 >= v363 >> 1) {
        v319 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v363 > 1), v364 + 1, 1, v319);
      }
      uint64_t v318 = v362 + 1;
      v319[2] = v364 + 1;
      *(Swift::String *)&v319[2 * v364 + 4] = v360;

      uint64_t v173 = v409;
      if (v408 == (char *)v318)
      {
        swift_bridgeObjectRelease();
        uint64_t v148 = (const char *)0xD000000000000010;
        v385 = v415;
        v386 = v416;
        v387 = v413;
        goto LABEL_216;
      }
    }
  }
  __break(1u);
}

uint64_t AnswerCallsIntentSignalFactory.deinit()
{
  return v0;
}

uint64_t AnswerCallsIntentSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(void *a1)
{
  swift_bridgeObjectRetain();
  Swift::String_optional v2 = String.Iterator.next()();
  if (v2.value._object)
  {
    uint64_t countAndFlagsBits = v2.value._countAndFlagsBits;
    int64_t object = v2.value._object;
    do
    {
      if ((Character.isSymbol.getter() & 1) == 0) {
        MEMORY[0x22A627010](countAndFlagsBits, object);
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v5 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v5.value._countAndFlagsBits;
      int64_t object = v5.value._object;
    }
    while (v5.value._object);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

uint64_t outlined init with take of DateInterval?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t sub_224EFDCE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_224EFDD30(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t type metadata accessor for AnswerCallsIntentSignalFactory()
{
  return self;
}

uint64_t method lookup function for AnswerCallsIntentSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnswerCallsIntentSignalFactory);
}

uint64_t dispatch thunk of AnswerCallsIntentSignalFactory.donatedBySiriCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AnswerCallsIntentSignalFactory.donatedBySiriCount.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of AnswerCallsIntentSignalFactory.donatedBySiriCount.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

void PSEHomeSELFEmitter.emitPSEHome(homeSignals:appLaunchSignals:task:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  void (*v185)(long long *__return_ptr, uint64_t);
  id v186;
  id v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t (*v201)(char *, uint64_t);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  long long v209;
  long long v210;
  char v211;
  uint64_t v212;
  uint64_t v213;

  uint64_t v204 = a3;
  uint64_t v5 = (unsigned int *)type metadata accessor for ReliabilityCategory();
  unint64_t v6 = *((void *)v5 - 1);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v173 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  char v192 = (char *)&v173 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  id v190 = (char *)&v173 - v13;
  MEMORY[0x270FA5388](v12);
  Swift::String v191 = (char *)&v173 - v14;
  uint64_t v15 = type metadata accessor for UUID();
  v197 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  unint64_t v188 = (char *)&v173 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v189 = (char *)&v173 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v173 - v23;
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  v201 = (uint64_t (*)(char *, uint64_t))v25;
  uint64_t v202 = v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v200 = (char *)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for Calendar.Component();
  v199 = *(void *)(v196 - 8);
  MEMORY[0x270FA5388](v196);
  id v195 = (char *)&v173 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v194 = type metadata accessor for Calendar();
  uint64_t v198 = *(void *)(v194 - 8);
  MEMORY[0x270FA5388](v194);
  unint64_t v193 = (char *)&v173 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = (uint64_t)&selRef_init;
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB10]), sel_init);
  if (!v31)
  {
LABEL_23:
    if (one-time initialization token for engagement != -1) {
      goto LABEL_115;
    }
    goto LABEL_24;
  }
  v205 = v31;
  id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB18]), sel_init);
  if (!v32)
  {
    id v49 = v205;
LABEL_22:

    goto LABEL_23;
  }
  unint64_t v187 = v32;
  id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB38]), sel_init);
  if (!v33)
  {

    id v50 = &v213;
LABEL_21:
    id v49 = (id)*(v50 - 32);
    goto LABEL_22;
  }
  id v184 = v33;
  char v186 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB20]), sel_init);
  if (!v186)
  {

    id v50 = (uint64_t *)&v211;
    goto LABEL_21;
  }
  id v183 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB30]), sel_init);
  if (!v183)
  {

    id v50 = &v212;
    goto LABEL_21;
  }
  uint64_t v180 = v24;
  uint64_t v182 = v15;
  long long v179 = v5;
  if (a1 >> 62) {
    goto LABEL_118;
  }
  uint64_t v34 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  id v35 = v205;
  if (!v34)
  {
LABEL_119:

    swift_bridgeObjectRelease();
    uint64_t v5 = v179;
    goto LABEL_23;
  }
LABEL_8:
  uint64_t v5 = (unsigned int *)(a1 & 0xC000000000000001);
  uint64_t v178 = v8;
  int64_t v175 = v18;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v36 = MEMORY[0x22A627400](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_123;
    }
    uint64_t v36 = *(void *)(a1 + 32);
    swift_retain();
  }
  uint64_t v37 = swift_bridgeObjectRelease();
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v36 + 120))(&v209, v37);
  id v38 = v186;
  uint64_t v39 = (*(uint64_t (**)(id))(*(void *)v36 + 144))(objc_msgSend(v186, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v209));
  uint64_t v40 = (void *)MEMORY[0x22A626F60](v39);
  swift_bridgeObjectRelease();
  objc_msgSend(v38, sel_setDomain_, v40);

  uint64_t v41 = (*(uint64_t (**)(void))(*(void *)v36 + 168))();
  uint64_t v18 = v42;
  uint64_t v43 = (void *)MEMORY[0x22A626F60](v41);
  swift_bridgeObjectRelease();
  objc_msgSend(v38, sel_setAction_, v43);

  uint64_t v44 = *(uint64_t (**)(void))(*(void *)v36 + 216);
  uint64_t v176 = v36;
  uint64_t v45 = v44();
  if (!*(void *)(v45 + 16)
    || (unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v47 & 1) == 0))
  {
    unint64_t v209 = 0u;
    id v210 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  outlined init with copy of Any(*(void *)(v45 + 56) + 32 * v46, (uint64_t)&v209);
  swift_bridgeObjectRelease();
  if (!*((void *)&v210 + 1))
  {
LABEL_26:
    outlined destroy of Any?((uint64_t)&v209, &demangling cache variable for type metadata for Any?);
    uint64_t v48 = 2;
    goto LABEL_27;
  }
  if (swift_dynamicCast()) {
    uint64_t v48 = v206;
  }
  else {
    uint64_t v48 = 2;
  }
LABEL_27:
  uint64_t v30 = (uint64_t)v186;
  objc_msgSend(v186, sel_setIsDonatedBySiri_, (*(uint64_t (**)(uint64_t))(*(void *)v203 + 104))(v48));
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v54 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v177 = v6;
  if (v54)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      uint64_t v55 = MEMORY[0x22A627400](0, a2);
    }
    else
    {
      if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_147:
        uint64_t v181 = MEMORY[0x22A627400](0, v30);
        goto LABEL_75;
      }
      uint64_t v55 = *(void *)(a2 + 32);
      swift_retain();
    }
    uint64_t v56 = swift_bridgeObjectRelease();
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v55 + 120))(&v209, v56);
    uint64_t v57 = (*(uint64_t (**)(id))(*(void *)v55 + 216))(objc_msgSend((id)v30, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v209));
    if (*(void *)(v57 + 16)
      && (unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F66680),
          (v59 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v57 + 56) + 32 * v58, (uint64_t)&v209);
    }
    else
    {
      unint64_t v209 = 0u;
      id v210 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v210 + 1))
    {
      int v60 = swift_dynamicCast();
      if (v60) {
        uint64_t v61 = v206;
      }
      else {
        uint64_t v61 = 0;
      }
      if (v60) {
        unint64_t v62 = v207;
      }
      else {
        unint64_t v62 = 0;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v209, &demangling cache variable for type metadata for Any?);
      uint64_t v61 = 0;
      unint64_t v62 = 0;
    }
    uint64_t v63 = (void *)(*(uint64_t (**)(void))(*(void *)v204 + 224))();
    if (v63[2])
    {
      uint64_t v64 = v63[4];
      uint64_t v18 = (char *)v63[5];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v64 = 0;
      uint64_t v18 = 0;
    }
    swift_bridgeObjectRelease();
    uint64_t v65 = v203;
    uint64_t v66 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, char *))(*(void *)v203 + 120))(v61, v62, v64, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v67 = v186;
    uint64_t v68 = (*(uint64_t (**)(id))(*(void *)v55 + 168))(objc_msgSend(v186, sel_setAppFollowup_, v66));
    uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 136))(v68);
    swift_bridgeObjectRelease();
    objc_msgSend(v67, sel_setAppLaunchReason_, v69);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    objc_msgSend((id)v30, sel_setAppFollowup_, 3);
  }
  Swift::String v206 = MEMORY[0x263F8EE78];
  uint64_t v30 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  a2 = 0;
  unint64_t v6 = MEMORY[0x263F8EE58] + 8;
  uint64_t v8 = (char *)MEMORY[0x263F8D4F8];
  unint64_t v185 = (void (*)(long long *__return_ptr, uint64_t))(a1 & 0xFFFFFFFFFFFFFF8);
  do
  {
    if (v5)
    {
      uint64_t v18 = (char *)MEMORY[0x22A627400](a2, a1);
      unint64_t v70 = a2 + 1;
      if (__OFADD__(a2, 1)) {
        goto LABEL_113;
      }
    }
    else
    {
      if (a2 >= *(void *)(v30 + 16))
      {
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        swift_bridgeObjectRetain();
        uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
        id v35 = v205;
        if (!v34) {
          goto LABEL_119;
        }
        goto LABEL_8;
      }
      uint64_t v18 = *(char **)(a1 + 8 * a2 + 32);
      swift_retain();
      unint64_t v70 = a2 + 1;
      if (__OFADD__(a2, 1))
      {
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        swift_once();
LABEL_24:
        uint64_t v51 = type metadata accessor for Logger();
        __swift_project_value_buffer(v51, (uint64_t)static Logger.engagement);
        uint64_t v52 = *MEMORY[0x263F75020];
        uint64_t v53 = type metadata accessor for EngagementSignalCollectionError();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 104))(v8, v52, v53);
        (*(void (**)(char *, void, unsigned int *))(v6 + 104))(v8, *MEMORY[0x263F75118], v5);
        Logger.debug(_:_:)(0xD00000000000002DLL, 0x8000000224F67600, (uint64_t)v8);
        (*(void (**)(char *, unsigned int *))(v6 + 8))(v8, v5);
        return;
      }
    }
    uint64_t v71 = (*(uint64_t (**)(void))(*(void *)v18 + 216))();
    if (*(void *)(v71 + 16)
      && (unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
          (v73 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v71 + 56) + 32 * v72, (uint64_t)&v209);
    }
    else
    {
      unint64_t v209 = 0u;
      id v210 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v210 + 1))
    {
      outlined destroy of Any?((uint64_t)&v209, &demangling cache variable for type metadata for Any?);
LABEL_52:
      swift_release();
      goto LABEL_53;
    }
    if (swift_dynamicCast() & 1) == 0 || (v208) {
      goto LABEL_52;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    uint64_t v30 = (uint64_t)v185;
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_53:
    ++a2;
  }
  while (v70 != v34);
  swift_bridgeObjectRelease();
  uint64_t v30 = v206;
  if ((v206 & 0x8000000000000000) == 0 && (v206 & 0x4000000000000000) == 0)
  {
    a2 = (unint64_t)v186;
    if (*(void *)(v206 + 16))
    {
      swift_retain();
      goto LABEL_72;
    }
LABEL_126:
    swift_release();
    objc_msgSend((id)a2, sel_setHasUserInitiatedFollowup_, 0);
    id v108 = v183;
    objc_msgSend(v183, sel_setFollowUpSource_, 1);
    uint64_t v116 = v182;
LABEL_127:
    id v119 = v184;
    objc_msgSend(v184, sel_setCommonSignal_, a2);
    objc_msgSend(v119, sel_setHomeFollowUpSignal_, v108);
    char v120 = v180;
    UUID.init()();
    id v121 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v123 = objc_msgSend(v121, sel_initWithNSUUID_, isa);

    uint64_t v124 = v197;
    unint64_t v125 = *(void (**)(char *, uint64_t))(v197 + 8);
    uint64_t v202 = v197 + 8;
    v125(v120, v116);
    id v126 = v187;
    objc_msgSend(v187, sel_setPseId_, v123);

    (*(void (**)(void))(*(void *)v204 + 152))();
    uint64_t v127 = (uint64_t)v191;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v128 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
    if (v128(v127, 1, v116) == 1)
    {
      uint64_t v129 = outlined destroy of Any?(v127, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      id v130 = v189;
      (*(void (**)(char *, uint64_t, uint64_t))(v124 + 32))(v189, v127, v116);
      id v131 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
      Class v132 = UUID._bridgeToObjectiveC()().super.isa;
      id v133 = objc_msgSend(v131, (SEL)&selRef_setTriggerOrigin_ + 4, v132);

      objc_msgSend(v126, sel_setUiSessionId_, v133);
      uint64_t v129 = ((uint64_t (*)(char *, uint64_t))v125)(v130, v116);
    }
    uint64_t v134 = (*(uint64_t (**)(uint64_t))(*(void *)v204 + 200))(v129);
    uint64_t v5 = (unsigned int *)MEMORY[0x263F75118];
    if (*(void *)(v134 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v135 = (uint64_t)v190;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v136 = v182;
      if (v128(v135, 1, v182) == 1)
      {
        outlined destroy of Any?(v135, &demangling cache variable for type metadata for UUID?);
        goto LABEL_134;
      }
      unint64_t v143 = v188;
      (*(void (**)(char *, uint64_t, uint64_t))(v197 + 32))(v188, v135, v136);
      id v144 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
      Class v145 = UUID._bridgeToObjectiveC()().super.isa;
      id v146 = objc_msgSend(v144, sel_initWithNSUUID_, v145);

      objc_msgSend(v187, sel_setOriginalLastRequestId_, v146);
      uint64_t v142 = ((uint64_t (*)(char *, uint64_t))v125)(v143, v136);
      uint64_t v34 = (uint64_t)v179;
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_134:
      uint64_t v34 = (uint64_t)v179;
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v137 = type metadata accessor for Logger();
      __swift_project_value_buffer(v137, (uint64_t)static Logger.engagement);
      uint64_t v138 = *MEMORY[0x263F75050];
      uint64_t v139 = type metadata accessor for EngagementSignalCollectionError();
      uint64_t v140 = (uint64_t)v178;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v139 - 8) + 104))(v178, v138, v139);
      unint64_t v141 = v177;
      (*(void (**)(uint64_t, void, uint64_t))(v177 + 104))(v140, *v5, v34);
      Logger.debug(_:_:)(0xD000000000000027, 0x8000000224F666C0, v140);
      uint64_t v142 = (*(uint64_t (**)(uint64_t, uint64_t))(v141 + 8))(v140, v34);
    }
    v201 = (uint64_t (*)(char *, uint64_t))v125;
    (*(void (**)(uint64_t))(*(void *)v204 + 176))(v142);
    uint64_t v147 = (uint64_t)v192;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v148 = v182;
    if (v128(v147, 1, v182) == 1)
    {
      outlined destroy of Any?(v147, &demangling cache variable for type metadata for UUID?);
      a2 = (unint64_t)&unk_26AD6B000;
      if (one-time initialization token for engagement == -1) {
        goto LABEL_140;
      }
      goto LABEL_149;
    }
    a2 = (unint64_t)&unk_26AD6B000;
    v156 = v175;
    (*(void (**)(char *, uint64_t, uint64_t))(v197 + 32))(v175, v147, v148);
    id v157 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
    Class v158 = UUID._bridgeToObjectiveC()().super.isa;
    id v159 = objc_msgSend(v157, sel_initWithNSUUID_, v158);

    id v155 = v187;
    objc_msgSend(v187, sel_setTaskId_, v159);

    uint64_t v154 = v201(v156, v148);
    unint64_t v153 = v177;
    uint64_t v152 = (uint64_t)v178;
LABEL_142:
    uint64_t v160 = (*(uint64_t (**)(uint64_t))(*(void *)v204 + 296))(v154);
    uint64_t v161 = (*(uint64_t (**)(uint64_t))(*(void *)v160 + 104))(v160);
    swift_release();
    uint64_t v162 = v203;
    id v163 = objc_msgSend(v155, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(void *)v203 + 96))(v161));
    objc_msgSend(v155, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(void *)v162 + 112))(v163));
    id v164 = v205;
    objc_msgSend(v205, sel_setEventMetadata_, v155);
    id v165 = v184;
    objc_msgSend(v164, sel_setHomeFollowupSignalGenerated_, v184);
    if (*(void *)(a2 + 640) != -1) {
      swift_once();
    }
    uint64_t v166 = type metadata accessor for Logger();
    __swift_project_value_buffer(v166, (uint64_t)static Logger.engagement);
    uint64_t v167 = *MEMORY[0x263F75070];
    uint64_t v168 = type metadata accessor for SELFPSELogged();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v168 - 8) + 104))(v152, v167, v168);
    (*(void (**)(uint64_t, void, uint64_t))(v153 + 104))(v152, *MEMORY[0x263F750C8], v34);
    Logger.debug(_:_:)(0xD000000000000034, 0x8000000224F67630, v152);
    (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v152, v34);
    id v169 = objc_msgSend(self, sel_sharedAnalytics);
    id v170 = objc_msgSend(v169, sel_defaultMessageStream);

    unint64_t v171 = v180;
    UUID.init()();
    Class v172 = UUID._bridgeToObjectiveC()().super.isa;
    v201(v171, v182);
    objc_msgSend(v170, sel_emitMessage_isolatedStreamUUID_, v164, v172);

    swift_release();
    return;
  }
LABEL_123:
  swift_bridgeObjectRetain();
  uint64_t v118 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  a2 = (unint64_t)v186;
  if (v118 <= 0) {
    goto LABEL_126;
  }
  swift_retain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_release();
    goto LABEL_126;
  }
LABEL_72:
  uint64_t v174 = v30;
  if ((v30 & 0xC000000000000001) != 0) {
    goto LABEL_147;
  }
  if (!*(void *)(v30 + 16))
  {
    __break(1u);
LABEL_149:
    swift_once();
LABEL_140:
    uint64_t v149 = type metadata accessor for Logger();
    __swift_project_value_buffer(v149, (uint64_t)static Logger.engagement);
    uint64_t v150 = *MEMORY[0x263F75038];
    uint64_t v151 = type metadata accessor for EngagementSignalCollectionError();
    uint64_t v152 = (uint64_t)v178;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v151 - 8) + 104))(v178, v150, v151);
    unint64_t v153 = v177;
    (*(void (**)(uint64_t, void, uint64_t))(v177 + 104))(v152, *v5, v34);
    Logger.debug(_:_:)(0xD000000000000024, 0x8000000224F666F0, v152);
    uint64_t v154 = (*(uint64_t (**)(uint64_t, uint64_t))(v153 + 8))(v152, v34);
    id v155 = v187;
    goto LABEL_142;
  }
  uint64_t v181 = *(void *)(v30 + 32);
  swift_retain();
LABEL_75:
  swift_release();
  objc_msgSend((id)a2, sel_setHasUserInitiatedFollowup_, 1);
  Swift::String v206 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  a2 = MEMORY[0x263F8EE58] + 8;
  uint64_t v8 = (char *)MEMORY[0x263F8D4F8];
  uint64_t v30 = (uint64_t)v185;
  while (2)
  {
    if (v5)
    {
      uint64_t v18 = (char *)MEMORY[0x22A627400](v6, a1);
      unint64_t v74 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_114;
      }
    }
    else
    {
      if (v6 >= *(void *)(v30 + 16)) {
        goto LABEL_117;
      }
      uint64_t v18 = *(char **)(a1 + 8 * v6 + 32);
      swift_retain();
      unint64_t v74 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_114;
      }
    }
    uint64_t v75 = (*(uint64_t (**)(void))(*(void *)v18 + 216))();
    if (*(void *)(v75 + 16)
      && (unint64_t v76 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
          (v77 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v75 + 56) + 32 * v76, (uint64_t)&v209);
    }
    else
    {
      unint64_t v209 = 0u;
      id v210 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v210 + 1))
    {
      outlined destroy of Any?((uint64_t)&v209, &demangling cache variable for type metadata for Any?);
LABEL_77:
      swift_release();
      goto LABEL_78;
    }
    if ((swift_dynamicCast() & 1) == 0 || (v208 & 1) == 0) {
      goto LABEL_77;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    uint64_t v30 = (uint64_t)v185;
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_78:
    ++v6;
    if (v74 != v34) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v78 = v206;
  uint64_t v79 = v203;
  uint64_t v80 = v174;
  uint64_t v81 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v203 + 168))(v174, v206);
  id v82 = v183;
  objc_msgSend(v183, sel_setFollowUpType_, v81);
  id v83 = objc_msgSend(v82, sel_setFollowUpSource_, (*(uint64_t (**)(uint64_t))(*(void *)v79 + 176))(v80));
  uint64_t v84 = (*(uint64_t (**)(id))(*(void *)v181 + 216))(v83);
  if (*(void *)(v84 + 16)
    && (unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(0x5465636976726573, 0xEB00000000657079), (v86 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v84 + 56) + 32 * v85, (uint64_t)&v209);
  }
  else
  {
    unint64_t v209 = 0u;
    id v210 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v210 + 1))
  {
    outlined destroy of Any?((uint64_t)&v209, &demangling cache variable for type metadata for Any?);
    goto LABEL_101;
  }
  if (!swift_dynamicCast())
  {
LABEL_101:
    uint64_t v87 = 0;
    unint64_t v88 = 0xE000000000000000;
    goto LABEL_102;
  }
  uint64_t v87 = v206;
  unint64_t v88 = v207;
LABEL_102:
  uint64_t v89 = MEMORY[0x22A626F60](v87, v88);
  swift_bridgeObjectRelease();
  objc_msgSend(v82, sel_setFollowUpAccessoryType_, v89);

  LOBYTE(v89) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v203 + 184))(v80, v78);
  swift_release();
  swift_release();
  objc_msgSend(v82, sel_setIsFollowUpInSameContainerAsSiriRequest_, v89 & 1);
  uint64_t v90 = v193;
  static Calendar.current.getter();
  uint64_t v91 = v199;
  uint64_t v92 = *(uint64_t (**)(char *, void, uint64_t))(v199 + 104);
  double v93 = v195;
  uint64_t v94 = v196;
  uint64_t v95 = v92(v195, *MEMORY[0x263F07890], v196);
  unint64_t v185 = *(void (**)(long long *__return_ptr, uint64_t))(*(void *)v181 + 120);
  v185(&v209, v95);
  uint64_t v96 = v200;
  Date.init(timeIntervalSinceReferenceDate:)();
  unint64_t v97 = Calendar.component(_:from:)();
  Swift::String v98 = *(void (**)(char *, uint64_t (*)(void, void)))(v202 + 8);
  v202 += 8;
  v98(v96, (uint64_t (*)(void, void))v201);
  uint64_t v99 = *(void (**)(char *, uint64_t))(v91 + 8);
  v199 = v91 + 8;
  v99(v93, v94);
  uint64_t v101 = v198 + 8;
  uint64_t v100 = *(void (**)(char *, uint64_t))(v198 + 8);
  v100(v90, v194);
  if ((v97 & 0x8000000000000000) != 0) {
    goto LABEL_153;
  }
  uint64_t v198 = v101;
  if (HIDWORD(v97)) {
    goto LABEL_153;
  }
  objc_msgSend(v183, sel_setFollowUpHourOfDay_, v97);
  uint64_t v102 = v193;
  static Calendar.current.getter();
  uint64_t v103 = v195;
  uint64_t v104 = v196;
  uint64_t v105 = v92(v195, *MEMORY[0x263F078E8], v196);
  v185(&v209, v105);
  double v106 = v200;
  Date.init(timeIntervalSinceReferenceDate:)();
  unint64_t v107 = Calendar.component(_:from:)();
  v98(v106, (uint64_t (*)(void, void))v201);
  v99(v103, v104);
  v100(v102, v194);
  if ((v107 & 0x8000000000000000) != 0) {
    goto LABEL_153;
  }
  a2 = (unint64_t)v186;
  if (HIDWORD(v107)) {
    goto LABEL_153;
  }
  id v108 = v183;
  id v109 = objc_msgSend(v183, sel_setFollowUpDayOfWeek_, v107);
  uint64_t v110 = ((void *(*)(long long *__return_ptr, id))v185)(&v209, v109);
  double v111 = *(double *)&v209;
  unint64_t v112 = v200;
  (*(void (**)(void *))(*(void *)v204 + 320))(v110);
  Date.timeIntervalSinceReferenceDate.getter();
  double v114 = v113;
  v98(v112, (uint64_t (*)(void, void))v201);
  double v115 = v111 - v114;
  if (v111 - v114 <= 0.0)
  {
    uint64_t v117 = 0;
    uint64_t v116 = v182;
LABEL_112:
    objc_msgSend(v108, sel_setFollowUpDurationSinceSiriRequestInSeconds_, v117);
    swift_release();
    goto LABEL_127;
  }
  uint64_t v116 = v182;
  if ((~*(void *)&v115 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_151;
  }
  if (v115 <= -1.0)
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  if (v115 < 4294967300.0)
  {
    uint64_t v117 = v115;
    goto LABEL_112;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Bool __swiftcall PSEHomeSELFEmitter.isUndoAction(actionFromSiri:actionFromUser:)(NSNumber_optional actionFromSiri, NSNumber_optional actionFromUser)
{
  Swift::String_optional v2 = *(void **)&actionFromSiri.is_nil;
  Class isa = actionFromSiri.value.super.super.isa;
  type metadata accessor for NSNumber();
  v4.super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  Class v5 = v4.super.super.isa;
  if (!isa)
  {

    v12.super.super.Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    LOBYTE(v2) = 0;
LABEL_11:

    return v2 & 1;
  }
  unint64_t v6 = isa;
  char v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) == 0) {
    goto LABEL_8;
  }
  v8.super.super.Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  Class v9 = v8.super.super.isa;
  if (!v2)
  {

    goto LABEL_8;
  }
  id v10 = v2;
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
LABEL_8:
    Class v13 = NSNumber.init(integerLiteral:)(0).super.super.isa;
    uint64_t v14 = v6;
    char v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) == 0)
    {
      LOBYTE(v2) = 0;
      return v2 & 1;
    }
    v12.super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    if (v2)
    {
      id v16 = v2;
      LOBYTE(v2) = static NSObject.== infix(_:_:)();
    }
    goto LABEL_11;
  }
  LOBYTE(v2) = 1;
  return v2 & 1;
}

void PSEHomeSELFEmitter.getHomeFollowUpType(userSignals:siriSignals:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 >> 62) {
    goto LABEL_263;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (2)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    unint64_t v145 = v2;
    unint64_t v146 = a1;
    if (v4)
    {
      uint64_t v150 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
      if (v4 < 0) {
        goto LABEL_266;
      }
      uint64_t v6 = 0;
      unint64_t v7 = v2 & 0xC000000000000001;
      do
      {
        if (v7)
        {
          uint64_t v8 = MEMORY[0x22A627400](v6, v2);
        }
        else
        {
          uint64_t v8 = *(void *)(v2 + 8 * v6 + 32);
          swift_retain();
        }
        uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v8 + 216))();
        if (*(void *)(v9 + 16)
          && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, 0x8000000224F676A0),
              (v11 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v147);
        }
        else
        {
          long long v147 = 0u;
          long long v148 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v148 + 1))
        {
          if (swift_dynamicCast()) {
            goto LABEL_18;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
        }
        long long v149 = 0uLL;
LABEL_18:
        swift_release();
        long long v141 = v149;
        uint64_t v5 = v150;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1);
          uint64_t v5 = v150;
        }
        unint64_t v13 = *(void *)(v5 + 16);
        unint64_t v12 = *(void *)(v5 + 24);
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          uint64_t v5 = v150;
        }
        ++v6;
        *(void *)(v5 + 16) = v13 + 1;
        *(_OWORD *)(v5 + 16 * v13 + 32) = v141;
        unint64_t v2 = v145;
      }
      while (v4 != v6);
    }
    uint64_t v140 = specialized Set.init<A>(_:)(v5);
    swift_bridgeObjectRelease();
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v15 = MEMORY[0x263F8EE78];
    if (v14)
    {
      uint64_t v150 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
      if (v14 < 0) {
        goto LABEL_267;
      }
      uint64_t v16 = 0;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v17 = MEMORY[0x22A627400](v16, a1);
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
          swift_retain();
        }
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v17 + 216))();
        if (*(void *)(v18 + 16)
          && (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, 0x8000000224F676A0),
              (v20 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v19, (uint64_t)&v147);
        }
        else
        {
          long long v147 = 0u;
          long long v148 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v148 + 1))
        {
          if (swift_dynamicCast()) {
            goto LABEL_40;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
        }
        long long v149 = 0uLL;
LABEL_40:
        swift_release();
        long long v142 = v149;
        uint64_t v15 = v150;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
          uint64_t v15 = v150;
        }
        unint64_t v22 = *(void *)(v15 + 16);
        unint64_t v21 = *(void *)(v15 + 24);
        if (v22 >= v21 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
          uint64_t v15 = v150;
        }
        ++v16;
        *(void *)(v15 + 16) = v22 + 1;
        *(_OWORD *)(v15 + 16 * v22 + 32) = v142;
        if (v14 == v16)
        {
          unint64_t v2 = v145;
          break;
        }
      }
    }
    uint64_t v23 = specialized Set.init<A>(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v24 = MEMORY[0x263F8EE78];
    uint64_t v138 = v23;
    if (v4)
    {
      uint64_t v150 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
      if (v4 < 0) {
        goto LABEL_268;
      }
      uint64_t v25 = 0;
      unint64_t v26 = v2 & 0xC000000000000001;
      do
      {
        if (v26)
        {
          uint64_t v27 = MEMORY[0x22A627400](v25, v2);
        }
        else
        {
          uint64_t v27 = *(void *)(v2 + 8 * v25 + 32);
          swift_retain();
        }
        uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v27 + 216))();
        if (*(void *)(v28 + 16)
          && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000224F676C0),
              (v30 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v28 + 56) + 32 * v29, (uint64_t)&v147);
        }
        else
        {
          long long v147 = 0u;
          long long v148 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v148 + 1))
        {
          if (swift_dynamicCast()) {
            goto LABEL_61;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
        }
        long long v149 = 0uLL;
LABEL_61:
        swift_release();
        long long v143 = v149;
        uint64_t v24 = v150;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
          uint64_t v24 = v150;
        }
        unint64_t v32 = *(void *)(v24 + 16);
        unint64_t v31 = *(void *)(v24 + 24);
        if (v32 >= v31 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
          uint64_t v24 = v150;
        }
        ++v25;
        *(void *)(v24 + 16) = v32 + 1;
        *(_OWORD *)(v24 + 16 * v32 + 32) = v143;
        unint64_t v2 = v145;
      }
      while (v4 != v25);
    }
    a1 = specialized Set.init<A>(_:)(v24);
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x263F8EE78];
    if (!v14)
    {
      uint64_t v39 = MEMORY[0x263F8EE78];
      goto LABEL_88;
    }
    uint64_t v150 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0) {
      goto LABEL_269;
    }
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v146 & 0xC000000000000001) != 0)
      {
        uint64_t v35 = MEMORY[0x22A627400](i, v146);
      }
      else
      {
        uint64_t v35 = *(void *)(v146 + 8 * i + 32);
        swift_retain();
      }
      uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v35 + 216))();
      if (*(void *)(v36 + 16)
        && (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000224F676C0),
            (v38 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v37, (uint64_t)&v147);
      }
      else
      {
        long long v147 = 0u;
        long long v148 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v148 + 1))
      {
        outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
LABEL_80:
        long long v149 = 0uLL;
        goto LABEL_81;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_80;
      }
LABEL_81:
      swift_release();
      long long v144 = v149;
      uint64_t v39 = v150;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1);
        uint64_t v39 = v150;
      }
      unint64_t v41 = *(void *)(v39 + 16);
      unint64_t v40 = *(void *)(v39 + 24);
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        uint64_t v39 = v150;
      }
      *(void *)(v39 + 16) = v41 + 1;
      *(_OWORD *)(v39 + 16 * v41 + 32) = v144;
    }
    unint64_t v2 = v145;
    uint64_t v33 = MEMORY[0x263F8EE78];
LABEL_88:
    uint64_t v42 = specialized Set.init<A>(_:)(v39);
    swift_bridgeObjectRelease();
    uint64_t v43 = specialized _NativeSet.intersection(_:)(v138, v140, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
    swift_bridgeObjectRelease();
    if (!*(void *)(v42 + 16) || *(void *)(v43 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(void *)(v43 + 16)) {
        goto LABEL_167;
      }
      int64_t v44 = 0;
      uint64_t v134 = v43 + 56;
      uint64_t v45 = 1 << *(unsigned char *)(v43 + 32);
      uint64_t v46 = -1;
      if (v45 < 64) {
        uint64_t v46 = ~(-1 << v45);
      }
      unint64_t v47 = v46 & *(void *)(v43 + 56);
      int64_t v135 = (unint64_t)(v45 + 63) >> 6;
      uint64_t v132 = v43;
LABEL_96:
      while (2)
      {
        if (v47)
        {
          unint64_t v48 = __clz(__rbit64(v47));
          v47 &= v47 - 1;
          unint64_t v49 = v48 | (v44 << 6);
        }
        else
        {
          BOOL v50 = __OFADD__(v44++, 1);
          if (v50) {
            goto LABEL_259;
          }
          if (v44 >= v135) {
            goto LABEL_167;
          }
          unint64_t v51 = *(void *)(v134 + 8 * v44);
          if (!v51)
          {
            int64_t v52 = v44 + 1;
            if (v44 + 1 >= v135) {
              goto LABEL_167;
            }
            unint64_t v51 = *(void *)(v134 + 8 * v52);
            if (!v51)
            {
              int64_t v52 = v44 + 2;
              if (v44 + 2 >= v135) {
                goto LABEL_167;
              }
              unint64_t v51 = *(void *)(v134 + 8 * v52);
              if (!v51)
              {
                int64_t v52 = v44 + 3;
                if (v44 + 3 >= v135) {
                  goto LABEL_167;
                }
                unint64_t v51 = *(void *)(v134 + 8 * v52);
                if (!v51)
                {
                  while (1)
                  {
                    int64_t v44 = v52 + 1;
                    if (__OFADD__(v52, 1)) {
                      goto LABEL_262;
                    }
                    if (v44 >= v135) {
                      goto LABEL_167;
                    }
                    unint64_t v51 = *(void *)(v134 + 8 * v44);
                    ++v52;
                    if (v51) {
                      goto LABEL_108;
                    }
                  }
                }
              }
            }
            int64_t v44 = v52;
          }
LABEL_108:
          unint64_t v47 = (v51 - 1) & v51;
          unint64_t v49 = __clz(__rbit64(v51)) + (v44 << 6);
        }
        uint64_t v53 = (uint64_t *)(*(void *)(v43 + 48) + 16 * v49);
        uint64_t v55 = *v53;
        uint64_t v54 = v53[1];
        swift_bridgeObjectRetain();
        unint64_t v56 = swift_bridgeObjectRetain();
        a1 = 0;
        unint64_t v57 = specialized _ArrayProtocol.filter(_:)(v56, v55, v54, 0xD000000000000019, 0x8000000224F676A0);
        swift_bridgeObjectRelease();
        if (v57 >> 62)
        {
          if (!_CocoaArrayWrapper.endIndex.getter())
          {
LABEL_94:
            swift_bridgeObjectRelease();
LABEL_95:
            swift_bridgeObjectRelease();
            continue;
          }
        }
        else if (!*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_94;
        }
        break;
      }
      if ((v57 & 0xC000000000000001) != 0)
      {
        uint64_t v58 = MEMORY[0x22A627400](0, v57);
      }
      else
      {
        if (!*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          swift_bridgeObjectRetain();
          uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          continue;
        }
        uint64_t v58 = *(void *)(v57 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      unint64_t v59 = swift_bridgeObjectRetain();
      a1 = 0;
      unint64_t v60 = specialized _ArrayProtocol.filter(_:)(v59, v55, v54, 0xD000000000000019, 0x8000000224F676A0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v60 >> 62)
      {
        if (!_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_172:
          swift_release();
          goto LABEL_95;
        }
      }
      else if (!*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_172;
      }
      if ((v60 & 0xC000000000000001) != 0)
      {
        uint64_t v61 = MEMORY[0x22A627400](0, v60);
      }
      else
      {
        if (!*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_258;
        }
        uint64_t v61 = *(void *)(v60 + 32);
        swift_retain();
      }
      uint64_t v62 = swift_bridgeObjectRelease();
      uint64_t v63 = *(uint64_t (**)(void))(*(void *)v58 + 216);
      uint64_t v64 = ((uint64_t (*)(uint64_t))v63)(v62);
      if (*(void *)(v64 + 16)
        && (unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F676E0),
            (v66 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v64 + 56) + 32 * v65, (uint64_t)&v147);
      }
      else
      {
        long long v147 = 0u;
        long long v148 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v148 + 1))
      {
        type metadata accessor for NSNumber();
        if (swift_dynamicCast()) {
          id v67 = (void *)v149;
        }
        else {
          id v67 = 0;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
        id v67 = 0;
      }
      uint64_t v68 = *(uint64_t (**)(void))(*(void *)v61 + 216);
      a1 = *(void *)v61 + 216;
      uint64_t v69 = v68();
      if (*(void *)(v69 + 16)
        && (unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F676E0),
            (v71 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v69 + 56) + 32 * v70, (uint64_t)&v147);
      }
      else
      {
        long long v147 = 0u;
        long long v148 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v148 + 1))
      {
        type metadata accessor for NSNumber();
        if (swift_dynamicCast()) {
          unint64_t v72 = (void *)v149;
        }
        else {
          unint64_t v72 = 0;
        }
        if (v67)
        {
          if (v72)
          {
            id v73 = v67;
            char v74 = static NSObject.== infix(_:_:)();

            if (v74) {
              goto LABEL_253;
            }
            goto LABEL_148;
          }
        }
        else
        {
          id v67 = v72;
          if (!v72)
          {
LABEL_253:
            swift_release();
            swift_release();
            goto LABEL_167;
          }
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
        if (!v67) {
          goto LABEL_253;
        }
      }

LABEL_148:
      uint64_t v75 = v63();
      if (*(void *)(v75 + 16)
        && (unint64_t v76 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F676E0),
            (v77 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v75 + 56) + 32 * v76, (uint64_t)&v147);
      }
      else
      {
        long long v147 = 0u;
        long long v148 = 0u;
      }
      uint64_t v43 = v132;
      swift_bridgeObjectRelease();
      if (*((void *)&v148 + 1))
      {
        type metadata accessor for NSNumber();
        if (swift_dynamicCast()) {
          uint64_t v78 = (void *)v149;
        }
        else {
          uint64_t v78 = 0;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
        uint64_t v78 = 0;
      }
      uint64_t v79 = v68();
      if (*(void *)(v79 + 16)
        && (unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F676E0),
            (v81 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v79 + 56) + 32 * v80, (uint64_t)&v147);
      }
      else
      {
        long long v147 = 0u;
        long long v148 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v148 + 1))
      {
        type metadata accessor for NSNumber();
        if (swift_dynamicCast()) {
          id v82 = (void *)v149;
        }
        else {
          id v82 = 0;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
        id v82 = 0;
      }
      char v83 = (*(uint64_t (**)(void *, void *))(*(void *)v133 + 160))(v78, v82);
      swift_release();
      swift_release();

      unint64_t v2 = v145;
      if ((v83 & 1) == 0) {
        goto LABEL_167;
      }
      goto LABEL_96;
    }
    break;
  }
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v84 = specialized _NativeSet.intersection(_:)(v42, a1, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
  swift_bridgeObjectRelease();
  unint64_t v85 = *(void *)(v84 + 16);
  if (!v85)
  {
    swift_bridgeObjectRelease();
    goto LABEL_167;
  }
  unint64_t v86 = *(void *)(a1 + 16);
  swift_bridgeObjectRelease();
  if (v85 < v86) {
    goto LABEL_167;
  }
  int64_t v87 = 0;
  a1 = 0;
  uint64_t v129 = v84 + 56;
  uint64_t v88 = 1 << *(unsigned char *)(v84 + 32);
  uint64_t v89 = -1;
  if (v88 < 64) {
    uint64_t v89 = ~(-1 << v88);
  }
  unint64_t v90 = v89 & *(void *)(v84 + 56);
  int64_t v130 = (unint64_t)(v88 + 63) >> 6;
  uint64_t v131 = v84;
  while (2)
  {
    if (v90)
    {
      uint64_t v137 = (v90 - 1) & v90;
      int64_t v139 = v87;
      unint64_t v91 = __clz(__rbit64(v90)) | (v87 << 6);
      goto LABEL_194;
    }
    BOOL v50 = __OFADD__(v87, 1);
    int64_t v92 = v87 + 1;
    if (!v50)
    {
      if (v92 >= v130) {
        goto LABEL_167;
      }
      unint64_t v93 = *(void *)(v129 + 8 * v92);
      if (!v93)
      {
        int64_t v94 = v92 + 1;
        if (v92 + 1 >= v130) {
          goto LABEL_167;
        }
        unint64_t v93 = *(void *)(v129 + 8 * v94);
        if (!v93)
        {
          int64_t v94 = v92 + 2;
          if (v92 + 2 >= v130) {
            goto LABEL_167;
          }
          unint64_t v93 = *(void *)(v129 + 8 * v94);
          if (!v93)
          {
            int64_t v94 = v92 + 3;
            if (v92 + 3 >= v130) {
              goto LABEL_167;
            }
            unint64_t v93 = *(void *)(v129 + 8 * v94);
            if (!v93)
            {
              while (1)
              {
                int64_t v92 = v94 + 1;
                if (__OFADD__(v94, 1)) {
                  goto LABEL_272;
                }
                if (v92 >= v130) {
                  goto LABEL_167;
                }
                unint64_t v93 = *(void *)(v129 + 8 * v92);
                ++v94;
                if (v93) {
                  goto LABEL_193;
                }
              }
            }
          }
        }
        int64_t v92 = v94;
      }
LABEL_193:
      uint64_t v137 = (v93 - 1) & v93;
      int64_t v139 = v92;
      unint64_t v91 = __clz(__rbit64(v93)) + (v92 << 6);
LABEL_194:
      uint64_t v95 = (uint64_t *)(*(void *)(v84 + 48) + 16 * v91);
      uint64_t v97 = *v95;
      uint64_t v96 = v95[1];
      swift_bridgeObjectRetain();
      unint64_t v98 = swift_bridgeObjectRetain();
      unint64_t v99 = specialized _ArrayProtocol.filter(_:)(v98, v97, v96, 0xD000000000000012, 0x8000000224F676C0);
      swift_bridgeObjectRelease();
      if (!(v99 >> 62))
      {
        uint64_t v100 = *(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v100) {
          goto LABEL_196;
        }
LABEL_217:
        swift_bridgeObjectRelease();
        uint64_t v106 = v33;
LABEL_218:
        uint64_t v107 = specialized Set.init<A>(_:)(v106);
        swift_bridgeObjectRelease();
        unint64_t v108 = swift_bridgeObjectRetain();
        unint64_t v109 = specialized _ArrayProtocol.filter(_:)(v108, v97, v96, 0xD000000000000012, 0x8000000224F676C0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v109 >> 62)
        {
          uint64_t v110 = _CocoaArrayWrapper.endIndex.getter();
          if (!v110)
          {
LABEL_237:
            swift_bridgeObjectRelease();
            uint64_t v116 = v33;
            goto LABEL_238;
          }
        }
        else
        {
          uint64_t v110 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v110) {
            goto LABEL_237;
          }
        }
        *(void *)&long long v149 = v33;
        specialized ContiguousArray.reserveCapacity(_:)();
        if (v110 < 0) {
          goto LABEL_261;
        }
        uint64_t v111 = 0;
LABEL_225:
        if ((v109 & 0xC000000000000001) != 0)
        {
          uint64_t v112 = MEMORY[0x22A627400](v111, v109);
        }
        else
        {
          uint64_t v112 = *(void *)(v109 + 8 * v111 + 32);
          swift_retain();
        }
        uint64_t v113 = (*(uint64_t (**)(void))(*(void *)v112 + 216))();
        if (*(void *)(v113 + 16)
          && (unint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F676E0),
              (v115 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v113 + 56) + 32 * v114, (uint64_t)&v147);
        }
        else
        {
          long long v147 = 0u;
          long long v148 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v148 + 1))
        {
          type metadata accessor for NSNumber();
          if (swift_dynamicCast())
          {
LABEL_224:
            swift_release();
            ++v111;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (v110 == v111)
            {
              uint64_t v116 = v149;
              swift_bridgeObjectRelease();
              unint64_t v2 = v145;
              uint64_t v33 = MEMORY[0x263F8EE78];
LABEL_238:
              uint64_t v117 = specialized Set.init<A>(_:)(v116);
              swift_bridgeObjectRelease();
              if (*(void *)(v107 + 16) != 1 || *(void *)(v117 + 16) != 1)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v84 = v131;
                unint64_t v90 = v137;
                int64_t v87 = v139;
                continue;
              }
              uint64_t v118 = specialized Set.startIndex.getter(v107);
              if (v120) {
                goto LABEL_273;
              }
              if (*(_DWORD *)(v107 + 36) != v119) {
                goto LABEL_270;
              }
              if (v118 == 1 << *(unsigned char *)(v107 + 32))
              {
                id v121 = 0;
              }
              else
              {
                id v121 = (void *)specialized Set.subscript.getter(v118, v119, 0, v107);
                id v122 = v121;
              }
              swift_bridgeObjectRelease();
              uint64_t v123 = specialized Set.startIndex.getter(v117);
              if (v125) {
                goto LABEL_274;
              }
              uint64_t v84 = v131;
              if (*(_DWORD *)(v117 + 36) != v124) {
                goto LABEL_271;
              }
              if (v123 == 1 << *(unsigned char *)(v117 + 32))
              {
                id v126 = 0;
              }
              else
              {
                id v126 = (void *)specialized Set.subscript.getter(v123, v124, 0, v117);
                id v127 = v126;
              }
              swift_bridgeObjectRelease();
              char v128 = (*(uint64_t (**)(void *, void *))(*(void *)v133 + 160))(v121, v126);

              unint64_t v2 = v145;
              unint64_t v90 = v137;
              int64_t v87 = v139;
              if (v128)
              {
LABEL_167:
                swift_release();
                return;
              }
              continue;
            }
            goto LABEL_225;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
        }
        uint64_t v150 = 0;
        goto LABEL_224;
      }
      uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
      if (!v100) {
        goto LABEL_217;
      }
LABEL_196:
      *(void *)&long long v149 = v33;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v100 < 0) {
        goto LABEL_260;
      }
      uint64_t v136 = v97;
      uint64_t v101 = 0;
      while (2)
      {
        if ((v99 & 0xC000000000000001) != 0)
        {
          uint64_t v102 = MEMORY[0x22A627400](v101, v99);
        }
        else
        {
          uint64_t v102 = *(void *)(v99 + 8 * v101 + 32);
          swift_retain();
        }
        uint64_t v103 = (*(uint64_t (**)(void))(*(void *)v102 + 216))();
        if (*(void *)(v103 + 16)
          && (unint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F676E0),
              (v105 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v103 + 56) + 32 * v104, (uint64_t)&v147);
        }
        else
        {
          long long v147 = 0u;
          long long v148 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v148 + 1))
        {
          type metadata accessor for NSNumber();
          if (swift_dynamicCast())
          {
LABEL_200:
            swift_release();
            ++v101;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (v100 == v101)
            {
              uint64_t v106 = v149;
              swift_bridgeObjectRelease();
              unint64_t v2 = v145;
              uint64_t v33 = MEMORY[0x263F8EE78];
              uint64_t v97 = v136;
              goto LABEL_218;
            }
            continue;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v147, &demangling cache variable for type metadata for Any?);
        }
        break;
      }
      uint64_t v150 = 0;
      goto LABEL_200;
    }
    break;
  }
  __break(1u);
LABEL_266:
  __break(1u);
LABEL_267:
  __break(1u);
LABEL_268:
  __break(1u);
LABEL_269:
  __break(1u);
LABEL_270:
  __break(1u);
LABEL_271:
  __break(1u);
LABEL_272:
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  __break(1u);
}

uint64_t PSEHomeSELFEmitter.getHomeFollowUpSource(userSignals:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_50:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_51:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_51;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = MEMORY[0x22A627400](i, a1);
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8 * i + 32);
      swift_retain();
    }
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)v8 + 216);
    uint64_t v10 = v9();
    if (*(void *)(v10 + 16)
      && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x614E746E65696C63, 0xEA0000000000656DLL),
          (v12 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v21);
    }
    else
    {
      long long v21 = 0u;
      long long v22 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v22 + 1))
    {
      uint64_t v13 = swift_dynamicCast();
      if (v13)
      {
        if (v19 == 0x6C7070612E6D6F63 && v20 == 0xEE00656D6F482E65)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_7;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v13 = swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v13 = outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v14 = ((uint64_t (*)(uint64_t))v9)(v13);
    if (*(void *)(v14 + 16)
      && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(0x614E746E65696C63, 0xEA0000000000656DLL),
          (v16 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v21);
    }
    else
    {
      long long v21 = 0u;
      long long v22 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v22 + 1))
    {
      outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
LABEL_35:
      swift_release();
      BOOL v7 = __OFADD__(v4++, 1);
      if (v7)
      {
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      continue;
    }
    if (!swift_dynamicCast()) {
      goto LABEL_35;
    }
    if (v19 == 0xD000000000000012 && v20 == 0x8000000224F67700)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      swift_release();
LABEL_7:
      BOOL v7 = __OFADD__(v5++, 1);
      if (v7) {
        goto LABEL_49;
      }
      continue;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_release();
    if (v17) {
      goto LABEL_7;
    }
    BOOL v7 = __OFADD__(v4++, 1);
    if (v7) {
      goto LABEL_48;
    }
  }
  swift_bridgeObjectRelease();
  if (v5 < 1)
  {
    if (!v5 && v4 > 0) {
      return 3;
    }
  }
  else
  {
    if (v4 > 0) {
      return 4;
    }
    if (!v4) {
      return 2;
    }
  }
  return 0;
}

Swift::Bool __swiftcall PSEHomeSELFEmitter.isFollowUpInSameContainer(userSignals:siriSignals:)(Swift::OpaquePointer userSignals, Swift::OpaquePointer siriSignals)
{
  uint64_t rawValue = (uint64_t)userSignals._rawValue;
  if ((unint64_t)userSignals._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v7 = *(void *)(((unint64_t)userSignals._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v7)
  {
    swift_bridgeObjectRelease();
    long long v40 = 0u;
    long long v41 = 0u;
    goto LABEL_18;
  }
  if ((rawValue & 0xC000000000000001) != 0)
  {
    uint64_t v8 = MEMORY[0x22A627400](0, rawValue);
  }
  else
  {
    if (!*(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_78;
    }
    uint64_t v8 = *(void *)(rawValue + 32);
    swift_retain();
  }
  uint64_t v9 = swift_bridgeObjectRelease();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216))(v9);
  swift_release();
  if (!*(void *)(v10 + 16)
    || (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F67720), (v12 & 1) == 0))
  {
    long long v40 = 0u;
    long long v41 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1))
  {
LABEL_18:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    goto LABEL_19;
  }
  int v13 = swift_dynamicCast();
  if (v13) {
    uint64_t v4 = v38;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v13) {
    uint64_t v3 = v39;
  }
  else {
    uint64_t v3 = 0;
  }
LABEL_19:
  if (!((unint64_t)siriSignals._rawValue >> 62))
  {
    uint64_t v2 = *(void *)(((unint64_t)siriSignals._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_21;
    }
LABEL_69:
    swift_bridgeObjectRelease();
    long long v40 = 0u;
    long long v41 = 0u;
    goto LABEL_70;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_69;
  }
LABEL_21:
  if (((unint64_t)siriSignals._rawValue & 0xC000000000000001) != 0)
  {
LABEL_78:
    uint64_t v14 = MEMORY[0x22A627400](0, siriSignals._rawValue);
    goto LABEL_24;
  }
  if (!*(void *)(((unint64_t)siriSignals._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v14 = *((void *)siriSignals._rawValue + 4);
  swift_retain();
LABEL_24:
  uint64_t v15 = swift_bridgeObjectRelease();
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 216))(v15);
  swift_release();
  if (*(void *)(v16 + 16)
    && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F67720), (v18 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v16 + 56) + 32 * v17, (uint64_t)&v40);
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1))
  {
LABEL_70:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    if (!v3) {
      return 1;
    }
    goto LABEL_71;
  }
  int v19 = swift_dynamicCast();
  if (v19) {
    uint64_t v20 = v38;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v19) {
    uint64_t v21 = v39;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v3)
  {
    if (v21)
    {
      if (v4 == v20 && v3 == v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
      {
        if (v7) {
          goto LABEL_44;
        }
LABEL_72:
        long long v40 = 0u;
        long long v41 = 0u;
        goto LABEL_73;
      }
      return 1;
    }
  }
  else if (!v21)
  {
    return 1;
  }
LABEL_71:
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_72;
  }
LABEL_44:
  if ((rawValue & 0xC000000000000001) != 0)
  {
LABEL_80:
    swift_bridgeObjectRetain();
    uint64_t v24 = MEMORY[0x22A627400](0, rawValue);
    uint64_t v25 = swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  if (!*(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_82:
    swift_bridgeObjectRetain();
    uint64_t v29 = MEMORY[0x22A627400](0, siriSignals._rawValue);
    uint64_t v30 = swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  uint64_t v24 = *(void *)(rawValue + 32);
  uint64_t v25 = swift_retain();
LABEL_47:
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 216))(v25);
  swift_release();
  if (*(void *)(v26 + 16)
    && (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000015, 0x8000000224F67740), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v40);
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1)) {
    goto LABEL_73;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  Swift::Bool result = swift_dynamicCast();
  if (!result) {
    return 0;
  }
  uint64_t rawValue = v38;
  if (!v2)
  {
    long long v40 = 0u;
    long long v41 = 0u;
LABEL_65:
    swift_bridgeObjectRelease();
LABEL_73:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  if (((unint64_t)siriSignals._rawValue & 0xC000000000000001) != 0) {
    goto LABEL_82;
  }
  if (*(void *)(((unint64_t)siriSignals._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v29 = *((void *)siriSignals._rawValue + 4);
    uint64_t v30 = swift_retain();
LABEL_57:
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 216))(v30);
    swift_release();
    if (*(void *)(v31 + 16)
      && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000015, 0x8000000224F67740),
          (v33 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v31 + 56) + 32 * v32, (uint64_t)&v40);
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v41 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v34 = specialized Set.init<A>(_:)(rawValue);
        swift_bridgeObjectRelease();
        uint64_t v35 = specialized Set.init<A>(_:)(v38);
        swift_bridgeObjectRelease();
        uint64_t v36 = specialized _NativeSet.intersection(_:)(v35, v34, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
        swift_bridgeObjectRelease();
        uint64_t v37 = *(void *)(v36 + 16);
        swift_release();
        return v37 != 0;
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    goto LABEL_65;
  }
  __break(1u);
  return result;
}

uint64_t PSEHomeSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSEHomeSELFEmitter.init()()
{
  return v0;
}

uint64_t PSEHomeSELFEmitter.deinit()
{
  return v0;
}

uint64_t PSEHomeSELFEmitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    id v7 = a2;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v20 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v11 = ~v9;
  while (1)
  {
    char v12 = *(void **)(*(void *)(v6 + 48) + 8 * v10);
    if (v12) {
      break;
    }
    if (!a2) {
      goto LABEL_12;
    }
LABEL_7:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_13;
    }
  }
  if (!a2) {
    goto LABEL_7;
  }
  type metadata accessor for NSNumber();
  id v13 = a2;
  id v14 = v12;
  char v15 = static NSObject.== infix(_:_:)();

  if ((v15 & 1) == 0) {
    goto LABEL_7;
  }

LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void **)(*(void *)(*v3 + 48) + 8 * v10);
  *a1 = v16;
  id v17 = v16;
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v11 = ~v9;
  uint64_t v12 = *(void *)(v7 + 48);
  while (1)
  {
    id v13 = (void *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    if (v14) {
      break;
    }
    if (!a3) {
      goto LABEL_16;
    }
LABEL_7:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_17;
    }
  }
  if (!a3) {
    goto LABEL_7;
  }
  BOOL v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v16 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
  Swift::Int v17 = v16[1];
  *a1 = *v16;
  a1[1] = v17;
  swift_bridgeObjectRetain();
  return 0;
}

{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  void *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    id v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      BOOL v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    Swift::Int v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      char v18 = (void *)(v11 + 16 * v10);
      int v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSNumber?>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v29 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_36;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_36;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_36;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v29;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v9) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      int v19 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      if (v19)
      {
        Hasher._combine(_:)(1u);
        id v20 = v19;
        NSObject.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    int64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          uint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_36;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            uint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_36;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  uint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_42;
                  }
                  if (v11 >= v8) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v21 = *v19;
      id v20 = v19[1];
      Hasher.init(_seed:)();
      if (v20)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      char v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v25 = 0;
        BOOL v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            char v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        int64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v21;
      v13[1] = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    int64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          uint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            uint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  uint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      id v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      char v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v25 = 0;
        BOOL v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            char v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        int64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a2 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a3((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a2, v5);
    swift_release();
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = a3((char *)v10, v7, a2, v5);
    swift_release();
    MEMORY[0x22A627DB0](v10, -1, -1);
  }
  return v9;
}

Swift::Int specialized closure #1 in _NativeSet.intersection(_:)(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v53 = (unint64_t *)result;
  if (*(void *)(a4 + 16) >= *(void *)(a3 + 16)) {
    goto LABEL_41;
  }
  int64_t v6 = 0;
  uint64_t v51 = a4 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  uint64_t v54 = 0;
  int64_t v55 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = a3 + 56;
  while (2)
  {
    while (2)
    {
      if (v9)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v12 = v11 | (v6 << 6);
      }
      else
      {
        int64_t v13 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        if (v13 >= v55) {
          goto LABEL_80;
        }
        unint64_t v14 = *(void *)(v51 + 8 * v13);
        ++v6;
        if (!v14)
        {
          int64_t v6 = v13 + 1;
          if (v13 + 1 >= v55) {
            goto LABEL_80;
          }
          unint64_t v14 = *(void *)(v51 + 8 * v6);
          if (!v14)
          {
            int64_t v6 = v13 + 2;
            if (v13 + 2 >= v55) {
              goto LABEL_80;
            }
            unint64_t v14 = *(void *)(v51 + 8 * v6);
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v55)
              {
LABEL_80:
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v53, a2, v54, v5);
              }
              unint64_t v14 = *(void *)(v51 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v6 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v6 >= v55) {
                    goto LABEL_80;
                  }
                  unint64_t v14 = *(void *)(v51 + 8 * v6);
                  ++v15;
                  if (v14) {
                    goto LABEL_22;
                  }
                }
LABEL_83:
                __break(1u);
                goto LABEL_84;
              }
              int64_t v6 = v15;
            }
          }
        }
LABEL_22:
        unint64_t v9 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v6 << 6);
      }
      int64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      if (v17)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v20 = result & ~v19;
      if (((*(void *)(v10 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      {
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v4 = a4;
        continue;
      }
      break;
    }
    uint64_t v21 = ~v19;
    uint64_t v22 = *(void *)(v5 + 48);
    while (1)
    {
      unint64_t v23 = (void *)(v22 + 16 * v20);
      uint64_t v24 = v23[1];
      if (!v24)
      {
        if (!v17) {
          goto LABEL_38;
        }
        goto LABEL_29;
      }
      if (v17)
      {
        if (*v23 == v18 && v24 == v17) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          break;
        }
      }
LABEL_29:
      unint64_t v20 = (v20 + 1) & v21;
      if (((*(void *)(v10 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        goto LABEL_6;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
    *(unint64_t *)((char *)v53 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    BOOL v26 = __OFADD__(v54++, 1);
    uint64_t v4 = a4;
    if (!v26) {
      continue;
    }
    break;
  }
  __break(1u);
LABEL_41:
  uint64_t v54 = 0;
  int64_t v27 = 0;
  uint64_t v50 = v5 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  else {
    uint64_t v29 = -1;
  }
  unint64_t v30 = v29 & *(void *)(v5 + 56);
  int64_t v52 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v31 = v4 + 56;
LABEL_46:
  while (2)
  {
    if (v30)
    {
      unint64_t v32 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      int64_t v56 = v27;
      unint64_t v33 = v32 | (v27 << 6);
LABEL_62:
      uint64_t v38 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v33);
      uint64_t v40 = *v38;
      uint64_t v39 = v38[1];
      Hasher.init(_seed:)();
      if (v39)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t v41 = v5;
      uint64_t result = Hasher._finalize()();
      uint64_t v42 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v43 = result & ~v42;
      if (((*(void *)(v31 + ((v43 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
      {
LABEL_45:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = v41;
        uint64_t v4 = a4;
        int64_t v27 = v56;
        continue;
      }
      uint64_t v44 = ~v42;
      uint64_t v45 = *(void *)(v4 + 48);
      while (1)
      {
        uint64_t v46 = (void *)(v45 + 16 * v43);
        uint64_t v47 = v46[1];
        if (v47)
        {
          if (v39)
          {
            BOOL v48 = *v46 == v40 && v47 == v39;
            if (v48 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              uint64_t result = swift_bridgeObjectRelease();
LABEL_77:
              *(unint64_t *)((char *)v53 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
              int64_t v27 = v56;
              BOOL v26 = __OFADD__(v54++, 1);
              uint64_t v5 = v41;
              uint64_t v4 = a4;
              if (v26)
              {
                __break(1u);
                goto LABEL_80;
              }
              goto LABEL_46;
            }
          }
        }
        else if (!v39)
        {
          goto LABEL_77;
        }
        unint64_t v43 = (v43 + 1) & v44;
        if (((*(void *)(v31 + ((v43 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v43) & 1) == 0) {
          goto LABEL_45;
        }
      }
    }
    break;
  }
  int64_t v34 = v27 + 1;
  if (__OFADD__(v27, 1)) {
    goto LABEL_82;
  }
  if (v34 >= v52) {
    goto LABEL_80;
  }
  unint64_t v35 = *(void *)(v50 + 8 * v34);
  int64_t v36 = v27 + 1;
  if (v35) {
    goto LABEL_61;
  }
  int64_t v36 = v27 + 2;
  if (v27 + 2 >= v52) {
    goto LABEL_80;
  }
  unint64_t v35 = *(void *)(v50 + 8 * v36);
  if (v35) {
    goto LABEL_61;
  }
  int64_t v36 = v27 + 3;
  if (v27 + 3 >= v52) {
    goto LABEL_80;
  }
  unint64_t v35 = *(void *)(v50 + 8 * v36);
  if (v35)
  {
LABEL_61:
    unint64_t v30 = (v35 - 1) & v35;
    int64_t v56 = v36;
    unint64_t v33 = __clz(__rbit64(v35)) + (v36 << 6);
    goto LABEL_62;
  }
  uint64_t v37 = v27 + 4;
  if (v27 + 4 >= v52) {
    goto LABEL_80;
  }
  unint64_t v35 = *(void *)(v50 + 8 * v37);
  if (v35)
  {
    int64_t v36 = v27 + 4;
    goto LABEL_61;
  }
  while (1)
  {
    int64_t v36 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v36 >= v52) {
      goto LABEL_80;
    }
    unint64_t v35 = *(void *)(v50 + 8 * v36);
    ++v37;
    if (v35) {
      goto LABEL_61;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v58 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v59 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v61 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          int64_t v62 = v6;
          unint64_t v12 = v11 | (v6 << 6);
        }
        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59) {
            goto LABEL_79;
          }
          unint64_t v14 = *(void *)(v58 + 8 * v13);
          int64_t v15 = v6 + 1;
          if (!v14)
          {
            int64_t v15 = v6 + 2;
            if (v6 + 2 >= v59) {
              goto LABEL_79;
            }
            unint64_t v14 = *(void *)(v58 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v6 + 3;
              if (v6 + 3 >= v59) {
                goto LABEL_79;
              }
              unint64_t v14 = *(void *)(v58 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v6 + 4;
                if (v6 + 4 >= v59) {
                  goto LABEL_79;
                }
                unint64_t v14 = *(void *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v59) {
                      goto LABEL_79;
                    }
                    unint64_t v14 = *(void *)(v58 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          unint64_t v9 = (v14 - 1) & v14;
          int64_t v62 = v15;
          unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v20 = Hasher._finalize()();
        uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v22 = v20 & ~v21;
        unint64_t v23 = v22 >> 6;
        uint64_t v24 = 1 << v22;
        if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v6 = v62;
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v25 = *(void *)(a3 + 48);
      BOOL v26 = (void *)(v25 + 16 * v22);
      BOOL v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v28 = ~v21;
        for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
        {
          unint64_t v30 = i & v28;
          if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
            break;
          }
          uint64_t v31 = (void *)(v25 + 16 * v30);
          BOOL v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v23 = v30 >> 6;
            uint64_t v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
  }
  int64_t v34 = 0;
  uint64_t v60 = a3 + 56;
  uint64_t v61 = 0;
  uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v37 = v36 & *(void *)(a3 + 56);
  int64_t v63 = (unint64_t)(v35 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    int64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      int64_t v34 = v41 + 1;
      if (v41 + 1 >= v63) {
        goto LABEL_79;
      }
      unint64_t v42 = *(void *)(v60 + 8 * v34);
      if (!v42)
      {
        int64_t v34 = v41 + 2;
        if (v41 + 2 >= v63) {
          goto LABEL_79;
        }
        unint64_t v42 = *(void *)(v60 + 8 * v34);
        if (!v42) {
          break;
        }
      }
    }
LABEL_62:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v47 = Hasher._finalize()();
    uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v49 = v47 & ~v48;
    if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v50 = *(void *)(a4 + 48);
    uint64_t v51 = (void *)(v50 + 16 * v49);
    BOOL v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v57, a2, v61, v5);
      }
    }
    else
    {
      uint64_t v53 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v53;
        if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          break;
        }
        uint64_t v54 = (void *)(v50 + 16 * v49);
        BOOL v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_76;
        }
      }
LABEL_46:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  int64_t v43 = v41 + 3;
  if (v43 >= v63) {
    goto LABEL_79;
  }
  unint64_t v42 = *(void *)(v60 + 8 * v43);
  if (v42)
  {
    int64_t v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    int64_t v34 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v34 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v34);
    ++v43;
    if (v42) {
      goto LABEL_62;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_39:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_42;
    }
    if (v14 >= v30) {
      goto LABEL_39;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_39;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_39;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    Hasher.init(_seed:)();
    if (v18)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v19;
    v28[1] = v18;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (!v5) {
      goto LABEL_39;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_39;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_39;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;

  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_36:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(void *a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_19;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_19;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    id v10 = a1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v11 & ~v12;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v13 = ~v12;
    do
    {
      uint64_t v14 = *(void **)(*(void *)(v9 + 48) + 8 * a2);
      if (v14)
      {
        if (a1)
        {
          type metadata accessor for NSNumber();
          id v15 = a1;
          id v16 = v14;
          char v17 = static NSObject.== infix(_:_:)();

          if (v17)
          {
LABEL_18:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNumber?);
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
      }
      else if (!a1)
      {
        goto LABEL_18;
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  uint64_t v18 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v18 + 48) + 8 * a2) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v21;
  }
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_23;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_23;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v11 + 48);
    do
    {
      id v16 = (void *)(v15 + 16 * a3);
      uint64_t v17 = v16[1];
      if (v17)
      {
        if (a2)
        {
          BOOL v18 = *v16 == v8 && v17 == a2;
          if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
LABEL_22:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_22;
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_23:
  uint64_t v19 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  BOOL v20 = (Swift::Int *)(*(void *)(v19 + 48) + 16 * a3);
  *BOOL v20 = v8;
  v20[1] = a2;
  uint64_t v21 = *(void *)(v19 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v23;
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    id v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        BOOL v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  BOOL v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  BOOL v22 = *(void *)(v20 + 16);
  uint64_t v23 = __OFADD__(v22, 1);
  char v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSNumber?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v15);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  BOOL v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSNumber?>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v9) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    unint64_t v19 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    if (v19)
    {
      Hasher._combine(_:)(1u);
      id v20 = v19;
      NSObject.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_38;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v29) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      uint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        uint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v21 = *v19;
    id v20 = v19[1];
    Hasher.init(_seed:)();
    if (v20)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    char v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      BOOL v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          char v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      int64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v21;
    v13[1] = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_38;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      uint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        uint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    char v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      BOOL v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          char v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      int64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  int64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 8 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNumber?);
  lazy protocol witness table accessor for type NSNumber? and conformance <A> A?();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      Swift::Int v5 = *v4++;
      Swift::Int v6 = v5;
      specialized Set._Variant.insert(_:)(&v7, v5);

      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_30:
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = MEMORY[0x22A627400](i, a1);
          unint64_t v10 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_27:
            __break(1u);
            return v23;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_30;
          }
          uint64_t v9 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          unint64_t v10 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_27;
          }
        }
        uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v9 + 216))();
        if (*(void *)(v11 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5), (v13 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v21);
        }
        else
        {
          long long v21 = 0u;
          long long v22 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v22 + 1))
        {
          if (swift_dynamicCast())
          {
            if (!a3)
            {
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_6;
            }
            if (v19 == a2 && v20 == a3)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v14 & 1) == 0) {
                goto LABEL_23;
              }
            }
            goto LABEL_5;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
        }
        if (a3)
        {
LABEL_23:
          swift_release();
          goto LABEL_6;
        }
LABEL_5:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_6:
        if (v10 == v7) {
          return v23;
        }
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t type metadata accessor for PSEHomeSELFEmitter()
{
  return self;
}

uint64_t method lookup function for PSEHomeSELFEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEHomeSELFEmitter);
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.emitPSEHome(homeSignals:appLaunchSignals:task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.isUndoAction(actionFromSiri:actionFromUser:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.getHomeFollowUpType(userSignals:siriSignals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.getHomeFollowUpSource(userSignals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.isFollowUpInSameContainer(userSignals:siriSignals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

unint64_t lazy protocol witness table accessor for type NSNumber? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type NSNumber? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type NSNumber? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NSNumber?);
    lazy protocol witness table accessor for type NSNumber and conformance NSObject();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNumber? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSNumber and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSNumber and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSNumber and conformance NSObject)
  {
    type metadata accessor for NSNumber();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNumber and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
  }
  return result;
}

uint64_t Logger.engagement.unsafeMutableAddressor()
{
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.engagement);
}

uint64_t Logger.debug(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return Logger.debug(_:_:)(a1, a2, a3, MEMORY[0x263F90278]);
}

uint64_t Logger.error(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return Logger.debug(_:_:)(a1, a2, a3, MEMORY[0x263F90280]);
}

uint64_t Logger.debug(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = a4();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = v11;
    *(_DWORD *)unint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_224EDB000, v8, v9, "%s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A627DB0](v11, -1, -1);
    MEMORY[0x22A627DB0](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  type metadata accessor for SiriTaskEngagementUtils();
  uint64_t v12 = dispatch thunk of static SiriTaskEngagementUtils.formulateSimplifiedReliabilityReasonDescription(reliabilityDescription:)();
  MEMORY[0x22A626AD0](a3, v12, v13);
  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for engagement()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.engagement);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.engagement);
  if (one-time initialization token for pseLog != -1) {
    swift_once();
  }
  id v1 = (id)static Log.pseLog;
  return Logger.init(_:)();
}

uint64_t *Log.pseLog.unsafeMutableAddressor()
{
  if (one-time initialization token for pseLog != -1) {
    swift_once();
  }
  return &static Log.pseLog;
}

uint64_t static Logger.engagement.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.engagement);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t one-time initialization function for pseLog()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.pseLog = result;
  return result;
}

id static Log.pseLog.getter()
{
  if (one-time initialization token for pseLog != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static Log.pseLog;
  return v0;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

__n128 Signal.__allocating_init(deltaT:domain:action:postSiriEngagement:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = *(void *)(a1 + 32);
  char v16 = *(unsigned char *)(a1 + 40);
  __n128 result = *(__n128 *)a1;
  long long v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 32) = v18;
  *(void *)(v14 + 48) = v15;
  *(unsigned char *)(v14 + 56) = v16;
  *(void *)(v14 + 64) = a2;
  *(void *)(v14 + 72) = a3;
  *(void *)(v14 + 80) = a4;
  *(void *)(v14 + 88) = a5;
  *(unsigned char *)(v14 + 96) = a6;
  *(void *)(v14 + 104) = a7;
  return result;
}

uint64_t PSESignals.init(biomeSignals:siriTaskEngagementFeatures:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

double Delta.donatedAtTimestamp.getter()
{
  return *(double *)v0;
}

void Delta.donatedAtTimestamp.setter(double a1)
{
  *id v1 = a1;
}

uint64_t (*Delta.donatedAtTimestamp.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

double Delta.sinceUIEnd.getter()
{
  return *(double *)(v0 + 8);
}

void Delta.sinceUIEnd.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*Delta.sinceUIEnd.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

double Delta.sinceUIStart.getter()
{
  return *(double *)(v0 + 16);
}

void Delta.sinceUIStart.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*Delta.sinceUIStart.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

double Delta.duration.getter()
{
  return *(double *)(v0 + 24);
}

void Delta.duration.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*Delta.duration.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t Delta.errorCode.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Delta.errorCode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*Delta.errorCode.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Delta.CodingKeys()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x45495565636E6973;
      break;
    case 2:
      unint64_t result = 0x53495565636E6973;
      break;
    case 3:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 4:
      unint64_t result = 0x646F43726F727265;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Delta.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Delta.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Delta.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Delta.CodingKeys and conformance Delta.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Delta.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Delta.CodingKeys and conformance Delta.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Delta.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Delta.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = *(void *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Delta.CodingKeys and conformance Delta.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v10 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void __swiftcall Delta.init(donatedAtTimestamp:sinceUIEnd:sinceUIStart:duration:errorCode:)(PostSiriEngagement::Delta *__return_ptr retstr, Swift::Double donatedAtTimestamp, Swift::Double sinceUIEnd, Swift::Double sinceUIStart, Swift::Double duration, Swift::Double_optional errorCode)
{
  retstr->donatedAtTimestamp = donatedAtTimestamp;
  retstr->sinceUIEnd = sinceUIEnd;
  retstr->sinceUIStart = sinceUIStart;
  retstr->duration = duration;
  retstr->errorCode.value = *(Swift::Double *)&errorCode.is_nil;
  retstr->errorCode.is_nil = v6 & 1;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Delta(void *a1)
{
  return Delta.encode(to:)(a1);
}

__n128 Signal.deltaT.getter@<Q0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 48);
  char v4 = *(unsigned char *)(v1 + 56);
  __n128 result = *(__n128 *)(v1 + 16);
  long long v6 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  return result;
}

__n128 Signal.deltaT.setter(__n128 *a1)
{
  __n128 v7 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unint64_t v4 = a1[2].n128_u64[0];
  unsigned __int8 v5 = a1[2].n128_u8[8];
  swift_beginAccess();
  __n128 result = v7;
  v1[1] = v7;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  v1[3].n128_u64[0] = v4;
  v1[3].n128_u8[8] = v5;
  return result;
}

uint64_t (*Signal.deltaT.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t Signal.domain.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Signal.domain.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Signal.domain.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t Signal.action.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Signal.action.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Signal.action.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t Signal.postSiriEngagement.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t Signal.postSiriEngagement.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 96) = a1;
  return result;
}

uint64_t (*Signal.postSiriEngagement.modify())()
{
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t Signal.data.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Signal.data.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 104) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*Signal.data.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t Signal.init(deltaT:domain:action:postSiriEngagement:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 32) = v10;
  *(void *)(v7 + 48) = v8;
  *(unsigned char *)(v7 + 56) = v9;
  *(void *)(v7 + 64) = a2;
  *(void *)(v7 + 72) = a3;
  *(void *)(v7 + 80) = a4;
  *(void *)(v7 + 88) = a5;
  *(unsigned char *)(v7 + 96) = a6;
  *(void *)(v7 + 104) = a7;
  return v7;
}

unint64_t lazy protocol witness table accessor for type Delta.CodingKeys and conformance Delta.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys;
  if (!lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys;
  if (!lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys;
  if (!lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys;
  if (!lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys);
  }
  return result;
}

PostSiriEngagement::Signal::CodingKeys_optional __swiftcall Signal.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  int64_t object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._int64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Signal.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return (PostSiriEngagement::Signal::CodingKeys_optional)5;
  }
  else {
    return (PostSiriEngagement::Signal::CodingKeys_optional)v3;
  }
}

PostSiriEngagement::Signal::CodingKeys_optional __swiftcall Signal.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (PostSiriEngagement::Signal::CodingKeys_optional)5;
}

uint64_t Signal.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t Signal.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x5461746C6564;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E69616D6F64;
      break;
    case 2:
      unint64_t result = 0x6E6F69746361;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t Signal.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x5461746C6564;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E69616D6F64;
      break;
    case 2:
      unint64_t result = 0x6E6F69746361;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Signal.CodingKeys(unsigned __int8 *a1, unsigned char *a2)
{
  unint64_t v2 = 0x5461746C6564;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE600000000000000;
  unint64_t v5 = 0x5461746C6564;
  switch(v3)
  {
    case 1:
      unint64_t v5 = 0x6E69616D6F64;
      break;
    case 2:
      unint64_t v5 = 0x6E6F69746361;
      break;
    case 3:
      unint64_t v4 = 0x8000000224F66600;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 4:
      unint64_t v4 = 0xE400000000000000;
      unint64_t v5 = 1635017060;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(*a2)
  {
    case 1:
      if (v5 == 0x6E69616D6F64) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      if (v5 != 0x6E6F69746361) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0x8000000224F66600;
      unint64_t v2 = 0xD000000000000012;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1635017060) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Signal.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Signal.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Signal.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Signal.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Signal.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Signal.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x5461746C6564;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x6E69616D6F64;
      goto LABEL_3;
    case 2:
      *a1 = 0x6E6F69746361;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0xD000000000000012;
      a1[1] = 0x8000000224F66600;
      break;
    case 4:
      *a1 = 1635017060;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE600000000000000;
      break;
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Signal.CodingKeys()
{
  unint64_t result = 0x5461746C6564;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6E69616D6F64;
      break;
    case 2:
      unint64_t result = 0x6E6F69746361;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Signal.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Signal.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Signal.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Signal.CodingKeys and conformance Signal.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Signal.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Signal.CodingKeys and conformance Signal.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Signal.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for ReliabilityCategory();
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v7 - 8);
  char v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Signal.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Signal.CodingKeys and conformance Signal.CodingKeys();
  uint64_t v14 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v2 + 120))(v42, v14);
  long long v38 = v42[0];
  long long v39 = v42[1];
  uint64_t v40 = v43;
  char v41 = v44;
  char v37 = 0;
  lazy protocol witness table accessor for type Delta and conformance Delta();
  id v15 = v36;
  uint64_t v16 = KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v15) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  id v36 = v9;
  uint64_t v18 = v35;
  (*(void (**)(uint64_t))(*(void *)v2 + 144))(v16);
  LOBYTE(v42[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v19 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v2 + 168))(v19);
  LOBYTE(v42[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v20 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v2 + 192))(v20);
  LOBYTE(v42[0]) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  long long v21 = self;
  (*(void (**)(void))(*(void *)v2 + 216))();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&v42[0] = 0;
  id v23 = objc_msgSend(v21, sel_dataWithJSONObject_options_error_, isa, 1, v42);

  id v24 = *(id *)&v42[0];
  if (v23)
  {
    uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    outlined consume of Data._Representation(v25, v27);
  }
  else
  {
    uint64_t v28 = v24;
    uint64_t v29 = (void *)_convertNSErrorToError(_:)();

    id v36 = v29;
    swift_willThrow();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.engagement);
    uint64_t v31 = *MEMORY[0x263F75060];
    uint64_t v32 = type metadata accessor for EncodingError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v6, v31, v32);
    uint64_t v33 = v34;
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v6, *MEMORY[0x263F750C0], v18);
    Logger.error(_:_:)(0xD00000000000004DLL, 0x8000000224F679A0, (uint64_t)v6);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v18);
  }
  LOBYTE(v42[0]) = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_bridgeObjectRelease();
}

uint64_t Signal.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Signal.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 112, 7);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Signal()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t PSETask.siriTask.getter()
{
  return swift_retain();
}

uint64_t PSETask.siriTask.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PSETask.siriTask.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSETask.biomeSignals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSETask.biomeSignals.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PSETask.biomeSignals.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSETask.siriTaskEngagementFeatures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSETask.siriTaskEngagementFeatures.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PSETask.siriTaskEngagementFeatures.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSETask.init(siriTask:biomeSignals:siriTaskEngagementFeatures:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t PSESignals.biomeSignals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSESignals.biomeSignals.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PSESignals.biomeSignals.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSESignals.siriTaskEngagementFeatures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSESignals.siriTaskEngagementFeatures.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PSESignals.siriTaskEngagementFeatures.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t specialized Delta.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x8000000224F67A10
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x45495565636E6973 && a2 == 0xEA0000000000646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x53495565636E6973 && a2 == 0xEC00000074726174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t specialized Signal.CodingKeys.init(rawValue:)(Swift::String string)
{
  int64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._int64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Signal.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type Signal.CodingKeys and conformance Signal.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys;
  if (!lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys;
  if (!lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys;
  if (!lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys;
  if (!lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Delta and conformance Delta()
{
  unint64_t result = lazy protocol witness table cache variable for type Delta and conformance Delta;
  if (!lazy protocol witness table cache variable for type Delta and conformance Delta)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta and conformance Delta);
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

double sub_224F08310@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 120))(v7);
  uint64_t v3 = v8;
  char v4 = v9;
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 32) = v3;
  *(unsigned char *)(a2 + 40) = v4;
  return result;
}

uint64_t sub_224F0837C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *a2;
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  uint64_t v8 = v2;
  char v9 = v3;
  return (*(uint64_t (**)(_OWORD *))(*(void *)v4 + 128))(v7);
}

uint64_t sub_224F083E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F08430(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F08498@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F084E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 176);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F0854C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_224F0859C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 200))(*a1);
}

uint64_t sub_224F085E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_224F08630(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 224);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t initializeBufferWithCopyOfBuffer for Delta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Delta(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Delta(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Delta()
{
  return &type metadata for Delta;
}

uint64_t type metadata accessor for Signal()
{
  return self;
}

uint64_t method lookup function for Signal(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Signal);
}

uint64_t dispatch thunk of Signal.deltaT.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of Signal.deltaT.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of Signal.deltaT.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of Signal.domain.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of Signal.domain.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of Signal.domain.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of Signal.action.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of Signal.action.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of Signal.action.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of Signal.postSiriEngagement.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of Signal.postSiriEngagement.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of Signal.postSiriEngagement.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of Signal.data.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of Signal.data.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of Signal.data.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of Signal.__allocating_init(deltaT:domain:action:postSiriEngagement:data:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of Signal.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

ValueMetadata *type metadata accessor for Signal.CodingKeys()
{
  return &type metadata for Signal.CodingKeys;
}

uint64_t destroy for PSETask()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for PSETask(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PSETask(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PSETask(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PSETask(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PSETask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PSETask()
{
  return &type metadata for PSETask;
}

uint64_t destroy for PSESignals()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for PSESignals(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PSESignals(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for PSESignals(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PSESignals(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PSESignals(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PSESignals()
{
  return &type metadata for PSESignals;
}

unsigned char *storeEnumTagSinglePayload for Signal.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224F08E7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Delta.CodingKeys()
{
  return &unk_26D84E718;
}

void AlarmSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v112 = a2;
  uint64_t v4 = type metadata accessor for ReliabilityCategory();
  id v122 = *(uint8_t **)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v113 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  char v13 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)MEMORY[0x22A6277A0](v11);
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v117);
  if (v2)
  {
    return;
  }
  char v105 = v9;
  uint64_t v107 = v6;
  uint64_t v106 = v4;
  unint64_t v104 = v13;
  id v110 = a1;
  uint64_t v108 = 0;
  id v109 = (id)v117;
  id v111 = objc_msgSend((id)v117, sel_intent);
  id v15 = objc_msgSend(v111, sel_typeName);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v123._uint64_t countAndFlagsBits = v16;
  v123._int64_t object = v18;
  if (specialized SynapseTypesAlarmRelatedConstants.init(rawValue:)(v123) == 4)
  {
    uint64_t v19 = v7;
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v20 = __swift_project_value_buffer(v7, (uint64_t)static Logger.engagement);
    uint64_t v21 = v113;
    long long v22 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v105, v20, v19);
    *(void *)&long long v117 = 0;
    *((void *)&v117 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v23._uint64_t countAndFlagsBits = 0xD000000000000012;
    v23._int64_t object = (void *)0x8000000224F67470;
    String.append(_:)(v23);
    id v24 = objc_msgSend(v111, sel_domain);
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    v28._uint64_t countAndFlagsBits = v25;
    v28._int64_t object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 0xD000000000000024;
    v29._int64_t object = (void *)0x8000000224F67A30;
    String.append(_:)(v29);
    long long v30 = v117;
    uint64_t v31 = *MEMORY[0x263F75148];
    uint64_t v32 = type metadata accessor for AppIntentEventDataIssues();
    uint64_t v33 = (uint64_t)v107;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v107, v31, v32);
    uint64_t v34 = v122;
    uint64_t v35 = v106;
    (*((void (**)(uint64_t, void, uint64_t))v122 + 13))(v33, *MEMORY[0x263F750E8], v106);
    Logger.error(_:_:)(v30, *((unint64_t *)&v30 + 1), v33);

    swift_bridgeObjectRelease();
    (*((void (**)(uint64_t, uint64_t))v34 + 1))(v33, v35);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v19);
    return;
  }
  id v36 = objc_msgSend(v110, sel_intentClass);
  if (!v36) {
    goto LABEL_40;
  }
  char v37 = v36;
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  if (v38 == 0xD000000000000011 && v40 == 0x8000000224F67A60
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v41 = objc_msgSend(v109, sel_intentResponse);
    uint64_t v42 = MEMORY[0x263F8EE80];
    if (!v41)
    {
LABEL_46:
      uint64_t v51 = v112;
      BOOL v52 = &selRef_init;
      uint64_t v61 = (uint64_t)v104;
      goto LABEL_47;
    }
    uint64_t v43 = v41;
    id v44 = objc_msgSend(v41, sel__className);
    if (v44)
    {
      uint64_t v45 = v44;
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v48 = v47;

      if (v46 == 0xD000000000000019 && v48 == 0x8000000224F67B00)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v53 & 1) == 0) {
          goto LABEL_28;
        }
      }
      uint64_t v54 = (void *)MEMORY[0x22A626F60](0xD000000000000017, 0x8000000224F67B20);
      id v55 = objc_msgSend(v43, sel_valueForKeyPath_, v54);

      if (v55)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v115 = 0u;
        long long v116 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v115, (uint64_t)&v117);
      if (!v119)
      {

        outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for Any?);
        goto LABEL_46;
      }
      uint64_t v56 = MEMORY[0x263F8D310];
      if (swift_dynamicCast())
      {
        uint64_t v57 = specialized static Utils.normalizedAlarmIdentifier(from:)(v114, *((uint64_t *)&v114 + 1));
        uint64_t v59 = v58;
        swift_bridgeObjectRelease();
        uint64_t v119 = v56;
        *(void *)&long long v117 = v57;
        *((void *)&v117 + 1) = v59;
        outlined init with take of Any(&v117, &v115);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v114 = v42;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v115, 0x6564496D72616C61, 0xEF7265696669746ELL, isUniquelyReferenced_nonNull_native);
        uint64_t v42 = v114;

        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
    }
LABEL_28:

    goto LABEL_46;
  }
  if (v38 == 0xD000000000000013 && v40 == 0x8000000224F67A80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    unint64_t v49 = (void *)MEMORY[0x22A626F60](0xD000000000000010, 0x8000000224F67AE0);
    id v50 = objc_msgSend(v111, sel_valueForKeyPath_, v49);

    uint64_t v51 = v112;
    BOOL v52 = &selRef_init;
    if (v50)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v115 = 0u;
      long long v116 = 0u;
    }
    uint64_t v61 = (uint64_t)v104;
    outlined init with take of Any?((uint64_t)&v115, (uint64_t)&v117);
    if (v119) {
      goto LABEL_32;
    }
LABEL_56:
    outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for Any?);
    goto LABEL_57;
  }
  if (v38 == 0xD000000000000013 && v40 == 0x8000000224F67AA0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v65 & 1) == 0)
  {
LABEL_40:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v7, (uint64_t)static Logger.engagement);
    id v68 = v111;
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v69, v70))
    {
      char v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      *(void *)&long long v117 = v72;
      *(_DWORD *)char v71 = 136315138;
      id v122 = v71 + 4;
      id v73 = objc_msgSend(v68, sel__className);
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v76 = v75;

      *(void *)&long long v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224EDB000, v69, v70, "Skip the alarmID for other intents %s", v71, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v72, -1, -1);
      MEMORY[0x22A627DB0](v71, -1, -1);
    }
    else
    {
    }
    uint64_t v42 = MEMORY[0x263F8EE80];
    goto LABEL_46;
  }
LABEL_38:
  char v66 = (void *)MEMORY[0x22A626F60](0xD000000000000012, 0x8000000224F67AC0);
  id v67 = objc_msgSend(v111, sel_valueForKeyPath_, v66);

  if (v67)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v115 = 0u;
    long long v116 = 0u;
  }
  uint64_t v51 = v112;
  BOOL v52 = &selRef_init;
  outlined init with take of Any?((uint64_t)&v115, (uint64_t)&v117);
  uint64_t v61 = (uint64_t)v104;
  if (!v119) {
    goto LABEL_56;
  }
LABEL_32:
  uint64_t v62 = MEMORY[0x263F8D310];
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_57:
    uint64_t v42 = MEMORY[0x263F8EE80];
    goto LABEL_47;
  }
  uint64_t v119 = v62;
  long long v117 = v114;
  outlined init with take of Any(&v117, &v115);
  uint64_t v63 = MEMORY[0x263F8EE80];
  char v64 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v114 = v63;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v115, 0x6564496D72616C61, 0xEF7265696669746ELL, v64);
  uint64_t v42 = v114;
  swift_bridgeObjectRelease();
LABEL_47:
  uint64_t v77 = MEMORY[0x263F8D310];
  id v78 = objc_msgSend(v110, sel_absoluteTimestamp);
  if (v78)
  {
    uint64_t v79 = v78;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v80 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v61, 0, 1, v80);
  }
  else
  {
    uint64_t v81 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v61, 1, 1, v81);
  }
  type metadata accessor for Utils();
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)(v61, v51, (uint64_t)&v117, 0.0);
  outlined destroy of Any?(v61, &demangling cache variable for type metadata for Date?);
  long long v82 = v117;
  uint64_t v83 = v118;
  uint64_t v84 = v119;
  uint64_t v85 = v120;
  char v86 = v121;
  id v87 = v110;
  unsigned __int8 v88 = objc_msgSend(v110, sel_donatedBySiri);
  uint64_t v119 = MEMORY[0x263F8D4F8];
  LOBYTE(v117) = v88;
  outlined init with take of Any(&v117, &v115);
  char v89 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v114 = v42;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v115, 0x42646574616E6F64, 0xED00006972695379, v89);
  uint64_t v90 = v114;
  swift_bridgeObjectRelease();
  id v91 = v111;
  id v92 = [v111 v52[65]];
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v95 = v94;

  uint64_t v119 = v77;
  *(void *)&long long v117 = v93;
  *((void *)&v117 + 1) = v95;
  outlined init with take of Any(&v117, &v115);
  char v96 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v114 = v90;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v115, 0x7954746E65746E69, 0xEE00656D614E6570, v96);
  uint64_t v97 = v114;
  swift_bridgeObjectRelease();
  id v98 = objc_msgSend(v87, sel_intentClass);
  if (v98)
  {
    unint64_t v99 = v98;
    uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v102 = v101;
  }
  else
  {

    uint64_t v100 = 0;
    unint64_t v102 = 0xE000000000000000;
  }

  type metadata accessor for Signal();
  uint64_t v103 = swift_allocObject();
  *(_OWORD *)(v103 + 16) = v82;
  *(void *)(v103 + 32) = v83;
  *(void *)(v103 + 40) = v84;
  *(void *)(v103 + 48) = v85;
  *(unsigned char *)(v103 + 56) = v86;
  *(void *)(v103 + 64) = 0x6D72616C41;
  *(void *)(v103 + 72) = 0xE500000000000000;
  *(void *)(v103 + 80) = v100;
  *(void *)(v103 + 88) = v102;
  *(unsigned char *)(v103 + 96) = 1;
  *(void *)(v103 + 104) = v97;
}

uint64_t AlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v97 = a2;
  uint64_t v7 = (void *)type metadata accessor for ReliabilityCategory();
  uint64_t v8 = *(v7 - 1);
  MEMORY[0x270FA5388](v7);
  unint64_t v99 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  id v98 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x270FA5388](v12 - 8);
  unint64_t v14 = (unint64_t)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v72 = *(void *)(v76 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v76);
  char v71 = (char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  os_log_type_t v70 = (char *)v65 - v17;
  unint64_t v106 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_61;
  }
  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v18)
  {
    id v67 = a3;
    unint64_t v20 = 0;
    a3 = 0;
    uint64_t v21 = *v4;
    unint64_t v96 = a1 & 0xC000000000000001;
    uint64_t v80 = a1 & 0xFFFFFFFFFFFFFF8;
    unint64_t v79 = a1 + 32;
    uint64_t v91 = v10 + 16;
    uint64_t v90 = v8 + 104;
    uint64_t v89 = v8 + 8;
    uint64_t v95 = *(uint64_t (**)(id, uint64_t))(v21 + 88);
    uint64_t v94 = v21 + 88;
    uint64_t v88 = v10 + 8;
    uint64_t v73 = v72 + 56;
    int v87 = *MEMORY[0x263F75030];
    uint64_t v69 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    id v68 = (unint64_t *)(v72 + 32);
    int v86 = *MEMORY[0x263F75118];
    char v66 = (void (**)(char *, char *, uint64_t))(v72 + 16);
    v65[1] = v72 + 8;
    unint64_t v74 = MEMORY[0x263F8EE78];
    unint64_t v85 = 0x8000000224F67B40;
    *(void *)&long long v19 = 136315138;
    long long v78 = v19;
    uint64_t v77 = MEMORY[0x263F8EE58] + 8;
    unint64_t v93 = a1;
    uint64_t v83 = v4;
    uint64_t v84 = v7;
    unint64_t v75 = v14;
    uint64_t v92 = v18;
    while (1)
    {
      if (v96)
      {
        id v22 = (id)MEMORY[0x22A627400](v20, a1);
      }
      else
      {
        if (v20 >= *(void *)(v80 + 16)) {
          goto LABEL_60;
        }
        id v22 = *(id *)(v79 + 8 * v20);
      }
      unint64_t v14 = (unint64_t)v22;
      if (__OFADD__(v20++, 1)) {
        break;
      }
      uint64_t v10 = (uint64_t)v4;
      uint64_t v24 = v95(v22, v97);
      if (v24)
      {
        id v82 = (id)v14;
        unint64_t v14 = v106;
        uint64_t v101 = v24;
        unint64_t v81 = v20;
        if (v106 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v4 = (void *)_CocoaArrayWrapper.endIndex.getter();
          if (v4)
          {
LABEL_13:
            uint64_t v7 = *(void **)(*(void *)v101 + 120);
            a1 = *(void *)v101 + 120;
            uint64_t v8 = 4;
            while (1)
            {
              uint64_t v10 = v8 - 4;
              if ((v14 & 0xC000000000000001) != 0)
              {
                uint64_t v25 = MEMORY[0x22A627400](v8 - 4, v14);
                unint64_t v26 = (void *)(v8 - 3);
                if (__OFADD__(v10, 1)) {
                  goto LABEL_58;
                }
              }
              else
              {
                uint64_t v25 = *(void *)(v14 + 8 * v8);
                swift_retain();
                unint64_t v26 = (void *)(v8 - 3);
                if (__OFADD__(v10, 1))
                {
LABEL_58:
                  __break(1u);
                  goto LABEL_59;
                }
              }
              unint64_t v27 = ((void *(*)(Swift::String *__return_ptr))v7)(&v104);
              double v28 = *(double *)&v104._countAndFlagsBits;
              (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v25 + 120))(&v102, v27);
              if (vabdd_f64(v28, *(double *)&v102) < 2.0) {
                break;
              }
              swift_release();
              ++v8;
              if (v26 == v4) {
                goto LABEL_21;
              }
            }
            swift_bridgeObjectRelease_n();
            if (one-time initialization token for engagement != -1) {
              swift_once();
            }
            __swift_project_value_buffer(v100, (uint64_t)static Logger.engagement);
            uint64_t v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.info.getter();
            BOOL v33 = os_log_type_enabled(v31, v32);
            a1 = v93;
            if (v33)
            {
              uint64_t v34 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v34 = 0;
              _os_log_impl(&dword_224EDB000, v31, v32, "duped won't be added to PSE signals, we update the original one.", v34, 2u);
              MEMORY[0x22A627DB0](v34, -1, -1);
            }

            (*(void (**)(void))(*(void *)v25 + 168))();
            Swift::String v35 = String.lowercased()();
            swift_bridgeObjectRelease();
            Swift::String v104 = v35;
            uint64_t v102 = 0x656C67676F74;
            unint64_t v103 = 0xE600000000000000;
            unint64_t v14 = lazy protocol witness table accessor for type String and conformance String();
            char v36 = StringProtocol.contains<A>(_:)();
            uint64_t v37 = swift_bridgeObjectRelease();
            if ((v36 & 1) == 0) {
              goto LABEL_34;
            }
            uint64_t v8 = *(void *)(*(void *)v101 + 168);
            ((void (*)(uint64_t))v8)(v37);
            Swift::String v38 = String.lowercased()();
            swift_bridgeObjectRelease();
            Swift::String v104 = v38;
            uint64_t v102 = 0x657461657263;
            unint64_t v103 = 0xE600000000000000;
            char v39 = StringProtocol.contains<A>(_:)();
            uint64_t v37 = swift_bridgeObjectRelease();
            if (v39)
            {
              uint64_t v40 = v101;
              uint64_t v41 = ((uint64_t (*)(uint64_t))v8)(v37);
              uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 176))(v41);
              uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 216))(v42);
              uint64_t v10 = v25;
              (*(void (**)(uint64_t))(*(void *)v25 + 224))(v43);

              swift_release();
              swift_release();
              uint64_t v4 = v83;
              uint64_t v7 = v84;
              uint64_t v18 = v92;
            }
            else
            {
LABEL_34:
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 216))(v37);
              uint64_t v7 = v84;
              if (*(void *)(v10 + 16))
              {
                unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL);
                uint64_t v18 = v92;
                if (v46)
                {
                  outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v45, (uint64_t)&v104);
                }
                else
                {
                  Swift::String v104 = (Swift::String)0;
                  long long v105 = 0u;
                }
                uint64_t v4 = v83;
              }
              else
              {
                Swift::String v104 = (Swift::String)0;
                long long v105 = 0u;
                uint64_t v4 = v83;
                uint64_t v18 = v92;
              }
              id v53 = v82;
              swift_bridgeObjectRelease();
              uint64_t v8 = *((void *)&v105 + 1);
              uint64_t v54 = outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for Any?);
              if (v8)
              {

                swift_release();
                swift_release();
              }
              else
              {
                unint64_t v14 = *(void *)(*(void *)v101 + 216);
                uint64_t v10 = ((uint64_t (*)(uint64_t))v14)(v54);
                if (*(void *)(v10 + 16)
                  && (unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL),
                      (v56 & 1) != 0))
                {
                  outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v55, (uint64_t)&v104);
                }
                else
                {
                  Swift::String v104 = (Swift::String)0;
                  long long v105 = 0u;
                }
                swift_bridgeObjectRelease();
                uint64_t v8 = *((void *)&v105 + 1);
                uint64_t v57 = outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for Any?);
                if (v8)
                {
                  uint64_t v8 = v101;
                  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)v101 + 168))(v57);
                  uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 176))(v58);
                  uint64_t v60 = ((uint64_t (*)(uint64_t))v14)(v59);
                  uint64_t v10 = v25;
                  (*(void (**)(uint64_t))(*(void *)v25 + 224))(v60);
                }

                swift_release();
                swift_release();
                uint64_t v7 = v84;
              }
            }
            unint64_t v20 = v81;
            goto LABEL_4;
          }
        }
        else
        {
          uint64_t v4 = *(void **)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v4) {
            goto LABEL_13;
          }
        }
LABEL_21:
        swift_bridgeObjectRelease_n();
        uint64_t v29 = swift_retain();
        MEMORY[0x22A6270D0](v29);
        unint64_t v14 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v14 >= *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v4 = v83;
        uint64_t v8 = v75;
        id v30 = v82;
        (*(void (**)(id))(*v83 + 80))(v82);
        a1 = v93;
        uint64_t v7 = v84;
        uint64_t v18 = v92;
        unint64_t v20 = v81;
        uint64_t v10 = v76;
        int v44 = (*v69)(v8, 1, v76);
        if (v44 == 1)
        {

          swift_release();
          outlined destroy of Any?(v8, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
        }
        else
        {
          unint64_t v14 = *v68;
          uint64_t v47 = v70;
          ((void (*)(char *, uint64_t, uint64_t))*v68)(v70, v8, v10);
          (*v66)(v71, v47, v10);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v74 + 16) + 1, 1, v74);
          }
          unint64_t v49 = *(void *)(v74 + 16);
          unint64_t v48 = *(void *)(v74 + 24);
          uint64_t v50 = v76;
          if (v49 >= v48 >> 1)
          {
            uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, v74);
            uint64_t v50 = v76;
            unint64_t v74 = v61;
          }
          unint64_t v51 = v74;
          *(void *)(v74 + 16) = v49 + 1;
          uint64_t v10 = v72;
          unint64_t v52 = v51
              + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
              + *(void *)(v72 + 72) * v49;
          uint64_t v8 = v50;
          ((void (*)(unint64_t, char *, uint64_t))v14)(v52, v71, v50);

          swift_release();
          (*(void (**)(char *, uint64_t))(v10 + 8))(v70, v8);
        }
      }
      else
      {
      }
LABEL_4:
      if (v20 == v18)
      {
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v63 = v106;
        a3 = v67;
        unint64_t v64 = v74;
        goto LABEL_63;
      }
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v63 = MEMORY[0x263F8EE78];
  unint64_t v64 = MEMORY[0x263F8EE78];
LABEL_63:
  *a3 = v63;
  a3[1] = v64;
  return result;
}

uint64_t AlarmSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AlarmSignalFactory.init()()
{
  return v0;
}

uint64_t AlarmSignalFactory.deinit()
{
  return v0;
}

uint64_t AlarmSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AlarmSignalFactory()
{
  return self;
}

uint64_t PostSiriEngagementCollectionResult.status.getter()
{
  return *v0;
}

uint64_t PostSiriEngagementCollectionResult.status.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PostSiriEngagementCollectionResult.status.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PostSiriEngagementCollectionResult.numCollectedSiriSessions.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PostSiriEngagementCollectionResult.numCollectedSiriSessions.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*PostSiriEngagementCollectionResult.numCollectedSiriSessions.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PostSiriEngagementCollectionResult.lastSessionEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PostSiriEngagementCollectionResult(0) + 24);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for PostSiriEngagementCollectionResult(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for PostSiriEngagementCollectionResult);
}

uint64_t PostSiriEngagementCollectionResult.lastSessionEndDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PostSiriEngagementCollectionResult(0) + 24);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*PostSiriEngagementCollectionResult.lastSessionEndDate.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PostSiriEngagementCollectionResult.init()@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  type metadata accessor for PostSiriEngagementCollectionResult(0);
  return Date.init()();
}

uint64_t default argument 0 of PostSiriEngagementCollectionResult.init(status:numCollectedSiriSessions:lastSessionEndDate:)()
{
  return 0;
}

uint64_t default argument 1 of PostSiriEngagementCollectionResult.init(status:numCollectedSiriSessions:lastSessionEndDate:)()
{
  return 0;
}

uint64_t PostSiriEngagementCollectionResult.init(status:numCollectedSiriSessions:lastSessionEndDate:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  uint64_t v5 = a4 + *(int *)(type metadata accessor for PostSiriEngagementCollectionResult(0) + 24);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  return v7(v5, a3, v6);
}

uint64_t PostSiriEngagementCollection.__allocating_init(identifier:startDate:timeWindowInSeconds:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v12 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v12 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_timeWindowInSeconds;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v12 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_numSiriUISessions;
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  swift_beginAccess();
  outlined assign with take of Date?(a3, v13);
  swift_endAccess();
  *(void *)uint64_t v15 = a4;
  *(unsigned char *)(v15 + 8) = a5 & 1;
  *(void *)uint64_t v16 = a6;
  *(unsigned char *)(v16 + 8) = a7 & 1;
  return v12;
}

uint64_t PostSiriEngagementCollection.init(identifier:startDate:timeWindowInSeconds:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v13 = v7 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v7 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_timeWindowInSeconds;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v7 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_numSiriUISessions;
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_beginAccess();
  outlined assign with take of Date?(a3, v13);
  swift_endAccess();
  *(void *)uint64_t v15 = a4;
  *(unsigned char *)(v15 + 8) = a5 & 1;
  *(void *)uint64_t v16 = a6;
  *(unsigned char *)(v16 + 8) = a7 & 1;
  return v7;
}

uint64_t PostSiriEngagementCollection.__allocating_init(startDate:timeWindowInSeconds:numSiriUISessions:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v9 = a3 & 1;
  uint64_t v10 = a5 & 1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  uint64_t v16 = (*(uint64_t (**)(void, unint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 208))(0, 0xE000000000000000, v13, a2, v9, a4, v10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  return v16;
}

uint64_t PostSiriEngagementCollection.perform(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v27 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v2 + 16);
  uint64_t v13 = *(void *)(v3 + 24);
  type metadata accessor for PostSiriEngagementMetricsCollector();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v14 = PostSiriEngagementMetricsCollector.init(identifier:)(v12, v13);
  uint64_t v15 = v3 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate;
  swift_beginAccess();
  outlined init with copy of Date?(v15, (uint64_t)v7);
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  uint64_t v26 = v8;
  if (v16 == 1)
  {
    swift_retain();
    UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)v11);
    swift_release();
    outlined destroy of Date?((uint64_t)v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  uint64_t v17 = *(void *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_timeWindowInSeconds);
  uint64_t v18 = *(unsigned __int8 *)(v3
                           + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_timeWindowInSeconds
                           + 8);
  uint64_t v19 = v3 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_numSiriUISessions;
  uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_numSiriUISessions);
  uint64_t v21 = *(unsigned __int8 *)(v19 + 8);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v27;
  *(void *)(v22 + 24) = a2;
  Swift::String v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t))(*(void *)v14
                                                                                                  + 248);
  swift_retain();
  v23(v11, v17, v18, v20, v21, partial apply for closure #1 in PostSiriEngagementCollection.perform(completion:), v22);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v26);
}

uint64_t PostSiriEngagementCollection.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of Date?(v0 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate);
  return v0;
}

uint64_t PostSiriEngagementCollection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of Date?(v0 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F0B978()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PostSiriEngagementCollection.perform(completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for PostSiriEngagementCollectionResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for Date();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_224F0BD38);
}

uint64_t sub_224F0BD38(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 24)];
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_224F0BDFC);
}

unsigned char *sub_224F0BDFC(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 24)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PostSiriEngagementCollectionResult()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PostSiriEngagementCollection()
{
  return type metadata accessor for PostSiriEngagementCollection(0);
}

uint64_t type metadata accessor for PostSiriEngagementCollection(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for PostSiriEngagementCollection);
}

void type metadata completion function for PostSiriEngagementCollection()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PostSiriEngagementCollection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PostSiriEngagementCollection);
}

uint64_t dispatch thunk of PostSiriEngagementCollection.__allocating_init(identifier:startDate:timeWindowInSeconds:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void))(v7 + 208))(a1, a2, a3, a4, a5 & 1, a6, a7 & 1);
}

uint64_t dispatch thunk of PostSiriEngagementCollection.perform(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t TaskSuccess.toProto()@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74ED8];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74EE0];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74EC8];
      break;
    case 4:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74ED0];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74EE8];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ProtoSiriTaskSuccessType();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t TaskCompletionType.toProto()@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74F10];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74F18];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74F00];
      break;
    case 4:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74F20];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F74F08];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ProtoSiriTaskCompletionType();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t TaskInteractionType.toProto()()
{
  return ProtoSiriTaskInteractionType.includesUnsupportedPrompt.setter();
}

uint64_t SiriExecutionTask.toProto()()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v1 - 8);
  uint64_t v30 = v1;
  MEMORY[0x270FA5388](v1);
  double v28 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ProtoSiriTaskInteractionType();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = type metadata accessor for ProtoSiriTaskSuccessType();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v25 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ProtoSiriTaskCompletionType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = ProtoSiriTaskEvaluationSummary.init()();
  (*(void (**)(uint64_t))(*(void *)v0 + 200))(v10);
  uint64_t v11 = ProtoSiriTaskEvaluationSummary.requestIds.setter();
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 296);
  uint64_t v13 = v12(v11);
  char v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 152))(v13);
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, **((unsigned int **)&unk_26470D9A8 + v14), v6);
  uint64_t v15 = ProtoSiriTaskEvaluationSummary.taskCompletion.setter();
  uint64_t v16 = v12(v15);
  char v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 104))(v16);
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v25, **((unsigned int **)&unk_26470D9D0 + v17), v27);
  uint64_t v18 = ProtoSiriTaskEvaluationSummary.taskSuccess.setter();
  uint64_t v19 = v12(v18);
  (*(void (**)(uint64_t))(*(void *)v19 + 128))(v19);
  swift_release();
  ProtoSiriTaskInteractionType.init()();
  ProtoSiriTaskInteractionType.includesPrompt.setter();
  ProtoSiriTaskInteractionType.includesConfirm.setter();
  ProtoSiriTaskInteractionType.includesDisambiguate.setter();
  ProtoSiriTaskInteractionType.includesUnsupportedPrompt.setter();
  ProtoSiriTaskEvaluationSummary.interactionType.setter();
  type metadata accessor for SiriTaskEngagementUtils();
  uint64_t v20 = v28;
  (*(void (**)(void))(*(void *)v0 + 320))();
  dispatch thunk of static SiriTaskEngagementUtils.convertDateTimeToUInt64(date:)();
  uint64_t v21 = v30;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v29 + 8);
  v22(v20, v30);
  uint64_t v23 = ProtoSiriTaskEvaluationSummary.startTimestampMs.setter();
  (*(void (**)(uint64_t))(*(void *)v0 + 344))(v23);
  dispatch thunk of static SiriTaskEngagementUtils.convertDateTimeToUInt64(date:)();
  v22(v20, v21);
  return ProtoSiriTaskEvaluationSummary.endTimestampMs.setter();
}

uint64_t static EngagementSignalEnrichmentUtils.getTaskCompletionType(executionSequence:)(uint64_t a1)
{
  if (specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1)) {
    return 2;
  }
  if (specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1)) {
    return 3;
  }
  if (specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1)) {
    return 4;
  }
  return 1;
}

uint64_t static EngagementSignalEnrichmentUtils.getTaskInteractionType(executionSequence:)(uint64_t a1)
{
  char v2 = specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1);
  char v3 = specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1);
  char v4 = specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1);
  if (specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1)) {
    int v5 = 0x1000000;
  }
  else {
    int v5 = 0;
  }
  if (v4) {
    int v6 = 0x10000;
  }
  else {
    int v6 = 0;
  }
  if (v3) {
    int v7 = 256;
  }
  else {
    int v7 = 0;
  }
  return v7 & 0xFFFFFFFE | v2 & 1 | v6 | v5;
}

uint64_t static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isFailedTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isSiriCompletedTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isPromptInteractionTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isConfirmInteractionTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isDisambiguateInteractionTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isUnsupportedPromptInteractionTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    char v2 = result;
    uint64_t v12 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    char v3 = v12;
    char v4 = v2 + 40;
    do
    {
      String.lowercased()();
      String.lowercased()();
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      int v5 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      int v7 = *(void *)(v12 + 16);
      int v6 = *(void *)(v12 + 24);
      uint64_t v8 = v7 + 1;
      if (v7 >= v6 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      v4 += 16;
      *(void *)(v12 + 16) = v8;
      *(unsigned char *)(v12 + v7 + 32) = v5 & 1;
      --v1;
    }
    while (v1);
  }
  else
  {
    char v3 = MEMORY[0x263F8EE78];
    uint64_t v8 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v8) {
      goto LABEL_11;
    }
  }
  if (*(unsigned char *)(v3 + 32) == 1)
  {
    uint64_t v9 = 1;
LABEL_16:
    swift_bridgeObjectRelease();
    return v9;
  }
  if (v8 == 1)
  {
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_16;
  }
  uint64_t v10 = 33;
  while (1)
  {
    uint64_t v11 = v10 - 31;
    if (__OFADD__(v10 - 32, 1)) {
      break;
    }
    uint64_t v9 = *(unsigned __int8 *)(v3 + v10);
    if ((v9 & 1) == 0)
    {
      ++v10;
      if (v11 != v8) {
        continue;
      }
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isFailedTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isPromptInteractionTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isSiriCompletedTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isConfirmInteractionTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isDisambiguateInteractionTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isUnsupportedPromptInteractionTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

ValueMetadata *type metadata accessor for EngagementSignalEnrichmentUtils()
{
  return &type metadata for EngagementSignalEnrichmentUtils;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Date?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *char v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *char v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t PostSiriEngagementMetricsCollector.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  PostSiriEngagementMetricsCollector.init(identifier:)(a1, a2);
  return v4;
}

uint64_t PostSiriEngagementMetricsCollector.isSELFEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t PostSiriEngagementMetricsCollector.isBiomeDonationEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t PostSiriEngagementMetricsCollector.isFeatureStoreEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t PostSiriEngagementMetricsCollector.userDefaults.getter()
{
  return swift_retain();
}

uint64_t PostSiriEngagementMetricsCollector.__allocating_init(parameters:)()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PostSiriEngagementMetricsCollector.init(parameters:)()
{
  uint64_t v1 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PostSiriEngagementMetricsCollector.init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for PSEBiomeDonator();
  uint64_t v6 = swift_allocObject();
  swift_retain();
  id v7 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  id v8 = objc_msgSend(v7, sel_PostSiriEngagement);
  swift_unknownObjectRelease();
  id v9 = objc_msgSend(v8, sel_source);

  *(void *)(v6 + 16) = v9;
  *(_WORD *)(v3 + 40) = 257;
  uint64_t v10 = (unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 42) = 1;
  uint64_t v20 = (unsigned char *)(v3 + 41);
  *(void *)(v3 + 16) = v6;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for UserDefaultsDomainProvider();
  uint64_t v11 = (void *)swift_allocObject();
  id v12 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)MEMORY[0x22A626F60](0xD000000000000021, 0x8000000224F667E0);
  id v14 = objc_msgSend(v12, sel_initWithSuiteName_, v13);

  v11[2] = v14;
  v11[3] = a1;
  v11[4] = a2;
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 0xD000000000000011;
  v15._int64_t object = (void *)0x8000000224F67C30;
  String.append(_:)(v15);
  v11[5] = a1;
  v11[6] = a2;
  *(void *)(v3 + 48) = v11;
  if (a1 == 0xD000000000000022 && a2 == 0x8000000224F64E20)
  {
    char v16 = 1;
    swift_beginAccess();
    *uint64_t v10 = 1;
    swift_beginAccess();
    *uint64_t v20 = 1;
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_beginAccess();
    *uint64_t v10 = v17 & 1;
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_beginAccess();
    *uint64_t v20 = v18 & 1;
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(unsigned char *)(v3 + 42) = v16 & 1;
  swift_release();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t PostSiriEngagementMetricsCollector.__allocating_init()()
{
  return (*(uint64_t (**)(unint64_t, unint64_t))(v0 + 240))(0xD000000000000022, 0x8000000224F64E20);
}

uint64_t PostSiriEngagementMetricsCollector.collect(callback:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.engagement);
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    char v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v16 = 0;
    _os_log_impl(&dword_224EDB000, v14, v15, "Starting activity collector", v16, 2u);
    MEMORY[0x22A627DB0](v16, -1, -1);
  }

  swift_beginAccess();
  static PSEStruct.pseTriggerOrigin = 0x6E61747369737361;
  qword_26AD6B018 = 0xEA00000000006474;
  swift_bridgeObjectRelease();
  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  uint64_t v17 = (*(uint64_t (**)(char *, char *, void, uint64_t))(*(void *)v3 + 288))(v12, v8, 0, 1);
  outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Date?);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  specialized PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(v17, v3, v17, v3, a1, a2);
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t closure #1 in PostSiriEngagementMetricsCollector.collect(callback:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
  swift_bridgeObjectRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134217984;
    v13[1] = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_224EDB000, v9, v10, "Successfully completed collection of %ld activities.", v11, 0xCu);
    MEMORY[0x22A627DB0](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  Date.init()();
  UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v7);
  return a3(0);
}

uint64_t PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)(void *a1, uint64_t a2, int a3, void *a4, unsigned int a5, void (*a6)(char *), void (*a7)(char *))
{
  unint64_t v8 = v7;
  unint64_t v96 = a6;
  uint64_t v97 = (void (*)(char *))a7;
  unsigned int v104 = a5;
  unint64_t v103 = a4;
  int v101 = a3;
  uint64_t v91 = a2;
  uint64_t v88 = type metadata accessor for PostSiriEngagementCollectionResult(0);
  MEMORY[0x270FA5388](v88);
  uint64_t v89 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SiriUISession(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v94 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v83 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v83 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v92 = (uint64_t)&v83 - v22;
  uint64_t v93 = v23;
  MEMORY[0x270FA5388](v21);
  uint64_t v95 = (uint64_t)&v83 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v90 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v106 = (uint64_t)&v83 - v28;
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v30 = *(void **)(v29 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  int v87 = (char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v100 = (uint64_t)&v83 - v34;
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v108 = (char *)&v83 - v36;
  MEMORY[0x270FA5388](v35);
  Swift::String v38 = (char *)&v83 - v37;
  if (one-time initialization token for engagement != -1) {
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v39 = type metadata accessor for Logger();
    uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.engagement);
    uint64_t v41 = (void (*)(char *, uint64_t, uint64_t))v30[2];
    uint64_t v102 = a1;
    id v98 = v41;
    unint64_t v99 = v30 + 2;
    v41(v38, (uint64_t)a1, v29);
    swift_retain_n();
    uint64_t v86 = v40;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.info.getter();
    int v44 = v43;
    BOOL v45 = os_log_type_enabled(v42, v43);
    uint64_t v107 = v29;
    id v109 = (void *)v8;
    if (v45)
    {
      uint64_t v46 = swift_slowAlloc();
      LODWORD(v85) = v44;
      uint64_t v47 = v46;
      uint64_t v84 = swift_slowAlloc();
      v111[0] = v84;
      *(_DWORD *)uint64_t v47 = 136315394;
      long long v105 = (void (*)(char *, uint64_t))(v47 + 4);
      lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
      os_log_t v83 = v42;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      long long v105 = (void (*)(char *, uint64_t))v30[1];
      v105(v38, v107);
      *(_WORD *)(v47 + 12) = 2080;
      uint64_t v50 = *(void *)(v8 + 24);
      unint64_t v51 = v109[4];
      swift_bridgeObjectRetain();
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v111);
      uint64_t v29 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      unint64_t v8 = (unint64_t)v109;
      swift_bridgeObjectRelease();
      os_log_t v52 = v83;
      _os_log_impl(&dword_224EDB000, v83, (os_log_type_t)v85, "Starting collection with startDate: %s with identifier: %s", (uint8_t *)v47, 0x16u);
      uint64_t v53 = v84;
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v53, -1, -1);
      MEMORY[0x22A627DB0](v47, -1, -1);
    }
    else
    {
      long long v105 = (void (*)(char *, uint64_t))v30[1];
      v105(v38, v29);

      swift_release_n();
    }
    v104 &= 1u;
    swift_beginAccess();
    static PSEStruct.pseTriggerOrigin = 0x636E657265666E69;
    qword_26AD6B018 = 0xEA00000000006465;
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void *)(v8 + 48);
    uint64_t v55 = v100;
    uint64_t v85 = v54;
    UserDefaultsDomainProvider.lastCollectionDate.getter(v100);
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    char v56 = v102;
    if (dispatch thunk of static Comparable.>= infix(_:_:)())
    {
      uint64_t v57 = v108;
      uint64_t v58 = v55;
    }
    else
    {
      uint64_t v57 = v108;
      uint64_t v58 = (uint64_t)v56;
    }
    v98(v57, v58, v29);
    uint64_t v59 = v106;
    uint64_t v102 = v30 + 1;
    v105((char *)v55, v29);
    uint64_t v60 = v29;
    uint64_t v61 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v30[7];
    v61(v59, 1, 1, v60);
    if ((v101 & 1) == 0)
    {
      uint64_t v62 = (uint64_t)v90;
      Date.addingTimeInterval(_:)();
      uint64_t v59 = v106;
      outlined destroy of Any?(v106, &demangling cache variable for type metadata for Date?);
      v61(v62, 0, 1, v107);
      outlined init with take of DateInterval?(v62, v59, &demangling cache variable for type metadata for Date?);
    }
    uint64_t v63 = v59;
    a1 = v103;
    uint64_t v64 = (*(uint64_t (**)(char *, uint64_t, void *, void))(*v109 + 288))(v108, v63, v103, v104);
    uint64_t v29 = v64;
    uint64_t v30 = *(void **)(v64 + 16);
    if (!v30) {
      break;
    }
    uint64_t v65 = *(unsigned __int8 *)(v12 + 80);
    Swift::String v38 = (char *)(v64 + ((v65 + 32) & ~v65));
    outlined init with copy of SiriUISession((uint64_t)v38, (uint64_t)v20);
    if (v30 == (void *)1)
    {
LABEL_12:
      BOOL v66 = v104 != 0;
      uint64_t v67 = v92;
      outlined init with take of SiriUISession((uint64_t)v20, v92);
      uint64_t v68 = v95;
      outlined init with take of SiriUISession(v67, v95);
      uint64_t v69 = v94;
      outlined init with copy of SiriUISession(v68, v94);
      uint64_t v70 = (v65 + 48) & ~v65;
      unint64_t v71 = (v93 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v72 = swift_allocObject();
      *(void *)(v72 + 16) = v29;
      *(void *)(v72 + 24) = a1;
      *(unsigned char *)(v72 + 32) = v66;
      *(void *)(v72 + 40) = v109;
      outlined init with take of SiriUISession(v69, v72 + v70);
      uint64_t v73 = (void (**)(char *))(v72 + v71);
      unint64_t v74 = v97;
      *uint64_t v73 = v96;
      v73[1] = v74;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(v29, partial apply for closure #2 in PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:), v72);
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v75 = type metadata accessor for SiriUISession;
      uint64_t v76 = v68;
      goto LABEL_16;
    }
    unint64_t v8 = 1;
    while (v8 < *(void *)(v29 + 16))
    {
      outlined init with copy of SiriUISession((uint64_t)&v38[*(void *)(v12 + 72) * v8], (uint64_t)v17);
      if (static Date.< infix(_:_:)())
      {
        outlined destroy of SiriUISession((uint64_t)v20, type metadata accessor for SiriUISession);
        outlined init with take of SiriUISession((uint64_t)v17, (uint64_t)v20);
      }
      else
      {
        outlined destroy of SiriUISession((uint64_t)v17, type metadata accessor for SiriUISession);
      }
      if (v30 == (void *)++v8) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_24:
    swift_once();
  }
  swift_bridgeObjectRelease();
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v77, v78))
  {
    unint64_t v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v79 = 0;
    _os_log_impl(&dword_224EDB000, v77, v78, "There are no Siri UI events to submit.", v79, 2u);
    MEMORY[0x22A627DB0](v79, -1, -1);
  }

  uint64_t v80 = (uint64_t)v87;
  Date.init()();
  UserDefaultsDomainProvider.lastCollectionDate.setter(v80);
  unint64_t v81 = v89;
  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)&v89[*(int *)(v88 + 24)]);
  *unint64_t v81 = 1;
  *((void *)v81 + 1) = 0;
  v96(v81);
  unint64_t v75 = type metadata accessor for PostSiriEngagementCollectionResult;
  uint64_t v76 = (uint64_t)v81;
LABEL_16:
  outlined destroy of SiriUISession(v76, v75);
  outlined destroy of Any?(v106, &demangling cache variable for type metadata for Date?);
  return ((uint64_t (*)(char *, uint64_t))v105)(v108, v107);
}

uint64_t closure #2 in PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(char *))
{
  int v23 = a3;
  unint64_t v22 = a2;
  uint64_t v8 = type metadata accessor for PostSiriEngagementCollectionResult(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.engagement);
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = v8;
    uint64_t v18 = v17;
    *(_DWORD *)uint64_t v17 = 134217984;
    uint64_t v24 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_224EDB000, v15, v16, "Successfully completed collection of %ld activities.", v18, 0xCu);
    uint64_t v8 = v21;
    MEMORY[0x22A627DB0](v18, -1, -1);

    if (v23) {
      goto LABEL_9;
    }
  }
  else
  {

    swift_bridgeObjectRelease();
    if (v23)
    {
LABEL_9:
      type metadata accessor for SiriUISession(0);
      Date.addingTimeInterval(_:)();
      goto LABEL_10;
    }
  }
  if (*(void *)(a1 + 16) >= v22) {
    goto LABEL_9;
  }
  Date.init()();
LABEL_10:
  UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v13);
  uint64_t v19 = *(void *)(a1 + 16);
  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)&v10[*(int *)(v8 + 24)]);
  *uint64_t v10 = 1;
  *((void *)v10 + 1) = v19;
  a6(v10);
  return outlined destroy of SiriUISession((uint64_t)v10, type metadata accessor for PostSiriEngagementCollectionResult);
}

uint64_t PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v60 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v58 = *(void *)(v15 - 8);
  uint64_t v59 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v57 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    uint64_t v50 = v13;
    unint64_t v51 = v11;
    uint64_t v52 = v12;
    uint64_t v53 = v9;
    uint64_t v54 = v8;
    uint64_t v55 = a2;
    uint64_t v56 = a3;
    uint64_t v20 = swift_bridgeObjectRetain();
    unint64_t v21 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18PostSiriEngagement0G9UISessionVGG_AH0I13SignalBuilderCs5NeverOTg506_sSi18fg13Engagement0B9i7VAA0D13jk32CIgyno_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgyno_Tf1cn_nTf4ng_n(v20, (void (*)(void, char *))partial apply for closure #1 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:), v4);
    swift_bridgeObjectRelease();
    uint64_t v64 = 0;
    unint64_t v22 = dispatch_group_create();
    unint64_t v61 = v21;
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v24 >= 1) {
          goto LABEL_4;
        }
        __break(1u);
      }
    }
    else
    {
      uint64_t v23 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v24 = v23;
      if (v23)
      {
LABEL_4:
        uint64_t v25 = 0;
        unint64_t v26 = v61 & 0xC000000000000001;
        unint64_t v27 = v61 + 32;
        unint64_t v28 = v61 + 32;
        do
        {
          if (v26)
          {
            unint64_t v31 = v61;
            uint64_t v32 = MEMORY[0x22A627400](v25++, v61);
            dispatch_group_enter(v22);
            if (v25 < v23)
            {
              uint64_t v33 = MEMORY[0x22A627400](v25, v31);
LABEL_12:
              (*(void (**)(void))(*(void *)v33 + 112))();
              swift_release();
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t v32 = *(void *)(v27 + 8 * v25++);
            swift_retain();
            dispatch_group_enter(v22);
            if (v25 < v23)
            {
              uint64_t v33 = *(void *)(v27 + 8 * v25);
              swift_retain();
              goto LABEL_12;
            }
          }
          uint64_t v29 = type metadata accessor for SiriUISession(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v19, 1, 1, v29);
LABEL_6:
          swift_retain();
          uint64_t v30 = v22;
          specialized PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(v32, (uint64_t)v19, v4, &v64, v30);
          swift_release();

          swift_release();
          outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for SiriUISession?);
          unint64_t v27 = v28;
        }
        while (v25 != v24);
      }
    }
    swift_bridgeObjectRelease_n();
    type metadata accessor for OS_dispatch_queue();
    uint64_t v40 = v57;
    uint64_t v39 = v58;
    uint64_t v41 = v59;
    (*(void (**)(char *, void, uint64_t))(v58 + 104))(v57, *MEMORY[0x263F8F080], v59);
    uint64_t v42 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    uint64_t v43 = swift_allocObject();
    uint64_t v44 = v56;
    *(void *)(v43 + 16) = v55;
    *(void *)(v43 + 24) = v44;
    aBlock[4] = partial apply for closure #3 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:);
    aBlock[5] = v43;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor;
    BOOL v45 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v46 = v60;
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v47 = v51;
    uint64_t v48 = v54;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v47, v48);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v46, v52);
    swift_release();
    return swift_release();
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.engagement);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_224EDB000, v35, v36, "There are no Siri UI events in Biome stream to submit.", v37, 2u);
      MEMORY[0x22A627DB0](v37, -1, -1);
    }

    return a2();
  }
}

void specialized closure #2 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    swift_beginAccess();
    uint64_t v9 = *a3;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)a2 + 264);
    swift_retain();
    v10(a1, v9);
    swift_release();
    uint64_t v11 = *(void *)(a1 + 24 * v5 + 8);
    swift_beginAccess();
    *a3 = v11;
    swift_retain();
    swift_release();
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.engagement);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_224EDB000, v13, v14, "There are no SiriExecution events in SiriExecution Biome stream to submit.", v15, 2u);
      MEMORY[0x22A627DB0](v15, -1, -1);
    }
  }
  dispatch_group_leave(a4);
}

uint64_t PostSiriEngagementMetricsCollector.calculateSuccessAndSubmit(allPseTasks:previousTask:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = v2;
    uint64_t v6 = result;
    type metadata accessor for TaskSuccessCalculator();
    unint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 216);
    uint64_t v20 = *(uint64_t (**)(void))(*(void *)v2 + 192);
    uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 168);
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v7 = (void **)(v6 + 48);
    do
    {
      unint64_t v8 = (unint64_t)*(v7 - 2);
      unint64_t v9 = (unint64_t)*(v7 - 1);
      uint64_t v10 = *v7;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v11 = static TaskSuccessCalculator.calculateTaskSuccess(signals:task:)(v9, v8);
      if (v21(v11))
      {
        uint64_t v12 = swift_retain();
        specialized static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)(v12, a2, v10);
        swift_release();
        if (one-time initialization token for engagement != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.engagement);
        os_log_type_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl(&dword_224EDB000, v14, v15, "Successfully wrote task engagement features to featurestore", v16, 2u);
          MEMORY[0x22A627DB0](v16, -1, -1);
        }

        swift_release();
        swift_retain();
        a2 = v8;
      }
      uint64_t v17 = v20();
      if (v17)
      {
        uint64_t v18 = *(void (**)(unint64_t, unint64_t))(**(void **)(v4 + 16) + 96);
        swift_retain();
        v18(v9, v8);
        uint64_t v17 = swift_release();
      }
      if (v19(v17)) {
        specialized PSESELFEmitter.emitPSESELFInstrumentation(signals:task:)(v9, v8);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v7 += 3;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a2;
  unint64_t v7 = *(void (**)(uint64_t, uint64_t (*)(void *), uint64_t))(*(void *)a1 + 224);
  swift_retain();
  uint64_t v8 = swift_retain();
  v7(v8, partial apply for closure #1 in closure #4 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:), v6);
  return swift_release();
}

uint64_t closure #1 in closure #4 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void **)(a2 + 16);
  if (*a1)
  {
    uint64_t v6 = a1[1];
    uint64_t v5 = a1[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  swift_beginAccess();
  unint64_t v7 = *v4;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *uint64_t v4 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    *uint64_t v4 = v7;
  }
  _OWORD v7[2] = v10 + 1;
  uint64_t v11 = &v7[3 * v10];
  v11[4] = a3;
  v11[5] = v6;
  v11[6] = v5;
  return swift_endAccess();
}

uint64_t PostSiriEngagementMetricsCollector.signalFactoryForIntentEvents(group:taskName:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for AppIntentSignalFactory();
  uint64_t v8 = swift_allocObject();
  if (!(a1 >> 62))
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_3;
    }
LABEL_31:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_31;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v10 = (id)MEMORY[0x22A627400](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return v8;
    }
    id v10 = *(id *)(a1 + 32);
  }
  uint64_t v11 = v10;
  uint64_t v12 = swift_bridgeObjectRelease();
  uint64_t v13 = (void *)MEMORY[0x22A6277A0](v12);
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(v11, &v36._countAndFlagsBits);
  if (v4)
  {
    swift_release();

    return (uint64_t)v13;
  }
  unint64_t v37 = a3;
  uint64_t countAndFlagsBits = (void *)v36._countAndFlagsBits;
  id v15 = objc_msgSend((id)v36._countAndFlagsBits, sel_intent);
  id v16 = objc_msgSend(v15, sel_typeName);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  v38._uint64_t countAndFlagsBits = v17;
  v38._int64_t object = v19;
  if (specialized SynapseTypesAlarmRelatedConstants.init(rawValue:)(v38) != 4)
  {

    swift_release();
    type metadata accessor for AlarmSignalFactory();
    return swift_allocObject();
  }
  uint64_t v34 = countAndFlagsBits;
  id v35 = v15;
  Swift::String v20 = String.lowercased()();
  Swift::String v36 = v20;
  lazy protocol witness table accessor for type String and conformance String();
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();

    swift_release();
    type metadata accessor for MessagesIntentSignalFactory();
    return swift_allocObject();
  }
  Swift::String v36 = v20;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0
    || (Swift::String v36 = v20, (StringProtocol.contains<A>(_:)() & 1) != 0)
    || (Swift::String v36 = v20, (StringProtocol.contains<A>(_:)() & 1) != 0))
  {

    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for CallsIntentSignalFactory();
LABEL_17:
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = 0;
    return (uint64_t)v13;
  }
  Swift::String v36 = v20;
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();

    swift_release();
    type metadata accessor for AnswerCallsIntentSignalFactory();
    goto LABEL_17;
  }
  Swift::String v36 = v20;
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    type metadata accessor for MapsIntentSignalFactory();
    uint64_t v13 = (void *)swift_allocObject();
    swift_release();

    void v13[2] = &outlined read-only object #0 of MapsIntentSignalFactory.init();
    return (uint64_t)v13;
  }
  Swift::String v36 = v20;
  char v21 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if (v21)
  {
    id v22 = objc_msgSend(v15, sel_domain);
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    if (v23 == 0x7261646E656C6143 && v25 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();

LABEL_34:
      swift_release();
      type metadata accessor for CalendarEventSignalFactory();
      return swift_allocObject();
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();

    if (v32) {
      goto LABEL_34;
    }
    return v8;
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.engagement);
  unint64_t v27 = v37;
  swift_bridgeObjectRetain_n();
  unint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    v36._uint64_t countAndFlagsBits = v33;
    *(_DWORD *)uint64_t v30 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v27, &v36._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_224EDB000, v28, v29, "Intent object attached to the task with taskName (%s).", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A627DB0](v33, -1, -1);
    MEMORY[0x22A627DB0](v30, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  return v8;
}

uint64_t PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a3;
  unint64_t v7 = type metadata accessor for ReliabilityCategory();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = specialized static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(a1, a2);
  unint64_t v12 = v11;
  uint64_t v49 = MEMORY[0x263F8EE78];
  unint64_t v13 = v11 >> 62;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v14 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  int v46 = a4;
  uint64_t v44 = v8;
  unint64_t v45 = v7;
  uint64_t v43 = v10;
  if (v14)
  {
    if (v14 < 1)
    {
      __break(1u);
      goto LABEL_46;
    }
    uint64_t v15 = 0;
    unint64_t v16 = v12 & 0xC000000000000001;
    do
    {
      if (v16) {
        id v17 = (id)MEMORY[0x22A627400](v15, v12);
      }
      else {
        id v17 = *(id *)(v12 + 8 * v15 + 32);
      }
      uint64_t v18 = v17;
      if (objc_msgSend(v17, sel_starting))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        a4 = *(void *)(v49 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      ++v15;
    }
    while (v14 != v15);
    swift_bridgeObjectRelease();
    uint64_t v8 = v49;
    uint64_t v49 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v14; ++i)
    {
      if (v16) {
        id v20 = (id)MEMORY[0x22A627400](i, v12);
      }
      else {
        id v20 = *(id *)(v12 + 8 * i + 32);
      }
      unint64_t v7 = (unint64_t)v20;
      if (objc_msgSend(v20, sel_starting))
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        a4 = *(void *)(v49 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = v49;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  a1 = __swift_project_value_buffer(v21, (uint64_t)static Logger.engagement);
  swift_bridgeObjectRetain_n();
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v7 = swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 134217984;
    if (v13)
    {
      swift_bridgeObjectRetain();
      a4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      a4 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v49 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_224EDB000, v22, v23, "UISessions Count = %ld", (uint8_t *)v7, 0xCu);
    MEMORY[0x22A627DB0](v7, -1, -1);
    swift_bridgeObjectRelease();

    if (!v14) {
      goto LABEL_43;
    }
LABEL_29:
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v24 = *(void *)(v8 + 16);
      if (v24)
      {
LABEL_32:
        uint64_t v49 = MEMORY[0x263F8EE80];
        if (v10 < 0 || (v10 & 0x4000000000000000) != 0)
        {
          swift_retain();
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
          if (v25) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v25 = *(void *)(v10 + 16);
          swift_retain();
          if (v25)
          {
LABEL_35:
            if (v25 < 1) {
              goto LABEL_71;
            }
            a1 = 0;
            a4 = 0;
            do
            {
              if ((v10 & 0xC000000000000001) != 0) {
                id v26 = (id)MEMORY[0x22A627400](a1, v10);
              }
              else {
                id v26 = *(id *)(v10 + 8 * a1 + 32);
              }
              unint64_t v7 = (unint64_t)v26;
              ++a1;
              id v48 = v26;
              closure #3 in PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(&v48, (uint64_t)&v49);
            }
            while (v25 != a1);
LABEL_51:
            swift_release_n();
            id v48 = (id)MEMORY[0x263F8EE78];
            if (v24 >= 1)
            {
              unint64_t v7 = v8 & 0xC000000000000001;
              swift_retain();
              uint64_t v32 = 0;
              do
              {
                if (v7) {
                  id v33 = (id)MEMORY[0x22A627400](v32, v8);
                }
                else {
                  id v33 = *(id *)(v8 + 8 * v32 + 32);
                }
                uint64_t v34 = v33;
                ++v32;
                v47[0] = v33;
                closure #4 in PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(v47, &v49, (unint64_t *)&v48);
              }
              while (v24 != v32);
              swift_release_n();
              uint64_t v25 = (uint64_t)v48;
              v47[0] = v48;
              swift_bridgeObjectRetain_n();
              specialized MutableCollection<>.sort(by:)((void **)v47);
              swift_bridgeObjectRelease_n();
              a1 = (uint64_t)v47[0];
              if (v46) {
                goto LABEL_68;
              }
              if ((v42 & 0x8000000000000000) == 0)
              {
                uint64_t v25 = specialized Collection.prefix(_:)(v42, (uint64_t)v47[0]);
                a1 = v35;
                a4 = v36;
                unint64_t v7 = v37;
                if ((v37 & 1) == 0)
                {
LABEL_60:
                  a1 = specialized _copyCollectionToContiguousArray<A>(_:)(v25, a1, a4, v7);
LABEL_67:
                  swift_unknownObjectRelease();
LABEL_68:
                  swift_bridgeObjectRelease();
                  return a1;
                }
                type metadata accessor for __ContiguousArrayStorageBase();
                swift_unknownObjectRetain_n();
                uint64_t v38 = swift_dynamicCastClass();
                if (!v38)
                {
                  swift_unknownObjectRelease();
                  uint64_t v38 = MEMORY[0x263F8EE78];
                }
                uint64_t v39 = *(void *)(v38 + 16);
                swift_release();
                if (!__OFSUB__(v7 >> 1, a4))
                {
                  if (v39 == (v7 >> 1) - a4)
                  {
                    a1 = swift_dynamicCastClass();
                    if (!a1)
                    {
                      swift_unknownObjectRelease();
                      a1 = MEMORY[0x263F8EE78];
                    }
                    goto LABEL_67;
                  }
                  goto LABEL_74;
                }
LABEL_73:
                __break(1u);
LABEL_74:
                swift_unknownObjectRelease();
                goto LABEL_60;
              }
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
            __break(1u);
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }
        }
        a4 = 0;
        goto LABEL_51;
      }
LABEL_47:
      swift_release();
      swift_release();
      uint64_t v27 = *MEMORY[0x263F74FC8];
      uint64_t v28 = type metadata accessor for SiriUIEventDataIssues();
      uint64_t v29 = v43;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v43, v27, v28);
      uint64_t v31 = v44;
      unint64_t v30 = v45;
      (*(void (**)(uint64_t, void, unint64_t))(v44 + 104))(v29, *MEMORY[0x263F750E0], v45);
      Logger.debug(_:_:)(0xD000000000000028, 0x8000000224F67CB0, v29);
      (*(void (**)(uint64_t, unint64_t))(v31 + 8))(v29, v30);
      return MEMORY[0x263F8EE78];
    }
LABEL_46:
    swift_retain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v24) {
      goto LABEL_32;
    }
    goto LABEL_47;
  }

  swift_bridgeObjectRelease_n();
  if (v14) {
    goto LABEL_29;
  }
LABEL_43:
  swift_release();
  swift_release();
  return MEMORY[0x263F8EE78];
}

uint64_t closure #3 in PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(id *a1, uint64_t a2)
{
  uint64_t v57 = a2;
  uint64_t v3 = type metadata accessor for ReliabilityCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v52 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v60 = *(void *)(v13 - 8);
  uint64_t v61 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v58 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v52 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v59 = (char *)&v52 - v19;
  id v20 = *a1;
  id v21 = objc_msgSend(*a1, sel_uuid);
  if (v21)
  {
    id v22 = v21;
    uint64_t v54 = v10;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    uint64_t v26 = HIBYTE(v25) & 0xF;
    uint64_t v56 = v23;
    if ((v25 & 0x2000000000000000) == 0) {
      uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
    }
    if (v26)
    {
      unint64_t v55 = v25;
      id v27 = objc_msgSend(v20, sel_absoluteTimestamp);
      if (v27)
      {
        uint64_t v28 = v27;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v30 = v60;
        uint64_t v29 = v61;
        uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
        v53(v12, v18, v61);
        uint64_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56);
        v31(v12, 0, 1, v29);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v12, 1, v29) != 1)
        {
          uint64_t v32 = v59;
          v53(v59, v12, v29);
          id v33 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
          uint64_t v34 = (void (*)(uint64_t, void, uint64_t, uint64_t))v31;
          uint64_t v35 = (uint64_t)v54;
          v33(v54, v32, v29);
          v34(v35, 0, 1, v29);
          unint64_t v36 = v55;
          swift_bridgeObjectRetain();
          specialized Dictionary.subscript.setter(v35, v56, v36);
          if (one-time initialization token for engagement != -1) {
            swift_once();
          }
          uint64_t v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Logger.engagement);
          uint64_t v38 = v58;
          v33(v58, v32, v29);
          swift_bridgeObjectRetain();
          uint64_t v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v39, v40))
          {
            uint64_t v41 = swift_slowAlloc();
            uint64_t v57 = swift_slowAlloc();
            uint64_t v63 = v57;
            *(_DWORD *)uint64_t v41 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v36, &v63);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v41 + 12) = 2080;
            lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
            uint64_t v42 = v61;
            uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v63);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            unint64_t v45 = *(void (**)(char *, uint64_t))(v30 + 8);
            v45(v38, v42);
            _os_log_impl(&dword_224EDB000, v39, v40, "UISessionEnd has %s, %s", (uint8_t *)v41, 0x16u);
            uint64_t v46 = v57;
            swift_arrayDestroy();
            MEMORY[0x22A627DB0](v46, -1, -1);
            MEMORY[0x22A627DB0](v41, -1, -1);

            return ((uint64_t (*)(char *, uint64_t))v45)(v59, v42);
          }
          else
          {

            unint64_t v51 = *(void (**)(char *, uint64_t))(v30 + 8);
            v51(v38, v29);
            swift_bridgeObjectRelease_n();
            return ((uint64_t (*)(char *, uint64_t))v51)(v32, v29);
          }
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v12, 1, 1, v61);
      }
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Date?);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v48 = type metadata accessor for Logger();
  __swift_project_value_buffer(v48, (uint64_t)static Logger.engagement);
  uint64_t v49 = *MEMORY[0x263F74FD8];
  uint64_t v50 = type metadata accessor for SiriUIEventDataIssues();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 104))(v6, v49, v50);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F750E0], v3);
  Logger.error(_:_:)(0xD00000000000001ELL, 0x8000000224F67DC0, (uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

id closure #4 in PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(void **a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v112 = a3;
  id v109 = a2;
  uint64_t v115 = type metadata accessor for SiriUISession(0);
  uint64_t v113 = *(void *)(v115 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v115);
  uint64_t v111 = (uint64_t)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v105 = (uint64_t)&v97 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v97 - v10;
  MEMORY[0x270FA5388](v9);
  long long v116 = (char *)&v97 - v12;
  uint64_t v13 = type metadata accessor for ReliabilityCategory();
  uint64_t v107 = *(void *)(v13 - 8);
  uint64_t v108 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v106 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v20 = (char *)&v97 - v19;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v122 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v110 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v118 = (char *)&v97 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  long long v117 = (char *)&v97 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v97 - v29;
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  id v33 = (char *)&v97 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v120 = (char *)&v97 - v34;
  uint64_t v35 = *a1;
  id result = objc_msgSend(v35, sel_uuid);
  if (!result) {
    return result;
  }
  uint64_t v37 = result;
  id v114 = v35;
  uint64_t v119 = v3;
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v40 = v39;

  uint64_t v41 = HIBYTE(v40) & 0xF;
  uint64_t v104 = v38;
  uint64_t v121 = v40;
  if ((v40 & 0x2000000000000000) == 0) {
    uint64_t v41 = v38 & 0xFFFFFFFFFFFFLL;
  }
  if (!v41) {
    return (id)swift_bridgeObjectRelease();
  }
  id v42 = objc_msgSend(v114, sel_absoluteTimestamp);
  if (!v42)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v20, 1, 1, v21);
    goto LABEL_12;
  }
  uint64_t v43 = v42;
  unint64_t v103 = v30;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v44 = (void *)v122;
  uint64_t v45 = v122 + 32;
  uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v122 + 32);
  v46(v20, v33, v21);
  uint64_t v102 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v44[7];
  v102(v20, 0, 1, v21);
  int v101 = (unsigned int (*)(char *, uint64_t, uint64_t))v44[6];
  if (v101(v20, 1, v21) == 1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return (id)outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Date?);
  }
  id v98 = v11;
  uint64_t v47 = v21;
  uint64_t v48 = v120;
  uint64_t v99 = v45;
  v46(v120, v20, v47);
  uint64_t v49 = (void (*)(char *, char *, uint64_t))v44[2];
  uint64_t v50 = v48;
  unint64_t v51 = (char *)v47;
  v49(v103, v50, v47);
  uint64_t v52 = *v109;
  uint64_t v53 = *(void *)(*v109 + 16);
  uint64_t v100 = v46;
  uint64_t v97 = v49;
  if (!v53)
  {
    v102(v18, 1, 1, v47);
LABEL_16:
    outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for Date?);
    uint64_t v58 = v122;
    uint64_t v59 = v103;
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.engagement);
    uint64_t v61 = *MEMORY[0x263F74FD0];
    uint64_t v62 = type metadata accessor for SiriUIEventDataIssues();
    uint64_t v63 = (uint64_t)v106;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 104))(v106, v61, v62);
    uint64_t v65 = v107;
    uint64_t v64 = v108;
    (*(void (**)(uint64_t, void, uint64_t))(v107 + 104))(v63, *MEMORY[0x263F750E0], v108);
    Logger.error(_:_:)(0xD000000000000017, 0x8000000224F67DA0, v63);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
    goto LABEL_20;
  }
  uint64_t v54 = v121;
  swift_bridgeObjectRetain();
  unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v54);
  if (v56)
  {
    v49(v18, (char *)(*(void *)(v52 + 56) + *(void *)(v122 + 72) * v55), v47);
    uint64_t v57 = 0;
  }
  else
  {
    uint64_t v57 = 1;
  }
  v102(v18, v57, 1, v47);
  swift_bridgeObjectRelease();
  if (v101(v18, 1, v47) == 1) {
    goto LABEL_16;
  }
  uint64_t v58 = v122;
  uint64_t v59 = v103;
  (*(void (**)(char *, uint64_t))(v122 + 8))(v103, v47);
  v100(v59, v18, v47);
LABEL_20:
  BOOL v66 = v110;
  id v67 = v114;
  uint64_t v68 = v97;
  v97(v117, v120, v47);
  v68(v118, v59, v47);
  Date.addingTimeInterval(_:)();
  id v69 = objc_msgSend(v67, sel_sessionID);
  uint64_t v70 = (uint64_t)v116;
  if (v69)
  {
    unint64_t v71 = v69;
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v74 = v73;
  }
  else
  {
    uint64_t v72 = 0;
    unint64_t v74 = 0xE000000000000000;
  }
  unint64_t v75 = (void (*)(uint64_t, char *, char *))v100;
  v100((char *)v70, v117, (uint64_t)v51);
  uint64_t v76 = (int *)v115;
  v75(v70 + *(int *)(v115 + 20), v118, v51);
  uint64_t v77 = v70 + v76[6];
  uint64_t v118 = v51;
  v75(v77, v66, v51);
  os_log_type_t v78 = (uint64_t *)(v70 + v76[7]);
  *os_log_type_t v78 = v72;
  v78[1] = v74;
  unint64_t v79 = (void *)(v70 + v76[8]);
  uint64_t v80 = v121;
  *unint64_t v79 = v104;
  v79[1] = v80;
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v81 = type metadata accessor for Logger();
  __swift_project_value_buffer(v81, (uint64_t)static Logger.engagement);
  uint64_t v82 = (uint64_t)v98;
  outlined init with copy of SiriUISession(v70, (uint64_t)v98);
  os_log_t v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v83, v84))
  {
    uint64_t v85 = (uint8_t *)swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    uint64_t v124 = v86;
    *(_DWORD *)uint64_t v85 = 136315138;
    outlined init with copy of SiriUISession(v82, v105);
    uint64_t v87 = String.init<A>(describing:)();
    uint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, &v124);
    uint64_t v70 = (uint64_t)v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v58 = v122;
    swift_bridgeObjectRelease();
    outlined destroy of SiriUISession(v82, type metadata accessor for SiriUISession);
    _os_log_impl(&dword_224EDB000, v83, v84, "UISession: %s", v85, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A627DB0](v86, -1, -1);
    MEMORY[0x22A627DB0](v85, -1, -1);
  }
  else
  {
    outlined destroy of SiriUISession(v82, type metadata accessor for SiriUISession);
  }

  uint64_t v90 = v111;
  uint64_t v89 = v112;
  outlined init with copy of SiriUISession(v70, v111);
  unint64_t v91 = *v89;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v89 = v91;
  uint64_t v93 = v118;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v91 + 16) + 1, 1, v91);
    *uint64_t v89 = v91;
  }
  unint64_t v95 = *(void *)(v91 + 16);
  unint64_t v94 = *(void *)(v91 + 24);
  if (v95 >= v94 >> 1)
  {
    unint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1, v91);
    *uint64_t v89 = v91;
  }
  *(void *)(v91 + 16) = v95 + 1;
  outlined init with take of SiriUISession(v90, v91+ ((*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80))+ *(void *)(v113 + 72) * v95);
  outlined destroy of SiriUISession(v70, type metadata accessor for SiriUISession);
  unint64_t v96 = *(void (**)(char *, char *))(v58 + 8);
  v96(v103, v93);
  return (id)((uint64_t (*)(char *, char *))v96)(v120, v93);
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if ((uint64_t)v3 >= result) {
      unint64_t v4 = result;
    }
    else {
      unint64_t v4 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = 0;
    }
    if (v3 >= v5)
    {
      type metadata accessor for SiriUISession(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t PostSiriEngagementMetricsCollector.generateBiomeFetcherConfiguration(uiSession:nextUiSession:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  unint64_t v71 = a3;
  uint64_t v72 = type metadata accessor for Logger();
  uint64_t v68 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  id v67 = (uint8_t *)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SiriUISession(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)v62 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v62 - v17;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  id v69 = (char *)v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v62 - v22;
  uint64_t v24 = *(int *)(v9 + 24);
  uint64_t v74 = a1;
  uint64_t v75 = v25;
  uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v70((char *)v62 - v22, a1 + v24, v19);
  outlined init with copy of SiriUISession?(a2, (uint64_t)v8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v73 = v9;
  if (v26(v8, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for SiriUISession?);
LABEL_9:
    uint64_t v27 = v74;
    goto LABEL_14;
  }
  outlined init with take of SiriUISession((uint64_t)v8, (uint64_t)v18);
  if ((static Date.> infix(_:_:)() & 1) == 0)
  {
    outlined destroy of SiriUISession((uint64_t)v18, type metadata accessor for SiriUISession);
    goto LABEL_9;
  }
  uint64_t v27 = v74;
  uint64_t v28 = v72;
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.engagement);
  uint64_t v30 = v68;
  uint64_t v31 = *(void (**)(uint8_t *))(v68 + 16);
  uint64_t v32 = v67;
  BOOL v66 = (uint8_t *)v29;
  v31(v67);
  outlined init with copy of SiriUISession(v27, (uint64_t)v16);
  id v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  uint64_t v65 = v33;
  int v64 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v79[0] = v63;
    *(_DWORD *)uint64_t v35 = 136315394;
    v62[0] = v35 + 4;
    v62[2] = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v79);
    v62[1] = &v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriUISession((uint64_t)v16, type metadata accessor for SiriUISession);
    *(_WORD *)(v35 + 12) = 2080;
    swift_beginAccess();
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v40 = v65;
    _os_log_impl(&dword_224EDB000, v65, (os_log_type_t)v64, "More than one session in time range [%s,%s]", (uint8_t *)v35, 0x16u);
    uint64_t v41 = v63;
    swift_arrayDestroy();
    MEMORY[0x22A627DB0](v41, -1, -1);
    MEMORY[0x22A627DB0](v35, -1, -1);

    (*(void (**)(uint8_t *, uint64_t))(v68 + 8))(v32, v72);
  }
  else
  {
    outlined destroy of SiriUISession((uint64_t)v16, type metadata accessor for SiriUISession);

    (*(void (**)(uint8_t *, uint64_t))(v30 + 8))(v32, v72);
  }
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v75 + 24))(v23, v18, v19);
  id v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    unint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    v79[0] = v68;
    id v67 = v44;
    *(_DWORD *)unint64_t v44 = 136315138;
    BOOL v66 = v44 + 4;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v47 = v67;
    _os_log_impl(&dword_224EDB000, v42, v43, "Setting postEndDate to %s", v67, 0xCu);
    uint64_t v48 = v68;
    swift_arrayDestroy();
    MEMORY[0x22A627DB0](v48, -1, -1);
    MEMORY[0x22A627DB0](v47, -1, -1);
  }

  outlined destroy of SiriUISession((uint64_t)v18, type metadata accessor for SiriUISession);
LABEL_14:
  swift_beginAccess();
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  char v49 = dispatch thunk of static Comparable.< infix(_:_:)();
  outlined init with copy of SiriUISession(v27, (uint64_t)v13);
  if (v49)
  {
    char v50 = dispatch thunk of static Comparable.< infix(_:_:)();
    outlined destroy of SiriUISession((uint64_t)v13, type metadata accessor for SiriUISession);
    if (v50) {
      goto LABEL_23;
    }
  }
  else
  {
    outlined destroy of SiriUISession((uint64_t)v13, type metadata accessor for SiriUISession);
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v72, (uint64_t)static Logger.engagement);
  unint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v77 = v54;
    *(_DWORD *)uint64_t v53 = 136315138;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v77);
    uint64_t v27 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_224EDB000, v51, v52, "PostSiri Fetch asking for <= 0s slice [%s]", v53, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A627DB0](v54, -1, -1);
    MEMORY[0x22A627DB0](v53, -1, -1);
  }

  uint64_t v57 = v69;
  Date.addingTimeInterval(_:)();
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v75 + 40))(v23, v57, v19);
LABEL_23:
  uint64_t v59 = (void (*)(uint64_t, char *, uint64_t))v70;
  uint64_t v58 = v71;
  v70(v71, v27, v19);
  uint64_t Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  v59((uint64_t)&v58[*(int *)(Configuration + 20)], v23, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v23, v19);
}

uint64_t PostSiriEngagementMetricsCollector.fetchDonatedEvents(biomeFetcherConfiguration:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v18 - v11, a1, v6);
  uint64_t Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  v13(v10, a1 + *(int *)(Configuration + 20), v6);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  swift_retain();
  specialized static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)((uint64_t)v12, (uint64_t)v10, partial apply for closure #1 in PostSiriEngagementMetricsCollector.fetchDonatedEvents(biomeFetcherConfiguration:completion:), v15);
  swift_release();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  return ((uint64_t (*)(char *, uint64_t))v16)(v12, v6);
}

uint64_t PostSiriEngagementMetricsCollector.fetchSiriExecutionEvents(biomeFetcherConfiguration:)(uint64_t a1)
{
  uint64_t v2 = a1 + *(int *)(type metadata accessor for PSEBiomeFetchConfiguration() + 20);
  return specialized static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(a1, v2);
}

uint64_t PostSiriEngagementMetricsCollector.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t PostSiriEngagementMetricsCollector.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PostSiriEngagementMetricsCollector.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for SiriUISession(0) - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  uint64_t v2 = *(void *)(type metadata accessor for ProtoTaskEngagementFeatureSet() - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for SiriUISession(0);
  uint64_t v8 = MEMORY[0x270FA5388](v44);
  uint64_t v45 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v48 = a1;
  unint64_t v47 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v46 = a4 + v18;
      unint64_t v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v28 = -v13;
        unint64_t v42 = a4;
        unint64_t v43 = a1;
        do
        {
          unint64_t v29 = a3 + v28;
          outlined init with copy of SiriUISession(v26 + v28, (uint64_t)v11);
          unint64_t v30 = a2 + v28;
          unint64_t v31 = a3;
          uint64_t v32 = (uint64_t)v11;
          uint64_t v33 = v45;
          outlined init with copy of SiriUISession(a2 + v28, v45);
          char v34 = static Date.< infix(_:_:)();
          uint64_t v35 = v33;
          uint64_t v11 = (char *)v32;
          outlined destroy of SiriUISession(v35, type metadata accessor for SiriUISession);
          outlined destroy of SiriUISession(v32, type metadata accessor for SiriUISession);
          if (v34)
          {
            if (v31 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v37 = v42;
              unint64_t v38 = v43;
            }
            else
            {
              BOOL v36 = v31 == a2;
              unint64_t v37 = v42;
              unint64_t v38 = v43;
              if (!v36) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v48 += v28;
          }
          else
          {
            unint64_t v39 = v46;
            v46 += v28;
            if (v31 < v39 || v29 >= v39)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v30 = a2;
              unint64_t v37 = v42;
              unint64_t v38 = v43;
            }
            else
            {
              unint64_t v38 = v43;
              if (v31 != v39) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v30 = a2;
              unint64_t v37 = v42;
            }
          }
          unint64_t v26 = v46;
          if (v46 <= v37) {
            break;
          }
          a2 = v30;
          a3 = v29;
        }
        while (v30 > v38);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        outlined init with copy of SiriUISession(a2, (uint64_t)v11);
        uint64_t v21 = v45;
        outlined init with copy of SiriUISession(a4, v45);
        char v22 = static Date.< infix(_:_:)();
        outlined destroy of SiriUISession(v21, type metadata accessor for SiriUISession);
        outlined destroy of SiriUISession((uint64_t)v11, type metadata accessor for SiriUISession);
        unint64_t v23 = v48;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v48 < a2 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v47 + v13;
          if (v48 < v47 || v48 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v47 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v48 = v23 + v13;
        a4 = v47;
        if (v47 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(char *, unint64_t, uint64_t);
  char *v21;
  void (**v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  unint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (**v57)(char *, uint64_t);
  void (*v58)(char *, unint64_t, uint64_t);
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;

  uint64_t v65 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v8 = *(void *)(v65 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v65);
  uint64_t v63 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v62 = (char *)&v54 - v11;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_72;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_73;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  uint64_t v68 = a1;
  id v67 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v37 = a4 + v18;
      BOOL v66 = a4 + v18;
      uint64_t v68 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v39 = -v13;
        unint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        uint64_t v61 = v8 + 16;
        uint64_t v57 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v58 = v40;
        uint64_t v59 = a4;
        uint64_t v55 = a1;
        unint64_t v56 = -v13;
        do
        {
          int v64 = a3;
          uint64_t v60 = a3 + v39;
          uint64_t v41 = v62;
          unint64_t v42 = v65;
          unint64_t v43 = v58;
          v58(v62, v37 + v39, v65);
          uint64_t v44 = a2 + v39;
          uint64_t v45 = v63;
          v43(v63, v44, v42);
          unint64_t v46 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          unint64_t v47 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          unint64_t v48 = *v57;
          (*v57)(v45, v42);
          v48(v41, v42);
          if (v46 >= v47)
          {
            unint64_t v51 = v66;
            v66 += v56;
            a3 = v60;
            os_log_type_t v52 = v64 < v51 || v60 >= v51;
            unint64_t v39 = v56;
            if (v52)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v44 = a2;
              char v49 = v59;
            }
            else
            {
              char v49 = v59;
              if (v64 != v51) {
                swift_arrayInitWithTakeBackToFront();
              }
              uint64_t v44 = a2;
            }
            char v50 = v55;
          }
          else
          {
            unint64_t v39 = v56;
            a3 = v60;
            if (v64 < a2 || v60 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              char v49 = v59;
              char v50 = v55;
            }
            else
            {
              char v49 = v59;
              char v50 = v55;
              if (v64 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v68 += v39;
          }
          unint64_t v37 = v66;
          if (v66 <= v49) {
            break;
          }
          a2 = v44;
        }
        while (v44 > v50);
      }
      goto LABEL_70;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v60 = a4 + v17;
    BOOL v66 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v61 = v8 + 16;
      uint64_t v57 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v58 = v20;
      int v64 = a3;
      uint64_t v21 = v62;
      char v22 = (void (**)(char *, uint64_t))(v8 + 8);
      do
      {
        unint64_t v23 = v13;
        unint64_t v24 = v65;
        unint64_t v25 = v58;
        v58(v21, a2, v65);
        unint64_t v26 = a4;
        uint64_t v27 = v63;
        v25(v63, v26, v24);
        uint64_t v28 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
        unint64_t v29 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
        unint64_t v30 = *v22;
        (*v22)(v27, v24);
        v30(v21, v24);
        unint64_t v31 = v68;
        if (v28 >= v29)
        {
          uint64_t v13 = v23;
          uint64_t v35 = v67 + v23;
          if (v68 < v67 || v68 >= v35)
          {
            swift_arrayInitWithTakeFrontToBack();
            char v34 = v64;
          }
          else
          {
            char v34 = v64;
            if (v68 != v67) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          id v67 = v35;
          uint64_t v32 = a2;
        }
        else
        {
          uint64_t v13 = v23;
          uint64_t v32 = a2 + v23;
          if (v68 < a2 || v68 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            char v34 = v64;
          }
          else
          {
            char v34 = v64;
            if (v68 == a2) {
              unint64_t v31 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        uint64_t v68 = v31 + v13;
        a4 = v67;
        if (v67 >= v60) {
          break;
        }
        a2 = v32;
      }
      while (v32 < v34);
    }
LABEL_70:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v68, &v67, (uint64_t *)&v66);
    return 1;
  }
LABEL_74:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SiriUISession(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SiriUISession(a1, (uint64_t)v10);
  type metadata accessor for UISessionSignalBuilder(0);
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v13(v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession, 1, 1, v7);
  *(void *)(v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x263F8EE78];
  int64_t v14 = (_OWORD *)(v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  v14[1] = 0u;
  v14[2] = 0u;
  *int64_t v14 = 0u;
  outlined init with take of SiriUISession((uint64_t)v10, (uint64_t)v6);
  v13((uint64_t)v6, 0, 1, v7);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of SiriUISession?((uint64_t)v6, v12);
  swift_endAccess();
  *(void *)(v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a2;
  return v11;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18PostSiriEngagement0G9UISessionVGG_AH0I13SignalBuilderCs5NeverOTg506_sSi18fg13Engagement0B9i7VAA0D13jk32CIgyno_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgyno_Tf1cn_n04_s18fg111Engagement0abC16MetricsCollectorC16runPSECollection33_68911A429BEB90148AF8DB12889D4511LL3for10completionySayAA0pi14VG_yyctFAA0O13jK12CSi_AItXEfU_AH0fgH16MetricsCollectorCTf1nc_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v47 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SiriUISession(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (uint64_t *)((char *)&v40 - v15);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v48 = a2;
  swift_retain();
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v41 = a1;
  swift_bridgeObjectRetain();
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = v41 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v22 = *(void *)(v7 + 72);
    uint64_t v42 = v7 + 56;
    uint64_t v43 = v22;
    uint64_t v45 = v13;
    unint64_t v46 = v16;
    uint64_t v44 = v19;
    unint64_t v23 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    do
    {
      uint64_t v49 = v20 + 1;
      uint64_t v50 = v21;
      uint64_t v24 = (uint64_t)&v13[*(int *)(v10 + 48)];
      outlined init with copy of SiriUISession(v21, v24);
      uint64_t v25 = (uint64_t)v16 + *(int *)(v10 + 48);
      *uint64_t v16 = v20;
      outlined init with take of SiriUISession(v24, v25);
      outlined init with take of DateInterval?((uint64_t)v16, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
      outlined init with copy of SiriUISession((uint64_t)&v18[*(int *)(v10 + 48)], (uint64_t)v9);
      type metadata accessor for UISessionSignalBuilder(0);
      uint64_t v26 = swift_allocObject();
      uint64_t v27 = v26 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
      uint64_t v28 = *v23;
      (*v23)(v26 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession, 1, 1, v6);
      *(void *)(v26 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x263F8EE78];
      unint64_t v29 = (_OWORD *)(v26 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
      v29[1] = 0u;
      v29[2] = 0u;
      *unint64_t v29 = 0u;
      uint64_t v30 = (uint64_t)v9;
      uint64_t v31 = (uint64_t)v18;
      uint64_t v32 = v10;
      uint64_t v33 = v9;
      uint64_t v34 = v6;
      uint64_t v35 = v47;
      outlined init with take of SiriUISession(v30, v47);
      v28(v35, 0, 1, v34);
      swift_beginAccess();
      uint64_t v36 = v48;
      swift_retain();
      uint64_t v37 = v35;
      uint64_t v6 = v34;
      uint64_t v9 = v33;
      uint64_t v10 = v32;
      uint64_t v18 = (char *)v31;
      outlined assign with take of SiriUISession?(v37, v27);
      swift_endAccess();
      *(void *)(v26 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = v36;
      outlined destroy of Any?(v31, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v13 = v45;
      uint64_t v16 = v46;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v21 = v50 + v43;
      uint64_t v20 = v49;
    }
    while (v44 != v49);
  }
  swift_bridgeObjectRelease();
  uint64_t v38 = v51;
  swift_release();
  return v38;
}

uint64_t specialized PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, NSObject *a5)
{
  uint64_t v92 = a5;
  unint64_t v91 = a4;
  uint64_t v90 = a3;
  uint64_t v100 = type metadata accessor for Date();
  uint64_t v7 = *(uint8_t **)(v100 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v100);
  uint64_t v99 = (char *)v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v98 = (char *)v89 - v10;
  uint64_t v11 = swift_allocObject();
  uint64_t v107 = v11;
  *(void *)(v11 + 16) = MEMORY[0x263F8EE78];
  v89[1] = v11 + 16;
  unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a2);
  unint64_t v116 = v12;
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 272);
  uint64_t v108 = a1;
  unint64_t v14 = v13(a2);
  unint64_t v15 = v14;
  if (v14 >> 62) {
    goto LABEL_62;
  }
  for (uint64_t i = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v12 = 0;
    uint64_t v104 = 0;
    unint64_t v106 = v15 & 0xC000000000000001;
    uint64_t v97 = v15 & 0xFFFFFFFFFFFFFF8;
    unint64_t v101 = v15;
    unint64_t v96 = (v15 + 32);
    unint64_t v95 = (void (**)(unint64_t, char *, uint64_t))(v7 + 32);
    long long v94 = xmmword_224F64E30;
    unint64_t v93 = 0x8000000224F67DE0;
    uint64_t v105 = i;
    while (v106)
    {
      uint64_t v17 = MEMORY[0x22A627400](v12, v101);
      BOOL v18 = __OFADD__(v12++, 1);
      if (v18) {
        goto LABEL_59;
      }
LABEL_12:
      unint64_t v111 = v12;
      uint64_t v19 = *(uint64_t (**)(void))(*(void *)v17 + 200);
      uint64_t v20 = *(void *)v17 + 200;
      uint64_t v112 = (uint8_t *)v17;
      uint64_t v109 = v20;
      uint64_t v110 = v19;
      uint64_t v21 = v19();
      uint64_t v22 = *(void *)(v21 + 16);
      if (v22)
      {
        unint64_t v23 = (uint64_t *)(v21 + 40);
        uint64_t v24 = MEMORY[0x263F8EE78];
        do
        {
          uint64_t v26 = *(v23 - 1);
          uint64_t v25 = *v23;
          Swift::String v113 = String.lowercased()();
          strcpy((char *)v114, "externalagent");
          v114[7] = -4864;
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain();
          char v27 = StringProtocol.contains<A>(_:)();
          swift_bridgeObjectRelease();
          if (v27)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v115 = v24;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
              uint64_t v24 = v115;
            }
            unint64_t v30 = *(void *)(v24 + 16);
            unint64_t v29 = *(void *)(v24 + 24);
            if (v30 >= v29 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
              uint64_t v24 = v115;
            }
            *(void *)(v24 + 16) = v30 + 1;
            uint64_t v31 = v24 + 16 * v30;
            *(void *)(v31 + 32) = v26;
            *(void *)(v31 + 40) = v25;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      else
      {
        uint64_t v24 = MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      uint64_t v32 = *(void *)(v24 + 16);
      uint64_t v33 = swift_release();
      if (v32)
      {
        uint64_t v7 = v112;
        if (one-time initialization token for engagement != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        __swift_project_value_buffer(v34, (uint64_t)static Logger.engagement);
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.info.getter();
        unint64_t v15 = v36;
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v37 = 0;
          _os_log_impl(&dword_224EDB000, v35, (os_log_type_t)v15, "This is a SiriX task, Fall back to Flow.", v37, 2u);
          MEMORY[0x22A627DB0](v37, -1, -1);
        }

        goto LABEL_5;
      }
      uint64_t v38 = (uint64_t)v112;
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v112 + 128))(v33);
      uint64_t v102 = v40;
      uint64_t v103 = v39;
      uint64_t v41 = (*(uint64_t (**)(void))(*(void *)v38 + 152))();
      uint64_t v43 = v42;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = v94;
      *(void *)(v44 + 32) = (*(uint64_t (**)(void))(*(void *)v38 + 176))();
      *(void *)(v44 + 40) = v45;
      uint64_t v46 = v110();
      type metadata accessor for EngagementUnderstandingFeatures();
      uint64_t v47 = swift_allocObject();
      *(unsigned char *)(v47 + 16) = 2;
      *(_DWORD *)(v47 + 17) = 0;
      *(unsigned char *)(v47 + 21) = 0;
      uint64_t v48 = v98;
      uint64_t v49 = (*(uint64_t (**)(void))(*(void *)v38 + 224))();
      uint64_t v50 = v99;
      (*(void (**)(uint64_t))(*(void *)v38 + 248))(v49);
      type metadata accessor for SiriExecutionTask(0);
      unint64_t v12 = swift_allocObject();
      uint64_t v51 = v102;
      *(void *)(v12 + 16) = v103;
      *(void *)(v12 + 24) = v51;
      *(void *)(v12 + 32) = v41;
      *(void *)(v12 + 40) = v43;
      uint64_t v52 = v38;
      *(void *)(v12 + 48) = v44;
      *(void *)(v12 + 56) = MEMORY[0x263F8EE78];
      *(void *)(v12 + 64) = 0xD000000000000014;
      *(void *)(v12 + 72) = v93;
      *(void *)(v12 + 80) = v46;
      *(void *)(v12 + 88) = v47;
      uint64_t v53 = *v95;
      uint64_t v54 = v100;
      (*v95)(v12 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime, v48, v100);
      v53(v12 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime, v50, v54);
      uint64_t v7 = (uint8_t *)v116;
      swift_retain();
      unint64_t v55 = swift_bridgeObjectRetain();
      uint64_t v56 = v104;
      unint64_t v15 = specialized _ArrayProtocol.filter(_:)(v55, v52);
      swift_bridgeObjectRelease();
      swift_release();
      if (v15 >> 62)
      {
        uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v104 = v56;
        if (!v74)
        {
LABEL_49:
          swift_bridgeObjectRelease();
          if (one-time initialization token for engagement != -1) {
            swift_once();
          }
          uint64_t v75 = type metadata accessor for Logger();
          __swift_project_value_buffer(v75, (uint64_t)static Logger.engagement);
          uint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v7 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v7 = 0;
            _os_log_impl(&dword_224EDB000, v76, v77, "This is a Intelligence Flow task.", v7, 2u);
            MEMORY[0x22A627DB0](v7, -1, -1);
          }

          uint64_t v78 = swift_retain();
          unint64_t v15 = (unint64_t)&v116;
          MEMORY[0x22A6270D0](v78);
          if (*(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v57 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v104 = v56;
        if (!v57) {
          goto LABEL_49;
        }
      }
      if ((v15 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = (uint8_t *)MEMORY[0x22A627400](0, v15);
      }
      else
      {
        if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_61;
        }
        uint64_t v7 = *(uint8_t **)(v15 + 32);
        swift_retain();
      }
      uint64_t v58 = swift_bridgeObjectRelease();
      uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 248))(v58);
      unint64_t v61 = v60;
      swift_bridgeObjectRelease();
      uint64_t v62 = HIBYTE(v61) & 0xF;
      if ((v61 & 0x2000000000000000) == 0) {
        uint64_t v62 = v59 & 0xFFFFFFFFFFFFLL;
      }
      if (!v62)
      {
        swift_retain();
        unint64_t v66 = swift_bridgeObjectRetain();
        uint64_t v67 = v104;
        uint64_t v68 = specialized _ArrayProtocol.filter(_:)(v66, (uint64_t)v7);
        uint64_t v104 = v67;
        swift_bridgeObjectRelease_n();
        swift_release();
        unint64_t v116 = v68;
        if (one-time initialization token for engagement != -1) {
          swift_once();
        }
        uint64_t v69 = type metadata accessor for Logger();
        __swift_project_value_buffer(v69, (uint64_t)static Logger.engagement);
        uint64_t v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v72 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v72 = 0;
          _os_log_impl(&dword_224EDB000, v70, v71, "This is a Intelligence Flow task.", v72, 2u);
          MEMORY[0x22A627DB0](v72, -1, -1);
        }

        uint64_t v73 = swift_retain();
        unint64_t v15 = (unint64_t)&v116;
        MEMORY[0x22A6270D0](v73);
        if (*(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
        goto LABEL_56;
      }
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v63 = type metadata accessor for Logger();
      __swift_project_value_buffer(v63, (uint64_t)static Logger.engagement);
      unint64_t v15 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.info.getter();
      if (os_log_type_enabled((os_log_t)v15, v64))
      {
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v65 = 0;
        _os_log_impl(&dword_224EDB000, (os_log_t)v15, v64, "This is a SiriX task, Fall back to Flow.", v65, 2u);
        MEMORY[0x22A627DB0](v65, -1, -1);
        swift_release();

LABEL_56:
        swift_release();
        goto LABEL_5;
      }

      swift_release();
      swift_release();
LABEL_5:
      swift_release();
      unint64_t v12 = v111;
      if (v111 == v105)
      {
        swift_bridgeObjectRelease();
        unint64_t v12 = v116;
        goto LABEL_64;
      }
    }
    if (v12 >= *(void *)(v97 + 16)) {
      goto LABEL_60;
    }
    uint64_t v17 = swift_retain();
    BOOL v18 = __OFADD__(v12++, 1);
    if (!v18) {
      goto LABEL_12;
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    ;
  }
  swift_bridgeObjectRelease();
LABEL_64:
  unint64_t v79 = *(uint64_t (**)(uint64_t))(*(void *)v108 + 144);
  uint64_t v80 = swift_bridgeObjectRetain();
  uint64_t result = v79(v80);
  if (!(v12 >> 62))
  {
    uint64_t v82 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v82) {
      goto LABEL_66;
    }
LABEL_73:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v88 = swift_bridgeObjectRetain();
    specialized closure #2 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(v88, v90, v91, v92);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v82) {
    goto LABEL_73;
  }
LABEL_66:
  os_log_t v83 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t))(*(void *)v108 + 232);
  if (v82 >= 1)
  {
    uint64_t v84 = 0;
    uint64_t v85 = v107;
    do
    {
      if ((v12 & 0xC000000000000001) != 0)
      {
        uint64_t v86 = MEMORY[0x22A627400](v84, v12);
      }
      else
      {
        uint64_t v86 = *(void *)(v12 + 8 * v84 + 32);
        swift_retain();
      }
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = v86;
      *(void *)(v87 + 24) = v85;
      swift_retain();
      swift_retain();
      v83(v84, partial apply for closure #4 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:), v87);
      swift_release();
      swift_release();
      ++v84;
    }
    while (v82 != v84);
    goto LABEL_73;
  }
  __break(1u);
  return result;
}

uint64_t specialized PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v12 - 8);
  unint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v60 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for DispatchQoS();
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v58 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v56 = *(void *)(v19 - 8);
  uint64_t v57 = v19;
  MEMORY[0x270FA5388](v19);
  unint64_t v55 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v21[5] = a6;
  if (*(void *)(a1 + 16))
  {
    uint64_t v53 = v15;
    uint64_t v54 = v21;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v22 = swift_bridgeObjectRetain();
    unint64_t v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18PostSiriEngagement0G9UISessionVGG_AH0I13SignalBuilderCs5NeverOTg506_sSi18fg13Engagement0B9i7VAA0D13jk32CIgyno_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgyno_Tf1cn_n04_s18fg111Engagement0abC16MetricsCollectorC16runPSECollection33_68911A429BEB90148AF8DB12889D45113for10completionySayAA0pi14VG_yyctFAA0O13jK12CSi_AItXEfU_AH0fgH16MetricsCollectorCTf1nc_nTf4ng_n(v22, a2);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v65 = 0;
    uint64_t v24 = dispatch_group_create();
    unint64_t v62 = v23;
    uint64_t v52 = v16;
    if (v23 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v26)
      {
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v26 >= 1) {
          goto LABEL_4;
        }
        __break(1u);
      }
    }
    else
    {
      uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v26 = v25;
      if (v25)
      {
LABEL_4:
        uint64_t v27 = 0;
        unint64_t v28 = v62 & 0xC000000000000001;
        unint64_t v29 = v62 + 32;
        unint64_t v30 = v62 + 32;
        do
        {
          if (v28)
          {
            unint64_t v33 = v62;
            uint64_t v34 = MEMORY[0x22A627400](v27++, v62);
            dispatch_group_enter(v24);
            if (v27 < v25)
            {
              uint64_t v35 = MEMORY[0x22A627400](v27, v33);
LABEL_12:
              (*(void (**)(void))(*(void *)v35 + 112))();
              swift_release();
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t v34 = *(void *)(v29 + 8 * v27++);
            swift_retain();
            dispatch_group_enter(v24);
            if (v27 < v25)
            {
              uint64_t v35 = *(void *)(v29 + 8 * v27);
              swift_retain();
              goto LABEL_12;
            }
          }
          uint64_t v31 = type metadata accessor for SiriUISession(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v14, 1, 1, v31);
LABEL_6:
          swift_retain();
          uint64_t v32 = v24;
          specialized PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(v34, (uint64_t)v14, a2, &v65, v32);
          swift_release();

          swift_release();
          outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for SiriUISession?);
          unint64_t v29 = v30;
        }
        while (v27 != v26);
      }
    }
    swift_bridgeObjectRelease_n();
    type metadata accessor for OS_dispatch_queue();
    uint64_t v43 = v55;
    uint64_t v42 = v56;
    uint64_t v44 = v57;
    (*(void (**)(char *, void, uint64_t))(v56 + 104))(v55, *MEMORY[0x263F8F080], v57);
    uint64_t v45 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
    uint64_t v46 = swift_allocObject();
    uint64_t v47 = v54;
    *(void *)(v46 + 16) = partial apply for closure #1 in PostSiriEngagementMetricsCollector.collect(callback:);
    *(void *)(v46 + 24) = v47;
    aBlock[4] = closure #3 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)partial apply;
    aBlock[5] = v46;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_40;
    uint64_t v48 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v49 = v58;
    static DispatchQoS.unspecified.getter();
    uint64_t v63 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v50 = v60;
    uint64_t v51 = v53;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v48);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v49, v61);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v36 = one-time initialization token for engagement;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v36 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.engagement);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_224EDB000, v38, v39, "There are no Siri UI events in Biome stream to submit.", v40, 2u);
      MEMORY[0x22A627DB0](v40, -1, -1);
    }

    closure #1 in PostSiriEngagementMetricsCollector.collect(callback:)(a3, a4, a5);
    return swift_release();
  }
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18PostSiriEngagement0G9UISessionVGG_AH0I13SignalBuilderCs5NeverOTg506_sSi18fg13Engagement0B9i7VAA0D13jk32CIgyno_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgyno_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(void, char *), uint64_t a3)
{
  uint64_t v22 = a3;
  uint64_t v25 = a2;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
  uint64_t v4 = MEMORY[0x270FA5388](v23);
  uint64_t v24 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (uint64_t *)((char *)&v19 - v7);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v26 = MEMORY[0x263F8EE78];
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v20 = a1;
  swift_bridgeObjectRetain();
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(type metadata accessor for SiriUISession(0) - 8);
    uint64_t v14 = v20 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v21 = *(void *)(v13 + 72);
    uint64_t v15 = v23;
    do
    {
      uint64_t v16 = (uint64_t)&v24[*(int *)(v15 + 48)];
      outlined init with copy of SiriUISession(v14, v16);
      uint64_t v17 = (uint64_t)v8 + *(int *)(v15 + 48);
      *uint64_t v8 = v12;
      outlined init with take of SiriUISession(v16, v17);
      outlined init with take of DateInterval?((uint64_t)v8, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
      v25(*(void *)v10, &v10[*(int *)(v15 + 48)]);
      outlined destroy of Any?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v14 += v21;
      ++v12;
    }
    while (v11 != v12);
  }
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t specialized PostSiriEngagementMetricsCollector.init(parameters:)(uint64_t a1)
{
  type metadata accessor for PSEBiomeDonator();
  uint64_t v2 = swift_allocObject();
  swift_retain();
  id v3 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  id v4 = objc_msgSend(v3, sel_PostSiriEngagement);
  swift_unknownObjectRelease();
  id v5 = objc_msgSend(v4, sel_source);

  *(void *)(v2 + 16) = v5;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 0xD000000000000022;
  *(void *)(a1 + 32) = 0x8000000224F64E20;
  *(_WORD *)(a1 + 40) = 257;
  *(unsigned char *)(a1 + 42) = 1;
  type metadata accessor for UserDefaultsDomainProvider();
  uint64_t v6 = (void *)swift_allocObject();
  id v7 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v8 = (void *)MEMORY[0x22A626F60](0xD000000000000021, 0x8000000224F667E0);
  id v9 = objc_msgSend(v7, sel_initWithSuiteName_, v8);

  uint64_t v6[2] = v9;
  v6[3] = 0xD000000000000022;
  v6[4] = 0x8000000224F64E20;
  v6[5] = 0xD000000000000033;
  v6[6] = 0x8000000224F67E00;
  *(void *)(a1 + 48) = v6;
  return a1;
}

uint64_t outlined init with copy of SiriUISession(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriUISession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of SiriUISession(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriUISession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F156BC()
{
  uint64_t v1 = (int *)(type metadata accessor for SiriUISession(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  v8(v6 + v1[8], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, v5, v4);
}

uint64_t partial apply for closure #2 in PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for SiriUISession(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void (**)(char *))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #2 in PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)(v3, v4, v5, v6, v0 + v2, v7);
}

uint64_t outlined destroy of SiriUISession(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of SiriUISession?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PostSiriEngagementMetricsCollector.fetchDonatedEvents(biomeFetcherConfiguration:completion:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, _OWORD *))(v2 + 16);
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  uint64_t v6[2] = a2[2];
  return v3(a1, v6);
}

uint64_t sub_224F159D4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_224F15A24(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 40) = v2;
  return result;
}

uint64_t sub_224F15A68@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_224F15AB8(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 41) = v2;
  return result;
}

uint64_t sub_224F15AFC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_224F15B4C(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 42) = v2;
  return result;
}

uint64_t type metadata accessor for PostSiriEngagementMetricsCollector()
{
  return self;
}

uint64_t method lookup function for PostSiriEngagementMetricsCollector(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PostSiriEngagementMetricsCollector);
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.isSELFEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.isBiomeDonationEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.isFeatureStoreEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.__allocating_init(identifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v5 + 248))(a1, a2, a3 & 1, a4, a5 & 1);
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.calculateSuccessAndSubmit(allPseTasks:previousTask:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.signalFactoryForIntentEvents(group:taskName:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v4 + 288))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.generateBiomeFetcherConfiguration(uiSession:nextUiSession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.fetchDonatedEvents(biomeFetcherConfiguration:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.fetchSiriExecutionEvents(biomeFetcherConfiguration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t partial apply for closure #1 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(a2, v2);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_224F15DE4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #3 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t sub_224F15F00()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #4 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(uint64_t a1)
{
  return closure #4 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroy_25Tm()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #4 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(void *a1)
{
  return closure #1 in closure #4 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined assign with take of SiriUISession?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_224F15FF8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in PostSiriEngagementMetricsCollector.collect(callback:)()
{
  return closure #1 in PostSiriEngagementMetricsCollector.collect(callback:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t CallsIntentSignalFactory.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t CallsIntentSignalFactory.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  return result;
}

void CallsIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, void *a2)
{
  unint64_t v219 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  char v223 = (char *)&v207 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v222 = (uint64_t)&v207 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v221 = (char *)&v207 - v9;
  MEMORY[0x270FA5388](v8);
  v224 = (char *)&v207 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v214 = (char *)&v207 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v215 = (char *)&v207 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  Swift::String v218 = (char *)&v207 - v17;
  MEMORY[0x270FA5388](v16);
  v217 = (uint64_t *)((char *)&v207 - v18);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v207 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ReliabilityCategory();
  unint64_t v213 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v207 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  unint64_t v29 = (char *)&v207 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = (void *)MEMORY[0x22A6277A0](v27);
  id v31 = v227;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, &v231._countAndFlagsBits);
  if (v31)
  {
    return;
  }
  unint64_t v208 = v29;
  uint64_t v209 = v26;
  id v210 = v24;
  uint64_t v211 = v22;
  uint64_t v32 = v218;
  v212 = v21;
  uint64_t v226 = 0;
  id v227 = a1;
  id countAndFlagsBits = (id)v231._countAndFlagsBits;
  id v220 = objc_msgSend((id)v231._countAndFlagsBits, sel_intent);
  id v33 = objc_msgSend(v220, sel_domain);
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  if (v34 == 0x736C6C6143 && v36 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = v225;
    uint64_t v38 = (uint64_t)v219;
    uint64_t v39 = (uint64_t)v212;
  }
  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = v225;
    uint64_t v38 = (uint64_t)v219;
    uint64_t v39 = (uint64_t)v212;
    if ((v40 & 1) == 0)
    {
      if (one-time initialization token for engagement == -1)
      {
LABEL_13:
        uint64_t v47 = v25;
        uint64_t v207 = v25;
        uint64_t v48 = __swift_project_value_buffer(v25, (uint64_t)static Logger.engagement);
        uint64_t v49 = v209;
        uint64_t v50 = v208;
        (*(void (**)(char *, uint64_t, uint64_t))(v209 + 16))(v208, v48, v47);
        v231._id countAndFlagsBits = 0;
        v231._int64_t object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v51._id countAndFlagsBits = 0xD000000000000012;
        v51._int64_t object = (void *)0x8000000224F67470;
        String.append(_:)(v51);
        id v52 = v220;
        id v53 = objc_msgSend(v220, sel_domain);
        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v56 = v55;

        v57._id countAndFlagsBits = v54;
        v57._int64_t object = v56;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._id countAndFlagsBits = 0xD000000000000023;
        v58._int64_t object = (void *)0x8000000224F67490;
        String.append(_:)(v58);
        Swift::String v59 = v231;
        uint64_t v60 = *MEMORY[0x263F75148];
        uint64_t v61 = type metadata accessor for AppIntentEventDataIssues();
        uint64_t v62 = (uint64_t)v210;
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v210, v60, v61);
        unint64_t v63 = v213;
        uint64_t v64 = v211;
        (*(void (**)(uint64_t, void, uint64_t))(v213 + 104))(v62, *MEMORY[0x263F750E8], v211);
        Logger.error(_:_:)(v59._countAndFlagsBits, (unint64_t)v59._object, v62);

        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v207);
        return;
      }
LABEL_113:
      swift_once();
      goto LABEL_13;
    }
  }
  id v41 = v227;
  if (objc_msgSend(v227, sel_donatedBySiri))
  {
    uint64_t v42 = (void (*)(Swift::String *, void))(*(uint64_t (**)(Swift::String *))(*v37 + 144))(&v231);
    if (!__OFADD__(*v43, 1))
    {
      ++*v43;
      v42(&v231, 0);

      return;
    }
    __break(1u);
    goto LABEL_113;
  }
  uint64_t v235 = MEMORY[0x263F8EE80];
  id v44 = objc_msgSend(v41, sel_absoluteTimestamp);
  if (v44)
  {
    uint64_t v45 = v44;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v46 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v39, 0, 1, v46);
  }
  else
  {
    uint64_t v65 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v39, 1, 1, v65);
  }
  id v66 = objc_msgSend(countAndFlagsBits, sel_dateInterval);
  if (v66)
  {
    uint64_t v67 = v66;
    uint64_t v68 = v38;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v69 = type metadata accessor for DateInterval();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v32, 0, 1, v69);
  }
  else
  {
    uint64_t v68 = v38;
    uint64_t v69 = type metadata accessor for DateInterval();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v32, 1, 1, v69);
  }
  uint64_t v70 = (uint64_t)v32;
  uint64_t v71 = (uint64_t)v217;
  outlined init with take of DateInterval?(v70, (uint64_t)v217, &demangling cache variable for type metadata for DateInterval?);
  type metadata accessor for DateInterval();
  uint64_t v72 = v71;
  uint64_t v73 = *(void *)(v69 - 8);
  uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  double v75 = 0.0;
  if (!v74(v71, 1, v69))
  {
    DateInterval.duration.getter();
    uint64_t v72 = (uint64_t)v217;
    double v75 = v76;
  }
  outlined destroy of Any?(v72, &demangling cache variable for type metadata for DateInterval?);
  type metadata accessor for Utils();
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)(v39, v68, (uint64_t)&v231, v75);
  outlined destroy of Any?(v39, &demangling cache variable for type metadata for Date?);
  Swift::String v77 = v231;
  long long v78 = v232;
  v212 = v233;
  LODWORD(v211) = v234;
  id v79 = objc_msgSend(countAndFlagsBits, sel_dateInterval);
  if (v79)
  {
    uint64_t v80 = v79;
    uint64_t v81 = (uint64_t)v214;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v82 = 0;
    uint64_t v83 = (uint64_t)v215;
  }
  else
  {
    uint64_t v82 = 1;
    uint64_t v83 = (uint64_t)v215;
    uint64_t v81 = (uint64_t)v214;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v81, v82, 1, v69);
  outlined init with take of DateInterval?(v81, v83, &demangling cache variable for type metadata for DateInterval?);
  if (v74(v83, 1, v69))
  {
    outlined destroy of Any?(v83, &demangling cache variable for type metadata for DateInterval?);
    *((void *)&v232 + 1) = MEMORY[0x263F8D6C8];
    v231._id countAndFlagsBits = -1;
LABEL_26:
    outlined init with take of Any(&v231, &v229);
    uint64_t v85 = v235;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v228 = v85;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0x617275446C6C6163, 0xEC0000006E6F6974, isUniquelyReferenced_nonNull_native);
    uint64_t v235 = v228;
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  DateInterval.duration.getter();
  *((void *)&v230 + 1) = MEMORY[0x263F8D538];
  *(void *)&long long v229 = v84;
  outlined destroy of Any?(v83, &demangling cache variable for type metadata for DateInterval?);
  outlined init with take of Any(&v229, &v231);
  if (*((void *)&v232 + 1)) {
    goto LABEL_26;
  }
  outlined destroy of Any?((uint64_t)&v231, &demangling cache variable for type metadata for Any?);
  specialized Dictionary._Variant.removeValue(forKey:)(0x617275446C6C6163, 0xEC0000006E6F6974, &v229);
  outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
LABEL_27:
  id v87 = objc_msgSend(v220, sel_parametersByName);
  uint64_t v88 = MEMORY[0x263F8D310];
  if (v87)
  {
    uint64_t v89 = v87;
    uint64_t v90 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v90 + 16)
      && (unint64_t v91 = specialized __RawDictionaryStorage.find<A>(_:)(0x756F526F69647561, 0xEA00000000006574),
          (v92 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v90 + 56) + 32 * v91, (uint64_t)&v229);
    }
    else
    {
      long long v229 = 0u;
      long long v230 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v230 + 1))
    {
      outlined init with take of Any(&v229, &v231);
      goto LABEL_36;
    }
  }
  else
  {
    long long v229 = 0u;
    long long v230 = 0u;
  }
  *((void *)&v232 + 1) = v88;
  v231._id countAndFlagsBits = 0;
  v231._int64_t object = (void *)0xE000000000000000;
  outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
LABEL_36:
  outlined init with take of Any(&v231, &v229);
  uint64_t v93 = v235;
  char v94 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v228 = v93;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0x756F526F69647561, 0xEA00000000006574, v94);
  uint64_t v95 = v228;
  uint64_t v96 = swift_bridgeObjectRelease();
  uint64_t v97 = (*(uint64_t (**)(uint64_t))(*v37 + 128))(v96);
  uint64_t v98 = MEMORY[0x263F8D4F8];
  *((void *)&v232 + 1) = MEMORY[0x263F8D4F8];
  LOBYTE(v231._countAndFlagsBits) = v97 != 0;
  outlined init with take of Any(&v231, &v229);
  char v99 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v228 = v95;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0x42646574616E6F64, 0xED00006972695379, v99);
  uint64_t v100 = v228;
  swift_bridgeObjectRelease();
  id v101 = objc_msgSend(v220, sel_typeName);
  uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v104 = v103;

  *((void *)&v232 + 1) = v88;
  v231._id countAndFlagsBits = v102;
  v231._int64_t object = v104;
  outlined init with take of Any(&v231, &v229);
  char v105 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v228 = v100;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0x7954746E65746E69, 0xEE00656D614E6570, v105);
  uint64_t v235 = v228;
  swift_bridgeObjectRelease();
  id v106 = objc_msgSend(v227, sel_bundleID);
  if (v106)
  {
    uint64_t v107 = v106;
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v110 = v109;
  }
  else
  {
    uint64_t v108 = 0;
    unint64_t v110 = 0xE000000000000000;
  }
  v231._id countAndFlagsBits = v108;
  v231._int64_t object = (void *)v110;
  *(void *)&long long v229 = 0x6C7070612E6D6F63;
  *((void *)&v229 + 1) = 0xEA00000000002E65;
  lazy protocol witness table accessor for type String and conformance String();
  char v111 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  *((void *)&v232 + 1) = v98;
  LOBYTE(v231._countAndFlagsBits) = v111 & 1;
  outlined init with take of Any(&v231, &v229);
  uint64_t v112 = v235;
  char v113 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v228 = v112;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0xD000000000000016, 0x8000000224F66760, v113);
  uint64_t v114 = v228;
  uint64_t v235 = v228;
  swift_bridgeObjectRelease();
  (*(void (**)(void))(*v37 + 136))(0);
  id v115 = objc_msgSend(v220, sel_donationMetadata);
  if (!v115) {
    goto LABEL_52;
  }
  unint64_t v116 = v115;
  self;
  long long v117 = (void *)swift_dynamicCastObjCClass();
  if (!v117)
  {
LABEL_49:

    goto LABEL_52;
  }
  uint64_t v118 = v117;
  objc_msgSend(v117, sel_callDuration);
  uint64_t v119 = MEMORY[0x263F8D538];
  *((void *)&v232 + 1) = MEMORY[0x263F8D538];
  v231._id countAndFlagsBits = v120;
  outlined init with take of Any(&v231, &v229);
  char v121 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v228 = v114;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0x617275446C6C6163, 0xEC0000006E6F6974, v121);
  uint64_t v122 = v228;
  swift_bridgeObjectRelease();
  objc_msgSend(v118, sel_timeToEstablish);
  *((void *)&v232 + 1) = v119;
  v231._id countAndFlagsBits = v123;
  outlined init with take of Any(&v231, &v229);
  char v124 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v228 = v122;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0xD000000000000018, 0x8000000224F67520, v124);
  uint64_t v125 = v228;
  uint64_t v235 = v228;
  swift_bridgeObjectRelease();
  id v126 = objc_msgSend(v118, sel_recentCallStatus);
  if (!v126)
  {
    *((void *)&v232 + 1) = MEMORY[0x263F8D6C8];
    v231._id countAndFlagsBits = 0;
    goto LABEL_45;
  }
  id v127 = v126;
  *((void *)&v230 + 1) = type metadata accessor for NSNumber();
  *(void *)&long long v229 = v127;
  outlined init with take of Any(&v229, &v231);
  if (*((void *)&v232 + 1))
  {
LABEL_45:
    outlined init with take of Any(&v231, &v229);
    char v128 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v228 = v125;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0xD000000000000010, 0x8000000224F67540, v128);
    uint64_t v235 = v228;
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  outlined destroy of Any?((uint64_t)&v231, &demangling cache variable for type metadata for Any?);
  specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000010, 0x8000000224F67540, &v229);
  outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
LABEL_46:
  id v129 = objc_msgSend(v118, sel_disconnectedReason);
  if (v129)
  {
    id v130 = v129;
    *((void *)&v230 + 1) = type metadata accessor for NSNumber();
    *(void *)&long long v229 = v130;
    outlined init with take of Any(&v229, &v231);
    if (!*((void *)&v232 + 1))
    {
      outlined destroy of Any?((uint64_t)&v231, &demangling cache variable for type metadata for Any?);
      specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000012, 0x8000000224F67560, &v229);
      outlined destroy of Any?((uint64_t)&v229, &demangling cache variable for type metadata for Any?);
      goto LABEL_49;
    }
  }
  else
  {
    *((void *)&v232 + 1) = MEMORY[0x263F8D6C8];
    v231._id countAndFlagsBits = 0;
  }
  outlined init with take of Any(&v231, &v229);
  uint64_t v131 = v235;
  char v132 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v228 = v131;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0xD000000000000012, 0x8000000224F67560, v132);
  uint64_t v235 = v228;

  swift_bridgeObjectRelease();
LABEL_52:
  id v133 = objc_msgSend(v220, sel_parametersByName);
  if (!v133)
  {
    Swift::String v231 = (Swift::String)0;
    long long v232 = 0u;
LABEL_106:
    outlined destroy of Any?((uint64_t)&v231, &demangling cache variable for type metadata for Any?);
    goto LABEL_107;
  }
  uint64_t v134 = v133;
  uint64_t v135 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v135 + 16))
  {
    unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xE800000000000000);
    uint64_t v137 = (uint64_t)v224;
    if (v138)
    {
      outlined init with copy of Any(*(void *)(v135 + 56) + 32 * v136, (uint64_t)&v231);
    }
    else
    {
      Swift::String v231 = (Swift::String)0;
      long long v232 = 0u;
    }
  }
  else
  {
    Swift::String v231 = (Swift::String)0;
    long long v232 = 0u;
    uint64_t v137 = (uint64_t)v224;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v232 + 1)) {
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_107;
  }
  unint64_t v139 = v229;
  if ((unint64_t)v229 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v140 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v140) {
      goto LABEL_63;
    }
    goto LABEL_115;
  }
  uint64_t v140 = *(void *)((v229 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v140)
  {
LABEL_115:
    swift_bridgeObjectRelease();
LABEL_107:
    long long v142 = (char *)MEMORY[0x263F8EE78];
    v205 = (void *)MEMORY[0x263F8EE78];
    long long v143 = (void *)MEMORY[0x263F8EE78];
    uint64_t v206 = MEMORY[0x263F8EE78];
LABEL_108:
    uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *((void *)&v232 + 1) = v185;
    v231._id countAndFlagsBits = v206;
    outlined init with take of Any(&v231, &v229);
    uint64_t v186 = v235;
    char v187 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v228 = v186;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0x73746361746E6F63, 0xED000065756C6156, v187);
    uint64_t v188 = v228;
    swift_bridgeObjectRelease();
    *((void *)&v232 + 1) = v185;
    v231._id countAndFlagsBits = (uint64_t)v143;
    outlined init with take of Any(&v231, &v229);
    char v189 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v228 = v188;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0xD000000000000013, 0x8000000224F674C0, v189);
    uint64_t v190 = v228;
    swift_bridgeObjectRelease();
    *((void *)&v232 + 1) = v185;
    v231._id countAndFlagsBits = (uint64_t)v205;
    outlined init with take of Any(&v231, &v229);
    char v191 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v228 = v190;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0xD000000000000011, 0x8000000224F674E0, v191);
    uint64_t v192 = v228;
    swift_bridgeObjectRelease();
    *((void *)&v232 + 1) = v185;
    v231._id countAndFlagsBits = (uint64_t)v142;
    outlined init with take of Any(&v231, &v229);
    char v193 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v228 = v192;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v229, 0xD000000000000010, 0x8000000224F67500, v193);
    uint64_t v194 = v228;
    uint64_t v235 = v228;
    swift_bridgeObjectRelease();
    id v195 = objc_msgSend(v220, sel_verb);
    uint64_t v196 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v198 = v197;

    if (objc_msgSend(countAndFlagsBits, sel_direction) == (id)2)
    {
      swift_bridgeObjectRelease();
      uint64_t v194 = v235;
      unint64_t v198 = 0xEA00000000006C6CLL;
      uint64_t v196 = 0x6143726577736E41;
    }
    id v199 = v220;
    id v200 = objc_msgSend(v220, sel_domain);
    uint64_t v201 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v203 = v202;

    type metadata accessor for Signal();
    uint64_t v204 = swift_allocObject();
    *(Swift::String *)(v204 + 16) = v77;
    *(_OWORD *)(v204 + 32) = v78;
    *(void *)(v204 + 48) = v212;
    *(unsigned char *)(v204 + 56) = v211;
    *(void *)(v204 + 64) = v201;
    *(void *)(v204 + 72) = v203;
    *(void *)(v204 + 80) = v196;
    *(void *)(v204 + 88) = v198;
    *(unsigned char *)(v204 + 96) = 1;
    *(void *)(v204 + 104) = v194;
    return;
  }
LABEL_63:
  if (v140 >= 1)
  {
    long long v141 = 0;
    unint64_t v213 = v139 & 0xC000000000000001;
    long long v142 = (char *)MEMORY[0x263F8EE78];
    char v225 = (void *)MEMORY[0x263F8EE78];
    long long v143 = (void *)MEMORY[0x263F8EE78];
    unint64_t v219 = (void *)MEMORY[0x263F8EE78];
    uint64_t v215 = (char *)v139;
    uint64_t v214 = (char *)v140;
    while (1)
    {
      long long v144 = v219;
      if (v213) {
        id v145 = (id)MEMORY[0x22A627400](v141, v139);
      }
      else {
        id v145 = *(id *)(v139 + 8 * (void)v141 + 32);
      }
      unint64_t v146 = v145;
      id v147 = objc_msgSend(v145, sel_personHandle);
      long long v148 = v147;
      if (v147)
      {
        id v149 = objc_msgSend(v147, sel_value);

        if (v149)
        {
          long long v148 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v151 = v150;

          goto LABEL_73;
        }
        long long v148 = 0;
      }
      unint64_t v151 = 0xE000000000000000;
LABEL_73:
      char v152 = swift_isUniquelyReferenced_nonNull_native();
      id v227 = v146;
      if ((v152 & 1) == 0) {
        long long v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v144[2] + 1, 1, v144);
      }
      unint64_t v154 = v144[2];
      unint64_t v153 = v144[3];
      Swift::String v218 = v142;
      if (v154 >= v153 >> 1) {
        long long v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v153 > 1), v154 + 1, 1, v144);
      }
      v144[2] = v154 + 1;
      unint64_t v219 = v144;
      id v155 = &v144[2 * v154];
      v155[4] = v148;
      v155[5] = v151;
      id v156 = objc_msgSend(v227, sel_displayName);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::String v231 = String.lowercased()();
      uint64_t v157 = v226;
      specialized RangeReplaceableCollection.removeAll(where:)(&v231);
      swift_bridgeObjectRelease();
      Swift::String v158 = v231;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v143 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v143[2] + 1, 1, v143);
      }
      uint64_t v159 = (uint64_t)v221;
      unint64_t v161 = v143[2];
      unint64_t v160 = v143[3];
      if (v161 >= v160 >> 1) {
        long long v143 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v160 > 1), v161 + 1, 1, v143);
      }
      v143[2] = v161 + 1;
      *(Swift::String *)&v143[2 * v161 + 4] = v158;
      id v162 = objc_msgSend(v227, sel_nameComponents);
      v217 = v143;
      if (v162)
      {
        id v163 = v162;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v164 = type metadata accessor for PersonNameComponents();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56))(v159, 0, 1, v164);
      }
      else
      {
        uint64_t v164 = type metadata accessor for PersonNameComponents();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56))(v159, 1, 1, v164);
      }
      outlined init with take of DateInterval?(v159, v137, &demangling cache variable for type metadata for PersonNameComponents?);
      type metadata accessor for PersonNameComponents();
      uint64_t v165 = *(void *)(v164 - 8);
      uint64_t v166 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v165 + 48);
      if (v166(v137, 1, v164))
      {
        outlined destroy of Any?(v137, &demangling cache variable for type metadata for PersonNameComponents?);
LABEL_86:
        swift_bridgeObjectRelease();
        goto LABEL_88;
      }
      PersonNameComponents.givenName.getter();
      uint64_t v168 = v167;
      outlined destroy of Any?(v137, &demangling cache variable for type metadata for PersonNameComponents?);
      if (!v168) {
        goto LABEL_86;
      }
LABEL_88:
      Swift::String v231 = String.lowercased()();
      specialized RangeReplaceableCollection.removeAll(where:)(&v231);
      swift_bridgeObjectRelease();
      Swift::String v169 = v231;
      char v170 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v226 = v157;
      if (v170) {
        unint64_t v171 = v225;
      }
      else {
        unint64_t v171 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v225[2] + 1, 1, v225);
      }
      unint64_t v173 = v171[2];
      unint64_t v172 = v171[3];
      if (v173 >= v172 >> 1) {
        unint64_t v171 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v172 > 1), v173 + 1, 1, v171);
      }
      v171[2] = v173 + 1;
      char v225 = v171;
      *(Swift::String *)&v171[2 * v173 + 4] = v169;
      id v174 = objc_msgSend(v227, sel_nameComponents);
      if (v174)
      {
        int64_t v175 = v174;
        uint64_t v176 = (uint64_t)v223;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v177 = 0;
      }
      else
      {
        uint64_t v177 = 1;
        uint64_t v176 = (uint64_t)v223;
      }
      uint64_t v137 = (uint64_t)v224;
      long long v142 = v218;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v165 + 56))(v176, v177, 1, v164);
      uint64_t v178 = v222;
      outlined init with take of DateInterval?(v176, v222, &demangling cache variable for type metadata for PersonNameComponents?);
      if (v166(v178, 1, v164))
      {
        outlined destroy of Any?(v178, &demangling cache variable for type metadata for PersonNameComponents?);
        long long v143 = v217;
      }
      else
      {
        PersonNameComponents.familyName.getter();
        uint64_t v180 = v179;
        outlined destroy of Any?(v178, &demangling cache variable for type metadata for PersonNameComponents?);
        long long v143 = v217;
        if (v180) {
          goto LABEL_99;
        }
      }
      swift_bridgeObjectRelease();
LABEL_99:
      Swift::String v231 = String.lowercased()();
      uint64_t v181 = v226;
      specialized RangeReplaceableCollection.removeAll(where:)(&v231);
      uint64_t v226 = v181;
      swift_bridgeObjectRelease();
      Swift::String v182 = v231;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v142 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v142 + 2) + 1, 1, v142);
      }
      unint64_t v184 = *((void *)v142 + 2);
      unint64_t v183 = *((void *)v142 + 3);
      if (v184 >= v183 >> 1) {
        long long v142 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v183 > 1), v184 + 1, 1, v142);
      }
      ++v141;
      *((void *)v142 + 2) = v184 + 1;
      *(Swift::String *)&v142[16 * v184 + 32] = v182;

      unint64_t v139 = (unint64_t)v215;
      if (v214 == v141)
      {
        swift_bridgeObjectRelease();
        v205 = v225;
        uint64_t v206 = (uint64_t)v219;
        goto LABEL_108;
      }
    }
  }
  __break(1u);
}

uint64_t CallsIntentSignalFactory.deinit()
{
  return v0;
}

uint64_t CallsIntentSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_224F17B8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_224F17BD8(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t type metadata accessor for CallsIntentSignalFactory()
{
  return self;
}

uint64_t method lookup function for CallsIntentSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CallsIntentSignalFactory);
}

uint64_t dispatch thunk of CallsIntentSignalFactory.donatedBySiriCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of CallsIntentSignalFactory.donatedBySiriCount.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of CallsIntentSignalFactory.donatedBySiriCount.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t PSEBiomeDonator.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  id v1 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  id v2 = objc_msgSend(v1, sel_PostSiriEngagement);
  swift_unknownObjectRelease();
  id v3 = objc_msgSend(v2, sel_source);

  *(void *)(v0 + 16) = v3;
  return v0;
}

uint64_t PSEBiomeDonator.init()()
{
  id v1 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  id v2 = objc_msgSend(v1, sel_PostSiriEngagement);
  swift_unknownObjectRelease();
  id v3 = objc_msgSend(v2, sel_source);

  *(void *)(v0 + 16) = v3;
  return v0;
}

void PSEBiomeDonator.donatePSESignals(signals:siriTask:)(unint64_t a1, uint64_t a2)
{
  id v3 = v2;
  if (a2)
  {
    uint64_t v6 = (void *)v2[2];
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)a2 + 272);
      id v62 = v6;
      v72[0] = v7();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v10 = v9;
      uint64_t v11 = swift_bridgeObjectRelease();
      v72[0] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(v11);
      uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v14 = v13;
      uint64_t v15 = swift_bridgeObjectRelease();
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(v15);
LABEL_8:
      id v66 = (void *)(*(uint64_t (**)(uint64_t))(*v3 + 104))(v16);
      swift_release();
      uint64_t v70 = (*(uint64_t (**)(unint64_t))(*v3 + 112))(a1);
      if (a2)
      {
        uint64_t v69 = (*(uint64_t (**)(void))(*(void *)a2 + 152))();
        uint64_t v60 = v18;
        uint64_t v68 = (*(uint64_t (**)(void))(*(void *)a2 + 176))();
        uint64_t v59 = v19;
        uint64_t v67 = (*(uint64_t (**)(void))(*(void *)a2 + 248))();
        if (v10) {
          uint64_t v21 = v8;
        }
        else {
          uint64_t v21 = 0;
        }
        if (!v10) {
          unint64_t v10 = 0xE000000000000000;
        }
        if (v14) {
          uint64_t v22 = v12;
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v57 = v22;
        uint64_t v58 = v20;
        if (v14) {
          uint64_t v23 = v14;
        }
        else {
          uint64_t v23 = 0xE000000000000000;
        }
        uint64_t v24 = (*(uint64_t (**)(void))(*(void *)a2 + 200))();
        uint64_t v25 = (*(uint64_t (**)(void))(*(void *)a2 + 200))();
        uint64_t v26 = *(void *)(v25 + 16);
        uint64_t v63 = v10;
        uint64_t v64 = v21;
        if (v26)
        {
          uint64_t v27 = v25 + 16 * v26;
          uint64_t v28 = *(void *)(v27 + 24);
          uint64_t v65 = *(void *)(v27 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v65 = 0;
          uint64_t v28 = 0;
        }
        uint64_t v42 = v59;
        uint64_t v38 = v60;
        uint64_t v40 = v57;
        uint64_t v43 = v58;
        uint64_t v41 = v24;
      }
      else
      {
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        uint64_t v67 = 0;
        uint64_t v28 = 0;
        if (v10) {
          uint64_t v37 = v8;
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v64 = v37;
        uint64_t v65 = 0;
        uint64_t v38 = 0xE000000000000000;
        if (v10) {
          unint64_t v39 = v10;
        }
        else {
          unint64_t v39 = 0xE000000000000000;
        }
        uint64_t v63 = v39;
        if (v14) {
          uint64_t v40 = v12;
        }
        else {
          uint64_t v40 = 0;
        }
        if (v14) {
          uint64_t v23 = v14;
        }
        else {
          uint64_t v23 = 0xE000000000000000;
        }
        uint64_t v41 = MEMORY[0x263F8EE78];
        uint64_t v42 = 0xE000000000000000;
        uint64_t v43 = 0xE000000000000000;
      }
      objc_allocWithZone(MEMORY[0x263F2A480]);
      id v61 = v66;
      id v44 = @nonobjc BMSiriPostSiriEngagement.init(uiSessionID:taskID:taskType:conversationPath:appPattern:requestIds:engagementUnderstanding:pseEvents:clientSessionId:lastRequestId:executionUUID:)(v69, v38, v68, v42, v67, v43, v64, v63, v40, v23, v41, v66, v70, 0, 0, v65, v28, 0, 0);
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.engagement);
      swift_retain_n();
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        v72[0] = v49;
        *(_DWORD *)uint64_t v48 = 136315138;
        if (a2)
        {
          uint64_t v50 = (*(uint64_t (**)(void))(*(void *)a2 + 152))();
          unint64_t v52 = v51;
        }
        else
        {
          uint64_t v50 = 0;
          unint64_t v52 = 0xE000000000000000;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_224EDB000, v46, v47, "Biome donation of PSE signals with SiriExecutionTask within a UISession: %s", v48, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22A627DB0](v49, -1, -1);
        MEMORY[0x22A627DB0](v48, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      objc_msgSend(v62, sel_sendEvent_, v44);

      return;
    }
LABEL_22:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.engagement);
    swift_retain_n();
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v72[0] = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      if (a2)
      {
        uint64_t v34 = (*(uint64_t (**)(void))(*(void *)a2 + 152))();
        unint64_t v36 = v35;
      }
      else
      {
        uint64_t v34 = 0;
        unint64_t v36 = 0xE000000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224EDB000, v30, v31, "nil biomePSESource, unable to donate PSE signals with SiriExecutionTask within a UISession:  %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v33, -1, -1);
      MEMORY[0x22A627DB0](v32, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v53 >= 1)
    {
LABEL_6:
      uint64_t v17 = (void *)v3[2];
      if (v17)
      {
        id v62 = v17;
        uint64_t v16 = 0;
        uint64_t v12 = 0;
        uint64_t v14 = 0;
        uint64_t v8 = 0;
        unint64_t v10 = 0;
        goto LABEL_8;
      }
      goto LABEL_22;
    }
  }
  else if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
  {
    goto LABEL_6;
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)static Logger.engagement);
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v71, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl(&dword_224EDB000, v71, v55, "both SiriExecutionTask and PSE signals are nil, nothing to donate to Biome", v56, 2u);
    MEMORY[0x22A627DB0](v56, -1, -1);
  }
}

id PSEBiomeDonator.createEngagementUnderstandingFeatures(engagementFeatures:)(uint64_t a1)
{
  if (a1) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  }
  else {
    uint64_t v3 = 5;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v3);
  if (a1)
  {
    (*(void (**)(void))(*(void *)a1 + 184))();
    v5.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(void *)a1 + 192))();
    v6.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(void *)a1 + 200))();
    v7.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(void *)a1 + 208))();
    v8.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(void *)a1 + 216))();
    v9.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(void *)a1 + 224))();
    v10.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(void *)a1 + 232))();
    v11.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  }
  else
  {
    v11.super.super.Class isa = 0;
    v10.super.super.Class isa = 0;
    v9.super.super.Class isa = 0;
    v8.super.super.Class isa = 0;
    v7.super.super.Class isa = 0;
    v6.super.super.Class isa = 0;
    v5.super.super.Class isa = 0;
  }
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F2A488]), sel_initWithTaskSuccess_isUserAbandoned_isUserCancelled_isSiriCompleted_isPromptInteraction_isConfirmInteraction_isDisambiguateInteraction_isUnsupportedPromptInteraction_, v4, v5.super.super.isa, v6.super.super.isa, v7.super.super.isa, v8.super.super.isa, v9.super.super.isa, v10.super.super.isa, v11.super.super.isa);

  return v12;
}

uint64_t PSEBiomeDonator.createBiomePSESignal(signals:)(unint64_t a1)
{
  void *(*v7)(long long *__return_ptr);
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  Class v56;
  id v57;
  id v58;
  uint64_t v60;
  id v61;
  int64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t (*v67)(void);
  Class isa;
  id v69;
  void *(*v70)(long long *__return_ptr);
  unint64_t v71;
  uint64_t v72;
  void v73[6];
  long long v74;
  long long v75;
  long long v76;
  double v77;
  uint64_t v78;

  int64_t v1 = a1;
  long long v78 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_83;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v3 = 0;
    id v62 = v1 + 32;
    uint64_t v63 = v1 & 0xFFFFFFFFFFFFFF8;
    id v66 = v1 & 0xC000000000000001;
    uint64_t v64 = v1;
    uint64_t v65 = v2;
    while (1)
    {
      if (v66)
      {
        uint64_t v4 = MEMORY[0x22A627400](v3, v64);
        BOOL v5 = __OFADD__(v3, 1);
        unint64_t v6 = v3 + 1;
        if (v5) {
          break;
        }
        goto LABEL_10;
      }
      if (v3 >= *(void *)(v63 + 16)) {
        goto LABEL_82;
      }
      uint64_t v4 = *(void *)(v62 + 8 * v3);
      swift_retain();
      BOOL v5 = __OFADD__(v3, 1);
      unint64_t v6 = v3 + 1;
      if (v5) {
        break;
      }
LABEL_10:
      uint64_t v71 = v6;
      NSNumber v7 = *(void *(**)(long long *__return_ptr))(*(void *)v4 + 120);
      NSNumber v8 = v7(&v76);
      NSNumber v9 = (void *)MEMORY[0x22A6271C0](v8, v77);
      NSNumber v10 = v7(&v74);
      NSNumber v11 = (void *)MEMORY[0x22A6271C0](v10, *((double *)&v74 + 1));
      uint64_t v70 = v7;
      id v12 = v7((long long *)v73);
      uint64_t v13 = (void *)MEMORY[0x22A6271C0](v12, *(double *)&v73[2]);
      uint64_t v69 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F2A4A0]), sel_initWithDuration_sinceUIEnd_sinceUIStart_, v9, v11, v13);

      v73[0] = MEMORY[0x263F8EE78];
      uint64_t v72 = v4;
      uint64_t v67 = *(uint64_t (**)(void))(*(void *)v4 + 216);
      uint64_t v14 = v67();
      uint64_t v15 = v14;
      int64_t v1 = 0;
      uint64_t v16 = v14 + 64;
      uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
      if (v17 < 64) {
        uint64_t v18 = ~(-1 << v17);
      }
      else {
        uint64_t v18 = -1;
      }
      uint64_t v19 = v18 & *(void *)(v14 + 64);
      uint64_t v20 = (unint64_t)(v17 + 63) >> 6;
      while (1)
      {
        if (v19)
        {
          uint64_t v21 = __clz(__rbit64(v19));
          v19 &= v19 - 1;
          uint64_t v22 = v21 | (v1 << 6);
          goto LABEL_34;
        }
        uint64_t v23 = v1 + 1;
        if (__OFADD__(v1, 1))
        {
          __break(1u);
          goto LABEL_80;
        }
        if (v23 >= v20) {
          break;
        }
        uint64_t v24 = *(void *)(v16 + 8 * v23);
        ++v1;
        if (!v24)
        {
          int64_t v1 = v23 + 1;
          if (v23 + 1 >= v20) {
            break;
          }
          uint64_t v24 = *(void *)(v16 + 8 * v1);
          if (!v24)
          {
            int64_t v1 = v23 + 2;
            if (v23 + 2 >= v20) {
              break;
            }
            uint64_t v24 = *(void *)(v16 + 8 * v1);
            if (!v24)
            {
              int64_t v1 = v23 + 3;
              if (v23 + 3 >= v20) {
                break;
              }
              uint64_t v24 = *(void *)(v16 + 8 * v1);
              if (!v24)
              {
                int64_t v1 = v23 + 4;
                if (v23 + 4 >= v20) {
                  break;
                }
                uint64_t v24 = *(void *)(v16 + 8 * v1);
                if (!v24)
                {
                  uint64_t v25 = v23 + 5;
                  if (v25 >= v20) {
                    break;
                  }
                  uint64_t v24 = *(void *)(v16 + 8 * v25);
                  if (!v24)
                  {
                    while (1)
                    {
                      int64_t v1 = v25 + 1;
                      if (__OFADD__(v25, 1)) {
                        goto LABEL_81;
                      }
                      if (v1 >= v20) {
                        goto LABEL_75;
                      }
                      uint64_t v24 = *(void *)(v16 + 8 * v1);
                      ++v25;
                      if (v24) {
                        goto LABEL_33;
                      }
                    }
                  }
                  int64_t v1 = v25;
                }
              }
            }
          }
        }
LABEL_33:
        uint64_t v19 = (v24 - 1) & v24;
        uint64_t v22 = __clz(__rbit64(v24)) + (v1 << 6);
LABEL_34:
        uint64_t v26 = (uint64_t *)(*(void *)(v15 + 48) + 16 * v22);
        uint64_t v27 = *v26;
        uint64_t v28 = v26[1];
        uint64_t v29 = *v26 == 0x73746361746E6F63 && v28 == 0xED000065756C6156;
        if (!v29
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v27 != 0xD000000000000013 || v28 != 0x8000000224F674C0)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v27 != 0xD000000000000011 || v28 != 0x8000000224F674E0)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v27 != 0xD000000000000010 || v28 != 0x8000000224F67500)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v27 != 0xD000000000000018 || v28 != 0x8000000224F67E80))
        {
          unint64_t v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          os_log_type_t v31 = v27 == 0xD000000000000018 && v28 == 0x8000000224F67EA0;
          uint64_t v32 = v31;
          if ((v30 & 1) == 0
            && !v32
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v27 != 0x7265755172657375 || v28 != 0xE900000000000079)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v27 != 0x6169726574697263 || v28 != 0xE800000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v33 = swift_bridgeObjectRetain_n();
            uint64_t v34 = ((uint64_t (*)(uint64_t))v67)(v33);
            if (*(void *)(v34 + 16)
              && (unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v36 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v34 + 56) + 32 * v35, (uint64_t)&v74);
            }
            else
            {
              uint64_t v74 = 0u;
              double v75 = 0u;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*((void *)&v75 + 1))
            {
              outlined init with take of Any(&v74, &v76);
            }
            else
            {
              Swift::String v77 = MEMORY[0x263F8D310];
              *(void *)&double v76 = 0;
              *((void *)&v76 + 1) = 0xE000000000000000;
              outlined destroy of Any?((uint64_t)&v74);
            }
            outlined init with copy of Any((uint64_t)&v76, (uint64_t)&v74);
            uint64_t v60 = String.init<A>(describing:)();
            uint64_t v38 = v37;
            id v61 = objc_allocWithZone(MEMORY[0x263F2A498]);
            unint64_t v39 = (void *)MEMORY[0x22A626F60](v27, v28);
            swift_bridgeObjectRelease();
            uint64_t v40 = (void *)MEMORY[0x22A626F60](v60, v38);
            swift_bridgeObjectRelease();
            uint64_t v41 = objc_msgSend(v61, sel_initWithKey_value_, v39, v40);

            uint64_t v42 = v41;
            MEMORY[0x22A6270D0]();
            if (*(void *)((v73[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v73[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            __swift_destroy_boxed_opaque_existential_0((uint64_t)&v76);
          }
        }
      }
LABEL_75:
      uint64_t v43 = swift_release();
      id v44 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 144))(v43);
      uint64_t v46 = v45;
      os_log_type_t v47 = (*(uint64_t (**)(void))(*(void *)v72 + 168))();
      uint64_t v49 = v48;
      (*(void (**)(void))(*(void *)v72 + 192))();
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      uint64_t v50 = v69;
      unint64_t v51 = v70(&v76);
      unint64_t v52 = (void *)MEMORY[0x22A6271C0](v51, *(double *)&v76);
      uint64_t v53 = objc_allocWithZone(MEMORY[0x263F2A490]);
      uint64_t v54 = (void *)MEMORY[0x22A626F60](v44, v46);
      swift_bridgeObjectRelease();
      os_log_type_t v55 = (void *)MEMORY[0x22A626F60](v47, v49);
      swift_bridgeObjectRelease();
      type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for BMSiriPostSiriEngagementSignalContent);
      uint64_t v56 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v57 = objc_msgSend(v53, sel_initWithDomain_action_isPostSiriEngagement_pseDelta_pseContents_donatedTimestamp_, v54, v55, isa, v50, v56, v52);

      int64_t v1 = (int64_t)v50;
      uint64_t v58 = v57;
      MEMORY[0x22A6270D0]();
      if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();

      unint64_t v3 = v71;
      if (v71 == v65)
      {
        swift_bridgeObjectRelease();
        return v78;
      }
    }
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t PSEBiomeDonator.getBiomeTaskSuccess(taskSuccess:)(char a1)
{
  return dword_224F64F3C[a1];
}

uint64_t PSEBiomeDonator.deinit()
{
  return v0;
}

uint64_t PSEBiomeDonator.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 24, 7);
}

id @nonobjc BMSiriPostSiriEngagement.init(uiSessionID:taskID:taskType:conversationPath:appPattern:requestIds:engagementUnderstanding:pseEvents:clientSessionId:lastRequestId:executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2)
  {
    unint64_t v39 = (void *)MEMORY[0x22A626F60]();
    swift_bridgeObjectRelease();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v38 = 0;
    if (a6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  unint64_t v39 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v38 = (void *)MEMORY[0x22A626F60](a3, a4);
  swift_bridgeObjectRelease();
  if (a6)
  {
LABEL_4:
    uint64_t v37 = (void *)MEMORY[0x22A626F60](a5, a6);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v37 = 0;
LABEL_8:
  if (a8)
  {
    unint64_t v36 = (void *)MEMORY[0x22A626F60](a7, a8);
    swift_bridgeObjectRelease();
    uint64_t v25 = a15;
    if (a10)
    {
LABEL_10:
      unint64_t v35 = (void *)MEMORY[0x22A626F60](a9, a10);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v36 = 0;
    uint64_t v25 = a15;
    if (a10) {
      goto LABEL_10;
    }
  }
  unint64_t v35 = 0;
LABEL_13:
  v34.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for BMSiriPostSiriEngagementSignal);
  v26.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v25)
  {
    uint64_t v27 = (void *)MEMORY[0x22A626F60](a14, v25);
    swift_bridgeObjectRelease();
    uint64_t v28 = a19;
    if (a17) {
      goto LABEL_15;
    }
LABEL_18:
    uint64_t v29 = 0;
    unint64_t v30 = a12;
    if (v28) {
      goto LABEL_16;
    }
LABEL_19:
    os_log_type_t v31 = 0;
    goto LABEL_20;
  }
  uint64_t v27 = 0;
  uint64_t v28 = a19;
  if (!a17) {
    goto LABEL_18;
  }
LABEL_15:
  uint64_t v29 = (void *)MEMORY[0x22A626F60](a16, a17);
  swift_bridgeObjectRelease();
  unint64_t v30 = a12;
  if (!v28) {
    goto LABEL_19;
  }
LABEL_16:
  os_log_type_t v31 = (void *)MEMORY[0x22A626F60](a18, v28);
  swift_bridgeObjectRelease();
LABEL_20:
  id v33 = objc_msgSend(v40, sel_initWithUISessionID_taskID_taskType_conversationPath_appPattern_requestIds_engagementUnderstandingFeatures_pseEvents_clientSessionId_lastRequestId_executionUUID_, v39, v38, v37, v36, v35, v34.super.isa, v30, v26.super.isa, v27, v29, v31);

  return v33;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PSEBiomeDonator()
{
  return self;
}

uint64_t method lookup function for PSEBiomeDonator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEBiomeDonator);
}

uint64_t dispatch thunk of PSEBiomeDonator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PSEBiomeDonator.donatePSESignals(signals:siriTask:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PSEBiomeDonator.createEngagementUnderstandingFeatures(engagementFeatures:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PSEBiomeDonator.createBiomePSESignal(signals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PSEBiomeDonator.getBiomeTaskSuccess(taskSuccess:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t type metadata accessor for BMSiriPostSiriEngagementSignalContent(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t MessagesIntentSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

void MessagesIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v223 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v222 = (char *)&v212 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v225 = (uint64_t)&v212 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v7 - 8);
  v224 = (char *)&v212 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v228 = (char *)&v212 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v229 = (uint64_t)&v212 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  id v227 = (char *)&v212 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v212 - v16;
  uint64_t v18 = type metadata accessor for ReliabilityCategory();
  uint64_t v221 = *(void **)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v212 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = *(void **)(v21 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v212 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSArray v26 = (void *)MEMORY[0x22A6277A0](v23);
  uint64_t countAndFlagsBits = v232._countAndFlagsBits;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, &v233._countAndFlagsBits);
  if (countAndFlagsBits)
  {
    return;
  }
  Swift::String v218 = v25;
  id v220 = v22;
  v232._uint64_t countAndFlagsBits = (uint64_t)v20;
  unint64_t v219 = (void *)v18;
  uint64_t v215 = v17;
  id v216 = a1;
  uint64_t v231 = 0;
  id v217 = (id)v233._countAndFlagsBits;
  id v226 = objc_msgSend((id)v233._countAndFlagsBits, sel_intent);
  id v28 = objc_msgSend(v226, sel_domain);
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  if (v29 == 0x736567617373654DLL && v31 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = v230;
    uint64_t v33 = v21;
  }
  else
  {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = v230;
    uint64_t v33 = v21;
    if ((v34 & 1) == 0)
    {
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v55 = __swift_project_value_buffer(v21, (uint64_t)static Logger.engagement);
      uint64_t v56 = v220;
      uint64_t v57 = v218;
      ((void (*)(char *, uint64_t, uint64_t))v220[2])(v218, v55, v21);
      v233._uint64_t countAndFlagsBits = 0;
      v233._int64_t object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v58._int64_t object = (void *)0x8000000224F67470;
      v58._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v58);
      id v59 = objc_msgSend(v226, sel_domain);
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v62 = v61;

      v63._uint64_t countAndFlagsBits = v60;
      v63._int64_t object = v62;
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._uint64_t countAndFlagsBits = 0xD000000000000027;
      v64._int64_t object = (void *)0x8000000224F67F00;
      String.append(_:)(v64);
      Swift::String v65 = v233;
      uint64_t v66 = *MEMORY[0x263F75148];
      uint64_t v67 = type metadata accessor for AppIntentEventDataIssues();
      uint64_t v68 = v232._countAndFlagsBits;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 104))(v232._countAndFlagsBits, v66, v67);
      uint64_t v69 = v221;
      uint64_t v70 = v219;
      ((void (*)(uint64_t, void, void *))v221[13])(v68, *MEMORY[0x263F750E8], v219);
      Logger.error(_:_:)(v65._countAndFlagsBits, (unint64_t)v65._object, v68);

      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, void *))v69[1])(v68, v70);
      ((void (*)(char *, uint64_t))v56[1])(v57, v33);
      return;
    }
  }
  id v35 = v216;
  if (objc_msgSend(v216, sel_interactionDirection) == 2)
  {
    unsigned __int8 v36 = objc_msgSend(v35, sel_donatedBySiri);
    uint64_t v37 = MEMORY[0x263F8D4F8];
    *((void *)&v234 + 1) = MEMORY[0x263F8D4F8];
    LOBYTE(v233._countAndFlagsBits) = v36;
    outlined init with take of Any(&v233, &v238);
    uint64_t v38 = MEMORY[0x263F8EE80];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v241 = v38;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0x42646574616E6F64, 0xED00006972695379, isUniquelyReferenced_nonNull_native);
    uint64_t v40 = v241;
    swift_bridgeObjectRelease();
    id v41 = objc_msgSend(v226, sel_typeName);
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v44 = v43;

    *((void *)&v234 + 1) = MEMORY[0x263F8D310];
    v233._uint64_t countAndFlagsBits = v42;
    v233._int64_t object = v44;
    outlined init with take of Any(&v233, &v238);
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v237 = v40;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0x7954746E65746E69, 0xEE00656D614E6570, v45);
    uint64_t v241 = v237;
    swift_bridgeObjectRelease();
    id v46 = objc_msgSend(v35, sel_bundleID);
    if (v46)
    {
      os_log_type_t v47 = v46;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v50 = v49;
    }
    else
    {
      uint64_t v48 = 0;
      unint64_t v50 = 0xE000000000000000;
    }
    v233._uint64_t countAndFlagsBits = v48;
    v233._int64_t object = (void *)v50;
    *(void *)&long long v238 = 0x6C7070612E6D6F63;
    *((void *)&v238 + 1) = 0xEA00000000002E65;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v71 = MEMORY[0x263F8D310];
    char v72 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    *((void *)&v234 + 1) = v37;
    LOBYTE(v233._countAndFlagsBits) = v72 & 1;
    outlined init with take of Any(&v233, &v238);
    uint64_t v73 = v241;
    char v74 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v237 = v73;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0xD000000000000016, 0x8000000224F66760, v74);
    uint64_t v75 = v237;
    swift_bridgeObjectRelease();
    unsigned int v76 = objc_msgSend(v216, sel_interactionDirection);
    type metadata accessor for BMAppIntentInteractionDirection(0);
    *((void *)&v234 + 1) = v77;
    LODWORD(v233._countAndFlagsBits) = v76;
    outlined init with take of Any(&v233, &v238);
    char v78 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v237 = v75;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0xD000000000000014, 0x8000000224F67F30, v78);
    uint64_t v79 = v237;
    uint64_t v241 = v237;
    swift_bridgeObjectRelease();
    id v80 = objc_msgSend(v217, sel_intentResponse);
    if (v80)
    {
      uint64_t v81 = v80;
      uint64_t v82 = (*(uint64_t (**)(id))(*v32 + 104))(objc_msgSend(v80, sel__intentResponseCode));
      *((void *)&v234 + 1) = v71;
      v233._uint64_t countAndFlagsBits = v82;
      v233._int64_t object = v83;
      outlined init with take of Any(&v233, &v238);
      char v84 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v237 = v79;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0xD000000000000012, 0x8000000224F67F70, v84);
      uint64_t v241 = v237;
      swift_bridgeObjectRelease();
      self;
      uint64_t v85 = swift_dynamicCastObjCClass();
      if (!v85)
      {

        goto LABEL_41;
      }
      uint64_t v86 = (void *)v85;
      id v87 = v81;
      id v88 = objc_msgSend(v86, sel_sentMessages);
      if (v88)
      {
        uint64_t v89 = v88;
        type metadata accessor for INMessage();
        unint64_t v90 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v90 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v108)
          {
            swift_bridgeObjectRetain();
            uint64_t v109 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            v232._uint64_t countAndFlagsBits = v109;
            if (!v109)
            {
              long long v230 = v87;
              swift_bridgeObjectRelease();
              uint64_t v93 = MEMORY[0x263F8EE78];
LABEL_35:
              *((void *)&v234 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
              v233._uint64_t countAndFlagsBits = v93;
              outlined init with take of Any(&v233, &v238);
              uint64_t v105 = v241;
              char v106 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v237 = v105;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0xD000000000000018, 0x8000000224F67E80, v106);
              uint64_t v241 = v237;
              uint64_t v107 = v230;

              swift_bridgeObjectRelease();
              goto LABEL_41;
            }
LABEL_25:
            long long v230 = v87;
            *(void *)&long long v238 = MEMORY[0x263F8EE78];
            uint64_t v91 = v232._countAndFlagsBits;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v91 & ~(v91 >> 63), 0);
            if (v91 < 0)
            {
              __break(1u);
LABEL_122:
              __break(1u);
              return;
            }
            uint64_t v92 = 0;
            uint64_t v93 = v238;
            unint64_t v94 = v90 & 0xC000000000000001;
            unint64_t v95 = v90;
            do
            {
              if (v94) {
                id v96 = (id)MEMORY[0x22A627400](v92, v90);
              }
              else {
                id v96 = *(id *)(v90 + 8 * v92 + 32);
              }
              uint64_t v97 = v96;
              id v98 = objc_msgSend(v96, sel_identifier);
              uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v101 = v100;

              *(void *)&long long v238 = v93;
              unint64_t v103 = *(void *)(v93 + 16);
              unint64_t v102 = *(void *)(v93 + 24);
              if (v103 >= v102 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1);
                uint64_t v93 = v238;
              }
              ++v92;
              *(void *)(v93 + 16) = v103 + 1;
              unint64_t v104 = v93 + 16 * v103;
              *(void *)(v104 + 32) = v99;
              *(void *)(v104 + 40) = v101;
              unint64_t v90 = v95;
            }
            while (v232._countAndFlagsBits != v92);
            swift_bridgeObjectRelease();
            goto LABEL_35;
          }
        }
        else
        {
          v232._uint64_t countAndFlagsBits = *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v232._countAndFlagsBits) {
            goto LABEL_25;
          }
        }
        swift_bridgeObjectRelease();
      }
    }
LABEL_41:
    id v110 = objc_msgSend(v226, sel_parametersByName);
    if (v110)
    {
      char v111 = v110;
      uint64_t v112 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v113 = (uint64_t)v224;
      if (*(void *)(v112 + 16)
        && (unint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E65697069636572, 0xEA00000000007374),
            (v115 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v112 + 56) + 32 * v114, (uint64_t)&v233);
      }
      else
      {
        Swift::String v233 = (Swift::String)0;
        long long v234 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v234 + 1))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        if (swift_dynamicCast())
        {
          uint64_t v116 = v238;
          if ((unint64_t)v238 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v117 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v117)
            {
LABEL_50:
              if (v117 >= 1)
              {
                uint64_t v118 = 0;
                unint64_t v214 = v116 & 0xC000000000000001;
                uint64_t v119 = (void *)MEMORY[0x263F8EE78];
                long long v230 = (void *)MEMORY[0x263F8EE78];
                uint64_t v120 = (void *)MEMORY[0x263F8EE78];
                char v121 = (void *)MEMORY[0x263F8EE78];
                uint64_t v213 = v116;
                uint64_t v212 = v117;
                while (1)
                {
                  if (v214) {
                    id v122 = (id)MEMORY[0x22A627400](v118, v116);
                  }
                  else {
                    id v122 = *(id *)(v116 + 8 * v118 + 32);
                  }
                  uint64_t v123 = v122;
                  id v124 = objc_msgSend(v122, sel_personHandle, v212, v213);
                  uint64_t v125 = v124;
                  if (v124)
                  {
                    id v126 = objc_msgSend(v124, sel_value);

                    if (v126)
                    {
                      uint64_t v125 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                      unint64_t v128 = v127;

                      goto LABEL_60;
                    }
                    uint64_t v125 = 0;
                  }
                  unint64_t v128 = 0xE000000000000000;
LABEL_60:
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    char v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v121[2] + 1, 1, v121);
                  }
                  unint64_t v130 = v121[2];
                  unint64_t v129 = v121[3];
                  if (v130 >= v129 >> 1) {
                    char v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v129 > 1), v130 + 1, 1, v121);
                  }
                  v121[2] = v130 + 1;
                  uint64_t v221 = v121;
                  uint64_t v131 = &v121[2 * v130];
                  v131[4] = v125;
                  v131[5] = v128;
                  v232._uint64_t countAndFlagsBits = (uint64_t)v123;
                  id v132 = objc_msgSend(v123, sel_displayName);
                  static String._unconditionallyBridgeFromObjectiveC(_:)();

                  Swift::String v233 = String.lowercased()();
                  uint64_t v133 = v231;
                  specialized RangeReplaceableCollection.removeAll(where:)(&v233);
                  swift_bridgeObjectRelease();
                  Swift::String v134 = v233;
                  char v135 = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v231 = v133;
                  if ((v135 & 1) == 0) {
                    uint64_t v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v120[2] + 1, 1, v120);
                  }
                  unint64_t v137 = v120[2];
                  unint64_t v136 = v120[3];
                  if (v137 >= v136 >> 1) {
                    uint64_t v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v136 > 1), v137 + 1, 1, v120);
                  }
                  v120[2] = v137 + 1;
                  *(Swift::String *)&v120[2 * v137 + 4] = v134;
                  id v138 = objc_msgSend((id)v232._countAndFlagsBits, sel_nameComponents);
                  id v220 = v119;
                  unint64_t v219 = v120;
                  if (v138)
                  {
                    unint64_t v139 = v138;
                    uint64_t v140 = v227;
                    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                    uint64_t v141 = type metadata accessor for PersonNameComponents();
                    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v141 - 8) + 56))(v140, 0, 1, v141);
                  }
                  else
                  {
                    uint64_t v141 = type metadata accessor for PersonNameComponents();
                    uint64_t v140 = v227;
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 56))(v227, 1, 1, v141);
                  }
                  uint64_t v142 = (uint64_t)v140;
                  uint64_t v143 = (uint64_t)v215;
                  outlined init with take of DateInterval?(v142, (uint64_t)v215, &demangling cache variable for type metadata for PersonNameComponents?);
                  type metadata accessor for PersonNameComponents();
                  uint64_t v144 = *(void *)(v141 - 8);
                  id v145 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
                  int v146 = v145(v143, 1, v141);
                  Swift::String v218 = (char *)v118;
                  if (v146)
                  {
                    outlined destroy of Any?(v143, &demangling cache variable for type metadata for PersonNameComponents?);
LABEL_73:
                    swift_bridgeObjectRelease();
                    goto LABEL_75;
                  }
                  PersonNameComponents.givenName.getter();
                  uint64_t v148 = v147;
                  outlined destroy of Any?(v143, &demangling cache variable for type metadata for PersonNameComponents?);
                  if (!v148) {
                    goto LABEL_73;
                  }
LABEL_75:
                  Swift::String v233 = String.lowercased()();
                  uint64_t v149 = v231;
                  specialized RangeReplaceableCollection.removeAll(where:)(&v233);
                  swift_bridgeObjectRelease();
                  Swift::String v150 = v233;
                  if (swift_isUniquelyReferenced_nonNull_native()) {
                    unint64_t v151 = v230;
                  }
                  else {
                    unint64_t v151 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v230[2] + 1, 1, v230);
                  }
                  unint64_t v153 = v151[2];
                  unint64_t v152 = v151[3];
                  if (v153 >= v152 >> 1) {
                    unint64_t v151 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v152 > 1), v153 + 1, 1, v151);
                  }
                  v151[2] = v153 + 1;
                  long long v230 = v151;
                  *(Swift::String *)&v151[2 * v153 + 4] = v150;
                  id v154 = objc_msgSend((id)v232._countAndFlagsBits, sel_nameComponents);
                  if (v154)
                  {
                    id v155 = v154;
                    id v156 = v228;
                    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                    uint64_t v157 = 0;
                  }
                  else
                  {
                    uint64_t v157 = 1;
                    id v156 = v228;
                  }
                  uint64_t v116 = v213;
                  uint64_t v158 = v212;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v144 + 56))(v156, v157, 1, v141);
                  uint64_t v159 = (uint64_t)v156;
                  uint64_t v160 = v229;
                  outlined init with take of DateInterval?(v159, v229, &demangling cache variable for type metadata for PersonNameComponents?);
                  if (v145(v160, 1, v141))
                  {
                    outlined destroy of Any?(v160, &demangling cache variable for type metadata for PersonNameComponents?);
                    uint64_t v119 = v220;
                    uint64_t v120 = v219;
                  }
                  else
                  {
                    PersonNameComponents.familyName.getter();
                    uint64_t v162 = v161;
                    outlined destroy of Any?(v160, &demangling cache variable for type metadata for PersonNameComponents?);
                    uint64_t v119 = v220;
                    uint64_t v120 = v219;
                    if (v162) {
                      goto LABEL_86;
                    }
                  }
                  swift_bridgeObjectRelease();
LABEL_86:
                  Swift::String v233 = String.lowercased()();
                  specialized RangeReplaceableCollection.removeAll(where:)(&v233);
                  uint64_t v231 = v149;
                  swift_bridgeObjectRelease();
                  Swift::String v163 = v233;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v119[2] + 1, 1, v119);
                  }
                  uint64_t v164 = v218;
                  unint64_t v166 = v119[2];
                  unint64_t v165 = v119[3];
                  if (v166 >= v165 >> 1) {
                    uint64_t v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v165 > 1), v166 + 1, 1, v119);
                  }
                  uint64_t v118 = (uint64_t)(v164 + 1);
                  v119[2] = v166 + 1;
                  *(Swift::String *)&v119[2 * v166 + 4] = v163;

                  BOOL v167 = v158 == v118;
                  char v121 = v221;
                  if (v167)
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v113 = (uint64_t)v224;
                    uint64_t v211 = v230;
                    goto LABEL_97;
                  }
                }
              }
              goto LABEL_122;
            }
          }
          else
          {
            uint64_t v117 = *(void *)((v238 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v117) {
              goto LABEL_50;
            }
          }
          swift_bridgeObjectRelease();
        }
LABEL_96:
        uint64_t v119 = (void *)MEMORY[0x263F8EE78];
        uint64_t v211 = (void *)MEMORY[0x263F8EE78];
        uint64_t v120 = (void *)MEMORY[0x263F8EE78];
        char v121 = (void *)MEMORY[0x263F8EE78];
LABEL_97:
        uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        *((void *)&v234 + 1) = v168;
        v233._uint64_t countAndFlagsBits = (uint64_t)v121;
        outlined init with take of Any(&v233, &v238);
        uint64_t v169 = v241;
        char v170 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v237 = v169;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0x73746361746E6F63, 0xED000065756C6156, v170);
        uint64_t v171 = v237;
        swift_bridgeObjectRelease();
        *((void *)&v234 + 1) = v168;
        v233._uint64_t countAndFlagsBits = (uint64_t)v120;
        outlined init with take of Any(&v233, &v238);
        char v172 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v237 = v171;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0xD000000000000013, 0x8000000224F674C0, v172);
        uint64_t v173 = v237;
        swift_bridgeObjectRelease();
        *((void *)&v234 + 1) = v168;
        v233._uint64_t countAndFlagsBits = (uint64_t)v211;
        outlined init with take of Any(&v233, &v238);
        char v174 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v237 = v173;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0xD000000000000011, 0x8000000224F674E0, v174);
        uint64_t v175 = v237;
        swift_bridgeObjectRelease();
        *((void *)&v234 + 1) = v168;
        v233._uint64_t countAndFlagsBits = (uint64_t)v119;
        outlined init with take of Any(&v233, &v238);
        char v176 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v237 = v175;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0xD000000000000010, 0x8000000224F67500, v176);
        uint64_t v177 = v237;
        uint64_t v241 = v237;
        swift_bridgeObjectRelease();
        self;
        if (!swift_dynamicCastObjCClass()) {
          goto LABEL_110;
        }
        id v178 = objc_msgSend(v226, sel_parametersByName);
        if (v178)
        {
          uint64_t v179 = v178;
          uint64_t v180 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v180 + 16))
          {
            unint64_t v181 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000224F67F50);
            uint64_t v113 = (uint64_t)v224;
            if (v182)
            {
              outlined init with copy of Any(*(void *)(v180 + 56) + 32 * v181, (uint64_t)&v238);
            }
            else
            {
              long long v238 = 0u;
              long long v239 = 0u;
            }
          }
          else
          {
            long long v238 = 0u;
            long long v239 = 0u;
            uint64_t v113 = (uint64_t)v224;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v239 + 1))
          {
            if (swift_dynamicCast())
            {
              *((void *)&v234 + 1) = v168;
              v233._uint64_t countAndFlagsBits = v237;
              outlined init with take of Any(&v233, &v238);
              char v183 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v237 = v177;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v238, 0xD000000000000018, 0x8000000224F67EA0, v183);
              uint64_t v241 = v237;
              swift_bridgeObjectRelease();
LABEL_110:
              id v184 = objc_msgSend(v216, sel_absoluteTimestamp);
              uint64_t v185 = v222;
              if (v184)
              {
                uint64_t v186 = v184;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v187 = type metadata accessor for Date();
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v187 - 8) + 56))(v113, 0, 1, v187);
              }
              else
              {
                uint64_t v188 = type metadata accessor for Date();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v188 - 8) + 56))(v113, 1, 1, v188);
              }
              uint64_t v189 = v223;
              id v190 = objc_msgSend(v217, sel_dateInterval);
              if (v190)
              {
                char v191 = v190;
                static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v192 = type metadata accessor for DateInterval();
                (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v192 - 8) + 56))(v185, 0, 1, v192);
              }
              else
              {
                uint64_t v192 = type metadata accessor for DateInterval();
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v192 - 8) + 56))(v185, 1, 1, v192);
              }
              uint64_t v193 = (uint64_t)v185;
              uint64_t v194 = v225;
              outlined init with take of DateInterval?(v193, v225, &demangling cache variable for type metadata for DateInterval?);
              type metadata accessor for DateInterval();
              double v195 = 0.0;
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v192 - 8) + 48))(v194, 1, v192))
              {
                DateInterval.duration.getter();
                uint64_t v194 = v225;
                double v195 = v196;
              }
              outlined destroy of Any?(v194, &demangling cache variable for type metadata for DateInterval?);
              type metadata accessor for Utils();
              static Utils.deltaTBetween(eventStart:siriUISession:duration:)(v113, v189, (uint64_t)&v233, v195);
              outlined destroy of Any?(v113, &demangling cache variable for type metadata for Date?);
              Swift::String v232 = v233;
              long long v197 = v234;
              uint64_t v198 = v235;
              char v199 = v236;
              id v200 = v226;
              id v201 = objc_msgSend(v226, sel_domain);
              uint64_t v202 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v204 = v203;

              id v205 = objc_msgSend(v200, sel_verb);
              uint64_t v206 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v208 = v207;

              uint64_t v209 = v241;
              type metadata accessor for Signal();
              uint64_t v210 = swift_allocObject();
              *(Swift::String *)(v210 + 16) = v232;
              *(_OWORD *)(v210 + 32) = v197;
              *(void *)(v210 + 48) = v198;
              *(unsigned char *)(v210 + 56) = v199;
              *(void *)(v210 + 64) = v202;
              *(void *)(v210 + 72) = v204;
              *(void *)(v210 + 80) = v206;
              *(void *)(v210 + 88) = v208;
              *(unsigned char *)(v210 + 96) = 1;
              *(void *)(v210 + 104) = v209;
              return;
            }
LABEL_109:
            specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000018, 0x8000000224F67EA0, &v238);
            outlined destroy of Any?((uint64_t)&v238, &demangling cache variable for type metadata for Any?);
            goto LABEL_110;
          }
        }
        else
        {
          long long v238 = 0u;
          long long v239 = 0u;
          uint64_t v113 = (uint64_t)v224;
        }
        outlined destroy of Any?((uint64_t)&v238, &demangling cache variable for type metadata for Any?);
        goto LABEL_109;
      }
    }
    else
    {
      Swift::String v233 = (Swift::String)0;
      long long v234 = 0u;
      uint64_t v113 = (uint64_t)v224;
    }
    outlined destroy of Any?((uint64_t)&v233, &demangling cache variable for type metadata for Any?);
    goto LABEL_96;
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v33, (uint64_t)static Logger.engagement);
  unint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl(&dword_224EDB000, v51, v52, "Drop received Messages Intents.", v53, 2u);
    MEMORY[0x22A627DB0](v53, -1, -1);

    uint64_t v54 = &v240;
  }
  else
  {

    uint64_t v54 = &v242;
  }
}

uint64_t MessagesIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v87 = a2;
  unint64_t v7 = type metadata accessor for ReliabilityCategory();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v90 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  id v88 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v68 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v64 = *(void *)(v69 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v69);
  Swift::String v63 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v62 = (char *)&v56 - v16;
  unint64_t v96 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_60;
  }
  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v17)
  {
LABEL_3:
    Swift::String v58 = (void *)a3;
    a3 = 0;
    uint64_t v19 = *v4;
    unint64_t v86 = a1 & 0xC000000000000001;
    uint64_t v72 = a1 & 0xFFFFFFFFFFFFFF8;
    unint64_t v71 = a1 + 32;
    uint64_t v81 = (void *)(v10 + 16);
    uint64_t v80 = v8 + 104;
    uint64_t v79 = v8 + 8;
    uint64_t v85 = *(uint64_t (**)(id, uint64_t))(v19 + 88);
    uint64_t v84 = v19 + 88;
    char v78 = (void *)(v10 + 8);
    uint64_t v67 = v64 + 56;
    int v77 = *MEMORY[0x263F75030];
    id v61 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
    uint64_t v60 = (void (**)(char *, uint64_t, uint64_t))(v64 + 32);
    int v76 = *MEMORY[0x263F75118];
    uint64_t v57 = (void (**)(char *, char *, uint64_t))(v64 + 16);
    uint64_t v56 = v64 + 8;
    unint64_t v65 = MEMORY[0x263F8EE78];
    uint64_t v59 = MEMORY[0x263F8EE58] + 8;
    *(void *)&long long v18 = 136315138;
    long long v70 = v18;
    unint64_t v75 = 0x8000000224F67F90;
    char v74 = v4;
    unint64_t v73 = v7;
    uint64_t v82 = v17;
    unint64_t v83 = a1;
    do
    {
      if (v86)
      {
        id v20 = (id)MEMORY[0x22A627400](a3, a1);
      }
      else
      {
        if (a3 >= *(void *)(v72 + 16)) {
          goto LABEL_59;
        }
        id v20 = *(id *)(v71 + 8 * a3);
      }
      uint64_t v21 = v20;
      BOOL v22 = __OFADD__(a3++, 1);
      if (v22) {
        goto LABEL_58;
      }
      uint64_t v10 = (uint64_t)v4;
      uint64_t v8 = v85(v20, v87);
      if (v8)
      {
        uint64_t v10 = v96;
        if (v96 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          if (v23)
          {
LABEL_14:
            unint64_t v7 = v10 & 0xC000000000000001;
            a1 = 4;
            do
            {
              unint64_t v24 = a1 - 4;
              if (v7)
              {
                uint64_t v25 = MEMORY[0x22A627400](a1 - 4, v10);
                BOOL v22 = __OFADD__(v24, 1);
                uint64_t v4 = (void *)(a1 - 3);
                if (v22) {
                  goto LABEL_57;
                }
              }
              else
              {
                uint64_t v25 = *(void *)(v10 + 8 * a1);
                swift_retain();
                BOOL v22 = __OFADD__(v24, 1);
                uint64_t v4 = (void *)(a1 - 3);
                if (v22)
                {
LABEL_57:
                  __break(1u);
LABEL_58:
                  __break(1u);
LABEL_59:
                  __break(1u);
LABEL_60:
                  swift_bridgeObjectRetain();
                  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
                  if (!v17) {
                    goto LABEL_61;
                  }
                  goto LABEL_3;
                }
              }
              *(void *)&long long v94 = v25;
              if (closure #1 in MessagesIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)((uint64_t *)&v94, v8))
              {
                uint64_t v28 = swift_bridgeObjectRelease_n();
                uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 216))(v28);
                if (*(void *)(v29 + 16))
                {
                  unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379);
                  a1 = v83;
                  uint64_t v4 = v74;
                  unint64_t v7 = v73;
                  if (v31)
                  {
                    outlined init with copy of Any(*(void *)(v29 + 56) + 32 * v30, (uint64_t)&v94);
                  }
                  else
                  {
                    long long v94 = 0u;
                    long long v95 = 0u;
                  }
                }
                else
                {
                  long long v94 = 0u;
                  long long v95 = 0u;
                  a1 = v83;
                  uint64_t v4 = v74;
                  unint64_t v7 = v73;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v95 + 1))
                {
                  uint64_t v41 = swift_dynamicCast();
                  if (v41 && (v93[0] & 1) == 0)
                  {
                    *((void *)&v95 + 1) = MEMORY[0x263F8D4F8];
                    LOBYTE(v94) = 1;
                    uint64_t v66 = (void (*)(char *, void))(*(uint64_t (**)(char *))(*(void *)v25 + 232))(v93);
                    uint64_t v43 = v42;
                    if (*((void *)&v95 + 1))
                    {
                      outlined init with take of Any(&v94, &v92);
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      uint64_t v91 = *v43;
                      *uint64_t v43 = 0x8000000000000000;
                      uint64_t v10 = (uint64_t)&v91;
                      uint64_t v45 = 0x42646574616E6F64;
                      uint64_t v46 = 0x6972695379;
                      goto LABEL_49;
                    }
                    outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for Any?);
                    uint64_t v51 = 0x42646574616E6F64;
                    uint64_t v52 = 0x6972695379;
LABEL_51:
                    uint64_t v10 = (uint64_t)v43;
                    specialized Dictionary._Variant.removeValue(forKey:)(v51, v52 & 0xFFFFFFFFFFFFLL | 0xED00000000000000, &v92);
                    outlined destroy of Any?((uint64_t)&v92, &demangling cache variable for type metadata for Any?);
                    goto LABEL_52;
                  }
                }
                else
                {
                  uint64_t v41 = outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for Any?);
                }
                uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216))(v41);
                if (*(void *)(v47 + 16)
                  && (unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156),
                      (v49 & 1) != 0))
                {
                  outlined init with copy of Any(*(void *)(v47 + 56) + 32 * v48, (uint64_t)&v94);
                }
                else
                {
                  long long v94 = 0u;
                  long long v95 = 0u;
                }
                swift_bridgeObjectRelease();
                uint64_t v66 = (void (*)(char *, void))(*(uint64_t (**)(char *))(*(void *)v25 + 232))(v93);
                uint64_t v43 = v50;
                if (!*((void *)&v95 + 1))
                {
                  outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for Any?);
                  uint64_t v51 = 0x73746361746E6F63;
                  uint64_t v52 = 0x65756C6156;
                  goto LABEL_51;
                }
                outlined init with take of Any(&v94, &v92);
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v91 = *v43;
                *uint64_t v43 = 0x8000000000000000;
                uint64_t v10 = (uint64_t)&v91;
                uint64_t v45 = 0x73746361746E6F63;
                uint64_t v46 = 0x65756C6156;
LABEL_49:
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v92, v45, v46 & 0xFFFFFFFFFFFFLL | 0xED00000000000000, isUniquelyReferenced_nonNull_native);
                *uint64_t v43 = v91;
                swift_bridgeObjectRelease();
LABEL_52:
                v66(v93, 0);

                swift_release();
                swift_release();
                uint64_t v17 = v82;
                goto LABEL_5;
              }
              swift_release();
              ++a1;
            }
            while (v4 != (void *)v23);
          }
        }
        else
        {
          uint64_t v23 = *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v23) {
            goto LABEL_14;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v26 = swift_retain();
        MEMORY[0x22A6270D0](v26);
        if (*(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v4 = v74;
        uint64_t v27 = (uint64_t)v68;
        (*(void (**)(void *))(*v74 + 80))(v21);
        a1 = v83;
        unint64_t v7 = v73;
        uint64_t v10 = v69;
        int v32 = (*v61)(v27, 1, v69);
        if (v32 == 1)
        {
          uint64_t v17 = v82;

          swift_release();
          outlined destroy of Any?(v27, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
        }
        else
        {
          uint64_t v33 = *v60;
          char v34 = v62;
          (*v60)(v62, v27, v10);
          (*v57)(v63, v34, v10);
          unint64_t v35 = v65;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
          }
          unint64_t v37 = *(void *)(v35 + 16);
          unint64_t v36 = *(void *)(v35 + 24);
          if (v37 >= v36 >> 1) {
            unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v35);
          }
          *(void *)(v35 + 16) = v37 + 1;
          unint64_t v38 = v35;
          uint64_t v39 = v64;
          unint64_t v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
          unint64_t v65 = v38;
          uint64_t v10 = v69;
          v33((char *)(v38 + v40 + *(void *)(v64 + 72) * v37), (uint64_t)v63, v69);

          swift_release();
          (*(void (**)(char *, uint64_t))(v39 + 8))(v62, v10);
          uint64_t v17 = v82;
          a1 = v83;
        }
      }
      else
      {
      }
LABEL_5:
      ;
    }
    while (a3 != v17);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v54 = v96;
    a3 = (unint64_t)v58;
    unint64_t v55 = v65;
  }
  else
  {
LABEL_61:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v54 = MEMORY[0x263F8EE78];
    unint64_t v55 = MEMORY[0x263F8EE78];
  }
  *(void *)a3 = v54;
  *(void *)(a3 + 8) = v55;
  return result;
}

uint64_t closure #1 in MessagesIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)a2 + 168))();
  uint64_t v6 = v5;
  if (v4 == (*(uint64_t (**)(void))(*(void *)v3 + 168))() && v6 == v7)
  {
    uint64_t result = swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v9 & 1) == 0) {
      return result;
    }
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 216))(result);
  if (*(void *)(v11 + 16)
    && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F67F30), (v13 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v26);
    swift_bridgeObjectRelease();
    if (*((void *)&v27 + 1))
    {
      type metadata accessor for BMAppIntentInteractionDirection(0);
      int v14 = swift_dynamicCast();
      if (v14) {
        int v15 = LODWORD(v25[0]);
      }
      else {
        int v15 = 0;
      }
      char v16 = v14 ^ 1;
      goto LABEL_17;
    }
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of Any?((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
  int v15 = 0;
  char v16 = 1;
LABEL_17:
  uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v3 + 216))();
  if (*(void *)(v17 + 16)
    && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000224F67F30), (v19 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v26);
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v27 + 1))
  {
    outlined destroy of Any?((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
    if (v16)
    {
LABEL_32:
      uint64_t v23 = (*(void *(**)(long long *__return_ptr))(*(void *)a2 + 120))(&v26);
      double v24 = *(double *)&v26;
      (*(void (**)(double *__return_ptr, void *))(*(void *)v3 + 120))(v25, v23);
      return vabdd_f64(v24, v25[0]) < 2.0;
    }
    return 0;
  }
  type metadata accessor for BMAppIntentInteractionDirection(0);
  int v20 = swift_dynamicCast();
  int v21 = v20;
  if (v16)
  {
    if ((v20 & 1) == 0) {
      goto LABEL_32;
    }
    return 0;
  }
  uint64_t result = 0;
  int v22 = LODWORD(v25[0]);
  if (!v21) {
    int v22 = 0;
  }
  if (v15 != v22) {
    LOBYTE(v21) = 0;
  }
  if (v21) {
    goto LABEL_32;
  }
  return result;
}

uint64_t MessagesIntentSignalFactory.init()()
{
  return v0;
}

uint64_t MessagesIntentSignalFactory.deinit()
{
  return v0;
}

uint64_t MessagesIntentSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

unint64_t type metadata accessor for INMessage()
{
  unint64_t result = lazy cache variable for type metadata for INMessage;
  if (!lazy cache variable for type metadata for INMessage)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INMessage);
  }
  return result;
}

uint64_t type metadata accessor for MessagesIntentSignalFactory()
{
  return self;
}

uint64_t static TaskSuccessCalculator.calculateTaskSuccess(signals:task:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t (**)(void))v2;
  uint64_t v6 = a1;
  *(void *)&long long v60 = MEMORY[0x263F8EE78];
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    unint64_t v2 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_24;
  }
  if (a1 < 0) {
    unint64_t v2 = a1;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_23;
  }
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v8 = 0;
  unint64_t v3 = v6 & 0xC000000000000001;
  do
  {
    if (v3)
    {
      uint64_t v9 = MEMORY[0x22A627400](v8, v6);
    }
    else
    {
      uint64_t v9 = *(void *)(v6 + 8 * v8 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v9 + 144))() == 0x636E75614C707041 && v10 == 0xE900000000000068)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v12)
      {
        swift_release();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    ++v8;
  }
  while (v7 != v8);
  swift_bridgeObjectRelease();
  unint64_t v2 = v60;
  if ((v60 & 0x8000000000000000) != 0) {
    goto LABEL_42;
  }
LABEL_24:
  if ((v2 & 0x4000000000000000) == 0)
  {
    if (!*(void *)(v2 + 16)) {
      goto LABEL_45;
    }
    swift_retain();
    goto LABEL_27;
  }
LABEL_42:
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v6 <= 0) {
    goto LABEL_45;
  }
  swift_retain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_release();
LABEL_45:
    uint64_t v24 = swift_release();
    uint64_t v25 = (uint64_t (**)(uint64_t))(*(void *)a2 + 296);
    long long v26 = *v25;
    uint64_t v27 = (*v25)(v24);
    char v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 200))(v27);
    uint64_t v29 = swift_release();
    uint64_t v30 = *(void *)v26(v29);
    if (v28)
    {
      (*(void (**)(uint64_t))(v30 + 112))(3);
    }
    else
    {
      char v31 = (*(uint64_t (**)(void))(v30 + 240))();
      uint64_t v32 = swift_release();
      if ((v31 & 1) != 0
        || (uint64_t v33 = v26(v32),
            char v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 192))(v33),
            uint64_t v32 = swift_release(),
            (v34 & 1) != 0)
        || (uint64_t v35 = v26(v32),
            char v36 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 184))(v35),
            uint64_t v32 = swift_release(),
            (v36 & 1) != 0))
      {
        unint64_t v37 = *(void (**)(uint64_t))(*(void *)v26(v32) + 112);
        v37(4);
      }
      else
      {
        unint64_t v38 = *(void (**)(uint64_t))(*(void *)v26(v32) + 112);
        v38(1);
      }
    }
    goto LABEL_51;
  }
LABEL_27:
  if ((v2 & 0xC000000000000001) != 0)
  {
LABEL_56:
    uint64_t v7 = MEMORY[0x22A627400](0, v2);
    goto LABEL_30;
  }
  if (!*(void *)(v2 + 16))
  {
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v7 = *(void *)(v2 + 32);
  swift_retain();
LABEL_30:
  swift_release();
  swift_retain();
  uint64_t v6 = specialized _ArrayProtocol.filter(_:)(v2, v7);
  swift_release();
  uint64_t result = swift_release();
  unint64_t v3 = (unint64_t)v6 >> 62;
  if (!((unint64_t)v6 >> 62))
  {
    uint64_t v14 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v14) {
      goto LABEL_59;
    }
    goto LABEL_32;
  }
LABEL_58:
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_59;
  }
LABEL_32:
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v16 = MEMORY[0x22A627400](0, v6);
    uint64_t v15 = v16;
  }
  else
  {
    if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_101;
    }
    uint64_t v15 = *(void *)(v6 + 32);
    uint64_t v16 = swift_retain();
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 144))(v16);
  uint64_t v19 = v18;
  swift_release();
  if (v17 != 0x736C6C6143 || v19 != 0xE500000000000000)
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_39;
    }
LABEL_59:
    if (v3)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v39 != 1)
      {
LABEL_61:
        if (v39 < 2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
        uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 144))(result);
        uint64_t v42 = v40;
        if (v41 == 0x736567617373654DLL && v40 == 0xE800000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v51 = swift_bridgeObjectRelease();
          uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(v51);
          uint64_t v22 = v4[12](v6);
          goto LABEL_40;
        }
        if (v41 == 1936744781 && v42 == 0xE400000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v52 = swift_bridgeObjectRelease();
          uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(v52);
          uint64_t v22 = v4[13](v6);
          goto LABEL_40;
        }
        if (v41 == 0x6D72616C41 && v42 == 0xE500000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v53 = swift_bridgeObjectRelease();
          uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(v53);
          uint64_t v22 = v4[14](v6);
          goto LABEL_40;
        }
        if (v41 == 0x636973754DLL && v42 == 0xE500000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v54 = swift_bridgeObjectRelease();
          uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(v54);
          uint64_t v22 = v4[15](v6);
          goto LABEL_40;
        }
        if (v41 == 0x6E65746E49707041 && v42 == 0xE900000000000074)
        {
          uint64_t v55 = swift_bridgeObjectRelease();
LABEL_102:
          uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(v55);
          uint64_t v22 = v4[16](v6);
          goto LABEL_40;
        }
LABEL_101:
        char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v55 = swift_bridgeObjectRelease();
        if ((v56 & 1) == 0)
        {
          uint64_t v57 = swift_bridgeObjectRelease();
          uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(v57);
          (*(void (**)(uint64_t))(*(void *)v58 + 112))(2);
          goto LABEL_41;
        }
        goto LABEL_102;
      }
    }
    else
    {
      uint64_t v39 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v39 != 1) {
        goto LABEL_61;
      }
    }
    if (v14)
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        uint64_t v43 = MEMORY[0x22A627400](0, v6);
      }
      else
      {
        if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        uint64_t v43 = *(void *)(v6 + 32);
        swift_retain();
      }
      uint64_t v44 = swift_bridgeObjectRelease();
      uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 216))(v44);
      swift_release();
      if (*(void *)(v45 + 16)
        && (unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
            (v47 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v45 + 56) + 32 * v46, (uint64_t)&v60);
        swift_bridgeObjectRelease();
        if (*((void *)&v61 + 1))
        {
          uint64_t v48 = swift_dynamicCast();
          if ((v48 & 1) != 0 && (v59 & 1) == 0)
          {
            char v49 = *(void (**)(uint64_t))(*(void *)(*(uint64_t (**)(void))(*(void *)a2 + 296))() + 112);
            v49(4);
LABEL_81:
            swift_release();
            return swift_release();
          }
LABEL_80:
          unint64_t v50 = *(void (**)(uint64_t))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(v48)
                                               + 112);
          v50(3);
          goto LABEL_81;
        }
      }
      else
      {
        long long v60 = 0u;
        long long v61 = 0u;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      long long v60 = 0u;
      long long v61 = 0u;
    }
    uint64_t v48 = outlined destroy of Any?((uint64_t)&v60);
    goto LABEL_80;
  }
  uint64_t result = swift_bridgeObjectRelease();
LABEL_39:
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(result);
  uint64_t v22 = v4[11](v6);
LABEL_40:
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v21 + 112))(v23);
LABEL_41:
  swift_release();
LABEL_51:
  return swift_release();
}

uint64_t static TaskSuccessCalculator.calculateCallsTaskSuccess(callSignals:)(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    return 4;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_34;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x22A627400](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    swift_retain();
  }
  uint64_t v5 = swift_bridgeObjectRelease();
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)v4 + 216);
  uint64_t v7 = ((uint64_t (*)(uint64_t))v6)(v5);
  if (!*(void *)(v7 + 16)
    || (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v9 & 1) == 0))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v17);
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1))
  {
LABEL_15:
    swift_release();
    outlined destroy of Any?((uint64_t)&v17);
    return 4;
  }
  if ((swift_dynamicCast() & 1) != 0 && LOBYTE(v16) == 1)
  {
    uint64_t v10 = v6();
    if (*(void *)(v10 + 16)
      && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x617275446C6C6163, 0xEC0000006E6F6974),
          (v12 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v17);
    }
    else
    {
      long long v17 = 0u;
      long long v18 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v18 + 1))
    {
      if ((swift_dynamicCast() & 1) == 0 || v16 != 0.0)
      {
        swift_release();
        return 3;
      }
      uint64_t v13 = v6();
      if (*(void *)(v13 + 16)
        && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000224F67520),
            (v15 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v13 + 56) + 32 * v14, (uint64_t)&v17);
      }
      else
      {
        long long v17 = 0u;
        long long v18 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_release();
      if (*((void *)&v18 + 1))
      {
        if ((swift_dynamicCast() & 1) == 0 || v16 < 0.0 || v16 >= 2.0) {
          return 3;
        }
        return 4;
      }
    }
    else
    {
      swift_release();
    }
    outlined destroy of Any?((uint64_t)&v17);
    return 3;
  }
  swift_release();
  return 4;
}

uint64_t static TaskSuccessCalculator.calculateMessagesTaskSuccess(messageSignals:)(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_67:
    swift_bridgeObjectRelease();
    return 4;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_67;
  }
LABEL_3:
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = MEMORY[0x22A627400](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_73;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    swift_retain();
  }
  uint64_t v6 = swift_bridgeObjectRelease();
  int64_t v1 = *(uint64_t (**)(void))(*(void *)v5 + 216);
  uint64_t v7 = ((uint64_t (*)(uint64_t))v1)(v6);
  if (!*(void *)(v7 + 16)
    || (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v9 & 1) == 0))
  {
    long long v33 = 0u;
    long long v34 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v33);
  swift_bridgeObjectRelease();
  if (!*((void *)&v34 + 1))
  {
LABEL_14:
    swift_release();
    outlined destroy of Any?((uint64_t)&v33);
    return 4;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0 || v32 != 1) {
    goto LABEL_42;
  }
  if (v4)
  {
    uint64_t v11 = MEMORY[0x22A627400](1, a1);
LABEL_17:
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v11 + 216))();
    swift_release();
    if (*(void *)(v12 + 16)
      && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
          (v14 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v33);
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v34 + 1))
    {
      swift_release();
      outlined destroy of Any?((uint64_t)&v33);
      return 3;
    }
    if (swift_dynamicCast() & 1) == 0 || (v32) {
      goto LABEL_76;
    }
    uint64_t v15 = v1();
    if (*(void *)(v15 + 16)
      && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000224F67E80),
          (v17 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v15 + 56) + 32 * v16, (uint64_t)&v33);
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v34 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t v18 = swift_dynamicCast();
      if ((v18 & 1) == 0) {
        goto LABEL_45;
      }
      if (v4)
      {
        uint64_t v19 = MEMORY[0x22A627400](1, a1);
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 40);
        swift_retain();
      }
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v19 + 216))();
      swift_release();
      if (*(void *)(v20 + 16)
        && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000224F67EA0),
            (v22 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v21, (uint64_t)&v33);
      }
      else
      {
        long long v33 = 0u;
        long long v34 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v34 + 1))
      {
        if ((swift_dynamicCast() & 1) == 0)
        {
          uint64_t v18 = swift_bridgeObjectRelease();
          goto LABEL_45;
        }
        if (v32[2])
        {
          char v23 = specialized static Array<A>.== infix(_:_:)(v32, v32);
          swift_bridgeObjectRelease();
          uint64_t v18 = swift_bridgeObjectRelease();
          if (v23)
          {
LABEL_42:
            swift_release();
            return 4;
          }
          goto LABEL_45;
        }
LABEL_73:
        swift_bridgeObjectRelease();
        uint64_t v18 = swift_bridgeObjectRelease();
LABEL_45:
        uint64_t v24 = ((uint64_t (*)(uint64_t))v1)(v18);
        if (*(void *)(v24 + 16)
          && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156),
              (v26 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v24 + 56) + 32 * v25, (uint64_t)&v33);
        }
        else
        {
          long long v33 = 0u;
          long long v34 = 0u;
        }
        swift_bridgeObjectRelease();
        if (!*((void *)&v34 + 1)) {
          goto LABEL_64;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (swift_dynamicCast())
        {
          if (v4)
          {
            uint64_t v27 = MEMORY[0x22A627400](1, a1);
          }
          else
          {
            uint64_t v27 = *(void *)(a1 + 40);
            swift_retain();
          }
          uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v27 + 216))();
          swift_release();
          if (*(void *)(v28 + 16)
            && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156),
                (v30 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v28 + 56) + 32 * v29, (uint64_t)&v33);
          }
          else
          {
            long long v33 = 0u;
            long long v34 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v34 + 1))
          {
            if (swift_dynamicCast())
            {
              if (v32[2])
              {
                char v31 = specialized static Array<A>.== infix(_:_:)(v32, v32);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                if (v31) {
                  return 4;
                }
                return 3;
              }
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            goto LABEL_76;
          }
          swift_bridgeObjectRelease();
LABEL_64:
          swift_release();
          outlined destroy of Any?((uint64_t)&v33);
          return 3;
        }
LABEL_76:
        swift_release();
        return 3;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = outlined destroy of Any?((uint64_t)&v33);
    goto LABEL_45;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    swift_retain();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    char v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t static TaskSuccessCalculator.calculateMapsTaskSuccess(geoSignals:)(unint64_t a1)
{
  unint64_t v3 = a1;
  *(void *)&long long v49 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v3 = MEMORY[0x263F8EE78];
    uint64_t v2 = MEMORY[0x263F8EE78];
    unint64_t v1 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_64;
    }
    goto LABEL_47;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_46;
  }
LABEL_3:
  if (v4 < 1) {
    goto LABEL_94;
  }
  uint64_t v5 = 0;
  unint64_t v6 = v3 & 0xC000000000000001;
  do
  {
    if (v6)
    {
      uint64_t v7 = MEMORY[0x22A627400](v5, v3);
    }
    else
    {
      uint64_t v7 = *(void *)(v3 + 8 * v5 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v7 + 168))() == 2003789907 && v8 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_7;
    }
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_6;
    }
    swift_release();
LABEL_7:
    ++v5;
  }
  while (v4 != v5);
  swift_bridgeObjectRelease();
  unint64_t v1 = v49;
  *(void *)&long long v49 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v4; ++i)
  {
    if (v6)
    {
      uint64_t v12 = MEMORY[0x22A627400](i, v3);
    }
    else
    {
      uint64_t v12 = *(void *)(v3 + 8 * i + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v12 + 168))() == 0x7261436563616C50 && v13 == 0xEC00000070615464)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      continue;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_19;
    }
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v44 = v49;
  *(void *)&long long v49 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  for (uint64_t j = 0; j != v4; ++j)
  {
    if (v6)
    {
      uint64_t v17 = MEMORY[0x22A627400](j, v3);
    }
    else
    {
      uint64_t v17 = *(void *)(v3 + 8 * j + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v17 + 168))() == 0x697461676976614ELL && v18 == 0xEA00000000006E6FLL)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      continue;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_32;
    }
    swift_release();
  }
  swift_bridgeObjectRelease();
  unint64_t v3 = v49;
  uint64_t v2 = v44;
  if ((v1 & 0x8000000000000000) != 0)
  {
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v27) {
      goto LABEL_65;
    }
    goto LABEL_49;
  }
LABEL_47:
  if ((v1 & 0x4000000000000000) != 0) {
    goto LABEL_64;
  }
  if (!*(void *)(v1 + 16))
  {
LABEL_65:
    swift_release();
    swift_release();
    uint64_t v25 = v3 & 0x4000000000000000;
    goto LABEL_66;
  }
LABEL_49:
  if ((v1 & 0xC000000000000001) != 0) {
    goto LABEL_95;
  }
  if (*(void *)(v1 + 16))
  {
    uint64_t v21 = *(void *)(v1 + 32);
    swift_retain();
    goto LABEL_52;
  }
  __break(1u);
  while (2)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v28) {
      goto LABEL_98;
    }
LABEL_69:
    unint64_t v1 = 0;
    unint64_t v29 = v3 & 0xC000000000000001;
    uint64_t v2 = MEMORY[0x263F8EE58] + 8;
    uint64_t v30 = MEMORY[0x263F8D310];
    uint64_t v31 = 0x697461676976616ELL;
    unint64_t v45 = v3;
    while (2)
    {
      if (v29)
      {
        uint64_t v32 = MEMORY[0x22A627400](v1, v3);
        unint64_t v33 = v1 + 1;
        if (__OFADD__(v1, 1))
        {
LABEL_91:
          __break(1u);
LABEL_92:
          uint64_t v43 = v48;
          goto LABEL_99;
        }
LABEL_76:
        uint64_t v34 = (*(uint64_t (**)(void))(*(void *)v32 + 216))();
        if (*(void *)(v34 + 16)
          && (unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v31, 0xEE00657079546E6FLL), (v36 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v34 + 56) + 32 * v35, (uint64_t)&v49);
        }
        else
        {
          long long v49 = 0u;
          long long v50 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v50 + 1))
        {
          if (swift_dynamicCast())
          {
            unint64_t v37 = v29;
            uint64_t v38 = v28;
            uint64_t v39 = v31;
            uint64_t v40 = v2;
            uint64_t v41 = v30;
            if (v46 == 0x65756E69746E6F43 && v47 == 0xE800000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v42 & 1) == 0)
              {
                swift_release();
                goto LABEL_88;
              }
            }
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
LABEL_88:
            uint64_t v30 = v41;
            uint64_t v2 = v40;
            uint64_t v31 = v39;
            uint64_t v28 = v38;
            unint64_t v29 = v37;
            unint64_t v3 = v45;
LABEL_72:
            ++v1;
            if (v33 == v28) {
              goto LABEL_92;
            }
            continue;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v49);
        }
        swift_release();
        goto LABEL_72;
      }
      break;
    }
    if (v1 < *(void *)(v3 + 16))
    {
      uint64_t v32 = *(void *)(v3 + 8 * v1 + 32);
      swift_retain();
      unint64_t v33 = v1 + 1;
      if (__OFADD__(v1, 1)) {
        goto LABEL_91;
      }
      goto LABEL_76;
    }
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    uint64_t v21 = MEMORY[0x22A627400](0, v1);
LABEL_52:
    uint64_t v22 = swift_release();
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v21 + 120))(&v49, v22);
    if (*((double *)&v49 + 1) > 3.0)
    {
      swift_release();
      swift_release();
      swift_release();
      return 4;
    }
    if (v2 < 0 || (v2 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
    }
    else
    {
      uint64_t v24 = *(void *)(v2 + 16);
    }
    swift_release();
    if (v24 >= 1)
    {
      swift_release();
      goto LABEL_101;
    }
    uint64_t v25 = v3 & 0x4000000000000000;
    if ((v3 & 0x8000000000000000) != 0 || v25)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
    }
    else
    {
      uint64_t v26 = *(void *)(v3 + 16);
    }
    swift_release();
    if (v26 >= 1)
    {
LABEL_101:
      swift_release();
      return 3;
    }
LABEL_66:
    uint64_t v48 = MEMORY[0x263F8EE78];
    if ((v3 & 0x8000000000000000) != 0 || v25) {
      continue;
    }
    break;
  }
  uint64_t v28 = *(void *)(v3 + 16);
  if (v28) {
    goto LABEL_69;
  }
LABEL_98:
  uint64_t v43 = MEMORY[0x263F8EE78];
LABEL_99:
  swift_release();
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x4000000000000000) == 0) {
    goto LABEL_101;
  }
  swift_bridgeObjectRetain();
  _CocoaArrayWrapper.endIndex.getter();
  swift_release_n();
  return 3;
}

uint64_t static TaskSuccessCalculator.calculateAlarmsTaskSuccess(alarmSignals:)(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_49:
    swift_bridgeObjectRelease();
    return 3;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_49;
  }
LABEL_3:
  unint64_t v3 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x22A627400](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    swift_retain();
  }
  uint64_t v5 = swift_bridgeObjectRelease();
  unint64_t v6 = *(uint64_t (**)(void))(*(void *)v4 + 216);
  uint64_t v7 = ((uint64_t (*)(uint64_t))v6)(v5);
  if (!*(void *)(v7 + 16)
    || (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v9 & 1) == 0))
  {
    long long v26 = 0u;
    long long v27 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v26);
  swift_bridgeObjectRelease();
  if (!*((void *)&v27 + 1))
  {
LABEL_14:
    swift_release();
    outlined destroy of Any?((uint64_t)&v26);
    return 3;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0 || v24[0] != 1) {
    goto LABEL_56;
  }
  if (v3)
  {
    uint64_t v11 = MEMORY[0x22A627400](1, a1);
LABEL_17:
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v11 + 216))();
    swift_release();
    if (*(void *)(v12 + 16)
      && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
          (v14 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v26);
    }
    else
    {
      long long v26 = 0u;
      long long v27 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v27 + 1))
    {
      if (swift_dynamicCast() & 1) == 0 || (v24[0]) {
        goto LABEL_56;
      }
      if (v3)
      {
        uint64_t v15 = MEMORY[0x22A627400](1, a1);
      }
      else
      {
        uint64_t v15 = *(void *)(a1 + 40);
        swift_retain();
      }
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v15 + 216))();
      if (*(void *)(v16 + 16)
        && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL),
            (v18 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v16 + 56) + 32 * v17, (uint64_t)&v26);
      }
      else
      {
        long long v26 = 0u;
        long long v27 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v27 + 1))
      {
        if ((swift_dynamicCast() & 1) == 0)
        {
LABEL_55:
          swift_release();
LABEL_56:
          swift_release();
          return 3;
        }
        uint64_t v19 = v6();
        if (*(void *)(v19 + 16)
          && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL),
              (v21 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v19 + 56) + 32 * v20, (uint64_t)&v26);
        }
        else
        {
          long long v26 = 0u;
          long long v27 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v27 + 1))
        {
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_54;
          }
          uint64_t v22 = HIBYTE(v25) & 0xF;
          if ((v25 & 0x2000000000000000) == 0) {
            uint64_t v22 = *(void *)v24 & 0xFFFFFFFFFFFFLL;
          }
          if (v22)
          {
            uint64_t v23 = HIBYTE(v25) & 0xF;
            if ((v25 & 0x2000000000000000) == 0) {
              uint64_t v23 = *(void *)v24 & 0xFFFFFFFFFFFFLL;
            }
            if (v23)
            {
              swift_bridgeObjectRelease_n();
              swift_release();
              swift_release();
              return 4;
            }
          }
LABEL_53:
          swift_bridgeObjectRelease();
LABEL_54:
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    goto LABEL_14;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    swift_retain();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t static TaskSuccessCalculator.calculateMusicTaskSuccess(musicSignals:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return 3;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_19;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x22A627400](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    swift_retain();
  }
  uint64_t v5 = swift_bridgeObjectRelease();
  *(void *)&long long v12 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 168))(v5);
  *((void *)&v12 + 1) = v6;
  uint64_t v14 = 2036427856;
  unint64_t v15 = 0xE400000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  char v7 = StringProtocol.contains<A>(_:)();
  uint64_t v8 = swift_bridgeObjectRelease();
  if (v7)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 216))(v8);
    if (*(void *)(v9 + 16)
      && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974),
          (v11 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (*((void *)&v13 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0 && *(double *)&v14 >= 10.0) {
        return 3;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v12);
    }
    return 4;
  }
  swift_release();
  return 3;
}

uint64_t static TaskSuccessCalculator.calculateTranscriptTaskSuccess(appIntentSignals:)(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    return 3;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_28;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x22A627400](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    swift_retain();
  }
  uint64_t v5 = swift_bridgeObjectRelease();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 216))(v5);
  if (*(void *)(v6 + 16)
    && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    if (*((void *)&v15 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if ((result & 1) == 0 || v13 != 1)
      {
        swift_release();
        return 3;
      }
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v9 = MEMORY[0x22A627400](1, a1);
LABEL_19:
        uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v9 + 216))();
        swift_release();
        if (*(void *)(v10 + 16)
          && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
              (v12 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v14);
        }
        else
        {
          long long v14 = 0u;
          long long v15 = 0u;
        }
        swift_bridgeObjectRelease();
        swift_release();
        if (*((void *)&v15 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0 && (v13 & 1) == 0) {
            return 4;
          }
          return 3;
        }
        goto LABEL_15;
      }
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
      {
        uint64_t v9 = *(void *)(a1 + 40);
        swift_retain();
        goto LABEL_19;
      }
LABEL_33:
      __break(1u);
      return result;
    }
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    swift_bridgeObjectRelease();
  }
  swift_release();
LABEL_15:
  outlined destroy of Any?((uint64_t)&v14);
  return 3;
}

uint64_t TaskSuccessCalculator.deinit()
{
  return v0;
}

uint64_t TaskSuccessCalculator.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t TaskSuccessCalculator.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t TaskSuccessCalculator.init()()
{
  return v0;
}

uint64_t type metadata accessor for TaskSuccessCalculator()
{
  return self;
}

uint64_t method lookup function for TaskSuccessCalculator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TaskSuccessCalculator);
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateTaskSuccess(signals:task:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateCallsTaskSuccess(callSignals:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateMessagesTaskSuccess(messageSignals:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateMapsTaskSuccess(geoSignals:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateAlarmsTaskSuccess(alarmSignals:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateMusicTaskSuccess(musicSignals:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateTranscriptTaskSuccess(appIntentSignals:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of TaskSuccessCalculator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t ExtendedAlarmSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, sel_eventType) == 6)
  {
    uint64_t v36 = MEMORY[0x263F8EE80];
    type metadata accessor for Utils();
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
    static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v6, a2, (uint64_t)&v31, 0.0);
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for Date?);
    long long v8 = v31;
    uint64_t v9 = v32;
    uint64_t v10 = v33;
    uint64_t v11 = v34;
    char v12 = v35;
    uint64_t v33 = MEMORY[0x263F8D4F8];
    LOBYTE(v31) = *((double *)&v31 + 1) < 0.0;
    outlined init with take of Any(&v31, v30);
    uint64_t v13 = v36;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = v13;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, 0x42646574616E6F64, 0xED00006972695379, isUniquelyReferenced_nonNull_native);
    uint64_t v15 = v29;
    uint64_t v36 = v29;
    swift_bridgeObjectRelease();
    id v16 = objc_msgSend(a1, sel_alarmID);
    if (v16)
    {
      unint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      uint64_t v33 = MEMORY[0x263F8D310];
      *(void *)&long long v31 = v18;
      *((void *)&v31 + 1) = v20;
      outlined init with take of Any(&v31, v30);
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v29 = v15;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, 0x6564496D72616C61, 0xEF7265696669746ELL, v21);
      uint64_t v22 = v29;
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Dictionary._Variant.removeValue(forKey:)(0x6564496D72616C61, 0xEF7265696669746ELL, &v31);
      outlined destroy of Any?((uint64_t)&v31, &demangling cache variable for type metadata for Any?);
      uint64_t v22 = v36;
    }
    type metadata accessor for Signal();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = v8;
    *(void *)(result + 32) = v9;
    *(void *)(result + 40) = v10;
    *(void *)(result + 48) = v11;
    *(unsigned char *)(result + 56) = v12;
    *(void *)(result + 64) = 0x6D72616C41;
    *(void *)(result + 72) = 0xE500000000000000;
    *(void *)(result + 80) = 0xD000000000000011;
    *(void *)(result + 88) = 0x8000000224F68030;
    *(unsigned char *)(result + 96) = 1;
    *(void *)(result + 104) = v22;
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.engagement);
    id v24 = a1;
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      long long v27 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)long long v27 = 67109120;
      LODWORD(v31) = objc_msgSend(v24, sel_eventType);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_224EDB000, v25, v26, "This eventType: %d is not for deletion", v27, 8u);
      MEMORY[0x22A627DB0](v27, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  return result;
}

uint64_t ExtendedAlarmSignalFactory.convertBmEventToEngagementFeatureSet(bmEvent:)@<X0>(void *a1@<X0>, char *a2@<X8>, double a3@<D0>)
{
  char v59 = a2;
  uint64_t v5 = type metadata accessor for ProtoAlarmTaskFeatureSet();
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v53 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v56 = (char *)&v47 - v8;
  uint64_t v48 = type metadata accessor for ProtoTaskFeatureSet();
  uint64_t v54 = *(void *)(v48 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v48);
  uint64_t v52 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v12 = (char *)&v47 - v11;
  uint64_t v13 = type metadata accessor for ProtoTaskEngagementType();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v14 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  MEMORY[0x270FA5388](v14);
  id v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for ReliabilityCategory();
  uint64_t v17 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, sel_eventType) != 6)
  {
    char v12 = v59;
    if (one-time initialization token for engagement == -1)
    {
LABEL_13:
      uint64_t v30 = __swift_project_value_buffer(v20, (uint64_t)static Logger.engagement);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v30, v20);
      unint64_t v61 = 0;
      unint64_t v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t v61 = 0xD000000000000010;
      unint64_t v62 = 0x8000000224F68090;
      unsigned int v60 = objc_msgSend(a1, sel_eventType);
      v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 0xD000000000000014;
      v32._int64_t object = (void *)0x8000000224F680B0;
      String.append(_:)(v32);
      uint64_t v33 = v61;
      unint64_t v34 = v62;
      uint64_t v35 = *MEMORY[0x263F75128];
      uint64_t v36 = type metadata accessor for AlarmEventDataIssues();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104))(v19, v35, v36);
      uint64_t v37 = v55;
      (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x263F750D8], v55);
      Logger.error(_:_:)(v33, v34, (uint64_t)v19);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v37);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
      uint64_t v38 = 1;
      uint64_t v39 = v12;
      uint64_t v41 = v57;
      uint64_t v40 = v58;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v39, v38, 1, v40);
    }
LABEL_17:
    swift_once();
    goto LABEL_13;
  }
  uint64_t result = ProtoTaskEngagementFeatureSet.init()();
  double v25 = round(a3 * 1000.0);
  double v26 = 0.0;
  if (v25 < 0.0)
  {
LABEL_10:
    ProtoTaskEngagementFeatureSet.startTimestampMs.setter();
    id v27 = objc_msgSend(a1, sel_eventType);
    (*(void (**)(id))(*(void *)v51 + 104))(v27);
    ProtoTaskEngagementFeatureSet.engagementType.setter();
    ProtoTaskFeatureSet.init()();
    ProtoAlarmTaskFeatureSet.init()();
    id v28 = objc_msgSend(a1, sel_alarmID);
    if (v28)
    {
      uint64_t v29 = v28;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v41 = v57;
    uint64_t v40 = v58;
    uint64_t v43 = v49;
    uint64_t v42 = v50;
    uint64_t v44 = v48;
    unint64_t v45 = v56;
    ProtoAlarmTaskFeatureSet.alarmIdentifier.setter();
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v53, v45, v42);
    ProtoTaskFeatureSet.alarmFeatureSet.setter();
    uint64_t v46 = v54;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v52, v12, v44);
    ProtoTaskEngagementFeatureSet.featureSet.setter();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v44);
    uint64_t v39 = v59;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v59, v16, v40);
    uint64_t v38 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v39, v38, 1, v40);
  }
  if ((*(void *)&v25 & 0xFFFFFFFFFFFFFLL) == 0) {
    double v26 = v25;
  }
  if ((~*(void *)&v25 & 0x7FF0000000000000) != 0) {
    double v26 = v25;
  }
  if ((~*(void *)&v26 & 0x7FF0000000000000) != 0)
  {
    if (v26 > -1.0)
    {
      if (v26 < 1.84467441e19) {
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_19;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t ExtendedAlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v42 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v39 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v11);
  uint64_t v38 = (char *)&v30 - v15;
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v43 = MEMORY[0x263F8EE78];
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    Swift::String v31 = a3;
    uint64_t v18 = *v4;
    uint64_t v37 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v19 = *(uint64_t (**)(double))(v18 + 80);
    uint64_t v40 = v18 + 80;
    uint64_t v41 = v19;
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v33 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v34 = v14;
    uint64_t v32 = v14 + 8;
    swift_bridgeObjectRetain();
    uint64_t v30 = a1;
    uint64_t v20 = (double *)(a1 + 40);
    unint64_t v21 = MEMORY[0x263F8EE78];
    uint64_t v35 = v4;
    do
    {
      double v22 = *v20;
      id v23 = *((id *)v20 - 1);
      if (v41(v22))
      {
        uint64_t v24 = swift_retain();
        MEMORY[0x22A6270D0](v24);
        if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        ExtendedAlarmSignalFactory.convertBmEventToEngagementFeatureSet(bmEvent:)(v23, v9, v22);
        if ((*v37)(v9, 1, v10) == 1)
        {

          swift_release();
          outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
        }
        else
        {
          double v25 = *v36;
          double v26 = v38;
          (*v36)(v38, v9, v10);
          (*v33)(v39, v26, v10);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, v21);
          }
          unint64_t v28 = *(void *)(v21 + 16);
          unint64_t v27 = *(void *)(v21 + 24);
          if (v28 >= v27 >> 1) {
            unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v21);
          }
          *(void *)(v21 + 16) = v28 + 1;
          uint64_t v29 = v34;
          v25((char *)(v21+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v34 + 72) * v28), v39, v10);
          swift_release();

          (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v10);
        }
      }
      else
      {
      }
      v20 += 2;
      --v17;
    }
    while (v17);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v16 = v43;
    a3 = v31;
  }
  else
  {
    unint64_t v21 = MEMORY[0x263F8EE78];
  }
  *a3 = v16;
  a3[1] = v21;
  return result;
}

uint64_t ExtendedAlarmSignalFactory.getTaskEngagementType(eventType:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
    case 3:
      unint64_t v3 = (unsigned int *)MEMORY[0x263F74F68];
      break;
    case 2:
    case 5:
      unint64_t v3 = (unsigned int *)MEMORY[0x263F74F70];
      break;
    case 4:
      unint64_t v3 = (unsigned int *)MEMORY[0x263F74F48];
      break;
    case 6:
      unint64_t v3 = (unsigned int *)MEMORY[0x263F74F50];
      break;
    default:
      unint64_t v3 = (unsigned int *)MEMORY[0x263F74F98];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ProtoTaskEngagementType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t ExtendedAlarmSignalFactory.deinit()
{
  return v0;
}

uint64_t ExtendedAlarmSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t ExtendedAlarmSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ExtendedAlarmSignalFactory.init()()
{
  return v0;
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance ExtendedAlarmSignalFactory(uint64_t a1)
{
  return (*(uint64_t (**)(void, double))(**(void **)v1 + 80))(*(void *)a1, *(double *)(a1 + 8));
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance ExtendedAlarmSignalFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t type metadata accessor for ExtendedAlarmSignalFactory()
{
  return self;
}

uint64_t method lookup function for ExtendedAlarmSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ExtendedAlarmSignalFactory);
}

uint64_t dispatch thunk of ExtendedAlarmSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of ExtendedAlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ExtendedAlarmSignalFactory.getTaskEngagementType(eventType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ExtendedAlarmSignalFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t PSEPhoneticEmbedder.phoneticEmbedder.getter()
{
  return swift_retain();
}

uint64_t PSEPhoneticEmbedder.__allocating_init()()
{
  uint64_t v0 = type metadata accessor for PhoneticEmbedder.LoadingOption();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  unint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PhoneticEmbedder.InputFormat();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v9 = swift_allocObject();
  Locale.init(identifier:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F17B38], v4);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F17B40], v0);
  type metadata accessor for PhoneticEmbedder();
  swift_allocObject();
  *(void *)(v9 + 16) = PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)();
  return v9;
}

uint64_t PSEPhoneticEmbedder.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PhoneticEmbedder.LoadingOption();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PhoneticEmbedder.InputFormat();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v10 - 8);
  Locale.init(identifier:)();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F17B38], v6);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F17B40], v2);
  type metadata accessor for PhoneticEmbedder();
  swift_allocObject();
  *(void *)(v1 + 16) = PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)();
  return v1;
}

Swift::Double_optional __swiftcall PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(Swift::String siriContact, Swift::String userContact)
{
  int64_t object = userContact._object;
  uint64_t countAndFlagsBits = userContact._countAndFlagsBits;
  uint64_t v5 = siriContact._object;
  uint64_t v6 = siriContact._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for ReliabilityCategory();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = type metadata accessor for Logger();
  MEMORY[0x270FA5388](v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_224F65000;
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v5;
  *(void *)(v9 + 48) = countAndFlagsBits;
  *(void *)(v9 + 56) = object;
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)v10(v9);
  swift_bridgeObjectRelease();
  if (v11[2] < 2uLL)
  {
    swift_bridgeObjectRelease();
    Swift::Bool v16 = 0;
  }
  else
  {
    uint64_t v12 = v11[4];
    uint64_t v13 = v11[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v14 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, uint64_t))(*(void *)v2 + 112))(v12, v13));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::Bool v16 = v14;
  }
  result.value = v15;
  result.is_nil = v16;
  return result;
}

uint64_t PSEPhoneticEmbedder.embedding(queries:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
  uint64_t v3 = swift_allocObject();
  *(void *)(v2 + 16) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_224F64E30;
  *(void *)(v3 + 32) = MEMORY[0x263F8EE78];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v2;
  swift_retain();
  swift_retain();
  PhoneticEmbedder.embeddings(of:completion:)();
  if (v0)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_beginAccess();
    uint64_t v6 = *(void **)(v4 + 16);
    if (v6)
    {
      id v7 = v6;
      swift_willThrow();
    }
    else
    {
      swift_beginAccess();
      uint64_t v1 = *(void *)(v2 + 16);
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_release();
  }
  return v1;
}

uint64_t sub_224F20ABC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_224F20AF4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void closure #1 in PSEPhoneticEmbedder.embedding(queries:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v8 = *(void **)(a3 + 16);
  *(void *)(a3 + 16) = a2;
  id v9 = a2;

  if (a1)
  {
    swift_beginAccess();
    *(void *)(a4 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_224F20BCC()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in PSEPhoneticEmbedder.embedding(queries:)(uint64_t a1, void *a2)
{
  closure #1 in PSEPhoneticEmbedder.embedding(queries:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

Swift::Double __swiftcall PSEPhoneticEmbedder.distanceBetween(sourceVector:targetVector:)(Swift::OpaquePointer sourceVector, Swift::OpaquePointer targetVector)
{
  unint64_t v2 = *((void *)sourceVector._rawValue + 2);
  if (v2 == *((void *)targetVector._rawValue + 2))
  {
    if (v2)
    {
      if (v2 >= 4)
      {
        uint64_t v3 = v2 & 0x7FFFFFFFFFFFFFFCLL;
        uint64_t v10 = (float64x2_t *)((char *)sourceVector._rawValue + 48);
        uint64_t v11 = (float64x2_t *)((char *)targetVector._rawValue + 48);
        double v4 = 0.0;
        uint64_t v12 = v2 & 0x7FFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v13 = vsubq_f64(v10[-1], v11[-1]);
          float64x2_t v14 = vsubq_f64(*v10, *v11);
          float64x2_t v15 = vmulq_f64(v13, v13);
          float64x2_t v16 = vmulq_f64(v14, v14);
          double v4 = v4 + v15.f64[0] + v15.f64[1] + v16.f64[0] + v16.f64[1];
          v10 += 2;
          v11 += 2;
          v12 -= 4;
        }
        while (v12);
        if (v2 == v3) {
          return sqrt(v4);
        }
      }
      else
      {
        uint64_t v3 = 0;
        double v4 = 0.0;
      }
      unint64_t v17 = v2 - v3;
      uint64_t v18 = 8 * v3 + 32;
      uint64_t v19 = (double *)((char *)targetVector._rawValue + v18);
      uint64_t v20 = (double *)((char *)sourceVector._rawValue + v18);
      do
      {
        double v21 = *v20++;
        double v22 = v21;
        double v23 = *v19++;
        double v4 = v4 + (v22 - v23) * (v22 - v23);
        --v17;
      }
      while (v17);
    }
    else
    {
      double v4 = 0.0;
    }
    return sqrt(v4);
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.engagement);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_224EDB000, v6, v7, "Vector sizes are different", v8, 2u);
    MEMORY[0x22A627DB0](v8, -1, -1);
  }

  return 0.0;
}

uint64_t static PSEPhoneticEmbedder.normalizedString(from:)()
{
  Swift::String v1 = String.lowercased()();
  specialized RangeReplaceableCollection.removeAll(where:)(&v1);
  return v1._countAndFlagsBits;
}

uint64_t PSEPhoneticEmbedder.deinit()
{
  swift_release();
  return v0;
}

uint64_t PSEPhoneticEmbedder.__deallocating_deinit()
{
  swift_release();
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t type metadata accessor for PSEPhoneticEmbedder()
{
  return self;
}

uint64_t method lookup function for PSEPhoneticEmbedder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEPhoneticEmbedder);
}

uint64_t dispatch thunk of PSEPhoneticEmbedder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PSEPhoneticEmbedder.embedding(queries:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PSEPhoneticEmbedder.distanceBetween(sourceVector:targetVector:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of static PSEPhoneticEmbedder.normalizedString(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t (*TranscriptStep.sessionId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t (*TranscriptStep.clientRequestId.modify())()
{
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t (*TranscriptStep.clientApplicationId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t TranscriptStep.clientGroupIdentifier.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TranscriptStep.clientGroupIdentifier.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TranscriptStep.clientGroupIdentifier.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t TranscriptStep.eventType.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TranscriptStep.eventType.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TranscriptStep.eventType.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for TranscriptStep.eventTime : TranscriptStep(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 256))(v6);
}

uint64_t TranscriptStep.eventTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement14TranscriptStep_eventTime, a1);
}

uint64_t TranscriptStep.eventTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement14TranscriptStep_eventTime);
}

uint64_t (*TranscriptStep.eventTime.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t TranscriptStep.__allocating_init(sessionId:clientRequestId:clientApplicationId:eventType:eventTime:clientGroupIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  *(void *)(v18 + 32) = a3;
  *(void *)(v18 + 40) = a4;
  *(void *)(v18 + 48) = a5;
  *(void *)(v18 + 56) = a6;
  swift_beginAccess();
  *(void *)(v18 + 80) = a7;
  *(void *)(v18 + 88) = a8;
  swift_bridgeObjectRelease();
  uint64_t v19 = v18 + OBJC_IVAR____TtC18PostSiriEngagement14TranscriptStep_eventTime;
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a9, v20);
  swift_beginAccess();
  *(void *)(v18 + 64) = a10;
  *(void *)(v18 + 72) = a11;
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t TranscriptStep.init(sessionId:clientRequestId:clientApplicationId:eventType:eventTime:clientGroupIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 40) = a4;
  *(void *)(v11 + 48) = a5;
  *(void *)(v11 + 56) = a6;
  swift_beginAccess();
  *(void *)(v11 + 80) = a7;
  *(void *)(v11 + 88) = a8;
  swift_bridgeObjectRelease();
  uint64_t v14 = v11 + OBJC_IVAR____TtC18PostSiriEngagement14TranscriptStep_eventTime;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a9, v15);
  swift_beginAccess();
  *(void *)(v11 + 64) = a10;
  *(void *)(v11 + 72) = a11;
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t TranscriptStep.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x496E6F6973736573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6552746E65696C63;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x707954746E657665;
      break;
    case 5:
      unint64_t result = 0x6D6954746E657665;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TranscriptStep.CodingKeys()
{
  return TranscriptStep.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TranscriptStep.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TranscriptStep.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TranscriptStep.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TranscriptStep.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TranscriptStep.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TranscriptStep.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement14TranscriptStep_eventTime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t TranscriptStep.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement14TranscriptStep_eventTime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t TranscriptStep.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TranscriptStep.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys();
  uint64_t v11 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(void *)v2 + 128))(v11);
  char v29 = 0;
  uint64_t v23 = v7;
  uint64_t v12 = v22;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
    return swift_bridgeObjectRelease();
  }
  else
  {
    double v22 = v6;
    uint64_t v13 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 152))(v13);
    char v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v15 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 176))(v15);
    char v27 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v16 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 200))(v16);
    char v26 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v17 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 224))(v17);
    char v25 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v18 = swift_bridgeObjectRelease();
    uint64_t v19 = v22;
    (*(void (**)(uint64_t))(*(void *)v2 + 248))(v18);
    char v24 = 5;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  }
}

unint64_t lazy protocol witness table accessor for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptStep.CodingKeys and conformance TranscriptStep.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TranscriptStep()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))();
}

uint64_t TranscriptStep.sessionId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TranscriptStep.sessionId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TranscriptTask.uiSessionId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t TranscriptStep.clientRequestId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TranscriptStep.clientRequestId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TranscriptTask.sessionId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t TranscriptStep.clientApplicationId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TranscriptStep.clientApplicationId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TranscriptTask.clientRequestId.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t TranscriptTask.eventTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TranscriptTask.eventTypes.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*TranscriptTask.eventTypes.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for TranscriptTask.startTime : TranscriptTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 232))(v6);
}

uint64_t TranscriptTask.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_startTime, a1);
}

uint64_t TranscriptTask.startTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_startTime);
}

uint64_t (*TranscriptTask.startTime.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for TranscriptTask.endTime : TranscriptTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 256))(v6);
}

uint64_t TranscriptTask.endTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_endTime, a1);
}

uint64_t TranscriptTask.endTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_endTime);
}

uint64_t (*TranscriptTask.endTime.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

char *TranscriptTask.__allocating_init(uiSessionId:sessionId:clientRequestId:eventTypes:startTime:endTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a1;
  *((void *)v17 + 3) = a2;
  *((void *)v17 + 4) = a3;
  *((void *)v17 + 5) = a4;
  *((void *)v17 + 6) = a5;
  *((void *)v17 + 7) = a6;
  *((void *)v17 + 8) = a7;
  uint64_t v18 = &v17[OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_startTime];
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32);
  v20(v18, a8, v19);
  v20(&v17[OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_endTime], a9, v19);
  return v17;
}

char *TranscriptTask.init(uiSessionId:sessionId:clientRequestId:eventTypes:startTime:endTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *((void *)v9 + 2) = a1;
  *((void *)v9 + 3) = a2;
  *((void *)v9 + 4) = a3;
  *((void *)v9 + 5) = a4;
  *((void *)v9 + 6) = a5;
  *((void *)v9 + 7) = a6;
  *((void *)v9 + 8) = a7;
  uint64_t v11 = &v9[OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_startTime];
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
  v13(v11, a8, v12);
  v13(&v9[OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_endTime], a9, v12);
  return v9;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TranscriptTask.CodingKeys()
{
  uint64_t result = 0x6F69737365536975;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x496E6F6973736573;
      break;
    case 2:
      uint64_t result = 0x6552746E65696C63;
      break;
    case 3:
      uint64_t result = 0x707954746E657665;
      break;
    case 4:
      uint64_t result = 0x6D69547472617473;
      break;
    case 5:
      uint64_t result = 0x656D6954646E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TranscriptTask.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TranscriptTask.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TranscriptTask.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TranscriptTask.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TranscriptTask.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_startTime;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_endTime, v2);
  return v0;
}

uint64_t TranscriptTask.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_startTime;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_endTime, v2);
  uint64_t v4 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v5 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v4, v5);
}

uint64_t TranscriptTask.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v28 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TranscriptTask.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys();
  uint64_t v14 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(void *)v2 + 128))(v14);
  char v39 = 0;
  uint64_t v15 = v32;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = v9;
    char v29 = v7;
    uint64_t v16 = v31;
    uint64_t v17 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 152))(v17);
    char v38 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v18 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v2 + 176))(v18);
    char v37 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v19 = swift_bridgeObjectRelease();
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 200))(v19);
    char v36 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v20 = swift_bridgeObjectRelease();
    double v22 = v32;
    (*(void (**)(uint64_t))(*(void *)v2 + 224))(v20);
    char v35 = 4;
    v28[2] = lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v28[1] = v10;
    uint64_t v23 = v22;
    char v24 = *(uint64_t (**)(char *, uint64_t))(v30 + 8);
    uint64_t v25 = v24(v23, v16);
    char v26 = *(void (**)(uint64_t))(*(void *)v2 + 248);
    char v27 = v29;
    v26(v25);
    char v34 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v24(v27, v16);
    return (*(uint64_t (**)(void, uint64_t))(v11 + 8))(0, v10);
  }
}

unint64_t lazy protocol witness table accessor for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TranscriptTask.CodingKeys and conformance TranscriptTask.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TranscriptTask()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))();
}

uint64_t TranscriptSignalFactory.buildTranscriptTasks(siriUISessionId:bmEvents:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v111 = a1;
  uint64_t v112 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v113 = (char *)&v103 - v8;
  uint64_t v122 = type metadata accessor for Date();
  uint64_t v9 = *(char **)(v122 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v122);
  id v110 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v109 = (char *)&v103 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  unint64_t v16 = (unint64_t)&v103 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v103 - v17;
  unint64_t v129 = MEMORY[0x263F8EE78];
  swift_retain();
  unint64_t v19 = specialized Sequence.compactMap<A>(_:)(a3);
  uint64_t v104 = 0;
  swift_release();
  if (v19 >> 62) {
    goto LABEL_104;
  }
  uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v20)
  {
LABEL_105:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.engagement);
    uint64_t v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v99, v100))
    {
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v101 = 0;
      _os_log_impl(&dword_224EDB000, v99, v100, "No Intelligence Flow Transcript to construct session boundary", v101, 2u);
      MEMORY[0x22A627DB0](v101, -1, -1);
    }

    return MEMORY[0x263F8EE78];
  }
LABEL_3:
  uint64_t v118 = v9;
  unint64_t v114 = (char *)v16;
  unint64_t v21 = MEMORY[0x263F8EE80];
  uint64_t v128 = MEMORY[0x263F8EE80];
  unint64_t v125 = v19 & 0xC000000000000001;
  uint64_t v22 = 4;
  long long v123 = xmmword_224F63660;
  id v126 = v7;
  char v121 = v18;
  unint64_t v124 = v19;
  do
  {
    unint64_t v16 = v21;
    uint64_t v26 = v22 - 4;
    if (v125)
    {
      uint64_t v7 = (char *)MEMORY[0x22A627400](v22 - 4, v19);
      uint64_t v9 = (char *)(v22 - 3);
      if (__OFADD__(v26, 1)) {
        goto LABEL_95;
      }
    }
    else
    {
      uint64_t v7 = *(char **)(v19 + 8 * v22);
      swift_retain();
      uint64_t v9 = (char *)(v22 - 3);
      if (__OFADD__(v26, 1))
      {
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v20) {
          goto LABEL_105;
        }
        goto LABEL_3;
      }
    }
    uint64_t v27 = (*(uint64_t (**)(void))(*(void *)v7 + 152))();
    unint64_t v19 = v28;
    unint64_t v21 = v16;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
    uint64_t v30 = *(void *)(v21 + 16);
    BOOL v31 = (v29 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      goto LABEL_96;
    }
    char v33 = v29;
    if (*(void *)(v21 + 24) < v32)
    {
      uint64_t v18 = v9;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, 1);
      uint64_t v34 = v128;
      unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v19);
      if ((v33 & 1) != (v36 & 1))
      {
LABEL_113:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        goto LABEL_114;
      }
      unint64_t v16 = v35;
      unint64_t v21 = v34;
      uint64_t v9 = v18;
    }
    if (v33)
    {
      uint64_t v23 = swift_bridgeObjectRelease();
      unint64_t v24 = v21;
      uint64_t v25 = (void *)(*(void *)(v21 + 56) + 8 * v16);
      MEMORY[0x22A6270D0](v23);
      if (*(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      unint64_t v19 = v124;
      unint64_t v21 = v24;
    }
    else
    {
      char v37 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v123;
      *(void *)(v38 + 32) = v7;
      uint64_t v127 = v38;
      uint64_t v9 = (char *)v21;
      specialized Array._endMutation()();
      uint64_t v39 = v127;
      *(void *)(v21 + 8 * (v16 >> 6) + 64) |= 1 << v16;
      uint64_t v40 = (uint64_t *)(*(void *)(v21 + 48) + 16 * v16);
      *uint64_t v40 = v27;
      v40[1] = v19;
      *(void *)(*(void *)(v21 + 56) + 8 * v16) = v39;
      uint64_t v41 = *(void *)(v21 + 16);
      BOOL v42 = __OFADD__(v41, 1);
      uint64_t v43 = v41 + 1;
      if (v42) {
        goto LABEL_98;
      }
      *(void *)(v21 + 16) = v43;
      unint64_t v19 = v124;
      uint64_t v9 = v37;
    }
    ++v22;
    uint64_t v7 = v126;
  }
  while (v9 != (char *)v20);
  swift_bridgeObjectRelease();
  unint64_t v16 = v21 + 64;
  uint64_t v44 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v45 = -1;
  if (v44 < 64) {
    uint64_t v45 = ~(-1 << v44);
  }
  unint64_t v19 = v45 & *(void *)(v21 + 64);
  uint64_t v9 = (char *)((unint64_t)(v44 + 63) >> 6);
  *(void *)&long long v123 = v118 + 56;
  uint64_t v119 = (void (**)(char *, uint64_t, uint64_t))(v118 + 32);
  uint64_t v120 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
  char v106 = (void (**)(char *, char *, uint64_t))(v118 + 16);
  uint64_t v105 = (void (**)(char *, uint64_t))(v118 + 8);
  swift_retain();
  uint64_t v46 = 0;
  uint64_t v18 = v114;
  unint64_t v108 = v21 + 64;
  uint64_t v107 = v9;
  while (v19)
  {
    unint64_t v47 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v48 = v47 | (v46 << 6);
LABEL_43:
    uint64_t v51 = (uint64_t *)(*(void *)(v21 + 48) + 16 * v48);
    uint64_t v53 = *v51;
    unint64_t v52 = v51[1];
    uint64_t v54 = HIBYTE(v52) & 0xF;
    if ((v52 & 0x2000000000000000) == 0) {
      uint64_t v54 = v53 & 0xFFFFFFFFFFFFLL;
    }
    if (v54 && *(void *)(v21 + 16))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v52);
      if ((v56 & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        continue;
      }
      unint64_t v124 = v53;
      unint64_t v125 = v19;
      unint64_t v19 = *(void *)(*(void *)(v21 + 56) + 8 * v55);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
        if (!v57)
        {
LABEL_88:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          unint64_t v19 = v125;
          continue;
        }
      }
      else
      {
        uint64_t v57 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v57) {
          goto LABEL_88;
        }
      }
      uint64_t v118 = (char *)v46;
      unint64_t v58 = v19 & 0xC000000000000001;
      if ((v19 & 0xC000000000000001) != 0)
      {
        unint64_t v59 = v21;
        uint64_t v60 = MEMORY[0x22A627400](0, v19);
      }
      else
      {
        if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_100;
        }
        unint64_t v59 = v21;
        uint64_t v60 = *(void *)(v19 + 32);
        swift_retain();
      }
      uint64_t v61 = swift_bridgeObjectRelease();
      uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 128))(v61);
      uint64_t v64 = v63;
      swift_release();
      uint64_t v116 = v62;
      unint64_t v117 = v59;
      uint64_t v115 = v64;
      if (v58)
      {
        swift_bridgeObjectRetain();
        uint64_t v65 = MEMORY[0x22A627400](0, v19);
        uint64_t v66 = swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v65 = *(void *)(v19 + 32);
        uint64_t v66 = swift_retain();
      }
      uint64_t v67 = (uint64_t)v113;
      (*(void (**)(uint64_t))(*(void *)v65 + 248))(v66);
      swift_release();
      uint64_t v68 = v122;
      unint64_t v16 = *(void *)v123;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))v123)(v67, 0, 1, v122);
      uint64_t v9 = (char *)*v120;
      if ((*v120)(v67, 1, v68) == 1)
      {
        Date.init()();
        outlined destroy of Any?(v67, &demangling cache variable for type metadata for Date?);
      }
      else
      {
        (*v119)(v121, v67, v68);
      }
      uint64_t v69 = v68;
      unint64_t v70 = v57 - 1;
      if (__OFSUB__(v57, 1)) {
        goto LABEL_99;
      }
      if (v58)
      {
        swift_bridgeObjectRetain();
        uint64_t v71 = MEMORY[0x22A627400](v57 - 1, v19);
        uint64_t v72 = swift_bridgeObjectRelease();
      }
      else
      {
        if ((v70 & 0x8000000000000000) != 0) {
          goto LABEL_102;
        }
        if (v70 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_103;
        }
        uint64_t v71 = *(void *)(v19 + 8 * v70 + 32);
        uint64_t v72 = swift_retain();
      }
      (*(void (**)(uint64_t))(*(void *)v71 + 248))(v72);
      swift_release();
      ((void (*)(char *, void, uint64_t, uint64_t))v16)(v7, 0, 1, v69);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v9)(v7, 1, v69) == 1)
      {
        Date.init()();
        outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Date?);
      }
      else
      {
        (*v119)(v18, (uint64_t)v7, v69);
      }
      if (v57 < 1) {
        goto LABEL_101;
      }
      swift_bridgeObjectRetain();
      uint64_t v73 = 0;
      char v74 = (void *)MEMORY[0x263F8EE78];
      do
      {
        if (v58)
        {
          uint64_t v76 = MEMORY[0x22A627400](v73, v19);
        }
        else
        {
          uint64_t v76 = *(void *)(v19 + 8 * v73 + 32);
          swift_retain();
        }
        uint64_t v77 = (*(uint64_t (**)(void))(*(void *)v76 + 224))();
        uint64_t v79 = v78;
        swift_release();
        if (v79)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
          }
          unint64_t v81 = v74[2];
          unint64_t v80 = v74[3];
          if (v81 >= v80 >> 1) {
            char v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v80 > 1), v81 + 1, 1, v74);
          }
          v74[2] = v81 + 1;
          unint64_t v75 = &v74[2 * v81];
          v75[4] = v77;
          v75[5] = v79;
        }
        ++v73;
      }
      while (v57 != v73);
      swift_bridgeObjectRelease_n();
      uint64_t v82 = *v106;
      unint64_t v83 = v109;
      uint64_t v85 = v121;
      uint64_t v84 = v122;
      (*v106)(v109, v121, v122);
      unint64_t v86 = v110;
      uint64_t v87 = v114;
      v82(v110, v114, v84);
      type metadata accessor for TranscriptTask(0);
      id v88 = (char *)swift_allocObject();
      uint64_t v89 = v112;
      *((void *)v88 + 2) = v111;
      *((void *)v88 + 3) = v89;
      uint64_t v90 = v115;
      *((void *)v88 + 4) = v116;
      *((void *)v88 + 5) = v90;
      *((void *)v88 + 6) = v124;
      *((void *)v88 + 7) = v52;
      *((void *)v88 + 8) = v74;
      uint64_t v91 = *v119;
      (*v119)(&v88[OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_startTime], (uint64_t)v83, v84);
      v91(&v88[OBJC_IVAR____TtC18PostSiriEngagement14TranscriptTask_endTime], (uint64_t)v86, v84);
      uint64_t v92 = swift_bridgeObjectRetain();
      MEMORY[0x22A6270D0](v92);
      if (*(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v93 = *v105;
      (*v105)(v87, v84);
      v93(v85, v84);
      uint64_t v18 = v87;
      unint64_t v21 = v117;
      uint64_t v46 = (uint64_t)v118;
      unint64_t v16 = v108;
      uint64_t v9 = v107;
      unint64_t v19 = v125;
      uint64_t v7 = v126;
    }
  }
  BOOL v42 = __OFADD__(v46++, 1);
  if (v42) {
    goto LABEL_97;
  }
  if (v46 < (uint64_t)v9)
  {
    unint64_t v49 = *(void *)(v16 + 8 * v46);
    if (!v49)
    {
      uint64_t v50 = v46 + 1;
      if (v46 + 1 >= (uint64_t)v9) {
        goto LABEL_90;
      }
      unint64_t v49 = *(void *)(v16 + 8 * v50);
      if (!v49)
      {
        uint64_t v50 = v46 + 2;
        if (v46 + 2 >= (uint64_t)v9) {
          goto LABEL_90;
        }
        unint64_t v49 = *(void *)(v16 + 8 * v50);
        if (!v49)
        {
          uint64_t v50 = v46 + 3;
          if (v46 + 3 >= (uint64_t)v9) {
            goto LABEL_90;
          }
          unint64_t v49 = *(void *)(v16 + 8 * v50);
          if (!v49)
          {
            uint64_t v50 = v46 + 4;
            if (v46 + 4 >= (uint64_t)v9) {
              goto LABEL_90;
            }
            unint64_t v49 = *(void *)(v16 + 8 * v50);
            if (!v49)
            {
              uint64_t v50 = v46 + 5;
              if (v46 + 5 >= (uint64_t)v9) {
                goto LABEL_90;
              }
              unint64_t v49 = *(void *)(v16 + 8 * v50);
              if (!v49)
              {
                uint64_t v50 = v46 + 6;
                if (v46 + 6 >= (uint64_t)v9) {
                  goto LABEL_90;
                }
                unint64_t v49 = *(void *)(v16 + 8 * v50);
                if (!v49)
                {
                  while (1)
                  {
                    uint64_t v46 = v50 + 1;
                    if (__OFADD__(v50, 1)) {
                      break;
                    }
                    if (v46 >= (uint64_t)v9) {
                      goto LABEL_90;
                    }
                    unint64_t v49 = *(void *)(v16 + 8 * v46);
                    ++v50;
                    if (v49) {
                      goto LABEL_42;
                    }
                  }
                  __break(1u);
                  goto LABEL_113;
                }
              }
            }
          }
        }
      }
      uint64_t v46 = v50;
    }
LABEL_42:
    unint64_t v19 = (v49 - 1) & v49;
    unint64_t v48 = __clz(__rbit64(v49)) + (v46 << 6);
    goto LABEL_43;
  }
LABEL_90:
  swift_release_n();
  unint64_t v94 = v129;
  if ((v129 & 0x8000000000000000) != 0 || (v129 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v95 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v94);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v95 = v129 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
  }
  uint64_t v128 = v95;
  uint64_t v96 = v104;
  specialized MutableCollection<>.sort(by:)(&v128);
  if (!v96)
  {
    swift_bridgeObjectRelease();
    uint64_t v97 = v128;
    swift_bridgeObjectRelease();
    return v97;
  }
LABEL_114:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t TranscriptSignalFactory.deinit()
{
  return v0;
}

uint64_t TranscriptSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t TranscriptSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t TranscriptSignalFactory.init()()
{
  return v0;
}

uint64_t Sequence<>.dedupe()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = static Array._allocateUninitialized(_:)();
  if (MEMORY[0x22A627190](v12, AssociatedTypeWitness)) {
    uint64_t v13 = specialized Set.init(_nonEmptyArrayLiteral:)(v12, AssociatedTypeWitness, a3);
  }
  else {
    uint64_t v13 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = v13;
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a1);
  MEMORY[0x270FA5388](v14);
  *(&v17 - 4) = a1;
  *(&v17 - 3) = a2;
  *(&v17 - 2) = a3;
  *(&v17 - 1) = (uint64_t)&v18;
  uint64_t v15 = Sequence.filter(_:)();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t closure #1 in Sequence<>.dedupe()(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, AssociatedTypeWitness);
  type metadata accessor for Set();
  char v9 = Set.insert(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, AssociatedTypeWitness);
  return v9 & 1;
}

uint64_t specialized TranscriptSignalFactory.convertBiomeEventToTranscriptStep(bmEvent:)(void *a1)
{
  uint64_t v2 = type metadata accessor for ReliabilityCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  char v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v75 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v82 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  unint64_t v21 = (char *)&v75 - v20;
  MEMORY[0x270FA5388](v19);
  id v83 = a1;
  uint64_t v84 = (char *)&v75 - v22;
  id v23 = objc_msgSend(a1, sel_absoluteTimestamp);
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
    goto LABEL_7;
  }
  unint64_t v24 = v23;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = v21;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v26(v14, v25, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
LABEL_7:
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for Date?);
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.engagement);
    uint64_t v32 = *MEMORY[0x263F75190];
    uint64_t v33 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v5, v32, v33);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F75100], v2);
    Logger.error(_:_:)(0xD000000000000023, 0x8000000224F68290, (uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  v26(v84, v14, v15);
  id v27 = objc_msgSend(v83, sel_identifiers);
  if (!v27)
  {
LABEL_13:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.engagement);
    uint64_t v36 = *MEMORY[0x263F75188];
    uint64_t v37 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104))(v5, v36, v37);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F75100], v2);
    uint64_t v38 = "Session ID missing";
LABEL_16:
    unint64_t v39 = (unint64_t)(v38 - 32) | 0x8000000000000000;
    uint64_t v40 = 0xD000000000000012;
LABEL_26:
    Logger.error(_:_:)(v40, v39, (uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v84, v15);
    return 0;
  }
  uint64_t v28 = v27;
  unint64_t v81 = (void (*)(uint64_t, char *, uint64_t))v26;
  id v29 = objc_msgSend(v27, sel_sessionId);

  if (v29)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v30 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v9, 0, 1, v30);
  }
  else
  {
    uint64_t v30 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v9, 1, 1, v30);
  }
  outlined init with take of UUID?((uint64_t)v9, (uint64_t)v11);
  type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v11, 1, v30) == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
    goto LABEL_13;
  }
  uint64_t v80 = UUID.uuidString.getter();
  uint64_t v42 = v41;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v30);
  id v43 = v83;
  id v44 = objc_msgSend(v83, sel_identifiers);
  if (!v44
    || (uint64_t v45 = v44,
        id v46 = objc_msgSend(v44, sel_clientApplicationId),
        v45,
        !v46))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.engagement);
    uint64_t v60 = *MEMORY[0x263F75198];
    uint64_t v61 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v5, v60, v61);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F75100], v2);
    uint64_t v40 = 0xD00000000000001DLL;
    unint64_t v39 = 0x8000000224F682E0;
    goto LABEL_26;
  }
  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v47;

  id v49 = objc_msgSend(v43, sel_eventType);
  if (!v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.engagement);
    uint64_t v65 = *MEMORY[0x263F75178];
    uint64_t v66 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 104))(v5, v65, v66);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F75100], v2);
    uint64_t v38 = "Event Type missing";
    goto LABEL_16;
  }
  uint64_t v50 = v49;
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v77 = v52;
  uint64_t v78 = v51;

  id v53 = objc_msgSend(v43, sel_identifiers);
  if (v53)
  {
    uint64_t v54 = v53;
    id v55 = objc_msgSend(v53, sel_clientRequestId);

    char v56 = v82;
    if (v55)
    {
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v75 = v58;
      uint64_t v76 = v57;
    }
    else
    {
      unint64_t v75 = 0xE000000000000000;
      uint64_t v76 = 0;
    }
  }
  else
  {
    unint64_t v75 = 0xE000000000000000;
    uint64_t v76 = 0;
    char v56 = v82;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v56, v84, v15);
  id v67 = objc_msgSend(v83, sel_identifiers);
  if (v67
    && (uint64_t v68 = v67,
        id v69 = objc_msgSend(v67, sel_clientGroupIdentifier),
        v68,
        v69))
  {
    uint64_t v70 = v48;
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v72;
  }
  else
  {
    uint64_t v70 = v48;
    uint64_t v71 = 0;
    uint64_t v73 = 0;
  }
  type metadata accessor for TranscriptStep(0);
  uint64_t v62 = swift_allocObject();
  *(_OWORD *)(v62 + 64) = 0u;
  *(_OWORD *)(v62 + 80) = 0u;
  *(void *)(v62 + 16) = v80;
  *(void *)(v62 + 24) = v42;
  unint64_t v74 = v75;
  *(void *)(v62 + 32) = v76;
  *(void *)(v62 + 40) = v74;
  *(void *)(v62 + 48) = v79;
  *(void *)(v62 + 56) = v70;
  swift_beginAccess();
  *(void *)(v62 + 80) = v78;
  *(void *)(v62 + 88) = v77;
  swift_bridgeObjectRelease();
  v81(v62 + OBJC_IVAR____TtC18PostSiriEngagement14TranscriptStep_eventTime, v82, v15);
  swift_beginAccess();
  *(void *)(v62 + 64) = v71;
  *(void *)(v62 + 72) = v73;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v84, v15);
  return v62;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22A627400](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      uint64_t v7 = specialized TranscriptSignalFactory.convertBiomeEventToTranscriptStep(bmEvent:)(v4);

      if (v7)
      {
        MEMORY[0x22A6270D0]();
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t type metadata accessor for TranscriptTask(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for TranscriptTask);
}

uint64_t specialized TranscriptStep.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000064
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6552746E65696C63 && a2 == 0xEF64497473657571 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000224F681A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000224F681C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x707954746E657665 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D6954746E657665 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized TranscriptTask.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F69737365536975 && a2 == 0xEB0000000064496ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6552746E65696C63 && a2 == 0xEF64497473657571 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x707954746E657665 && a2 == 0xEA00000000007365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D69547472617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656D6954646E65 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v51 = (char *)&v39 - v11;
  uint64_t v40 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v39 - v14;
  if (MEMORY[0x22A627180](v13))
  {
    type metadata accessor for _SetStorage();
    uint64_t v16 = static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v16 = MEMORY[0x263F8EE88];
  }
  uint64_t v44 = MEMORY[0x22A627190](v5, a2);
  if (!v44) {
    return v16;
  }
  uint64_t v17 = 0;
  id v49 = (void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
  uint64_t v50 = v16 + 56;
  uint64_t v46 = v6 + 32;
  uint64_t v48 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v41 = v6;
  uint64_t v42 = v5;
  id v43 = v15;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      uint64_t v19 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
      v19(v15, (uint64_t *)(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v17), a2);
      BOOL v20 = __OFADD__(v17, 1);
      uint64_t v21 = v17 + 1;
      if (v20) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v40 != 8) {
        goto LABEL_23;
      }
      uint64_t v52 = result;
      uint64_t v19 = *v49;
      (*v49)(v15, &v52, a2);
      swift_unknownObjectRelease();
      BOOL v20 = __OFADD__(v17, 1);
      uint64_t v21 = v17 + 1;
      if (v20)
      {
LABEL_20:
        __break(1u);
        return v16;
      }
    }
    uint64_t v47 = v21;
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v45(v51, v15, a2);
    uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = v16;
    uint64_t v24 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v25 = v22 & ~v24;
    unint64_t v26 = v25 >> 6;
    uint64_t v27 = *(void *)(v50 + 8 * (v25 >> 6));
    uint64_t v28 = 1 << v25;
    uint64_t v29 = *(void *)(v6 + 72);
    if (((1 << v25) & v27) != 0)
    {
      uint64_t v30 = ~v24;
      do
      {
        v19(v9, (uint64_t *)(*(void *)(v23 + 48) + v29 * v25), a2);
        uint64_t v31 = a3;
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v33 = *v48;
        (*v48)(v9, a2);
        if (v32)
        {
          v33(v51, a2);
          a3 = v31;
          uint64_t v6 = v41;
          uint64_t v5 = v42;
          uint64_t v16 = v23;
          goto LABEL_7;
        }
        unint64_t v25 = (v25 + 1) & v30;
        unint64_t v26 = v25 >> 6;
        uint64_t v27 = *(void *)(v50 + 8 * (v25 >> 6));
        uint64_t v28 = 1 << v25;
        a3 = v31;
      }
      while ((v27 & (1 << v25)) != 0);
      uint64_t v6 = v41;
      uint64_t v5 = v42;
    }
    uint64_t v34 = v51;
    *(void *)(v50 + 8 * v26) = v28 | v27;
    unint64_t v35 = *(void *)(v23 + 48) + v29 * v25;
    uint64_t v16 = v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v45)(v35, v34, a2);
    uint64_t v37 = *(void *)(v23 + 16);
    BOOL v20 = __OFADD__(v37, 1);
    uint64_t v38 = v37 + 1;
    if (v20) {
      break;
    }
    *(void *)(v23 + 16) = v38;
LABEL_7:
    uint64_t v15 = v43;
    uint64_t v17 = v47;
    if (v47 == v44) {
      return v16;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in Sequence<>.dedupe()(uint64_t a1)
{
  return closure #1 in Sequence<>.dedupe()(a1) & 1;
}

uint64_t sub_224F26604@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F26650(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 136);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F266B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F26704(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 160);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F2676C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F267B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 184);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F26820@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F2686C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 208);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F268D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F26920(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 232);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F26988(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 248))();
}

uint64_t sub_224F269D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F26A1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 136);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F26A84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F26AD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 160);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F26B38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_224F26B84(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 184);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_224F26BEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_224F26C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_224F26C8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 224))();
}

uint64_t sub_224F26CD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 248))();
}

uint64_t ObjC metadata update function for TranscriptStep()
{
  return type metadata accessor for TranscriptStep(0);
}

uint64_t type metadata accessor for TranscriptStep(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for TranscriptStep);
}

uint64_t type metadata completion function for TranscriptStep()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for TranscriptStep(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TranscriptStep);
}

uint64_t dispatch thunk of TranscriptStep.sessionId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of TranscriptStep.sessionId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of TranscriptStep.sessionId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of TranscriptStep.clientRequestId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of TranscriptStep.clientRequestId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of TranscriptStep.clientRequestId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of TranscriptStep.clientApplicationId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of TranscriptStep.clientApplicationId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of TranscriptStep.clientApplicationId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of TranscriptStep.clientGroupIdentifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of TranscriptStep.clientGroupIdentifier.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of TranscriptStep.clientGroupIdentifier.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of TranscriptStep.eventType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of TranscriptStep.eventType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of TranscriptStep.eventType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of TranscriptStep.eventTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of TranscriptStep.eventTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of TranscriptStep.eventTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of TranscriptStep.__allocating_init(sessionId:clientRequestId:clientApplicationId:eventType:eventTime:clientGroupIdentifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of TranscriptStep.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t ObjC metadata update function for TranscriptTask()
{
  return type metadata accessor for TranscriptTask(0);
}

uint64_t type metadata completion function for TranscriptTask()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for TranscriptTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TranscriptTask);
}

uint64_t dispatch thunk of TranscriptTask.uiSessionId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of TranscriptTask.uiSessionId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of TranscriptTask.uiSessionId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of TranscriptTask.sessionId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of TranscriptTask.sessionId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of TranscriptTask.sessionId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of TranscriptTask.clientRequestId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of TranscriptTask.clientRequestId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of TranscriptTask.clientRequestId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of TranscriptTask.eventTypes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of TranscriptTask.eventTypes.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of TranscriptTask.eventTypes.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of TranscriptTask.startTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of TranscriptTask.startTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of TranscriptTask.startTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of TranscriptTask.endTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of TranscriptTask.endTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of TranscriptTask.endTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of TranscriptTask.__allocating_init(uiSessionId:sessionId:clientRequestId:eventTypes:startTime:endTime:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of TranscriptTask.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t type metadata accessor for TranscriptSignalFactory()
{
  return self;
}

uint64_t method lookup function for TranscriptSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TranscriptSignalFactory);
}

uint64_t dispatch thunk of TranscriptSignalFactory.buildTranscriptTasks(siriUISessionId:bmEvents:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of TranscriptSignalFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

void *type metadata accessor for TranscriptTask.CodingKeys()
{
  return &unk_26D84E9F8;
}

uint64_t getEnumTagSinglePayload for TranscriptTask.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TranscriptTask.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224F276ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TranscriptStep.CodingKeys()
{
  return &unk_26D84EA88;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Double *donatedTimestampDifferenceInSeconds.unsafeMutableAddressor()
{
  return &donatedTimestampDifferenceInSeconds;
}

uint64_t AppIntentSignalFactory.init()()
{
  return v0;
}

uint64_t AppIntentSignalFactory.deinit()
{
  return v0;
}

void AppIntentSignalFactory.convertBmEventToEngagementFeatureSet(bmEvent:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = type metadata accessor for ProtoTaskEngagementType();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v57 = (uint64_t)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v58 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v61 = *(void *)(v7 - 8);
  uint64_t v62 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v50 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskFeatureSet?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ProtoTaskFeatureSet();
  uint64_t v60 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v23 = (void *)MEMORY[0x22A6277A0](v20);
  uint64_t v24 = v63;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v64);
  if (v24)
  {
    return;
  }
  id v55 = a1;
  char v56 = v22;
  id v53 = v19;
  uint64_t v54 = v12;
  uint64_t v26 = v61;
  uint64_t v25 = v62;
  uint64_t v63 = 0;
  uint64_t v27 = v64;
  INInteraction.extractFeatures()();
  uint64_t v28 = v60;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v15, 1, v16) == 1)
  {

    uint64_t v29 = &demangling cache variable for type metadata for ProtoTaskFeatureSet?;
    uint64_t v30 = (uint64_t)v15;
  }
  else
  {
    uint64_t v31 = v16;
    char v32 = v56;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v56, v15, v31);
    id v33 = objc_msgSend(v55, sel_absoluteTimestamp);
    uint64_t v51 = v31;
    id v52 = v27;
    if (v33)
    {
      uint64_t v34 = v33;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v35 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      uint64_t v36 = v58;
      uint64_t v37 = v25;
      v35(v58, v10, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v36, 0, 1, v25);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v36, 1, v25) != 1)
      {
        v35(v54, v36, v25);
        uint64_t v38 = v59;
        ProtoTaskEngagementFeatureSet.init()();
        type metadata accessor for SiriTaskEngagementUtils();
        dispatch thunk of static SiriTaskEngagementUtils.convertDateTimeToUInt64(date:)();
        ProtoTaskEngagementFeatureSet.startTimestampMs.setter();
        type metadata accessor for Utils();
        uint64_t v39 = v28;
        id v40 = objc_msgSend(v52, sel_intent);
        id v41 = objc_msgSend(v40, sel__className);

        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v43 = v26;
        uint64_t v45 = v44;

        static Utils.deriveEngagmentType(from:)(v42, v45, v57);
        swift_bridgeObjectRelease();
        ProtoTaskEngagementFeatureSet.engagementType.setter();
        uint64_t v46 = v51;
        (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v53, v32, v51);
        ProtoTaskEngagementFeatureSet.featureSet.setter();

        (*(void (**)(char *, uint64_t))(v43 + 8))(v54, v37);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v32, v46);
        uint64_t v47 = type metadata accessor for ProtoTaskEngagementFeatureSet();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v38, 0, 1, v47);
        return;
      }
    }
    else
    {
      uint64_t v36 = v58;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v58, 1, 1, v25);
    }

    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v51);
    uint64_t v29 = &demangling cache variable for type metadata for Date?;
    uint64_t v30 = (uint64_t)v36;
  }
  outlined destroy of Any?(v30, v29);
  uint64_t v48 = v59;
  uint64_t v49 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 1, 1, v49);
}

uint64_t AppIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v96 = type metadata accessor for ReliabilityCategory();
  uint64_t v8 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v95 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v94 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v71 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  unint64_t v75 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v74 = (char *)v68 - v19;
  uint64_t v100 = MEMORY[0x263F8EE78];
  if (!(a1 >> 62))
  {
    uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_3;
    }
LABEL_30:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v66 = MEMORY[0x263F8EE78];
    unint64_t v67 = MEMORY[0x263F8EE78];
LABEL_31:
    *a3 = v66;
    a3[1] = v67;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_30;
  }
LABEL_3:
  uint64_t v23 = *(uint64_t (**)(id, uint64_t))(*(void *)v4 + 88);
  uint64_t v92 = *(void *)v4 + 88;
  uint64_t v93 = v23;
  if (v20 >= 1)
  {
    uint64_t v77 = v16;
    unint64_t v81 = v15;
    v68[0] = a3;
    uint64_t v24 = 0;
    uint64_t v25 = v8;
    id v26 = 0;
    unint64_t v90 = a1 & 0xC000000000000001;
    id v88 = (void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    unsigned int v87 = *MEMORY[0x263F75138];
    uint64_t v85 = (void (**)(char *, uint64_t))(v25 + 8);
    unint64_t v86 = (void (**)(char *, void, uint64_t))(v25 + 104);
    unsigned int v84 = *MEMORY[0x263F750E8];
    id v83 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v73 = (unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
    uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))(v71 + 32);
    id v69 = (void (**)(char *, char *, uint64_t))(v71 + 16);
    v68[1] = v71 + 8;
    unint64_t v76 = MEMORY[0x263F8EE78];
    uint64_t v82 = (void *)0x8000000224F67F90;
    *(void *)&long long v22 = 136315138;
    long long v79 = v22;
    uint64_t v78 = MEMORY[0x263F8EE58] + 8;
    uint64_t v91 = v20;
    uint64_t v80 = v4;
    uint64_t v89 = v10;
    do
    {
      if (v90) {
        id v30 = (id)MEMORY[0x22A627400](v24, a1);
      }
      else {
        id v30 = *(id *)(a1 + 8 * v24 + 32);
      }
      uint64_t v31 = v30;
      uint64_t v32 = v93(v30, a2);
      if (v26)
      {
        id v97 = v26;
        if (one-time initialization token for engagement != -1) {
          swift_once();
        }
        uint64_t v34 = __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
        (*v88)(v94, v34, v10);
        uint64_t v98 = 0;
        unint64_t v99 = 0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v35._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
        v35._int64_t object = v82;
        String.append(_:)(v35);
        id v36 = v31;
        id v37 = objc_msgSend(v36, sel_description);
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v40 = v39;

        v41._uint64_t countAndFlagsBits = v38;
        v41._int64_t object = v40;
        String.append(_:)(v41);
        swift_bridgeObjectRelease();
        v42._uint64_t countAndFlagsBits = 0x3A726F727265202CLL;
        v42._int64_t object = (void *)0xE900000000000020;
        String.append(_:)(v42);
        swift_getErrorValue();
        v43._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
        uint64_t v45 = v98;
        unint64_t v44 = v99;
        uint64_t v46 = type metadata accessor for AppIntentEventDataIssues();
        uint64_t v47 = v95;
        (*(void (**)(char *, void, uint64_t))(*(void *)(v46 - 8) + 104))(v95, v87, v46);
        (*v86)(v47, v84, v96);
        swift_bridgeObjectRetain_n();
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          unint64_t v50 = a1;
          uint64_t v51 = swift_slowAlloc();
          uint64_t v52 = a2;
          uint64_t v53 = swift_slowAlloc();
          uint64_t v98 = v53;
          *(_DWORD *)uint64_t v51 = v79;
          swift_bridgeObjectRetain();
          *(void *)(v51 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, &v98);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_224EDB000, v48, v49, "%s", (uint8_t *)v51, 0xCu);
          swift_arrayDestroy();
          uint64_t v54 = v53;
          a2 = v52;
          MEMORY[0x22A627DB0](v54, -1, -1);
          uint64_t v55 = v51;
          a1 = v50;
          uint64_t v4 = v80;
          MEMORY[0x22A627DB0](v55, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        type metadata accessor for SiriTaskEngagementUtils();
        uint64_t v27 = dispatch thunk of static SiriTaskEngagementUtils.formulateSimplifiedReliabilityReasonDescription(reliabilityDescription:)();
        uint64_t v28 = v95;
        MEMORY[0x22A626AD0](v95, v27, v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        (*v85)(v28, v96);
        uint64_t v10 = v89;
        (*v83)(v94, v89);
        id v26 = 0;
      }
      else
      {
        if (v32)
        {
          uint64_t v33 = swift_retain();
          MEMORY[0x22A6270D0](v33);
          if (*(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
        }
        (*(void (**)(void *))(*(void *)v4 + 80))(v31);
        uint64_t v56 = (uint64_t)v81;
        uint64_t v57 = v77;
        if ((*v73)(v81, 1, v77) == 1)
        {

          outlined destroy of Any?(v56, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
        }
        else
        {
          id v97 = 0;
          unint64_t v58 = v74;
          uint64_t v70 = *v72;
          v70(v74, v56, v57);
          (*v69)(v75, v58, v57);
          unint64_t v59 = v76;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v59 + 16) + 1, 1, v59);
          }
          unint64_t v61 = *(void *)(v59 + 16);
          unint64_t v60 = *(void *)(v59 + 24);
          if (v61 >= v60 >> 1) {
            unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1, v59);
          }
          *(void *)(v59 + 16) = v61 + 1;
          unint64_t v62 = v59;
          uint64_t v63 = v71;
          unint64_t v64 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
          unint64_t v76 = v62;
          uint64_t v65 = v77;
          v70((char *)(v62 + v64 + *(void *)(v71 + 72) * v61), (uint64_t)v75, v77);

          (*(void (**)(char *, uint64_t))(v63 + 8))(v74, v65);
          id v26 = v97;
        }
      }
      ++v24;
    }
    while (v91 != v24);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v66 = v100;
    a3 = (void *)v68[0];
    unint64_t v67 = v76;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t AppIntentSignalFactory.getINIntentResponseCodeDescription(responseCode:)()
{
  return 0;
}

uint64_t AppIntentSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

void AppIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v73 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)MEMORY[0x22A6277A0](v13);
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v79);
  if (v3)
  {
    return;
  }
  uint64_t v17 = (void *)v79;
  id v18 = objc_msgSend((id)v79, sel_intent);
  self;
  if (swift_dynamicCastObjCClass() || (self, swift_dynamicCastObjCClass()))
  {

    return;
  }
  id v77 = v18;
  id v78 = v17;
  *(void *)&long long v75 = v2;
  id v19 = objc_msgSend(v18, sel_domain);
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  uint64_t v23 = v22;
  uint64_t v24 = v20;
  if (!String.count.getter())
  {
    swift_bridgeObjectRelease();
    id v25 = objc_msgSend(a1, sel_intentClass);
    if (!v25) {
      id v25 = objc_msgSend(v77, sel_typeName);
    }
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    uint64_t v23 = v28;
    uint64_t v24 = v26;
  }
  uint64_t v29 = String.count.getter();
  id v30 = v77;
  if (v29 < 1)
  {

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v76 = v23;
  uint64_t v74 = a2;
  if ((v24 != 1936744781 || v76 != 0xE400000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_26;
  }
  id v31 = objc_msgSend(v30, sel_parametersByName);
  if (!v31)
  {
    long long v79 = 0u;
    long long v80 = 0u;
    goto LABEL_24;
  }
  uint64_t v32 = v31;
  uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v33 + 16)
    || (unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656D656C65, 0xE700000000000000), (v35 & 1) == 0))
  {
    long long v79 = 0u;
    long long v80 = 0u;
    swift_bridgeObjectRelease();
LABEL_24:
    id v30 = v77;
    goto LABEL_25;
  }
  outlined init with copy of Any(*(void *)(v33 + 56) + 32 * v34, (uint64_t)&v79);
  swift_bridgeObjectRelease();
  id v30 = v77;
  if (!*((void *)&v80 + 1))
  {
LABEL_25:
    outlined destroy of Any?((uint64_t)&v79, &demangling cache variable for type metadata for Any?);
    goto LABEL_26;
  }
  if (swift_dynamicCast())
  {
    if (v83[0] == __PAIR128__(0xEE00535554415453, 0x5F56414E5F544547))
    {

      swift_bridgeObjectRelease();
LABEL_39:
      swift_bridgeObjectRelease();

      return;
    }
    char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    id v30 = v77;
    if (v72)
    {

      goto LABEL_39;
    }
  }
LABEL_26:
  unsigned __int8 v36 = objc_msgSend(a1, sel_donatedBySiri, v24);
  *((void *)&v80 + 1) = MEMORY[0x263F8D4F8];
  LOBYTE(v79) = v36;
  outlined init with take of Any(&v79, v83);
  uint64_t v37 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v84 = v37;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v83, 0x42646574616E6F64, 0xED00006972695379, isUniquelyReferenced_nonNull_native);
  uint64_t v39 = v84;
  swift_bridgeObjectRelease();
  id v40 = objc_msgSend(v30, sel_typeName);
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;

  *((void *)&v80 + 1) = MEMORY[0x263F8D310];
  *(void *)&long long v79 = v41;
  *((void *)&v79 + 1) = v43;
  outlined init with take of Any(&v79, v83);
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v84 = v39;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v83, 0x7954746E65746E69, 0xEE00656D614E6570, v44);
  uint64_t v45 = v84;
  swift_bridgeObjectRelease();
  id v46 = objc_msgSend(v78, sel_intentResponse);
  if (v46)
  {
    uint64_t v47 = v46;
    id v48 = objc_msgSend(v46, sel__intentResponseCode);
    uint64_t v49 = (*(uint64_t (**)(id))(*(void *)v75 + 104))(v48);
    *((void *)&v80 + 1) = MEMORY[0x263F8D310];
    *(void *)&long long v79 = v49;
    *((void *)&v79 + 1) = v50;
    outlined init with take of Any(&v79, v83);
    char v51 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = v45;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v83, 0xD000000000000012, 0x8000000224F67F70, v51);
    uint64_t v45 = v84;

    swift_bridgeObjectRelease();
  }
  id v52 = objc_msgSend(a1, sel_absoluteTimestamp);
  uint64_t v53 = v73;
  if (v52)
  {
    uint64_t v54 = v52;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v55 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v15, 0, 1, v55);
  }
  else
  {
    uint64_t v56 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v15, 1, 1, v56);
  }
  id v57 = objc_msgSend(v78, sel_dateInterval);
  if (v57)
  {
    unint64_t v58 = v57;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v59 = type metadata accessor for DateInterval();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v9, 0, 1, v59);
  }
  else
  {
    uint64_t v59 = type metadata accessor for DateInterval();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v9, 1, 1, v59);
  }
  outlined init with take of DateInterval?((uint64_t)v9, (uint64_t)v11);
  type metadata accessor for DateInterval();
  double v60 = 0.0;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v11, 1, v59))
  {
    DateInterval.duration.getter();
    double v60 = v61;
  }
  outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for DateInterval?);
  type metadata accessor for Utils();
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v15, v74, (uint64_t)&v79, v60);
  outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for Date?);
  long long v75 = v79;
  long long v62 = v80;
  uint64_t v63 = v81;
  char v64 = v82;
  id v65 = v77;
  id v66 = objc_msgSend(v77, sel_verb);
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = v68;

  type metadata accessor for Signal();
  uint64_t v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = v75;
  *(_OWORD *)(v70 + 32) = v62;
  *(void *)(v70 + 48) = v63;
  *(unsigned char *)(v70 + 56) = v64;
  uint64_t v71 = v76;
  *(void *)(v70 + 64) = v53;
  *(void *)(v70 + 72) = v71;
  *(void *)(v70 + 80) = v67;
  *(void *)(v70 + 88) = v69;
  *(unsigned char *)(v70 + 96) = 1;
  *(void *)(v70 + 104) = v45;
}

uint64_t AppIntentSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance AppIntentSignalFactory(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)v1 + 88))(*a1);
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance AppIntentSignalFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t outlined init with take of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AppIntentSignalFactory()
{
  return self;
}

uint64_t method lookup function for AppIntentSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AppIntentSignalFactory);
}

uint64_t dispatch thunk of AppIntentSignalFactory.convertBmEventToEngagementFeatureSet(bmEvent:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of AppIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of AppIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AppIntentSignalFactory.getINIntentResponseCodeDescription(responseCode:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AppIntentSignalFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

double AppLaunchSignalFactory.durationBucketSeparatorShort.getter()
{
  return 2.0;
}

double AppLaunchSignalFactory.durationBucketSeparatorLong.getter()
{
  return 10.0;
}

uint64_t AppLaunchSignalFactory.launchReasonSiri.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppLaunchSignalFactory.launchReasonHomescreen.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppLaunchSignalFactory.launchReasonHomeScreenOpenFolder.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppLaunchSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  return 0;
}

uint64_t AppLaunchSignalFactory.convertBmAppLaunchEventToSignal(startingBmEvent:endDate:siriUISession:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = a3;
  uint64_t v85 = a2;
  uint64_t v4 = type metadata accessor for ReliabilityCategory();
  uint64_t v94 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v92 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  unint64_t v90 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v81 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v81 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void **)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  char v82 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v81 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v81 - v23;
  id v25 = objc_msgSend(a1, sel_absoluteTimestamp);
  unsigned int v87 = v10;
  *(void *)&long long v95 = v17;
  if (!v25)
  {
    uint64_t v89 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v17[7];
    v89(v15, 1, 1, v16);
    uint64_t v29 = a1;
    uint64_t v30 = v4;
    goto LABEL_5;
  }
  uint64_t v26 = v25;
  uint64_t v83 = v4;
  uint64_t v84 = a1;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = (void (*)(char *, char *, uint64_t))v17[4];
  v27(v15, v22, v16);
  uint64_t v89 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v17[7];
  v89(v15, 0, 1, v16);
  uint64_t v28 = (unsigned int (*)(char *, uint64_t, uint64_t))v17[6];
  if (v28(v15, 1, v16) == 1)
  {
    uint64_t v29 = v84;
    uint64_t v30 = v83;
LABEL_5:
    outlined destroy of Date?((uint64_t)v15);
    double v31 = 0.0;
    goto LABEL_10;
  }
  v27(v24, v15, v16);
  outlined init with copy of Date?(v85, (uint64_t)v13);
  if (v28(v13, 1, v16) == 1)
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v24, v16);
    outlined destroy of Date?((uint64_t)v13);
    double v31 = 0.0;
LABEL_9:
    uint64_t v29 = v84;
    uint64_t v30 = v83;
    goto LABEL_10;
  }
  uint64_t v32 = v82;
  v27(v82, v13, v16);
  Date.timeIntervalSince(_:)();
  double v34 = v33;
  char v35 = *(void (**)(char *, uint64_t))(v95 + 8);
  v35(v32, v16);
  v35(v24, v16);
  double v31 = 0.0;
  if (v34 < 2.0) {
    goto LABEL_9;
  }
  uint64_t v29 = v84;
  uint64_t v30 = v83;
  double v31 = 1.0;
  if (v34 > 10.0) {
    double v31 = 2.0;
  }
LABEL_10:
  id v36 = objc_msgSend(v29, sel_launchReason);
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;

    id v41 = objc_msgSend(v29, sel_bundleID);
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;

      uint64_t v46 = v86;
      if (*(void *)(v86 + 32) == v38 && *(void *)(v86 + 40) == v40
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v47 = 1769105747;
        swift_bridgeObjectRelease();
        char v48 = 0;
        unint64_t v49 = 0xE400000000000000;
      }
      else if (*(void *)(v46 + 48) == v38 && *(void *)(v46 + 56) == v40)
      {
        uint64_t v47 = 0x65726373656D6F48;
        swift_bridgeObjectRelease();
        char v48 = 1;
        unint64_t v49 = 0xEA00000000006E65;
      }
      else
      {
        char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v68) {
          uint64_t v47 = 0x65726373656D6F48;
        }
        else {
          uint64_t v47 = 0x726568744FLL;
        }
        if (v68) {
          unint64_t v49 = 0xEA00000000006E65;
        }
        else {
          unint64_t v49 = 0xE500000000000000;
        }
        char v48 = 1;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_224F65000;
      *(void *)(inited + 32) = 0xD000000000000011;
      *(void *)(inited + 40) = 0x8000000224F66680;
      uint64_t v70 = MEMORY[0x263F8D310];
      *(void *)(inited + 48) = v43;
      *(void *)(inited + 56) = v45;
      *(void *)(inited + 72) = v70;
      *(void *)(inited + 80) = 0xD000000000000011;
      *(void *)(inited + 88) = 0x8000000224F683F0;
      *(void *)(inited + 120) = MEMORY[0x263F8D538];
      *(double *)(inited + 96) = v31;
      unint64_t v71 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      id v72 = objc_msgSend(v29, sel_absoluteTimestamp);
      if (v72)
      {
        uint64_t v73 = v72;
        uint64_t v74 = (uint64_t)v87;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v75 = 0;
        uint64_t v76 = v88;
      }
      else
      {
        uint64_t v75 = 1;
        uint64_t v76 = v88;
        uint64_t v74 = (uint64_t)v87;
      }
      v89((char *)v74, v75, 1, v16);
      type metadata accessor for Utils();
      static Utils.deltaTBetween(eventStart:siriUISession:duration:)(v74, v76, (uint64_t)&v96, v31);
      outlined destroy of Date?(v74);
      long long v95 = v96;
      uint64_t v77 = v97;
      uint64_t v78 = v98;
      uint64_t v79 = v99;
      char v80 = v100;
      type metadata accessor for Signal();
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = v95;
      *(void *)(result + 32) = v77;
      *(void *)(result + 40) = v78;
      *(void *)(result + 48) = v79;
      *(unsigned char *)(result + 56) = v80;
      *(void *)(result + 64) = 0x636E75614C707041;
      *(void *)(result + 72) = 0xE900000000000068;
      *(void *)(result + 80) = v47;
      *(void *)(result + 88) = v49;
      *(unsigned char *)(result + 96) = v48;
      *(void *)(result + 104) = v71;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v50 = v93;
  uint64_t v51 = __swift_project_value_buffer(v93, (uint64_t)static Logger.engagement);
  uint64_t v52 = v91;
  uint64_t v53 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v51, v50);
  *(void *)&long long v96 = 0;
  *((void *)&v96 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(61);
  v54._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v54._int64_t object = (void *)0x8000000224F683A0;
  String.append(_:)(v54);
  id v55 = v29;
  id v56 = objc_msgSend(v55, sel_description);
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;

  v60._uint64_t countAndFlagsBits = v57;
  v60._int64_t object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = 0xD000000000000020;
  v61._int64_t object = (void *)0x8000000224F683C0;
  String.append(_:)(v61);
  long long v62 = v96;
  uint64_t v63 = *MEMORY[0x263F75150];
  uint64_t v64 = type metadata accessor for AppLaunchEventDataIssues();
  uint64_t v65 = (uint64_t)v92;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 104))(v92, v63, v64);
  uint64_t v66 = v94;
  (*(void (**)(uint64_t, void, uint64_t))(v94 + 104))(v65, *MEMORY[0x263F750F0], v30);
  Logger.error(_:_:)(v62, *((unint64_t *)&v62 + 1), v65);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v30);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v50);
  return 0;
}

void AppLaunchSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v98 = a2;
  long long v96 = a3;
  uint64_t v6 = type metadata accessor for ReliabilityCategory();
  unint64_t v122 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(char **)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v121 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v97 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (uint64_t)&v95 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  unint64_t v20 = (unint64_t)&v95 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v95 - v21;
  uint64_t v126 = 0;
  uint64_t v127 = MEMORY[0x263F8EE78];
  swift_retain();
  unint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = specialized _ArrayProtocol.filter(_:)(v23, v4);
  swift_bridgeObjectRelease();
  unint64_t v99 = v4;
  swift_release();
  uint64_t v100 = v24;
  if ((unint64_t)v24 >> 62) {
    goto LABEL_68;
  }
  uint64_t v119 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v119 == 1)
  {
    uint64_t v24 = v100;
    swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  while (1)
  {
    swift_beginAccess();
    unint64_t v30 = v126;
    unint64_t v31 = v126 + 1;
    if (!__OFADD__(v126, 1)) {
      break;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    if (v24 < 0) {
      a1 = (void *)v24;
    }
    else {
      a1 = (void *)(v24 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v119 = v94;
    if (v94 == 1)
    {
      uint64_t v24 = v100;
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
LABEL_4:
      if ((v24 & 0xC000000000000001) != 0)
      {
        id v25 = (id)MEMORY[0x22A627400](0, v24);
LABEL_7:
        a1 = v25;
        swift_bridgeObjectRelease();
        if (!objc_msgSend(a1, sel_starting))
        {

LABEL_11:
          uint64_t v119 = 1;
          continue;
        }
        swift_bridgeObjectRelease();
        id v26 = objc_msgSend(a1, sel_absoluteTimestamp);
        if (v26)
        {
          uint64_t v27 = v26;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v28 = type metadata accessor for Date();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v17, 0, 1, v28);
        }
        else
        {
          uint64_t v28 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v17, 1, 1, v28);
        }
        outlined init with take of Date?(v17, v20);
        type metadata accessor for Date();
        uint64_t v90 = *(void *)(v28 - 8);
        if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v90 + 48))(v20, 1, v28) == 1)
        {
          outlined destroy of Date?(v20);
          uint64_t v91 = 1;
        }
        else
        {
          Date.addingTimeInterval(_:)();
          (*(void (**)(unint64_t, uint64_t))(v90 + 8))(v20, v28);
          uint64_t v91 = 0;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v22, v91, 1, v28);
        uint64_t v92 = (*(uint64_t (**)(void *, char *, uint64_t))(*(void *)v99 + 128))(a1, v22, v98);
        outlined destroy of Date?((uint64_t)v22);
        if (!v92)
        {

          goto LABEL_52;
        }
        uint64_t v93 = swift_retain();
        MEMORY[0x22A6270D0](v93);
        if (*(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          goto LABEL_76;
        }
      }
      else
      {
        if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v25 = *(id *)(v24 + 32);
          goto LABEL_7;
        }
        __break(1u);
LABEL_76:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      swift_release();
      goto LABEL_52;
    }
  }
  uint64_t v117 = v100 & 0xFFFFFFFFFFFFFF8;
  unint64_t v118 = v100 & 0xC000000000000001;
  uint64_t v22 = (char *)(v100 + 32);
  uint64_t v104 = &v124;
  uint64_t v113 = (void (**)(char *, unint64_t, uint64_t))(v10 + 16);
  unsigned int v112 = *MEMORY[0x263F75150];
  unsigned int v111 = *MEMORY[0x263F750F0];
  id v110 = (void (**)(char *, void, uint64_t))(v122 + 104);
  uint64_t v109 = (void (**)(char *, uint64_t))(v122 + 8);
  unint64_t v108 = (void (**)(char *, uint64_t))(v10 + 8);
  *(void *)&long long v29 = 134218498;
  long long v103 = v29;
  uint64_t v102 = MEMORY[0x263F8EE58] + 8;
  uint64_t v107 = (void *)0x8000000224F683C0;
  *(void *)&long long v29 = 136315138;
  long long v101 = v29;
  char v106 = v8;
  uint64_t v114 = v9;
  uint64_t v105 = v6;
  uint64_t v116 = (char *)(v100 + 32);
  while ((uint64_t)v31 < v119)
  {
    if (v118)
    {
      uint64_t v88 = v100;
      char v35 = (void *)MEMORY[0x22A627400]();
      id v36 = (id)MEMORY[0x22A627400](v31, v88);
    }
    else
    {
      if ((v30 & 0x8000000000000000) != 0) {
        goto LABEL_62;
      }
      unint64_t v20 = *(void *)(v117 + 16);
      if (v30 >= v20) {
        goto LABEL_63;
      }
      id v34 = *(id *)&v22[8 * v30];
      if ((v31 & 0x8000000000000000) != 0) {
        goto LABEL_64;
      }
      if (v31 >= v20) {
        goto LABEL_65;
      }
      char v35 = v34;
      id v36 = *(id *)&v22[8 * v31];
    }
    uint64_t v37 = v36;
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    unint64_t v20 = __swift_project_value_buffer(v9, (uint64_t)static Logger.engagement);
    id v38 = v35;
    id v39 = v37;
    uint64_t v10 = (char *)v38;
    uint64_t v22 = (char *)v39;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    uint64_t v17 = v40;
    BOOL v41 = os_log_type_enabled((os_log_t)v24, v40);
    unint64_t v122 = v20;
    if (v41)
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = v103;
      uint64_t v123 = v126;
      uint64_t v124 = v43;
      uint64_t v120 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v44 = v10;
      id v45 = objc_msgSend(v44, sel_description);
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v115 = v10;
      uint64_t v47 = v46;
      unint64_t v49 = v48;

      uint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, &v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 22) = 2080;
      unint64_t v20 = v42 + 24;
      uint64_t v50 = v120;
      id v51 = objc_msgSend(v50, sel_description);
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      uint64_t v6 = v105;
      uint64_t v55 = v52;
      uint64_t v8 = v106;
      uint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v54, &v124);
      uint64_t v22 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v9 = v114;
      uint64_t v10 = v115;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224EDB000, (os_log_t)v24, (os_log_type_t)v17, "index=%ld. This event = %s, Next event = %s", (uint8_t *)v42, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v43, -1, -1);
      MEMORY[0x22A627DB0](v42, -1, -1);
    }
    else
    {
    }
    if (!objc_msgSend(v10, sel_starting)) {
      goto LABEL_40;
    }
    if (objc_msgSend(v22, sel_starting)) {
      goto LABEL_40;
    }
    id v56 = objc_msgSend(v10, sel_bundleID);
    if (!v56) {
      goto LABEL_40;
    }
    uint64_t v17 = (uint64_t)v56;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v58 = v57;

    id v59 = objc_msgSend(v10, sel_bundleID);
    if (!v59)
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = v106;
LABEL_40:
      if (__OFADD__(v126, 1)) {
        goto LABEL_66;
      }
      char v68 = v10;
      uint64_t v10 = v22;
      ++v126;
      (*v113)(v121, v122, v9);
      uint64_t v124 = 0;
      unint64_t v125 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      uint64_t v124 = 0x6576652073696854;
      unint64_t v125 = 0xEB0000000020746ELL;
      uint64_t v69 = v68;
      id v70 = objc_msgSend(v69, sel_description);
      uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v73 = v72;

      v74._uint64_t countAndFlagsBits = v71;
      v74._int64_t object = v73;
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      v75._uint64_t countAndFlagsBits = 0xD000000000000020;
      v75._int64_t object = v107;
      String.append(_:)(v75);
      uint64_t v24 = v124;
      unint64_t v76 = v125;
      uint64_t v77 = type metadata accessor for AppLaunchEventDataIssues();
      (*(void (**)(char *, void, uint64_t))(*(void *)(v77 - 8) + 104))(v8, v112, v77);
      (*v110)(v8, v111, v6);
      swift_bridgeObjectRetain_n();
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.error.getter();
      uint64_t v17 = v79;
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        uint64_t v124 = v81;
        *(_DWORD *)uint64_t v80 = v101;
        swift_bridgeObjectRetain();
        *(void *)(v80 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v76, &v124);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_224EDB000, v78, (os_log_type_t)v17, "%s", (uint8_t *)v80, 0xCu);
        swift_arrayDestroy();
        uint64_t v82 = v81;
        uint64_t v9 = v114;
        MEMORY[0x22A627DB0](v82, -1, -1);
        MEMORY[0x22A627DB0](v80, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      type metadata accessor for SiriTaskEngagementUtils();
      uint64_t v32 = dispatch thunk of static SiriTaskEngagementUtils.formulateSimplifiedReliabilityReasonDescription(reliabilityDescription:)();
      unint64_t v20 = v33;
      MEMORY[0x22A626AD0](v8, v32, v33);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v109)(v8, v6);
      (*v108)(v121, v9);
      unint64_t v30 = v126;
      goto LABEL_16;
    }
    Swift::String v60 = v59;
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v62;

    if (v24 == v61 && v58 == v17)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v8 = v106;
    }
    else
    {
      unint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v106;
      if ((v20 & 1) == 0) {
        goto LABEL_40;
      }
    }
    id v63 = objc_msgSend(v22, sel_absoluteTimestamp);
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v65 = v97;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v66 = v65;
      uint64_t v67 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v65, 0, 1, v67);
    }
    else
    {
      uint64_t v83 = type metadata accessor for Date();
      uint64_t v66 = v97;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v97, 1, 1, v83);
    }
    unint64_t v20 = v99;
    uint64_t v84 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)v99 + 128))(v10, v66, v98);
    uint64_t v85 = (uint64_t)v66;
    uint64_t v86 = v84;
    outlined destroy of Date?(v85);
    if (v86)
    {
      uint64_t v87 = swift_retain();
      unint64_t v20 = (unint64_t)&v127;
      MEMORY[0x22A6270D0](v87);
      uint64_t v24 = *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v24 >= *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }

    unint64_t v30 = v126 + 2;
    if (__OFADD__(v126, 2)) {
      goto LABEL_67;
    }
    v126 += 2;
LABEL_16:
    unint64_t v31 = v30 + 1;
    uint64_t v22 = v116;
    if (__OFADD__(v30, 1)) {
      goto LABEL_61;
    }
  }
  swift_bridgeObjectRelease();
LABEL_52:
  uint64_t v89 = v96;
  *long long v96 = v127;
  v89[1] = MEMORY[0x263F8EE78];
}

uint64_t AppLaunchSignalFactory.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AppLaunchSignalFactory.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 80, 7);
}

double AppLaunchSignalFactory.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  double result = 2.0;
  *(_OWORD *)(v0 + 16) = xmmword_224F65410;
  *(void *)(v0 + 32) = 0xD00000000000002BLL;
  *(void *)(v0 + 40) = 0x8000000224F68410;
  *(void *)(v0 + 48) = 0xD000000000000031;
  *(void *)(v0 + 56) = 0x8000000224F68440;
  *(void *)(v0 + 64) = 0xD00000000000002DLL;
  *(void *)(v0 + 72) = 0x8000000224F68480;
  return result;
}

double AppLaunchSignalFactory.init()()
{
  double result = 2.0;
  *(_OWORD *)(v0 + 16) = xmmword_224F65410;
  *(void *)(v0 + 32) = 0xD00000000000002BLL;
  *(void *)(v0 + 40) = 0x8000000224F68410;
  *(void *)(v0 + 48) = 0xD000000000000031;
  *(void *)(v0 + 56) = 0x8000000224F68440;
  *(void *)(v0 + 64) = 0xD00000000000002DLL;
  *(void *)(v0 + 72) = 0x8000000224F68480;
  return result;
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance AppLaunchSignalFactory(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)v1 + 120))(*a1);
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance AppLaunchSignalFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AppLaunchSignalFactory()
{
  return self;
}

uint64_t method lookup function for AppLaunchSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AppLaunchSignalFactory);
}

uint64_t dispatch thunk of AppLaunchSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AppLaunchSignalFactory.convertBmAppLaunchEventToSignal(startingBmEvent:endDate:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AppLaunchSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of AppLaunchSignalFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t PSEBiomeFetchConfiguration.init(startDate:endDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v9)((void *)(v6 - 8), a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for PSEBiomeFetchConfiguration() + 20);
  return v9(v7, a2, v6);
}

uint64_t PSEBiomeFetchConfiguration.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t PSEBiomeFetchConfiguration.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PSEBiomeFetchConfiguration() + 20);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t PSEBiomeEventsSource.nowPlayingEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.nowPlayingEvents.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.nowPlayingEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSEBiomeEventsSource.appIntentEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.appIntentEvents.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.appIntentEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSEBiomeEventsSource.alarmEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.alarmEvents.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.alarmEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSEBiomeEventsSource.appLaunchEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.appLaunchEvents.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.appLaunchEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSEBiomeEventsSource.homeEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.homeEvents.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.homeEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSEBiomeEventsSource.appIntentInvocationEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.appIntentInvocationEvents.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.appIntentInvocationEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

void __swiftcall PSEBiomeEventsSource.init()(PostSiriEngagement::PSEBiomeEventsSource *__return_ptr retstr)
{
  uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  retstr->nowPlayingEvents._uint64_t rawValue = (void *)MEMORY[0x263F8EE78];
  retstr->appIntentEvents._uint64_t rawValue = v1;
  retstr->alarmEvents._uint64_t rawValue = v1;
  retstr->appLaunchEvents._uint64_t rawValue = v1;
  retstr->homeEvents._uint64_t rawValue = v1;
  retstr->appIntentInvocationEvents._uint64_t rawValue = v1;
}

uint64_t default argument 0 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:appIntentInvocationEvents:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 1 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:appIntentInvocationEvents:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 2 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:appIntentInvocationEvents:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 3 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:appIntentInvocationEvents:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 4 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:appIntentInvocationEvents:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 5 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:appIntentInvocationEvents:)()
{
  return MEMORY[0x263F8EE78];
}

void __swiftcall PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:appIntentInvocationEvents:)(PostSiriEngagement::PSEBiomeEventsSource *__return_ptr retstr, Swift::OpaquePointer nowPlayingEvents, Swift::OpaquePointer appIntentEvents, Swift::OpaquePointer alarmEvents, Swift::OpaquePointer appLaunchEvents, Swift::OpaquePointer homeEvents, Swift::OpaquePointer appIntentInvocationEvents)
{
  retstr->nowPlayingEvents = nowPlayingEvents;
  retstr->appIntentEvents = appIntentEvents;
  retstr->alarmEvents = alarmEvents;
  retstr->appLaunchEvents = appLaunchEvents;
  retstr->homeEvents = homeEvents;
  retstr->appIntentInvocationEvents = appIntentInvocationEvents;
}

id BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  Class isa = 0;
  if (v11(a1, 1, v9) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  }
  if (v11(a2, 1, v9) == 1)
  {
    Class v13 = 0;
  }
  else
  {
    Class v13 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
  id v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStartDate_endDate_maxEvents_lastN_reversed_, isa, v13, a3, a4, a5 & 1);

  return v14;
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReliabilityCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(a1, sel_eventBody);
  if (v8)
  {
    uint64_t v9 = v8;
    swift_beginAccess();
    id v10 = v9;
    MEMORY[0x22A6270D0]();
    if (*(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    uint64_t v12 = *MEMORY[0x263F74FC8];
    uint64_t v13 = type metadata accessor for SiriUIEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v7, v12, v13);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F750E0], v4);
    Logger.error(_:_:)(0xD000000000000030, 0x8000000224F686F0, (uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReliabilityCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(a1, sel_eventBody);
  if (v8)
  {
    uint64_t v9 = v8;
    swift_beginAccess();
    id v10 = v9;
    MEMORY[0x22A6270D0]();
    if (*(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    uint64_t v12 = *MEMORY[0x263F74FE8];
    uint64_t v13 = type metadata accessor for SiriExecutionEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v7, v12, v13);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F75108], v4);
    Logger.error(_:_:)(0xD000000000000037, 0x8000000224F68670, (uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t static PSEBiomeEventsSourceFetcher.fetchTranscriptEvents(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&aBlock - v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = MEMORY[0x263F8EE78];
  type metadata accessor for BMPublisherOptions();
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v11, a1, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  outlined init with copy of Date?(a2, (uint64_t)v9);
  id v15 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v11, (uint64_t)v9, 0, 0, 0);
  id v16 = objc_msgSend((id)BiomeLibrary(), sel_IntelligenceFlow);
  swift_unknownObjectRelease();
  id v17 = objc_msgSend(v16, sel_Transcript);
  swift_unknownObjectRelease();
  id v18 = objc_msgSend(v17, sel_Datastream);
  swift_unknownObjectRelease();
  id v19 = objc_msgSend(v18, sel_publisherWithOptions_, v15);
  unint64_t v30 = (void (*)(void *))AbstractActivityCollector.collect(callback:);
  uint64_t v31 = 0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v27 = 1107296256;
  uint64_t v28 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  long long v29 = &block_descriptor_0;
  unint64_t v20 = _Block_copy(&aBlock);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v3;
  *(void *)(v21 + 24) = v12;
  unint64_t v30 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchTranscriptEvents(startDate:endDate:);
  uint64_t v31 = v21;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v27 = 1107296256;
  uint64_t v28 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  long long v29 = &block_descriptor_6;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v23 = objc_msgSend(v19, sel_sinkWithCompletion_receiveInput_, v20, v22);

  _Block_release(v22);
  _Block_release(v20);

  swift_beginAccess();
  uint64_t v24 = *(void *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v24;
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchTranscriptEvents(startDate:endDate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ReliabilityCategory();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(a1, sel_eventBody);
  if (v9)
  {
    id v15 = v9;
    if (specialized static PSEBiomeEventsSourceFetcher.isAssistantClient(bmEvent:)(v9))
    {
      swift_beginAccess();
      id v10 = v15;
      MEMORY[0x22A6270D0]();
      if (*(void *)((*(void *)(a3 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a3 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
    else
    {
      id v14 = v15;
    }
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    uint64_t v12 = *MEMORY[0x263F75180];
    uint64_t v13 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v8, v12, v13);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F75100], v5);
    Logger.error(_:_:)(0xD000000000000033, 0x8000000224F68630, (uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t closure #1 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)()
{
  return 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(void *, void *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a2;
  v8[3] = swift_getObjectType();
  v8[0] = a3;
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v6 = v5(v9, v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  return v6;
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(void *a1, void (*a2)(id, long long *), uint64_t a3, _OWORD *a4)
{
  uint64_t v8 = type metadata accessor for ReliabilityCategory();
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = a4 + 1;
  if (objc_msgSend(a1, sel_state))
  {
    v30[1] = a3;
    uint64_t v31 = a2;
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v16 = __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v16, v11);
    *(void *)&long long v35 = 0;
    *((void *)&v35 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(void *)&long long v35 = 0xD000000000000026;
    *((void *)&v35 + 1) = 0x8000000224F686C0;
    id v34 = objc_msgSend(a1, sel_error);
    __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for Error?);
    v17._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    long long v18 = v35;
    uint64_t v19 = *MEMORY[0x263F75030];
    uint64_t v20 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v10, v19, v20);
    uint64_t v22 = v32;
    uint64_t v21 = v33;
    (*(void (**)(char *, void, uint64_t))(v32 + 104))(v10, *MEMORY[0x263F75118], v33);
    Logger.error(_:_:)(v18, *((unint64_t *)&v18 + 1), (uint64_t)v10);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v21);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    id v23 = objc_msgSend(a1, sel_error);
    swift_beginAccess();
    long long v24 = a4[2];
    long long v35 = *v15;
    long long v36 = v24;
    long long v37 = a4[3];
    long long v38 = v35;
    long long v39 = v24;
    long long v40 = v37;
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v38);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v38 + 8);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v39);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v39 + 8);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v40);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v40 + 8);
    v31(v23, &v35);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v38);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v38 + 8);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v39);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v39 + 8);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v40);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v40 + 8);
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    uint64_t v27 = a2;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_224EDB000, v25, v26, "receiving all Biome events successfully.", v28, 2u);
      MEMORY[0x22A627DB0](v28, -1, -1);
    }

    swift_beginAccess();
    long long v29 = v15[1];
    long long v35 = *v15;
    long long v36 = v29;
    long long v37 = v15[2];
    long long v38 = v35;
    long long v39 = v29;
    long long v40 = v37;
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v38);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v38 + 8);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v39);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v39 + 8);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v40);
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v40 + 8);
    v27(0, &v35);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v38);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v38 + 8);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v39);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v39 + 8);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v40);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v40 + 8);
  }
}

uint64_t closure #3 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v8 - 8);
  id v10 = (char *)v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  id v15 = (char *)v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  Swift::String v17 = (char *)v77 - v16;
  v83[3] = (uint64_t)&unk_26D854730;
  swift_unknownObjectRetain();
  uint64_t v18 = swift_dynamicCastObjCProtocolConditional();
  if (!v18) {
    return swift_unknownObjectRelease();
  }
  uint64_t v19 = v18;
  os_log_type_t v79 = (void (*)(void, void, void))v15;
  uint64_t v81 = v12;
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.engagement);
  swift_unknownObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  v77[2] = a3;
  uint64_t v78 = v17;
  v77[1] = a4;
  uint64_t v80 = v10;
  if (v23)
  {
    long long v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v82 = v19;
    v83[0] = v25;
    *(_DWORD *)long long v24 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BMStoreEvent);
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_224EDB000, v21, v22, "receiving Biome event %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A627DB0](v25, -1, -1);
    MEMORY[0x22A627DB0](v24, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  uint64_t v28 = (void **)(a2 + 2);
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody))
  {
    if (objc_msgSend(a1, sel_eventBody))
    {
      self;
      uint64_t v29 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v29)
      {
        uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody);
        if (result)
        {
          uint64_t result = (uint64_t)objc_msgSend(a1, sel_eventBody);
          if (result)
          {
            uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_timestamp);
            if (result)
            {
              objc_msgSend(a1, sel_timestamp);
              uint64_t v32 = v31;
              self;
              uint64_t v33 = swift_dynamicCastObjCClassUnconditional();
              swift_beginAccess();
              id v34 = (void *)a2[5];
              swift_unknownObjectRetain();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              a2[5] = v34;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                id v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
                a2[5] = v34;
              }
              unint64_t v37 = v34[2];
              unint64_t v36 = v34[3];
              unint64_t v38 = v37 + 1;
              if (v37 >= v36 >> 1)
              {
                id v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v34);
                a2[5] = v34;
              }
LABEL_58:
              v34[2] = v38;
              id v45 = &v34[2 * v37];
LABEL_59:
              v45[4] = v33;
              v45[5] = v32;
              swift_endAccess();
              goto LABEL_60;
            }
            goto LABEL_85;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
    }
  }
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody))
  {
    if (objc_msgSend(a1, sel_eventBody))
    {
      self;
      uint64_t v39 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v39)
      {
        uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody);
        if (result)
        {
          uint64_t result = (uint64_t)objc_msgSend(a1, sel_eventBody);
          if (result)
          {
            uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_timestamp);
            if (result)
            {
              objc_msgSend(a1, sel_timestamp);
              uint64_t v32 = v40;
              self;
              uint64_t v33 = swift_dynamicCastObjCClassUnconditional();
              swift_beginAccess();
              BOOL v41 = *v28;
              swift_unknownObjectRetain();
              char v42 = swift_isUniquelyReferenced_nonNull_native();
              *uint64_t v28 = v41;
              if ((v42 & 1) == 0)
              {
                BOOL v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
                *uint64_t v28 = v41;
              }
              unint64_t v44 = v41[2];
              unint64_t v43 = v41[3];
              if (v44 >= v43 >> 1)
              {
                BOOL v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v44 + 1, 1, v41);
                *uint64_t v28 = v41;
              }
              v41[2] = v44 + 1;
              id v45 = &v41[2 * v44];
              goto LABEL_59;
            }
            goto LABEL_88;
          }
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
    }
  }
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody))
  {
    if (objc_msgSend(a1, sel_eventBody))
    {
      self;
      uint64_t v46 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v46)
      {
        uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody);
        if (result)
        {
          uint64_t result = (uint64_t)objc_msgSend(a1, sel_eventBody);
          if (result)
          {
            uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_timestamp);
            if (result)
            {
              objc_msgSend(a1, sel_timestamp);
              uint64_t v32 = v47;
              self;
              uint64_t v33 = swift_dynamicCastObjCClassUnconditional();
              swift_beginAccess();
              id v34 = (void *)a2[4];
              swift_unknownObjectRetain();
              char v48 = swift_isUniquelyReferenced_nonNull_native();
              a2[4] = v34;
              if ((v48 & 1) == 0)
              {
                id v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
                a2[4] = v34;
              }
              unint64_t v37 = v34[2];
              unint64_t v49 = v34[3];
              unint64_t v38 = v37 + 1;
              if (v37 >= v49 >> 1)
              {
                id v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v37 + 1, 1, v34);
                a2[4] = v34;
              }
              goto LABEL_58;
            }
            goto LABEL_91;
          }
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
    }
  }
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody))
  {
    if (objc_msgSend(a1, sel_eventBody))
    {
      self;
      uint64_t v50 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v50)
      {
        uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody);
        if (result)
        {
          uint64_t result = (uint64_t)objc_msgSend(a1, sel_eventBody);
          if (result)
          {
            uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_timestamp);
            if (result)
            {
              objc_msgSend(a1, sel_timestamp);
              uint64_t v32 = v51;
              self;
              uint64_t v33 = swift_dynamicCastObjCClassUnconditional();
              swift_beginAccess();
              id v34 = (void *)a2[6];
              swift_unknownObjectRetain();
              char v52 = swift_isUniquelyReferenced_nonNull_native();
              a2[6] = v34;
              if ((v52 & 1) == 0)
              {
                id v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
                a2[6] = v34;
              }
              unint64_t v37 = v34[2];
              unint64_t v53 = v34[3];
              unint64_t v38 = v37 + 1;
              if (v37 >= v53 >> 1)
              {
                id v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v37 + 1, 1, v34);
                a2[6] = v34;
              }
              goto LABEL_58;
            }
            goto LABEL_94;
          }
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
    }
  }
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody))
  {
    if (objc_msgSend(a1, sel_eventBody))
    {
      self;
      uint64_t v54 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v54)
      {
        uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody);
        if (result)
        {
          uint64_t result = (uint64_t)objc_msgSend(a1, sel_eventBody);
          if (result)
          {
            uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_timestamp);
            if (result)
            {
              objc_msgSend(a1, sel_timestamp);
              uint64_t v32 = v55;
              self;
              uint64_t v33 = swift_dynamicCastObjCClassUnconditional();
              swift_beginAccess();
              id v34 = (void *)a2[7];
              swift_unknownObjectRetain();
              char v56 = swift_isUniquelyReferenced_nonNull_native();
              a2[7] = v34;
              if ((v56 & 1) == 0)
              {
                id v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
                a2[7] = v34;
              }
              unint64_t v37 = v34[2];
              unint64_t v57 = v34[3];
              unint64_t v38 = v37 + 1;
              if (v37 >= v57 >> 1)
              {
                id v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), v37 + 1, 1, v34);
                a2[7] = v34;
              }
              goto LABEL_58;
            }
            goto LABEL_97;
          }
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
          goto LABEL_99;
        }
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
    }
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody) & 1) == 0) {
    return swift_unknownObjectRelease();
  }
  if (!objc_msgSend(a1, sel_eventBody)) {
    return swift_unknownObjectRelease();
  }
  self;
  uint64_t v58 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  if (!v58) {
    return swift_unknownObjectRelease();
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody) & 1) == 0) {
    return swift_unknownObjectRelease();
  }
  id v59 = objc_msgSend(a1, sel_eventBody);
  if (!v59) {
    return swift_unknownObjectRelease();
  }
  id v60 = v59;
  self;
  uint64_t v61 = (void *)swift_dynamicCastObjCClass();
  if (!v61)
  {
LABEL_60:
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  id v62 = objc_msgSend(v61, sel_absoluteTimestamp);
  if (!v62)
  {
    uint64_t v66 = (uint64_t)v80;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v80, 1, 1, v11);
    goto LABEL_75;
  }
  id v63 = v62;
  v77[0] = v60;
  uint64_t v64 = v79;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v66 = (uint64_t)v80;
  uint64_t v65 = v81;
  os_log_type_t v79 = *(void (**)(void, void, void))(v81 + 32);
  v79(v80, v64, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v66, 1, v11) == 1)
  {
LABEL_75:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return outlined destroy of Date?(v66);
  }
  uint64_t v67 = v78;
  v79(v78, v66, v11);
  lazy protocol witness table accessor for type Date and conformance Date();
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0
    || (dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v81 + 8))(v67, v11);
    goto LABEL_60;
  }
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody);
  if ((result & 1) == 0) {
    goto LABEL_98;
  }
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_eventBody);
  if (!result)
  {
LABEL_99:
    __break(1u);
    return result;
  }
  self;
  uint64_t v68 = swift_dynamicCastObjCClassUnconditional();
  uint64_t v69 = v67;
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v71 = v70;
  swift_beginAccess();
  id v72 = (void *)a2[3];
  swift_unknownObjectRetain();
  char v73 = swift_isUniquelyReferenced_nonNull_native();
  a2[3] = v72;
  if ((v73 & 1) == 0)
  {
    id v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72[2] + 1, 1, v72);
    a2[3] = v72;
  }
  unint64_t v75 = v72[2];
  unint64_t v74 = v72[3];
  if (v75 >= v74 >> 1)
  {
    id v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v74 > 1), v75 + 1, 1, v72);
    a2[3] = v72;
  }
  uint64_t v72[2] = v75 + 1;
  unint64_t v76 = &v72[2 * v75];
  v76[4] = v68;
  v76[5] = v71;
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v69, v11);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchAppIntentEventAfter(answerEvent:)(void *a1, void *a2, uint64_t a3)
{
  id v5 = objc_msgSend(a1, sel_eventBody);
  if (!v5) {
    return;
  }
  id v19 = v5;
  id v6 = objc_msgSend(v5, sel_itemID);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  id v11 = objc_msgSend(a2, sel_itemID);
  if (!v11)
  {
    if (!v10) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  if (!v10)
  {
    if (!v15) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  if (!v15)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (v8 == v13 && v10 == v15)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
LABEL_17:
    uint64_t v16 = (void **)(a3 + 16);
    swift_beginAccess();
    Swift::String v17 = *v16;
    *uint64_t v16 = v19;

    return;
  }
LABEL_20:
}

void thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t PSEBiomeEventsSourceFetcher.deinit()
{
  return v0;
}

uint64_t PSEBiomeEventsSourceFetcher.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t PSEBiomeEventsSourceFetcher.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSEBiomeEventsSourceFetcher.init()()
{
  return v0;
}

uint64_t specialized static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  id v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = MEMORY[0x263F8EE78];
  type metadata accessor for BMPublisherOptions();
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v12(v8, a1, v10);
  uint64_t v13 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
  v13(v8, 0, 1, v10);
  v12(v6, v24, v10);
  v13(v6, 0, 1, v10);
  id v14 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v8, (uint64_t)v6, 0, 0, 0);
  id v15 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  id v16 = objc_msgSend(v15, sel_Execution);
  swift_unknownObjectRelease();
  id v17 = objc_msgSend(v16, sel_publisherWithOptions_, v14);
  uint64_t v29 = (void (*)(void *))AbstractActivityCollector.collect(callback:);
  uint64_t v30 = 0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v26 = 1107296256;
  unint64_t v27 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  uint64_t v28 = &block_descriptor_20;
  char v18 = _Block_copy(&aBlock);
  uint64_t v29 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:);
  uint64_t v30 = v9;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v26 = 1107296256;
  unint64_t v27 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  uint64_t v28 = &block_descriptor_23;
  id v19 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v20 = objc_msgSend(v17, sel_sinkWithCompletion_receiveInput_, v18, v19);

  _Block_release(v19);
  _Block_release(v18);

  swift_beginAccess();
  uint64_t v21 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v21;
}

uint64_t specialized static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v89 = a3;
  uint64_t v90 = a4;
  uint64_t v91 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v69 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void **)(v12 - 8);
  uint64_t v87 = v13[8];
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v88 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v86 = (char *)&v69 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v95 = (char *)&v69 - v18;
  uint64_t v84 = a2;
  Date.addingTimeInterval(_:)();
  type metadata accessor for BMPublisherOptions();
  uint64_t v85 = v13;
  id v19 = (void (*)(char *, uint64_t, uint64_t))v13[2];
  v19(v11, a1, v12);
  id v20 = v13 + 2;
  uint64_t v21 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v13[7];
  uint64_t v22 = v12;
  v21(v11, 0, 1, v12);
  v19(v9, a2, v12);
  v21(v9, 0, 1, v12);
  id v23 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v11, (uint64_t)v9, 0, 0, 0);
  uint64_t v24 = v91;
  v19(v11, v91, v22);
  v21(v11, 0, 1, v22);
  v19(v9, (uint64_t)v95, v22);
  uint64_t v82 = v20;
  uint64_t v81 = v19;
  v21(v9, 0, 1, v22);
  id v92 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v11, (uint64_t)v9, 0, 0, 0);
  v19(v11, v24, v22);
  v21(v11, 0, 1, v22);
  uint64_t v25 = v22;
  v21(v9, 1, 1, v22);
  id v94 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v11, (uint64_t)v9, 0, 0, 0);
  id v26 = objc_msgSend((id)BiomeLibrary(), sel_App);
  swift_unknownObjectRelease();
  id v27 = objc_msgSend(v26, sel_InFocus);
  id v83 = v27;
  swift_unknownObjectRelease();
  id v93 = objc_msgSend(v27, sel_publisherWithOptions_, v23);
  id v28 = objc_msgSend((id)BiomeLibrary(), sel_HomeKit);
  swift_unknownObjectRelease();
  id v29 = objc_msgSend(v28, sel_Client);
  swift_unknownObjectRelease();
  id v30 = objc_msgSend(v29, sel_AccessoryControl);
  id v80 = v30;
  swift_unknownObjectRelease();
  id v31 = objc_msgSend(v30, sel_publisherWithOptions_, v23);
  id v32 = objc_msgSend((id)BiomeLibrary(), sel_Clock);
  swift_unknownObjectRelease();
  id v33 = objc_msgSend(v32, sel_Alarm);
  id v79 = v33;
  swift_unknownObjectRelease();
  id v77 = v23;
  id v34 = objc_msgSend(v33, sel_publisherWithOptions_, v23);
  id v35 = objc_msgSend((id)BiomeLibrary(), sel_App);
  swift_unknownObjectRelease();
  id v36 = objc_msgSend(v35, sel_Intents);
  swift_unknownObjectRelease();
  id v37 = objc_msgSend(v36, sel_Transcript);
  id v78 = v37;
  swift_unknownObjectRelease();
  id v38 = objc_msgSend(v37, sel_publisherWithOptions_, v23);
  id v39 = objc_msgSend((id)BiomeLibrary(), sel_Media);
  swift_unknownObjectRelease();
  id v40 = objc_msgSend(v39, sel_NowPlaying);
  id v76 = v40;
  swift_unknownObjectRelease();
  id v41 = objc_msgSend(v40, sel_publisherWithOptions_, v92);
  id v42 = objc_msgSend((id)BiomeLibrary(), sel_App);
  swift_unknownObjectRelease();
  id v43 = objc_msgSend(v42, sel_Intent);
  id v75 = v43;
  swift_unknownObjectRelease();
  id v44 = objc_msgSend(v43, sel_publisherWithOptions_, v94);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_224F654B0;
  *(void *)(v45 + 32) = v44;
  *(void *)(v45 + 40) = v41;
  *(void *)(v45 + 48) = v31;
  *(void *)(v45 + 56) = v34;
  *(void *)(v45 + 64) = v38;
  uint64_t aBlock = v45;
  specialized Array._endMutation()();
  id v74 = v44;
  id v73 = v41;
  id v72 = v31;
  id v71 = v34;
  id v70 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BPSPublisher);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v100 = closure #1 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:);
  long long v101 = 0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v97 = 1107296256;
  uint64_t v98 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult);
  unint64_t v99 = &block_descriptor_26;
  uint64_t v47 = _Block_copy(&aBlock);
  id v69 = objc_msgSend(v93, sel_orderedMergeWithOthers_comparator_, isa, v47);
  _Block_release(v47);

  char v48 = (void *)swift_allocObject();
  uint64_t v49 = MEMORY[0x263F8EE78];
  v48[2] = MEMORY[0x263F8EE78];
  v48[3] = v49;
  v48[4] = v49;
  v48[5] = v49;
  v48[6] = v49;
  v48[7] = v49;
  uint64_t v50 = (void *)swift_allocObject();
  uint64_t v51 = v90;
  v50[2] = v89;
  v50[3] = v51;
  v50[4] = v48;
  uint64_t v100 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:);
  long long v101 = v50;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v97 = 1107296256;
  uint64_t v98 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  unint64_t v99 = &block_descriptor_35;
  uint64_t v89 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  char v52 = v86;
  uint64_t v53 = v25;
  uint64_t v54 = v81;
  v81(v86, v91, v25);
  uint64_t v55 = v88;
  v54(v88, v84, v25);
  char v56 = v85;
  uint64_t v57 = *((unsigned __int8 *)v85 + 80);
  uint64_t v58 = (v57 + 24) & ~v57;
  uint64_t v59 = (v87 + v57 + v58) & ~v57;
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v48;
  uint64_t v61 = (void (*)(uint64_t, char *, uint64_t))v56[4];
  v61(v60 + v58, v52, v53);
  uint64_t v62 = v60 + v59;
  uint64_t v63 = v53;
  v61(v62, v55, v53);
  uint64_t v100 = partial apply for closure #3 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:);
  long long v101 = (void *)v60;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v97 = 1107296256;
  uint64_t v98 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> ();
  unint64_t v99 = &block_descriptor_41;
  uint64_t v64 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v65 = v69;
  uint64_t v66 = v89;
  id v67 = objc_msgSend(v69, sel_sinkWithCompletion_receiveInput_, v89, v64);
  _Block_release(v64);
  _Block_release(v66);

  ((void (*)(char *, uint64_t))v56[1])(v95, v63);
  return swift_release();
}

void *specialized static PSEBiomeEventsSourceFetcher.fetchAppIntentEventAfter(answerEvent:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  uint64_t v8 = (char *)&v38 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v38 - v16;
  id v18 = objc_msgSend(a1, sel_absoluteTimestamp);
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_5;
  }
  id v19 = v18;
  id v40 = a1;
  id v41 = v17;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v20(v10, v15, v11);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v21(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
LABEL_5:
    outlined destroy of Date?((uint64_t)v10);
    return 0;
  }
  uint64_t v22 = v41;
  v20(v41, v10, v11);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = 0;
  id v39 = (void **)(v23 + 16);
  type metadata accessor for BMPublisherOptions();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v8, v22, v11);
  v21(v8, 0, 1, v11);
  v21(v5, 1, 1, v11);
  id v24 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v8, (uint64_t)v5, 2, 0, 0);
  id v25 = objc_msgSend((id)BiomeLibrary(), sel_App);
  swift_unknownObjectRelease();
  id v26 = objc_msgSend(v25, sel_Intent);
  swift_unknownObjectRelease();
  id v27 = objc_msgSend(v26, sel_publisherWithOptions_, v24);
  uint64_t v46 = (void (*)(void *))AbstractActivityCollector.collect(callback:);
  uint64_t v47 = 0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v43 = 1107296256;
  id v44 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  uint64_t v45 = &block_descriptor_56;
  id v28 = _Block_copy(&aBlock);
  uint64_t v29 = swift_allocObject();
  id v30 = v40;
  *(void *)(v29 + 16) = v40;
  *(void *)(v29 + 24) = v23;
  uint64_t v46 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchAppIntentEventAfter(answerEvent:);
  uint64_t v47 = v29;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v43 = 1107296256;
  id v44 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  uint64_t v45 = &block_descriptor_62;
  id v31 = _Block_copy(&aBlock);
  id v32 = v30;
  swift_retain();
  swift_release();
  id v33 = objc_msgSend(v27, sel_sinkWithCompletion_receiveInput_, v28, v31);
  _Block_release(v31);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v41, v11);
  id v34 = v39;
  swift_beginAccess();
  id v35 = *v34;
  id v36 = v35;
  swift_release();
  return v35;
}

uint64_t specialized static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&aBlock - v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  type metadata accessor for BMPublisherOptions();
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a1, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  outlined init with copy of Date?(a2, (uint64_t)v7);
  id v13 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v9, (uint64_t)v7, 0, 0, 0);
  id v14 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_UI);
  swift_unknownObjectRelease();
  id v16 = objc_msgSend(v15, sel_publisherWithOptions_, v13);
  id v26 = (void (*)(void *))AbstractActivityCollector.collect(callback:);
  uint64_t v27 = 0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v23 = 1107296256;
  id v24 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  id v25 = &block_descriptor_47;
  uint64_t v17 = _Block_copy(&aBlock);
  id v26 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:);
  uint64_t v27 = v10;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v23 = 1107296256;
  id v24 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  id v25 = &block_descriptor_50;
  id v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v19 = objc_msgSend(v16, sel_sinkWithCompletion_receiveInput_, v17, v18);

  _Block_release(v18);
  _Block_release(v17);

  swift_beginAccess();
  uint64_t v20 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v20;
}

uint64_t type metadata accessor for PSEBiomeFetchConfiguration()
{
  uint64_t result = type metadata singleton initialization cache for PSEBiomeFetchConfiguration;
  if (!type metadata singleton initialization cache for PSEBiomeFetchConfiguration) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_224F2EFDC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

unint64_t type metadata accessor for BMPublisherOptions()
{
  unint64_t result = lazy cache variable for type metadata for BMPublisherOptions;
  if (!lazy cache variable for type metadata for BMPublisherOptions)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BMPublisherOptions);
  }
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_224F2F06C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchTranscriptEvents(startDate:endDate:)(void *a1)
{
  closure #2 in static PSEBiomeEventsSourceFetcher.fetchTranscriptEvents(startDate:endDate:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t specialized static PSEBiomeEventsSourceFetcher.isAssistantClient(bmEvent:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_identifiers);
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = objc_msgSend(v1, sel_clientApplicationId);

    if (v3)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      String.lowercased()();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type String and conformance String();
      LOBYTE(v2) = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      LOBYTE(v2) = 0;
    }
  }
  return v2 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for PSEBiomeFetchConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t destroy for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  return v7(v5, v4);
}

uint64_t initializeWithCopy for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_224F2F5A0);
}

uint64_t sub_224F2F5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_224F2F620);
}

uint64_t sub_224F2F620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PSEBiomeFetchConfiguration()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtendedBMClockAlarm()
{
  return &type metadata for ExtendedBMClockAlarm;
}

ValueMetadata *type metadata accessor for ExtendedBMHomeKitClientAccessory()
{
  return &type metadata for ExtendedBMHomeKitClientAccessory;
}

ValueMetadata *type metadata accessor for ExtendedBMMediaNowPlaying()
{
  return &type metadata for ExtendedBMMediaNowPlaying;
}

void *initializeBufferWithCopyOfBuffer for ExtendedBMAppIntent(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

void destroy for ExtendedBMAppIntent(id *a1)
{
}

uint64_t assignWithCopy for ExtendedBMAppIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ExtendedBMAppIntent(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ExtendedBMAppIntent()
{
  return &type metadata for ExtendedBMAppIntent;
}

ValueMetadata *type metadata accessor for ExtendedBMAppInFocus()
{
  return &type metadata for ExtendedBMAppInFocus;
}

ValueMetadata *type metadata accessor for ExtendedBMAppIntentInvocation()
{
  return &type metadata for ExtendedBMAppIntentInvocation;
}

uint64_t destroy for PSEBiomeEventsSource()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PSEBiomeEventsSource(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PSEBiomeEventsSource(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_OWORD *assignWithTake for PSEBiomeEventsSource(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PSEBiomeEventsSource(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PSEBiomeEventsSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PSEBiomeEventsSource()
{
  return &type metadata for PSEBiomeEventsSource;
}

uint64_t type metadata accessor for PSEBiomeEventsSourceFetcher()
{
  return self;
}

uint64_t method lookup function for PSEBiomeEventsSourceFetcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEBiomeEventsSourceFetcher);
}

uint64_t dispatch thunk of PSEBiomeEventsSourceFetcher.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(void *a1)
{
  closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(a1, v1);
}

uint64_t sub_224F2FB5C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_224F2FBBC()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(void *a1)
{
  closure #2 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(a1, *(void (**)(id, long long *))(v1 + 16), *(void *)(v1 + 24), *(_OWORD **)(v1 + 32));
}

uint64_t sub_224F2FC08()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);
  return MEMORY[0x270FA0238](v0, v8, v6);
}

uint64_t partial apply for closure #3 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = *(void **)(v1 + 16);
  uint64_t v7 = v1 + ((*(void *)(v3 + 64) + v4 + v5) & ~v4);
  return closure #3 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(a1, v6, v1 + v5, v7);
}

uint64_t outlined retain of [ExtendedBMAppIntent](uint64_t a1)
{
  return a1;
}

uint64_t outlined release of [ExtendedBMAppIntent](uint64_t a1)
{
  return a1;
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(void *a1)
{
  closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(a1, v1);
}

uint64_t sub_224F2FE54()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_224F2FE8C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchAppIntentEventAfter(answerEvent:)(void *a1)
{
  closure #2 in static PSEBiomeEventsSourceFetcher.fetchAppIntentEventAfter(answerEvent:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS8UTF8ViewV_s5UInt8Vs5NeverOTg5052_sSS18PostSiriEngagementE17encodeWithXorByte3keySSs5F12V_tFA2EXEfU_AITf1cn_n(unint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4 = a1;
  unint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_37;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
LABEL_5:
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v6) {
    return v7;
  }
  uint64_t v22 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = (v4 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0) {
      LOBYTE(v9) = 1;
    }
    uint64_t v10 = 4 << v9;
    uint64_t v11 = v4 & 0xFFFFFFFFFFFFLL;
    if ((a2 & 0x2000000000000000) != 0) {
      uint64_t v11 = v5;
    }
    unint64_t v20 = v11;
    unint64_t v12 = 15;
    uint64_t v18 = v4;
    while (1)
    {
      unint64_t v13 = v12;
      if ((v12 & 0xC) == v10) {
        unint64_t v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v4, a2);
      }
      unint64_t v14 = v13 >> 16;
      if (v13 >> 16 >= v20)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        uint64_t v6 = String.UTF8View._foreignCount()();
        goto LABEL_5;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        char v16 = String.UTF8View._foreignSubscript(position:)();
      }
      else if ((a2 & 0x2000000000000000) != 0)
      {
        v21[0] = v4;
        v21[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        char v16 = *((unsigned char *)v21 + v14);
      }
      else
      {
        uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v4 & 0x1000000000000000) == 0) {
          uint64_t v15 = _StringObject.sharedUTF8.getter();
        }
        char v16 = *(unsigned char *)(v15 + v14);
      }
      uint64_t v7 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v22;
      }
      unint64_t v5 = *(void *)(v7 + 16);
      unint64_t v17 = *(void *)(v7 + 24);
      if (v5 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v5 + 1, 1);
        uint64_t v7 = v22;
      }
      *(void *)(v7 + 16) = v5 + 1;
      *(unsigned char *)(v7 + v5 + 32) = v16 ^ a3;
      if ((v12 & 0xC) == v10)
      {
        unint64_t v4 = v18;
        unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v18, a2);
        if ((a2 & 0x1000000000000000) == 0) {
          goto LABEL_12;
        }
LABEL_29:
        if (v20 <= v12 >> 16) {
          goto LABEL_36;
        }
        unint64_t v12 = String.UTF8View._foreignIndex(after:)();
        if (!--v6) {
          return v7;
        }
      }
      else
      {
        unint64_t v4 = v18;
        if ((a2 & 0x1000000000000000) != 0) {
          goto LABEL_29;
        }
LABEL_12:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        if (!--v6) {
          return v7;
        }
      }
    }
  }
  __break(1u);
  return result;
}

BOOL static UnarchiveError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void UnarchiveError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int UnarchiveError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UnarchiveError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for Error._domain.getter in conformance UnarchiveError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance UnarchiveError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance UnarchiveError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance UnarchiveError()
{
  return MEMORY[0x270F9FB30]();
}

Swift::String __swiftcall String.encodeWithXorByte(key:)(Swift::UInt8 key)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v6 - 8);
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS8UTF8ViewV_s5UInt8Vs5NeverOTg5052_sSS18PostSiriEngagementE17encodeWithXorByte3keySSs5F12V_tFA2EXEfU_AITf1cn_n(v4, v3, key);
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  uint64_t v7 = String.init<A>(bytes:encoding:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v9) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = (void *)0xE000000000000000;
  }
  result._int64_t object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
  }
  return result;
}

void *TaskMetricsConst.commaDelimiter.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.commaDelimiter;
}

uint64_t static TaskMetricsConst.commaDelimiter.getter()
{
  return 46;
}

const char *TaskMetricsConst.unparsedIntent.unsafeMutableAddressor()
{
  return "UnparsedIntent";
}

uint64_t static TaskMetricsConst.unparsedIntent.getter()
{
  return 0x6465737261706E55;
}

void *TaskMetricsConst.taskTypePrefix.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.taskTypePrefix;
}

uint64_t static TaskMetricsConst.taskTypePrefix.getter()
{
  return 20041;
}

uint64_t static Utils.deltaTBetween(eventStart:siriUISession:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v38 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  ((void (*)(void))MEMORY[0x270FA5388])();
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  unint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  char v16 = (char *)&v37 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v37 - v17;
  id v19 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v19((char *)&v37 - v17, a2, v9);
  uint64_t v20 = type metadata accessor for SiriUISession(0);
  v19(v16, a2 + *(int *)(v20 + 20), v9);
  outlined init with copy of Date?(v38, (uint64_t)v8);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (v21 == 1)
  {
    id v36 = *(void (**)(char *, uint64_t))(v10 + 8);
    v36(v16, v9);
    v36(v18, v9);
    uint64_t result = outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Date?);
    uint64_t v34 = 0x3FF0000000000000;
    uint64_t v23 = 0;
    double v27 = 0.0;
    double v35 = 0.0;
    a4 = 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v23 = v22;
    Date.timeIntervalSinceReferenceDate.getter();
    double v25 = v24;
    Date.timeIntervalSinceReferenceDate.getter();
    double v27 = v25 - v26;
    Date.timeIntervalSinceReferenceDate.getter();
    double v29 = v28;
    Date.timeIntervalSinceReferenceDate.getter();
    double v31 = v30;
    id v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v13, v9);
    v32(v16, v9);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v32)(v18, v9);
    uint64_t v34 = 0;
    double v35 = v29 - v31;
  }
  *(void *)a3 = v23;
  *(double *)(a3 + 8) = v27;
  *(double *)(a3 + 16) = v35;
  *(double *)(a3 + 24) = a4;
  *(void *)(a3 + 32) = v34;
  *(unsigned char *)(a3 + 40) = v21 != 1;
  return result;
}

uint64_t static Utils.deriveEngagmentType(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ReliabilityCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 0xD000000000000011 && a2 == (void *)0x8000000224F68730
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000016 && a2 == (void *)0x8000000224F68750
    || ((char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000016)
      ? (BOOL v16 = a2 == (void *)0x8000000224F68770)
      : (BOOL v16 = 0),
        !v16 ? (char v17 = 0) : (char v17 = 1),
        (v15 & 1) != 0 || (v17 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74F88];
LABEL_7:
    uint64_t v11 = *v10;
    uint64_t v12 = type metadata accessor for ProtoTaskEngagementType();
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);
    return v13(a3, v11, v12);
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000224F68790
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74F58];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000224F687B0
    || ((char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000013)
      ? (BOOL v19 = a2 == (void *)0x8000000224F687D0)
      : (BOOL v19 = 0),
        !v19 ? (char v20 = 0) : (char v20 = 1),
        (v18 & 1) != 0 || (v20 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74F48];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000224F67A80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74F60];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000224F67AA0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74F70];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000224F687F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74F50];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000018 && a2 == (void *)0x8000000224F68810
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74F90];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000010 && a2 == (void *)0x8000000224F68830
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74F78];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000011 && a2 == (void *)0x8000000224F68850
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74FA0];
    goto LABEL_7;
  }
  if (a1 == 0x7370616D4E49 && a2 == (void *)0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F74F80];
    goto LABEL_7;
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.engagement);
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v22._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
  v22._int64_t object = (void *)0x8000000224F68870;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = a1;
  v23._int64_t object = a2;
  String.append(_:)(v23);
  uint64_t v24 = v30;
  unint64_t v25 = v31;
  uint64_t v26 = *MEMORY[0x263F74FF0];
  uint64_t v27 = type metadata accessor for EngagementFeaturizationError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v9, v26, v27);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F75110], v6);
  Logger.error(_:_:)(v24, v25, (uint64_t)v9);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v28 = *MEMORY[0x263F74F68];
  uint64_t v29 = type metadata accessor for ProtoTaskEngagementType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(a3, v28, v29);
}

id static Utils.isDiagnosticsSubmissionAllowed()()
{
  id result = objc_msgSend(self, sel_sharedConnection);
  if (result)
  {
    unint64_t v1 = result;
    unsigned int v2 = objc_msgSend(result, sel_effectiveBoolValueForSetting_, *MEMORY[0x263F53878]);

    return (id)(v2 == 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static Utils.isFirstPartyAppDonation(bundleId:)()
{
  return StringProtocol.contains<A>(_:)() & 1;
}

void static Utils.extractInteraction(fromAppIntentEvent:)(void *a1)
{
  unsigned int v2 = (void *)MEMORY[0x22A6277A0]();
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, &v3);
}

void closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v4 = type metadata accessor for ReliabilityCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)type metadata accessor for Logger();
  uint64_t v9 = *(v8 - 1);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(a1, sel_interaction);
  if (v12)
  {
    unint64_t v13 = v12;
    char v52 = v11;
    uint64_t v53 = v5;
    uint64_t v54 = v9;
    uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    id v17 = objc_allocWithZone(MEMORY[0x263F08928]);
    outlined copy of Data._Representation(v14, v16);
    char v18 = (uint64_t *)specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)();
    outlined consume of Data._Representation(v14, v16);
    if (v2)
    {
LABEL_3:
      outlined consume of Data._Representation(v14, v16);
      return;
    }
    uint64_t v51 = v4;
    type metadata accessor for INInteraction();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = NSCoder.decodeObject<A>(of:forKey:)();
    swift_bridgeObjectRelease();
    if (!v33)
    {
      uint64_t v57 = v18;
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v34 = __swift_project_value_buffer((uint64_t)v8, (uint64_t)static Logger.engagement);
      double v35 = v52;
      (*(void (**)(char *, uint64_t, uint64_t *))(v54 + 16))(v52, v34, v8);
      uint64_t v55 = 0;
      unint64_t v56 = 0xE000000000000000;
      _StringGuts.grow(_:)(78);
      v36._uint64_t countAndFlagsBits = 0xD00000000000004CLL;
      v36._int64_t object = (void *)0x8000000224F68990;
      String.append(_:)(v36);
      id v37 = a1;
      id v38 = objc_msgSend(v37, sel_description);
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v41 = v40;

      v42._uint64_t countAndFlagsBits = v39;
      v42._int64_t object = v41;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      unint64_t v43 = v56;
      uint64_t v50 = v55;
      uint64_t v44 = *MEMORY[0x263F75138];
      uint64_t v45 = type metadata accessor for AppIntentEventDataIssues();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 104))(v7, v44, v45);
      uint64_t v46 = v53;
      uint64_t v47 = v51;
      (*(void (**)(char *, void, uint64_t))(v53 + 104))(v7, *MEMORY[0x263F750E8], v51);
      Logger.error(_:_:)(v50, v43, (uint64_t)v7);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v47);
      (*(void (**)(char *, uint64_t *))(v54 + 8))(v35, v8);
      lazy protocol witness table accessor for type UnarchiveError and conformance UnarchiveError();
      swift_allocError();
      *char v48 = 0;
      swift_willThrow();

      goto LABEL_3;
    }
    outlined consume of Data._Representation(v14, v16);

    *uint64_t v57 = v33;
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v19 = __swift_project_value_buffer((uint64_t)v8, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t *))(v9 + 16))(v11, v19, v8);
    uint64_t v55 = 0;
    unint64_t v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v20._int64_t object = (void *)0x8000000224F68950;
    v20._uint64_t countAndFlagsBits = 0xD000000000000033;
    String.append(_:)(v20);
    id v21 = a1;
    id v22 = objc_msgSend(v21, sel_description);
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v8;
    uint64_t v24 = v9;
    uint64_t v26 = v25;

    v27._uint64_t countAndFlagsBits = v23;
    v27._int64_t object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    uint64_t v28 = v55;
    unint64_t v29 = v56;
    uint64_t v30 = *MEMORY[0x263F75138];
    uint64_t v31 = type metadata accessor for AppIntentEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v7, v30, v31);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F750E8], v4);
    Logger.error(_:_:)(v28, v29, (uint64_t)v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t *))(v24 + 8))(v11, v57);
    lazy protocol witness table accessor for type UnarchiveError and conformance UnarchiveError();
    swift_allocError();
    *id v32 = 1;
    swift_willThrow();
  }
}

uint64_t Utils.deinit()
{
  return v0;
}

uint64_t Utils.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t Utils.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t Utils.init()()
{
  return v0;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x22A627060](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t specialized static Utils.formulateIntentTypeName(intentTypeName:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ReliabilityCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a1;
  unint64_t v26 = (unint64_t)a2;
  v24[0] = 46;
  v24[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v8 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v8 + 16 * v9;
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t v11 = *(void **)(v10 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 20041;
    v13._int64_t object = (void *)0xE200000000000000;
    if (!String.hasPrefix(_:)(v13))
    {
      uint64_t v25 = 20041;
      unint64_t v26 = 0xE200000000000000;
      v14._uint64_t countAndFlagsBits = v12;
      v14._int64_t object = v11;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      return v25;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.engagement);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(109);
    v16._uint64_t countAndFlagsBits = 0xD000000000000048;
    v16._int64_t object = (void *)0x8000000224F688D0;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = a1;
    v17._int64_t object = a2;
    String.append(_:)(v17);
    v18._int64_t object = (void *)0x8000000224F68920;
    v18._uint64_t countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v18);
    uint64_t v19 = v25;
    unint64_t v20 = v26;
    uint64_t v21 = *MEMORY[0x263F74FE0];
    uint64_t v22 = type metadata accessor for SiriExecutionEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v7, v21, v22);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F75108], v4);
    Logger.error(_:_:)(v19, v20, (uint64_t)v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0x6465737261706E55;
  }
  return v12;
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t specialized static Utils.normalizedAlarmIdentifier(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for URLQueryItem();
  uint64_t v7 = *(void *)(v50 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v50);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  Swift::String v13 = (char *)&v42 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v42 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  MEMORY[0x270FA5388](v16 - 8);
  Swift::String v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  URLComponents.init(string:)();
  uint64_t v19 = type metadata accessor for URLComponents();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for URLComponents?);
    uint64_t v21 = v50;
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v6, 1, 1, v21);
    goto LABEL_19;
  }
  char v52 = v10;
  uint64_t v44 = v15;
  uint64_t v22 = URLComponents.queryItems.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  uint64_t v21 = v50;
  if (!v22) {
    goto LABEL_18;
  }
  uint64_t v24 = MEMORY[0x263F8EE78];
  uint64_t v53 = MEMORY[0x263F8EE78];
  uint64_t v49 = *(void *)(v22 + 16);
  if (!v49)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    id v37 = v44;
    if (*(void *)(v24 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v6, v24 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v21);
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v38 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v6, v38, 1, v21);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v21) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v37, v6, v21);
      uint64_t v39 = URLQueryItem.value.getter();
      uint64_t v41 = v40;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v21);
      if (v41) {
        return v39;
      }
LABEL_20:
      swift_bridgeObjectRetain();
      return v46;
    }
LABEL_19:
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for URLQueryItem?);
    goto LABEL_20;
  }
  unint64_t v43 = v6;
  unint64_t v25 = 0;
  uint64_t v48 = v7 + 16;
  uint64_t v45 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t v51 = (uint64_t (**)(unint64_t))(v7 + 32);
  while (v25 < *(void *)(v22 + 16))
  {
    unint64_t v26 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v27 = *(void *)(v7 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v13, v22 + v26 + v27 * v25, v21);
    if (URLQueryItem.name.getter() == 25705 && v28 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      uint64_t v30 = v22;
      uint64_t v31 = v7;
      id v32 = *v51;
      ((void (*)(char *, char *, uint64_t))*v51)(v52, v13, v21);
      uint64_t v33 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v33 + 16) + 1, 1);
        uint64_t v33 = v53;
      }
      unint64_t v35 = *(void *)(v33 + 16);
      unint64_t v34 = *(void *)(v33 + 24);
      if (v35 >= v34 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        uint64_t v33 = v53;
      }
      *(void *)(v33 + 16) = v35 + 1;
      unint64_t v36 = v33 + v26 + v35 * v27;
      uint64_t v21 = v50;
      uint64_t result = v32(v36);
      uint64_t v53 = v33;
      uint64_t v7 = v31;
      uint64_t v22 = v30;
      goto LABEL_7;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_13;
    }
    uint64_t result = (*v45)(v13, v21);
LABEL_7:
    if (v49 == ++v25)
    {
      uint64_t v24 = v53;
      uint64_t v6 = v43;
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UnarchiveError and conformance UnarchiveError()
{
  unint64_t result = lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError;
  if (!lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError;
  if (!lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UnarchiveError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UnarchiveError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224F32028);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for UnarchiveError(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UnarchiveError()
{
  return &type metadata for UnarchiveError;
}

ValueMetadata *type metadata accessor for TaskMetricsConst()
{
  return &type metadata for TaskMetricsConst;
}

uint64_t type metadata accessor for Utils()
{
  return self;
}

uint64_t method lookup function for Utils(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Utils);
}

uint64_t dispatch thunk of static Utils.deltaTBetween(eventStart:siriUISession:duration:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static Utils.formulateIntentTypeName(intentTypeName:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static Utils.deriveEngagmentType(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static Utils.isDiagnosticsSubmissionAllowed()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static Utils.isFirstPartyAppDonation(bundleId:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static Utils.extractInteraction(fromAppIntentEvent:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of static Utils.normalizedAlarmIdentifier(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of Utils.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

unint64_t type metadata accessor for INInteraction()
{
  unint64_t result = lazy cache variable for type metadata for INInteraction;
  if (!lazy cache variable for type metadata for INInteraction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INInteraction);
  }
  return result;
}

uint64_t UserDefaultsDomainProvider.lastCollectionDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v42 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  BOOL v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v39 - v8;
  Date.init(timeIntervalSinceNow:)();
  uint64_t v10 = *(void **)(v1 + 16);
  if (v10)
  {
    swift_beginAccess();
    uint64_t v11 = *(void *)(v2 + 40);
    uint64_t v12 = *(void *)(v2 + 48);
    swift_bridgeObjectRetain();
    Swift::String v13 = (void *)MEMORY[0x22A626F60](v11, v12);
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v10, sel_valueForKey_, v13);

    if (v14)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v43, 0, sizeof(v43));
    }
    outlined init with take of Any?((uint64_t)v43, (uint64_t)&v45);
    if (*((void *)&v46 + 1))
    {
      outlined destroy of Any?((uint64_t)&v45);
      uint64_t v15 = *(void *)(v2 + 40);
      uint64_t v16 = *(void *)(v2 + 48);
      swift_bridgeObjectRetain();
      uint64_t v17 = (void *)MEMORY[0x22A626F60](v15, v16);
      swift_bridgeObjectRelease();
      objc_msgSend(v10, sel_doubleForKey_, v17);
      uint64_t v19 = v18;

      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.engagement);
      swift_retain();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        *(void *)&long long v45 = v40;
        *(_DWORD *)uint64_t v23 = 136315394;
        uint64_t v41 = v4;
        uint64_t v24 = *(void *)(v2 + 40);
        unint64_t v25 = *(void *)(v2 + 48);
        swift_bridgeObjectRetain();
        *(void *)&v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2048;
        *(void *)&v43[0] = v19;
        uint64_t v4 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_224EDB000, v21, v22, "The userdefault has key %s with the value %f", (uint8_t *)v23, 0x16u);
        uint64_t v26 = v40;
        swift_arrayDestroy();
        MEMORY[0x22A627DB0](v26, -1, -1);
        MEMORY[0x22A627DB0](v23, -1, -1);
      }
      else
      {

        swift_release();
      }
      Date.init(timeIntervalSinceReferenceDate:)();
      lazy protocol witness table accessor for type Date and conformance Date();
      if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
        id v37 = v7;
      }
      else {
        id v37 = v9;
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v42, v37, v3);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v4 + 8);
      v38(v7, v3);
      return ((uint64_t (*)(char *, uint64_t))v38)(v9, v3);
    }
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v45);
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.engagement);
  swift_retain();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v40 = v3;
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(void *)&v43[0] = v31;
    uint64_t v41 = v4;
    *(_DWORD *)uint64_t v30 = 136315138;
    swift_beginAccess();
    id v32 = v9;
    uint64_t v34 = *(void *)(v2 + 40);
    unint64_t v33 = *(void *)(v2 + 48);
    swift_bridgeObjectRetain();
    uint64_t v35 = v34;
    uint64_t v9 = v32;
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v33, (uint64_t *)v43);
    uint64_t v4 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v3 = v40;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_224EDB000, v28, v29, "The userdefault contained no value for %s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A627DB0](v31, -1, -1);
    MEMORY[0x22A627DB0](v30, -1, -1);
  }
  else
  {

    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v42, v9, v3);
}

uint64_t UserDefaultsDomainProvider.__allocating_init(collectorIdentifier:domain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  UserDefaultsDomainProvider.init(collectorIdentifier:domain:)(a1, a2, a3, a4);
  return v8;
}

uint64_t UserDefaultsDomainProvider.lastCollectionDate.setter(uint64_t a1)
{
  unint64_t v3 = v1[4];
  uint64_t v4 = v1[3] & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(v3) & 0xF;
  }
  if (v4)
  {
    uint64_t v5 = v1;
    Date.timeIntervalSinceReferenceDate.getter();
    double v7 = v6;
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
    swift_retain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v33[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315394;
      swift_beginAccess();
      uint64_t v13 = v1[5];
      unint64_t v14 = v1[6];
      swift_bridgeObjectRetain();
      double v34 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v33));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2048;
      double v34 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_224EDB000, v9, v10, "Set key %s to %f", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v12, -1, -1);
      MEMORY[0x22A627DB0](v11, -1, -1);

      uint64_t v15 = (void *)v1[2];
      if (v15)
      {
LABEL_8:
        swift_beginAccess();
        uint64_t v16 = v1[5];
        uint64_t v17 = v5[6];
        id v18 = v15;
        swift_bridgeObjectRetain();
        uint64_t v19 = MEMORY[0x22A626F60](v16, v17);
        swift_bridgeObjectRelease();
        objc_msgSend(v18, sel_setDouble_forKey_, v19, v7);

LABEL_20:
        uint64_t v32 = type metadata accessor for Date();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a1, v32);
      }
    }
    else
    {

      swift_release();
      uint64_t v15 = (void *)v1[2];
      if (v15) {
        goto LABEL_8;
      }
    }
    swift_retain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      double v34 = *(double *)&v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_beginAccess();
      uint64_t v30 = v5[5];
      unint64_t v31 = v5[6];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224EDB000, v19, v27, "Fail to set key %s due to empty userdefaults", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v29, -1, -1);
      MEMORY[0x22A627DB0](v28, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    goto LABEL_20;
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.engagement);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_224EDB000, v21, v22, "Skip userDefault set due to empty identifier", v23, 2u);
    MEMORY[0x22A627DB0](v23, -1, -1);
  }

  uint64_t v24 = type metadata accessor for Date();
  unint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8);
  return v25(a1, v24);
}

uint64_t UserDefaultsDomainProvider.userDefaultsKey.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UserDefaultsDomainProvider.userDefaultsKey.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*UserDefaultsDomainProvider.userDefaultsKey.modify())()
{
  return NowPlayingSignalFactory.postEndDate.modify;
}

void *UserDefaultsDomainProvider.init(collectorIdentifier:domain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v10 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v11 = (void *)MEMORY[0x22A626F60](a3, a4);
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v10, sel_initWithSuiteName_, v11);

  v5[2] = v12;
  v5[3] = a1;
  v5[4] = a2;
  swift_bridgeObjectRetain();
  v13._int64_t object = (void *)0x8000000224F67C30;
  v13._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v13);
  v5[5] = a1;
  v5[6] = a2;
  return v5;
}

uint64_t key path setter for UserDefaultsDomainProvider.lastCollectionDate : UserDefaultsDomainProvider(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v4);
}

void (*UserDefaultsDomainProvider.lastCollectionDate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for Date();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[4] = v7;
  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)v7);
  return UserDefaultsDomainProvider.lastCollectionDate.modify;
}

void UserDefaultsDomainProvider.lastCollectionDate.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    UserDefaultsDomainProvider.lastCollectionDate.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t UserDefaultsDomainProvider.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t UserDefaultsDomainProvider.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t sub_224F331F8@<X0>(uint64_t a1@<X8>)
{
  return UserDefaultsDomainProvider.lastCollectionDate.getter(a1);
}

uint64_t type metadata accessor for UserDefaultsDomainProvider()
{
  return self;
}

uint64_t method lookup function for UserDefaultsDomainProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for UserDefaultsDomainProvider);
}

uint64_t dispatch thunk of UserDefaultsDomainProvider.__allocating_init(collectorIdentifier:domain:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void PSEAppIntentTranscriptSELFEmitter.emitPSEAppIntentTranscript(appIntentTranscriptSignals:appLaunchSignals:task:)(unint64_t a1, unint64_t a2, void *a3)
{
  id v4 = v3;
  unint64_t v193 = (unint64_t)a3;
  uint64_t v7 = type metadata accessor for ReliabilityCategory();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  id v190 = (char *)&v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v188 = (char *)&v168 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v189 = (char *)&v168 - v16;
  uint64_t v17 = (void *)type metadata accessor for UUID();
  uint64_t v192 = (void (**)(char *, uint64_t, void *))*(v17 - 1);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v168 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v186 = (char *)&v168 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v187 = (char *)&v168 - v24;
  MEMORY[0x270FA5388](v23);
  char v191 = (char *)&v168 - v25;
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB10]), sel_init);
  if (v26)
  {
    os_log_type_t v27 = (void (*)(void, void))v26;
    id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB18]), sel_init);
    if (v28)
    {
      id v185 = v28;
      id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EAF8]), sel_init);
      if (v29)
      {
        id v183 = v29;
        id v184 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB20]), sel_init);
        if (v184)
        {
          id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EAF0]), sel_init);
          if (v30)
          {
            unint64_t v31 = v30;
            uint64_t v182 = a1;
            uint64_t v180 = v7;
            uint64_t v177 = (uint64_t (*)(void))(a1 >> 62);
            if (a1 >> 62)
            {
              id v179 = v4;
              id v164 = v30;
              swift_bridgeObjectRetain();
              unint64_t v31 = v164;
              id v4 = v179;
              uint64_t v32 = (unsigned int *)_CocoaArrayWrapper.endIndex.getter();
              if (v32)
              {
LABEL_8:
                uint64_t v33 = v182;
                uint64_t v169 = (uint64_t (*)(void))(v182 & 0xC000000000000001);
                id v181 = v31;
                if ((v182 & 0xC000000000000001) != 0)
                {
                  uint64_t v34 = MEMORY[0x22A627400](0, v182);
                }
                else
                {
                  if (!*(void *)((v182 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  {
                    __break(1u);
                    goto LABEL_112;
                  }
                  uint64_t v34 = *(void *)(v182 + 32);
                  swift_retain();
                }
                uint64_t v35 = swift_bridgeObjectRelease();
                (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v34 + 120))(&v196, v35);
                id v36 = objc_msgSend(v184, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v196);
                id v37 = *(uint64_t (**)(void))(*(void *)v34 + 216);
                uint64_t v38 = *(void *)v34 + 216;
                uint64_t v178 = v34;
                char v176 = v37;
                uint64_t v175 = (void (*)(void, void))v38;
                uint64_t v39 = ((uint64_t (*)(id))v37)(v36);
                uint64_t v40 = *(void *)(v39 + 16);
                char v174 = v17;
                id v179 = v4;
                char v172 = v20;
                if (v40
                  && (unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F68A90),
                      (v42 & 1) != 0))
                {
                  outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v41, (uint64_t)&v196);
                  swift_bridgeObjectRelease();
                  if (*((void *)&v197 + 1))
                  {
                    uint64_t v43 = swift_dynamicCast();
                    if (v43)
                    {
                      uint64_t v44 = v194;
                      uint64_t v45 = v195;
                      uint64_t v46 = v178;
                      goto LABEL_23;
                    }
LABEL_22:
                    uint64_t v46 = v178;
                    uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v178 + 144))(v43);
                    uint64_t v45 = v47;
LABEL_23:
                    uint64_t v48 = (void *)MEMORY[0x22A626F60](v44, v45);
                    swift_bridgeObjectRelease();
                    id v49 = v184;
                    objc_msgSend(v184, sel_setDomain_, v48);

                    uint64_t v50 = (*(uint64_t (**)(void))(*(void *)v46 + 168))();
                    uint64_t v51 = (void *)MEMORY[0x22A626F60](v50);
                    swift_bridgeObjectRelease();
                    objc_msgSend(v49, sel_setAction_, v51);

                    uint64_t v52 = v176();
                    if (*(void *)(v52 + 16))
                    {
                      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379);
                      id v4 = v179;
                      uint64_t v20 = (char *)v192;
                      if (v54)
                      {
                        outlined init with copy of Any(*(void *)(v52 + 56) + 32 * v53, (uint64_t)&v196);
                      }
                      else
                      {
                        long long v196 = 0u;
                        long long v197 = 0u;
                      }
                      uint64_t v17 = v184;
                    }
                    else
                    {
                      long long v196 = 0u;
                      long long v197 = 0u;
                      uint64_t v17 = v184;
                      id v4 = v179;
                      uint64_t v20 = (char *)v192;
                    }
                    swift_bridgeObjectRelease();
                    if (*((void *)&v197 + 1))
                    {
                      if (swift_dynamicCast()) {
                        uint64_t v55 = v194;
                      }
                      else {
                        uint64_t v55 = 2;
                      }
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v196, &demangling cache variable for type metadata for Any?);
                      uint64_t v55 = 2;
                    }
                    objc_msgSend(v17, sel_setIsDonatedBySiri_, (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v55));
                    if (!(a2 >> 62))
                    {
                      uint64_t v56 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      swift_bridgeObjectRetain();
                      goto LABEL_36;
                    }
LABEL_112:
                    swift_bridgeObjectRetain();
                    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
LABEL_36:
                    uint64_t v173 = v27;
                    if (v56)
                    {
                      if ((a2 & 0xC000000000000001) != 0)
                      {
                        uint64_t v57 = MEMORY[0x22A627400](0, a2);
                      }
                      else
                      {
                        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
                        {
                          __break(1u);
                          goto LABEL_115;
                        }
                        uint64_t v57 = *(void *)(a2 + 32);
                        swift_retain();
                      }
                      uint64_t v58 = swift_bridgeObjectRelease();
                      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v57 + 120))(&v196, v58);
                      uint64_t v59 = (*(uint64_t (**)(id))(*(void *)v57 + 216))(objc_msgSend(v17, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v196));
                      if (*(void *)(v59 + 16)
                        && (unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F66680), (v61 & 1) != 0))
                      {
                        outlined init with copy of Any(*(void *)(v59 + 56) + 32 * v60, (uint64_t)&v196);
                      }
                      else
                      {
                        long long v196 = 0u;
                        long long v197 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((void *)&v197 + 1))
                      {
                        int v62 = swift_dynamicCast();
                        uint64_t v63 = (uint64_t (*)(id))v194;
                        if (!v62) {
                          uint64_t v63 = 0;
                        }
                        uint64_t v171 = v63;
                        if (v62) {
                          uint64_t v33 = v195;
                        }
                        else {
                          uint64_t v33 = 0;
                        }
                      }
                      else
                      {
                        outlined destroy of Any?((uint64_t)&v196, &demangling cache variable for type metadata for Any?);
                        uint64_t v171 = 0;
                        uint64_t v33 = 0;
                      }
                      uint64_t v66 = v193 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
                      id v67 = (void *)(*(uint64_t (**)(void))(*(void *)v193 + 224))();
                      if (v67[2])
                      {
                        uint64_t v68 = v67[4];
                        uint64_t v69 = v67[5];
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        uint64_t v68 = 0;
                        uint64_t v69 = 0;
                      }
                      swift_bridgeObjectRelease();
                      uint64_t v70 = (*(uint64_t (**)(uint64_t (*)(id), uint64_t, uint64_t, uint64_t))(*(void *)v4 + 120))(v171, v33, v68, v69);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      id v71 = v4;
                      id v4 = v184;
                      uint64_t v72 = (*(uint64_t (**)(id))(*(void *)v57 + 168))(objc_msgSend(v184, sel_setAppFollowup_, v70));
                      uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 136))(v72);
                      swift_bridgeObjectRelease();
                      objc_msgSend(v4, sel_setAppLaunchReason_, v73);
                      id v64 = (id)swift_release();
                      os_log_type_t v27 = (void (*)(void, void))v66;
                      uint64_t v20 = (char *)v192;
                      id v65 = (void *)v193;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      id v64 = objc_msgSend(v17, sel_setAppFollowup_, 3);
                      id v65 = (void *)v193;
                      os_log_type_t v27 = (void (*)(void, void))(v193 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000);
                    }
                    id v74 = (uint64_t (**)(id))(*v65 + 296);
                    uint64_t v171 = *v74;
                    char v170 = v74;
                    uint64_t v75 = v171(v64);
                    int v76 = (*(unsigned __int8 (**)(uint64_t))(*(void *)v75 + 104))(v75);
                    swift_release();
                    objc_msgSend(v181, sel_setIsSiriResultUseful_, v76 == 3);
                    if (v177)
                    {
                      uint64_t v33 = v182;
                      swift_bridgeObjectRetain();
                      uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      uint64_t v77 = *(void *)((v182 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    }
                    uint64_t v17 = v184;
                    if (v77 < 2) {
                      goto LABEL_76;
                    }
                    unint64_t v78 = (unint64_t)v32 - 1;
                    if (!__OFSUB__(v32, 1))
                    {
                      uint64_t v79 = v182;
                      if (v169)
                      {
                        swift_bridgeObjectRetain();
                        uint64_t v80 = MEMORY[0x22A627400]((char *)v32 - 1, v79);
                        uint64_t v81 = swift_bridgeObjectRelease();
                        goto LABEL_66;
                      }
                      if ((v78 & 0x8000000000000000) != 0)
                      {
                        __break(1u);
                      }
                      else if (v78 < *(void *)((v182 & 0xFFFFFFFFFFFFFF8) + 0x10))
                      {
                        uint64_t v80 = *(void *)(v182 + 8 * v78 + 32);
                        uint64_t v81 = swift_retain();
LABEL_66:
                        uint64_t v82 = (*(void *(**)(long long *__return_ptr, uint64_t))(*(void *)v80 + 120))(&v196, v81);
                        if (*((double *)&v196 + 1) <= 30.0)
                        {
                          id v83 = *(uint64_t (**)(void))(*(void *)v80 + 216);
                          uint64_t v84 = *(void *)v80 + 216;
                          uint64_t v85 = ((uint64_t (*)(void *, double))v83)(v82, *((double *)&v196 + 1));
                          if (*(void *)(v85 + 16)
                            && (unint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v87 & 1) != 0))
                          {
                            outlined init with copy of Any(*(void *)(v85 + 56) + 32 * v86, (uint64_t)&v196);
                          }
                          else
                          {
                            long long v196 = 0u;
                            long long v197 = 0u;
                          }
                          swift_bridgeObjectRelease();
                          if (!*((void *)&v197 + 1))
                          {
                            swift_release();
                            outlined destroy of Any?((uint64_t)&v196, &demangling cache variable for type metadata for Any?);
                            goto LABEL_76;
                          }
                          if ((swift_dynamicCast() & 1) != 0 && (v194 & 1) == 0)
                          {
                            id v147 = objc_msgSend(v17, sel_setHasUserInitiatedFollowup_, 1);
                            uint64_t v169 = *(uint64_t (**)(void))(*(void *)v80 + 168);
                            uint64_t v177 = v83;
                            uint64_t v148 = ((uint64_t (*)(id))v169)(v147);
                            uint64_t v149 = (void *)MEMORY[0x22A626F60](v148);
                            swift_bridgeObjectRelease();
                            uint64_t v182 = v84;
                            id v150 = v181;
                            objc_msgSend(v181, sel_setAppIntentName_, v149);

                            uint64_t v151 = v169();
                            unint64_t v152 = v177;
                            uint64_t v153 = (*(uint64_t (**)(uint64_t))(*(void *)v179 + 168))(v151);
                            swift_bridgeObjectRelease();
                            uint64_t v154 = ((uint64_t (*)(id))v152)(objc_msgSend(v150, sel_setFollowUpActionType_, v153));
                            if (*(void *)(v154 + 16)
                              && (unint64_t v155 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000224F66760), (v156 & 1) != 0))
                            {
                              outlined init with copy of Any(*(void *)(v154 + 56) + 32 * v155, (uint64_t)&v196);
                            }
                            else
                            {
                              long long v196 = 0u;
                              long long v197 = 0u;
                            }
                            swift_bridgeObjectRelease();
                            if (*((void *)&v197 + 1))
                            {
                              int v157 = swift_dynamicCast();
                              id v158 = v181;
                              if (v157) {
                                uint64_t v159 = v194;
                              }
                              else {
                                uint64_t v159 = 0;
                              }
                            }
                            else
                            {
                              outlined destroy of Any?((uint64_t)&v196, &demangling cache variable for type metadata for Any?);
                              uint64_t v159 = 0;
                              id v158 = v181;
                            }
                            id v160 = objc_msgSend(v158, sel_setIsFirstPartyApp_, v159);
                            uint64_t v161 = ((uint64_t (*)(id))v176)(v160);
                            uint64_t v162 = v152();
                            uint64_t v163 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v179 + 160))(v161, v162);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            objc_msgSend(v158, sel_setFollowUpEntityComparison_, v163);
                            swift_release();
                            uint64_t v17 = v184;
LABEL_77:
                            id v88 = v183;
                            objc_msgSend(v183, sel_setCommonSignal_, v17);
                            objc_msgSend(v88, sel_setEngagementSignal_, v181);
                            uint64_t v89 = v191;
                            UUID.init()();
                            id v90 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                            Class isa = UUID._bridgeToObjectiveC()().super.isa;
                            id v92 = objc_msgSend(v90, sel_initWithNSUUID_, isa);

                            id v93 = v20;
                            long long v96 = (uint64_t (*)(char *, void *))*((void *)v20 + 1);
                            id v94 = v20 + 8;
                            uint64_t v95 = v96;
                            uint64_t v97 = v174;
                            v96(v89, v174);
                            id v98 = v185;
                            objc_msgSend(v185, sel_setPseId_, v92);

                            unint64_t v99 = v97;
                            uint64_t v100 = *(void *)v193;
                            uint64_t v175 = v27;
                            (*(void (**)(void))(v100 + 152))();
                            uint64_t v101 = (uint64_t)v189;
                            UUID.init(uuidString:)();
                            uint64_t v102 = v101;
                            swift_bridgeObjectRelease();
                            uint64_t v182 = *((void *)v93 + 6);
                            int v103 = ((uint64_t (*)(uint64_t, uint64_t, void *))v182)(v101, 1, v99);
                            char v176 = (uint64_t (*)(void))v96;
                            if (v103 == 1)
                            {
                              uint64_t v104 = v99;
                              uint64_t v105 = v94;
                              uint64_t v106 = outlined destroy of Any?(v101, &demangling cache variable for type metadata for UUID?);
                            }
                            else
                            {
                              uint64_t v107 = v187;
                              (*((void (**)(char *, uint64_t, void *))v93 + 4))(v187, v102, v99);
                              id v108 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                              Class v109 = UUID._bridgeToObjectiveC()().super.isa;
                              id v110 = objc_msgSend(v108, sel_initWithNSUUID_, v109);

                              objc_msgSend(v98, sel_setUiSessionId_, v110);
                              uint64_t v104 = v99;
                              uint64_t v105 = v94;
                              uint64_t v106 = v95(v107, v99);
                            }
                            unint64_t v111 = v193;
                            uint64_t v112 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v193 + 200))(v106) + 16);
                            uint64_t v177 = (uint64_t (*)(void))v105;
                            if (v112)
                            {
                              uint64_t v113 = v104;
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRelease();
                              uint64_t v114 = (uint64_t)v188;
                              UUID.init(uuidString:)();
                              swift_bridgeObjectRelease();
                              if (((unsigned int (*)(uint64_t, uint64_t, void *))v182)(v114, 1, v104) != 1)
                              {
                                uint64_t v119 = v186;
                                v192[4](v186, v114, v113);
                                id v120 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                                Class v121 = UUID._bridgeToObjectiveC()().super.isa;
                                id v122 = objc_msgSend(v120, sel_initWithNSUUID_, v121);

                                objc_msgSend(v185, sel_setOriginalLastRequestId_, v122);
                                uint64_t v118 = ((uint64_t (*)(char *, void *))v176)(v119, v113);
                                unint64_t v111 = v193;
                                uint64_t v33 = v180;
                                uint64_t v32 = (unsigned int *)MEMORY[0x263F75118];
                                goto LABEL_88;
                              }
                              outlined destroy of Any?(v114, &demangling cache variable for type metadata for UUID?);
                              unint64_t v111 = v193;
                            }
                            else
                            {
                              swift_bridgeObjectRelease();
                              uint64_t v113 = v104;
                            }
                            uint64_t v32 = (unsigned int *)MEMORY[0x263F75118];
                            uint64_t v33 = v180;
                            if (one-time initialization token for engagement != -1) {
                              swift_once();
                            }
                            uint64_t v115 = type metadata accessor for Logger();
                            __swift_project_value_buffer(v115, (uint64_t)static Logger.engagement);
                            uint64_t v116 = *MEMORY[0x263F75050];
                            uint64_t v117 = type metadata accessor for EngagementSignalCollectionError();
                            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v117 - 8) + 104))(v10, v116, v117);
                            (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *v32, v33);
                            Logger.debug(_:_:)(0xD000000000000027, 0x8000000224F666C0, (uint64_t)v10);
                            uint64_t v118 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v33);
LABEL_88:
                            (*(void (**)(uint64_t))(*(void *)v111 + 176))(v118);
                            uint64_t v123 = (uint64_t)v190;
                            UUID.init(uuidString:)();
                            swift_bridgeObjectRelease();
                            int v124 = ((uint64_t (*)(uint64_t, uint64_t, void *))v182)(v123, 1, v113);
                            unint64_t v125 = v172;
                            if (v124 != 1)
                            {
                              v192[4](v172, v123, v113);
                              uint64_t v131 = v125;
                              id v132 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                              Class v133 = UUID._bridgeToObjectiveC()().super.isa;
                              id v134 = objc_msgSend(v132, sel_initWithNSUUID_, v133);

                              id v130 = v185;
                              objc_msgSend(v185, sel_setTaskId_, v134);

                              uint64_t v17 = v113;
                              os_log_type_t v27 = (void (*)(void, void))v176;
                              uint64_t v129 = ((uint64_t (*)(char *, void *))v176)(v131, v113);
                              id v4 = v173;
                              goto LABEL_92;
                            }
                            uint64_t v17 = v113;
                            outlined destroy of Any?(v123, &demangling cache variable for type metadata for UUID?);
                            id v4 = v173;
                            os_log_type_t v27 = (void (*)(void, void))v176;
                            if (one-time initialization token for engagement == -1)
                            {
LABEL_90:
                              uint64_t v126 = type metadata accessor for Logger();
                              __swift_project_value_buffer(v126, (uint64_t)static Logger.engagement);
                              uint64_t v127 = *MEMORY[0x263F75038];
                              uint64_t v128 = type metadata accessor for EngagementSignalCollectionError();
                              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v128 - 8) + 104))(v10, v127, v128);
                              (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *v32, v33);
                              Logger.debug(_:_:)(0xD000000000000024, 0x8000000224F666F0, (uint64_t)v10);
                              uint64_t v129 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v33);
                              id v130 = v185;
LABEL_92:
                              uint64_t v135 = v171((id)v129);
                              uint64_t v136 = (*(uint64_t (**)(uint64_t))(*(void *)v135 + 104))(v135);
                              swift_release();
                              id v137 = v179;
                              id v138 = objc_msgSend(v130, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(void *)v179 + 96))(v136));
                              objc_msgSend(v130, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(void *)v137 + 112))(v138));
                              objc_msgSend(v4, sel_setEventMetadata_, v130);
                              id v139 = v183;
                              objc_msgSend(v4, sel_setAppIntentSignalGenerated_, v183);
                              if (one-time initialization token for engagement != -1) {
                                swift_once();
                              }
                              uint64_t v140 = type metadata accessor for Logger();
                              __swift_project_value_buffer(v140, (uint64_t)static Logger.engagement);
                              uint64_t v141 = *MEMORY[0x263F75078];
                              uint64_t v142 = type metadata accessor for SELFPSELogged();
                              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v142 - 8) + 104))(v10, v141, v142);
                              (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F750C8], v33);
                              Logger.debug(_:_:)(0xD000000000000044, 0x8000000224F68AB0, (uint64_t)v10);
                              (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v33);
                              id v143 = objc_msgSend(self, sel_sharedAnalytics);
                              id v144 = objc_msgSend(v143, sel_defaultMessageStream);

                              id v145 = v191;
                              UUID.init()();
                              Class v146 = UUID._bridgeToObjectiveC()().super.isa;
                              v27(v145, v17);
                              objc_msgSend(v144, sel_emitMessage_isolatedStreamUUID_, v4, v146);

                              swift_release();
                              return;
                            }
LABEL_116:
                            swift_once();
                            goto LABEL_90;
                          }
                        }
                        swift_release();
LABEL_76:
                        objc_msgSend(v17, sel_setHasUserInitiatedFollowup_, 0);
                        goto LABEL_77;
                      }
                      __break(1u);
                      return;
                    }
LABEL_115:
                    __break(1u);
                    goto LABEL_116;
                  }
                }
                else
                {
                  long long v196 = 0u;
                  long long v197 = 0u;
                  swift_bridgeObjectRelease();
                }
                uint64_t v43 = outlined destroy of Any?((uint64_t)&v196, &demangling cache variable for type metadata for Any?);
                goto LABEL_22;
              }
            }
            else
            {
              uint64_t v32 = *(unsigned int **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v32) {
                goto LABEL_8;
              }
            }

            swift_bridgeObjectRelease();
            uint64_t v7 = v180;
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v165 = type metadata accessor for Logger();
  __swift_project_value_buffer(v165, (uint64_t)static Logger.engagement);
  uint64_t v166 = *MEMORY[0x263F75020];
  uint64_t v167 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v167 - 8) + 104))(v10, v166, v167);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F75118], v7);
  Logger.debug(_:_:)(0xD00000000000003DLL, 0x8000000224F68A50, (uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t PSEAppIntentTranscriptSELFEmitter.getFollowUpEntityComparison(siriSignalData:followupSignalData:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    return 1;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000224F68B00);
  if ((v5 & 1) == 0) {
    return 1;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v14);
  if ((swift_dynamicCast() & 1) == 0) {
    return 1;
  }
  if (!*(void *)(a2 + 16)
    || (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000224F68B00), (v7 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v6, (uint64_t)v14), (swift_dynamicCast() & 1) == 0))
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return 1;
  }
  uint64_t v8 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v8 = *(void *)v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    goto LABEL_17;
  }
  uint64_t v9 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v9 = *(void *)v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v10 = 2;
  swift_bridgeObjectRelease_n();
  return v10;
}

uint64_t PSEAppIntentTranscriptSELFEmitter.getFollowUpActionType(followUpAction:)()
{
  String.lowercased()();
  lazy protocol witness table accessor for type String and conformance String();
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else
  {
    char v1 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return 33;
    }
    else {
      return 0;
    }
  }
}

uint64_t PSEAppIntentTranscriptSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSEAppIntentTranscriptSELFEmitter.init()()
{
  return v0;
}

uint64_t PSEAppIntentTranscriptSELFEmitter.deinit()
{
  return v0;
}

uint64_t PSEAppIntentTranscriptSELFEmitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for PSEAppIntentTranscriptSELFEmitter()
{
  return self;
}

uint64_t method lookup function for PSEAppIntentTranscriptSELFEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEAppIntentTranscriptSELFEmitter);
}

uint64_t dispatch thunk of PSEAppIntentTranscriptSELFEmitter.emitPSEAppIntentTranscript(appIntentTranscriptSignals:appLaunchSignals:task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PSEAppIntentTranscriptSELFEmitter.getFollowUpEntityComparison(siriSignalData:followupSignalData:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PSEAppIntentTranscriptSELFEmitter.getFollowUpActionType(followUpAction:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

const char *IdentifyEntitySimilarityExample.musicPlayState.unsafeMutableAddressor()
{
  return "Playing";
}

uint64_t static IdentifyEntitySimilarityExample.musicPlayState.getter()
{
  return 0x676E6979616C50;
}

void static IdentifyEntitySimilarityExample.runIdentifyMusicEntitySimilarity()()
{
  os_log_t v126 = (os_log_t)type metadata accessor for ProtoTaskEngagementFeatureSet();
  v87[0] = v126[-1].isa;
  MEMORY[0x270FA5388](v126);
  unint64_t v125 = (char *)v87 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v113 = (uint64_t)v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v117 = (uint64_t)v87 - v4;
  uint64_t v124 = type metadata accessor for ProtoPlayMediaTaskFeatureSet();
  uint64_t v5 = *(void *)(v124 - 8);
  MEMORY[0x270FA5388](v124);
  char v7 = (char *)v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for ProtoTaskFeatureSet();
  uint64_t v8 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  uint64_t v10 = (char *)v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for ProtoMediaEntitySignal();
  uint64_t v11 = *(void *)(v116 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v116);
  id v94 = (char *)v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  id v110 = (char *)v87 - v14;
  uint64_t v108 = type metadata accessor for ProtoTaskEngagementType();
  uint64_t v15 = *(void *)(v108 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v108);
  uint64_t v107 = (char *)v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v106 = (char *)v87 - v18;
  uint64_t v19 = type metadata accessor for ProtoSiriTaskEngagement();
  uint64_t v109 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = static SiriTaskEngagementRetriever.retrieveAllSiriTaskEngagement(streamId:)();
  if (v22)
  {
    uint64_t v105 = *(void *)(v22 + 16);
    if (v105)
    {
      unint64_t v23 = 0;
      unint64_t v103 = v22 + ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80));
      uint64_t v102 = v109 + 16;
      unsigned int v101 = *MEMORY[0x263F74FA0];
      uint64_t v100 = (void (**)(char *, void, uint64_t))(v15 + 104);
      unint64_t v99 = (void (**)(char *, uint64_t))(v15 + 8);
      id v98 = (void (**)(char *, uint64_t))(v109 + 8);
      id v122 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v115 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      uint64_t v119 = v87[0] + 16;
      uint64_t v118 = (void (**)(char *, os_log_t))(v87[0] + 8);
      id v93 = (void (**)(char *, char *, uint64_t))(v11 + 16);
      id v92 = (void (**)(uint64_t, char *, uint64_t))(v11 + 32);
      uint64_t v89 = (void (**)(char *, uint64_t))(v11 + 8);
      long long v96 = (void *)MEMORY[0x263F8EE78];
      uint64_t v95 = (void *)MEMORY[0x263F8EE78];
      uint64_t v88 = v19;
      uint64_t v104 = v22;
      uint64_t v112 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v91 = &v130;
      id v90 = (long long *)&v128;
      uint64_t v97 = v21;
      while (v23 < *(void *)(v22 + 16))
      {
        uint64_t v24 = *(void *)(v109 + 72);
        unint64_t v111 = v23;
        (*(void (**)(char *, unint64_t, uint64_t))(v109 + 16))(v21, v103 + v24 * v23, v19);
        uint64_t v25 = v19;
        id v26 = v106;
        ProtoSiriTaskEngagement.engagementType.getter();
        os_log_type_t v27 = v107;
        uint64_t v28 = v108;
        (*v100)(v107, v101, v108);
        lazy protocol witness table accessor for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v29 = v129;
        uint64_t v30 = v127;
        unint64_t v31 = *v99;
        (*v99)(v27, v28);
        v31(v26, v28);
        if (v29 == v30)
        {
          uint64_t v21 = v97;
          ProtoSiriTaskEngagement.siriTaskFeatureSet.getter();
          ProtoTaskFeatureSet.playMediaFeatureSet.getter();
          uint64_t v32 = *v112;
          uint64_t v33 = v123;
          (*v112)(v10, v123);
          ProtoPlayMediaTaskFeatureSet.mediaEntity.getter();
          uint64_t v34 = *v122;
          uint64_t v35 = v124;
          (*v122)(v7, v124);
          ProtoSiriTaskEngagement.siriTaskFeatureSet.getter();
          ProtoTaskFeatureSet.playMediaFeatureSet.getter();
          v32(v10, v33);
          ProtoPlayMediaTaskFeatureSet.playDurationInSec.getter();
          uint64_t v37 = v36;
          v34(v7, v35);
          uint64_t v114 = *v115;
          v114(v117, 1, 1, v116);
          uint64_t v38 = *(void *)(ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter() + 16);
          swift_bridgeObjectRelease();
          if (v38)
          {
            uint64_t v39 = v21;
            uint64_t v40 = ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter();
            uint64_t v41 = *(void *)(v40 + 16);
            if (v41)
            {
              unint64_t v42 = (*(unsigned __int8 *)(v87[0] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87[0] + 80);
              v87[1] = v40;
              unint64_t v43 = v40 + v42;
              uint64_t v44 = *(void *)(v87[0] + 72);
              id v120 = *(void (**)(char *, unint64_t, os_log_t))(v87[0] + 16);
              uint64_t v121 = v44;
              v120(v125, v40 + v42, v126);
              while (1)
              {
                ProtoTaskEngagementFeatureSet.featureSet.getter();
                ProtoTaskFeatureSet.playMediaFeatureSet.getter();
                v32(v10, v123);
                uint64_t v45 = ProtoPlayMediaTaskFeatureSet.actionState.getter();
                uint64_t v47 = v46;
                v34(v7, v124);
                if (v45 == 0x676E6979616C50 && v47 == 0xE700000000000000)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v48 & 1) == 0)
                  {
                    (*v118)(v125, v126);
                    goto LABEL_12;
                  }
                }
                id v49 = v125;
                ProtoTaskEngagementFeatureSet.featureSet.getter();
                ProtoTaskFeatureSet.playMediaFeatureSet.getter();
                v32(v10, v123);
                uint64_t v50 = v113;
                ProtoPlayMediaTaskFeatureSet.mediaEntity.getter();
                v34(v7, v124);
                (*v118)(v49, v126);
                uint64_t v51 = v117;
                outlined destroy of Any?(v117, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
                v114(v50, 0, 1, v116);
                outlined init with take of ProtoMediaEntitySignal?(v50, v51);
LABEL_12:
                v43 += v121;
                if (!--v41) {
                  break;
                }
                v120(v125, v43, v126);
              }
            }
            swift_bridgeObjectRelease();
            uint64_t v52 = v110;
            uint64_t v21 = v39;
          }
          else
          {
            if (one-time initialization token for engagement != -1) {
              swift_once();
            }
            uint64_t v53 = type metadata accessor for Logger();
            __swift_project_value_buffer(v53, (uint64_t)static Logger.engagement);
            char v54 = Logger.logObject.getter();
            os_log_type_t v55 = static os_log_type_t.debug.getter();
            BOOL v56 = os_log_type_enabled(v54, v55);
            uint64_t v57 = v110;
            if (v56)
            {
              uint64_t v58 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v58 = 0;
              _os_log_impl(&dword_224EDB000, v54, v55, "No user followups", v58, 2u);
              MEMORY[0x22A627DB0](v58, -1, -1);
            }

            uint64_t v52 = v57;
          }
          uint64_t v59 = v94;
          uint64_t v60 = v116;
          (*v93)(v94, v52, v116);
          uint64_t v61 = v113;
          outlined init with copy of Date?(v117, v113, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
          type metadata accessor for MusicEntitySimilarity(0);
          uint64_t v62 = swift_allocObject();
          uint64_t v63 = v62 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity;
          v114(v62 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, 1, 1, v60);
          (*v92)(v62 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, v59, v60);
          swift_beginAccess();
          outlined assign with take of ProtoMediaEntitySignal?(v61, v63, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
          swift_endAccess();
          *(void *)(v62 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration) = v37;
          id v64 = v91;
          char v65 = MusicEntitySimilarity.compare()(v91);
          LOBYTE(v129) = v65 & 1;
          LOBYTE(v127) = v65 & 1;
          uint64_t v66 = v90;
          outlined init with copy of EntitySimilarity((uint64_t)v64, (uint64_t)v90);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v66);
          if (v65)
          {
            LOBYTE(v127) = v65 & 1;
            outlined init with copy of EntitySimilarity((uint64_t)v64, (uint64_t)v66);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96[2] + 1, 1, v96);
            }
            uint64_t v19 = v88;
            unint64_t v68 = v96[2];
            unint64_t v67 = v96[3];
            if (v68 >= v67 >> 1) {
              long long v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v67 > 1), v68 + 1, 1, v96);
            }
            uint64_t v69 = v96;
            v96[2] = v68 + 1;
            uint64_t v70 = &v69[5 * v68];
          }
          else
          {
            LOBYTE(v127) = v65 & 1;
            outlined init with copy of EntitySimilarity((uint64_t)v64, (uint64_t)v66);
            id v71 = v95;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v72 = v71;
            }
            else {
              uint64_t v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71[2] + 1, 1, v71);
            }
            uint64_t v19 = v88;
            unint64_t v74 = v72[2];
            unint64_t v73 = v72[3];
            if (v74 >= v73 >> 1) {
              uint64_t v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v74 + 1, 1, v72);
            }
            uint64_t v72[2] = v74 + 1;
            uint64_t v95 = v72;
            uint64_t v70 = &v72[5 * v74];
          }
          outlined init with take of EntitySimilarity(v66, (uint64_t)(v70 + 4));
          swift_release();
          outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for (Bool, EntitySimilarity));
          outlined destroy of Any?(v117, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
          (*v89)(v110, v116);
          (*v98)(v21, v19);
        }
        else
        {
          uint64_t v21 = v97;
          (*v98)(v97, v25);
          uint64_t v19 = v25;
        }
        unint64_t v23 = v111 + 1;
        uint64_t v22 = v104;
        if (v111 + 1 == v105)
        {
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      long long v96 = (void *)MEMORY[0x263F8EE78];
      uint64_t v95 = (void *)MEMORY[0x263F8EE78];
LABEL_47:
      if (one-time initialization token for engagement == -1) {
        goto LABEL_48;
      }
    }
    swift_once();
LABEL_48:
    uint64_t v79 = type metadata accessor for Logger();
    __swift_project_value_buffer(v79, (uint64_t)static Logger.engagement);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl(&dword_224EDB000, v80, v81, "\n\n\n ======== Bad Music Entity Match ========\n\n", v82, 2u);
      MEMORY[0x22A627DB0](v82, -1, -1);
    }

    uint64_t v83 = v95[2];
    if (v83)
    {
      uint64_t v84 = (uint64_t)(v95 + 4);
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of EntitySimilarity(v84, (uint64_t)&v129);
        uint64_t v85 = v131;
        uint64_t v86 = v132;
        __swift_project_boxed_opaque_existential_1(&v129, v131);
        (*(void (**)(uint64_t, uint64_t))(v86 + 72))(v85, v86);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v129);
        v84 += 40;
        --v83;
      }
      while (v83);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return;
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v75 = type metadata accessor for Logger();
  __swift_project_value_buffer(v75, (uint64_t)static Logger.engagement);
  os_log_t v126 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v126, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v77 = 0;
    _os_log_impl(&dword_224EDB000, v126, v76, "Failed to retrieve engagement features", v77, 2u);
    MEMORY[0x22A627DB0](v77, -1, -1);
  }
  os_log_t v78 = v126;
}

uint64_t MusicEntitySimilarity.__allocating_init(siri:playDuration:userFollowup:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v6 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity;
  uint64_t v8 = type metadata accessor for ProtoMediaEntitySignal();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, a1, v8);
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a2, v7, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  swift_endAccess();
  *(double *)(v6 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration) = a3;
  return v6;
}

uint64_t IdentifyEntitySimilarityExample.deinit()
{
  return v0;
}

uint64_t IdentifyEntitySimilarityExample.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t IdentifyEntitySimilarityExample.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t IdentifyEntitySimilarityExample.init()()
{
  return v0;
}

uint64_t key path setter for MusicEntitySimilarity.siriChosenEntity : MusicEntitySimilarity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProtoMediaEntitySignal();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 112))(v6);
}

uint64_t MusicEntitySimilarity.siriChosenEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return MusicEntitySimilarity.siriChosenEntity.getter(&OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, MEMORY[0x263F75130], a1);
}

uint64_t MusicEntitySimilarity.siriChosenEntity.setter(uint64_t a1)
{
  return MusicEntitySimilarity.siriChosenEntity.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, MEMORY[0x263F75130]);
}

uint64_t (*MusicEntitySimilarity.siriChosenEntity.modify())()
{
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t key path setter for MusicEntitySimilarity.userFollowupEntity : MusicEntitySimilarity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v6, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 136))(v6);
}

uint64_t MusicEntitySimilarity.userFollowupEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return MusicEntitySimilarity.userFollowupEntity.getter(&OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoMediaEntitySignal?, a1);
}

uint64_t MusicEntitySimilarity.userFollowupEntity.setter(uint64_t a1)
{
  return MusicEntitySimilarity.userFollowupEntity.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
}

uint64_t (*MusicEntitySimilarity.userFollowupEntity.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

double MusicEntitySimilarity.playDuration.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t MusicEntitySimilarity.playDuration.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*MusicEntitySimilarity.playDuration.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t MusicEntitySimilarity.init(siri:playDuration:userFollowup:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity;
  uint64_t v8 = type metadata accessor for ProtoMediaEntitySignal();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v3 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, a1, v8);
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a2, v7, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  swift_endAccess();
  *(double *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration) = a3;
  return v3;
}

uint64_t MusicEntitySimilarity.compare()(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ProtoMediaEntitySignal();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v23 - v12;
  (*(void (**)(uint64_t))(*(void *)v1 + 128))(v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
LABEL_9:
    a1[3] = type metadata accessor for MusicEntitySimilarity(0);
    a1[4] = &protocol witness table for MusicEntitySimilarity;
    *a1 = v1;
    swift_retain();
    return 0;
  }
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v13, v5, v6);
  (*(void (**)(uint64_t))(*(void *)v1 + 104))(v14);
  uint64_t v15 = ProtoMediaEntitySignal.adamIdentifier.getter();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  if (v15 == ProtoMediaEntitySignal.adamIdentifier.getter() && v17 == v19)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      v18(v13, v6);
      goto LABEL_9;
    }
  }
  a1[3] = type metadata accessor for MusicEntitySimilarity(0);
  a1[4] = &protocol witness table for MusicEntitySimilarity;
  *a1 = v1;
  swift_retain();
  v18(v13, v6);
  return 1;
}

Swift::Void __swiftcall MusicEntitySimilarity.print()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ProtoMediaEntitySignal();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v57 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  char v21 = (char *)&v57 - v20;
  (*(void (**)(uint64_t))(*(void *)v0 + 128))(v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v21, v4, v5);
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.engagement);
    uint64_t v68 = v6;
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    swift_retain_n();
    unint64_t v67 = v18;
    v23(v18, v21, v5);
    uint64_t v24 = v15;
    v23(v15, v21, v5);
    v23(v12, v21, v5);
    swift_retain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v62 = v12;
      uint64_t v29 = v28;
      uint64_t v66 = swift_slowAlloc();
      uint64_t v70 = v66;
      *(_DWORD *)uint64_t v29 = 136316674;
      uint64_t v58 = v29 + 4;
      uint64_t v60 = *(void (**)(void))(*(void *)v1 + 104);
      os_log_t v63 = v25;
      int v64 = v27;
      v60();
      uint64_t v30 = ProtoMediaEntitySignal.title.getter();
      unint64_t v32 = v31;
      uint64_t v61 = v24;
      uint64_t v68 = *(void *)(v68 + 8);
      ((void (*)(char *, uint64_t))v68)(v9, v5);
      uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v70);
      char v65 = v21;
      uint64_t v59 = &v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v33 = swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v58 = v29 + 14;
      uint64_t v34 = v60;
      ((void (*)(uint64_t))v60)(v33);
      uint64_t v35 = ProtoMediaEntitySignal.album.getter();
      unint64_t v37 = v36;
      ((void (*)(char *, uint64_t))v68)(v9, v5);
      uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v38 = swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2080;
      ((void (*)(uint64_t))v34)(v38);
      uint64_t v39 = ProtoMediaEntitySignal.artist.getter();
      unint64_t v41 = v40;
      unint64_t v42 = v9;
      unint64_t v43 = (void (*)(char *, uint64_t))v68;
      ((void (*)(char *, uint64_t))v68)(v42, v5);
      uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v44 = swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 32) = 2048;
      uint64_t v69 = (*(double (**)(uint64_t))(*(void *)v1 + 152))(v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      *(_WORD *)(v29 + 42) = 2080;
      uint64_t v45 = v67;
      uint64_t v46 = ProtoMediaEntitySignal.title.getter();
      uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v43(v45, v5);
      *(_WORD *)(v29 + 52) = 2080;
      char v48 = v61;
      uint64_t v49 = ProtoMediaEntitySignal.album.getter();
      uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v43(v48, v5);
      *(_WORD *)(v29 + 62) = 2080;
      uint64_t v51 = v62;
      uint64_t v52 = ProtoMediaEntitySignal.artist.getter();
      uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v43(v51, v5);
      os_log_t v54 = v63;
      _os_log_impl(&dword_224EDB000, v63, (os_log_type_t)v64, "\n Siri Played => Title: %s, Album: %s, Artist: %s ------------- Played %f seconds\n User Played in followup => Title: %s, Album: %s, Artist: %s\n\n ", (uint8_t *)v29, 0x48u);
      uint64_t v55 = v66;
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v55, -1, -1);
      MEMORY[0x22A627DB0](v29, -1, -1);

      v43(v65, v5);
    }
    else
    {

      BOOL v56 = *(void (**)(char *, uint64_t))(v68 + 8);
      v56(v12, v5);
      v56(v24, v5);
      v56(v67, v5);
      swift_release_n();
      v56(v21, v5);
    }
  }
}

uint64_t MusicEntitySimilarity.deinit()
{
  return MusicEntitySimilarity.deinit(&OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, MEMORY[0x263F75130], &OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
}

uint64_t MusicEntitySimilarity.__deallocating_deinit()
{
  return MusicEntitySimilarity.__deallocating_deinit(&OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, MEMORY[0x263F75130], &OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
}

uint64_t protocol witness for EntitySimilarity.siriChosenEntity.getter in conformance MusicEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for EntitySimilarity.siriChosenEntity.setter in conformance MusicEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t (*protocol witness for EntitySimilarity.siriChosenEntity.modify in conformance MusicEntitySimilarity(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 120))();
  return protocol witness for EntitySimilarity.siriChosenEntity.modify in conformance MusicEntitySimilarity;
}

uint64_t protocol witness for EntitySimilarity.userFollowupEntity.getter in conformance MusicEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for EntitySimilarity.userFollowupEntity.setter in conformance MusicEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t (*protocol witness for EntitySimilarity.userFollowupEntity.modify in conformance MusicEntitySimilarity(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  return protocol witness for EntitySimilarity.siriChosenEntity.modify in conformance MusicEntitySimilarity;
}

uint64_t protocol witness for EntitySimilarity.compare() in conformance MusicEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))() & 1;
}

uint64_t protocol witness for EntitySimilarity.print() in conformance MusicEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t key path setter for PhoneCallEntitySimilarity.siriChosenEntity : PhoneCallEntitySimilarity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProtoContactEntitySignal();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 112))(v6);
}

uint64_t PhoneCallEntitySimilarity.siriChosenEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return MusicEntitySimilarity.siriChosenEntity.getter(&OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, MEMORY[0x263F75158], a1);
}

uint64_t MusicEntitySimilarity.siriChosenEntity.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  uint64_t v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t PhoneCallEntitySimilarity.siriChosenEntity.setter(uint64_t a1)
{
  return MusicEntitySimilarity.siriChosenEntity.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, MEMORY[0x263F75158]);
}

uint64_t MusicEntitySimilarity.siriChosenEntity.setter(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess();
  uint64_t v7 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v6, a1, v7);
  return swift_endAccess();
}

uint64_t (*PhoneCallEntitySimilarity.siriChosenEntity.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for PhoneCallEntitySimilarity.userFollowupEntity : PhoneCallEntitySimilarity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoContactEntitySignal?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v6, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 136))(v6);
}

uint64_t PhoneCallEntitySimilarity.userFollowupEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return MusicEntitySimilarity.userFollowupEntity.getter(&OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoContactEntitySignal?, a1);
}

uint64_t MusicEntitySimilarity.userFollowupEntity.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of Date?(v6, a3, a2);
}

uint64_t PhoneCallEntitySimilarity.userFollowupEntity.setter(uint64_t a1)
{
  return MusicEntitySimilarity.userFollowupEntity.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
}

uint64_t MusicEntitySimilarity.userFollowupEntity.setter(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a1, v6, a3);
  return swift_endAccess();
}

uint64_t (*PhoneCallEntitySimilarity.userFollowupEntity.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

double PhoneCallEntitySimilarity.callDuration.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_callDuration;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t PhoneCallEntitySimilarity.callDuration.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_callDuration);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*PhoneCallEntitySimilarity.callDuration.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t PhoneCallEntitySimilarity.__allocating_init(siri:callDuration:userFollowup:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v6 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity;
  uint64_t v8 = type metadata accessor for ProtoContactEntitySignal();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, a1, v8);
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a2, v7, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
  swift_endAccess();
  *(double *)(v6 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_callDuration) = a3;
  return v6;
}

uint64_t PhoneCallEntitySimilarity.init(siri:callDuration:userFollowup:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity;
  uint64_t v8 = type metadata accessor for ProtoContactEntitySignal();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v3 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, a1, v8);
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a2, v7, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
  swift_endAccess();
  *(double *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_callDuration) = a3;
  return v3;
}

uint64_t PhoneCallEntitySimilarity.compare()(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoContactEntitySignal?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ProtoContactEntitySignal();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v31 - v15;
  (*(void (**)(uint64_t))(*(void *)v1 + 128))(v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    uint64_t v33 = a1;
    uint64_t v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v16, v5, v6);
    unint64_t v32 = *(void (**)(uint64_t))(*(void *)v1 + 104);
    v32(v17);
    uint64_t v18 = ProtoContactEntitySignal.givenName.getter();
    uint64_t v20 = v19;
    uint64_t v34 = *(void (**)(char *, uint64_t))(v7 + 8);
    v34(v13, v6);
    if (v18 == ProtoContactEntitySignal.givenName.getter() && v20 == v21)
    {
      uint64_t v24 = swift_bridgeObjectRelease_n();
      a1 = v33;
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v24 = swift_bridgeObjectRelease();
      a1 = v33;
      if ((v23 & 1) == 0) {
        goto LABEL_15;
      }
    }
    v32(v24);
    uint64_t v25 = ProtoContactEntitySignal.familyName.getter();
    uint64_t v27 = v26;
    v34(v10, v6);
    if (v25 == ProtoContactEntitySignal.familyName.getter() && v27 == v28)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
LABEL_15:
        v34(v16, v6);
        goto LABEL_16;
      }
    }
    a1[3] = type metadata accessor for PhoneCallEntitySimilarity(0);
    a1[4] = &protocol witness table for PhoneCallEntitySimilarity;
    *a1 = v1;
    swift_retain();
    v34(v16, v6);
    return 1;
  }
  outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
LABEL_16:
  a1[3] = type metadata accessor for PhoneCallEntitySimilarity(0);
  a1[4] = &protocol witness table for PhoneCallEntitySimilarity;
  *a1 = v1;
  swift_retain();
  return 0;
}

Swift::Void __swiftcall PhoneCallEntitySimilarity.print()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoContactEntitySignal?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ProtoContactEntitySignal();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v46 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)v46 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)v46 - v17;
  (*(void (**)(uint64_t))(*(void *)v0 + 128))(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v18, v4, v5);
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.engagement);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v20(v15, v18, v5);
    v20(v12, v18, v5);
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    int v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v51 = v12;
      uint64_t v25 = v24;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v54 = v26;
      uint64_t v56 = v26;
      *(_DWORD *)uint64_t v25 = 136316162;
      v46[0] = v25 + 4;
      uint64_t v27 = (void (**)(uint64_t))(*(void *)v1 + 104);
      unint64_t v47 = *v27;
      char v48 = v27;
      int v53 = v23;
      os_log_t v52 = v21;
      v47(v26);
      uint64_t v28 = ProtoContactEntitySignal.givenName.getter();
      unint64_t v30 = v29;
      uint64_t v31 = *(void (**)(char *, uint64_t))(v6 + 8);
      v31(v9, v5);
      uint64_t v49 = v31;
      unint64_t v50 = v18;
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v56);
      v46[1] = &v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v32 = swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      v47(v32);
      uint64_t v33 = ProtoContactEntitySignal.familyName.getter();
      unint64_t v35 = v34;
      v31(v9, v5);
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v36 = swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 22) = 2048;
      uint64_t v55 = (*(double (**)(uint64_t))(*(void *)v1 + 152))(v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      *(_WORD *)(v25 + 32) = 2080;
      uint64_t v37 = ProtoContactEntitySignal.givenName.getter();
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = v49;
      v49(v15, v5);
      *(_WORD *)(v25 + 42) = 2080;
      unint64_t v40 = v51;
      uint64_t v41 = ProtoContactEntitySignal.givenName.getter();
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v39(v40, v5);
      os_log_t v43 = v52;
      _os_log_impl(&dword_224EDB000, v52, (os_log_type_t)v53, "\n Siri Called => First name: %s, Last name: %s,  ------------- CallDuration %f seconds\n User Called in followup => First name: %s, Last name: %s\n\n ", (uint8_t *)v25, 0x34u);
      uint64_t v44 = v54;
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v44, -1, -1);
      MEMORY[0x22A627DB0](v25, -1, -1);

      v39(v50, v5);
    }
    else
    {

      uint64_t v45 = *(void (**)(char *, uint64_t))(v6 + 8);
      v45(v12, v5);
      v45(v15, v5);
      swift_release_n();
      v45(v18, v5);
    }
  }
}

uint64_t PhoneCallEntitySimilarity.deinit()
{
  return MusicEntitySimilarity.deinit(&OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, MEMORY[0x263F75158], &OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
}

uint64_t MusicEntitySimilarity.deinit(void *a1, uint64_t (*a2)(void), void *a3, uint64_t *a4)
{
  uint64_t v7 = v4 + *a1;
  uint64_t v8 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  outlined destroy of Any?(v4 + *a3, a4);
  return v4;
}

uint64_t PhoneCallEntitySimilarity.__deallocating_deinit()
{
  return MusicEntitySimilarity.__deallocating_deinit(&OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, MEMORY[0x263F75158], &OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
}

uint64_t MusicEntitySimilarity.__deallocating_deinit(void *a1, uint64_t (*a2)(void), void *a3, uint64_t *a4)
{
  uint64_t v7 = v4 + *a1;
  uint64_t v8 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  outlined destroy of Any?(v4 + *a3, a4);
  uint64_t v9 = *(unsigned int *)(*(void *)v4 + 48);
  uint64_t v10 = *(unsigned __int16 *)(*(void *)v4 + 52);
  return MEMORY[0x270FA0228](v4, v9, v10);
}

uint64_t protocol witness for EntitySimilarity.siriChosenEntity.getter in conformance PhoneCallEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for EntitySimilarity.siriChosenEntity.setter in conformance PhoneCallEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t (*protocol witness for EntitySimilarity.siriChosenEntity.modify in conformance PhoneCallEntitySimilarity(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 120))();
  return protocol witness for EntitySimilarity.siriChosenEntity.modify in conformance MusicEntitySimilarity;
}

uint64_t protocol witness for EntitySimilarity.userFollowupEntity.getter in conformance PhoneCallEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for EntitySimilarity.userFollowupEntity.setter in conformance PhoneCallEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t (*protocol witness for EntitySimilarity.userFollowupEntity.modify in conformance PhoneCallEntitySimilarity(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  return protocol witness for EntitySimilarity.siriChosenEntity.modify in conformance MusicEntitySimilarity;
}

void protocol witness for EntitySimilarity.siriChosenEntity.modify in conformance MusicEntitySimilarity(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for EntitySimilarity.compare() in conformance PhoneCallEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))() & 1;
}

uint64_t protocol witness for EntitySimilarity.print() in conformance PhoneCallEntitySimilarity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

unint64_t lazy protocol witness table accessor for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType()
{
  unint64_t result = lazy protocol witness table cache variable for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType;
  if (!lazy protocol witness table cache variable for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType)
  {
    type metadata accessor for ProtoTaskEngagementType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType);
  }
  return result;
}

uint64_t outlined init with copy of EntitySimilarity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for MusicEntitySimilarity(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for MusicEntitySimilarity);
}

uint64_t outlined init with take of EntitySimilarity(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with take of ProtoMediaEntitySignal?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ProtoMediaEntitySignal?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PhoneCallEntitySimilarity(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for PhoneCallEntitySimilarity);
}

uint64_t sub_224F393C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104))();
}

uint64_t sub_224F39408(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128))();
}

void sub_224F39450(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))(**(void **)a1 + 152))();
}

uint64_t sub_224F3949C(double *a1, uint64_t a2)
{
  return (*(uint64_t (**)(double))(**(void **)a2 + 160))(*a1);
}

uint64_t sub_224F394E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104))();
}

uint64_t sub_224F3952C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128))();
}

void sub_224F39574(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))(**(void **)a1 + 152))();
}

uint64_t sub_224F395C0(double *a1, uint64_t a2)
{
  return (*(uint64_t (**)(double))(**(void **)a2 + 160))(*a1);
}

uint64_t type metadata accessor for IdentifyEntitySimilarityExample()
{
  return self;
}

uint64_t method lookup function for IdentifyEntitySimilarityExample(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IdentifyEntitySimilarityExample);
}

uint64_t dispatch thunk of IdentifyEntitySimilarityExample.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t ObjC metadata update function for MusicEntitySimilarity()
{
  return type metadata accessor for MusicEntitySimilarity(0);
}

void type metadata completion function for MusicEntitySimilarity(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t method lookup function for MusicEntitySimilarity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MusicEntitySimilarity);
}

uint64_t dispatch thunk of MusicEntitySimilarity.siriChosenEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.siriChosenEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.siriChosenEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.userFollowupEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.userFollowupEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.userFollowupEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.playDuration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.playDuration.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.playDuration.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.__allocating_init(siri:playDuration:userFollowup:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.compare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.print()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t ObjC metadata update function for PhoneCallEntitySimilarity()
{
  return type metadata accessor for PhoneCallEntitySimilarity(0);
}

void type metadata completion function for PhoneCallEntitySimilarity(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for MusicEntitySimilarity(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), unint64_t *a5, void (*a6)(uint64_t))
{
  a4(319);
  if (v8 <= 0x3F)
  {
    type metadata accessor for ProtoMediaEntitySignal?(319, a5, a6);
    if (v9 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PhoneCallEntitySimilarity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PhoneCallEntitySimilarity);
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.siriChosenEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.siriChosenEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.siriChosenEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.userFollowupEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.userFollowupEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.userFollowupEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.callDuration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.callDuration.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.callDuration.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.__allocating_init(siri:callDuration:userFollowup:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.compare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PhoneCallEntitySimilarity.print()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

void type metadata accessor for ProtoMediaEntitySignal?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t HomeKitAccessoryControlSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = MEMORY[0x263F8EE80];
  type metadata accessor for Utils();
  Date.init(timeIntervalSinceReferenceDate:)();
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v7, a2, (uint64_t)&v99, 0.0);
  outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Date?);
  long long v9 = v99;
  uint64_t v10 = v100;
  uint64_t v11 = v101;
  uint64_t v95 = v102;
  int v12 = v103;
  id v13 = objc_msgSend(a1, sel_accessoryUniqueIdentifier);
  uint64_t v14 = MEMORY[0x263F8D310];
  if (v13)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    uint64_t v101 = v14;
    *(void *)&long long v99 = v15;
    *((void *)&v99 + 1) = v17;
    outlined init with take of Any(&v99, v98);
    uint64_t v18 = v104;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = v18;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0xD000000000000019, 0x8000000224F676A0, isUniquelyReferenced_nonNull_native);
    uint64_t v104 = v97;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000019, 0x8000000224F676A0, &v99);
    outlined destroy of Any?((uint64_t)&v99, &demangling cache variable for type metadata for Any?);
  }
  id v20 = objc_msgSend(a1, sel_accessoryState);
  if (v20)
  {
    uint64_t v21 = v20;
    objc_msgSend(v20, sel_numValue);
    uint64_t v23 = v22;

    uint64_t v101 = MEMORY[0x263F8D538];
    *(void *)&long long v99 = v23;
    outlined init with take of Any(&v99, v98);
    uint64_t v24 = v104;
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = v24;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0xD000000000000014, 0x8000000224F676E0, v25);
    uint64_t v104 = v97;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000014, 0x8000000224F676E0, &v99);
    outlined destroy of Any?((uint64_t)&v99, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v26 = MEMORY[0x263F8D310];
  id v27 = objc_msgSend(a1, sel_characteristicType);
  v94[1] = v2;
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    uint64_t v101 = v26;
    *(void *)&long long v99 = v29;
    *((void *)&v99 + 1) = v31;
    outlined init with take of Any(&v99, v98);
    uint64_t v32 = v104;
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = v32;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0xD000000000000012, 0x8000000224F676C0, v33);
    uint64_t v104 = v97;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000012, 0x8000000224F676C0, &v99);
    outlined destroy of Any?((uint64_t)&v99, &demangling cache variable for type metadata for Any?);
  }
  id v34 = objc_msgSend(a1, sel_base);
  if (v34
    && (unint64_t v35 = v34, v36 = objc_msgSend(v34, sel_source), v35, v36))
  {
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;

    uint64_t v101 = MEMORY[0x263F8D310];
    *(void *)&long long v99 = v37;
    *((void *)&v99 + 1) = v39;
    outlined init with take of Any(&v99, v98);
    uint64_t v40 = v104;
    char v41 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = v40;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0x656372756F73, 0xE600000000000000, v41);
    uint64_t v104 = v97;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x656372756F73, 0xE600000000000000, &v99);
    outlined destroy of Any?((uint64_t)&v99, &demangling cache variable for type metadata for Any?);
  }
  id v42 = objc_msgSend(a1, sel_base);
  int v96 = v12;
  if (v42
    && (os_log_t v43 = v42, v44 = objc_msgSend(v42, sel_clientName), v43, v44))
  {
    uint64_t v45 = v95;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;

    uint64_t v101 = MEMORY[0x263F8D310];
    *(void *)&long long v99 = v46;
    *((void *)&v99 + 1) = v48;
    outlined init with take of Any(&v99, v98);
    uint64_t v49 = v104;
    char v50 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = v49;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0x614E746E65696C63, 0xEA0000000000656DLL, v50);
    uint64_t v104 = v97;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v45 = v95;
    specialized Dictionary._Variant.removeValue(forKey:)(0x614E746E65696C63, 0xEA0000000000656DLL, &v99);
    outlined destroy of Any?((uint64_t)&v99, &demangling cache variable for type metadata for Any?);
  }
  id v51 = objc_msgSend(a1, sel_base);
  if (!v51) {
    goto LABEL_25;
  }
  os_log_t v52 = v51;
  id v53 = objc_msgSend(v51, sel_source);

  if (!v53) {
    goto LABEL_25;
  }
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;

  if (v54 != 1769105747 || v56 != 0xE400000000000000)
  {
    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v58)
    {
      char v57 = 1;
      goto LABEL_26;
    }
LABEL_25:
    char v57 = 0;
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  char v57 = 1;
LABEL_26:
  uint64_t v59 = MEMORY[0x263F8D4F8];
  uint64_t v101 = MEMORY[0x263F8D4F8];
  LOBYTE(v99) = v57;
  outlined init with take of Any(&v99, v98);
  uint64_t v60 = v104;
  char v61 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v97 = v60;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0x42646574616E6F64, 0xED00006972695379, v61);
  uint64_t v104 = v97;
  swift_bridgeObjectRelease();
  id v62 = objc_msgSend(a1, sel_base);
  if (!v62
    || (os_log_t v63 = v62, v64 = objc_msgSend(v62, sel_source), v63, !v64))
  {
    char v68 = 1;
    goto LABEL_35;
  }
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;

  if (v65 == 0x7261506472696854 && v67 == 0xEA00000000007974)
  {
    swift_bridgeObjectRelease();
LABEL_33:
    char v68 = 0;
    goto LABEL_35;
  }
  char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v69) {
    goto LABEL_33;
  }
  char v68 = 1;
LABEL_35:
  uint64_t v101 = v59;
  LOBYTE(v99) = v68;
  outlined init with take of Any(&v99, v98);
  uint64_t v70 = v104;
  char v71 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v97 = v70;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0xD000000000000016, 0x8000000224F66760, v71);
  uint64_t v72 = v97;
  uint64_t v104 = v97;
  swift_bridgeObjectRelease();
  id v73 = objc_msgSend(a1, sel_roomUniqueIdentifier);
  if (v73)
  {
    unint64_t v74 = v73;
    uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v77 = v76;

    uint64_t v101 = MEMORY[0x263F8D310];
    *(void *)&long long v99 = v75;
    *((void *)&v99 + 1) = v77;
    outlined init with take of Any(&v99, v98);
    char v78 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = v72;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0xD000000000000014, 0x8000000224F67720, v78);
    uint64_t v79 = v97;
    uint64_t v104 = v97;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000014, 0x8000000224F67720, &v99);
    outlined destroy of Any?((uint64_t)&v99, &demangling cache variable for type metadata for Any?);
    uint64_t v79 = v104;
  }
  char v80 = v96;
  id v81 = objc_msgSend(a1, sel_zoneUniqueIdentifiers);
  uint64_t v82 = MEMORY[0x263F8D310];
  uint64_t v83 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)&long long v99 = v83;
  outlined init with take of Any(&v99, v98);
  char v84 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v97 = v79;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0xD000000000000015, 0x8000000224F67740, v84);
  uint64_t v85 = v97;
  uint64_t v104 = v97;
  swift_bridgeObjectRelease();
  id v86 = objc_msgSend(a1, sel_serviceType);
  if (v86)
  {
    char v87 = v86;
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v90 = v89;

    uint64_t v101 = v82;
    *(void *)&long long v99 = v88;
    *((void *)&v99 + 1) = v90;
    outlined init with take of Any(&v99, v98);
    char v91 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = v85;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v98, 0x5465636976726573, 0xEB00000000657079, v91);
    uint64_t v92 = v97;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x5465636976726573, 0xEB00000000657079, &v99);
    outlined destroy of Any?((uint64_t)&v99, &demangling cache variable for type metadata for Any?);
    uint64_t v92 = v104;
  }
  type metadata accessor for Signal();
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = v9;
  *(void *)(result + 32) = v10;
  *(void *)(result + 40) = v11;
  *(void *)(result + 48) = v45;
  *(unsigned char *)(result + 56) = v80;
  strcpy((char *)(result + 64), "HomeAutomation");
  *(unsigned char *)(result + 79) = -18;
  *(void *)(result + 80) = 0x486C6F72746E6F43;
  *(void *)(result + 88) = 0xEB00000000656D6FLL;
  *(unsigned char *)(result + 96) = 1;
  *(void *)(result + 104) = v92;
  return result;
}

uint64_t HomeKitAccessoryControlSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v216 = a2;
  uint64_t v208 = a3;
  uint64_t v221 = type metadata accessor for ReliabilityCategory();
  uint64_t v207 = *(void *)(v221 - 8);
  MEMORY[0x270FA5388](v221);
  id v220 = (char *)&v206 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = 0;
  uint64_t v219 = type metadata accessor for Logger();
  uint64_t v206 = *(void *)(v219 - 8);
  MEMORY[0x270FA5388](v219);
  Swift::String v218 = (char *)&v206 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = MEMORY[0x263F8EE78];
  uint64_t v6 = (void *)MEMORY[0x263F8EE80];
  Swift::String v232 = (void *)MEMORY[0x263F8EE80];
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
    int64_t v230 = a1;
    long long v9 = (uint64_t *)(a1 + 40);
    long long v231 = xmmword_224F64E30;
    do
    {
      uint64_t v11 = *v9;
      id v12 = (id)*(v9 - 1);
      id v13 = objc_msgSend(v12, sel_accessoryUniqueIdentifier);
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v17 = 0;
      }
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v17);
      uint64_t v20 = v8[2];
      BOOL v21 = (v18 & 1) == 0;
      uint64_t v22 = v20 + v21;
      if (__OFADD__(v20, v21)) {
        goto LABEL_222;
      }
      char v23 = v18;
      if (v8[3] < v22)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, 1);
        uint64_t v8 = v232;
        unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v17);
        if ((v23 & 1) != (v25 & 1)) {
          goto LABEL_230;
        }
        unint64_t v19 = v24;
      }
      if (v23)
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = v8[7];
        id v27 = *(void **)(v26 + 8 * v19);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v26 + 8 * v19) = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          id v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          *(void *)(v26 + 8 * v19) = v27;
        }
        unint64_t v30 = v27[2];
        unint64_t v29 = v27[3];
        if (v30 >= v29 >> 1)
        {
          id v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v27);
          *(void *)(v26 + 8 * v19) = v27;
        }
        v27[2] = v30 + 1;
        uint64_t v10 = &v27[2 * v30];
        v10[4] = v12;
        v10[5] = v11;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMHomeKitClientAccessory>);
        uint64_t v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = v231;
        *(void *)(v31 + 32) = v12;
        *(void *)(v31 + 40) = v11;
        v8[(v19 >> 6) + 8] |= 1 << v19;
        uint64_t v32 = (uint64_t *)(v8[6] + 16 * v19);
        *uint64_t v32 = v15;
        v32[1] = v17;
        *(void *)(v8[7] + 8 * v19) = v31;
        uint64_t v33 = v8[2];
        BOOL v34 = __OFADD__(v33, 1);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_224;
        }
        v8[2] = v35;
      }
      v9 += 2;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    uint64_t v6 = v8;
  }
  id v36 = v6 + 8;
  uint64_t v37 = 1 << *((unsigned char *)v6 + 32);
  if (v37 < 64) {
    uint64_t v38 = ~(-1 << v37);
  }
  else {
    uint64_t v38 = -1;
  }
  unint64_t v39 = v38 & v6[8];
  int64_t v40 = (unint64_t)(v37 + 63) >> 6;
  swift_retain();
  int64_t v41 = 0;
  uint64_t v225 = "ity";
  unint64_t v224 = 0x8000000224F68C60;
  long long v231 = xmmword_224F64E30;
  id v227 = "00-8000-0026BB765291";
  unint64_t v226 = 0x8000000224F68C90;
  *(void *)&long long v222 = MEMORY[0x263F8EE78];
  uint64_t v214 = (uint64_t)v6;
  uint64_t v213 = v6 + 8;
  int64_t v212 = v40;
  while (1)
  {
    while (1)
    {
      do
      {
        while (v39)
        {
          unint64_t v42 = __clz(__rbit64(v39));
          v39 &= v39 - 1;
          unint64_t v43 = v42 | (v41 << 6);
          if (v6[2]) {
            goto LABEL_45;
          }
        }
        BOOL v34 = __OFADD__(v41++, 1);
        if (v34) {
          goto LABEL_223;
        }
        if (v41 >= v40) {
          goto LABEL_206;
        }
        unint64_t v44 = v36[v41];
        if (!v44)
        {
          int64_t v45 = v41 + 1;
          if (v41 + 1 >= v40) {
            goto LABEL_206;
          }
          unint64_t v44 = v36[v45];
          if (!v44)
          {
            int64_t v45 = v41 + 2;
            if (v41 + 2 >= v40) {
              goto LABEL_206;
            }
            unint64_t v44 = v36[v45];
            if (!v44)
            {
              int64_t v45 = v41 + 3;
              if (v41 + 3 >= v40) {
                goto LABEL_206;
              }
              unint64_t v44 = v36[v45];
              if (!v44)
              {
                int64_t v45 = v41 + 4;
                if (v41 + 4 >= v40) {
                  goto LABEL_206;
                }
                unint64_t v44 = v36[v45];
                if (!v44)
                {
                  int64_t v45 = v41 + 5;
                  if (v41 + 5 >= v40) {
                    goto LABEL_206;
                  }
                  unint64_t v44 = v36[v45];
                  if (!v44)
                  {
                    int64_t v45 = v41 + 6;
                    if (v41 + 6 >= v40) {
                      goto LABEL_206;
                    }
                    unint64_t v44 = v36[v45];
                    if (!v44)
                    {
                      while (1)
                      {
                        int64_t v41 = v45 + 1;
                        if (__OFADD__(v45, 1)) {
                          goto LABEL_229;
                        }
                        if (v41 >= v40) {
                          break;
                        }
                        unint64_t v44 = v36[v41];
                        ++v45;
                        if (v44) {
                          goto LABEL_44;
                        }
                      }
LABEL_206:
                      swift_release_n();
                      Swift::String v232 = (void *)v222;
                      swift_bridgeObjectRetain_n();
                      uint64_t v195 = v211;
                      specialized MutableCollection<>.sort(by:)((uint64_t *)&v232);
                      if (v195) {
                        goto LABEL_231;
                      }
                      swift_bridgeObjectRelease_n();
                      uint64_t v197 = v232[2];
                      if (v197)
                      {
                        uint64_t v198 = *(uint64_t (**)(double))(*(void *)v217 + 80);
                        uint64_t v199 = *(void *)v217 + 80;
                        int64_t v230 = v206 + 16;
                        LODWORD(v229) = *MEMORY[0x263F75138];
                        LODWORD(v228) = *MEMORY[0x263F750E8];
                        unint64_t v226 = v207 + 8;
                        id v227 = (char *)(v207 + 104);
                        uint64_t v225 = (char *)(v206 + 8);
                        uint64_t v214 = (uint64_t)v232;
                        id v200 = (double *)(v232 + 5);
                        unint64_t v224 = 0x8000000224F67F90;
                        *(void *)&long long v196 = 136315138;
                        long long v222 = v196;
                        uint64_t v215 = MEMORY[0x263F8EE58] + 8;
                        unint64_t v223 = v199;
                        do
                        {
                          double v201 = *v200;
                          id v202 = *((id *)v200 - 1);
                          if (v198(v201))
                          {
                            uint64_t v203 = swift_retain();
                            MEMORY[0x22A6270D0](v203);
                            if (*(void *)((v233 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v233 & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
                              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                            specialized Array._endMutation()();

                            swift_release();
                          }
                          else
                          {
                          }
                          v200 += 2;
                          --v197;
                        }
                        while (v197);
                      }
                      uint64_t result = swift_release();
                      id v205 = v208;
                      *uint64_t v208 = v233;
                      v205[1] = MEMORY[0x263F8EE78];
                      return result;
                    }
                  }
                }
              }
            }
          }
          int64_t v41 = v45;
        }
LABEL_44:
        unint64_t v39 = (v44 - 1) & v44;
        unint64_t v43 = __clz(__rbit64(v44)) + (v41 << 6);
      }
      while (!v6[2]);
LABEL_45:
      uint64_t v46 = (uint64_t *)(v6[6] + 16 * v43);
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      swift_bridgeObjectRetain();
      unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v47);
      if (v50) {
        break;
      }
      swift_bridgeObjectRelease();
    }
    unint64_t v223 = v39;
    uint64_t v51 = *(void *)(v6[7] + 8 * v49);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    int64_t v52 = *(void *)(v51 + 16);
    if (!v52)
    {
      swift_bridgeObjectRelease();
      goto LABEL_201;
    }
    uint64_t v215 = v41;
    uint64_t v53 = MEMORY[0x263F8EE80];
    Swift::String v232 = (void *)MEMORY[0x263F8EE80];
    uint64_t v54 = (uint64_t *)(v51 + 40);
    do
    {
      uint64_t v56 = *v54;
      id v57 = (id)*(v54 - 1);
      id v58 = objc_msgSend(v57, sel_base);
      if (v58
        && (uint64_t v59 = v58, v60 = objc_msgSend(v58, sel_source), v59, v60))
      {
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v62;
      }
      else
      {
        uint64_t v61 = 0;
        uint64_t v63 = 0;
      }
      unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v63);
      uint64_t v66 = *(void *)(v53 + 16);
      BOOL v67 = (v64 & 1) == 0;
      uint64_t v68 = v66 + v67;
      if (__OFADD__(v66, v67))
      {
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      char v69 = v64;
      if (*(void *)(v53 + 24) < v68)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v68, 1);
        uint64_t v53 = (uint64_t)v232;
        unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v63);
        if ((v69 & 1) != (v71 & 1)) {
          goto LABEL_230;
        }
        unint64_t v65 = v70;
      }
      if (v69)
      {
        swift_bridgeObjectRelease();
        uint64_t v72 = *(void *)(v53 + 56);
        id v73 = *(void **)(v72 + 8 * v65);
        char v74 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v72 + 8 * v65) = v73;
        if ((v74 & 1) == 0)
        {
          id v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73[2] + 1, 1, v73);
          *(void *)(v72 + 8 * v65) = v73;
        }
        unint64_t v76 = v73[2];
        unint64_t v75 = v73[3];
        if (v76 >= v75 >> 1)
        {
          id v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v75 > 1), v76 + 1, 1, v73);
          *(void *)(v72 + 8 * v65) = v73;
        }
        v73[2] = v76 + 1;
        uint64_t v55 = &v73[2 * v76];
        v55[4] = v57;
        v55[5] = v56;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMHomeKitClientAccessory>);
        uint64_t v77 = swift_allocObject();
        *(_OWORD *)(v77 + 16) = v231;
        *(void *)(v77 + 32) = v57;
        *(void *)(v77 + 40) = v56;
        *(void *)(v53 + 8 * (v65 >> 6) + 64) |= 1 << v65;
        char v78 = (uint64_t *)(*(void *)(v53 + 48) + 16 * v65);
        *char v78 = v61;
        v78[1] = v63;
        *(void *)(*(void *)(v53 + 56) + 8 * v65) = v77;
        uint64_t v79 = *(void *)(v53 + 16);
        BOOL v34 = __OFADD__(v79, 1);
        uint64_t v80 = v79 + 1;
        if (v34) {
          goto LABEL_218;
        }
        *(void *)(v53 + 16) = v80;
      }
      v54 += 2;
      --v52;
    }
    while (v52);
    swift_bridgeObjectRelease();
    uint64_t v81 = v53 + 64;
    uint64_t v82 = 1 << *(unsigned char *)(v53 + 32);
    uint64_t v83 = v82 < 64 ? ~(-1 << v82) : -1;
    unint64_t v84 = v83 & *(void *)(v53 + 64);
    int64_t v85 = (unint64_t)(v82 + 63) >> 6;
    swift_retain();
LABEL_70:
    if (v84) {
      break;
    }
    BOOL v34 = __OFADD__(v52++, 1);
    if (v34) {
      goto LABEL_217;
    }
    if (v52 < v85)
    {
      unint64_t v88 = *(void *)(v81 + 8 * v52);
      if (v88) {
        goto LABEL_89;
      }
      int64_t v89 = v52 + 1;
      if (v52 + 1 >= v85) {
        goto LABEL_199;
      }
      unint64_t v88 = *(void *)(v81 + 8 * v89);
      if (v88) {
        goto LABEL_88;
      }
      int64_t v89 = v52 + 2;
      if (v52 + 2 >= v85) {
        goto LABEL_199;
      }
      unint64_t v88 = *(void *)(v81 + 8 * v89);
      if (v88) {
        goto LABEL_88;
      }
      int64_t v89 = v52 + 3;
      if (v52 + 3 >= v85) {
        goto LABEL_199;
      }
      unint64_t v88 = *(void *)(v81 + 8 * v89);
      if (v88) {
        goto LABEL_88;
      }
      int64_t v89 = v52 + 4;
      if (v52 + 4 >= v85) {
        goto LABEL_199;
      }
      unint64_t v88 = *(void *)(v81 + 8 * v89);
      if (v88) {
        goto LABEL_88;
      }
      int64_t v89 = v52 + 5;
      if (v52 + 5 >= v85) {
        goto LABEL_199;
      }
      unint64_t v88 = *(void *)(v81 + 8 * v89);
      if (v88) {
        goto LABEL_88;
      }
      int64_t v89 = v52 + 6;
      if (v52 + 6 >= v85) {
        goto LABEL_199;
      }
      unint64_t v88 = *(void *)(v81 + 8 * v89);
      if (v88)
      {
LABEL_88:
        int64_t v52 = v89;
LABEL_89:
        unint64_t v84 = (v88 - 1) & v88;
        unint64_t v87 = __clz(__rbit64(v88)) + (v52 << 6);
        if (!*(void *)(v53 + 16)) {
          goto LABEL_70;
        }
        goto LABEL_90;
      }
      while (1)
      {
        int64_t v52 = v89 + 1;
        if (__OFADD__(v89, 1)) {
          break;
        }
        if (v52 >= v85) {
          goto LABEL_199;
        }
        unint64_t v88 = *(void *)(v81 + 8 * v52);
        ++v89;
        if (v88) {
          goto LABEL_89;
        }
      }
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
      goto LABEL_227;
    }
LABEL_199:
    swift_release_n();
    uint64_t v6 = (void *)v214;
    id v36 = v213;
    int64_t v40 = v212;
    int64_t v41 = v215;
LABEL_201:
    unint64_t v39 = v223;
  }
  unint64_t v86 = __clz(__rbit64(v84));
  v84 &= v84 - 1;
  unint64_t v87 = v86 | (v52 << 6);
  if (!*(void *)(v53 + 16)) {
    goto LABEL_70;
  }
LABEL_90:
  uint64_t v90 = (uint64_t *)(*(void *)(v53 + 48) + 16 * v87);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  swift_bridgeObjectRetain();
  unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v91);
  if ((v94 & 1) == 0
    || (uint64_t v95 = *(void *)(*(void *)(v53 + 56) + 8 * v93),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        (uint64_t v96 = *(void *)(v95 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }
  if (v96 == 1)
  {
    uint64_t v97 = *(void *)(v95 + 40);
    id v98 = *(id *)(v95 + 32);
    swift_bridgeObjectRelease();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      long long v99 = (void *)v222;
    }
    else {
      long long v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v222 + 16) + 1, 1, (void *)v222);
    }
    unint64_t v101 = v99[2];
    unint64_t v100 = v99[3];
    if (v101 >= v100 >> 1) {
      long long v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v100 > 1), v101 + 1, 1, v99);
    }
    v99[2] = v101 + 1;
    *(void *)&long long v222 = v99;
    uint64_t v102 = &v99[2 * v101];
    v102[4] = v98;
    v102[5] = v97;
    goto LABEL_70;
  }
  unint64_t v228 = v84;
  int64_t v209 = v85;
  uint64_t v210 = v81;
  swift_bridgeObjectRetain();
  unsigned __int8 v103 = (uint64_t *)(v95 + 40);
  uint64_t v229 = (void *)MEMORY[0x263F8EE78];
  while (2)
  {
    uint64_t v104 = *v103;
    id v105 = (id)*(v103 - 1);
    id v106 = objc_msgSend(v105, sel_characteristicType);
    if (!v106)
    {
LABEL_105:
      id v112 = objc_msgSend(v105, sel_characteristicType);
      if (v112)
      {
        uint64_t v113 = v112;
        uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v116 = v115;

        if (v114 == 0xD000000000000024 && v116 == v224)
        {
LABEL_108:

          swift_bridgeObjectRelease();
          goto LABEL_100;
        }
        char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v117) {
          goto LABEL_99;
        }
      }
      uint64_t v118 = v229;
      char v119 = swift_isUniquelyReferenced_nonNull_native();
      Swift::String v232 = v118;
      if ((v119 & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v118[2] + 1, 1);
        uint64_t v118 = v232;
      }
      unint64_t v121 = v118[2];
      unint64_t v120 = v118[3];
      id v122 = v118;
      if (v121 >= v120 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v120 > 1, v121 + 1, 1);
        id v122 = v232;
      }
      v122[2] = v121 + 1;
      uint64_t v229 = v122;
      uint64_t v123 = &v122[2 * v121];
      v123[4] = v105;
      v123[5] = v104;
      goto LABEL_100;
    }
    uint64_t v107 = v106;
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v110 = v109;

    if (v108 == 0xD000000000000024 && v110 == v226) {
      goto LABEL_108;
    }
    char v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v111 & 1) == 0) {
      goto LABEL_105;
    }
LABEL_99:

LABEL_100:
    v103 += 2;
    if (--v96) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  if (v229[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_129;
  }
  Swift::String v232 = (void *)v95;
  swift_bridgeObjectRetain();
  uint64_t v124 = v211;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v232);
  uint64_t v211 = v124;
  if (v124) {
    goto LABEL_231;
  }
  swift_bridgeObjectRelease();
  uint64_t v125 = v232[2];
  if (v125)
  {
    os_log_t v126 = &v232[2 * v125];
    uint64_t v127 = v126[3];
    id v128 = (id)v126[2];
    swift_release();
    id v129 = v128;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      char v130 = v229;
    }
    else {
      char v130 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v229[2] + 1, 1, v229);
    }
    unint64_t v132 = v130[2];
    unint64_t v131 = v130[3];
    if (v132 >= v131 >> 1) {
      char v130 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v131 > 1), v132 + 1, 1, v130);
    }
    v130[2] = v132 + 1;
    uint64_t v229 = v130;
    Class v133 = &v130[2 * v132];
    v133[4] = v129;
    v133[5] = v127;
  }
  else
  {
    swift_release();
  }
LABEL_129:
  uint64_t v134 = MEMORY[0x263F8EE80];
  Swift::String v232 = (void *)MEMORY[0x263F8EE80];
  uint64_t v135 = v229[2];
  if (v135)
  {
    uint64_t v136 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v138 = *v136;
      id v139 = (id)*(v136 - 1);
      id v140 = objc_msgSend(v139, sel_characteristicType);
      int64_t v230 = (int64_t)v139;
      if (v140)
      {
        uint64_t v141 = v140;
        uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v144 = v143;
      }
      else
      {
        uint64_t v142 = 0;
        uint64_t v144 = 0;
      }
      unint64_t v146 = specialized __RawDictionaryStorage.find<A>(_:)(v142, v144);
      uint64_t v147 = *(void *)(v134 + 16);
      BOOL v148 = (v145 & 1) == 0;
      uint64_t v149 = v147 + v148;
      if (__OFADD__(v147, v148)) {
        goto LABEL_220;
      }
      char v150 = v145;
      if (*(void *)(v134 + 24) < v149)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v149, 1);
        uint64_t v134 = (uint64_t)v232;
        unint64_t v151 = specialized __RawDictionaryStorage.find<A>(_:)(v142, v144);
        if ((v150 & 1) != (v152 & 1)) {
          goto LABEL_230;
        }
        unint64_t v146 = v151;
      }
      if (v150)
      {
        swift_bridgeObjectRelease();
        uint64_t v153 = *(void *)(v134 + 56);
        uint64_t v154 = *(void **)(v153 + 8 * v146);
        char v155 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v153 + 8 * v146) = v154;
        if ((v155 & 1) == 0)
        {
          uint64_t v154 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v154[2] + 1, 1, v154);
          *(void *)(v153 + 8 * v146) = v154;
        }
        unint64_t v157 = v154[2];
        unint64_t v156 = v154[3];
        if (v157 >= v156 >> 1)
        {
          uint64_t v154 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v156 > 1), v157 + 1, 1, v154);
          *(void *)(v153 + 8 * v146) = v154;
        }
        v154[2] = v157 + 1;
        id v137 = &v154[2 * v157];
        v137[4] = v230;
        v137[5] = v138;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMHomeKitClientAccessory>);
        uint64_t v158 = swift_allocObject();
        *(_OWORD *)(v158 + 16) = v231;
        *(void *)(v158 + 32) = v230;
        *(void *)(v158 + 40) = v138;
        *(void *)(v134 + 8 * (v146 >> 6) + 64) |= 1 << v146;
        uint64_t v159 = (uint64_t *)(*(void *)(v134 + 48) + 16 * v146);
        uint64_t *v159 = v142;
        v159[1] = v144;
        *(void *)(*(void *)(v134 + 56) + 8 * v146) = v158;
        uint64_t v160 = *(void *)(v134 + 16);
        BOOL v34 = __OFADD__(v160, 1);
        uint64_t v161 = v160 + 1;
        if (v34) {
          goto LABEL_221;
        }
        *(void *)(v134 + 16) = v161;
      }
      v136 += 2;
      --v135;
    }
    while (v135);
    swift_bridgeObjectRelease();
  }
  uint64_t v162 = v134 + 64;
  uint64_t v163 = 1 << *(unsigned char *)(v134 + 32);
  if (v163 < 64) {
    uint64_t v164 = ~(-1 << v163);
  }
  else {
    uint64_t v164 = -1;
  }
  unint64_t v165 = v164 & *(void *)(v134 + 64);
  int64_t v230 = (unint64_t)(v163 + 63) >> 6;
  swift_retain();
  int64_t v166 = 0;
  if (v165)
  {
    while (1)
    {
      unint64_t v167 = __clz(__rbit64(v165));
      v165 &= v165 - 1;
      unint64_t v168 = v167 | (v166 << 6);
LABEL_172:
      uint64_t v171 = (uint64_t *)(*(void *)(v134 + 48) + 16 * v168);
      uint64_t v173 = *v171;
      uint64_t v172 = v171[1];
      uint64_t v174 = *(void *)(v134 + 16);
      swift_bridgeObjectRetain();
      if (!v174) {
        goto LABEL_153;
      }
      unint64_t v175 = specialized __RawDictionaryStorage.find<A>(_:)(v173, v172);
      if ((v176 & 1) != 0 && *(void *)(*(void *)(*(void *)(v134 + 56) + 8 * v175) + 16) == 1)
      {
        if (*(void *)(v134 + 16))
        {
          unint64_t v177 = specialized __RawDictionaryStorage.find<A>(_:)(v173, v172);
          if (v178)
          {
            uint64_t v179 = *(void *)(*(void *)(v134 + 56) + 8 * v177);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (!*(void *)(v179 + 16)) {
              goto LABEL_228;
            }
            uint64_t v180 = *(void *)(v179 + 40);
            id v181 = *(id *)(v179 + 32);
            swift_bridgeObjectRelease();
            id v182 = v181;
            goto LABEL_184;
          }
        }
LABEL_153:
        swift_bridgeObjectRelease();
        if (!v165) {
          break;
        }
      }
      else
      {
        if (!*(void *)(v134 + 16)) {
          goto LABEL_153;
        }
        unint64_t v183 = specialized __RawDictionaryStorage.find<A>(_:)(v173, v172);
        if ((v184 & 1) == 0) {
          goto LABEL_153;
        }
        uint64_t v185 = *(void *)(*(void *)(v134 + 56) + 8 * v183);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        Swift::String v232 = (void *)v185;
        swift_bridgeObjectRetain();
        uint64_t v186 = v211;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v232);
        uint64_t v211 = v186;
        if (v186) {
          goto LABEL_231;
        }
        swift_bridgeObjectRelease();
        uint64_t v187 = v232[2];
        if (!v187) {
          goto LABEL_226;
        }
        uint64_t v188 = &v232[2 * v187];
        uint64_t v180 = v188[3];
        id v189 = (id)v188[2];
        swift_release();
        id v182 = v189;
LABEL_184:
        id v190 = v182;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          char v191 = (void *)v222;
        }
        else {
          char v191 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v222 + 16) + 1, 1, (void *)v222);
        }
        unint64_t v193 = v191[2];
        unint64_t v192 = v191[3];
        if (v193 >= v192 >> 1) {
          char v191 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v192 > 1), v193 + 1, 1, v191);
        }
        v191[2] = v193 + 1;
        *(void *)&long long v222 = v191;
        uint64_t v194 = &v191[2 * v193];
        v194[4] = v190;
        v194[5] = v180;

        if (!v165) {
          break;
        }
      }
    }
  }
  BOOL v34 = __OFADD__(v166++, 1);
  if (v34) {
    goto LABEL_219;
  }
  if (v166 >= v230)
  {
    unint64_t v84 = v228;
LABEL_196:
    swift_release_n();
    swift_bridgeObjectRelease();
    uint64_t v81 = v210;
    int64_t v85 = v209;
    goto LABEL_70;
  }
  unint64_t v169 = *(void *)(v162 + 8 * v166);
  unint64_t v84 = v228;
  if (v169)
  {
LABEL_171:
    unint64_t v165 = (v169 - 1) & v169;
    unint64_t v168 = __clz(__rbit64(v169)) + (v166 << 6);
    goto LABEL_172;
  }
  int64_t v170 = v166 + 1;
  if (v166 + 1 >= v230) {
    goto LABEL_196;
  }
  unint64_t v169 = *(void *)(v162 + 8 * v170);
  if (v169) {
    goto LABEL_170;
  }
  int64_t v170 = v166 + 2;
  if (v166 + 2 >= v230) {
    goto LABEL_196;
  }
  unint64_t v169 = *(void *)(v162 + 8 * v170);
  if (v169) {
    goto LABEL_170;
  }
  int64_t v170 = v166 + 3;
  if (v166 + 3 >= v230) {
    goto LABEL_196;
  }
  unint64_t v169 = *(void *)(v162 + 8 * v170);
  if (v169) {
    goto LABEL_170;
  }
  int64_t v170 = v166 + 4;
  if (v166 + 4 >= v230) {
    goto LABEL_196;
  }
  unint64_t v169 = *(void *)(v162 + 8 * v170);
  if (v169) {
    goto LABEL_170;
  }
  int64_t v170 = v166 + 5;
  if (v166 + 5 >= v230) {
    goto LABEL_196;
  }
  unint64_t v169 = *(void *)(v162 + 8 * v170);
  if (v169) {
    goto LABEL_170;
  }
  int64_t v170 = v166 + 6;
  if (v166 + 6 >= v230) {
    goto LABEL_196;
  }
  unint64_t v169 = *(void *)(v162 + 8 * v170);
  if (v169)
  {
LABEL_170:
    int64_t v166 = v170;
    goto LABEL_171;
  }
  while (1)
  {
    int64_t v166 = v170 + 1;
    if (__OFADD__(v170, 1)) {
      break;
    }
    if (v166 >= v230) {
      goto LABEL_196;
    }
    unint64_t v169 = *(void *)(v162 + 8 * v166);
    ++v170;
    if (v169) {
      goto LABEL_171;
    }
  }
LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  __break(1u);
LABEL_230:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_231:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t HomeKitAccessoryControlSignalFactory.deinit()
{
  return v0;
}

uint64_t HomeKitAccessoryControlSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t HomeKitAccessoryControlSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t HomeKitAccessoryControlSignalFactory.init()()
{
  return v0;
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance HomeKitAccessoryControlSignalFactory(uint64_t a1)
{
  return (*(uint64_t (**)(void, double))(**(void **)v1 + 80))(*(void *)a1, *(double *)(a1 + 8));
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance HomeKitAccessoryControlSignalFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  char v25 = __src;
  unint64_t v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      char v18 = &v4[16 * v13];
      char v23 = v18;
      char v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        unint64_t v19 = (char *)(a3 - 16);
        do
        {
          uint64_t v20 = v19 + 16;
          if (*((double *)v18 - 1) >= *((double *)v6 - 1))
          {
            char v23 = v18 - 16;
            if (v20 < v18 || v19 >= v18 || v20 != v18) {
              *(_OWORD *)unint64_t v19 = *((_OWORD *)v18 - 1);
            }
            BOOL v21 = v6;
            v18 -= 16;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            BOOL v21 = v6 - 16;
            if (v20 != v6 || v19 >= v6) {
              *(_OWORD *)unint64_t v19 = *(_OWORD *)v21;
            }
            char v25 = v6 - 16;
            if (v21 <= v7) {
              break;
            }
          }
          v19 -= 16;
          uint64_t v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v25, &v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    char v23 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      uint64_t v15 = v4;
      while (1)
      {
        if (*((double *)v6 + 1) >= *((double *)v15 + 1))
        {
          uint64_t v4 = v15 + 16;
          uint64_t v17 = v15;
          uint64_t v16 = v6;
          if (v7 == v15)
          {
            v15 += 16;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 16;
          }
        }
        else
        {
          uint64_t v16 = v6 + 16;
          uint64_t v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 16;
        if (v15 < v14)
        {
          uint64_t v6 = v16;
          if ((unint64_t)v16 < a3) {
            continue;
          }
        }
        unint64_t v24 = v4;
        char v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for HomeKitAccessoryControlSignalFactory()
{
  return self;
}

uint64_t method lookup function for HomeKitAccessoryControlSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HomeKitAccessoryControlSignalFactory);
}

uint64_t dispatch thunk of HomeKitAccessoryControlSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of HomeKitAccessoryControlSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of HomeKitAccessoryControlSignalFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

void static GeoCorrectionExample.runIdentifyCorrection()()
{
  uint64_t v90 = type metadata accessor for ProtoNavigationUserFollowupContext();
  uint64_t v0 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  int64_t v89 = (char *)&v84 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoNavigationFollowupType?);
  MEMORY[0x270FA5388](v100);
  uint64_t v3 = (char *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for ProtoTaskFeatureSet();
  uint64_t v4 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  unint64_t v87 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x270FA5388](v6 - 8);
  int64_t v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v99 = (uint64_t)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v98 = (uint64_t)&v84 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v97 = (char *)&v84 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v84 - v16;
  uint64_t v18 = type metadata accessor for ProtoTaskEngagementType();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unint64_t v101 = (char *)&v84 - v23;
  uint64_t v113 = type metadata accessor for ProtoSiriTaskEngagement();
  uint64_t v24 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  os_log_t v114 = (os_log_t)((char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = static SiriTaskEngagementRetriever.retrieveAllSiriTaskEngagement(streamId:)();
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      uint64_t v28 = v24 + 16;
      char v111 = *(void (**)(os_log_t, unint64_t, uint64_t))(v24 + 16);
      unint64_t v29 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v84 = v26;
      unint64_t v30 = v26 + v29;
      uint64_t v109 = (void (**)(char *, uint64_t))(v19 + 8);
      uint64_t v110 = (void (**)(char *, void, uint64_t))(v19 + 104);
      uint64_t v31 = *(void *)(v28 + 56);
      uint64_t v112 = v28;
      uint64_t v107 = (void (**)(os_log_t, uint64_t))(v28 - 8);
      uint64_t v108 = v31;
      unint64_t v86 = (void (**)(char *, uint64_t))(v4 + 8);
      int64_t v85 = (void (**)(char *, uint64_t))(v0 + 8);
      unsigned int v106 = *MEMORY[0x263F74F80];
      long long v104 = xmmword_224F64E30;
      unint64_t v93 = 0x8000000224F68D00;
      unint64_t v92 = 0x8000000224F68D30;
      unint64_t v91 = 0x8000000224F68D50;
      uint64_t v96 = v3;
      uint64_t v95 = v8;
      char v94 = v22;
      uint64_t v32 = v101;
      id v105 = v17;
      v111(v114, v26 + v29, v113);
      while (1)
      {
        ProtoSiriTaskEngagement.engagementType.getter();
        (*v110)(v22, v106, v18);
        lazy protocol witness table accessor for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        unint64_t v34 = v115;
        uint64_t v35 = v117;
        id v36 = *v109;
        (*v109)(v22, v18);
        v36(v32, v18);
        os_log_t v37 = v114;
        if (v34 == v35)
        {
          uint64_t v38 = *(void *)(ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter() + 16);
          swift_bridgeObjectRelease();
          if (v38)
          {
            uint64_t v39 = ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter();
            uint64_t v40 = *(void *)(v39 + 16);
            uint64_t v41 = type metadata accessor for ProtoTaskEngagementFeatureSet();
            uint64_t v42 = *(void *)(v41 - 8);
            uint64_t v43 = (uint64_t)v95;
            if (v40)
            {
              (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v95, v39+ ((*(unsigned __int8 *)(*(void *)(v41 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v41 - 8) + 80)), v41);
              uint64_t v44 = 0;
            }
            else
            {
              uint64_t v44 = 1;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v43, v44, 1, v41);
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, 1, v41) == 1)
            {
              outlined destroy of Any?(v43, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
              uint64_t v50 = type metadata accessor for ProtoNavigationTaskFeatureSet();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v17, 1, 1, v50);
            }
            else
            {
              uint64_t v51 = v87;
              ProtoTaskEngagementFeatureSet.featureSet.getter();
              (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v41);
              ProtoTaskFeatureSet.navigationFeatureSet.getter();
              (*v86)(v51, v88);
              uint64_t v50 = type metadata accessor for ProtoNavigationTaskFeatureSet();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v17, 0, 1, v50);
            }
            uint64_t v52 = (uint64_t)v97;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
            uint64_t v53 = swift_allocObject();
            *(_OWORD *)(v53 + 16) = v104;
            unint64_t v115 = 0;
            unint64_t v116 = 0xE000000000000000;
            _StringGuts.grow(_:)(47);
            swift_bridgeObjectRelease();
            unint64_t v115 = 0xD00000000000002BLL;
            unint64_t v116 = v93;
            outlined init with copy of ProtoNavigationTaskFeatureSet?((uint64_t)v17, v52);
            type metadata accessor for ProtoNavigationTaskFeatureSet();
            uint64_t v54 = *(void *)(v50 - 8);
            unsigned __int8 v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
            int v55 = v103(v52, 1, v50);
            uint64_t v102 = v54;
            if (v55 == 1)
            {
              outlined destroy of Any?(v52, &demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
              char v56 = 2;
            }
            else
            {
              char v57 = ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.getter();
              (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v50);
              char v56 = v57 & 1;
            }
            LOBYTE(v117) = v56;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
            v58._uint64_t countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v58);
            swift_bridgeObjectRelease();
            v59._uint64_t countAndFlagsBits = 2592;
            v59._int64_t object = (void *)0xE200000000000000;
            String.append(_:)(v59);
            unint64_t v60 = v115;
            unint64_t v61 = v116;
            *(void *)(v53 + 56) = MEMORY[0x263F8D310];
            *(void *)(v53 + 32) = v60;
            *(void *)(v53 + 40) = v61;
            print(_:separator:terminator:)();
            swift_bridgeObjectRelease();
            uint64_t v62 = swift_allocObject();
            *(_OWORD *)(v62 + 16) = v104;
            unint64_t v115 = 0;
            unint64_t v116 = 0xE000000000000000;
            _StringGuts.grow(_:)(26);
            swift_bridgeObjectRelease();
            unint64_t v115 = 0xD000000000000016;
            unint64_t v116 = v92;
            uint64_t v63 = v98;
            outlined init with copy of ProtoNavigationTaskFeatureSet?((uint64_t)v105, v98);
            if (v103(v63, 1, v50) == 1)
            {
              outlined destroy of Any?(v63, &demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
              char v64 = 2;
            }
            else
            {
              char v65 = ProtoNavigationTaskFeatureSet.isUserFollowup.getter();
              (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v63, v50);
              char v64 = v65 & 1;
            }
            LOBYTE(v117) = v64;
            v66._uint64_t countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v66);
            swift_bridgeObjectRelease();
            v67._uint64_t countAndFlagsBits = 2592;
            v67._int64_t object = (void *)0xE200000000000000;
            String.append(_:)(v67);
            unint64_t v68 = v115;
            unint64_t v69 = v116;
            *(void *)(v62 + 56) = MEMORY[0x263F8D310];
            *(void *)(v62 + 32) = v68;
            *(void *)(v62 + 40) = v69;
            print(_:separator:terminator:)();
            swift_bridgeObjectRelease();
            uint64_t v70 = swift_allocObject();
            *(_OWORD *)(v70 + 16) = v104;
            unint64_t v115 = 0;
            unint64_t v116 = 0xE000000000000000;
            _StringGuts.grow(_:)(34);
            swift_bridgeObjectRelease();
            unint64_t v115 = 0xD00000000000001ELL;
            unint64_t v116 = v91;
            uint64_t v71 = v99;
            outlined init with copy of ProtoNavigationTaskFeatureSet?((uint64_t)v105, v99);
            if (v103(v71, 1, v50) == 1)
            {
              outlined destroy of Any?(v71, &demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
              uint64_t v72 = type metadata accessor for ProtoNavigationFollowupType();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v96, 1, 1, v72);
            }
            else
            {
              id v73 = v89;
              ProtoNavigationTaskFeatureSet.followupContext.getter();
              (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v71, v50);
              char v74 = v96;
              ProtoNavigationUserFollowupContext.followupType.getter();
              (*v85)(v73, v90);
              uint64_t v75 = type metadata accessor for ProtoNavigationFollowupType();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v74, 0, 1, v75);
            }
            uint64_t v32 = v101;
            os_log_t v37 = v114;
            v76._uint64_t countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v76);
            swift_bridgeObjectRelease();
            v77._uint64_t countAndFlagsBits = 2592;
            v77._int64_t object = (void *)0xE200000000000000;
            String.append(_:)(v77);
            unint64_t v78 = v115;
            unint64_t v79 = v116;
            *(void *)(v70 + 56) = MEMORY[0x263F8D310];
            *(void *)(v70 + 32) = v78;
            *(void *)(v70 + 40) = v79;
            print(_:separator:terminator:)();
            swift_bridgeObjectRelease();
            uint64_t v17 = v105;
            outlined destroy of Any?((uint64_t)v105, &demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
            uint64_t v22 = v94;
          }
          else
          {
            if (one-time initialization token for engagement != -1) {
              swift_once();
            }
            uint64_t v45 = type metadata accessor for Logger();
            __swift_project_value_buffer(v45, (uint64_t)static Logger.engagement);
            uint64_t v46 = Logger.logObject.getter();
            os_log_type_t v47 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v46, v47))
            {
              uint64_t v48 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v48 = 0;
              _os_log_impl(&dword_224EDB000, v46, v47, "No Geo PSE", v48, 2u);
              unint64_t v49 = v48;
              uint64_t v32 = v101;
              MEMORY[0x22A627DB0](v49, -1, -1);
            }
          }
        }
        uint64_t v33 = v113;
        (*v107)(v37, v113);
        v30 += v108;
        if (!--v27) {
          break;
        }
        v111(v37, v30, v33);
      }
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    __swift_project_value_buffer(v80, (uint64_t)static Logger.engagement);
    os_log_t v114 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v114, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl(&dword_224EDB000, v114, v81, "Failed to retrieve engagement features", v82, 2u);
      MEMORY[0x22A627DB0](v82, -1, -1);
    }
    os_log_t v83 = v114;
  }
}

uint64_t outlined init with copy of ProtoNavigationTaskFeatureSet?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for GeoCorrectionExample()
{
  return &type metadata for GeoCorrectionExample;
}

uint64_t PostInteractionEngagementCollector.collect(callback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v2 + 328);
  swift_retain();
  v6(partial apply for closure #1 in PostInteractionEngagementCollector.collect(callback:), v5);
  return swift_release();
}

uint64_t sub_224F3D7DC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PostInteractionEngagementCollector.collect(callback:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t PostInteractionEngagementCollector.perform()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](PostInteractionEngagementCollector.perform(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = PostInteractionEngagementCollector.perform();
  return MEMORY[0x270FA2360]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PostInteractionEngagementCollector.perform();
  }
  else {
    uint64_t v2 = PostInteractionEngagementCollector.perform();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PostInteractionEngagementCollector.perform()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  (*(void (**)(uint64_t (*)(), uint64_t))(*(void *)a2 + 328))(partial apply for closure #1 in closure #1 in PostInteractionEngagementCollector.perform(), v8);
  return swift_release();
}

uint64_t partial apply for closure #1 in PostInteractionEngagementCollector.perform()(uint64_t a1)
{
  return closure #1 in PostInteractionEngagementCollector.perform()(a1, v1);
}

uint64_t PostInteractionEngagementCollector.collectWithSiriExecution(completion:)(void (*a1)(void))
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v24 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v24 - v12;
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.engagement);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    v24[1] = v2;
    uint64_t v18 = a1;
    uint64_t v19 = v17;
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_224EDB000, v15, v16, "Starting activity collector with Siri Execution", v17, 2u);
    uint64_t v20 = v19;
    a1 = v18;
    MEMORY[0x22A627DB0](v20, -1, -1);
  }

  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)v13);
  Date.init()();
  PostInteractionEngagementCollector.runPSECollection(startDate:endDate:)((uint64_t)v13, (uint64_t)v11);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v11, v4);
  uint64_t v21 = UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v8);
  a1(v21);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v11, v4);
  return ((uint64_t (*)(char *, uint64_t))v22)(v13, v4);
}

uint64_t PostInteractionEngagementCollector.runPSECollection(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v75 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v75 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v75);
  char v74 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v73 = (char *)&v57 - v9;
  uint64_t v72 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v72 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v72);
  uint64_t v71 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v70 = (char *)&v57 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  unint64_t v69 = (char *)&v57 - v16;
  MEMORY[0x270FA5388](v15);
  os_log_type_t v81 = (char *)&v57 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v18 - 8);
  unint64_t v68 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UISessionSignalBuilder(0);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  uint64_t v22 = type metadata accessor for SiriUISession(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void (**)(uint64_t, void, uint64_t, int *))(v23 + 56);
  uint64_t v67 = v21;
  Swift::String v66 = (int *)v22;
  char v65 = v24;
  uint64_t v64 = v23 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v24)(v21, 1, 1);
  uint64_t v25 = (unint64_t *)(v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks);
  *(void *)(v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x263F8EE78];
  uint64_t v26 = (_OWORD *)(v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  v26[1] = 0u;
  _OWORD v26[2] = 0u;
  *uint64_t v26 = 0u;
  *(void *)(v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = v3;
  uint64_t v83 = 0;
  uint64_t v77 = v3;
  swift_retain();
  uint64_t v76 = a2;
  uint64_t v82 = v20;
  unint64_t v27 = UISessionSignalBuilder.buildSiriExecutionTasks(startDate:endDate:)(a1, a2);
  swift_beginAccess();
  *uint64_t v25 = v27;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v27 >> 62))
  {
    uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v29) {
      goto LABEL_3;
    }
LABEL_11:
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v29) {
    goto LABEL_11;
  }
LABEL_3:
  if (v29 >= 1)
  {
    unint64_t v30 = 0;
    unint64_t v61 = v27 & 0xC000000000000001;
    unint64_t v60 = (void (**)(char *, uint64_t))(v10 + 8);
    Swift::String v59 = (void (**)(char *, uint64_t))(v6 + 8);
    Swift::String v58 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    unint64_t v63 = v27;
    uint64_t v62 = v29;
    uint64_t v32 = v69;
    uint64_t v31 = v70;
    uint64_t v33 = v72;
    do
    {
      if (v61)
      {
        uint64_t v34 = MEMORY[0x22A627400](v30, v27);
      }
      else
      {
        uint64_t v34 = *(void *)(v27 + 8 * v30 + 32);
        swift_retain();
      }
      unint64_t v80 = v30 + 1;
      uint64_t v35 = UISessionSignalBuilder.fetchDataStreams(taskIndex:endDate:)(v30, v76);
      uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 320))(v35);
      os_log_t v37 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 344);
      uint64_t v38 = v37(v36);
      uint64_t v39 = v71;
      v37(v38);
      Date.addingTimeInterval(_:)();
      (*v60)(v39, v33);
      uint64_t v40 = v73;
      UUID.init()();
      uint64_t v41 = UUID.uuidString.getter();
      uint64_t v78 = v42;
      uint64_t v79 = v41;
      uint64_t v43 = *v59;
      uint64_t v44 = v75;
      (*v59)(v40, v75);
      uint64_t v45 = v74;
      UUID.init()();
      uint64_t v46 = UUID.uuidString.getter();
      uint64_t v48 = v47;
      v43(v45, v44);
      unint64_t v49 = *v58;
      uint64_t v50 = (uint64_t)v68;
      (*v58)(v68, v81, v33);
      uint64_t v51 = v66;
      v49((char *)(v50 + v66[5]), v32, v33);
      v49((char *)(v50 + v51[6]), v31, v33);
      uint64_t v52 = (uint64_t *)(v50 + v51[7]);
      uint64_t v53 = v78;
      *uint64_t v52 = v79;
      v52[1] = v53;
      uint64_t v54 = (uint64_t *)(v50 + v51[8]);
      uint64_t *v54 = v46;
      v54[1] = v48;
      v65(v50, 0, 1, v51);
      uint64_t v55 = v67;
      swift_beginAccess();
      outlined assign with take of SiriUISession?(v50, v55);
      swift_endAccess();
      uint64_t v56 = v77;
      swift_retain();
      specialized UISessionSignalBuilder.buildSignalsAndTaskFeatureSets(task:completion:)(v34, v82, v56, &v83);
      swift_release();
      swift_release();
      unint64_t v30 = v80;
      unint64_t v27 = v63;
    }
    while (v62 != v80);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t PostInteractionEngagementCollector.__allocating_init(parameters:)()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PostInteractionEngagementCollector.init(parameters:)()
{
  uint64_t v1 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PostInteractionEngagementCollector.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  return PostSiriEngagementMetricsCollector.init(identifier:)(a1, a2);
}

uint64_t PostInteractionEngagementCollector.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PostInteractionEngagementCollector.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t type metadata accessor for PostInteractionEngagementCollector()
{
  return self;
}

uint64_t method lookup function for PostInteractionEngagementCollector(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PostInteractionEngagementCollector);
}

uint64_t dispatch thunk of PostInteractionEngagementCollector.perform()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 320) + **(int **)(*(void *)v0 + 320));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = dispatch thunk of PostInteractionEngagementCollector.perform();
  return v4();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t dispatch thunk of PostInteractionEngagementCollector.collectWithSiriExecution(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t sub_224F3E8C8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in PostInteractionEngagementCollector.perform()()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t AppIntentTranscriptSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v32 = MEMORY[0x263F8EE78];
  uint64_t v5 = *(void *)(result + 16);
  if (!v5)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  uint64_t v6 = v3;
  uint64_t v29 = a3;
  uint64_t v8 = (double *)(swift_bridgeObjectRetain() + 40);
  uint64_t v9 = &selRef_init;
  uint64_t v30 = a2;
  do
  {
    double v10 = *v8;
    id v11 = *((id *)v8 - 1);
    id v12 = [v11 v9[165]];
    if (!v12) {
      goto LABEL_4;
    }
    uint64_t v13 = v12;
    id v14 = objc_msgSend(v12, sel_identifier);

    if (!v14) {
      goto LABEL_4;
    }
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    Swift::String v31 = String.lowercased()();
    lazy protocol witness table accessor for type String and conformance String();
    char v18 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    if (v18)
    {
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.engagement);
      swift_bridgeObjectRetain();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v20, v21))
      {

        swift_bridgeObjectRelease_n();
LABEL_4:

        goto LABEL_5;
      }
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = v6;
      uint64_t v24 = swift_slowAlloc();
      v31._uint64_t countAndFlagsBits = v24;
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v22 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v31._countAndFlagsBits);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_224EDB000, v20, v21, "Ignore IF search tools: %s", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy();
      uint64_t v25 = v24;
      uint64_t v6 = v23;
      uint64_t v9 = &selRef_init;
      MEMORY[0x22A627DB0](v25, -1, -1);
      uint64_t v26 = v22;
      a2 = v30;
      MEMORY[0x22A627DB0](v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      if (!(*(uint64_t (**)(id, uint64_t, double))(*(void *)v6 + 88))(v11, a2, v10)) {
        goto LABEL_4;
      }
      uint64_t v27 = swift_retain();
      MEMORY[0x22A6270D0](v27);
      if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      swift_release();
    }
LABEL_5:
    v8 += 2;
    --v5;
  }
  while (v5);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v28 = v32;
  a3 = v29;
  uint64_t v4 = MEMORY[0x263F8EE78];
LABEL_19:
  *a3 = v28;
  a3[1] = v4;
  return result;
}

void AppIntentTranscriptSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v324 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v324 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v324 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  unint64_t v16 = (char *)&v324 - v15;
  MEMORY[0x270FA5388](v14);
  char v18 = (char *)&v324 - v17;
  id v19 = objc_msgSend(a1, sel_resolvedAction);
  if (!v19
    || (uint64_t v20 = v19, v21 = objc_msgSend(v19, sel_identifier), v20, !v21))
  {
LABEL_9:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.engagement);
    id v42 = a1;
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v43, v44))
    {

      return;
    }
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(void *)&long long v344 = v46;
    *(_DWORD *)uint64_t v45 = 136315138;
    id v47 = objc_msgSend(v42, sel_resolvedAction);
    uint64_t v48 = v47;
    if (v47)
    {
      id v49 = objc_msgSend(v47, sel_identifier);

      if (v49)
      {
        uint64_t v48 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v51 = v50;

LABEL_38:
        *(void *)&long long v346 = v48;
        *((void *)&v346 + 1) = v51;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v87 = String.init<A>(describing:)();
        *(void *)&long long v346 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, (uint64_t *)&v344);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_224EDB000, v43, v44, "This event: %s is not a valid event", v45, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22A627DB0](v46, -1, -1);
        MEMORY[0x22A627DB0](v45, -1, -1);

        return;
      }
      uint64_t v48 = 0;
    }
    uint64_t v51 = 0;
    goto LABEL_38;
  }
  uint64_t v335 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  if (!objc_msgSend(a1, sel_source))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v336 = v23;
  unint64_t v350 = MEMORY[0x263F8EE80];
  type metadata accessor for Utils();
  Date.init(timeIntervalSinceReferenceDate:)();
  uint64_t v24 = type metadata accessor for Date();
  unint64_t v337 = *(void *)(v24 - 8);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v337 + 56);
  BOOL v26 = 1;
  uint64_t v338 = v24;
  unint64_t v340 = v337 + 56;
  unint64_t v339 = v25;
  ((void (*)(char *, void, uint64_t))v25)(v18, 0, 1);
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v18, a2, (uint64_t)&v346, 0.0);
  outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for Date?);
  long long v27 = v346;
  long long v28 = v347;
  uint64_t v331 = v348;
  int v330 = v349;
  objc_msgSend(a1, sel_source);
  id v29 = (id)BMAppIntentInvocationSourceAsString();
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  *((void *)&v347 + 1) = MEMORY[0x263F8D310];
  *(void *)&long long v346 = v30;
  *((void *)&v346 + 1) = v32;
  outlined init with take of Any(&v346, &v344);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v342 = v350;
  unint64_t v350 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0x656372756F73, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  unint64_t v350 = v342;
  swift_bridgeObjectRelease();
  if (objc_msgSend(a1, sel_source) != 3) {
    BOOL v26 = objc_msgSend(a1, sel_source) == 4;
  }
  *((void *)&v347 + 1) = MEMORY[0x263F8D4F8];
  LOBYTE(v346) = v26;
  outlined init with take of Any(&v346, &v344);
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v342 = v350;
  unint64_t v350 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0x42646574616E6F64, 0xED00006972695379, v34);
  unint64_t v350 = v342;
  swift_bridgeObjectRelease();
  id v35 = objc_msgSend(a1, sel_bundleID);
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;

    *((void *)&v347 + 1) = MEMORY[0x263F8D310];
    *(void *)&long long v346 = v37;
    *((void *)&v346 + 1) = v39;
    outlined init with take of Any(&v346, &v344);
    char v40 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v342 = v350;
    unint64_t v350 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0x4449656C646E7562, 0xE800000000000000, v40);
    unint64_t v350 = v342;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x4449656C646E7562, 0xE800000000000000, &v346);
    outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for Any?);
  }
  id v52 = objc_msgSend(a1, sel_executionUUID);
  if (v52)
  {
    uint64_t v53 = v52;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v54 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v7, 0, 1, v54);
  }
  else
  {
    uint64_t v54 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v7, 1, 1, v54);
  }
  outlined init with take of DateInterval?((uint64_t)v7, (uint64_t)v9, &demangling cache variable for type metadata for UUID?);
  type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v9, 1, v54) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
    specialized Dictionary._Variant.removeValue(forKey:)(0x6F69747563657865, 0xED0000444955556ELL, &v346);
    outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for Any?);
  }
  else
  {
    *((void *)&v347 + 1) = v54;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v346);
    (*(void (**)(uint64_t *, char *, uint64_t))(v55 + 32))(boxed_opaque_existential_0, v9, v54);
    outlined init with take of Any(&v346, &v344);
    char v57 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v342 = v350;
    unint64_t v350 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0x6F69747563657865, 0xED0000444955556ELL, v57);
    unint64_t v350 = v342;
    swift_bridgeObjectRelease();
  }
  uint64_t v58 = v338;
  unint64_t v59 = v337;
  id v60 = objc_msgSend(a1, sel_executionDate);
  unint64_t v61 = &selRef_init;
  if (v60)
  {
    uint64_t v62 = v60;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v63 = 0;
  }
  else
  {
    uint64_t v63 = 1;
  }
  v339(v13, v63, 1, v58);
  outlined init with take of DateInterval?((uint64_t)v13, (uint64_t)v16, &demangling cache variable for type metadata for Date?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v16, 1, v58) == 1)
  {
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Date?);
    specialized Dictionary._Variant.removeValue(forKey:)(0x6F69747563657865, 0xED0000657461446ELL, &v346);
    outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for Any?);
  }
  else
  {
    *((void *)&v347 + 1) = v58;
    uint64_t v64 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v346);
    (*(void (**)(uint64_t *, char *, uint64_t))(v59 + 32))(v64, v16, v58);
    outlined init with take of Any(&v346, &v344);
    char v65 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v342 = v350;
    unint64_t v350 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0x6F69747563657865, 0xED0000657461446ELL, v65);
    unint64_t v350 = v342;
    swift_bridgeObjectRelease();
  }
  uint64_t v66 = MEMORY[0x263F8D4F8];
  id v67 = objc_msgSend(a1, sel_bundleID);
  if (v67)
  {
    unint64_t v68 = v67;
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v71 = v70;
  }
  else
  {
    uint64_t v69 = 0;
    unint64_t v71 = 0xE000000000000000;
  }
  *(void *)&long long v346 = v69;
  *((void *)&v346 + 1) = v71;
  *(void *)&long long v344 = 0x6C7070612E6D6F63;
  *((void *)&v344 + 1) = 0xEA00000000002E65;
  lazy protocol witness table accessor for type String and conformance String();
  char v72 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  *((void *)&v347 + 1) = v66;
  LOBYTE(v346) = v72 & 1;
  outlined init with take of Any(&v346, &v344);
  char v73 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v342 = v350;
  unint64_t v350 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0xD000000000000016, 0x8000000224F66760, v73);
  unint64_t v350 = v342;
  swift_bridgeObjectRelease();
  id v74 = objc_msgSend(a1, sel_bundleID);
  if (v74)
  {
    uint64_t v75 = v74;
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v78 = v77;

    *(void *)&long long v346 = v76;
    *((void *)&v346 + 1) = v78;
    *(void *)&long long v344 = 46;
    *((void *)&v344 + 1) = 0xE100000000000000;
    uint64_t v79 = StringProtocol.components<A>(separatedBy:)();
    uint64_t v80 = *(void *)(v79 + 16);
    if (v80)
    {
      uint64_t v81 = v79 + 16 * v80;
      uint64_t v83 = *(void *)(v81 + 16);
      uint64_t v82 = *(void *)(v81 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&long long v346 = v83;
      *((void *)&v346 + 1) = v82;
      *(void *)&long long v344 = 0x6F69736E65747845;
      *((void *)&v344 + 1) = 0xE90000000000006ELL;
      *(void *)&long long v342 = 0;
      *((void *)&v342 + 1) = 0xE000000000000000;
      uint64_t v84 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v86 = v85;
      swift_bridgeObjectRelease();
      unint64_t v61 = &selRef_init;
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  unint64_t v86 = 0xE900000000000074;
  uint64_t v84 = 0x6E65746E49707041;
LABEL_41:
  *((void *)&v347 + 1) = MEMORY[0x263F8D310];
  *(void *)&long long v346 = v84;
  *((void *)&v346 + 1) = v86;
  outlined init with take of Any(&v346, &v344);
  char v89 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v342 = v350;
  unint64_t v350 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0xD000000000000011, 0x8000000224F68A90, v89);
  unint64_t v350 = v342;
  swift_bridgeObjectRelease();
  id v90 = objc_msgSend(a1, sel_resolvedAction);
  uint64_t v91 = v336;
  if (!v90)
  {
LABEL_208:
    unint64_t v322 = v350;
    type metadata accessor for Signal();
    uint64_t v323 = swift_allocObject();
    *(_OWORD *)(v323 + 16) = v27;
    *(_OWORD *)(v323 + 32) = v28;
    *(void *)(v323 + 48) = v331;
    *(unsigned char *)(v323 + 56) = v330;
    *(void *)(v323 + 64) = 0x6E65746E49707041;
    *(void *)(v323 + 72) = 0xE900000000000074;
    *(void *)(v323 + 80) = v335;
    *(void *)(v323 + 88) = v91;
    *(unsigned char *)(v323 + 96) = 1;
    *(void *)(v323 + 104) = v322;
    return;
  }
  unint64_t v92 = v90;
  id v93 = objc_msgSend(v90, sel_parameters);

  type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for BMAppIntentInvocationProperty);
  unint64_t v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v94 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v96) {
      goto LABEL_44;
    }
    goto LABEL_207;
  }
  uint64_t v96 = *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v96)
  {
LABEL_207:
    swift_bridgeObjectRelease();
    uint64_t v91 = v336;
    goto LABEL_208;
  }
LABEL_44:
  if (v96 >= 1)
  {
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    unint64_t v99 = v94 & 0xC000000000000001;
    *(void *)&long long v95 = 136315138;
    long long v328 = v95;
    uint64_t v325 = MEMORY[0x263F8EE58] + 8;
    *(void *)&long long v95 = 138412290;
    long long v332 = v95;
    long long v334 = xmmword_224F65990;
    unint64_t v327 = (unint64_t)"E signals with SELF.";
    uint64_t v326 = 0x8000000224F68B00;
    unint64_t v337 = v94;
    uint64_t v338 = v96;
    unint64_t v339 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v94 & 0xC000000000000001);
    while (1)
    {
      if (v99) {
        id v102 = (id)MEMORY[0x22A627400](v97, v94);
      }
      else {
        id v102 = *(id *)(v94 + 8 * v97 + 32);
      }
      unsigned __int8 v103 = v102;
      id v104 = objc_msgSend(v102, v61[107], v324, v325);
      if (v104)
      {
        id v105 = v104;
        uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v108 = v107;

        if (v106 == 0x746567726174 && v108 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_68:
          id v118 = objc_msgSend(v103, sel_value);
          if (v118
            && (char v119 = v118,
                id v120 = objc_msgSend(v118, sel_valueType),
                v119,
                v120)
            && (id v121 = objc_msgSend(v120, sel_entity), v120, v121)
            && (id v122 = [v121 v61[107]], v121, v122))
          {
            uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v125 = v124;

            *((void *)&v347 + 1) = MEMORY[0x263F8D310];
            *(void *)&long long v346 = v123;
            *((void *)&v346 + 1) = v125;
            outlined init with take of Any(&v346, &v344);
            char v126 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v342 = v350;
            unint64_t v350 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0x7954797469746E65, 0xEA00000000006570, v126);
            unint64_t v350 = v342;
            swift_bridgeObjectRelease();
            uint64_t v127 = &selRef_init;
          }
          else
          {
            swift_bridgeObjectRetain();
            unint64_t v128 = specialized __RawDictionaryStorage.find<A>(_:)(0x7954797469746E65, 0xEA00000000006570);
            char v130 = v129;
            swift_bridgeObjectRelease();
            if (v130)
            {
              char v131 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v132 = v350;
              *(void *)&long long v344 = v350;
              unint64_t v350 = 0x8000000000000000;
              if ((v131 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v132 = v344;
              }
              swift_bridgeObjectRelease();
              outlined init with take of Any((_OWORD *)(*(void *)(v132 + 56) + 32 * v128), &v346);
              specialized _NativeDictionary._delete(at:)(v128, v132);
              unint64_t v350 = v132;
              swift_bridgeObjectRelease();
            }
            else
            {
              long long v346 = 0u;
              long long v347 = 0u;
            }
            uint64_t v127 = &selRef_init;
            outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for Any?);
          }
          id v133 = [v103 v127[70]];
          if (v133
            && (uint64_t v134 = v133,
                id v135 = objc_msgSend(v133, sel_displayRepresentation),
                v134,
                v135)
            && (id v136 = objc_msgSend(v135, sel_title), v135, v136)
            && (id v137 = objc_msgSend(v136, sel_key), v136, v137))
          {
            uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v140 = v139;

            *((void *)&v347 + 1) = MEMORY[0x263F8D310];
            *(void *)&long long v346 = v138;
            *((void *)&v346 + 1) = v140;
            outlined init with take of Any(&v346, &v344);
            char v141 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v342 = v350;
            unint64_t v350 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0x6954797469746E65, 0xEB00000000656C74, v141);
            unint64_t v350 = v342;
            swift_bridgeObjectRelease();
            uint64_t v142 = &selRef_init;
          }
          else
          {
            swift_bridgeObjectRetain();
            unint64_t v143 = specialized __RawDictionaryStorage.find<A>(_:)(0x6954797469746E65, 0xEB00000000656C74);
            char v145 = v144;
            swift_bridgeObjectRelease();
            if (v145)
            {
              char v146 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v147 = v350;
              *(void *)&long long v344 = v350;
              unint64_t v350 = 0x8000000000000000;
              if ((v146 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v147 = v344;
              }
              swift_bridgeObjectRelease();
              outlined init with take of Any((_OWORD *)(*(void *)(v147 + 56) + 32 * v143), &v346);
              specialized _NativeDictionary._delete(at:)(v143, v147);
              unint64_t v350 = v147;
              swift_bridgeObjectRelease();
            }
            else
            {
              long long v346 = 0u;
              long long v347 = 0u;
            }
            uint64_t v142 = &selRef_init;
            outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for Any?);
          }
          id v148 = [v103 v142[70]];
          if (!v148) {
            goto LABEL_49;
          }
          uint64_t v149 = v148;
          id v150 = [v148 v142[70]];

          if (!v150) {
            goto LABEL_49;
          }
          uint64_t v151 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v153 = v152;

          type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
          type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for LNEntity);
          unint64_t v340 = v151;
          uint64_t v154 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
          if (v98)
          {
            unint64_t v155 = v94;
            unint64_t v156 = v153;
            if (one-time initialization token for engagement != -1) {
              swift_once();
            }
            uint64_t v157 = type metadata accessor for Logger();
            __swift_project_value_buffer(v157, (uint64_t)static Logger.engagement);
            id v158 = v98;
            id v159 = v98;
            uint64_t v160 = Logger.logObject.getter();
            os_log_type_t v161 = static os_log_type_t.error.getter();
            BOOL v162 = os_log_type_enabled(v160, v161);
            uint64_t v96 = v338;
            if (v162)
            {
              uint64_t v163 = swift_slowAlloc();
              uint64_t v164 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v163 = v332;
              id v165 = v98;
              uint64_t v166 = _swift_stdlib_bridgeErrorToNSError();
              *(void *)(v163 + 4) = v166;
              *uint64_t v164 = v166;

              _os_log_impl(&dword_224EDB000, v160, v161, "Can't decode entityValue, error: %@", (uint8_t *)v163, 0xCu);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              swift_arrayDestroy();
              unint64_t v167 = v164;
              unint64_t v99 = (unint64_t)v339;
              MEMORY[0x22A627DB0](v167, -1, -1);
              MEMORY[0x22A627DB0](v163, -1, -1);

              outlined consume of Data._Representation(v340, v156);
            }
            else
            {

              outlined consume of Data._Representation(v340, v156);
            }
            uint64_t v98 = 0;
            unint64_t v94 = v155;
            unint64_t v61 = &selRef_init;
            goto LABEL_50;
          }
          uint64_t v237 = (void *)v154;
          unint64_t v329 = v153;
          v333 = 0;
          if (one-time initialization token for engagement != -1) {
            swift_once();
          }
          uint64_t v238 = type metadata accessor for Logger();
          __swift_project_value_buffer(v238, (uint64_t)static Logger.engagement);
          id v239 = v237;
          uint64_t v240 = Logger.logObject.getter();
          os_log_type_t v241 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v240, v241))
          {
            uint64_t v242 = swift_slowAlloc();
            uint64_t v243 = swift_slowAlloc();
            *(void *)&long long v346 = v243;
            *(_DWORD *)uint64_t v242 = v328;
            *(void *)&long long v344 = v237;
            id v244 = v239;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LNEntity?);
            uint64_t v245 = String.init<A>(describing:)();
            *(void *)(v242 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v245, v246, (uint64_t *)&v346);

            unint64_t v94 = v337;
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_224EDB000, v240, v241, "Decoded entityValue: %s", (uint8_t *)v242, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x22A627DB0](v243, -1, -1);
            uint64_t v247 = v242;
            unint64_t v61 = &selRef_init;
            MEMORY[0x22A627DB0](v247, -1, -1);
          }
          else
          {
          }
          uint64_t v98 = v333;
          if (v237)
          {
            id v265 = [v239 v61[107]];
            id v266 = objc_msgSend(v265, sel_instanceIdentifier);

            uint64_t v267 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v269 = v268;

            *((void *)&v347 + 1) = MEMORY[0x263F8D310];
            *(void *)&long long v346 = v267;
            *((void *)&v346 + 1) = v269;
            outlined init with take of Any(&v346, &v344);
            char v270 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v342 = v350;
            unint64_t v350 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0xD000000000000010, v327 | 0x8000000000000000, v270);
            unint64_t v350 = v342;

            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v340, v329);

            uint64_t v96 = v338;
LABEL_197:
            unint64_t v99 = (unint64_t)v339;
            goto LABEL_50;
          }
          swift_bridgeObjectRetain();
          unint64_t v280 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, v326);
          char v282 = v281;
          swift_bridgeObjectRelease();
          if (v282)
          {
            char v283 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v284 = v350;
            *(void *)&long long v342 = v350;
            unint64_t v350 = 0x8000000000000000;
            unint64_t v99 = (unint64_t)v339;
            if ((v283 & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v284 = v342;
            }
            swift_bridgeObjectRelease();
            outlined init with take of Any((_OWORD *)(*(void *)(v284 + 56) + 32 * v280), &v344);
            specialized _NativeDictionary._delete(at:)(v280, v284);
            unint64_t v350 = v284;
            swift_bridgeObjectRelease();
            uint64_t v96 = v338;
          }
          else
          {
            long long v344 = 0u;
            long long v345 = 0u;
            uint64_t v96 = v338;
            unint64_t v99 = (unint64_t)v339;
          }
          outlined destroy of Any?((uint64_t)&v344, &demangling cache variable for type metadata for Any?);
          uint64_t v100 = v340;
          unint64_t v101 = &v349;
          goto LABEL_48;
        }
        char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v110) {
          goto LABEL_68;
        }
      }
      id v111 = [v103 v61[107]];
      if (v111)
      {
        uint64_t v112 = v111;
        uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v115 = v114;

        if (v113 == 0x6850686372616573 && v115 == 0xEC00000065736172)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v117 & 1) == 0) {
            goto LABEL_105;
          }
        }
        id v168 = objc_msgSend(v103, sel_value);
        if (v168)
        {
          unint64_t v169 = v168;
          id v170 = objc_msgSend(v168, sel_value);

          if (v170)
          {
            uint64_t v171 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v173 = v172;

            id v174 = objc_msgSend(v103, sel_value);
            if (v174
              && (unint64_t v175 = v174,
                  id v176 = objc_msgSend(v174, sel_displayRepresentation),
                  v175,
                  v176)
              && (id v177 = objc_msgSend(v176, sel_title), v176, v177)
              && (id v178 = objc_msgSend(v177, sel_key), v177, v178))
            {
              uint64_t v179 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v181 = v180;

              *((void *)&v347 + 1) = MEMORY[0x263F8D310];
              *(void *)&long long v346 = v179;
              *((void *)&v346 + 1) = v181;
              outlined init with take of Any(&v346, &v344);
              char v182 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&long long v342 = v350;
              unint64_t v350 = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0x6954797469746E65, 0xEB00000000656C74, v182);
              unint64_t v350 = v342;
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRetain();
              unint64_t v232 = specialized __RawDictionaryStorage.find<A>(_:)(0x6954797469746E65, 0xEB00000000656C74);
              char v234 = v233;
              swift_bridgeObjectRelease();
              if (v234)
              {
                char v235 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v236 = v350;
                *(void *)&long long v344 = v350;
                unint64_t v350 = 0x8000000000000000;
                if ((v235 & 1) == 0)
                {
                  specialized _NativeDictionary.copy()();
                  uint64_t v236 = v344;
                }
                swift_bridgeObjectRelease();
                outlined init with take of Any((_OWORD *)(*(void *)(v236 + 56) + 32 * v232), &v346);
                specialized _NativeDictionary._delete(at:)(v232, v236);
                unint64_t v350 = v236;
                swift_bridgeObjectRelease();
              }
              else
              {
                long long v346 = 0u;
                long long v347 = 0u;
              }
              outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for Any?);
            }
            type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
            uint64_t v248 = swift_allocObject();
            *(_OWORD *)(v248 + 16) = v334;
            *(void *)(v248 + 32) = type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSString);
            *(void *)(v248 + 40) = type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            *(void *)(v248 + 48) = type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSArray);
            *(void *)(v248 + 56) = type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSData);
            static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
            if (v98)
            {
              swift_bridgeObjectRelease();
              if (one-time initialization token for engagement != -1) {
                swift_once();
              }
              uint64_t v249 = type metadata accessor for Logger();
              __swift_project_value_buffer(v249, (uint64_t)static Logger.engagement);
              id v250 = v98;
              id v251 = v98;
              uint64_t v199 = Logger.logObject.getter();
              os_log_type_t v252 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v199, v252))
              {
                uint64_t v253 = swift_slowAlloc();
                v254 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v253 = v332;
                id v255 = v98;
                uint64_t v256 = _swift_stdlib_bridgeErrorToNSError();
                *(void *)(v253 + 4) = v256;
                void *v254 = v256;

                _os_log_impl(&dword_224EDB000, v199, v252, "Can't decode value, error: %@", (uint8_t *)v253, 0xCu);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                swift_arrayDestroy();
                uint64_t v257 = v254;
                uint64_t v96 = v338;
                MEMORY[0x22A627DB0](v257, -1, -1);
                MEMORY[0x22A627DB0](v253, -1, -1);

                uint64_t v206 = v171;
                unint64_t v207 = v173;
LABEL_147:
                outlined consume of Data._Representation(v206, v207);

LABEL_166:
                uint64_t v98 = 0;
LABEL_196:
                unint64_t v94 = v337;
                goto LABEL_197;
              }

              uint64_t v271 = v171;
              unint64_t v272 = v173;
LABEL_165:
              outlined consume of Data._Representation(v271, v272);

              goto LABEL_166;
            }
            swift_bridgeObjectRelease();
            if (one-time initialization token for engagement != -1) {
              swift_once();
            }
            uint64_t v258 = type metadata accessor for Logger();
            __swift_project_value_buffer(v258, (uint64_t)static Logger.engagement);
            outlined init with copy of Any?((uint64_t)&v346, (uint64_t)&v344);
            v259 = Logger.logObject.getter();
            os_log_type_t v260 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v259, v260))
            {
              uint64_t v261 = swift_slowAlloc();
              uint64_t v262 = swift_slowAlloc();
              unint64_t v341 = v262;
              *(_DWORD *)uint64_t v261 = v328;
              outlined init with copy of Any?((uint64_t)&v344, (uint64_t)&v342);
              unint64_t v340 = v171;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
              uint64_t v263 = String.init<A>(describing:)();
              *(void *)(v261 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v263, v264, (uint64_t *)&v341);
              unint64_t v61 = &selRef_init;
              swift_bridgeObjectRelease();
              outlined destroy of Any?((uint64_t)&v344, &demangling cache variable for type metadata for Any?);
              _os_log_impl(&dword_224EDB000, v259, v260, "Decoded value: %s", (uint8_t *)v261, 0xCu);
              swift_arrayDestroy();
              uint64_t v171 = v340;
              MEMORY[0x22A627DB0](v262, -1, -1);
              MEMORY[0x22A627DB0](v261, -1, -1);
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v344, &demangling cache variable for type metadata for Any?);
            }

            uint64_t v96 = v338;
            outlined init with copy of Any?((uint64_t)&v346, (uint64_t)&v344);
            if (*((void *)&v345 + 1))
            {
              outlined init with take of Any(&v344, &v342);
              char v295 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v341 = v350;
              unint64_t v350 = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v342, 0x6850686372616573, 0xEC00000065736172, v295);
              unint64_t v350 = v341;

              swift_bridgeObjectRelease();
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v344, &demangling cache variable for type metadata for Any?);
              swift_bridgeObjectRetain();
              unint64_t v297 = specialized __RawDictionaryStorage.find<A>(_:)(0x6850686372616573, 0xEC00000065736172);
              char v299 = v298;
              swift_bridgeObjectRelease();
              if (v299)
              {
                char v300 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v301 = v350;
                unint64_t v341 = v350;
                unint64_t v350 = 0x8000000000000000;
                if ((v300 & 1) == 0)
                {
                  specialized _NativeDictionary.copy()();
                  uint64_t v301 = v341;
                }
                swift_bridgeObjectRelease();
                outlined init with take of Any((_OWORD *)(*(void *)(v301 + 56) + 32 * v297), &v342);
                specialized _NativeDictionary._delete(at:)(v297, v301);
                unint64_t v350 = v301;
                swift_bridgeObjectRelease();
              }
              else
              {
                long long v342 = 0u;
                long long v343 = 0u;
              }
              outlined destroy of Any?((uint64_t)&v342, &demangling cache variable for type metadata for Any?);
            }
            uint64_t v312 = v171;
            unint64_t v313 = v173;
LABEL_195:
            outlined consume of Data._Representation(v312, v313);
            outlined destroy of Any?((uint64_t)&v346, &demangling cache variable for type metadata for Any?);
            goto LABEL_196;
          }
        }
      }
LABEL_105:
      id v183 = [v103 v61[107]];
      if (v183)
      {
        char v184 = v183;
        uint64_t v185 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v187 = v186;

        if (v185 == 0x7265755172657375 && v187 == 0xE900000000000079)
        {
          swift_bridgeObjectRelease();
LABEL_110:
          id v189 = objc_msgSend(v103, sel_value);
          if (v189)
          {
            id v190 = v189;
            id v191 = objc_msgSend(v189, sel_value);

            if (v191)
            {
              uint64_t v192 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v194 = v193;

              type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
              uint64_t v195 = swift_allocObject();
              *(_OWORD *)(v195 + 16) = v334;
              *(void *)(v195 + 32) = type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSString);
              *(void *)(v195 + 40) = type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
              *(void *)(v195 + 48) = type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSArray);
              *(void *)(v195 + 56) = type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSData);
              static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
              if (v98)
              {
                swift_bridgeObjectRelease();
                if (one-time initialization token for engagement != -1) {
                  swift_once();
                }
                uint64_t v196 = type metadata accessor for Logger();
                __swift_project_value_buffer(v196, (uint64_t)static Logger.engagement);
                id v197 = v98;
                id v198 = v98;
                uint64_t v199 = Logger.logObject.getter();
                os_log_type_t v200 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v199, v200))
                {
                  uint64_t v201 = swift_slowAlloc();
                  id v202 = (void *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v201 = v332;
                  id v203 = v98;
                  uint64_t v204 = _swift_stdlib_bridgeErrorToNSError();
                  *(void *)(v201 + 4) = v204;
                  *id v202 = v204;

                  _os_log_impl(&dword_224EDB000, v199, v200, "Can't decode value, error: %@", (uint8_t *)v201, 0xCu);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                  swift_arrayDestroy();
                  id v205 = v202;
                  uint64_t v96 = v338;
                  MEMORY[0x22A627DB0](v205, -1, -1);
                  MEMORY[0x22A627DB0](v201, -1, -1);

                  uint64_t v206 = v192;
                  unint64_t v207 = v194;
                  goto LABEL_147;
                }

                uint64_t v271 = v192;
                unint64_t v272 = v194;
                goto LABEL_165;
              }
              swift_bridgeObjectRelease();
              if (one-time initialization token for engagement != -1) {
                swift_once();
              }
              uint64_t v273 = type metadata accessor for Logger();
              __swift_project_value_buffer(v273, (uint64_t)static Logger.engagement);
              outlined init with copy of Any?((uint64_t)&v346, (uint64_t)&v344);
              v274 = Logger.logObject.getter();
              os_log_type_t v275 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v274, v275))
              {
                uint64_t v276 = swift_slowAlloc();
                uint64_t v277 = swift_slowAlloc();
                unint64_t v341 = v277;
                *(_DWORD *)uint64_t v276 = v328;
                outlined init with copy of Any?((uint64_t)&v344, (uint64_t)&v342);
                v333 = 0;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
                uint64_t v278 = String.init<A>(describing:)();
                *(void *)(v276 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v278, v279, (uint64_t *)&v341);
                unint64_t v61 = &selRef_init;
                swift_bridgeObjectRelease();
                outlined destroy of Any?((uint64_t)&v344, &demangling cache variable for type metadata for Any?);
                _os_log_impl(&dword_224EDB000, v274, v275, "Decoded value: %s", (uint8_t *)v276, 0xCu);
                swift_arrayDestroy();
                uint64_t v98 = v333;
                MEMORY[0x22A627DB0](v277, -1, -1);
                MEMORY[0x22A627DB0](v276, -1, -1);
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v344, &demangling cache variable for type metadata for Any?);
              }

              uint64_t v96 = v338;
              outlined init with copy of Any?((uint64_t)&v346, (uint64_t)&v344);
              if (*((void *)&v345 + 1))
              {
                outlined init with take of Any(&v344, &v342);
                char v296 = swift_isUniquelyReferenced_nonNull_native();
                unint64_t v341 = v350;
                unint64_t v350 = 0x8000000000000000;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v342, 0x7265755172657375, 0xE900000000000079, v296);
                unint64_t v350 = v341;

                swift_bridgeObjectRelease();
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v344, &demangling cache variable for type metadata for Any?);
                swift_bridgeObjectRetain();
                unint64_t v307 = specialized __RawDictionaryStorage.find<A>(_:)(0x7265755172657375, 0xE900000000000079);
                char v309 = v308;
                swift_bridgeObjectRelease();
                if (v309)
                {
                  char v310 = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v311 = v350;
                  unint64_t v341 = v350;
                  unint64_t v350 = 0x8000000000000000;
                  if ((v310 & 1) == 0)
                  {
                    specialized _NativeDictionary.copy()();
                    uint64_t v311 = v341;
                  }
                  swift_bridgeObjectRelease();
                  outlined init with take of Any((_OWORD *)(*(void *)(v311 + 56) + 32 * v307), &v342);
                  specialized _NativeDictionary._delete(at:)(v307, v311);
                  unint64_t v350 = v311;
                  swift_bridgeObjectRelease();
                }
                else
                {
                  long long v342 = 0u;
                  long long v343 = 0u;
                }
                outlined destroy of Any?((uint64_t)&v342, &demangling cache variable for type metadata for Any?);
              }
              uint64_t v312 = v192;
              unint64_t v313 = v194;
              goto LABEL_195;
            }
          }
          goto LABEL_117;
        }
        char v188 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v188) {
          goto LABEL_110;
        }
      }
LABEL_117:
      id v208 = [v103 v61[107]];
      if (!v208) {
        goto LABEL_49;
      }
      int64_t v209 = v208;
      uint64_t v210 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v212 = v211;

      if (v210 == 0x6169726574697263 && v212 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v213 = &selRef_init;
      }
      else
      {
        char v214 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v213 = &selRef_init;
        if ((v214 & 1) == 0) {
          goto LABEL_49;
        }
      }
      id v215 = [v103 v213[70]];
      if (!v215) {
        goto LABEL_49;
      }
      uint64_t v216 = v215;
      id v217 = [v215 v213[70]];

      if (!v217) {
        goto LABEL_49;
      }
      uint64_t v218 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v220 = v219;

      type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
      type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for LNStringSearchCriteria);
      unint64_t v329 = v218;
      unint64_t v340 = v220;
      uint64_t v221 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      if (v98)
      {
        if (one-time initialization token for engagement != -1) {
          swift_once();
        }
        uint64_t v222 = type metadata accessor for Logger();
        __swift_project_value_buffer(v222, (uint64_t)static Logger.engagement);
        id v223 = v98;
        id v224 = v98;
        uint64_t v225 = Logger.logObject.getter();
        os_log_type_t v226 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v225, v226))
        {
          uint64_t v227 = swift_slowAlloc();
          unint64_t v228 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v227 = v332;
          id v229 = v98;
          uint64_t v230 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v227 + 4) = v230;
          void *v228 = v230;

          _os_log_impl(&dword_224EDB000, v225, v226, "Can't decode value, error: %@", (uint8_t *)v227, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          long long v231 = v228;
          unint64_t v99 = (unint64_t)v339;
          MEMORY[0x22A627DB0](v231, -1, -1);
          MEMORY[0x22A627DB0](v227, -1, -1);

          outlined consume of Data._Representation(v329, v340);
        }
        else
        {

          outlined consume of Data._Representation(v329, v340);
        }
        uint64_t v98 = 0;
        goto LABEL_50;
      }
      id v285 = (void *)v221;
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v286 = type metadata accessor for Logger();
      __swift_project_value_buffer(v286, (uint64_t)static Logger.engagement);
      id v287 = v285;
      unint64_t v288 = Logger.logObject.getter();
      os_log_type_t v289 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v288, v289))
      {
        v333 = 0;
        uint64_t v290 = swift_slowAlloc();
        uint64_t v324 = swift_slowAlloc();
        *(void *)&long long v344 = v324;
        *(_DWORD *)uint64_t v290 = v328;
        if (v285)
        {
          id v291 = objc_msgSend(v287, sel_term);
          uint64_t v292 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v294 = v293;

          unint64_t v99 = (unint64_t)v339;
        }
        else
        {
          uint64_t v292 = 0;
          uint64_t v294 = 0;
        }
        *(void *)&long long v346 = v292;
        *((void *)&v346 + 1) = v294;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v314 = String.init<A>(describing:)();
        *(void *)(v290 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v314, v315, (uint64_t *)&v344);

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_224EDB000, v288, v289, "Decoded value: %s", (uint8_t *)v290, 0xCu);
        uint64_t v316 = v324;
        swift_arrayDestroy();
        MEMORY[0x22A627DB0](v316, -1, -1);
        MEMORY[0x22A627DB0](v290, -1, -1);

        unint64_t v94 = v337;
        uint64_t v98 = v333;
        unint64_t v61 = &selRef_init;
        if (v285)
        {
LABEL_184:
          id v302 = objc_msgSend(v287, sel_term, v324);
          uint64_t v303 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v305 = v304;

          *((void *)&v347 + 1) = MEMORY[0x263F8D310];
          *(void *)&long long v346 = v303;
          *((void *)&v346 + 1) = v305;
          outlined init with take of Any(&v346, &v344);
          char v306 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v342 = v350;
          unint64_t v350 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v344, 0x6169726574697263, 0xE800000000000000, v306);
          unint64_t v350 = v342;

          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v329, v340);

          uint64_t v96 = v338;
          goto LABEL_50;
        }
      }
      else
      {

        unint64_t v61 = &selRef_init;
        if (v285) {
          goto LABEL_184;
        }
      }
      swift_bridgeObjectRetain();
      unint64_t v317 = specialized __RawDictionaryStorage.find<A>(_:)(0x6169726574697263, 0xE800000000000000);
      char v319 = v318;
      swift_bridgeObjectRelease();
      if (v319)
      {
        char v320 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v321 = v350;
        *(void *)&long long v342 = v350;
        unint64_t v350 = 0x8000000000000000;
        uint64_t v96 = v338;
        if ((v320 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v321 = v342;
        }
        swift_bridgeObjectRelease();
        outlined init with take of Any((_OWORD *)(*(void *)(v321 + 56) + 32 * v317), &v344);
        specialized _NativeDictionary._delete(at:)(v317, v321);
        unint64_t v350 = v321;
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v344 = 0u;
        long long v345 = 0u;
        uint64_t v96 = v338;
      }
      outlined destroy of Any?((uint64_t)&v344, &demangling cache variable for type metadata for Any?);
      uint64_t v100 = v329;
      unint64_t v101 = (unsigned __int8 *)&v351;
LABEL_48:
      outlined consume of Data._Representation(v100, *((void *)v101 - 32));
LABEL_49:

LABEL_50:
      if (v96 == ++v97) {
        goto LABEL_207;
      }
    }
  }
  __break(1u);
}

uint64_t AppIntentTranscriptSignalFactory.deinit()
{
  return v0;
}

uint64_t AppIntentTranscriptSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t AppIntentTranscriptSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AppIntentTranscriptSignalFactory.init()()
{
  return v0;
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance AppIntentTranscriptSignalFactory(uint64_t a1)
{
  return (*(uint64_t (**)(void, double))(**(void **)v1 + 88))(*(void *)a1, *(double *)(a1 + 8));
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance AppIntentTranscriptSignalFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for AppIntentTranscriptSignalFactory()
{
  return self;
}

uint64_t method lookup function for AppIntentTranscriptSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AppIntentTranscriptSignalFactory);
}

uint64_t dispatch thunk of AppIntentTranscriptSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of AppIntentTranscriptSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of AppIntentTranscriptSignalFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t PSESELFEmitter.init()()
{
  return v0;
}

uint64_t PSESELFEmitter.deinit()
{
  return v0;
}

uint64_t PSESELFEmitter.getPSESiriEngagementTaskSuccess(taskSuccess:)(uint64_t result)
{
  return result;
}

uint64_t PSESELFEmitter.getPSEDonationSource(pseDonationSource:)(char a1)
{
  if (a1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 2) {
    return 3;
  }
  else {
    return v1;
  }
}

uint64_t PSESELFEmitter.getPSETriggerOrigin()()
{
  swift_beginAccess();
  uint64_t v0 = static PSEStruct.pseTriggerOrigin;
  uint64_t v1 = qword_26AD6B018;
  BOOL v2 = static PSEStruct.pseTriggerOrigin == 0x6E61747369737361 && qword_26AD6B018 == 0xEA00000000006474;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 1;
  }
  uint64_t v3 = 2;
  if (v0 != 0x636E657265666E69 || v1 != 0xEA00000000006465)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      return 2;
    }
    else {
      return 0;
    }
  }
  return v3;
}

uint64_t PSESELFEmitter.getPSEAppFollowup(appLaunchBundleId:taskAppPattern:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  if (a2)
  {
    uint64_t v5 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 && a4)
    {
      uint64_t v6 = HIBYTE(a4) & 0xF;
      if ((a4 & 0x2000000000000000) == 0) {
        uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
      }
      if (v6)
      {
        uint64_t v4 = 1;
        if (a1 != a3 || a2 != a4)
        {
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            return 1;
          }
          else {
            return 2;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v4;
}

uint64_t PSESELFEmitter.getPSEAppFollowupForMaps(appLaunchBundleId:)(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  lazy protocol witness table accessor for type String and conformance String();
  if (StringProtocol.contains<A>(_:)()) {
    return 1;
  }
  uint64_t v3 = 4;
  if ((StringProtocol.contains<A>(_:)() & 1) == 0)
  {
    if (StringProtocol.contains<A>(_:)()) {
      return 4;
    }
    else {
      return 2;
    }
  }
  return v3;
}

uint64_t PSESELFEmitter.getPSEAppLaunchReason(reason:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 1769105747 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 1;
  }
  if (a1 == 0x65726373656D6F48 && a2 == 0xEA00000000006E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  uint64_t v4 = 4;
  if (a1 != 0x726568744FLL || a2 != 0xE500000000000000)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      return 4;
    }
    else {
      return 0;
    }
  }
  return v4;
}

uint64_t PSESELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSESELFEmitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t specialized PSESELFEmitter.applyMissingDonationMonitor(task:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ReliabilityCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)a1 + 248))(v4);
  Swift::String v7 = String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String v30 = v7;
  uint64_t v28 = 0x7373656D646E6573;
  unint64_t v29 = 0xEB00000000656761;
  lazy protocol witness table accessor for type String and conformance String();
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
    uint64_t v9 = *MEMORY[0x263F75140];
    uint64_t v10 = type metadata accessor for AppIntentEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(v6, v9, v10);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F750E8], v2);
    uint64_t v11 = 0xD000000000000057;
    uint64_t v12 = "#SELF Logging - There are no PSE signals for SiriMessage task, emitting as Generic PSE.";
LABEL_17:
    unint64_t v22 = (unint64_t)(v12 - 32) | 0x8000000000000000;
LABEL_18:
    Logger.debug(_:_:)(v11, v22, (uint64_t)v6);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  Swift::String v30 = v7;
  uint64_t v28 = 0x6C61637472617473;
  unint64_t v29 = 0xE90000000000006CLL;
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.engagement);
    uint64_t v14 = *MEMORY[0x263F75140];
    uint64_t v15 = type metadata accessor for AppIntentEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v6, v14, v15);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F750E8], v2);
    uint64_t v11 = 0xD000000000000059;
    uint64_t v12 = "#SELF Logging - There are no PSE signals for SiriPhoneCall task, emitting as Generic PSE.";
    goto LABEL_17;
  }
  Swift::String v30 = v7;
  uint64_t v28 = 0x6964656D79616C70;
  unint64_t v29 = 0xE900000000000061;
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.engagement);
    uint64_t v17 = *MEMORY[0x263F75160];
    uint64_t v18 = type metadata accessor for NowPlayingEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v6, v17, v18);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F750F8], v2);
    uint64_t v11 = 0xD000000000000055;
    uint64_t v12 = "#SELF Logging - There are no PSE signals for SiriMusic task, emitting as Generic PSE.";
    goto LABEL_17;
  }
  Swift::String v30 = v7;
  uint64_t v28 = 0x686C6F72746E6F63;
  unint64_t v29 = 0xEB00000000656D6FLL;
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.engagement);
    uint64_t v20 = *MEMORY[0x263F751B8];
    uint64_t v21 = type metadata accessor for HomeKitClientAccessoryControlEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v6, v20, v21);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F75120], v2);
    uint64_t v11 = 0xD000000000000054;
    uint64_t v12 = "#SELF Logging - There are no PSE signals for SiriHome task, emitting as Generic PSE.";
    goto LABEL_17;
  }
  Swift::String v30 = v7;
  uint64_t v28 = 1936744813;
  unint64_t v29 = 0xE400000000000000;
  char v24 = StringProtocol.contains<A>(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v24)
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.engagement);
    uint64_t v26 = *MEMORY[0x263F750B8];
    uint64_t v27 = type metadata accessor for MapsEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v6, v26, v27);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F750D0], v2);
    unint64_t v22 = 0x8000000224F68E20;
    uint64_t v11 = 0xD000000000000050;
    goto LABEL_18;
  }
  return result;
}

void specialized PSESELFEmitter.emitPSESELFInstrumentation(signals:task:)(unint64_t a1, unint64_t a2)
{
  id v10 = objc_msgSend(self, sel_sharedConnection);
  if (!v10)
  {
    __break(1u);
    goto LABEL_232;
  }
  uint64_t v11 = v10;
  unsigned int v12 = objc_msgSend(v10, sel_effectiveBoolValueForSetting_, *MEMORY[0x263F53878]);

  if (v12 != 1)
  {
    if (one-time initialization token for engagement != -1) {
      goto LABEL_196;
    }
    goto LABEL_29;
  }
  uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  v111[0] = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_63;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v106 = (void *)a2;
  if (!v2)
  {
LABEL_64:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v32 = MEMORY[0x263F8EE78];
    unint64_t v105 = MEMORY[0x263F8EE78];
    goto LABEL_65;
  }
LABEL_5:
  if (v2 < 1)
  {
    __break(1u);
    __break(1u);
    goto LABEL_203;
  }
  uint64_t v14 = 0;
  unint64_t v6 = 0x65726373656D6F48;
  unint64_t v7 = 0x636E75614C707041;
  a2 = a1 & 0xC000000000000001;
  do
  {
    if (a2)
    {
      uint64_t v3 = MEMORY[0x22A627400](v14, a1);
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 8 * v14 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v3 + 144))() == 0x636E75614C707041
      && v15 == (void *)0xE900000000000068)
    {
      uint64_t v18 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = v15;
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v18 = swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_7;
      }
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 168))(v18) == 0x65726373656D6F48
      && v19 == (void *)0xEA00000000006E65)
    {
      uint64_t v22 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = v19;
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v22 = swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v13 = (void *)v3;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v3 + 120))(&v108, v22);
    if (*((double *)&v108 + 1) > 30.0)
    {
LABEL_7:
      swift_release();
      goto LABEL_8;
    }
    uint64_t v13 = v111;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_8:
    ++v14;
  }
  while (v2 != v14);
  swift_bridgeObjectRelease();
  unint64_t v105 = v111[0];
  v111[0] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  unint64_t v26 = 0;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v5 = 0x8000000224F66760;
  while (!a2)
  {
    if (v26 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_63:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v106 = (void *)a2;
      if (!v2) {
        goto LABEL_64;
      }
      goto LABEL_5;
    }
    unint64_t v6 = *(void *)(a1 + 8 * v26 + 32);
    swift_retain();
    uint64_t v3 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      goto LABEL_60;
    }
LABEL_38:
    if ((*(uint64_t (**)(void))(*(void *)v6 + 144))() == 0x736C6C6143 && v27 == (void *)0xE500000000000000)
    {
      uint64_t v29 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = v27;
      unint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v29 = swift_bridgeObjectRelease();
      if ((v7 & 1) == 0) {
        goto LABEL_55;
      }
    }
    uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 216))(v29);
    if (v13[2]
      && (unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000224F66760),
          (v31 & 1) != 0))
    {
      outlined init with copy of Any(v13[7] + 32 * v30, (uint64_t)&v108);
    }
    else
    {
      long long v108 = 0u;
      long long v109 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v109 + 1))
    {
      outlined destroy of Any?((uint64_t)&v108);
LABEL_55:
      swift_release();
      goto LABEL_56;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_55;
    }
    if ((v110 & 1) == 0) {
      goto LABEL_55;
    }
    uint64_t v13 = (void *)v6;
    (*(void (**)(long long *__return_ptr))(*(void *)v6 + 120))(&v108);
    if (*((double *)&v108 + 1) > 30.0) {
      goto LABEL_55;
    }
    uint64_t v13 = v111;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v7 = *(void *)(v111[0] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_56:
    ++v26;
    if (v3 == v2) {
      goto LABEL_61;
    }
  }
  unint64_t v6 = MEMORY[0x22A627400](v26, a1);
  uint64_t v3 = v26 + 1;
  if (!__OFADD__(v26, 1)) {
    goto LABEL_38;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  unint64_t v32 = v111[0];
  uint64_t v13 = (void *)MEMORY[0x263F8EE78];
LABEL_65:
  swift_bridgeObjectRelease();
  v111[0] = v13;
  swift_bridgeObjectRetain();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v3 = MEMORY[0x263F8EE78];
    unint64_t v104 = MEMORY[0x263F8EE78];
    unint64_t v6 = MEMORY[0x263F8EE78];
    unint64_t v4 = MEMORY[0x263F8EE78];
    unint64_t v7 = MEMORY[0x263F8EE78];
    if ((v32 & 0x8000000000000000) != 0) {
      goto LABEL_197;
    }
    goto LABEL_190;
  }
  unint64_t v103 = v32;
  unint64_t v33 = 0;
  unint64_t v34 = a1 & 0xC000000000000001;
  while (2)
  {
    if (!v34)
    {
      if (v33 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v35 = *(void *)(a1 + 8 * v33 + 32);
        swift_retain();
        unint64_t v36 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_92;
        }
LABEL_70:
        if ((*(uint64_t (**)(void))(*(void *)v35 + 144))() == 0x736567617373654DLL && v37 == 0xE800000000000000)
        {
          uint64_t v40 = swift_bridgeObjectRelease();
        }
        else
        {
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v40 = swift_bridgeObjectRelease();
          if ((v39 & 1) == 0) {
            goto LABEL_87;
          }
        }
        uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 216))(v40);
        if (*(void *)(v41 + 16)
          && (unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000224F66760),
              (v43 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v41 + 56) + 32 * v42, (uint64_t)&v108);
        }
        else
        {
          long long v108 = 0u;
          long long v109 = 0u;
        }
        swift_bridgeObjectRelease();
        if (!*((void *)&v109 + 1))
        {
          outlined destroy of Any?((uint64_t)&v108);
          goto LABEL_87;
        }
        if ((swift_dynamicCast() & 1) != 0
          && (v110 & 1) != 0
          && ((*(void (**)(long long *__return_ptr))(*(void *)v35 + 120))(&v108),
              *((double *)&v108 + 1) <= 30.0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
LABEL_87:
          swift_release();
        }
        ++v33;
        if (v36 == v2) {
          goto LABEL_93;
        }
        continue;
      }
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      swift_once();
LABEL_29:
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.engagement);
      oslog = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(oslog, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl(&dword_224EDB000, oslog, v24, "D&U is not allowed.", v25, 2u);
        MEMORY[0x22A627DB0](v25, -1, -1);
      }

      return;
    }
    break;
  }
  uint64_t v35 = MEMORY[0x22A627400](v33, a1);
  unint64_t v36 = v33 + 1;
  if (!__OFADD__(v33, 1)) {
    goto LABEL_70;
  }
LABEL_92:
  __break(1u);
LABEL_93:
  uint64_t v44 = v111[0];
  swift_bridgeObjectRelease();
  v111[0] = MEMORY[0x263F8EE78];
  uint64_t v102 = v44;
  swift_bridgeObjectRetain();
  uint64_t v45 = 0;
  while (2)
  {
    if (v34)
    {
      uint64_t v46 = MEMORY[0x22A627400](v45, a1);
    }
    else
    {
      uint64_t v46 = *(void *)(a1 + 8 * v45 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v46 + 144))() != 1936744781 || v47 != 0xE400000000000000)
    {
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v50 = swift_bridgeObjectRelease();
      if (v49) {
        goto LABEL_107;
      }
      goto LABEL_95;
    }
    uint64_t v50 = swift_bridgeObjectRelease();
LABEL_107:
    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 216))(v50);
    if (*(void *)(v51 + 16)
      && (unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000224F66760),
          (v53 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v52, (uint64_t)&v108);
    }
    else
    {
      long long v108 = 0u;
      long long v109 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v109 + 1))
    {
      outlined destroy of Any?((uint64_t)&v108);
      goto LABEL_95;
    }
    if (swift_dynamicCast() & 1) != 0 && (v110)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
LABEL_95:
      swift_release();
    }
    if (v2 != ++v45) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  unint64_t v101 = v111[0];
  v111[0] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  uint64_t v54 = 0;
  while (2)
  {
    if (v34)
    {
      uint64_t v55 = MEMORY[0x22A627400](v54, a1);
    }
    else
    {
      uint64_t v55 = *(void *)(a1 + 8 * v54 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v55 + 144))() == 0x6F747541656D6F48 && v56 == 0xEE006E6F6974616DLL)
    {
      uint64_t v59 = swift_bridgeObjectRelease();
      goto LABEL_128;
    }
    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v59 = swift_bridgeObjectRelease();
    if ((v58 & 1) == 0)
    {
LABEL_116:
      swift_release();
      goto LABEL_117;
    }
LABEL_128:
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v55 + 120))(&v108, v59);
    if (*((double *)&v108 + 1) > 30.0) {
      goto LABEL_116;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_117:
    if (v2 != ++v54) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  unint64_t v100 = v111[0];
  v111[0] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  uint64_t v60 = 0;
  while (2)
  {
    if (v34)
    {
      uint64_t v61 = MEMORY[0x22A627400](v60, a1);
    }
    else
    {
      uint64_t v61 = *(void *)(a1 + 8 * v60 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v61 + 144))() == 0x6D72616C41 && v62 == 0xE500000000000000)
    {
      uint64_t v65 = swift_bridgeObjectRelease();
      goto LABEL_143;
    }
    char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v65 = swift_bridgeObjectRelease();
    if ((v64 & 1) == 0) {
      goto LABEL_131;
    }
LABEL_143:
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v61 + 120))(&v108, v65);
    if (*((double *)&v108 + 1) > 30.0)
    {
LABEL_131:
      swift_release();
      goto LABEL_132;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_132:
    if (v2 != ++v60) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  unint64_t v104 = v111[0];
  v111[0] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  unint64_t v66 = 0;
  while (2)
  {
    if (v34)
    {
      uint64_t v67 = MEMORY[0x22A627400](v66, a1);
      unint64_t v68 = v66 + 1;
      if (__OFADD__(v66, 1)) {
        goto LABEL_171;
      }
LABEL_149:
      if ((*(uint64_t (**)(void))(*(void *)v67 + 144))() == 0x636973754DLL && v69 == 0xE500000000000000)
      {
        uint64_t v72 = swift_bridgeObjectRelease();
      }
      else
      {
        char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v72 = swift_bridgeObjectRelease();
        if ((v71 & 1) == 0) {
          goto LABEL_166;
        }
      }
      uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)v67 + 216))(v72);
      if (*(void *)(v73 + 16)
        && (unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000224F66760),
            (v75 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v73 + 56) + 32 * v74, (uint64_t)&v108);
      }
      else
      {
        long long v108 = 0u;
        long long v109 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v109 + 1))
      {
        if (swift_dynamicCast() & 1) != 0 && (v110)
        {
          (*(void (**)(long long *__return_ptr))(*(void *)v67 + 120))(&v108);
          if (*((double *)&v108 + 1) <= 30.0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            goto LABEL_167;
          }
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v108);
      }
LABEL_166:
      swift_release();
LABEL_167:
      ++v66;
      if (v68 == v2) {
        goto LABEL_172;
      }
      continue;
    }
    break;
  }
  if (v66 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_195;
  }
  uint64_t v67 = *(void *)(a1 + 8 * v66 + 32);
  swift_retain();
  unint64_t v68 = v66 + 1;
  if (!__OFADD__(v66, 1)) {
    goto LABEL_149;
  }
LABEL_171:
  __break(1u);
LABEL_172:
  unint64_t v5 = v111[0];
  swift_bridgeObjectRelease();
  v111[0] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  uint64_t v76 = 0;
  while (2)
  {
    if (v34)
    {
      uint64_t v77 = MEMORY[0x22A627400](v76, a1);
    }
    else
    {
      uint64_t v77 = *(void *)(a1 + 8 * v76 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v77 + 144))() == 0x6E65746E49707041 && v78 == 0xE900000000000074)
    {
      uint64_t v81 = swift_bridgeObjectRelease();
      goto LABEL_185;
    }
    char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v81 = swift_bridgeObjectRelease();
    if ((v80 & 1) == 0)
    {
LABEL_173:
      swift_release();
      goto LABEL_174;
    }
LABEL_185:
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v77 + 120))(&v108, v81);
    if (*((double *)&v108 + 1) > 30.0) {
      goto LABEL_173;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_174:
    if (v2 != ++v76) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  unint64_t v7 = v111[0];
  uint64_t v3 = v102;
  unint64_t v32 = v103;
  unint64_t v6 = v100;
  unint64_t v4 = v101;
  if ((v103 & 0x8000000000000000) != 0)
  {
LABEL_197:
    swift_bridgeObjectRetain();
    uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v82 <= 0) {
      goto LABEL_198;
    }
LABEL_192:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for PSEPhoneCallSELFEmitter();
    swift_allocObject();
    PSEPhoneCallSELFEmitter.emitPSEPhoneCall(phoneCallSignals:appLaunchSignals:task:)(v32, v105, v106);
LABEL_193:
    swift_release();
LABEL_214:
    swift_release();
    goto LABEL_215;
  }
LABEL_190:
  if ((v32 & 0x4000000000000000) != 0) {
    goto LABEL_197;
  }
  if (*(uint64_t *)(v32 + 16) > 0) {
    goto LABEL_192;
  }
LABEL_198:
  swift_release();
  if (v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
LABEL_203:
    swift_bridgeObjectRetain();
    uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v83 >= 1) {
      goto LABEL_201;
    }
    goto LABEL_204;
  }
  if (*(uint64_t *)(v3 + 16) >= 1)
  {
LABEL_201:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for PSESMSSELFEmitter();
    swift_allocObject();
    PSESMSSELFEmitter.emitPSESMS(smsSignals:appLaunchSignals:task:)((void (*)(void, void))v3, v105, (uint64_t)v106);
    swift_release();
    goto LABEL_214;
  }
LABEL_204:
  swift_release();
  if ((v4 & 0x8000000000000000) != 0 || (v4 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v84 >= 1) {
      goto LABEL_207;
    }
  }
  else if (*(uint64_t *)(v4 + 16) >= 1)
  {
LABEL_207:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for PSEGeoSELFEmitter();
    swift_allocObject();
    PSEGeoSELFEmitter.emitPSEGeo(geoSignals:appLaunchSignals:task:)(v4, v105, v106);
    swift_release();
    goto LABEL_214;
  }
  swift_release();
  if ((v6 & 0x8000000000000000) != 0 || (v6 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v85 = *(void *)(v6 + 16);
  }
  if (v85 >= 1)
  {
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for PSEHomeSELFEmitter();
    swift_allocObject();
    PSEHomeSELFEmitter.emitPSEHome(homeSignals:appLaunchSignals:task:)(v6, v105, (uint64_t)v106);
    swift_release();
    goto LABEL_214;
  }
  swift_release();
  if ((v104 & 0x8000000000000000) != 0 || (v104 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v86 >= 1) {
      goto LABEL_219;
    }
  }
  else if (*(uint64_t *)(v104 + 16) >= 1)
  {
LABEL_219:
    swift_release();
    swift_release();
    type metadata accessor for PSEAlarmSELFEmitter();
    swift_allocObject();
    PSEAlarmSELFEmitter.emitPSEAlarm(alarmSignals:appLaunchSignals:task:)(v104, v105, (uint64_t (***)(void))v106);
    goto LABEL_193;
  }
  swift_release();
  if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v87 >= 1) {
      goto LABEL_225;
    }
  }
  else if (*(uint64_t *)(v7 + 16) >= 1)
  {
LABEL_225:
    swift_release();
    type metadata accessor for PSEAppIntentTranscriptSELFEmitter();
    swift_allocObject();
    PSEAppIntentTranscriptSELFEmitter.emitPSEAppIntentTranscript(appIntentTranscriptSignals:appLaunchSignals:task:)(v7, v105, v106);
    swift_release();
    goto LABEL_214;
  }
  swift_release();
  if ((v5 & 0x8000000000000000) != 0 || (v5 & 0x4000000000000000) != 0)
  {
LABEL_232:
    swift_bridgeObjectRetain();
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v88 >= 1) {
      goto LABEL_230;
    }
    goto LABEL_233;
  }
  if (*(uint64_t *)(v5 + 16) >= 1)
  {
LABEL_230:
    type metadata accessor for PSEMediaSELFEmitter();
    swift_allocObject();
    PSEMediaSELFEmitter.emitPSEMedia(mediaSignals:appLaunchSignals:task:)((uint64_t (*)(void))v5, v105, (uint64_t)v106);
    swift_release();
    goto LABEL_214;
  }
LABEL_233:
  swift_release();
  swift_release();
  uint64_t v89 = MEMORY[0x263F8EE78];
  v111[0] = MEMORY[0x263F8EE78];
  if (!v2) {
    goto LABEL_251;
  }
  if (v2 < 1)
  {
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v90 = 0;
  while (2)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v91 = MEMORY[0x22A627400](v90, a1);
    }
    else
    {
      uint64_t v91 = *(void *)(a1 + 8 * v90 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v91 + 144))() == 0x636E75614C707041 && v92 == 0xE900000000000068)
    {
      uint64_t v95 = swift_bridgeObjectRelease();
      goto LABEL_248;
    }
    char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v95 = swift_bridgeObjectRelease();
    if ((v94 & 1) == 0) {
      goto LABEL_236;
    }
LABEL_248:
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v91 + 120))(&v108, v95);
    if (*((double *)&v108 + 1) > 30.0)
    {
LABEL_236:
      swift_release();
      goto LABEL_237;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_237:
    if (v2 != ++v90) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v89 = v111[0];
LABEL_251:
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v96 = type metadata accessor for Logger();
  __swift_project_value_buffer(v96, (uint64_t)static Logger.engagement);
  uint64_t v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v97, v98))
  {
    unint64_t v99 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v99 = 0;
    _os_log_impl(&dword_224EDB000, v97, v98, "There is no specific PSE signals is available for supported domains for SELF Logging. Submit as Generic PSE (with/without App Launch info)", v99, 2u);
    MEMORY[0x22A627DB0](v99, -1, -1);
  }

  specialized PSESELFEmitter.applyMissingDonationMonitor(task:)((uint64_t)v106);
  type metadata accessor for PSEGenericSELFEmitter();
  swift_allocObject();
  PSEGenericSELFEmitter.emitPSEGeneric(appLaunchSignals:task:)(v89, (uint64_t)v106);
  swift_release();
LABEL_215:
  swift_release();
}

uint64_t type metadata accessor for PSESELFEmitter()
{
  return self;
}

uint64_t method lookup function for PSESELFEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSESELFEmitter);
}

uint64_t dispatch thunk of PSESELFEmitter.emitPSESELFInstrumentation(signals:task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSESiriEngagementTaskSuccess(taskSuccess:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSEDonationSource(pseDonationSource:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSETriggerOrigin()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSEAppFollowup(appLaunchBundleId:taskAppPattern:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSEAppFollowupForMaps(appLaunchBundleId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSEAppLaunchReason(reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PSESELFEmitter.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

const char *SignalFactoryConstants.donatedBySiriKey.unsafeMutableAddressor()
{
  return "donatedBySiri";
}

void *SignalFactoryConstants.appLaunchBundleId.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.appLaunchBundleId;
}

const char *SignalFactoryConstants.mediaPlayDurationKey.unsafeMutableAddressor()
{
  return "playDuration";
}

void *SignalFactoryConstants.mediaContentDurationKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.mediaContentDurationKey;
}

void *SignalFactoryConstants.donatedByFirstPartyAppKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.donatedByFirstPartyAppKey;
}

const char *SignalFactoryConstants.mediaIsAirPlayKey.unsafeMutableAddressor()
{
  return "isAirPlay";
}

void *SignalFactoryConstants.mediaITunesSubscriptionKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.mediaITunesSubscriptionKey;
}

const char *SignalFactoryConstants.mediaTypeKey.unsafeMutableAddressor()
{
  return "mediaType";
}

const char *SignalFactoryConstants.sourceKey.unsafeMutableAddressor()
{
  return "source";
}

const char *SignalFactoryConstants.mediaTitleKey.unsafeMutableAddressor()
{
  return "title";
}

const char *SignalFactoryConstants.mediaArtistKey.unsafeMutableAddressor()
{
  return "artist";
}

const char *SignalFactoryConstants.mediaAlbumKey.unsafeMutableAddressor()
{
  return "album";
}

const char *SignalFactoryConstants.mediaITunesStoreIdKey.unsafeMutableAddressor()
{
  return "iTunesStoreId";
}

void *SignalFactoryConstants.EMPTY.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.EMPTY;
}

const char *DomainsConstants.musicDomain.unsafeMutableAddressor()
{
  return "Music";
}

void *SignalFactoryConstants.minimumMediaContentLength.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.minimumMediaContentLength;
}

const char *SignalFactoryConstants.appleMusic1RadioStationKey.unsafeMutableAddressor()
{
  return "Apple Music 1";
}

void *SignalFactoryConstants.appleMusicBundleID.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.appleMusicBundleID;
}

const char *SignalFactoryConstants.mediaGenreKey.unsafeMutableAddressor()
{
  return "genre";
}

const char *SignalFactoryConstants.mediaElapsedKey.unsafeMutableAddressor()
{
  return "elapsed";
}

const char *TaskTypeConstants.sageTask.unsafeMutableAddressor()
{
  return "sage task";
}

const char *SignalFactoryConstants.noneKey.unsafeMutableAddressor()
{
  return "none";
}

const char *SignalFactoryConstants.currentTaskKey.unsafeMutableAddressor()
{
  return "currenttask";
}

const char *SignalFactoryConstants.unparsedIntentKey.unsafeMutableAddressor()
{
  return "unparsedintent";
}

const char *SignalFactoryConstants.UnknownParseKey.unsafeMutableAddressor()
{
  return "unknown parse";
}

const char *SignalFactoryConstants.siriKey.unsafeMutableAddressor()
{
  return "Siri";
}

const char *TaskTypeConstants.mapsIntentType.unsafeMutableAddressor()
{
  return "maps";
}

const char *DomainsConstants.callsDomain.unsafeMutableAddressor()
{
  return "Calls";
}

void *TaskTypeConstants.answerCallIntentType.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.answerCallIntentType;
}

const char *SignalFactoryConstants.callDurationKey.unsafeMutableAddressor()
{
  return "callDuration";
}

const char *SignalFactoryConstants.callAudioRouteKey.unsafeMutableAddressor()
{
  return "audioRoute";
}

const char *SignalFactoryConstants.intentTypeKey.unsafeMutableAddressor()
{
  return "intentTypeName";
}

void *SignalFactoryConstants.callTimeToEstablishInSecondsKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.callTimeToEstablishInSecondsKey;
}

void *SignalFactoryConstants.callRecentCallStatusKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.callRecentCallStatusKey;
}

void *SignalFactoryConstants.callDisconnectedReasonKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.callDisconnectedReasonKey;
}

const char *SignalFactoryConstants.callContactsKey.unsafeMutableAddressor()
{
  return "contacts";
}

const char *SignalFactoryConstants.contactsValueKey.unsafeMutableAddressor()
{
  return "contactsValue";
}

void *SignalFactoryConstants.contactsDisplayNameKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.contactsDisplayNameKey;
}

void *SignalFactoryConstants.contactsFirstNameKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.contactsFirstNameKey;
}

void *SignalFactoryConstants.contactsLastNameKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.contactsLastNameKey;
}

const char *SignalFactoryConstants.answerCallAction.unsafeMutableAddressor()
{
  return "AnswerCall";
}

const char *SignalFactoryConstants.serviceTypeKey.unsafeMutableAddressor()
{
  return "serviceType";
}

void *SignalFactoryConstants.accessoryUniqueIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.accessoryUniqueIdentifierKey;
}

void *SignalFactoryConstants.characteristicTypeKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.characteristicTypeKey;
}

void *SignalFactoryConstants.accessoryStateNumberKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.accessoryStateNumberKey;
}

const char *SignalFactoryConstants.accessoryClientNameKey.unsafeMutableAddressor()
{
  return "clientName";
}

const char *SignalFactoryConstants.homeAppIdentifier.unsafeMutableAddressor()
{
  return "com.apple.Home";
}

void *SignalFactoryConstants.nanoHomeAppIdentifier.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.nanoHomeAppIdentifier;
}

void *SignalFactoryConstants.roomUniqueIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.roomUniqueIdentifierKey;
}

void *SignalFactoryConstants.zoneUniqueIdentifiersKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.zoneUniqueIdentifiersKey;
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void *SignalFactoryConstants.alarmIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.alarmIdentifierKey;
}

const char *DomainsConstants.alarmsDomain.unsafeMutableAddressor()
{
  return "Alarm";
}

const char *TaskTypeConstants.externalAgentKey.unsafeMutableAddressor()
{
  return "externalagent";
}

void *TaskTypeConstants.intelligenceFlowTask.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.intelligenceFlowTask;
}

void *TaskTypeConstants.sendMessageIntentType.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.sendMessageIntentType;
}

void *TaskTypeConstants.startCallIntentType.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.startCallIntentType;
}

void *TaskTypeConstants.startAudioCallIntentType.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.startAudioCallIntentType;
}

void *TaskTypeConstants.startVideoCallIntentType.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.startVideoCallIntentType;
}

const char *TaskTypeConstants.genericIntentType.unsafeMutableAddressor()
{
  return "genericintent";
}

const char *DomainsConstants.calendarDomain.unsafeMutableAddressor()
{
  return "Calendar";
}

void *SignalFactoryConstants.intentResponseIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.intentResponseIdentifierKey;
}

void *SignalFactoryConstants.unsendMessageIdentifiersKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.unsendMessageIdentifiersKey;
}

const char *SignalFactoryConstants.userQueryKey.unsafeMutableAddressor()
{
  return "userQuery";
}

const char *SignalFactoryConstants.criteriaKey.unsafeMutableAddressor()
{
  return "criteria";
}

const char *DomainsConstants.messagesDomain.unsafeMutableAddressor()
{
  return "Messages";
}

void *SignalFactoryConstants.interactionDirectionKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.interactionDirectionKey;
}

void *SignalFactoryConstants.intentResponseCodeKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.intentResponseCodeKey;
}

const char *SignalFactoryConstants.messageRecipientsKey.unsafeMutableAddressor()
{
  return "recipients";
}

void *SignalFactoryConstants.messageIdentifiersKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.messageIdentifiersKey;
}

const char *DomainsConstants.appLaunchDomain.unsafeMutableAddressor()
{
  return "AppLaunch";
}

const char *DomainsConstants.mapsDomain.unsafeMutableAddressor()
{
  return "Maps";
}

const char *DomainsConstants.appIntentTranscriptDomain.unsafeMutableAddressor()
{
  return "AppIntent";
}

const char *SignalFactoryConstants.show.unsafeMutableAddressor()
{
  return "Show";
}

const char *SignalFactoryConstants.placeCardTap.unsafeMutableAddressor()
{
  return "PlaceCardTap";
}

const char *SignalFactoryConstants.navigation.unsafeMutableAddressor()
{
  return "Navigation";
}

const char *SignalFactoryConstants.navigationTypeKey.unsafeMutableAddressor()
{
  return "navigationType";
}

const char *SignalFactoryConstants.continueKey.unsafeMutableAddressor()
{
  return "Continue";
}

void *SignalFactoryConstants.deleteAlarmIntentKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.deleteAlarmIntentKey;
}

const char *SignalFactoryConstants.getNavigationStatus.unsafeMutableAddressor()
{
  return "GET_NAV_STATUS";
}

const char *SignalFactoryConstants.appLaunchHomescreen.unsafeMutableAddressor()
{
  return "Homescreen";
}

const char *SignalFactoryConstants.appLaunchOther.unsafeMutableAddressor()
{
  return "Other";
}

void *SignalFactoryConstants.appLaunchDuration.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.appLaunchDuration;
}

void *SignalFactoryConstants.assistantApplicationId.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.assistantApplicationId;
}

void *SignalFactoryConstants.deltaMissingObjectErrorCode.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.deltaMissingObjectErrorCode;
}

const char *SignalFactoryConstants.firstPartyAppBundleId.unsafeMutableAddressor()
{
  return "com.apple.";
}

void *SignalFactoryConstants.appIntentCategoryKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.appIntentCategoryKey;
}

void *SignalFactoryConstants.entityIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.entityIdentifierKey;
}

const char *SignalFactoryConstants.thirdPartyKey.unsafeMutableAddressor()
{
  return "ThirdParty";
}

const char *DomainsConstants.homeAutomationDomain.unsafeMutableAddressor()
{
  return "HomeAutomation";
}

const char *SignalFactoryConstants.homeAutomationAction.unsafeMutableAddressor()
{
  return "ControlHome";
}

void *SignalFactoryConstants.HomeKitCharacteristic_ON.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.HomeKitCharacteristic_ON;
}

void *SignalFactoryConstants.HomeKitCharacteristic_ACTIVE.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.HomeKitCharacteristic_ACTIVE;
}

const char *SignalFactoryConstants.searchToolKey.unsafeMutableAddressor()
{
  return "searchtool";
}

const char *SignalFactoryConstants.bundleIdKey.unsafeMutableAddressor()
{
  return "bundleID";
}

const char *SignalFactoryConstants.executionIdKey.unsafeMutableAddressor()
{
  return "executionUUID";
}

const char *SignalFactoryConstants.executionDateKey.unsafeMutableAddressor()
{
  return "executionDate";
}

const char *SignalFactoryConstants.targetKey.unsafeMutableAddressor()
{
  return "target";
}

const char *SignalFactoryConstants.entityTypeKey.unsafeMutableAddressor()
{
  return "entityType";
}

const char *SignalFactoryConstants.entityTitleKey.unsafeMutableAddressor()
{
  return "entityTitle";
}

const char *SignalFactoryConstants.searchPhraseKey.unsafeMutableAddressor()
{
  return "searchPhrase";
}

uint64_t static SignalFactoryConstants.EMPTY.getter()
{
  return 0;
}

double static SignalFactoryConstants.minimumMediaContentLength.getter()
{
  return 1.0;
}

double static SignalFactoryConstants.deltaMissingObjectErrorCode.getter()
{
  return 1.0;
}

uint64_t static SignalFactoryConstants.firstPartyAppBundleId.getter()
{
  return 0x6C7070612E6D6F63;
}

void *SignalFactoryConstants.assistantServicesKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.assistantServicesKey;
}

unint64_t static SignalFactoryConstants.assistantServicesKey.getter()
{
  return 0xD000000000000011;
}

uint64_t static SignalFactoryConstants.siriKey.getter()
{
  return 1769105747;
}

uint64_t static SignalFactoryConstants.thirdPartyKey.getter()
{
  return 0x7261506472696854;
}

uint64_t static SignalFactoryConstants.noneKey.getter()
{
  return 1701736302;
}

uint64_t static SignalFactoryConstants.donatedBySiriKey.getter()
{
  return 0x42646574616E6F64;
}

uint64_t static SignalFactoryConstants.intentTypeKey.getter()
{
  return 0x7954746E65746E69;
}

unint64_t static SignalFactoryConstants.intentResponseCodeKey.getter()
{
  return 0xD000000000000012;
}

unint64_t static SignalFactoryConstants.intentResponseIdentifierKey.getter()
{
  return 0xD000000000000018;
}

unint64_t static SignalFactoryConstants.donatedByFirstPartyAppKey.getter()
{
  return 0xD000000000000016;
}

uint64_t static SignalFactoryConstants.sourceKey.getter()
{
  return 0x656372756F73;
}

unint64_t static SignalFactoryConstants.interactionDirectionKey.getter()
{
  return 0xD000000000000014;
}

void *SignalFactoryConstants.intentHandlingStatusKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.intentHandlingStatusKey;
}

unint64_t static SignalFactoryConstants.intentHandlingStatusKey.getter()
{
  return 0xD000000000000014;
}

uint64_t static SignalFactoryConstants.callDurationKey.getter()
{
  return 0x617275446C6C6163;
}

unint64_t static SignalFactoryConstants.callTimeToEstablishInSecondsKey.getter()
{
  return 0xD000000000000018;
}

unint64_t static SignalFactoryConstants.callRecentCallStatusKey.getter()
{
  return 0xD000000000000010;
}

unint64_t static SignalFactoryConstants.callDisconnectedReasonKey.getter()
{
  return 0xD000000000000012;
}

uint64_t static SignalFactoryConstants.callAudioRouteKey.getter()
{
  return 0x756F526F69647561;
}

uint64_t static SignalFactoryConstants.callContactsKey.getter()
{
  return 0x73746361746E6F63;
}

uint64_t static SignalFactoryConstants.contactsValueKey.getter()
{
  return 0x73746361746E6F63;
}

unint64_t static SignalFactoryConstants.contactsDisplayNameKey.getter()
{
  return 0xD000000000000013;
}

unint64_t static SignalFactoryConstants.contactsFirstNameKey.getter()
{
  return 0xD000000000000011;
}

unint64_t static SignalFactoryConstants.contactsLastNameKey.getter()
{
  return 0xD000000000000010;
}

uint64_t static SignalFactoryConstants.answerCallAction.getter()
{
  return 0x6143726577736E41;
}

uint64_t static SignalFactoryConstants.messageRecipientsKey.getter()
{
  return 0x6E65697069636572;
}

unint64_t static SignalFactoryConstants.messageIdentifiersKey.getter()
{
  return 0xD000000000000012;
}

unint64_t static SignalFactoryConstants.unsendMessageIdentifiersKey.getter()
{
  return 0xD000000000000018;
}

uint64_t static SignalFactoryConstants.appLaunchHomescreen.getter()
{
  return 0x65726373656D6F48;
}

uint64_t static SignalFactoryConstants.appLaunchOther.getter()
{
  return 0x726568744FLL;
}

unint64_t static SignalFactoryConstants.appLaunchBundleId.getter()
{
  return 0xD000000000000011;
}

unint64_t static SignalFactoryConstants.appLaunchDuration.getter()
{
  return 0xD000000000000011;
}

uint64_t static SignalFactoryConstants.appleMusicBundleID.getter()
{
  return 0x6C7070612E6D6F63;
}

uint64_t static SignalFactoryConstants.mediaITunesStoreIdKey.getter()
{
  return 0x745373656E755469;
}

unint64_t static SignalFactoryConstants.mediaContentDurationKey.getter()
{
  return 0xD000000000000014;
}

uint64_t static SignalFactoryConstants.mediaPlayDurationKey.getter()
{
  return 0x6172754479616C70;
}

uint64_t static SignalFactoryConstants.mediaTitleKey.getter()
{
  return 0x656C746974;
}

uint64_t static SignalFactoryConstants.mediaArtistKey.getter()
{
  return 0x747369747261;
}

uint64_t static SignalFactoryConstants.mediaAlbumKey.getter()
{
  return 0x6D75626C61;
}

uint64_t static SignalFactoryConstants.mediaGenreKey.getter()
{
  return 0x65726E6567;
}

uint64_t static SignalFactoryConstants.mediaElapsedKey.getter()
{
  return 0x64657370616C65;
}

unint64_t static SignalFactoryConstants.mediaITunesSubscriptionKey.getter()
{
  return 0xD000000000000012;
}

uint64_t static SignalFactoryConstants.mediaIsAirPlayKey.getter()
{
  return 0x616C507269417369;
}

const char *SignalFactoryConstants.playbackKey.unsafeMutableAddressor()
{
  return "playback";
}

uint64_t static SignalFactoryConstants.playbackKey.getter()
{
  return 0x6B63616279616C70;
}

uint64_t static SignalFactoryConstants.mediaTypeKey.getter()
{
  return 0x707954616964656DLL;
}

uint64_t static SignalFactoryConstants.appleMusic1RadioStationKey.getter()
{
  return 0x754D20656C707041;
}

uint64_t static SignalFactoryConstants.unparsedIntentKey.getter()
{
  return 0x6465737261706E75;
}

uint64_t static SignalFactoryConstants.currentTaskKey.getter()
{
  return 0x74746E6572727563;
}

uint64_t static SignalFactoryConstants.UnknownParseKey.getter()
{
  return 0x206E776F6E6B6E75;
}

unint64_t static SignalFactoryConstants.accessoryUniqueIdentifierKey.getter()
{
  return 0xD000000000000019;
}

unint64_t static SignalFactoryConstants.accessoryStateNumberKey.getter()
{
  return 0xD000000000000014;
}

uint64_t static SignalFactoryConstants.accessoryClientNameKey.getter()
{
  return 0x614E746E65696C63;
}

unint64_t static SignalFactoryConstants.roomUniqueIdentifierKey.getter()
{
  return 0xD000000000000014;
}

unint64_t static SignalFactoryConstants.zoneUniqueIdentifiersKey.getter()
{
  return 0xD000000000000015;
}

uint64_t static SignalFactoryConstants.serviceTypeKey.getter()
{
  return 0x5465636976726573;
}

uint64_t static SignalFactoryConstants.homeAutomationAction.getter()
{
  return 0x486C6F72746E6F43;
}

unint64_t static SignalFactoryConstants.characteristicTypeKey.getter()
{
  return 0xD000000000000012;
}

uint64_t static SignalFactoryConstants.homeAppIdentifier.getter()
{
  return 0x6C7070612E6D6F63;
}

unint64_t static SignalFactoryConstants.nanoHomeAppIdentifier.getter()
{
  return 0xD000000000000012;
}

unint64_t static SignalFactoryConstants.HomeKitCharacteristic_ON.getter()
{
  return 0xD000000000000024;
}

unint64_t static SignalFactoryConstants.HomeKitCharacteristic_ACTIVE.getter()
{
  return 0xD000000000000024;
}

const char *SignalFactoryConstants.actionTypeKey.unsafeMutableAddressor()
{
  return "actionType";
}

uint64_t static SignalFactoryConstants.actionTypeKey.getter()
{
  return 0x79546E6F69746361;
}

uint64_t static SignalFactoryConstants.navigationTypeKey.getter()
{
  return 0x697461676976616ELL;
}

void *SignalFactoryConstants.navigationIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.navigationIdentifierKey;
}

unint64_t static SignalFactoryConstants.navigationIdentifierKey.getter()
{
  return 0xD000000000000014;
}

const char *SignalFactoryConstants.poiIdentifierKey.unsafeMutableAddressor()
{
  return "poiIdentifier";
}

uint64_t static SignalFactoryConstants.poiIdentifierKey.getter()
{
  return 0x746E656449696F70;
}

uint64_t static SignalFactoryConstants.placeCardTap.getter()
{
  return 0x7261436563616C50;
}

uint64_t static SignalFactoryConstants.show.getter()
{
  return 2003789907;
}

uint64_t static SignalFactoryConstants.navigation.getter()
{
  return 0x697461676976614ELL;
}

const char *SignalFactoryConstants.selectCategory.unsafeMutableAddressor()
{
  return "SelectCategory";
}

uint64_t static SignalFactoryConstants.selectCategory.getter()
{
  return 0x61437463656C6553;
}

const char *SignalFactoryConstants.resultListTap.unsafeMutableAddressor()
{
  return "ResultListTap";
}

uint64_t static SignalFactoryConstants.resultListTap.getter()
{
  return 0x694C746C75736552;
}

const char *SignalFactoryConstants.search.unsafeMutableAddressor()
{
  return "Search";
}

uint64_t static SignalFactoryConstants.search.getter()
{
  return 0x686372616553;
}

uint64_t static SignalFactoryConstants.getNavigationStatus.getter()
{
  return 0x5F56414E5F544547;
}

uint64_t static SignalFactoryConstants.continueKey.getter()
{
  return 0x65756E69746E6F43;
}

uint64_t static SignalFactoryConstants.alarmIdentifierKey.getter()
{
  return 0x6564496D72616C61;
}

unint64_t static SignalFactoryConstants.deleteAlarmIntentKey.getter()
{
  return 0xD000000000000011;
}

unint64_t static SignalFactoryConstants.assistantApplicationId.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static SignalFactoryConstants.bundleIdKey.getter()
{
  return 0x4449656C646E7562;
}

uint64_t static SignalFactoryConstants.executionIdKey.getter()
{
  return 0x6F69747563657865;
}

uint64_t static SignalFactoryConstants.executionDateKey.getter()
{
  return 0x6F69747563657865;
}

uint64_t static SignalFactoryConstants.targetKey.getter()
{
  return 0x746567726174;
}

uint64_t static SignalFactoryConstants.entityTypeKey.getter()
{
  return 0x7954797469746E65;
}

uint64_t static SignalFactoryConstants.entityTitleKey.getter()
{
  return 0x6954797469746E65;
}

unint64_t static SignalFactoryConstants.entityIdentifierKey.getter()
{
  return 0xD000000000000010;
}

uint64_t static SignalFactoryConstants.userQueryKey.getter()
{
  return 0x7265755172657375;
}

uint64_t static SignalFactoryConstants.searchPhraseKey.getter()
{
  return 0x6850686372616573;
}

uint64_t static SignalFactoryConstants.criteriaKey.getter()
{
  return 0x6169726574697263;
}

uint64_t static SignalFactoryConstants.searchToolKey.getter()
{
  return 0x6F74686372616573;
}

unint64_t static SignalFactoryConstants.appIntentCategoryKey.getter()
{
  return 0xD000000000000011;
}

const char *DomainsConstants.mediaDomain.unsafeMutableAddressor()
{
  return "Media";
}

uint64_t static DomainsConstants.mediaDomain.getter()
{
  return 0x616964654DLL;
}

uint64_t static DomainsConstants.musicDomain.getter()
{
  return 0x636973754DLL;
}

uint64_t static DomainsConstants.mapsDomain.getter()
{
  return 1936744781;
}

uint64_t static DomainsConstants.callsDomain.getter()
{
  return 0x736C6C6143;
}

uint64_t static DomainsConstants.messagesDomain.getter()
{
  return 0x736567617373654DLL;
}

uint64_t static DomainsConstants.calendarDomain.getter()
{
  return 0x7261646E656C6143;
}

uint64_t static DomainsConstants.appLaunchDomain.getter()
{
  return 0x636E75614C707041;
}

uint64_t static DomainsConstants.alarmsDomain.getter()
{
  return 0x6D72616C41;
}

uint64_t static DomainsConstants.homeAutomationDomain.getter()
{
  return 0x6F747541656D6F48;
}

uint64_t static DomainsConstants.appIntentTranscriptDomain.getter()
{
  return 0x6E65746E49707041;
}

unint64_t static TaskTypeConstants.answerCallIntentType.getter()
{
  return 0xD000000000000010;
}

uint64_t static TaskTypeConstants.startCallIntentType.getter()
{
  return 0x6C61637472617473;
}

unint64_t static TaskTypeConstants.startAudioCallIntentType.getter()
{
  return 0xD000000000000014;
}

unint64_t static TaskTypeConstants.startVideoCallIntentType.getter()
{
  return 0xD000000000000014;
}

unint64_t static TaskTypeConstants.sendMessageIntentType.getter()
{
  return 0xD000000000000011;
}

uint64_t static TaskTypeConstants.mapsIntentType.getter()
{
  return 1936744813;
}

uint64_t static TaskTypeConstants.genericIntentType.getter()
{
  return 0x69636972656E6567;
}

uint64_t static TaskTypeConstants.sageTask.getter()
{
  return 0x7361742065676173;
}

uint64_t static TaskTypeConstants.externalAgentKey.getter()
{
  return 0x6C616E7265747865;
}

unint64_t static TaskTypeConstants.intelligenceFlowTask.getter()
{
  return 0xD000000000000014;
}

void *static SynapseTypesAlarmRelatedConstants.allCases.getter()
{
  return &outlined read-only object #0 of static SynapseTypesAlarmRelatedConstants.allCases.getter;
}

unint64_t SynapseTypesAlarmRelatedConstants.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000005ELL;
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
      unint64_t result = 0xD00000000000005DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SynapseTypesAlarmRelatedConstants(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = SynapseTypesAlarmRelatedConstants.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == SynapseTypesAlarmRelatedConstants.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SynapseTypesAlarmRelatedConstants()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  SynapseTypesAlarmRelatedConstants.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SynapseTypesAlarmRelatedConstants()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SynapseTypesAlarmRelatedConstants()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  SynapseTypesAlarmRelatedConstants.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SynapseTypesAlarmRelatedConstants@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SynapseTypesAlarmRelatedConstants.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SynapseTypesAlarmRelatedConstants@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SynapseTypesAlarmRelatedConstants.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SynapseTypesAlarmRelatedConstants(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance SynapseTypesAlarmRelatedConstants;
}

unint64_t specialized SynapseTypesAlarmRelatedConstants.init(rawValue:)(Swift::String string)
{
  int64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._int64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SynapseTypesAlarmRelatedConstants.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type SynapseTypesAlarmRelatedConstants and conformance SynapseTypesAlarmRelatedConstants()
{
  unint64_t result = lazy protocol witness table cache variable for type SynapseTypesAlarmRelatedConstants and conformance SynapseTypesAlarmRelatedConstants;
  if (!lazy protocol witness table cache variable for type SynapseTypesAlarmRelatedConstants and conformance SynapseTypesAlarmRelatedConstants)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SynapseTypesAlarmRelatedConstants and conformance SynapseTypesAlarmRelatedConstants);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SynapseTypesAlarmRelatedConstants] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SynapseTypesAlarmRelatedConstants] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SynapseTypesAlarmRelatedConstants] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SynapseTypesAlarmRelatedConstants]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SynapseTypesAlarmRelatedConstants] and conformance [A]);
  }
  return result;
}

ValueMetadata *type metadata accessor for SignalFactoryConstants()
{
  return &type metadata for SignalFactoryConstants;
}

ValueMetadata *type metadata accessor for DomainsConstants()
{
  return &type metadata for DomainsConstants;
}

ValueMetadata *type metadata accessor for TaskTypeConstants()
{
  return &type metadata for TaskTypeConstants;
}

unsigned char *storeEnumTagSinglePayload for SynapseTypesAlarmRelatedConstants(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224F45598);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SynapseTypesAlarmRelatedConstants()
{
  return &type metadata for SynapseTypesAlarmRelatedConstants;
}

uint64_t PSEPhoneCallSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

void PSEPhoneCallSELFEmitter.emitPSEPhoneCall(phoneCallSignals:appLaunchSignals:task:)(unint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v179 = a1;
  uint64_t v6 = type metadata accessor for ReliabilityCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v156 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  id v176 = (char *)&v156 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v175 = (char *)&v156 - v14;
  MEMORY[0x270FA5388](v13);
  id v177 = (char *)&v156 - v15;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v178 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  id v174 = (char *)&v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  unint64_t v172 = (char *)&v156 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  unint64_t v173 = (char *)&v156 - v22;
  MEMORY[0x270FA5388](v21);
  os_log_type_t v24 = (char *)&v156 - v23;
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB10]), sel_init);
  if (v25)
  {
    unint64_t v26 = v25;
    id v170 = a3;
    uint64_t v171 = v3;
    id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB18]), sel_init);
    if (v27)
    {
      uint64_t v28 = v27;
      id v168 = v24;
      id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB08]), sel_init);
      if (v29)
      {
        id v30 = v29;
        id v169 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB20]), sel_init);
        if (v169)
        {
          id v167 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB00]), sel_init);
          if (v167)
          {
            uint64_t v31 = v179;
            uint64_t v163 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v179 >> 62);
            if (v179 >> 62)
            {
              swift_bridgeObjectRetain();
              if (_CocoaArrayWrapper.endIndex.getter())
              {
LABEL_8:
                uint64_t v160 = (void (*)(char *, uint64_t))(v31 & 0xC000000000000001);
                id v164 = v30;
                id v162 = v26;
                if ((v31 & 0xC000000000000001) != 0)
                {
                  uint64_t v31 = MEMORY[0x22A627400](0, v31);
                }
                else
                {
                  if (!*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  {
                    __break(1u);
                    goto LABEL_145;
                  }
                  uint64_t v31 = *(void *)(v31 + 32);
                  swift_retain();
                }
                uint64_t v33 = swift_bridgeObjectRelease();
                (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v31 + 120))(&v182, v33);
                id v34 = v169;
                uint64_t v35 = (*(uint64_t (**)(id))(*(void *)v31 + 144))(objc_msgSend(v169, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v182));
                unint64_t v36 = (void *)MEMORY[0x22A626F60](v35);
                swift_bridgeObjectRelease();
                objc_msgSend(v34, sel_setDomain_, v36);

                uint64_t v37 = (*(uint64_t (**)(void))(*(void *)v31 + 168))();
                uint64_t v38 = (void *)MEMORY[0x22A626F60](v37);
                swift_bridgeObjectRelease();
                objc_msgSend(v34, sel_setAction_, v38);

                unint64_t v26 = *(void **)(*(void *)v31 + 216);
                uint64_t v166 = *(void *)v31 + 216;
                uint64_t v39 = ((uint64_t (*)(void))v26)();
                if (*(void *)(v39 + 16)
                  && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
                      (v41 & 1) != 0))
                {
                  outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v40, (uint64_t)&v182);
                  swift_bridgeObjectRelease();
                  id v30 = v167;
                  if (*((void *)&v183 + 1))
                  {
                    if (swift_dynamicCast()) {
                      uint64_t v42 = LOBYTE(v180);
                    }
                    else {
                      uint64_t v42 = 2;
                    }
LABEL_23:
                    uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v171 + 104))(v42);
                    objc_msgSend(v169, sel_setIsDonatedBySiri_, v43);
                    if (!(a2 >> 62))
                    {
                      uint64_t v44 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      swift_bridgeObjectRetain();
                      goto LABEL_25;
                    }
LABEL_145:
                    swift_bridgeObjectRetain();
                    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
LABEL_25:
                    id v165 = v28;
                    if (v44)
                    {
                      uint64_t v159 = v16;
                      if ((a2 & 0xC000000000000001) != 0)
                      {
                        uint64_t v46 = MEMORY[0x22A627400](0, a2);
                        uint64_t v45 = v170;
                      }
                      else
                      {
                        uint64_t v45 = v170;
                        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
                        {
                          __break(1u);
                          goto LABEL_148;
                        }
                        uint64_t v46 = *(void *)(a2 + 32);
                        swift_retain();
                      }
                      uint64_t v47 = swift_bridgeObjectRelease();
                      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v46 + 120))(&v182, v47);
                      uint64_t v48 = (*(uint64_t (**)(id))(*(void *)v46 + 216))(objc_msgSend(v169, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v182));
                      if (*(void *)(v48 + 16)
                        && (unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F66680), (v50 & 1) != 0))
                      {
                        outlined init with copy of Any(*(void *)(v48 + 56) + 32 * v49, (uint64_t)&v182);
                      }
                      else
                      {
                        long long v182 = 0u;
                        long long v183 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((void *)&v183 + 1))
                      {
                        int v51 = swift_dynamicCast();
                        double v52 = v180;
                        if (!v51) {
                          double v52 = 0.0;
                        }
                        double v157 = v52;
                        if (v51) {
                          uint64_t v53 = v181;
                        }
                        else {
                          uint64_t v53 = 0;
                        }
                      }
                      else
                      {
                        outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
                        double v157 = 0.0;
                        uint64_t v53 = 0;
                      }
                      uint64_t v56 = (void *)(*(uint64_t (**)(void))(*(void *)v45 + 224))();
                      uint64_t v57 = v56[2];
                      id v158 = v26;
                      if (v57)
                      {
                        uint64_t v58 = v56[4];
                        uint64_t v59 = v56[5];
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        uint64_t v58 = 0;
                        uint64_t v59 = 0;
                      }
                      swift_bridgeObjectRelease();
                      uint64_t v60 = v171;
                      uint64_t v61 = (*(uint64_t (**)(double, uint64_t, uint64_t, uint64_t))(*(void *)v171 + 120))(COERCE_DOUBLE(*(void *)&v157), v53, v58, v59);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      id v54 = v169;
                      uint64_t v62 = (*(uint64_t (**)(id))(*(void *)v46 + 168))(objc_msgSend(v169, sel_setAppFollowup_, v61));
                      uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 136))(v62);
                      swift_bridgeObjectRelease();
                      objc_msgSend(v54, sel_setAppLaunchReason_, v63);
                      id v55 = (id)swift_release();
                      uint64_t v16 = v159;
                      id v30 = v167;
                      unint64_t v26 = v158;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      id v54 = v169;
                      id v55 = objc_msgSend(v169, sel_setAppFollowup_, 3);
                    }
                    uint64_t v64 = ((uint64_t (*)(id))v26)(v55);
                    if (*(void *)(v64 + 16)
                      && (unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(0x617275446C6C6163, 0xEC0000006E6F6974), (v66 & 1) != 0))
                    {
                      outlined init with copy of Any(*(void *)(v64 + 56) + 32 * v65, (uint64_t)&v182);
                    }
                    else
                    {
                      long long v182 = 0u;
                      long long v183 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((void *)&v183 + 1))
                    {
                      if (swift_dynamicCast())
                      {
                        double v67 = fmin(v180, 30.0);
LABEL_54:
                        uint64_t v68 = ((uint64_t (*)(id))v26)(objc_msgSend(v30, sel_setCallDurationInSeconds_, v67));
                        if (*(void *)(v68 + 16)
                          && (unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000224F67520), (v70 & 1) != 0))
                        {
                          outlined init with copy of Any(*(void *)(v68 + 56) + 32 * v69, (uint64_t)&v182);
                        }
                        else
                        {
                          long long v182 = 0u;
                          long long v183 = 0u;
                        }
                        swift_bridgeObjectRelease();
                        if (*((void *)&v183 + 1))
                        {
                          if (swift_dynamicCast())
                          {
                            double v71 = v180;
LABEL_63:
                            uint64_t v72 = ((uint64_t (*)(id))v26)(objc_msgSend(v30, sel_setTimeToEstablishInSeconds_, v71));
                            if (*(void *)(v72 + 16)
                              && (unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000224F67540), (v74 & 1) != 0))
                            {
                              outlined init with copy of Any(*(void *)(v72 + 56) + 32 * v73, (uint64_t)&v182);
                            }
                            else
                            {
                              long long v182 = 0u;
                              long long v183 = 0u;
                            }
                            swift_bridgeObjectRelease();
                            if (*((void *)&v183 + 1))
                            {
                              if (swift_dynamicCast())
                              {
                                v75.n128_f64[0] = v180;
LABEL_72:
                                id v76 = objc_msgSend(v30, sel_setRecentCallStatus_, (*(uint64_t (**)(__n128))(*(void *)v171 + 176))(v75));
                                uint64_t v77 = ((uint64_t (*)(id))v26)(v76);
                                if (*(void *)(v77 + 16)
                                  && (unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000224F67560), (v79 & 1) != 0))
                                {
                                  outlined init with copy of Any(*(void *)(v77 + 56) + 32 * v78, (uint64_t)&v182);
                                }
                                else
                                {
                                  long long v182 = 0u;
                                  long long v183 = 0u;
                                }
                                swift_bridgeObjectRelease();
                                if (*((void *)&v183 + 1))
                                {
                                  if (swift_dynamicCast())
                                  {
                                    v80.n128_f64[0] = v180;
LABEL_81:
                                    uint64_t v81 = (uint64_t)objc_msgSend(v30, sel_setDisconnectedReason_, (*(uint64_t (**)(__n128))(*(void *)v171 + 184))(v80));
                                    if (v163)
                                    {
                                      swift_bridgeObjectRetain();
                                      uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
                                      uint64_t v81 = swift_bridgeObjectRelease();
                                    }
                                    else
                                    {
                                      uint64_t v83 = *(void *)((v179 & 0xFFFFFFFFFFFFFF8) + 0x10);
                                    }
                                    uint64_t v161 = v31;
                                    if (v83 >= 2)
                                    {
                                      if (v160)
                                      {
                                        uint64_t v84 = MEMORY[0x22A627400](1, v179);
                                      }
                                      else
                                      {
                                        if (*(void *)((v179 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                                        {
                                          __break(1u);
                                          return;
                                        }
                                        uint64_t v84 = *(void *)(v179 + 40);
                                        swift_retain();
                                      }
                                      (*(void (**)(long long *__return_ptr))(*(void *)v84 + 120))(&v182);
                                      uint64_t v81 = swift_release();
                                      v82.n128_u64[0] = *((void *)&v182 + 1);
                                      if (*((double *)&v182 + 1) <= 30.0)
                                      {
                                        if (v160)
                                        {
                                          uint64_t v85 = MEMORY[0x22A627400](1, v179, *((double *)&v182 + 1));
                                        }
                                        else
                                        {
                                          uint64_t v85 = *(void *)(v179 + 40);
                                          swift_retain();
                                        }
                                        uint64_t v86 = (*(uint64_t (**)(void))(*(void *)v85 + 216))();
                                        swift_release();
                                        if (*(void *)(v86 + 16))
                                        {
                                          unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379);
                                          id v88 = v167;
                                          if (v89)
                                          {
                                            outlined init with copy of Any(*(void *)(v86 + 56) + 32 * v87, (uint64_t)&v182);
                                          }
                                          else
                                          {
                                            long long v182 = 0u;
                                            long long v183 = 0u;
                                          }
                                        }
                                        else
                                        {
                                          long long v182 = 0u;
                                          long long v183 = 0u;
                                          id v88 = v167;
                                        }
                                        swift_bridgeObjectRelease();
                                        if (*((void *)&v183 + 1))
                                        {
                                          uint64_t v81 = swift_dynamicCast();
                                          if ((v81 & 1) != 0 && (LOBYTE(v180) & 1) == 0)
                                          {
                                            uint64_t v159 = v16;
                                            objc_msgSend(v88, sel_setHasUserInitiatedFollowup_, 1);
                                            uint64_t v90 = ((uint64_t (*)(id))v26)(objc_msgSend(v54, sel_setHasUserInitiatedFollowup_, 1));
                                            if (v160)
                                            {
                                              uint64_t v91 = MEMORY[0x22A627400](1, v179);
                                            }
                                            else
                                            {
                                              uint64_t v91 = *(void *)(v179 + 40);
                                              swift_retain();
                                            }
                                            uint64_t v148 = (*(uint64_t (**)(void))(*(void *)v91 + 216))();
                                            swift_release();
                                            uint64_t v149 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v171 + 168))(v90, v148);
                                            swift_bridgeObjectRelease();
                                            swift_bridgeObjectRelease();
                                            uint64_t v150 = ((uint64_t (*)(id))v26)(objc_msgSend(v167, sel_setContactMatch_, v149));
                                            if (v160)
                                            {
                                              uint64_t v151 = MEMORY[0x22A627400](1, v179);
                                            }
                                            else
                                            {
                                              uint64_t v151 = *(void *)(v179 + 40);
                                              swift_retain();
                                            }
                                            uint64_t v152 = (*(uint64_t (**)(void))(*(void *)v151 + 216))();
                                            swift_release();
                                            id v96 = v167;
                                            (*(void (**)(uint64_t, uint64_t, id))(*(void *)v171 + 160))(v150, v152, v167);
                                            swift_bridgeObjectRelease();
                                            swift_bridgeObjectRelease();
                                            uint64_t v16 = v159;
                                            id v54 = v169;
LABEL_115:
                                            id v97 = v164;
                                            objc_msgSend(v164, sel_setCommonSignal_, v54);
                                            objc_msgSend(v97, sel_setCallSignal_, v96);
                                            os_log_type_t v98 = v168;
                                            UUID.init()();
                                            id v99 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                                            Class isa = UUID._bridgeToObjectiveC()().super.isa;
                                            id v101 = objc_msgSend(v99, sel_initWithNSUUID_, isa);

                                            uint64_t v102 = v178;
                                            unint64_t v103 = v178 + 8;
                                            unint64_t v104 = *(void (**)(char *, uint64_t))(v178 + 8);
                                            v104(v98, v16);
                                            id v105 = v165;
                                            objc_msgSend(v165, sel_setPseId_, v101);

                                            (*(void (**)(void))(*(void *)v170 + 152))();
                                            uint64_t v106 = (uint64_t)v177;
                                            UUID.init(uuidString:)();
                                            swift_bridgeObjectRelease();
                                            uint64_t v107 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
                                            uint64_t v166 = v102 + 48;
                                            uint64_t v163 = v107;
                                            if (v107(v106, 1, v16) == 1)
                                            {
                                              uint64_t v108 = outlined destroy of Any?(v106, &demangling cache variable for type metadata for UUID?);
                                            }
                                            else
                                            {
                                              long long v109 = *(void (**)(char *, uint64_t, uint64_t))(v102 + 32);
                                              char v110 = v173;
                                              v109(v173, v106, v16);
                                              id v111 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                                              Class v112 = UUID._bridgeToObjectiveC()().super.isa;
                                              id v113 = objc_msgSend(v111, sel_initWithNSUUID_, v112);

                                              objc_msgSend(v105, sel_setUiSessionId_, v113);
                                              uint64_t v108 = ((uint64_t (*)(char *, uint64_t))v104)(v110, v16);
                                            }
                                            uint64_t v114 = (uint64_t (*)(char *, uint64_t))v104;
                                            unint64_t v179 = v103;
                                            uint64_t v28 = v170;
                                            if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v170 + 200))(v108)
                                                           + 16))
                                            {
                                              swift_bridgeObjectRetain();
                                              swift_bridgeObjectRelease();
                                              uint64_t v115 = (uint64_t)v175;
                                              UUID.init(uuidString:)();
                                              swift_bridgeObjectRelease();
                                              if (v163(v115, 1, v16) != 1)
                                              {
                                                id v121 = v172;
                                                (*(void (**)(char *, uint64_t, uint64_t))(v178 + 32))(v172, v115, v16);
                                                id v122 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                                                Class v123 = UUID._bridgeToObjectiveC()().super.isa;
                                                id v124 = objc_msgSend(v122, sel_initWithNSUUID_, v123);

                                                objc_msgSend(v165, sel_setOriginalLastRequestId_, v124);
                                                uint64_t v120 = v114(v121, v16);
                                                uint64_t v116 = (uint64_t)v176;
                                                goto LABEL_126;
                                              }
                                              outlined destroy of Any?(v115, &demangling cache variable for type metadata for UUID?);
                                            }
                                            else
                                            {
                                              swift_bridgeObjectRelease();
                                            }
                                            uint64_t v116 = (uint64_t)v176;
                                            if (one-time initialization token for engagement != -1) {
                                              swift_once();
                                            }
                                            uint64_t v117 = type metadata accessor for Logger();
                                            __swift_project_value_buffer(v117, (uint64_t)static Logger.engagement);
                                            uint64_t v118 = *MEMORY[0x263F75050];
                                            uint64_t v119 = type metadata accessor for EngagementSignalCollectionError();
                                            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v119 - 8)
                                                                                             + 104))(v9, v118, v119);
                                            (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F75118], v6);
                                            Logger.debug(_:_:)(0xD000000000000027, 0x8000000224F666C0, (uint64_t)v9);
                                            uint64_t v120 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_126:
                                            (*(void (**)(uint64_t))(*(void *)v28 + 176))(v120);
                                            UUID.init(uuidString:)();
                                            swift_bridgeObjectRelease();
                                            unsigned int v125 = v163(v116, 1, v16);
                                            uint64_t v160 = (void (*)(char *, uint64_t))v114;
                                            if (v125 != 1)
                                            {
                                              char v130 = v174;
                                              (*(void (**)(char *, uint64_t, uint64_t))(v178 + 32))(v174, v116, v16);
                                              id v131 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                                              Class v132 = UUID._bridgeToObjectiveC()().super.isa;
                                              id v133 = objc_msgSend(v131, sel_initWithNSUUID_, v132);

                                              uint64_t v134 = (uint64_t)v165;
                                              objc_msgSend(v165, sel_setTaskId_, v133);

                                              uint64_t v129 = v114(v130, v16);
                                              uint64_t v31 = v134;
                                              goto LABEL_130;
                                            }
                                            outlined destroy of Any?(v116, &demangling cache variable for type metadata for UUID?);
                                            uint64_t v31 = (uint64_t)v165;
                                            if (one-time initialization token for engagement == -1)
                                            {
LABEL_128:
                                              uint64_t v126 = type metadata accessor for Logger();
                                              __swift_project_value_buffer(v126, (uint64_t)static Logger.engagement);
                                              uint64_t v127 = *MEMORY[0x263F75038];
                                              uint64_t v128 = type metadata accessor for EngagementSignalCollectionError();
                                              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v128 - 8)
                                                                                               + 104))(v9, v127, v128);
                                              (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F75118], v6);
                                              Logger.debug(_:_:)(0xD000000000000024, 0x8000000224F666F0, (uint64_t)v9);
                                              uint64_t v129 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_130:
                                              uint64_t v135 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 296))(v129);
                                              uint64_t v136 = (*(uint64_t (**)(uint64_t))(*(void *)v135 + 104))(v135);
                                              swift_release();
                                              uint64_t v137 = v171;
                                              id v138 = objc_msgSend((id)v31, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(void *)v171 + 96))(v136));
                                              objc_msgSend((id)v31, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(void *)v137 + 112))(v138));
                                              id v139 = v162;
                                              objc_msgSend(v162, sel_setEventMetadata_, v31);
                                              id v140 = v164;
                                              objc_msgSend(v139, sel_setCallSignalGenerated_, v164);
                                              if (one-time initialization token for engagement != -1) {
                                                swift_once();
                                              }
                                              uint64_t v141 = type metadata accessor for Logger();
                                              __swift_project_value_buffer(v141, (uint64_t)static Logger.engagement);
                                              uint64_t v142 = *MEMORY[0x263F750A8];
                                              uint64_t v143 = type metadata accessor for SELFPSELogged();
                                              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v143 - 8)
                                                                                               + 104))(v9, v142, v143);
                                              (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F750C8], v6);
                                              Logger.debug(_:_:)(0xD00000000000003ALL, 0x8000000224F690A0, (uint64_t)v9);
                                              (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
                                              id v144 = objc_msgSend(self, sel_sharedAnalytics);
                                              id v145 = objc_msgSend(v144, sel_defaultMessageStream);

                                              char v146 = v168;
                                              UUID.init()();
                                              Class v147 = UUID._bridgeToObjectiveC()().super.isa;
                                              v160(v146, v16);
                                              objc_msgSend(v145, sel_emitMessage_isolatedStreamUUID_, v139, v147);

                                              swift_release();
                                              return;
                                            }
LABEL_148:
                                            swift_once();
                                            goto LABEL_128;
                                          }
                                        }
                                        else
                                        {
                                          uint64_t v81 = outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
                                        }
                                      }
                                    }
                                    uint64_t v92 = ((uint64_t (*)(uint64_t, __n128))v26)(v81, v82);
                                    if (*(void *)(v92 + 16)
                                      && (unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v94 & 1) != 0))
                                    {
                                      outlined init with copy of Any(*(void *)(v92 + 56) + 32 * v93, (uint64_t)&v182);
                                    }
                                    else
                                    {
                                      long long v182 = 0u;
                                      long long v183 = 0u;
                                    }
                                    swift_bridgeObjectRelease();
                                    if (*((void *)&v183 + 1))
                                    {
                                      if ((swift_dynamicCast() & 1) != 0 && (LOBYTE(v180) & 1) == 0)
                                      {
                                        uint64_t v95 = 1;
LABEL_114:
                                        id v96 = v167;
                                        objc_msgSend(v167, sel_setHasUserInitiatedFollowup_, v95);
                                        objc_msgSend(v54, sel_setHasUserInitiatedFollowup_, v95);
                                        objc_msgSend(v96, sel_setContactMatch_, 3);
                                        goto LABEL_115;
                                      }
                                    }
                                    else
                                    {
                                      outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
                                    }
                                    uint64_t v95 = 0;
                                    goto LABEL_114;
                                  }
                                }
                                else
                                {
                                  outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
                                }
                                v80.n128_u64[0] = 0;
                                goto LABEL_81;
                              }
                            }
                            else
                            {
                              outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
                            }
                            v75.n128_u64[0] = 0;
                            goto LABEL_72;
                          }
                        }
                        else
                        {
                          outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
                        }
                        double v71 = -1.0;
                        goto LABEL_63;
                      }
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
                    }
                    double v67 = -1.0;
                    goto LABEL_54;
                  }
                }
                else
                {
                  long long v182 = 0u;
                  long long v183 = 0u;
                  swift_bridgeObjectRelease();
                  id v30 = v167;
                }
                outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
                uint64_t v42 = 2;
                goto LABEL_23;
              }
            }
            else
            {
              uint64_t v32 = *(void *)((v179 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v32) {
                goto LABEL_8;
              }
            }

            swift_bridgeObjectRelease();
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v153 = type metadata accessor for Logger();
  __swift_project_value_buffer(v153, (uint64_t)static Logger.engagement);
  uint64_t v154 = *MEMORY[0x263F75020];
  uint64_t v155 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v155 - 8) + 104))(v9, v154, v155);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F75118], v6);
  Logger.debug(_:_:)(0xD000000000000032, 0x8000000224F69060, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t PSEPhoneCallSELFEmitter.calculatePhoneticallySimilarScore(firstPhoneSignalData:secondPhoneSignalData:callSchema:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v72 = a2;
  uint64_t v5 = type metadata accessor for PhoneticEmbedder.LoadingOption();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PhoneticEmbedder.InputFormat();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v13 - 8);
  type metadata accessor for PSEPhoneticEmbedder();
  uint64_t v14 = swift_allocObject();
  Locale.init(identifier:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F17B38], v9);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F17B40], v5);
  type metadata accessor for PhoneticEmbedder();
  swift_allocObject();
  *(void *)(v14 + 16) = PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)();
  objc_msgSend(a3, sel_setContactFullNamePhoneticScore_, -1.0);
  objc_msgSend(a3, sel_setContactFirstNamePhoneticScore_, -1.0);
  uint64_t v15 = (uint64_t)&selRef_init;
  objc_msgSend(a3, sel_setContactLastNamePhoneticScore_, -1.0);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_20;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000224F674C0);
  if ((v17 & 1) == 0) {
    goto LABEL_20;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v16, (uint64_t)v74);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v18 = v73;
  if (!*(void *)(v72 + 16)
    || (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000224F674C0), (v20 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(v72 + 56) + 32 * v19, (uint64_t)v74), (swift_dynamicCast() & 1) == 0))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v15 = 0x1F844E000;
    goto LABEL_20;
  }
  uint64_t v21 = v73;
  if (!v18[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v22 = v18[4];
  unint64_t v23 = v18[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
  }
  if (!v24 || !v21[2]) {
    goto LABEL_41;
  }
  unint64_t v25 = v21[5];
  uint64_t v71 = v21[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v71;
  uint64_t v27 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0) {
    uint64_t v27 = v71 & 0xFFFFFFFFFFFFLL;
  }
  if (!v27)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = 0x1F844E000;
    if (!*(void *)(a1 + 16)) {
      goto LABEL_45;
    }
    goto LABEL_21;
  }
  v28._uint64_t countAndFlagsBits = v22;
  v28._int64_t object = (void *)v23;
  unint64_t v29 = v25;
  Swift::Double_optional v75 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v28, *(Swift::String *)&v26);
  double v30 = *(double *)&v75.is_nil;
  char v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = 0x1F844E000;
  if ((v32 & 1) == 0)
  {
    objc_msgSend(a3, sel_setContactFullNamePhoneticScore_, v30);
    if (!*(void *)(a1 + 16)) {
      goto LABEL_45;
    }
    goto LABEL_21;
  }
LABEL_20:
  if (!*(void *)(a1 + 16)) {
    goto LABEL_45;
  }
LABEL_21:
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F674E0);
  if ((v34 & 1) == 0) {
    goto LABEL_45;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v33, (uint64_t)v74);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_45;
  }
  uint64_t v35 = v15;
  unint64_t v36 = v73;
  if (!*(void *)(v72 + 16)
    || (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F674E0), (v38 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(v72 + 56) + 32 * v37, (uint64_t)v74), (swift_dynamicCast() & 1) == 0))
  {
LABEL_44:
    swift_bridgeObjectRelease();
    uint64_t v15 = v35;
    goto LABEL_45;
  }
  uint64_t v39 = v73;
  if (!v36[2]) {
    goto LABEL_43;
  }
  uint64_t v40 = v36[4];
  unint64_t v41 = v36[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) == 0) {
    uint64_t v42 = v40 & 0xFFFFFFFFFFFFLL;
  }
  if (!v42 || !v39[2]) {
    goto LABEL_43;
  }
  uint64_t v44 = v39[4];
  unint64_t v43 = v39[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = HIBYTE(v43) & 0xF;
  if ((v43 & 0x2000000000000000) == 0) {
    uint64_t v45 = v44 & 0xFFFFFFFFFFFFLL;
  }
  if (!v45)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  v46._uint64_t countAndFlagsBits = v40;
  v46._int64_t object = (void *)v41;
  v47._uint64_t countAndFlagsBits = v44;
  v47._int64_t object = (void *)v43;
  Swift::Double_optional v76 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v46, v47);
  double v48 = *(double *)&v76.is_nil;
  char v50 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v35;
  if ((v50 & 1) == 0) {
    objc_msgSend(a3, sel_setContactFirstNamePhoneticScore_, v48);
  }
LABEL_45:
  if (!*(void *)(a1 + 16)) {
    return swift_release();
  }
  unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000224F67500);
  if ((v52 & 1) == 0) {
    return swift_release();
  }
  uint64_t v53 = v15;
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v51, (uint64_t)v74);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_release();
  }
  id v54 = v73;
  if (!*(void *)(v72 + 16)) {
    goto LABEL_65;
  }
  unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000224F67500);
  if ((v56 & 1) == 0) {
    goto LABEL_65;
  }
  outlined init with copy of Any(*(void *)(v72 + 56) + 32 * v55, (uint64_t)v74);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_65;
  }
  uint64_t v57 = v73;
  if (!v54[2]) {
    goto LABEL_63;
  }
  uint64_t v59 = v54[4];
  unint64_t v58 = v54[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = HIBYTE(v58) & 0xF;
  if ((v58 & 0x2000000000000000) == 0) {
    uint64_t v60 = v59 & 0xFFFFFFFFFFFFLL;
  }
  if (v60)
  {
    if (v57[2])
    {
      uint64_t v62 = v57[4];
      unint64_t v61 = v57[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v63 = HIBYTE(v61) & 0xF;
      if ((v61 & 0x2000000000000000) == 0) {
        uint64_t v63 = v62 & 0xFFFFFFFFFFFFLL;
      }
      if (v63)
      {
        v64._uint64_t countAndFlagsBits = v59;
        v64._int64_t object = (void *)v58;
        v65._uint64_t countAndFlagsBits = v62;
        v65._int64_t object = (void *)v61;
        Swift::Double_optional v77 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v64, v65);
        double v66 = *(double *)&v77.is_nil;
        char v68 = v67;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v68 & 1) == 0) {
          objc_msgSend(a3, (SEL)(v53 + 114), v66);
        }
        return swift_release();
      }
      goto LABEL_64;
    }
LABEL_63:
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_64:
  swift_bridgeObjectRelease();
LABEL_65:
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t PSEPhoneCallSELFEmitter.getPSEPhoneContactMatch(firstPhoneSignalData:secondPhoneSignalData:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156);
  if ((v5 & 1) == 0) {
    return 0;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if (!*(void *)(a2 + 16)
    || (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156), (v7 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v6, (uint64_t)v11), (swift_dynamicCast() & 1) == 0))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v10[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v8 = specialized static Array<A>.== infix(_:_:)(v10, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t PSEPhoneCallSELFEmitter.getRecentCallStatus(recentCallStatus:)(double a1)
{
  if (a1 == 0.0) {
    return 0;
  }
  if (a1 == 1.0) {
    return 1;
  }
  if (a1 == 2.0) {
    return 2;
  }
  if (a1 == 4.0) {
    return 3;
  }
  if (a1 == 16.0) {
    unsigned int v2 = 5;
  }
  else {
    unsigned int v2 = 0;
  }
  if (a1 == 8.0) {
    return 4;
  }
  else {
    return v2;
  }
}

uint64_t PSEPhoneCallSELFEmitter.getDisconnectedReason(disconnectedReason:)(double a1)
{
  if (a1 == 0.0) {
    return 0;
  }
  if (a1 == 1.0) {
    return 4;
  }
  if (a1 == 2.0) {
    return 2;
  }
  if (a1 == 3.0) {
    return 3;
  }
  if (a1 == 4.0) {
    return 18;
  }
  if (a1 == 5.0) {
    return 6;
  }
  if (a1 == 6.0) {
    return 1;
  }
  if (a1 == 7.0) {
    return 19;
  }
  if (a1 == 8.0) {
    return 14;
  }
  if (a1 == 9.0) {
    return 15;
  }
  if (a1 == 10.0) {
    return 16;
  }
  if (a1 == 11.0) {
    return 13;
  }
  if (a1 == 12.0) {
    return 5;
  }
  if (a1 == 13.0) {
    return 8;
  }
  if (a1 == 14.0) {
    return 11;
  }
  if (a1 == 15.0) {
    return 7;
  }
  if (a1 == 16.0) {
    return 17;
  }
  if (a1 == 17.0) {
    return 12;
  }
  if (a1 == 18.0) {
    return 9;
  }
  if (a1 == 19.0) {
    return 10;
  }
  if (a1 == 20.0) {
    return 20;
  }
  if (a1 == 21.0) {
    return 21;
  }
  if (a1 == 22.0) {
    return 22;
  }
  if (a1 == 23.0) {
    return 23;
  }
  if (a1 == 24.0) {
    return 24;
  }
  if (a1 == 25.0) {
    return 25;
  }
  if (a1 == 26.0) {
    return 26;
  }
  if (a1 == 27.0) {
    return 27;
  }
  if (a1 == 28.0) {
    return 28;
  }
  if (a1 == 29.0) {
    return 29;
  }
  if (a1 == 30.0) {
    return 30;
  }
  if (a1 == 31.0) {
    return 31;
  }
  if (a1 == 32.0) {
    return 32;
  }
  if (a1 == 33.0) {
    return 33;
  }
  if (a1 == 34.0) {
    return 34;
  }
  if (a1 == 35.0) {
    return 35;
  }
  if (a1 == 36.0) {
    return 36;
  }
  if (a1 == 1000.0) {
    return 1000;
  }
  if (a1 == 1001.0) {
    return 1001;
  }
  return 0;
}

uint64_t PSEPhoneCallSELFEmitter.init()()
{
  return v0;
}

uint64_t PSEPhoneCallSELFEmitter.deinit()
{
  return v0;
}

uint64_t PSEPhoneCallSELFEmitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for PSEPhoneCallSELFEmitter()
{
  return self;
}

uint64_t method lookup function for PSEPhoneCallSELFEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEPhoneCallSELFEmitter);
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.emitPSEPhoneCall(phoneCallSignals:appLaunchSignals:task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.calculatePhoneticallySimilarScore(firstPhoneSignalData:secondPhoneSignalData:callSchema:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.getPSEPhoneContactMatch(firstPhoneSignalData:secondPhoneSignalData:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.getRecentCallStatus(recentCallStatus:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.getDisconnectedReason(disconnectedReason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t PSESMSSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

void PSESMSSELFEmitter.emitPSESMS(smsSignals:appLaunchSignals:task:)(void (*a1)(void, void), unint64_t a2, uint64_t a3)
{
  unint64_t v164 = (unint64_t)a1;
  uint64_t v5 = type metadata accessor for ReliabilityCategory();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v160 = (char *)v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v159 = (char *)v142 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v142 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v161 = *(unsigned int **)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  unint64_t v19 = (unsigned int *)((char *)v142 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  double v157 = (char *)v142 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  id v158 = (char *)v142 - v23;
  MEMORY[0x270FA5388](v22);
  id v162 = (char *)v142 - v24;
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB10]), sel_init);
  if (v25)
  {
    uint64_t v26 = v25;
    id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB18]), sel_init);
    if (v27)
    {
      id v156 = v27;
      id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB80]), sel_init);
      if (v28)
      {
        id v154 = v28;
        id v155 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB20]), sel_init);
        if (v155)
        {
          id v153 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB78]), sel_init);
          if (v153)
          {
            uint64_t v150 = (unsigned int *)(v164 >> 62);
            if (v164 >> 62)
            {
              swift_bridgeObjectRetain();
              if (_CocoaArrayWrapper.endIndex.getter())
              {
LABEL_8:
                uint64_t v149 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v164 & 0xC000000000000001);
                uint64_t v151 = v16;
                id v146 = v26;
                id v145 = v19;
                if ((v164 & 0xC000000000000001) != 0)
                {
                  uint64_t v30 = MEMORY[0x22A627400](0, v164);
                }
                else
                {
                  if (!*(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  {
                    __break(1u);
                    goto LABEL_104;
                  }
                  uint64_t v30 = *(void *)(v164 + 32);
                  swift_retain();
                }
                uint64_t v31 = swift_bridgeObjectRelease();
                (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v30 + 120))(&v167, v31);
                id v32 = v155;
                uint64_t v33 = (*(uint64_t (**)(id))(*(void *)v30 + 144))(objc_msgSend(v155, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v167));
                char v34 = (void *)MEMORY[0x22A626F60](v33);
                swift_bridgeObjectRelease();
                objc_msgSend(v32, sel_setDomain_, v34);

                uint64_t v35 = (*(uint64_t (**)(void))(*(void *)v30 + 168))();
                unint64_t v36 = (void *)MEMORY[0x22A626F60](v35);
                swift_bridgeObjectRelease();
                objc_msgSend(v32, sel_setAction_, v36);

                unint64_t v37 = *(uint64_t (**)(void))(*(void *)v30 + 216);
                uint64_t v38 = *(void *)v30 + 216;
                uint64_t v147 = v30;
                uint64_t v143 = v37;
                v142[1] = v38;
                uint64_t v39 = v37();
                if (*(void *)(v39 + 16)
                  && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
                      (v41 & 1) != 0))
                {
                  outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v40, (uint64_t)&v167);
                  swift_bridgeObjectRelease();
                  unint64_t v19 = v161;
                  if (*((void *)&v168 + 1))
                  {
                    if (swift_dynamicCast()) {
                      uint64_t v42 = v165;
                    }
                    else {
                      uint64_t v42 = 2;
                    }
LABEL_23:
                    uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v163 + 104))(v42);
                    objc_msgSend(v155, sel_setIsDonatedBySiri_, v43);
                    if (!(a2 >> 62))
                    {
                      uint64_t v44 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      swift_bridgeObjectRetain();
                      goto LABEL_25;
                    }
LABEL_104:
                    swift_bridgeObjectRetain();
                    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
LABEL_25:
                    uint64_t v152 = a3;
                    if (v44)
                    {
                      if ((a2 & 0xC000000000000001) != 0)
                      {
                        uint64_t v45 = MEMORY[0x22A627400](0, a2);
                      }
                      else
                      {
                        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
                        {
                          __break(1u);
                          goto LABEL_107;
                        }
                        uint64_t v45 = *(void *)(a2 + 32);
                        swift_retain();
                      }
                      uint64_t v46 = swift_bridgeObjectRelease();
                      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v45 + 120))(&v167, v46);
                      uint64_t v47 = (*(uint64_t (**)(id))(*(void *)v45 + 216))(objc_msgSend(v155, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v167));
                      if (*(void *)(v47 + 16)
                        && (unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F66680), (v49 & 1) != 0))
                      {
                        outlined init with copy of Any(*(void *)(v47 + 56) + 32 * v48, (uint64_t)&v167);
                      }
                      else
                      {
                        long long v167 = 0u;
                        long long v168 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((void *)&v168 + 1))
                      {
                        int v50 = swift_dynamicCast();
                        unint64_t v51 = v165;
                        if (!v50) {
                          unint64_t v51 = 0;
                        }
                        uint64_t v148 = v51;
                        if (v50) {
                          uint64_t v52 = v166;
                        }
                        else {
                          uint64_t v52 = 0;
                        }
                      }
                      else
                      {
                        outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for Any?);
                        uint64_t v148 = 0;
                        uint64_t v52 = 0;
                      }
                      unint64_t v55 = (void *)(*(uint64_t (**)(void))(*(void *)a3 + 224))();
                      if (v55[2])
                      {
                        uint64_t v56 = v55[5];
                        uint64_t v144 = v55[4];
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        uint64_t v144 = 0;
                        uint64_t v56 = 0;
                      }
                      swift_bridgeObjectRelease();
                      uint64_t v57 = v163;
                      uint64_t v58 = (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)v163
                                                                                                 + 120))(v148, v52, v144, v56);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      id v59 = v155;
                      uint64_t v60 = (*(uint64_t (**)(id))(*(void *)v45 + 168))(objc_msgSend(v155, sel_setAppFollowup_, v58));
                      uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 136))(v60);
                      id v53 = v59;
                      swift_bridgeObjectRelease();
                      objc_msgSend(v59, sel_setAppLaunchReason_, v61);
                      swift_release();
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      id v53 = v155;
                      objc_msgSend(v155, sel_setAppFollowup_, 3);
                    }
                    unint64_t v62 = v164;
                    if (v150)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
                      swift_bridgeObjectRelease();
                      unint64_t v62 = v164;
                      if (v63 < 2) {
                        goto LABEL_67;
                      }
                    }
                    else if (*(uint64_t *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
                    {
                      goto LABEL_67;
                    }
                    if (v149)
                    {
                      uint64_t v64 = MEMORY[0x22A627400](1, v62);
                    }
                    else
                    {
                      if (*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                      {
                        __break(1u);
                        return;
                      }
                      uint64_t v64 = *(void *)(v62 + 40);
                      swift_retain();
                    }
                    (*(void (**)(long long *__return_ptr))(*(void *)v64 + 120))(&v167);
                    swift_release();
                    double v54 = *((double *)&v167 + 1);
                    if (*((double *)&v167 + 1) <= 30.0)
                    {
                      if (v149)
                      {
                        uint64_t v65 = MEMORY[0x22A627400](1, v164, *((double *)&v167 + 1));
                      }
                      else
                      {
                        uint64_t v65 = *(void *)(v164 + 40);
                        swift_retain();
                      }
                      uint64_t v66 = (*(uint64_t (**)(void))(*(void *)v65 + 216))();
                      swift_release();
                      if (*(void *)(v66 + 16)
                        && (unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v68 & 1) != 0))
                      {
                        outlined init with copy of Any(*(void *)(v66 + 56) + 32 * v67, (uint64_t)&v167);
                      }
                      else
                      {
                        long long v167 = 0u;
                        long long v168 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((void *)&v168 + 1))
                      {
                        if ((swift_dynamicCast() & 1) != 0 && (v165 & 1) == 0)
                        {
                          objc_msgSend(v153, sel_setHasUserInitiatedFollowup_, 1);
                          objc_msgSend(v53, sel_setHasUserInitiatedFollowup_, 1);
                          if (v149)
                          {
                            uint64_t v69 = MEMORY[0x22A627400](1, v164);
                          }
                          else
                          {
                            uint64_t v69 = *(void *)(v164 + 40);
                            swift_retain();
                          }
                          (*(void (**)(long long *__return_ptr))(*(void *)v69 + 120))(&v167);
                          swift_release();
                          objc_msgSend(v153, sel_setUserFollowupEventDonationTimeInSecondsSince2001_, *(double *)&v167);
                          if (v149)
                          {
                            uint64_t v125 = MEMORY[0x22A627400](1, v164);
                          }
                          else
                          {
                            uint64_t v125 = *(void *)(v164 + 40);
                            swift_retain();
                          }
                          uint64_t v126 = (*(uint64_t (**)(void))(*(void *)v125 + 168))();
                          uint64_t v128 = v127;
                          swift_release();
                          uint64_t v129 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v163 + 176))(v126, v128);
                          swift_bridgeObjectRelease();
                          id v130 = objc_msgSend(v153, sel_setMessageUserFollowupAction_, v129);
                          uint64_t v131 = ((uint64_t (*)(id))v143)(v130);
                          if (v149)
                          {
                            uint64_t v132 = MEMORY[0x22A627400](1, v164);
                          }
                          else
                          {
                            uint64_t v132 = *(void *)(v164 + 40);
                            swift_retain();
                          }
                          uint64_t v133 = (*(uint64_t (**)(void))(*(void *)v132 + 216))();
                          swift_release();
                          uint64_t v134 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v163 + 168))(v131, v133);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          id v135 = objc_msgSend(v153, sel_setContactMatch_, v134);
                          uint64_t v136 = ((uint64_t (*)(id))v143)(v135);
                          if (v149)
                          {
                            uint64_t v137 = MEMORY[0x22A627400](1, v164);
                          }
                          else
                          {
                            uint64_t v137 = *(void *)(v164 + 40);
                            swift_retain();
                          }
                          id v53 = v155;
                          uint64_t v138 = (*(uint64_t (**)(void))(*(void *)v137 + 216))();
                          swift_release();
                          id v70 = v153;
                          (*(void (**)(uint64_t, uint64_t, id))(*(void *)v163 + 160))(v136, v138, v153);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
LABEL_68:
                          id v71 = v154;
                          objc_msgSend(v154, sel_setCommonSignal_, v53);
                          objc_msgSend(v71, sel_setMessageSignal_, v70);
                          uint64_t v72 = v162;
                          UUID.init()();
                          id v73 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                          Class isa = UUID._bridgeToObjectiveC()().super.isa;
                          id v75 = objc_msgSend(v73, sel_initWithNSUUID_, isa);

                          Swift::Double_optional v76 = (void (*)(char *, uint64_t))*((void *)v19 + 1);
                          Swift::Double_optional v77 = v72;
                          uint64_t v78 = v151;
                          v76(v77, v151);
                          objc_msgSend(v156, sel_setPseId_, v75);

                          (*(void (**)(void))(*(void *)v152 + 152))();
                          UUID.init(uuidString:)();
                          swift_bridgeObjectRelease();
                          uint64_t v79 = v78;
                          __n128 v80 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v19 + 6);
                          uint64_t v150 = v19 + 12;
                          uint64_t v149 = v80;
                          unsigned int v81 = v80((uint64_t)v15, 1, v78);
                          uint64_t v148 = v19 + 2;
                          if (v81 == 1)
                          {
                            unint64_t v82 = 0x263F6E000;
                            uint64_t v83 = outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
                          }
                          else
                          {
                            uint64_t v84 = v158;
                            (*((void (**)(char *, char *, uint64_t))v19 + 4))(v158, v15, v78);
                            unint64_t v82 = 0x263F6E000uLL;
                            id v85 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                            Class v86 = UUID._bridgeToObjectiveC()().super.isa;
                            id v87 = objc_msgSend(v85, sel_initWithNSUUID_, v86);

                            objc_msgSend(v156, sel_setUiSessionId_, v87);
                            uint64_t v83 = ((uint64_t (*)(char *, uint64_t))v76)(v84, v79);
                          }
                          uint64_t v88 = v152;
                          uint64_t v89 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v152 + 200))(v83) + 16);
                          unint64_t v19 = (unsigned int *)MEMORY[0x263F75118];
                          unint64_t v164 = (unint64_t)v76;
                          if (v89)
                          {
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRelease();
                            uint64_t v90 = (uint64_t)v159;
                            UUID.init(uuidString:)();
                            swift_bridgeObjectRelease();
                            uint64_t v91 = v151;
                            if (v149(v90, 1, v151) != 1)
                            {
                              id v97 = v157;
                              (*((void (**)(char *, uint64_t, uint64_t))v161 + 4))(v157, v90, v91);
                              id v98 = objc_allocWithZone(*(Class *)(v82 + 3808));
                              Class v99 = UUID._bridgeToObjectiveC()().super.isa;
                              id v96 = &selRef_init;
                              id v100 = objc_msgSend(v98, sel_initWithNSUUID_, v99);

                              objc_msgSend(v156, sel_setOriginalLastRequestId_, v100);
                              uint64_t v95 = ((uint64_t (*)(char *, uint64_t))v164)(v97, v91);
                              uint64_t v88 = v152;
                              goto LABEL_79;
                            }
                            outlined destroy of Any?(v90, &demangling cache variable for type metadata for UUID?);
                            uint64_t v88 = v152;
                          }
                          else
                          {
                            swift_bridgeObjectRelease();
                          }
                          if (one-time initialization token for engagement != -1) {
                            swift_once();
                          }
                          uint64_t v92 = type metadata accessor for Logger();
                          __swift_project_value_buffer(v92, (uint64_t)static Logger.engagement);
                          uint64_t v93 = *MEMORY[0x263F75050];
                          uint64_t v94 = type metadata accessor for EngagementSignalCollectionError();
                          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v94 - 8) + 104))(v8, v93, v94);
                          (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *v19, v5);
                          Logger.debug(_:_:)(0xD000000000000027, 0x8000000224F666C0, (uint64_t)v8);
                          uint64_t v95 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                          id v96 = &selRef_init;
LABEL_79:
                          (*(void (**)(uint64_t))(*(void *)v88 + 176))(v95);
                          uint64_t v101 = (uint64_t)v160;
                          UUID.init(uuidString:)();
                          swift_bridgeObjectRelease();
                          uint64_t v102 = v151;
                          if (v149(v101, 1, v151) != 1)
                          {
                            uint64_t v108 = v145;
                            (*((void (**)(unsigned int *, uint64_t, uint64_t))v161 + 4))(v145, v101, v102);
                            id v109 = objc_allocWithZone(*(Class *)(v82 + 3808));
                            Class v110 = UUID._bridgeToObjectiveC()().super.isa;
                            id v111 = objc_msgSend(v109, v96[13], v110);

                            id v107 = v156;
                            objc_msgSend(v156, sel_setTaskId_, v111);

                            uint64_t v106 = ((uint64_t (*)(unsigned int *, uint64_t))v164)(v108, v102);
                            goto LABEL_83;
                          }
                          outlined destroy of Any?(v101, &demangling cache variable for type metadata for UUID?);
                          if (one-time initialization token for engagement == -1)
                          {
LABEL_81:
                            uint64_t v103 = type metadata accessor for Logger();
                            __swift_project_value_buffer(v103, (uint64_t)static Logger.engagement);
                            uint64_t v104 = *MEMORY[0x263F75038];
                            uint64_t v105 = type metadata accessor for EngagementSignalCollectionError();
                            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v105 - 8) + 104))(v8, v104, v105);
                            (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *v19, v5);
                            Logger.debug(_:_:)(0xD000000000000024, 0x8000000224F666F0, (uint64_t)v8);
                            uint64_t v106 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                            uint64_t v102 = v151;
                            id v107 = v156;
LABEL_83:
                            uint64_t v112 = (*(uint64_t (**)(uint64_t))(*(void *)v152 + 296))(v106);
                            uint64_t v113 = (*(uint64_t (**)(uint64_t))(*(void *)v112 + 104))(v112);
                            swift_release();
                            uint64_t v114 = v163;
                            id v115 = objc_msgSend(v107, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(void *)v163 + 96))(v113));
                            objc_msgSend(v107, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(void *)v114 + 112))(v115));
                            id v116 = v146;
                            objc_msgSend(v146, sel_setEventMetadata_, v107);
                            id v117 = v154;
                            objc_msgSend(v116, sel_setMessageSignalGenerated_, v154);
                            if (one-time initialization token for engagement != -1) {
                              swift_once();
                            }
                            uint64_t v118 = type metadata accessor for Logger();
                            __swift_project_value_buffer(v118, (uint64_t)static Logger.engagement);
                            uint64_t v119 = *MEMORY[0x263F750A0];
                            uint64_t v120 = type metadata accessor for SELFPSELogged();
                            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v120 - 8) + 104))(v8, v119, v120);
                            (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F750C8], v5);
                            Logger.debug(_:_:)(0xD000000000000033, 0x8000000224F69150, (uint64_t)v8);
                            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                            id v121 = objc_msgSend(self, sel_sharedAnalytics);
                            id v122 = objc_msgSend(v121, sel_defaultMessageStream);

                            Class v123 = v162;
                            UUID.init()();
                            Class v124 = UUID._bridgeToObjectiveC()().super.isa;
                            ((void (*)(char *, uint64_t))v164)(v123, v102);
                            objc_msgSend(v122, sel_emitMessage_isolatedStreamUUID_, v116, v124);

                            swift_release();
                            return;
                          }
LABEL_107:
                          swift_once();
                          goto LABEL_81;
                        }
                      }
                      else
                      {
                        outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for Any?);
                      }
                    }
LABEL_67:
                    id v70 = v153;
                    objc_msgSend(v153, sel_setHasUserInitiatedFollowup_, 0, v54);
                    objc_msgSend(v53, sel_setHasUserInitiatedFollowup_, 0);
                    objc_msgSend(v70, sel_setMessageUserFollowupAction_, 1);
                    objc_msgSend(v70, sel_setContactMatch_, 3);
                    goto LABEL_68;
                  }
                }
                else
                {
                  long long v167 = 0u;
                  long long v168 = 0u;
                  swift_bridgeObjectRelease();
                  unint64_t v19 = v161;
                }
                outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for Any?);
                uint64_t v42 = 2;
                goto LABEL_23;
              }
            }
            else
            {
              uint64_t v29 = *(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v29) {
                goto LABEL_8;
              }
            }

            swift_bridgeObjectRelease();
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v139 = type metadata accessor for Logger();
  __swift_project_value_buffer(v139, (uint64_t)static Logger.engagement);
  uint64_t v140 = *MEMORY[0x263F75020];
  uint64_t v141 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v141 - 8) + 104))(v8, v140, v141);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F75118], v5);
  Logger.debug(_:_:)(0xD00000000000002CLL, 0x8000000224F69120, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PSESMSSELFEmitter.calculatePhoneticallySimilarScore(firstSMSSignalData:secondSMSSignalData:smsSchema:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v72 = a2;
  uint64_t v5 = type metadata accessor for PhoneticEmbedder.LoadingOption();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PhoneticEmbedder.InputFormat();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v13 - 8);
  type metadata accessor for PSEPhoneticEmbedder();
  uint64_t v14 = swift_allocObject();
  Locale.init(identifier:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F17B38], v9);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F17B40], v5);
  type metadata accessor for PhoneticEmbedder();
  swift_allocObject();
  *(void *)(v14 + 16) = PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)();
  objc_msgSend(a3, sel_setContactFullNamePhoneticScore_, -1.0);
  objc_msgSend(a3, sel_setContactFirstNamePhoneticScore_, -1.0);
  uint64_t v15 = (uint64_t)&selRef_init;
  objc_msgSend(a3, sel_setContactLastNamePhoneticScore_, -1.0);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_20;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000224F674C0);
  if ((v17 & 1) == 0) {
    goto LABEL_20;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v16, (uint64_t)v74);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v18 = v73;
  if (!*(void *)(v72 + 16)
    || (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000224F674C0), (v20 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(v72 + 56) + 32 * v19, (uint64_t)v74), (swift_dynamicCast() & 1) == 0))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v15 = 0x1F844E000;
    goto LABEL_20;
  }
  uint64_t v21 = v73;
  if (!v18[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v22 = v18[4];
  unint64_t v23 = v18[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
  }
  if (!v24 || !v21[2]) {
    goto LABEL_41;
  }
  unint64_t v25 = v21[5];
  uint64_t v71 = v21[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v71;
  uint64_t v27 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0) {
    uint64_t v27 = v71 & 0xFFFFFFFFFFFFLL;
  }
  if (!v27)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = 0x1F844E000;
    if (!*(void *)(a1 + 16)) {
      goto LABEL_45;
    }
    goto LABEL_21;
  }
  v28._uint64_t countAndFlagsBits = v22;
  v28._int64_t object = (void *)v23;
  unint64_t v29 = v25;
  Swift::Double_optional v75 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v28, *(Swift::String *)&v26);
  double v30 = *(double *)&v75.is_nil;
  char v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = 0x1F844E000;
  if ((v32 & 1) == 0)
  {
    objc_msgSend(a3, sel_setContactFullNamePhoneticScore_, v30);
    if (!*(void *)(a1 + 16)) {
      goto LABEL_45;
    }
    goto LABEL_21;
  }
LABEL_20:
  if (!*(void *)(a1 + 16)) {
    goto LABEL_45;
  }
LABEL_21:
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F674E0);
  if ((v34 & 1) == 0) {
    goto LABEL_45;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v33, (uint64_t)v74);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_45;
  }
  uint64_t v35 = v15;
  unint64_t v36 = v73;
  if (!*(void *)(v72 + 16)
    || (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F674E0), (v38 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(v72 + 56) + 32 * v37, (uint64_t)v74), (swift_dynamicCast() & 1) == 0))
  {
LABEL_44:
    swift_bridgeObjectRelease();
    uint64_t v15 = v35;
    goto LABEL_45;
  }
  uint64_t v39 = v73;
  if (!v36[2]) {
    goto LABEL_43;
  }
  uint64_t v40 = v36[4];
  unint64_t v41 = v36[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) == 0) {
    uint64_t v42 = v40 & 0xFFFFFFFFFFFFLL;
  }
  if (!v42 || !v39[2]) {
    goto LABEL_43;
  }
  uint64_t v44 = v39[4];
  unint64_t v43 = v39[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = HIBYTE(v43) & 0xF;
  if ((v43 & 0x2000000000000000) == 0) {
    uint64_t v45 = v44 & 0xFFFFFFFFFFFFLL;
  }
  if (!v45)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  v46._uint64_t countAndFlagsBits = v40;
  v46._int64_t object = (void *)v41;
  v47._uint64_t countAndFlagsBits = v44;
  v47._int64_t object = (void *)v43;
  Swift::Double_optional v76 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v46, v47);
  double v48 = *(double *)&v76.is_nil;
  char v50 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v35;
  if ((v50 & 1) == 0) {
    objc_msgSend(a3, sel_setContactFirstNamePhoneticScore_, v48);
  }
LABEL_45:
  if (!*(void *)(a1 + 16)) {
    return swift_release();
  }
  unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000224F67500);
  if ((v52 & 1) == 0) {
    return swift_release();
  }
  uint64_t v53 = v15;
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v51, (uint64_t)v74);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0) {
    return swift_release();
  }
  double v54 = v73;
  if (!*(void *)(v72 + 16)) {
    goto LABEL_65;
  }
  unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000224F67500);
  if ((v56 & 1) == 0) {
    goto LABEL_65;
  }
  outlined init with copy of Any(*(void *)(v72 + 56) + 32 * v55, (uint64_t)v74);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_65;
  }
  uint64_t v57 = v73;
  if (!v54[2]) {
    goto LABEL_63;
  }
  uint64_t v59 = v54[4];
  unint64_t v58 = v54[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = HIBYTE(v58) & 0xF;
  if ((v58 & 0x2000000000000000) == 0) {
    uint64_t v60 = v59 & 0xFFFFFFFFFFFFLL;
  }
  if (v60)
  {
    if (v57[2])
    {
      uint64_t v62 = v57[4];
      unint64_t v61 = v57[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v63 = HIBYTE(v61) & 0xF;
      if ((v61 & 0x2000000000000000) == 0) {
        uint64_t v63 = v62 & 0xFFFFFFFFFFFFLL;
      }
      if (v63)
      {
        v64._uint64_t countAndFlagsBits = v59;
        v64._int64_t object = (void *)v58;
        v65._uint64_t countAndFlagsBits = v62;
        v65._int64_t object = (void *)v61;
        Swift::Double_optional v77 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v64, v65);
        double v66 = *(double *)&v77.is_nil;
        char v68 = v67;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v68 & 1) == 0) {
          objc_msgSend(a3, (SEL)(v53 + 114), v66);
        }
        return swift_release();
      }
      goto LABEL_64;
    }
LABEL_63:
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_64:
  swift_bridgeObjectRelease();
LABEL_65:
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t PSESMSSELFEmitter.getPSEMessageContactMatch(firstSMSSignalData:secondSMSSignalData:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000224F67E80);
    if (v5)
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v17);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      if (swift_dynamicCast())
      {
        if (*(void *)(a2 + 16))
        {
          unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000224F67EA0);
          if (v7)
          {
            outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v6, (uint64_t)v17);
            if (swift_dynamicCast())
            {
              if (v16[2])
              {
                char v8 = specialized static Array<A>.== infix(_:_:)(v16, v16);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                BOOL v9 = (v8 & 1) == 0;
                goto LABEL_18;
              }
              swift_bridgeObjectRelease();
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156);
  if ((v11 & 1) == 0) {
    return 0;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if (!*(void *)(a2 + 16)
    || (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156), (v13 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v12, (uint64_t)v17), (swift_dynamicCast() & 1) == 0))
  {
LABEL_21:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v16[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  char v14 = specialized static Array<A>.== infix(_:_:)(v16, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL v9 = (v14 & 1) == 0;
LABEL_18:
  if (v9) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t PSESMSSELFEmitter.getPSEMessageUserFollowupAction(userAction:)()
{
  if (StringProtocol.contains<A>(_:)()) {
    return 3;
  }
  if (StringProtocol.contains<A>(_:)()) {
    return 4;
  }
  if (StringProtocol.contains<A>(_:)()) {
    return 2;
  }
  return 0;
}

uint64_t PSESMSSELFEmitter.init()()
{
  return v0;
}

uint64_t PSESMSSELFEmitter.deinit()
{
  return v0;
}

uint64_t PSESMSSELFEmitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for PSESMSSELFEmitter()
{
  return self;
}

uint64_t method lookup function for PSESMSSELFEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSESMSSELFEmitter);
}

uint64_t dispatch thunk of PSESMSSELFEmitter.emitPSESMS(smsSignals:appLaunchSignals:task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PSESMSSELFEmitter.calculatePhoneticallySimilarScore(firstSMSSignalData:secondSMSSignalData:smsSchema:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PSESMSSELFEmitter.getPSEMessageContactMatch(firstSMSSignalData:secondSMSSignalData:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PSESMSSELFEmitter.getPSEMessageUserFollowupAction(userAction:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of EntitySimilarity.siriChosenEntity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EntitySimilarity.siriChosenEntity.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of EntitySimilarity.siriChosenEntity.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of EntitySimilarity.userFollowupEntity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EntitySimilarity.userFollowupEntity.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of EntitySimilarity.userFollowupEntity.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of EntitySimilarity.compare()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of EntitySimilarity.print()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
  swift_retain_n();
  char v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    char v13 = (uint8_t *)swift_slowAlloc();
    unint64_t v23 = a5;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v24 = v14;
    *(_DWORD *)char v13 = 136315138;
    type metadata accessor for AbstractActivityCollector();
    swift_retain();
    uint64_t v15 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_224EDB000, v11, v12, "Starting %s", v13, 0xCu);
    swift_arrayDestroy();
    uint64_t v17 = v14;
    a5 = v23;
    MEMORY[0x22A627DB0](v17, -1, -1);
    MEMORY[0x22A627DB0](v13, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a4;
  v18[6] = a5;
  unint64_t v19 = *(void (**)(void (*)(void *), void *))(*(void *)a1 + 88);
  swift_retain();
  id v20 = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  id v21 = a5;
  v19(partial apply for closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:), v18);
  return swift_release();
}

void closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v37 = a4;
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v39 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  unint64_t v36 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.engagement);
  swift_retain();
  id v15 = a1;
  swift_retain();
  id v16 = a1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v33 = v11;
    uint64_t v21 = v20;
    uint64_t v41 = a2;
    aBlock[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v35 = a6;
    type metadata accessor for AbstractActivityCollector();
    uint64_t v34 = v10;
    swift_retain();
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v41 = (uint64_t)a1;
    id v24 = a1;
    __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for Error?);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, aBlock);
    uint64_t v10 = v34;
    a6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_224EDB000, v17, v18, "%s completed with error? %s (nil is good)", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    uint64_t v27 = v21;
    uint64_t v11 = v33;
    MEMORY[0x22A627DB0](v27, -1, -1);
    MEMORY[0x22A627DB0](v19, -1, -1);

    if (!a1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  swift_release_n();

  if (a1)
  {
LABEL_7:
    Swift::String v28 = v36;
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v37;
    *(void *)(v29 + 24) = a5;
    aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:);
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_46;
    double v30 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    char v31 = v39;
    static DispatchQoS.unspecified.getter();
    MEMORY[0x22A627280](0, v31, v28, v30);
    _Block_release(v30);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v31, v10);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v40);
    swift_release();
  }
LABEL_8:
  dispatch_group_leave(a6);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  char v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)(a1 + 16);
  swift_beginAccess();
  char v5 = *(void **)(a1 + 16);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *unint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    *unint64_t v4 = v5;
  }
  uint64_t v5[2] = v8 + 1;
  v5[v8 + 4] = a2;
  return swift_endAccess();
}

void closure #3 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ReliabilityCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  BOOL v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 16) + 16))
  {
    uint64_t v30 = v6;
    uint64_t v31 = a3;
    uint64_t v32 = a2;
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v14 = __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v33 = 0xD000000000000022;
    unint64_t v34 = 0x8000000224F69400;
    swift_beginAccess();
    uint64_t v15 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    v16._uint64_t countAndFlagsBits = MEMORY[0x22A627100](v15, v29);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = v33;
    unint64_t v18 = v34;
    uint64_t v19 = *MEMORY[0x263F75030];
    uint64_t v20 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v9, v19, v20);
    uint64_t v21 = v30;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F75118], v30);
    Logger.error(_:_:)(v17, v18, (uint64_t)v9);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v22 = self;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(v22, sel_getErrorFailedCollectors_, isa);

    v32(v24, 1);
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_224EDB000, v25, v26, "All collectors run successfully", v27, 2u);
      MEMORY[0x22A627DB0](v27, -1, -1);
    }

    a2((id)1, 0);
  }
}

uint64_t ActivityDispatcher.getJSONObjectFromCollectorDefinitions(collectorDefinitions:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v50 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ReliabilityCategory();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.Encoding();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v48 = v8;
    unint64_t v51 = a3;
    static String.Encoding.utf8.getter();
    uint64_t v16 = String.data(using:allowLossyConversion:)();
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (v18 >> 60 == 15)
    {
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
      *(void *)&v55[0] = 0;
      *((void *)&v55[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(79);
      v19._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
      v19._int64_t object = (void *)0x8000000224F691F0;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = a1;
      v20._int64_t object = a2;
      String.append(_:)(v20);
      long long v21 = v55[0];
      uint64_t v22 = *MEMORY[0x263F75058];
      uint64_t v23 = type metadata accessor for EngagementSignalCollectionError();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v11, v22, v23);
      uint64_t v24 = v48;
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F75118], v48);
      Logger.error(_:_:)(v21, *((unint64_t *)&v21 + 1), (uint64_t)v11);
      swift_bridgeObjectRelease();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v24);
      os_log_type_t v26 = v51;
      *unint64_t v51 = 0u;
      v26[1] = 0u;
    }
    else
    {
      memset(v55, 0, sizeof(v55));
      uint64_t v29 = self;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v52 = 0;
      id v31 = objc_msgSend(v29, sel_JSONObjectWithData_options_error_, isa, 4, &v52);

      id v32 = v52;
      if (v31)
      {
        _bridgeAnyObjectToAny(_:)();
        outlined consume of Data?(v16, v18);
        swift_unknownObjectRelease();
        outlined destroy of Any?((uint64_t)v55);
        outlined init with take of Any?((uint64_t)&v53, (uint64_t)v55);
      }
      else
      {
        unint64_t v33 = v32;
        uint64_t v47 = v16;
        unint64_t v34 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        if (one-time initialization token for engagement != -1) {
          swift_once();
        }
        uint64_t v35 = __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
        uint64_t v36 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v50, v35, v6);
        uint64_t v53 = 0;
        unint64_t v54 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v37._uint64_t countAndFlagsBits = 0xD000000000000052;
        v37._int64_t object = (void *)0x8000000224F69240;
        String.append(_:)(v37);
        id v52 = v34;
        id v38 = v34;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v39._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        uint64_t v40 = v53;
        unint64_t v41 = v54;
        uint64_t v42 = *MEMORY[0x263F75010];
        uint64_t v43 = type metadata accessor for EngagementSignalCollectionError();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104))(v11, v42, v43);
        uint64_t v44 = v48;
        (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F75118], v48);
        uint64_t v45 = v50;
        Logger.error(_:_:)(v40, v41, (uint64_t)v11);
        outlined consume of Data?(v47, v18);
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v44);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v45, v6);
      }
      return outlined init with take of Any?((uint64_t)v55, (uint64_t)v51);
    }
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
    uint64_t v27 = *MEMORY[0x263F75028];
    uint64_t v28 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v11, v27, v28);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F75118], v8);
    Logger.error(_:_:)(0xD000000000000023, 0x8000000224F691C0, (uint64_t)v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(uint64_t a1, unint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v38 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v34 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v16)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    a1 = 0xD0000000000000DDLL;
    a2 = 0x8000000224F692C0;
  }
  ActivityDispatcher.getJSONObjectFromCollectorDefinitions(collectorDefinitions:)(a1, (void *)a2, &aBlock);
  swift_bridgeObjectRelease();
  if (!*((void *)&v40 + 1))
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    id v20 = objc_msgSend(self, sel_getErrorNoCollectorDefinitionsToRun);
LABEL_14:
    id v21 = v20;
    a3();

    return;
  }
  uint64_t v17 = v43;
  if (!*(void *)(v43 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000224F692A0);
  if (v19)
  {
    outlined init with copy of Any(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&aBlock);
  }
  else
  {
    long long aBlock = 0u;
    long long v40 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v40 + 1))
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.engagement);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v32 = 0;
      _os_log_impl(&dword_224EDB000, v30, v31, "Trying to run with no activity dictionaries - disregarding", v32, 2u);
      MEMORY[0x22A627DB0](v32, -1, -1);
    }

    id v20 = objc_msgSend(self, sel_getErrorNoCollectorDefinitionsToRun);
    goto LABEL_14;
  }
  uint64_t v22 = v43;
  if (!*(void *)(v43 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  type metadata accessor for OS_dispatch_queue();
  uint64_t v23 = v34;
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v15, *MEMORY[0x263F8F080], v13);
  uint64_t v33 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v13);
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v25 = v35;
  void v24[2] = v35;
  v24[3] = v22;
  v24[4] = a3;
  v24[5] = v38;
  unint64_t v41 = partial apply for closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:);
  uint64_t v42 = v24;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v40 = thunk for @escaping @callee_guaranteed () -> ();
  *((void *)&v40 + 1) = &block_descriptor_1;
  os_log_type_t v26 = _Block_copy(&aBlock);
  id v27 = v25;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v43 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v28 = (void *)v33;
  MEMORY[0x22A627280](0, v12, v9, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v10);
  swift_release();
}

void closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a3;
    *(void *)(v7 + 24) = a4;
    swift_retain();
    specialized ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(a2, (uint64_t)partial apply for closure #1 in closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:), v7);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(void *a1, char a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ReliabilityCategory();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v28[1] = a4;
    uint64_t v29 = a3;
    id v19 = a1;
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v20 = __swift_project_value_buffer(v12, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v20, v12);
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    unint64_t v31 = 0xD000000000000018;
    unint64_t v32 = 0x8000000224F69430;
    uint64_t v30 = a1;
    id v21 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v22._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    uint64_t v23 = v31;
    unint64_t v24 = v32;
    uint64_t v25 = *MEMORY[0x263F75018];
    uint64_t v26 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v11, v25, v26);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F75118], v8);
    Logger.error(_:_:)(v23, v24, (uint64_t)v11);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    id v27 = a1;
    v29(a1);
    outlined consume of Result<Int, Error>(a1, 1);
    outlined consume of Result<Int, Error>(a1, 1);
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v12, (uint64_t)static Logger.engagement);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl(&dword_224EDB000, v16, v17, "DispatchSerially success", v18, 2u);
      MEMORY[0x22A627DB0](v18, -1, -1);
    }

    a3(0);
  }
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 48);
  if (one-time initialization token for defaultParameters != -1) {
    swift_once();
  }
  specialized _dictionaryUpCast<A, B, C, D>(_:)(static Constants.defaultParameters);
  v17[0] = v5;
  v17[1] = v6;
  v17[2] = v7;
  v17[3] = v8;
  v17[4] = v9;
  v17[5] = v10;
  char v18 = v11;
  if (specialized ActivityDispatcher.adaptActivityCollectionParameter(collectionDefinition:)(v17)) {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for PostSiriEngagementMetricsCollector();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v12);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  uint64_t v15 = *(void (**)(uint64_t (*)(void *), uint64_t))(*(void *)v13 + 88);
  swift_retain();
  v15(partial apply for closure #1 in ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:), v14);
  swift_release();
  return swift_release();
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = &demangling cache variable for type metadata for [String];
  uint64_t v11 = MEMORY[0x263F8EE58] + 8;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          outlined consume of [String : [String]].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    unint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(v10);
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      os_log_type_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *os_log_type_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      char v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
      unint64_t result = (unint64_t)outlined init with take of Any(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v27 = (uint64_t *)(v2[6] + 16 * result);
    *id v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t closure #1 in ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:)(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ReliabilityCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v25[1] = a3;
    char v26 = a2;
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v14 = __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
    unint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    unint64_t v28 = 0xD000000000000027;
    unint64_t v29 = 0x8000000224F693D0;
    id v27 = a1;
    id v15 = a1;
    __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for Error?);
    v16._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = v28;
    unint64_t v18 = v29;
    uint64_t v19 = *MEMORY[0x263F75030];
    uint64_t v20 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v9, v19, v20);
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F75118], v6);
    Logger.error(_:_:)(v17, v18, (uint64_t)v9);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    a2 = v26;
    v26(a1);
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    int64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v23 = 0;
    _os_log_impl(&dword_224EDB000, v21, v22, "Engagement processing success", v23, 2u);
    MEMORY[0x22A627DB0](v23, -1, -1);
  }

  return ((uint64_t (*)(void))a2)(0);
}

uint64_t specialized ActivityDispatcher.getCollectorClassObjectFromString(collectorID:)(uint64_t a1, void *a2)
{
  long long v38 = a2;
  uint64_t v39 = a1;
  uint64_t v37 = type metadata accessor for ReliabilityCategory();
  uint64_t v2 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AbstractActivityCollector();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v11 = objc_msgSend(v10, sel_infoDictionary);
  if (!v11)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    goto LABEL_11;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v13 + 16)
    || (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C646E75424643, 0xEC000000656D614ELL), (v15 & 1) == 0))
  {
    long long v41 = 0u;
    long long v42 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(void *)(v13 + 56) + 32 * v14, (uint64_t)&v41);
  swift_bridgeObjectRelease();
  if (!*((void *)&v42 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v41);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    unint64_t v18 = v38;
    goto LABEL_13;
  }
  long long v41 = v40;
  v16._uint64_t countAndFlagsBits = 46;
  v16._int64_t object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  unint64_t v18 = v38;
  v17._uint64_t countAndFlagsBits = v39;
  v17._int64_t object = v38;
  String.append(_:)(v17);
  uint64_t v19 = (void *)MEMORY[0x22A626F60](v41, *((void *)&v41 + 1));
  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(v10, sel_classNamed_, v19);

  if (v20)
  {
    swift_getObjCClassMetadata();
    uint64_t v21 = swift_dynamicCastMetatype();
    if (v21)
    {
      uint64_t v22 = v21;

      return v22;
    }
  }
LABEL_13:
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v23 = __swift_project_value_buffer(v5, (uint64_t)static Logger.engagement);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v23, v5);
  *(void *)&long long v41 = 0;
  *((void *)&v41 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&long long v41 = v39;
  *((void *)&v41 + 1) = v18;
  v24._int64_t object = (void *)0x8000000224F694A0;
  v24._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v24);
  id v25 = objc_msgSend(v10, sel_description);
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v28 = v27;

  v29._uint64_t countAndFlagsBits = v26;
  v29._int64_t object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  unint64_t v31 = *((void *)&v41 + 1);
  uint64_t v30 = v41;
  uint64_t v32 = *MEMORY[0x263F75040];
  uint64_t v33 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v4, v32, v33);
  uint64_t v34 = v37;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F75118], v37);
  Logger.error(_:_:)(v30, v31, (uint64_t)v4);
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v34);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return 0;
}

uint64_t specialized ActivityDispatcher.createCollectorFromParameters(parameters:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ReliabilityCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16)
    || (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000224F69450), (v11 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v35), (swift_dynamicCast() & 1) == 0))
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v18 = __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, v6);
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    uint64_t v35 = 0xD000000000000026;
    unint64_t v36 = 0x8000000224F69470;
    v19._uint64_t countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 32;
    v20._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    uint64_t v21 = v35;
    unint64_t v22 = v36;
    uint64_t v23 = *MEMORY[0x263F75040];
    uint64_t v24 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v5, v23, v24);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F75118], v2);
    Logger.error(_:_:)(v21, v22, (uint64_t)v5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  uint64_t v13 = v33;
  unint64_t v12 = (unint64_t)v34;
  uint64_t v14 = specialized ActivityDispatcher.getCollectorClassObjectFromString(collectorID:)(v33, v34);
  if (!v14)
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v35 = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v30 = Dictionary.description.getter();
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_224EDB000, v26, v27, "Failed to construct collector: %s with parameters: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22A627DB0](v29, -1, -1);
      MEMORY[0x22A627DB0](v28, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  char v15 = *(uint64_t (**)(uint64_t))(v14 + 80);
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = v15(v16);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

void partial apply for closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)()
{
  closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t specialized ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  Swift::String v64 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v62 = objc_msgSend(self, sel_getExecQ);
  uint64_t v63 = swift_allocObject();
  *(void *)(v63 + 16) = MEMORY[0x263F8EE78];
  dispatch_group_t v55 = dispatch_group_create();
  uint64_t v61 = *(void *)(a1 + 16);
  if (v61)
  {
    uint64_t v48 = a2;
    uint64_t v49 = a3;
    uint64_t v59 = &v68;
    uint64_t v51 = v7;
    unint64_t v58 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v50 = v11;
    uint64_t v57 = (void (**)(char *, uint64_t))(v11 + 8);
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    *(void *)&long long v14 = 136315138;
    long long v53 = v14;
    uint64_t v52 = MEMORY[0x263F8EE58] + 8;
    uint64_t v54 = v6;
    uint64_t v60 = a1;
    do
    {
      uint64_t v23 = *(void *)(a1 + 8 * v13 + 32);
      uint64_t v24 = one-time initialization token for engagement;
      swift_bridgeObjectRetain();
      if (v24 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.engagement);
      swift_bridgeObjectRetain_n();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t aBlock = v29;
        *(_DWORD *)uint64_t v28 = v53;
        swift_bridgeObjectRetain();
        uint64_t v56 = v13;
        uint64_t v30 = v10;
        unint64_t v31 = v9;
        uint64_t v32 = Dictionary.description.getter();
        unint64_t v34 = v33;
        swift_bridgeObjectRelease();
        uint64_t v35 = v32;
        uint64_t v9 = v31;
        uint64_t v10 = v30;
        *(void *)(v28 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, &aBlock);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_224EDB000, v26, v27, "Creating collector with %s", (uint8_t *)v28, 0xCu);
        uint64_t v13 = v56;
        swift_arrayDestroy();
        uint64_t v36 = v29;
        uint64_t v6 = v54;
        MEMORY[0x22A627DB0](v36, -1, -1);
        MEMORY[0x22A627DB0](v28, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v37 = specialized ActivityDispatcher.createCollectorFromParameters(parameters:)(v23);
      if (v37)
      {
        uint64_t v15 = v37;
        dispatch_group_t v16 = v55;
        dispatch_group_enter(v55);
        uint64_t v17 = (void *)swift_allocObject();
        Swift::String v19 = v62;
        uint64_t v18 = v63;
        v17[2] = v15;
        v17[3] = v19;
        v17[4] = v18;
        v17[5] = v23;
        uint64_t v17[6] = v16;
        uint64_t v70 = partial apply for closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:);
        uint64_t v71 = v17;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v67 = 1107296256;
        char v68 = thunk for @escaping @callee_guaranteed () -> ();
        uint64_t v69 = &block_descriptor_37;
        Swift::String v20 = _Block_copy(&aBlock);
        swift_retain();
        v19;
        swift_retain();
        uint64_t v21 = v16;
        unint64_t v22 = v64;
        static DispatchQoS.unspecified.getter();
        uint64_t v65 = MEMORY[0x263F8EE78];
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x22A627280](0, v22, v9, v20);
        _Block_release(v20);
        swift_release();
        (*v58)(v9, v6);
        (*v57)(v22, v10);
      }
      else
      {
        static DispatchWorkItemFlags.barrier.getter();
        uint64_t v38 = swift_allocObject();
        *(void *)(v38 + 16) = v63;
        *(void *)(v38 + 24) = v23;
        uint64_t v70 = partial apply for closure #2 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:);
        uint64_t v71 = (void *)v38;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v67 = 1107296256;
        char v68 = thunk for @escaping @callee_guaranteed () -> ();
        uint64_t v69 = &block_descriptor_25;
        uint64_t v39 = _Block_copy(&aBlock);
        swift_retain();
        long long v40 = v64;
        static DispatchQoS.unspecified.getter();
        MEMORY[0x22A627280](0, v40, v9, v39);
        _Block_release(v39);
        (*v57)(v40, v10);
        (*v58)(v9, v6);
      }
      swift_release();
      ++v13;
      a1 = v60;
    }
    while (v61 != v13);
    swift_bridgeObjectRelease();
    uint64_t v7 = v51;
    uint64_t v11 = v50;
    a3 = v49;
    a2 = v48;
  }
  long long v41 = (void *)swift_allocObject();
  v41[2] = v63;
  v41[3] = a2;
  v41[4] = a3;
  uint64_t v70 = partial apply for closure #3 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:);
  uint64_t v71 = v41;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v67 = 1107296256;
  char v68 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v69 = &block_descriptor_31;
  long long v42 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  uint64_t v43 = v64;
  static DispatchQoS.unspecified.getter();
  uint64_t v65 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v44 = v62;
  dispatch_group_t v45 = v55;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v42);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v43, v10);
  swift_release();
  return swift_release();
}

void specialized ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(uint64_t a1, unint64_t a2, void *a3, void (**a4)(void, void))
{
  uint64_t v38 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v37 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    a1 = 0xD0000000000000DDLL;
    a2 = 0x8000000224F692C0;
  }
  _Block_copy(a4);
  ActivityDispatcher.getJSONObjectFromCollectorDefinitions(collectorDefinitions:)(a1, (void *)a2, &aBlock);
  swift_bridgeObjectRelease();
  if (!*((void *)&v43 + 1))
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    id v21 = objc_msgSend(self, sel_getErrorNoCollectorDefinitionsToRun);
LABEL_14:
    id v22 = v21;
    uint64_t v23 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a4)[2](a4, v23);
    swift_release();

    return;
  }
  uint64_t v18 = v46;
  if (!*(void *)(v46 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000224F692A0);
  if (v20)
  {
    outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v19, (uint64_t)&aBlock);
  }
  else
  {
    long long aBlock = 0u;
    long long v43 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v43 + 1))
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.engagement);
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_224EDB000, v33, v34, "Trying to run with no activity dictionaries - disregarding", v35, 2u);
      MEMORY[0x22A627DB0](v35, -1, -1);
    }

    id v21 = objc_msgSend(self, sel_getErrorNoCollectorDefinitionsToRun);
    goto LABEL_14;
  }
  uint64_t v24 = v46;
  if (!*(void *)(v46 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  type metadata accessor for OS_dispatch_queue();
  uint64_t v25 = v37;
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v15, *MEMORY[0x263F8F080], v13);
  uint64_t v26 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v13);
  os_log_type_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v38;
  v27[2] = v38;
  v27[3] = v24;
  v27[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ();
  v27[5] = v16;
  uint64_t v44 = closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)partial apply;
  dispatch_group_t v45 = v27;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v43 = thunk for @escaping @callee_guaranteed () -> ();
  *((void *)&v43 + 1) = &block_descriptor_13;
  uint64_t v29 = _Block_copy(&aBlock);
  id v30 = v28;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v46 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v31 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A627280](0, v12, v9, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v31);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v10);
  swift_release();
  swift_release();
}

unint64_t specialized ActivityDispatcher.adaptActivityCollectionParameter(collectionDefinition:)(uint64_t *a1)
{
  unint64_t v1 = a1[4];
  if (v1 < 2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3)
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_23;
  }
  uint64_t v21 = a1[1];
  uint64_t v22 = *a1;
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[2];
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  uint64_t v5 = (unsigned __int8 *)(v1 + 32);
  do
  {
    int v6 = *v5++;
    unint64_t v7 = 0xE600000000000000;
    uint64_t v8 = 0x495569726953;
    switch(v6)
    {
      case 1:
        unint64_t v7 = 0xED00006E6F697475;
        uint64_t v8 = 0x6365784569726953;
        break;
      case 2:
        unint64_t v7 = 0xEA0000000000676ELL;
        uint64_t v8 = 0x6979616C50776F4ELL;
        break;
      case 3:
        unint64_t v7 = 0xE900000000000074;
        uint64_t v8 = 0x6E65746E49707041;
        break;
      case 4:
        uint64_t v8 = 0x636E75614C707041;
        unint64_t v7 = 0xE900000000000068;
        break;
      case 5:
        unint64_t v7 = 0xE500000000000000;
        uint64_t v8 = 0x6D72616C41;
        break;
      default:
        break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    }
    unint64_t v10 = v4[2];
    unint64_t v9 = v4[3];
    if (v10 >= v9 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v4);
    }
    v4[2] = v10 + 1;
    uint64_t v11 = &v4[2 * v10];
    v11[4] = v8;
    v11[5] = v7;
    --v3;
  }
  while (v3);
  outlined consume of ActivityCollectionParameter?(v22, v21, v20, v19, v1);
  uint64_t v12 = *(void *)(v1 + 16);
  if (!v12)
  {
LABEL_23:
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
  uint64_t v13 = 0;
  while (1)
  {
    uint64_t v14 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (!*(unsigned char *)(v1 + 32 + v13)) {
      goto LABEL_27;
    }
    ++v13;
    if (v14 == v12) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_29:
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
LABEL_24:
  unint64_t v16 = v4[2];
  unint64_t v15 = v4[3];
  if (v16 >= v15 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v4);
  }
  v4[2] = v16 + 1;
  uint64_t v17 = &v4[2 * v16];
  v17[4] = 0x495569726953;
  v17[5] = 0xE600000000000000;
LABEL_27:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F64E30;
  *(void *)(inited + 32) = 0x614E6D6165727473;
  *(void *)(inited + 40) = 0xEB0000000073656DLL;
  *(void *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)(inited + 48) = v4;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t partial apply for closure #1 in ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:)(void *a1)
{
  return closure #1 in ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:)(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_224F4E780()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t objectdestroyTm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t outlined consume of ActivityCollectionParameter?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_224F4E828()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(void *a1, char a2)
{
  closure #1 in closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(a1, a2 & 1, *(void (**)(void *))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_224F4E86C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #2 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)()
{
  return closure #1 in closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_224F4E8C4()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #3 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)()
{
  closure #3 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(*(void *)(v0 + 16), *(void (**)(id, uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)()
{
  return closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t objectdestroy_33Tm()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(void *a1)
{
  closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(NSObject **)(v1 + 48));
}

uint64_t objectdestroy_21Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void outlined consume of Result<Int, Error>(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t StreamType.name.getter()
{
  uint64_t result = 0x495569726953;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6365784569726953;
      break;
    case 2:
      uint64_t result = 0x6979616C50776F4ELL;
      break;
    case 3:
      uint64_t result = 0x6E65746E49707041;
      break;
    case 4:
      uint64_t result = 0x636E75614C707041;
      break;
    case 5:
      uint64_t result = 0x6D72616C41;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ActivityCollectionParameter.startTime.getter()
{
  return *(void *)v0;
}

uint64_t ActivityCollectionParameter.startTime.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*ActivityCollectionParameter.startTime.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t ActivityCollectionParameter.endTime.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ActivityCollectionParameter.endTime.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ActivityCollectionParameter.endTime.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t ActivityCollectionParameter.streams.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActivityCollectionParameter.streams.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ActivityCollectionParameter.streams.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t ActivityCollectionParameter.timeWindowForCollection.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ActivityCollectionParameter.timeWindowForCollection.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*ActivityCollectionParameter.timeWindowForCollection.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t ActivityCollectionParameter.init(collectionType:_:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 1;
  return a1();
}

unint64_t CollectionType.name.getter()
{
  return 0xD000000000000012;
}

uint64_t static CollectionType.== infix(_:_:)()
{
  return 1;
}

void CollectionType.hash(into:)()
{
}

Swift::Int CollectionType.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CollectionType()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CollectionType()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CollectionType()
{
  return Hasher._finalize()();
}

BOOL static StreamType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void StreamType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int StreamType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CollectionType and conformance CollectionType()
{
  unint64_t result = lazy protocol witness table cache variable for type CollectionType and conformance CollectionType;
  if (!lazy protocol witness table cache variable for type CollectionType and conformance CollectionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionType and conformance CollectionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamType and conformance StreamType()
{
  unint64_t result = lazy protocol witness table cache variable for type StreamType and conformance StreamType;
  if (!lazy protocol witness table cache variable for type StreamType and conformance StreamType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamType and conformance StreamType);
  }
  return result;
}

uint64_t destroy for ActivityCollectionParameter()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ActivityCollectionParameter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActivityCollectionParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v6;
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ActivityCollectionParameter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivityCollectionParameter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivityCollectionParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityCollectionParameter()
{
  return &type metadata for ActivityCollectionParameter;
}

uint64_t getEnumTagSinglePayload for CollectionType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CollectionType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x224F4F1D4);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for CollectionType()
{
  return 0;
}

ValueMetadata *type metadata accessor for CollectionType()
{
  return &type metadata for CollectionType;
}

unsigned char *storeEnumTagSinglePayload for StreamType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x224F4F2E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamType()
{
  return &type metadata for StreamType;
}

uint64_t CalendarEventSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

void one-time initialization function for kCalendarActivityApprovedKeys()
{
  kCalendarActivityApprovedKeys._uint64_t rawValue = &outlined read-only object #0 of one-time initialization function for kCalendarActivityApprovedKeys;
}

Swift::OpaquePointer *kCalendarActivityApprovedKeys.unsafeMutableAddressor()
{
  if (one-time initialization token for kCalendarActivityApprovedKeys != -1) {
    swift_once();
  }
  return &kCalendarActivityApprovedKeys;
}

Swift::Int *kCalendarRecurrenceIndex.unsafeMutableAddressor()
{
  return &kCalendarRecurrenceIndex;
}

Swift::String *kCalendarSignalWillUpdateVerb.unsafeMutableAddressor()
{
  return &kCalendarSignalWillUpdateVerb;
}

Swift::String *kCalendarSignalDidUpdateVerb.unsafeMutableAddressor()
{
  return &kCalendarSignalDidUpdateVerb;
}

Swift::String *kCalendarSignalUpdateAction.unsafeMutableAddressor()
{
  return &kCalendarSignalUpdateAction;
}

void CalendarEventSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v46 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = (void *)MEMORY[0x22A6277A0](v12);
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v50);
  if (v2)
  {
    return;
  }
  *(void *)&long long v48 = a2;
  id v55 = (id)v50;
  id v49 = objc_msgSend((id)v50, sel_intent);
  id v16 = objc_msgSend(v49, sel_domain);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  if (v17 == 0x7261646E656C6143 && v19 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {

      return;
    }
  }
  id v21 = objc_msgSend(v49, sel_verb);
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  id v25 = objc_msgSend(a1, sel_absoluteTimestamp);
  uint64_t v47 = v24;
  if (v25)
  {
    uint64_t v26 = v25;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v14, 0, 1, v27);
  }
  else
  {
    uint64_t v28 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v14, 1, 1, v28);
  }
  uint64_t v29 = v48;
  id v30 = objc_msgSend(v55, sel_dateInterval);
  if (v30)
  {
    uint64_t v31 = v30;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = type metadata accessor for DateInterval();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v8, 0, 1, v32);
  }
  else
  {
    uint64_t v32 = type metadata accessor for DateInterval();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v8, 1, 1, v32);
  }
  outlined init with take of DateInterval?((uint64_t)v8, (uint64_t)v10);
  type metadata accessor for DateInterval();
  double v33 = 0.0;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v10, 1, v32))
  {
    DateInterval.duration.getter();
    double v33 = v34;
  }
  outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for DateInterval?);
  type metadata accessor for Utils();
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v14, v29, (uint64_t)&v50, v33);
  outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for Date?);
  long long v48 = v50;
  uint64_t v35 = v51;
  uint64_t v36 = v52;
  uint64_t v37 = v53;
  char v38 = v54;
  id v39 = v49;
  id v40 = objc_msgSend(v49, sel_domain);
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;

  type metadata accessor for Signal();
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = v48;
  *(void *)(v44 + 32) = v35;
  *(void *)(v44 + 40) = v36;
  *(void *)(v44 + 48) = v37;
  *(unsigned char *)(v44 + 56) = v38;
  *(void *)(v44 + 64) = v41;
  *(void *)(v44 + 72) = v43;
  uint64_t v45 = v47;
  *(void *)(v44 + 80) = v22;
  *(void *)(v44 + 88) = v45;
  *(unsigned char *)(v44 + 96) = 1;
  *(void *)(v44 + 104) = MEMORY[0x263F8EE80];
}

uint64_t CalendarEventSignalFactory.init()()
{
  return v0;
}

uint64_t CalendarEventSignalFactory.deinit()
{
  return v0;
}

uint64_t CalendarEventSignalFactory.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for CalendarEventSignalFactory()
{
  return self;
}

uint64_t UISessionSignalBuilder.__allocating_init(siriUISession:index:collector:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  uint64_t v10 = type metadata accessor for SiriUISession(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  *(void *)(v8 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x263F8EE78];
  uint64_t v12 = (_OWORD *)(v8 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  v12[1] = 0u;
  void v12[2] = 0u;
  *uint64_t v12 = 0u;
  outlined init with take of SiriUISession(a1, (uint64_t)v7);
  v11((uint64_t)v7, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of SiriUISession?((uint64_t)v7, v9);
  swift_endAccess();
  *(void *)(v8 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a3;
  return v8;
}

uint64_t SiriUISession.init(startDate:endDate:postEndDate:sessionID:uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15 = type metadata accessor for Date();
  id v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32);
  v16(a8, a1, v15);
  uint64_t v17 = (int *)type metadata accessor for SiriUISession(0);
  v16(a8 + v17[5], a2, v15);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(a8 + v17[6], a3, v15);
  uint64_t v19 = (void *)(a8 + v17[7]);
  *uint64_t v19 = a4;
  v19[1] = a5;
  char v20 = (void *)(a8 + v17[8]);
  *char v20 = a6;
  v20[1] = a7;
  return result;
}

uint64_t UISessionSignalBuilder.__allocating_init(collector:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  uint64_t v4 = type metadata accessor for SiriUISession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x263F8EE78];
  uint64_t v5 = (_OWORD *)(v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  v5[1] = 0u;
  uint64_t v5[2] = 0u;
  *uint64_t v5 = 0u;
  *(void *)(v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a1;
  return v2;
}

uint64_t SiriUISession.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t SiriUISession.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SiriUISession(0) + 20);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t SiriUISession.endDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SiriUISession(0) + 20);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*SiriUISession.endDate.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t SiriUISession.postEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SiriUISession(0) + 24);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t SiriUISession.postEndDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SiriUISession(0) + 24);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*SiriUISession.postEndDate.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t SiriUISession.sessionID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SiriUISession(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriUISession.uuid.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SiriUISession(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for UISessionSignalBuilder.siriUISession : UISessionSignalBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SiriUISession?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 120))(v6);
}

uint64_t UISessionSignalBuilder.siriUISession.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  swift_beginAccess();
  return outlined init with copy of SiriUISession?(v3, a1);
}

uint64_t UISessionSignalBuilder.siriUISession.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  swift_beginAccess();
  outlined assign with take of SiriUISession?(a1, v3);
  return swift_endAccess();
}

uint64_t (*UISessionSignalBuilder.siriUISession.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t UISessionSignalBuilder.siriExecutionTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UISessionSignalBuilder.siriExecutionTasks.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*UISessionSignalBuilder.siriExecutionTasks.modify())()
{
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for UISessionSignalBuilder.postSiriDataStream : UISessionSignalBuilder(uint64_t a1, uint64_t a2)
{
  outlined init with take of PSEBiomeEventsSource?(a1, (uint64_t)v5);
  uint64_t v3 = *(uint64_t (**)(void *))(**(void **)a2 + 168);
  outlined retain of PSEBiomeEventsSource?(v5, (void (*)(void, void, void, void, void, void))outlined copy of PSEBiomeEventsSource?);
  return v3(v5);
}

uint64_t UISessionSignalBuilder.postSiriDataStream.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v8 = v3[5];
  uint64_t result = outlined copy of PSEBiomeEventsSource?(v4);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v8;
  return result;
}

void *UISessionSignalBuilder.postSiriDataStream.setter(void *a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  swift_beginAccess();
  uint64_t v4 = *v3;
  outlined init with take of PSEBiomeEventsSource?((uint64_t)a1, (uint64_t)v3);
  outlined retain of PSEBiomeEventsSource?(a1, (void (*)(void, void, void, void, void, void))outlined copy of PSEBiomeEventsSource?);
  outlined consume of PSEBiomeEventsSource?(v4);
  return outlined retain of PSEBiomeEventsSource?(a1, (void (*)(void, void, void, void, void, void))outlined consume of PSEBiomeEventsSource?);
}

uint64_t (*UISessionSignalBuilder.postSiriDataStream.modify())()
{
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t UISessionSignalBuilder.init(siriUISession:index:collector:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  uint64_t v10 = type metadata accessor for SiriUISession(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  *(void *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x263F8EE78];
  uint64_t v12 = (_OWORD *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  *uint64_t v12 = 0u;
  v12[1] = 0u;
  void v12[2] = 0u;
  outlined init with take of SiriUISession(a1, (uint64_t)v8);
  v11((uint64_t)v8, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of SiriUISession?((uint64_t)v8, v9);
  swift_endAccess();
  *(void *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a3;
  return v3;
}

uint64_t type metadata accessor for SiriUISession(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for SiriUISession);
}

uint64_t UISessionSignalBuilder.init(collector:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  uint64_t v4 = type metadata accessor for SiriUISession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x263F8EE78];
  uint64_t v5 = (_OWORD *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  *uint64_t v5 = 0u;
  v5[1] = 0u;
  uint64_t v5[2] = 0u;
  *(void *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a1;
  return v1;
}

uint64_t outlined copy of PSEBiomeEventsSource?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of PSEBiomeEventsSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PSEBiomeEventsSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of PSEBiomeEventsSource?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *outlined retain of PSEBiomeEventsSource?(void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t UISessionSignalBuilder.buildSignalsAndTaskFeatureSets(task:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v103 = a1;
  uint64_t v100 = type metadata accessor for ReliabilityCategory();
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v7 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for Logger();
  id v97 = *(char **)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = 0;
  uint64_t v13 = type metadata accessor for SiriUISession(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)v3 + 112))(v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for SiriUISession?);
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    return a2(&v110);
  }
  uint64_t v96 = a3;
  uint64_t v101 = (void (*)(void **))a2;
  uint64_t v19 = outlined init with take of SiriUISession((uint64_t)v12, (uint64_t)v17);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 160))(v109, v19);
  uint64_t v20 = outlined init with take of PSEBiomeEventsSource?((uint64_t)v109, (uint64_t)&v110);
  if (!v110)
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v27 = v98;
    uint64_t v28 = __swift_project_value_buffer(v98, (uint64_t)static Logger.engagement);
    uint64_t v29 = (uint64_t)v97;
    (*((void (**)(char *, uint64_t, uint64_t))v97 + 2))(v9, v28, v27);
    uint64_t v106 = 0;
    unint64_t v107 = 0xE000000000000000;
    _StringGuts.grow(_:)(123);
    v30._uint64_t countAndFlagsBits = 0xD000000000000078;
    v30._int64_t object = (void *)0x8000000224F69500;
    String.append(_:)(v30);
    uint64_t v31 = (uint64_t *)&v17[*(int *)(v13 + 32)];
    uint64_t v32 = *v31;
    double v33 = (void *)v31[1];
    swift_bridgeObjectRetain();
    v34._uint64_t countAndFlagsBits = v32;
    v34._int64_t object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 46;
    v35._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    uint64_t v36 = (uint64_t)v106;
    unint64_t v37 = v107;
    uint64_t v38 = *MEMORY[0x263F75048];
    uint64_t v39 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(v7, v38, v39);
    uint64_t v40 = v99;
    uint64_t v41 = v100;
    (*(void (**)(char *, void, uint64_t))(v99 + 104))(v7, *MEMORY[0x263F75118], v100);
    Logger.error(_:_:)(v36, v37, (uint64_t)v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v41);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v27);
    unint64_t v107 = 0;
    uint64_t v106 = 0;
    uint64_t v108 = 0;
    v101(&v106);
    return _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v17, type metadata accessor for SiriUISession);
  }
  uint64_t v95 = v3;
  uint64_t v99 = v110;
  uint64_t v21 = v112;
  uint64_t v100 = v111;
  int64_t v22 = v114;
  uint64_t v98 = v113;
  uint64_t v23 = v115;
  unint64_t v105 = MEMORY[0x263F8EE78];
  uint64_t v104 = MEMORY[0x263F8EE78];
  uint64_t v24 = v103;
  id v25 = *(uint64_t (**)(uint64_t))(*(void *)v103 + 248);
  if (v25(v20) == 0xD000000000000014 && v26 == 0x8000000224F67DE0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v42)
  {
LABEL_11:
    if (*(void *)(v23 + 16))
    {
      type metadata accessor for AppIntentTranscriptSignalFactory();
      swift_allocObject();
      AppIntentTranscriptSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v23, (uint64_t)v17, &v106);
      swift_release();
      uint64_t v43 = v101;
LABEL_13:
      unint64_t v44 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v44);
      uint64_t v45 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v94 = v21;
  int64_t v92 = v22;
  uint64_t v116 = v100;
  uint64_t v46 = *(void *)(v100 + 16);
  uint64_t v93 = v23;
  if (v46)
  {
    id v97 = v17;
    uint64_t v47 = *(void *)(v95 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector);
    uint64_t v106 = (void *)MEMORY[0x263F8EE78];
    uint64_t v48 = v47;
    swift_retain();
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v116);
    specialized ContiguousArray.reserveCapacity(_:)();
    id v49 = (void **)(v100 + 32);
    long long v50 = (void **)(v100 + 32);
    uint64_t v51 = v46;
    do
    {
      uint64_t v52 = *v50;
      v50 += 2;
      id v53 = v52;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v51;
    }
    while (v51);
    uint64_t v54 = (uint64_t)v106;
    uint64_t v55 = outlined release of [ExtendedBMAppIntent]((uint64_t)&v116);
    uint64_t v56 = v25(v55);
    uint64_t v57 = v102;
    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v48 + 280))(v54, v56, v58);
    if (v57)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v102 = 0;
      uint64_t v17 = v97;
      uint64_t v24 = v103;
    }
    else
    {
      uint64_t v60 = v59;
      uint64_t v102 = 0;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v17 = v97;
      uint64_t v24 = v103;
      uint64_t v23 = v93;
      if (!v60) {
        goto LABEL_24;
      }
      uint64_t v106 = (void *)MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      do
      {
        uint64_t v61 = *v49;
        v49 += 2;
        id v62 = v61;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v46;
      }
      while (v46);
      uint64_t v63 = (uint64_t)v106;
      outlined release of [ExtendedBMAppIntent]((uint64_t)&v116);
      (*(void (**)(void **__return_ptr, uint64_t, char *))(*(void *)v60 + 96))(&v106, v63, v17);
      swift_release();
      unint64_t v64 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v64);
      uint64_t v65 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    uint64_t v23 = v93;
  }
LABEL_24:
  uint64_t v21 = v94;
  if (*(void *)(v94 + 16))
  {
    type metadata accessor for ExtendedAlarmSignalFactory();
    swift_allocObject();
    ExtendedAlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v21, (uint64_t)v17, &v106);
    swift_release();
    unint64_t v66 = (unint64_t)v106;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v66);
    uint64_t v67 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int64_t v22 = v92;
  if (*(void *)(v92 + 16))
  {
    type metadata accessor for HomeKitAccessoryControlSignalFactory();
    swift_allocObject();
    HomeKitAccessoryControlSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v22, (uint64_t)v17, &v106);
    swift_release();
    unint64_t v68 = (unint64_t)v106;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v68);
    uint64_t v69 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v117 = v99;
  if (*(void *)(v99 + 16) && ((*(uint64_t (**)(uint64_t))(*(void *)v95 + 288))(v24) & 1) != 0)
  {
    type metadata accessor for NowPlayingSignalFactory();
    swift_allocObject();
    uint64_t v70 = NowPlayingSignalFactory.init()();
    uint64_t v71 = v99;
    uint64_t v72 = *(void *)(v99 + 16);
    uint64_t v73 = MEMORY[0x263F8EE78];
    char v74 = v101;
    if (v72)
    {
      id v97 = v17;
      uint64_t v106 = (void *)MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      Swift::Double_optional v75 = (void **)(v71 + 32);
      do
      {
        Swift::Double_optional v76 = *v75;
        v75 += 2;
        id v77 = v76;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v72;
      }
      while (v72);
      uint64_t v73 = (uint64_t)v106;
      outlined release of [ExtendedBMAppIntent]((uint64_t)&v117);
      uint64_t v17 = v97;
      uint64_t v21 = v94;
    }
    uint64_t v43 = v74;
    (*(void (**)(void **__return_ptr, uint64_t, char *))(*(void *)v70 + 144))(&v106, v73, v17);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v23 = v93;
    goto LABEL_13;
  }
LABEL_35:
  uint64_t v43 = v101;
LABEL_36:
  uint64_t v78 = v98;
  uint64_t v118 = v98;
  uint64_t v79 = *(void *)(v98 + 16);
  if (v79)
  {
    id v97 = v17;
    type metadata accessor for AppLaunchSignalFactory();
    uint64_t v80 = swift_allocObject();
    *(_OWORD *)(v80 + 16) = xmmword_224F65410;
    *(void *)(v80 + 32) = 0xD00000000000002BLL;
    *(void *)(v80 + 40) = 0x8000000224F68410;
    *(void *)(v80 + 48) = 0xD000000000000031;
    *(void *)(v80 + 56) = 0x8000000224F68440;
    *(void *)(v80 + 64) = 0xD00000000000002DLL;
    *(void *)(v80 + 72) = 0x8000000224F68480;
    uint64_t v106 = (void *)MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    unsigned int v81 = (void **)(v78 + 32);
    do
    {
      unint64_t v82 = *v81;
      v81 += 2;
      id v83 = v82;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v79;
    }
    while (v79);
    uint64_t v84 = v106;
    uint64_t v119 = v99;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v119);
    uint64_t v120 = v100;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v120);
    uint64_t v121 = v21;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v121);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v118);
    int64_t v122 = v22;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v122);
    uint64_t v123 = v23;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v123);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v118);
    uint64_t v17 = v97;
    AppLaunchSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v84, (uint64_t)v97, &v106);
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v85 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v85);
    uint64_t v86 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v86);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v101;
  }
  else
  {
    uint64_t v119 = v99;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v119);
    uint64_t v120 = v100;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v120);
    uint64_t v121 = v21;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v121);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v118);
    int64_t v122 = v22;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v122);
    uint64_t v123 = v23;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v123);
  }
  unint64_t v87 = v105;
  if ((v105 & 0x8000000000000000) != 0 || (v105 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v88 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v87);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v88 = v105 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
  }
  uint64_t v106 = (void *)v88;
  uint64_t v89 = v102;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v106);
  if (!v89)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v90 = (uint64_t)v106;
    uint64_t v106 = (void *)v24;
    unint64_t v107 = v90;
    uint64_t v108 = v104;
    swift_retain();
    v43(&v106);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v17, type metadata accessor for SiriUISession);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x22A627410](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))type metadata accessor for Signal, &lazy protocol witness table cache variable for type [Signal] and conformance [A], &demangling cache variable for type metadata for [Signal], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for ProtoTaskEngagementFeatureSet() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)(uint64_t (*a1)(char *, char *, uint64_t), uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v96 = a3;
  id v97 = a2;
  uint64_t v95 = a1;
  uint64_t Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  MEMORY[0x270FA5388](Configuration);
  uint64_t v94 = (char *)v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v85 = (char *)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v84 = (char *)v76 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v86 = (char *)v76 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  int64_t v92 = (char *)v76 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v91 = (char *)v76 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  BOOL v20 = (char *)v76 - v19;
  MEMORY[0x270FA5388](v18);
  int64_t v22 = (char *)v76 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v23 - 8);
  id v25 = (char *)v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for SiriUISession(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  Swift::String v30 = (char *)v76 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)v3 + 112))(v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    outlined destroy of Any?((uint64_t)v25, &demangling cache variable for type metadata for SiriUISession?);
    return v97(v3);
  }
  outlined init with take of SiriUISession((uint64_t)v25, (uint64_t)v30);
  uint64_t v89 = v7;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v32(v22, v30, v6);
  uint64_t v33 = *(int *)(v26 + 24);
  Swift::String v34 = v32;
  id v83 = &v30[v33];
  uint64_t v88 = v6;
  uint64_t v35 = ((uint64_t (*)(char *))v32)(v20);
  unint64_t v87 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 136);
  unint64_t v36 = v87(v35);
  uint64_t v90 = v22;
  if (v36 >> 62) {
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v38 = (unint64_t)v95;
  uint64_t v39 = swift_bridgeObjectRelease();
  if (v37 < 2) {
    goto LABEL_29;
  }
  uint64_t v40 = v87(v39);
  uint64_t v80 = v30;
  unsigned int v81 = v32;
  unint64_t v82 = v20;
  if ((v40 & 0xC000000000000001) == 0)
  {
    uint64_t v41 = v90;
    if ((v38 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) > v38)
    {
      uint64_t v42 = *(void *)(v40 + 8 * v38 + 32);
      swift_retain();
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v42 = MEMORY[0x22A627400](v38, v40);
  uint64_t v41 = v90;
LABEL_10:
  uint64_t v43 = swift_bridgeObjectRelease();
  unint64_t v44 = v91;
  (*(void (**)(uint64_t))(*(void *)v42 + 320))(v43);
  uint64_t v46 = v88;
  uint64_t v45 = v89;
  uint64_t v78 = *(void (**)(char *, uint64_t))(v89 + 8);
  uint64_t v79 = v89 + 8;
  v78(v41, v88);
  Swift::String v30 = (char *)(v45 + 32);
  uint64_t v47 = v41;
  uint64_t v41 = (char *)v46;
  uint64_t v95 = *(uint64_t (**)(char *, char *, uint64_t))(v45 + 32);
  uint64_t v48 = v95(v47, v44, v46);
  id v49 = *(uint64_t (**)(uint64_t))(*(void *)v42 + 344);
  uint64_t v91 = (char *)(*(void *)v42 + 344);
  id v77 = v49;
  uint64_t v50 = v49(v48);
  unint64_t v51 = v87(v50);
  if (!(v51 >> 62))
  {
    uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_12;
  }
LABEL_35:
  uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
LABEL_12:
  BOOL v20 = v82;
  uint64_t v53 = swift_bridgeObjectRelease();
  BOOL v54 = __OFADD__(v38, 1);
  uint64_t v55 = v38 + 1;
  if (v54)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v52 != v55)
  {
    unint64_t v58 = v87(v53);
    if (!(v58 >> 62))
    {
      uint64_t v59 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_17;
    }
LABEL_37:
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
LABEL_17:
    uint64_t v60 = swift_bridgeObjectRelease();
    if (v55 >= v59)
    {
      v78(v20, (uint64_t)v41);
      swift_release();
      uint64_t v56 = v92;
      Swift::String v34 = v81;
      goto LABEL_27;
    }
    uint64_t result = v87(v60);
    v76[1] = v30;
    if ((result & 0xC000000000000001) == 0)
    {
      if (v55 < 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v55 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v61 = *(void *)(result + 8 * v55 + 32);
        swift_retain();
LABEL_22:
        uint64_t v62 = swift_bridgeObjectRelease();
        uint64_t v63 = v84;
        uint64_t v64 = v77(v62);
        uint64_t v65 = v85;
        (*(void (**)(uint64_t))(*(void *)v61 + 320))(v64);
        lazy protocol witness table accessor for type Date and conformance Date();
        if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
          unint64_t v66 = v65;
        }
        else {
          unint64_t v66 = v63;
        }
        uint64_t v67 = v86;
        unint64_t v68 = v81;
        v81(v86, v66, (uint64_t)v41);
        swift_release();
        Swift::String v34 = v68;
        swift_release();
        uint64_t v69 = (void (*)(char *, char *))v78;
        v78(v65, (uint64_t)v41);
        v69(v63, v41);
        uint64_t v56 = v92;
        v69(v92, v41);
        v69(v20, v41);
        uint64_t v70 = (void (*)(char *, char *, char *))v95;
        v95(v56, v67, (uint64_t)v41);
        goto LABEL_28;
      }
      __break(1u);
      return result;
    }
    uint64_t v61 = MEMORY[0x22A627400](v55, result);
    goto LABEL_22;
  }
  swift_release();
  uint64_t v56 = v92;
  uint64_t v57 = (void (*)(char *, char *))v78;
  v78(v92, (uint64_t)v41);
  v57(v20, v41);
  Swift::String v34 = v81;
  v81(v56, v83, (uint64_t)v41);
LABEL_27:
  uint64_t v70 = (void (*)(char *, char *, char *))v95;
LABEL_28:
  v70(v20, v56, v41);
  Swift::String v30 = v80;
LABEL_29:
  uint64_t v71 = (uint64_t)v94;
  uint64_t v72 = v90;
  uint64_t v73 = v88;
  v34(v94, v90, v88);
  v34((char *)(v71 + *(int *)(Configuration + 20)), v20, v73);
  char v74 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(void **)(v4 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector)
                                                                                          + 304);
  swift_retain();
  swift_retain();
  v74(v71, partial apply for closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:), v4);
  swift_release();
  swift_release();
  v97(v4);
  _s18PostSiriEngagement0B9UISessionVWOhTm_0(v71, (uint64_t (*)(void))type metadata accessor for PSEBiomeFetchConfiguration);
  Swift::Double_optional v75 = *(void (**)(char *, uint64_t))(v89 + 8);
  v75(v20, v73);
  v75(v72, v73);
  return _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v30, type metadata accessor for SiriUISession);
}

uint64_t UISessionSignalBuilder.fetchDataStreams(taskIndex:endDate:)(unint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2;
  uint64_t Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  MEMORY[0x270FA5388](Configuration);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v44 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v43 = (char *)&v41 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v45 = (char *)&v41 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v41 - v16;
  uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 136);
  uint64_t v19 = v18(v15);
  uint64_t v48 = v6;
  if ((v19 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      uint64_t v6 = *(char **)(v19 + 8 * a1 + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v6 = (char *)MEMORY[0x22A627400](a1, v19);
LABEL_5:
  uint64_t v47 = Configuration;
  uint64_t v20 = swift_bridgeObjectRelease();
  uint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 344);
  uint64_t v41 = *(void *)v6 + 344;
  uint64_t v42 = v21;
  uint64_t v22 = v21(v20);
  unint64_t v23 = v18(v22);
  if (!(v23 >> 62))
  {
    uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_7;
  }
LABEL_25:
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
LABEL_7:
  uint64_t v25 = swift_bridgeObjectRelease();
  BOOL v26 = __OFADD__(a1, 1);
  uint64_t v27 = a1 + 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    if (v24 == v27)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);
      uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v17, v46, v7);
LABEL_21:
      uint64_t v39 = (uint64_t)v48;
      (*(void (**)(uint64_t))(*(void *)v6 + 320))(v28);
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v39 + *(int *)(v47 + 20), v17, v7);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(void **)(v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector)
                                                                                              + 304);
      swift_retain();
      swift_retain();
      v40(v39, partial apply for closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:), v2);
      swift_release();
      swift_release();
      swift_release();
      _s18PostSiriEngagement0B9UISessionVWOhTm_0(v39, (uint64_t (*)(void))type metadata accessor for PSEBiomeFetchConfiguration);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v17, v7);
    }
    unint64_t v29 = v18(v25);
    if (!(v29 >> 62))
    {
      uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_12;
    }
  }
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
LABEL_12:
  uint64_t v28 = swift_bridgeObjectRelease();
  if (v27 >= v30) {
    goto LABEL_21;
  }
  uint64_t result = v18(v28);
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t v32 = MEMORY[0x22A627400](v27, result);
    goto LABEL_17;
  }
  if (v27 < 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v27 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v32 = *(void *)(result + 8 * v27 + 32);
    swift_retain();
LABEL_17:
    uint64_t v33 = swift_bridgeObjectRelease();
    Swift::String v34 = v43;
    uint64_t v35 = v42(v33);
    unint64_t v36 = v44;
    (*(void (**)(uint64_t))(*(void *)v32 + 320))(v35);
    lazy protocol witness table accessor for type Date and conformance Date();
    if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v34;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v45, v37, v7);
    swift_release();
    unint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
    v38(v36, v7);
    v38(v34, v7);
    v38(v17, v7);
    uint64_t v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v17, v45, v7);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of PSEBiomeEventsSource?(a2, (uint64_t)v18);
  uint64_t v5 = v18[0];
  uint64_t v6 = v18[2];
  uint64_t v7 = v18[3];
  uint64_t v9 = v18[4];
  uint64_t v8 = v18[5];
  outlined init with take of PSEBiomeEventsSource?(a2, (uint64_t)&v19);
  if (v19)
  {
    uint64_t v21 = v20;
    v22[0] = v20;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v22, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v21);
    uint64_t v10 = v22[0];
    v22[0] = v6;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v22, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_bridgeObjectRelease();
    uint64_t v11 = v22[0];
    v22[0] = v7;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v22, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_bridgeObjectRelease();
    uint64_t v12 = v22[0];
    v22[0] = v5;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v22, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_bridgeObjectRelease();
    uint64_t v13 = v22[0];
    v22[0] = v9;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v22, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_bridgeObjectRelease();
    uint64_t v14 = v22[0];
    v22[0] = v8;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v22, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_bridgeObjectRelease();
    uint64_t v15 = v22[0];
  }
  else
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    uint64_t v14 = MEMORY[0x263F8EE78];
    uint64_t v13 = MEMORY[0x263F8EE78];
    uint64_t v12 = MEMORY[0x263F8EE78];
    uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  v22[0] = v13;
  v22[1] = v10;
  v22[2] = v11;
  v22[3] = v12;
  v22[4] = v14;
  v22[5] = v15;
  uint64_t v16 = *(void (**)(uint64_t *))(*(void *)a3 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t UISessionSignalBuilder.buildSiriExecutionTasks(nextUISession:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SiriUISession(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)v1 + 112))(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for SiriUISession?);
    return MEMORY[0x263F8EE78];
  }
  outlined init with take of SiriUISession((uint64_t)v6, (uint64_t)v11);
  unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 264))(a1);
  unint64_t v13 = v12;
  if (v12 >> 62)
  {
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_12;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_12;
  }
  type metadata accessor for SiriExecutionTaskFactory();
  swift_allocObject();
  unint64_t v14 = SiriExecutionTaskFactory.processBiomeEventsToTask(siriExecutionEvents:)(v13);
  swift_bridgeObjectRelease();
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_release();
LABEL_12:
    swift_bridgeObjectRelease();
    _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v11, type metadata accessor for SiriUISession);
    return MEMORY[0x263F8EE78];
  }
LABEL_7:
  uint64_t v15 = (uint64_t *)&v11[*(int *)(v7 + 32)];
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  swift_bridgeObjectRetain();
  uint64_t v18 = SiriExecutionTaskFactory.loadTaskEntities(steps:siriUISessionId:)(v14, v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(v18);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v19);
  swift_release();
  _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v11, type metadata accessor for SiriUISession);
  return v20;
}

uint64_t UISessionSignalBuilder.buildSiriExecutionTasks(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = specialized static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(a1, a2);
  unint64_t v11 = v10;
  if (v10 >> 62)
  {
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_10;
    }
  }
  else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_10;
  }
  type metadata accessor for SiriExecutionTaskFactory();
  swift_allocObject();
  unint64_t v12 = SiriExecutionTaskFactory.processBiomeEventsToTask(siriExecutionEvents:)(v11);
  swift_bridgeObjectRelease();
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    swift_release();
LABEL_10:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
LABEL_5:
  UUID.init()();
  uint64_t v13 = UUID.uuidString.getter();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v16 = SiriExecutionTaskFactory.loadTaskEntities(steps:siriUISessionId:)(v12, v13, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 144))(v16);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 136))(v17);
  swift_release();
  return v18;
}

uint64_t UISessionSignalBuilder.fetchSiriExecutionEvents(nextUISession:)(uint64_t a1)
{
  uint64_t Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  MEMORY[0x270FA5388](Configuration);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SiriUISession(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)v1 + 112))(v11);
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v14((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for SiriUISession?);
    return MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v26 = Configuration;
    outlined init with take of SiriUISession((uint64_t)v8, (uint64_t)v13);
    uint64_t v16 = *(void (**)(char *, uint64_t))(**(void **)(v1
                                                               + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector)
                                                 + 296);
    swift_retain();
    v16(v13, a1);
    swift_release();
    uint64_t v17 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 128))(v27);
    uint64_t v19 = v18;
    if (v14(v18, 1, v9))
    {
      v17(v27, 0);
      uint64_t v20 = v26;
    }
    else
    {
      uint64_t v20 = v26;
      uint64_t v21 = &v5[*(int *)(v26 + 20)];
      uint64_t v22 = v19 + *(int *)(v9 + 24);
      uint64_t v23 = type metadata accessor for Date();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 24))(v22, v21, v23);
      v17(v27, 0);
    }
    uint64_t v15 = specialized static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)((uint64_t)v5, (uint64_t)&v5[*(int *)(v20 + 20)]);
    _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PSEBiomeFetchConfiguration);
    _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v13, type metadata accessor for SiriUISession);
  }
  return v15;
}

uint64_t UISessionSignalBuilder.buildTranscriptTasks(nextUISession:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for SiriUISession(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t))(*(void *)v1 + 112))(v8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for SiriUISession?);
    return MEMORY[0x263F8EE78];
  }
  outlined init with take of SiriUISession((uint64_t)v5, (uint64_t)v10);
  unint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 280))(a1);
  unint64_t v12 = v11;
  if (v11 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_5;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.engagement);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_224EDB000, v18, v19, "No Assistant/Siri Transcript event found from IntelligenceFlowTranscriptDatastream", v20, 2u);
      MEMORY[0x22A627DB0](v20, -1, -1);
    }

    _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v10, type metadata accessor for SiriUISession);
    return MEMORY[0x263F8EE78];
  }
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_7;
  }
LABEL_5:
  type metadata accessor for TranscriptSignalFactory();
  swift_initStackObject();
  uint64_t v13 = (uint64_t *)&v10[*(int *)(v6 + 28)];
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  swift_bridgeObjectRetain();
  uint64_t v16 = TranscriptSignalFactory.buildTranscriptTasks(siriUISessionId:bmEvents:)(v14, v15, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v10, type metadata accessor for SiriUISession);
  return v16;
}

uint64_t UISessionSignalBuilder.fetchSiriTranscriptEvents(nextUISession:)(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  MEMORY[0x270FA5388](Configuration);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SiriUISession(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)v1 + 112))(v13);
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v16((uint64_t)v10, 1, v11) == 1)
  {
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for SiriUISession?);
    return MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v30 = Configuration;
    outlined init with take of SiriUISession((uint64_t)v10, (uint64_t)v15);
    uint64_t v18 = *(void (**)(char *, uint64_t))(**(void **)(v1
                                                               + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector)
                                                 + 296);
    swift_retain();
    v18(v15, v31);
    swift_release();
    os_log_type_t v19 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 128))(v32);
    uint64_t v21 = v20;
    if (v16(v20, 1, v11))
    {
      v19(v32, 0);
      uint64_t v22 = v30;
    }
    else
    {
      uint64_t v22 = v30;
      uint64_t v23 = &v7[*(int *)(v30 + 20)];
      uint64_t v24 = v21 + *(int *)(v11 + 24);
      uint64_t v25 = type metadata accessor for Date();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v24, v23, v25);
      v19(v32, 0);
    }
    type metadata accessor for PSEBiomeEventsSourceFetcher();
    uint64_t v26 = &v7[*(int *)(v22 + 20)];
    uint64_t v27 = type metadata accessor for Date();
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v4, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v4, 0, 1, v27);
    uint64_t v17 = static PSEBiomeEventsSourceFetcher.fetchTranscriptEvents(startDate:endDate:)((uint64_t)v7, (uint64_t)v4);
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for Date?);
    _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PSEBiomeFetchConfiguration);
    _s18PostSiriEngagement0B9UISessionVWOhTm_0((uint64_t)v15, type metadata accessor for SiriUISession);
  }
  return v17;
}

uint64_t UISessionSignalBuilder.isSiriMusicTask(task:)(uint64_t a1)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(*(void *)a1 + 224))();
  char v3 = specialized Sequence<>.contains(_:)(0x6C7070612E6D6F63, 0xEF636973754D2E65, v2);
  uint64_t v4 = swift_bridgeObjectRelease();
  if (v3) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void (**)(uint64_t))(*(void *)a1 + 248);
  v5(v4);
  String.lowercased()();
  swift_bridgeObjectRelease();
  String.lowercased()();
  lazy protocol witness table accessor for type String and conformance String();
  char v6 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRelease();
  if ((v6 & 1) != 0
    || (v5(v7),
        String.lowercased()(),
        swift_bridgeObjectRelease(),
        String.lowercased()(),
        char v8 = StringProtocol.contains<A>(_:)(),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v8 & 1) != 0))
  {
LABEL_4:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.engagement);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v10, v11))
    {
      uint64_t v13 = 1;
      goto LABEL_10;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_224EDB000, v10, v11, "We have a Music Siri task for the donated Now playing events.", v12, 2u);
    uint64_t v13 = 1;
  }
  else
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.engagement);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v10, v16))
    {
      uint64_t v13 = 0;
      goto LABEL_10;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_224EDB000, v10, v16, "No Music Siri task found for the donated Now playing events. Most likely a background music is playing. Drop the noise.", v12, 2u);
    uint64_t v13 = 0;
  }
  MEMORY[0x22A627DB0](v12, -1, -1);
LABEL_10:

  return v13;
}

uint64_t UISessionSignalBuilder.deinit()
{
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession, &demangling cache variable for type metadata for SiriUISession?);
  swift_bridgeObjectRelease();
  outlined consume of PSEBiomeEventsSource?(*(void *)(v0
                                                      + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream));
  swift_release();
  return v0;
}

uint64_t UISessionSignalBuilder.__deallocating_deinit()
{
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession, &demangling cache variable for type metadata for SiriUISession?);
  swift_bridgeObjectRelease();
  outlined consume of PSEBiomeEventsSource?(*(void *)(v0
                                                      + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream));
  swift_release();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>, MEMORY[0x263F06338]);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMHomeKitClientAccessory>);
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    os_log_type_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  os_log_type_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)(a1, a2, v2);
}

uint64_t _s18PostSiriEngagement0B9UISessionVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = a2(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  *a1 = v4;
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v6 = a2;
  unint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  unint64_t v25 = __src;
  uint64_t v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v18 = &v4[2 * v13];
      uint64_t v23 = (char *)v18;
      unint64_t v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v19 = (double *)(a3 - 16);
        do
        {
          unint64_t v20 = v19 + 2;
          if (*(v18 - 1) >= *(v6 - 1))
          {
            uint64_t v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18) {
              *(_OWORD *)uint64_t v19 = *((_OWORD *)v18 - 1);
            }
            uint64_t v21 = v6;
            v18 -= 2;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6) {
              *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
            }
            unint64_t v25 = v6 - 2;
            if (v21 <= v7) {
              break;
            }
          }
          v19 -= 2;
          unint64_t v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[2 * v10];
    uint64_t v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      unint64_t v15 = v4;
      while (1)
      {
        if (v6[1] >= v15[1])
        {
          uint64_t v4 = v15 + 2;
          size_t v17 = v15;
          os_log_type_t v16 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 2;
          }
        }
        else
        {
          os_log_type_t v16 = v6 + 2;
          size_t v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }
        *(_OWORD *)unint64_t v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          unint64_t v6 = v16;
          if ((unint64_t)v16 < a3) {
            continue;
          }
        }
        uint64_t v24 = v4;
        unint64_t v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, type metadata accessor for SiriUISession);
}

{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, MEMORY[0x263F74F40]);
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for Signal, &lazy protocol witness table cache variable for type [Signal] and conformance [A], &demangling cache variable for type metadata for [Signal], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for SiriExecutionStep, &lazy protocol witness table cache variable for type [SiriExecutionStep] and conformance [A], &demangling cache variable for type metadata for [SiriExecutionStep], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for SiriExecutionTask, &lazy protocol witness table cache variable for type [SiriExecutionTask] and conformance [A], &demangling cache variable for type metadata for [SiriExecutionTask], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for TranscriptTask, &lazy protocol witness table cache variable for type [TranscriptTask] and conformance [A], &demangling cache variable for type metadata for [TranscriptTask], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = lazy protocol witness table accessor for type [Signal] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMHomeKitClientAccessory>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMAppIntentInvocation>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMMediaNowPlaying>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMAppInFocus>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMClockAlarm>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMAppIntent>);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SiriUISession>, type metadata accessor for SiriUISession);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, MEMORY[0x263F74F40]);
}

uint64_t sub_224F56A14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112))();
}

uint64_t sub_224F56A5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_224F56AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_224F56AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 160))(v4);
  return outlined init with take of PSEBiomeEventsSource?((uint64_t)v4, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for SiriUISession(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    int64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *int64_t v11 = *v12;
    v11[1] = v13;
    unint64_t v14 = (uint64_t *)((char *)a1 + v10);
    uint64_t v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *unint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SiriUISession(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  v5(a1 + *(int *)(a2 + 24), v4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SiriUISession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v8);
  int64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  unint64_t v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SiriUISession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SiriUISession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for SiriUISession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  unint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *unint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriUISession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_224F57118);
}

uint64_t sub_224F57118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SiriUISession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_224F571F0);
}

uint64_t sub_224F571F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for SiriUISession()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for UISessionSignalBuilder()
{
  return type metadata accessor for UISessionSignalBuilder(0);
}

uint64_t type metadata accessor for UISessionSignalBuilder(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for UISessionSignalBuilder);
}

void type metadata completion function for UISessionSignalBuilder()
{
  type metadata accessor for SiriUISession?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for UISessionSignalBuilder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for UISessionSignalBuilder);
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriUISession.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriUISession.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriUISession.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriExecutionTasks.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriExecutionTasks.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriExecutionTasks.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.postSiriDataStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.postSiriDataStream.setter(_OWORD *a1)
{
  uint64_t v2 = *(uint64_t (**)(_OWORD *))(*(void *)v1 + 168);
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  uint64_t v5[2] = a1[2];
  return v2(v5);
}

uint64_t dispatch thunk of UISessionSignalBuilder.postSiriDataStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.__allocating_init(siriUISession:index:collector:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.__allocating_init(collector:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.buildSignalsAndTaskFeatureSets(task:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.fetchDataStreams(taskIndex:endDate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.buildSiriExecutionTasks(nextUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.buildSiriExecutionTasks(startDate:endDate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.fetchSiriExecutionEvents(nextUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.buildTranscriptTasks(nextUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.fetchSiriTranscriptEvents(nextUISession:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.isSiriMusicTask(task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

void type metadata accessor for SiriUISession?()
{
  if (!lazy cache variable for type metadata for SiriUISession?)
  {
    type metadata accessor for SiriUISession(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SiriUISession?);
    }
  }
}

uint64_t specialized UISessionSignalBuilder.buildSignalsAndTaskFeatureSets(task:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v110 = a3;
  uint64_t v112 = a1;
  uint64_t v109 = type metadata accessor for ReliabilityCategory();
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  uint64_t v7 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v107 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = 0;
  uint64_t v14 = type metadata accessor for SiriUISession(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)a2 + 112))(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for SiriUISession?);
    swift_beginAccess();
    *a4 = 0;
    return swift_release();
  }
  uint64_t v106 = a4;
  uint64_t v111 = v18;
  uint64_t v20 = outlined init with take of SiriUISession((uint64_t)v13, (uint64_t)v18);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 160))(v118, v20);
  uint64_t v21 = outlined init with take of PSEBiomeEventsSource?((uint64_t)v118, (uint64_t)v119);
  if (!v119[0])
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v29 = __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
    uint64_t v30 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v10, v29, v8);
    uint64_t v116 = 0;
    unint64_t v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(123);
    v31._uint64_t countAndFlagsBits = 0xD000000000000078;
    v31._int64_t object = (void *)0x8000000224F69500;
    String.append(_:)(v31);
    uint64_t v32 = *(int *)(v14 + 32);
    uint64_t v33 = (uint64_t)v111;
    Swift::String v34 = (uint64_t *)&v111[v32];
    uint64_t v35 = *v34;
    unint64_t v36 = (void *)v34[1];
    swift_bridgeObjectRetain();
    v37._uint64_t countAndFlagsBits = v35;
    v37._int64_t object = v36;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 46;
    v38._int64_t object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    uint64_t v39 = (uint64_t)v116;
    unint64_t v40 = v117;
    uint64_t v41 = *MEMORY[0x263F75048];
    uint64_t v42 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104))(v7, v41, v42);
    uint64_t v43 = v108;
    uint64_t v44 = v109;
    (*(void (**)(char *, void, uint64_t))(v108 + 104))(v7, *MEMORY[0x263F75118], v109);
    Logger.error(_:_:)(v39, v40, (uint64_t)v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v44);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
    uint64_t v45 = v106;
    swift_beginAccess();
    *uint64_t v45 = 0;
    swift_release();
    uint64_t v46 = v33;
    return _s18PostSiriEngagement0B9UISessionVWOhTm_0(v46, type metadata accessor for SiriUISession);
  }
  uint64_t v109 = v119[0];
  uint64_t v22 = v119[1];
  uint64_t v23 = v119[2];
  int64_t v24 = v119[4];
  uint64_t v107 = v119[3];
  uint64_t v25 = v119[5];
  unint64_t v115 = MEMORY[0x263F8EE78];
  uint64_t v114 = MEMORY[0x263F8EE78];
  uint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)v112 + 248);
  uint64_t v27 = v26(v21);
  uint64_t v108 = v25;
  if (v27 == 0xD000000000000014 && v28 == 0x8000000224F67DE0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    if (!*(void *)(v25 + 16))
    {
      id v49 = v106;
      uint64_t v48 = (uint64_t)v111;
      uint64_t v50 = v113;
      goto LABEL_15;
    }
    type metadata accessor for AppIntentTranscriptSignalFactory();
    swift_allocObject();
    uint64_t v48 = (uint64_t)v111;
    AppIntentTranscriptSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v25, (uint64_t)v111, &v116);
    swift_release();
    id v49 = v106;
    uint64_t v50 = v113;
LABEL_13:
    unint64_t v51 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v51);
    uint64_t v52 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v53 = v107;
    goto LABEL_16;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v47) {
    goto LABEL_11;
  }
  uint64_t v104 = v23;
  uint64_t v126 = v22;
  uint64_t v105 = v22;
  uint64_t v71 = *(void *)(v22 + 16);
  if (v71)
  {
    uint64_t v103 = v24;
    uint64_t v72 = *(void *)(a2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector);
    uint64_t v116 = (void *)MEMORY[0x263F8EE78];
    uint64_t v102 = v72;
    swift_retain();
    outlined retain of [ExtendedBMAppIntent]((uint64_t)&v126);
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v73 = (void **)(v105 + 32);
    char v74 = (void **)(v105 + 32);
    uint64_t v75 = v71;
    do
    {
      Swift::Double_optional v76 = *v74;
      v74 += 2;
      id v77 = v76;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v75;
    }
    while (v75);
    uint64_t v78 = (uint64_t)v116;
    uint64_t v79 = outlined release of [ExtendedBMAppIntent]((uint64_t)&v126);
    uint64_t v80 = v26(v79);
    unsigned int v81 = v113;
    uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v102 + 280))(v78, v80, v82);
    if (v81)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v113 = 0;
      int64_t v24 = v103;
    }
    else
    {
      uint64_t v84 = v83;
      uint64_t v113 = 0;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      int64_t v24 = v103;
      if (v84)
      {
        uint64_t v116 = (void *)MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        do
        {
          unint64_t v85 = *v73;
          v73 += 2;
          id v86 = v85;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v71;
        }
        while (v71);
        uint64_t v87 = (uint64_t)v116;
        outlined release of [ExtendedBMAppIntent]((uint64_t)&v126);
        (*(void (**)(void **__return_ptr, uint64_t, char *))(*(void *)v84 + 96))(&v116, v87, v111);
        swift_release();
        unint64_t v88 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v88);
        uint64_t v89 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v89);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  uint64_t v23 = v104;
  if (*(void *)(v104 + 16))
  {
    type metadata accessor for ExtendedAlarmSignalFactory();
    swift_allocObject();
    ExtendedAlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v23, (uint64_t)v111, &v116);
    swift_release();
    unint64_t v90 = (unint64_t)v116;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v90);
    uint64_t v91 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v91);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = v105;
  if (*(void *)(v24 + 16))
  {
    type metadata accessor for HomeKitAccessoryControlSignalFactory();
    swift_allocObject();
    HomeKitAccessoryControlSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v24, (uint64_t)v111, &v116);
    swift_release();
    unint64_t v92 = (unint64_t)v116;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v92);
    uint64_t v93 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v127 = v109;
  uint64_t v94 = v113;
  if (*(void *)(v109 + 16) && ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 288))(v112) & 1) != 0)
  {
    type metadata accessor for NowPlayingSignalFactory();
    swift_allocObject();
    uint64_t v103 = NowPlayingSignalFactory.init()();
    uint64_t v95 = v109;
    uint64_t v96 = *(void *)(v109 + 16);
    uint64_t v97 = MEMORY[0x263F8EE78];
    id v49 = v106;
    uint64_t v48 = (uint64_t)v111;
    if (v96)
    {
      int64_t v98 = v24;
      uint64_t v116 = (void *)MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v99 = (void **)(v95 + 32);
      do
      {
        uint64_t v100 = *v99;
        v99 += 2;
        id v101 = v100;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v96;
      }
      while (v96);
      uint64_t v97 = (uint64_t)v116;
      outlined release of [ExtendedBMAppIntent]((uint64_t)&v127);
      int64_t v24 = v98;
      uint64_t v23 = v104;
      uint64_t v48 = (uint64_t)v111;
    }
    uint64_t v50 = v94;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v103 + 144))(&v116, v97, v48);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  id v49 = v106;
  uint64_t v48 = (uint64_t)v111;
  uint64_t v53 = v107;
  uint64_t v50 = v94;
LABEL_16:
  uint64_t v120 = v53;
  uint64_t v54 = *(void *)(v53 + 16);
  if (v54)
  {
    uint64_t v113 = v50;
    int64_t v55 = v24;
    type metadata accessor for AppLaunchSignalFactory();
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_224F65410;
    *(void *)(v56 + 32) = 0xD00000000000002BLL;
    *(void *)(v56 + 40) = 0x8000000224F68410;
    *(void *)(v56 + 48) = 0xD000000000000031;
    *(void *)(v56 + 56) = 0x8000000224F68440;
    *(void *)(v56 + 64) = 0xD00000000000002DLL;
    *(void *)(v56 + 72) = 0x8000000224F68480;
    uint64_t v116 = (void *)MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v57 = (void **)(v53 + 32);
    do
    {
      unint64_t v58 = *v57;
      v57 += 2;
      id v59 = v58;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v54;
    }
    while (v54);
    uint64_t v60 = v116;
    uint64_t v121 = v109;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v121);
    uint64_t v122 = v22;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v122);
    uint64_t v123 = v23;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v123);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v120);
    int64_t v124 = v55;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v124);
    uint64_t v125 = v108;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v125);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v120);
    uint64_t v48 = (uint64_t)v111;
    AppLaunchSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v60, (uint64_t)v111, &v116);
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v61 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v61);
    uint64_t v62 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v50 = v113;
  }
  else
  {
    uint64_t v121 = v109;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v121);
    uint64_t v122 = v22;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v122);
    uint64_t v123 = v23;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v123);
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v120);
    int64_t v124 = v24;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v124);
    uint64_t v125 = v108;
    outlined release of [ExtendedBMAppIntent]((uint64_t)&v125);
  }
  unint64_t v63 = v115;
  if ((v115 & 0x8000000000000000) != 0 || (v115 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v64 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v63);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v64 = v115 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
  }
  uint64_t v116 = (void *)v64;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v116);
  if (!v50)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v65 = (uint64_t)v116;
    uint64_t v66 = v114;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PSETask>);
    uint64_t v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16) = xmmword_224F64E30;
    uint64_t v68 = v112;
    *(void *)(v67 + 32) = v112;
    *(void *)(v67 + 40) = v65;
    *(void *)(v67 + 48) = v66;
    swift_beginAccess();
    uint64_t v69 = *v49;
    uint64_t v70 = *(void (**)(uint64_t, uint64_t))(*(void *)v110 + 264);
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v70(v67, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_beginAccess();
    *id v49 = v68;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v46 = v48;
    return _s18PostSiriEngagement0B9UISessionVWOhTm_0(v46, type metadata accessor for SiriUISession);
  }
  swift_release();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type [Signal] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MapsIntentSignalFactory.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = &outlined read-only object #0 of MapsIntentSignalFactory.init();
  return result;
}

uint64_t MapsIntentSignalFactory.USER_INTERACTIONS.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MapsIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = a1;
  uint64_t v23 = MEMORY[0x263F8EE78];
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x263F8EE78];
LABEL_17:
    uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 128);
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = v15(v16);
    swift_bridgeObjectRelease();
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 136))(v14);
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v17;
    a3[1] = v18;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = v20;
  unint64_t v4 = a1;
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v8 = *(uint64_t (**)(id, uint64_t))(*(void *)v3 + 88);
  if (v6 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v19 = a3;
    unint64_t v10 = v4 & 0xC000000000000001;
    do
    {
      if (v10) {
        id v11 = (id)MEMORY[0x22A627400](v9, v4);
      }
      else {
        id v11 = *(id *)(v4 + 8 * v9 + 32);
      }
      uint64_t v12 = v11;
      if (v8(v11, a2))
      {
        uint64_t v13 = swift_retain();
        MEMORY[0x22A6270D0](v13);
        if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
        uint64_t v3 = v20;
        unint64_t v4 = a1;
      }
      else
      {
      }
      ++v9;
    }
    while (v6 != v9);
    swift_bridgeObjectRelease();
    uint64_t v14 = v23;
    a3 = v19;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t MapsIntentSignalFactory.transformSignalsToFeatures(signals:)(unint64_t a1)
{
  uint64_t v105 = type metadata accessor for ProtoTaskFeatureSet();
  uint64_t v104 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v103 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for ProtoNavigationFollowupType();
  uint64_t v110 = *(void *)(v131 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v131);
  uint64_t v102 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  id v130 = (char *)&v100 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v127 = (char *)&v100 - v8;
  uint64_t v141 = type metadata accessor for ProtoLocationEntitySignal();
  uint64_t v147 = *(char **)(v141 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v141);
  uint64_t v126 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v144 = (char *)&v100 - v11;
  uint64_t v129 = type metadata accessor for ProtoNavigationUserFollowupContext();
  uint64_t v109 = *(void *)(v129 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v129);
  uint64_t v128 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v140 = (char *)&v100 - v14;
  uint64_t v139 = type metadata accessor for ProtoNavigationFeatures();
  id v146 = *(uint64_t (**)(uint64_t))(v139 - 8);
  MEMORY[0x270FA5388](v139);
  uint64_t v133 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for ProtoNavigationTaskFeatureSet();
  uint64_t v134 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v112 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ProtoTaskEngagementType();
  uint64_t v18 = *(char **)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v107 = *(void *)(v108 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v108);
  uint64_t v106 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v142 = (char *)&v100 - v23;
  uint64_t v24 = type metadata accessor for ReliabilityCategory();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  unint64_t v27 = (unint64_t)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v28 = a1 >> 62;
  uint64_t v135 = a1;
  if (a1 >> 62) {
    goto LABEL_99;
  }
  uint64_t v29 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  if (!v29)
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.engagement);
    uint64_t v34 = *MEMORY[0x263F750B0];
    uint64_t v35 = type metadata accessor for MapsEventDataIssues();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v27, v34, v35);
    (*(void (**)(unint64_t, void, uint64_t))(v25 + 104))(v27, *MEMORY[0x263F750D0], v24);
    Logger.debug(_:_:)(0xD000000000000015, 0x8000000224F66900, v27);
    (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v27, v24);
    return MEMORY[0x263F8EE78];
  }
  uint64_t v145 = (uint64_t)v1;
  uint64_t v24 = v134;
  uint64_t v30 = v142;
  ProtoTaskEngagementFeatureSet.init()();
  (*((void (**)(char *, void, uint64_t))v18 + 13))(v20, *MEMORY[0x263F74F80], v17);
  ProtoTaskEngagementFeatureSet.engagementType.setter();
  if (v28)
  {
    unint64_t v28 = v135;
    if (v135 < 0) {
      uint64_t v20 = (char *)v135;
    }
    else {
      uint64_t v20 = (char *)(v135 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v31 = result;
  }
  else
  {
    unint64_t v28 = v135;
    uint64_t v31 = *(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  unint64_t v36 = (unint64_t)v112;
  uint64_t v18 = v133;
  if (!v31) {
    goto LABEL_21;
  }
  if ((v28 & 0xC000000000000001) != 0)
  {
    int64_t v37 = MEMORY[0x22A627400](0, v28);
  }
  else
  {
    if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_104;
    }
    int64_t v37 = *(void *)(v28 + 32);
    swift_retain();
  }
  uint64_t v38 = swift_bridgeObjectRelease();
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v37 + 120))(&v149, v38);
  uint64_t result = swift_release();
  unint64_t v39 = v149;
  if ((~(void)v149 & 0x7FF0000000000000) != 0)
  {
    if (*(double *)&v149 <= -1.0)
    {
      __break(1u);
LABEL_101:
      uint64_t v20 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v37, 1, (unint64_t)v20);
LABEL_91:
      *((void *)v20 + 2) = v37;
      (*(void (**)(char *, char *, unint64_t))(v25 + 32))(&v20[((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v36], v18, v28);
      (*(void (**)(char *, unint64_t))(v25 + 8))(v30, v28);
      return (uint64_t)v20;
    }
    if (*(double *)&v149 < 1.84467441e19)
    {
LABEL_22:
      ProtoTaskEngagementFeatureSet.startTimestampMs.setter();
      ProtoNavigationTaskFeatureSet.init()();
      uint64_t v25 = (uint64_t)&v149;
      unint64_t v40 = (void (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
      ProtoTaskFeatureSet.navigationFeatureSet.setter();
      v40(&v149, 0);
      uint64_t v41 = (void (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
      uint64_t v42 = (void (*)(void *, void))ProtoTaskFeatureSet.navigationFeatureSet.modify();
      ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.setter();
      v42(v148, 0);
      v41(&v149, 0);
      uint64_t v20 = (char *)ProtoTaskEngagementFeatureSet.featureSet.modify();
      uint64_t v43 = (void (*)(void *, void))ProtoTaskFeatureSet.navigationFeatureSet.modify();
      uint64_t v1 = v44;
      ProtoNavigationTaskFeatureSet.isUserFollowup.setter();
      v43(v148, 0);
      ((void (*)(long long *, void))v20)(&v149, 0);
      if (v31)
      {
        uint64_t v45 = *(void **)(v145 + 16);
        uint64_t v143 = v45[2];
        unint64_t v137 = v28 & 0xC000000000000001;
        uint64_t v114 = v28 & 0xFFFFFFFFFFFFFF8;
        uint64_t v113 = (void *)(v28 + 32);
        uint64_t v123 = (void (**)(char *, char *, uint64_t))(v147 + 16);
        uint64_t v122 = (void (**)(char *, uint64_t))(v110 + 8);
        unsigned int v121 = *MEMORY[0x263F751A0];
        uint64_t v120 = (void (**)(char *, uint64_t, uint64_t))(v110 + 104);
        uint64_t v119 = (void (**)(char *, char *, uint64_t))(v110 + 16);
        unsigned int v118 = *MEMORY[0x263F751A8];
        unint64_t v117 = (void (**)(char *, char *, uint64_t))(v109 + 16);
        uint64_t v116 = (void (**)(char *, uint64_t))(v147 + 8);
        unint64_t v115 = (uint64_t (**)(char *, uint64_t))(v109 + 8);
        uint64_t v136 = (void (**)(char *, uint64_t))((char *)v146 + 8);
        swift_bridgeObjectRetain();
        unint64_t v27 = 0;
        id v101 = v45 + 9;
        uint64_t v132 = MEMORY[0x263F8EE58] + 8;
        uint64_t v125 = v31;
        uint64_t v17 = v24;
        int64_t v124 = v45;
        while (1)
        {
          if (v137)
          {
            uint64_t v20 = (char *)MEMORY[0x22A627400](v27, v28);
            BOOL v47 = __OFADD__(v27++, 1);
            if (v47) {
              goto LABEL_93;
            }
          }
          else
          {
            if (v27 >= *(void *)(v114 + 16)) {
              goto LABEL_97;
            }
            uint64_t v20 = (char *)v113[v27];
            swift_retain();
            BOOL v47 = __OFADD__(v27++, 1);
            if (v47)
            {
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
              goto LABEL_98;
            }
          }
          uint64_t v48 = ProtoNavigationFeatures.init()();
          uint64_t v1 = v20;
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v20 + 120))(&v149, v48);
          if ((~(void)v149 & 0x7FF0000000000000) == 0) {
            goto LABEL_94;
          }
          if (*(double *)&v149 <= -1.0) {
            goto LABEL_95;
          }
          if (*(double *)&v149 >= 1.84467441e19) {
            goto LABEL_96;
          }
          uint64_t v49 = ProtoNavigationFeatures.timestampInMs.setter();
          (*(void (**)(uint64_t))(*(void *)v20 + 168))(v49);
          uint64_t v50 = ProtoNavigationFeatures.navigationAction.setter();
          unint64_t v51 = *(uint64_t (**)(uint64_t))(*(void *)v20 + 216);
          uint64_t v24 = *(void *)v20 + 216;
          uint64_t v52 = v51(v50);
          if (*(void *)(v52 + 16)
            && (unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(0x79546E6F69746361, 0xEA00000000006570),
                (v54 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v52 + 56) + 32 * v53, (uint64_t)&v149);
          }
          else
          {
            long long v149 = 0u;
            long long v150 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v150 + 1)) {
            swift_dynamicCast();
          }
          else {
            outlined destroy of Any?((uint64_t)&v149, &demangling cache variable for type metadata for Any?);
          }
          uint64_t v55 = ProtoNavigationFeatures.navigationActionType.setter();
          uint64_t v56 = v51(v55);
          if (*(void *)(v56 + 16)
            && (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000),
                (v58 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v56 + 56) + 32 * v57, (uint64_t)&v149);
          }
          else
          {
            long long v149 = 0u;
            long long v150 = 0u;
          }
          swift_bridgeObjectRelease();
          id v146 = v51;
          uint64_t v147 = v20;
          uint64_t v145 = v24;
          if (*((void *)&v150 + 1)) {
            swift_dynamicCast();
          }
          else {
            outlined destroy of Any?((uint64_t)&v149, &demangling cache variable for type metadata for Any?);
          }
          ProtoNavigationFeatures.navigationSource.setter();
          swift_bridgeObjectRetain();
          uint64_t v59 = ProtoNavigationFeatures.navigationAction.getter();
          uint64_t v1 = v60;
          if (!v143) {
            goto LABEL_65;
          }
          uint64_t v20 = (char *)v59;
          if (v45[4] == v59 && (char *)v45[5] == v60 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_53:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ProtoNavigationUserFollowupContext.init()();
            unint64_t v61 = (void (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
            uint64_t v62 = (void (*)(void *, void))ProtoTaskFeatureSet.navigationFeatureSet.modify();
            ProtoNavigationTaskFeatureSet.isUserFollowup.setter();
            v62(v148, 0);
            v61(&v149, 0);
            ProtoNavigationFeatures.navigationAction.getter();
            ProtoNavigationUserFollowupContext.navigationAction.setter();
            ProtoNavigationFeatures.navigationActionType.getter();
            ProtoNavigationUserFollowupContext.navigationActionType.setter();
            uint64_t v63 = ProtoLocationEntitySignal.init()();
            uint64_t v64 = v146(v63);
            if (*(void *)(v64 + 16)
              && (unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656449696F70, 0xED00007265696669),
                  (v66 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v64 + 56) + 32 * v65, (uint64_t)&v149);
            }
            else
            {
              long long v149 = 0u;
              long long v150 = 0u;
            }
            swift_bridgeObjectRelease();
            unint64_t v138 = v27;
            if (*((void *)&v150 + 1)) {
              swift_dynamicCast();
            }
            else {
              outlined destroy of Any?((uint64_t)&v149, &demangling cache variable for type metadata for Any?);
            }
            uint64_t v67 = v144;
            ProtoLocationEntitySignal.poiIdentifier.setter();
            (*v123)(v126, v67, v141);
            uint64_t v68 = v140;
            ProtoNavigationUserFollowupContext.locationEntity.setter();
            ProtoNavigationFeatures.timestampInMs.getter();
            ProtoNavigationUserFollowupContext.timestampInMs.setter();
            uint64_t v69 = v127;
            ProtoNavigationFollowupType.init()();
            *(void *)&long long v149 = ProtoNavigationFeatures.navigationSource.getter();
            *((void *)&v149 + 1) = v70;
            v148[0] = 1936744781;
            v148[1] = 0xE400000000000000;
            lazy protocol witness table accessor for type String and conformance String();
            LOBYTE(v67) = StringProtocol.contains<A>(_:)();
            swift_bridgeObjectRelease();
            uint64_t v71 = *v122;
            uint64_t v24 = v131;
            (*v122)(v69, v131);
            if (v67) {
              uint64_t v72 = v118;
            }
            else {
              uint64_t v72 = v121;
            }
            (*v120)(v69, v72, v24);
            (*v119)(v130, v69, v24);
            ProtoNavigationUserFollowupContext.followupType.setter();
            uint64_t v73 = v129;
            (*v117)(v128, v68, v129);
            char v74 = (void (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
            uint64_t v75 = (void (*)(void *, void))ProtoTaskFeatureSet.navigationFeatureSet.modify();
            ProtoNavigationTaskFeatureSet.followupContext.setter();
            v75(v148, 0);
            v74(&v149, 0);
            v71(v69, v24);
            (*v116)(v144, v141);
            uint64_t v76 = v73;
            uint64_t v18 = v133;
            uint64_t v77 = (*v115)(v68, v76);
            unint64_t v28 = v135;
            uint64_t v17 = v134;
            uint64_t v31 = v125;
            uint64_t v45 = v124;
            unint64_t v27 = v138;
            goto LABEL_66;
          }
          unint64_t v28 = v135;
          if (v143 != 1)
          {
            if ((char *)v45[6] == v20 && (char *)v45[7] == v1
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              goto LABEL_53;
            }
            if (v143 != 2)
            {
              unint64_t v28 = (unint64_t)v101;
              uint64_t v25 = 2;
              while (1)
              {
                uint64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  break;
                }
                BOOL v81 = *(char **)(v28 - 8) == v20 && *(void *)v28 == (void)v1;
                if (v81 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_53;
                }
                v28 += 16;
                ++v25;
                if (v24 == v143) {
                  goto LABEL_84;
                }
              }
LABEL_98:
              __break(1u);
LABEL_99:
              swift_bridgeObjectRetain();
              uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_3;
            }
LABEL_84:
            swift_bridgeObjectRelease();
            uint64_t v77 = swift_bridgeObjectRelease();
            unint64_t v28 = v135;
          }
          else
          {
LABEL_65:
            swift_bridgeObjectRelease();
            uint64_t v77 = swift_bridgeObjectRelease();
          }
LABEL_66:
          uint64_t v25 = (uint64_t)v147;
          uint64_t v78 = v146(v77);
          if (*(void *)(v78 + 16)
            && (unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(0x697461676976616ELL, 0xEE00657079546E6FLL),
                (v80 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v78 + 56) + 32 * v79, (uint64_t)&v149);
          }
          else
          {
            long long v149 = 0u;
            long long v150 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v150 + 1)) {
            swift_dynamicCast();
          }
          else {
            outlined destroy of Any?((uint64_t)&v149, &demangling cache variable for type metadata for Any?);
          }
          uint64_t v1 = v18;
          ProtoNavigationFeatures.navigationType.setter();
          ProtoNavigationFeatures.navigationType.getter();
          uint64_t v20 = v46;
          swift_release();
          swift_bridgeObjectRelease();
          (*v136)(v18, v139);
          if (v27 == v31)
          {
            uint64_t v24 = v17;
            swift_bridgeObjectRelease();
            uint64_t v30 = v142;
            break;
          }
        }
      }
      uint64_t v82 = v103;
      ProtoTaskEngagementFeatureSet.featureSet.getter();
      uint64_t v83 = v112;
      ProtoTaskFeatureSet.navigationFeatureSet.getter();
      uint64_t v84 = *(void (**)(char *, uint64_t))(v104 + 8);
      uint64_t v85 = v105;
      v84(v82, v105);
      char v86 = ProtoNavigationTaskFeatureSet.isUserFollowup.getter();
      uint64_t v87 = *(void (**)(char *, uint64_t))(v24 + 8);
      v87(v83, v111);
      if (v86)
      {
        ProtoTaskEngagementFeatureSet.featureSet.getter();
        ProtoTaskFeatureSet.navigationFeatureSet.getter();
        v84(v82, v85);
        unint64_t v88 = v128;
        ProtoNavigationTaskFeatureSet.followupContext.getter();
        v87(v83, v111);
        uint64_t v89 = v130;
        ProtoNavigationUserFollowupContext.followupType.getter();
        (*(void (**)(char *, uint64_t))(v109 + 8))(v88, v129);
        uint64_t v90 = v110;
        uint64_t v91 = v102;
        uint64_t v92 = v131;
        (*(void (**)(char *, void, uint64_t))(v110 + 104))(v102, *MEMORY[0x263F751A0], v131);
        lazy protocol witness table accessor for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v93 = v149;
        uint64_t v94 = v148[0];
        uint64_t v95 = *(void (**)(char *, uint64_t))(v90 + 8);
        v95(v91, v92);
        v95(v89, v92);
        uint64_t v18 = v106;
        if (v93 == v94)
        {
          uint64_t v96 = (void (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
          uint64_t v97 = (void (*)(void *, void))ProtoTaskFeatureSet.navigationFeatureSet.modify();
          ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.setter();
          v97(v148, 0);
          v96(&v149, 0);
        }
      }
      else
      {
        int64_t v98 = (void (*)(long long *, void))ProtoTaskEngagementFeatureSet.featureSet.modify();
        uint64_t v99 = (void (*)(void *, void))ProtoTaskFeatureSet.navigationFeatureSet.modify();
        ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.setter();
        v99(v148, 0);
        v98(&v149, 0);
        uint64_t v18 = v106;
      }
      uint64_t v25 = v107;
      unint64_t v28 = v108;
      (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v18, v30, v108);
      uint64_t v20 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v36 = *((void *)v20 + 2);
      unint64_t v39 = *((void *)v20 + 3);
      int64_t v37 = v36 + 1;
      if (v36 < v39 >> 1) {
        goto LABEL_91;
      }
      goto LABEL_101;
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
LABEL_104:
  __break(1u);
  return result;
}

void MapsIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v174 = a2;
  uint64_t v3 = type metadata accessor for ReliabilityCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v172 = v3;
  uint64_t v173 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v162 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v171 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v162 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v162 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v162 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (void *)MEMORY[0x22A6277A0](v17);
  id v21 = v175;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v177);
  if (v21)
  {
    return;
  }
  id v162 = v9;
  uint64_t v163 = v6;
  uint64_t v164 = v7;
  long long v168 = a1;
  id v165 = v13;
  uint64_t v166 = v19;
  long long v167 = v15;
  uint64_t v169 = 0;
  id v170 = (id)v177;
  id v175 = objc_msgSend((id)v177, sel_intent);
  id v22 = objc_msgSend(v175, sel_domain);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if (v23 == 1936744781 && v25 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v26)
  {
LABEL_7:
    id v27 = v175;
    id v28 = objc_msgSend(v175, sel_parametersByName);
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = v168;
      if (*(void *)(v30 + 16)
        && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656D656C65, 0xE700000000000000),
            (v33 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v30 + 56) + 32 * v32, (uint64_t)&v177);
        swift_bridgeObjectRelease();
        if (*((void *)&v178 + 1))
        {
          if (swift_dynamicCast())
          {
            if (v176[0] == __PAIR128__(0xEE00535554415453, 0x5F56414E5F544547))
            {

              swift_bridgeObjectRelease();
              return;
            }
            char v159 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v159)
            {

              return;
            }
          }
LABEL_17:
          id v34 = objc_msgSend(v31, sel_absoluteTimestamp);
          if (v34)
          {
            uint64_t v35 = v34;
            uint64_t v36 = (uint64_t)v166;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v37 = type metadata accessor for Date();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 0, 1, v37);
          }
          else
          {
            uint64_t v38 = type metadata accessor for Date();
            uint64_t v36 = (uint64_t)v166;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v166, 1, 1, v38);
          }
          uint64_t v39 = (uint64_t)v167;
          uint64_t v40 = (uint64_t)v165;
          id v41 = objc_msgSend(v170, sel_dateInterval);
          if (v41)
          {
            uint64_t v42 = v41;
            static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v43 = type metadata accessor for DateInterval();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v40, 0, 1, v43);
          }
          else
          {
            uint64_t v43 = type metadata accessor for DateInterval();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v40, 1, 1, v43);
          }
          uint64_t v44 = MEMORY[0x263F8D310];
          outlined init with take of DateInterval?(v40, v39);
          type metadata accessor for DateInterval();
          double v45 = 0.0;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v39, 1, v43))
          {
            DateInterval.duration.getter();
            double v45 = v46;
          }
          outlined destroy of Any?(v39, &demangling cache variable for type metadata for DateInterval?);
          type metadata accessor for Utils();
          static Utils.deltaTBetween(eventStart:siriUISession:duration:)(v36, v174, (uint64_t)&v177, v45);
          outlined destroy of Any?(v36, &demangling cache variable for type metadata for Date?);
          long long v47 = v177;
          long long v48 = v178;
          uint64_t v49 = v179;
          char v50 = v180;
          id v51 = objc_msgSend(v27, sel_typeName);
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v54 = v53;

          *((void *)&v178 + 1) = v44;
          *(void *)&long long v177 = v52;
          *((void *)&v177 + 1) = v54;
          outlined init with take of Any(&v177, v176);
          uint64_t v55 = MEMORY[0x263F8EE80];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v181 = v55;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v176, 0x7954746E65746E69, 0xEE00656D614E6570, isUniquelyReferenced_nonNull_native);
          uint64_t v57 = v181;
          swift_bridgeObjectRelease();
          id v58 = objc_msgSend(v27, sel_parametersByName);
          if (v58)
          {
            uint64_t v59 = v58;
            uint64_t v60 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            if (*(void *)(v60 + 16)
              && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656D656C65, 0xE700000000000000),
                  (v62 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v60 + 56) + 32 * v61, (uint64_t)&v177);
            }
            else
            {
              long long v177 = 0u;
              long long v178 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v178 + 1))
            {
              uint64_t v63 = MEMORY[0x263F8D310];
              if (swift_dynamicCast())
              {
                unint64_t v65 = *((void *)&v176[0] + 1);
                uint64_t v64 = *(void *)&v176[0];
                *((void *)&v178 + 1) = v63;
                if (*((void *)&v176[0] + 1)) {
                  goto LABEL_38;
                }
                goto LABEL_37;
              }
LABEL_36:
              *((void *)&v178 + 1) = v44;
LABEL_37:
              uint64_t v64 = 0;
              unint64_t v65 = 0xE000000000000000;
LABEL_38:
              *(void *)&long long v177 = v64;
              *((void *)&v177 + 1) = v65;
              outlined init with take of Any(&v177, v176);
              char v66 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v181 = v57;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v176, 0x79546E6F69746361, 0xEA00000000006570, v66);
              uint64_t v67 = v181;
              swift_bridgeObjectRelease();
              id v68 = objc_msgSend(v27, sel_parametersByName);
              if (v68)
              {
                uint64_t v69 = v68;
                uint64_t v70 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                if (*(void *)(v70 + 16)
                  && (unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(0x697461676976616ELL, 0xEE00657079546E6FLL),
                      (v72 & 1) != 0))
                {
                  outlined init with copy of Any(*(void *)(v70 + 56) + 32 * v71, (uint64_t)&v177);
                }
                else
                {
                  long long v177 = 0u;
                  long long v178 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v178 + 1))
                {
                  uint64_t v73 = MEMORY[0x263F8D310];
                  if (swift_dynamicCast())
                  {
                    unint64_t v75 = *((void *)&v176[0] + 1);
                    uint64_t v74 = *(void *)&v176[0];
                    *((void *)&v178 + 1) = v73;
                    if (*((void *)&v176[0] + 1)) {
                      goto LABEL_51;
                    }
                    goto LABEL_50;
                  }
LABEL_49:
                  *((void *)&v178 + 1) = v44;
LABEL_50:
                  uint64_t v74 = 0;
                  unint64_t v75 = 0xE000000000000000;
LABEL_51:
                  *(void *)&long long v177 = v74;
                  *((void *)&v177 + 1) = v75;
                  outlined init with take of Any(&v177, v176);
                  char v76 = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v181 = v67;
                  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v176, 0x697461676976616ELL, 0xEE00657079546E6FLL, v76);
                  uint64_t v77 = v181;
                  swift_bridgeObjectRelease();
                  id v78 = objc_msgSend(v27, sel_parametersByName);
                  uint64_t v174 = v49;
                  if (v78)
                  {
                    unint64_t v79 = v78;
                    uint64_t v80 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                    if (*(void *)(v80 + 16)
                      && (unint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6564695F76616ELL, 0xEE00726569666974), (v82 & 1) != 0))
                    {
                      outlined init with copy of Any(*(void *)(v80 + 56) + 32 * v81, (uint64_t)&v177);
                    }
                    else
                    {
                      long long v177 = 0u;
                      long long v178 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((void *)&v178 + 1))
                    {
                      uint64_t v83 = MEMORY[0x263F8D310];
                      if (swift_dynamicCast())
                      {
                        unint64_t v85 = *((void *)&v176[0] + 1);
                        uint64_t v84 = *(void *)&v176[0];
                        *((void *)&v178 + 1) = v83;
                        if (*((void *)&v176[0] + 1)) {
                          goto LABEL_64;
                        }
                        goto LABEL_63;
                      }
LABEL_62:
                      *((void *)&v178 + 1) = v44;
LABEL_63:
                      uint64_t v84 = 0;
                      unint64_t v85 = 0xE000000000000000;
LABEL_64:
                      *(void *)&long long v177 = v84;
                      *((void *)&v177 + 1) = v85;
                      outlined init with take of Any(&v177, v176);
                      char v86 = swift_isUniquelyReferenced_nonNull_native();
                      uint64_t v181 = v77;
                      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v176, 0xD000000000000014, 0x8000000224F69040, v86);
                      uint64_t v87 = v181;
                      swift_bridgeObjectRelease();
                      id v88 = objc_msgSend(v27, sel_parametersByName);
                      if (v88)
                      {
                        uint64_t v89 = v88;
                        uint64_t v90 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                        if (*(void *)(v90 + 16)
                          && (unint64_t v91 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6564695F696F70, 0xEE00726569666974), (v92 & 1) != 0))
                        {
                          outlined init with copy of Any(*(void *)(v90 + 56) + 32 * v91, (uint64_t)&v177);
                        }
                        else
                        {
                          long long v177 = 0u;
                          long long v178 = 0u;
                        }
                        swift_bridgeObjectRelease();
                        if (*((void *)&v178 + 1))
                        {
                          uint64_t v93 = MEMORY[0x263F8D310];
                          if (swift_dynamicCast())
                          {
                            unint64_t v95 = *((void *)&v176[0] + 1);
                            uint64_t v94 = *(void *)&v176[0];
                            *((void *)&v178 + 1) = v93;
                            if (*((void *)&v176[0] + 1)) {
                              goto LABEL_77;
                            }
                            goto LABEL_76;
                          }
LABEL_75:
                          *((void *)&v178 + 1) = v44;
LABEL_76:
                          uint64_t v94 = 0;
                          unint64_t v95 = 0xE000000000000000;
LABEL_77:
                          *(void *)&long long v177 = v94;
                          *((void *)&v177 + 1) = v95;
                          outlined init with take of Any(&v177, v176);
                          char v96 = swift_isUniquelyReferenced_nonNull_native();
                          uint64_t v181 = v87;
                          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v176, 0x746E656449696F70, 0xED00007265696669, v96);
                          uint64_t v97 = v181;
                          swift_bridgeObjectRelease();
                          id v98 = objc_msgSend(v27, sel_parametersByName);
                          if (v98)
                          {
                            uint64_t v99 = v98;
                            uint64_t v100 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                            if (*(void *)(v100 + 16)
                              && (unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000), (v102 & 1) != 0))
                            {
                              outlined init with copy of Any(*(void *)(v100 + 56) + 32 * v101, (uint64_t)&v177);
                            }
                            else
                            {
                              long long v177 = 0u;
                              long long v178 = 0u;
                            }
                            swift_bridgeObjectRelease();
                            if (*((void *)&v178 + 1))
                            {
                              uint64_t v103 = MEMORY[0x263F8D310];
                              if (swift_dynamicCast())
                              {
                                unint64_t v105 = *((void *)&v176[0] + 1);
                                uint64_t v104 = *(void *)&v176[0];
                                *((void *)&v178 + 1) = v103;
                                if (*((void *)&v176[0] + 1)) {
                                  goto LABEL_90;
                                }
                                goto LABEL_89;
                              }
LABEL_88:
                              *((void *)&v178 + 1) = v44;
LABEL_89:
                              uint64_t v104 = 0;
                              unint64_t v105 = 0xE000000000000000;
LABEL_90:
                              *(void *)&long long v177 = v104;
                              *((void *)&v177 + 1) = v105;
                              outlined init with take of Any(&v177, v176);
                              char v106 = swift_isUniquelyReferenced_nonNull_native();
                              uint64_t v181 = v97;
                              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v176, 0x656372756F73, 0xE600000000000000, v106);
                              uint64_t v107 = v181;
                              swift_bridgeObjectRelease();
                              id v108 = objc_msgSend(v27, sel_parametersByName);
                              if (v108)
                              {
                                uint64_t v109 = v108;
                                uint64_t v110 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                                if (*(void *)(v110 + 16)
                                  && (unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000), (v112 & 1) != 0))
                                {
                                  outlined init with copy of Any(*(void *)(v110 + 56) + 32 * v111, (uint64_t)&v177);
                                }
                                else
                                {
                                  long long v177 = 0u;
                                  long long v178 = 0u;
                                }
                                swift_bridgeObjectRelease();
                                if (*((void *)&v178 + 1))
                                {
                                  if (swift_dynamicCast())
                                  {
                                    unint64_t v114 = *((void *)&v176[0] + 1);
                                    uint64_t v113 = *(void *)&v176[0];
LABEL_101:
                                    *(void *)&long long v177 = v113;
                                    *((void *)&v177 + 1) = v114;
                                    *(void *)&v176[0] = 0x6C7070612E6D6F63;
                                    *((void *)&v176[0] + 1) = 0xEA00000000002E65;
                                    lazy protocol witness table accessor for type String and conformance String();
                                    char v115 = StringProtocol.contains<A>(_:)();
                                    swift_bridgeObjectRelease();
                                    *((void *)&v178 + 1) = MEMORY[0x263F8D4F8];
                                    LOBYTE(v177) = v115 & 1;
                                    outlined init with take of Any(&v177, v176);
                                    char v116 = swift_isUniquelyReferenced_nonNull_native();
                                    uint64_t v181 = v107;
                                    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v176, 0xD000000000000016, 0x8000000224F66760, v116);
                                    uint64_t v117 = v181;
                                    swift_bridgeObjectRelease();
                                    id v118 = objc_msgSend(v175, sel_verb);
                                    uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                                    uint64_t v121 = v120;

                                    if (v119 == 2003789907 && v121 == 0xE400000000000000)
                                    {
                                      swift_bridgeObjectRelease();
                                    }
                                    else
                                    {
                                      char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      swift_bridgeObjectRelease();
                                      if ((v122 & 1) == 0)
                                      {
                                        if (*((double *)&v47 + 1) >= 0.0)
                                        {
                                          id v152 = objc_msgSend(v175, sel_parametersByName);
                                          if (v152)
                                          {
                                            id v153 = v152;
                                            uint64_t v154 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                                            if (*(void *)(v154 + 16)
                                              && (unint64_t v155 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000), (v156 & 1) != 0))
                                            {
                                              outlined init with copy of Any(*(void *)(v154 + 56) + 32 * v155, (uint64_t)&v177);
                                            }
                                            else
                                            {
                                              long long v177 = 0u;
                                              long long v178 = 0u;
                                            }
                                            swift_bridgeObjectRelease();
                                            if (*((void *)&v178 + 1))
                                            {
                                              if ((swift_dynamicCast() & 1) == 0) {
                                                goto LABEL_113;
                                              }
                                              Swift::String v157 = String.lowercased()();
                                              Swift::Bool v158 = String.hasSuffix(_:)(v157);
                                              swift_bridgeObjectRelease();
                                              if (v158)
                                              {
                                                swift_bridgeObjectRelease();
                                              }
                                              else
                                              {
                                                v160._int64_t object = (void *)0x8000000224F69000;
                                                v160._uint64_t countAndFlagsBits = 0xD000000000000011;
                                                Swift::Bool v161 = String.hasSuffix(_:)(v160);
                                                swift_bridgeObjectRelease();
                                                if (!v161) {
                                                  goto LABEL_113;
                                                }
                                              }
                                              goto LABEL_111;
                                            }
                                          }
                                          else
                                          {
                                            long long v177 = 0u;
                                            long long v178 = 0u;
                                          }
                                          outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for Any?);
                                          goto LABEL_113;
                                        }
LABEL_111:
                                        *((void *)&v178 + 1) = MEMORY[0x263F8D4F8];
                                        LOBYTE(v177) = 1;
                                        goto LABEL_112;
                                      }
                                    }
                                    if (*((double *)&v47 + 1) >= 3.0)
                                    {
                                      *((void *)&v178 + 1) = MEMORY[0x263F8D4F8];
                                      LOBYTE(v177) = 0;
LABEL_112:
                                      outlined init with take of Any(&v177, v176);
                                      char v141 = swift_isUniquelyReferenced_nonNull_native();
                                      uint64_t v181 = v117;
                                      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v176, 0x42646574616E6F64, 0xED00006972695379, v141);
                                      uint64_t v117 = v181;
                                      swift_bridgeObjectRelease();
LABEL_113:
                                      id v142 = v175;
                                      id v143 = objc_msgSend(v175, sel_domain);
                                      uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                                      uint64_t v146 = v145;

                                      id v147 = objc_msgSend(v142, (SEL)&selRef_setEngagementSignal_ + 4);
                                      uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                                      uint64_t v150 = v149;

                                      type metadata accessor for Signal();
                                      uint64_t v151 = swift_allocObject();
                                      *(_OWORD *)(v151 + 16) = v47;
                                      *(_OWORD *)(v151 + 32) = v48;
                                      *(void *)(v151 + 48) = v174;
                                      *(unsigned char *)(v151 + 56) = v50;
                                      *(void *)(v151 + 64) = v144;
                                      *(void *)(v151 + 72) = v146;
                                      *(void *)(v151 + 80) = v148;
                                      *(void *)(v151 + 88) = v150;
                                      *(unsigned char *)(v151 + 96) = 1;
                                      *(void *)(v151 + 104) = v117;
                                      return;
                                    }
                                    goto LABEL_111;
                                  }
LABEL_100:
                                  uint64_t v113 = 0;
                                  unint64_t v114 = 0xE000000000000000;
                                  goto LABEL_101;
                                }
                              }
                              else
                              {
                                long long v177 = 0u;
                                long long v178 = 0u;
                              }
                              outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for Any?);
                              goto LABEL_100;
                            }
                          }
                          else
                          {
                            long long v177 = 0u;
                            long long v178 = 0u;
                          }
                          outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for Any?);
                          goto LABEL_88;
                        }
                      }
                      else
                      {
                        long long v177 = 0u;
                        long long v178 = 0u;
                      }
                      outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for Any?);
                      goto LABEL_75;
                    }
                  }
                  else
                  {
                    long long v177 = 0u;
                    long long v178 = 0u;
                  }
                  outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for Any?);
                  goto LABEL_62;
                }
              }
              else
              {
                long long v177 = 0u;
                long long v178 = 0u;
              }
              outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for Any?);
              goto LABEL_49;
            }
          }
          else
          {
            long long v177 = 0u;
            long long v178 = 0u;
          }
          outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for Any?);
          goto LABEL_36;
        }
      }
      else
      {
        long long v177 = 0u;
        long long v178 = 0u;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      long long v177 = 0u;
      long long v178 = 0u;
      uint64_t v31 = v168;
    }
    outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for Any?);
    goto LABEL_17;
  }
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v123 = v164;
  uint64_t v124 = __swift_project_value_buffer(v164, (uint64_t)static Logger.engagement);
  uint64_t v125 = v171;
  uint64_t v126 = v162;
  (*(void (**)(char *, uint64_t, uint64_t))(v171 + 16))(v162, v124, v123);
  *(void *)&long long v177 = 0;
  *((void *)&v177 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v127._uint64_t countAndFlagsBits = 0xD000000000000012;
  v127._int64_t object = (void *)0x8000000224F67470;
  String.append(_:)(v127);
  id v128 = v175;
  id v129 = objc_msgSend(v175, sel_domain);
  uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v132 = v131;

  v133._uint64_t countAndFlagsBits = v130;
  v133._int64_t object = v132;
  String.append(_:)(v133);
  swift_bridgeObjectRelease();
  v134._uint64_t countAndFlagsBits = 0xD000000000000023;
  v134._int64_t object = (void *)0x8000000224F69600;
  String.append(_:)(v134);
  long long v135 = v177;
  uint64_t v136 = *MEMORY[0x263F75148];
  uint64_t v137 = type metadata accessor for AppIntentEventDataIssues();
  uint64_t v138 = (uint64_t)v163;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v137 - 8) + 104))(v163, v136, v137);
  uint64_t v139 = v172;
  uint64_t v140 = v173;
  (*(void (**)(uint64_t, void, uint64_t))(v173 + 104))(v138, *MEMORY[0x263F750E8], v172);
  Logger.error(_:_:)(v135, *((unint64_t *)&v135 + 1), v138);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v138, v139);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v126, v164);
}

uint64_t MapsIntentSignalFactory.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = &outlined read-only object #0 of MapsIntentSignalFactory.init();
  return result;
}

uint64_t MapsIntentSignalFactory.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t MapsIntentSignalFactory.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MapsIntentSignalFactory.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 24, 7);
}

unint64_t lazy protocol witness table accessor for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType()
{
  unint64_t result = lazy protocol witness table cache variable for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType;
  if (!lazy protocol witness table cache variable for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType)
  {
    type metadata accessor for ProtoNavigationFollowupType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType);
  }
  return result;
}

uint64_t type metadata accessor for MapsIntentSignalFactory()
{
  return self;
}

uint64_t method lookup function for MapsIntentSignalFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MapsIntentSignalFactory);
}

uint64_t dispatch thunk of MapsIntentSignalFactory.transformSignalsToBiomePSE(signals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MapsIntentSignalFactory.transformSignalsToFeatures(signals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t PSEGeoSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

void PSEGeoSELFEmitter.emitPSEGeo(geoSignals:appLaunchSignals:task:)(unint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v4 = v3;
  unint64_t v187 = a2;
  uint64_t v7 = type metadata accessor for ReliabilityCategory();
  unint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v189 = (char *)&v166 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v186 = (char *)&v166 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  char v184 = (char *)&v166 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v185 = (uint64_t (*)(char *, uint64_t))((char *)&v166 - v15);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v188 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v166 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  long long v182 = (char *)&v166 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  long long v183 = (char *)&v166 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v166 - v24;
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB10]), sel_init);
  if (!v26) {
    goto LABEL_43;
  }
  id v27 = v26;
  uint64_t v179 = v19;
  uint64_t v181 = a3;
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB18]), sel_init);
  if (!v28)
  {

LABEL_43:
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.engagement);
    uint64_t v63 = *MEMORY[0x263F75020];
    uint64_t v64 = type metadata accessor for EngagementSignalCollectionError();
    uint64_t v65 = (uint64_t)v189;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 104))(v189, v63, v64);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v65, *MEMORY[0x263F75118], v7);
    Logger.debug(_:_:)(0xD000000000000031, 0x8000000224F69690, v65);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v65, v7);
    return;
  }
  uint64_t v29 = v28;
  long long v178 = (void *)v3;
  id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB48]), sel_init);
  if (!v30)
  {

    goto LABEL_43;
  }
  id v31 = v30;
  id v180 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB20]), sel_init);
  if (!v180)
  {

    goto LABEL_43;
  }
  id v177 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB40]), sel_init);
  if (!v177)
  {

    goto LABEL_43;
  }
  uint64_t v174 = v25;
  id v176 = v31;
  if (!(a1 >> 62))
  {
    uint64_t v32 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v32) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  if (!v32)
  {
LABEL_42:

    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
LABEL_8:
  uint64_t v169 = v27;
  char v33 = (char **)(a1 & 0xC000000000000001);
  uint64_t v175 = v16;
  id v173 = v29;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v34 = MEMORY[0x22A627400](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_48:
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_25;
      }
      goto LABEL_49;
    }
    uint64_t v34 = *(void *)(a1 + 32);
    swift_retain();
  }
  uint64_t v35 = swift_bridgeObjectRelease();
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v34 + 120))(&v192, v35);
  id v31 = v180;
  uint64_t v36 = (*(uint64_t (**)(id))(*(void *)v34 + 144))(objc_msgSend(v180, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v192));
  uint64_t v37 = (void *)MEMORY[0x22A626F60](v36);
  swift_bridgeObjectRelease();
  objc_msgSend(v31, sel_setDomain_, v37);

  uint64_t v38 = (*(uint64_t (**)(void))(*(void *)v34 + 168))();
  uint64_t v29 = v39;
  uint64_t v40 = (void *)MEMORY[0x22A626F60](v38);
  swift_bridgeObjectRelease();
  objc_msgSend(v31, sel_setAction_, v40);

  id v41 = *(uint64_t (**)(void))(*(void *)v34 + 216);
  uint64_t v168 = v34;
  uint64_t v42 = v41();
  if (!*(void *)(v42 + 16)
    || (unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v44 & 1) == 0))
  {
    long long v192 = 0u;
    long long v193 = 0u;
    swift_bridgeObjectRelease();
    double v45 = v178;
    unint64_t v4 = v187;
    goto LABEL_22;
  }
  outlined init with copy of Any(*(void *)(v42 + 56) + 32 * v43, (uint64_t)&v192);
  swift_bridgeObjectRelease();
  double v45 = v178;
  unint64_t v4 = v187;
  if (!*((void *)&v193 + 1))
  {
LABEL_22:
    outlined destroy of Any?((uint64_t)&v192, &demangling cache variable for type metadata for Any?);
    uint64_t v46 = 2;
    goto LABEL_23;
  }
  if (swift_dynamicCast()) {
    uint64_t v46 = v190;
  }
  else {
    uint64_t v46 = 2;
  }
LABEL_23:
  uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 104))(v46);
  objc_msgSend(v180, sel_setIsDonatedBySiri_, v47);
  if (v4 >> 62) {
    goto LABEL_48;
  }
  uint64_t v48 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v48)
  {
LABEL_25:
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v49 = MEMORY[0x22A627400](0, v4);
    }
    else
    {
      if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_108;
      }
      uint64_t v49 = *(void *)(v4 + 32);
      swift_retain();
    }
    uint64_t v50 = swift_bridgeObjectRelease();
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v49 + 120))(&v192, v50);
    uint64_t v51 = (*(uint64_t (**)(id))(*(void *)v49 + 216))(objc_msgSend(v180, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v192));
    if (*(void *)(v51 + 16)
      && (unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F66680),
          (v53 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v52, (uint64_t)&v192);
    }
    else
    {
      long long v192 = 0u;
      long long v193 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v193 + 1))
    {
      int v54 = swift_dynamicCast();
      BOOL v55 = v54 == 0;
      if (v54) {
        uint64_t v56 = v190;
      }
      else {
        uint64_t v56 = 0;
      }
      if (v55) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = v191;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v192, &demangling cache variable for type metadata for Any?);
      uint64_t v56 = 0;
      uint64_t v57 = 0;
    }
    uint64_t v29 = v178;
    uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v178 + 128))(v56, v57);
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v180;
    uint64_t v59 = (*(uint64_t (**)(id))(*(void *)v49 + 168))(objc_msgSend(v180, sel_setAppFollowup_, v58));
    id v31 = v60;
    uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 136))(v59);
    swift_bridgeObjectRelease();
    objc_msgSend((id)v4, sel_setAppLaunchReason_, v61);
    swift_release();
    goto LABEL_50;
  }
LABEL_49:
  swift_bridgeObjectRelease();
  objc_msgSend(v180, sel_setAppFollowup_, 3);
LABEL_50:
  unint64_t v187 = v8;
  uint64_t v167 = v7;
  *(void *)&long long v192 = MEMORY[0x263F8EE78];
  if (v32 < 1)
  {
    __break(1u);
    goto LABEL_105;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v32; ++i)
  {
    if (v33)
    {
      uint64_t v67 = MEMORY[0x22A627400](i, a1);
    }
    else
    {
      uint64_t v67 = *(void *)(a1 + 8 * i + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v67 + 168))() == 2003789907 && v68 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_53:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      continue;
    }
    char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v70) {
      goto LABEL_53;
    }
    swift_release();
  }
  swift_bridgeObjectRelease();
  unint64_t v4 = v192;
  *(void *)&long long v192 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  for (uint64_t j = 0; j != v32; ++j)
  {
    if (v33)
    {
      uint64_t v72 = MEMORY[0x22A627400](j, a1);
    }
    else
    {
      uint64_t v72 = *(void *)(a1 + 8 * j + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v72 + 168))() == 0x7261436563616C50 && v73 == 0xEC00000070615464)
    {
      swift_bridgeObjectRelease();
LABEL_66:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      continue;
    }
    char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v75) {
      goto LABEL_66;
    }
    swift_release();
  }
  uint64_t v76 = swift_bridgeObjectRelease();
  a1 = v192;
  uint64_t v29 = v181;
  uint64_t v77 = (uint64_t (**)(uint64_t))(*(void *)v181 + 296);
  uint64_t v171 = *v77;
  id v170 = v77;
  uint64_t v78 = v171(v76);
  int v79 = (*(unsigned __int8 (**)(uint64_t))(*(void *)v78 + 104))(v78);
  swift_release();
  BOOL v80 = v79 == 3;
  char v33 = &selRef_init;
  id v31 = v177;
  objc_msgSend(v177, sel_setIsSiriResultUseful_, v80);
  if ((v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v81 = *(void *)(v4 + 16);
    goto LABEL_80;
  }
LABEL_105:
  swift_bridgeObjectRetain();
  uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
LABEL_80:
  id v82 = v176;
  uint64_t v83 = v174;
  if (!v81)
  {
    swift_release();
    swift_release();
    id v93 = v180;
    objc_msgSend(v180, sel_setHasUserInitiatedFollowup_, 0);
    objc_msgSend(v31, sel_setFollowup_, 0);
    if (objc_msgSend(v93, sel_appFollowup) == 4)
    {
      id v94 = objc_msgSend(v31, v33[149], 0);
      uint64_t v95 = v171((uint64_t)v94);
      (*(void (**)(uint64_t))(*(void *)v95 + 112))(4);
      swift_release();
    }
    goto LABEL_123;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
LABEL_108:
    unint64_t v4 = MEMORY[0x22A627400](0, v4);
    swift_release();
    uint64_t v84 = (SEL *)&selRef_init;
LABEL_84:
    objc_msgSend(v180, sel_setHasUserInitiatedFollowup_, 1);
    id v85 = [objc_allocWithZone(MEMORY[0x263F6EB50]) *v84];
    if (!v85)
    {
      swift_release();
      goto LABEL_122;
    }
    uint64_t v32 = (uint64_t)v85;
    objc_msgSend(v85, sel_setFollowupType_, (*(uint64_t (**)(unint64_t))(*(void *)v178 + 160))(v4));
    if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0) {
      goto LABEL_110;
    }
    if (*(void *)(a1 + 16)) {
      goto LABEL_88;
    }
LABEL_111:
    uint64_t v98 = swift_release();
    uint64_t v99 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 168))(v98);
    uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)v178 + 168))(v99);
    swift_bridgeObjectRelease();
    uint64_t v101 = (*(uint64_t (**)(id))(*(void *)v4 + 216))(objc_msgSend((id)v32, sel_setMapsAction_, v100));
    if (*(void *)(v101 + 16)
      && (unint64_t v102 = specialized __RawDictionaryStorage.find<A>(_:)(0x79546E6F69746361, 0xEA00000000006570),
          (v103 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v101 + 56) + 32 * v102, (uint64_t)&v192);
    }
    else
    {
      long long v192 = 0u;
      long long v193 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v193 + 1))
    {
      if (swift_dynamicCast())
      {
        char v96 = (void *)MEMORY[0x22A626F60](v190, v191);
        swift_bridgeObjectRelease();
LABEL_120:
        objc_msgSend((id)v32, sel_setMapsActionType_, v96);
        goto LABEL_121;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v192, &demangling cache variable for type metadata for Any?);
    }
    char v96 = 0;
    goto LABEL_120;
  }
  uint64_t v84 = (SEL *)&selRef_init;
  if (*(void *)(v4 + 16))
  {
    unint64_t v4 = *(void *)(v4 + 32);
    swift_retain();
    swift_release();
    goto LABEL_84;
  }
  __break(1u);
LABEL_110:
  swift_bridgeObjectRetain();
  uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v97) {
    goto LABEL_111;
  }
LABEL_88:
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v86 = MEMORY[0x22A627400](0, a1);
    goto LABEL_91;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v86 = *(void *)(a1 + 32);
    swift_retain();
LABEL_91:
    uint64_t v87 = swift_release();
    uint64_t v88 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 168))(v87);
    uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)v178 + 168))(v88);
    swift_bridgeObjectRelease();
    uint64_t v90 = (*(uint64_t (**)(id))(*(void *)v86 + 216))(objc_msgSend((id)v32, sel_setMapsAction_, v89));
    if (*(void *)(v90 + 16)
      && (unint64_t v91 = specialized __RawDictionaryStorage.find<A>(_:)(0x79546E6F69746361, 0xEA00000000006570),
          (v92 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v90 + 56) + 32 * v91, (uint64_t)&v192);
    }
    else
    {
      long long v192 = 0u;
      long long v193 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v193 + 1))
    {
      if (swift_dynamicCast())
      {
        char v96 = (void *)MEMORY[0x22A626F60](v190, v191);
        swift_bridgeObjectRelease();
        goto LABEL_103;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v192, &demangling cache variable for type metadata for Any?);
    }
    char v96 = 0;
LABEL_103:
    objc_msgSend((id)v32, sel_setMapsActionType_, v96);
    swift_release();
LABEL_121:

    id v104 = (id)v32;
    objc_msgSend(v31, sel_setFollowup_, v104);

LABEL_122:
    swift_release();
    id v82 = v176;
    uint64_t v83 = v174;
LABEL_123:
    objc_msgSend(v82, sel_setCommonSignal_, v180);
    objc_msgSend(v82, sel_setMapsSignal_, v31);
    UUID.init()();
    id v105 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v107 = objc_msgSend(v105, sel_initWithNSUUID_, isa);

    uint64_t v108 = v188;
    uint64_t v109 = v29;
    uint64_t v111 = v188 + 8;
    uint64_t v110 = *(void (**)(char *, uint64_t))(v188 + 8);
    uint64_t v112 = v175;
    v110(v83, v175);
    id v113 = v173;
    objc_msgSend(v173, sel_setPseId_, v107);

    (*(void (**)(void))(*(void *)v109 + 152))();
    uint64_t v114 = (uint64_t)v185;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    char v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
    int v116 = v115(v114, 1, v112);
    uint64_t v172 = v111;
    if (v116 == 1)
    {
      uint64_t v117 = (uint64_t (*)(char *, uint64_t))v110;
      uint64_t v118 = outlined destroy of Any?(v114, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      uint64_t v119 = v183;
      (*(void (**)(char *, uint64_t, uint64_t))(v108 + 32))(v183, v114, v112);
      id v120 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
      Class v121 = UUID._bridgeToObjectiveC()().super.isa;
      id v122 = objc_msgSend(v120, sel_initWithNSUUID_, v121);

      objc_msgSend(v113, sel_setUiSessionId_, v122);
      uint64_t v123 = v119;
      uint64_t v117 = (uint64_t (*)(char *, uint64_t))v110;
      uint64_t v118 = ((uint64_t (*)(char *, uint64_t))v110)(v123, v112);
    }
    if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v181 + 200))(v118) + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v124 = (uint64_t)v184;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v125 = v175;
      if (v115(v124, 1, v175) == 1)
      {
        outlined destroy of Any?(v124, &demangling cache variable for type metadata for UUID?);
        goto LABEL_130;
      }
      Swift::String v133 = v182;
      (*(void (**)(char *, uint64_t, uint64_t))(v188 + 32))(v182, v124, v125);
      id v134 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
      Class v135 = UUID._bridgeToObjectiveC()().super.isa;
      id v136 = objc_msgSend(v134, sel_initWithNSUUID_, v135);

      objc_msgSend(v173, sel_setOriginalLastRequestId_, v136);
      uint64_t v132 = v117(v133, v125);
      uint64_t v126 = v167;
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_130:
      uint64_t v126 = v167;
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v127 = type metadata accessor for Logger();
      __swift_project_value_buffer(v127, (uint64_t)static Logger.engagement);
      uint64_t v128 = *MEMORY[0x263F75050];
      uint64_t v129 = type metadata accessor for EngagementSignalCollectionError();
      uint64_t v130 = (uint64_t)v189;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v129 - 8) + 104))(v189, v128, v129);
      unint64_t v131 = v187;
      (*(void (**)(uint64_t, void, uint64_t))(v187 + 104))(v130, *MEMORY[0x263F75118], v126);
      Logger.debug(_:_:)(0xD000000000000027, 0x8000000224F666C0, v130);
      uint64_t v132 = (*(uint64_t (**)(uint64_t, uint64_t))(v131 + 8))(v130, v126);
    }
    uint64_t v185 = v117;
    (*(void (**)(uint64_t))(*(void *)v181 + 176))(v132);
    uint64_t v137 = (uint64_t)v186;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v138 = v175;
    if (v115(v137, 1, v175) == 1)
    {
      outlined destroy of Any?(v137, &demangling cache variable for type metadata for UUID?);
      uint64_t v139 = v169;
      if (one-time initialization token for engagement != -1) {
        swift_once();
      }
      uint64_t v140 = type metadata accessor for Logger();
      __swift_project_value_buffer(v140, (uint64_t)static Logger.engagement);
      uint64_t v141 = *MEMORY[0x263F75038];
      uint64_t v142 = type metadata accessor for EngagementSignalCollectionError();
      uint64_t v143 = (uint64_t)v189;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v142 - 8) + 104))(v189, v141, v142);
      unint64_t v144 = v187;
      (*(void (**)(uint64_t, void, uint64_t))(v187 + 104))(v143, *MEMORY[0x263F75118], v126);
      Logger.debug(_:_:)(0xD000000000000024, 0x8000000224F666F0, v143);
      uint64_t v145 = (*(uint64_t (**)(uint64_t, uint64_t))(v144 + 8))(v143, v126);
      id v146 = v173;
      id v147 = v178;
    }
    else
    {
      uint64_t v148 = v179;
      (*(void (**)(char *, uint64_t, uint64_t))(v188 + 32))(v179, v137, v138);
      id v149 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
      Class v150 = UUID._bridgeToObjectiveC()().super.isa;
      id v151 = objc_msgSend(v149, sel_initWithNSUUID_, v150);

      id v146 = v173;
      objc_msgSend(v173, sel_setTaskId_, v151);

      uint64_t v145 = v185(v148, v138);
      uint64_t v139 = v169;
      id v147 = v178;
    }
    uint64_t v152 = v171(v145);
    uint64_t v153 = (*(uint64_t (**)(uint64_t))(*(void *)v152 + 104))(v152);
    swift_release();
    id v154 = objc_msgSend(v146, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(void *)v147 + 96))(v153));
    objc_msgSend(v146, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(void *)v147 + 112))(v154));
    objc_msgSend(v139, sel_setEventMetadata_, v146);
    id v155 = v176;
    objc_msgSend(v139, sel_setMapsSignalGenerated_, v176);
    char v156 = v139;
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v157 = type metadata accessor for Logger();
    __swift_project_value_buffer(v157, (uint64_t)static Logger.engagement);
    uint64_t v158 = *MEMORY[0x263F75080];
    uint64_t v159 = type metadata accessor for SELFPSELogged();
    uint64_t v160 = (uint64_t)v189;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v159 - 8) + 104))(v189, v158, v159);
    unint64_t v161 = v187;
    (*(void (**)(uint64_t, void, uint64_t))(v187 + 104))(v160, *MEMORY[0x263F750C8], v126);
    Logger.debug(_:_:)(0xD000000000000038, 0x8000000224F696D0, v160);
    (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v160, v126);
    id v162 = objc_msgSend(self, sel_sharedAnalytics);
    id v163 = objc_msgSend(v162, sel_defaultMessageStream);

    uint64_t v164 = v174;
    UUID.init()();
    Class v165 = UUID._bridgeToObjectiveC()().super.isa;
    v185(v164, v175);
    objc_msgSend(v163, sel_emitMessage_isolatedStreamUUID_, v156, v165);

    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t PSEGeoSELFEmitter.getFollowupType(firstShowSignal:)(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 120))(v2);
  if (*(double *)&v2[1] <= 3.0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t PSEGeoSELFEmitter.getPSEMapsAction(mapsAction:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x697461676976614ELL && a2 == 0xEA00000000006E6FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 1;
  }
  if (a1 == 0x7261436563616C50 && a2 == 0xEC00000070615464
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (a1 == 2003789907 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 3;
  }
  if (a1 == 0x694C746C75736552 && a2 == 0xED00007061547473
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 4;
  }
  if (a1 == 0x61437463656C6553 && a2 == 0xEE0079726F676574
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 5;
  }
  uint64_t v4 = 6;
  if (a1 != 0x686372616553 || a2 != 0xE600000000000000)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      return 6;
    }
    else {
      return 0;
    }
  }
  return v4;
}

uint64_t PSEGeoSELFEmitter.init()()
{
  return v0;
}

uint64_t PSEGeoSELFEmitter.deinit()
{
  return v0;
}

uint64_t PSEGeoSELFEmitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for PSEGeoSELFEmitter()
{
  return self;
}

uint64_t method lookup function for PSEGeoSELFEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEGeoSELFEmitter);
}

uint64_t dispatch thunk of PSEGeoSELFEmitter.emitPSEGeo(geoSignals:appLaunchSignals:task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PSEGeoSELFEmitter.getFollowupType(firstShowSignal:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PSEGeoSELFEmitter.getPSEMapsAction(mapsAction:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

void *Constants.timeAfterSiriForServerSubmission.unsafeMutableAddressor()
{
  return &static Constants.timeAfterSiriForServerSubmission;
}

void *Constants.pseCollectorIdKey.unsafeMutableAddressor()
{
  return &static Constants.pseCollectorIdKey;
}

uint64_t *PSEStruct.pseTriggerOrigin.unsafeMutableAddressor()
{
  return &static PSEStruct.pseTriggerOrigin;
}

const char *Constants.assistantdTrigger.unsafeMutableAddressor()
{
  return "assistantd";
}

const char *Constants.inferencedTrigger.unsafeMutableAddressor()
{
  return "inferenced";
}

void *Constants.timeWindowAfterSiriUISession.unsafeMutableAddressor()
{
  return &static Constants.timeWindowAfterSiriUISession;
}

void *Constants.quickHungUpDuration.unsafeMutableAddressor()
{
  return &static Constants.quickHungUpDuration;
}

void *Constants.mapsDonatedBySiriThreshold.unsafeMutableAddressor()
{
  return &static Constants.mapsDonatedBySiriThreshold;
}

void *Constants.shortPlayDuration.unsafeMutableAddressor()
{
  return &static Constants.shortPlayDuration;
}

void *Constants.pseBundleId.unsafeMutableAddressor()
{
  return &static Constants.pseBundleId;
}

void *Constants.maximumTimeToSearchHistorySeconds.unsafeMutableAddressor()
{
  return &static Constants.maximumTimeToSearchHistorySeconds;
}

const char *Constants.collectorBundleName.unsafeMutableAddressor()
{
  return "CFBundleName";
}

void *Constants.activityCollectorIDDictionaryKey.unsafeMutableAddressor()
{
  return &static Constants.activityCollectorIDDictionaryKey;
}

void *Constants.activityCollectorsParameterName.unsafeMutableAddressor()
{
  return &static Constants.activityCollectorsParameterName;
}

uint64_t *Constants.defaultParameters.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultParameters != -1) {
    swift_once();
  }
  return &static Constants.defaultParameters;
}

uint64_t static PSEStruct.pseTriggerOrigin.getter()
{
  swift_beginAccess();
  uint64_t v0 = static PSEStruct.pseTriggerOrigin;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static PSEStruct.pseTriggerOrigin.setter(uint64_t a1, uint64_t a2)
{
  static PSEStruct.pseTriggerOrigin = a1;
  qword_26AD6B018 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static PSEStruct.pseTriggerOrigin.modify())()
{
  return NowPlayingSignalFactory.postEndDate.modify;
}

unint64_t one-time initialization function for defaultParameters()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_224F64E30;
  *(void *)(inited + 32) = 0x614E6D6165727473;
  *(void *)(inited + 40) = 0xEB0000000073656DLL;
  *(void *)(inited + 48) = &outlined read-only object #0 of one-time initialization function for defaultParameters;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static Constants.defaultParameters = result;
  return result;
}

uint64_t static Constants.defaultParameters.getter()
{
  if (one-time initialization token for defaultParameters != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t static Constants.assistantdTrigger.getter()
{
  return 0x6E61747369737361;
}

uint64_t static Constants.inferencedTrigger.getter()
{
  return 0x636E657265666E69;
}

uint64_t static Constants.collectorBundleName.getter()
{
  return 0x656C646E75424643;
}

unint64_t static Constants.activityCollectorsParameterName.getter()
{
  return 0xD000000000000012;
}

unint64_t static Constants.activityCollectorIDDictionaryKey.getter()
{
  return 0xD000000000000013;
}

void *Constants.activityCollectorIdKey.unsafeMutableAddressor()
{
  return &static Constants.activityCollectorIdKey;
}

unint64_t static Constants.activityCollectorIdKey.getter()
{
  return 0xD000000000000013;
}

unint64_t static Constants.pseCollectorIdKey.getter()
{
  return 0xD000000000000022;
}

unint64_t static Constants.pseBundleId.getter()
{
  return 0xD000000000000021;
}

void *Constants.siriUIBeginType.unsafeMutableAddressor()
{
  return &static Constants.siriUIBeginType;
}

unint64_t static Constants.siriUIBeginType.getter()
{
  return 0xD000000000000017;
}

void *Constants.siriUIEndType.unsafeMutableAddressor()
{
  return &static Constants.siriUIEndType;
}

unint64_t static Constants.siriUIEndType.getter()
{
  return 0xD000000000000015;
}

double static Constants.timeWindowAfterSiriUISession.getter()
{
  return 60.0;
}

double static Constants.timeAfterSiriForServerSubmission.getter()
{
  return 30.0;
}

double static Constants.maximumTimeToSearchHistorySeconds.getter()
{
  return 2419200.0;
}

double static Constants.quickHungUpDuration.getter()
{
  return 2.0;
}

double static Constants.shortPlayDuration.getter()
{
  return 10.0;
}

double static Constants.mapsDonatedBySiriThreshold.getter()
{
  return 3.0;
}

ValueMetadata *type metadata accessor for PSEStruct()
{
  return &type metadata for PSEStruct;
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

uint64_t PSEAlarmSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

void PSEAlarmSELFEmitter.emitPSEAlarm(alarmSignals:appLaunchSignals:task:)(unint64_t a1, unint64_t a2, uint64_t (***a3)(void))
{
  unint64_t v157 = (unint64_t)a3;
  unint64_t v158 = a1;
  uint64_t v5 = type metadata accessor for ReliabilityCategory();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  id v154 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v153 = (char *)&v138 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v138 - v14;
  uint64_t v16 = (void *)type metadata accessor for UUID();
  uint64_t v155 = *(v16 - 1);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v152 = (char *)&v138 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v138 - v23;
  MEMORY[0x270FA5388](v22);
  char v156 = (char *)&v138 - v25;
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB10]), sel_init);
  if (!v26) {
    goto LABEL_22;
  }
  id v159 = v26;
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB18]), sel_init);
  if (!v27)
  {
    id v43 = v159;
LABEL_21:

    goto LABEL_22;
  }
  id v151 = v27;
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EAE8]), sel_init);
  if (!v28)
  {

    id v43 = v151;
    goto LABEL_21;
  }
  id v149 = v28;
  id v150 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EB20]), sel_init);
  if (!v150)
  {

    id v43 = v149;
    goto LABEL_21;
  }
  id v148 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EAE0]), sel_init);
  if (!v148)
  {

    id v43 = v150;
    goto LABEL_21;
  }
  unint64_t v144 = v158 >> 62;
  if (v158 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
    id v30 = v159;
    if (v68)
    {
LABEL_8:
      unint64_t v31 = v158;
      unint64_t v143 = v158 & 0xC000000000000001;
      id v147 = v16;
      unint64_t v146 = v3;
      uint64_t v140 = v19;
      if ((v158 & 0xC000000000000001) != 0)
      {
        uint64_t v32 = MEMORY[0x22A627400](0, v158);
      }
      else
      {
        if (!*(void *)((v158 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_52;
        }
        uint64_t v32 = *(void *)(v158 + 32);
        swift_retain();
      }
      uint64_t v33 = swift_bridgeObjectRelease();
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v32 + 120))(&v162, v33);
      id v34 = v150;
      uint64_t v35 = (*(uint64_t (**)(id))(*(void *)v32 + 144))(objc_msgSend(v150, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v162));
      uint64_t v36 = (void *)MEMORY[0x22A626F60](v35);
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_setDomain_, v36);

      uint64_t v37 = (*(uint64_t (**)(void))(*(void *)v32 + 168))();
      uint64_t v16 = (void *)MEMORY[0x22A626F60](v37);
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_setAction_, v16);

      uint64_t v38 = *(uint64_t (**)(void))(*(void *)v32 + 216);
      uint64_t v141 = v32;
      uint64_t v39 = v38();
      if (*(void *)(v39 + 16)
        && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
            (v41 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v39 + 56) + 32 * v40, (uint64_t)&v162);
        swift_bridgeObjectRelease();
        unint64_t v31 = v146;
        if (*((void *)&v163 + 1))
        {
          if (swift_dynamicCast()) {
            uint64_t v42 = v160;
          }
          else {
            uint64_t v42 = 2;
          }
LABEL_27:
          uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 104))(v42);
          objc_msgSend(v150, sel_setIsDonatedBySiri_, v47);
          if (!(a2 >> 62))
          {
            uint64_t v48 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v48)
            {
LABEL_29:
              if ((a2 & 0xC000000000000001) != 0)
              {
                uint64_t v49 = MEMORY[0x22A627400](0, a2);
              }
              else
              {
                if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
                  goto LABEL_99;
                }
                uint64_t v49 = *(void *)(a2 + 32);
                swift_retain();
              }
              uint64_t v50 = swift_bridgeObjectRelease();
              (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v49 + 120))(&v162, v50);
              uint64_t v51 = (*(uint64_t (**)(id))(*(void *)v49 + 216))(objc_msgSend(v150, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v162));
              if (*(void *)(v51 + 16))
              {
                unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000224F66680);
                unint64_t v53 = v157;
                if (v54)
                {
                  outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v52, (uint64_t)&v162);
                }
                else
                {
                  long long v162 = 0u;
                  long long v163 = 0u;
                }
              }
              else
              {
                long long v162 = 0u;
                long long v163 = 0u;
                unint64_t v53 = v157;
              }
              uint64_t v145 = v24;
              swift_bridgeObjectRelease();
              if (*((void *)&v163 + 1))
              {
                uint64_t v55 = v49;
                int v56 = swift_dynamicCast();
                uint64_t v57 = v160;
                if (!v56) {
                  uint64_t v57 = 0;
                }
                uint64_t v142 = v57;
                if (v56) {
                  uint64_t v58 = v161;
                }
                else {
                  uint64_t v58 = 0;
                }
              }
              else
              {
                uint64_t v55 = v49;
                outlined destroy of Any?((uint64_t)&v162, &demangling cache variable for type metadata for Any?);
                uint64_t v142 = 0;
                uint64_t v58 = 0;
              }
              uint64_t v59 = v53 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
              uint64_t v60 = (void *)(*(uint64_t (**)(void))(*(void *)v53 + 224))();
              if (v60[2])
              {
                uint64_t v61 = v60[5];
                uint64_t v139 = (uint64_t (*)(uint64_t))v60[4];
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v139 = 0;
                uint64_t v61 = 0;
              }
              swift_bridgeObjectRelease();
              uint64_t v62 = (*(uint64_t (**)(unsigned int (*)(uint64_t, uint64_t, void *), uint64_t, uint64_t (*)(uint64_t), uint64_t))(*(void *)v31 + 120))(v142, v58, v139, v61);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v63 = v150;
              uint64_t v64 = (*(uint64_t (**)(id))(*(void *)v55 + 168))(objc_msgSend(v150, sel_setAppFollowup_, v62));
              uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 136))(v64);
              swift_bridgeObjectRelease();
              objc_msgSend(v63, sel_setAppLaunchReason_, v65);
              id v66 = (id)swift_release();
              uint64_t v67 = (uint64_t (***)(id))v157;
              uint64_t v24 = v145;
LABEL_54:
              uint64_t v69 = *v67;
              uint64_t v145 = (char *)v59;
              v69 += 37;
              char v70 = *v69;
              uint64_t v138 = v69;
              uint64_t v71 = v70(v66);
              int v72 = (*(unsigned __int8 (**)(uint64_t))(*(void *)v71 + 104))(v71);
              swift_release();
              objc_msgSend(v148, sel_setIsSiriResultUseful_, v72 == 3);
              if (v144)
              {
                swift_bridgeObjectRetain();
                uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v74 = *(void *)((v158 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              unint64_t v75 = v146;
              uint64_t v139 = (uint64_t (*)(uint64_t))v70;
              if (v74 >= 2)
              {
                if (v143)
                {
                  uint64_t v76 = MEMORY[0x22A627400](1, v158);
                }
                else
                {
                  if (*(void *)((v158 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                  {
                    __break(1u);
                    return;
                  }
                  uint64_t v76 = *(void *)(v158 + 40);
                  swift_retain();
                }
                (*(void (**)(long long *__return_ptr))(*(void *)v76 + 120))(&v162);
                swift_release();
                double v73 = *((double *)&v162 + 1);
                if (*((double *)&v162 + 1) <= 30.0)
                {
                  if (v143)
                  {
                    uint64_t v77 = MEMORY[0x22A627400](1, v158, *((double *)&v162 + 1));
                  }
                  else
                  {
                    uint64_t v77 = *(void *)(v158 + 40);
                    swift_retain();
                  }
                  uint64_t v78 = (*(uint64_t (**)(void))(*(void *)v77 + 216))();
                  swift_release();
                  if (*(void *)(v78 + 16)
                    && (unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
                        (v80 & 1) != 0))
                  {
                    outlined init with copy of Any(*(void *)(v78 + 56) + 32 * v79, (uint64_t)&v162);
                  }
                  else
                  {
                    long long v162 = 0u;
                    long long v163 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((void *)&v163 + 1))
                  {
                    if ((swift_dynamicCast() & 1) != 0 && (v160 & 1) == 0)
                    {
                      objc_msgSend(v150, sel_setHasUserInitiatedFollowup_, 1);
                      if (v143)
                      {
                        uint64_t v81 = MEMORY[0x22A627400](1, v158);
                      }
                      else
                      {
                        uint64_t v81 = *(void *)(v158 + 40);
                        swift_retain();
                      }
                      uint64_t v137 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v75 + 160))(v141, v81);
                      swift_release();
                      objc_msgSend(v148, sel_setFollowUpType_, v137);
                      id v82 = v150;
LABEL_77:
                      id v83 = v149;
                      objc_msgSend(v149, sel_setCommonSignal_, v82);
                      objc_msgSend(v83, sel_setAlarmSignal_, v148);
                      uint64_t v84 = v156;
                      UUID.init()();
                      id v85 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                      Class isa = UUID._bridgeToObjectiveC()().super.isa;
                      id v87 = objc_msgSend(v85, sel_initWithNSUUID_, isa);

                      uint64_t v88 = v155;
                      unint64_t v89 = v155 + 8;
                      uint64_t v90 = v84;
                      unint64_t v91 = v147;
                      unint64_t v158 = *(void *)(v155 + 8);
                      ((void (*)(char *, void *))v158)(v90, v147);
                      objc_msgSend(v151, sel_setPseId_, v87);

                      (*(void (**)(void))(*(void *)v157 + 152))();
                      UUID.init(uuidString:)();
                      swift_bridgeObjectRelease();
                      char v92 = *(unsigned int (**)(uint64_t, uint64_t, void *))(v88 + 48);
                      unint64_t v143 = v88 + 48;
                      uint64_t v142 = v92;
                      unsigned int v93 = v92((uint64_t)v15, 1, v91);
                      unint64_t v144 = v89;
                      if (v93 == 1)
                      {
                        uint64_t v94 = outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
                        uint64_t v95 = v140;
                        char v96 = (uint64_t (*)(char *, void *))v158;
                      }
                      else
                      {
                        (*(void (**)(char *, char *, void *))(v88 + 32))(v24, v15, v91);
                        id v97 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                        Class v98 = UUID._bridgeToObjectiveC()().super.isa;
                        id v99 = objc_msgSend(v97, sel_initWithNSUUID_, v98);

                        objc_msgSend(v151, sel_setUiSessionId_, v99);
                        char v96 = (uint64_t (*)(char *, void *))v158;
                        uint64_t v94 = ((uint64_t (*)(char *, void *))v158)(v24, v91);
                        uint64_t v95 = v140;
                      }
                      unint64_t v100 = v157;
                      uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)v157 + 200))(v94);
                      unint64_t v102 = (unsigned int *)MEMORY[0x263F75118];
                      if (*(void *)(v101 + 16))
                      {
                        char v103 = v95;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        uint64_t v104 = (uint64_t)v153;
                        UUID.init(uuidString:)();
                        swift_bridgeObjectRelease();
                        id v105 = v147;
                        if (v142(v104, 1, v147) != 1)
                        {
                          uint64_t v110 = v152;
                          (*(void (**)(char *, uint64_t, void *))(v155 + 32))(v152, v104, v105);
                          id v111 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                          Class v112 = UUID._bridgeToObjectiveC()().super.isa;
                          id v113 = objc_msgSend(v111, sel_initWithNSUUID_, v112);

                          objc_msgSend(v151, sel_setOriginalLastRequestId_, v113);
                          uint64_t v109 = v96(v110, v105);
                          uint64_t v95 = v103;
                          goto LABEL_88;
                        }
                        outlined destroy of Any?(v104, &demangling cache variable for type metadata for UUID?);
                        uint64_t v95 = v103;
                        unint64_t v102 = (unsigned int *)MEMORY[0x263F75118];
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                      }
                      if (one-time initialization token for engagement != -1) {
                        swift_once();
                      }
                      uint64_t v106 = type metadata accessor for Logger();
                      __swift_project_value_buffer(v106, (uint64_t)static Logger.engagement);
                      uint64_t v107 = *MEMORY[0x263F75050];
                      uint64_t v108 = type metadata accessor for EngagementSignalCollectionError();
                      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v108 - 8) + 104))(v8, v107, v108);
                      (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *v102, v5);
                      Logger.debug(_:_:)(0xD000000000000027, 0x8000000224F666C0, (uint64_t)v8);
                      uint64_t v109 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_88:
                      (*(void (**)(uint64_t))(*(void *)v100 + 176))(v109);
                      uint64_t v114 = (uint64_t)v154;
                      UUID.init(uuidString:)();
                      swift_bridgeObjectRelease();
                      char v115 = v147;
                      if (v142(v114, 1, v147) != 1)
                      {
                        uint64_t v16 = &unk_26AD6B000;
                        (*(void (**)(char *, uint64_t, void *))(v155 + 32))(v95, v114, v115);
                        id v121 = objc_allocWithZone(MEMORY[0x263F6EEE0]);
                        Class v122 = UUID._bridgeToObjectiveC()().super.isa;
                        id v123 = objc_msgSend(v121, sel_initWithNSUUID_, v122);

                        id v120 = v151;
                        objc_msgSend(v151, sel_setTaskId_, v123);

                        uint64_t v119 = ((uint64_t (*)(char *, void *))v158)(v95, v115);
                        goto LABEL_92;
                      }
                      outlined destroy of Any?(v114, &demangling cache variable for type metadata for UUID?);
                      uint64_t v16 = &unk_26AD6B000;
                      if (one-time initialization token for engagement == -1)
                      {
LABEL_90:
                        uint64_t v116 = type metadata accessor for Logger();
                        __swift_project_value_buffer(v116, (uint64_t)static Logger.engagement);
                        uint64_t v117 = *MEMORY[0x263F75038];
                        uint64_t v118 = type metadata accessor for EngagementSignalCollectionError();
                        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v118 - 8) + 104))(v8, v117, v118);
                        (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F75118], v5);
                        Logger.debug(_:_:)(0xD000000000000024, 0x8000000224F666F0, (uint64_t)v8);
                        uint64_t v119 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                        char v115 = v147;
                        id v120 = v151;
LABEL_92:
                        uint64_t v124 = v139(v119);
                        uint64_t v125 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 104))(v124);
                        swift_release();
                        unint64_t v126 = v146;
                        id v127 = objc_msgSend(v120, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(void *)v146 + 96))(v125));
                        objc_msgSend(v120, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(void *)v126 + 112))(v127));
                        id v128 = v159;
                        objc_msgSend(v159, sel_setEventMetadata_, v120);
                        id v129 = v149;
                        objc_msgSend(v128, sel_setAlarmSignalGenerated_, v149);
                        if (v16[80] != -1) {
                          swift_once();
                        }
                        uint64_t v130 = type metadata accessor for Logger();
                        __swift_project_value_buffer(v130, (uint64_t)static Logger.engagement);
                        uint64_t v131 = *MEMORY[0x263F75088];
                        uint64_t v132 = type metadata accessor for SELFPSELogged();
                        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v132 - 8) + 104))(v8, v131, v132);
                        (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F750C8], v5);
                        Logger.debug(_:_:)(0xD000000000000035, 0x8000000224F697E0, (uint64_t)v8);
                        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                        id v133 = objc_msgSend(self, sel_sharedAnalytics);
                        id v134 = objc_msgSend(v133, sel_defaultMessageStream);

                        Class v135 = v156;
                        UUID.init()();
                        Class v136 = UUID._bridgeToObjectiveC()().super.isa;
                        ((void (*)(char *, void *))v158)(v135, v115);
                        objc_msgSend(v134, sel_emitMessage_isolatedStreamUUID_, v128, v136);

                        swift_release();
                        return;
                      }
LABEL_99:
                      swift_once();
                      goto LABEL_90;
                    }
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v162, &demangling cache variable for type metadata for Any?);
                  }
                }
              }
              id v82 = v150;
              objc_msgSend(v150, sel_setHasUserInitiatedFollowup_, 0, v73);
              goto LABEL_77;
            }
LABEL_53:
            swift_bridgeObjectRelease();
            id v66 = objc_msgSend(v150, sel_setAppFollowup_, 3);
            uint64_t v67 = (uint64_t (***)(id))v157;
            uint64_t v59 = v157 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
            goto LABEL_54;
          }
LABEL_52:
          swift_bridgeObjectRetain();
          if (_CocoaArrayWrapper.endIndex.getter()) {
            goto LABEL_29;
          }
          goto LABEL_53;
        }
      }
      else
      {
        long long v162 = 0u;
        long long v163 = 0u;
        swift_bridgeObjectRelease();
        unint64_t v31 = v146;
      }
      outlined destroy of Any?((uint64_t)&v162, &demangling cache variable for type metadata for Any?);
      uint64_t v42 = 2;
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v29 = *(void *)((v158 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v30 = v159;
    if (v29) {
      goto LABEL_8;
    }
  }

  swift_bridgeObjectRelease();
LABEL_22:
  if (one-time initialization token for engagement != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.engagement);
  uint64_t v45 = *MEMORY[0x263F75020];
  uint64_t v46 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 104))(v8, v45, v46);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F75118], v5);
  Logger.debug(_:_:)(0xD00000000000002ELL, 0x8000000224F697B0, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PSEAlarmSELFEmitter.getPSEAlarmFollowupAction(siriAlarm:userAlarm:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)a2 + 168);
  *(void *)&long long v40 = v4();
  *((void *)&v40 + 1) = v5;
  uint64_t v42 = 0x657461647055;
  unint64_t v43 = 0xE600000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  char v6 = StringProtocol.contains<A>(_:)();
  uint64_t v7 = swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 216))(v7);
    if (*(void *)(v8 + 16)
      && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL), (v10 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v9, (uint64_t)&v40);
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v41 + 1))
    {
      uint64_t v17 = swift_dynamicCast();
      if ((v17 & 1) == 0) {
        return 2;
      }
      uint64_t v21 = v42;
      unint64_t v20 = v43;
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(v17, v18, v19);
      if (*(void *)(v22 + 16)
        && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL),
            (v24 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v22 + 56) + 32 * v23, (uint64_t)&v40);
      }
      else
      {
        long long v40 = 0u;
        long long v41 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v41 + 1))
      {
        if (swift_dynamicCast())
        {
          uint64_t v34 = HIBYTE(v43) & 0xF;
          if ((v43 & 0x2000000000000000) == 0) {
            uint64_t v34 = v42 & 0xFFFFFFFFFFFFLL;
          }
          if (v34)
          {
            uint64_t v35 = HIBYTE(v20) & 0xF;
            if ((v20 & 0x2000000000000000) == 0) {
              uint64_t v35 = v21 & 0xFFFFFFFFFFFFLL;
            }
            if (v35)
            {
              if (v42 == v21 && v43 == v20)
              {
                swift_bridgeObjectRelease_n();
                return 1;
              }
              char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v38) {
                return 1;
              }
              return 2;
            }
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        return 2;
      }
      swift_bridgeObjectRelease();
    }
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    return 2;
  }
  *(void *)&long long v40 = ((uint64_t (*)(uint64_t))v4)(v7);
  *((void *)&v40 + 1) = v11;
  uint64_t v42 = 0x6574656C6544;
  unint64_t v43 = 0xE600000000000000;
  char v12 = StringProtocol.contains<A>(_:)();
  uint64_t v13 = swift_bridgeObjectRelease();
  if ((v12 & 1) == 0) {
    return 0;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 216))(v13);
  if (*(void *)(v14 + 16)
    && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v40);
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1)) {
    goto LABEL_53;
  }
  uint64_t v26 = swift_dynamicCast();
  if ((v26 & 1) == 0) {
    return 4;
  }
  uint64_t v30 = v42;
  unint64_t v29 = v43;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(v26, v27, v28);
  if (*(void *)(v31 + 16)
    && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL), (v33 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v31 + 56) + 32 * v32, (uint64_t)&v40);
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_53:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    return 4;
  }
  if (swift_dynamicCast())
  {
    uint64_t v36 = HIBYTE(v43) & 0xF;
    if ((v43 & 0x2000000000000000) == 0) {
      uint64_t v36 = v42 & 0xFFFFFFFFFFFFLL;
    }
    if (!v36) {
      goto LABEL_57;
    }
    uint64_t v37 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0) {
      uint64_t v37 = v30 & 0xFFFFFFFFFFFFLL;
    }
    if (v37)
    {
      if (v42 == v30 && v43 == v29)
      {
        swift_bridgeObjectRelease_n();
        return 3;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v39) {
        return 3;
      }
    }
    else
    {
LABEL_57:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 4;
}

uint64_t PSEAlarmSELFEmitter.init()()
{
  return v0;
}

uint64_t PSEAlarmSELFEmitter.deinit()
{
  return v0;
}

uint64_t PSEAlarmSELFEmitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for PSEAlarmSELFEmitter()
{
  return self;
}

uint64_t method lookup function for PSEAlarmSELFEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PSEAlarmSELFEmitter);
}

uint64_t dispatch thunk of PSEAlarmSELFEmitter.emitPSEAlarm(alarmSignals:appLaunchSignals:task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PSEAlarmSELFEmitter.getPSEAlarmFollowupAction(siriAlarm:userAlarm:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)(a1, a2, a3);
}

uint64_t SiriTaskEngagementFeatureDonator.deinit()
{
  return v0;
}

uint64_t SiriTaskEngagementFeatureDonator.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t SiriTaskEngagementFeatureDonator.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SiriTaskEngagementFeatureDonator.init()()
{
  return v0;
}

uint64_t specialized static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v105 = a2;
  uint64_t v106 = a3;
  uint64_t v4 = type metadata accessor for ReliabilityCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v101 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v107 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for JSONEncodingOptions();
  uint64_t v104 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v103 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  uint64_t v95 = *(void *)(v12 - 8);
  uint64_t v96 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v94 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ProtoTaskFeatureSet();
  uint64_t v98 = *(void *)(v14 - 8);
  uint64_t v99 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  unsigned int v93 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  char v92 = (char *)&v84 - v18;
  MEMORY[0x270FA5388](v17);
  id v97 = (char *)&v84 - v19;
  uint64_t v20 = type metadata accessor for ProtoSiriTaskEvaluationSummary();
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v21 = type metadata accessor for ProtoTaskEngagementType();
  MEMORY[0x270FA5388](v21 - 8);
  unint64_t v23 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for ProtoSiriTaskEngagement();
  MEMORY[0x270FA5388](v108);
  uint64_t v26 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
    uint64_t v63 = *MEMORY[0x263F75000];
    uint64_t v64 = type metadata accessor for EngagementFeaturizationError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 104))(v7, v63, v64);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F75110], v4);
    Logger.error(_:_:)(0xD00000000000003DLL, 0x8000000224F69890, (uint64_t)v7);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v89 = v10;
  uint64_t v91 = v24;
  uint64_t v102 = v8;
  unint64_t v100 = v7;
  type metadata accessor for PSEFeatureStoreManager();
  swift_retain();
  static PSEFeatureStoreManager.shared.getter();
  static PSEFeatureStoreStreamIdConstants.SiriTaskEngagementStreamId.getter();
  uint64_t v27 = PSEFeatureStoreManager.getStream(streamId:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v90 = v27;
  if (!v27)
  {
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v102, (uint64_t)static Logger.engagement);
    uint64_t v81 = *MEMORY[0x263F74FF8];
    uint64_t v82 = type metadata accessor for EngagementFeaturizationError();
    uint64_t v7 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v82 - 8) + 104))(v100, v81, v82);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F75110], v4);
    Logger.error(_:_:)(0xD00000000000003ELL, 0x8000000224F698D0, (uint64_t)v7);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v88 = v5;
  uint64_t v85 = v4;
  uint64_t v28 = ProtoSiriTaskEngagement.init()();
  unint64_t v29 = (uint64_t (**)(void))(*(void *)a1 + 176);
  id v87 = *v29;
  uint64_t v86 = v29;
  ((void (*)(uint64_t))v87)(v28);
  ProtoSiriTaskEngagement.taskID.setter();
  type metadata accessor for Utils();
  uint64_t v30 = (*(uint64_t (**)(void))(*(void *)a1 + 248))();
  specialized static Utils.formulateIntentTypeName(intentTypeName:)(v30, v31);
  swift_bridgeObjectRelease();
  ProtoSiriTaskEngagement.taskName.setter();
  uint64_t v32 = ProtoSiriTaskEngagement.taskName.getter();
  static Utils.deriveEngagmentType(from:)(v32, v33, (uint64_t)v23);
  swift_bridgeObjectRelease();
  ProtoSiriTaskEngagement.engagementType.setter();
  SiriExecutionTask.toProto()();
  ProtoSiriTaskEngagement.evaluationSummary.setter();
  ProtoSiriTaskEngagement.followupTimeWindowInMs.setter();
  if (v105)
  {
    uint64_t v34 = *(void (**)(uint64_t))(*(void *)v105 + 176);
    uint64_t v35 = swift_retain();
    v34(v35);
    ProtoSiriTaskEngagement.previousTaskID.setter();
    swift_release();
  }
  uint64_t v109 = v106;
  swift_bridgeObjectRetain();
  uint64_t v36 = v111;
  Swift::Int v37 = specialized MutableCollection<>.sort(by:)(&v109);
  if (v36)
  {
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  char v38 = 0;
  char v39 = v109;
  long long v40 = (uint64_t (**)(Swift::Int))(*(void *)a1 + 296);
  long long v41 = *v40;
  uint64_t v42 = (*v40)(v37);
  char v43 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 184))(v42);
  uint64_t v44 = swift_release();
  uint64_t v45 = v88;
  if ((v43 & 1) == 0)
  {
    uint64_t v46 = v41(v44);
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 192))(v46);
    uint64_t v48 = swift_release();
    if ((v47 & 1) == 0)
    {
      uint64_t v49 = v41(v48);
      char v50 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 240))(v49);
      swift_release();
      if ((v50 & 1) == 0)
      {
        unint64_t v51 = v39[2];
        if (v51)
        {
          id v111 = 0;
          unint64_t v52 = v94;
          uint64_t v53 = v95;
          char v54 = *(void (**)(char *))(v95 + 16);
          uint64_t v106 = (void *)((char *)v39
                          + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80)));
          uint64_t v55 = v96;
          v54(v94);
          int v56 = v92;
          ProtoTaskEngagementFeatureSet.featureSet.getter();
          (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v55);
          char v38 = v97;
          uint64_t v57 = v98;
          uint64_t v58 = v99;
          (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v97, v56, v99);
          (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v93, v38, v58);
          ProtoSiriTaskEngagement.siriTaskFeatureSet.setter();
          if (v39[2] < v51)
          {
            __break(1u);
          }
          else
          {
            type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain_n();
            uint64_t v59 = swift_dynamicCastClass();
            if (!v59)
            {
              swift_release();
              uint64_t v59 = MEMORY[0x263F8EE78];
            }
            uint64_t v60 = *(void *)(v59 + 16);
            swift_release();
            char v38 = v111;
            if (v60 == v51 - 1)
            {
              uint64_t v61 = swift_dynamicCastClass();
              uint64_t v62 = v104;
              if (!v61) {
                swift_release();
              }
              goto LABEL_16;
            }
          }
          swift_release();
          specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v39, (uint64_t)v106, 1, (2 * v51) | 1);
          uint64_t v62 = v104;
LABEL_16:
          swift_release();
          (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
          goto LABEL_21;
        }
      }
    }
  }
  uint64_t v62 = v104;
LABEL_21:
  ProtoSiriTaskEngagement.followupUserInitatedEngagements.setter();
  uint64_t v65 = v103;
  JSONEncodingOptions.init()();
  lazy protocol witness table accessor for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement();
  id v66 = v38;
  Message.jsonString(options:)();
  if (v38)
  {
    uint64_t v67 = v45;

    (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v89);
    if (one-time initialization token for engagement != -1) {
      swift_once();
    }
    uint64_t v68 = v102;
    uint64_t v69 = __swift_project_value_buffer(v102, (uint64_t)static Logger.engagement);
    uint64_t v70 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v107, v69, v68);
    uint64_t v109 = 0;
    unint64_t v110 = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v71._uint64_t countAndFlagsBits = 0xD000000000000042;
    v71._int64_t object = (void *)0x8000000224F69910;
    String.append(_:)(v71);
    v72._uint64_t countAndFlagsBits = v87();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    double v73 = v109;
    unint64_t v74 = v110;
    uint64_t v75 = *MEMORY[0x263F75008];
    uint64_t v76 = type metadata accessor for EngagementFeaturizationError();
    uint64_t v77 = (uint64_t)v100;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v76 - 8) + 104))(v100, v75, v76);
    uint64_t v78 = v85;
    (*(void (**)(uint64_t, void, uint64_t))(v67 + 104))(v77, *MEMORY[0x263F75110], v85);
    unint64_t v79 = v107;
    Logger.error(_:_:)((uint64_t)v73, v74, v77);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v77, v78);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v79, v102);
    return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v26, v108);
  }
  else
  {
    uint64_t v83 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v65, v89);
    ((void (*)(uint64_t))v87)(v83);
    dispatch thunk of PSEFeatureStoreDonator.writeFeature(interactionId:jsonStr:)();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v26, v108);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for SiriTaskEngagementFeatureDonator()
{
  return self;
}

uint64_t method lookup function for SiriTaskEngagementFeatureDonator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SiriTaskEngagementFeatureDonator);
}

uint64_t dispatch thunk of static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of SiriTaskEngagementFeatureDonator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unint64_t lazy protocol witness table accessor for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement()
{
  unint64_t result = lazy protocol witness table cache variable for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement;
  if (!lazy protocol witness table cache variable for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement)
  {
    type metadata accessor for ProtoSiriTaskEngagement();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement);
  }
  return result;
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEE2E8]();
}

uint64_t DateInterval.duration.getter()
{
  return MEMORY[0x270EEE328]();
}

uint64_t type metadata accessor for DateInterval()
{
  return MEMORY[0x270EEE338]();
}

uint64_t URLQueryItem.name.getter()
{
  return MEMORY[0x270EEE3F0]();
}

uint64_t URLQueryItem.value.getter()
{
  return MEMORY[0x270EEE408]();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return MEMORY[0x270EEE410]();
}

uint64_t URLComponents.queryItems.getter()
{
  return MEMORY[0x270EEE4B0]();
}

uint64_t URLComponents.init(string:)()
{
  return MEMORY[0x270EEE5C0]();
}

uint64_t type metadata accessor for URLComponents()
{
  return MEMORY[0x270EEE610]();
}

uint64_t PersonNameComponents.givenName.getter()
{
  return MEMORY[0x270EEF320]();
}

uint64_t PersonNameComponents.familyName.getter()
{
  return MEMORY[0x270EEF340]();
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEF410]();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return MEMORY[0x270EEF460]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x270EEF830]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0178]();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return MEMORY[0x270EF02B0]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x270EF02C8]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x270EF07E0]();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return MEMORY[0x270EF0898]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x270EF0998]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x270EF09A8]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x270EF09B8]();
}

uint64_t Date.init(timeIntervalSinceNow:)()
{
  return MEMORY[0x270EF09D8]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0BA8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x270EF0C58]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x270EF0C68]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x270EF0C88]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0CB8]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t Locale.init(identifier:)()
{
  return MEMORY[0x270EF0D78]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t static Calendar.current.getter()
{
  return MEMORY[0x270EF13D8]();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return MEMORY[0x270EF1428]();
}

uint64_t Calendar.component(_:from:)()
{
  return MEMORY[0x270EF1430]();
}

uint64_t type metadata accessor for Calendar()
{
  return MEMORY[0x270EF1440]();
}

uint64_t ProtoAlarmTaskFeatureSet.alarmIdentifier.setter()
{
  return MEMORY[0x270F72018]();
}

uint64_t ProtoAlarmTaskFeatureSet.init()()
{
  return MEMORY[0x270F72020]();
}

uint64_t type metadata accessor for ProtoAlarmTaskFeatureSet()
{
  return MEMORY[0x270F72028]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.actionState.getter()
{
  return MEMORY[0x270F72058]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.actionState.setter()
{
  return MEMORY[0x270F72060]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.appBundleID.setter()
{
  return MEMORY[0x270F72068]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.mediaEntity.modify()
{
  return MEMORY[0x270F72070]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.mediaEntity.getter()
{
  return MEMORY[0x270F72078]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.playDurationInSec.getter()
{
  return MEMORY[0x270F72080]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.playDurationInSec.setter()
{
  return MEMORY[0x270F72088]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.mediaContentLengthInSec.setter()
{
  return MEMORY[0x270F72090]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.init()()
{
  return MEMORY[0x270F72098]();
}

uint64_t type metadata accessor for ProtoPlayMediaTaskFeatureSet()
{
  return MEMORY[0x270F720A0]();
}

uint64_t ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.getter()
{
  return MEMORY[0x270F720B8]();
}

uint64_t ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.setter()
{
  return MEMORY[0x270F720C0]();
}

uint64_t ProtoNavigationTaskFeatureSet.isUserFollowup.getter()
{
  return MEMORY[0x270F720C8]();
}

uint64_t ProtoNavigationTaskFeatureSet.isUserFollowup.setter()
{
  return MEMORY[0x270F720D0]();
}

uint64_t ProtoNavigationTaskFeatureSet.followupContext.getter()
{
  return MEMORY[0x270F720D8]();
}

uint64_t ProtoNavigationTaskFeatureSet.followupContext.setter()
{
  return MEMORY[0x270F720E0]();
}

uint64_t ProtoNavigationTaskFeatureSet.init()()
{
  return MEMORY[0x270F720E8]();
}

uint64_t type metadata accessor for ProtoNavigationTaskFeatureSet()
{
  return MEMORY[0x270F720F0]();
}

uint64_t ProtoTaskFeatureSet.navigationFeatureSet.modify()
{
  return MEMORY[0x270F720F8]();
}

uint64_t ProtoTaskFeatureSet.navigationFeatureSet.getter()
{
  return MEMORY[0x270F72100]();
}

uint64_t ProtoTaskFeatureSet.navigationFeatureSet.setter()
{
  return MEMORY[0x270F72108]();
}

uint64_t ProtoTaskFeatureSet.alarmFeatureSet.setter()
{
  return MEMORY[0x270F72118]();
}

uint64_t ProtoTaskFeatureSet.playMediaFeatureSet.modify()
{
  return MEMORY[0x270F72128]();
}

uint64_t ProtoTaskFeatureSet.playMediaFeatureSet.getter()
{
  return MEMORY[0x270F72130]();
}

uint64_t ProtoTaskFeatureSet.playMediaFeatureSet.setter()
{
  return MEMORY[0x270F72138]();
}

uint64_t ProtoTaskFeatureSet.init()()
{
  return MEMORY[0x270F72148]();
}

uint64_t type metadata accessor for ProtoTaskFeatureSet()
{
  return MEMORY[0x270F72150]();
}

uint64_t type metadata accessor for ProtoSiriTaskSuccessType()
{
  return MEMORY[0x270F72158]();
}

uint64_t type metadata accessor for ProtoSiriTaskCompletionType()
{
  return MEMORY[0x270F72160]();
}

uint64_t ProtoSiriTaskInteractionType.includesPrompt.setter()
{
  return MEMORY[0x270F72170]();
}

uint64_t ProtoSiriTaskInteractionType.includesConfirm.setter()
{
  return MEMORY[0x270F72180]();
}

uint64_t ProtoSiriTaskInteractionType.includesDisambiguate.setter()
{
  return MEMORY[0x270F72190]();
}

uint64_t ProtoSiriTaskInteractionType.includesUnsupportedPrompt.setter()
{
  return MEMORY[0x270F72198]();
}

uint64_t ProtoSiriTaskInteractionType.init()()
{
  return MEMORY[0x270F721A0]();
}

uint64_t type metadata accessor for ProtoSiriTaskInteractionType()
{
  return MEMORY[0x270F721A8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.requestIds.setter()
{
  return MEMORY[0x270F721B8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.taskSuccess.setter()
{
  return MEMORY[0x270F721C8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.endTimestampMs.setter()
{
  return MEMORY[0x270F721D8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.taskCompletion.setter()
{
  return MEMORY[0x270F721E8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.interactionType.setter()
{
  return MEMORY[0x270F721F8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.startTimestampMs.setter()
{
  return MEMORY[0x270F72208]();
}

uint64_t ProtoSiriTaskEvaluationSummary.init()()
{
  return MEMORY[0x270F72210]();
}

uint64_t type metadata accessor for ProtoSiriTaskEvaluationSummary()
{
  return MEMORY[0x270F72218]();
}

uint64_t ProtoSiriTaskEngagement.siriTaskFeatureSet.getter()
{
  return MEMORY[0x270F72228]();
}

uint64_t ProtoSiriTaskEngagement.siriTaskFeatureSet.setter()
{
  return MEMORY[0x270F72230]();
}

uint64_t ProtoSiriTaskEngagement.previousTaskID.setter()
{
  return MEMORY[0x270F72240]();
}

uint64_t ProtoSiriTaskEngagement.engagementType.getter()
{
  return MEMORY[0x270F72248]();
}

uint64_t ProtoSiriTaskEngagement.engagementType.setter()
{
  return MEMORY[0x270F72250]();
}

uint64_t ProtoSiriTaskEngagement.evaluationSummary.setter()
{
  return MEMORY[0x270F72260]();
}

uint64_t ProtoSiriTaskEngagement.followupTimeWindowInMs.setter()
{
  return MEMORY[0x270F72268]();
}

uint64_t ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter()
{
  return MEMORY[0x270F72270]();
}

uint64_t ProtoSiriTaskEngagement.followupUserInitatedEngagements.setter()
{
  return MEMORY[0x270F72278]();
}

uint64_t ProtoSiriTaskEngagement.taskID.setter()
{
  return MEMORY[0x270F72288]();
}

uint64_t ProtoSiriTaskEngagement.taskName.getter()
{
  return MEMORY[0x270F72290]();
}

uint64_t ProtoSiriTaskEngagement.taskName.setter()
{
  return MEMORY[0x270F72298]();
}

uint64_t ProtoSiriTaskEngagement.init()()
{
  return MEMORY[0x270F722A0]();
}

uint64_t type metadata accessor for ProtoSiriTaskEngagement()
{
  return MEMORY[0x270F722A8]();
}

uint64_t ProtoTaskEngagementFeatureSet.featureSet.modify()
{
  return MEMORY[0x270F722B0]();
}

uint64_t ProtoTaskEngagementFeatureSet.featureSet.getter()
{
  return MEMORY[0x270F722B8]();
}

uint64_t ProtoTaskEngagementFeatureSet.featureSet.setter()
{
  return MEMORY[0x270F722C0]();
}

uint64_t ProtoTaskEngagementFeatureSet.engagementType.setter()
{
  return MEMORY[0x270F722C8]();
}

uint64_t ProtoTaskEngagementFeatureSet.startTimestampMs.getter()
{
  return MEMORY[0x270F722D0]();
}

uint64_t ProtoTaskEngagementFeatureSet.startTimestampMs.setter()
{
  return MEMORY[0x270F722D8]();
}

uint64_t ProtoTaskEngagementFeatureSet.init()()
{
  return MEMORY[0x270F722E0]();
}

uint64_t type metadata accessor for ProtoTaskEngagementFeatureSet()
{
  return MEMORY[0x270F722E8]();
}

uint64_t type metadata accessor for ProtoTaskEngagementType()
{
  return MEMORY[0x270F722F8]();
}

uint64_t type metadata accessor for SiriUIEventDataIssues()
{
  return MEMORY[0x270F72300]();
}

uint64_t type metadata accessor for SiriExecutionEventDataIssues()
{
  return MEMORY[0x270F72308]();
}

uint64_t type metadata accessor for EngagementFeaturizationError()
{
  return MEMORY[0x270F72310]();
}

uint64_t type metadata accessor for EngagementSignalCollectionError()
{
  return MEMORY[0x270F72318]();
}

uint64_t dispatch thunk of static SiriTaskEngagementUtils.convertDateTimeToUInt64(date:)()
{
  return MEMORY[0x270F72320]();
}

uint64_t dispatch thunk of static SiriTaskEngagementUtils.formulateSimplifiedReliabilityReasonDescription(reliabilityDescription:)()
{
  return MEMORY[0x270F72328]();
}

uint64_t type metadata accessor for SiriTaskEngagementUtils()
{
  return MEMORY[0x270F72330]();
}

uint64_t static SiriTaskEngagementRetriever.retrieveAllSiriTaskEngagement(streamId:)()
{
  return MEMORY[0x270F72338]();
}

uint64_t type metadata accessor for EncodingError()
{
  return MEMORY[0x270F72348]();
}

uint64_t type metadata accessor for SELFPSELogged()
{
  return MEMORY[0x270F72350]();
}

uint64_t type metadata accessor for MapsEventDataIssues()
{
  return MEMORY[0x270F72358]();
}

uint64_t type metadata accessor for ReliabilityCategory()
{
  return MEMORY[0x270F72360]();
}

uint64_t type metadata accessor for AlarmEventDataIssues()
{
  return MEMORY[0x270F72368]();
}

uint64_t static CoreAnalyticsService.submitReliabilityAnalytics(category:reason:)()
{
  return MEMORY[0x270F72370]();
}

uint64_t dispatch thunk of PSEFeatureStoreDonator.writeFeature(interactionId:jsonStr:)()
{
  return MEMORY[0x270F72378]();
}

uint64_t static PSEFeatureStoreManager.shared.getter()
{
  return MEMORY[0x270F72380]();
}

uint64_t PSEFeatureStoreManager.getStream(streamId:)()
{
  return MEMORY[0x270F72388]();
}

uint64_t type metadata accessor for PSEFeatureStoreManager()
{
  return MEMORY[0x270F72390]();
}

uint64_t ProtoMediaEntitySignal.adamIdentifier.getter()
{
  return MEMORY[0x270F72398]();
}

uint64_t ProtoMediaEntitySignal.adamIdentifier.setter()
{
  return MEMORY[0x270F723A0]();
}

uint64_t ProtoMediaEntitySignal.album.getter()
{
  return MEMORY[0x270F723A8]();
}

uint64_t ProtoMediaEntitySignal.album.setter()
{
  return MEMORY[0x270F723B0]();
}

uint64_t ProtoMediaEntitySignal.title.getter()
{
  return MEMORY[0x270F723B8]();
}

uint64_t ProtoMediaEntitySignal.title.setter()
{
  return MEMORY[0x270F723C0]();
}

uint64_t ProtoMediaEntitySignal.artist.getter()
{
  return MEMORY[0x270F723C8]();
}

uint64_t ProtoMediaEntitySignal.artist.setter()
{
  return MEMORY[0x270F723D0]();
}

uint64_t type metadata accessor for ProtoMediaEntitySignal()
{
  return MEMORY[0x270F723D8]();
}

uint64_t ProtoNavigationFeatures.timestampInMs.getter()
{
  return MEMORY[0x270F723E0]();
}

uint64_t ProtoNavigationFeatures.timestampInMs.setter()
{
  return MEMORY[0x270F723E8]();
}

uint64_t ProtoNavigationFeatures.navigationType.getter()
{
  return MEMORY[0x270F723F0]();
}

uint64_t ProtoNavigationFeatures.navigationType.setter()
{
  return MEMORY[0x270F723F8]();
}

uint64_t ProtoNavigationFeatures.navigationAction.getter()
{
  return MEMORY[0x270F72400]();
}

uint64_t ProtoNavigationFeatures.navigationAction.setter()
{
  return MEMORY[0x270F72408]();
}

uint64_t ProtoNavigationFeatures.navigationSource.getter()
{
  return MEMORY[0x270F72410]();
}

uint64_t ProtoNavigationFeatures.navigationSource.setter()
{
  return MEMORY[0x270F72418]();
}

uint64_t ProtoNavigationFeatures.navigationActionType.getter()
{
  return MEMORY[0x270F72420]();
}

uint64_t ProtoNavigationFeatures.navigationActionType.setter()
{
  return MEMORY[0x270F72428]();
}

uint64_t ProtoNavigationFeatures.init()()
{
  return MEMORY[0x270F72430]();
}

uint64_t type metadata accessor for ProtoNavigationFeatures()
{
  return MEMORY[0x270F72438]();
}

uint64_t type metadata accessor for AppIntentEventDataIssues()
{
  return MEMORY[0x270F72440]();
}

uint64_t type metadata accessor for AppLaunchEventDataIssues()
{
  return MEMORY[0x270F72448]();
}

uint64_t ProtoContactEntitySignal.familyName.getter()
{
  return MEMORY[0x270F72450]();
}

uint64_t ProtoContactEntitySignal.givenName.getter()
{
  return MEMORY[0x270F72458]();
}

uint64_t type metadata accessor for ProtoContactEntitySignal()
{
  return MEMORY[0x270F72460]();
}

uint64_t type metadata accessor for NowPlayingEventDataIssues()
{
  return MEMORY[0x270F72468]();
}

uint64_t ProtoLocationEntitySignal.poiIdentifier.setter()
{
  return MEMORY[0x270F72470]();
}

uint64_t ProtoLocationEntitySignal.init()()
{
  return MEMORY[0x270F72478]();
}

uint64_t type metadata accessor for ProtoLocationEntitySignal()
{
  return MEMORY[0x270F72480]();
}

uint64_t type metadata accessor for TranscriptEventDataIssues()
{
  return MEMORY[0x270F72488]();
}

uint64_t ProtoNavigationFollowupType.init()()
{
  return MEMORY[0x270F72490]();
}

uint64_t type metadata accessor for ProtoNavigationFollowupType()
{
  return MEMORY[0x270F72498]();
}

uint64_t static PSEFeatureStoreStreamIdConstants.SiriTaskEngagementStreamId.getter()
{
  return MEMORY[0x270F724A0]();
}

uint64_t ProtoNavigationUserFollowupContext.followupType.getter()
{
  return MEMORY[0x270F724A8]();
}

uint64_t ProtoNavigationUserFollowupContext.followupType.setter()
{
  return MEMORY[0x270F724B0]();
}

uint64_t ProtoNavigationUserFollowupContext.timestampInMs.setter()
{
  return MEMORY[0x270F724B8]();
}

uint64_t ProtoNavigationUserFollowupContext.locationEntity.setter()
{
  return MEMORY[0x270F724C0]();
}

uint64_t ProtoNavigationUserFollowupContext.navigationAction.setter()
{
  return MEMORY[0x270F724C8]();
}

uint64_t ProtoNavigationUserFollowupContext.navigationActionType.setter()
{
  return MEMORY[0x270F724D0]();
}

uint64_t ProtoNavigationUserFollowupContext.init()()
{
  return MEMORY[0x270F724D8]();
}

uint64_t type metadata accessor for ProtoNavigationUserFollowupContext()
{
  return MEMORY[0x270F724E0]();
}

uint64_t type metadata accessor for HomeKitClientAccessoryControlEventDataIssues()
{
  return MEMORY[0x270F724E8]();
}

uint64_t JSONEncodingOptions.init()()
{
  return MEMORY[0x270F44A90]();
}

uint64_t type metadata accessor for JSONEncodingOptions()
{
  return MEMORY[0x270F44A98]();
}

uint64_t Message.jsonString(options:)()
{
  return MEMORY[0x270F44C70]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x270FA2E30]();
}

uint64_t PhoneticEmbedder.embeddings(of:completion:)()
{
  return MEMORY[0x270EFE278]();
}

uint64_t type metadata accessor for PhoneticEmbedder.InputFormat()
{
  return MEMORY[0x270EFE280]();
}

uint64_t type metadata accessor for PhoneticEmbedder.LoadingOption()
{
  return MEMORY[0x270EFE288]();
}

uint64_t PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)()
{
  return MEMORY[0x270EFE298]();
}

uint64_t type metadata accessor for PhoneticEmbedder()
{
  return MEMORY[0x270EFE2A8]();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return MEMORY[0x270FA0998]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return MEMORY[0x270FA09D0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x270F9D060]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t Character.isSymbol.getter()
{
  return MEMORY[0x270F9D3E8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x270F9D478]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x270F9D488]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x270F9D490]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x270EF1A10]();
}

uint64_t String.init<A>(bytes:encoding:)()
{
  return MEMORY[0x270EF1A18]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x270F9D5F8]();
  result._int64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x270F9D740]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

{
  MEMORY[0x270F9D798](a1._countAndFlagsBits, a1._object);
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = MEMORY[0x270F9D7D8]();
  result.value._int64_t object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x270F9D800]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x270F9D810]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x270F9D860]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D878](a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D880](a1._countAndFlagsBits, a1._object);
}

uint64_t Sequence.filter(_:)()
{
  return MEMORY[0x270F9D990]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9DBA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x270F9DBD0]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x270F9DC30]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x270F9DC60]();
}

Swift::Int __swiftcall Array._getCount()()
{
  return MEMORY[0x270F9DCB0]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1BD8]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x270FA1E20]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1C18]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x270F9DF58]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x270F9DFD0]();
}

uint64_t INInteraction.extractFeatures()()
{
  return MEMORY[0x270F724F0]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return MEMORY[0x270EF1F60]();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)()
{
  return MEMORY[0x270EF1F70]();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return MEMORY[0x270FA0C20]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return MEMORY[0x270FA0DD0]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x270EF20F8]();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x270EF2198](integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x270FA1190]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x270EF23E8]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x270EF25B0]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

uint64_t type metadata accessor for _SetStorage()
{
  return MEMORY[0x270F9E978]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA38]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x270F9F088]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F250]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x270F9F258]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2F0]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x270F9F360]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F390]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3B0]();
}

{
  return MEMORY[0x270F9F3C0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

{
  return MEMORY[0x270F9F430]();
}

{
  return MEMORY[0x270F9F438]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9F4C0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x270F9F4C8](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x270F9F920]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x270EF2680]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x270F9FC28]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t BMAppIntentInvocationSourceAsString()
{
  return MEMORY[0x270F10A30]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x270F10AF0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

{
  return MEMORY[0x270F9A3C0]();
}

{
  return MEMORY[0x270F9A3C8]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x270FA0250]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x270FA0290]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x270FA0298]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}